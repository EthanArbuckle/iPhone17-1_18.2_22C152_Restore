unint64_t sub_1DD2AAC20(uint64_t a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t *v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  BOOL v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _OWORD *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  void *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _OWORD *v63;
  long long *v64;
  long long v65;
  _DWORD *v66;
  unint64_t v67;
  unint64_t v68;
  unsigned __int8 *v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  __int16 v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  unint64_t v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  unsigned __int8 *v82;
  char *v83;
  uint64_t v84;
  _OWORD *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  _OWORD *v89;
  long long *v90;
  long long v91;
  unint64_t v92;
  _OWORD *v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  _OWORD *v97;
  long long *v98;
  long long v99;
  unint64_t v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  unint64_t v108;
  _OWORD *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  unint64_t v122;
  uint64_t *v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  char v134;
  uint64_t *v135;
  unint64_t v136;
  uint64_t v137;
  unsigned int v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  _OWORD *v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  char *v156;
  void *v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  _OWORD *v162;
  long long *v163;
  long long v164;
  _DWORD *v165;
  unint64_t v166;
  unint64_t v167;
  unsigned __int8 *v168;
  unsigned __int8 *v169;
  unsigned __int8 *v170;
  __int16 v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  unint64_t v175;
  void *v176;
  uint64_t v177;
  unint64_t v178;
  unsigned __int8 *v179;
  unsigned __int8 *v180;
  unsigned __int8 *v181;
  unsigned __int8 *v182;
  char *v183;
  uint64_t v184;
  _OWORD *v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  _OWORD *v189;
  long long *v190;
  long long v191;
  unint64_t v192;
  _OWORD *v193;
  uint64_t v194;
  unint64_t v195;
  _OWORD *v196;
  long long *v197;
  long long v198;
  unint64_t v199;
  unint64_t v200;
  unsigned int v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  unint64_t v206;
  unint64_t v207;
  _OWORD *v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  unsigned int v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unsigned int v220;
  unint64_t v221;
  uint64_t *v224;
  unsigned int v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  uint64_t v232;
  char v233;
  uint64_t *v234;
  unint64_t v235;
  uint64_t v236;
  unsigned int v237;
  unsigned int v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  unint64_t v243;
  uint64_t v245;
  unint64_t v246;
  char *v247;
  unint64_t v248;
  unint64_t v249;
  uint64_t v250;
  _OWORD *v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  char *v255;
  void *v256;
  unint64_t v257;
  unint64_t v258;
  uint64_t v259;
  unint64_t v260;
  _OWORD *v261;
  long long *v262;
  long long v263;
  _DWORD *v264;
  unint64_t v265;
  unint64_t v266;
  unsigned __int8 *v267;
  unsigned __int8 *v268;
  unsigned __int8 *v269;
  __int16 v270;
  uint64_t v271;
  char *v272;
  uint64_t v273;
  unint64_t v274;
  void *v275;
  uint64_t v276;
  unint64_t v277;
  unsigned __int8 *v278;
  unsigned __int8 *v279;
  unsigned __int8 *v280;
  unsigned __int8 *v281;
  char *v282;
  uint64_t v283;
  _OWORD *v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  _OWORD *v288;
  long long *v289;
  long long v290;
  unint64_t v291;
  _OWORD *v292;
  uint64_t v293;
  unint64_t v294;
  _OWORD *v295;
  long long *v296;
  long long v297;
  unint64_t v298;
  unint64_t v299;
  unsigned int v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  char *v304;
  unint64_t v305;
  unint64_t v306;
  _OWORD *v307;
  uint64_t v308;
  unint64_t v309;
  uint64_t v310;
  unsigned int v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  unint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unsigned int v319;
  unint64_t v320;
  int *v323;
  unsigned int v324;
  uint64_t v325;
  uint64_t v326;
  unsigned int v327;
  unsigned int v328;
  int v329;
  unint64_t v330;
  uint64_t v331;
  char v332;
  int *v333;
  unsigned int v334;
  uint64_t v335;
  unsigned int v336;
  unsigned int v337;
  int v338;
  uint64_t v339;
  uint64_t v340;
  unint64_t v341;
  unint64_t v342;
  uint64_t v344;
  unint64_t v345;
  char *v346;
  unint64_t v347;
  unint64_t v348;
  uint64_t v349;
  _OWORD *v350;
  uint64_t v351;
  uint64_t v352;
  unint64_t v353;
  char *v354;
  void *v355;
  unint64_t v356;
  unint64_t v357;
  uint64_t v358;
  unint64_t v359;
  _OWORD *v360;
  long long *v361;
  long long v362;
  _DWORD *v363;
  unint64_t v364;
  unint64_t v365;
  unsigned __int8 *v366;
  unsigned __int8 *v367;
  unsigned __int8 *v368;
  __int16 v369;
  uint64_t v370;
  uint64_t v371;
  unint64_t v372;
  void *v373;
  uint64_t v374;
  unint64_t v375;
  unsigned __int8 *v376;
  unsigned __int8 *v377;
  unsigned __int8 *v378;
  unsigned __int8 *v379;
  char *v380;
  uint64_t v381;
  _OWORD *v382;
  uint64_t v383;
  uint64_t v384;
  unint64_t v385;
  _OWORD *v386;
  long long *v387;
  long long v388;
  unint64_t v389;
  _OWORD *v390;
  unint64_t v391;
  uint64_t v392;
  unint64_t v393;
  _OWORD *v394;
  long long *v395;
  long long v396;
  unint64_t v397;
  unsigned int v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  char *v402;
  unint64_t v403;
  unint64_t v404;
  _OWORD *v405;
  uint64_t v406;
  unint64_t v407;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  unint64_t v413;
  unint64_t v414;
  unint64_t v415;
  unint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  unint64_t v421;
  unint64_t v422;
  unint64_t v423;
  unint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  unsigned int v441;
  unsigned int v442;
  unsigned int v443;
  unsigned int v444;
  unint64_t v445;
  unint64_t v446;
  unint64_t v447;
  unint64_t v448;
  char *v449;
  char *v450;
  char *v451;
  char *v452;
  unsigned int v453;
  unsigned int *v454;
  unsigned int *v455;
  unsigned int *v456;
  unsigned int *v457;
  char *v458;
  char *v459;
  char *v460;
  char *v461;
  int v462;
  int v463;
  int v464;
  int v465;
  unsigned __int8 *v466;
  unsigned __int8 *v467;
  unsigned __int8 *v468;
  unsigned __int8 *v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  unint64_t v474;
  int v475;
  int v476;
  int v477;
  int v478;
  unint64_t v479;
  uint64_t v480;

  v6 = *(_DWORD *)(a1 + 272);
  v480 = a2;
  if (v6 == 5)
  {
    v112 = *(void *)(a1 + 112);
    v113 = *(_DWORD *)(a1 + 276);
    if (v113) {
      v114 = v113;
    }
    else {
      v114 = 1;
    }
    v115 = *(void *)(a1 + 8);
    v116 = *(unsigned int *)(a1 + 24);
    v479 = a4 + a5;
    v117 = a4 + a5 - 8;
    v13 = a3[1];
    v453 = *a3;
    v118 = *(void *)(a1 + 248);
    v119 = *(void *)(v118 + 112);
    v471 = *(unsigned int *)(v118 + 24);
    v120 = *(void *)(v118 + 8);
    v459 = *(char **)v118;
    v121 = *(_DWORD *)(v118 + 264);
    if (*(_DWORD *)(a1 + 296) && v121 <= 0x3D)
    {
      v122 = 0;
      do
      {
        _X12 = v119 + v122;
        __asm { PRFM            #2, [X12] }
        v122 += 64;
      }
      while (v122 < 4 << v121);
    }
    v125 = (uint64_t *)(a4 + v114);
    if (a4 + v114 <= v117)
    {
      v467 = (unsigned __int8 *)(v115 + v116);
      v414 = v120 + v471;
      v126 = v116 + v120 - v459;
      if (v459 + a4 - (v115 + v116) == v120 + v471) {
        v27 = a4 + 1;
      }
      else {
        v27 = a4;
      }
      v463 = 64 - *(_DWORD *)(a1 + 264);
      v127 = 56 - v121;
      v476 = v116 - 1;
      v446 = v117;
      v450 = (char *)(v479 - 32);
      v422 = v479 - 7;
      v410 = v120 - 1;
      v418 = v115 + 12;
      v430 = v120 - v126;
      v434 = v120;
      v128 = v114;
      v438 = v119;
      v442 = v116 + v120 - v459;
      v455 = a3;
      v426 = v114;
      while (1)
      {
        v474 = a4;
        v129 = 0xCF1BBCDCBB000000 * *(void *)v27;
        v130 = *(unsigned int *)(v119 + ((v129 >> v127 >> 6) & 0x3FFFFFFFFFFFFFCLL));
        v131 = (v129 >> v127) ^ v130;
        v132 = v27 + 256;
        v133 = v128;
        v134 = v463;
        while (1)
        {
          v135 = v125;
          v136 = v129 >> v463;
          v137 = *(unsigned int *)(v112 + 4 * (v129 >> v463));
          v138 = v27 - v115;
          v139 = v27 - v115 - v453 + 1;
          v140 = *v135;
          *(_DWORD *)(v112 + 4 * v136) = v27 - v115;
          if (v476 - v139 >= 3)
          {
            v141 = v120 + v139 - v126;
            if (v139 >= v116) {
              v141 = v115 + v139;
            }
            if (*(_DWORD *)v141 == *(_DWORD *)(v27 + 1))
            {
              v147 = v27 + 1;
              if (v139 >= v116) {
                v148 = (char *)v479;
              }
              else {
                v148 = v459;
              }
              v149 = sub_1DD2A6010((void *)(v27 + 5), (char *)(v141 + 4), v479, v148, v467);
              a2 = v480;
              v150 = v149;
              v151 = v147 - v474;
              v152 = *(_OWORD **)(v480 + 24);
              if (v147 > (unint64_t)v450)
              {
                sub_1DD29DBFC(v152, (char *)v474, v147, v450);
                a2 = v480;
                v117 = v446;
                v120 = v434;
                v119 = v438;
                v126 = v442;
                v134 = v463;
                v153 = v453;
                goto LABEL_166;
              }
              *v152 = *(_OWORD *)v474;
              v160 = *(void *)(v480 + 24);
              v117 = v446;
              if ((unint64_t)v151 <= 0x10)
              {
                *(void *)(v480 + 24) = v160 + v151;
                v154 = *(void *)(v480 + 8);
                v120 = v434;
                v119 = v438;
                v126 = v442;
                v134 = v463;
                v153 = v453;
              }
              else
              {
                *(_OWORD *)(v160 + 16) = *(_OWORD *)(v474 + 16);
                v120 = v434;
                v119 = v438;
                v126 = v442;
                v134 = v463;
                v153 = v453;
                if (v151 >= 33)
                {
                  v161 = v160 + v151;
                  v162 = (_OWORD *)(v160 + 32);
                  v163 = (long long *)(v474 + 48);
                  do
                  {
                    *v162 = *(v163 - 1);
                    v164 = *v163;
                    v163 += 2;
                    v162[1] = v164;
                    v162 += 2;
                  }
                  while ((unint64_t)v162 < v161);
                }
LABEL_166:
                *(void *)(a2 + 24) += v151;
                v154 = *(void *)(a2 + 8);
                if ((unint64_t)v151 >= 0x10000)
                {
                  v155 = (unint64_t)(v154 - *(void *)a2) >> 3;
                  *(_DWORD *)(a2 + 72) = 1;
                  *(_DWORD *)(a2 + 76) = v155;
                }
              }
              v167 = v150 + 4;
              *(_WORD *)(v154 + 4) = v151;
              *(_DWORD *)v154 = 1;
              v171 = v150 + 1;
              v172 = v153;
              if ((v150 + 1) >> 16) {
                goto LABEL_236;
              }
              goto LABEL_237;
            }
          }
          v142 = v127;
          if (!(_BYTE)v131)
          {
            v143 = v130;
            v144 = (unint64_t)v130 >> 8;
            if (v144 > v471
              && *(_DWORD *)(v120 + v144) == *(_DWORD *)v27
              && v137 <= v116)
            {
              v167 = sub_1DD2A6010((void *)(v27 + 4), (char *)(v120 + v144 + 4), v479, v459, v467) + 4;
              if (v27 <= v474)
              {
                a2 = v480;
                v117 = v446;
                v173 = (char *)(v479 - 32);
                v126 = v442;
                v127 = v142;
              }
              else
              {
                v168 = (unsigned __int8 *)(v410 + (v143 >> 8));
                v169 = (unsigned __int8 *)(v27 - 1);
                a2 = v480;
                v117 = v446;
                v126 = v442;
                v127 = v142;
                while (*v169 == *v168)
                {
                  ++v167;
                  v170 = v169 - 1;
                  if ((unint64_t)v168 > v414)
                  {
                    --v168;
                    v46 = (unint64_t)v169-- > v474;
                    if (v46) {
                      continue;
                    }
                  }
                  v27 = (unint64_t)(v170 + 1);
                  goto LABEL_223;
                }
                v27 = (unint64_t)(v169 + 1);
LABEL_223:
                v173 = (char *)(v479 - 32);
              }
              v147 = v27;
              v184 = v27 - v474;
              v193 = *(_OWORD **)(a2 + 24);
              if (v27 > (unint64_t)v173)
              {
                sub_1DD29DBFC(v193, (char *)v474, v27, v173);
                v126 = v442;
                v117 = v446;
                a2 = v480;
                v120 = v434;
                v119 = v438;
                v134 = v463;
                v186 = v453;
                goto LABEL_230;
              }
              *v193 = *(_OWORD *)v474;
              v194 = *(void *)(a2 + 24);
              v120 = v434;
              v119 = v438;
              v134 = v463;
              if ((unint64_t)v184 <= 0x10)
              {
                *(void *)(a2 + 24) = v194 + v184;
                v154 = *(void *)(a2 + 8);
                v186 = v453;
              }
              else
              {
                *(_OWORD *)(v194 + 16) = *(_OWORD *)(v474 + 16);
                v186 = v453;
                if (v184 >= 33)
                {
                  v195 = v194 + v184;
                  v196 = (_OWORD *)(v194 + 32);
                  v197 = (long long *)(v474 + 48);
                  do
                  {
                    *v196 = *(v197 - 1);
                    v198 = *v197;
                    v197 += 2;
                    v196[1] = v198;
                    v196 += 2;
                  }
                  while ((unint64_t)v196 < v195);
                }
LABEL_230:
                *(void *)(a2 + 24) += v184;
                v154 = *(void *)(a2 + 8);
                if ((unint64_t)v184 >= 0x10000)
                {
                  v199 = (unint64_t)(v154 - *(void *)a2) >> 3;
                  *(_DWORD *)(a2 + 72) = 1;
                  *(_DWORD *)(a2 + 76) = v199;
                }
              }
              v172 = v138 - v126 - v144;
              goto LABEL_235;
            }
          }
          if (v137 > v116)
          {
            v146 = v115 + v137;
            if (*(_DWORD *)(v115 + v137) == *(_DWORD *)v27) {
              break;
            }
          }
          if ((unint64_t)v135 >= v132) {
            ++v133;
          }
          v125 = (uint64_t *)((char *)v135 + v133);
          if ((unint64_t)v135 + v133 > v117)
          {
LABEL_511:
            LODWORD(v102) = v13;
            v27 = v474;
            goto LABEL_512;
          }
          v129 = 0xCF1BBCDCBB000000 * v140;
          v127 = v142;
          v132 += (unint64_t)((unint64_t)v135 >= v132) << 8;
          LODWORD(v130) = *(_DWORD *)(v119 + ((v129 >> v142 >> 6) & 0x3FFFFFFFFFFFFFCLL));
          LOBYTE(v131) = (v129 >> v142) ^ v130;
          v27 = (unint64_t)v135;
        }
        v156 = (char *)(v27 + 4);
        v157 = (void *)(v146 + 4);
        if (v422 <= v27 + 4)
        {
          v165 = (_DWORD *)(v27 + 4);
          goto LABEL_177;
        }
        v158 = *(void *)v156 ^ *v157;
        if (v158)
        {
          v159 = __clz(__rbit64(v158)) >> 3;
          goto LABEL_202;
        }
        v174 = 0;
        v175 = v27 + 12;
        while (2)
        {
          v176 = (void *)(v175 + v174);
          if (v175 + v174 >= v422)
          {
            v165 = (_DWORD *)(v27 + v174 + 12);
            v157 = (void *)(v418 + v137 + v174);
LABEL_177:
            if ((unint64_t)v165 < v479 - 3 && *(_DWORD *)v157 == *v165)
            {
              ++v165;
              v157 = (void *)((char *)v157 + 4);
            }
            if ((unint64_t)v165 < v479 - 1 && *(unsigned __int16 *)v157 == *(unsigned __int16 *)v165)
            {
              v165 = (_DWORD *)((char *)v165 + 2);
              v157 = (void *)((char *)v157 + 2);
            }
            if ((unint64_t)v165 < v479 && *(unsigned __int8 *)v157 == *(unsigned __int8 *)v165) {
              v165 = (_DWORD *)((char *)v165 + 1);
            }
            v166 = a4;
            v159 = (char *)v165 - v156;
            goto LABEL_203;
          }
          v177 = *(void *)(v418 + v137 + v174);
          v174 += 8;
          v178 = *v176 ^ v177;
          if (!v178) {
            continue;
          }
          break;
        }
        v159 = v174 + (__clz(__rbit64(v178)) >> 3);
LABEL_202:
        v166 = a4;
LABEL_203:
        v167 = v159 + 4;
        if (v27 <= v166)
        {
          v127 = v142;
          v147 = v27;
          v183 = (char *)(v479 - 32);
        }
        else
        {
          v179 = (unsigned __int8 *)(v115 - 1 + v137);
          v180 = (unsigned __int8 *)(v27 - 1);
          while (*v180 == *v179)
          {
            ++v167;
            v181 = v180 - 1;
            if (v179 > v467)
            {
              --v179;
              v46 = (unint64_t)v180-- > v166;
              if (v46) {
                continue;
              }
            }
            v182 = v181 + 1;
            goto LABEL_211;
          }
          v182 = v180 + 1;
LABEL_211:
          v127 = v142;
          v183 = (char *)(v479 - 32);
          v147 = (unint64_t)v182;
        }
        v184 = v147 - v166;
        v185 = *(_OWORD **)(a2 + 24);
        if (v147 > (unint64_t)v183)
        {
          sub_1DD29DBFC(v185, (char *)v166, v147, v183);
          v134 = v463;
          v126 = v442;
          v120 = v434;
          v119 = v438;
          v117 = v446;
          a2 = v480;
          v186 = v453;
          goto LABEL_218;
        }
        *v185 = *(_OWORD *)v166;
        v187 = *(void *)(a2 + 24);
        if ((unint64_t)v184 <= 0x10)
        {
          *(void *)(a2 + 24) = v187 + v184;
          v154 = *(void *)(a2 + 8);
          v186 = v453;
        }
        else
        {
          *(_OWORD *)(v187 + 16) = *(_OWORD *)(v166 + 16);
          v186 = v453;
          if (v184 >= 33)
          {
            v188 = v187 + v184;
            v189 = (_OWORD *)(v187 + 32);
            v190 = (long long *)(v166 + 48);
            do
            {
              *v189 = *(v190 - 1);
              v191 = *v190;
              v190 += 2;
              v189[1] = v191;
              v189 += 2;
            }
            while ((unint64_t)v189 < v188);
          }
LABEL_218:
          *(void *)(a2 + 24) += v184;
          v154 = *(void *)(a2 + 8);
          if ((unint64_t)v184 >= 0x10000)
          {
            v192 = (unint64_t)(v154 - *(void *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 1;
            *(_DWORD *)(a2 + 76) = v192;
          }
        }
        v172 = (v27 - v146);
LABEL_235:
        *(_WORD *)(v154 + 4) = v184;
        *(_DWORD *)v154 = v172 + 3;
        v171 = v167 - 3;
        v13 = v186;
        if ((v167 - 3) >> 16)
        {
LABEL_236:
          v200 = (unint64_t)(v154 - *(void *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v200;
        }
LABEL_237:
        *(_WORD *)(v154 + 6) = v171;
        *(void *)(a2 + 8) = v154 + 8;
        v27 = v147 + v167;
        if (v147 + v167 <= v117)
        {
          *(_DWORD *)(v112 + 4 * ((0xCF1BBCDCBB000000 * *(void *)(v115 + 2 + v138)) >> v134)) = v138 + 2;
          *(_DWORD *)(v112 + 4 * ((0xCF1BBCDCBB000000 * *(void *)(v27 - 2)) >> v134)) = v27 - 2 - v115;
          a3 = v455;
          while (1)
          {
            v102 = v172;
            v172 = v13;
            v202 = (v27 - v115 - v13);
            v203 = v430;
            if (v202 >= v116) {
              v203 = v115;
            }
            if ((v476 - v202) < 3) {
              break;
            }
            v204 = v203 + v202;
            if (*(_DWORD *)v204 != *(_DWORD *)v27) {
              break;
            }
            if (v202 >= v116) {
              v205 = (char *)v479;
            }
            else {
              v205 = v459;
            }
            v206 = sub_1DD2A6010((void *)(v27 + 4), (char *)(v204 + 4), v479, v205, v467);
            a2 = v480;
            v207 = v206;
            v208 = *(_OWORD **)(v480 + 24);
            if (v27 <= (unint64_t)v450)
            {
              *v208 = *(_OWORD *)v27;
            }
            else
            {
              sub_1DD29DBFC(v208, (char *)v27, v27, v450);
              a2 = v480;
            }
            v117 = v446;
            v209 = *(void *)(a2 + 8);
            *(_WORD *)(v209 + 4) = 0;
            *(_DWORD *)v209 = 1;
            v120 = v434;
            v119 = v438;
            v126 = v442;
            if (v207 + 1 >= 0x10000)
            {
              v210 = (unint64_t)(v209 - *(void *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 2;
              *(_DWORD *)(a2 + 76) = v210;
            }
            *(_WORD *)(v209 + 6) = v207 + 1;
            *(void *)(a2 + 8) = v209 + 8;
            *(_DWORD *)(v112 + 4 * ((0xCF1BBCDCBB000000 * *(void *)v27) >> v463)) = v27 - v115;
            v27 += v207 + 4;
            v13 = v102;
            v201 = v172;
            if (v27 > v446) {
              goto LABEL_255;
            }
          }
          v201 = v102;
          v102 = v13;
        }
        else
        {
          v201 = v172;
          v102 = v13;
          a3 = v455;
        }
LABEL_255:
        v453 = v201;
        v128 = v426;
        v125 = (uint64_t *)(v27 + v426);
        a4 = v27;
        v13 = v102;
        if (v27 + v426 > v117) {
          goto LABEL_512;
        }
      }
    }
LABEL_391:
    LODWORD(v102) = v13;
    v27 = a4;
    goto LABEL_512;
  }
  if (v6 == 6)
  {
    v211 = *(void *)(a1 + 112);
    v212 = *(_DWORD *)(a1 + 276);
    if (v212) {
      v213 = v212;
    }
    else {
      v213 = 1;
    }
    v214 = *(void *)(a1 + 8);
    v215 = *(unsigned int *)(a1 + 24);
    v479 = a4 + a5;
    v216 = a4 + a5 - 8;
    v13 = a3[1];
    v453 = *a3;
    v217 = *(void *)(a1 + 248);
    v218 = *(void *)(v217 + 112);
    v472 = *(unsigned int *)(v217 + 24);
    v219 = *(void *)(v217 + 8);
    v460 = *(char **)v217;
    v220 = *(_DWORD *)(v217 + 264);
    if (*(_DWORD *)(a1 + 296) && v220 <= 0x3D)
    {
      v221 = 0;
      do
      {
        _X12 = v218 + v221;
        __asm { PRFM            #2, [X12] }
        v221 += 64;
      }
      while (v221 < 4 << v220);
    }
    v224 = (uint64_t *)(a4 + v213);
    if (a4 + v213 <= v216)
    {
      v468 = (unsigned __int8 *)(v214 + v215);
      v415 = v219 + v472;
      v225 = v215 + v219 - v460;
      if (v460 + a4 - (v214 + v215) == v219 + v472) {
        v27 = a4 + 1;
      }
      else {
        v27 = a4;
      }
      v464 = 64 - *(_DWORD *)(a1 + 264);
      v226 = 56 - v220;
      v477 = v215 - 1;
      v447 = v216;
      v451 = (char *)(v479 - 32);
      v423 = v479 - 7;
      v411 = v219 - 1;
      v419 = v214 + 12;
      v431 = v219 - v225;
      v435 = v219;
      v227 = v213;
      v439 = v218;
      v443 = v215 + v219 - v460;
      v456 = a3;
      v427 = v213;
      while (1)
      {
        v474 = a4;
        v228 = 0xCF1BBCDCBF9B0000 * *(void *)v27;
        v229 = *(unsigned int *)(v218 + ((v228 >> v226 >> 6) & 0x3FFFFFFFFFFFFFCLL));
        v230 = (v228 >> v226) ^ v229;
        v231 = v27 + 256;
        v232 = v227;
        v233 = v464;
        while (1)
        {
          v234 = v224;
          v235 = v228 >> v464;
          v236 = *(unsigned int *)(v211 + 4 * (v228 >> v464));
          v237 = v27 - v214;
          v238 = v27 - v214 - v453 + 1;
          v239 = *v234;
          *(_DWORD *)(v211 + 4 * v235) = v27 - v214;
          if (v477 - v238 >= 3)
          {
            v240 = v219 + v238 - v225;
            if (v238 >= v215) {
              v240 = v214 + v238;
            }
            if (*(_DWORD *)v240 == *(_DWORD *)(v27 + 1))
            {
              v246 = v27 + 1;
              if (v238 >= v215) {
                v247 = (char *)v479;
              }
              else {
                v247 = v460;
              }
              v248 = sub_1DD2A6010((void *)(v27 + 5), (char *)(v240 + 4), v479, v247, v468);
              a2 = v480;
              v249 = v248;
              v250 = v246 - v474;
              v251 = *(_OWORD **)(v480 + 24);
              if (v246 > (unint64_t)v451)
              {
                sub_1DD29DBFC(v251, (char *)v474, v246, v451);
                a2 = v480;
                v216 = v447;
                v219 = v435;
                v218 = v439;
                v225 = v443;
                v233 = v464;
                v252 = v453;
                goto LABEL_292;
              }
              *v251 = *(_OWORD *)v474;
              v259 = *(void *)(v480 + 24);
              v216 = v447;
              if ((unint64_t)v250 <= 0x10)
              {
                *(void *)(v480 + 24) = v259 + v250;
                v253 = *(void *)(v480 + 8);
                v219 = v435;
                v218 = v439;
                v225 = v443;
                v233 = v464;
                v252 = v453;
              }
              else
              {
                *(_OWORD *)(v259 + 16) = *(_OWORD *)(v474 + 16);
                v219 = v435;
                v218 = v439;
                v225 = v443;
                v233 = v464;
                v252 = v453;
                if (v250 >= 33)
                {
                  v260 = v259 + v250;
                  v261 = (_OWORD *)(v259 + 32);
                  v262 = (long long *)(v474 + 48);
                  do
                  {
                    *v261 = *(v262 - 1);
                    v263 = *v262;
                    v262 += 2;
                    v261[1] = v263;
                    v261 += 2;
                  }
                  while ((unint64_t)v261 < v260);
                }
LABEL_292:
                *(void *)(a2 + 24) += v250;
                v253 = *(void *)(a2 + 8);
                if ((unint64_t)v250 >= 0x10000)
                {
                  v254 = (unint64_t)(v253 - *(void *)a2) >> 3;
                  *(_DWORD *)(a2 + 72) = 1;
                  *(_DWORD *)(a2 + 76) = v254;
                }
              }
              v266 = v249 + 4;
              *(_WORD *)(v253 + 4) = v250;
              *(_DWORD *)v253 = 1;
              v270 = v249 + 1;
              v271 = v252;
              if ((v249 + 1) >> 16) {
                goto LABEL_362;
              }
              goto LABEL_363;
            }
          }
          v241 = v226;
          if (!(_BYTE)v230)
          {
            v242 = v229;
            v243 = (unint64_t)v229 >> 8;
            if (v243 > v472
              && *(_DWORD *)(v219 + v243) == *(_DWORD *)v27
              && v236 <= v215)
            {
              v266 = sub_1DD2A6010((void *)(v27 + 4), (char *)(v219 + v243 + 4), v479, v460, v468) + 4;
              if (v27 <= v474)
              {
                a2 = v480;
                v216 = v447;
                v272 = (char *)(v479 - 32);
                v225 = v443;
                v226 = v241;
              }
              else
              {
                v267 = (unsigned __int8 *)(v411 + (v242 >> 8));
                v268 = (unsigned __int8 *)(v27 - 1);
                a2 = v480;
                v216 = v447;
                v225 = v443;
                v226 = v241;
                while (*v268 == *v267)
                {
                  ++v266;
                  v269 = v268 - 1;
                  if ((unint64_t)v267 > v415)
                  {
                    --v267;
                    v46 = (unint64_t)v268-- > v474;
                    if (v46) {
                      continue;
                    }
                  }
                  v27 = (unint64_t)(v269 + 1);
                  goto LABEL_349;
                }
                v27 = (unint64_t)(v268 + 1);
LABEL_349:
                v272 = (char *)(v479 - 32);
              }
              v246 = v27;
              v283 = v27 - v474;
              v292 = *(_OWORD **)(a2 + 24);
              if (v27 > (unint64_t)v272)
              {
                sub_1DD29DBFC(v292, (char *)v474, v27, v272);
                v225 = v443;
                v216 = v447;
                a2 = v480;
                v219 = v435;
                v218 = v439;
                v233 = v464;
                v285 = v453;
                goto LABEL_356;
              }
              *v292 = *(_OWORD *)v474;
              v293 = *(void *)(a2 + 24);
              v219 = v435;
              v218 = v439;
              v233 = v464;
              if ((unint64_t)v283 <= 0x10)
              {
                *(void *)(a2 + 24) = v293 + v283;
                v253 = *(void *)(a2 + 8);
                v285 = v453;
              }
              else
              {
                *(_OWORD *)(v293 + 16) = *(_OWORD *)(v474 + 16);
                v285 = v453;
                if (v283 >= 33)
                {
                  v294 = v293 + v283;
                  v295 = (_OWORD *)(v293 + 32);
                  v296 = (long long *)(v474 + 48);
                  do
                  {
                    *v295 = *(v296 - 1);
                    v297 = *v296;
                    v296 += 2;
                    v295[1] = v297;
                    v295 += 2;
                  }
                  while ((unint64_t)v295 < v294);
                }
LABEL_356:
                *(void *)(a2 + 24) += v283;
                v253 = *(void *)(a2 + 8);
                if ((unint64_t)v283 >= 0x10000)
                {
                  v298 = (unint64_t)(v253 - *(void *)a2) >> 3;
                  *(_DWORD *)(a2 + 72) = 1;
                  *(_DWORD *)(a2 + 76) = v298;
                }
              }
              v271 = v237 - v225 - v243;
              goto LABEL_361;
            }
          }
          if (v236 > v215)
          {
            v245 = v214 + v236;
            if (*(_DWORD *)(v214 + v236) == *(_DWORD *)v27) {
              break;
            }
          }
          if ((unint64_t)v234 >= v231) {
            ++v232;
          }
          v224 = (uint64_t *)((char *)v234 + v232);
          if ((unint64_t)v234 + v232 > v216) {
            goto LABEL_511;
          }
          v228 = 0xCF1BBCDCBF9B0000 * v239;
          v226 = v241;
          v231 += (unint64_t)((unint64_t)v234 >= v231) << 8;
          LODWORD(v229) = *(_DWORD *)(v218 + ((v228 >> v241 >> 6) & 0x3FFFFFFFFFFFFFCLL));
          LOBYTE(v230) = (v228 >> v241) ^ v229;
          v27 = (unint64_t)v234;
        }
        v255 = (char *)(v27 + 4);
        v256 = (void *)(v245 + 4);
        if (v423 <= v27 + 4)
        {
          v264 = (_DWORD *)(v27 + 4);
          goto LABEL_303;
        }
        v257 = *(void *)v255 ^ *v256;
        if (v257)
        {
          v258 = __clz(__rbit64(v257)) >> 3;
          goto LABEL_328;
        }
        v273 = 0;
        v274 = v27 + 12;
        while (2)
        {
          v275 = (void *)(v274 + v273);
          if (v274 + v273 >= v423)
          {
            v264 = (_DWORD *)(v27 + v273 + 12);
            v256 = (void *)(v419 + v236 + v273);
LABEL_303:
            if ((unint64_t)v264 < v479 - 3 && *(_DWORD *)v256 == *v264)
            {
              ++v264;
              v256 = (void *)((char *)v256 + 4);
            }
            if ((unint64_t)v264 < v479 - 1 && *(unsigned __int16 *)v256 == *(unsigned __int16 *)v264)
            {
              v264 = (_DWORD *)((char *)v264 + 2);
              v256 = (void *)((char *)v256 + 2);
            }
            if ((unint64_t)v264 < v479 && *(unsigned __int8 *)v256 == *(unsigned __int8 *)v264) {
              v264 = (_DWORD *)((char *)v264 + 1);
            }
            v265 = a4;
            v258 = (char *)v264 - v255;
            goto LABEL_329;
          }
          v276 = *(void *)(v419 + v236 + v273);
          v273 += 8;
          v277 = *v275 ^ v276;
          if (!v277) {
            continue;
          }
          break;
        }
        v258 = v273 + (__clz(__rbit64(v277)) >> 3);
LABEL_328:
        v265 = a4;
LABEL_329:
        v266 = v258 + 4;
        if (v27 <= v265)
        {
          v226 = v241;
          v246 = v27;
          v282 = (char *)(v479 - 32);
        }
        else
        {
          v278 = (unsigned __int8 *)(v214 - 1 + v236);
          v279 = (unsigned __int8 *)(v27 - 1);
          while (*v279 == *v278)
          {
            ++v266;
            v280 = v279 - 1;
            if (v278 > v468)
            {
              --v278;
              v46 = (unint64_t)v279-- > v265;
              if (v46) {
                continue;
              }
            }
            v281 = v280 + 1;
            goto LABEL_337;
          }
          v281 = v279 + 1;
LABEL_337:
          v226 = v241;
          v282 = (char *)(v479 - 32);
          v246 = (unint64_t)v281;
        }
        v283 = v246 - v265;
        v284 = *(_OWORD **)(a2 + 24);
        if (v246 > (unint64_t)v282)
        {
          sub_1DD29DBFC(v284, (char *)v265, v246, v282);
          v233 = v464;
          v225 = v443;
          v219 = v435;
          v218 = v439;
          v216 = v447;
          a2 = v480;
          v285 = v453;
          goto LABEL_344;
        }
        *v284 = *(_OWORD *)v265;
        v286 = *(void *)(a2 + 24);
        if ((unint64_t)v283 <= 0x10)
        {
          *(void *)(a2 + 24) = v286 + v283;
          v253 = *(void *)(a2 + 8);
          v285 = v453;
        }
        else
        {
          *(_OWORD *)(v286 + 16) = *(_OWORD *)(v265 + 16);
          v285 = v453;
          if (v283 >= 33)
          {
            v287 = v286 + v283;
            v288 = (_OWORD *)(v286 + 32);
            v289 = (long long *)(v265 + 48);
            do
            {
              *v288 = *(v289 - 1);
              v290 = *v289;
              v289 += 2;
              v288[1] = v290;
              v288 += 2;
            }
            while ((unint64_t)v288 < v287);
          }
LABEL_344:
          *(void *)(a2 + 24) += v283;
          v253 = *(void *)(a2 + 8);
          if ((unint64_t)v283 >= 0x10000)
          {
            v291 = (unint64_t)(v253 - *(void *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 1;
            *(_DWORD *)(a2 + 76) = v291;
          }
        }
        v271 = (v27 - v245);
LABEL_361:
        *(_WORD *)(v253 + 4) = v283;
        *(_DWORD *)v253 = v271 + 3;
        v270 = v266 - 3;
        v13 = v285;
        if ((v266 - 3) >> 16)
        {
LABEL_362:
          v299 = (unint64_t)(v253 - *(void *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v299;
        }
LABEL_363:
        *(_WORD *)(v253 + 6) = v270;
        *(void *)(a2 + 8) = v253 + 8;
        v27 = v246 + v266;
        if (v246 + v266 <= v216)
        {
          *(_DWORD *)(v211 + 4 * ((0xCF1BBCDCBF9B0000 * *(void *)(v214 + 2 + v237)) >> v233)) = v237 + 2;
          *(_DWORD *)(v211 + 4 * ((0xCF1BBCDCBF9B0000 * *(void *)(v27 - 2)) >> v233)) = v27 - 2 - v214;
          a3 = v456;
          while (1)
          {
            v102 = v271;
            v271 = v13;
            v301 = (v27 - v214 - v13);
            v302 = v431;
            if (v301 >= v215) {
              v302 = v214;
            }
            if ((v477 - v301) < 3) {
              break;
            }
            v303 = v302 + v301;
            if (*(_DWORD *)v303 != *(_DWORD *)v27) {
              break;
            }
            if (v301 >= v215) {
              v304 = (char *)v479;
            }
            else {
              v304 = v460;
            }
            v305 = sub_1DD2A6010((void *)(v27 + 4), (char *)(v303 + 4), v479, v304, v468);
            a2 = v480;
            v306 = v305;
            v307 = *(_OWORD **)(v480 + 24);
            if (v27 <= (unint64_t)v451)
            {
              *v307 = *(_OWORD *)v27;
            }
            else
            {
              sub_1DD29DBFC(v307, (char *)v27, v27, v451);
              a2 = v480;
            }
            v216 = v447;
            v308 = *(void *)(a2 + 8);
            *(_WORD *)(v308 + 4) = 0;
            *(_DWORD *)v308 = 1;
            v219 = v435;
            v218 = v439;
            v225 = v443;
            if (v306 + 1 >= 0x10000)
            {
              v309 = (unint64_t)(v308 - *(void *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 2;
              *(_DWORD *)(a2 + 76) = v309;
            }
            *(_WORD *)(v308 + 6) = v306 + 1;
            *(void *)(a2 + 8) = v308 + 8;
            *(_DWORD *)(v211 + 4 * ((0xCF1BBCDCBF9B0000 * *(void *)v27) >> v464)) = v27 - v214;
            v27 += v306 + 4;
            v13 = v102;
            v300 = v271;
            if (v27 > v447) {
              goto LABEL_381;
            }
          }
          v300 = v102;
          v102 = v13;
        }
        else
        {
          v300 = v271;
          v102 = v13;
          a3 = v456;
        }
LABEL_381:
        v453 = v300;
        v227 = v427;
        v224 = (uint64_t *)(v27 + v427);
        a4 = v27;
        v13 = v102;
        if (v27 + v427 > v216) {
          goto LABEL_512;
        }
      }
    }
    goto LABEL_391;
  }
  if (v6 != 7)
  {
    v310 = *(void *)(a1 + 112);
    v311 = *(_DWORD *)(a1 + 276);
    if (v311) {
      v312 = v311;
    }
    else {
      v312 = 1;
    }
    v313 = *(void *)(a1 + 8);
    v314 = *(unsigned int *)(a1 + 24);
    v479 = a4 + a5;
    v315 = a4 + a5 - 8;
    v13 = a3[1];
    v453 = *a3;
    v316 = *(void *)(a1 + 248);
    v317 = *(void *)(v316 + 112);
    v473 = *(unsigned int *)(v316 + 24);
    v318 = *(void *)(v316 + 8);
    v461 = *(char **)v316;
    v319 = *(_DWORD *)(v316 + 264);
    if (*(_DWORD *)(a1 + 296) && v319 <= 0x3D)
    {
      v320 = 0;
      do
      {
        _X12 = v317 + v320;
        __asm { PRFM            #2, [X12] }
        v320 += 64;
      }
      while (v320 < 4 << v319);
    }
    v323 = (int *)(a4 + v312);
    if (a4 + v312 <= v315)
    {
      v469 = (unsigned __int8 *)(v313 + v314);
      v416 = v318 + v473;
      v324 = v314 + v318 - v461;
      if (v461 + a4 - (v313 + v314) == v318 + v473) {
        v27 = a4 + 1;
      }
      else {
        v27 = a4;
      }
      v465 = 32 - *(_DWORD *)(a1 + 264);
      v325 = 24 - v319;
      v478 = v314 - 1;
      v448 = v315;
      v452 = (char *)(v479 - 32);
      v424 = v479 - 7;
      v412 = v318 - 1;
      v420 = v313 + 12;
      v432 = v318 - v324;
      v436 = v318;
      v326 = v312;
      v440 = v317;
      v444 = v314 + v318 - v461;
      v457 = a3;
      v428 = v312;
      while (1)
      {
        v474 = a4;
        v327 = -1640531535 * *(_DWORD *)v27;
        v328 = *(_DWORD *)(v317 + 4 * (v327 >> v325 >> 8));
        v329 = (v327 >> v325) ^ v328;
        v330 = v27 + 256;
        v331 = v326;
        v332 = v465;
        while (1)
        {
          v333 = v323;
          v334 = v327 >> v465;
          v335 = *(unsigned int *)(v310 + 4 * (v327 >> v465));
          v336 = v27 - v313;
          v337 = v27 - v313 - v453 + 1;
          v338 = *v333;
          *(_DWORD *)(v310 + 4 * v334) = v27 - v313;
          if (v478 - v337 >= 3)
          {
            v339 = v318 + v337 - v324;
            if (v337 >= v314) {
              v339 = v313 + v337;
            }
            if (*(_DWORD *)v339 == *(_DWORD *)(v27 + 1))
            {
              v345 = v27 + 1;
              if (v337 >= v314) {
                v346 = (char *)v479;
              }
              else {
                v346 = v461;
              }
              v347 = sub_1DD2A6010((void *)(v27 + 5), (char *)(v339 + 4), v479, v346, v469);
              a2 = v480;
              v348 = v347;
              v349 = v345 - v474;
              v350 = *(_OWORD **)(v480 + 24);
              if (v345 > (unint64_t)v452)
              {
                sub_1DD29DBFC(v350, (char *)v474, v345, v452);
                a2 = v480;
                v315 = v448;
                v318 = v436;
                v317 = v440;
                v324 = v444;
                v332 = v465;
                v351 = v453;
                goto LABEL_419;
              }
              *v350 = *(_OWORD *)v474;
              v358 = *(void *)(v480 + 24);
              v315 = v448;
              if ((unint64_t)v349 <= 0x10)
              {
                *(void *)(v480 + 24) = v358 + v349;
                v352 = *(void *)(v480 + 8);
                v318 = v436;
                v317 = v440;
                v324 = v444;
                v332 = v465;
                v351 = v453;
              }
              else
              {
                *(_OWORD *)(v358 + 16) = *(_OWORD *)(v474 + 16);
                v318 = v436;
                v317 = v440;
                v324 = v444;
                v332 = v465;
                v351 = v453;
                if (v349 >= 33)
                {
                  v359 = v358 + v349;
                  v360 = (_OWORD *)(v358 + 32);
                  v361 = (long long *)(v474 + 48);
                  do
                  {
                    *v360 = *(v361 - 1);
                    v362 = *v361;
                    v361 += 2;
                    v360[1] = v362;
                    v360 += 2;
                  }
                  while ((unint64_t)v360 < v359);
                }
LABEL_419:
                *(void *)(a2 + 24) += v349;
                v352 = *(void *)(a2 + 8);
                if ((unint64_t)v349 >= 0x10000)
                {
                  v353 = (unint64_t)(v352 - *(void *)a2) >> 3;
                  *(_DWORD *)(a2 + 72) = 1;
                  *(_DWORD *)(a2 + 76) = v353;
                }
              }
              v365 = v348 + 4;
              *(_WORD *)(v352 + 4) = v349;
              *(_DWORD *)v352 = 1;
              v369 = v348 + 1;
              v370 = v351;
              if ((v348 + 1) >> 16) {
                goto LABEL_490;
              }
              goto LABEL_491;
            }
          }
          v340 = v325;
          if (!(_BYTE)v329)
          {
            v341 = v328;
            v342 = (unint64_t)v328 >> 8;
            if (v342 > v473
              && *(_DWORD *)(v318 + v342) == *(_DWORD *)v27
              && v335 <= v314)
            {
              v365 = sub_1DD2A6010((void *)(v27 + 4), (char *)(v318 + v342 + 4), v479, v461, v469) + 4;
              if (v27 <= v474)
              {
                a2 = v480;
                v315 = v448;
                v324 = v444;
                v325 = v340;
                v345 = v27;
              }
              else
              {
                v366 = (unsigned __int8 *)(v412 + (v341 >> 8));
                v367 = (unsigned __int8 *)(v27 - 1);
                v315 = v448;
                v324 = v444;
                v325 = v340;
                while (*v367 == *v366)
                {
                  ++v365;
                  v368 = v367 - 1;
                  if ((unint64_t)v366 > v416)
                  {
                    --v366;
                    v46 = (unint64_t)v367-- > v474;
                    if (v46) {
                      continue;
                    }
                  }
                  v27 = (unint64_t)(v368 + 1);
                  goto LABEL_476;
                }
                v27 = (unint64_t)(v367 + 1);
LABEL_476:
                v345 = v27;
                a2 = v480;
              }
              v381 = v27 - v474;
              v390 = *(_OWORD **)(a2 + 24);
              if (v27 > (unint64_t)v452)
              {
                sub_1DD29DBFC(v390, (char *)v474, v27, v452);
                v324 = v444;
                v315 = v448;
                a2 = v480;
                v318 = v436;
                v317 = v440;
                v332 = v465;
                v383 = v453;
                goto LABEL_479;
              }
              *v390 = *(_OWORD *)v474;
              v392 = *(void *)(a2 + 24);
              v318 = v436;
              v317 = v440;
              v332 = v465;
              if ((unint64_t)v381 <= 0x10)
              {
                *(void *)(a2 + 24) = v392 + v381;
                v352 = *(void *)(a2 + 8);
                v383 = v453;
              }
              else
              {
                *(_OWORD *)(v392 + 16) = *(_OWORD *)(v474 + 16);
                v383 = v453;
                if (v381 >= 33)
                {
                  v393 = v392 + v381;
                  v394 = (_OWORD *)(v392 + 32);
                  v395 = (long long *)(v474 + 48);
                  do
                  {
                    *v394 = *(v395 - 1);
                    v396 = *v395;
                    v395 += 2;
                    v394[1] = v396;
                    v394 += 2;
                  }
                  while ((unint64_t)v394 < v393);
                }
LABEL_479:
                *(void *)(a2 + 24) += v381;
                v352 = *(void *)(a2 + 8);
                if ((unint64_t)v381 >= 0x10000)
                {
                  v391 = (unint64_t)(v352 - *(void *)a2) >> 3;
                  *(_DWORD *)(a2 + 72) = 1;
                  *(_DWORD *)(a2 + 76) = v391;
                }
              }
              v370 = v336 - v324 - v342;
              goto LABEL_489;
            }
          }
          if (v335 > v314)
          {
            v344 = v313 + v335;
            if (*(_DWORD *)(v313 + v335) == *(_DWORD *)v27) {
              break;
            }
          }
          if ((unint64_t)v333 >= v330) {
            ++v331;
          }
          v323 = (int *)((char *)v333 + v331);
          if ((unint64_t)v333 + v331 > v315) {
            goto LABEL_511;
          }
          v327 = -1640531535 * v338;
          v325 = v340;
          v330 += (unint64_t)((unint64_t)v333 >= v330) << 8;
          v328 = *(_DWORD *)(v317 + 4 * (v327 >> v340 >> 8));
          LOBYTE(v329) = v328 ^ (v327 >> v340);
          v27 = (unint64_t)v333;
        }
        v354 = (char *)(v27 + 4);
        v355 = (void *)(v344 + 4);
        if (v424 <= v27 + 4)
        {
          v363 = (_DWORD *)(v27 + 4);
          goto LABEL_430;
        }
        v356 = *(void *)v354 ^ *v355;
        if (v356)
        {
          v357 = __clz(__rbit64(v356)) >> 3;
          goto LABEL_454;
        }
        v371 = 0;
        v372 = v27 + 12;
        while (2)
        {
          v373 = (void *)(v372 + v371);
          if (v372 + v371 >= v424)
          {
            v363 = (_DWORD *)(v27 + v371 + 12);
            v355 = (void *)(v420 + v335 + v371);
LABEL_430:
            if ((unint64_t)v363 < v479 - 3 && *(_DWORD *)v355 == *v363)
            {
              ++v363;
              v355 = (void *)((char *)v355 + 4);
            }
            if ((unint64_t)v363 < v479 - 1 && *(unsigned __int16 *)v355 == *(unsigned __int16 *)v363)
            {
              v363 = (_DWORD *)((char *)v363 + 2);
              v355 = (void *)((char *)v355 + 2);
            }
            if ((unint64_t)v363 < v479 && *(unsigned __int8 *)v355 == *(unsigned __int8 *)v363) {
              v363 = (_DWORD *)((char *)v363 + 1);
            }
            v364 = a4;
            v357 = (char *)v363 - v354;
            goto LABEL_455;
          }
          v374 = *(void *)(v420 + v335 + v371);
          v371 += 8;
          v375 = *v373 ^ v374;
          if (!v375) {
            continue;
          }
          break;
        }
        v357 = v371 + (__clz(__rbit64(v375)) >> 3);
LABEL_454:
        v364 = a4;
LABEL_455:
        v365 = v357 + 4;
        if (v27 <= v364)
        {
          v325 = v340;
          v345 = v27;
          v380 = (char *)(v479 - 32);
        }
        else
        {
          v376 = (unsigned __int8 *)(v313 - 1 + v335);
          v377 = (unsigned __int8 *)(v27 - 1);
          while (*v377 == *v376)
          {
            ++v365;
            v378 = v377 - 1;
            if (v376 > v469)
            {
              --v376;
              v46 = (unint64_t)v377-- > v364;
              if (v46) {
                continue;
              }
            }
            v379 = v378 + 1;
            goto LABEL_463;
          }
          v379 = v377 + 1;
LABEL_463:
          v325 = v340;
          v380 = (char *)(v479 - 32);
          v345 = (unint64_t)v379;
        }
        v381 = v345 - v364;
        v382 = *(_OWORD **)(a2 + 24);
        if (v345 > (unint64_t)v380)
        {
          sub_1DD29DBFC(v382, (char *)v364, v345, v380);
          v332 = v465;
          v324 = v444;
          v318 = v436;
          v317 = v440;
          v315 = v448;
          a2 = v480;
          v383 = v453;
          goto LABEL_470;
        }
        *v382 = *(_OWORD *)v364;
        v384 = *(void *)(a2 + 24);
        if ((unint64_t)v381 <= 0x10)
        {
          *(void *)(a2 + 24) = v384 + v381;
          v352 = *(void *)(a2 + 8);
          v383 = v453;
        }
        else
        {
          *(_OWORD *)(v384 + 16) = *(_OWORD *)(v364 + 16);
          v383 = v453;
          if (v381 >= 33)
          {
            v385 = v384 + v381;
            v386 = (_OWORD *)(v384 + 32);
            v387 = (long long *)(v364 + 48);
            do
            {
              *v386 = *(v387 - 1);
              v388 = *v387;
              v387 += 2;
              v386[1] = v388;
              v386 += 2;
            }
            while ((unint64_t)v386 < v385);
          }
LABEL_470:
          *(void *)(a2 + 24) += v381;
          v352 = *(void *)(a2 + 8);
          if ((unint64_t)v381 >= 0x10000)
          {
            v389 = (unint64_t)(v352 - *(void *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 1;
            *(_DWORD *)(a2 + 76) = v389;
          }
        }
        v370 = (v27 - v344);
LABEL_489:
        *(_WORD *)(v352 + 4) = v381;
        *(_DWORD *)v352 = v370 + 3;
        v369 = v365 - 3;
        v13 = v383;
        if ((v365 - 3) >> 16)
        {
LABEL_490:
          v397 = (unint64_t)(v352 - *(void *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v397;
        }
LABEL_491:
        *(_WORD *)(v352 + 6) = v369;
        *(void *)(a2 + 8) = v352 + 8;
        v27 = v345 + v365;
        if (v345 + v365 <= v315)
        {
          *(_DWORD *)(v310 + 4 * ((-1640531535 * *(_DWORD *)(v313 + 2 + v336)) >> v332)) = v336 + 2;
          *(_DWORD *)(v310 + 4 * ((-1640531535 * *(_DWORD *)(v27 - 2)) >> v332)) = v27 - 2 - v313;
          a3 = v457;
          while (1)
          {
            v102 = v370;
            v370 = v13;
            v399 = (v27 - v313 - v13);
            v400 = v432;
            if (v399 >= v314) {
              v400 = v313;
            }
            if ((v478 - v399) < 3) {
              break;
            }
            v401 = v400 + v399;
            if (*(_DWORD *)v401 != *(_DWORD *)v27) {
              break;
            }
            if (v399 >= v314) {
              v402 = (char *)v479;
            }
            else {
              v402 = v461;
            }
            v403 = sub_1DD2A6010((void *)(v27 + 4), (char *)(v401 + 4), v479, v402, v469);
            a2 = v480;
            v404 = v403;
            v405 = *(_OWORD **)(v480 + 24);
            if (v27 <= (unint64_t)v452)
            {
              *v405 = *(_OWORD *)v27;
            }
            else
            {
              sub_1DD29DBFC(v405, (char *)v27, v27, v452);
              a2 = v480;
            }
            v315 = v448;
            v406 = *(void *)(a2 + 8);
            *(_WORD *)(v406 + 4) = 0;
            *(_DWORD *)v406 = 1;
            v318 = v436;
            v317 = v440;
            v324 = v444;
            if (v404 + 1 >= 0x10000)
            {
              v407 = (unint64_t)(v406 - *(void *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 2;
              *(_DWORD *)(a2 + 76) = v407;
            }
            *(_WORD *)(v406 + 6) = v404 + 1;
            *(void *)(a2 + 8) = v406 + 8;
            *(_DWORD *)(v310 + 4 * ((-1640531535 * *(_DWORD *)v27) >> v465)) = v27 - v313;
            v27 += v404 + 4;
            v13 = v102;
            v398 = v370;
            if (v27 > v448) {
              goto LABEL_509;
            }
          }
          v398 = v102;
          v102 = v13;
        }
        else
        {
          v398 = v370;
          v102 = v13;
          a3 = v457;
        }
LABEL_509:
        v453 = v398;
        v326 = v428;
        v323 = (int *)(v27 + v428);
        a4 = v27;
        v13 = v102;
        if (v27 + v428 > v315) {
          goto LABEL_512;
        }
      }
    }
    goto LABEL_391;
  }
  v7 = *(void *)(a1 + 112);
  v8 = *(_DWORD *)(a1 + 276);
  if (v8) {
    v9 = v8;
  }
  else {
    v9 = 1;
  }
  v10 = *(void *)(a1 + 8);
  v11 = *(unsigned int *)(a1 + 24);
  v479 = a4 + a5;
  v12 = a4 + a5 - 8;
  v13 = a3[1];
  v453 = *a3;
  v14 = *(void *)(a1 + 248);
  v15 = *(void *)(v14 + 112);
  v470 = *(unsigned int *)(v14 + 24);
  v16 = *(void *)(v14 + 8);
  v458 = *(char **)v14;
  v17 = *(_DWORD *)(v14 + 264);
  if (*(_DWORD *)(a1 + 296) && v17 <= 0x3D)
  {
    v18 = 0;
    do
    {
      _X12 = v15 + v18;
      __asm { PRFM            #2, [X12] }
      v18 += 64;
    }
    while (v18 < 4 << v17);
  }
  v25 = (uint64_t *)(a4 + v9);
  if (a4 + v9 > v12) {
    goto LABEL_391;
  }
  v466 = (unsigned __int8 *)(v10 + v11);
  v413 = v16 + v470;
  v26 = v11 + v16 - v458;
  if (v458 + a4 - (v10 + v11) == v16 + v470) {
    v27 = a4 + 1;
  }
  else {
    v27 = a4;
  }
  v462 = 64 - *(_DWORD *)(a1 + 264);
  v28 = 56 - v17;
  v475 = v11 - 1;
  v445 = v12;
  v449 = (char *)(v479 - 32);
  v421 = v479 - 7;
  v409 = v16 - 1;
  v417 = v10 + 12;
  v429 = v16 - v26;
  v433 = v16;
  v29 = v9;
  v437 = v15;
  v441 = v11 + v16 - v458;
  v454 = a3;
  v425 = v9;
  do
  {
    v474 = a4;
    v30 = 0xCF1BBCDCBFA56300 * *(void *)v27;
    v31 = *(unsigned int *)(v15 + ((v30 >> v28 >> 6) & 0x3FFFFFFFFFFFFFCLL));
    v32 = (v30 >> v28) ^ v31;
    v33 = v27 + 256;
    v34 = v29;
    v35 = v462;
    while (1)
    {
      v36 = v25;
      v37 = v30 >> v462;
      v38 = *(unsigned int *)(v7 + 4 * (v30 >> v462));
      v39 = v27 - v10;
      v40 = v27 - v10 - v453 + 1;
      v41 = *v36;
      *(_DWORD *)(v7 + 4 * v37) = v27 - v10;
      if (v475 - v40 >= 3)
      {
        v42 = v16 + v40 - v26;
        if (v40 >= v11) {
          v42 = v10 + v40;
        }
        if (*(_DWORD *)v42 == *(_DWORD *)(v27 + 1))
        {
          v48 = v27 + 1;
          if (v40 >= v11) {
            v49 = (char *)v479;
          }
          else {
            v49 = v458;
          }
          v50 = sub_1DD2A6010((void *)(v27 + 5), (char *)(v42 + 4), v479, v49, v466);
          a2 = v480;
          v51 = v50;
          v52 = v48 - v474;
          v53 = *(_OWORD **)(v480 + 24);
          if (v48 <= (unint64_t)v449)
          {
            *v53 = *(_OWORD *)v474;
            v61 = *(void *)(v480 + 24);
            v12 = v445;
            if ((unint64_t)v52 <= 0x10)
            {
              *(void *)(v480 + 24) = v61 + v52;
              v55 = *(void *)(v480 + 8);
              v16 = v433;
              v15 = v437;
              v26 = v441;
              v35 = v462;
              v54 = v453;
              goto LABEL_68;
            }
            *(_OWORD *)(v61 + 16) = *(_OWORD *)(v474 + 16);
            v16 = v433;
            v15 = v437;
            v26 = v441;
            v35 = v462;
            v54 = v453;
            if (v52 >= 33)
            {
              v62 = v61 + v52;
              v63 = (_OWORD *)(v61 + 32);
              v64 = (long long *)(v474 + 48);
              do
              {
                *v63 = *(v64 - 1);
                v65 = *v64;
                v64 += 2;
                v63[1] = v65;
                v63 += 2;
              }
              while ((unint64_t)v63 < v62);
            }
          }
          else
          {
            sub_1DD29DBFC(v53, (char *)v474, v48, v449);
            a2 = v480;
            v12 = v445;
            v16 = v433;
            v15 = v437;
            v26 = v441;
            v35 = v462;
            v54 = v453;
          }
          *(void *)(a2 + 24) += v52;
          v55 = *(void *)(a2 + 8);
          if ((unint64_t)v52 >= 0x10000)
          {
            v56 = (unint64_t)(v55 - *(void *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 1;
            *(_DWORD *)(a2 + 76) = v56;
          }
LABEL_68:
          v68 = v51 + 4;
          *(_WORD *)(v55 + 4) = v52;
          *(_DWORD *)v55 = 1;
          v72 = v51 + 1;
          v73 = v54;
          if (!((v51 + 1) >> 16)) {
            goto LABEL_111;
          }
          goto LABEL_110;
        }
      }
      v43 = v28;
      if (!(_BYTE)v32)
      {
        v44 = v31;
        v45 = (unint64_t)v31 >> 8;
        if (v45 > v470)
        {
          v46 = *(_DWORD *)(v16 + v45) != *(_DWORD *)v27 || v38 > v11;
          if (!v46) {
            break;
          }
        }
      }
      if (v38 > v11)
      {
        v47 = v10 + v38;
        if (*(_DWORD *)(v10 + v38) == *(_DWORD *)v27)
        {
          v57 = (char *)(v27 + 4);
          v58 = (void *)(v47 + 4);
          if (v421 <= v27 + 4)
          {
            v66 = (_DWORD *)(v27 + 4);
          }
          else
          {
            v59 = *(void *)v57 ^ *v58;
            if (v59)
            {
              v60 = __clz(__rbit64(v59)) >> 3;
LABEL_74:
              v67 = a4;
LABEL_75:
              v68 = v60 + 4;
              if (v27 <= v67)
              {
                v28 = v43;
                v48 = v27;
                v83 = (char *)(v479 - 32);
              }
              else
              {
                v79 = (unsigned __int8 *)(v10 - 1 + v38);
                v80 = (unsigned __int8 *)(v27 - 1);
                while (*v80 == *v79)
                {
                  ++v68;
                  v81 = v80 - 1;
                  if (v79 > v466)
                  {
                    --v79;
                    v46 = (unint64_t)v80-- > v67;
                    if (v46) {
                      continue;
                    }
                  }
                  v82 = v81 + 1;
                  goto LABEL_83;
                }
                v82 = v80 + 1;
LABEL_83:
                v28 = v43;
                v83 = (char *)(v479 - 32);
                v48 = (unint64_t)v82;
              }
              v84 = v48 - v67;
              v85 = *(_OWORD **)(a2 + 24);
              if (v48 <= (unint64_t)v83)
              {
                *v85 = *(_OWORD *)v67;
                v87 = *(void *)(a2 + 24);
                if ((unint64_t)v84 <= 0x10)
                {
                  *(void *)(a2 + 24) = v87 + v84;
                  v55 = *(void *)(a2 + 8);
                  v86 = v453;
LABEL_93:
                  v73 = (v27 - v47);
                  goto LABEL_109;
                }
                *(_OWORD *)(v87 + 16) = *(_OWORD *)(v67 + 16);
                v86 = v453;
                if (v84 >= 33)
                {
                  v88 = v87 + v84;
                  v89 = (_OWORD *)(v87 + 32);
                  v90 = (long long *)(v67 + 48);
                  do
                  {
                    *v89 = *(v90 - 1);
                    v91 = *v90;
                    v90 += 2;
                    v89[1] = v91;
                    v89 += 2;
                  }
                  while ((unint64_t)v89 < v88);
                }
              }
              else
              {
                sub_1DD29DBFC(v85, (char *)v67, v48, v83);
                v35 = v462;
                v26 = v441;
                v16 = v433;
                v15 = v437;
                v12 = v445;
                a2 = v480;
                v86 = v453;
              }
              *(void *)(a2 + 24) += v84;
              v55 = *(void *)(a2 + 8);
              if ((unint64_t)v84 >= 0x10000)
              {
                v92 = (unint64_t)(v55 - *(void *)a2) >> 3;
                *(_DWORD *)(a2 + 72) = 1;
                *(_DWORD *)(a2 + 76) = v92;
              }
              goto LABEL_93;
            }
            v74 = 0;
            v75 = v27 + 12;
            while (1)
            {
              v76 = (void *)(v75 + v74);
              if (v75 + v74 >= v421) {
                break;
              }
              v77 = *(void *)(v417 + v38 + v74);
              v74 += 8;
              v78 = *v76 ^ v77;
              if (v78)
              {
                v60 = v74 + (__clz(__rbit64(v78)) >> 3);
                goto LABEL_74;
              }
            }
            v66 = (_DWORD *)(v27 + v74 + 12);
            v58 = (void *)(v417 + v38 + v74);
          }
          if ((unint64_t)v66 < v479 - 3 && *(_DWORD *)v58 == *v66)
          {
            ++v66;
            v58 = (void *)((char *)v58 + 4);
          }
          if ((unint64_t)v66 < v479 - 1 && *(unsigned __int16 *)v58 == *(unsigned __int16 *)v66)
          {
            v66 = (_DWORD *)((char *)v66 + 2);
            v58 = (void *)((char *)v58 + 2);
          }
          if ((unint64_t)v66 < v479 && *(unsigned __int8 *)v58 == *(unsigned __int8 *)v66) {
            v66 = (_DWORD *)((char *)v66 + 1);
          }
          v67 = a4;
          v60 = (char *)v66 - v57;
          goto LABEL_75;
        }
      }
      if ((unint64_t)v36 >= v33) {
        ++v34;
      }
      v25 = (uint64_t *)((char *)v36 + v34);
      if ((unint64_t)v36 + v34 > v12) {
        goto LABEL_511;
      }
      v30 = 0xCF1BBCDCBFA56300 * v41;
      v28 = v43;
      v33 += (unint64_t)((unint64_t)v36 >= v33) << 8;
      LODWORD(v31) = *(_DWORD *)(v15 + ((v30 >> v43 >> 6) & 0x3FFFFFFFFFFFFFCLL));
      LOBYTE(v32) = (v30 >> v43) ^ v31;
      v27 = (unint64_t)v36;
    }
    v68 = sub_1DD2A6010((void *)(v27 + 4), (char *)(v16 + v45 + 4), v479, v458, v466) + 4;
    if (v27 <= v474)
    {
      a2 = v480;
      v12 = v445;
      v26 = v441;
      v28 = v43;
      v48 = v27;
    }
    else
    {
      v69 = (unsigned __int8 *)(v409 + (v44 >> 8));
      v70 = (unsigned __int8 *)(v27 - 1);
      v12 = v445;
      v26 = v441;
      v28 = v43;
      while (*v70 == *v69)
      {
        ++v68;
        v71 = v70 - 1;
        if ((unint64_t)v69 > v413)
        {
          --v69;
          v46 = (unint64_t)v70-- > v474;
          if (v46) {
            continue;
          }
        }
        v27 = (unint64_t)(v71 + 1);
        goto LABEL_96;
      }
      v27 = (unint64_t)(v70 + 1);
LABEL_96:
      v48 = v27;
      a2 = v480;
    }
    v84 = v27 - v474;
    v93 = *(_OWORD **)(a2 + 24);
    if (v27 > (unint64_t)v449)
    {
      sub_1DD29DBFC(v93, (char *)v474, v27, v449);
      v26 = v441;
      v12 = v445;
      a2 = v480;
      v16 = v433;
      v15 = v437;
      v35 = v462;
      v86 = v453;
      goto LABEL_99;
    }
    *v93 = *(_OWORD *)v474;
    v95 = *(void *)(a2 + 24);
    v16 = v433;
    v15 = v437;
    v35 = v462;
    if ((unint64_t)v84 <= 0x10)
    {
      *(void *)(a2 + 24) = v95 + v84;
      v55 = *(void *)(a2 + 8);
      v86 = v453;
    }
    else
    {
      *(_OWORD *)(v95 + 16) = *(_OWORD *)(v474 + 16);
      v86 = v453;
      if (v84 >= 33)
      {
        v96 = v95 + v84;
        v97 = (_OWORD *)(v95 + 32);
        v98 = (long long *)(v474 + 48);
        do
        {
          *v97 = *(v98 - 1);
          v99 = *v98;
          v98 += 2;
          v97[1] = v99;
          v97 += 2;
        }
        while ((unint64_t)v97 < v96);
      }
LABEL_99:
      *(void *)(a2 + 24) += v84;
      v55 = *(void *)(a2 + 8);
      if ((unint64_t)v84 >= 0x10000)
      {
        v94 = (unint64_t)(v55 - *(void *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 1;
        *(_DWORD *)(a2 + 76) = v94;
      }
    }
    v73 = v39 - v26 - v45;
LABEL_109:
    *(_WORD *)(v55 + 4) = v84;
    *(_DWORD *)v55 = v73 + 3;
    v72 = v68 - 3;
    v13 = v86;
    if (!((v68 - 3) >> 16)) {
      goto LABEL_111;
    }
LABEL_110:
    v100 = (unint64_t)(v55 - *(void *)a2) >> 3;
    *(_DWORD *)(a2 + 72) = 2;
    *(_DWORD *)(a2 + 76) = v100;
LABEL_111:
    *(_WORD *)(v55 + 6) = v72;
    *(void *)(a2 + 8) = v55 + 8;
    v27 = v48 + v68;
    if (v48 + v68 <= v12)
    {
      *(_DWORD *)(v7 + 4 * ((0xCF1BBCDCBFA56300 * *(void *)(v10 + 2 + v39)) >> v35)) = v39 + 2;
      *(_DWORD *)(v7 + 4 * ((0xCF1BBCDCBFA56300 * *(void *)(v27 - 2)) >> v35)) = v27 - 2 - v10;
      a3 = v454;
      while (1)
      {
        v102 = v73;
        v73 = v13;
        v103 = (v27 - v10 - v13);
        v104 = v429;
        if (v103 >= v11) {
          v104 = v10;
        }
        if ((v475 - v103) < 3) {
          break;
        }
        v105 = v104 + v103;
        if (*(_DWORD *)v105 != *(_DWORD *)v27) {
          break;
        }
        if (v103 >= v11) {
          v106 = (char *)v479;
        }
        else {
          v106 = v458;
        }
        v107 = sub_1DD2A6010((void *)(v27 + 4), (char *)(v105 + 4), v479, v106, v466);
        a2 = v480;
        v108 = v107;
        v109 = *(_OWORD **)(v480 + 24);
        if (v27 <= (unint64_t)v449)
        {
          *v109 = *(_OWORD *)v27;
        }
        else
        {
          sub_1DD29DBFC(v109, (char *)v27, v27, v449);
          a2 = v480;
        }
        v12 = v445;
        v110 = *(void *)(a2 + 8);
        *(_WORD *)(v110 + 4) = 0;
        *(_DWORD *)v110 = 1;
        v16 = v433;
        v15 = v437;
        v26 = v441;
        if (v108 + 1 >= 0x10000)
        {
          v111 = (unint64_t)(v110 - *(void *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v111;
        }
        *(_WORD *)(v110 + 6) = v108 + 1;
        *(void *)(a2 + 8) = v110 + 8;
        *(_DWORD *)(v7 + 4 * ((0xCF1BBCDCBFA56300 * *(void *)v27) >> v462)) = v27 - v10;
        v27 += v108 + 4;
        v13 = v102;
        v101 = v73;
        if (v27 > v445) {
          goto LABEL_129;
        }
      }
      v101 = v102;
      v102 = v13;
    }
    else
    {
      v101 = v73;
      v102 = v13;
      a3 = v454;
    }
LABEL_129:
    v453 = v101;
    v29 = v425;
    v25 = (uint64_t *)(v27 + v425);
    a4 = v27;
    v13 = v102;
  }
  while (v27 + v425 <= v12);
LABEL_512:
  *a3 = v453;
  a3[1] = v102;
  return v479 - v27;
}

unint64_t sub_1DD2AD2CC(uint64_t a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  if ((*(_DWORD *)(a1 + 272) - 5) >= 3) {
    int v5 = 4;
  }
  else {
    int v5 = *(_DWORD *)(a1 + 272);
  }
  return sub_1DD2AD2E4(a1, a2, a3, a4, a5, v5);
}

unint64_t sub_1DD2AD2E4(uint64_t a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5, int a6)
{
  unint64_t v6 = a4;
  if (*(_DWORD *)(a1 + 276)) {
    int v7 = *(_DWORD *)(a1 + 276);
  }
  else {
    int v7 = 1;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  int v9 = a4 - v8;
  int v10 = a4 - v8 + a5;
  unsigned int v11 = 1 << *(_DWORD *)(a1 + 256);
  unsigned int v13 = *(_DWORD *)(a1 + 24);
  unsigned int v12 = *(_DWORD *)(a1 + 28);
  BOOL v14 = v10 - v12 > v11;
  unsigned int v15 = v10 - v11;
  if (v14 && *(_DWORD *)(a1 + 40) == 0) {
    uint64_t v17 = v15;
  }
  else {
    uint64_t v17 = v12;
  }
  if (v13 <= v17) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = v13;
  }
  if (v17 >= v13)
  {
    return sub_1DD2A7144(a1, a2, a3, v6, a5);
  }
  else
  {
    uint64_t v19 = (v7 + 1);
    unint64_t v20 = v6 + a5;
    unint64_t v21 = v6 + a5 - 8;
    unsigned int v23 = *a3;
    unsigned int v22 = a3[1];
    unsigned int v24 = v9 - v17;
    if (v22 >= v24) {
      uint64_t v25 = 0;
    }
    else {
      uint64_t v25 = v22;
    }
    if (v22 >= v24) {
      unsigned int v26 = a3[1];
    }
    else {
      unsigned int v26 = 0;
    }
    if (v23 >= v24) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = v23;
    }
    if (v23 < v24) {
      unsigned int v23 = 0;
    }
    v28 = (int *)(v6 + v19);
    _X9 = (int *)(v6 + v19 + 1);
    unsigned int v119 = v23;
    unsigned int v120 = v26;
    if ((unint64_t)_X9 < v21)
    {
      uint64_t v30 = *(void *)(a1 + 112);
      uint64_t v31 = *(void *)(a1 + 16);
      v116 = (unsigned __int8 *)(v31 + v17);
      v134 = (unsigned __int8 *)(v8 + v18);
      v123 = (char *)(v31 + v18);
      uint64_t v115 = v8 + 2;
      int v32 = *(_DWORD *)(a1 + 264);
      char v33 = 64 - v32;
      char v127 = 32 - v32;
      v133 = (char *)(v20 - 32);
      int v34 = a6 - 5;
      v126 = (char *)v20;
      int v118 = v17;
      int v132 = v18;
      uint64_t v117 = v19;
      uint64_t v130 = v30;
      unint64_t v131 = v21;
      char v128 = 64 - v32;
      uint64_t v129 = v31;
      while (1)
      {
        switch(v34)
        {
          case 0:
            uint64_t v35 = *(void *)v6;
            unsigned int v36 = -1157627904;
            goto LABEL_33;
          case 1:
            unint64_t v37 = (0xCF1BBCDCBF9B0000 * *(void *)v6) >> v33;
            unint64_t v39 = 0xCF1BBCDCBF9B0000 * *(void *)(v6 + 1);
            goto LABEL_34;
          case 2:
            unint64_t v37 = (0xCF1BBCDCBFA56300 * *(void *)v6) >> v33;
            unint64_t v39 = 0xCF1BBCDCBFA56300 * *(void *)(v6 + 1);
            goto LABEL_34;
          case 3:
            uint64_t v35 = *(void *)v6;
            unsigned int v36 = -1213897629;
LABEL_33:
            unint64_t v40 = v36 | 0xCF1BBCDC00000000;
            unint64_t v37 = (v35 * v40) >> v33;
            unint64_t v39 = *(void *)(v6 + 1) * v40;
LABEL_34:
            unint64_t v38 = v39 >> v33;
            break;
          default:
            unint64_t v37 = (-1640531535 * *(_DWORD *)v6) >> v127;
            unint64_t v38 = (-1640531535 * *(_DWORD *)(v6 + 1)) >> v127;
            break;
        }
        v41 = (int *)(v6 + 1);
        unint64_t v42 = v6 + 128;
        LODWORD(v43) = *(_DWORD *)(v30 + 4 * v37);
        uint64_t v44 = v43 >= v18 ? v8 : v31;
        v45 = (int *)v6;
        while (1)
        {
          unsigned int v46 = v28 - v8 - v27;
          if (v18 <= v46) {
            uint64_t v47 = v8;
          }
          else {
            uint64_t v47 = v31;
          }
          if (v27 && v18 - v46 >= 4) {
            int v48 = *(_DWORD *)(v47 + v46);
          }
          else {
            int v48 = *v28 ^ 1;
          }
          unsigned int v49 = v45 - v8;
          *(_DWORD *)(v30 + 4 * v37) = v45 - v8;
          if (*v28 == v48)
          {
            uint64_t v66 = v47 + v46;
            unint64_t v67 = (unint64_t)v126;
            if (v18 <= v46) {
              v68 = v126;
            }
            else {
              v68 = v123;
            }
            BOOL v69 = *((unsigned __int8 *)v28 - 1) == *(unsigned __int8 *)(v66 - 1);
            if (*((unsigned __int8 *)v28 - 1) == *(unsigned __int8 *)(v66 - 1)) {
              uint64_t v70 = 5;
            }
            else {
              uint64_t v70 = 4;
            }
            v45 = (int *)((char *)v28 - v69);
            v71 = (unsigned __int8 *)(v66 - v69);
            int v124 = 1;
            uint64_t v72 = v27;
            uint64_t v27 = v25;
            goto LABEL_103;
          }
          if (v43 >= v17)
          {
            int v51 = *(_DWORD *)(v44 + v43);
            int v50 = *v45;
          }
          else
          {
            int v50 = *v45;
            int v51 = *v45 ^ 1;
          }
          if (v50 == v51) {
            break;
          }
          uint64_t v43 = *(unsigned int *)(v30 + 4 * v38);
          if (v43 >= v18) {
            uint64_t v44 = v8;
          }
          else {
            uint64_t v44 = v31;
          }
          switch(v34)
          {
            case 0:
              uint64_t v52 = *(void *)v28;
              unsigned int v53 = -1157627904;
              goto LABEL_60;
            case 1:
              unint64_t v54 = 0xCF1BBCDCBF9B0000 * *(void *)v28;
              goto LABEL_61;
            case 2:
              unint64_t v54 = 0xCF1BBCDCBFA56300 * *(void *)v28;
              goto LABEL_61;
            case 3:
              uint64_t v52 = *(void *)v28;
              unsigned int v53 = -1213897629;
LABEL_60:
              unint64_t v54 = v52 * (v53 | 0xCF1BBCDC00000000);
LABEL_61:
              unint64_t v37 = v54 >> v33;
              break;
            default:
              unint64_t v37 = (-1640531535 * *v28) >> v127;
              break;
          }
          unsigned int v49 = v41 - v8;
          *(_DWORD *)(v30 + 4 * v38) = v41 - v8;
          if (v43 >= v17)
          {
            int v56 = *(_DWORD *)(v44 + v43);
            int v55 = *v41;
          }
          else
          {
            int v55 = *v41;
            int v56 = *v41 ^ 1;
          }
          if (v55 == v56)
          {
            v45 = v41;
            v41 = v28;
            unint64_t v38 = v37;
            break;
          }
          LODWORD(v43) = *(_DWORD *)(v30 + 4 * v37);
          if (v43 >= v18) {
            uint64_t v44 = v8;
          }
          else {
            uint64_t v44 = v31;
          }
          switch(v34)
          {
            case 0:
              uint64_t v57 = *(void *)_X9;
              unsigned int v58 = -1157627904;
              goto LABEL_75;
            case 1:
              unint64_t v59 = 0xCF1BBCDCBF9B0000 * *(void *)_X9;
              goto LABEL_76;
            case 2:
              unint64_t v59 = 0xCF1BBCDCBFA56300 * *(void *)_X9;
              goto LABEL_76;
            case 3:
              uint64_t v57 = *(void *)_X9;
              unsigned int v58 = -1213897629;
LABEL_75:
              unint64_t v59 = v57 * (v58 | 0xCF1BBCDC00000000);
LABEL_76:
              unint64_t v38 = v59 >> v33;
              break;
            default:
              unint64_t v38 = (-1640531535 * *_X9) >> v127;
              break;
          }
          if ((unint64_t)v28 + v19 >= v42)
          {
            uint64_t v60 = v19 + 1;
            __asm
            {
              PRFM            #0, [X9,#0x40]
              PRFM            #0, [X9,#0x80]
            }
            v42 += 128;
          }
          else
          {
            uint64_t v60 = v19;
          }
          v41 = _X9;
          v45 = v28;
          v28 = (int *)((char *)v28 + v19);
          _X9 = (int *)((char *)_X9 + v19);
          uint64_t v19 = v60;
          if ((unint64_t)_X9 >= v21)
          {
            LODWORD(v111) = v27;
            unint64_t v20 = (unint64_t)v126;
            goto LABEL_158;
          }
        }
        uint64_t v72 = v49 - v43;
        v73 = v134;
        if (v43 >= v18)
        {
          v68 = v126;
        }
        else
        {
          v73 = v116;
          v68 = v123;
        }
        v71 = (unsigned __int8 *)(v44 + v43);
        int v124 = v72 + 3;
        if ((unint64_t)v45 <= v6 || v71 <= v73)
        {
          uint64_t v70 = 4;
        }
        else
        {
          v74 = (unsigned __int8 *)(v44 + v43 - 1);
          v75 = (unsigned __int8 *)v45 - 1;
          uint64_t v70 = 4;
          while (*v75 == *v74)
          {
            ++v70;
            v76 = v74 - 1;
            v77 = v75 - 1;
            if ((unint64_t)v75 > v6)
            {
              --v75;
              BOOL v14 = v74-- > v73;
              if (v14) {
                continue;
              }
            }
            v71 = v76 + 1;
            v45 = (int *)(v77 + 1);
            goto LABEL_102;
          }
          v71 = v74 + 1;
          v45 = (int *)(v75 + 1);
        }
LABEL_102:
        unint64_t v67 = (unint64_t)v126;
LABEL_103:
        unint64_t v78 = sub_1DD2A6010((int *)((char *)v45 + v70), (char *)&v71[v70], v67, v68, v134);
        uint64_t v79 = (uint64_t)v45 - v6;
        v80 = *(_OWORD **)(a2 + 24);
        if (v45 > (int *)v133) {
          break;
        }
        _OWORD *v80 = *(_OWORD *)v6;
        uint64_t v84 = *(void *)(a2 + 24);
        if ((unint64_t)v79 > 0x10)
        {
          unint64_t v122 = v78;
          *(_OWORD *)(v84 + 16) = *(_OWORD *)(v6 + 16);
          LODWORD(v18) = v132;
          uint64_t v30 = v130;
          unint64_t v21 = v131;
          char v33 = v128;
          uint64_t v31 = v129;
          if (v79 >= 33)
          {
            unint64_t v85 = v84 + v79;
            v86 = (_OWORD *)(v84 + 32);
            v87 = (long long *)(v6 + 48);
            do
            {
              _OWORD *v86 = *(v87 - 1);
              long long v88 = *v87;
              v87 += 2;
              v86[1] = v88;
              v86 += 2;
            }
            while ((unint64_t)v86 < v85);
          }
          goto LABEL_105;
        }
        *(void *)(a2 + 24) = v84 + v79;
        uint64_t v81 = *(void *)(a2 + 8);
        LODWORD(v18) = v132;
        uint64_t v30 = v130;
        unint64_t v21 = v131;
        char v33 = v128;
        uint64_t v31 = v129;
        int v83 = v124;
LABEL_114:
        unint64_t v89 = v78 + v70;
        *(_WORD *)(v81 + 4) = v79;
        *(_DWORD *)uint64_t v81 = v83;
        unint64_t v90 = v78 + v70 - 3;
        if (v90 >= 0x10000)
        {
          unint64_t v91 = (unint64_t)(v81 - *(void *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v91;
        }
        *(_WORD *)(v81 + 6) = v90;
        *(void *)(a2 + 8) = v81 + 8;
        unint64_t v6 = (unint64_t)v45 + v89;
        if (v41 < (int *)((char *)v45 + v89)) {
          *(_DWORD *)(v30 + 4 * v38) = v41 - v8;
        }
        if (v6 <= v21)
        {
          unsigned int v92 = v49 + 2;
          unint64_t v20 = (unint64_t)v126;
          v93 = v123;
          switch(v34)
          {
            case 0:
              uint64_t v94 = *(void *)(v115 + v49);
              unsigned int v95 = -1157627904;
              goto LABEL_126;
            case 1:
              uint64_t v94 = *(void *)(v115 + v49);
              unsigned int v95 = -1080360960;
              goto LABEL_126;
            case 2:
              uint64_t v94 = *(void *)(v115 + v49);
              unsigned int v95 = -1079680256;
              goto LABEL_126;
            case 3:
              uint64_t v94 = *(void *)(v115 + v49);
              unsigned int v95 = -1213897629;
LABEL_126:
              unint64_t v98 = v95 | 0xCF1BBCDC00000000;
              *(_DWORD *)(v30 + 4 * ((v94 * v98) >> v33)) = v92;
              int v96 = v6 - 2;
              unint64_t v97 = (*(void *)(v6 - 2) * v98) >> v33;
              break;
            default:
              *(_DWORD *)(v30 + 4 * ((-1640531535 * *(_DWORD *)(v115 + v49)) >> v127)) = v92;
              int v96 = v6 - 2;
              unint64_t v97 = (-1640531535 * *(_DWORD *)(v6 - 2)) >> v127;
              unint64_t v20 = (unint64_t)v126;
              v93 = v123;
              break;
          }
          *(_DWORD *)(v30 + 4 * v97) = v96 - v8;
          while (1)
          {
            uint64_t v111 = v72;
            uint64_t v72 = v27;
            uint64_t v99 = (v6 - v8 - v27);
            uint64_t v100 = v99 >= v18 ? v8 : v31;
            if (!v27) {
              break;
            }
            if ((v18 + ~v99) < 3) {
              break;
            }
            uint64_t v101 = v100 + v99;
            if (*(_DWORD *)v101 != *(_DWORD *)v6) {
              break;
            }
            if (v99 >= v18) {
              v102 = (char *)v20;
            }
            else {
              v102 = v93;
            }
            unint64_t v103 = sub_1DD2A6010((void *)(v6 + 4), (char *)(v101 + 4), v20, v102, v134);
            v104 = *(_OWORD **)(a2 + 24);
            if (v6 <= (unint64_t)v133) {
              _OWORD *v104 = *(_OWORD *)v6;
            }
            else {
              sub_1DD29DBFC(v104, (char *)v6, v6, v133);
            }
            uint64_t v105 = *(void *)(a2 + 8);
            *(_WORD *)(v105 + 4) = 0;
            *(_DWORD *)uint64_t v105 = 1;
            LODWORD(v18) = v132;
            uint64_t v30 = v130;
            unint64_t v21 = v131;
            char v33 = v128;
            uint64_t v31 = v129;
            uint64_t v25 = v111;
            if (v103 + 1 >= 0x10000)
            {
              unint64_t v106 = (unint64_t)(v105 - *(void *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 2;
              *(_DWORD *)(a2 + 76) = v106;
            }
            *(_WORD *)(v105 + 6) = v103 + 1;
            *(void *)(a2 + 8) = v105 + 8;
            switch(v34)
            {
              case 0:
                uint64_t v107 = *(void *)v6;
                unsigned int v108 = -1157627904;
                goto LABEL_148;
              case 1:
                uint64_t v107 = *(void *)v6;
                unsigned int v108 = -1080360960;
                goto LABEL_148;
              case 2:
                uint64_t v107 = *(void *)v6;
                unsigned int v108 = -1079680256;
                goto LABEL_148;
              case 3:
                uint64_t v107 = *(void *)v6;
                unsigned int v108 = -1213897629;
LABEL_148:
                unint64_t v109 = (v107 * (v108 | 0xCF1BBCDC00000000)) >> v128;
                break;
              default:
                unint64_t v109 = (-1640531535 * *(_DWORD *)v6) >> v127;
                break;
            }
            *(_DWORD *)(v130 + 4 * v109) = v6 - v8;
            v6 += v103 + 4;
            uint64_t v27 = v111;
            uint64_t v111 = v72;
            if (v6 > v131) {
              goto LABEL_152;
            }
          }
          uint64_t v25 = v27;
        }
        else
        {
          uint64_t v111 = v72;
          uint64_t v25 = v27;
          unint64_t v20 = (unint64_t)v126;
        }
LABEL_152:
        uint64_t v19 = v117;
        LODWORD(v17) = v118;
        v28 = (int *)(v6 + v117);
        _X9 = (int *)(v6 + v117 + 1);
        uint64_t v27 = v111;
        if ((unint64_t)_X9 >= v21) {
          goto LABEL_158;
        }
      }
      unint64_t v122 = v78;
      sub_1DD29DBFC(v80, (char *)v6, (unint64_t)v45, v133);
      uint64_t v79 = (uint64_t)v45 - v6;
      LODWORD(v18) = v132;
      uint64_t v30 = v130;
      unint64_t v21 = v131;
      char v33 = v128;
      uint64_t v31 = v129;
LABEL_105:
      *(void *)(a2 + 24) += v79;
      uint64_t v81 = *(void *)(a2 + 8);
      if ((unint64_t)v79 >= 0x10000)
      {
        unint64_t v82 = (unint64_t)(v81 - *(void *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 1;
        *(_DWORD *)(a2 + 76) = v82;
      }
      int v83 = v124;
      unint64_t v78 = v122;
      goto LABEL_114;
    }
    LODWORD(v111) = v27;
LABEL_158:
    unsigned int v112 = v120;
    if (v111) {
      unsigned int v113 = v111;
    }
    else {
      unsigned int v113 = v119;
    }
    if (v111) {
      BOOL v114 = v119 == 0;
    }
    else {
      BOOL v114 = 1;
    }
    if (!v114) {
      unsigned int v112 = v119;
    }
    if (v25) {
      unsigned int v112 = v25;
    }
    *a3 = v113;
    a3[1] = v112;
    return v20 - v6;
  }
}

uint64_t sub_1DD2ADCD4(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 8);
  unsigned int v3 = a2 - v2;
  unsigned int v4 = 1 << *(_DWORD *)(result + 260);
  unint64_t v5 = *(unsigned int *)(result + 44);
  if (v4 >= a2 - (int)v2 - (int)v5) {
    unsigned int v6 = *(_DWORD *)(result + 44);
  }
  else {
    unsigned int v6 = a2 - v2 - v4;
  }
  if (((1 << *(_DWORD *)(result + 268)) - 3) >= 0xFF) {
    int v7 = 255;
  }
  else {
    int v7 = (1 << *(_DWORD *)(result + 268)) - 3;
  }
  int v8 = *(_DWORD *)(result + 264);
  char v9 = v8 - 2;
  unsigned int v10 = 3 << (v8 - 2);
  BOOL v26 = v3 >= v10;
  unsigned int v11 = v3 - v10;
  if (v11 != 0 && v26) {
    unint64_t v12 = v11;
  }
  else {
    unint64_t v12 = v5;
  }
  uint64_t v13 = *(void *)(result + 112);
  uint64_t v14 = *(void *)(result + 128);
  uint64_t v15 = v13 + 4 * (1 << v9);
  if (v3 > v5)
  {
    do
    {
      switch(*(_DWORD *)(result + 272))
      {
        case 5:
          unint64_t v16 = 0xCF1BBCDCBB000000 * *(void *)(v2 + v5);
          goto LABEL_17;
        case 6:
          unint64_t v16 = 0xCF1BBCDCBF9B0000 * *(void *)(v2 + v5);
          goto LABEL_17;
        case 7:
          unint64_t v16 = 0xCF1BBCDCBFA56300 * *(void *)(v2 + v5);
          goto LABEL_17;
        case 8:
          unint64_t v16 = 0xCF1BBCDCB7A56463 * *(void *)(v2 + v5);
LABEL_17:
          unint64_t v17 = v16 >> (66 - v8);
          break;
        default:
          LODWORD(v17) = (-1640531535 * *(_DWORD *)(v2 + v5)) >> (34 - v8);
          break;
      }
      if (v5 >= v12) {
        *(_DWORD *)(v15 + 4 * (v5 - v12)) = *(_DWORD *)(v13 + 4 * v17);
      }
      *(_DWORD *)(v13 + 4 * v17) = v5++;
    }
    while (v5 < v3);
  }
  uint64_t v18 = 0;
  int v19 = 0;
  uint64_t v20 = (1 << v9);
  do
  {
    unsigned int v21 = *(_DWORD *)(v13 + 4 * v18);
    if (v21 < v12) {
      goto LABEL_23;
    }
    int v23 = 0;
    unsigned int v24 = 0;
    do
    {
      if (v21 < v6) {
        ++v23;
      }
      unsigned int v25 = v24 + 1;
      unsigned int v21 = *(_DWORD *)(v15 + 4 * (v21 - v12));
      BOOL v26 = v21 < v12 || v24++ >= 2;
    }
    while (!v26);
    if (v25 == 3 && v7)
    {
      int v27 = 0;
      while (1)
      {
        if (v21 < v6)
        {
          if (!v21) {
            break;
          }
          if (++v23 > 3) {
            break;
          }
        }
        *(_DWORD *)(v14 + 4 * (v19 + v27++)) = v21;
        BOOL v26 = v21 >= v12;
        unsigned int v28 = v21 - v12;
        if (!v26)
        {
          int v22 = v27 + (v19 << 8);
          v19 += v27;
          goto LABEL_24;
        }
        unsigned int v21 = *(_DWORD *)(v15 + 4 * v28);
        if (v7 == v27)
        {
          v19 += v27;
          int v27 = v7;
          goto LABEL_45;
        }
      }
      v19 += v27;
      if (!v27) {
        goto LABEL_23;
      }
LABEL_45:
      int v22 = v27 + ((v19 - v27) << 8);
    }
    else
    {
LABEL_23:
      int v22 = 0;
    }
LABEL_24:
    *(_DWORD *)(v13 + 4 * v18++) = v22;
  }
  while (v18 != v20);
  unsigned int v29 = (4 << v9) - 4;
  uint64_t v30 = (int *)(v13 + 4 * (v20 - 1));
  unsigned int v31 = 4 * v20 - 1;
  do
  {
    uint64_t v32 = v13 + 4 * v29;
    int v33 = *v30--;
    *(_DWORD *)(v32 + 8) = 0;
    *(void *)uint64_t v32 = 0;
    *(_DWORD *)(v13 + 4 * v31) = v33;
    v29 -= 4;
    v31 -= 4;
    LODWORD(v20) = v20 - 1;
  }
  while (v20);
  unint64_t v34 = *(unsigned int *)(result + 44);
  if (v34 < v3)
  {
    char v35 = 66 - v8;
    char v36 = 34 - v8;
    do
    {
      switch(*(_DWORD *)(result + 272))
      {
        case 5:
          unint64_t v37 = 0xCF1BBCDCBB000000 * *(void *)(v2 + v34);
          goto LABEL_55;
        case 6:
          unint64_t v37 = 0xCF1BBCDCBF9B0000 * *(void *)(v2 + v34);
          goto LABEL_55;
        case 7:
          unint64_t v37 = 0xCF1BBCDCBFA56300 * *(void *)(v2 + v34);
          goto LABEL_55;
        case 8:
          unint64_t v37 = 0xCF1BBCDCB7A56463 * *(void *)(v2 + v34);
LABEL_55:
          unint64_t v38 = v37 >> v35;
          break;
        default:
          LODWORD(v38) = (-1640531535 * *(_DWORD *)(v2 + v34)) >> v36;
          break;
      }
      uint64_t v39 = 0;
      uint64_t v40 = (4 * v38);
      uint64_t v41 = v13 + 16 * (v38 & 0x3FFFFFFF);
      do
      {
        *(_DWORD *)(v41 + v39 + 8) = *(_DWORD *)(v41 + v39 + 4);
        v39 -= 4;
      }
      while (v39 != -8);
      *(_DWORD *)(v13 + 4 * v40) = v34++;
    }
    while (v34 < v3);
  }
  *(_DWORD *)(result + 44) = v3;
  return result;
}

uint64_t sub_1DD2AE058(uint64_t a1, uint64_t *a2)
{
  int v2 = *(_DWORD *)(a1 + 272);
  uint64_t v3 = *(void *)(a1 + 112);
  int v4 = *(_DWORD *)(a1 + 264);
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = *(unsigned int *)(a1 + 44);
  if (v6 < (int)a2 - (int)v5)
  {
    int v7 = ~(-1 << *(_DWORD *)(a1 + 260));
    uint64_t v8 = *(void *)(a1 + 128);
    do
    {
      switch(v2)
      {
        case 5:
          unint64_t v9 = 0xCF1BBCDCBB000000 * *(void *)(v5 + v6);
          goto LABEL_8;
        case 6:
          unint64_t v9 = 0xCF1BBCDCBF9B0000 * *(void *)(v5 + v6);
          goto LABEL_8;
        case 7:
          unint64_t v9 = 0xCF1BBCDCBFA56300 * *(void *)(v5 + v6);
          goto LABEL_8;
        case 8:
          unint64_t v9 = 0xCF1BBCDCB7A56463 * *(void *)(v5 + v6);
LABEL_8:
          unint64_t v10 = v9 >> (64 - v4);
          break;
        default:
          unint64_t v10 = (-1640531535 * *(_DWORD *)(v5 + v6)) >> (32 - v4);
          break;
      }
      *(_DWORD *)(v8 + 4 * (v6 & v7)) = *(_DWORD *)(v3 + 4 * v10);
      *(_DWORD *)(v3 + 4 * v10) = v6++;
    }
    while (v6 < (a2 - v5));
  }
  *(_DWORD *)(a1 + 44) = a2 - v5;
  switch(v2)
  {
    case 5:
      uint64_t v11 = *a2;
      unsigned int v12 = -1157627904;
      goto LABEL_18;
    case 6:
      uint64_t v11 = *a2;
      unsigned int v12 = -1080360960;
      goto LABEL_18;
    case 7:
      uint64_t v11 = *a2;
      unsigned int v12 = -1079680256;
      goto LABEL_18;
    case 8:
      uint64_t v11 = *a2;
      unsigned int v12 = -1213897629;
LABEL_18:
      unint64_t v13 = (v11 * (v12 | 0xCF1BBCDC00000000)) >> -(char)v4;
      break;
    default:
      unint64_t v13 = (-1640531535 * *(_DWORD *)a2) >> -(char)v4;
      break;
  }
  return *(unsigned int *)(v3 + 4 * v13);
}

uint64_t sub_1DD2AE23C(uint64_t result, int a2)
{
  unsigned int v2 = *(_DWORD *)(result + 268);
  if (v2 >= 6) {
    unsigned int v2 = 6;
  }
  if (v2 <= 4) {
    LOBYTE(v2) = 4;
  }
  if (*(_DWORD *)(result + 272) >= 6u) {
    int v3 = 6;
  }
  else {
    int v3 = *(_DWORD *)(result + 272);
  }
  unint64_t v4 = *(unsigned int *)(result + 44);
  uint64_t v5 = *(void *)(result + 8);
  if (v4 < a2 - (int)v5)
  {
    unsigned int v6 = ~(-1 << v2);
    uint64_t v7 = *(void *)(result + 112);
    int v8 = *(_DWORD *)(result + 52);
    char v9 = 56 - v8;
    uint64_t v10 = *(void *)(result + 56);
    char v11 = 24 - v8;
    do
    {
      unint64_t v12 = *(void *)(result + 96);
      if (v3 == 5)
      {
        unint64_t v13 = 0xCF1BBCDCBB000000 * *(void *)(v5 + v4);
      }
      else
      {
        if (v3 != 6)
        {
          LODWORD(v12) = ((-1640531535 * *(_DWORD *)(v5 + v4)) ^ v12) >> v11;
          goto LABEL_16;
        }
        unint64_t v13 = 0xCF1BBCDCBF9B0000 * *(void *)(v5 + v4);
      }
      unint64_t v12 = (v13 ^ v12) >> v9;
LABEL_16:
      unint64_t v14 = (unint64_t)(v12 >> 8) << v2;
      uint64_t v15 = v7 + 4 * v14;
      unint64_t v16 = (unsigned char *)(v10 + v14);
      if (((*v16 + 127) & v6) != 0) {
        uint64_t v17 = 0;
      }
      else {
        uint64_t v17 = v6;
      }
      uint64_t v18 = v17 + ((*v16 + 127) & v6);
      *unint64_t v16 = v18;
      v16[v18] = v12;
      *(_DWORD *)(v15 + 4 * v18) = v4++;
    }
    while (v4 < (a2 - v5));
  }
  *(_DWORD *)(result + 44) = a2 - v5;
  return result;
}

unint64_t sub_1DD2AE358(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t *a4, uint64_t a5)
{
  unint64_t v5 = (unint64_t)a4;
  unint64_t v6 = (unint64_t)a4 + a5;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(unsigned int *)(a1 + 24);
  unint64_t v9 = v7 + v8;
  unsigned int v10 = *(_DWORD *)(a1 + 272);
  if (v10 >= 6) {
    unsigned int v10 = 6;
  }
  if (v10 <= 4) {
    int v11 = 4;
  }
  else {
    int v11 = v10;
  }
  unsigned int v13 = *a3;
  unsigned int v12 = a3[1];
  if (a4 == v9) {
    unint64_t v14 = (uint64_t *)((char *)a4 + 1);
  }
  else {
    unint64_t v14 = a4;
  }
  int v15 = v14 - v7;
  unsigned int v16 = 1 << *(_DWORD *)(a1 + 256);
  if (v15 - (int)v8 > v16 && *(_DWORD *)(a1 + 40) == 0) {
    LODWORD(v8) = v15 - v16;
  }
  unsigned int v18 = v15 - v8;
  if (v12 <= v18) {
    LODWORD(v19) = a3[1];
  }
  else {
    LODWORD(v19) = 0;
  }
  if (v13 <= v18) {
    uint64_t v20 = v13;
  }
  else {
    uint64_t v20 = 0;
  }
  *(_DWORD *)(a1 + 300) = 0;
  unint64_t v114 = (unint64_t)a4 + a5 - 8;
  if ((unint64_t)v14 < v114)
  {
    uint64_t v22 = a1;
    unsigned int v101 = v18;
    unsigned int v102 = v13;
    v104 = a3;
    unint64_t v105 = v9;
    unsigned int v103 = v12;
    unint64_t v23 = v6 - 7;
    unint64_t v107 = v6 - 1;
    unint64_t v108 = v6 - 3;
    v110 = (char *)(v6 - 32);
    unint64_t v112 = (unint64_t)a4 + a5;
    int v111 = v11;
    while (1)
    {
      unint64_t v24 = 0;
      if (v20 && *(_DWORD *)((char *)v14 - v20 + 1) == *(_DWORD *)((char *)v14 + 1))
      {
        unsigned int v25 = (char *)v14 + 5;
        BOOL v26 = (uint64_t *)((char *)v14 - v20 + 5);
        if (v23 <= (unint64_t)v14 + 5)
        {
          unsigned int v29 = (_DWORD *)((char *)v14 + 5);
        }
        else
        {
          unint64_t v27 = *(void *)v25 ^ *v26;
          if (v27)
          {
            unint64_t v28 = __clz(__rbit64(v27)) >> 3;
            goto LABEL_38;
          }
          unint64_t v67 = (char *)v14 + 13;
          while (1)
          {
            v68 = &v67[v27];
            if ((unint64_t)&v67[v27] >= v23) {
              break;
            }
            uint64_t v69 = *(uint64_t *)((char *)v14 + v27 - v20 + 13);
            v27 += 8;
            unint64_t v70 = *(void *)v68 ^ v69;
            if (v70)
            {
              unint64_t v28 = v27 + (__clz(__rbit64(v70)) >> 3);
              goto LABEL_38;
            }
          }
          unsigned int v29 = (_DWORD *)((char *)v14 + v27 + 13);
          BOOL v26 = (void *)((char *)v29 - v20);
        }
        if ((unint64_t)v29 < v108 && *(_DWORD *)v26 == *v29)
        {
          ++v29;
          BOOL v26 = (void *)((char *)v26 + 4);
        }
        if ((unint64_t)v29 < v107 && *(unsigned __int16 *)v26 == *(unsigned __int16 *)v29)
        {
          unsigned int v29 = (_DWORD *)((char *)v29 + 2);
          BOOL v26 = (void *)((char *)v26 + 2);
        }
        if ((unint64_t)v29 < v6 && *(unsigned __int8 *)v26 == *(unsigned __int8 *)v29) {
          unsigned int v29 = (_DWORD *)((char *)v29 + 1);
        }
        unint64_t v28 = (char *)v29 - v25;
LABEL_38:
        unint64_t v24 = v28 + 4;
      }
      uint64_t v115 = 999999999;
      unsigned int v106 = v19;
      if (v11 == 6)
      {
        unint64_t v30 = sub_1DD2BD644(v22, v14, v6, (unsigned int *)&v115);
      }
      else if (v11 == 5)
      {
        unint64_t v30 = sub_1DD2BD5B8(v22, v14, v6, (unsigned int *)&v115);
      }
      else
      {
        unint64_t v30 = sub_1DD2BD52C(v22, v14, v6, (unsigned int *)&v115);
      }
      if (v30 <= v24) {
        unint64_t v31 = v24;
      }
      else {
        unint64_t v31 = v30;
      }
      if (v31 < 4)
      {
        unint64_t v32 = (unint64_t)v14 - v5;
        unint64_t v14 = (uint64_t *)((char *)v14 + (((unint64_t)v14 - v5) >> 8) + 1);
        uint64_t v22 = a1;
        *(_DWORD *)(a1 + 300) = v32 > 0x7FF;
        LODWORD(v19) = v106;
        goto LABEL_191;
      }
      if (v30 <= v24) {
        int v33 = (uint64_t *)((char *)v14 + 1);
      }
      else {
        int v33 = v14;
      }
      if (v30 <= v24) {
        uint64_t v34 = 1;
      }
      else {
        uint64_t v34 = v115;
      }
      unint64_t v35 = v31;
      unint64_t v36 = v34;
      unint64_t v109 = v33;
      uint64_t v37 = -(uint64_t)v20;
      if ((unint64_t)v14 < v114)
      {
        do
        {
          int v33 = (uint64_t *)((char *)v14 + 1);
          if (!v34 || !v20)
          {
            unint64_t v38 = v112;
            int v39 = v111;
            goto LABEL_63;
          }
          unint64_t v38 = v112;
          int v39 = v111;
          if (*(_DWORD *)v33 != *(_DWORD *)((char *)v33 + v37)) {
            goto LABEL_63;
          }
          uint64_t v40 = (char *)v14 + 5;
          uint64_t v41 = (uint64_t *)((char *)v14 + v37 + 5);
          if (v23 <= (unint64_t)v14 + 5)
          {
            int v51 = (unsigned __int16 *)((char *)v14 + 5);
          }
          else
          {
            unint64_t v42 = *(void *)v40 ^ *v41;
            if (v42)
            {
              unint64_t v43 = __clz(__rbit64(v42)) >> 3;
LABEL_105:
              unint64_t v56 = v43 + 4;
              if (3 * (int)v56 > (int)(3 * v31 + __clz(v34) - 30))
              {
                unint64_t v31 = v56;
                uint64_t v34 = 1;
                unint64_t v109 = (uint64_t *)((char *)v14 + 1);
              }
              goto LABEL_63;
            }
            int v51 = (unsigned __int16 *)((char *)v14 + 13);
            while ((unint64_t)v51 < v23)
            {
              uint64_t v53 = *(void *)((char *)v51 + v37);
              uint64_t v54 = *(void *)v51;
              v51 += 4;
              unint64_t v55 = v54 ^ v53;
              if (v55)
              {
                int v51 = (unsigned __int16 *)((char *)v51 + (__clz(__rbit64(v55)) >> 3) - 8);
                goto LABEL_104;
              }
            }
            uint64_t v41 = (void *)((char *)v51 + v37);
          }
          if ((unint64_t)v51 < v108 && *(_DWORD *)v41 == *(_DWORD *)v51)
          {
            v51 += 2;
            uint64_t v41 = (void *)((char *)v41 + 4);
          }
          if ((unint64_t)v51 < v107 && *(unsigned __int16 *)v41 == *v51)
          {
            ++v51;
            uint64_t v41 = (void *)((char *)v41 + 2);
          }
          if ((unint64_t)v51 < v112 && *(unsigned __int8 *)v41 == *(unsigned __int8 *)v51) {
            int v51 = (unsigned __int16 *)((char *)v51 + 1);
          }
LABEL_104:
          unint64_t v43 = (char *)v51 - v40;
          if (v43 <= 0xFFFFFFFFFFFFFFFBLL) {
            goto LABEL_105;
          }
LABEL_63:
          uint64_t v115 = 999999999;
          if (v39 == 6)
          {
            unint64_t v44 = sub_1DD2BD644(a1, (uint64_t *)((char *)v14 + 1), v38, (unsigned int *)&v115);
          }
          else if (v39 == 5)
          {
            unint64_t v44 = sub_1DD2BD5B8(a1, (uint64_t *)((char *)v14 + 1), v38, (unsigned int *)&v115);
          }
          else
          {
            unint64_t v44 = sub_1DD2BD52C(a1, (uint64_t *)((char *)v14 + 1), v38, (unsigned int *)&v115);
          }
          unint64_t v35 = v44;
          if (v44 >= 4)
          {
            unint64_t v36 = v115;
            if ((int)(__clz(v115) + 4 * v44 - 31) > (int)(__clz(v34) + 4 * v31 - 27)) {
              goto LABEL_121;
            }
          }
          if ((unint64_t)v33 >= v114) {
            goto LABEL_125;
          }
          int v33 = (uint64_t *)((char *)v14 + 2);
          if (!v34)
          {
            unint64_t v45 = v112;
            int v46 = v111;
            goto LABEL_114;
          }
          unint64_t v45 = v112;
          int v46 = v111;
          if (!v20 || *(_DWORD *)v33 != *(_DWORD *)((char *)v33 - v20)) {
            goto LABEL_114;
          }
          uint64_t v47 = (char *)v14 + 6;
          int v48 = (uint64_t *)((char *)v14 - v20 + 6);
          if (v23 <= (unint64_t)v14 + 6)
          {
            uint64_t v52 = (unsigned __int16 *)v14 + 3;
          }
          else
          {
            unint64_t v49 = *(void *)v47 ^ *v48;
            if (v49)
            {
              unint64_t v50 = __clz(__rbit64(v49)) >> 3;
LABEL_112:
              unint64_t v60 = v50 + 4;
              if ((int)(__clz(v34) + 4 * v31 - 30) < 4 * (int)v60)
              {
                unint64_t v31 = v60;
                uint64_t v34 = 1;
                unint64_t v109 = (uint64_t *)((char *)v14 + 2);
              }
              goto LABEL_114;
            }
            uint64_t v52 = (unsigned __int16 *)v14 + 7;
            while ((unint64_t)v52 < v23)
            {
              uint64_t v57 = *(void *)((char *)v52 - v20);
              uint64_t v58 = *(void *)v52;
              v52 += 4;
              unint64_t v59 = v58 ^ v57;
              if (v59)
              {
                uint64_t v52 = (unsigned __int16 *)((char *)v52 + (__clz(__rbit64(v59)) >> 3) - 8);
                goto LABEL_111;
              }
            }
            int v48 = (void *)((char *)v52 - v20);
          }
          if ((unint64_t)v52 < v108 && *(_DWORD *)v48 == *(_DWORD *)v52)
          {
            v52 += 2;
            int v48 = (void *)((char *)v48 + 4);
          }
          if ((unint64_t)v52 < v107 && *(unsigned __int16 *)v48 == *v52)
          {
            ++v52;
            int v48 = (void *)((char *)v48 + 2);
          }
          if ((unint64_t)v52 < v112 && *(unsigned __int8 *)v48 == *(unsigned __int8 *)v52) {
            uint64_t v52 = (unsigned __int16 *)((char *)v52 + 1);
          }
LABEL_111:
          unint64_t v50 = (char *)v52 - v47;
          if (v50 <= 0xFFFFFFFFFFFFFFFBLL) {
            goto LABEL_112;
          }
LABEL_114:
          uint64_t v115 = 999999999;
          if (v46 == 6)
          {
            unint64_t v61 = sub_1DD2BD644(a1, (uint64_t *)((char *)v14 + 2), v45, (unsigned int *)&v115);
          }
          else if (v46 == 5)
          {
            unint64_t v61 = sub_1DD2BD5B8(a1, (uint64_t *)((char *)v14 + 2), v45, (unsigned int *)&v115);
          }
          else
          {
            unint64_t v61 = sub_1DD2BD52C(a1, (uint64_t *)((char *)v14 + 2), v45, (unsigned int *)&v115);
          }
          unint64_t v35 = v61;
          if (v61 < 4 || (unint64_t v36 = v115, (int)(__clz(v115) + 4 * v61 - 31) <= (int)(__clz(v34) + 4 * v31 - 24)))
          {
LABEL_125:
            unint64_t v35 = v31;
            unint64_t v36 = v34;
            int v33 = v109;
            break;
          }
LABEL_121:
          uint64_t v37 = -(uint64_t)v20;
          unint64_t v14 = v33;
          unint64_t v109 = v33;
          uint64_t v34 = v36;
          unint64_t v31 = v35;
        }
        while ((unint64_t)v33 < v114);
      }
      if (v36 <= 3)
      {
        uint64_t v22 = a1;
        v62 = v110;
      }
      else
      {
        v62 = v110;
        if ((unint64_t)v33 <= v5 || (unint64_t)v33 - v36 + 3 <= v105)
        {
          v64 = v33;
          uint64_t v22 = a1;
        }
        else
        {
          unint64_t v63 = 2 - v36;
          v64 = v33;
          uint64_t v22 = a1;
          while (1)
          {
            int v65 = *((unsigned __int8 *)v64 - 1);
            v64 = (uint64_t *)((char *)v64 - 1);
            if (v65 != *((unsigned __int8 *)v33 + v63)) {
              break;
            }
            ++v35;
            if ((unint64_t)v64 > v5)
            {
              uint64_t v66 = (char *)v33 + v63;
              int v33 = v64;
              if ((unint64_t)v66 > v105) {
                continue;
              }
            }
            goto LABEL_141;
          }
          v64 = v33;
        }
LABEL_141:
        unsigned int v106 = v20;
        uint64_t v20 = (v36 - 3);
        int v33 = v64;
      }
      uint64_t v71 = (uint64_t)v33 - v5;
      uint64_t v72 = *(_OWORD **)(a2 + 24);
      if (v33 > (uint64_t *)v62) {
        break;
      }
      *uint64_t v72 = *(_OWORD *)v5;
      uint64_t v75 = *(void *)(a2 + 24);
      if ((unint64_t)v71 > 0x10)
      {
        *(_OWORD *)(v75 + 16) = *(_OWORD *)(v5 + 16);
        if (v71 >= 33)
        {
          unint64_t v76 = v75 + v71;
          v77 = (_OWORD *)(v75 + 32);
          unint64_t v78 = (long long *)(v5 + 48);
          do
          {
            _OWORD *v77 = *(v78 - 1);
            long long v79 = *v78;
            v78 += 2;
            v77[1] = v79;
            v77 += 2;
          }
          while ((unint64_t)v77 < v76);
        }
        goto LABEL_144;
      }
      *(void *)(a2 + 24) = v75 + v71;
      uint64_t v73 = *(void *)(a2 + 8);
      uint64_t v19 = v106;
LABEL_152:
      *(_WORD *)(v73 + 4) = v71;
      *(_DWORD *)uint64_t v73 = v36;
      if (v35 - 3 >= 0x10000)
      {
        unint64_t v80 = (unint64_t)(v73 - *(void *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 2;
        *(_DWORD *)(a2 + 76) = v80;
      }
      *(_WORD *)(v73 + 6) = v35 - 3;
      *(void *)(a2 + 8) = v73 + 8;
      if (*(_DWORD *)(v22 + 300)) {
        *(_DWORD *)(v22 + 300) = 0;
      }
      unint64_t v5 = (unint64_t)v33 + v35;
      if (!v19 || v5 > v114)
      {
        unint64_t v14 = (uint64_t *)((char *)v33 + v35);
        unint64_t v6 = v112;
        int v11 = v111;
        goto LABEL_191;
      }
      uint64_t v81 = v20;
      uint64_t v82 = v19;
      unint64_t v6 = v112;
      int v11 = v111;
      while (1)
      {
        uint64_t v20 = v82;
        uint64_t v82 = v81;
        if (*(_DWORD *)v5 != *(_DWORD *)(v5 - v20))
        {
          LODWORD(v19) = v20;
          uint64_t v20 = v81;
          goto LABEL_190;
        }
        int v83 = (char *)(v5 + 4);
        uint64_t v84 = (void *)(v5 + 4 - v20);
        if (v23 <= v5 + 4)
        {
          long long v88 = (_DWORD *)(v5 + 4);
          v86 = v110;
        }
        else
        {
          unint64_t v85 = *(void *)v83 ^ *v84;
          v86 = v110;
          if (v85)
          {
            unint64_t v87 = __clz(__rbit64(v85)) >> 3;
            goto LABEL_174;
          }
          unint64_t v92 = v5 + 12;
          while (1)
          {
            v93 = (void *)(v92 + v85);
            if (v92 + v85 >= v23) {
              break;
            }
            uint64_t v94 = *(void *)(v5 + 12 - v20 + v85);
            v85 += 8;
            unint64_t v95 = *v93 ^ v94;
            if (v95)
            {
              unint64_t v87 = v85 + (__clz(__rbit64(v95)) >> 3);
              goto LABEL_174;
            }
          }
          long long v88 = (_DWORD *)(v5 + v85 + 12);
          uint64_t v84 = (void *)((char *)v88 - v20);
        }
        if ((unint64_t)v88 < v108 && *(_DWORD *)v84 == *v88)
        {
          ++v88;
          uint64_t v84 = (void *)((char *)v84 + 4);
        }
        if ((unint64_t)v88 < v107 && *(unsigned __int16 *)v84 == *(unsigned __int16 *)v88)
        {
          long long v88 = (_DWORD *)((char *)v88 + 2);
          uint64_t v84 = (void *)((char *)v84 + 2);
        }
        if ((unint64_t)v88 < v112 && *(unsigned __int8 *)v84 == *(unsigned __int8 *)v88) {
          long long v88 = (_DWORD *)((char *)v88 + 1);
        }
        unint64_t v87 = (char *)v88 - v83;
LABEL_174:
        unint64_t v89 = *(_OWORD **)(a2 + 24);
        if (v5 <= (unint64_t)v86) {
          *unint64_t v89 = *(_OWORD *)v5;
        }
        else {
          sub_1DD29DBFC(v89, (char *)v5, v5, v86);
        }
        uint64_t v90 = *(void *)(a2 + 8);
        *(_WORD *)(v90 + 4) = 0;
        *(_DWORD *)uint64_t v90 = 1;
        if (v87 + 1 >= 0x10000)
        {
          unint64_t v91 = (unint64_t)(v90 - *(void *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v91;
        }
        *(_WORD *)(v90 + 6) = v87 + 1;
        *(void *)(a2 + 8) = v90 + 8;
        v5 += v87 + 4;
        if (!v82) {
          break;
        }
        uint64_t v81 = v20;
        LODWORD(v19) = v82;
        unint64_t v14 = (uint64_t *)v5;
        if (v5 > v114) {
          goto LABEL_191;
        }
      }
      LODWORD(v19) = 0;
LABEL_190:
      unint64_t v14 = (uint64_t *)v5;
LABEL_191:
      if ((unint64_t)v14 >= v114)
      {
        a3 = v104;
        unsigned int v13 = v102;
        unsigned int v12 = v103;
        unsigned int v18 = v101;
        goto LABEL_194;
      }
    }
    sub_1DD29DBFC(v72, (char *)v5, (unint64_t)v33, v62);
LABEL_144:
    *(void *)(a2 + 24) += v71;
    uint64_t v73 = *(void *)(a2 + 8);
    uint64_t v19 = v106;
    if ((unint64_t)v71 >= 0x10000)
    {
      unint64_t v74 = (unint64_t)(v73 - *(void *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v74;
    }
    goto LABEL_152;
  }
LABEL_194:
  if (v13 <= v18) {
    unsigned int v96 = 0;
  }
  else {
    unsigned int v96 = v13;
  }
  if (v12 <= v18) {
    unsigned int v97 = 0;
  }
  else {
    unsigned int v97 = v12;
  }
  if (v20) {
    unsigned int v98 = v20;
  }
  else {
    unsigned int v98 = v96;
  }
  if (v20) {
    BOOL v99 = v96 == 0;
  }
  else {
    BOOL v99 = 1;
  }
  if (v99) {
    unsigned int v96 = v97;
  }
  if (v19) {
    unsigned int v96 = v19;
  }
  *a3 = v98;
  a3[1] = v96;
  return v6 - v5;
}

char *sub_1DD2AED6C(uint64_t a1, uint64_t a2, unsigned int *a3, void *a4, uint64_t a5)
{
  unint64_t v5 = (unint64_t)a4;
  unint64_t v6 = (unsigned __int16 *)((char *)a4 + a5);
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(unsigned int *)(a1 + 24);
  unint64_t v9 = v7 + v8;
  unsigned int v10 = *(_DWORD *)(a1 + 272);
  if (v10 >= 6) {
    unsigned int v10 = 6;
  }
  if (v10 <= 4) {
    int v11 = 4;
  }
  else {
    int v11 = v10;
  }
  unsigned int v13 = *a3;
  unsigned int v12 = a3[1];
  if (a4 == v9) {
    unint64_t v14 = (void *)((char *)a4 + 1);
  }
  else {
    unint64_t v14 = a4;
  }
  int v15 = v14 - v7;
  unsigned int v16 = 1 << *(_DWORD *)(a1 + 256);
  if (v15 - (int)v8 > v16 && *(_DWORD *)(a1 + 40) == 0) {
    LODWORD(v8) = v15 - v16;
  }
  unsigned int v18 = v15 - v8;
  if (v12 <= v18) {
    LODWORD(v19) = a3[1];
  }
  else {
    LODWORD(v19) = 0;
  }
  if (v13 <= v18) {
    uint64_t v20 = v13;
  }
  else {
    uint64_t v20 = 0;
  }
  *(_DWORD *)(a1 + 300) = 0;
  unint64_t v114 = (unint64_t)a4 + a5 - 8;
  if ((unint64_t)v14 < v114)
  {
    uint64_t v22 = a1;
    unsigned int v101 = v18;
    unsigned int v102 = v13;
    v104 = a3;
    unint64_t v105 = v9;
    unsigned int v103 = v12;
    unint64_t v23 = (unint64_t)v6 - 7;
    unint64_t v107 = (unsigned __int16 *)((char *)v6 - 1);
    unint64_t v108 = (unsigned __int16 *)((char *)v6 - 3);
    v110 = (char *)(v6 - 16);
    unint64_t v112 = (unsigned __int16 *)((char *)a4 + a5);
    int v111 = v11;
    while (1)
    {
      unint64_t v24 = 0;
      if (v20 && *(_DWORD *)((char *)v14 - v20 + 1) == *(_DWORD *)((char *)v14 + 1))
      {
        unsigned int v25 = (char *)v14 + 5;
        BOOL v26 = (void *)((char *)v14 - v20 + 5);
        if (v23 <= (unint64_t)v14 + 5)
        {
          unsigned int v29 = (unsigned __int16 *)((char *)v14 + 5);
        }
        else
        {
          unint64_t v27 = *(void *)v25 ^ *v26;
          if (v27)
          {
            unint64_t v28 = __clz(__rbit64(v27)) >> 3;
            goto LABEL_38;
          }
          unint64_t v67 = (char *)v14 + 13;
          while (1)
          {
            v68 = &v67[v27];
            if ((unint64_t)&v67[v27] >= v23) {
              break;
            }
            uint64_t v69 = *(void *)((char *)v14 + v27 - v20 + 13);
            v27 += 8;
            unint64_t v70 = *(void *)v68 ^ v69;
            if (v70)
            {
              unint64_t v28 = v27 + (__clz(__rbit64(v70)) >> 3);
              goto LABEL_38;
            }
          }
          unsigned int v29 = (unsigned __int16 *)((char *)v14 + v27 + 13);
          BOOL v26 = (void *)((char *)v29 - v20);
        }
        if (v29 < v108 && *(_DWORD *)v26 == *(_DWORD *)v29)
        {
          v29 += 2;
          BOOL v26 = (void *)((char *)v26 + 4);
        }
        if (v29 < v107 && *(unsigned __int16 *)v26 == *v29)
        {
          ++v29;
          BOOL v26 = (void *)((char *)v26 + 2);
        }
        if (v29 < v6 && *(unsigned __int8 *)v26 == *(unsigned __int8 *)v29) {
          unsigned int v29 = (unsigned __int16 *)((char *)v29 + 1);
        }
        unint64_t v28 = (char *)v29 - v25;
LABEL_38:
        unint64_t v24 = v28 + 4;
      }
      uint64_t v115 = 999999999;
      unsigned int v106 = v19;
      if (v11 == 6)
      {
        unint64_t v30 = sub_1DD2BD2E4(v22, v14, v6, &v115);
      }
      else if (v11 == 5)
      {
        unint64_t v30 = sub_1DD2BD09C(v22, v14, v6, &v115);
      }
      else
      {
        unint64_t v30 = sub_1DD2BCE58(v22, v14, v6, &v115);
      }
      if (v30 <= v24) {
        unint64_t v31 = v24;
      }
      else {
        unint64_t v31 = v30;
      }
      if (v31 < 4)
      {
        unint64_t v32 = (unint64_t)v14 - v5;
        unint64_t v14 = (void *)((char *)v14 + (((unint64_t)v14 - v5) >> 8) + 1);
        uint64_t v22 = a1;
        *(_DWORD *)(a1 + 300) = v32 > 0x7FF;
        LODWORD(v19) = v106;
        goto LABEL_191;
      }
      if (v30 <= v24) {
        int v33 = (_DWORD *)((char *)v14 + 1);
      }
      else {
        int v33 = v14;
      }
      if (v30 <= v24) {
        uint64_t v34 = 1;
      }
      else {
        uint64_t v34 = v115;
      }
      unint64_t v35 = v31;
      unint64_t v36 = v34;
      unint64_t v109 = v33;
      uint64_t v37 = -(uint64_t)v20;
      if ((unint64_t)v14 < v114)
      {
        do
        {
          int v33 = (_DWORD *)((char *)v14 + 1);
          if (!v34 || !v20)
          {
            unint64_t v38 = v112;
            int v39 = v111;
            goto LABEL_63;
          }
          unint64_t v38 = v112;
          int v39 = v111;
          if (*v33 != *(_DWORD *)((char *)v33 + v37)) {
            goto LABEL_63;
          }
          uint64_t v40 = (char *)v14 + 5;
          uint64_t v41 = (void *)((char *)v14 + v37 + 5);
          if (v23 <= (unint64_t)v14 + 5)
          {
            int v51 = (unsigned __int16 *)((char *)v14 + 5);
          }
          else
          {
            unint64_t v42 = *(void *)v40 ^ *v41;
            if (v42)
            {
              unint64_t v43 = __clz(__rbit64(v42)) >> 3;
LABEL_105:
              unint64_t v56 = v43 + 4;
              if (3 * (int)v56 > (int)(3 * v31 + __clz(v34) - 30))
              {
                unint64_t v31 = v56;
                uint64_t v34 = 1;
                unint64_t v109 = (_DWORD *)((char *)v14 + 1);
              }
              goto LABEL_63;
            }
            int v51 = (unsigned __int16 *)((char *)v14 + 13);
            while ((unint64_t)v51 < v23)
            {
              uint64_t v53 = *(void *)((char *)v51 + v37);
              uint64_t v54 = *(void *)v51;
              v51 += 4;
              unint64_t v55 = v54 ^ v53;
              if (v55)
              {
                int v51 = (unsigned __int16 *)((char *)v51 + (__clz(__rbit64(v55)) >> 3) - 8);
                goto LABEL_104;
              }
            }
            uint64_t v41 = (void *)((char *)v51 + v37);
          }
          if (v51 < v108 && *(_DWORD *)v41 == *(_DWORD *)v51)
          {
            v51 += 2;
            uint64_t v41 = (void *)((char *)v41 + 4);
          }
          if (v51 < v107 && *(unsigned __int16 *)v41 == *v51)
          {
            ++v51;
            uint64_t v41 = (void *)((char *)v41 + 2);
          }
          if (v51 < v112 && *(unsigned __int8 *)v41 == *(unsigned __int8 *)v51) {
            int v51 = (unsigned __int16 *)((char *)v51 + 1);
          }
LABEL_104:
          unint64_t v43 = (char *)v51 - v40;
          if (v43 <= 0xFFFFFFFFFFFFFFFBLL) {
            goto LABEL_105;
          }
LABEL_63:
          uint64_t v115 = 999999999;
          if (v39 == 6)
          {
            unint64_t v44 = sub_1DD2BD2E4(a1, (void *)((char *)v14 + 1), v38, &v115);
          }
          else if (v39 == 5)
          {
            unint64_t v44 = sub_1DD2BD09C(a1, (void *)((char *)v14 + 1), v38, &v115);
          }
          else
          {
            unint64_t v44 = sub_1DD2BCE58(a1, (void *)((char *)v14 + 1), v38, &v115);
          }
          unint64_t v35 = v44;
          if (v44 >= 4)
          {
            unint64_t v36 = v115;
            if ((int)(__clz(v115) + 4 * v44 - 31) > (int)(__clz(v34) + 4 * v31 - 27)) {
              goto LABEL_121;
            }
          }
          if ((unint64_t)v33 >= v114) {
            goto LABEL_125;
          }
          int v33 = (_DWORD *)((char *)v14 + 2);
          if (!v34)
          {
            unint64_t v45 = v112;
            int v46 = v111;
            goto LABEL_114;
          }
          unint64_t v45 = v112;
          int v46 = v111;
          if (!v20 || *v33 != *(_DWORD *)((char *)v33 - v20)) {
            goto LABEL_114;
          }
          uint64_t v47 = (char *)v14 + 6;
          int v48 = (void *)((char *)v14 - v20 + 6);
          if (v23 <= (unint64_t)v14 + 6)
          {
            uint64_t v52 = (unsigned __int16 *)v14 + 3;
          }
          else
          {
            unint64_t v49 = *(void *)v47 ^ *v48;
            if (v49)
            {
              unint64_t v50 = __clz(__rbit64(v49)) >> 3;
LABEL_112:
              unint64_t v60 = v50 + 4;
              if ((int)(__clz(v34) + 4 * v31 - 30) < 4 * (int)v60)
              {
                unint64_t v31 = v60;
                uint64_t v34 = 1;
                unint64_t v109 = (_DWORD *)((char *)v14 + 2);
              }
              goto LABEL_114;
            }
            uint64_t v52 = (unsigned __int16 *)v14 + 7;
            while ((unint64_t)v52 < v23)
            {
              uint64_t v57 = *(void *)((char *)v52 - v20);
              uint64_t v58 = *(void *)v52;
              v52 += 4;
              unint64_t v59 = v58 ^ v57;
              if (v59)
              {
                uint64_t v52 = (unsigned __int16 *)((char *)v52 + (__clz(__rbit64(v59)) >> 3) - 8);
                goto LABEL_111;
              }
            }
            int v48 = (void *)((char *)v52 - v20);
          }
          if (v52 < v108 && *(_DWORD *)v48 == *(_DWORD *)v52)
          {
            v52 += 2;
            int v48 = (void *)((char *)v48 + 4);
          }
          if (v52 < v107 && *(unsigned __int16 *)v48 == *v52)
          {
            ++v52;
            int v48 = (void *)((char *)v48 + 2);
          }
          if (v52 < v112 && *(unsigned __int8 *)v48 == *(unsigned __int8 *)v52) {
            uint64_t v52 = (unsigned __int16 *)((char *)v52 + 1);
          }
LABEL_111:
          unint64_t v50 = (char *)v52 - v47;
          if (v50 <= 0xFFFFFFFFFFFFFFFBLL) {
            goto LABEL_112;
          }
LABEL_114:
          uint64_t v115 = 999999999;
          if (v46 == 6)
          {
            unint64_t v61 = sub_1DD2BD2E4(a1, (void *)((char *)v14 + 2), v45, &v115);
          }
          else if (v46 == 5)
          {
            unint64_t v61 = sub_1DD2BD09C(a1, (void *)((char *)v14 + 2), v45, &v115);
          }
          else
          {
            unint64_t v61 = sub_1DD2BCE58(a1, (void *)((char *)v14 + 2), v45, &v115);
          }
          unint64_t v35 = v61;
          if (v61 < 4 || (unint64_t v36 = v115, (int)(__clz(v115) + 4 * v61 - 31) <= (int)(__clz(v34) + 4 * v31 - 24)))
          {
LABEL_125:
            unint64_t v35 = v31;
            unint64_t v36 = v34;
            int v33 = v109;
            break;
          }
LABEL_121:
          uint64_t v37 = -(uint64_t)v20;
          unint64_t v14 = v33;
          unint64_t v109 = v33;
          uint64_t v34 = v36;
          unint64_t v31 = v35;
        }
        while ((unint64_t)v33 < v114);
      }
      if (v36 <= 3)
      {
        uint64_t v22 = a1;
        v62 = v110;
      }
      else
      {
        v62 = v110;
        if ((unint64_t)v33 <= v5 || (unint64_t)v33 - v36 + 3 <= v105)
        {
          v64 = v33;
          uint64_t v22 = a1;
        }
        else
        {
          unint64_t v63 = 2 - v36;
          v64 = v33;
          uint64_t v22 = a1;
          while (1)
          {
            int v65 = *((unsigned __int8 *)v64 - 1);
            v64 = (_DWORD *)((char *)v64 - 1);
            if (v65 != *((unsigned __int8 *)v33 + v63)) {
              break;
            }
            ++v35;
            if ((unint64_t)v64 > v5)
            {
              uint64_t v66 = (char *)v33 + v63;
              int v33 = v64;
              if ((unint64_t)v66 > v105) {
                continue;
              }
            }
            goto LABEL_141;
          }
          v64 = v33;
        }
LABEL_141:
        unsigned int v106 = v20;
        uint64_t v20 = (v36 - 3);
        int v33 = v64;
      }
      uint64_t v71 = (uint64_t)v33 - v5;
      uint64_t v72 = *(_OWORD **)(a2 + 24);
      if (v33 > (_DWORD *)v62) {
        break;
      }
      *uint64_t v72 = *(_OWORD *)v5;
      uint64_t v75 = *(void *)(a2 + 24);
      if ((unint64_t)v71 > 0x10)
      {
        *(_OWORD *)(v75 + 16) = *(_OWORD *)(v5 + 16);
        if (v71 >= 33)
        {
          unint64_t v76 = v75 + v71;
          v77 = (_OWORD *)(v75 + 32);
          unint64_t v78 = (long long *)(v5 + 48);
          do
          {
            _OWORD *v77 = *(v78 - 1);
            long long v79 = *v78;
            v78 += 2;
            v77[1] = v79;
            v77 += 2;
          }
          while ((unint64_t)v77 < v76);
        }
        goto LABEL_144;
      }
      *(void *)(a2 + 24) = v75 + v71;
      uint64_t v73 = *(void *)(a2 + 8);
      uint64_t v19 = v106;
LABEL_152:
      *(_WORD *)(v73 + 4) = v71;
      *(_DWORD *)uint64_t v73 = v36;
      if (v35 - 3 >= 0x10000)
      {
        unint64_t v80 = (unint64_t)(v73 - *(void *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 2;
        *(_DWORD *)(a2 + 76) = v80;
      }
      *(_WORD *)(v73 + 6) = v35 - 3;
      *(void *)(a2 + 8) = v73 + 8;
      if (*(_DWORD *)(v22 + 300)) {
        *(_DWORD *)(v22 + 300) = 0;
      }
      unint64_t v5 = (unint64_t)v33 + v35;
      if (!v19 || v5 > v114)
      {
        unint64_t v14 = (void *)((char *)v33 + v35);
        unint64_t v6 = v112;
        int v11 = v111;
        goto LABEL_191;
      }
      uint64_t v81 = v20;
      uint64_t v82 = v19;
      unint64_t v6 = v112;
      int v11 = v111;
      while (1)
      {
        uint64_t v20 = v82;
        uint64_t v82 = v81;
        if (*(_DWORD *)v5 != *(_DWORD *)(v5 - v20))
        {
          LODWORD(v19) = v20;
          uint64_t v20 = v81;
          goto LABEL_190;
        }
        int v83 = (char *)(v5 + 4);
        uint64_t v84 = (void *)(v5 + 4 - v20);
        if (v23 <= v5 + 4)
        {
          long long v88 = (unsigned __int16 *)(v5 + 4);
          v86 = v110;
        }
        else
        {
          unint64_t v85 = *(void *)v83 ^ *v84;
          v86 = v110;
          if (v85)
          {
            unint64_t v87 = __clz(__rbit64(v85)) >> 3;
            goto LABEL_174;
          }
          unint64_t v92 = v5 + 12;
          while (1)
          {
            v93 = (void *)(v92 + v85);
            if (v92 + v85 >= v23) {
              break;
            }
            uint64_t v94 = *(void *)(v5 + 12 - v20 + v85);
            v85 += 8;
            unint64_t v95 = *v93 ^ v94;
            if (v95)
            {
              unint64_t v87 = v85 + (__clz(__rbit64(v95)) >> 3);
              goto LABEL_174;
            }
          }
          long long v88 = (unsigned __int16 *)(v5 + v85 + 12);
          uint64_t v84 = (void *)((char *)v88 - v20);
        }
        if (v88 < v108 && *(_DWORD *)v84 == *(_DWORD *)v88)
        {
          v88 += 2;
          uint64_t v84 = (void *)((char *)v84 + 4);
        }
        if (v88 < v107 && *(unsigned __int16 *)v84 == *v88)
        {
          ++v88;
          uint64_t v84 = (void *)((char *)v84 + 2);
        }
        if (v88 < v112 && *(unsigned __int8 *)v84 == *(unsigned __int8 *)v88) {
          long long v88 = (unsigned __int16 *)((char *)v88 + 1);
        }
        unint64_t v87 = (char *)v88 - v83;
LABEL_174:
        unint64_t v89 = *(_OWORD **)(a2 + 24);
        if (v5 <= (unint64_t)v86) {
          *unint64_t v89 = *(_OWORD *)v5;
        }
        else {
          sub_1DD29DBFC(v89, (char *)v5, v5, v86);
        }
        uint64_t v90 = *(void *)(a2 + 8);
        *(_WORD *)(v90 + 4) = 0;
        *(_DWORD *)uint64_t v90 = 1;
        if (v87 + 1 >= 0x10000)
        {
          unint64_t v91 = (unint64_t)(v90 - *(void *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v91;
        }
        *(_WORD *)(v90 + 6) = v87 + 1;
        *(void *)(a2 + 8) = v90 + 8;
        v5 += v87 + 4;
        if (!v82) {
          break;
        }
        uint64_t v81 = v20;
        LODWORD(v19) = v82;
        unint64_t v14 = (void *)v5;
        if (v5 > v114) {
          goto LABEL_191;
        }
      }
      LODWORD(v19) = 0;
LABEL_190:
      unint64_t v14 = (void *)v5;
LABEL_191:
      if ((unint64_t)v14 >= v114)
      {
        a3 = v104;
        unsigned int v13 = v102;
        unsigned int v12 = v103;
        unsigned int v18 = v101;
        goto LABEL_194;
      }
    }
    sub_1DD29DBFC(v72, (char *)v5, (unint64_t)v33, v62);
LABEL_144:
    *(void *)(a2 + 24) += v71;
    uint64_t v73 = *(void *)(a2 + 8);
    uint64_t v19 = v106;
    if ((unint64_t)v71 >= 0x10000)
    {
      unint64_t v74 = (unint64_t)(v73 - *(void *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v74;
    }
    goto LABEL_152;
  }
LABEL_194:
  if (v13 <= v18) {
    unsigned int v96 = 0;
  }
  else {
    unsigned int v96 = v13;
  }
  if (v12 <= v18) {
    unsigned int v97 = 0;
  }
  else {
    unsigned int v97 = v12;
  }
  if (v20) {
    unsigned int v98 = v20;
  }
  else {
    unsigned int v98 = v96;
  }
  if (v20) {
    BOOL v99 = v96 == 0;
  }
  else {
    BOOL v99 = 1;
  }
  if (v99) {
    unsigned int v96 = v97;
  }
  if (v19) {
    unsigned int v96 = v19;
  }
  *a3 = v98;
  a3[1] = v96;
  return (char *)v6 - v5;
}

char *sub_1DD2AF780(uint64_t a1, uint64_t a2, unsigned int *a3, void *a4, uint64_t a5)
{
  unint64_t v5 = (unint64_t)a4;
  unint64_t v6 = (unsigned __int16 *)((char *)a4 + a5);
  unint64_t v7 = (unint64_t)a4 + a5 - 8;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(unsigned int *)(a1 + 24);
  unint64_t v10 = v8 + v9;
  unsigned int v11 = *(_DWORD *)(a1 + 272);
  if (v11 >= 6) {
    unsigned int v11 = 6;
  }
  if (v11 <= 4) {
    int v12 = 4;
  }
  else {
    int v12 = v11;
  }
  unsigned int v14 = *a3;
  unsigned int v13 = a3[1];
  if (a4 == v10) {
    int v15 = (void *)((char *)a4 + 1);
  }
  else {
    int v15 = a4;
  }
  int v16 = v15 - v8;
  unsigned int v17 = 1 << *(_DWORD *)(a1 + 256);
  if (v16 - (int)v9 > v17 && *(_DWORD *)(a1 + 40) == 0) {
    LODWORD(v9) = v16 - v17;
  }
  unsigned int v19 = v16 - v9;
  if (v13 <= v19) {
    LODWORD(v20) = a3[1];
  }
  else {
    LODWORD(v20) = 0;
  }
  if (v14 <= v19) {
    uint64_t v21 = v14;
  }
  else {
    uint64_t v21 = 0;
  }
  *(_DWORD *)(a1 + 300) = 0;
  if ((unint64_t)v15 < v7)
  {
    uint64_t v22 = a1;
    unsigned int v90 = v19;
    unsigned int v91 = v14;
    v93 = a3;
    unint64_t v94 = v10;
    unsigned int v92 = v13;
    unint64_t v23 = (unint64_t)v6 - 7;
    unsigned int v98 = (unsigned __int16 *)((char *)v6 - 1);
    BOOL v99 = (unsigned __int16 *)((char *)v6 - 3);
    unsigned int v103 = (char *)(v6 - 16);
    v104 = (char *)v6 - 7;
    unsigned int v101 = (unsigned __int16 *)((char *)a4 + a5);
    unint64_t v97 = (unint64_t)a4 + a5 - 8;
    int v100 = v12;
    while (1)
    {
      unsigned int v96 = v20;
      unint64_t v24 = 0;
      if (v21 && *(_DWORD *)((char *)v15 - v21 + 1) == *(_DWORD *)((char *)v15 + 1))
      {
        unsigned int v25 = (char *)v15 + 5;
        BOOL v26 = (void *)((char *)v15 - v21 + 5);
        if (v23 <= (unint64_t)v15 + 5)
        {
          unsigned int v29 = (unsigned __int16 *)((char *)v15 + 5);
        }
        else
        {
          unint64_t v27 = *(void *)v25 ^ *v26;
          if (v27)
          {
            unint64_t v28 = __clz(__rbit64(v27)) >> 3;
            goto LABEL_38;
          }
          uint64_t v81 = (char *)v15 + 13;
          while (1)
          {
            uint64_t v82 = &v81[v27];
            if ((unint64_t)&v81[v27] >= v23) {
              break;
            }
            uint64_t v83 = *(void *)((char *)v15 + v27 - v21 + 13);
            v27 += 8;
            unint64_t v84 = *(void *)v82 ^ v83;
            if (v84)
            {
              unint64_t v28 = v27 + (__clz(__rbit64(v84)) >> 3);
              goto LABEL_38;
            }
          }
          unsigned int v29 = (unsigned __int16 *)((char *)v15 + v27 + 13);
          BOOL v26 = (void *)((char *)v29 - v21);
        }
        if (v29 < v99 && *(_DWORD *)v26 == *(_DWORD *)v29)
        {
          v29 += 2;
          BOOL v26 = (void *)((char *)v26 + 4);
        }
        if (v29 < v98 && *(unsigned __int16 *)v26 == *v29)
        {
          ++v29;
          BOOL v26 = (void *)((char *)v26 + 2);
        }
        if (v29 < v6 && *(unsigned __int8 *)v26 == *(unsigned __int8 *)v29) {
          unsigned int v29 = (unsigned __int16 *)((char *)v29 + 1);
        }
        unint64_t v28 = (char *)v29 - v25;
LABEL_38:
        unint64_t v24 = v28 + 4;
      }
      uint64_t v105 = 999999999;
      if (v12 == 6)
      {
        unint64_t v30 = sub_1DD2BD2E4(v22, v15, v6, &v105);
      }
      else if (v12 == 5)
      {
        unint64_t v30 = sub_1DD2BD09C(v22, v15, v6, &v105);
      }
      else
      {
        unint64_t v30 = sub_1DD2BCE58(v22, v15, v6, &v105);
      }
      if (v30 <= v24) {
        unint64_t v31 = v24;
      }
      else {
        unint64_t v31 = v30;
      }
      if (v31 < 4)
      {
        unint64_t v32 = (unint64_t)v15 - v5;
        int v15 = (void *)((char *)v15 + (((unint64_t)v15 - v5) >> 8) + 1);
        uint64_t v22 = a1;
        *(_DWORD *)(a1 + 300) = v32 > 0x7FF;
        unint64_t v23 = (unint64_t)v104;
        goto LABEL_158;
      }
      unint64_t v23 = (unint64_t)v104;
      if (v30 <= v24) {
        int v33 = (_DWORD *)((char *)v15 + 1);
      }
      else {
        int v33 = v15;
      }
      if (v30 <= v24) {
        uint64_t v34 = 1;
      }
      else {
        uint64_t v34 = v105;
      }
      if ((unint64_t)v15 >= v7)
      {
        unint64_t v48 = v31;
        unint64_t v49 = v34;
        unint64_t v36 = v33;
        goto LABEL_92;
      }
      unint64_t v35 = (unsigned __int16 *)((char *)v15 + 13);
      while (1)
      {
        unint64_t v36 = (_DWORD *)((char *)v15 + 1);
        if (!v34)
        {
          int v37 = v100;
          goto LABEL_80;
        }
        int v37 = v100;
        if (!v21 || *v36 != *(_DWORD *)((char *)v36 - v21)) {
          goto LABEL_80;
        }
        unint64_t v38 = (char *)v15 + 5;
        int v39 = (void *)((char *)v15 - v21 + 5);
        if (v23 <= (unint64_t)v15 + 5)
        {
          uint64_t v40 = (unsigned __int16 *)((char *)v15 + 5);
        }
        else
        {
          uint64_t v40 = v35;
          unint64_t v41 = *(void *)v38 ^ *v39;
          if (v41)
          {
            unint64_t v42 = __clz(__rbit64(v41)) >> 3;
LABEL_78:
            unint64_t v46 = v42 + 4;
            if (3 * (int)v46 > (int)(3 * v31 + __clz(v34) - 30))
            {
              unint64_t v31 = v46;
              uint64_t v34 = 1;
              int v33 = (_DWORD *)((char *)v15 + 1);
            }
            goto LABEL_80;
          }
          while ((unint64_t)v40 < v23)
          {
            uint64_t v43 = *(void *)((char *)v40 - v21);
            uint64_t v44 = *(void *)v40;
            v40 += 4;
            unint64_t v45 = v44 ^ v43;
            if (v45)
            {
              uint64_t v40 = (unsigned __int16 *)((char *)v40 + (__clz(__rbit64(v45)) >> 3) - 8);
              goto LABEL_77;
            }
          }
          int v39 = (void *)((char *)v40 - v21);
        }
        if (v40 < v99 && *(_DWORD *)v39 == *(_DWORD *)v40)
        {
          v40 += 2;
          int v39 = (void *)((char *)v39 + 4);
        }
        if (v40 < v98 && *(unsigned __int16 *)v39 == *v40)
        {
          ++v40;
          int v39 = (void *)((char *)v39 + 2);
        }
        if (v40 < v101 && *(unsigned __int8 *)v39 == *(unsigned __int8 *)v40) {
          uint64_t v40 = (unsigned __int16 *)((char *)v40 + 1);
        }
LABEL_77:
        unint64_t v42 = (char *)v40 - v38;
        if (v42 <= 0xFFFFFFFFFFFFFFFBLL) {
          goto LABEL_78;
        }
LABEL_80:
        uint64_t v105 = 999999999;
        if (v37 == 6) {
          unint64_t v47 = sub_1DD2BD2E4(a1, (void *)((char *)v15 + 1), v101, &v105);
        }
        else {
          unint64_t v47 = v37 == 5
        }
              ? sub_1DD2BD09C(a1, (void *)((char *)v15 + 1), v101, &v105)
              : sub_1DD2BCE58(a1, (void *)((char *)v15 + 1), v101, &v105);
        unint64_t v48 = v47;
        if (v47 < 4) {
          break;
        }
        unint64_t v49 = v105;
        if ((int)(__clz(v105) + 4 * v47 - 31) <= (int)(__clz(v34) + 4 * v31 - 27)) {
          break;
        }
        unint64_t v35 = (unsigned __int16 *)((char *)v35 + 1);
        int v15 = (void *)((char *)v15 + 1);
        int v33 = v36;
        uint64_t v34 = v105;
        unint64_t v31 = v47;
        unint64_t v23 = (unint64_t)v104;
        if ((unint64_t)v36 >= v97) {
          goto LABEL_92;
        }
      }
      unint64_t v48 = v31;
      unint64_t v49 = v34;
      unint64_t v36 = v33;
      unint64_t v23 = (unint64_t)v104;
LABEL_92:
      if (v49 <= 3)
      {
        uint64_t v50 = a2;
        uint64_t v22 = a1;
        int v51 = v103;
        uint64_t v20 = v96;
      }
      else
      {
        uint64_t v50 = a2;
        uint64_t v22 = a1;
        int v51 = v103;
        if ((unint64_t)v36 > v5 && (unint64_t)v36 - v49 + 3 > v94)
        {
          unint64_t v52 = 2 - v49;
          uint64_t v53 = v36;
          while (1)
          {
            int v54 = *((unsigned __int8 *)v53 - 1);
            uint64_t v53 = (_DWORD *)((char *)v53 - 1);
            if (v54 != *((unsigned __int8 *)v36 + v52)) {
              break;
            }
            ++v48;
            if ((unint64_t)v53 > v5)
            {
              unint64_t v55 = (char *)v36 + v52;
              unint64_t v36 = v53;
              if ((unint64_t)v55 > v94) {
                continue;
              }
            }
            goto LABEL_102;
          }
        }
        uint64_t v53 = v36;
LABEL_102:
        uint64_t v20 = v21;
        uint64_t v21 = (v49 - 3);
        unint64_t v36 = v53;
      }
      uint64_t v56 = (uint64_t)v36 - v5;
      uint64_t v57 = *(_OWORD **)(v50 + 24);
      if (v36 > (_DWORD *)v51)
      {
        sub_1DD29DBFC(v57, (char *)v5, (unint64_t)v36, v51);
        unint64_t v23 = (unint64_t)v104;
        goto LABEL_105;
      }
      *uint64_t v57 = *(_OWORD *)v5;
      uint64_t v60 = *(void *)(v50 + 24);
      if ((unint64_t)v56 <= 0x10)
      {
        *(void *)(v50 + 24) = v60 + v56;
        uint64_t v58 = *(void *)(v50 + 8);
      }
      else
      {
        *(_OWORD *)(v60 + 16) = *(_OWORD *)(v5 + 16);
        if (v56 >= 33)
        {
          unint64_t v61 = v60 + v56;
          v62 = (_OWORD *)(v60 + 32);
          unint64_t v63 = (long long *)(v5 + 48);
          do
          {
            _OWORD *v62 = *(v63 - 1);
            long long v64 = *v63;
            v63 += 2;
            v62[1] = v64;
            v62 += 2;
          }
          while ((unint64_t)v62 < v61);
        }
LABEL_105:
        *(void *)(v50 + 24) += v56;
        uint64_t v58 = *(void *)(v50 + 8);
        if ((unint64_t)v56 >= 0x10000)
        {
          unint64_t v59 = (unint64_t)(v58 - *(void *)v50) >> 3;
          *(_DWORD *)(v50 + 72) = 1;
          *(_DWORD *)(v50 + 76) = v59;
        }
      }
      *(_WORD *)(v58 + 4) = v56;
      *(_DWORD *)uint64_t v58 = v49;
      if (v48 - 3 >= 0x10000)
      {
        unint64_t v65 = (unint64_t)(v58 - *(void *)v50) >> 3;
        *(_DWORD *)(v50 + 72) = 2;
        *(_DWORD *)(v50 + 76) = v65;
      }
      *(_WORD *)(v58 + 6) = v48 - 3;
      *(void *)(v50 + 8) = v58 + 8;
      if (*(_DWORD *)(v22 + 300)) {
        *(_DWORD *)(v22 + 300) = 0;
      }
      unint64_t v5 = (unint64_t)v36 + v48;
      if (!v20)
      {
        int v15 = (void *)((char *)v36 + v48);
        unint64_t v6 = v101;
        unint64_t v7 = v97;
        goto LABEL_151;
      }
      unint64_t v7 = v97;
      if (v5 > v97)
      {
        int v15 = (void *)v5;
        unint64_t v6 = v101;
LABEL_151:
        int v12 = v100;
        goto LABEL_158;
      }
      uint64_t v66 = v21;
      uint64_t v67 = v20;
      unint64_t v6 = v101;
      int v12 = v100;
      while (2)
      {
        uint64_t v21 = v67;
        uint64_t v67 = v66;
        if (*(_DWORD *)v5 != *(_DWORD *)(v5 - v21))
        {
          LODWORD(v20) = v21;
          uint64_t v21 = v66;
          goto LABEL_157;
        }
        v68 = (char *)(v5 + 4);
        uint64_t v69 = (void *)(v5 + 4 - v21);
        if (v23 <= v5 + 4)
        {
          uint64_t v73 = (unsigned __int16 *)(v5 + 4);
          uint64_t v71 = v103;
        }
        else
        {
          unint64_t v70 = *(void *)v68 ^ *v69;
          uint64_t v71 = v103;
          if (v70)
          {
            unint64_t v72 = __clz(__rbit64(v70)) >> 3;
            goto LABEL_135;
          }
          unint64_t v77 = v5 + 12;
          while (1)
          {
            unint64_t v78 = (void *)(v77 + v70);
            if (v77 + v70 >= v23) {
              break;
            }
            uint64_t v79 = *(void *)(v5 + 12 - v21 + v70);
            v70 += 8;
            unint64_t v80 = *v78 ^ v79;
            if (v80)
            {
              unint64_t v72 = v70 + (__clz(__rbit64(v80)) >> 3);
              goto LABEL_135;
            }
          }
          uint64_t v73 = (unsigned __int16 *)(v5 + v70 + 12);
          uint64_t v69 = (void *)((char *)v73 - v21);
        }
        if (v73 < v99 && *(_DWORD *)v69 == *(_DWORD *)v73)
        {
          v73 += 2;
          uint64_t v69 = (void *)((char *)v69 + 4);
        }
        if (v73 < v98 && *(unsigned __int16 *)v69 == *v73)
        {
          ++v73;
          uint64_t v69 = (void *)((char *)v69 + 2);
        }
        if (v73 < v101 && *(unsigned __int8 *)v69 == *(unsigned __int8 *)v73) {
          uint64_t v73 = (unsigned __int16 *)((char *)v73 + 1);
        }
        unint64_t v72 = (char *)v73 - v68;
LABEL_135:
        unint64_t v74 = *(_OWORD **)(v50 + 24);
        if (v5 <= (unint64_t)v71)
        {
          _OWORD *v74 = *(_OWORD *)v5;
        }
        else
        {
          sub_1DD29DBFC(v74, (char *)v5, v5, v71);
          unint64_t v23 = (unint64_t)v104;
        }
        uint64_t v75 = *(void *)(v50 + 8);
        *(_WORD *)(v75 + 4) = 0;
        *(_DWORD *)uint64_t v75 = 1;
        if (v72 + 1 >= 0x10000)
        {
          unint64_t v76 = (unint64_t)(v75 - *(void *)v50) >> 3;
          *(_DWORD *)(v50 + 72) = 2;
          *(_DWORD *)(v50 + 76) = v76;
        }
        *(_WORD *)(v75 + 6) = v72 + 1;
        *(void *)(v50 + 8) = v75 + 8;
        v5 += v72 + 4;
        if (v67)
        {
          uint64_t v66 = v21;
          LODWORD(v20) = v67;
          int v15 = (void *)v5;
          if (v5 > v97) {
            goto LABEL_158;
          }
          continue;
        }
        break;
      }
      LODWORD(v20) = 0;
LABEL_157:
      int v15 = (void *)v5;
LABEL_158:
      if ((unint64_t)v15 >= v7)
      {
        a3 = v93;
        unsigned int v14 = v91;
        unsigned int v13 = v92;
        unsigned int v19 = v90;
        break;
      }
    }
  }
  if (v14 <= v19) {
    unsigned int v85 = 0;
  }
  else {
    unsigned int v85 = v14;
  }
  if (v13 <= v19) {
    unsigned int v86 = 0;
  }
  else {
    unsigned int v86 = v13;
  }
  if (v21) {
    unsigned int v87 = v21;
  }
  else {
    unsigned int v87 = v85;
  }
  if (v21) {
    BOOL v88 = v85 == 0;
  }
  else {
    BOOL v88 = 1;
  }
  if (v88) {
    unsigned int v85 = v86;
  }
  if (v20) {
    unsigned int v85 = v20;
  }
  *a3 = v87;
  a3[1] = v85;
  return (char *)v6 - v5;
}

char *sub_1DD2AFFEC(uint64_t a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  unint64_t v5 = a4;
  unint64_t v6 = (char *)(a4 + a5);
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(unsigned int *)(a1 + 24);
  unsigned int v9 = *(_DWORD *)(a1 + 272);
  if (v9 >= 6) {
    unsigned int v9 = 6;
  }
  if (v9 <= 4) {
    unsigned int v9 = 4;
  }
  unsigned int v74 = v9;
  unsigned int v11 = *a3;
  unsigned int v10 = a3[1];
  unint64_t v73 = v7 + v8;
  if (a4 == v7 + v8) {
    unint64_t v12 = a4 + 1;
  }
  else {
    unint64_t v12 = a4;
  }
  int v13 = v12 - v7;
  unsigned int v14 = 1 << *(_DWORD *)(a1 + 256);
  if (v13 - (int)v8 > v14 && *(_DWORD *)(a1 + 40) == 0) {
    LODWORD(v8) = v13 - v14;
  }
  unsigned int v16 = v13 - v8;
  if (v10 <= v16) {
    uint64_t v17 = v10;
  }
  else {
    uint64_t v17 = 0;
  }
  if (v11 <= v16) {
    uint64_t v18 = v11;
  }
  else {
    uint64_t v18 = 0;
  }
  *(_DWORD *)(a1 + 300) = 0;
  unint64_t v79 = a4 + a5 - 8;
  if (v12 < v79)
  {
    unsigned int v69 = v16;
    unsigned int v70 = v11;
    unsigned int v71 = v10;
    unint64_t v72 = a3;
    unint64_t v20 = (unint64_t)(v6 - 7);
    unint64_t v77 = v6 - 1;
    unint64_t v78 = v6 - 3;
    uint64_t v21 = v6 - 32;
    uint64_t v75 = (char *)(a4 + a5);
    while (1)
    {
      if (v18)
      {
        unint64_t v22 = v12 + 1;
        if (*(_DWORD *)(v12 + 1 - v18) == *(_DWORD *)(v12 + 1)) {
          break;
        }
      }
      uint64_t v80 = 999999999;
      if (v74 == 6)
      {
        unint64_t v27 = sub_1DD2BD2E4(a1, (void *)v12, v6, &v80);
      }
      else if (v74 == 5)
      {
        unint64_t v27 = sub_1DD2BD09C(a1, (void *)v12, v6, &v80);
      }
      else
      {
        unint64_t v27 = sub_1DD2BCE58(a1, (_DWORD *)v12, v6, &v80);
      }
      unint64_t v29 = v27;
      if (v27) {
        unint64_t v30 = v80;
      }
      else {
        unint64_t v30 = 1;
      }
      if (v27 > 3)
      {
        if (v30 >= 4)
        {
          if (v12 > v5 && v12 - v30 + 3 > v73)
          {
            unint64_t v32 = 2 - v30;
            unint64_t v22 = v12;
            while (1)
            {
              int v33 = *(unsigned __int8 *)--v22;
              if (v33 != *(unsigned __int8 *)(v12 + v32)) {
                break;
              }
              ++v29;
              if (v22 > v5)
              {
                unint64_t v34 = v12 + v32;
                unint64_t v12 = v22;
                if (v34 > v73) {
                  continue;
                }
              }
              goto LABEL_57;
            }
          }
          unint64_t v22 = v12;
LABEL_57:
          uint64_t v17 = v18;
          uint64_t v18 = (v30 - 3);
LABEL_58:
          unint64_t v12 = v22;
        }
        uint64_t v35 = v12 - v5;
        unint64_t v36 = *(_OWORD **)(a2 + 24);
        if (v12 > (unint64_t)v21)
        {
          sub_1DD29DBFC(v36, (char *)v5, v12, v21);
          goto LABEL_61;
        }
        *unint64_t v36 = *(_OWORD *)v5;
        uint64_t v40 = *(void *)(a2 + 24);
        if ((unint64_t)v35 <= 0x10)
        {
          *(void *)(a2 + 24) = v40 + v35;
          uint64_t v37 = *(void *)(a2 + 8);
          uint64_t v38 = a1;
        }
        else
        {
          *(_OWORD *)(v40 + 16) = *(_OWORD *)(v5 + 16);
          if (v35 >= 33)
          {
            unint64_t v41 = v40 + v35;
            unint64_t v42 = (_OWORD *)(v40 + 32);
            uint64_t v43 = (long long *)(v5 + 48);
            do
            {
              *unint64_t v42 = *(v43 - 1);
              long long v44 = *v43;
              v43 += 2;
              v42[1] = v44;
              v42 += 2;
            }
            while ((unint64_t)v42 < v41);
          }
LABEL_61:
          *(void *)(a2 + 24) += v35;
          uint64_t v37 = *(void *)(a2 + 8);
          uint64_t v38 = a1;
          if ((unint64_t)v35 >= 0x10000)
          {
            unint64_t v39 = (unint64_t)(v37 - *(void *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 1;
            *(_DWORD *)(a2 + 76) = v39;
          }
        }
        *(_WORD *)(v37 + 4) = v35;
        *(_DWORD *)uint64_t v37 = v30;
        if (v29 - 3 >= 0x10000)
        {
          unint64_t v45 = (unint64_t)(v37 - *(void *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v45;
        }
        *(_WORD *)(v37 + 6) = v29 - 3;
        *(void *)(a2 + 8) = v37 + 8;
        unint64_t v6 = v75;
        if (*(_DWORD *)(v38 + 300)) {
          *(_DWORD *)(v38 + 300) = 0;
        }
        unint64_t v5 = v12 + v29;
        if (v17 && v5 <= v79)
        {
          uint64_t v46 = v18;
          uint64_t v47 = v17;
          while (1)
          {
            uint64_t v18 = v47;
            uint64_t v47 = v46;
            if (*(_DWORD *)v5 != *(_DWORD *)(v5 - v18))
            {
              uint64_t v17 = v18;
              uint64_t v18 = v46;
              break;
            }
            unint64_t v48 = (char *)(v5 + 4);
            unint64_t v49 = (char *)(v5 + 4 - v18);
            if (v20 <= v5 + 4)
            {
              unint64_t v52 = (char *)(v5 + 4);
            }
            else
            {
              unint64_t v50 = *(void *)v48 ^ *(void *)v49;
              if (v50)
              {
                unint64_t v51 = __clz(__rbit64(v50)) >> 3;
                goto LABEL_91;
              }
              unint64_t v56 = v5 + 12;
              while (1)
              {
                uint64_t v57 = (void *)(v56 + v50);
                if (v56 + v50 >= v20) {
                  break;
                }
                uint64_t v58 = *(void *)(v5 + 12 - v18 + v50);
                v50 += 8;
                unint64_t v59 = *v57 ^ v58;
                if (v59)
                {
                  unint64_t v51 = v50 + (__clz(__rbit64(v59)) >> 3);
                  goto LABEL_91;
                }
              }
              unint64_t v52 = (char *)(v5 + v50 + 12);
              unint64_t v49 = &v52[-v18];
            }
            if (v52 < v78 && *(_DWORD *)v49 == *(_DWORD *)v52)
            {
              v52 += 4;
              v49 += 4;
            }
            if (v52 < v77 && *(unsigned __int16 *)v49 == *(unsigned __int16 *)v52)
            {
              v52 += 2;
              v49 += 2;
            }
            if (v52 < v75 && *v49 == *v52) {
              ++v52;
            }
            unint64_t v51 = v52 - v48;
LABEL_91:
            uint64_t v53 = *(_OWORD **)(a2 + 24);
            if (v5 <= (unint64_t)v21) {
              *uint64_t v53 = *(_OWORD *)v5;
            }
            else {
              sub_1DD29DBFC(v53, (char *)v5, v5, v21);
            }
            uint64_t v54 = *(void *)(a2 + 8);
            *(_WORD *)(v54 + 4) = 0;
            *(_DWORD *)uint64_t v54 = 1;
            if (v51 + 1 >= 0x10000)
            {
              unint64_t v55 = (unint64_t)(v54 - *(void *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 2;
              *(_DWORD *)(a2 + 76) = v55;
            }
            *(_WORD *)(v54 + 6) = v51 + 1;
            *(void *)(a2 + 8) = v54 + 8;
            v5 += v51 + 4;
            if (!v47)
            {
              uint64_t v17 = v47;
              break;
            }
            uint64_t v46 = v18;
            uint64_t v17 = v47;
            unint64_t v12 = v5;
            if (v5 > v79) {
              goto LABEL_111;
            }
          }
        }
        unint64_t v12 = v5;
        goto LABEL_111;
      }
      unint64_t v31 = v12 - v5;
      v12 += ((v12 - v5) >> 8) + 1;
      unint64_t v6 = v75;
      *(_DWORD *)(a1 + 300) = v31 > 0x7FF;
LABEL_111:
      if (v12 >= v79)
      {
        a3 = v72;
        unsigned int v11 = v70;
        unsigned int v10 = v71;
        unsigned int v16 = v69;
        goto LABEL_114;
      }
    }
    unint64_t v23 = (char *)(v12 + 5);
    unint64_t v24 = (char *)(v12 + 5 - v18);
    if (v20 <= v12 + 5)
    {
      unint64_t v28 = (char *)(v12 + 5);
    }
    else
    {
      unint64_t v25 = *(void *)v23 ^ *(void *)v24;
      if (v25)
      {
        unint64_t v26 = __clz(__rbit64(v25)) >> 3;
LABEL_40:
        unint64_t v29 = v26 + 4;
        LODWORD(v30) = 1;
        goto LABEL_58;
      }
      unint64_t v60 = v12 + 13;
      while (1)
      {
        unint64_t v61 = (void *)(v60 + v25);
        if (v60 + v25 >= v20) {
          break;
        }
        uint64_t v62 = *(void *)(v12 + 13 - v18 + v25);
        v25 += 8;
        unint64_t v63 = *v61 ^ v62;
        if (v63)
        {
          unint64_t v26 = v25 + (__clz(__rbit64(v63)) >> 3);
          goto LABEL_40;
        }
      }
      unint64_t v28 = (char *)(v12 + v25 + 13);
      unint64_t v24 = &v28[-v18];
      unint64_t v6 = v75;
    }
    if (v28 < v78 && *(_DWORD *)v24 == *(_DWORD *)v28)
    {
      v28 += 4;
      v24 += 4;
    }
    if (v28 < v77 && *(unsigned __int16 *)v24 == *(unsigned __int16 *)v28)
    {
      v28 += 2;
      v24 += 2;
    }
    if (v28 < v6 && *v24 == *v28) {
      ++v28;
    }
    unint64_t v26 = v28 - v23;
    goto LABEL_40;
  }
LABEL_114:
  if (v11 <= v16) {
    unsigned int v64 = 0;
  }
  else {
    unsigned int v64 = v11;
  }
  if (v10 <= v16) {
    unsigned int v65 = 0;
  }
  else {
    unsigned int v65 = v10;
  }
  if (v18) {
    unsigned int v66 = v18;
  }
  else {
    unsigned int v66 = v64;
  }
  if (v18) {
    BOOL v67 = v64 == 0;
  }
  else {
    BOOL v67 = 1;
  }
  if (v67) {
    unsigned int v64 = v65;
  }
  if (v17) {
    unsigned int v64 = v17;
  }
  *a3 = v66;
  a3[1] = v64;
  return &v6[-v5];
}

unint64_t sub_1DD2B0624(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t *a4, uint64_t a5)
{
  unint64_t v5 = (unint64_t)a4;
  unint64_t v6 = (unint64_t)a4 + a5;
  uint64_t v7 = *(unsigned int *)(a1 + 24);
  uint64_t v88 = *(void *)(a1 + 8);
  unsigned int v8 = *(_DWORD *)(a1 + 272);
  if (v8 >= 6) {
    unsigned int v8 = 6;
  }
  if (v8 <= 4) {
    unsigned int v8 = 4;
  }
  unsigned int v87 = v8;
  uint64_t v9 = *a3;
  unsigned int v10 = a3[1];
  uint64_t v11 = *(void *)(a1 + 248);
  unint64_t v12 = *(char **)v11;
  uint64_t v13 = *(void *)(v11 + 8);
  uint64_t v82 = (void *)(v88 + v7);
  unint64_t v76 = v13 + *(unsigned int *)(v11 + 24);
  if (a4 - (v88 + v7) - v76 + *(void *)v11) {
    unsigned int v14 = a4;
  }
  else {
    unsigned int v14 = (uint64_t *)((char *)a4 + 1);
  }
  *(_DWORD *)(a1 + 300) = 0;
  unint64_t v89 = (unint64_t)a4 + a5 - 8;
  if ((unint64_t)v14 < v89)
  {
    uint64_t v15 = a1;
    uint64_t v75 = a3;
    unsigned int v86 = v7 + v13 - v12;
    uint64_t v79 = v13 - v86;
    uint64_t v80 = (char *)(v6 - 32);
    uint64_t v81 = v12;
    uint64_t v85 = v13;
    unint64_t v83 = (unint64_t)a4 + a5;
    while (1)
    {
      unsigned int v16 = (uint64_t *)((char *)v14 + 1);
      int v17 = v14 - v88 - v9;
      uint64_t v18 = (v17 + 1);
      uint64_t v19 = v13 + v18 - v86;
      if (v18 >= v7) {
        uint64_t v19 = v88 + v18;
      }
      if ((v7 - v17 - 5) <= 0xFFFFFFFC && *(_DWORD *)v19 == *(_DWORD *)v16)
      {
        unint64_t v20 = v18 >= v7 ? (char *)v6 : v81;
        unint64_t v21 = sub_1DD2A6010((uint64_t *)((char *)v14 + 5), (char *)(v19 + 4), v6, v20, v82) + 4;
      }
      else
      {
        unint64_t v21 = 0;
      }
      uint64_t v90 = 999999999;
      if (v87 == 6) {
        unint64_t v22 = sub_1DD2C54B0(v15, v14, v6, (unsigned int *)&v90);
      }
      else {
        unint64_t v22 = v87 == 5
      }
            ? sub_1DD2C5424(v15, v14, v6, (unsigned int *)&v90)
            : sub_1DD2C5398(v15, v14, v6, (unsigned int *)&v90);
      unint64_t v23 = v22 <= v21 ? v21 : v22;
      if (v23 >= 4) {
        break;
      }
      unint64_t v24 = (unint64_t)v14 - v5;
      unsigned int v14 = (uint64_t *)((char *)v14 + (((unint64_t)v14 - v5) >> 8) + 1);
      *(_DWORD *)(v15 + 300) = v24 > 0x7FF;
      uint64_t v13 = v85;
LABEL_120:
      if ((unint64_t)v14 >= v89)
      {
        a3 = v75;
        goto LABEL_122;
      }
    }
    unsigned int v78 = v10;
    if (v22 <= v21)
    {
      uint64_t v25 = 1;
    }
    else
    {
      unsigned int v16 = v14;
      uint64_t v25 = v90;
    }
    unint64_t v26 = v23;
    unint64_t v27 = v25;
    unint64_t v28 = v16;
    if ((unint64_t)v14 < v89)
    {
      while (1)
      {
        unint64_t v28 = (uint64_t *)((char *)v14 + 1);
        uint64_t v29 = (v14 + 1 - v88 - v9);
        uint64_t v30 = v85 + v29 - v86;
        if (v29 >= v7) {
          uint64_t v30 = v88 + v29;
        }
        if ((v7 + ~v29) < 3) {
          break;
        }
        unint64_t v31 = v83;
        uint64_t v32 = a1;
        if (*(_DWORD *)v30 != *(_DWORD *)v28) {
          goto LABEL_44;
        }
        int v33 = v29 >= v7 ? (char *)v83 : v81;
        unint64_t v34 = sub_1DD2A6010((uint64_t *)((char *)v14 + 5), (char *)(v30 + 4), v83, v33, v82);
        if (v34 > 0xFFFFFFFFFFFFFFFBLL) {
          goto LABEL_44;
        }
        unsigned int v35 = v87;
        if (3 * ((int)v34 + 4) > (int)(3 * v23 + __clz(v25) - 30))
        {
          unint64_t v23 = v34 + 4;
          uint64_t v25 = 1;
          unsigned int v16 = (uint64_t *)((char *)v14 + 1);
        }
LABEL_45:
        uint64_t v90 = 999999999;
        unint64_t v36 = (uint64_t *)((char *)v14 + 1);
        if (v35 == 6)
        {
          unint64_t v37 = sub_1DD2C54B0(v32, v36, v31, (unsigned int *)&v90);
        }
        else if (v35 == 5)
        {
          unint64_t v37 = sub_1DD2C5424(v32, v36, v31, (unsigned int *)&v90);
        }
        else
        {
          unint64_t v37 = sub_1DD2C5398(v32, v36, v31, (unsigned int *)&v90);
        }
        unint64_t v26 = v37;
        if (v37 >= 4)
        {
          unint64_t v27 = v90;
          if ((int)(__clz(v90) + 4 * v37 - 31) > (int)(__clz(v25) + 4 * v23 - 27)) {
            goto LABEL_72;
          }
        }
        if ((unint64_t)v28 >= v89) {
          goto LABEL_74;
        }
        unint64_t v28 = (uint64_t *)((char *)v14 + 2);
        uint64_t v38 = (v14 + 2 - v88 - v9);
        uint64_t v39 = v85 + v38 - v86;
        if (v38 >= v7) {
          uint64_t v39 = v88 + v38;
        }
        if ((v7 + ~v38) < 3)
        {
          unint64_t v40 = v83;
          uint64_t v41 = a1;
LABEL_64:
          unsigned int v44 = v87;
          goto LABEL_65;
        }
        unint64_t v40 = v83;
        uint64_t v41 = a1;
        if (*(_DWORD *)v39 != *(_DWORD *)v28) {
          goto LABEL_64;
        }
        unint64_t v42 = v38 >= v7 ? (char *)v83 : v81;
        unint64_t v43 = sub_1DD2A6010((uint64_t *)((char *)v14 + 6), (char *)(v39 + 4), v83, v42, v82);
        if (v43 > 0xFFFFFFFFFFFFFFFBLL) {
          goto LABEL_64;
        }
        unsigned int v44 = v87;
        if ((int)(__clz(v25) + 4 * v23 - 30) < 4 * ((int)v43 + 4))
        {
          unint64_t v23 = v43 + 4;
          uint64_t v25 = 1;
          unsigned int v16 = (uint64_t *)((char *)v14 + 2);
        }
LABEL_65:
        uint64_t v90 = 999999999;
        unint64_t v45 = (uint64_t *)((char *)v14 + 2);
        if (v44 == 6)
        {
          unint64_t v46 = sub_1DD2C54B0(v41, v45, v40, (unsigned int *)&v90);
        }
        else if (v44 == 5)
        {
          unint64_t v46 = sub_1DD2C5424(v41, v45, v40, (unsigned int *)&v90);
        }
        else
        {
          unint64_t v46 = sub_1DD2C5398(v41, v45, v40, (unsigned int *)&v90);
        }
        unint64_t v26 = v46;
        if (v46 < 4 || (unint64_t v27 = v90, (int)(__clz(v90) + 4 * v46 - 31) <= (int)(__clz(v25) + 4 * v23 - 24)))
        {
LABEL_74:
          unint64_t v26 = v23;
          unint64_t v27 = v25;
          unint64_t v28 = v16;
          goto LABEL_75;
        }
LABEL_72:
        unsigned int v14 = v28;
        unsigned int v16 = v28;
        uint64_t v25 = v27;
        unint64_t v23 = v26;
        if ((unint64_t)v28 >= v89) {
          goto LABEL_75;
        }
      }
      unint64_t v31 = v83;
      uint64_t v32 = a1;
LABEL_44:
      unsigned int v35 = v87;
      goto LABEL_45;
    }
LABEL_75:
    if (v27 <= 3)
    {
      uint64_t v53 = v80;
    }
    else
    {
      uint64_t v47 = v88;
      unint64_t v48 = v88 + v7;
      if (v7 > (int)v28 - ((int)v27 + (int)v88) + 3)
      {
        unint64_t v48 = v76;
        uint64_t v47 = v79;
      }
      if ((unint64_t)v28 > v5 && v47 + (unint64_t)(v28 - (v27 + v88) + 3) > v48)
      {
        unint64_t v49 = (unsigned __int8 *)(v47 + (v28 - (v27 + v88) + 3) - 1);
        unint64_t v50 = (unsigned __int8 *)v28 - 1;
        while (*v50 == *v49)
        {
          ++v26;
          unint64_t v51 = v50 - 1;
          if ((unint64_t)v50 > v5)
          {
            --v50;
            if ((unint64_t)v49-- > v48) {
              continue;
            }
          }
          unint64_t v28 = (uint64_t *)(v51 + 1);
          goto LABEL_87;
        }
        unint64_t v28 = (uint64_t *)(v50 + 1);
      }
LABEL_87:
      uint64_t v53 = v80;
      unsigned int v78 = v9;
      uint64_t v9 = (v27 - 3);
    }
    uint64_t v54 = (uint64_t)v28 - v5;
    unint64_t v55 = *(_OWORD **)(a2 + 24);
    if (v28 <= (uint64_t *)v53)
    {
      *unint64_t v55 = *(_OWORD *)v5;
      uint64_t v58 = *(void *)(a2 + 24);
      if ((unint64_t)v54 <= 0x10)
      {
        *(void *)(a2 + 24) = v58 + v54;
        uint64_t v56 = *(void *)(a2 + 8);
        goto LABEL_98;
      }
      *(_OWORD *)(v58 + 16) = *(_OWORD *)(v5 + 16);
      if (v54 >= 33)
      {
        unint64_t v59 = v58 + v54;
        unint64_t v60 = (_OWORD *)(v58 + 32);
        unint64_t v61 = (long long *)(v5 + 48);
        do
        {
          *unint64_t v60 = *(v61 - 1);
          long long v62 = *v61;
          v61 += 2;
          v60[1] = v62;
          v60 += 2;
        }
        while ((unint64_t)v60 < v59);
      }
    }
    else
    {
      sub_1DD29DBFC(v55, (char *)v5, (unint64_t)v28, v53);
    }
    *(void *)(a2 + 24) += v54;
    uint64_t v56 = *(void *)(a2 + 8);
    if ((unint64_t)v54 >= 0x10000)
    {
      unint64_t v57 = (unint64_t)(v56 - *(void *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v57;
    }
LABEL_98:
    *(_WORD *)(v56 + 4) = v54;
    *(_DWORD *)uint64_t v56 = v27;
    if (v26 - 3 >= 0x10000)
    {
      unint64_t v63 = (unint64_t)(v56 - *(void *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 2;
      *(_DWORD *)(a2 + 76) = v63;
    }
    *(_WORD *)(v56 + 6) = v26 - 3;
    *(void *)(a2 + 8) = v56 + 8;
    uint64_t v13 = v85;
    if (*(_DWORD *)(a1 + 300)) {
      *(_DWORD *)(a1 + 300) = 0;
    }
    unint64_t v5 = (unint64_t)v28 + v26;
    if ((unint64_t)v28 + v26 <= v89)
    {
      uint64_t v64 = v9;
      uint64_t v65 = v78;
      unint64_t v6 = v83;
      uint64_t v15 = a1;
      while (1)
      {
        uint64_t v9 = v65;
        uint64_t v65 = v64;
        uint64_t v66 = v88;
        uint64_t v67 = (v5 - v88 - v9);
        if (v67 < v7) {
          uint64_t v66 = v79;
        }
        if ((v7 + ~v67) < 3) {
          break;
        }
        uint64_t v68 = v66 + v67;
        if (*(_DWORD *)v68 != *(_DWORD *)v5) {
          break;
        }
        if (v67 >= v7) {
          unsigned int v69 = (char *)v83;
        }
        else {
          unsigned int v69 = v81;
        }
        unint64_t v70 = sub_1DD2A6010((void *)(v5 + 4), (char *)(v68 + 4), v83, v69, v82);
        unsigned int v71 = *(_OWORD **)(a2 + 24);
        if (v5 <= (unint64_t)v80) {
          _OWORD *v71 = *(_OWORD *)v5;
        }
        else {
          sub_1DD29DBFC(v71, (char *)v5, v5, v80);
        }
        uint64_t v72 = *(void *)(a2 + 8);
        *(_WORD *)(v72 + 4) = 0;
        *(_DWORD *)uint64_t v72 = 1;
        if (v70 + 1 >= 0x10000)
        {
          unint64_t v73 = (unint64_t)(v72 - *(void *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v73;
        }
        *(_WORD *)(v72 + 6) = v70 + 1;
        v5 += v70 + 4;
        *(void *)(a2 + 8) = v72 + 8;
        uint64_t v64 = v9;
        unsigned int v10 = v65;
        unsigned int v14 = (uint64_t *)v5;
        if (v5 > v89) {
          goto LABEL_120;
        }
      }
      unsigned int v10 = v9;
      uint64_t v9 = v64;
      unsigned int v14 = (uint64_t *)v5;
    }
    else
    {
      unsigned int v14 = (uint64_t *)((char *)v28 + v26);
      unint64_t v6 = v83;
      uint64_t v15 = a1;
      unsigned int v10 = v78;
    }
    goto LABEL_120;
  }
LABEL_122:
  *a3 = v9;
  a3[1] = v10;
  return v6 - v5;
}

unint64_t sub_1DD2B0D74(uint64_t a1, uint64_t a2, unsigned int *a3, void *a4, uint64_t a5)
{
  unint64_t v5 = (unint64_t)a4;
  unint64_t v6 = (unint64_t)a4 + a5;
  uint64_t v7 = *(unsigned int *)(a1 + 24);
  uint64_t v88 = *(void *)(a1 + 8);
  unsigned int v8 = *(_DWORD *)(a1 + 272);
  if (v8 >= 6) {
    unsigned int v8 = 6;
  }
  if (v8 <= 4) {
    unsigned int v8 = 4;
  }
  unsigned int v87 = v8;
  uint64_t v9 = *a3;
  unsigned int v10 = a3[1];
  uint64_t v11 = *(void *)(a1 + 248);
  unint64_t v12 = *(char **)v11;
  uint64_t v13 = *(void *)(v11 + 8);
  uint64_t v82 = (void *)(v88 + v7);
  unint64_t v76 = v13 + *(unsigned int *)(v11 + 24);
  if (a4 - (v88 + v7) - v76 + *(void *)v11) {
    unsigned int v14 = a4;
  }
  else {
    unsigned int v14 = (void *)((char *)a4 + 1);
  }
  *(_DWORD *)(a1 + 300) = 0;
  unint64_t v89 = (unint64_t)a4 + a5 - 8;
  if ((unint64_t)v14 < v89)
  {
    uint64_t v15 = a1;
    uint64_t v75 = a3;
    unsigned int v86 = v7 + v13 - v12;
    uint64_t v79 = v13 - v86;
    uint64_t v80 = (char *)(v6 - 32);
    uint64_t v81 = v12;
    uint64_t v85 = v13;
    unint64_t v83 = (unint64_t)a4 + a5;
    while (1)
    {
      unsigned int v16 = (_DWORD *)((char *)v14 + 1);
      int v17 = v14 - v88 - v9;
      uint64_t v18 = (v17 + 1);
      uint64_t v19 = v13 + v18 - v86;
      if (v18 >= v7) {
        uint64_t v19 = v88 + v18;
      }
      if ((v7 - v17 - 5) <= 0xFFFFFFFC && *(_DWORD *)v19 == *v16)
      {
        unint64_t v20 = v18 >= v7 ? (char *)v6 : v81;
        unint64_t v21 = sub_1DD2A6010((void *)((char *)v14 + 5), (char *)(v19 + 4), v6, v20, v82) + 4;
      }
      else
      {
        unint64_t v21 = 0;
      }
      uint64_t v90 = 999999999;
      if (v87 == 6) {
        unint64_t v22 = sub_1DD2C5028(v15, v14, v6, &v90);
      }
      else {
        unint64_t v22 = v87 == 5 ? sub_1DD2C4CB8(v15, v14, v6, &v90) : sub_1DD2C494C(v15, v14, v6, &v90);
      }
      unint64_t v23 = v22 <= v21 ? v21 : v22;
      if (v23 >= 4) {
        break;
      }
      unint64_t v24 = (unint64_t)v14 - v5;
      unsigned int v14 = (void *)((char *)v14 + (((unint64_t)v14 - v5) >> 8) + 1);
      *(_DWORD *)(v15 + 300) = v24 > 0x7FF;
      uint64_t v13 = v85;
LABEL_120:
      if ((unint64_t)v14 >= v89)
      {
        a3 = v75;
        goto LABEL_122;
      }
    }
    unsigned int v78 = v10;
    if (v22 <= v21)
    {
      uint64_t v25 = 1;
    }
    else
    {
      unsigned int v16 = v14;
      uint64_t v25 = v90;
    }
    unint64_t v26 = v23;
    unint64_t v27 = v25;
    unint64_t v28 = v16;
    if ((unint64_t)v14 < v89)
    {
      while (1)
      {
        unint64_t v28 = (_DWORD *)((char *)v14 + 1);
        uint64_t v29 = (v14 + 1 - v88 - v9);
        uint64_t v30 = v85 + v29 - v86;
        if (v29 >= v7) {
          uint64_t v30 = v88 + v29;
        }
        if ((v7 + ~v29) < 3) {
          break;
        }
        unint64_t v31 = v83;
        uint64_t v32 = a1;
        if (*(_DWORD *)v30 != *v28) {
          goto LABEL_44;
        }
        int v33 = v29 >= v7 ? (char *)v83 : v81;
        unint64_t v34 = sub_1DD2A6010((void *)((char *)v14 + 5), (char *)(v30 + 4), v83, v33, v82);
        if (v34 > 0xFFFFFFFFFFFFFFFBLL) {
          goto LABEL_44;
        }
        unsigned int v35 = v87;
        if (3 * ((int)v34 + 4) > (int)(3 * v23 + __clz(v25) - 30))
        {
          unint64_t v23 = v34 + 4;
          uint64_t v25 = 1;
          unsigned int v16 = (_DWORD *)((char *)v14 + 1);
        }
LABEL_45:
        uint64_t v90 = 999999999;
        unint64_t v36 = (void *)((char *)v14 + 1);
        if (v35 == 6)
        {
          unint64_t v37 = sub_1DD2C5028(v32, v36, v31, &v90);
        }
        else if (v35 == 5)
        {
          unint64_t v37 = sub_1DD2C4CB8(v32, v36, v31, &v90);
        }
        else
        {
          unint64_t v37 = sub_1DD2C494C(v32, v36, v31, &v90);
        }
        unint64_t v26 = v37;
        if (v37 >= 4)
        {
          unint64_t v27 = v90;
          if ((int)(__clz(v90) + 4 * v37 - 31) > (int)(__clz(v25) + 4 * v23 - 27)) {
            goto LABEL_72;
          }
        }
        if ((unint64_t)v28 >= v89) {
          goto LABEL_74;
        }
        unint64_t v28 = (_DWORD *)((char *)v14 + 2);
        uint64_t v38 = (v14 + 2 - v88 - v9);
        uint64_t v39 = v85 + v38 - v86;
        if (v38 >= v7) {
          uint64_t v39 = v88 + v38;
        }
        if ((v7 + ~v38) < 3)
        {
          unint64_t v40 = v83;
          uint64_t v41 = a1;
LABEL_64:
          unsigned int v44 = v87;
          goto LABEL_65;
        }
        unint64_t v40 = v83;
        uint64_t v41 = a1;
        if (*(_DWORD *)v39 != *v28) {
          goto LABEL_64;
        }
        unint64_t v42 = v38 >= v7 ? (char *)v83 : v81;
        unint64_t v43 = sub_1DD2A6010((void *)((char *)v14 + 6), (char *)(v39 + 4), v83, v42, v82);
        if (v43 > 0xFFFFFFFFFFFFFFFBLL) {
          goto LABEL_64;
        }
        unsigned int v44 = v87;
        if ((int)(__clz(v25) + 4 * v23 - 30) < 4 * ((int)v43 + 4))
        {
          unint64_t v23 = v43 + 4;
          uint64_t v25 = 1;
          unsigned int v16 = (_DWORD *)((char *)v14 + 2);
        }
LABEL_65:
        uint64_t v90 = 999999999;
        unint64_t v45 = (void *)((char *)v14 + 2);
        if (v44 == 6)
        {
          unint64_t v46 = sub_1DD2C5028(v41, v45, v40, &v90);
        }
        else if (v44 == 5)
        {
          unint64_t v46 = sub_1DD2C4CB8(v41, v45, v40, &v90);
        }
        else
        {
          unint64_t v46 = sub_1DD2C494C(v41, v45, v40, &v90);
        }
        unint64_t v26 = v46;
        if (v46 < 4 || (unint64_t v27 = v90, (int)(__clz(v90) + 4 * v46 - 31) <= (int)(__clz(v25) + 4 * v23 - 24)))
        {
LABEL_74:
          unint64_t v26 = v23;
          unint64_t v27 = v25;
          unint64_t v28 = v16;
          goto LABEL_75;
        }
LABEL_72:
        unsigned int v14 = v28;
        unsigned int v16 = v28;
        uint64_t v25 = v27;
        unint64_t v23 = v26;
        if ((unint64_t)v28 >= v89) {
          goto LABEL_75;
        }
      }
      unint64_t v31 = v83;
      uint64_t v32 = a1;
LABEL_44:
      unsigned int v35 = v87;
      goto LABEL_45;
    }
LABEL_75:
    if (v27 <= 3)
    {
      uint64_t v53 = v80;
    }
    else
    {
      uint64_t v47 = v88;
      unint64_t v48 = v88 + v7;
      if (v7 > (int)v28 - ((int)v27 + (int)v88) + 3)
      {
        unint64_t v48 = v76;
        uint64_t v47 = v79;
      }
      if ((unint64_t)v28 > v5 && v47 + (unint64_t)(v28 - (v27 + v88) + 3) > v48)
      {
        unint64_t v49 = (unsigned __int8 *)(v47 + (v28 - (v27 + v88) + 3) - 1);
        unint64_t v50 = (unsigned __int8 *)v28 - 1;
        while (*v50 == *v49)
        {
          ++v26;
          unint64_t v51 = v50 - 1;
          if ((unint64_t)v50 > v5)
          {
            --v50;
            if ((unint64_t)v49-- > v48) {
              continue;
            }
          }
          unint64_t v28 = v51 + 1;
          goto LABEL_87;
        }
        unint64_t v28 = v50 + 1;
      }
LABEL_87:
      uint64_t v53 = v80;
      unsigned int v78 = v9;
      uint64_t v9 = (v27 - 3);
    }
    uint64_t v54 = (uint64_t)v28 - v5;
    unint64_t v55 = *(_OWORD **)(a2 + 24);
    if (v28 <= (_DWORD *)v53)
    {
      *unint64_t v55 = *(_OWORD *)v5;
      uint64_t v58 = *(void *)(a2 + 24);
      if ((unint64_t)v54 <= 0x10)
      {
        *(void *)(a2 + 24) = v58 + v54;
        uint64_t v56 = *(void *)(a2 + 8);
        goto LABEL_98;
      }
      *(_OWORD *)(v58 + 16) = *(_OWORD *)(v5 + 16);
      if (v54 >= 33)
      {
        unint64_t v59 = v58 + v54;
        unint64_t v60 = (_OWORD *)(v58 + 32);
        unint64_t v61 = (long long *)(v5 + 48);
        do
        {
          *unint64_t v60 = *(v61 - 1);
          long long v62 = *v61;
          v61 += 2;
          v60[1] = v62;
          v60 += 2;
        }
        while ((unint64_t)v60 < v59);
      }
    }
    else
    {
      sub_1DD29DBFC(v55, (char *)v5, (unint64_t)v28, v53);
    }
    *(void *)(a2 + 24) += v54;
    uint64_t v56 = *(void *)(a2 + 8);
    if ((unint64_t)v54 >= 0x10000)
    {
      unint64_t v57 = (unint64_t)(v56 - *(void *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v57;
    }
LABEL_98:
    *(_WORD *)(v56 + 4) = v54;
    *(_DWORD *)uint64_t v56 = v27;
    if (v26 - 3 >= 0x10000)
    {
      unint64_t v63 = (unint64_t)(v56 - *(void *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 2;
      *(_DWORD *)(a2 + 76) = v63;
    }
    *(_WORD *)(v56 + 6) = v26 - 3;
    *(void *)(a2 + 8) = v56 + 8;
    uint64_t v13 = v85;
    if (*(_DWORD *)(a1 + 300)) {
      *(_DWORD *)(a1 + 300) = 0;
    }
    unint64_t v5 = (unint64_t)v28 + v26;
    if ((unint64_t)v28 + v26 <= v89)
    {
      uint64_t v64 = v9;
      uint64_t v65 = v78;
      unint64_t v6 = v83;
      uint64_t v15 = a1;
      while (1)
      {
        uint64_t v9 = v65;
        uint64_t v65 = v64;
        uint64_t v66 = v88;
        uint64_t v67 = (v5 - v88 - v9);
        if (v67 < v7) {
          uint64_t v66 = v79;
        }
        if ((v7 + ~v67) < 3) {
          break;
        }
        uint64_t v68 = v66 + v67;
        if (*(_DWORD *)v68 != *(_DWORD *)v5) {
          break;
        }
        if (v67 >= v7) {
          unsigned int v69 = (char *)v83;
        }
        else {
          unsigned int v69 = v81;
        }
        unint64_t v70 = sub_1DD2A6010((void *)(v5 + 4), (char *)(v68 + 4), v83, v69, v82);
        unsigned int v71 = *(_OWORD **)(a2 + 24);
        if (v5 <= (unint64_t)v80) {
          _OWORD *v71 = *(_OWORD *)v5;
        }
        else {
          sub_1DD29DBFC(v71, (char *)v5, v5, v80);
        }
        uint64_t v72 = *(void *)(a2 + 8);
        *(_WORD *)(v72 + 4) = 0;
        *(_DWORD *)uint64_t v72 = 1;
        if (v70 + 1 >= 0x10000)
        {
          unint64_t v73 = (unint64_t)(v72 - *(void *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v73;
        }
        *(_WORD *)(v72 + 6) = v70 + 1;
        v5 += v70 + 4;
        *(void *)(a2 + 8) = v72 + 8;
        uint64_t v64 = v9;
        unsigned int v10 = v65;
        unsigned int v14 = (void *)v5;
        if (v5 > v89) {
          goto LABEL_120;
        }
      }
      unsigned int v10 = v9;
      uint64_t v9 = v64;
      unsigned int v14 = (void *)v5;
    }
    else
    {
      unsigned int v14 = (void *)((char *)v28 + v26);
      unint64_t v6 = v83;
      uint64_t v15 = a1;
      unsigned int v10 = v78;
    }
    goto LABEL_120;
  }
LABEL_122:
  *a3 = v9;
  a3[1] = v10;
  return v6 - v5;
}

unint64_t sub_1DD2B14C4(uint64_t a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  unint64_t v5 = a4;
  unint64_t v6 = a4 + a5;
  unint64_t v7 = a4 + a5 - 8;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(unsigned int *)(a1 + 24);
  unsigned int v10 = *(_DWORD *)(a1 + 272);
  if (v10 >= 6) {
    unsigned int v10 = 6;
  }
  if (v10 <= 4) {
    unsigned int v10 = 4;
  }
  unsigned int v82 = v10;
  uint64_t v11 = *a3;
  unsigned int v74 = a3[1];
  uint64_t v12 = *(void *)(a1 + 248);
  uint64_t v13 = *(void *)(v12 + 8);
  unsigned int v14 = *(char **)v12;
  unint64_t v83 = (unsigned __int8 *)(v8 + v9);
  unsigned int v71 = (unsigned __int8 *)(v13 + *(unsigned int *)(v12 + 24));
  if (a4 - (v8 + v9) - v71 + *(void *)v12) {
    unint64_t v15 = a4;
  }
  else {
    unint64_t v15 = a4 + 1;
  }
  *(_DWORD *)(a1 + 300) = 0;
  if (v15 < v7)
  {
    uint64_t v17 = a1;
    uint64_t v67 = a3;
    unsigned int v73 = v9 + v13 - v14;
    uint64_t v76 = v13 - v73;
    unint64_t v77 = (char *)(v6 - 32);
    int v69 = -(int)v8;
    int v70 = v9 + v8 - 2;
    unsigned int v78 = v14;
    int v68 = v14 - v9 - v13 - v8 + 1;
    unint64_t v72 = a4 + a5 - 8;
    uint64_t v84 = v8;
    uint64_t v81 = v13;
    unint64_t v79 = a4 + a5;
    unsigned int v85 = v9;
    while (1)
    {
      int v18 = v15 - v8 - v11;
      uint64_t v19 = (v18 + 1);
      uint64_t v20 = v13 + v19 - v73;
      if (v19 >= v9) {
        uint64_t v20 = v8 + v19;
      }
      if ((v9 - v18 - 5) <= 0xFFFFFFFC && *(_DWORD *)v20 == *(_DWORD *)(v15 + 1))
      {
        unint64_t v21 = v19 >= v85 ? (char *)v6 : v78;
        unint64_t v22 = sub_1DD2A6010((void *)(v15 + 5), (char *)(v20 + 4), v6, v21, v83) + 4;
      }
      else
      {
        unint64_t v22 = 0;
      }
      *(void *)unsigned int v86 = 999999999;
      if (v82 == 6) {
        unint64_t v23 = sub_1DD2C5028(v17, (void *)v15, v6, v86);
      }
      else {
        unint64_t v23 = v82 == 5 ? sub_1DD2C4CB8(v17, (void *)v15, v6, v86) : sub_1DD2C494C(v17, (_DWORD *)v15, v6, v86);
      }
      unint64_t v24 = v23 <= v22 ? v22 : v23;
      if (v24 >= 4) {
        break;
      }
      unint64_t v25 = v15 - v5;
      v15 += ((v15 - v5) >> 8) + 1;
      *(_DWORD *)(v17 + 300) = v25 > 0x7FF;
      uint64_t v8 = v84;
      LODWORD(v9) = v85;
      unsigned int v26 = v74;
LABEL_101:
      unsigned int v74 = v26;
      uint64_t v13 = v81;
      if (v15 >= v7)
      {
        a3 = v67;
        goto LABEL_103;
      }
    }
    unint64_t v27 = v7;
    if (v23 <= v22) {
      unint64_t v28 = v15 + 1;
    }
    else {
      unint64_t v28 = v15;
    }
    if (v23 <= v22) {
      unint64_t v29 = 1;
    }
    else {
      unint64_t v29 = *(void *)v86;
    }
    if (v15 < v27)
    {
      uint64_t v30 = 0;
      unint64_t v75 = v27 - v15;
      unsigned int v31 = v70 + v11 - v15;
      while (1)
      {
        uint64_t v32 = (_DWORD *)(v15 + v30 + 1);
        uint64_t v33 = (v69 + v15 - v11 + v30 + 1);
        uint64_t v34 = v81 + (v68 + v15 - v11 + v30);
        if (v33 >= v85) {
          uint64_t v34 = v84 + v33;
        }
        if (v31 >= 3 && *(_DWORD *)v34 == *v32)
        {
          unsigned int v35 = v33 >= v85 ? (char *)v79 : v78;
          unint64_t v36 = sub_1DD2A6010((void *)(v15 + v30 + 5), (char *)(v34 + 4), v79, v35, v83);
          if (v36 <= 0xFFFFFFFFFFFFFFFBLL && 3 * ((int)v36 + 4) > (int)(3 * v24 + __clz(v29) - 30))
          {
            unint64_t v24 = v36 + 4;
            unint64_t v29 = 1;
            unint64_t v28 = v15 + v30 + 1;
          }
        }
        *(void *)unsigned int v86 = 999999999;
        if (v82 == 6) {
          unint64_t v37 = sub_1DD2C5028(a1, (void *)(v15 + v30 + 1), v79, v86);
        }
        else {
          unint64_t v37 = v82 == 5
        }
              ? sub_1DD2C4CB8(a1, (void *)(v15 + v30 + 1), v79, v86)
              : sub_1DD2C494C(a1, (_DWORD *)(v15 + v30 + 1), v79, v86);
        if (v37 < 4 || (int)(__clz(v86[0]) + 4 * v37 - 31) <= (int)(__clz(v29) + 4 * v24 - 27)) {
          break;
        }
        ++v30;
        --v31;
        unint64_t v28 = (unint64_t)v32;
        unint64_t v29 = *(void *)v86;
        unint64_t v24 = v37;
        if (v75 == v30)
        {
          unint64_t v24 = v37;
          unint64_t v29 = *(void *)v86;
          unint64_t v28 = v72;
          break;
        }
      }
      unint64_t v6 = v79;
    }
    uint64_t v38 = v84;
    uint64_t v39 = v77;
    uint64_t v40 = v74;
    if (v29 > 3)
    {
      uint64_t v41 = v83;
      if (v85 > (int)v28 - ((int)v29 + (int)v84) + 3)
      {
        uint64_t v41 = v71;
        uint64_t v38 = v76;
      }
      if (v28 > v5 && v38 + (unint64_t)(v28 - (v29 + v84) + 3) > (unint64_t)v41)
      {
        unint64_t v42 = (unsigned __int8 *)(v38 + (v28 - (v29 + v84) + 3) - 1);
        unint64_t v43 = (unsigned __int8 *)(v28 - 1);
        while (*v43 == *v42)
        {
          ++v24;
          unsigned int v44 = v43 - 1;
          if ((unint64_t)v43 > v5)
          {
            --v43;
            if (v42-- > v41) {
              continue;
            }
          }
          unint64_t v28 = (unint64_t)(v44 + 1);
          goto LABEL_68;
        }
        unint64_t v28 = (unint64_t)(v43 + 1);
      }
LABEL_68:
      uint64_t v39 = v77;
      uint64_t v40 = v11;
      uint64_t v11 = (v29 - 3);
    }
    uint64_t v46 = v28 - v5;
    uint64_t v47 = *(_OWORD **)(a2 + 24);
    if (v28 <= (unint64_t)v39)
    {
      *uint64_t v47 = *(_OWORD *)v5;
      uint64_t v50 = *(void *)(a2 + 24);
      if ((unint64_t)v46 <= 0x10)
      {
        *(void *)(a2 + 24) = v50 + v46;
        uint64_t v48 = *(void *)(a2 + 8);
        goto LABEL_79;
      }
      *(_OWORD *)(v50 + 16) = *(_OWORD *)(v5 + 16);
      if (v46 >= 33)
      {
        unint64_t v51 = v50 + v46;
        unint64_t v52 = (_OWORD *)(v50 + 32);
        uint64_t v53 = (long long *)(v5 + 48);
        do
        {
          *unint64_t v52 = *(v53 - 1);
          long long v54 = *v53;
          v53 += 2;
          v52[1] = v54;
          v52 += 2;
        }
        while ((unint64_t)v52 < v51);
      }
    }
    else
    {
      sub_1DD29DBFC(v47, (char *)v5, v28, v39);
    }
    *(void *)(a2 + 24) += v46;
    uint64_t v48 = *(void *)(a2 + 8);
    if ((unint64_t)v46 >= 0x10000)
    {
      unint64_t v49 = (unint64_t)(v48 - *(void *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v49;
    }
LABEL_79:
    *(_WORD *)(v48 + 4) = v46;
    *(_DWORD *)uint64_t v48 = v29;
    if (v24 - 3 >= 0x10000)
    {
      unint64_t v55 = (unint64_t)(v48 - *(void *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 2;
      *(_DWORD *)(a2 + 76) = v55;
    }
    *(_WORD *)(v48 + 6) = v24 - 3;
    *(void *)(a2 + 8) = v48 + 8;
    uint64_t v8 = v84;
    LODWORD(v9) = v85;
    if (*(_DWORD *)(a1 + 300)) {
      *(_DWORD *)(a1 + 300) = 0;
    }
    unint64_t v5 = v28 + v24;
    unint64_t v7 = v72;
    if (v5 <= v72)
    {
      uint64_t v56 = v11;
      uint64_t v57 = v40;
      uint64_t v17 = a1;
      while (1)
      {
        uint64_t v11 = v57;
        uint64_t v57 = v56;
        uint64_t v58 = (v5 - v84 - v11);
        uint64_t v59 = v76;
        if (v58 >= v85) {
          uint64_t v59 = v84;
        }
        if (v85 + ~v58 < 3) {
          break;
        }
        uint64_t v60 = v59 + v58;
        if (*(_DWORD *)v60 != *(_DWORD *)v5) {
          break;
        }
        if (v58 >= v85) {
          unint64_t v61 = (char *)v6;
        }
        else {
          unint64_t v61 = v78;
        }
        unint64_t v62 = sub_1DD2A6010((void *)(v5 + 4), (char *)(v60 + 4), v6, v61, v83);
        unint64_t v63 = *(_OWORD **)(a2 + 24);
        if (v5 <= (unint64_t)v77) {
          *unint64_t v63 = *(_OWORD *)v5;
        }
        else {
          sub_1DD29DBFC(v63, (char *)v5, v5, v77);
        }
        uint64_t v64 = *(void *)(a2 + 8);
        *(_WORD *)(v64 + 4) = 0;
        *(_DWORD *)uint64_t v64 = 1;
        if (v62 + 1 >= 0x10000)
        {
          unint64_t v65 = (unint64_t)(v64 - *(void *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v65;
        }
        *(_WORD *)(v64 + 6) = v62 + 1;
        v5 += v62 + 4;
        *(void *)(a2 + 8) = v64 + 8;
        uint64_t v56 = v11;
        unsigned int v26 = v57;
        unint64_t v15 = v5;
        if (v5 > v72) {
          goto LABEL_101;
        }
      }
      unsigned int v26 = v11;
      uint64_t v11 = v56;
      unint64_t v15 = v5;
    }
    else
    {
      unint64_t v15 = v5;
      unsigned int v26 = v40;
      uint64_t v17 = a1;
    }
    goto LABEL_101;
  }
LABEL_103:
  *a3 = v11;
  a3[1] = v74;
  return v6 - v5;
}

unint64_t sub_1DD2B1B54(uint64_t a1, uint64_t a2, unsigned int *a3, void *a4, uint64_t a5)
{
  unint64_t v5 = (unint64_t)a4;
  unint64_t v6 = (unint64_t)a4 + a5;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(unsigned int *)(a1 + 24);
  unsigned int v9 = *(_DWORD *)(a1 + 272);
  if (v9 >= 6) {
    unsigned int v9 = 6;
  }
  if (v9 <= 4) {
    unsigned int v9 = 4;
  }
  unsigned int v59 = v9;
  uint64_t v10 = *a3;
  uint64_t v11 = a3[1];
  uint64_t v12 = *(void *)(a1 + 248);
  unsigned int v14 = *(char **)v12;
  uint64_t v13 = *(void *)(v12 + 8);
  unint64_t v65 = (void *)(v7 + v8);
  unint64_t v58 = v13 + *(unsigned int *)(v12 + 24);
  if (a4 - (v7 + v8) - v58 + *(void *)v12) {
    unint64_t v15 = a4;
  }
  else {
    unint64_t v15 = (void *)((char *)a4 + 1);
  }
  *(_DWORD *)(a1 + 300) = 0;
  unint64_t v67 = (unint64_t)a4 + a5 - 8;
  if ((unint64_t)v15 < v67)
  {
    unint64_t v63 = v14;
    uint64_t v57 = a3;
    unsigned int v60 = v8 + v13 - v14;
    uint64_t v64 = v13 - v60;
    uint64_t v66 = (char *)(v6 - 32);
    uint64_t v61 = v13;
    while (1)
    {
      uint64_t v17 = (_DWORD *)((char *)v15 + 1);
      int v18 = v15 - v7 - v10;
      uint64_t v19 = (v18 + 1);
      uint64_t v20 = v13 + v19 - v60;
      if (v19 >= v8) {
        uint64_t v20 = v7 + v19;
      }
      if ((v8 - v18 - 5) <= 0xFFFFFFFC && *(_DWORD *)v20 == *v17) {
        break;
      }
      uint64_t v68 = 999999999;
      if (v59 == 6)
      {
        unint64_t v24 = sub_1DD2C5028(a1, v15, v6, &v68);
      }
      else if (v59 == 5)
      {
        unint64_t v24 = sub_1DD2C4CB8(a1, v15, v6, &v68);
      }
      else
      {
        unint64_t v24 = sub_1DD2C494C(a1, v15, v6, &v68);
      }
      unint64_t v22 = v24;
      if (v24) {
        unint64_t v23 = v68;
      }
      else {
        unint64_t v23 = 1;
      }
      if (v24) {
        uint64_t v17 = v15;
      }
      if (v24 > 3)
      {
        if (v23 >= 4)
        {
          unint64_t v26 = v7 + v8;
          if (v8 > (int)v17 - (int)v7 - (int)v23 + 3) {
            unint64_t v26 = v58;
          }
          uint64_t v27 = v64;
          if (v8 <= (int)v17 - (int)v7 - (int)v23 + 3) {
            uint64_t v27 = v7;
          }
          if ((unint64_t)v17 > v5 && v27 + (unint64_t)(v17 - v7 - v23 + 3) > v26)
          {
            unint64_t v28 = (unsigned __int8 *)(v27 + (v17 - v7 - v23 + 3) - 1);
            unint64_t v29 = (unsigned __int8 *)v17 - 1;
            while (*v29 == *v28)
            {
              ++v22;
              uint64_t v30 = v29 - 1;
              if ((unint64_t)v29 > v5)
              {
                --v29;
                if ((unint64_t)v28-- > v26) {
                  continue;
                }
              }
              uint64_t v17 = v30 + 1;
              goto LABEL_44;
            }
            uint64_t v17 = v29 + 1;
          }
LABEL_44:
          uint64_t v32 = (char *)(v6 - 32);
          uint64_t v11 = v10;
          uint64_t v10 = (v23 - 3);
LABEL_45:
          uint64_t v33 = (uint64_t)v17 - v5;
          uint64_t v34 = *(_OWORD **)(a2 + 24);
          if (v17 > (_DWORD *)v32)
          {
            unsigned int v35 = (char *)v5;
            int v36 = v23;
            sub_1DD29DBFC(v34, v35, (unint64_t)v17, v32);
            LODWORD(v23) = v36;
            uint64_t v37 = a1;
            goto LABEL_51;
          }
          *uint64_t v34 = *(_OWORD *)v5;
          uint64_t v38 = *(void *)(a2 + 24);
          if ((unint64_t)v33 <= 0x10)
          {
            *(void *)(a2 + 24) = v38 + v33;
            uint64_t v43 = *(void *)(a2 + 8);
            uint64_t v37 = a1;
          }
          else
          {
            *(_OWORD *)(v38 + 16) = *(_OWORD *)(v5 + 16);
            uint64_t v37 = a1;
            if (v33 >= 33)
            {
              unint64_t v39 = v38 + v33;
              uint64_t v40 = (_OWORD *)(v38 + 32);
              uint64_t v41 = (long long *)(v5 + 48);
              do
              {
                *uint64_t v40 = *(v41 - 1);
                long long v42 = *v41;
                v41 += 2;
                v40[1] = v42;
                v40 += 2;
              }
              while ((unint64_t)v40 < v39);
            }
LABEL_51:
            *(void *)(a2 + 24) += v33;
            uint64_t v43 = *(void *)(a2 + 8);
            if ((unint64_t)v33 >= 0x10000)
            {
              unint64_t v44 = (unint64_t)(v43 - *(void *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 1;
              *(_DWORD *)(a2 + 76) = v44;
            }
          }
          *(_WORD *)(v43 + 4) = v33;
          *(_DWORD *)uint64_t v43 = v23;
          if (v22 - 3 >= 0x10000)
          {
            unint64_t v45 = (unint64_t)(v43 - *(void *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 2;
            *(_DWORD *)(a2 + 76) = v45;
          }
          *(_WORD *)(v43 + 6) = v22 - 3;
          *(void *)(a2 + 8) = v43 + 8;
          if (*(_DWORD *)(v37 + 300)) {
            *(_DWORD *)(v37 + 300) = 0;
          }
          unint64_t v5 = (unint64_t)v17 + v22;
          if ((unint64_t)v17 + v22 <= v67)
          {
            uint64_t v46 = v10;
            uint64_t v47 = v11;
            while (1)
            {
              uint64_t v10 = v47;
              uint64_t v47 = v46;
              uint64_t v48 = (v5 - v7 - v10);
              uint64_t v49 = v64;
              if (v48 >= v8) {
                uint64_t v49 = v7;
              }
              if ((v8 + ~v48) < 3) {
                break;
              }
              uint64_t v50 = v49 + v48;
              if (*(_DWORD *)v50 != *(_DWORD *)v5) {
                break;
              }
              if (v48 >= v8) {
                unint64_t v51 = (char *)v6;
              }
              else {
                unint64_t v51 = v63;
              }
              unint64_t v52 = sub_1DD2A6010((void *)(v5 + 4), (char *)(v50 + 4), v6, v51, v65);
              uint64_t v53 = *(_OWORD **)(a2 + 24);
              if (v5 <= (unint64_t)v66) {
                *uint64_t v53 = *(_OWORD *)v5;
              }
              else {
                sub_1DD29DBFC(v53, (char *)v5, v5, v66);
              }
              uint64_t v54 = *(void *)(a2 + 8);
              *(_WORD *)(v54 + 4) = 0;
              *(_DWORD *)uint64_t v54 = 1;
              if (v52 + 1 >= 0x10000)
              {
                unint64_t v55 = (unint64_t)(v54 - *(void *)a2) >> 3;
                *(_DWORD *)(a2 + 72) = 2;
                *(_DWORD *)(a2 + 76) = v55;
              }
              *(_WORD *)(v54 + 6) = v52 + 1;
              v5 += v52 + 4;
              *(void *)(a2 + 8) = v54 + 8;
              uint64_t v46 = v10;
              uint64_t v11 = v47;
              unint64_t v15 = (void *)v5;
              if (v5 > v67) {
                goto LABEL_76;
              }
            }
            uint64_t v11 = v10;
            uint64_t v10 = v46;
          }
          unint64_t v15 = (void *)v5;
          goto LABEL_76;
        }
LABEL_42:
        uint64_t v32 = (char *)(v6 - 32);
        goto LABEL_45;
      }
      unint64_t v25 = (unint64_t)v15 - v5;
      unint64_t v15 = (void *)((char *)v15 + (((unint64_t)v15 - v5) >> 8) + 1);
      *(_DWORD *)(a1 + 300) = v25 > 0x7FF;
LABEL_76:
      uint64_t v13 = v61;
      if ((unint64_t)v15 >= v67)
      {
        a3 = v57;
        goto LABEL_78;
      }
    }
    if (v19 >= v8) {
      unint64_t v21 = (char *)v6;
    }
    else {
      unint64_t v21 = v63;
    }
    unint64_t v22 = sub_1DD2A6010((void *)((char *)v15 + 5), (char *)(v20 + 4), v6, v21, v65) + 4;
    LODWORD(v23) = 1;
    goto LABEL_42;
  }
LABEL_78:
  *a3 = v10;
  a3[1] = v11;
  return v6 - v5;
}

unint64_t sub_1DD2B2010(uint64_t a1, uint64_t a2, unsigned int *a3, void *a4, uint64_t a5)
{
  unint64_t v5 = (unint64_t)a4;
  unint64_t v6 = (unint64_t)a4 + a5;
  uint64_t v7 = *(unsigned int *)(a1 + 24);
  uint64_t v88 = *(void *)(a1 + 8);
  unsigned int v8 = *(_DWORD *)(a1 + 272);
  if (v8 >= 6) {
    unsigned int v8 = 6;
  }
  if (v8 <= 4) {
    unsigned int v8 = 4;
  }
  unsigned int v87 = v8;
  uint64_t v9 = *a3;
  unsigned int v10 = a3[1];
  uint64_t v11 = *(void *)(a1 + 248);
  uint64_t v12 = *(char **)v11;
  uint64_t v13 = *(void *)(v11 + 8);
  unsigned int v82 = (void *)(v88 + v7);
  unint64_t v76 = v13 + *(unsigned int *)(v11 + 24);
  if (a4 - (v88 + v7) - v76 + *(void *)v11) {
    unsigned int v14 = a4;
  }
  else {
    unsigned int v14 = (void *)((char *)a4 + 1);
  }
  *(_DWORD *)(a1 + 300) = 0;
  unint64_t v89 = (unint64_t)a4 + a5 - 8;
  if ((unint64_t)v14 < v89)
  {
    uint64_t v15 = a1;
    unint64_t v75 = a3;
    unsigned int v86 = v7 + v13 - v12;
    uint64_t v79 = v13 - v86;
    uint64_t v80 = (char *)(v6 - 32);
    uint64_t v81 = v12;
    uint64_t v85 = v13;
    unint64_t v83 = (unint64_t)a4 + a5;
    while (1)
    {
      unsigned int v16 = (_DWORD *)((char *)v14 + 1);
      int v17 = v14 - v88 - v9;
      uint64_t v18 = (v17 + 1);
      uint64_t v19 = v13 + v18 - v86;
      if (v18 >= v7) {
        uint64_t v19 = v88 + v18;
      }
      if ((v7 - v17 - 5) <= 0xFFFFFFFC && *(_DWORD *)v19 == *v16)
      {
        uint64_t v20 = v18 >= v7 ? (char *)v6 : v81;
        unint64_t v21 = sub_1DD2A6010((void *)((char *)v14 + 5), (char *)(v19 + 4), v6, v20, v82) + 4;
      }
      else
      {
        unint64_t v21 = 0;
      }
      uint64_t v90 = 999999999;
      if (v87 == 6) {
        unint64_t v22 = sub_1DD2C9B08(v15, v14, v6, &v90);
      }
      else {
        unint64_t v22 = v87 == 5 ? sub_1DD2C96AC(v15, v14, v6, &v90) : sub_1DD2C9244(v15, v14, v6, &v90);
      }
      unint64_t v23 = v22 <= v21 ? v21 : v22;
      if (v23 >= 4) {
        break;
      }
      unint64_t v24 = (unint64_t)v14 - v5;
      unsigned int v14 = (void *)((char *)v14 + (((unint64_t)v14 - v5) >> 8) + 1);
      *(_DWORD *)(v15 + 300) = v24 > 0x7FF;
      uint64_t v13 = v85;
LABEL_120:
      if ((unint64_t)v14 >= v89)
      {
        a3 = v75;
        goto LABEL_122;
      }
    }
    unsigned int v78 = v10;
    if (v22 <= v21)
    {
      uint64_t v25 = 1;
    }
    else
    {
      unsigned int v16 = v14;
      uint64_t v25 = v90;
    }
    unint64_t v26 = v23;
    unint64_t v27 = v25;
    unint64_t v28 = v16;
    if ((unint64_t)v14 < v89)
    {
      while (1)
      {
        unint64_t v28 = (_DWORD *)((char *)v14 + 1);
        uint64_t v29 = (v14 + 1 - v88 - v9);
        uint64_t v30 = v85 + v29 - v86;
        if (v29 >= v7) {
          uint64_t v30 = v88 + v29;
        }
        if ((v7 + ~v29) < 3) {
          break;
        }
        unint64_t v31 = v83;
        uint64_t v32 = a1;
        if (*(_DWORD *)v30 != *v28) {
          goto LABEL_44;
        }
        uint64_t v33 = v29 >= v7 ? (char *)v83 : v81;
        unint64_t v34 = sub_1DD2A6010((void *)((char *)v14 + 5), (char *)(v30 + 4), v83, v33, v82);
        if (v34 > 0xFFFFFFFFFFFFFFFBLL) {
          goto LABEL_44;
        }
        unsigned int v35 = v87;
        if (3 * ((int)v34 + 4) > (int)(3 * v23 + __clz(v25) - 30))
        {
          unint64_t v23 = v34 + 4;
          uint64_t v25 = 1;
          unsigned int v16 = (_DWORD *)((char *)v14 + 1);
        }
LABEL_45:
        uint64_t v90 = 999999999;
        int v36 = (void *)((char *)v14 + 1);
        if (v35 == 6)
        {
          unint64_t v37 = sub_1DD2C9B08(v32, v36, v31, &v90);
        }
        else if (v35 == 5)
        {
          unint64_t v37 = sub_1DD2C96AC(v32, v36, v31, &v90);
        }
        else
        {
          unint64_t v37 = sub_1DD2C9244(v32, v36, v31, &v90);
        }
        unint64_t v26 = v37;
        if (v37 >= 4)
        {
          unint64_t v27 = v90;
          if ((int)(__clz(v90) + 4 * v37 - 31) > (int)(__clz(v25) + 4 * v23 - 27)) {
            goto LABEL_72;
          }
        }
        if ((unint64_t)v28 >= v89) {
          goto LABEL_74;
        }
        unint64_t v28 = (_DWORD *)((char *)v14 + 2);
        uint64_t v38 = (v14 + 2 - v88 - v9);
        uint64_t v39 = v85 + v38 - v86;
        if (v38 >= v7) {
          uint64_t v39 = v88 + v38;
        }
        if ((v7 + ~v38) < 3)
        {
          unint64_t v40 = v83;
          uint64_t v41 = a1;
LABEL_64:
          unsigned int v44 = v87;
          goto LABEL_65;
        }
        unint64_t v40 = v83;
        uint64_t v41 = a1;
        if (*(_DWORD *)v39 != *v28) {
          goto LABEL_64;
        }
        long long v42 = v38 >= v7 ? (char *)v83 : v81;
        unint64_t v43 = sub_1DD2A6010((void *)((char *)v14 + 6), (char *)(v39 + 4), v83, v42, v82);
        if (v43 > 0xFFFFFFFFFFFFFFFBLL) {
          goto LABEL_64;
        }
        unsigned int v44 = v87;
        if ((int)(__clz(v25) + 4 * v23 - 30) < 4 * ((int)v43 + 4))
        {
          unint64_t v23 = v43 + 4;
          uint64_t v25 = 1;
          unsigned int v16 = (_DWORD *)((char *)v14 + 2);
        }
LABEL_65:
        uint64_t v90 = 999999999;
        unint64_t v45 = (void *)((char *)v14 + 2);
        if (v44 == 6)
        {
          unint64_t v46 = sub_1DD2C9B08(v41, v45, v40, &v90);
        }
        else if (v44 == 5)
        {
          unint64_t v46 = sub_1DD2C96AC(v41, v45, v40, &v90);
        }
        else
        {
          unint64_t v46 = sub_1DD2C9244(v41, v45, v40, &v90);
        }
        unint64_t v26 = v46;
        if (v46 < 4 || (unint64_t v27 = v90, (int)(__clz(v90) + 4 * v46 - 31) <= (int)(__clz(v25) + 4 * v23 - 24)))
        {
LABEL_74:
          unint64_t v26 = v23;
          unint64_t v27 = v25;
          unint64_t v28 = v16;
          goto LABEL_75;
        }
LABEL_72:
        unsigned int v14 = v28;
        unsigned int v16 = v28;
        uint64_t v25 = v27;
        unint64_t v23 = v26;
        if ((unint64_t)v28 >= v89) {
          goto LABEL_75;
        }
      }
      unint64_t v31 = v83;
      uint64_t v32 = a1;
LABEL_44:
      unsigned int v35 = v87;
      goto LABEL_45;
    }
LABEL_75:
    if (v27 <= 3)
    {
      uint64_t v53 = v80;
    }
    else
    {
      uint64_t v47 = v88;
      unint64_t v48 = v88 + v7;
      if (v7 > (int)v28 - ((int)v27 + (int)v88) + 3)
      {
        unint64_t v48 = v76;
        uint64_t v47 = v79;
      }
      if ((unint64_t)v28 > v5 && v47 + (unint64_t)(v28 - (v27 + v88) + 3) > v48)
      {
        uint64_t v49 = (unsigned __int8 *)(v47 + (v28 - (v27 + v88) + 3) - 1);
        uint64_t v50 = (unsigned __int8 *)v28 - 1;
        while (*v50 == *v49)
        {
          ++v26;
          unint64_t v51 = v50 - 1;
          if ((unint64_t)v50 > v5)
          {
            --v50;
            if ((unint64_t)v49-- > v48) {
              continue;
            }
          }
          unint64_t v28 = v51 + 1;
          goto LABEL_87;
        }
        unint64_t v28 = v50 + 1;
      }
LABEL_87:
      uint64_t v53 = v80;
      unsigned int v78 = v9;
      uint64_t v9 = (v27 - 3);
    }
    uint64_t v54 = (uint64_t)v28 - v5;
    unint64_t v55 = *(_OWORD **)(a2 + 24);
    if (v28 <= (_DWORD *)v53)
    {
      *unint64_t v55 = *(_OWORD *)v5;
      uint64_t v58 = *(void *)(a2 + 24);
      if ((unint64_t)v54 <= 0x10)
      {
        *(void *)(a2 + 24) = v58 + v54;
        uint64_t v56 = *(void *)(a2 + 8);
        goto LABEL_98;
      }
      *(_OWORD *)(v58 + 16) = *(_OWORD *)(v5 + 16);
      if (v54 >= 33)
      {
        unint64_t v59 = v58 + v54;
        unsigned int v60 = (_OWORD *)(v58 + 32);
        uint64_t v61 = (long long *)(v5 + 48);
        do
        {
          *unsigned int v60 = *(v61 - 1);
          long long v62 = *v61;
          v61 += 2;
          v60[1] = v62;
          v60 += 2;
        }
        while ((unint64_t)v60 < v59);
      }
    }
    else
    {
      sub_1DD29DBFC(v55, (char *)v5, (unint64_t)v28, v53);
    }
    *(void *)(a2 + 24) += v54;
    uint64_t v56 = *(void *)(a2 + 8);
    if ((unint64_t)v54 >= 0x10000)
    {
      unint64_t v57 = (unint64_t)(v56 - *(void *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v57;
    }
LABEL_98:
    *(_WORD *)(v56 + 4) = v54;
    *(_DWORD *)uint64_t v56 = v27;
    if (v26 - 3 >= 0x10000)
    {
      unint64_t v63 = (unint64_t)(v56 - *(void *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 2;
      *(_DWORD *)(a2 + 76) = v63;
    }
    *(_WORD *)(v56 + 6) = v26 - 3;
    *(void *)(a2 + 8) = v56 + 8;
    uint64_t v13 = v85;
    if (*(_DWORD *)(a1 + 300)) {
      *(_DWORD *)(a1 + 300) = 0;
    }
    unint64_t v5 = (unint64_t)v28 + v26;
    if ((unint64_t)v28 + v26 <= v89)
    {
      uint64_t v64 = v9;
      uint64_t v65 = v78;
      unint64_t v6 = v83;
      uint64_t v15 = a1;
      while (1)
      {
        uint64_t v9 = v65;
        uint64_t v65 = v64;
        uint64_t v66 = v88;
        uint64_t v67 = (v5 - v88 - v9);
        if (v67 < v7) {
          uint64_t v66 = v79;
        }
        if ((v7 + ~v67) < 3) {
          break;
        }
        uint64_t v68 = v66 + v67;
        if (*(_DWORD *)v68 != *(_DWORD *)v5) {
          break;
        }
        if (v67 >= v7) {
          int v69 = (char *)v83;
        }
        else {
          int v69 = v81;
        }
        unint64_t v70 = sub_1DD2A6010((void *)(v5 + 4), (char *)(v68 + 4), v83, v69, v82);
        unsigned int v71 = *(_OWORD **)(a2 + 24);
        if (v5 <= (unint64_t)v80) {
          _OWORD *v71 = *(_OWORD *)v5;
        }
        else {
          sub_1DD29DBFC(v71, (char *)v5, v5, v80);
        }
        uint64_t v72 = *(void *)(a2 + 8);
        *(_WORD *)(v72 + 4) = 0;
        *(_DWORD *)uint64_t v72 = 1;
        if (v70 + 1 >= 0x10000)
        {
          unint64_t v73 = (unint64_t)(v72 - *(void *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v73;
        }
        *(_WORD *)(v72 + 6) = v70 + 1;
        v5 += v70 + 4;
        *(void *)(a2 + 8) = v72 + 8;
        uint64_t v64 = v9;
        unsigned int v10 = v65;
        unsigned int v14 = (void *)v5;
        if (v5 > v89) {
          goto LABEL_120;
        }
      }
      unsigned int v10 = v9;
      uint64_t v9 = v64;
      unsigned int v14 = (void *)v5;
    }
    else
    {
      unsigned int v14 = (void *)((char *)v28 + v26);
      unint64_t v6 = v83;
      uint64_t v15 = a1;
      unsigned int v10 = v78;
    }
    goto LABEL_120;
  }
LABEL_122:
  *a3 = v9;
  a3[1] = v10;
  return v6 - v5;
}

unint64_t sub_1DD2B2760(uint64_t a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  unint64_t v5 = a4;
  unint64_t v6 = a4 + a5;
  unint64_t v7 = a4 + a5 - 8;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(unsigned int *)(a1 + 24);
  unsigned int v10 = *(_DWORD *)(a1 + 272);
  if (v10 >= 6) {
    unsigned int v10 = 6;
  }
  if (v10 <= 4) {
    unsigned int v10 = 4;
  }
  unsigned int v82 = v10;
  uint64_t v11 = *a3;
  unsigned int v74 = a3[1];
  uint64_t v12 = *(void *)(a1 + 248);
  uint64_t v13 = *(void *)(v12 + 8);
  unsigned int v14 = *(char **)v12;
  unint64_t v83 = (unsigned __int8 *)(v8 + v9);
  unsigned int v71 = (unsigned __int8 *)(v13 + *(unsigned int *)(v12 + 24));
  if (a4 - (v8 + v9) - v71 + *(void *)v12) {
    unint64_t v15 = a4;
  }
  else {
    unint64_t v15 = a4 + 1;
  }
  *(_DWORD *)(a1 + 300) = 0;
  if (v15 < v7)
  {
    uint64_t v17 = a1;
    uint64_t v67 = a3;
    unsigned int v73 = v9 + v13 - v14;
    uint64_t v76 = v13 - v73;
    unint64_t v77 = (char *)(v6 - 32);
    int v69 = -(int)v8;
    int v70 = v9 + v8 - 2;
    unsigned int v78 = v14;
    int v68 = v14 - v9 - v13 - v8 + 1;
    unint64_t v72 = a4 + a5 - 8;
    uint64_t v84 = v8;
    uint64_t v81 = v13;
    unint64_t v79 = a4 + a5;
    unsigned int v85 = v9;
    while (1)
    {
      int v18 = v15 - v8 - v11;
      uint64_t v19 = (v18 + 1);
      uint64_t v20 = v13 + v19 - v73;
      if (v19 >= v9) {
        uint64_t v20 = v8 + v19;
      }
      if ((v9 - v18 - 5) <= 0xFFFFFFFC && *(_DWORD *)v20 == *(_DWORD *)(v15 + 1))
      {
        unint64_t v21 = v19 >= v85 ? (char *)v6 : v78;
        unint64_t v22 = sub_1DD2A6010((void *)(v15 + 5), (char *)(v20 + 4), v6, v21, v83) + 4;
      }
      else
      {
        unint64_t v22 = 0;
      }
      *(void *)unsigned int v86 = 999999999;
      if (v82 == 6) {
        unint64_t v23 = sub_1DD2C9B08(v17, (void *)v15, v6, v86);
      }
      else {
        unint64_t v23 = v82 == 5 ? sub_1DD2C96AC(v17, (void *)v15, v6, v86) : sub_1DD2C9244(v17, (void *)v15, v6, v86);
      }
      unint64_t v24 = v23 <= v22 ? v22 : v23;
      if (v24 >= 4) {
        break;
      }
      unint64_t v25 = v15 - v5;
      v15 += ((v15 - v5) >> 8) + 1;
      *(_DWORD *)(v17 + 300) = v25 > 0x7FF;
      uint64_t v8 = v84;
      LODWORD(v9) = v85;
      unsigned int v26 = v74;
LABEL_101:
      unsigned int v74 = v26;
      uint64_t v13 = v81;
      if (v15 >= v7)
      {
        a3 = v67;
        goto LABEL_103;
      }
    }
    unint64_t v27 = v7;
    if (v23 <= v22) {
      unint64_t v28 = v15 + 1;
    }
    else {
      unint64_t v28 = v15;
    }
    if (v23 <= v22) {
      unint64_t v29 = 1;
    }
    else {
      unint64_t v29 = *(void *)v86;
    }
    if (v15 < v27)
    {
      uint64_t v30 = 0;
      unint64_t v75 = v27 - v15;
      unsigned int v31 = v70 + v11 - v15;
      while (1)
      {
        uint64_t v32 = (_DWORD *)(v15 + v30 + 1);
        uint64_t v33 = (v69 + v15 - v11 + v30 + 1);
        uint64_t v34 = v81 + (v68 + v15 - v11 + v30);
        if (v33 >= v85) {
          uint64_t v34 = v84 + v33;
        }
        if (v31 >= 3 && *(_DWORD *)v34 == *v32)
        {
          unsigned int v35 = v33 >= v85 ? (char *)v79 : v78;
          unint64_t v36 = sub_1DD2A6010((void *)(v15 + v30 + 5), (char *)(v34 + 4), v79, v35, v83);
          if (v36 <= 0xFFFFFFFFFFFFFFFBLL && 3 * ((int)v36 + 4) > (int)(3 * v24 + __clz(v29) - 30))
          {
            unint64_t v24 = v36 + 4;
            unint64_t v29 = 1;
            unint64_t v28 = v15 + v30 + 1;
          }
        }
        *(void *)unsigned int v86 = 999999999;
        if (v82 == 6) {
          unint64_t v37 = sub_1DD2C9B08(a1, (void *)(v15 + v30 + 1), v79, v86);
        }
        else {
          unint64_t v37 = v82 == 5
        }
              ? sub_1DD2C96AC(a1, (void *)(v15 + v30 + 1), v79, v86)
              : sub_1DD2C9244(a1, (void *)(v15 + v30 + 1), v79, v86);
        if (v37 < 4 || (int)(__clz(v86[0]) + 4 * v37 - 31) <= (int)(__clz(v29) + 4 * v24 - 27)) {
          break;
        }
        ++v30;
        --v31;
        unint64_t v28 = (unint64_t)v32;
        unint64_t v29 = *(void *)v86;
        unint64_t v24 = v37;
        if (v75 == v30)
        {
          unint64_t v24 = v37;
          unint64_t v29 = *(void *)v86;
          unint64_t v28 = v72;
          break;
        }
      }
      unint64_t v6 = v79;
    }
    uint64_t v38 = v84;
    uint64_t v39 = v77;
    uint64_t v40 = v74;
    if (v29 > 3)
    {
      uint64_t v41 = v83;
      if (v85 > (int)v28 - ((int)v29 + (int)v84) + 3)
      {
        uint64_t v41 = v71;
        uint64_t v38 = v76;
      }
      if (v28 > v5 && v38 + (unint64_t)(v28 - (v29 + v84) + 3) > (unint64_t)v41)
      {
        long long v42 = (unsigned __int8 *)(v38 + (v28 - (v29 + v84) + 3) - 1);
        unint64_t v43 = (unsigned __int8 *)(v28 - 1);
        while (*v43 == *v42)
        {
          ++v24;
          unsigned int v44 = v43 - 1;
          if ((unint64_t)v43 > v5)
          {
            --v43;
            if (v42-- > v41) {
              continue;
            }
          }
          unint64_t v28 = (unint64_t)(v44 + 1);
          goto LABEL_68;
        }
        unint64_t v28 = (unint64_t)(v43 + 1);
      }
LABEL_68:
      uint64_t v39 = v77;
      uint64_t v40 = v11;
      uint64_t v11 = (v29 - 3);
    }
    uint64_t v46 = v28 - v5;
    uint64_t v47 = *(_OWORD **)(a2 + 24);
    if (v28 <= (unint64_t)v39)
    {
      *uint64_t v47 = *(_OWORD *)v5;
      uint64_t v50 = *(void *)(a2 + 24);
      if ((unint64_t)v46 <= 0x10)
      {
        *(void *)(a2 + 24) = v50 + v46;
        uint64_t v48 = *(void *)(a2 + 8);
        goto LABEL_79;
      }
      *(_OWORD *)(v50 + 16) = *(_OWORD *)(v5 + 16);
      if (v46 >= 33)
      {
        unint64_t v51 = v50 + v46;
        unint64_t v52 = (_OWORD *)(v50 + 32);
        uint64_t v53 = (long long *)(v5 + 48);
        do
        {
          *unint64_t v52 = *(v53 - 1);
          long long v54 = *v53;
          v53 += 2;
          v52[1] = v54;
          v52 += 2;
        }
        while ((unint64_t)v52 < v51);
      }
    }
    else
    {
      sub_1DD29DBFC(v47, (char *)v5, v28, v39);
    }
    *(void *)(a2 + 24) += v46;
    uint64_t v48 = *(void *)(a2 + 8);
    if ((unint64_t)v46 >= 0x10000)
    {
      unint64_t v49 = (unint64_t)(v48 - *(void *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v49;
    }
LABEL_79:
    *(_WORD *)(v48 + 4) = v46;
    *(_DWORD *)uint64_t v48 = v29;
    if (v24 - 3 >= 0x10000)
    {
      unint64_t v55 = (unint64_t)(v48 - *(void *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 2;
      *(_DWORD *)(a2 + 76) = v55;
    }
    *(_WORD *)(v48 + 6) = v24 - 3;
    *(void *)(a2 + 8) = v48 + 8;
    uint64_t v8 = v84;
    LODWORD(v9) = v85;
    if (*(_DWORD *)(a1 + 300)) {
      *(_DWORD *)(a1 + 300) = 0;
    }
    unint64_t v5 = v28 + v24;
    unint64_t v7 = v72;
    if (v5 <= v72)
    {
      uint64_t v56 = v11;
      uint64_t v57 = v40;
      uint64_t v17 = a1;
      while (1)
      {
        uint64_t v11 = v57;
        uint64_t v57 = v56;
        uint64_t v58 = (v5 - v84 - v11);
        uint64_t v59 = v76;
        if (v58 >= v85) {
          uint64_t v59 = v84;
        }
        if (v85 + ~v58 < 3) {
          break;
        }
        uint64_t v60 = v59 + v58;
        if (*(_DWORD *)v60 != *(_DWORD *)v5) {
          break;
        }
        if (v58 >= v85) {
          uint64_t v61 = (char *)v6;
        }
        else {
          uint64_t v61 = v78;
        }
        unint64_t v62 = sub_1DD2A6010((void *)(v5 + 4), (char *)(v60 + 4), v6, v61, v83);
        unint64_t v63 = *(_OWORD **)(a2 + 24);
        if (v5 <= (unint64_t)v77) {
          *unint64_t v63 = *(_OWORD *)v5;
        }
        else {
          sub_1DD29DBFC(v63, (char *)v5, v5, v77);
        }
        uint64_t v64 = *(void *)(a2 + 8);
        *(_WORD *)(v64 + 4) = 0;
        *(_DWORD *)uint64_t v64 = 1;
        if (v62 + 1 >= 0x10000)
        {
          unint64_t v65 = (unint64_t)(v64 - *(void *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v65;
        }
        *(_WORD *)(v64 + 6) = v62 + 1;
        v5 += v62 + 4;
        *(void *)(a2 + 8) = v64 + 8;
        uint64_t v56 = v11;
        unsigned int v26 = v57;
        unint64_t v15 = v5;
        if (v5 > v72) {
          goto LABEL_101;
        }
      }
      unsigned int v26 = v11;
      uint64_t v11 = v56;
      unint64_t v15 = v5;
    }
    else
    {
      unint64_t v15 = v5;
      unsigned int v26 = v40;
      uint64_t v17 = a1;
    }
    goto LABEL_101;
  }
LABEL_103:
  *a3 = v11;
  a3[1] = v74;
  return v6 - v5;
}

unint64_t sub_1DD2B2DF0(uint64_t a1, uint64_t a2, unsigned int *a3, void *a4, uint64_t a5)
{
  unint64_t v5 = (unint64_t)a4;
  unint64_t v6 = (unint64_t)a4 + a5;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(unsigned int *)(a1 + 24);
  unsigned int v9 = *(_DWORD *)(a1 + 272);
  if (v9 >= 6) {
    unsigned int v9 = 6;
  }
  if (v9 <= 4) {
    unsigned int v9 = 4;
  }
  unsigned int v59 = v9;
  uint64_t v10 = *a3;
  uint64_t v11 = a3[1];
  uint64_t v12 = *(void *)(a1 + 248);
  unsigned int v14 = *(char **)v12;
  uint64_t v13 = *(void *)(v12 + 8);
  unint64_t v65 = (void *)(v7 + v8);
  unint64_t v58 = v13 + *(unsigned int *)(v12 + 24);
  if (a4 - (v7 + v8) - v58 + *(void *)v12) {
    unint64_t v15 = a4;
  }
  else {
    unint64_t v15 = (void *)((char *)a4 + 1);
  }
  *(_DWORD *)(a1 + 300) = 0;
  unint64_t v67 = (unint64_t)a4 + a5 - 8;
  if ((unint64_t)v15 < v67)
  {
    unint64_t v63 = v14;
    uint64_t v57 = a3;
    unsigned int v60 = v8 + v13 - v14;
    uint64_t v64 = v13 - v60;
    uint64_t v66 = (char *)(v6 - 32);
    uint64_t v61 = v13;
    while (1)
    {
      uint64_t v17 = (_DWORD *)((char *)v15 + 1);
      int v18 = v15 - v7 - v10;
      uint64_t v19 = (v18 + 1);
      uint64_t v20 = v13 + v19 - v60;
      if (v19 >= v8) {
        uint64_t v20 = v7 + v19;
      }
      if ((v8 - v18 - 5) <= 0xFFFFFFFC && *(_DWORD *)v20 == *v17) {
        break;
      }
      uint64_t v68 = 999999999;
      if (v59 == 6)
      {
        unint64_t v24 = sub_1DD2C9B08(a1, v15, v6, &v68);
      }
      else if (v59 == 5)
      {
        unint64_t v24 = sub_1DD2C96AC(a1, v15, v6, &v68);
      }
      else
      {
        unint64_t v24 = sub_1DD2C9244(a1, v15, v6, &v68);
      }
      unint64_t v22 = v24;
      if (v24) {
        unint64_t v23 = v68;
      }
      else {
        unint64_t v23 = 1;
      }
      if (v24) {
        uint64_t v17 = v15;
      }
      if (v24 > 3)
      {
        if (v23 >= 4)
        {
          unint64_t v26 = v7 + v8;
          if (v8 > (int)v17 - (int)v7 - (int)v23 + 3) {
            unint64_t v26 = v58;
          }
          uint64_t v27 = v64;
          if (v8 <= (int)v17 - (int)v7 - (int)v23 + 3) {
            uint64_t v27 = v7;
          }
          if ((unint64_t)v17 > v5 && v27 + (unint64_t)(v17 - v7 - v23 + 3) > v26)
          {
            unint64_t v28 = (unsigned __int8 *)(v27 + (v17 - v7 - v23 + 3) - 1);
            unint64_t v29 = (unsigned __int8 *)v17 - 1;
            while (*v29 == *v28)
            {
              ++v22;
              uint64_t v30 = v29 - 1;
              if ((unint64_t)v29 > v5)
              {
                --v29;
                if ((unint64_t)v28-- > v26) {
                  continue;
                }
              }
              uint64_t v17 = v30 + 1;
              goto LABEL_44;
            }
            uint64_t v17 = v29 + 1;
          }
LABEL_44:
          uint64_t v32 = (char *)(v6 - 32);
          uint64_t v11 = v10;
          uint64_t v10 = (v23 - 3);
LABEL_45:
          uint64_t v33 = (uint64_t)v17 - v5;
          uint64_t v34 = *(_OWORD **)(a2 + 24);
          if (v17 > (_DWORD *)v32)
          {
            unsigned int v35 = (char *)v5;
            int v36 = v23;
            sub_1DD29DBFC(v34, v35, (unint64_t)v17, v32);
            LODWORD(v23) = v36;
            uint64_t v37 = a1;
            goto LABEL_51;
          }
          *uint64_t v34 = *(_OWORD *)v5;
          uint64_t v38 = *(void *)(a2 + 24);
          if ((unint64_t)v33 <= 0x10)
          {
            *(void *)(a2 + 24) = v38 + v33;
            uint64_t v43 = *(void *)(a2 + 8);
            uint64_t v37 = a1;
          }
          else
          {
            *(_OWORD *)(v38 + 16) = *(_OWORD *)(v5 + 16);
            uint64_t v37 = a1;
            if (v33 >= 33)
            {
              unint64_t v39 = v38 + v33;
              uint64_t v40 = (_OWORD *)(v38 + 32);
              uint64_t v41 = (long long *)(v5 + 48);
              do
              {
                *uint64_t v40 = *(v41 - 1);
                long long v42 = *v41;
                v41 += 2;
                v40[1] = v42;
                v40 += 2;
              }
              while ((unint64_t)v40 < v39);
            }
LABEL_51:
            *(void *)(a2 + 24) += v33;
            uint64_t v43 = *(void *)(a2 + 8);
            if ((unint64_t)v33 >= 0x10000)
            {
              unint64_t v44 = (unint64_t)(v43 - *(void *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 1;
              *(_DWORD *)(a2 + 76) = v44;
            }
          }
          *(_WORD *)(v43 + 4) = v33;
          *(_DWORD *)uint64_t v43 = v23;
          if (v22 - 3 >= 0x10000)
          {
            unint64_t v45 = (unint64_t)(v43 - *(void *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 2;
            *(_DWORD *)(a2 + 76) = v45;
          }
          *(_WORD *)(v43 + 6) = v22 - 3;
          *(void *)(a2 + 8) = v43 + 8;
          if (*(_DWORD *)(v37 + 300)) {
            *(_DWORD *)(v37 + 300) = 0;
          }
          unint64_t v5 = (unint64_t)v17 + v22;
          if ((unint64_t)v17 + v22 <= v67)
          {
            uint64_t v46 = v10;
            uint64_t v47 = v11;
            while (1)
            {
              uint64_t v10 = v47;
              uint64_t v47 = v46;
              uint64_t v48 = (v5 - v7 - v10);
              uint64_t v49 = v64;
              if (v48 >= v8) {
                uint64_t v49 = v7;
              }
              if ((v8 + ~v48) < 3) {
                break;
              }
              uint64_t v50 = v49 + v48;
              if (*(_DWORD *)v50 != *(_DWORD *)v5) {
                break;
              }
              if (v48 >= v8) {
                unint64_t v51 = (char *)v6;
              }
              else {
                unint64_t v51 = v63;
              }
              unint64_t v52 = sub_1DD2A6010((void *)(v5 + 4), (char *)(v50 + 4), v6, v51, v65);
              uint64_t v53 = *(_OWORD **)(a2 + 24);
              if (v5 <= (unint64_t)v66) {
                *uint64_t v53 = *(_OWORD *)v5;
              }
              else {
                sub_1DD29DBFC(v53, (char *)v5, v5, v66);
              }
              uint64_t v54 = *(void *)(a2 + 8);
              *(_WORD *)(v54 + 4) = 0;
              *(_DWORD *)uint64_t v54 = 1;
              if (v52 + 1 >= 0x10000)
              {
                unint64_t v55 = (unint64_t)(v54 - *(void *)a2) >> 3;
                *(_DWORD *)(a2 + 72) = 2;
                *(_DWORD *)(a2 + 76) = v55;
              }
              *(_WORD *)(v54 + 6) = v52 + 1;
              v5 += v52 + 4;
              *(void *)(a2 + 8) = v54 + 8;
              uint64_t v46 = v10;
              uint64_t v11 = v47;
              unint64_t v15 = (void *)v5;
              if (v5 > v67) {
                goto LABEL_76;
              }
            }
            uint64_t v11 = v10;
            uint64_t v10 = v46;
          }
          unint64_t v15 = (void *)v5;
          goto LABEL_76;
        }
LABEL_42:
        uint64_t v32 = (char *)(v6 - 32);
        goto LABEL_45;
      }
      unint64_t v25 = (unint64_t)v15 - v5;
      unint64_t v15 = (void *)((char *)v15 + (((unint64_t)v15 - v5) >> 8) + 1);
      *(_DWORD *)(a1 + 300) = v25 > 0x7FF;
LABEL_76:
      uint64_t v13 = v61;
      if ((unint64_t)v15 >= v67)
      {
        a3 = v57;
        goto LABEL_78;
      }
    }
    if (v19 >= v8) {
      unint64_t v21 = (char *)v6;
    }
    else {
      unint64_t v21 = v63;
    }
    unint64_t v22 = sub_1DD2A6010((void *)((char *)v15 + 5), (char *)(v20 + 4), v6, v21, v65) + 4;
    LODWORD(v23) = 1;
    goto LABEL_42;
  }
LABEL_78:
  *a3 = v10;
  a3[1] = v11;
  return v6 - v5;
}

char *sub_1DD2B32AC(uint64_t a1, uint64_t a2, unsigned int *a3, void *a4, uint64_t a5)
{
  unint64_t v5 = (unint64_t)a4;
  v167 = (unsigned __int16 *)((char *)a4 + a5);
  unint64_t v8 = (unint64_t)a4 + a5 - 16;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(unsigned int *)(a1 + 24);
  unsigned int v11 = *(_DWORD *)(a1 + 272);
  if (v11 >= 6) {
    unsigned int v11 = 6;
  }
  if (v11 <= 4) {
    int v12 = 4;
  }
  else {
    int v12 = v11;
  }
  if (*(_DWORD *)(a1 + 268) >= 6u) {
    unsigned int v13 = 6;
  }
  else {
    unsigned int v13 = *(_DWORD *)(a1 + 268);
  }
  if (v13 <= 4) {
    int v14 = 4;
  }
  else {
    int v14 = v13;
  }
  unsigned int v16 = *a3;
  unsigned int v15 = a3[1];
  unint64_t v155 = v9 + v10;
  if (a4 == v9 + v10) {
    uint64_t v17 = (void *)((char *)a4 + 1);
  }
  else {
    uint64_t v17 = a4;
  }
  int v18 = v17 - v9;
  unsigned int v19 = 1 << *(_DWORD *)(a1 + 256);
  int v20 = v17 - v9 - v19;
  BOOL v21 = (int)v17 - (int)v9 - (int)v10 > v19;
  uint64_t v22 = *(unsigned int *)(a1 + 44);
  if (v21 && *(_DWORD *)(a1 + 40) == 0) {
    LODWORD(v10) = v20;
  }
  unsigned int v24 = v18 - v10;
  if (v15 <= v18 - (int)v10) {
    unsigned int v25 = a3[1];
  }
  else {
    unsigned int v25 = 0;
  }
  unsigned int v160 = v25;
  if (v16 <= v24) {
    uint64_t v26 = v16;
  }
  else {
    uint64_t v26 = 0;
  }
  *(_DWORD *)(a1 + 300) = 0;
  int v27 = v8 - (v9 + v22);
  if ((v27 + 1) < 8) {
    int v28 = v27 + 1;
  }
  else {
    int v28 = 8;
  }
  unint64_t v168 = v8;
  if (v8 >= v9 + v22) {
    int v29 = v28;
  }
  else {
    int v29 = 0;
  }
  uint64_t v30 = (v29 + v22);
  if (v22 < v30)
  {
    uint64_t v31 = *(void *)(a1 + 112);
    uint64_t v32 = *(void *)(a1 + 56);
    int v33 = *(_DWORD *)(a1 + 52);
    uint64_t v34 = *(void *)(a1 + 96);
    char v35 = 56 - v33;
    char v36 = 24 - v33;
    do
    {
      if (v12 == 5)
      {
        unint64_t v37 = 0xCF1BBCDCBB000000 * *(void *)(v9 + v22);
      }
      else
      {
        if (v12 != 6)
        {
          LODWORD(v38) = ((-1640531535 * *(_DWORD *)(v9 + v22)) ^ v34) >> v36;
          goto LABEL_40;
        }
        unint64_t v37 = 0xCF1BBCDCBF9B0000 * *(void *)(v9 + v22);
      }
      unint64_t v38 = (v37 ^ v34) >> v35;
LABEL_40:
      uint64_t v39 = v38 >> 8 << v14;
      _X3 = v31 + 4 * v39;
      __asm { PRFM            #0, [X3] }
      if (v13 > 4)
      {
        __asm { PRFM            #0, [X3,#0x40] }
        _X1 = v32 + v39;
        __asm { PRFM            #0, [X1] }
        if (v14 == 6) {
          __asm { PRFM            #0, [X1,#0x20] }
        }
      }
      else
      {
        _X1 = v32 + v39;
        __asm { PRFM            #0, [X1] }
      }
      *(_DWORD *)(a1 + 4 * (v22++ & 7) + 64) = v38;
    }
    while (v30 != v22);
  }
  if ((unint64_t)v17 >= v8) {
    goto LABEL_278;
  }
  unsigned int v151 = v24;
  unsigned int v152 = v16;
  unsigned int v156 = v13;
  int v164 = v12;
  unsigned int v153 = v15;
  uint64_t v157 = v9;
  v154 = a3;
  unint64_t v51 = (unint64_t)v167 - 7;
  unint64_t v52 = (unsigned __int16 *)((char *)v167 - 3);
  v162 = (unsigned __int16 *)((char *)v167 - 1);
  int v166 = v14;
  unsigned int v53 = v160;
  uint64_t v165 = a1;
  v158 = (char *)(v167 - 16);
  v159 = (unsigned __int16 *)((char *)v167 - 3);
  do
  {
    unint64_t v54 = 0;
    if (!v26 || *(_DWORD *)((char *)v17 - v26 + 1) != *(_DWORD *)((char *)v17 + 1)) {
      goto LABEL_64;
    }
    unint64_t v55 = (char *)v17 + 5;
    uint64_t v56 = (_DWORD *)((char *)v17 - v26 + 5);
    if (v51 <= (unint64_t)v17 + 5)
    {
      unsigned int v59 = (unsigned __int16 *)((char *)v17 + 5);
LABEL_53:
      if (v59 < v52 && *v56 == *(_DWORD *)v59)
      {
        v59 += 2;
        ++v56;
      }
      if (v59 < v162 && *(unsigned __int16 *)v56 == *v59)
      {
        ++v59;
        uint64_t v56 = (_DWORD *)((char *)v56 + 2);
      }
      if (v59 < v167 && *(unsigned __int8 *)v56 == *(unsigned __int8 *)v59) {
        unsigned int v59 = (unsigned __int16 *)((char *)v59 + 1);
      }
      unint64_t v58 = (char *)v59 - v55;
      goto LABEL_63;
    }
    unint64_t v57 = *(void *)v55 ^ *(void *)v56;
    if (!v57)
    {
      unsigned int v91 = (char *)v17 + 13;
      while (1)
      {
        unsigned int v92 = &v91[v57];
        if ((unint64_t)&v91[v57] >= v51) {
          break;
        }
        uint64_t v93 = *(void *)((char *)v17 + v57 - v26 + 13);
        v57 += 8;
        unint64_t v94 = *(void *)v92 ^ v93;
        if (v94)
        {
          unint64_t v58 = v57 + (__clz(__rbit64(v94)) >> 3);
          goto LABEL_63;
        }
      }
      unsigned int v59 = (unsigned __int16 *)((char *)v17 + v57 + 13);
      uint64_t v56 = (_DWORD *)((char *)v59 - v26);
      goto LABEL_53;
    }
    unint64_t v58 = __clz(__rbit64(v57)) >> 3;
LABEL_63:
    unint64_t v54 = v58 + 4;
LABEL_64:
    uint64_t v169 = 999999999;
    unsigned int v161 = v53;
    if (v164 == 6)
    {
      if (v14 == 6)
      {
        unint64_t v60 = sub_1DD2C01C8(v165, v17, v167, &v169);
      }
      else if (v14 == 5)
      {
        unint64_t v60 = sub_1DD2BFC60(v165, v17, v167, &v169);
      }
      else
      {
        unint64_t v60 = sub_1DD2BF710(v165, v17, v167, &v169);
      }
    }
    else if (v164 == 5)
    {
      if (v14 == 6)
      {
        unint64_t v60 = sub_1DD2BF19C(v165, v17, v167, &v169);
      }
      else if (v14 == 5)
      {
        unint64_t v60 = sub_1DD2BEC34(v165, v17, v167, &v169);
      }
      else
      {
        unint64_t v60 = sub_1DD2BE6E4(v165, v17, v167, &v169);
      }
    }
    else if (v14 == 6)
    {
      unint64_t v60 = sub_1DD2BE178(v165, v17, v167, &v169);
    }
    else if (v14 == 5)
    {
      unint64_t v60 = sub_1DD2BDC18(v165, v17, v167, &v169);
    }
    else
    {
      unint64_t v60 = sub_1DD2BD6D0(v165, v17, v167, &v169);
    }
    if (v60 <= v54) {
      unint64_t v61 = v54;
    }
    else {
      unint64_t v61 = v60;
    }
    if (v61 < 4)
    {
      unint64_t v62 = (unint64_t)v17 - v5;
      uint64_t v17 = (void *)((char *)v17 + (((unint64_t)v17 - v5) >> 8) + 1);
      *(_DWORD *)(v165 + 300) = v62 > 0x7FF;
      int v14 = v166;
      unsigned int v53 = v161;
      continue;
    }
    if (v60 <= v54) {
      unint64_t v63 = (_DWORD *)((char *)v17 + 1);
    }
    else {
      unint64_t v63 = v17;
    }
    if (v60 <= v54) {
      uint64_t v64 = 1;
    }
    else {
      uint64_t v64 = v169;
    }
    unint64_t v65 = v61;
    unint64_t v66 = v64;
    v163 = v63;
    int v14 = v166;
    uint64_t v67 = -(uint64_t)v26;
    if ((unint64_t)v17 < v168)
    {
      do
      {
        unint64_t v63 = (_DWORD *)((char *)v17 + 1);
        if (!v64 || !v26)
        {
          int v68 = v164;
          goto LABEL_100;
        }
        int v68 = v164;
        if (*v63 != *(_DWORD *)((char *)v63 + v67)) {
          goto LABEL_100;
        }
        int v69 = (char *)v17 + 5;
        int v70 = (void *)((char *)v17 + v67 + 5);
        if (v51 <= (unint64_t)v17 + 5)
        {
          unsigned int v74 = (unsigned __int16 *)((char *)v17 + 5);
        }
        else
        {
          unint64_t v71 = *(void *)v69 ^ *v70;
          if (v71)
          {
            unint64_t v72 = __clz(__rbit64(v71)) >> 3;
LABEL_156:
            unint64_t v85 = v72 + 4;
            if (3 * (int)v85 > (int)(3 * v61 + __clz(v64) - 30))
            {
              unint64_t v61 = v85;
              uint64_t v64 = 1;
              v163 = (_DWORD *)((char *)v17 + 1);
            }
            goto LABEL_100;
          }
          unsigned int v74 = (unsigned __int16 *)((char *)v17 + 13);
          while ((unint64_t)v74 < v51)
          {
            uint64_t v82 = *(void *)((char *)v74 + v67);
            uint64_t v83 = *(void *)v74;
            v74 += 4;
            unint64_t v84 = v83 ^ v82;
            if (v84)
            {
              unsigned int v74 = (unsigned __int16 *)((char *)v74 + (__clz(__rbit64(v84)) >> 3) - 8);
              goto LABEL_155;
            }
          }
          int v70 = (void *)((char *)v74 + v67);
        }
        if (v74 < v159 && *(_DWORD *)v70 == *(_DWORD *)v74)
        {
          v74 += 2;
          int v70 = (void *)((char *)v70 + 4);
        }
        if (v74 < v162 && *(unsigned __int16 *)v70 == *v74)
        {
          ++v74;
          int v70 = (void *)((char *)v70 + 2);
        }
        if (v74 < v167 && *(unsigned __int8 *)v70 == *(unsigned __int8 *)v74) {
          unsigned int v74 = (unsigned __int16 *)((char *)v74 + 1);
        }
LABEL_155:
        unint64_t v72 = (char *)v74 - v69;
        if (v72 <= 0xFFFFFFFFFFFFFFFBLL) {
          goto LABEL_156;
        }
LABEL_100:
        uint64_t v169 = 999999999;
        if (v68 == 6)
        {
          if (v166 == 6)
          {
            unint64_t v73 = sub_1DD2C01C8(v165, (void *)((char *)v17 + 1), v167, &v169);
          }
          else
          {
            if (v166 != 5)
            {
              unint64_t v75 = sub_1DD2BF710(v165, (void *)((char *)v17 + 1), v167, &v169);
              goto LABEL_129;
            }
            unint64_t v73 = sub_1DD2BFC60(v165, (void *)((char *)v17 + 1), v167, &v169);
          }
        }
        else if (v68 == 5)
        {
          if (v166 == 6)
          {
            unint64_t v73 = sub_1DD2BF19C(v165, (void *)((char *)v17 + 1), v167, &v169);
          }
          else
          {
            if (v166 != 5)
            {
              unint64_t v75 = sub_1DD2BE6E4(v165, (void *)((char *)v17 + 1), v167, &v169);
LABEL_129:
              unint64_t v65 = v75;
              int v14 = v166;
              uint64_t v67 = -(uint64_t)v26;
              goto LABEL_130;
            }
            unint64_t v73 = sub_1DD2BEC34(v165, (void *)((char *)v17 + 1), v167, &v169);
          }
        }
        else if (v166 == 6)
        {
          unint64_t v73 = sub_1DD2BE178(v165, (void *)((char *)v17 + 1), v167, &v169);
        }
        else
        {
          if (v166 != 5)
          {
            unint64_t v75 = sub_1DD2BD6D0(v165, (void *)((char *)v17 + 1), v167, &v169);
            goto LABEL_129;
          }
          unint64_t v73 = sub_1DD2BDC18(v165, (void *)((char *)v17 + 1), v167, &v169);
        }
        uint64_t v67 = -(uint64_t)v26;
        int v14 = v166;
        unint64_t v65 = v73;
LABEL_130:
        if (v65 >= 4)
        {
          unint64_t v66 = v169;
          if ((int)(__clz(v169) + 4 * v65 - 31) > (int)(__clz(v64) + 4 * v61 - 27)) {
            goto LABEL_185;
          }
        }
        if ((unint64_t)v63 >= v168)
        {
          unint64_t v65 = v61;
          unint64_t v66 = v64;
          unint64_t v63 = v163;
          break;
        }
        unint64_t v63 = (_DWORD *)((char *)v17 + 2);
        if (v64)
        {
          int v76 = v164;
          if (v26 && *v63 == *(_DWORD *)((char *)v63 + v67))
          {
            unint64_t v77 = (char *)v17 + 6;
            unsigned int v78 = (void *)((char *)v17 + v67 + 6);
            if (v51 <= (unint64_t)v17 + 6)
            {
              uint64_t v81 = (unsigned __int16 *)v17 + 3;
            }
            else
            {
              unint64_t v79 = *(void *)v77 ^ *v78;
              if (v79)
              {
                unint64_t v80 = __clz(__rbit64(v79)) >> 3;
LABEL_163:
                unint64_t v89 = v80 + 4;
                if ((int)(__clz(v64) + 4 * v61 - 30) < 4 * (int)v89)
                {
                  unint64_t v61 = v89;
                  uint64_t v64 = 1;
                  v163 = (_DWORD *)((char *)v17 + 2);
                }
                goto LABEL_165;
              }
              uint64_t v81 = (unsigned __int16 *)v17 + 7;
              while ((unint64_t)v81 < v51)
              {
                uint64_t v86 = *(void *)((char *)v81 + v67);
                uint64_t v87 = *(void *)v81;
                v81 += 4;
                unint64_t v88 = v87 ^ v86;
                if (v88)
                {
                  uint64_t v81 = (unsigned __int16 *)((char *)v81 + (__clz(__rbit64(v88)) >> 3) - 8);
                  goto LABEL_162;
                }
              }
              unsigned int v78 = (void *)((char *)v81 + v67);
            }
            if (v81 < v159 && *(_DWORD *)v78 == *(_DWORD *)v81)
            {
              v81 += 2;
              unsigned int v78 = (void *)((char *)v78 + 4);
            }
            if (v81 < v162 && *(unsigned __int16 *)v78 == *v81)
            {
              ++v81;
              unsigned int v78 = (void *)((char *)v78 + 2);
            }
            if (v81 < v167 && *(unsigned __int8 *)v78 == *(unsigned __int8 *)v81) {
              uint64_t v81 = (unsigned __int16 *)((char *)v81 + 1);
            }
LABEL_162:
            unint64_t v80 = (char *)v81 - v77;
            if (v80 > 0xFFFFFFFFFFFFFFFBLL) {
              goto LABEL_165;
            }
            goto LABEL_163;
          }
        }
        else
        {
          int v76 = v164;
        }
LABEL_165:
        uint64_t v169 = 999999999;
        if (v76 == 6)
        {
          if (v166 == 6)
          {
            unint64_t v90 = sub_1DD2C01C8(v165, (void *)((char *)v17 + 2), v167, &v169);
          }
          else if (v166 == 5)
          {
            unint64_t v90 = sub_1DD2BFC60(v165, (void *)((char *)v17 + 2), v167, &v169);
          }
          else
          {
            unint64_t v90 = sub_1DD2BF710(v165, (void *)((char *)v17 + 2), v167, &v169);
          }
        }
        else if (v76 == 5)
        {
          if (v166 == 6)
          {
            unint64_t v90 = sub_1DD2BF19C(v165, (void *)((char *)v17 + 2), v167, &v169);
          }
          else if (v166 == 5)
          {
            unint64_t v90 = sub_1DD2BEC34(v165, (void *)((char *)v17 + 2), v167, &v169);
          }
          else
          {
            unint64_t v90 = sub_1DD2BE6E4(v165, (void *)((char *)v17 + 2), v167, &v169);
          }
        }
        else if (v166 == 6)
        {
          unint64_t v90 = sub_1DD2BE178(v165, (void *)((char *)v17 + 2), v167, &v169);
        }
        else if (v166 == 5)
        {
          unint64_t v90 = sub_1DD2BDC18(v165, (void *)((char *)v17 + 2), v167, &v169);
        }
        else
        {
          unint64_t v90 = sub_1DD2BD6D0(v165, (void *)((char *)v17 + 2), v167, &v169);
        }
        unint64_t v65 = v90;
        if (v90 < 4 || (unint64_t v66 = v169, (int)(__clz(v169) + 4 * v90 - 31) <= (int)(__clz(v64) + 4 * v61 - 24)))
        {
          unint64_t v65 = v61;
          unint64_t v66 = v64;
          unint64_t v63 = v163;
          int v14 = v166;
          break;
        }
        int v14 = v166;
        uint64_t v67 = -(uint64_t)v26;
LABEL_185:
        uint64_t v17 = v63;
        v163 = v63;
        uint64_t v64 = v66;
        unint64_t v61 = v65;
      }
      while ((unint64_t)v63 < v168);
    }
    if (v66 <= 3)
    {
      uint64_t v97 = v165;
    }
    else
    {
      if ((unint64_t)v63 <= v5 || (unint64_t)v63 - v66 + 3 <= v155)
      {
        unsigned int v96 = v63;
        uint64_t v97 = v165;
      }
      else
      {
        unint64_t v95 = 2 - v66;
        unsigned int v96 = v63;
        uint64_t v97 = v165;
        while (1)
        {
          int v98 = *((unsigned __int8 *)v96 - 1);
          unsigned int v96 = (_DWORD *)((char *)v96 - 1);
          if (v98 != *((unsigned __int8 *)v63 + v95)) {
            break;
          }
          ++v65;
          if ((unint64_t)v96 > v5)
          {
            BOOL v99 = (char *)v63 + v95;
            unint64_t v63 = v96;
            if ((unint64_t)v99 > v155) {
              continue;
            }
          }
          goto LABEL_206;
        }
        unsigned int v96 = v63;
      }
LABEL_206:
      unsigned int v161 = v26;
      uint64_t v26 = (v66 - 3);
      unint64_t v63 = v96;
    }
    uint64_t v100 = (uint64_t)v63 - v5;
    unsigned int v101 = *(_OWORD **)(a2 + 24);
    if (v63 > (_DWORD *)v158)
    {
      sub_1DD29DBFC(v101, (char *)v5, (unint64_t)v63, v158);
      int v14 = v166;
LABEL_209:
      *(void *)(a2 + 24) += v100;
      uint64_t v102 = *(void *)(a2 + 8);
      if ((unint64_t)v100 >= 0x10000)
      {
        unint64_t v103 = (unint64_t)(v102 - *(void *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 1;
        *(_DWORD *)(a2 + 76) = v103;
      }
      goto LABEL_217;
    }
    *unsigned int v101 = *(_OWORD *)v5;
    uint64_t v104 = *(void *)(a2 + 24);
    if ((unint64_t)v100 > 0x10)
    {
      *(_OWORD *)(v104 + 16) = *(_OWORD *)(v5 + 16);
      if (v100 >= 33)
      {
        unint64_t v105 = v104 + v100;
        unsigned int v106 = (_OWORD *)(v104 + 32);
        unint64_t v107 = (long long *)(v5 + 48);
        do
        {
          *unsigned int v106 = *(v107 - 1);
          long long v108 = *v107;
          v107 += 2;
          v106[1] = v108;
          v106 += 2;
        }
        while ((unint64_t)v106 < v105);
      }
      goto LABEL_209;
    }
    *(void *)(a2 + 24) = v104 + v100;
    uint64_t v102 = *(void *)(a2 + 8);
LABEL_217:
    *(_WORD *)(v102 + 4) = v100;
    *(_DWORD *)uint64_t v102 = v66;
    if (v65 - 3 >= 0x10000)
    {
      unint64_t v109 = (unint64_t)(v102 - *(void *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 2;
      *(_DWORD *)(a2 + 76) = v109;
    }
    *(_WORD *)(v102 + 6) = v65 - 3;
    *(void *)(a2 + 8) = v102 + 8;
    unsigned int v53 = v161;
    if (*(_DWORD *)(v97 + 300))
    {
      uint64_t v110 = *(unsigned int *)(v97 + 44);
      int v111 = v168 - (v157 + v110);
      if ((v111 + 1) < 8) {
        int v112 = v111 + 1;
      }
      else {
        int v112 = 8;
      }
      if (v168 >= v157 + v110) {
        int v113 = v112;
      }
      else {
        int v113 = 0;
      }
      uint64_t v114 = (v113 + v110);
      if (v110 < v114)
      {
        uint64_t v115 = *(void *)(v97 + 112);
        uint64_t v116 = *(void *)(v97 + 56);
        int v117 = *(_DWORD *)(v97 + 52);
        uint64_t v118 = *(void *)(v97 + 96);
        char v119 = 56 - v117;
        char v120 = 24 - v117;
        do
        {
          if (v164 == 5)
          {
            unint64_t v121 = 0xCF1BBCDCBB000000 * *(void *)(v157 + v110);
          }
          else
          {
            if (v164 != 6)
            {
              LODWORD(v122) = ((-1640531535 * *(_DWORD *)(v157 + v110)) ^ v118) >> v120;
              goto LABEL_234;
            }
            unint64_t v121 = 0xCF1BBCDCBF9B0000 * *(void *)(v157 + v110);
          }
          unint64_t v122 = (v121 ^ v118) >> v119;
LABEL_234:
          uint64_t v123 = v122 >> 8 << v166;
          _X17 = v115 + 4 * v123;
          __asm { PRFM            #0, [X17] }
          if (v156 > 4)
          {
            __asm { PRFM            #0, [X17,#0x40] }
            _X16 = v116 + v123;
            __asm { PRFM            #0, [X16] }
            if (v166 == 6) {
              __asm { PRFM            #0, [X16,#0x20] }
            }
          }
          else
          {
            _X16 = v116 + v123;
            __asm { PRFM            #0, [X16] }
          }
          *(_DWORD *)(v97 + 4 * (v110++ & 7) + 64) = v122;
        }
        while (v114 != v110);
      }
      *(_DWORD *)(v97 + 300) = 0;
    }
    unint64_t v5 = (unint64_t)v63 + v65;
    if (!v161 || v5 > v168)
    {
      uint64_t v17 = (void *)((char *)v63 + v65);
      unint64_t v52 = (unsigned __int16 *)((char *)v167 - 3);
      continue;
    }
    uint64_t v132 = v26;
    uint64_t v133 = v161;
    unint64_t v52 = (unsigned __int16 *)((char *)v167 - 3);
    while (1)
    {
      uint64_t v26 = v133;
      uint64_t v133 = v132;
      if (*(_DWORD *)v5 != *(_DWORD *)(v5 - v26))
      {
        unsigned int v53 = v26;
        uint64_t v26 = v132;
        goto LABEL_274;
      }
      v134 = (char *)(v5 + 4);
      v135 = (void *)(v5 + 4 - v26);
      if (v51 <= v5 + 4)
      {
        v138 = (unsigned __int16 *)(v5 + 4);
      }
      else
      {
        unint64_t v136 = *(void *)v134 ^ *v135;
        if (v136)
        {
          unint64_t v137 = __clz(__rbit64(v136)) >> 3;
          goto LABEL_258;
        }
        unint64_t v142 = v5 + 12;
        while (1)
        {
          v143 = (void *)(v142 + v136);
          if (v142 + v136 >= v51) {
            break;
          }
          uint64_t v144 = *(void *)(v5 + 12 - v26 + v136);
          v136 += 8;
          unint64_t v145 = *v143 ^ v144;
          if (v145)
          {
            unint64_t v137 = v136 + (__clz(__rbit64(v145)) >> 3);
            goto LABEL_258;
          }
        }
        v138 = (unsigned __int16 *)(v5 + v136 + 12);
        v135 = (void *)((char *)v138 - v26);
      }
      if (v138 < v159 && *(_DWORD *)v135 == *(_DWORD *)v138)
      {
        v138 += 2;
        v135 = (void *)((char *)v135 + 4);
      }
      if (v138 < v162 && *(unsigned __int16 *)v135 == *v138)
      {
        ++v138;
        v135 = (void *)((char *)v135 + 2);
      }
      if (v138 < v167 && *(unsigned __int8 *)v135 == *(unsigned __int8 *)v138) {
        v138 = (unsigned __int16 *)((char *)v138 + 1);
      }
      unint64_t v137 = (char *)v138 - v134;
LABEL_258:
      v139 = *(_OWORD **)(a2 + 24);
      if (v5 <= (unint64_t)v158)
      {
        _OWORD *v139 = *(_OWORD *)v5;
      }
      else
      {
        sub_1DD29DBFC(v139, (char *)v5, v5, v158);
        int v14 = v166;
      }
      uint64_t v140 = *(void *)(a2 + 8);
      *(_WORD *)(v140 + 4) = 0;
      *(_DWORD *)uint64_t v140 = 1;
      if (v137 + 1 >= 0x10000)
      {
        unint64_t v141 = (unint64_t)(v140 - *(void *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 2;
        *(_DWORD *)(a2 + 76) = v141;
      }
      *(_WORD *)(v140 + 6) = v137 + 1;
      *(void *)(a2 + 8) = v140 + 8;
      v5 += v137 + 4;
      if (!v133) {
        break;
      }
      uint64_t v132 = v26;
      unsigned int v53 = v133;
      uint64_t v17 = (void *)v5;
      if (v5 > v168) {
        goto LABEL_275;
      }
    }
    unsigned int v53 = 0;
LABEL_274:
    uint64_t v17 = (void *)v5;
LABEL_275:
    ;
  }
  while ((unint64_t)v17 < v168);
  unsigned int v160 = v53;
  a3 = v154;
  unsigned int v16 = v152;
  unsigned int v15 = v153;
  unsigned int v24 = v151;
LABEL_278:
  if (v16 <= v24) {
    unsigned int v146 = 0;
  }
  else {
    unsigned int v146 = v16;
  }
  if (v15 <= v24) {
    unsigned int v147 = 0;
  }
  else {
    unsigned int v147 = v15;
  }
  if (v26) {
    unsigned int v148 = v26;
  }
  else {
    unsigned int v148 = v146;
  }
  if (v26) {
    BOOL v149 = v146 == 0;
  }
  else {
    BOOL v149 = 1;
  }
  if (v149) {
    unsigned int v146 = v147;
  }
  if (v160) {
    unsigned int v146 = v160;
  }
  *a3 = v148;
  a3[1] = v146;
  return (char *)v167 - v5;
}

char *sub_1DD2B4160(uint64_t a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  unint64_t v5 = a4;
  unint64_t v8 = (unsigned __int16 *)(a4 + a5);
  unint64_t v9 = a4 + a5 - 16;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(unsigned int *)(a1 + 24);
  unint64_t v12 = v10 + v11;
  unsigned int v13 = *(_DWORD *)(a1 + 272);
  if (v13 >= 6) {
    unsigned int v13 = 6;
  }
  if (v13 <= 4) {
    int v14 = 4;
  }
  else {
    int v14 = v13;
  }
  if (*(_DWORD *)(a1 + 268) >= 6u) {
    unsigned int v15 = 6;
  }
  else {
    unsigned int v15 = *(_DWORD *)(a1 + 268);
  }
  if (v15 <= 4) {
    int v16 = 4;
  }
  else {
    int v16 = v15;
  }
  int v164 = v16;
  unsigned int v18 = *a3;
  unsigned int v17 = a3[1];
  if (a4 == v12) {
    unsigned int v19 = (char *)(a4 + 1);
  }
  else {
    unsigned int v19 = (char *)a4;
  }
  unsigned int v20 = 1 << *(_DWORD *)(a1 + 256);
  int v21 = v19 - v10 - v20;
  BOOL v22 = (int)v19 - (int)v10 - (int)v11 > v20;
  uint64_t v23 = *(unsigned int *)(a1 + 44);
  if (v22 && *(_DWORD *)(a1 + 40) == 0) {
    LODWORD(v11) = v21;
  }
  unsigned int v25 = v19 - v10 - v11;
  if (v17 <= v25) {
    unsigned int v26 = a3[1];
  }
  else {
    unsigned int v26 = 0;
  }
  unsigned int v151 = v25;
  if (v18 <= v25) {
    uint64_t v27 = v18;
  }
  else {
    uint64_t v27 = 0;
  }
  *(_DWORD *)(a1 + 300) = 0;
  int v28 = v9 - (v10 + v23);
  if ((v28 + 1) < 8) {
    int v29 = v28 + 1;
  }
  else {
    int v29 = 8;
  }
  if (v9 >= v10 + v23) {
    int v30 = v29;
  }
  else {
    int v30 = 0;
  }
  uint64_t v31 = (v30 + v23);
  if (v23 < v31)
  {
    uint64_t v32 = *(void *)(a1 + 112);
    uint64_t v33 = *(void *)(a1 + 56);
    int v34 = *(_DWORD *)(a1 + 52);
    uint64_t v35 = *(void *)(a1 + 96);
    char v36 = 56 - v34;
    char v37 = 24 - v34;
    unsigned int v38 = v26;
    do
    {
      if (v14 == 5)
      {
        unint64_t v39 = 0xCF1BBCDCBB000000 * *(void *)(v10 + v23);
      }
      else
      {
        if (v14 != 6)
        {
          LODWORD(v40) = ((-1640531535 * *(_DWORD *)(v10 + v23)) ^ v35) >> v37;
          goto LABEL_40;
        }
        unint64_t v39 = 0xCF1BBCDCBF9B0000 * *(void *)(v10 + v23);
      }
      unint64_t v40 = (v39 ^ v35) >> v36;
LABEL_40:
      uint64_t v41 = v40 >> 8 << v164;
      _X3 = v32 + 4 * v41;
      __asm { PRFM            #0, [X3] }
      if (v15 > 4)
      {
        __asm { PRFM            #0, [X3,#0x40] }
        _X1 = v33 + v41;
        __asm { PRFM            #0, [X1] }
        unsigned int v26 = v38;
        if (v164 == 6) {
          __asm { PRFM            #0, [X1,#0x20] }
        }
      }
      else
      {
        _X1 = v33 + v41;
        __asm { PRFM            #0, [X1] }
        unsigned int v26 = v38;
      }
      *(_DWORD *)(a1 + 4 * (v23++ & 7) + 64) = v40;
    }
    while (v31 != v23);
  }
  if ((unint64_t)v19 >= v9) {
    goto LABEL_233;
  }
  unsigned int v153 = v15;
  unint64_t v152 = v12;
  unsigned int v148 = v18;
  unsigned int v149 = v17;
  uint64_t v154 = v10;
  v150 = a3;
  unint64_t v53 = (unint64_t)v8 - 7;
  v158 = (unsigned __int16 *)((char *)v8 - 1);
  v159 = (unsigned __int16 *)((char *)v8 - 3);
  v162 = (char *)(v8 - 16);
  int v165 = v14;
  unsigned int v160 = v8;
  uint64_t v155 = a2;
  uint64_t v163 = a1;
  unint64_t v161 = v9;
  unint64_t v156 = (unint64_t)v8 - 7;
  do
  {
    unint64_t v54 = 0;
    if (v27 && *(_DWORD *)&v19[-v27 + 1] == *(_DWORD *)(v19 + 1))
    {
      unint64_t v55 = v19 + 5;
      uint64_t v56 = &v19[-v27 + 5];
      if (v53 <= (unint64_t)(v19 + 5))
      {
        unsigned int v59 = v19 + 5;
      }
      else
      {
        unint64_t v57 = *(void *)v55 ^ *(void *)v56;
        if (v57)
        {
          unint64_t v58 = __clz(__rbit64(v57)) >> 3;
LABEL_63:
          unint64_t v54 = v58 + 4;
          goto LABEL_64;
        }
        unsigned int v92 = v19 + 13;
        while (1)
        {
          uint64_t v93 = &v92[v57];
          if ((unint64_t)&v92[v57] >= v53) {
            break;
          }
          uint64_t v94 = *(void *)&v19[v57 + 13 - v27];
          v57 += 8;
          unint64_t v95 = *(void *)v93 ^ v94;
          if (v95)
          {
            unint64_t v58 = v57 + (__clz(__rbit64(v95)) >> 3);
            goto LABEL_63;
          }
        }
        unsigned int v59 = &v19[v57 + 13];
        uint64_t v56 = &v59[-v27];
      }
      if (v59 < (char *)v159 && *(_DWORD *)v56 == *(_DWORD *)v59)
      {
        v59 += 4;
        v56 += 4;
      }
      if (v59 < (char *)v158 && *(unsigned __int16 *)v56 == *(unsigned __int16 *)v59)
      {
        v59 += 2;
        v56 += 2;
      }
      if (v59 < (char *)v8 && *v56 == *v59) {
        ++v59;
      }
      unint64_t v58 = v59 - v55;
      goto LABEL_63;
    }
LABEL_64:
    uint64_t v166 = 999999999;
    unsigned int v157 = v26;
    if (v14 == 6)
    {
      if (v164 == 6)
      {
        unint64_t v60 = sub_1DD2C01C8(v163, v19, v8, &v166);
      }
      else if (v164 == 5)
      {
        unint64_t v60 = sub_1DD2BFC60(v163, v19, v8, &v166);
      }
      else
      {
        unint64_t v60 = sub_1DD2BF710(v163, v19, v8, &v166);
      }
    }
    else if (v14 == 5)
    {
      if (v164 == 6)
      {
        unint64_t v60 = sub_1DD2BF19C(v163, v19, v8, &v166);
      }
      else if (v164 == 5)
      {
        unint64_t v60 = sub_1DD2BEC34(v163, v19, v8, &v166);
      }
      else
      {
        unint64_t v60 = sub_1DD2BE6E4(v163, v19, v8, &v166);
      }
    }
    else if (v164 == 6)
    {
      unint64_t v60 = sub_1DD2BE178(v163, v19, v8, &v166);
    }
    else if (v164 == 5)
    {
      unint64_t v60 = sub_1DD2BDC18(v163, v19, v8, &v166);
    }
    else
    {
      unint64_t v60 = sub_1DD2BD6D0(v163, v19, v8, &v166);
    }
    if (v60 <= v54) {
      unint64_t v61 = v54;
    }
    else {
      unint64_t v61 = v60;
    }
    if (v61 < 4)
    {
      unint64_t v62 = (unint64_t)&v19[-v5];
      v19 += ((unint64_t)&v19[-v5] >> 8) + 1;
      *(_DWORD *)(v163 + 300) = v62 > 0x7FF;
      int v14 = v165;
      unsigned int v26 = v157;
      continue;
    }
    if (v60 <= v54) {
      unint64_t v63 = v19 + 1;
    }
    else {
      unint64_t v63 = v19;
    }
    if (v60 <= v54) {
      uint64_t v64 = 1;
    }
    else {
      uint64_t v64 = v166;
    }
    int v14 = v165;
    if ((unint64_t)v19 >= v9)
    {
      unint64_t v83 = v61;
      unint64_t v84 = v64;
      uint64_t v67 = v63;
      goto LABEL_144;
    }
    unint64_t v65 = (unsigned __int16 *)(v19 + 13);
    uint64_t v66 = -(uint64_t)v27;
    while (1)
    {
      uint64_t v67 = v19 + 1;
      if (!v64)
      {
        int v68 = v160;
        uint64_t v69 = v163;
LABEL_104:
        int v74 = v164;
        goto LABEL_105;
      }
      int v68 = v160;
      uint64_t v69 = v163;
      if (!v27 || *v67 != *(_DWORD *)((char *)v67 + v66)) {
        goto LABEL_104;
      }
      int v70 = v19 + 5;
      unint64_t v71 = &v19[v66 + 5];
      if (v156 <= (unint64_t)(v19 + 5))
      {
        unint64_t v72 = (unsigned __int16 *)(v19 + 5);
        int v74 = v164;
      }
      else
      {
        unint64_t v72 = v65;
        unint64_t v73 = *(void *)v70 ^ *(void *)v71;
        int v74 = v164;
        if (v73)
        {
          unint64_t v75 = __clz(__rbit64(v73)) >> 3;
LABEL_127:
          unint64_t v81 = v75 + 4;
          if (3 * (int)v81 > (int)(3 * v61 + __clz(v64) - 30))
          {
            unint64_t v61 = v81;
            uint64_t v64 = 1;
            unint64_t v63 = v19 + 1;
          }
          goto LABEL_105;
        }
        while ((unint64_t)v72 < v156)
        {
          uint64_t v76 = *(void *)((char *)v72 + v66);
          uint64_t v77 = *(void *)v72;
          v72 += 4;
          unint64_t v78 = v77 ^ v76;
          if (v78)
          {
            unint64_t v72 = (unsigned __int16 *)((char *)v72 + (__clz(__rbit64(v78)) >> 3) - 8);
            goto LABEL_126;
          }
        }
        unint64_t v71 = (char *)v72 + v66;
      }
      if (v72 < v159 && *(_DWORD *)v71 == *(_DWORD *)v72)
      {
        v72 += 2;
        v71 += 4;
      }
      if (v72 < v158 && *(unsigned __int16 *)v71 == *v72)
      {
        ++v72;
        v71 += 2;
      }
      if (v72 < v160 && *v71 == *(unsigned char *)v72) {
        unint64_t v72 = (unsigned __int16 *)((char *)v72 + 1);
      }
LABEL_126:
      unint64_t v75 = (char *)v72 - v70;
      if (v75 <= 0xFFFFFFFFFFFFFFFBLL) {
        goto LABEL_127;
      }
LABEL_105:
      uint64_t v166 = 999999999;
      unint64_t v79 = v19 + 1;
      if (v165 == 6)
      {
        if (v74 == 6)
        {
          unint64_t v80 = sub_1DD2C01C8(v69, v79, v68, &v166);
          goto LABEL_134;
        }
        if (v74 != 5)
        {
          unint64_t v82 = sub_1DD2BF710(v69, v79, v68, &v166);
          goto LABEL_136;
        }
        unint64_t v80 = sub_1DD2BFC60(v69, v79, v68, &v166);
      }
      else if (v165 == 5)
      {
        if (v74 == 6)
        {
          unint64_t v80 = sub_1DD2BF19C(v69, v79, v68, &v166);
        }
        else
        {
          if (v74 != 5)
          {
            unint64_t v82 = sub_1DD2BE6E4(v69, v79, v68, &v166);
LABEL_136:
            unint64_t v83 = v82;
            uint64_t v66 = -(uint64_t)v27;
            goto LABEL_137;
          }
          unint64_t v80 = sub_1DD2BEC34(v69, v79, v68, &v166);
        }
      }
      else
      {
        if (v74 == 6)
        {
          unint64_t v80 = sub_1DD2BE178(v69, v79, v68, &v166);
          goto LABEL_134;
        }
        if (v74 != 5)
        {
          unint64_t v82 = sub_1DD2BD6D0(v69, v79, v68, &v166);
          goto LABEL_136;
        }
        unint64_t v80 = sub_1DD2BDC18(v69, v79, v68, &v166);
      }
LABEL_134:
      uint64_t v66 = -(uint64_t)v27;
      unint64_t v83 = v80;
LABEL_137:
      if (v83 < 4) {
        break;
      }
      unint64_t v84 = v166;
      if ((int)(__clz(v166) + 4 * v83 - 31) <= (int)(__clz(v64) + 4 * v61 - 27)) {
        break;
      }
      unint64_t v65 = (unsigned __int16 *)((char *)v65 + 1);
      ++v19;
      unint64_t v63 = v67;
      uint64_t v64 = v166;
      unint64_t v61 = v83;
      int v14 = v165;
      if ((unint64_t)v67 >= v161) {
        goto LABEL_144;
      }
    }
    unint64_t v83 = v61;
    unint64_t v84 = v64;
    uint64_t v67 = v63;
    int v14 = v165;
LABEL_144:
    if (v84 <= 3)
    {
      uint64_t v85 = v155;
      int v89 = v164;
      uint64_t v86 = v162;
    }
    else
    {
      uint64_t v85 = v155;
      uint64_t v86 = v162;
      if ((unint64_t)v67 <= v5 || (unint64_t)v67 - v84 + 3 <= v152)
      {
        unint64_t v88 = v67;
        int v89 = v164;
      }
      else
      {
        unint64_t v87 = 2 - v84;
        unint64_t v88 = v67;
        int v89 = v164;
        while (1)
        {
          int v90 = *((unsigned __int8 *)v88 - 1);
          unint64_t v88 = (_DWORD *)((char *)v88 - 1);
          if (v90 != *((unsigned __int8 *)v67 + v87)) {
            break;
          }
          ++v83;
          if ((unint64_t)v88 > v5)
          {
            unsigned int v91 = (char *)v67 + v87;
            uint64_t v67 = v88;
            if ((unint64_t)v91 > v152) {
              continue;
            }
          }
          goto LABEL_159;
        }
        unint64_t v88 = v67;
      }
LABEL_159:
      unsigned int v157 = v27;
      uint64_t v27 = (v84 - 3);
      uint64_t v67 = v88;
    }
    uint64_t v96 = (uint64_t)v67 - v5;
    uint64_t v97 = *(_OWORD **)(v85 + 24);
    if (v67 > (_DWORD *)v86)
    {
      sub_1DD29DBFC(v97, (char *)v5, (unint64_t)v67, v86);
      int v14 = v165;
      goto LABEL_162;
    }
    *uint64_t v97 = *(_OWORD *)v5;
    uint64_t v100 = *(void *)(v85 + 24);
    if ((unint64_t)v96 <= 0x10)
    {
      *(void *)(v85 + 24) = v100 + v96;
      uint64_t v98 = *(void *)(v85 + 8);
    }
    else
    {
      *(_OWORD *)(v100 + 16) = *(_OWORD *)(v5 + 16);
      if (v96 >= 33)
      {
        unint64_t v101 = v100 + v96;
        uint64_t v102 = (_OWORD *)(v100 + 32);
        unint64_t v103 = (long long *)(v5 + 48);
        do
        {
          _OWORD *v102 = *(v103 - 1);
          long long v104 = *v103;
          v103 += 2;
          v102[1] = v104;
          v102 += 2;
        }
        while ((unint64_t)v102 < v101);
      }
LABEL_162:
      *(void *)(v85 + 24) += v96;
      uint64_t v98 = *(void *)(v85 + 8);
      if ((unint64_t)v96 >= 0x10000)
      {
        unint64_t v99 = (unint64_t)(v98 - *(void *)v85) >> 3;
        *(_DWORD *)(v85 + 72) = 1;
        *(_DWORD *)(v85 + 76) = v99;
      }
    }
    *(_WORD *)(v98 + 4) = v96;
    *(_DWORD *)uint64_t v98 = v84;
    if (v83 - 3 >= 0x10000)
    {
      unint64_t v105 = (unint64_t)(v98 - *(void *)v85) >> 3;
      *(_DWORD *)(v85 + 72) = 2;
      *(_DWORD *)(v85 + 76) = v105;
    }
    *(_WORD *)(v98 + 6) = v83 - 3;
    *(void *)(v85 + 8) = v98 + 8;
    if (*(_DWORD *)(v163 + 300))
    {
      uint64_t v106 = *(unsigned int *)(v163 + 44);
      int v107 = v161 - (v154 + v106);
      if ((v107 + 1) < 8) {
        int v108 = v107 + 1;
      }
      else {
        int v108 = 8;
      }
      if (v161 >= v154 + v106) {
        int v109 = v108;
      }
      else {
        int v109 = 0;
      }
      uint64_t v110 = (v109 + v106);
      if (v106 < v110)
      {
        uint64_t v111 = *(void *)(v163 + 112);
        uint64_t v112 = *(void *)(v163 + 56);
        int v113 = *(_DWORD *)(v163 + 52);
        uint64_t v114 = *(void *)(v163 + 96);
        char v115 = 56 - v113;
        char v116 = 24 - v113;
        do
        {
          if (v165 == 5)
          {
            unint64_t v117 = 0xCF1BBCDCBB000000 * *(void *)(v154 + v106);
          }
          else
          {
            if (v165 != 6)
            {
              LODWORD(v118) = ((-1640531535 * *(_DWORD *)(v154 + v106)) ^ v114) >> v116;
              goto LABEL_187;
            }
            unint64_t v117 = 0xCF1BBCDCBF9B0000 * *(void *)(v154 + v106);
          }
          unint64_t v118 = (v117 ^ v114) >> v115;
LABEL_187:
          uint64_t v119 = v118 >> 8 << v89;
          _X17 = v111 + 4 * v119;
          __asm { PRFM            #0, [X17] }
          if (v153 > 4)
          {
            __asm { PRFM            #0, [X17,#0x40] }
            _X16 = v112 + v119;
            __asm { PRFM            #0, [X16] }
            if (v89 == 6) {
              __asm { PRFM            #0, [X16,#0x20] }
            }
          }
          else
          {
            _X16 = v112 + v119;
            __asm { PRFM            #0, [X16] }
          }
          *(_DWORD *)(v163 + 4 * (v106++ & 7) + 64) = v118;
        }
        while (v110 != v106);
      }
      *(_DWORD *)(v163 + 300) = 0;
    }
    unint64_t v5 = (unint64_t)v67 + v83;
    unsigned int v26 = v157;
    if (!v157)
    {
      unsigned int v19 = (char *)v67 + v83;
      unint64_t v8 = v160;
      unint64_t v9 = v161;
      goto LABEL_227;
    }
    unint64_t v9 = v161;
    if (v5 > v161)
    {
      unsigned int v19 = (char *)v5;
      unint64_t v8 = v160;
LABEL_227:
      unint64_t v53 = v156;
      continue;
    }
    uint64_t v128 = v27;
    uint64_t v129 = v157;
    unint64_t v8 = v160;
    unint64_t v53 = v156;
LABEL_196:
    uint64_t v27 = v129;
    uint64_t v129 = v128;
    if (*(_DWORD *)v5 != *(_DWORD *)(v5 - v27))
    {
      unsigned int v26 = v27;
      uint64_t v27 = v128;
      goto LABEL_229;
    }
    uint64_t v130 = (char *)(v5 + 4);
    unint64_t v131 = (void *)(v5 + 4 - v27);
    if (v156 <= v5 + 4)
    {
      v135 = (unsigned __int16 *)(v5 + 4);
      uint64_t v133 = v162;
    }
    else
    {
      unint64_t v132 = *(void *)v130 ^ *v131;
      uint64_t v133 = v162;
      if (v132)
      {
        unint64_t v134 = __clz(__rbit64(v132)) >> 3;
        goto LABEL_211;
      }
      unint64_t v139 = v5 + 12;
      while (1)
      {
        uint64_t v140 = (void *)(v139 + v132);
        if (v139 + v132 >= v156) {
          break;
        }
        uint64_t v141 = *(void *)(v5 + 12 - v27 + v132);
        v132 += 8;
        unint64_t v142 = *v140 ^ v141;
        if (v142)
        {
          unint64_t v134 = v132 + (__clz(__rbit64(v142)) >> 3);
          goto LABEL_211;
        }
      }
      v135 = (unsigned __int16 *)(v5 + v132 + 12);
      unint64_t v131 = (void *)((char *)v135 - v27);
    }
    if (v135 < v159 && *(_DWORD *)v131 == *(_DWORD *)v135)
    {
      v135 += 2;
      unint64_t v131 = (void *)((char *)v131 + 4);
    }
    if (v135 < v158 && *(unsigned __int16 *)v131 == *v135)
    {
      ++v135;
      unint64_t v131 = (void *)((char *)v131 + 2);
    }
    if (v135 < v160 && *(unsigned __int8 *)v131 == *(unsigned __int8 *)v135) {
      v135 = (unsigned __int16 *)((char *)v135 + 1);
    }
    unint64_t v134 = (char *)v135 - v130;
LABEL_211:
    unint64_t v136 = *(_OWORD **)(v85 + 24);
    if (v5 <= (unint64_t)v133)
    {
      *unint64_t v136 = *(_OWORD *)v5;
    }
    else
    {
      sub_1DD29DBFC(v136, (char *)v5, v5, v133);
      int v14 = v165;
    }
    uint64_t v137 = *(void *)(v85 + 8);
    *(_WORD *)(v137 + 4) = 0;
    *(_DWORD *)uint64_t v137 = 1;
    if (v134 + 1 >= 0x10000)
    {
      unint64_t v138 = (unint64_t)(v137 - *(void *)v85) >> 3;
      *(_DWORD *)(v85 + 72) = 2;
      *(_DWORD *)(v85 + 76) = v138;
    }
    *(_WORD *)(v137 + 6) = v134 + 1;
    *(void *)(v85 + 8) = v137 + 8;
    v5 += v134 + 4;
    if (v129)
    {
      uint64_t v128 = v27;
      unsigned int v26 = v129;
      unsigned int v19 = (char *)v5;
      if (v5 > v161) {
        continue;
      }
      goto LABEL_196;
    }
    unsigned int v26 = 0;
LABEL_229:
    unsigned int v19 = (char *)v5;
  }
  while ((unint64_t)v19 < v9);
  a3 = v150;
  unsigned int v18 = v148;
  unsigned int v17 = v149;
LABEL_233:
  if (v18 <= v151) {
    unsigned int v143 = 0;
  }
  else {
    unsigned int v143 = v18;
  }
  if (v17 <= v151) {
    unsigned int v144 = 0;
  }
  else {
    unsigned int v144 = v17;
  }
  if (v27) {
    unsigned int v145 = v27;
  }
  else {
    unsigned int v145 = v143;
  }
  if (v27) {
    BOOL v146 = v143 == 0;
  }
  else {
    BOOL v146 = 1;
  }
  if (v146) {
    unsigned int v143 = v144;
  }
  if (v26) {
    unsigned int v143 = v26;
  }
  *a3 = v145;
  a3[1] = v143;
  return (char *)v8 - v5;
}

char *sub_1DD2B4D6C(uint64_t a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  unint64_t v5 = a4;
  uint64_t v137 = (char *)(a4 + a5);
  unint64_t v7 = a4 + a5 - 16;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(unsigned int *)(a1 + 24);
  unsigned int v10 = *(_DWORD *)(a1 + 272);
  if (v10 >= 6) {
    unsigned int v10 = 6;
  }
  if (v10 <= 4) {
    int v11 = 4;
  }
  else {
    int v11 = v10;
  }
  unsigned int v12 = *(_DWORD *)(a1 + 268);
  if (v12 >= 6) {
    unsigned int v12 = 6;
  }
  unsigned int v132 = v12;
  if (v12 <= 4) {
    int v13 = 4;
  }
  else {
    int v13 = v12;
  }
  unsigned int v15 = *a3;
  unsigned int v14 = a3[1];
  unint64_t v130 = v8 + v9;
  if (a4 == v8 + v9) {
    unint64_t v16 = a4 + 1;
  }
  else {
    unint64_t v16 = a4;
  }
  int v17 = v16 - v8;
  unsigned int v18 = 1 << *(_DWORD *)(a1 + 256);
  int v19 = v16 - v8 - v18;
  BOOL v20 = (int)v16 - (int)v8 - (int)v9 > v18;
  uint64_t v21 = *(unsigned int *)(a1 + 44);
  if (v20 && *(_DWORD *)(a1 + 40) == 0) {
    LODWORD(v9) = v19;
  }
  unsigned int v23 = v17 - v9;
  if (v14 <= v17 - (int)v9) {
    uint64_t v24 = v14;
  }
  else {
    uint64_t v24 = 0;
  }
  if (v15 <= v23) {
    uint64_t v25 = v15;
  }
  else {
    uint64_t v25 = 0;
  }
  *(_DWORD *)(a1 + 300) = 0;
  uint64_t v131 = v8;
  int v26 = v7 - (v8 + v21);
  if ((v26 + 1) < 8) {
    int v27 = v26 + 1;
  }
  else {
    int v27 = 8;
  }
  if (v7 >= v8 + v21) {
    int v28 = v27;
  }
  else {
    int v28 = 0;
  }
  uint64_t v29 = (v28 + v21);
  if (v21 < v29)
  {
    uint64_t v30 = *(void *)(a1 + 112);
    uint64_t v31 = *(void *)(a1 + 56);
    int v32 = *(_DWORD *)(a1 + 52);
    uint64_t v33 = *(void *)(a1 + 96);
    char v34 = 56 - v32;
    char v35 = 24 - v32;
    do
    {
      if (v11 == 5)
      {
        unint64_t v36 = 0xCF1BBCDCBB000000 * *(void *)(v8 + v21);
      }
      else
      {
        if (v11 != 6)
        {
          LODWORD(v37) = ((-1640531535 * *(_DWORD *)(v8 + v21)) ^ v33) >> v35;
          goto LABEL_39;
        }
        unint64_t v36 = 0xCF1BBCDCBF9B0000 * *(void *)(v8 + v21);
      }
      unint64_t v37 = (v36 ^ v33) >> v34;
LABEL_39:
      uint64_t v38 = v37 >> 8 << v13;
      _X3 = v30 + 4 * v38;
      __asm { PRFM            #0, [X3] }
      if (v132 > 4)
      {
        __asm { PRFM            #0, [X3,#0x40] }
        _X1 = v31 + v38;
        __asm { PRFM            #0, [X1] }
        if (v13 == 6) {
          __asm { PRFM            #0, [X1,#0x20] }
        }
      }
      else
      {
        _X1 = v31 + v38;
        __asm { PRFM            #0, [X1] }
      }
      *(_DWORD *)(a1 + 4 * (v21++ & 7) + 64) = v37;
    }
    while (v29 != v21);
  }
  if (v16 < v7)
  {
    unsigned int v126 = v23;
    unsigned int v127 = v15;
    unsigned int v128 = v14;
    uint64_t v129 = a3;
    unint64_t v50 = (unint64_t)(v137 - 7);
    unint64_t v134 = v137 - 1;
    v135 = v137 - 3;
    unint64_t v51 = v137 - 32;
    unint64_t v136 = v7;
    while (1)
    {
      if (v25)
      {
        unint64_t v52 = v16 + 1;
        if (*(_DWORD *)(v16 + 1 - v25) == *(_DWORD *)(v16 + 1))
        {
          unint64_t v53 = (char *)(v16 + 5);
          unint64_t v54 = (char *)(v16 + 5 - v25);
          if (v50 <= v16 + 5)
          {
            unint64_t v58 = (char *)(v16 + 5);
          }
          else
          {
            unint64_t v55 = *(void *)v53 ^ *(void *)v54;
            if (v55)
            {
              unint64_t v56 = __clz(__rbit64(v55)) >> 3;
LABEL_67:
              unint64_t v59 = v56 + 4;
              LODWORD(v60) = 1;
              goto LABEL_101;
            }
            unint64_t v61 = v16 + 13;
            while (1)
            {
              unint64_t v62 = (void *)(v61 + v55);
              if (v61 + v55 >= v50) {
                break;
              }
              uint64_t v63 = *(void *)(v16 + 13 - v25 + v55);
              v55 += 8;
              unint64_t v64 = *v62 ^ v63;
              if (v64)
              {
                unint64_t v56 = v55 + (__clz(__rbit64(v64)) >> 3);
                goto LABEL_67;
              }
            }
            unint64_t v58 = (char *)(v16 + v55 + 13);
            unint64_t v54 = &v58[-v25];
          }
          if (v58 < v135 && *(_DWORD *)v54 == *(_DWORD *)v58)
          {
            v58 += 4;
            v54 += 4;
          }
          if (v58 < v134 && *(unsigned __int16 *)v54 == *(unsigned __int16 *)v58)
          {
            v58 += 2;
            v54 += 2;
          }
          if (v58 < v137 && *v54 == *v58) {
            ++v58;
          }
          unint64_t v56 = v58 - v53;
          goto LABEL_67;
        }
      }
      uint64_t v138 = 999999999;
      if (v11 == 6)
      {
        if (v13 == 6)
        {
          unint64_t v57 = sub_1DD2C01C8(a1, (void *)v16, v137, &v138);
          goto LABEL_83;
        }
        if (v13 == 5)
        {
          unint64_t v57 = sub_1DD2BFC60(a1, (void *)v16, v137, &v138);
          goto LABEL_83;
        }
        unint64_t v65 = sub_1DD2BF710(a1, (void *)v16, v137, &v138);
      }
      else if (v11 == 5)
      {
        if (v13 == 6)
        {
          unint64_t v57 = sub_1DD2BF19C(a1, (void *)v16, v137, &v138);
          goto LABEL_83;
        }
        if (v13 == 5)
        {
          unint64_t v57 = sub_1DD2BEC34(a1, (void *)v16, v137, &v138);
LABEL_83:
          unint64_t v7 = v136;
          unint64_t v51 = v137 - 32;
          unint64_t v59 = v57;
          goto LABEL_86;
        }
        unint64_t v65 = sub_1DD2BE6E4(a1, (void *)v16, v137, &v138);
      }
      else
      {
        if (v13 == 6)
        {
          unint64_t v57 = sub_1DD2BE178(a1, (_DWORD *)v16, v137, &v138);
          goto LABEL_83;
        }
        if (v13 == 5)
        {
          unint64_t v57 = sub_1DD2BDC18(a1, (_DWORD *)v16, v137, &v138);
          goto LABEL_83;
        }
        unint64_t v65 = sub_1DD2BD6D0(a1, (_DWORD *)v16, v137, &v138);
      }
      unint64_t v59 = v65;
      unint64_t v7 = v136;
      unint64_t v51 = v137 - 32;
LABEL_86:
      if (v59) {
        unint64_t v60 = v138;
      }
      else {
        unint64_t v60 = 1;
      }
      if (v59 > 3)
      {
        if (v60 >= 4)
        {
          if (v16 > v5 && v16 - v60 + 3 > v130)
          {
            unint64_t v67 = 2 - v60;
            unint64_t v52 = v16;
            while (1)
            {
              int v68 = *(unsigned __int8 *)--v52;
              if (v68 != *(unsigned __int8 *)(v16 + v67)) {
                break;
              }
              ++v59;
              if (v52 > v5)
              {
                unint64_t v69 = v16 + v67;
                unint64_t v16 = v52;
                if (v69 > v130) {
                  continue;
                }
              }
              goto LABEL_100;
            }
          }
          unint64_t v52 = v16;
LABEL_100:
          uint64_t v24 = v25;
          uint64_t v25 = (v60 - 3);
LABEL_101:
          unint64_t v16 = v52;
        }
        uint64_t v70 = v16 - v5;
        unint64_t v71 = *(_OWORD **)(a2 + 24);
        if (v16 > (unint64_t)v51)
        {
          unint64_t v72 = (char *)v5;
          int v73 = v60;
          sub_1DD29DBFC(v71, v72, v16, v51);
          LODWORD(v60) = v73;
          unint64_t v7 = v136;
          goto LABEL_104;
        }
        _OWORD *v71 = *(_OWORD *)v5;
        uint64_t v79 = *(void *)(a2 + 24);
        if ((unint64_t)v70 <= 0x10)
        {
          *(void *)(a2 + 24) = v79 + v70;
          uint64_t v74 = *(void *)(a2 + 8);
          uint64_t v75 = a1;
          uint64_t v76 = v131;
          unsigned int v77 = v132;
        }
        else
        {
          *(_OWORD *)(v79 + 16) = *(_OWORD *)(v5 + 16);
          if (v70 >= 33)
          {
            unint64_t v80 = v79 + v70;
            unint64_t v81 = (_OWORD *)(v79 + 32);
            unint64_t v82 = (long long *)(v5 + 48);
            do
            {
              *unint64_t v81 = *(v82 - 1);
              long long v83 = *v82;
              v82 += 2;
              v81[1] = v83;
              v81 += 2;
            }
            while ((unint64_t)v81 < v80);
          }
LABEL_104:
          *(void *)(a2 + 24) += v70;
          uint64_t v74 = *(void *)(a2 + 8);
          uint64_t v75 = a1;
          uint64_t v76 = v131;
          unsigned int v77 = v132;
          if ((unint64_t)v70 >= 0x10000)
          {
            unint64_t v78 = (unint64_t)(v74 - *(void *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 1;
            *(_DWORD *)(a2 + 76) = v78;
          }
          unint64_t v51 = v137 - 32;
        }
        *(_WORD *)(v74 + 4) = v70;
        *(_DWORD *)uint64_t v74 = v60;
        if (v59 - 3 >= 0x10000)
        {
          unint64_t v84 = (unint64_t)(v74 - *(void *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v84;
        }
        *(_WORD *)(v74 + 6) = v59 - 3;
        *(void *)(a2 + 8) = v74 + 8;
        if (*(_DWORD *)(v75 + 300))
        {
          uint64_t v85 = *(unsigned int *)(v75 + 44);
          int v86 = v7 - (v76 + v85);
          if ((v86 + 1) < 8) {
            int v87 = v86 + 1;
          }
          else {
            int v87 = 8;
          }
          if (v7 >= v76 + v85) {
            int v88 = v87;
          }
          else {
            int v88 = 0;
          }
          uint64_t v89 = (v88 + v85);
          if (v85 < v89)
          {
            uint64_t v90 = *(void *)(v75 + 112);
            uint64_t v91 = *(void *)(v75 + 56);
            int v92 = *(_DWORD *)(v75 + 52);
            uint64_t v93 = *(void *)(v75 + 96);
            char v94 = 56 - v92;
            char v95 = 24 - v92;
            do
            {
              if (v11 == 5)
              {
                unint64_t v96 = 0xCF1BBCDCBB000000 * *(void *)(v76 + v85);
              }
              else
              {
                if (v11 != 6)
                {
                  LODWORD(v97) = ((-1640531535 * *(_DWORD *)(v76 + v85)) ^ v93) >> v95;
                  goto LABEL_130;
                }
                unint64_t v96 = 0xCF1BBCDCBF9B0000 * *(void *)(v76 + v85);
              }
              unint64_t v97 = (v96 ^ v93) >> v94;
LABEL_130:
              uint64_t v98 = v97 >> 8 << v13;
              _X17 = v90 + 4 * v98;
              __asm { PRFM            #0, [X17] }
              if (v77 > 4)
              {
                __asm { PRFM            #0, [X17,#0x40] }
                _X16 = v91 + v98;
                __asm { PRFM            #0, [X16] }
                if (v13 == 6) {
                  __asm { PRFM            #0, [X16,#0x20] }
                }
              }
              else
              {
                _X16 = v91 + v98;
                __asm { PRFM            #0, [X16] }
              }
              *(_DWORD *)(v75 + 4 * (v85++ & 7) + 64) = v97;
            }
            while (v89 != v85);
          }
          *(_DWORD *)(v75 + 300) = 0;
        }
        unint64_t v5 = v16 + v59;
        if (v24 && v5 <= v7)
        {
          uint64_t v107 = v25;
          uint64_t v108 = v24;
          while (1)
          {
            uint64_t v25 = v108;
            uint64_t v108 = v107;
            if (*(_DWORD *)v5 != *(_DWORD *)(v5 - v25))
            {
              uint64_t v24 = v25;
              uint64_t v25 = v107;
              break;
            }
            int v109 = (char *)(v5 + 4);
            uint64_t v110 = (char *)(v5 + 4 - v25);
            if (v50 <= v5 + 4)
            {
              int v113 = (char *)(v5 + 4);
            }
            else
            {
              unint64_t v111 = *(void *)v109 ^ *(void *)v110;
              if (v111)
              {
                unint64_t v112 = __clz(__rbit64(v111)) >> 3;
                goto LABEL_154;
              }
              unint64_t v117 = v5 + 12;
              while (1)
              {
                unint64_t v118 = (void *)(v117 + v111);
                if (v117 + v111 >= v50) {
                  break;
                }
                uint64_t v119 = *(void *)(v5 + 12 - v25 + v111);
                v111 += 8;
                unint64_t v120 = *v118 ^ v119;
                if (v120)
                {
                  unint64_t v112 = v111 + (__clz(__rbit64(v120)) >> 3);
                  goto LABEL_154;
                }
              }
              int v113 = (char *)(v5 + v111 + 12);
              uint64_t v110 = &v113[-v25];
            }
            if (v113 < v135 && *(_DWORD *)v110 == *(_DWORD *)v113)
            {
              v113 += 4;
              v110 += 4;
            }
            if (v113 < v134 && *(unsigned __int16 *)v110 == *(unsigned __int16 *)v113)
            {
              v113 += 2;
              v110 += 2;
            }
            if (v113 < v137 && *v110 == *v113) {
              ++v113;
            }
            unint64_t v112 = v113 - v109;
LABEL_154:
            uint64_t v114 = *(_OWORD **)(a2 + 24);
            if (v5 <= (unint64_t)v51)
            {
              *uint64_t v114 = *(_OWORD *)v5;
            }
            else
            {
              sub_1DD29DBFC(v114, (char *)v5, v5, v51);
              unint64_t v7 = v136;
              unint64_t v51 = v137 - 32;
            }
            uint64_t v115 = *(void *)(a2 + 8);
            *(_WORD *)(v115 + 4) = 0;
            *(_DWORD *)uint64_t v115 = 1;
            if (v112 + 1 >= 0x10000)
            {
              unint64_t v116 = (unint64_t)(v115 - *(void *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 2;
              *(_DWORD *)(a2 + 76) = v116;
            }
            *(_WORD *)(v115 + 6) = v112 + 1;
            *(void *)(a2 + 8) = v115 + 8;
            v5 += v112 + 4;
            if (!v108)
            {
              uint64_t v24 = v108;
              break;
            }
            uint64_t v107 = v25;
            uint64_t v24 = v108;
            unint64_t v16 = v5;
            if (v5 > v7) {
              goto LABEL_170;
            }
          }
        }
        unint64_t v16 = v5;
        goto LABEL_170;
      }
      unint64_t v66 = v16 - v5;
      v16 += ((v16 - v5) >> 8) + 1;
      *(_DWORD *)(a1 + 300) = v66 > 0x7FF;
LABEL_170:
      if (v16 >= v7)
      {
        a3 = v129;
        unsigned int v15 = v127;
        unsigned int v14 = v128;
        unsigned int v23 = v126;
        break;
      }
    }
  }
  if (v15 <= v23) {
    unsigned int v121 = 0;
  }
  else {
    unsigned int v121 = v15;
  }
  if (v14 <= v23) {
    unsigned int v122 = 0;
  }
  else {
    unsigned int v122 = v14;
  }
  if (v25) {
    unsigned int v123 = v25;
  }
  else {
    unsigned int v123 = v121;
  }
  if (v25) {
    BOOL v124 = v121 == 0;
  }
  else {
    BOOL v124 = 1;
  }
  if (v124) {
    unsigned int v121 = v122;
  }
  if (v24) {
    unsigned int v121 = v24;
  }
  *a3 = v123;
  a3[1] = v121;
  return &v137[-v5];
}

unint64_t sub_1DD2B56C0(uint64_t a1, uint64_t a2, _DWORD *a3, void *a4, uint64_t a5)
{
  unint64_t v5 = (unint64_t)a4;
  uint64_t v7 = a1;
  unint64_t v134 = (unint64_t)a4 + a5;
  unint64_t v8 = (unint64_t)a4 + a5 - 16;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(unsigned int *)(a1 + 24);
  unsigned int v11 = *(_DWORD *)(a1 + 272);
  if (v11 >= 6) {
    unsigned int v11 = 6;
  }
  if (v11 <= 4) {
    int v12 = 4;
  }
  else {
    int v12 = v11;
  }
  if (*(_DWORD *)(a1 + 268) >= 6u) {
    unsigned int v13 = 6;
  }
  else {
    unsigned int v13 = *(_DWORD *)(a1 + 268);
  }
  if (v13 <= 4) {
    int v14 = 4;
  }
  else {
    int v14 = v13;
  }
  LODWORD(v16) = *a3;
  unsigned int v15 = a3[1];
  uint64_t v17 = *(void *)(a1 + 248);
  uint64_t v18 = *(unsigned int *)(v17 + 24);
  uint64_t v129 = *(void *)(v17 + 8);
  v125 = *(char **)v17;
  unsigned int v126 = (void *)(v9 + v10);
  unint64_t v120 = v129 + v18;
  if (a4 - (v9 + v10) - (v129 + v18) + *(void *)v17) {
    int v19 = a4;
  }
  else {
    int v19 = (void *)((char *)a4 + 1);
  }
  *(_DWORD *)(a1 + 300) = 0;
  uint64_t v20 = *(unsigned int *)(a1 + 44);
  int v21 = v8 - (v9 + v20);
  if ((v21 + 1) < 8) {
    int v22 = v21 + 1;
  }
  else {
    int v22 = 8;
  }
  unint64_t v133 = v8;
  if (v8 >= v9 + v20) {
    int v23 = v22;
  }
  else {
    int v23 = 0;
  }
  uint64_t v24 = (v23 + v20);
  if (v20 < v24)
  {
    uint64_t v25 = *(void *)(a1 + 112);
    uint64_t v26 = *(void *)(a1 + 56);
    int v27 = *(_DWORD *)(a1 + 52);
    uint64_t v28 = *(void *)(a1 + 96);
    char v29 = 56 - v27;
    char v30 = 24 - v27;
    do
    {
      if (v12 == 5)
      {
        unint64_t v31 = 0xCF1BBCDCBB000000 * *(void *)(v9 + v20);
      }
      else
      {
        if (v12 != 6)
        {
          LODWORD(v32) = ((-1640531535 * *(_DWORD *)(v9 + v20)) ^ v28) >> v30;
          goto LABEL_29;
        }
        unint64_t v31 = 0xCF1BBCDCBF9B0000 * *(void *)(v9 + v20);
      }
      unint64_t v32 = (v31 ^ v28) >> v29;
LABEL_29:
      uint64_t v33 = v32 >> 8 << v14;
      _X3 = v25 + 4 * v33;
      __asm { PRFM            #0, [X3] }
      if (v13 > 4)
      {
        __asm { PRFM            #0, [X3,#0x40] }
        _X1 = v26 + v33;
        __asm { PRFM            #0, [X1] }
        if (v14 == 6) {
          __asm { PRFM            #0, [X1,#0x20] }
        }
      }
      else
      {
        _X1 = v26 + v33;
        __asm { PRFM            #0, [X1] }
      }
      *(_DWORD *)(v7 + 4 * (v20++ & 7) + 64) = v32;
    }
    while (v24 != v20);
  }
  if ((unint64_t)v19 < v8)
  {
    unsigned int v121 = v13;
    uint64_t v119 = a3;
    unsigned int v123 = (char *)(v134 - 32);
    unsigned int v128 = v10 + v129 - v125;
    uint64_t v127 = v7;
    int v132 = v12;
    int v131 = v14;
    uint64_t v122 = a2;
    while (1)
    {
      int v46 = v19 - v9 - v16;
      uint64_t v47 = (v46 + 1);
      uint64_t v48 = v129 + v47 - v128;
      if (v47 >= v10) {
        uint64_t v48 = v9 + v47;
      }
      if ((v10 - v46 - 5) <= 0xFFFFFFFC && *(_DWORD *)v48 == *(_DWORD *)((char *)v19 + 1))
      {
        uint64_t v49 = v47 >= v10 ? (char *)v134 : v125;
        unint64_t v50 = sub_1DD2A6010((void *)((char *)v19 + 5), (char *)(v48 + 4), v134, v49, v126) + 4;
      }
      else
      {
        unint64_t v50 = 0;
      }
      uint64_t v135 = 999999999;
      if (v132 == 6)
      {
        if (v131 == 6) {
          unint64_t v51 = sub_1DD2C8B60(v7, v19, v134, &v135);
        }
        else {
          unint64_t v51 = v131 == 5 ? sub_1DD2C8490(v7, v19, v134, &v135) : sub_1DD2C7DE8(v7, v19, v134, &v135);
        }
      }
      else if (v132 == 5)
      {
        if (v131 == 6) {
          unint64_t v51 = sub_1DD2C7704(v7, v19, v134, &v135);
        }
        else {
          unint64_t v51 = v131 == 5 ? sub_1DD2C7034(v7, v19, v134, &v135) : sub_1DD2C698C(v7, v19, v134, &v135);
        }
      }
      else if (v131 == 6)
      {
        unint64_t v51 = sub_1DD2C62AC(v7, v19, v134, &v135);
      }
      else
      {
        unint64_t v51 = v131 == 5 ? sub_1DD2C5BE0(v7, v19, v134, &v135) : sub_1DD2C553C(v7, v19, v134, &v135);
      }
      unint64_t v52 = v51 <= v50 ? v50 : v51;
      if (v52 >= 4) {
        break;
      }
      unint64_t v53 = (unint64_t)v19 - v5;
      int v19 = (void *)((char *)v19 + (((unint64_t)v19 - v5) >> 8) + 1);
      uint64_t v7 = v127;
      *(_DWORD *)(v127 + 300) = v53 > 0x7FF;
LABEL_205:
      if ((unint64_t)v19 >= v133)
      {
        a3 = v119;
        goto LABEL_207;
      }
    }
    unsigned int v124 = v15;
    unsigned int v130 = v16;
    if (v51 <= v50) {
      unint64_t v54 = (_DWORD *)((char *)v19 + 1);
    }
    else {
      unint64_t v54 = v19;
    }
    if (v51 <= v50) {
      uint64_t v55 = 1;
    }
    else {
      uint64_t v55 = v135;
    }
    unint64_t v16 = v52;
    unint64_t v56 = v55;
    unint64_t v57 = v54;
    if ((unint64_t)v19 < v133)
    {
      while (1)
      {
        unint64_t v57 = (_DWORD *)((char *)v19 + 1);
        uint64_t v58 = v19 + 1 - v9 - v130;
        uint64_t v59 = v129 + v58 - v128;
        if (v58 >= v10) {
          uint64_t v59 = v9 + v58;
        }
        if ((v10 + ~v58) < 3)
        {
          int v60 = v132;
        }
        else
        {
          int v60 = v132;
          if (*(_DWORD *)v59 == *v57)
          {
            unint64_t v61 = v58 >= v10 ? (char *)v134 : v125;
            unint64_t v62 = sub_1DD2A6010((void *)((char *)v19 + 5), (char *)(v59 + 4), v134, v61, v126);
            if (v62 <= 0xFFFFFFFFFFFFFFFBLL && 3 * ((int)v62 + 4) > (int)(3 * v52 + __clz(v55) - 30))
            {
              unint64_t v52 = v62 + 4;
              uint64_t v55 = 1;
              unint64_t v54 = (_DWORD *)((char *)v19 + 1);
            }
          }
        }
        uint64_t v135 = 999999999;
        if (v60 == 6)
        {
          if (v131 == 6) {
            unint64_t v63 = sub_1DD2C8B60(v127, (void *)((char *)v19 + 1), v134, &v135);
          }
          else {
            unint64_t v63 = v131 == 5
          }
                ? sub_1DD2C8490(v127, (void *)((char *)v19 + 1), v134, &v135)
                : sub_1DD2C7DE8(v127, (void *)((char *)v19 + 1), v134, &v135);
        }
        else if (v60 == 5)
        {
          if (v131 == 6) {
            unint64_t v63 = sub_1DD2C7704(v127, (void *)((char *)v19 + 1), v134, &v135);
          }
          else {
            unint64_t v63 = v131 == 5
          }
                ? sub_1DD2C7034(v127, (void *)((char *)v19 + 1), v134, &v135)
                : sub_1DD2C698C(v127, (void *)((char *)v19 + 1), v134, &v135);
        }
        else if (v131 == 6)
        {
          unint64_t v63 = sub_1DD2C62AC(v127, (void *)((char *)v19 + 1), v134, &v135);
        }
        else
        {
          unint64_t v63 = v131 == 5
              ? sub_1DD2C5BE0(v127, (void *)((char *)v19 + 1), v134, &v135)
              : sub_1DD2C553C(v127, (void *)((char *)v19 + 1), v134, &v135);
        }
        unint64_t v16 = v63;
        if (v63 < 4 || (unint64_t v56 = v135, (int)(__clz(v135) + 4 * v63 - 31) <= (int)(__clz(v55) + 4 * v52 - 27)))
        {
          if ((unint64_t)v57 >= v133) {
            break;
          }
          unint64_t v57 = (_DWORD *)((char *)v19 + 2);
          uint64_t v64 = v19 + 2 - v9 - v130;
          uint64_t v65 = v129 + v64 - v128;
          if (v64 >= v10) {
            uint64_t v65 = v9 + v64;
          }
          if ((v10 + ~v64) < 3)
          {
            int v66 = v132;
          }
          else
          {
            int v66 = v132;
            if (*(_DWORD *)v65 == *v57)
            {
              unint64_t v67 = v64 >= v10 ? (char *)v134 : v125;
              unint64_t v68 = sub_1DD2A6010((void *)((char *)v19 + 6), (char *)(v65 + 4), v134, v67, v126);
              if (v68 <= 0xFFFFFFFFFFFFFFFBLL && (int)(__clz(v55) + 4 * v52 - 30) < 4 * ((int)v68 + 4))
              {
                unint64_t v52 = v68 + 4;
                uint64_t v55 = 1;
                unint64_t v54 = (_DWORD *)((char *)v19 + 2);
              }
            }
          }
          uint64_t v135 = 999999999;
          if (v66 == 6)
          {
            if (v131 == 6) {
              unint64_t v69 = sub_1DD2C8B60(v127, (void *)((char *)v19 + 2), v134, &v135);
            }
            else {
              unint64_t v69 = v131 == 5
            }
                  ? sub_1DD2C8490(v127, (void *)((char *)v19 + 2), v134, &v135)
                  : sub_1DD2C7DE8(v127, (void *)((char *)v19 + 2), v134, &v135);
          }
          else if (v66 == 5)
          {
            if (v131 == 6) {
              unint64_t v69 = sub_1DD2C7704(v127, (void *)((char *)v19 + 2), v134, &v135);
            }
            else {
              unint64_t v69 = v131 == 5
            }
                  ? sub_1DD2C7034(v127, (void *)((char *)v19 + 2), v134, &v135)
                  : sub_1DD2C698C(v127, (void *)((char *)v19 + 2), v134, &v135);
          }
          else if (v131 == 6)
          {
            unint64_t v69 = sub_1DD2C62AC(v127, (void *)((char *)v19 + 2), v134, &v135);
          }
          else
          {
            unint64_t v69 = v131 == 5
                ? sub_1DD2C5BE0(v127, (void *)((char *)v19 + 2), v134, &v135)
                : sub_1DD2C553C(v127, (void *)((char *)v19 + 2), v134, &v135);
          }
          unint64_t v16 = v69;
          if (v69 < 4) {
            break;
          }
          unint64_t v56 = v135;
          if ((int)(__clz(v135) + 4 * v69 - 31) <= (int)(__clz(v55) + 4 * v52 - 24)) {
            break;
          }
        }
        int v19 = v57;
        unint64_t v54 = v57;
        uint64_t v55 = v56;
        unint64_t v52 = v16;
        if ((unint64_t)v57 >= v133) {
          goto LABEL_138;
        }
      }
      unint64_t v16 = v52;
      unint64_t v56 = v55;
      unint64_t v57 = v54;
    }
LABEL_138:
    if (v56 <= 3)
    {
      uint64_t v7 = v127;
    }
    else
    {
      unint64_t v70 = v9 + v10;
      if (v10 > (int)v57 - ((int)v56 + (int)v9) + 3) {
        unint64_t v70 = v120;
      }
      uint64_t v71 = v129 - v128;
      if (v10 <= (int)v57 - ((int)v56 + (int)v9) + 3) {
        uint64_t v71 = v9;
      }
      if ((unint64_t)v57 <= v5 || v71 + (unint64_t)(v57 - (v56 + v9) + 3) <= v70)
      {
        uint64_t v7 = v127;
      }
      else
      {
        unint64_t v72 = (unsigned __int8 *)(v71 + (v57 - (v56 + v9) + 3) - 1);
        int v73 = (unsigned __int8 *)v57 - 1;
        uint64_t v7 = v127;
        while (*v73 == *v72)
        {
          ++v16;
          uint64_t v74 = v73 - 1;
          if ((unint64_t)v73 > v5)
          {
            --v73;
            if ((unint64_t)v72-- > v70) {
              continue;
            }
          }
          unint64_t v57 = v74 + 1;
          goto LABEL_153;
        }
        unint64_t v57 = v73 + 1;
      }
LABEL_153:
      unsigned int v124 = v130;
      unsigned int v130 = v56 - 3;
    }
    uint64_t v76 = (uint64_t)v57 - v5;
    unsigned int v77 = *(_OWORD **)(v122 + 24);
    if (v57 <= (_DWORD *)v123)
    {
      _OWORD *v77 = *(_OWORD *)v5;
      uint64_t v80 = *(void *)(v122 + 24);
      if ((unint64_t)v76 <= 0x10)
      {
        *(void *)(v122 + 24) = v80 + v76;
        uint64_t v78 = *(void *)(v122 + 8);
        goto LABEL_164;
      }
      *(_OWORD *)(v80 + 16) = *(_OWORD *)(v5 + 16);
      if (v76 >= 33)
      {
        unint64_t v81 = v80 + v76;
        unint64_t v82 = (_OWORD *)(v80 + 32);
        long long v83 = (long long *)(v5 + 48);
        do
        {
          *unint64_t v82 = *(v83 - 1);
          long long v84 = *v83;
          v83 += 2;
          v82[1] = v84;
          v82 += 2;
        }
        while ((unint64_t)v82 < v81);
      }
    }
    else
    {
      sub_1DD29DBFC(v77, (char *)v5, (unint64_t)v57, v123);
    }
    *(void *)(v122 + 24) += v76;
    uint64_t v78 = *(void *)(v122 + 8);
    if ((unint64_t)v76 >= 0x10000)
    {
      unint64_t v79 = (unint64_t)(v78 - *(void *)v122) >> 3;
      *(_DWORD *)(v122 + 72) = 1;
      *(_DWORD *)(v122 + 76) = v79;
    }
LABEL_164:
    *(_WORD *)(v78 + 4) = v76;
    *(_DWORD *)uint64_t v78 = v56;
    if (v16 - 3 >= 0x10000)
    {
      unint64_t v85 = (unint64_t)(v78 - *(void *)v122) >> 3;
      *(_DWORD *)(v122 + 72) = 2;
      *(_DWORD *)(v122 + 76) = v85;
    }
    *(_WORD *)(v78 + 6) = v16 - 3;
    *(void *)(v122 + 8) = v78 + 8;
    if (*(_DWORD *)(v7 + 300))
    {
      uint64_t v86 = *(unsigned int *)(v7 + 44);
      int v87 = v133 - (v9 + v86);
      if ((v87 + 1) < 8) {
        int v88 = v87 + 1;
      }
      else {
        int v88 = 8;
      }
      if (v133 >= v9 + v86) {
        int v89 = v88;
      }
      else {
        int v89 = 0;
      }
      uint64_t v90 = (v89 + v86);
      if (v86 < v90)
      {
        uint64_t v91 = *(void *)(v7 + 112);
        uint64_t v92 = *(void *)(v7 + 56);
        int v93 = *(_DWORD *)(v7 + 52);
        uint64_t v94 = *(void *)(v7 + 96);
        char v95 = 56 - v93;
        char v96 = 24 - v93;
        do
        {
          if (v132 == 5)
          {
            unint64_t v97 = 0xCF1BBCDCBB000000 * *(void *)(v9 + v86);
          }
          else
          {
            if (v132 != 6)
            {
              LODWORD(v98) = ((-1640531535 * *(_DWORD *)(v9 + v86)) ^ v94) >> v96;
              goto LABEL_181;
            }
            unint64_t v97 = 0xCF1BBCDCBF9B0000 * *(void *)(v9 + v86);
          }
          unint64_t v98 = (v97 ^ v94) >> v95;
LABEL_181:
          uint64_t v99 = v98 >> 8 << v131;
          _X17 = v91 + 4 * v99;
          __asm { PRFM            #0, [X17] }
          if (v121 > 4)
          {
            __asm { PRFM            #0, [X17,#0x40] }
            _X16 = v92 + v99;
            __asm { PRFM            #0, [X16] }
            if (v131 == 6) {
              __asm { PRFM            #0, [X16,#0x20] }
            }
          }
          else
          {
            _X16 = v92 + v99;
            __asm { PRFM            #0, [X16] }
          }
          *(_DWORD *)(v7 + 4 * (v86++ & 7) + 64) = v98;
        }
        while (v90 != v86);
      }
      *(_DWORD *)(v7 + 300) = 0;
    }
    unint64_t v5 = (unint64_t)v57 + v16;
    if ((unint64_t)v57 + v16 <= v133)
    {
      unint64_t v108 = v130;
      unint64_t v109 = v124;
      while (1)
      {
        unint64_t v16 = v109;
        unint64_t v109 = v108;
        uint64_t v110 = (v5 - v9 - v16);
        uint64_t v111 = v129 - v128;
        if (v110 >= v10) {
          uint64_t v111 = v9;
        }
        if ((v10 + ~v110) < 3) {
          break;
        }
        uint64_t v112 = v111 + v110;
        if (*(_DWORD *)v112 != *(_DWORD *)v5) {
          break;
        }
        if (v110 >= v10) {
          int v113 = (char *)v134;
        }
        else {
          int v113 = v125;
        }
        unint64_t v114 = sub_1DD2A6010((void *)(v5 + 4), (char *)(v112 + 4), v134, v113, v126);
        uint64_t v115 = *(_OWORD **)(v122 + 24);
        if (v5 <= (unint64_t)v123) {
          *uint64_t v115 = *(_OWORD *)v5;
        }
        else {
          sub_1DD29DBFC(v115, (char *)v5, v5, v123);
        }
        uint64_t v116 = *(void *)(v122 + 8);
        *(_WORD *)(v116 + 4) = 0;
        *(_DWORD *)uint64_t v116 = 1;
        if (v114 + 1 >= 0x10000)
        {
          unint64_t v117 = (unint64_t)(v116 - *(void *)v122) >> 3;
          *(_DWORD *)(v122 + 72) = 2;
          *(_DWORD *)(v122 + 76) = v117;
        }
        *(_WORD *)(v116 + 6) = v114 + 1;
        v5 += v114 + 4;
        *(void *)(v122 + 8) = v116 + 8;
        unint64_t v108 = v16;
        unsigned int v15 = v109;
        int v19 = (void *)v5;
        if (v5 > v133) {
          goto LABEL_205;
        }
      }
      unsigned int v15 = v16;
      LODWORD(v16) = v108;
      int v19 = (void *)v5;
    }
    else
    {
      int v19 = (void *)((char *)v57 + v16);
      LODWORD(v16) = v130;
      unsigned int v15 = v124;
    }
    goto LABEL_205;
  }
LABEL_207:
  *a3 = v16;
  a3[1] = v15;
  return v134 - v5;
}

unint64_t sub_1DD2B62B4(uint64_t a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  unint64_t v5 = a4;
  uint64_t v6 = a1;
  unint64_t v7 = a4 + a5;
  unint64_t v8 = a4 + a5 - 16;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v133 = *(unsigned int *)(a1 + 24);
  unsigned int v10 = *(_DWORD *)(a1 + 272);
  if (v10 >= 6) {
    unsigned int v10 = 6;
  }
  if (v10 <= 4) {
    int v11 = 4;
  }
  else {
    int v11 = v10;
  }
  if (*(_DWORD *)(v6 + 268) >= 6u) {
    unsigned int v12 = 6;
  }
  else {
    unsigned int v12 = *(_DWORD *)(v6 + 268);
  }
  if (v12 <= 4) {
    int v13 = 4;
  }
  else {
    int v13 = v12;
  }
  uint64_t v14 = *a3;
  unsigned int v124 = a3[1];
  uint64_t v15 = *(void *)(v6 + 248);
  uint64_t v129 = (void *)(v9 + v133);
  uint64_t v130 = *(void *)(v15 + 8);
  unint64_t v118 = v130 + *(unsigned int *)(v15 + 24);
  uint64_t v127 = *(char **)v15;
  if (a4 - (v9 + v133) - v118 + *(void *)v15) {
    unint64_t v16 = a4;
  }
  else {
    unint64_t v16 = a4 + 1;
  }
  *(_DWORD *)(v6 + 300) = 0;
  uint64_t v17 = *(unsigned int *)(v6 + 44);
  int v18 = v8 - (v9 + v17);
  if ((v18 + 1) < 8) {
    int v19 = v18 + 1;
  }
  else {
    int v19 = 8;
  }
  if (v8 >= v9 + v17) {
    int v20 = v19;
  }
  else {
    int v20 = 0;
  }
  uint64_t v21 = (v20 + v17);
  int v131 = v11;
  if (v17 < v21)
  {
    uint64_t v22 = *(void *)(v6 + 112);
    uint64_t v23 = *(void *)(v6 + 56);
    int v24 = *(_DWORD *)(v6 + 52);
    uint64_t v25 = *(void *)(v6 + 96);
    char v26 = 56 - v24;
    char v27 = 24 - v24;
    do
    {
      if (v11 == 5)
      {
        unint64_t v28 = 0xCF1BBCDCBB000000 * *(void *)(v9 + v17);
      }
      else
      {
        if (v11 != 6)
        {
          LODWORD(v29) = ((-1640531535 * *(_DWORD *)(v9 + v17)) ^ v25) >> v27;
          goto LABEL_29;
        }
        unint64_t v28 = 0xCF1BBCDCBF9B0000 * *(void *)(v9 + v17);
      }
      unint64_t v29 = (v28 ^ v25) >> v26;
LABEL_29:
      uint64_t v30 = v29 >> 8 << v13;
      _X2 = v22 + 4 * v30;
      __asm { PRFM            #0, [X2] }
      if (v12 > 4)
      {
        __asm { PRFM            #0, [X2,#0x40] }
        _X2 = v23 + v30;
        __asm { PRFM            #0, [X2] }
        if (v13 == 6) {
          __asm { PRFM            #0, [X2,#0x20] }
        }
      }
      else
      {
        _X2 = v23 + v30;
        __asm { PRFM            #0, [X2] }
      }
      *(_DWORD *)(v6 + 4 * (v17++ & 7) + 64) = v29;
      int v11 = v131;
    }
    while (v21 != v17);
  }
  if (v16 < v8)
  {
    unsigned int v126 = (char *)(v7 - 32);
    uint64_t v119 = v5 + a5 - 16;
    unsigned int v123 = v133 + v130 - v127;
    int v132 = v13;
    unint64_t v128 = v7;
    uint64_t v125 = v6;
    unint64_t v122 = v8;
    unsigned int v121 = v12;
    do
    {
      int v43 = v16 - v9 - v14;
      uint64_t v44 = (v43 + 1);
      uint64_t v45 = v130 + v44 - v123;
      if (v44 >= v133) {
        uint64_t v45 = v9 + v44;
      }
      if ((v133 - v43 - 5) <= 0xFFFFFFFC && *(_DWORD *)v45 == *(_DWORD *)(v16 + 1))
      {
        if (v44 >= v133) {
          int v46 = (char *)v7;
        }
        else {
          int v46 = v127;
        }
        unint64_t v47 = sub_1DD2A6010((void *)(v16 + 5), (char *)(v45 + 4), v7, v46, v129) + 4;
        int v11 = v131;
        int v13 = v132;
      }
      else
      {
        unint64_t v47 = 0;
      }
      *(void *)unint64_t v134 = 999999999;
      if (v11 == 6)
      {
        if (v13 == 6)
        {
          unint64_t v48 = sub_1DD2C8B60(v6, (void *)v16, v7, v134);
        }
        else if (v13 == 5)
        {
          unint64_t v48 = sub_1DD2C8490(v6, (void *)v16, v7, v134);
        }
        else
        {
          unint64_t v48 = sub_1DD2C7DE8(v6, (void *)v16, v7, v134);
        }
      }
      else if (v11 == 5)
      {
        if (v13 == 6)
        {
          unint64_t v48 = sub_1DD2C7704(v6, (void *)v16, v7, v134);
        }
        else if (v13 == 5)
        {
          unint64_t v48 = sub_1DD2C7034(v6, (void *)v16, v7, v134);
        }
        else
        {
          unint64_t v48 = sub_1DD2C698C(v6, (void *)v16, v7, v134);
        }
      }
      else if (v13 == 6)
      {
        unint64_t v48 = sub_1DD2C62AC(v6, (void *)v16, v7, v134);
      }
      else if (v13 == 5)
      {
        unint64_t v48 = sub_1DD2C5BE0(v6, (void *)v16, v7, v134);
      }
      else
      {
        unint64_t v48 = sub_1DD2C553C(v6, (void *)v16, v7, v134);
      }
      if (v48 <= v47) {
        unint64_t v49 = v47;
      }
      else {
        unint64_t v49 = v48;
      }
      if (v49 < 4)
      {
        unint64_t v50 = v16 - v5;
        v16 += ((v16 - v5) >> 8) + 1;
        *(_DWORD *)(v6 + 300) = v50 > 0x7FF;
        int v13 = v132;
        goto LABEL_159;
      }
      unint64_t v51 = v8;
      if (v48 <= v47) {
        unint64_t v52 = v16 + 1;
      }
      else {
        unint64_t v52 = v16;
      }
      if (v48 <= v47) {
        unint64_t v53 = 1;
      }
      else {
        unint64_t v53 = *(void *)v134;
      }
      if (v16 >= v51)
      {
        uint64_t v63 = a2;
        int v13 = v132;
      }
      else
      {
        uint64_t v54 = 0;
        unsigned int v55 = v133 + v9 - 2 + v14 - v16;
        int v13 = v132;
        while (1)
        {
          unint64_t v56 = (_DWORD *)(v16 + v54 + 1);
          uint64_t v57 = (v16 - v9 - v14 + v54 + 1);
          uint64_t v58 = v130 + (v127 - v133 - v130 - v9 + 1 + v16 - v14 + v54);
          if (v57 >= v133) {
            uint64_t v58 = v9 + v57;
          }
          if (v55 >= 3 && *(_DWORD *)v58 == *v56)
          {
            uint64_t v59 = v57 >= v133 ? (char *)v128 : v127;
            unint64_t v60 = sub_1DD2A6010((void *)(v16 + v54 + 5), (char *)(v58 + 4), v128, v59, v129);
            if (v60 > 0xFFFFFFFFFFFFFFFBLL)
            {
              int v61 = v131;
              int v13 = v132;
            }
            else
            {
              int v61 = v131;
              int v13 = v132;
              if (3 * ((int)v60 + 4) > (int)(3 * v49 + __clz(v53) - 30))
              {
                unint64_t v49 = v60 + 4;
                unint64_t v53 = 1;
                unint64_t v52 = v16 + v54 + 1;
              }
            }
          }
          else
          {
            int v61 = v131;
          }
          *(void *)unint64_t v134 = 999999999;
          if (v61 == 6)
          {
            if (v13 == 6) {
              unint64_t v62 = sub_1DD2C8B60(v125, (void *)(v16 + v54 + 1), v128, v134);
            }
            else {
              unint64_t v62 = v13 == 5
            }
                  ? sub_1DD2C8490(v125, (void *)(v16 + v54 + 1), v128, v134)
                  : sub_1DD2C7DE8(v125, (void *)(v16 + v54 + 1), v128, v134);
          }
          else if (v61 == 5)
          {
            if (v13 == 6) {
              unint64_t v62 = sub_1DD2C7704(v125, (void *)(v16 + v54 + 1), v128, v134);
            }
            else {
              unint64_t v62 = v13 == 5
            }
                  ? sub_1DD2C7034(v125, (void *)(v16 + v54 + 1), v128, v134)
                  : sub_1DD2C698C(v125, (void *)(v16 + v54 + 1), v128, v134);
          }
          else if (v13 == 6)
          {
            unint64_t v62 = sub_1DD2C62AC(v125, (void *)(v16 + v54 + 1), v128, v134);
          }
          else
          {
            unint64_t v62 = v13 == 5
                ? sub_1DD2C5BE0(v125, (void *)(v16 + v54 + 1), v128, v134)
                : sub_1DD2C553C(v125, (void *)(v16 + v54 + 1), v128, v134);
          }
          int v13 = v132;
          if (v62 < 4 || (int)(__clz(v134[0]) + 4 * v62 - 31) <= (int)(__clz(v53) + 4 * v49 - 27)) {
            break;
          }
          ++v54;
          --v55;
          unint64_t v52 = (unint64_t)v56;
          unint64_t v53 = *(void *)v134;
          unint64_t v49 = v62;
          if (v119 - v16 == v54)
          {
            unint64_t v49 = v62;
            unint64_t v53 = *(void *)v134;
            unint64_t v52 = v119;
            break;
          }
        }
        unint64_t v7 = v128;
        uint64_t v63 = a2;
      }
      uint64_t v64 = v126;
      unsigned int v65 = v124;
      if (v53 > 3)
      {
        unint64_t v66 = v9 + v133;
        if (v133 > (int)v52 - ((int)v53 + (int)v9) + 3) {
          unint64_t v66 = v118;
        }
        uint64_t v67 = v130 - v123;
        if (v133 <= (int)v52 - ((int)v53 + (int)v9) + 3) {
          uint64_t v67 = v9;
        }
        if (v52 > v5 && v67 + (unint64_t)(v52 - (v53 + v9) + 3) > v66)
        {
          unint64_t v68 = (unsigned __int8 *)(v67 + (v52 - (v53 + v9) + 3) - 1);
          unint64_t v69 = (unsigned __int8 *)(v52 - 1);
          while (*v69 == *v68)
          {
            ++v49;
            unint64_t v70 = v69 - 1;
            if ((unint64_t)v69 > v5)
            {
              --v69;
              if ((unint64_t)v68-- > v66) {
                continue;
              }
            }
            unint64_t v52 = (unint64_t)(v70 + 1);
            goto LABEL_123;
          }
          unint64_t v52 = (unint64_t)(v69 + 1);
        }
LABEL_123:
        uint64_t v64 = v126;
        unsigned int v65 = v14;
        uint64_t v14 = (v53 - 3);
      }
      uint64_t v72 = v52 - v5;
      int v73 = *(_OWORD **)(v63 + 24);
      unsigned int v124 = v65;
      if (v52 <= (unint64_t)v64)
      {
        _OWORD *v73 = *(_OWORD *)v5;
        uint64_t v77 = *(void *)(v63 + 24);
        if ((unint64_t)v72 <= 0x10)
        {
          *(void *)(v63 + 24) = v77 + v72;
          uint64_t v75 = *(void *)(v63 + 8);
          int v74 = v131;
          goto LABEL_134;
        }
        *(_OWORD *)(v77 + 16) = *(_OWORD *)(v5 + 16);
        int v74 = v131;
        if (v72 >= 33)
        {
          unint64_t v78 = v77 + v72;
          unint64_t v79 = (_OWORD *)(v77 + 32);
          uint64_t v80 = (long long *)(v5 + 48);
          do
          {
            *unint64_t v79 = *(v80 - 1);
            long long v81 = *v80;
            v80 += 2;
            v79[1] = v81;
            v79 += 2;
          }
          while ((unint64_t)v79 < v78);
        }
      }
      else
      {
        sub_1DD29DBFC(v73, (char *)v5, v52, v64);
        int v74 = v131;
        int v13 = v132;
      }
      *(void *)(v63 + 24) += v72;
      uint64_t v75 = *(void *)(v63 + 8);
      if ((unint64_t)v72 >= 0x10000)
      {
        unint64_t v76 = (unint64_t)(v75 - *(void *)v63) >> 3;
        *(_DWORD *)(v63 + 72) = 1;
        *(_DWORD *)(v63 + 76) = v76;
      }
LABEL_134:
      *(_WORD *)(v75 + 4) = v72;
      *(_DWORD *)uint64_t v75 = v53;
      if (v49 - 3 >= 0x10000)
      {
        unint64_t v82 = (unint64_t)(v75 - *(void *)v63) >> 3;
        *(_DWORD *)(v63 + 72) = 2;
        *(_DWORD *)(v63 + 76) = v82;
      }
      *(_WORD *)(v75 + 6) = v49 - 3;
      *(void *)(v63 + 8) = v75 + 8;
      uint64_t v6 = v125;
      if (*(_DWORD *)(v125 + 300))
      {
        uint64_t v83 = *(unsigned int *)(v125 + 44);
        int v84 = v122 - (v9 + v83);
        if ((v84 + 1) < 8) {
          int v85 = v84 + 1;
        }
        else {
          int v85 = 8;
        }
        if (v122 >= v9 + v83) {
          int v86 = v85;
        }
        else {
          int v86 = 0;
        }
        uint64_t v87 = (v86 + v83);
        if (v83 < v87)
        {
          uint64_t v88 = *(void *)(v125 + 112);
          uint64_t v89 = *(void *)(v125 + 56);
          int v90 = *(_DWORD *)(v125 + 52);
          uint64_t v91 = *(void *)(v125 + 96);
          char v92 = 56 - v90;
          char v93 = 24 - v90;
          do
          {
            if (v74 == 5)
            {
              unint64_t v94 = 0xCF1BBCDCBB000000 * *(void *)(v9 + v83);
            }
            else
            {
              if (v74 != 6)
              {
                LODWORD(v95) = ((-1640531535 * *(_DWORD *)(v9 + v83)) ^ v91) >> v93;
                goto LABEL_151;
              }
              unint64_t v94 = 0xCF1BBCDCBF9B0000 * *(void *)(v9 + v83);
            }
            unint64_t v95 = (v94 ^ v91) >> v92;
LABEL_151:
            uint64_t v96 = v95 >> 8 << v13;
            _X17 = v88 + 4 * v96;
            __asm { PRFM            #0, [X17] }
            if (v121 > 4)
            {
              __asm { PRFM            #0, [X17,#0x40] }
              _X16 = v89 + v96;
              __asm { PRFM            #0, [X16] }
              if (v13 == 6) {
                __asm { PRFM            #0, [X16,#0x20] }
              }
            }
            else
            {
              _X16 = v89 + v96;
              __asm { PRFM            #0, [X16] }
            }
            *(_DWORD *)(v125 + 4 * (v83++ & 7) + 64) = v95;
          }
          while (v87 != v83);
        }
        *(_DWORD *)(v125 + 300) = 0;
      }
      unint64_t v5 = v52 + v49;
      unint64_t v8 = v122;
      if (v5 <= v122)
      {
        uint64_t v106 = v14;
        uint64_t v107 = v124;
        while (1)
        {
          uint64_t v14 = v107;
          uint64_t v107 = v106;
          uint64_t v108 = (v5 - v9 - v14);
          uint64_t v109 = v130 - v123;
          if (v108 >= v133) {
            uint64_t v109 = v9;
          }
          if ((v133 + ~v108) < 3) {
            break;
          }
          uint64_t v110 = v109 + v108;
          if (*(_DWORD *)v110 != *(_DWORD *)v5) {
            break;
          }
          if (v108 >= v133) {
            uint64_t v111 = (char *)v7;
          }
          else {
            uint64_t v111 = v127;
          }
          unint64_t v112 = sub_1DD2A6010((void *)(v5 + 4), (char *)(v110 + 4), v7, v111, v129);
          int v113 = *(_OWORD **)(v63 + 24);
          if (v5 <= (unint64_t)v126) {
            *int v113 = *(_OWORD *)v5;
          }
          else {
            sub_1DD29DBFC(v113, (char *)v5, v5, v126);
          }
          int v13 = v132;
          uint64_t v114 = *(void *)(v63 + 8);
          *(_WORD *)(v114 + 4) = 0;
          *(_DWORD *)uint64_t v114 = 1;
          if (v112 + 1 >= 0x10000)
          {
            unint64_t v115 = (unint64_t)(v114 - *(void *)v63) >> 3;
            *(_DWORD *)(v63 + 72) = 2;
            *(_DWORD *)(v63 + 76) = v115;
          }
          *(_WORD *)(v114 + 6) = v112 + 1;
          v5 += v112 + 4;
          *(void *)(v63 + 8) = v114 + 8;
          uint64_t v106 = v14;
          unsigned int v105 = v107;
          unint64_t v16 = v5;
          if (v5 > v122) {
            goto LABEL_160;
          }
        }
        unsigned int v105 = v14;
        uint64_t v14 = v106;
        unint64_t v16 = v5;
        goto LABEL_160;
      }
      unint64_t v16 = v5;
LABEL_159:
      unsigned int v105 = v124;
LABEL_160:
      unsigned int v124 = v105;
      int v11 = v131;
    }
    while (v16 < v8);
  }
  *a3 = v14;
  a3[1] = v124;
  return v7 - v5;
}

unint64_t sub_1DD2B6D08(uint64_t a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  unint64_t v5 = a4;
  unint64_t v122 = a4 + a5;
  unint64_t v7 = a4 + a5 - 16;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(unsigned int *)(a1 + 24);
  unsigned int v10 = *(_DWORD *)(a1 + 272);
  if (v10 >= 6) {
    unsigned int v10 = 6;
  }
  if (v10 <= 4) {
    int v11 = 4;
  }
  else {
    int v11 = v10;
  }
  unsigned int v12 = *(_DWORD *)(a1 + 268);
  if (v12 >= 6) {
    unsigned int v12 = 6;
  }
  unsigned int v117 = v12;
  if (v12 <= 4) {
    int v13 = 4;
  }
  else {
    int v13 = v12;
  }
  uint64_t v14 = *a3;
  uint64_t v15 = a3[1];
  uint64_t v16 = *(void *)(a1 + 248);
  uint64_t v17 = *(unsigned int *)(v16 + 24);
  uint64_t v114 = *(void *)(v16 + 8);
  unint64_t v120 = (void *)(v8 + v9);
  unint64_t v112 = v114 + v17;
  uint64_t v119 = *(char **)v16;
  if (a4 - (v8 + v9) - (v114 + v17) + *(void *)v16) {
    unint64_t v18 = a4;
  }
  else {
    unint64_t v18 = a4 + 1;
  }
  *(_DWORD *)(a1 + 300) = 0;
  uint64_t v19 = *(unsigned int *)(a1 + 44);
  int v20 = v7 - (v8 + v19);
  if ((v20 + 1) < 8) {
    int v21 = v20 + 1;
  }
  else {
    int v21 = 8;
  }
  unint64_t v123 = a4 + a5 - 16;
  if (v7 >= v8 + v19) {
    int v22 = v21;
  }
  else {
    int v22 = 0;
  }
  uint64_t v23 = (v22 + v19);
  if (v19 < v23)
  {
    uint64_t v24 = *(void *)(a1 + 112);
    uint64_t v25 = *(void *)(a1 + 56);
    int v26 = *(_DWORD *)(a1 + 52);
    uint64_t v27 = *(void *)(a1 + 96);
    char v28 = 56 - v26;
    char v29 = 24 - v26;
    do
    {
      if (v11 == 5)
      {
        unint64_t v30 = 0xCF1BBCDCBB000000 * *(void *)(v8 + v19);
      }
      else
      {
        if (v11 != 6)
        {
          LODWORD(v31) = ((-1640531535 * *(_DWORD *)(v8 + v19)) ^ v27) >> v29;
          goto LABEL_28;
        }
        unint64_t v30 = 0xCF1BBCDCBF9B0000 * *(void *)(v8 + v19);
      }
      unint64_t v31 = (v30 ^ v27) >> v28;
LABEL_28:
      uint64_t v32 = v31 >> 8 << v13;
      _X2 = v24 + 4 * v32;
      __asm { PRFM            #0, [X2] }
      if (v117 > 4)
      {
        __asm { PRFM            #0, [X2,#0x40] }
        _X1 = v25 + v32;
        __asm { PRFM            #0, [X1] }
        if (v13 == 6) {
          __asm { PRFM            #0, [X1,#0x20] }
        }
      }
      else
      {
        _X1 = v25 + v32;
        __asm { PRFM            #0, [X1] }
      }
      *(_DWORD *)(a1 + 4 * (v19++ & 7) + 64) = v31;
    }
    while (v23 != v19);
  }
  if (v18 < v123)
  {
    unsigned int v121 = (char *)(v122 - 32);
    unsigned int v113 = v9 + v114 - v119;
    do
    {
      int v45 = v18 - v8 - v14;
      uint64_t v46 = (v45 + 1);
      uint64_t v47 = v114 + v46 - v113;
      if (v46 >= v9) {
        uint64_t v47 = v8 + v46;
      }
      if ((v9 - v45 - 5) <= 0xFFFFFFFC && *(_DWORD *)v47 == *(_DWORD *)(v18 + 1))
      {
        if (v46 >= v9) {
          unint64_t v48 = (char *)v122;
        }
        else {
          unint64_t v48 = v119;
        }
        unint64_t v49 = sub_1DD2A6010((void *)(v18 + 5), (char *)(v47 + 4), v122, v48, v120);
        unint64_t v50 = v18 + 1;
        unint64_t v51 = v49 + 4;
        LODWORD(v52) = 1;
LABEL_81:
        uint64_t v63 = (char *)(v122 - 32);
        goto LABEL_84;
      }
      uint64_t v124 = 999999999;
      if (v11 == 6)
      {
        if (v13 == 6)
        {
          unint64_t v53 = v18 + 1;
          unint64_t v54 = sub_1DD2C8B60(a1, (void *)v18, v122, &v124);
          goto LABEL_59;
        }
        if (v13 == 5)
        {
          unint64_t v53 = v18 + 1;
          unint64_t v54 = sub_1DD2C8490(a1, (void *)v18, v122, &v124);
          goto LABEL_59;
        }
        unint64_t v115 = v18 + 1;
        unint64_t v55 = sub_1DD2C7DE8(a1, (void *)v18, v122, &v124);
      }
      else if (v11 == 5)
      {
        if (v13 == 6)
        {
          unint64_t v53 = v18 + 1;
          unint64_t v54 = sub_1DD2C7704(a1, (void *)v18, v122, &v124);
          goto LABEL_59;
        }
        if (v13 == 5)
        {
          unint64_t v53 = v18 + 1;
          unint64_t v54 = sub_1DD2C7034(a1, (void *)v18, v122, &v124);
LABEL_59:
          unint64_t v50 = v53;
          unint64_t v51 = v54;
          goto LABEL_62;
        }
        unint64_t v115 = v18 + 1;
        unint64_t v55 = sub_1DD2C698C(a1, (void *)v18, v122, &v124);
      }
      else
      {
        if (v13 == 6)
        {
          unint64_t v53 = v18 + 1;
          unint64_t v54 = sub_1DD2C62AC(a1, (void *)v18, v122, &v124);
          goto LABEL_59;
        }
        if (v13 == 5)
        {
          unint64_t v53 = v18 + 1;
          unint64_t v54 = sub_1DD2C5BE0(a1, (void *)v18, v122, &v124);
          goto LABEL_59;
        }
        unint64_t v115 = v18 + 1;
        unint64_t v55 = sub_1DD2C553C(a1, (void *)v18, v122, &v124);
      }
      unint64_t v51 = v55;
      unint64_t v50 = v115;
LABEL_62:
      if (v51) {
        unint64_t v52 = v124;
      }
      else {
        unint64_t v52 = 1;
      }
      if (v51) {
        unint64_t v50 = v18;
      }
      if (v51 <= 3)
      {
        unint64_t v56 = v18 - v5;
        v18 += ((v18 - v5) >> 8) + 1;
        *(_DWORD *)(a1 + 300) = v56 > 0x7FF;
        continue;
      }
      if (v52 < 4) {
        goto LABEL_81;
      }
      unint64_t v57 = v8 + v9;
      if (v9 > (int)v50 - (int)v8 - (int)v52 + 3) {
        unint64_t v57 = v112;
      }
      uint64_t v58 = v114 - v113;
      if (v9 <= (int)v50 - (int)v8 - (int)v52 + 3) {
        uint64_t v58 = v8;
      }
      if (v50 > v5 && v58 + (unint64_t)(v50 - v8 - v52 + 3) > v57)
      {
        uint64_t v59 = (unsigned __int8 *)(v58 + (v50 - v8 - v52 + 3) - 1);
        unint64_t v60 = (unsigned __int8 *)(v50 - 1);
        while (*v60 == *v59)
        {
          ++v51;
          int v61 = v60 - 1;
          if ((unint64_t)v60 > v5)
          {
            --v60;
            if ((unint64_t)v59-- > v57) {
              continue;
            }
          }
          unint64_t v50 = (unint64_t)(v61 + 1);
          goto LABEL_83;
        }
        unint64_t v50 = (unint64_t)(v60 + 1);
      }
LABEL_83:
      uint64_t v63 = (char *)(v122 - 32);
      uint64_t v15 = v14;
      uint64_t v14 = (v52 - 3);
LABEL_84:
      uint64_t v64 = v50 - v5;
      unsigned int v65 = *(_OWORD **)(a2 + 24);
      if (v50 > (unint64_t)v63)
      {
        unint64_t v66 = (char *)v5;
        unint64_t v116 = v50;
        int v67 = v52;
        sub_1DD29DBFC(v65, v66, v50, v63);
        LODWORD(v52) = v67;
        uint64_t v68 = a1;
LABEL_90:
        *(void *)(a2 + 24) += v64;
        uint64_t v74 = *(void *)(a2 + 8);
        unsigned int v75 = v117;
        if ((unint64_t)v64 >= 0x10000)
        {
          unint64_t v76 = (unint64_t)(v74 - *(void *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 1;
          *(_DWORD *)(a2 + 76) = v76;
        }
        unint64_t v50 = v116;
        goto LABEL_94;
      }
      *unsigned int v65 = *(_OWORD *)v5;
      uint64_t v69 = *(void *)(a2 + 24);
      if ((unint64_t)v64 > 0x10)
      {
        unint64_t v116 = v50;
        *(_OWORD *)(v69 + 16) = *(_OWORD *)(v5 + 16);
        uint64_t v68 = a1;
        if (v64 >= 33)
        {
          unint64_t v70 = v69 + v64;
          uint64_t v71 = (_OWORD *)(v69 + 32);
          uint64_t v72 = (long long *)(v5 + 48);
          do
          {
            _OWORD *v71 = *(v72 - 1);
            long long v73 = *v72;
            v72 += 2;
            v71[1] = v73;
            v71 += 2;
          }
          while ((unint64_t)v71 < v70);
        }
        goto LABEL_90;
      }
      *(void *)(a2 + 24) = v69 + v64;
      uint64_t v74 = *(void *)(a2 + 8);
      uint64_t v68 = a1;
      unsigned int v75 = v117;
LABEL_94:
      *(_WORD *)(v74 + 4) = v64;
      *(_DWORD *)uint64_t v74 = v52;
      if (v51 - 3 >= 0x10000)
      {
        unint64_t v77 = (unint64_t)(v74 - *(void *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 2;
        *(_DWORD *)(a2 + 76) = v77;
      }
      *(_WORD *)(v74 + 6) = v51 - 3;
      *(void *)(a2 + 8) = v74 + 8;
      if (*(_DWORD *)(v68 + 300))
      {
        uint64_t v78 = *(unsigned int *)(v68 + 44);
        int v79 = v123 - (v8 + v78);
        if ((v79 + 1) < 8) {
          int v80 = v79 + 1;
        }
        else {
          int v80 = 8;
        }
        if (v123 >= v8 + v78) {
          int v81 = v80;
        }
        else {
          int v81 = 0;
        }
        uint64_t v82 = (v81 + v78);
        if (v78 < v82)
        {
          uint64_t v83 = *(void *)(v68 + 112);
          uint64_t v84 = *(void *)(v68 + 56);
          int v85 = *(_DWORD *)(v68 + 52);
          uint64_t v86 = *(void *)(v68 + 96);
          char v87 = 56 - v85;
          char v88 = 24 - v85;
          do
          {
            if (v11 == 5)
            {
              unint64_t v89 = 0xCF1BBCDCBB000000 * *(void *)(v8 + v78);
            }
            else
            {
              if (v11 != 6)
              {
                LODWORD(v90) = ((-1640531535 * *(_DWORD *)(v8 + v78)) ^ v86) >> v88;
                goto LABEL_111;
              }
              unint64_t v89 = 0xCF1BBCDCBF9B0000 * *(void *)(v8 + v78);
            }
            unint64_t v90 = (v89 ^ v86) >> v87;
LABEL_111:
            uint64_t v91 = v90 >> 8 << v13;
            _X17 = v83 + 4 * v91;
            __asm { PRFM            #0, [X17] }
            if (v75 > 4)
            {
              __asm { PRFM            #0, [X17,#0x40] }
              _X16 = v84 + v91;
              __asm { PRFM            #0, [X16] }
              if (v13 == 6) {
                __asm { PRFM            #0, [X16,#0x20] }
              }
            }
            else
            {
              _X16 = v84 + v91;
              __asm { PRFM            #0, [X16] }
            }
            *(_DWORD *)(v68 + 4 * (v78++ & 7) + 64) = v90;
          }
          while (v82 != v78);
        }
        *(_DWORD *)(v68 + 300) = 0;
      }
      unint64_t v5 = v50 + v51;
      if (v50 + v51 <= v123)
      {
        uint64_t v100 = v14;
        uint64_t v101 = v15;
        while (1)
        {
          uint64_t v14 = v101;
          uint64_t v101 = v100;
          uint64_t v102 = (v5 - v8 - v14);
          uint64_t v103 = v114 - v113;
          if (v102 >= v9) {
            uint64_t v103 = v8;
          }
          if ((v9 + ~v102) < 3) {
            break;
          }
          uint64_t v104 = v103 + v102;
          if (*(_DWORD *)v104 != *(_DWORD *)v5) {
            break;
          }
          if (v102 >= v9) {
            unsigned int v105 = (char *)v122;
          }
          else {
            unsigned int v105 = v119;
          }
          unint64_t v106 = sub_1DD2A6010((void *)(v5 + 4), (char *)(v104 + 4), v122, v105, v120);
          uint64_t v107 = *(_OWORD **)(a2 + 24);
          if (v5 <= (unint64_t)v121) {
            *uint64_t v107 = *(_OWORD *)v5;
          }
          else {
            sub_1DD29DBFC(v107, (char *)v5, v5, v121);
          }
          uint64_t v108 = *(void *)(a2 + 8);
          *(_WORD *)(v108 + 4) = 0;
          *(_DWORD *)uint64_t v108 = 1;
          if (v106 + 1 >= 0x10000)
          {
            unint64_t v109 = (unint64_t)(v108 - *(void *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 2;
            *(_DWORD *)(a2 + 76) = v109;
          }
          *(_WORD *)(v108 + 6) = v106 + 1;
          v5 += v106 + 4;
          *(void *)(a2 + 8) = v108 + 8;
          uint64_t v100 = v14;
          uint64_t v15 = v101;
          unint64_t v18 = v5;
          if (v5 > v123) {
            goto LABEL_135;
          }
        }
        uint64_t v15 = v14;
        uint64_t v14 = v100;
      }
      unint64_t v18 = v5;
LABEL_135:
      ;
    }
    while (v18 < v123);
  }
  *a3 = v14;
  a3[1] = v15;
  return v122 - v5;
}

unint64_t sub_1DD2B7514(uint64_t a1, uint64_t a2, _DWORD *a3, void *a4, uint64_t a5)
{
  unint64_t v5 = (unint64_t)a4;
  uint64_t v7 = a1;
  unint64_t v134 = (unint64_t)a4 + a5;
  unint64_t v8 = (unint64_t)a4 + a5 - 16;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(unsigned int *)(a1 + 24);
  unsigned int v11 = *(_DWORD *)(a1 + 272);
  if (v11 >= 6) {
    unsigned int v11 = 6;
  }
  if (v11 <= 4) {
    int v12 = 4;
  }
  else {
    int v12 = v11;
  }
  if (*(_DWORD *)(a1 + 268) >= 6u) {
    unsigned int v13 = 6;
  }
  else {
    unsigned int v13 = *(_DWORD *)(a1 + 268);
  }
  if (v13 <= 4) {
    int v14 = 4;
  }
  else {
    int v14 = v13;
  }
  LODWORD(v16) = *a3;
  unsigned int v15 = a3[1];
  uint64_t v17 = *(void *)(a1 + 248);
  uint64_t v18 = *(unsigned int *)(v17 + 24);
  uint64_t v129 = *(void *)(v17 + 8);
  uint64_t v125 = *(char **)v17;
  unsigned int v126 = (void *)(v9 + v10);
  unint64_t v120 = v129 + v18;
  if (a4 - (v9 + v10) - (v129 + v18) + *(void *)v17) {
    uint64_t v19 = a4;
  }
  else {
    uint64_t v19 = (void *)((char *)a4 + 1);
  }
  *(_DWORD *)(a1 + 300) = 0;
  uint64_t v20 = *(unsigned int *)(a1 + 44);
  int v21 = v8 - (v9 + v20);
  if ((v21 + 1) < 8) {
    int v22 = v21 + 1;
  }
  else {
    int v22 = 8;
  }
  unint64_t v133 = v8;
  if (v8 >= v9 + v20) {
    int v23 = v22;
  }
  else {
    int v23 = 0;
  }
  uint64_t v24 = (v23 + v20);
  if (v20 < v24)
  {
    uint64_t v25 = *(void *)(a1 + 112);
    uint64_t v26 = *(void *)(a1 + 56);
    int v27 = *(_DWORD *)(a1 + 52);
    uint64_t v28 = *(void *)(a1 + 96);
    char v29 = 56 - v27;
    char v30 = 24 - v27;
    do
    {
      if (v12 == 5)
      {
        unint64_t v31 = 0xCF1BBCDCBB000000 * *(void *)(v9 + v20);
      }
      else
      {
        if (v12 != 6)
        {
          LODWORD(v32) = ((-1640531535 * *(_DWORD *)(v9 + v20)) ^ v28) >> v30;
          goto LABEL_29;
        }
        unint64_t v31 = 0xCF1BBCDCBF9B0000 * *(void *)(v9 + v20);
      }
      unint64_t v32 = (v31 ^ v28) >> v29;
LABEL_29:
      uint64_t v33 = v32 >> 8 << v14;
      _X3 = v25 + 4 * v33;
      __asm { PRFM            #0, [X3] }
      if (v13 > 4)
      {
        __asm { PRFM            #0, [X3,#0x40] }
        _X1 = v26 + v33;
        __asm { PRFM            #0, [X1] }
        if (v14 == 6) {
          __asm { PRFM            #0, [X1,#0x20] }
        }
      }
      else
      {
        _X1 = v26 + v33;
        __asm { PRFM            #0, [X1] }
      }
      *(_DWORD *)(v7 + 4 * (v20++ & 7) + 64) = v32;
    }
    while (v24 != v20);
  }
  if ((unint64_t)v19 < v8)
  {
    unsigned int v121 = v13;
    uint64_t v119 = a3;
    unint64_t v123 = (char *)(v134 - 32);
    unsigned int v128 = v10 + v129 - v125;
    uint64_t v127 = v7;
    int v132 = v12;
    int v131 = v14;
    uint64_t v122 = a2;
    while (1)
    {
      int v46 = v19 - v9 - v16;
      uint64_t v47 = (v46 + 1);
      uint64_t v48 = v129 + v47 - v128;
      if (v47 >= v10) {
        uint64_t v48 = v9 + v47;
      }
      if ((v10 - v46 - 5) <= 0xFFFFFFFC && *(_DWORD *)v48 == *(_DWORD *)((char *)v19 + 1))
      {
        unint64_t v49 = v47 >= v10 ? (char *)v134 : v125;
        unint64_t v50 = sub_1DD2A6010((void *)((char *)v19 + 5), (char *)(v48 + 4), v134, v49, v126) + 4;
      }
      else
      {
        unint64_t v50 = 0;
      }
      uint64_t v135 = 999999999;
      if (v132 == 6)
      {
        if (v131 == 6) {
          unint64_t v51 = sub_1DD2CDAC8(v7, v19, v134, &v135);
        }
        else {
          unint64_t v51 = v131 == 5 ? sub_1DD2CD354(v7, v19, v134, &v135) : sub_1DD2CCBF8(v7, v19, v134, &v135);
        }
      }
      else if (v132 == 5)
      {
        if (v131 == 6) {
          unint64_t v51 = sub_1DD2CC478(v7, v19, v134, &v135);
        }
        else {
          unint64_t v51 = v131 == 5 ? sub_1DD2CBD04(v7, v19, v134, &v135) : sub_1DD2CB5A8(v7, v19, v134, &v135);
        }
      }
      else if (v131 == 6)
      {
        unint64_t v51 = sub_1DD2CAE2C(v7, v19, v134, &v135);
      }
      else
      {
        unint64_t v51 = v131 == 5 ? sub_1DD2CA6BC(v7, v19, v134, &v135) : sub_1DD2C9F64(v7, v19, v134, &v135);
      }
      unint64_t v52 = v51 <= v50 ? v50 : v51;
      if (v52 >= 4) {
        break;
      }
      unint64_t v53 = (unint64_t)v19 - v5;
      uint64_t v19 = (void *)((char *)v19 + (((unint64_t)v19 - v5) >> 8) + 1);
      uint64_t v7 = v127;
      *(_DWORD *)(v127 + 300) = v53 > 0x7FF;
LABEL_205:
      if ((unint64_t)v19 >= v133)
      {
        a3 = v119;
        goto LABEL_207;
      }
    }
    unsigned int v124 = v15;
    unsigned int v130 = v16;
    if (v51 <= v50) {
      unint64_t v54 = (_DWORD *)((char *)v19 + 1);
    }
    else {
      unint64_t v54 = v19;
    }
    if (v51 <= v50) {
      uint64_t v55 = 1;
    }
    else {
      uint64_t v55 = v135;
    }
    unint64_t v16 = v52;
    unint64_t v56 = v55;
    unint64_t v57 = v54;
    if ((unint64_t)v19 < v133)
    {
      while (1)
      {
        unint64_t v57 = (_DWORD *)((char *)v19 + 1);
        uint64_t v58 = v19 + 1 - v9 - v130;
        uint64_t v59 = v129 + v58 - v128;
        if (v58 >= v10) {
          uint64_t v59 = v9 + v58;
        }
        if ((v10 + ~v58) < 3)
        {
          int v60 = v132;
        }
        else
        {
          int v60 = v132;
          if (*(_DWORD *)v59 == *v57)
          {
            int v61 = v58 >= v10 ? (char *)v134 : v125;
            unint64_t v62 = sub_1DD2A6010((void *)((char *)v19 + 5), (char *)(v59 + 4), v134, v61, v126);
            if (v62 <= 0xFFFFFFFFFFFFFFFBLL && 3 * ((int)v62 + 4) > (int)(3 * v52 + __clz(v55) - 30))
            {
              unint64_t v52 = v62 + 4;
              uint64_t v55 = 1;
              unint64_t v54 = (_DWORD *)((char *)v19 + 1);
            }
          }
        }
        uint64_t v135 = 999999999;
        if (v60 == 6)
        {
          if (v131 == 6) {
            unint64_t v63 = sub_1DD2CDAC8(v127, (void *)((char *)v19 + 1), v134, &v135);
          }
          else {
            unint64_t v63 = v131 == 5
          }
                ? sub_1DD2CD354(v127, (void *)((char *)v19 + 1), v134, &v135)
                : sub_1DD2CCBF8(v127, (void *)((char *)v19 + 1), v134, &v135);
        }
        else if (v60 == 5)
        {
          if (v131 == 6) {
            unint64_t v63 = sub_1DD2CC478(v127, (void *)((char *)v19 + 1), v134, &v135);
          }
          else {
            unint64_t v63 = v131 == 5
          }
                ? sub_1DD2CBD04(v127, (void *)((char *)v19 + 1), v134, &v135)
                : sub_1DD2CB5A8(v127, (void *)((char *)v19 + 1), v134, &v135);
        }
        else if (v131 == 6)
        {
          unint64_t v63 = sub_1DD2CAE2C(v127, (void *)((char *)v19 + 1), v134, &v135);
        }
        else
        {
          unint64_t v63 = v131 == 5
              ? sub_1DD2CA6BC(v127, (void *)((char *)v19 + 1), v134, &v135)
              : sub_1DD2C9F64(v127, (void *)((char *)v19 + 1), v134, &v135);
        }
        unint64_t v16 = v63;
        if (v63 < 4 || (unint64_t v56 = v135, (int)(__clz(v135) + 4 * v63 - 31) <= (int)(__clz(v55) + 4 * v52 - 27)))
        {
          if ((unint64_t)v57 >= v133) {
            break;
          }
          unint64_t v57 = (_DWORD *)((char *)v19 + 2);
          uint64_t v64 = v19 + 2 - v9 - v130;
          uint64_t v65 = v129 + v64 - v128;
          if (v64 >= v10) {
            uint64_t v65 = v9 + v64;
          }
          if ((v10 + ~v64) < 3)
          {
            int v66 = v132;
          }
          else
          {
            int v66 = v132;
            if (*(_DWORD *)v65 == *v57)
            {
              int v67 = v64 >= v10 ? (char *)v134 : v125;
              unint64_t v68 = sub_1DD2A6010((void *)((char *)v19 + 6), (char *)(v65 + 4), v134, v67, v126);
              if (v68 <= 0xFFFFFFFFFFFFFFFBLL && (int)(__clz(v55) + 4 * v52 - 30) < 4 * ((int)v68 + 4))
              {
                unint64_t v52 = v68 + 4;
                uint64_t v55 = 1;
                unint64_t v54 = (_DWORD *)((char *)v19 + 2);
              }
            }
          }
          uint64_t v135 = 999999999;
          if (v66 == 6)
          {
            if (v131 == 6) {
              unint64_t v69 = sub_1DD2CDAC8(v127, (void *)((char *)v19 + 2), v134, &v135);
            }
            else {
              unint64_t v69 = v131 == 5
            }
                  ? sub_1DD2CD354(v127, (void *)((char *)v19 + 2), v134, &v135)
                  : sub_1DD2CCBF8(v127, (void *)((char *)v19 + 2), v134, &v135);
          }
          else if (v66 == 5)
          {
            if (v131 == 6) {
              unint64_t v69 = sub_1DD2CC478(v127, (void *)((char *)v19 + 2), v134, &v135);
            }
            else {
              unint64_t v69 = v131 == 5
            }
                  ? sub_1DD2CBD04(v127, (void *)((char *)v19 + 2), v134, &v135)
                  : sub_1DD2CB5A8(v127, (void *)((char *)v19 + 2), v134, &v135);
          }
          else if (v131 == 6)
          {
            unint64_t v69 = sub_1DD2CAE2C(v127, (void *)((char *)v19 + 2), v134, &v135);
          }
          else
          {
            unint64_t v69 = v131 == 5
                ? sub_1DD2CA6BC(v127, (void *)((char *)v19 + 2), v134, &v135)
                : sub_1DD2C9F64(v127, (void *)((char *)v19 + 2), v134, &v135);
          }
          unint64_t v16 = v69;
          if (v69 < 4) {
            break;
          }
          unint64_t v56 = v135;
          if ((int)(__clz(v135) + 4 * v69 - 31) <= (int)(__clz(v55) + 4 * v52 - 24)) {
            break;
          }
        }
        uint64_t v19 = v57;
        unint64_t v54 = v57;
        uint64_t v55 = v56;
        unint64_t v52 = v16;
        if ((unint64_t)v57 >= v133) {
          goto LABEL_138;
        }
      }
      unint64_t v16 = v52;
      unint64_t v56 = v55;
      unint64_t v57 = v54;
    }
LABEL_138:
    if (v56 <= 3)
    {
      uint64_t v7 = v127;
    }
    else
    {
      unint64_t v70 = v9 + v10;
      if (v10 > (int)v57 - ((int)v56 + (int)v9) + 3) {
        unint64_t v70 = v120;
      }
      uint64_t v71 = v129 - v128;
      if (v10 <= (int)v57 - ((int)v56 + (int)v9) + 3) {
        uint64_t v71 = v9;
      }
      if ((unint64_t)v57 <= v5 || v71 + (unint64_t)(v57 - (v56 + v9) + 3) <= v70)
      {
        uint64_t v7 = v127;
      }
      else
      {
        uint64_t v72 = (unsigned __int8 *)(v71 + (v57 - (v56 + v9) + 3) - 1);
        long long v73 = (unsigned __int8 *)v57 - 1;
        uint64_t v7 = v127;
        while (*v73 == *v72)
        {
          ++v16;
          uint64_t v74 = v73 - 1;
          if ((unint64_t)v73 > v5)
          {
            --v73;
            if ((unint64_t)v72-- > v70) {
              continue;
            }
          }
          unint64_t v57 = v74 + 1;
          goto LABEL_153;
        }
        unint64_t v57 = v73 + 1;
      }
LABEL_153:
      unsigned int v124 = v130;
      unsigned int v130 = v56 - 3;
    }
    uint64_t v76 = (uint64_t)v57 - v5;
    unint64_t v77 = *(_OWORD **)(v122 + 24);
    if (v57 <= (_DWORD *)v123)
    {
      _OWORD *v77 = *(_OWORD *)v5;
      uint64_t v80 = *(void *)(v122 + 24);
      if ((unint64_t)v76 <= 0x10)
      {
        *(void *)(v122 + 24) = v80 + v76;
        uint64_t v78 = *(void *)(v122 + 8);
        goto LABEL_164;
      }
      *(_OWORD *)(v80 + 16) = *(_OWORD *)(v5 + 16);
      if (v76 >= 33)
      {
        unint64_t v81 = v80 + v76;
        uint64_t v82 = (_OWORD *)(v80 + 32);
        uint64_t v83 = (long long *)(v5 + 48);
        do
        {
          *uint64_t v82 = *(v83 - 1);
          long long v84 = *v83;
          v83 += 2;
          v82[1] = v84;
          v82 += 2;
        }
        while ((unint64_t)v82 < v81);
      }
    }
    else
    {
      sub_1DD29DBFC(v77, (char *)v5, (unint64_t)v57, v123);
    }
    *(void *)(v122 + 24) += v76;
    uint64_t v78 = *(void *)(v122 + 8);
    if ((unint64_t)v76 >= 0x10000)
    {
      unint64_t v79 = (unint64_t)(v78 - *(void *)v122) >> 3;
      *(_DWORD *)(v122 + 72) = 1;
      *(_DWORD *)(v122 + 76) = v79;
    }
LABEL_164:
    *(_WORD *)(v78 + 4) = v76;
    *(_DWORD *)uint64_t v78 = v56;
    if (v16 - 3 >= 0x10000)
    {
      unint64_t v85 = (unint64_t)(v78 - *(void *)v122) >> 3;
      *(_DWORD *)(v122 + 72) = 2;
      *(_DWORD *)(v122 + 76) = v85;
    }
    *(_WORD *)(v78 + 6) = v16 - 3;
    *(void *)(v122 + 8) = v78 + 8;
    if (*(_DWORD *)(v7 + 300))
    {
      uint64_t v86 = *(unsigned int *)(v7 + 44);
      int v87 = v133 - (v9 + v86);
      if ((v87 + 1) < 8) {
        int v88 = v87 + 1;
      }
      else {
        int v88 = 8;
      }
      if (v133 >= v9 + v86) {
        int v89 = v88;
      }
      else {
        int v89 = 0;
      }
      uint64_t v90 = (v89 + v86);
      if (v86 < v90)
      {
        uint64_t v91 = *(void *)(v7 + 112);
        uint64_t v92 = *(void *)(v7 + 56);
        int v93 = *(_DWORD *)(v7 + 52);
        uint64_t v94 = *(void *)(v7 + 96);
        char v95 = 56 - v93;
        char v96 = 24 - v93;
        do
        {
          if (v132 == 5)
          {
            unint64_t v97 = 0xCF1BBCDCBB000000 * *(void *)(v9 + v86);
          }
          else
          {
            if (v132 != 6)
            {
              LODWORD(v98) = ((-1640531535 * *(_DWORD *)(v9 + v86)) ^ v94) >> v96;
              goto LABEL_181;
            }
            unint64_t v97 = 0xCF1BBCDCBF9B0000 * *(void *)(v9 + v86);
          }
          unint64_t v98 = (v97 ^ v94) >> v95;
LABEL_181:
          uint64_t v99 = v98 >> 8 << v131;
          _X17 = v91 + 4 * v99;
          __asm { PRFM            #0, [X17] }
          if (v121 > 4)
          {
            __asm { PRFM            #0, [X17,#0x40] }
            _X16 = v92 + v99;
            __asm { PRFM            #0, [X16] }
            if (v131 == 6) {
              __asm { PRFM            #0, [X16,#0x20] }
            }
          }
          else
          {
            _X16 = v92 + v99;
            __asm { PRFM            #0, [X16] }
          }
          *(_DWORD *)(v7 + 4 * (v86++ & 7) + 64) = v98;
        }
        while (v90 != v86);
      }
      *(_DWORD *)(v7 + 300) = 0;
    }
    unint64_t v5 = (unint64_t)v57 + v16;
    if ((unint64_t)v57 + v16 <= v133)
    {
      unint64_t v108 = v130;
      unint64_t v109 = v124;
      while (1)
      {
        unint64_t v16 = v109;
        unint64_t v109 = v108;
        uint64_t v110 = (v5 - v9 - v16);
        uint64_t v111 = v129 - v128;
        if (v110 >= v10) {
          uint64_t v111 = v9;
        }
        if ((v10 + ~v110) < 3) {
          break;
        }
        uint64_t v112 = v111 + v110;
        if (*(_DWORD *)v112 != *(_DWORD *)v5) {
          break;
        }
        if (v110 >= v10) {
          unsigned int v113 = (char *)v134;
        }
        else {
          unsigned int v113 = v125;
        }
        unint64_t v114 = sub_1DD2A6010((void *)(v5 + 4), (char *)(v112 + 4), v134, v113, v126);
        unint64_t v115 = *(_OWORD **)(v122 + 24);
        if (v5 <= (unint64_t)v123) {
          *unint64_t v115 = *(_OWORD *)v5;
        }
        else {
          sub_1DD29DBFC(v115, (char *)v5, v5, v123);
        }
        uint64_t v116 = *(void *)(v122 + 8);
        *(_WORD *)(v116 + 4) = 0;
        *(_DWORD *)uint64_t v116 = 1;
        if (v114 + 1 >= 0x10000)
        {
          unint64_t v117 = (unint64_t)(v116 - *(void *)v122) >> 3;
          *(_DWORD *)(v122 + 72) = 2;
          *(_DWORD *)(v122 + 76) = v117;
        }
        *(_WORD *)(v116 + 6) = v114 + 1;
        v5 += v114 + 4;
        *(void *)(v122 + 8) = v116 + 8;
        unint64_t v108 = v16;
        unsigned int v15 = v109;
        uint64_t v19 = (void *)v5;
        if (v5 > v133) {
          goto LABEL_205;
        }
      }
      unsigned int v15 = v16;
      LODWORD(v16) = v108;
      uint64_t v19 = (void *)v5;
    }
    else
    {
      uint64_t v19 = (void *)((char *)v57 + v16);
      LODWORD(v16) = v130;
      unsigned int v15 = v124;
    }
    goto LABEL_205;
  }
LABEL_207:
  *a3 = v16;
  a3[1] = v15;
  return v134 - v5;
}

unint64_t sub_1DD2B8108(uint64_t a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  unint64_t v5 = a4;
  uint64_t v6 = a1;
  unint64_t v7 = a4 + a5;
  unint64_t v8 = a4 + a5 - 16;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v133 = *(unsigned int *)(a1 + 24);
  unsigned int v10 = *(_DWORD *)(a1 + 272);
  if (v10 >= 6) {
    unsigned int v10 = 6;
  }
  if (v10 <= 4) {
    int v11 = 4;
  }
  else {
    int v11 = v10;
  }
  if (*(_DWORD *)(v6 + 268) >= 6u) {
    unsigned int v12 = 6;
  }
  else {
    unsigned int v12 = *(_DWORD *)(v6 + 268);
  }
  if (v12 <= 4) {
    int v13 = 4;
  }
  else {
    int v13 = v12;
  }
  uint64_t v14 = *a3;
  unsigned int v124 = a3[1];
  uint64_t v15 = *(void *)(v6 + 248);
  uint64_t v129 = (void *)(v9 + v133);
  uint64_t v130 = *(void *)(v15 + 8);
  unint64_t v118 = v130 + *(unsigned int *)(v15 + 24);
  uint64_t v127 = *(char **)v15;
  if (a4 - (v9 + v133) - v118 + *(void *)v15) {
    unint64_t v16 = a4;
  }
  else {
    unint64_t v16 = a4 + 1;
  }
  *(_DWORD *)(v6 + 300) = 0;
  uint64_t v17 = *(unsigned int *)(v6 + 44);
  int v18 = v8 - (v9 + v17);
  if ((v18 + 1) < 8) {
    int v19 = v18 + 1;
  }
  else {
    int v19 = 8;
  }
  if (v8 >= v9 + v17) {
    int v20 = v19;
  }
  else {
    int v20 = 0;
  }
  uint64_t v21 = (v20 + v17);
  int v131 = v11;
  if (v17 < v21)
  {
    uint64_t v22 = *(void *)(v6 + 112);
    uint64_t v23 = *(void *)(v6 + 56);
    int v24 = *(_DWORD *)(v6 + 52);
    uint64_t v25 = *(void *)(v6 + 96);
    char v26 = 56 - v24;
    char v27 = 24 - v24;
    do
    {
      if (v11 == 5)
      {
        unint64_t v28 = 0xCF1BBCDCBB000000 * *(void *)(v9 + v17);
      }
      else
      {
        if (v11 != 6)
        {
          LODWORD(v29) = ((-1640531535 * *(_DWORD *)(v9 + v17)) ^ v25) >> v27;
          goto LABEL_29;
        }
        unint64_t v28 = 0xCF1BBCDCBF9B0000 * *(void *)(v9 + v17);
      }
      unint64_t v29 = (v28 ^ v25) >> v26;
LABEL_29:
      uint64_t v30 = v29 >> 8 << v13;
      _X2 = v22 + 4 * v30;
      __asm { PRFM            #0, [X2] }
      if (v12 > 4)
      {
        __asm { PRFM            #0, [X2,#0x40] }
        _X2 = v23 + v30;
        __asm { PRFM            #0, [X2] }
        if (v13 == 6) {
          __asm { PRFM            #0, [X2,#0x20] }
        }
      }
      else
      {
        _X2 = v23 + v30;
        __asm { PRFM            #0, [X2] }
      }
      *(_DWORD *)(v6 + 4 * (v17++ & 7) + 64) = v29;
      int v11 = v131;
    }
    while (v21 != v17);
  }
  if (v16 < v8)
  {
    unsigned int v126 = (char *)(v7 - 32);
    uint64_t v119 = v5 + a5 - 16;
    unsigned int v123 = v133 + v130 - v127;
    int v132 = v13;
    unint64_t v128 = v7;
    uint64_t v125 = v6;
    unint64_t v122 = v8;
    unsigned int v121 = v12;
    do
    {
      int v43 = v16 - v9 - v14;
      uint64_t v44 = (v43 + 1);
      uint64_t v45 = v130 + v44 - v123;
      if (v44 >= v133) {
        uint64_t v45 = v9 + v44;
      }
      if ((v133 - v43 - 5) <= 0xFFFFFFFC && *(_DWORD *)v45 == *(_DWORD *)(v16 + 1))
      {
        if (v44 >= v133) {
          int v46 = (char *)v7;
        }
        else {
          int v46 = v127;
        }
        unint64_t v47 = sub_1DD2A6010((void *)(v16 + 5), (char *)(v45 + 4), v7, v46, v129) + 4;
        int v11 = v131;
        int v13 = v132;
      }
      else
      {
        unint64_t v47 = 0;
      }
      *(void *)unint64_t v134 = 999999999;
      if (v11 == 6)
      {
        if (v13 == 6)
        {
          unint64_t v48 = sub_1DD2CDAC8(v6, (void *)v16, v7, v134);
        }
        else if (v13 == 5)
        {
          unint64_t v48 = sub_1DD2CD354(v6, (void *)v16, v7, v134);
        }
        else
        {
          unint64_t v48 = sub_1DD2CCBF8(v6, (void *)v16, v7, v134);
        }
      }
      else if (v11 == 5)
      {
        if (v13 == 6)
        {
          unint64_t v48 = sub_1DD2CC478(v6, (void *)v16, v7, v134);
        }
        else if (v13 == 5)
        {
          unint64_t v48 = sub_1DD2CBD04(v6, (void *)v16, v7, v134);
        }
        else
        {
          unint64_t v48 = sub_1DD2CB5A8(v6, (void *)v16, v7, v134);
        }
      }
      else if (v13 == 6)
      {
        unint64_t v48 = sub_1DD2CAE2C(v6, (void *)v16, v7, v134);
      }
      else if (v13 == 5)
      {
        unint64_t v48 = sub_1DD2CA6BC(v6, (void *)v16, v7, v134);
      }
      else
      {
        unint64_t v48 = sub_1DD2C9F64(v6, (void *)v16, v7, v134);
      }
      if (v48 <= v47) {
        unint64_t v49 = v47;
      }
      else {
        unint64_t v49 = v48;
      }
      if (v49 < 4)
      {
        unint64_t v50 = v16 - v5;
        v16 += ((v16 - v5) >> 8) + 1;
        *(_DWORD *)(v6 + 300) = v50 > 0x7FF;
        int v13 = v132;
        goto LABEL_159;
      }
      unint64_t v51 = v8;
      if (v48 <= v47) {
        unint64_t v52 = v16 + 1;
      }
      else {
        unint64_t v52 = v16;
      }
      if (v48 <= v47) {
        unint64_t v53 = 1;
      }
      else {
        unint64_t v53 = *(void *)v134;
      }
      if (v16 >= v51)
      {
        uint64_t v63 = a2;
        int v13 = v132;
      }
      else
      {
        uint64_t v54 = 0;
        unsigned int v55 = v133 + v9 - 2 + v14 - v16;
        int v13 = v132;
        while (1)
        {
          unint64_t v56 = (_DWORD *)(v16 + v54 + 1);
          uint64_t v57 = (v16 - v9 - v14 + v54 + 1);
          uint64_t v58 = v130 + (v127 - v133 - v130 - v9 + 1 + v16 - v14 + v54);
          if (v57 >= v133) {
            uint64_t v58 = v9 + v57;
          }
          if (v55 >= 3 && *(_DWORD *)v58 == *v56)
          {
            uint64_t v59 = v57 >= v133 ? (char *)v128 : v127;
            unint64_t v60 = sub_1DD2A6010((void *)(v16 + v54 + 5), (char *)(v58 + 4), v128, v59, v129);
            if (v60 > 0xFFFFFFFFFFFFFFFBLL)
            {
              int v61 = v131;
              int v13 = v132;
            }
            else
            {
              int v61 = v131;
              int v13 = v132;
              if (3 * ((int)v60 + 4) > (int)(3 * v49 + __clz(v53) - 30))
              {
                unint64_t v49 = v60 + 4;
                unint64_t v53 = 1;
                unint64_t v52 = v16 + v54 + 1;
              }
            }
          }
          else
          {
            int v61 = v131;
          }
          *(void *)unint64_t v134 = 999999999;
          if (v61 == 6)
          {
            if (v13 == 6) {
              unint64_t v62 = sub_1DD2CDAC8(v125, (void *)(v16 + v54 + 1), v128, v134);
            }
            else {
              unint64_t v62 = v13 == 5
            }
                  ? sub_1DD2CD354(v125, (void *)(v16 + v54 + 1), v128, v134)
                  : sub_1DD2CCBF8(v125, (void *)(v16 + v54 + 1), v128, v134);
          }
          else if (v61 == 5)
          {
            if (v13 == 6) {
              unint64_t v62 = sub_1DD2CC478(v125, (void *)(v16 + v54 + 1), v128, v134);
            }
            else {
              unint64_t v62 = v13 == 5
            }
                  ? sub_1DD2CBD04(v125, (void *)(v16 + v54 + 1), v128, v134)
                  : sub_1DD2CB5A8(v125, (void *)(v16 + v54 + 1), v128, v134);
          }
          else if (v13 == 6)
          {
            unint64_t v62 = sub_1DD2CAE2C(v125, (void *)(v16 + v54 + 1), v128, v134);
          }
          else
          {
            unint64_t v62 = v13 == 5
                ? sub_1DD2CA6BC(v125, (void *)(v16 + v54 + 1), v128, v134)
                : sub_1DD2C9F64(v125, (void *)(v16 + v54 + 1), v128, v134);
          }
          int v13 = v132;
          if (v62 < 4 || (int)(__clz(v134[0]) + 4 * v62 - 31) <= (int)(__clz(v53) + 4 * v49 - 27)) {
            break;
          }
          ++v54;
          --v55;
          unint64_t v52 = (unint64_t)v56;
          unint64_t v53 = *(void *)v134;
          unint64_t v49 = v62;
          if (v119 - v16 == v54)
          {
            unint64_t v49 = v62;
            unint64_t v53 = *(void *)v134;
            unint64_t v52 = v119;
            break;
          }
        }
        unint64_t v7 = v128;
        uint64_t v63 = a2;
      }
      uint64_t v64 = v126;
      unsigned int v65 = v124;
      if (v53 > 3)
      {
        unint64_t v66 = v9 + v133;
        if (v133 > (int)v52 - ((int)v53 + (int)v9) + 3) {
          unint64_t v66 = v118;
        }
        uint64_t v67 = v130 - v123;
        if (v133 <= (int)v52 - ((int)v53 + (int)v9) + 3) {
          uint64_t v67 = v9;
        }
        if (v52 > v5 && v67 + (unint64_t)(v52 - (v53 + v9) + 3) > v66)
        {
          unint64_t v68 = (unsigned __int8 *)(v67 + (v52 - (v53 + v9) + 3) - 1);
          unint64_t v69 = (unsigned __int8 *)(v52 - 1);
          while (*v69 == *v68)
          {
            ++v49;
            unint64_t v70 = v69 - 1;
            if ((unint64_t)v69 > v5)
            {
              --v69;
              if ((unint64_t)v68-- > v66) {
                continue;
              }
            }
            unint64_t v52 = (unint64_t)(v70 + 1);
            goto LABEL_123;
          }
          unint64_t v52 = (unint64_t)(v69 + 1);
        }
LABEL_123:
        uint64_t v64 = v126;
        unsigned int v65 = v14;
        uint64_t v14 = (v53 - 3);
      }
      uint64_t v72 = v52 - v5;
      long long v73 = *(_OWORD **)(v63 + 24);
      unsigned int v124 = v65;
      if (v52 <= (unint64_t)v64)
      {
        _OWORD *v73 = *(_OWORD *)v5;
        uint64_t v77 = *(void *)(v63 + 24);
        if ((unint64_t)v72 <= 0x10)
        {
          *(void *)(v63 + 24) = v77 + v72;
          uint64_t v75 = *(void *)(v63 + 8);
          int v74 = v131;
          goto LABEL_134;
        }
        *(_OWORD *)(v77 + 16) = *(_OWORD *)(v5 + 16);
        int v74 = v131;
        if (v72 >= 33)
        {
          unint64_t v78 = v77 + v72;
          unint64_t v79 = (_OWORD *)(v77 + 32);
          uint64_t v80 = (long long *)(v5 + 48);
          do
          {
            *unint64_t v79 = *(v80 - 1);
            long long v81 = *v80;
            v80 += 2;
            v79[1] = v81;
            v79 += 2;
          }
          while ((unint64_t)v79 < v78);
        }
      }
      else
      {
        sub_1DD29DBFC(v73, (char *)v5, v52, v64);
        int v74 = v131;
        int v13 = v132;
      }
      *(void *)(v63 + 24) += v72;
      uint64_t v75 = *(void *)(v63 + 8);
      if ((unint64_t)v72 >= 0x10000)
      {
        unint64_t v76 = (unint64_t)(v75 - *(void *)v63) >> 3;
        *(_DWORD *)(v63 + 72) = 1;
        *(_DWORD *)(v63 + 76) = v76;
      }
LABEL_134:
      *(_WORD *)(v75 + 4) = v72;
      *(_DWORD *)uint64_t v75 = v53;
      if (v49 - 3 >= 0x10000)
      {
        unint64_t v82 = (unint64_t)(v75 - *(void *)v63) >> 3;
        *(_DWORD *)(v63 + 72) = 2;
        *(_DWORD *)(v63 + 76) = v82;
      }
      *(_WORD *)(v75 + 6) = v49 - 3;
      *(void *)(v63 + 8) = v75 + 8;
      uint64_t v6 = v125;
      if (*(_DWORD *)(v125 + 300))
      {
        uint64_t v83 = *(unsigned int *)(v125 + 44);
        int v84 = v122 - (v9 + v83);
        if ((v84 + 1) < 8) {
          int v85 = v84 + 1;
        }
        else {
          int v85 = 8;
        }
        if (v122 >= v9 + v83) {
          int v86 = v85;
        }
        else {
          int v86 = 0;
        }
        uint64_t v87 = (v86 + v83);
        if (v83 < v87)
        {
          uint64_t v88 = *(void *)(v125 + 112);
          uint64_t v89 = *(void *)(v125 + 56);
          int v90 = *(_DWORD *)(v125 + 52);
          uint64_t v91 = *(void *)(v125 + 96);
          char v92 = 56 - v90;
          char v93 = 24 - v90;
          do
          {
            if (v74 == 5)
            {
              unint64_t v94 = 0xCF1BBCDCBB000000 * *(void *)(v9 + v83);
            }
            else
            {
              if (v74 != 6)
              {
                LODWORD(v95) = ((-1640531535 * *(_DWORD *)(v9 + v83)) ^ v91) >> v93;
                goto LABEL_151;
              }
              unint64_t v94 = 0xCF1BBCDCBF9B0000 * *(void *)(v9 + v83);
            }
            unint64_t v95 = (v94 ^ v91) >> v92;
LABEL_151:
            uint64_t v96 = v95 >> 8 << v13;
            _X17 = v88 + 4 * v96;
            __asm { PRFM            #0, [X17] }
            if (v121 > 4)
            {
              __asm { PRFM            #0, [X17,#0x40] }
              _X16 = v89 + v96;
              __asm { PRFM            #0, [X16] }
              if (v13 == 6) {
                __asm { PRFM            #0, [X16,#0x20] }
              }
            }
            else
            {
              _X16 = v89 + v96;
              __asm { PRFM            #0, [X16] }
            }
            *(_DWORD *)(v125 + 4 * (v83++ & 7) + 64) = v95;
          }
          while (v87 != v83);
        }
        *(_DWORD *)(v125 + 300) = 0;
      }
      unint64_t v5 = v52 + v49;
      unint64_t v8 = v122;
      if (v5 <= v122)
      {
        uint64_t v106 = v14;
        uint64_t v107 = v124;
        while (1)
        {
          uint64_t v14 = v107;
          uint64_t v107 = v106;
          uint64_t v108 = (v5 - v9 - v14);
          uint64_t v109 = v130 - v123;
          if (v108 >= v133) {
            uint64_t v109 = v9;
          }
          if ((v133 + ~v108) < 3) {
            break;
          }
          uint64_t v110 = v109 + v108;
          if (*(_DWORD *)v110 != *(_DWORD *)v5) {
            break;
          }
          if (v108 >= v133) {
            uint64_t v111 = (char *)v7;
          }
          else {
            uint64_t v111 = v127;
          }
          unint64_t v112 = sub_1DD2A6010((void *)(v5 + 4), (char *)(v110 + 4), v7, v111, v129);
          unsigned int v113 = *(_OWORD **)(v63 + 24);
          if (v5 <= (unint64_t)v126) {
            *unsigned int v113 = *(_OWORD *)v5;
          }
          else {
            sub_1DD29DBFC(v113, (char *)v5, v5, v126);
          }
          int v13 = v132;
          uint64_t v114 = *(void *)(v63 + 8);
          *(_WORD *)(v114 + 4) = 0;
          *(_DWORD *)uint64_t v114 = 1;
          if (v112 + 1 >= 0x10000)
          {
            unint64_t v115 = (unint64_t)(v114 - *(void *)v63) >> 3;
            *(_DWORD *)(v63 + 72) = 2;
            *(_DWORD *)(v63 + 76) = v115;
          }
          *(_WORD *)(v114 + 6) = v112 + 1;
          v5 += v112 + 4;
          *(void *)(v63 + 8) = v114 + 8;
          uint64_t v106 = v14;
          unsigned int v105 = v107;
          unint64_t v16 = v5;
          if (v5 > v122) {
            goto LABEL_160;
          }
        }
        unsigned int v105 = v14;
        uint64_t v14 = v106;
        unint64_t v16 = v5;
        goto LABEL_160;
      }
      unint64_t v16 = v5;
LABEL_159:
      unsigned int v105 = v124;
LABEL_160:
      unsigned int v124 = v105;
      int v11 = v131;
    }
    while (v16 < v8);
  }
  *a3 = v14;
  a3[1] = v124;
  return v7 - v5;
}

unint64_t sub_1DD2B8B5C(uint64_t a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  unint64_t v5 = a4;
  unint64_t v122 = a4 + a5;
  unint64_t v7 = a4 + a5 - 16;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(unsigned int *)(a1 + 24);
  unsigned int v10 = *(_DWORD *)(a1 + 272);
  if (v10 >= 6) {
    unsigned int v10 = 6;
  }
  if (v10 <= 4) {
    int v11 = 4;
  }
  else {
    int v11 = v10;
  }
  unsigned int v12 = *(_DWORD *)(a1 + 268);
  if (v12 >= 6) {
    unsigned int v12 = 6;
  }
  unsigned int v117 = v12;
  if (v12 <= 4) {
    int v13 = 4;
  }
  else {
    int v13 = v12;
  }
  uint64_t v14 = *a3;
  uint64_t v15 = a3[1];
  uint64_t v16 = *(void *)(a1 + 248);
  uint64_t v17 = *(unsigned int *)(v16 + 24);
  uint64_t v114 = *(void *)(v16 + 8);
  unint64_t v120 = (void *)(v8 + v9);
  unint64_t v112 = v114 + v17;
  uint64_t v119 = *(char **)v16;
  if (a4 - (v8 + v9) - (v114 + v17) + *(void *)v16) {
    unint64_t v18 = a4;
  }
  else {
    unint64_t v18 = a4 + 1;
  }
  *(_DWORD *)(a1 + 300) = 0;
  uint64_t v19 = *(unsigned int *)(a1 + 44);
  int v20 = v7 - (v8 + v19);
  if ((v20 + 1) < 8) {
    int v21 = v20 + 1;
  }
  else {
    int v21 = 8;
  }
  unint64_t v123 = a4 + a5 - 16;
  if (v7 >= v8 + v19) {
    int v22 = v21;
  }
  else {
    int v22 = 0;
  }
  uint64_t v23 = (v22 + v19);
  if (v19 < v23)
  {
    uint64_t v24 = *(void *)(a1 + 112);
    uint64_t v25 = *(void *)(a1 + 56);
    int v26 = *(_DWORD *)(a1 + 52);
    uint64_t v27 = *(void *)(a1 + 96);
    char v28 = 56 - v26;
    char v29 = 24 - v26;
    do
    {
      if (v11 == 5)
      {
        unint64_t v30 = 0xCF1BBCDCBB000000 * *(void *)(v8 + v19);
      }
      else
      {
        if (v11 != 6)
        {
          LODWORD(v31) = ((-1640531535 * *(_DWORD *)(v8 + v19)) ^ v27) >> v29;
          goto LABEL_28;
        }
        unint64_t v30 = 0xCF1BBCDCBF9B0000 * *(void *)(v8 + v19);
      }
      unint64_t v31 = (v30 ^ v27) >> v28;
LABEL_28:
      uint64_t v32 = v31 >> 8 << v13;
      _X2 = v24 + 4 * v32;
      __asm { PRFM            #0, [X2] }
      if (v117 > 4)
      {
        __asm { PRFM            #0, [X2,#0x40] }
        _X1 = v25 + v32;
        __asm { PRFM            #0, [X1] }
        if (v13 == 6) {
          __asm { PRFM            #0, [X1,#0x20] }
        }
      }
      else
      {
        _X1 = v25 + v32;
        __asm { PRFM            #0, [X1] }
      }
      *(_DWORD *)(a1 + 4 * (v19++ & 7) + 64) = v31;
    }
    while (v23 != v19);
  }
  if (v18 < v123)
  {
    unsigned int v121 = (char *)(v122 - 32);
    unsigned int v113 = v9 + v114 - v119;
    do
    {
      int v45 = v18 - v8 - v14;
      uint64_t v46 = (v45 + 1);
      uint64_t v47 = v114 + v46 - v113;
      if (v46 >= v9) {
        uint64_t v47 = v8 + v46;
      }
      if ((v9 - v45 - 5) <= 0xFFFFFFFC && *(_DWORD *)v47 == *(_DWORD *)(v18 + 1))
      {
        if (v46 >= v9) {
          unint64_t v48 = (char *)v122;
        }
        else {
          unint64_t v48 = v119;
        }
        unint64_t v49 = sub_1DD2A6010((void *)(v18 + 5), (char *)(v47 + 4), v122, v48, v120);
        unint64_t v50 = v18 + 1;
        unint64_t v51 = v49 + 4;
        LODWORD(v52) = 1;
LABEL_81:
        uint64_t v63 = (char *)(v122 - 32);
        goto LABEL_84;
      }
      uint64_t v124 = 999999999;
      if (v11 == 6)
      {
        if (v13 == 6)
        {
          unint64_t v53 = v18 + 1;
          unint64_t v54 = sub_1DD2CDAC8(a1, (void *)v18, v122, &v124);
          goto LABEL_59;
        }
        if (v13 == 5)
        {
          unint64_t v53 = v18 + 1;
          unint64_t v54 = sub_1DD2CD354(a1, (void *)v18, v122, &v124);
          goto LABEL_59;
        }
        unint64_t v115 = v18 + 1;
        unint64_t v55 = sub_1DD2CCBF8(a1, (void *)v18, v122, &v124);
      }
      else if (v11 == 5)
      {
        if (v13 == 6)
        {
          unint64_t v53 = v18 + 1;
          unint64_t v54 = sub_1DD2CC478(a1, (void *)v18, v122, &v124);
          goto LABEL_59;
        }
        if (v13 == 5)
        {
          unint64_t v53 = v18 + 1;
          unint64_t v54 = sub_1DD2CBD04(a1, (void *)v18, v122, &v124);
LABEL_59:
          unint64_t v50 = v53;
          unint64_t v51 = v54;
          goto LABEL_62;
        }
        unint64_t v115 = v18 + 1;
        unint64_t v55 = sub_1DD2CB5A8(a1, (void *)v18, v122, &v124);
      }
      else
      {
        if (v13 == 6)
        {
          unint64_t v53 = v18 + 1;
          unint64_t v54 = sub_1DD2CAE2C(a1, (void *)v18, v122, &v124);
          goto LABEL_59;
        }
        if (v13 == 5)
        {
          unint64_t v53 = v18 + 1;
          unint64_t v54 = sub_1DD2CA6BC(a1, (void *)v18, v122, &v124);
          goto LABEL_59;
        }
        unint64_t v115 = v18 + 1;
        unint64_t v55 = sub_1DD2C9F64(a1, (void *)v18, v122, &v124);
      }
      unint64_t v51 = v55;
      unint64_t v50 = v115;
LABEL_62:
      if (v51) {
        unint64_t v52 = v124;
      }
      else {
        unint64_t v52 = 1;
      }
      if (v51) {
        unint64_t v50 = v18;
      }
      if (v51 <= 3)
      {
        unint64_t v56 = v18 - v5;
        v18 += ((v18 - v5) >> 8) + 1;
        *(_DWORD *)(a1 + 300) = v56 > 0x7FF;
        continue;
      }
      if (v52 < 4) {
        goto LABEL_81;
      }
      unint64_t v57 = v8 + v9;
      if (v9 > (int)v50 - (int)v8 - (int)v52 + 3) {
        unint64_t v57 = v112;
      }
      uint64_t v58 = v114 - v113;
      if (v9 <= (int)v50 - (int)v8 - (int)v52 + 3) {
        uint64_t v58 = v8;
      }
      if (v50 > v5 && v58 + (unint64_t)(v50 - v8 - v52 + 3) > v57)
      {
        uint64_t v59 = (unsigned __int8 *)(v58 + (v50 - v8 - v52 + 3) - 1);
        unint64_t v60 = (unsigned __int8 *)(v50 - 1);
        while (*v60 == *v59)
        {
          ++v51;
          int v61 = v60 - 1;
          if ((unint64_t)v60 > v5)
          {
            --v60;
            if ((unint64_t)v59-- > v57) {
              continue;
            }
          }
          unint64_t v50 = (unint64_t)(v61 + 1);
          goto LABEL_83;
        }
        unint64_t v50 = (unint64_t)(v60 + 1);
      }
LABEL_83:
      uint64_t v63 = (char *)(v122 - 32);
      uint64_t v15 = v14;
      uint64_t v14 = (v52 - 3);
LABEL_84:
      uint64_t v64 = v50 - v5;
      unsigned int v65 = *(_OWORD **)(a2 + 24);
      if (v50 > (unint64_t)v63)
      {
        unint64_t v66 = (char *)v5;
        unint64_t v116 = v50;
        int v67 = v52;
        sub_1DD29DBFC(v65, v66, v50, v63);
        LODWORD(v52) = v67;
        uint64_t v68 = a1;
LABEL_90:
        *(void *)(a2 + 24) += v64;
        uint64_t v74 = *(void *)(a2 + 8);
        unsigned int v75 = v117;
        if ((unint64_t)v64 >= 0x10000)
        {
          unint64_t v76 = (unint64_t)(v74 - *(void *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 1;
          *(_DWORD *)(a2 + 76) = v76;
        }
        unint64_t v50 = v116;
        goto LABEL_94;
      }
      *unsigned int v65 = *(_OWORD *)v5;
      uint64_t v69 = *(void *)(a2 + 24);
      if ((unint64_t)v64 > 0x10)
      {
        unint64_t v116 = v50;
        *(_OWORD *)(v69 + 16) = *(_OWORD *)(v5 + 16);
        uint64_t v68 = a1;
        if (v64 >= 33)
        {
          unint64_t v70 = v69 + v64;
          uint64_t v71 = (_OWORD *)(v69 + 32);
          uint64_t v72 = (long long *)(v5 + 48);
          do
          {
            _OWORD *v71 = *(v72 - 1);
            long long v73 = *v72;
            v72 += 2;
            v71[1] = v73;
            v71 += 2;
          }
          while ((unint64_t)v71 < v70);
        }
        goto LABEL_90;
      }
      *(void *)(a2 + 24) = v69 + v64;
      uint64_t v74 = *(void *)(a2 + 8);
      uint64_t v68 = a1;
      unsigned int v75 = v117;
LABEL_94:
      *(_WORD *)(v74 + 4) = v64;
      *(_DWORD *)uint64_t v74 = v52;
      if (v51 - 3 >= 0x10000)
      {
        unint64_t v77 = (unint64_t)(v74 - *(void *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 2;
        *(_DWORD *)(a2 + 76) = v77;
      }
      *(_WORD *)(v74 + 6) = v51 - 3;
      *(void *)(a2 + 8) = v74 + 8;
      if (*(_DWORD *)(v68 + 300))
      {
        uint64_t v78 = *(unsigned int *)(v68 + 44);
        int v79 = v123 - (v8 + v78);
        if ((v79 + 1) < 8) {
          int v80 = v79 + 1;
        }
        else {
          int v80 = 8;
        }
        if (v123 >= v8 + v78) {
          int v81 = v80;
        }
        else {
          int v81 = 0;
        }
        uint64_t v82 = (v81 + v78);
        if (v78 < v82)
        {
          uint64_t v83 = *(void *)(v68 + 112);
          uint64_t v84 = *(void *)(v68 + 56);
          int v85 = *(_DWORD *)(v68 + 52);
          uint64_t v86 = *(void *)(v68 + 96);
          char v87 = 56 - v85;
          char v88 = 24 - v85;
          do
          {
            if (v11 == 5)
            {
              unint64_t v89 = 0xCF1BBCDCBB000000 * *(void *)(v8 + v78);
            }
            else
            {
              if (v11 != 6)
              {
                LODWORD(v90) = ((-1640531535 * *(_DWORD *)(v8 + v78)) ^ v86) >> v88;
                goto LABEL_111;
              }
              unint64_t v89 = 0xCF1BBCDCBF9B0000 * *(void *)(v8 + v78);
            }
            unint64_t v90 = (v89 ^ v86) >> v87;
LABEL_111:
            uint64_t v91 = v90 >> 8 << v13;
            _X17 = v83 + 4 * v91;
            __asm { PRFM            #0, [X17] }
            if (v75 > 4)
            {
              __asm { PRFM            #0, [X17,#0x40] }
              _X16 = v84 + v91;
              __asm { PRFM            #0, [X16] }
              if (v13 == 6) {
                __asm { PRFM            #0, [X16,#0x20] }
              }
            }
            else
            {
              _X16 = v84 + v91;
              __asm { PRFM            #0, [X16] }
            }
            *(_DWORD *)(v68 + 4 * (v78++ & 7) + 64) = v90;
          }
          while (v82 != v78);
        }
        *(_DWORD *)(v68 + 300) = 0;
      }
      unint64_t v5 = v50 + v51;
      if (v50 + v51 <= v123)
      {
        uint64_t v100 = v14;
        uint64_t v101 = v15;
        while (1)
        {
          uint64_t v14 = v101;
          uint64_t v101 = v100;
          uint64_t v102 = (v5 - v8 - v14);
          uint64_t v103 = v114 - v113;
          if (v102 >= v9) {
            uint64_t v103 = v8;
          }
          if ((v9 + ~v102) < 3) {
            break;
          }
          uint64_t v104 = v103 + v102;
          if (*(_DWORD *)v104 != *(_DWORD *)v5) {
            break;
          }
          if (v102 >= v9) {
            unsigned int v105 = (char *)v122;
          }
          else {
            unsigned int v105 = v119;
          }
          unint64_t v106 = sub_1DD2A6010((void *)(v5 + 4), (char *)(v104 + 4), v122, v105, v120);
          uint64_t v107 = *(_OWORD **)(a2 + 24);
          if (v5 <= (unint64_t)v121) {
            *uint64_t v107 = *(_OWORD *)v5;
          }
          else {
            sub_1DD29DBFC(v107, (char *)v5, v5, v121);
          }
          uint64_t v108 = *(void *)(a2 + 8);
          *(_WORD *)(v108 + 4) = 0;
          *(_DWORD *)uint64_t v108 = 1;
          if (v106 + 1 >= 0x10000)
          {
            unint64_t v109 = (unint64_t)(v108 - *(void *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 2;
            *(_DWORD *)(a2 + 76) = v109;
          }
          *(_WORD *)(v108 + 6) = v106 + 1;
          v5 += v106 + 4;
          *(void *)(a2 + 8) = v108 + 8;
          uint64_t v100 = v14;
          uint64_t v15 = v101;
          unint64_t v18 = v5;
          if (v5 > v123) {
            goto LABEL_135;
          }
        }
        uint64_t v15 = v14;
        uint64_t v14 = v100;
      }
      unint64_t v18 = v5;
LABEL_135:
      ;
    }
    while (v18 < v123);
  }
  *a3 = v14;
  a3[1] = v15;
  return v122 - v5;
}

unint64_t sub_1DD2B9368(uint64_t a1, uint64_t a2, unsigned int *a3, void *a4, uint64_t a5)
{
  unint64_t v5 = (unint64_t)a4;
  unint64_t v6 = (unint64_t)a4 + a5;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v10 = *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(a1 + 28);
  int v11 = *(_DWORD *)(a1 + 256);
  unsigned int v12 = *(_DWORD *)(a1 + 272);
  if (v12 >= 6) {
    unsigned int v12 = 6;
  }
  if (v12 <= 4) {
    unsigned int v12 = 4;
  }
  uint64_t v14 = *a3;
  uint64_t v13 = a3[1];
  *(_DWORD *)(a1 + 300) = 0;
  int v67 = (unsigned __int8 *)(v8 + v10);
  if ((void *)(v8 + v10) == a4) {
    uint64_t v15 = (void *)((char *)a4 + 1);
  }
  else {
    uint64_t v15 = a4;
  }
  unint64_t v73 = (unint64_t)a4 + a5 - 8;
  if ((unint64_t)v15 < v73)
  {
    unsigned int v65 = v12;
    unint64_t v66 = (char *)(v7 + v10);
    uint64_t v64 = (unsigned __int8 *)(v7 + v9);
    unsigned int v18 = 1 << v11;
    int v70 = v10 - 1;
    uint64_t v68 = (char *)(v6 - 32);
    unint64_t v69 = (unint64_t)a4 + a5;
    unsigned int v71 = v10;
    uint64_t v72 = v7;
    while (1)
    {
      uint64_t v19 = (_DWORD *)((char *)v15 + 1);
      int v20 = v15 - v8 + 1;
      int v21 = v20 - v18;
      if (v20 - *(_DWORD *)(a1 + 28) <= v18 || *(_DWORD *)(a1 + 40) != 0) {
        int v21 = *(_DWORD *)(a1 + 28);
      }
      uint64_t v23 = (v20 - v14);
      uint64_t v24 = v23 >= v10 ? v8 : v7;
      if ((v70 - v23) >= 3 && v14 <= v20 - v21 && *v19 == *(_DWORD *)(v24 + v23)) {
        break;
      }
      uint64_t v74 = 999999999;
      if (v65 == 6)
      {
        unint64_t v28 = sub_1DD2C0D88(a1, v15, v6, &v74);
      }
      else if (v65 == 5)
      {
        unint64_t v28 = sub_1DD2C0A64(a1, v15, v6, &v74);
      }
      else
      {
        unint64_t v28 = sub_1DD2C073C(a1, v15, v6, &v74);
      }
      unint64_t v26 = v28;
      if (v28) {
        unint64_t v27 = v74;
      }
      else {
        unint64_t v27 = 1;
      }
      if (v28) {
        uint64_t v19 = v15;
      }
      if (v28 > 3)
      {
        if (v27 >= 4)
        {
          unsigned int v30 = v19 - v8 - v27 + 3;
          if (v71 <= v30) {
            uint64_t v31 = v8;
          }
          else {
            uint64_t v31 = v72;
          }
          uint64_t v32 = v67;
          if (v71 > v30) {
            uint64_t v32 = v64;
          }
          if ((unint64_t)v19 > v5 && v31 + (unint64_t)v30 > (unint64_t)v32)
          {
            uint64_t v33 = (unsigned __int8 *)(v31 + (v19 - v8 - v27 + 3) - 1);
            char v34 = (unsigned __int8 *)v19 - 1;
            while (*v34 == *v33)
            {
              ++v26;
              char v35 = v34 - 1;
              if ((unint64_t)v34 > v5)
              {
                --v34;
                if (v33-- > v32) {
                  continue;
                }
              }
              uint64_t v19 = v35 + 1;
              goto LABEL_52;
            }
            uint64_t v19 = v34 + 1;
          }
LABEL_52:
          unint64_t v37 = v68;
          uint64_t v13 = v14;
          uint64_t v14 = (v27 - 3);
LABEL_53:
          uint64_t v38 = (uint64_t)v19 - v5;
          unint64_t v39 = *(_OWORD **)(a2 + 24);
          if (v19 > (_DWORD *)v37)
          {
            unint64_t v40 = (char *)v5;
            int v41 = v27;
            sub_1DD29DBFC(v39, v40, (unint64_t)v19, v37);
            LODWORD(v27) = v41;
            goto LABEL_59;
          }
          *unint64_t v39 = *(_OWORD *)v5;
          uint64_t v42 = *(void *)(a2 + 24);
          if ((unint64_t)v38 <= 0x10)
          {
            *(void *)(a2 + 24) = v42 + v38;
            uint64_t v47 = *(void *)(a2 + 8);
          }
          else
          {
            *(_OWORD *)(v42 + 16) = *(_OWORD *)(v5 + 16);
            if (v38 >= 33)
            {
              unint64_t v43 = v42 + v38;
              uint64_t v44 = (_OWORD *)(v42 + 32);
              int v45 = (long long *)(v5 + 48);
              do
              {
                *uint64_t v44 = *(v45 - 1);
                long long v46 = *v45;
                v45 += 2;
                v44[1] = v46;
                v44 += 2;
              }
              while ((unint64_t)v44 < v43);
            }
LABEL_59:
            *(void *)(a2 + 24) += v38;
            uint64_t v47 = *(void *)(a2 + 8);
            if ((unint64_t)v38 >= 0x10000)
            {
              unint64_t v48 = (unint64_t)(v47 - *(void *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 1;
              *(_DWORD *)(a2 + 76) = v48;
            }
          }
          *(_WORD *)(v47 + 4) = v38;
          *(_DWORD *)uint64_t v47 = v27;
          if (v26 - 3 >= 0x10000)
          {
            unint64_t v49 = (unint64_t)(v47 - *(void *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 2;
            *(_DWORD *)(a2 + 76) = v49;
          }
          *(_WORD *)(v47 + 6) = v26 - 3;
          *(void *)(a2 + 8) = v47 + 8;
          if (*(_DWORD *)(a1 + 300)) {
            *(_DWORD *)(a1 + 300) = 0;
          }
          unint64_t v5 = (unint64_t)v19 + v26;
          if ((unint64_t)v19 + v26 <= v73)
          {
            uint64_t v50 = v14;
            uint64_t v51 = v13;
            while (1)
            {
              uint64_t v14 = v51;
              uint64_t v51 = v50;
              int v52 = v5 - v8;
              int v53 = v5 - v8 - v18;
              if ((int)v5 - (int)v8 - *(_DWORD *)(a1 + 28) <= v18 || *(_DWORD *)(a1 + 40) != 0) {
                int v53 = *(_DWORD *)(a1 + 28);
              }
              uint64_t v55 = (v52 - v14);
              uint64_t v56 = v72;
              if (v55 >= v71) {
                uint64_t v56 = v8;
              }
              if ((v70 - v55) < 3
                || v14 > v52 - v53
                || *(_DWORD *)v5 != *(_DWORD *)(v56 + v55))
              {
                break;
              }
              if (v55 >= v71) {
                unint64_t v57 = (char *)v69;
              }
              else {
                unint64_t v57 = v66;
              }
              unint64_t v58 = sub_1DD2A6010((void *)(v5 + 4), (char *)(v56 + v55 + 4), v69, v57, v67);
              uint64_t v59 = *(_OWORD **)(a2 + 24);
              if (v5 <= (unint64_t)v68) {
                *uint64_t v59 = *(_OWORD *)v5;
              }
              else {
                sub_1DD29DBFC(v59, (char *)v5, v5, v68);
              }
              uint64_t v60 = *(void *)(a2 + 8);
              *(_WORD *)(v60 + 4) = 0;
              *(_DWORD *)uint64_t v60 = 1;
              if (v58 + 1 >= 0x10000)
              {
                unint64_t v61 = (unint64_t)(v60 - *(void *)a2) >> 3;
                *(_DWORD *)(a2 + 72) = 2;
                *(_DWORD *)(a2 + 76) = v61;
              }
              *(_WORD *)(v60 + 6) = v58 + 1;
              v5 += v58 + 4;
              *(void *)(a2 + 8) = v60 + 8;
              uint64_t v50 = v14;
              uint64_t v13 = v51;
              uint64_t v15 = (void *)v5;
              if (v5 > v73) {
                goto LABEL_90;
              }
            }
            uint64_t v13 = v14;
            uint64_t v14 = v50;
          }
          uint64_t v15 = (void *)v5;
          goto LABEL_90;
        }
LABEL_50:
        unint64_t v37 = v68;
        goto LABEL_53;
      }
      unint64_t v29 = (unint64_t)v15 - v5;
      uint64_t v15 = (void *)((char *)v15 + (((unint64_t)v15 - v5) >> 8) + 1);
      *(_DWORD *)(a1 + 300) = v29 > 0x8FF;
LABEL_90:
      uint64_t v7 = v72;
      unint64_t v6 = v69;
      LODWORD(v10) = v71;
      if ((unint64_t)v15 >= v73) {
        goto LABEL_91;
      }
    }
    if (v23 >= v10) {
      uint64_t v25 = (char *)v6;
    }
    else {
      uint64_t v25 = v66;
    }
    unint64_t v26 = sub_1DD2A6010((void *)((char *)v15 + 5), (char *)(v24 + v23 + 4), v6, v25, v67) + 4;
    LODWORD(v27) = 1;
    goto LABEL_50;
  }
LABEL_91:
  *a3 = v14;
  a3[1] = v13;
  return v6 - v5;
}

unint64_t sub_1DD2B9834(uint64_t a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  unint64_t v5 = a4;
  unint64_t v6 = a4 + a5;
  unint64_t v7 = a4 + a5 - 8;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v11 = *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(a1 + 28);
  int v12 = *(_DWORD *)(a1 + 256);
  unsigned int v13 = *(_DWORD *)(a1 + 272);
  if (v13 >= 6) {
    unsigned int v13 = 6;
  }
  if (v13 <= 4) {
    unsigned int v13 = 4;
  }
  unsigned int v92 = v13;
  uint64_t v14 = *a3;
  unsigned int v84 = a3[1];
  *(_DWORD *)(a1 + 300) = 0;
  unint64_t v90 = (unsigned __int8 *)(v9 + v11);
  if (v9 + v11 == a4) {
    unint64_t v15 = a4 + 1;
  }
  else {
    unint64_t v15 = a4;
  }
  if (v15 < v7)
  {
    uint64_t v16 = a2;
    char v87 = (char *)(v8 + v11);
    int v80 = (unsigned __int8 *)(v8 + v10);
    int v91 = v11 - 1;
    char v88 = (char *)(v6 - 32);
    unsigned int v93 = 1 << v12;
    int v79 = 1 - v9 - (1 << v12);
    int v78 = 1 - v9;
    unsigned int v94 = v11;
    int v77 = v11 + v9 - 2;
    uint64_t v83 = v9;
    unint64_t v89 = a4 + a5;
    unint64_t v85 = a4 + a5 - 8;
    uint64_t v86 = v8;
    while (1)
    {
      uint64_t v18 = v8;
      unint64_t v19 = 0;
      int v20 = v15 - v9 + 1;
      int v21 = v20 - v93;
      if (v20 - *(_DWORD *)(a1 + 28) <= v93 || *(_DWORD *)(a1 + 40) != 0) {
        int v21 = *(_DWORD *)(a1 + 28);
      }
      uint64_t v23 = (v20 - v14);
      if (v23 >= v94) {
        uint64_t v24 = v9;
      }
      else {
        uint64_t v24 = v18;
      }
      if ((v91 - v23) >= 3 && v14 <= v20 - v21)
      {
        if (*(_DWORD *)(v15 + 1) == *(_DWORD *)(v24 + v23))
        {
          if (v23 >= v94) {
            uint64_t v25 = (char *)v6;
          }
          else {
            uint64_t v25 = v87;
          }
          unint64_t v19 = sub_1DD2A6010((void *)(v15 + 5), (char *)(v24 + v23 + 4), v6, v25, v90) + 4;
        }
        else
        {
          unint64_t v19 = 0;
        }
      }
      *(void *)unint64_t v95 = 999999999;
      if (v92 == 6)
      {
        unint64_t v26 = sub_1DD2C0D88(a1, (void *)v15, v6, v95);
      }
      else if (v92 == 5)
      {
        unint64_t v26 = sub_1DD2C0A64(a1, (void *)v15, v6, v95);
      }
      else
      {
        unint64_t v26 = sub_1DD2C073C(a1, (_DWORD *)v15, v6, v95);
      }
      if (v26 <= v19) {
        unint64_t v27 = v19;
      }
      else {
        unint64_t v27 = v26;
      }
      if (v27 < 4)
      {
        unint64_t v28 = v15 - v5;
        v15 += ((v15 - v5) >> 8) + 1;
        *(_DWORD *)(a1 + 300) = v28 > 0x8FF;
        uint64_t v9 = v83;
        uint64_t v8 = v86;
        goto LABEL_102;
      }
      unint64_t v29 = v7;
      if (v26 <= v19) {
        unint64_t v30 = v15 + 1;
      }
      else {
        unint64_t v30 = v15;
      }
      if (v26 <= v19) {
        unint64_t v31 = 1;
      }
      else {
        unint64_t v31 = *(void *)v95;
      }
      if (v15 < v29)
      {
        uint64_t v32 = 0;
        unsigned int v33 = v77 + v14 - v15;
        int v82 = v78 + v15;
        while (1)
        {
          char v34 = (_DWORD *)(v15 + v32 + 1);
          if (v31)
          {
            if (v82 + (int)v32 - *(_DWORD *)(a1 + 28) > v93 && *(_DWORD *)(a1 + 40) == 0) {
              int v36 = v79 + v15 + v32;
            }
            else {
              int v36 = *(_DWORD *)(a1 + 28);
            }
            uint64_t v37 = (v78 + v15 - v14 + v32);
            uint64_t v38 = v83;
            if (v37 < v94) {
              uint64_t v38 = v86;
            }
            if (v33 >= 3 && v14 <= v82 + (int)v32 - v36 && *v34 == *(_DWORD *)(v38 + v37))
            {
              unint64_t v39 = v37 >= v94 ? (char *)v89 : v87;
              unint64_t v40 = sub_1DD2A6010((void *)(v15 + v32 + 5), (char *)(v38 + v37 + 4), v89, v39, v90);
              if (v40 <= 0xFFFFFFFFFFFFFFFBLL && 3 * ((int)v40 + 4) > (int)(__clz(v31) + 3 * v27 - 30))
              {
                unint64_t v31 = 1;
                unint64_t v30 = v15 + v32 + 1;
                unint64_t v27 = v40 + 4;
              }
            }
          }
          *(void *)unint64_t v95 = 999999999;
          int v41 = (void *)(v15 + v32 + 1);
          if (v92 == 6) {
            unint64_t v42 = sub_1DD2C0D88(a1, v41, v89, v95);
          }
          else {
            unint64_t v42 = v92 == 5 ? sub_1DD2C0A64(a1, v41, v89, v95) : sub_1DD2C073C(a1, v41, v89, v95);
          }
          if (v42 < 4 || (int)(__clz(v95[0]) + 4 * v42 - 31) <= (int)(__clz(v31) + 4 * v27 - 27)) {
            break;
          }
          ++v32;
          --v33;
          unint64_t v27 = v42;
          unint64_t v30 = (unint64_t)v34;
          unint64_t v31 = *(void *)v95;
          if (v15 + v32 >= v85)
          {
            unint64_t v31 = *(void *)v95;
            unint64_t v30 = v15 + v32;
            unint64_t v27 = v42;
            break;
          }
        }
        unint64_t v6 = v89;
        uint64_t v16 = a2;
      }
      unint64_t v43 = v88;
      unsigned int v44 = v84;
      if (v31 > 3)
      {
        uint64_t v45 = v83;
        unsigned int v46 = v30 - (v31 + v83) + 3;
        if (v94 > v46) {
          uint64_t v45 = v86;
        }
        uint64_t v47 = v90;
        if (v94 > v46) {
          uint64_t v47 = v80;
        }
        if (v30 > v5 && v45 + (unint64_t)v46 > (unint64_t)v47)
        {
          unint64_t v48 = (unsigned __int8 *)(v45 + (v30 - (v31 + v83) + 3) - 1);
          unint64_t v49 = (unsigned __int8 *)(v30 - 1);
          while (*v49 == *v48)
          {
            ++v27;
            uint64_t v50 = v49 - 1;
            if ((unint64_t)v49 > v5)
            {
              --v49;
              if (v48-- > v47) {
                continue;
              }
            }
            unint64_t v30 = (unint64_t)(v50 + 1);
            goto LABEL_85;
          }
          unint64_t v30 = (unint64_t)(v49 + 1);
        }
LABEL_85:
        unint64_t v43 = v88;
        unsigned int v44 = v14;
        uint64_t v14 = (v31 - 3);
      }
      uint64_t v52 = v30 - v5;
      int v53 = *(_OWORD **)(v16 + 24);
      unsigned int v84 = v44;
      if (v30 > (unint64_t)v43) {
        break;
      }
      *int v53 = *(_OWORD *)v5;
      uint64_t v56 = *(void *)(v16 + 24);
      if ((unint64_t)v52 > 0x10)
      {
        *(_OWORD *)(v56 + 16) = *(_OWORD *)(v5 + 16);
        if (v52 >= 33)
        {
          unint64_t v57 = v56 + v52;
          unint64_t v58 = (_OWORD *)(v56 + 32);
          uint64_t v59 = (long long *)(v5 + 48);
          do
          {
            *unint64_t v58 = *(v59 - 1);
            long long v60 = *v59;
            v59 += 2;
            v58[1] = v60;
            v58 += 2;
          }
          while ((unint64_t)v58 < v57);
        }
        goto LABEL_88;
      }
      *(void *)(v16 + 24) = v56 + v52;
      uint64_t v54 = *(void *)(v16 + 8);
LABEL_96:
      *(_WORD *)(v54 + 4) = v52;
      *(_DWORD *)uint64_t v54 = v31;
      if (v27 - 3 >= 0x10000)
      {
        unint64_t v61 = (unint64_t)(v54 - *(void *)v16) >> 3;
        *(_DWORD *)(v16 + 72) = 2;
        *(_DWORD *)(v16 + 76) = v61;
      }
      *(_WORD *)(v54 + 6) = v27 - 3;
      *(void *)(v16 + 8) = v54 + 8;
      uint64_t v8 = v86;
      if (*(_DWORD *)(a1 + 300)) {
        *(_DWORD *)(a1 + 300) = 0;
      }
      unint64_t v5 = v30 + v27;
      unint64_t v7 = v85;
      if (v5 <= v85)
      {
        uint64_t v63 = v14;
        uint64_t v64 = v84;
        uint64_t v9 = v83;
        while (1)
        {
          uint64_t v14 = v64;
          uint64_t v64 = v63;
          int v65 = v5 - v83;
          int v66 = v5 - v83 - v93;
          if ((int)v5 - (int)v83 - *(_DWORD *)(a1 + 28) <= v93 || *(_DWORD *)(a1 + 40) != 0) {
            int v66 = *(_DWORD *)(a1 + 28);
          }
          uint64_t v68 = (v65 - v14);
          uint64_t v69 = v68 >= v94 ? v83 : v86;
          if ((v91 - v68) < 3 || v14 > v65 - v66 || *(_DWORD *)v5 != *(_DWORD *)(v69 + v68)) {
            break;
          }
          if (v68 >= v94) {
            int v70 = (char *)v6;
          }
          else {
            int v70 = v87;
          }
          unint64_t v71 = sub_1DD2A6010((void *)(v5 + 4), (char *)(v69 + v68 + 4), v6, v70, v90);
          uint64_t v72 = *(_OWORD **)(v16 + 24);
          if (v5 <= (unint64_t)v88) {
            *uint64_t v72 = *(_OWORD *)v5;
          }
          else {
            sub_1DD29DBFC(v72, (char *)v5, v5, v88);
          }
          uint64_t v73 = *(void *)(v16 + 8);
          *(_WORD *)(v73 + 4) = 0;
          *(_DWORD *)uint64_t v73 = 1;
          if (v71 + 1 >= 0x10000)
          {
            unint64_t v74 = (unint64_t)(v73 - *(void *)v16) >> 3;
            *(_DWORD *)(v16 + 72) = 2;
            *(_DWORD *)(v16 + 76) = v74;
          }
          *(_WORD *)(v73 + 6) = v71 + 1;
          v5 += v71 + 4;
          *(void *)(v16 + 8) = v73 + 8;
          uint64_t v63 = v14;
          unsigned int v62 = v64;
          unint64_t v15 = v5;
          if (v5 > v85) {
            goto LABEL_103;
          }
        }
        unsigned int v62 = v14;
        uint64_t v14 = v63;
        unint64_t v15 = v5;
        goto LABEL_103;
      }
      unint64_t v15 = v5;
      uint64_t v9 = v83;
LABEL_102:
      unsigned int v62 = v84;
LABEL_103:
      unsigned int v84 = v62;
      if (v15 >= v7) {
        goto LABEL_128;
      }
    }
    sub_1DD29DBFC(v53, (char *)v5, v30, v43);
LABEL_88:
    *(void *)(v16 + 24) += v52;
    uint64_t v54 = *(void *)(v16 + 8);
    if ((unint64_t)v52 >= 0x10000)
    {
      unint64_t v55 = (unint64_t)(v54 - *(void *)v16) >> 3;
      *(_DWORD *)(v16 + 72) = 1;
      *(_DWORD *)(v16 + 76) = v55;
    }
    goto LABEL_96;
  }
LABEL_128:
  *a3 = v14;
  a3[1] = v84;
  return v6 - v5;
}

unint64_t sub_1DD2B9F30(uint64_t a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  unint64_t v5 = a4;
  unint64_t v6 = a4 + a5;
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v9 = *(unsigned int *)(a1 + 24);
  uint64_t v8 = *(unsigned int *)(a1 + 28);
  uint64_t v101 = *(void *)(a1 + 8);
  int v10 = *(_DWORD *)(a1 + 256);
  unsigned int v11 = *(_DWORD *)(a1 + 272);
  if (v11 >= 6) {
    unsigned int v11 = 6;
  }
  if (v11 <= 4) {
    unsigned int v11 = 4;
  }
  unsigned int v98 = v11;
  uint64_t v12 = *a3;
  unsigned int v13 = a3[1];
  *(_DWORD *)(a1 + 300) = 0;
  unsigned int v94 = (unsigned __int8 *)(v101 + v9);
  if (v101 + v9 == a4) {
    uint64_t v14 = (char *)(a4 + 1);
  }
  else {
    uint64_t v14 = (char *)a4;
  }
  unint64_t v102 = a4 + a5 - 8;
  if ((unint64_t)v14 < v102)
  {
    unint64_t v15 = (_DWORD *)a1;
    unsigned int v92 = (char *)(v7 + v9);
    char v87 = (unsigned __int8 *)(v7 + v8);
    unsigned int v100 = 1 << v10;
    int v99 = v9 - 1;
    unint64_t v90 = (char *)(v6 - 32);
    unint64_t v96 = a4 + a5;
    uint64_t v93 = v7;
    unsigned int v95 = v9;
    while (1)
    {
      unint64_t v16 = 0;
      uint64_t v17 = v7;
      int v18 = v14 - v101;
      int v19 = v14 - v101 + 1;
      int v20 = v19 - v100;
      if (v19 - v15[7] <= v100 || v15[10] != 0) {
        int v20 = v15[7];
      }
      uint64_t v22 = (v19 - v12);
      if (v22 >= v9) {
        uint64_t v23 = v101;
      }
      else {
        uint64_t v23 = v17;
      }
      if ((v99 - v22) >= 3 && v12 <= v19 - v20)
      {
        if (*(_DWORD *)(v14 + 1) == *(_DWORD *)(v23 + v22))
        {
          if (v22 >= v95) {
            uint64_t v24 = (char *)v6;
          }
          else {
            uint64_t v24 = v92;
          }
          unint64_t v16 = sub_1DD2A6010(v14 + 5, (char *)(v23 + v22 + 4), v6, v24, v94) + 4;
        }
        else
        {
          unint64_t v16 = 0;
        }
      }
      uint64_t v103 = 999999999;
      if (v98 == 6) {
        unint64_t v25 = sub_1DD2C0D88((uint64_t)v15, v14, v6, &v103);
      }
      else {
        unint64_t v25 = v98 == 5 ? sub_1DD2C0A64((uint64_t)v15, v14, v6, &v103) : sub_1DD2C073C((uint64_t)v15, v14, v6, &v103);
      }
      unint64_t v26 = v25 <= v16 ? v16 : v25;
      if (v26 >= 4) {
        break;
      }
      unint64_t v27 = (unint64_t)&v14[-v5];
      v14 += ((unint64_t)&v14[-v5] >> 8) + 1;
      v15[75] = v27 > 0x8FF;
      uint64_t v7 = v93;
      LODWORD(v9) = v95;
LABEL_152:
      if ((unint64_t)v14 >= v102) {
        goto LABEL_153;
      }
    }
    unsigned int v89 = v13;
    if (v25 <= v16) {
      unint64_t v28 = v14 + 1;
    }
    else {
      unint64_t v28 = v14;
    }
    if (v25 <= v16) {
      uint64_t v29 = 1;
    }
    else {
      uint64_t v29 = v103;
    }
    unint64_t v30 = v29;
    int v91 = v28;
    unint64_t v31 = v26;
    if ((unint64_t)v14 < v102)
    {
      do
      {
        unint64_t v28 = v14 + 1;
        int v32 = v18 + 1;
        if (v29)
        {
          uint64_t v33 = a1;
          int v34 = v32 - v100;
          if (v32 - *(_DWORD *)(a1 + 28) <= v100 || *(_DWORD *)(a1 + 40) != 0) {
            int v34 = *(_DWORD *)(a1 + 28);
          }
          uint64_t v36 = (v32 - v12);
          uint64_t v37 = v101;
          if (v36 < v95) {
            uint64_t v37 = v93;
          }
          if ((v99 - v36) >= 3
            && v12 <= v32 - v34
            && (uint64_t v38 = v37 + v36, *v28 == *(_DWORD *)v38))
          {
            unint64_t v39 = v96;
            if (v36 >= v95) {
              unint64_t v40 = (char *)v96;
            }
            else {
              unint64_t v40 = v92;
            }
            unint64_t v41 = sub_1DD2A6010(v14 + 5, (char *)(v38 + 4), v96, v40, v94);
            if (v41 <= 0xFFFFFFFFFFFFFFFBLL && 3 * ((int)v41 + 4) > (int)(__clz(v29) + 3 * v26 - 30))
            {
              uint64_t v29 = 1;
              int v91 = v14 + 1;
              unint64_t v26 = v41 + 4;
            }
          }
          else
          {
            unint64_t v39 = v96;
          }
        }
        else
        {
          unint64_t v39 = v96;
          uint64_t v33 = a1;
        }
        uint64_t v103 = 999999999;
        unint64_t v42 = v14 + 1;
        if (v98 == 6)
        {
          unint64_t v43 = sub_1DD2C0D88(v33, v42, v39, &v103);
        }
        else if (v98 == 5)
        {
          unint64_t v43 = sub_1DD2C0A64(v33, v42, v39, &v103);
        }
        else
        {
          unint64_t v43 = sub_1DD2C073C(v33, v42, v39, &v103);
        }
        unint64_t v31 = v43;
        if (v43 < 4 || (unint64_t v30 = v103, (int)(__clz(v103) + 4 * v43 - 31) <= (int)(__clz(v29) + 4 * v26 - 27)))
        {
          if ((unint64_t)v28 >= v102) {
            goto LABEL_99;
          }
          unint64_t v28 = v14 + 2;
          v18 += 2;
          if (v29)
          {
            uint64_t v44 = a1;
            int v45 = v18 - v100;
            if (v18 - *(_DWORD *)(a1 + 28) <= v100 || *(_DWORD *)(a1 + 40) != 0) {
              int v45 = *(_DWORD *)(a1 + 28);
            }
            uint64_t v47 = (v18 - v12);
            uint64_t v48 = v101;
            if (v47 < v95) {
              uint64_t v48 = v93;
            }
            if ((v99 - v47) < 3)
            {
              unint64_t v49 = v96;
            }
            else
            {
              unint64_t v49 = v96;
              if (v12 <= v18 - v45)
              {
                uint64_t v50 = v48 + v47;
                if (*v28 == *(_DWORD *)v50)
                {
                  uint64_t v51 = v47 >= v95 ? (char *)v96 : v92;
                  unint64_t v52 = sub_1DD2A6010(v14 + 6, (char *)(v50 + 4), v96, v51, v94);
                  if (v52 <= 0xFFFFFFFFFFFFFFFBLL && (int)(__clz(v29) + 4 * v26 - 30) < 4 * ((int)v52 + 4))
                  {
                    uint64_t v29 = 1;
                    int v91 = v14 + 2;
                    unint64_t v26 = v52 + 4;
                  }
                }
              }
            }
          }
          else
          {
            unint64_t v49 = v96;
            uint64_t v44 = a1;
          }
          uint64_t v103 = 999999999;
          int v53 = v14 + 2;
          if (v98 == 6) {
            unint64_t v54 = sub_1DD2C0D88(v44, v53, v49, &v103);
          }
          else {
            unint64_t v54 = v98 == 5 ? sub_1DD2C0A64(v44, v53, v49, &v103) : sub_1DD2C073C(v44, v53, v49, &v103);
          }
          unint64_t v31 = v54;
          if (v54 < 4 || (unint64_t v30 = v103, (int)(__clz(v103) + 4 * v54 - 31) <= (int)(__clz(v29) + 4 * v26 - 24)))
          {
LABEL_99:
            unint64_t v30 = v29;
            unint64_t v28 = v91;
            unint64_t v31 = v26;
            break;
          }
        }
        else
        {
          ++v18;
        }
        uint64_t v14 = (char *)v28;
        unint64_t v26 = v31;
        int v91 = v28;
        uint64_t v29 = v30;
      }
      while ((unint64_t)v28 < v102);
    }
    if (v30 <= 3)
    {
      uint64_t v7 = v93;
      unsigned int v62 = v90;
    }
    else
    {
      uint64_t v55 = v101;
      unsigned int v56 = v28 - (v30 + v101) + 3;
      uint64_t v7 = v93;
      unint64_t v57 = v94;
      if (v95 > v56)
      {
        uint64_t v55 = v93;
        unint64_t v57 = v87;
      }
      if ((unint64_t)v28 > v5 && v55 + (unint64_t)v56 > (unint64_t)v57)
      {
        unint64_t v58 = (unsigned __int8 *)(v55 + (v28 - (v30 + v101) + 3) - 1);
        uint64_t v59 = (unsigned __int8 *)v28 - 1;
        while (*v59 == *v58)
        {
          ++v31;
          long long v60 = v59 - 1;
          if ((unint64_t)v59 > v5)
          {
            --v59;
            if (v58-- > v57) {
              continue;
            }
          }
          unint64_t v28 = v60 + 1;
          goto LABEL_112;
        }
        unint64_t v28 = v59 + 1;
      }
LABEL_112:
      unsigned int v62 = v90;
      unsigned int v89 = v12;
      uint64_t v12 = (v30 - 3);
    }
    uint64_t v63 = (uint64_t)v28 - v5;
    uint64_t v64 = *(_OWORD **)(a2 + 24);
    if (v28 <= (_DWORD *)v62)
    {
      _OWORD *v64 = *(_OWORD *)v5;
      uint64_t v67 = *(void *)(a2 + 24);
      if ((unint64_t)v63 <= 0x10)
      {
        *(void *)(a2 + 24) = v67 + v63;
        uint64_t v65 = *(void *)(a2 + 8);
        goto LABEL_123;
      }
      *(_OWORD *)(v67 + 16) = *(_OWORD *)(v5 + 16);
      if (v63 >= 33)
      {
        unint64_t v68 = v67 + v63;
        uint64_t v69 = (_OWORD *)(v67 + 32);
        int v70 = (long long *)(v5 + 48);
        do
        {
          *uint64_t v69 = *(v70 - 1);
          long long v71 = *v70;
          v70 += 2;
          v69[1] = v71;
          v69 += 2;
        }
        while ((unint64_t)v69 < v68);
      }
    }
    else
    {
      sub_1DD29DBFC(v64, (char *)v5, (unint64_t)v28, v62);
    }
    *(void *)(a2 + 24) += v63;
    uint64_t v65 = *(void *)(a2 + 8);
    if ((unint64_t)v63 >= 0x10000)
    {
      unint64_t v66 = (unint64_t)(v65 - *(void *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v66;
    }
LABEL_123:
    *(_WORD *)(v65 + 4) = v63;
    *(_DWORD *)uint64_t v65 = v30;
    if (v31 - 3 >= 0x10000)
    {
      unint64_t v72 = (unint64_t)(v65 - *(void *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 2;
      *(_DWORD *)(a2 + 76) = v72;
    }
    *(_WORD *)(v65 + 6) = v31 - 3;
    *(void *)(a2 + 8) = v65 + 8;
    LODWORD(v9) = v95;
    if (*(_DWORD *)(a1 + 300)) {
      *(_DWORD *)(a1 + 300) = 0;
    }
    unint64_t v5 = (unint64_t)v28 + v31;
    if ((unint64_t)v28 + v31 <= v102)
    {
      uint64_t v73 = v12;
      uint64_t v74 = v89;
      unint64_t v6 = v96;
      unint64_t v15 = (_DWORD *)a1;
      while (1)
      {
        uint64_t v12 = v74;
        uint64_t v74 = v73;
        int v75 = v5 - v101;
        int v76 = v5 - v101 - v100;
        if ((int)v5 - (int)v101 - *(_DWORD *)(a1 + 28) <= v100 || *(_DWORD *)(a1 + 40) != 0) {
          int v76 = *(_DWORD *)(a1 + 28);
        }
        uint64_t v78 = (v75 - v12);
        uint64_t v79 = v78 >= v95 ? v101 : v7;
        if ((v99 - v78) < 3 || v12 > v75 - v76 || *(_DWORD *)v5 != *(_DWORD *)(v79 + v78)) {
          break;
        }
        if (v78 >= v95) {
          int v80 = (char *)v96;
        }
        else {
          int v80 = v92;
        }
        unint64_t v81 = sub_1DD2A6010((void *)(v5 + 4), (char *)(v79 + v78 + 4), v96, v80, v94);
        int v82 = *(_OWORD **)(a2 + 24);
        if (v5 <= (unint64_t)v90) {
          *int v82 = *(_OWORD *)v5;
        }
        else {
          sub_1DD29DBFC(v82, (char *)v5, v5, v90);
        }
        uint64_t v83 = *(void *)(a2 + 8);
        *(_WORD *)(v83 + 4) = 0;
        *(_DWORD *)uint64_t v83 = 1;
        if (v81 + 1 >= 0x10000)
        {
          unint64_t v84 = (unint64_t)(v83 - *(void *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v84;
        }
        *(_WORD *)(v83 + 6) = v81 + 1;
        v5 += v81 + 4;
        *(void *)(a2 + 8) = v83 + 8;
        uint64_t v73 = v12;
        unsigned int v13 = v74;
        uint64_t v14 = (char *)v5;
        if (v5 > v102) {
          goto LABEL_152;
        }
      }
      unsigned int v13 = v12;
      uint64_t v12 = v73;
      uint64_t v14 = (char *)v5;
    }
    else
    {
      uint64_t v14 = (char *)v28 + v31;
      unint64_t v6 = v96;
      unint64_t v15 = (_DWORD *)a1;
      unsigned int v13 = v89;
    }
    goto LABEL_152;
  }
LABEL_153:
  *a3 = v12;
  a3[1] = v13;
  return v6 - v5;
}

unint64_t sub_1DD2BA74C(uint64_t a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  unint64_t v5 = a4;
  unint64_t v6 = a4 + a5;
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v9 = *(unsigned int *)(a1 + 24);
  uint64_t v8 = *(unsigned int *)(a1 + 28);
  uint64_t v101 = *(void *)(a1 + 8);
  int v10 = *(_DWORD *)(a1 + 256);
  unsigned int v11 = *(_DWORD *)(a1 + 272);
  if (v11 >= 6) {
    unsigned int v11 = 6;
  }
  if (v11 <= 4) {
    unsigned int v11 = 4;
  }
  unsigned int v98 = v11;
  uint64_t v12 = *a3;
  unsigned int v13 = a3[1];
  *(_DWORD *)(a1 + 300) = 0;
  unsigned int v94 = (unsigned __int8 *)(v101 + v9);
  if (v101 + v9 == a4) {
    uint64_t v14 = (char *)(a4 + 1);
  }
  else {
    uint64_t v14 = (char *)a4;
  }
  unint64_t v102 = a4 + a5 - 8;
  if ((unint64_t)v14 < v102)
  {
    unint64_t v15 = (_DWORD *)a1;
    unsigned int v92 = (char *)(v7 + v9);
    char v87 = (unsigned __int8 *)(v7 + v8);
    unsigned int v100 = 1 << v10;
    int v99 = v9 - 1;
    unint64_t v90 = (char *)(v6 - 32);
    unint64_t v96 = a4 + a5;
    uint64_t v93 = v7;
    unsigned int v95 = v9;
    while (1)
    {
      unint64_t v16 = 0;
      uint64_t v17 = v7;
      int v18 = v14 - v101;
      int v19 = v14 - v101 + 1;
      int v20 = v19 - v100;
      if (v19 - v15[7] <= v100 || v15[10] != 0) {
        int v20 = v15[7];
      }
      uint64_t v22 = (v19 - v12);
      if (v22 >= v9) {
        uint64_t v23 = v101;
      }
      else {
        uint64_t v23 = v17;
      }
      if ((v99 - v22) >= 3 && v12 <= v19 - v20)
      {
        if (*(_DWORD *)(v14 + 1) == *(_DWORD *)(v23 + v22))
        {
          if (v22 >= v95) {
            uint64_t v24 = (char *)v6;
          }
          else {
            uint64_t v24 = v92;
          }
          unint64_t v16 = sub_1DD2A6010(v14 + 5, (char *)(v23 + v22 + 4), v6, v24, v94) + 4;
        }
        else
        {
          unint64_t v16 = 0;
        }
      }
      uint64_t v103 = 999999999;
      if (v98 == 6) {
        unint64_t v25 = sub_1DD2C11C4((uint64_t)v15, (uint64_t *)v14, v6, (unsigned int *)&v103);
      }
      else {
        unint64_t v25 = v98 == 5
      }
            ? sub_1DD2C1138((uint64_t)v15, (uint64_t *)v14, v6, (unsigned int *)&v103)
            : sub_1DD2C10AC((uint64_t)v15, (uint64_t *)v14, v6, (unsigned int *)&v103);
      unint64_t v26 = v25 <= v16 ? v16 : v25;
      if (v26 >= 4) {
        break;
      }
      unint64_t v27 = (unint64_t)&v14[-v5];
      v14 += ((unint64_t)&v14[-v5] >> 8) + 1;
      v15[75] = v27 > 0x8FF;
      uint64_t v7 = v93;
      LODWORD(v9) = v95;
LABEL_152:
      if ((unint64_t)v14 >= v102) {
        goto LABEL_153;
      }
    }
    unsigned int v89 = v13;
    if (v25 <= v16) {
      unint64_t v28 = v14 + 1;
    }
    else {
      unint64_t v28 = v14;
    }
    if (v25 <= v16) {
      uint64_t v29 = 1;
    }
    else {
      uint64_t v29 = v103;
    }
    unint64_t v30 = v29;
    int v91 = v28;
    unint64_t v31 = v26;
    if ((unint64_t)v14 < v102)
    {
      do
      {
        unint64_t v28 = v14 + 1;
        int v32 = v18 + 1;
        if (v29)
        {
          uint64_t v33 = a1;
          int v34 = v32 - v100;
          if (v32 - *(_DWORD *)(a1 + 28) <= v100 || *(_DWORD *)(a1 + 40) != 0) {
            int v34 = *(_DWORD *)(a1 + 28);
          }
          uint64_t v36 = (v32 - v12);
          uint64_t v37 = v101;
          if (v36 < v95) {
            uint64_t v37 = v93;
          }
          if ((v99 - v36) >= 3
            && v12 <= v32 - v34
            && (uint64_t v38 = v37 + v36, *v28 == *(_DWORD *)v38))
          {
            unint64_t v39 = v96;
            if (v36 >= v95) {
              unint64_t v40 = (char *)v96;
            }
            else {
              unint64_t v40 = v92;
            }
            unint64_t v41 = sub_1DD2A6010(v14 + 5, (char *)(v38 + 4), v96, v40, v94);
            if (v41 <= 0xFFFFFFFFFFFFFFFBLL && 3 * ((int)v41 + 4) > (int)(__clz(v29) + 3 * v26 - 30))
            {
              uint64_t v29 = 1;
              int v91 = v14 + 1;
              unint64_t v26 = v41 + 4;
            }
          }
          else
          {
            unint64_t v39 = v96;
          }
        }
        else
        {
          unint64_t v39 = v96;
          uint64_t v33 = a1;
        }
        uint64_t v103 = 999999999;
        unint64_t v42 = (uint64_t *)(v14 + 1);
        if (v98 == 6)
        {
          unint64_t v43 = sub_1DD2C11C4(v33, v42, v39, (unsigned int *)&v103);
        }
        else if (v98 == 5)
        {
          unint64_t v43 = sub_1DD2C1138(v33, v42, v39, (unsigned int *)&v103);
        }
        else
        {
          unint64_t v43 = sub_1DD2C10AC(v33, v42, v39, (unsigned int *)&v103);
        }
        unint64_t v31 = v43;
        if (v43 < 4 || (unint64_t v30 = v103, (int)(__clz(v103) + 4 * v43 - 31) <= (int)(__clz(v29) + 4 * v26 - 27)))
        {
          if ((unint64_t)v28 >= v102) {
            goto LABEL_99;
          }
          unint64_t v28 = v14 + 2;
          v18 += 2;
          if (v29)
          {
            uint64_t v44 = a1;
            int v45 = v18 - v100;
            if (v18 - *(_DWORD *)(a1 + 28) <= v100 || *(_DWORD *)(a1 + 40) != 0) {
              int v45 = *(_DWORD *)(a1 + 28);
            }
            uint64_t v47 = (v18 - v12);
            uint64_t v48 = v101;
            if (v47 < v95) {
              uint64_t v48 = v93;
            }
            if ((v99 - v47) < 3)
            {
              unint64_t v49 = v96;
            }
            else
            {
              unint64_t v49 = v96;
              if (v12 <= v18 - v45)
              {
                uint64_t v50 = v48 + v47;
                if (*v28 == *(_DWORD *)v50)
                {
                  uint64_t v51 = v47 >= v95 ? (char *)v96 : v92;
                  unint64_t v52 = sub_1DD2A6010(v14 + 6, (char *)(v50 + 4), v96, v51, v94);
                  if (v52 <= 0xFFFFFFFFFFFFFFFBLL && (int)(__clz(v29) + 4 * v26 - 30) < 4 * ((int)v52 + 4))
                  {
                    uint64_t v29 = 1;
                    int v91 = v14 + 2;
                    unint64_t v26 = v52 + 4;
                  }
                }
              }
            }
          }
          else
          {
            unint64_t v49 = v96;
            uint64_t v44 = a1;
          }
          uint64_t v103 = 999999999;
          int v53 = (uint64_t *)(v14 + 2);
          if (v98 == 6) {
            unint64_t v54 = sub_1DD2C11C4(v44, v53, v49, (unsigned int *)&v103);
          }
          else {
            unint64_t v54 = v98 == 5
          }
                ? sub_1DD2C1138(v44, v53, v49, (unsigned int *)&v103)
                : sub_1DD2C10AC(v44, v53, v49, (unsigned int *)&v103);
          unint64_t v31 = v54;
          if (v54 < 4 || (unint64_t v30 = v103, (int)(__clz(v103) + 4 * v54 - 31) <= (int)(__clz(v29) + 4 * v26 - 24)))
          {
LABEL_99:
            unint64_t v30 = v29;
            unint64_t v28 = v91;
            unint64_t v31 = v26;
            break;
          }
        }
        else
        {
          ++v18;
        }
        uint64_t v14 = (char *)v28;
        unint64_t v26 = v31;
        int v91 = v28;
        uint64_t v29 = v30;
      }
      while ((unint64_t)v28 < v102);
    }
    if (v30 <= 3)
    {
      uint64_t v7 = v93;
      unsigned int v62 = v90;
    }
    else
    {
      uint64_t v55 = v101;
      unsigned int v56 = v28 - (v30 + v101) + 3;
      uint64_t v7 = v93;
      unint64_t v57 = v94;
      if (v95 > v56)
      {
        uint64_t v55 = v93;
        unint64_t v57 = v87;
      }
      if ((unint64_t)v28 > v5 && v55 + (unint64_t)v56 > (unint64_t)v57)
      {
        unint64_t v58 = (unsigned __int8 *)(v55 + (v28 - (v30 + v101) + 3) - 1);
        uint64_t v59 = (unsigned __int8 *)v28 - 1;
        while (*v59 == *v58)
        {
          ++v31;
          long long v60 = v59 - 1;
          if ((unint64_t)v59 > v5)
          {
            --v59;
            if (v58-- > v57) {
              continue;
            }
          }
          unint64_t v28 = v60 + 1;
          goto LABEL_112;
        }
        unint64_t v28 = v59 + 1;
      }
LABEL_112:
      unsigned int v62 = v90;
      unsigned int v89 = v12;
      uint64_t v12 = (v30 - 3);
    }
    uint64_t v63 = (uint64_t)v28 - v5;
    uint64_t v64 = *(_OWORD **)(a2 + 24);
    if (v28 <= (_DWORD *)v62)
    {
      _OWORD *v64 = *(_OWORD *)v5;
      uint64_t v67 = *(void *)(a2 + 24);
      if ((unint64_t)v63 <= 0x10)
      {
        *(void *)(a2 + 24) = v67 + v63;
        uint64_t v65 = *(void *)(a2 + 8);
        goto LABEL_123;
      }
      *(_OWORD *)(v67 + 16) = *(_OWORD *)(v5 + 16);
      if (v63 >= 33)
      {
        unint64_t v68 = v67 + v63;
        uint64_t v69 = (_OWORD *)(v67 + 32);
        int v70 = (long long *)(v5 + 48);
        do
        {
          *uint64_t v69 = *(v70 - 1);
          long long v71 = *v70;
          v70 += 2;
          v69[1] = v71;
          v69 += 2;
        }
        while ((unint64_t)v69 < v68);
      }
    }
    else
    {
      sub_1DD29DBFC(v64, (char *)v5, (unint64_t)v28, v62);
    }
    *(void *)(a2 + 24) += v63;
    uint64_t v65 = *(void *)(a2 + 8);
    if ((unint64_t)v63 >= 0x10000)
    {
      unint64_t v66 = (unint64_t)(v65 - *(void *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v66;
    }
LABEL_123:
    *(_WORD *)(v65 + 4) = v63;
    *(_DWORD *)uint64_t v65 = v30;
    if (v31 - 3 >= 0x10000)
    {
      unint64_t v72 = (unint64_t)(v65 - *(void *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 2;
      *(_DWORD *)(a2 + 76) = v72;
    }
    *(_WORD *)(v65 + 6) = v31 - 3;
    *(void *)(a2 + 8) = v65 + 8;
    LODWORD(v9) = v95;
    if (*(_DWORD *)(a1 + 300)) {
      *(_DWORD *)(a1 + 300) = 0;
    }
    unint64_t v5 = (unint64_t)v28 + v31;
    if ((unint64_t)v28 + v31 <= v102)
    {
      uint64_t v73 = v12;
      uint64_t v74 = v89;
      unint64_t v6 = v96;
      unint64_t v15 = (_DWORD *)a1;
      while (1)
      {
        uint64_t v12 = v74;
        uint64_t v74 = v73;
        int v75 = v5 - v101;
        int v76 = v5 - v101 - v100;
        if ((int)v5 - (int)v101 - *(_DWORD *)(a1 + 28) <= v100 || *(_DWORD *)(a1 + 40) != 0) {
          int v76 = *(_DWORD *)(a1 + 28);
        }
        uint64_t v78 = (v75 - v12);
        uint64_t v79 = v78 >= v95 ? v101 : v7;
        if ((v99 - v78) < 3 || v12 > v75 - v76 || *(_DWORD *)v5 != *(_DWORD *)(v79 + v78)) {
          break;
        }
        if (v78 >= v95) {
          int v80 = (char *)v96;
        }
        else {
          int v80 = v92;
        }
        unint64_t v81 = sub_1DD2A6010((void *)(v5 + 4), (char *)(v79 + v78 + 4), v96, v80, v94);
        int v82 = *(_OWORD **)(a2 + 24);
        if (v5 <= (unint64_t)v90) {
          *int v82 = *(_OWORD *)v5;
        }
        else {
          sub_1DD29DBFC(v82, (char *)v5, v5, v90);
        }
        uint64_t v83 = *(void *)(a2 + 8);
        *(_WORD *)(v83 + 4) = 0;
        *(_DWORD *)uint64_t v83 = 1;
        if (v81 + 1 >= 0x10000)
        {
          unint64_t v84 = (unint64_t)(v83 - *(void *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v84;
        }
        *(_WORD *)(v83 + 6) = v81 + 1;
        v5 += v81 + 4;
        *(void *)(a2 + 8) = v83 + 8;
        uint64_t v73 = v12;
        unsigned int v13 = v74;
        uint64_t v14 = (char *)v5;
        if (v5 > v102) {
          goto LABEL_152;
        }
      }
      unsigned int v13 = v12;
      uint64_t v12 = v73;
      uint64_t v14 = (char *)v5;
    }
    else
    {
      uint64_t v14 = (char *)v28 + v31;
      unint64_t v6 = v96;
      unint64_t v15 = (_DWORD *)a1;
      unsigned int v13 = v89;
    }
    goto LABEL_152;
  }
LABEL_153:
  *a3 = v12;
  a3[1] = v13;
  return v6 - v5;
}

unint64_t sub_1DD2BAF68(uint64_t a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  unint64_t v5 = a4;
  unint64_t v121 = a4 + a5;
  unint64_t v8 = a4 + a5 - 16;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v124 = *(void *)(a1 + 16);
  uint64_t v10 = *(unsigned int *)(a1 + 28);
  uint64_t v126 = *(unsigned int *)(a1 + 24);
  int v11 = *(_DWORD *)(a1 + 256);
  unsigned int v12 = *(_DWORD *)(a1 + 272);
  if (v12 >= 6) {
    unsigned int v12 = 6;
  }
  if (v12 <= 4) {
    int v13 = 4;
  }
  else {
    int v13 = v12;
  }
  unsigned int v14 = *(_DWORD *)(a1 + 268);
  if (v14 >= 6) {
    unsigned int v14 = 6;
  }
  unsigned int v118 = v14;
  if (v14 <= 4) {
    int v15 = 4;
  }
  else {
    int v15 = v14;
  }
  uint64_t v16 = *a3;
  uint64_t v17 = a3[1];
  *(_DWORD *)(a1 + 300) = 0;
  uint64_t v119 = (void *)(v9 + v126);
  if (v9 + v126 == a4) {
    unint64_t v18 = a4 + 1;
  }
  else {
    unint64_t v18 = a4;
  }
  uint64_t v19 = *(unsigned int *)(a1 + 44);
  int v20 = v8 - (v9 + v19);
  if ((v20 + 1) < 8) {
    int v21 = v20 + 1;
  }
  else {
    int v21 = 8;
  }
  unint64_t v125 = a4 + a5 - 16;
  if (v8 >= v9 + v19) {
    int v22 = v21;
  }
  else {
    int v22 = 0;
  }
  uint64_t v23 = (v22 + v19);
  if (v19 < v23)
  {
    uint64_t v24 = *(void *)(a1 + 112);
    uint64_t v25 = *(void *)(a1 + 56);
    int v26 = *(_DWORD *)(a1 + 52);
    uint64_t v27 = *(void *)(a1 + 96);
    char v28 = 56 - v26;
    char v29 = 24 - v26;
    do
    {
      if (v13 == 5)
      {
        unint64_t v30 = 0xCF1BBCDCBB000000 * *(void *)(v9 + v19);
      }
      else
      {
        if (v13 != 6)
        {
          LODWORD(v31) = ((-1640531535 * *(_DWORD *)(v9 + v19)) ^ v27) >> v29;
          goto LABEL_28;
        }
        unint64_t v30 = 0xCF1BBCDCBF9B0000 * *(void *)(v9 + v19);
      }
      unint64_t v31 = (v30 ^ v27) >> v28;
LABEL_28:
      uint64_t v32 = v31 >> 8 << v15;
      _X4 = v24 + 4 * v32;
      __asm { PRFM            #0, [X4] }
      if (v118 > 4)
      {
        __asm { PRFM            #0, [X4,#0x40] }
        _X3 = v25 + v32;
        __asm { PRFM            #0, [X3] }
        if (v15 == 6) {
          __asm { PRFM            #0, [X3,#0x20] }
        }
      }
      else
      {
        _X3 = v25 + v32;
        __asm { PRFM            #0, [X3] }
      }
      *(_DWORD *)(a1 + 4 * (v19++ & 7) + 64) = v31;
    }
    while (v23 != v19);
  }
  if (v18 < v125)
  {
    unint64_t v115 = v124 + v10;
    int v122 = v126 - 1;
    unsigned int v123 = 1 << v11;
    unint64_t v120 = (char *)(v121 - 32);
    do
    {
      int v44 = v18 - v9 + 1;
      int v45 = v44 - v123;
      if (v44 - *(_DWORD *)(a1 + 28) <= v123 || *(_DWORD *)(a1 + 40) != 0) {
        int v45 = *(_DWORD *)(a1 + 28);
      }
      uint64_t v47 = (v44 - v16);
      uint64_t v48 = v124;
      if (v47 >= v126) {
        uint64_t v48 = v9;
      }
      if ((v122 - v47) >= 3
        && v16 <= v44 - v45
        && *(_DWORD *)(v18 + 1) == *(_DWORD *)(v48 + v47))
      {
        if (v47 >= v126) {
          unint64_t v49 = (char *)v121;
        }
        else {
          unint64_t v49 = (char *)(v124 + v126);
        }
        unint64_t v50 = sub_1DD2A6010((void *)(v18 + 5), (char *)(v48 + v47 + 4), v121, v49, v119);
        unint64_t v51 = v18 + 1;
        unint64_t v52 = v50 + 4;
        LODWORD(v53) = 1;
LABEL_88:
        uint64_t v65 = (char *)(v121 - 32);
        goto LABEL_91;
      }
      uint64_t v127 = 999999999;
      if (v13 == 6)
      {
        if (v15 == 6)
        {
          unint64_t v54 = v18 + 1;
          unint64_t v55 = sub_1DD2C4318(a1, (void *)v18, v121, &v127);
          goto LABEL_65;
        }
        if (v15 == 5)
        {
          unint64_t v54 = v18 + 1;
          unint64_t v55 = sub_1DD2C3CF8(a1, (void *)v18, v121, &v127);
          goto LABEL_65;
        }
        unint64_t v116 = v18 + 1;
        unint64_t v56 = sub_1DD2C36F0(a1, (void *)v18, v121, &v127);
      }
      else if (v13 == 5)
      {
        if (v15 == 6)
        {
          unint64_t v54 = v18 + 1;
          unint64_t v55 = sub_1DD2C30BC(a1, (void *)v18, v121, &v127);
          goto LABEL_65;
        }
        if (v15 == 5)
        {
          unint64_t v54 = v18 + 1;
          unint64_t v55 = sub_1DD2C2A9C(a1, (void *)v18, v121, &v127);
LABEL_65:
          unint64_t v51 = v54;
          unint64_t v52 = v55;
          goto LABEL_68;
        }
        unint64_t v116 = v18 + 1;
        unint64_t v56 = sub_1DD2C2494(a1, (void *)v18, v121, &v127);
      }
      else
      {
        if (v15 == 6)
        {
          unint64_t v54 = v18 + 1;
          unint64_t v55 = sub_1DD2C1E68(a1, (_DWORD *)v18, v121, &v127);
          goto LABEL_65;
        }
        if (v15 == 5)
        {
          unint64_t v54 = v18 + 1;
          unint64_t v55 = sub_1DD2C1850(a1, (_DWORD *)v18, v121, &v127);
          goto LABEL_65;
        }
        unint64_t v116 = v18 + 1;
        unint64_t v56 = sub_1DD2C1250(a1, (_DWORD *)v18, v121, &v127);
      }
      unint64_t v52 = v56;
      unint64_t v51 = v116;
LABEL_68:
      if (v52) {
        unint64_t v53 = v127;
      }
      else {
        unint64_t v53 = 1;
      }
      if (v52) {
        unint64_t v51 = v18;
      }
      if (v52 <= 3)
      {
        unint64_t v57 = v18 - v5;
        v18 += ((v18 - v5) >> 8) + 1;
        *(_DWORD *)(a1 + 300) = v57 > 0x8FF;
        continue;
      }
      if (v53 < 4) {
        goto LABEL_88;
      }
      unsigned int v58 = v51 - (v53 + v9) + 3;
      if (v126 <= v58) {
        uint64_t v59 = v9;
      }
      else {
        uint64_t v59 = v124;
      }
      unint64_t v60 = v9 + v126;
      if (v126 > v58) {
        unint64_t v60 = v115;
      }
      if (v51 > v5 && v59 + (unint64_t)v58 > v60)
      {
        unint64_t v61 = (unsigned __int8 *)(v59 + (v51 - (v53 + v9) + 3) - 1);
        unsigned int v62 = (unsigned __int8 *)(v51 - 1);
        while (*v62 == *v61)
        {
          ++v52;
          uint64_t v63 = v62 - 1;
          if ((unint64_t)v62 > v5)
          {
            --v62;
            if ((unint64_t)v61-- > v60) {
              continue;
            }
          }
          unint64_t v51 = (unint64_t)(v63 + 1);
          goto LABEL_90;
        }
        unint64_t v51 = (unint64_t)(v62 + 1);
      }
LABEL_90:
      uint64_t v65 = (char *)(v121 - 32);
      uint64_t v17 = v16;
      uint64_t v16 = (v53 - 3);
LABEL_91:
      uint64_t v66 = v51 - v5;
      uint64_t v67 = *(_OWORD **)(a2 + 24);
      if (v51 > (unint64_t)v65)
      {
        unint64_t v68 = (char *)v5;
        unint64_t v117 = v51;
        int v69 = v53;
        sub_1DD29DBFC(v67, v68, v51, v65);
        LODWORD(v53) = v69;
        unsigned int v70 = v118;
LABEL_97:
        *(void *)(a2 + 24) += v66;
        uint64_t v76 = *(void *)(a2 + 8);
        if ((unint64_t)v66 >= 0x10000)
        {
          unint64_t v77 = (unint64_t)(v76 - *(void *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 1;
          *(_DWORD *)(a2 + 76) = v77;
        }
        unint64_t v51 = v117;
        goto LABEL_101;
      }
      *uint64_t v67 = *(_OWORD *)v5;
      uint64_t v71 = *(void *)(a2 + 24);
      if ((unint64_t)v66 > 0x10)
      {
        unint64_t v117 = v51;
        *(_OWORD *)(v71 + 16) = *(_OWORD *)(v5 + 16);
        unsigned int v70 = v118;
        if (v66 >= 33)
        {
          unint64_t v72 = v71 + v66;
          uint64_t v73 = (_OWORD *)(v71 + 32);
          uint64_t v74 = (long long *)(v5 + 48);
          do
          {
            _OWORD *v73 = *(v74 - 1);
            long long v75 = *v74;
            v74 += 2;
            v73[1] = v75;
            v73 += 2;
          }
          while ((unint64_t)v73 < v72);
        }
        goto LABEL_97;
      }
      *(void *)(a2 + 24) = v71 + v66;
      uint64_t v76 = *(void *)(a2 + 8);
      unsigned int v70 = v118;
LABEL_101:
      *(_WORD *)(v76 + 4) = v66;
      *(_DWORD *)uint64_t v76 = v53;
      if (v52 - 3 >= 0x10000)
      {
        unint64_t v78 = (unint64_t)(v76 - *(void *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 2;
        *(_DWORD *)(a2 + 76) = v78;
      }
      *(_WORD *)(v76 + 6) = v52 - 3;
      *(void *)(a2 + 8) = v76 + 8;
      if (*(_DWORD *)(a1 + 300))
      {
        uint64_t v79 = *(unsigned int *)(a1 + 44);
        int v80 = v125 - (v9 + v79);
        if ((v80 + 1) < 8) {
          int v81 = v80 + 1;
        }
        else {
          int v81 = 8;
        }
        if (v125 >= v9 + v79) {
          int v82 = v81;
        }
        else {
          int v82 = 0;
        }
        uint64_t v83 = (v82 + v79);
        if (v79 < v83)
        {
          uint64_t v84 = *(void *)(a1 + 112);
          uint64_t v85 = *(void *)(a1 + 56);
          int v86 = *(_DWORD *)(a1 + 52);
          uint64_t v87 = *(void *)(a1 + 96);
          char v88 = 56 - v86;
          char v89 = 24 - v86;
          do
          {
            if (v13 == 5)
            {
              unint64_t v90 = 0xCF1BBCDCBB000000 * *(void *)(v9 + v79);
            }
            else
            {
              if (v13 != 6)
              {
                LODWORD(v91) = ((-1640531535 * *(_DWORD *)(v9 + v79)) ^ v87) >> v89;
                goto LABEL_118;
              }
              unint64_t v90 = 0xCF1BBCDCBF9B0000 * *(void *)(v9 + v79);
            }
            unint64_t v91 = (v90 ^ v87) >> v88;
LABEL_118:
            uint64_t v92 = v91 >> 8 << v15;
            _X17 = v84 + 4 * v92;
            __asm { PRFM            #0, [X17] }
            if (v70 > 4)
            {
              __asm { PRFM            #0, [X17,#0x40] }
              _X16 = v85 + v92;
              __asm { PRFM            #0, [X16] }
              if (v15 == 6) {
                __asm { PRFM            #0, [X16,#0x20] }
              }
            }
            else
            {
              _X16 = v85 + v92;
              __asm { PRFM            #0, [X16] }
            }
            *(_DWORD *)(a1 + 4 * (v79++ & 7) + 64) = v91;
          }
          while (v83 != v79);
        }
        *(_DWORD *)(a1 + 300) = 0;
      }
      unint64_t v5 = v51 + v52;
      if (v51 + v52 <= v125)
      {
        uint64_t v101 = v16;
        uint64_t v102 = v17;
        while (1)
        {
          uint64_t v16 = v102;
          uint64_t v102 = v101;
          int v103 = v5 - v9;
          int v104 = v5 - v9 - v123;
          if ((int)v5 - (int)v9 - *(_DWORD *)(a1 + 28) <= v123 || *(_DWORD *)(a1 + 40) != 0) {
            int v104 = *(_DWORD *)(a1 + 28);
          }
          uint64_t v106 = (v103 - v16);
          uint64_t v107 = v124;
          if (v106 >= v126) {
            uint64_t v107 = v9;
          }
          if ((v122 - v106) < 3
            || v16 > v103 - v104
            || *(_DWORD *)v5 != *(_DWORD *)(v107 + v106))
          {
            break;
          }
          if (v106 >= v126) {
            uint64_t v108 = (char *)v121;
          }
          else {
            uint64_t v108 = (char *)(v124 + v126);
          }
          unint64_t v109 = sub_1DD2A6010((void *)(v5 + 4), (char *)(v107 + v106 + 4), v121, v108, v119);
          uint64_t v110 = *(_OWORD **)(a2 + 24);
          if (v5 <= (unint64_t)v120) {
            _OWORD *v110 = *(_OWORD *)v5;
          }
          else {
            sub_1DD29DBFC(v110, (char *)v5, v5, v120);
          }
          uint64_t v111 = *(void *)(a2 + 8);
          *(_WORD *)(v111 + 4) = 0;
          *(_DWORD *)uint64_t v111 = 1;
          if (v109 + 1 >= 0x10000)
          {
            unint64_t v112 = (unint64_t)(v111 - *(void *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 2;
            *(_DWORD *)(a2 + 76) = v112;
          }
          *(_WORD *)(v111 + 6) = v109 + 1;
          v5 += v109 + 4;
          *(void *)(a2 + 8) = v111 + 8;
          uint64_t v101 = v16;
          uint64_t v17 = v102;
          unint64_t v18 = v5;
          if (v5 > v125) {
            goto LABEL_148;
          }
        }
        uint64_t v17 = v16;
        uint64_t v16 = v101;
      }
      unint64_t v18 = v5;
LABEL_148:
      ;
    }
    while (v18 < v125);
  }
  *a3 = v16;
  a3[1] = v17;
  return v121 - v5;
}

unint64_t sub_1DD2BB7D0(uint64_t a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  unint64_t v5 = a4;
  unint64_t v8 = a4 + a5;
  unint64_t v9 = a4 + a5 - 16;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v13 = *(unsigned int *)(a1 + 24);
  uint64_t v12 = *(unsigned int *)(a1 + 28);
  int v14 = *(_DWORD *)(a1 + 256);
  unsigned int v15 = *(_DWORD *)(a1 + 272);
  if (v15 >= 6) {
    unsigned int v15 = 6;
  }
  if (v15 <= 4) {
    unsigned int v15 = 4;
  }
  unsigned int v148 = v15;
  if (*(_DWORD *)(a1 + 268) >= 6u) {
    unsigned int v16 = 6;
  }
  else {
    unsigned int v16 = *(_DWORD *)(a1 + 268);
  }
  if (v16 <= 4) {
    int v17 = 4;
  }
  else {
    int v17 = v16;
  }
  uint64_t v18 = *a3;
  unsigned int v139 = a3[1];
  *(_DWORD *)(a1 + 300) = 0;
  unsigned int v144 = (unsigned __int8 *)(v10 + v13);
  if (v10 + v13 == a4) {
    unint64_t v19 = a4 + 1;
  }
  else {
    unint64_t v19 = a4;
  }
  uint64_t v20 = *(unsigned int *)(a1 + 44);
  int v21 = v9 - (v10 + v20);
  if ((v21 + 1) < 8) {
    int v22 = v21 + 1;
  }
  else {
    int v22 = 8;
  }
  unint64_t v149 = a4 + a5 - 16;
  if (v9 >= v10 + v20) {
    int v23 = v22;
  }
  else {
    int v23 = 0;
  }
  uint64_t v24 = (v23 + v20);
  if (v20 < v24)
  {
    uint64_t v25 = *(void *)(a1 + 112);
    uint64_t v26 = *(void *)(a1 + 56);
    int v27 = *(_DWORD *)(a1 + 52);
    uint64_t v28 = *(void *)(a1 + 96);
    char v29 = 56 - v27;
    char v30 = 24 - v27;
    do
    {
      if (v148 == 5)
      {
        unint64_t v31 = 0xCF1BBCDCBB000000 * *(void *)(v10 + v20);
      }
      else
      {
        if (v148 != 6)
        {
          LODWORD(v32) = ((-1640531535 * *(_DWORD *)(v10 + v20)) ^ v28) >> v30;
          goto LABEL_28;
        }
        unint64_t v31 = 0xCF1BBCDCBF9B0000 * *(void *)(v10 + v20);
      }
      unint64_t v32 = (v31 ^ v28) >> v29;
LABEL_28:
      uint64_t v33 = v32 >> 8 << v17;
      _X4 = v25 + 4 * v33;
      __asm { PRFM            #0, [X4] }
      if (v16 > 4)
      {
        __asm { PRFM            #0, [X4,#0x40] }
        _X3 = v26 + v33;
        __asm { PRFM            #0, [X3] }
        if (v17 == 6) {
          __asm { PRFM            #0, [X3,#0x20] }
        }
      }
      else
      {
        _X3 = v26 + v33;
        __asm { PRFM            #0, [X3] }
      }
      *(_DWORD *)(a1 + 4 * (v20++ & 7) + 64) = v32;
    }
    while (v24 != v20);
  }
  if (v19 < v9)
  {
    int v146 = v17;
    unsigned int v135 = v16;
    uint64_t v140 = (char *)(v11 + v13);
    uint64_t v133 = (unsigned __int8 *)(v11 + v12);
    int v145 = v13 - 1;
    uint64_t v141 = (char *)(v8 - 32);
    unsigned int v147 = 1 << v14;
    int v132 = 1 - v10 - (1 << v14);
    int v131 = 1 - v10;
    int v130 = v13 + v10 - 2;
    unsigned int v142 = v13;
    unint64_t v143 = v8;
    uint64_t v134 = a2;
    uint64_t v137 = v11;
    uint64_t v138 = v10;
    do
    {
      uint64_t v45 = v10;
      unint64_t v46 = 0;
      int v47 = v19 - v45 + 1;
      int v48 = v47 - v147;
      if (v47 - *(_DWORD *)(a1 + 28) <= v147 || *(_DWORD *)(a1 + 40) != 0) {
        int v48 = *(_DWORD *)(a1 + 28);
      }
      uint64_t v50 = (v47 - v18);
      if (v50 >= v13) {
        uint64_t v51 = v45;
      }
      else {
        uint64_t v51 = v11;
      }
      unsigned int v52 = v148;
      if ((v145 - v50) >= 3 && v18 <= v47 - v48)
      {
        if (*(_DWORD *)(v19 + 1) == *(_DWORD *)(v51 + v50))
        {
          if (v50 >= v13) {
            unint64_t v53 = (char *)v8;
          }
          else {
            unint64_t v53 = v140;
          }
          unint64_t v46 = sub_1DD2A6010((void *)(v19 + 5), (char *)(v51 + v50 + 4), v8, v53, v144) + 4;
          unsigned int v52 = v148;
        }
        else
        {
          unint64_t v46 = 0;
        }
      }
      *(void *)v150 = 999999999;
      if (v52 == 6)
      {
        if (v146 == 6)
        {
          unint64_t v54 = sub_1DD2C4318(a1, (void *)v19, v8, v150);
        }
        else if (v146 == 5)
        {
          unint64_t v54 = sub_1DD2C3CF8(a1, (void *)v19, v8, v150);
        }
        else
        {
          unint64_t v54 = sub_1DD2C36F0(a1, (void *)v19, v8, v150);
        }
      }
      else if (v52 == 5)
      {
        if (v146 == 6)
        {
          unint64_t v54 = sub_1DD2C30BC(a1, (void *)v19, v8, v150);
        }
        else if (v146 == 5)
        {
          unint64_t v54 = sub_1DD2C2A9C(a1, (void *)v19, v8, v150);
        }
        else
        {
          unint64_t v54 = sub_1DD2C2494(a1, (void *)v19, v8, v150);
        }
      }
      else if (v146 == 6)
      {
        unint64_t v54 = sub_1DD2C1E68(a1, (_DWORD *)v19, v8, v150);
      }
      else if (v146 == 5)
      {
        unint64_t v54 = sub_1DD2C1850(a1, (_DWORD *)v19, v8, v150);
      }
      else
      {
        unint64_t v54 = sub_1DD2C1250(a1, (_DWORD *)v19, v8, v150);
      }
      if (v54 <= v46) {
        unint64_t v55 = v46;
      }
      else {
        unint64_t v55 = v54;
      }
      if (v55 < 4)
      {
        unint64_t v56 = v19 - v5;
        v19 += ((v19 - v5) >> 8) + 1;
        *(_DWORD *)(a1 + 300) = v56 > 0x8FF;
        uint64_t v10 = v138;
        goto LABEL_171;
      }
      if (v54 <= v46) {
        unint64_t v57 = v19 + 1;
      }
      else {
        unint64_t v57 = v19;
      }
      if (v54 <= v46) {
        unint64_t v58 = 1;
      }
      else {
        unint64_t v58 = *(void *)v150;
      }
      if (v19 >= v149) {
        goto LABEL_122;
      }
      uint64_t v59 = 0;
      unsigned int v60 = v130 + v18 - v19;
      int v136 = v131 + v19;
      do
      {
        unint64_t v61 = (_DWORD *)(v19 + v59 + 1);
        if (!v58)
        {
LABEL_99:
          unsigned int v66 = v148;
          goto LABEL_100;
        }
        if (v136 + (int)v59 - *(_DWORD *)(a1 + 28) > v147 && *(_DWORD *)(a1 + 40) == 0) {
          int v63 = v132 + v19 + v59;
        }
        else {
          int v63 = *(_DWORD *)(a1 + 28);
        }
        uint64_t v64 = (v131 + v19 - v18 + v59);
        uint64_t v65 = v138;
        if (v64 < v142) {
          uint64_t v65 = v137;
        }
        unsigned int v66 = v148;
        if (v60 >= 3 && v18 <= v136 + (int)v59 - v63 && *v61 == *(_DWORD *)(v65 + v64))
        {
          if (v64 >= v142) {
            uint64_t v67 = (char *)v143;
          }
          else {
            uint64_t v67 = v140;
          }
          unint64_t v68 = sub_1DD2A6010((void *)(v19 + v59 + 5), (char *)(v65 + v64 + 4), v143, v67, v144);
          if (v68 > 0xFFFFFFFFFFFFFFFBLL) {
            goto LABEL_99;
          }
          unsigned int v66 = v148;
          if (3 * ((int)v68 + 4) > (int)(__clz(v58) + 3 * v55 - 30))
          {
            unint64_t v58 = 1;
            unint64_t v57 = v19 + v59 + 1;
            unint64_t v55 = v68 + 4;
          }
        }
LABEL_100:
        *(void *)v150 = 999999999;
        if (v66 == 6)
        {
          uint64_t v71 = (void *)(v19 + v59 + 1);
          if (v146 == 6)
          {
            unint64_t v70 = sub_1DD2C4318(a1, v71, v143, v150);
          }
          else if (v146 == 5)
          {
            unint64_t v70 = sub_1DD2C3CF8(a1, v71, v143, v150);
          }
          else
          {
            unint64_t v70 = sub_1DD2C36F0(a1, v71, v143, v150);
          }
        }
        else if (v66 == 5)
        {
          int v69 = (void *)(v19 + v59 + 1);
          if (v146 == 6)
          {
            unint64_t v70 = sub_1DD2C30BC(a1, v69, v143, v150);
          }
          else if (v146 == 5)
          {
            unint64_t v70 = sub_1DD2C2A9C(a1, v69, v143, v150);
          }
          else
          {
            unint64_t v70 = sub_1DD2C2494(a1, v69, v143, v150);
          }
        }
        else
        {
          unint64_t v72 = (_DWORD *)(v19 + v59 + 1);
          if (v146 == 6)
          {
            unint64_t v70 = sub_1DD2C1E68(a1, v72, v143, v150);
          }
          else if (v146 == 5)
          {
            unint64_t v70 = sub_1DD2C1850(a1, v72, v143, v150);
          }
          else
          {
            unint64_t v70 = sub_1DD2C1250(a1, v72, v143, v150);
          }
        }
        if (v70 < 4 || (int)(__clz(v150[0]) + 4 * v70 - 31) <= (int)(__clz(v58) + 4 * v55 - 27)) {
          goto LABEL_121;
        }
        ++v59;
        --v60;
        unint64_t v55 = v70;
        unint64_t v57 = (unint64_t)v61;
        unint64_t v58 = *(void *)v150;
      }
      while (v19 + v59 < v149);
      unint64_t v58 = *(void *)v150;
      unint64_t v57 = v19 + v59;
      unint64_t v55 = v70;
LABEL_121:
      unint64_t v8 = v143;
      a2 = v134;
LABEL_122:
      uint64_t v73 = v141;
      unsigned int v74 = v139;
      if (v58 > 3)
      {
        uint64_t v75 = v138;
        unsigned int v76 = v57 - (v58 + v138) + 3;
        if (v142 > v76) {
          uint64_t v75 = v137;
        }
        unint64_t v77 = v144;
        if (v142 > v76) {
          unint64_t v77 = v133;
        }
        if (v57 > v5 && v75 + (unint64_t)v76 > (unint64_t)v77)
        {
          unint64_t v78 = (unsigned __int8 *)(v75 + (v57 - (v58 + v138) + 3) - 1);
          uint64_t v79 = (unsigned __int8 *)(v57 - 1);
          while (*v79 == *v78)
          {
            ++v55;
            int v80 = v79 - 1;
            if ((unint64_t)v79 > v5)
            {
              --v79;
              if (v78-- > v77) {
                continue;
              }
            }
            unint64_t v57 = (unint64_t)(v80 + 1);
            goto LABEL_135;
          }
          unint64_t v57 = (unint64_t)(v79 + 1);
        }
LABEL_135:
        uint64_t v73 = v141;
        unsigned int v74 = v18;
        uint64_t v18 = (v58 - 3);
      }
      uint64_t v82 = v57 - v5;
      uint64_t v83 = *(_OWORD **)(a2 + 24);
      unsigned int v139 = v74;
      if (v57 > (unint64_t)v73)
      {
        sub_1DD29DBFC(v83, (char *)v5, v57, v73);
        unsigned int v84 = v148;
        goto LABEL_138;
      }
      *uint64_t v83 = *(_OWORD *)v5;
      uint64_t v87 = *(void *)(a2 + 24);
      if ((unint64_t)v82 <= 0x10)
      {
        *(void *)(a2 + 24) = v87 + v82;
        uint64_t v85 = *(void *)(a2 + 8);
        unsigned int v84 = v148;
      }
      else
      {
        *(_OWORD *)(v87 + 16) = *(_OWORD *)(v5 + 16);
        unsigned int v84 = v148;
        if (v82 >= 33)
        {
          unint64_t v88 = v87 + v82;
          char v89 = (_OWORD *)(v87 + 32);
          unint64_t v90 = (long long *)(v5 + 48);
          do
          {
            *char v89 = *(v90 - 1);
            long long v91 = *v90;
            v90 += 2;
            v89[1] = v91;
            v89 += 2;
          }
          while ((unint64_t)v89 < v88);
        }
LABEL_138:
        *(void *)(a2 + 24) += v82;
        uint64_t v85 = *(void *)(a2 + 8);
        if ((unint64_t)v82 >= 0x10000)
        {
          unint64_t v86 = (unint64_t)(v85 - *(void *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 1;
          *(_DWORD *)(a2 + 76) = v86;
        }
      }
      *(_WORD *)(v85 + 4) = v82;
      *(_DWORD *)uint64_t v85 = v58;
      if (v55 - 3 >= 0x10000)
      {
        unint64_t v92 = (unint64_t)(v85 - *(void *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 2;
        *(_DWORD *)(a2 + 76) = v92;
      }
      *(_WORD *)(v85 + 6) = v55 - 3;
      *(void *)(a2 + 8) = v85 + 8;
      uint64_t v10 = v138;
      if (*(_DWORD *)(a1 + 300))
      {
        uint64_t v93 = *(unsigned int *)(a1 + 44);
        int v94 = v149 - (v138 + v93);
        if ((v94 + 1) < 8) {
          int v95 = v94 + 1;
        }
        else {
          int v95 = 8;
        }
        if (v149 >= v138 + v93) {
          int v96 = v95;
        }
        else {
          int v96 = 0;
        }
        uint64_t v97 = (v96 + v93);
        if (v93 < v97)
        {
          uint64_t v98 = *(void *)(a1 + 112);
          uint64_t v99 = *(void *)(a1 + 56);
          int v100 = *(_DWORD *)(a1 + 52);
          uint64_t v101 = *(void *)(a1 + 96);
          char v102 = 56 - v100;
          char v103 = 24 - v100;
          do
          {
            if (v84 == 5)
            {
              unint64_t v104 = 0xCF1BBCDCBB000000 * *(void *)(v138 + v93);
            }
            else
            {
              if (v84 != 6)
              {
                LODWORD(v105) = ((-1640531535 * *(_DWORD *)(v138 + v93)) ^ v101) >> v103;
                goto LABEL_163;
              }
              unint64_t v104 = 0xCF1BBCDCBF9B0000 * *(void *)(v138 + v93);
            }
            unint64_t v105 = (v104 ^ v101) >> v102;
LABEL_163:
            uint64_t v106 = v105 >> 8 << v146;
            _X17 = v98 + 4 * v106;
            __asm { PRFM            #0, [X17] }
            if (v135 > 4)
            {
              __asm { PRFM            #0, [X17,#0x40] }
              _X16 = v99 + v106;
              __asm { PRFM            #0, [X16] }
              if (v146 == 6) {
                __asm { PRFM            #0, [X16,#0x20] }
              }
            }
            else
            {
              _X16 = v99 + v106;
              __asm { PRFM            #0, [X16] }
            }
            *(_DWORD *)(a1 + 4 * (v93++ & 7) + 64) = v105;
          }
          while (v97 != v93);
        }
        *(_DWORD *)(a1 + 300) = 0;
      }
      unint64_t v5 = v57 + v55;
      if (v57 + v55 <= v149)
      {
        uint64_t v116 = v18;
        uint64_t v117 = v139;
        uint64_t v11 = v137;
        LODWORD(v13) = v142;
        while (1)
        {
          uint64_t v18 = v117;
          uint64_t v117 = v116;
          int v118 = v5 - v138;
          int v119 = v5 - v138 - v147;
          if ((int)v5 - (int)v138 - *(_DWORD *)(a1 + 28) <= v147 || *(_DWORD *)(a1 + 40) != 0) {
            int v119 = *(_DWORD *)(a1 + 28);
          }
          uint64_t v121 = (v118 - v18);
          uint64_t v122 = v121 >= v142 ? v138 : v137;
          if ((v145 - v121) < 3
            || v18 > v118 - v119
            || *(_DWORD *)v5 != *(_DWORD *)(v122 + v121))
          {
            break;
          }
          if (v121 >= v142) {
            unsigned int v123 = (char *)v8;
          }
          else {
            unsigned int v123 = v140;
          }
          unint64_t v124 = sub_1DD2A6010((void *)(v5 + 4), (char *)(v122 + v121 + 4), v8, v123, v144);
          unint64_t v125 = *(_OWORD **)(a2 + 24);
          if (v5 <= (unint64_t)v141) {
            _OWORD *v125 = *(_OWORD *)v5;
          }
          else {
            sub_1DD29DBFC(v125, (char *)v5, v5, v141);
          }
          uint64_t v126 = *(void *)(a2 + 8);
          *(_WORD *)(v126 + 4) = 0;
          *(_DWORD *)uint64_t v126 = 1;
          if (v124 + 1 >= 0x10000)
          {
            unint64_t v127 = (unint64_t)(v126 - *(void *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 2;
            *(_DWORD *)(a2 + 76) = v127;
          }
          *(_WORD *)(v126 + 6) = v124 + 1;
          v5 += v124 + 4;
          *(void *)(a2 + 8) = v126 + 8;
          uint64_t v116 = v18;
          unsigned int v115 = v117;
          unint64_t v19 = v5;
          if (v5 > v149) {
            goto LABEL_172;
          }
        }
        unsigned int v115 = v18;
        uint64_t v18 = v116;
        unint64_t v19 = v5;
        goto LABEL_172;
      }
      unint64_t v19 = v57 + v55;
      uint64_t v11 = v137;
LABEL_171:
      LODWORD(v13) = v142;
      unsigned int v115 = v139;
LABEL_172:
      unsigned int v139 = v115;
    }
    while (v19 < v149);
  }
  *a3 = v18;
  a3[1] = v139;
  return v8 - v5;
}

unint64_t sub_1DD2BC240(uint64_t a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  unint64_t v5 = a4;
  unint64_t v154 = a4 + a5;
  unint64_t v8 = a4 + a5 - 16;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v153 = *(void *)(a1 + 16);
  unint64_t v11 = *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(a1 + 28);
  int v12 = *(_DWORD *)(a1 + 256);
  unsigned int v13 = *(_DWORD *)(a1 + 272);
  if (v13 >= 6) {
    unsigned int v13 = 6;
  }
  if (v13 <= 4) {
    int v14 = 4;
  }
  else {
    int v14 = v13;
  }
  if (*(_DWORD *)(a1 + 268) >= 6u) {
    unsigned int v15 = 6;
  }
  else {
    unsigned int v15 = *(_DWORD *)(a1 + 268);
  }
  if (v15 <= 4) {
    int v16 = 4;
  }
  else {
    int v16 = v15;
  }
  uint64_t v17 = *a3;
  unsigned int v18 = a3[1];
  *(_DWORD *)(a1 + 300) = 0;
  int v146 = (unsigned __int8 *)(v9 + v11);
  if (v9 + v11 == a4) {
    unint64_t v19 = (char *)(a4 + 1);
  }
  else {
    unint64_t v19 = (char *)a4;
  }
  uint64_t v20 = *(unsigned int *)(a1 + 44);
  int v21 = v8 - (v9 + v20);
  if ((v21 + 1) < 8) {
    int v22 = v21 + 1;
  }
  else {
    int v22 = 8;
  }
  unint64_t v155 = a4 + a5 - 16;
  if (v8 >= v9 + v20) {
    int v23 = v22;
  }
  else {
    int v23 = 0;
  }
  uint64_t v24 = (v23 + v20);
  if (v20 < v24)
  {
    uint64_t v25 = *(void *)(a1 + 112);
    uint64_t v26 = *(void *)(a1 + 56);
    int v27 = *(_DWORD *)(a1 + 52);
    uint64_t v28 = *(void *)(a1 + 96);
    char v29 = 56 - v27;
    char v30 = 24 - v27;
    do
    {
      if (v14 == 5)
      {
        unint64_t v31 = 0xCF1BBCDCBB000000 * *(void *)(v9 + v20);
      }
      else
      {
        if (v14 != 6)
        {
          LODWORD(v32) = ((-1640531535 * *(_DWORD *)(v9 + v20)) ^ v28) >> v30;
          goto LABEL_29;
        }
        unint64_t v31 = 0xCF1BBCDCBF9B0000 * *(void *)(v9 + v20);
      }
      unint64_t v32 = (v31 ^ v28) >> v29;
LABEL_29:
      uint64_t v33 = v32 >> 8 << v16;
      _X4 = v25 + 4 * v33;
      __asm { PRFM            #0, [X4] }
      if (v15 > 4)
      {
        __asm { PRFM            #0, [X4,#0x40] }
        _X3 = v26 + v33;
        __asm { PRFM            #0, [X3] }
        if (v16 == 6) {
          __asm { PRFM            #0, [X3,#0x20] }
        }
      }
      else
      {
        _X3 = v26 + v33;
        __asm { PRFM            #0, [X3] }
      }
      *(_DWORD *)(a1 + 4 * (v20++ & 7) + 64) = v32;
    }
    while (v24 != v20);
  }
  if ((unint64_t)v19 < v8)
  {
    int v149 = v16;
    int v150 = v14;
    unsigned int v139 = v15;
    unsigned int v144 = (char *)(v153 + v11);
    uint64_t v137 = (unsigned __int8 *)(v153 + v10);
    int v151 = v11 - 1;
    unsigned int v152 = 1 << v12;
    uint64_t v141 = (char *)(v154 - 32);
    uint64_t v145 = v9;
    uint64_t v138 = a2;
    unsigned int v143 = v11;
    while (1)
    {
      unint64_t v45 = 0;
      int v147 = v19 - v9;
      int v46 = v19 - v9 + 1;
      int v47 = v46 - v152;
      if (v46 - *(_DWORD *)(a1 + 28) <= v152 || *(_DWORD *)(a1 + 40) != 0) {
        int v47 = *(_DWORD *)(a1 + 28);
      }
      uint64_t v49 = (v46 - v17);
      uint64_t v50 = v153;
      if (v49 >= v11) {
        uint64_t v50 = v9;
      }
      if ((v151 - v49) >= 3 && v17 <= v46 - v47)
      {
        if (*(_DWORD *)(v19 + 1) == *(_DWORD *)(v50 + v49))
        {
          if (v49 >= v11) {
            uint64_t v51 = (char *)v154;
          }
          else {
            uint64_t v51 = v144;
          }
          unint64_t v45 = sub_1DD2A6010(v19 + 5, (char *)(v50 + v49 + 4), v154, v51, v146) + 4;
        }
        else
        {
          unint64_t v45 = 0;
        }
      }
      uint64_t v156 = 999999999;
      if (v150 == 6)
      {
        if (v149 == 6) {
          unint64_t v52 = sub_1DD2C4318(a1, v19, v154, &v156);
        }
        else {
          unint64_t v52 = v149 == 5 ? sub_1DD2C3CF8(a1, v19, v154, &v156) : sub_1DD2C36F0(a1, v19, v154, &v156);
        }
      }
      else if (v150 == 5)
      {
        if (v149 == 6) {
          unint64_t v52 = sub_1DD2C30BC(a1, v19, v154, &v156);
        }
        else {
          unint64_t v52 = v149 == 5 ? sub_1DD2C2A9C(a1, v19, v154, &v156) : sub_1DD2C2494(a1, v19, v154, &v156);
        }
      }
      else if (v149 == 6)
      {
        unint64_t v52 = sub_1DD2C1E68(a1, v19, v154, &v156);
      }
      else
      {
        unint64_t v52 = v149 == 5 ? sub_1DD2C1850(a1, v19, v154, &v156) : sub_1DD2C1250(a1, v19, v154, &v156);
      }
      unint64_t v53 = v52 <= v45 ? v45 : v52;
      if (v53 >= 4) {
        break;
      }
      unint64_t v54 = (unint64_t)&v19[-v5];
      v19 += ((unint64_t)&v19[-v5] >> 8) + 1;
      *(_DWORD *)(a1 + 300) = v54 > 0x8FF;
      uint64_t v9 = v145;
LABEL_232:
      if ((unint64_t)v19 >= v155) {
        goto LABEL_233;
      }
    }
    unsigned int v140 = v18;
    if (v52 <= v45) {
      unint64_t v55 = v19 + 1;
    }
    else {
      unint64_t v55 = v19;
    }
    if (v52 <= v45) {
      uint64_t v56 = 1;
    }
    else {
      uint64_t v56 = v156;
    }
    unint64_t v57 = v56;
    unsigned int v142 = v55;
    unint64_t v11 = v53;
    int v58 = v147;
    if ((unint64_t)v19 < v155)
    {
      while (1)
      {
        unint64_t v55 = v19 + 1;
        int v148 = v58++;
        if (!v56) {
          goto LABEL_97;
        }
        int v59 = v58 - v152;
        if (v58 - *(_DWORD *)(a1 + 28) <= v152 || *(_DWORD *)(a1 + 40) != 0) {
          int v59 = *(_DWORD *)(a1 + 28);
        }
        uint64_t v61 = (v58 - v17);
        uint64_t v62 = v145;
        if (v61 < v143) {
          uint64_t v62 = v153;
        }
        if ((v151 - v61) >= 3
          && v17 <= v58 - v59
          && (uint64_t v63 = v62 + v61, *v55 == *(_DWORD *)v63)
          && (v61 >= v143 ? (uint64_t v64 = (char *)v154) : (uint64_t v64 = v144),
              unint64_t v65 = sub_1DD2A6010(v19 + 5, (char *)(v63 + 4), v154, v64, v146),
              v65 <= 0xFFFFFFFFFFFFFFFBLL))
        {
          int v67 = v149;
          int v66 = v150;
          if (3 * ((int)v65 + 4) > (int)(__clz(v56) + 3 * v53 - 30))
          {
            uint64_t v56 = 1;
            unsigned int v142 = v19 + 1;
            unint64_t v53 = v65 + 4;
          }
        }
        else
        {
LABEL_97:
          int v67 = v149;
          int v66 = v150;
        }
        uint64_t v156 = 999999999;
        unint64_t v68 = v19 + 1;
        if (v66 == 6)
        {
          if (v67 == 6) {
            unint64_t v69 = sub_1DD2C4318(a1, v68, v154, &v156);
          }
          else {
            unint64_t v69 = v67 == 5 ? sub_1DD2C3CF8(a1, v68, v154, &v156) : sub_1DD2C36F0(a1, v68, v154, &v156);
          }
        }
        else if (v66 == 5)
        {
          if (v67 == 6) {
            unint64_t v69 = sub_1DD2C30BC(a1, v68, v154, &v156);
          }
          else {
            unint64_t v69 = v67 == 5 ? sub_1DD2C2A9C(a1, v68, v154, &v156) : sub_1DD2C2494(a1, v68, v154, &v156);
          }
        }
        else if (v67 == 6)
        {
          unint64_t v69 = sub_1DD2C1E68(a1, v68, v154, &v156);
        }
        else
        {
          unint64_t v69 = v67 == 5 ? sub_1DD2C1850(a1, v68, v154, &v156) : sub_1DD2C1250(a1, v68, v154, &v156);
        }
        unint64_t v11 = v69;
        if (v69 < 4 || (unint64_t v57 = v156, (int)(__clz(v156) + 4 * v69 - 31) <= (int)(__clz(v56) + 4 * v53 - 27)))
        {
          if ((unint64_t)v55 >= v155) {
            break;
          }
          unint64_t v55 = v19 + 2;
          int v58 = v148 + 2;
          if (!v56) {
            goto LABEL_135;
          }
          int v70 = v58 - v152;
          if (v58 - *(_DWORD *)(a1 + 28) <= v152 || *(_DWORD *)(a1 + 40) != 0) {
            int v70 = *(_DWORD *)(a1 + 28);
          }
          uint64_t v72 = (v58 - v17);
          uint64_t v73 = v145;
          if (v72 < v143) {
            uint64_t v73 = v153;
          }
          if ((v151 - v72) >= 3)
          {
            int v74 = v150;
            if (v17 <= v58 - v70)
            {
              uint64_t v75 = v73 + v72;
              if (*v55 == *(_DWORD *)v75)
              {
                unsigned int v76 = v72 >= v143 ? (char *)v154 : v144;
                unint64_t v77 = sub_1DD2A6010(v19 + 6, (char *)(v75 + 4), v154, v76, v146);
                if (v77 <= 0xFFFFFFFFFFFFFFFBLL && (int)(__clz(v56) + 4 * v53 - 30) < 4 * ((int)v77 + 4))
                {
                  uint64_t v56 = 1;
                  unsigned int v142 = v19 + 2;
                  unint64_t v53 = v77 + 4;
                }
              }
            }
          }
          else
          {
LABEL_135:
            int v74 = v150;
          }
          uint64_t v156 = 999999999;
          if (v74 == 6)
          {
            int v80 = v19 + 2;
            if (v149 == 6) {
              unint64_t v79 = sub_1DD2C4318(a1, v80, v154, &v156);
            }
            else {
              unint64_t v79 = v149 == 5 ? sub_1DD2C3CF8(a1, v80, v154, &v156) : sub_1DD2C36F0(a1, v80, v154, &v156);
            }
          }
          else if (v74 == 5)
          {
            unint64_t v78 = v19 + 2;
            if (v149 == 6) {
              unint64_t v79 = sub_1DD2C30BC(a1, v78, v154, &v156);
            }
            else {
              unint64_t v79 = v149 == 5 ? sub_1DD2C2A9C(a1, v78, v154, &v156) : sub_1DD2C2494(a1, v78, v154, &v156);
            }
          }
          else
          {
            int v81 = v19 + 2;
            if (v149 == 6) {
              unint64_t v79 = sub_1DD2C1E68(a1, v81, v154, &v156);
            }
            else {
              unint64_t v79 = v149 == 5 ? sub_1DD2C1850(a1, v81, v154, &v156) : sub_1DD2C1250(a1, v81, v154, &v156);
            }
          }
          unint64_t v11 = v79;
          if (v79 < 4) {
            break;
          }
          unint64_t v57 = v156;
          if ((int)(__clz(v156) + 4 * v79 - 31) <= (int)(__clz(v56) + 4 * v53 - 24)) {
            break;
          }
        }
        unint64_t v19 = (char *)v55;
        unint64_t v53 = v11;
        unsigned int v142 = v55;
        uint64_t v56 = v57;
        if ((unint64_t)v55 >= v155) {
          goto LABEL_158;
        }
      }
      unint64_t v57 = v56;
      unint64_t v55 = v142;
      unint64_t v11 = v53;
    }
LABEL_158:
    if (v57 <= 3)
    {
      uint64_t v87 = v138;
      uint64_t v9 = v145;
      unint64_t v90 = (char *)(v154 - 32);
    }
    else
    {
      uint64_t v9 = v145;
      unsigned int v82 = v55 - (v57 + v145) + 3;
      if (v143 <= v82) {
        uint64_t v83 = v145;
      }
      else {
        uint64_t v83 = v153;
      }
      unsigned int v84 = v146;
      if (v143 > v82) {
        unsigned int v84 = v137;
      }
      if ((unint64_t)v55 <= v5 || v83 + (unint64_t)v82 <= (unint64_t)v84)
      {
        uint64_t v87 = v138;
      }
      else
      {
        uint64_t v85 = (unsigned __int8 *)(v83 + (v55 - (v57 + v145) + 3) - 1);
        unint64_t v86 = (unsigned __int8 *)v55 - 1;
        uint64_t v87 = v138;
        while (*v86 == *v85)
        {
          ++v11;
          unint64_t v88 = v86 - 1;
          if ((unint64_t)v86 > v5)
          {
            --v86;
            if (v85-- > v84) {
              continue;
            }
          }
          unint64_t v55 = v88 + 1;
          goto LABEL_174;
        }
        unint64_t v55 = v86 + 1;
      }
LABEL_174:
      unint64_t v90 = (char *)(v154 - 32);
      unsigned int v140 = v17;
      uint64_t v17 = (v57 - 3);
    }
    uint64_t v91 = (uint64_t)v55 - v5;
    unint64_t v92 = *(_OWORD **)(v87 + 24);
    if (v55 <= (_DWORD *)v90)
    {
      *unint64_t v92 = *(_OWORD *)v5;
      uint64_t v95 = *(void *)(v87 + 24);
      if ((unint64_t)v91 <= 0x10)
      {
        *(void *)(v87 + 24) = v95 + v91;
        uint64_t v93 = *(void *)(v87 + 8);
        goto LABEL_185;
      }
      *(_OWORD *)(v95 + 16) = *(_OWORD *)(v5 + 16);
      if (v91 >= 33)
      {
        unint64_t v96 = v95 + v91;
        uint64_t v97 = (_OWORD *)(v95 + 32);
        uint64_t v98 = (long long *)(v5 + 48);
        do
        {
          *uint64_t v97 = *(v98 - 1);
          long long v99 = *v98;
          v98 += 2;
          v97[1] = v99;
          v97 += 2;
        }
        while ((unint64_t)v97 < v96);
      }
    }
    else
    {
      sub_1DD29DBFC(v92, (char *)v5, (unint64_t)v55, v90);
    }
    *(void *)(v87 + 24) += v91;
    uint64_t v93 = *(void *)(v87 + 8);
    if ((unint64_t)v91 >= 0x10000)
    {
      unint64_t v94 = (unint64_t)(v93 - *(void *)v87) >> 3;
      *(_DWORD *)(v87 + 72) = 1;
      *(_DWORD *)(v87 + 76) = v94;
    }
LABEL_185:
    *(_WORD *)(v93 + 4) = v91;
    *(_DWORD *)uint64_t v93 = v57;
    if (v11 - 3 >= 0x10000)
    {
      unint64_t v100 = (unint64_t)(v93 - *(void *)v87) >> 3;
      *(_DWORD *)(v87 + 72) = 2;
      *(_DWORD *)(v87 + 76) = v100;
    }
    *(_WORD *)(v93 + 6) = v11 - 3;
    *(void *)(v87 + 8) = v93 + 8;
    if (*(_DWORD *)(a1 + 300))
    {
      uint64_t v101 = *(unsigned int *)(a1 + 44);
      int v102 = v155 - (v9 + v101);
      if ((v102 + 1) < 8) {
        int v103 = v102 + 1;
      }
      else {
        int v103 = 8;
      }
      if (v155 >= v9 + v101) {
        int v104 = v103;
      }
      else {
        int v104 = 0;
      }
      uint64_t v105 = (v104 + v101);
      if (v101 < v105)
      {
        uint64_t v106 = *(void *)(a1 + 112);
        uint64_t v107 = *(void *)(a1 + 56);
        int v108 = *(_DWORD *)(a1 + 52);
        uint64_t v109 = *(void *)(a1 + 96);
        char v110 = 56 - v108;
        char v111 = 24 - v108;
        do
        {
          if (v150 == 5)
          {
            unint64_t v112 = 0xCF1BBCDCBB000000 * *(void *)(v9 + v101);
          }
          else
          {
            if (v150 != 6)
            {
              LODWORD(v113) = ((-1640531535 * *(_DWORD *)(v9 + v101)) ^ v109) >> v111;
              goto LABEL_202;
            }
            unint64_t v112 = 0xCF1BBCDCBF9B0000 * *(void *)(v9 + v101);
          }
          unint64_t v113 = (v112 ^ v109) >> v110;
LABEL_202:
          uint64_t v114 = v113 >> 8 << v149;
          _X17 = v106 + 4 * v114;
          __asm { PRFM            #0, [X17] }
          if (v139 > 4)
          {
            __asm { PRFM            #0, [X17,#0x40] }
            _X16 = v107 + v114;
            __asm { PRFM            #0, [X16] }
            if (v149 == 6) {
              __asm { PRFM            #0, [X16,#0x20] }
            }
          }
          else
          {
            _X16 = v107 + v114;
            __asm { PRFM            #0, [X16] }
          }
          *(_DWORD *)(a1 + 4 * (v101++ & 7) + 64) = v113;
        }
        while (v105 != v101);
      }
      *(_DWORD *)(a1 + 300) = 0;
    }
    unint64_t v5 = (unint64_t)v55 + v11;
    if ((unint64_t)v55 + v11 <= v155)
    {
      uint64_t v123 = v17;
      uint64_t v124 = v140;
      LODWORD(v11) = v143;
      while (1)
      {
        uint64_t v17 = v124;
        uint64_t v124 = v123;
        int v125 = v5 - v9;
        int v126 = v5 - v9 - v152;
        if ((int)v5 - (int)v9 - *(_DWORD *)(a1 + 28) <= v152 || *(_DWORD *)(a1 + 40) != 0) {
          int v126 = *(_DWORD *)(a1 + 28);
        }
        uint64_t v128 = (v125 - v17);
        uint64_t v129 = v153;
        if (v128 >= v143) {
          uint64_t v129 = v9;
        }
        if ((v151 - v128) < 3
          || v17 > v125 - v126
          || *(_DWORD *)v5 != *(_DWORD *)(v129 + v128))
        {
          break;
        }
        if (v128 >= v143) {
          int v130 = (char *)v154;
        }
        else {
          int v130 = v144;
        }
        unint64_t v131 = sub_1DD2A6010((void *)(v5 + 4), (char *)(v129 + v128 + 4), v154, v130, v146);
        int v132 = *(_OWORD **)(v87 + 24);
        if (v5 <= (unint64_t)v141) {
          *int v132 = *(_OWORD *)v5;
        }
        else {
          sub_1DD29DBFC(v132, (char *)v5, v5, v141);
        }
        uint64_t v133 = *(void *)(v87 + 8);
        *(_WORD *)(v133 + 4) = 0;
        *(_DWORD *)uint64_t v133 = 1;
        if (v131 + 1 >= 0x10000)
        {
          unint64_t v134 = (unint64_t)(v133 - *(void *)v87) >> 3;
          *(_DWORD *)(v87 + 72) = 2;
          *(_DWORD *)(v87 + 76) = v134;
        }
        *(_WORD *)(v133 + 6) = v131 + 1;
        v5 += v131 + 4;
        *(void *)(v87 + 8) = v133 + 8;
        uint64_t v123 = v17;
        unsigned int v18 = v124;
        unint64_t v19 = (char *)v5;
        if (v5 > v155) {
          goto LABEL_232;
        }
      }
      unsigned int v18 = v17;
      uint64_t v17 = v123;
      unint64_t v19 = (char *)v5;
    }
    else
    {
      unint64_t v19 = (char *)v55 + v11;
      LODWORD(v11) = v143;
      unsigned int v18 = v140;
    }
    goto LABEL_232;
  }
LABEL_233:
  *a3 = v17;
  a3[1] = v18;
  return v154 - v5;
}

unint64_t sub_1DD2BCE58(uint64_t a1, _DWORD *a2, _DWORD *a3, void *a4)
{
  uint64_t v4 = *(void *)(a1 + 128);
  int v5 = *(_DWORD *)(a1 + 260);
  unsigned int v6 = 1 << v5;
  int v7 = (1 << v5) - 1;
  uint64_t v8 = *(void *)(a1 + 8);
  unsigned int v9 = a2 - v8;
  unsigned int v10 = 1 << *(_DWORD *)(a1 + 256);
  uint64_t v11 = *(unsigned int *)(a1 + 44);
  if ((int)a2 - (int)v8 - *(_DWORD *)(a1 + 28) > v10 && *(_DWORD *)(a1 + 40) == 0) {
    unsigned int v13 = a2 - v8 - v10;
  }
  else {
    unsigned int v13 = *(_DWORD *)(a1 + 28);
  }
  BOOL v14 = v9 >= v6;
  unsigned int v15 = v9 - v6;
  if (!v14) {
    unsigned int v15 = 0;
  }
  int v16 = 1 << *(_DWORD *)(a1 + 268);
  int v17 = *(_DWORD *)(a1 + 300);
  uint64_t v18 = *(void *)(a1 + 112);
  int v19 = ~(-1 << v5);
  int v20 = 32 - *(_DWORD *)(a1 + 264);
  if (v11 <= v9) {
    uint64_t v21 = v9;
  }
  else {
    uint64_t v21 = v11;
  }
  do
  {
    if (v21 == v11) {
      break;
    }
    unsigned int v22 = (-1640531535 * *(_DWORD *)(v8 + v11)) >> v20;
    *(_DWORD *)(v4 + 4 * (v11 & v19)) = *(_DWORD *)(v18 + 4 * v22);
    *(_DWORD *)(v18 + 4 * v22) = v11++;
  }
  while (!v17);
  *(_DWORD *)(a1 + 44) = v9;
  unsigned int v23 = *(_DWORD *)(v18 + 4 * ((-1640531535 * *a2) >> v20));
  if (v23 < v13) {
    return 3;
  }
  unint64_t v25 = (unint64_t)a3 - 7;
  unsigned int v26 = v9 + 3;
  int v27 = a2 + 2;
  uint64_t v28 = v8 + 8;
  unint64_t v29 = 3;
  while (1)
  {
    uint64_t v30 = v23;
    unint64_t v31 = (void *)(v8 + v23);
    if (*(_DWORD *)((char *)v31 + v29 - 3) != *(_DWORD *)((char *)a2 + v29 - 3)) {
      goto LABEL_34;
    }
    if (v25 <= (unint64_t)a2)
    {
      uint64_t v33 = a2;
    }
    else
    {
      unint64_t v32 = *(void *)a2 ^ *v31;
      if (v32)
      {
        unint64_t result = __clz(__rbit64(v32)) >> 3;
        goto LABEL_32;
      }
      uint64_t v34 = 0;
      while (1)
      {
        uint64_t v33 = &v27[v34];
        if ((unint64_t)&v27[v34] >= v25) {
          break;
        }
        uint64_t v35 = *(void *)(v28 + v30 + v34 * 4);
        v34 += 2;
        unint64_t v36 = *v33 ^ v35;
        if (v36)
        {
          unint64_t result = v34 * 4 + (__clz(__rbit64(v36)) >> 3);
          goto LABEL_32;
        }
      }
      unint64_t v31 = (void *)(v28 + v30 + v34 * 4);
    }
    if (v33 < (void *)((char *)a3 - 3) && *(_DWORD *)v31 == *(_DWORD *)v33)
    {
      uint64_t v33 = (void *)((char *)v33 + 4);
      unint64_t v31 = (void *)((char *)v31 + 4);
    }
    if (v33 < (void *)((char *)a3 - 1) && *(unsigned __int16 *)v31 == *(unsigned __int16 *)v33)
    {
      uint64_t v33 = (void *)((char *)v33 + 2);
      unint64_t v31 = (void *)((char *)v31 + 2);
    }
    if (v33 < (void *)a3 && *(unsigned __int8 *)v31 == *(unsigned __int8 *)v33) {
      uint64_t v33 = (void *)((char *)v33 + 1);
    }
    unint64_t result = (char *)v33 - (char *)a2;
LABEL_32:
    if (result > v29)
    {
      *a4 = v26 - v30;
      unint64_t v29 = result;
      if ((_DWORD *)((char *)a2 + result) == a3) {
        return result;
      }
    }
LABEL_34:
    if (v30 <= v15) {
      return v29;
    }
    if (!--v16) {
      return v29;
    }
    unsigned int v23 = *(_DWORD *)(v4 + 4 * (v30 & v7));
    unint64_t result = v29;
    if (v23 < v13) {
      return result;
    }
  }
}

unint64_t sub_1DD2BD09C(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = *(void *)(a1 + 128);
  int v5 = *(_DWORD *)(a1 + 260);
  unsigned int v6 = 1 << v5;
  int v7 = (1 << v5) - 1;
  uint64_t v8 = *(void *)(a1 + 8);
  unsigned int v9 = a2 - v8;
  unsigned int v10 = 1 << *(_DWORD *)(a1 + 256);
  uint64_t v11 = *(unsigned int *)(a1 + 44);
  if ((int)a2 - (int)v8 - *(_DWORD *)(a1 + 28) > v10 && *(_DWORD *)(a1 + 40) == 0) {
    unsigned int v13 = a2 - v8 - v10;
  }
  else {
    unsigned int v13 = *(_DWORD *)(a1 + 28);
  }
  BOOL v14 = v9 >= v6;
  unsigned int v15 = v9 - v6;
  if (!v14) {
    unsigned int v15 = 0;
  }
  int v16 = 1 << *(_DWORD *)(a1 + 268);
  int v17 = *(_DWORD *)(a1 + 300);
  uint64_t v18 = *(void *)(a1 + 112);
  int v19 = ~(-1 << v5);
  int v20 = 64 - *(_DWORD *)(a1 + 264);
  if (v11 <= v9) {
    uint64_t v21 = v9;
  }
  else {
    uint64_t v21 = v11;
  }
  do
  {
    if (v21 == v11) {
      break;
    }
    unint64_t v22 = (0xCF1BBCDCBB000000 * *(void *)(v8 + v11)) >> v20;
    *(_DWORD *)(v4 + 4 * (v11 & v19)) = *(_DWORD *)(v18 + 4 * v22);
    *(_DWORD *)(v18 + 4 * v22) = v11++;
  }
  while (!v17);
  uint64_t v23 = *a2;
  *(_DWORD *)(a1 + 44) = v9;
  unsigned int v24 = *(_DWORD *)(v18 + 4 * ((0xCF1BBCDCBB000000 * v23) >> v20));
  if (v24 < v13) {
    return 3;
  }
  unint64_t v26 = (unint64_t)a3 - 7;
  unsigned int v27 = v9 + 3;
  uint64_t v28 = a2 + 1;
  uint64_t v29 = v8 + 8;
  unint64_t v30 = 3;
  while (1)
  {
    uint64_t v31 = v24;
    unint64_t v32 = (void *)(v8 + v24);
    if (*(_DWORD *)((char *)v32 + v30 - 3) != *(_DWORD *)((char *)a2 + v30 - 3)) {
      goto LABEL_34;
    }
    if (v26 <= (unint64_t)a2)
    {
      uint64_t v34 = a2;
    }
    else
    {
      unint64_t v33 = *a2 ^ *v32;
      if (v33)
      {
        unint64_t result = __clz(__rbit64(v33)) >> 3;
        goto LABEL_32;
      }
      uint64_t v35 = 0;
      while (1)
      {
        uint64_t v34 = &v28[v35];
        if ((unint64_t)&v28[v35] >= v26) {
          break;
        }
        uint64_t v36 = *(void *)(v29 + v31 + v35 * 8);
        ++v35;
        unint64_t v37 = *v34 ^ v36;
        if (v37)
        {
          unint64_t result = v35 * 8 + (__clz(__rbit64(v37)) >> 3);
          goto LABEL_32;
        }
      }
      unint64_t v32 = (void *)(v29 + v31 + v35 * 8);
    }
    if (v34 < (void *)((char *)a3 - 3) && *(_DWORD *)v32 == *(_DWORD *)v34)
    {
      uint64_t v34 = (void *)((char *)v34 + 4);
      unint64_t v32 = (void *)((char *)v32 + 4);
    }
    if (v34 < (void *)((char *)a3 - 1) && *(unsigned __int16 *)v32 == *(unsigned __int16 *)v34)
    {
      uint64_t v34 = (void *)((char *)v34 + 2);
      unint64_t v32 = (void *)((char *)v32 + 2);
    }
    if (v34 < a3 && *(unsigned __int8 *)v32 == *(unsigned __int8 *)v34) {
      uint64_t v34 = (void *)((char *)v34 + 1);
    }
    unint64_t result = (char *)v34 - (char *)a2;
LABEL_32:
    if (result > v30)
    {
      *a4 = v27 - v31;
      unint64_t v30 = result;
      if ((void *)((char *)a2 + result) == a3) {
        return result;
      }
    }
LABEL_34:
    if (v31 <= v15) {
      return v30;
    }
    if (!--v16) {
      return v30;
    }
    unsigned int v24 = *(_DWORD *)(v4 + 4 * (v31 & v7));
    unint64_t result = v30;
    if (v24 < v13) {
      return result;
    }
  }
}

unint64_t sub_1DD2BD2E4(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = *(void *)(a1 + 128);
  int v5 = *(_DWORD *)(a1 + 260);
  unsigned int v6 = 1 << v5;
  int v7 = (1 << v5) - 1;
  uint64_t v8 = *(void *)(a1 + 8);
  unsigned int v9 = a2 - v8;
  unsigned int v10 = 1 << *(_DWORD *)(a1 + 256);
  uint64_t v11 = *(unsigned int *)(a1 + 44);
  if ((int)a2 - (int)v8 - *(_DWORD *)(a1 + 28) > v10 && *(_DWORD *)(a1 + 40) == 0) {
    unsigned int v13 = a2 - v8 - v10;
  }
  else {
    unsigned int v13 = *(_DWORD *)(a1 + 28);
  }
  BOOL v14 = v9 >= v6;
  unsigned int v15 = v9 - v6;
  if (!v14) {
    unsigned int v15 = 0;
  }
  int v16 = 1 << *(_DWORD *)(a1 + 268);
  int v17 = *(_DWORD *)(a1 + 300);
  uint64_t v18 = *(void *)(a1 + 112);
  int v19 = ~(-1 << v5);
  int v20 = 64 - *(_DWORD *)(a1 + 264);
  if (v11 <= v9) {
    uint64_t v21 = v9;
  }
  else {
    uint64_t v21 = v11;
  }
  do
  {
    if (v21 == v11) {
      break;
    }
    unint64_t v22 = (0xCF1BBCDCBF9B0000 * *(void *)(v8 + v11)) >> v20;
    *(_DWORD *)(v4 + 4 * (v11 & v19)) = *(_DWORD *)(v18 + 4 * v22);
    *(_DWORD *)(v18 + 4 * v22) = v11++;
  }
  while (!v17);
  uint64_t v23 = *a2;
  *(_DWORD *)(a1 + 44) = v9;
  unsigned int v24 = *(_DWORD *)(v18 + 4 * ((0xCF1BBCDCBF9B0000 * v23) >> v20));
  if (v24 < v13) {
    return 3;
  }
  unint64_t v26 = (unint64_t)a3 - 7;
  unsigned int v27 = v9 + 3;
  uint64_t v28 = a2 + 1;
  uint64_t v29 = v8 + 8;
  unint64_t v30 = 3;
  while (1)
  {
    uint64_t v31 = v24;
    unint64_t v32 = (void *)(v8 + v24);
    if (*(_DWORD *)((char *)v32 + v30 - 3) != *(_DWORD *)((char *)a2 + v30 - 3)) {
      goto LABEL_34;
    }
    if (v26 <= (unint64_t)a2)
    {
      uint64_t v34 = a2;
    }
    else
    {
      unint64_t v33 = *a2 ^ *v32;
      if (v33)
      {
        unint64_t result = __clz(__rbit64(v33)) >> 3;
        goto LABEL_32;
      }
      uint64_t v35 = 0;
      while (1)
      {
        uint64_t v34 = &v28[v35];
        if ((unint64_t)&v28[v35] >= v26) {
          break;
        }
        uint64_t v36 = *(void *)(v29 + v31 + v35 * 8);
        ++v35;
        unint64_t v37 = *v34 ^ v36;
        if (v37)
        {
          unint64_t result = v35 * 8 + (__clz(__rbit64(v37)) >> 3);
          goto LABEL_32;
        }
      }
      unint64_t v32 = (void *)(v29 + v31 + v35 * 8);
    }
    if (v34 < (void *)((char *)a3 - 3) && *(_DWORD *)v32 == *(_DWORD *)v34)
    {
      uint64_t v34 = (void *)((char *)v34 + 4);
      unint64_t v32 = (void *)((char *)v32 + 4);
    }
    if (v34 < (void *)((char *)a3 - 1) && *(unsigned __int16 *)v32 == *(unsigned __int16 *)v34)
    {
      uint64_t v34 = (void *)((char *)v34 + 2);
      unint64_t v32 = (void *)((char *)v32 + 2);
    }
    if (v34 < a3 && *(unsigned __int8 *)v32 == *(unsigned __int8 *)v34) {
      uint64_t v34 = (void *)((char *)v34 + 1);
    }
    unint64_t result = (char *)v34 - (char *)a2;
LABEL_32:
    if (result > v30)
    {
      *a4 = v27 - v31;
      unint64_t v30 = result;
      if ((void *)((char *)a2 + result) == a3) {
        return result;
      }
    }
LABEL_34:
    if (v31 <= v15) {
      return v30;
    }
    if (!--v16) {
      return v30;
    }
    unsigned int v24 = *(_DWORD *)(v4 + 4 * (v31 & v7));
    unint64_t result = v30;
    if (v24 < v13) {
      return result;
    }
  }
}

unint64_t sub_1DD2BD52C(uint64_t a1, uint64_t *a2, unint64_t a3, unsigned int *a4)
{
  if (*(void *)(a1 + 8) + (unint64_t)*(unsigned int *)(a1 + 44) > (unint64_t)a2) {
    return 0;
  }
  sub_1DD2CE248(a1, (int)a2, 4);
  return sub_1DD2CE388(a1, a2, a3, a4, 4, 0);
}

unint64_t sub_1DD2BD5B8(uint64_t a1, uint64_t *a2, unint64_t a3, unsigned int *a4)
{
  if (*(void *)(a1 + 8) + (unint64_t)*(unsigned int *)(a1 + 44) > (unint64_t)a2) {
    return 0;
  }
  sub_1DD2CE248(a1, (int)a2, 5);
  return sub_1DD2CE388(a1, a2, a3, a4, 5, 0);
}

unint64_t sub_1DD2BD644(uint64_t a1, uint64_t *a2, unint64_t a3, unsigned int *a4)
{
  if (*(void *)(a1 + 8) + (unint64_t)*(unsigned int *)(a1 + 44) > (unint64_t)a2) {
    return 0;
  }
  sub_1DD2CE248(a1, (int)a2, 6);
  return sub_1DD2CE388(a1, a2, a3, a4, 6, 0);
}

unint64_t sub_1DD2BD6D0(uint64_t a1, _DWORD *a2, _DWORD *a3, void *a4)
{
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v5 = *(void *)(a1 + 56);
  int v6 = *(_DWORD *)(a1 + 52);
  uint64_t v7 = *(void *)(a1 + 8);
  unsigned int v8 = a2 - v7;
  unsigned int v9 = 1 << *(_DWORD *)(a1 + 256);
  if ((int)a2 - (int)v7 - *(_DWORD *)(a1 + 28) > v9 && *(_DWORD *)(a1 + 40) == 0) {
    unsigned int v11 = a2 - v7 - v9;
  }
  else {
    unsigned int v11 = *(_DWORD *)(a1 + 28);
  }
  unsigned int v12 = *(_DWORD *)(a1 + 268);
  if (v12 >= 4) {
    LOBYTE(v12) = 4;
  }
  uint64_t v13 = *(void *)(a1 + 96);
  if (*(_DWORD *)(a1 + 300))
  {
    unsigned int v14 = ((-1640531535 * *a2) ^ v13) >> (24 - v6);
    *(_DWORD *)(a1 + 44) = v8;
  }
  else
  {
    uint64_t v15 = a1 + 64;
    unint64_t v16 = *(unsigned int *)(a1 + 44);
    if (v8 - v16 >= 0x181)
    {
      uint64_t v17 = *(void *)(a1 + 56);
      uint64_t v18 = *(void *)(a1 + 112);
      if (v16 <= 0xFFFFFF9F)
      {
        unint64_t v71 = v16 + 96;
        do
        {
          unsigned int v72 = ((-1640531535 * *(_DWORD *)(v7 + 8 + v16)) ^ *(_DWORD *)(a1 + 96)) >> (24 - v6);
          uint64_t v73 = (v72 >> 4) & 0xFFFFFF0;
          _X23 = v4 + 4 * v73;
          __asm { PRFM            #0, [X23] }
          _X22 = v5 + v73;
          __asm { PRFM            #0, [X22] }
          unint64_t v78 = *(unsigned int *)(v15 + 4 * (v16 & 7));
          *(_DWORD *)(v15 + 4 * (v16 & 7)) = v72;
          uint64_t v79 = (v78 >> 4) & 0xFFFFFF0;
          uint64_t v80 = v4 + 4 * v79;
          int v81 = (unsigned char *)(v5 + v79);
          if (((*v81 - 1) & 0xF) != 0) {
            uint64_t v82 = 0;
          }
          else {
            uint64_t v82 = 15;
          }
          uint64_t v83 = v82 + ((*v81 - 1) & 0xF);
          *int v81 = v83;
          v81[v83] = v78;
          *(_DWORD *)(v80 + 4 * v83) = v16++;
        }
        while (v16 < v71);
        uint64_t v18 = *(void *)(a1 + 112);
        uint64_t v17 = *(void *)(a1 + 56);
      }
      uint64_t v84 = v8 - 32;
      LODWORD(v16) = v8 - 32;
      int v85 = a2 + 1 - (v7 + v84);
      if ((v85 + 1) < 8) {
        int v86 = v85 + 1;
      }
      else {
        int v86 = 8;
      }
      if ((unint64_t)a2 + 1 >= v7 + v84) {
        int v87 = v86;
      }
      else {
        int v87 = 0;
      }
      if (v84 < v87 + (int)v84)
      {
        unsigned int v88 = *(_DWORD *)(a1 + 96);
        int v89 = 24 - *(_DWORD *)(a1 + 52);
        do
        {
          unsigned int v90 = ((-1640531535 * *(_DWORD *)(v7 + v84)) ^ v88) >> v89;
          uint64_t v91 = (v90 >> 4) & 0xFFFFFF0;
          _X25 = v18 + 4 * v91;
          __asm { PRFM            #0, [X25] }
          _X24 = v17 + v91;
          __asm { PRFM            #0, [X24] }
          *(_DWORD *)(a1 + 4 * (v84++ & 7) + 64) = v90;
          --v87;
        }
        while (v87);
      }
    }
    else
    {
      uint64_t v17 = *(void *)(a1 + 56);
      uint64_t v18 = *(void *)(a1 + 112);
    }
    if (v16 < v8)
    {
      uint64_t v19 = *(void *)(a1 + 8) + 8;
      int v20 = 24 - *(_DWORD *)(a1 + 52);
      unint64_t v16 = v16;
      do
      {
        unsigned int v21 = ((-1640531535 * *(_DWORD *)(v19 + v16)) ^ *(_DWORD *)(a1 + 96)) >> v20;
        uint64_t v22 = (v21 >> 4) & 0xFFFFFF0;
        _X25 = v18 + 4 * v22;
        __asm { PRFM            #0, [X25] }
        _X24 = v17 + v22;
        __asm { PRFM            #0, [X24] }
        unint64_t v30 = *(unsigned int *)(v15 + 4 * (v16 & 7));
        *(_DWORD *)(v15 + 4 * (v16 & 7)) = v21;
        uint64_t v31 = (v30 >> 4) & 0xFFFFFF0;
        uint64_t v32 = v18 + 4 * v31;
        unint64_t v33 = (unsigned char *)(v17 + v31);
        if (((*v33 - 1) & 0xF) != 0) {
          uint64_t v34 = 0;
        }
        else {
          uint64_t v34 = 15;
        }
        uint64_t v35 = v34 + ((*v33 - 1) & 0xF);
        *unint64_t v33 = v35;
        v33[v35] = v30;
        *(_DWORD *)(v32 + 4 * v35) = v16++;
      }
      while (v16 < (a2 - v7));
    }
    *(_DWORD *)(a1 + 44) = v8;
    unsigned int v36 = ((-1640531535 * *(_DWORD *)(v7 + v8 + 8)) ^ v13) >> (24 - v6);
    uint64_t v37 = (v36 >> 4) & 0xFFFFFF0;
    _X4 = v4 + 4 * v37;
    __asm { PRFM            #0, [X4] }
    _X15 = v5 + v37;
    __asm { PRFM            #0, [X15] }
    unsigned int v14 = *(_DWORD *)(v15 + 4 * (v8 & 7));
    *(_DWORD *)(v15 + 4 * (v8 & 7)) = v36;
  }
  *(_DWORD *)(a1 + 104) += v14;
  uint64_t v42 = (v14 >> 4) & 0xFFFFFF0;
  uint64_t v43 = v4 + 4 * v42;
  int v44 = (int8x16_t *)(v5 + v42);
  char v45 = 4 * v44->i8[0];
  char v46 = (char)*v44;
  unint64_t v47 = __ROR8__(vshrn_n_s16((int16x8_t)vceqq_s8(*v44, vdupq_n_s8(v14)), 4uLL), v45) & 0x8888888888888888;
  if (v47)
  {
    uint64_t v48 = 0;
    int v49 = 1 << v12;
    do
    {
      unsigned int v50 = ((__clz(__rbit64(v47)) + (v45 & 0xFC)) >> 2) & 0xF;
      if (v50)
      {
        uint64_t v51 = *(unsigned int *)(v43 + 4 * v50);
        if (v51 < v11) {
          break;
        }
        _X7 = v7 + v51;
        __asm { PRFM            #0, [X7] }
        v96[v48++] = v51;
        --v49;
      }
      v47 &= v47 - 1;
    }
    while (v47 && v49);
  }
  else
  {
    uint64_t v48 = 0;
  }
  if (((v46 - 1) & 0xF) != 0) {
    uint64_t v54 = 0;
  }
  else {
    uint64_t v54 = 15;
  }
  uint64_t v55 = v54 + ((v46 - 1) & 0xF);
  v44->i8[0] = v55;
  v44->i8[v55] = v14;
  int v56 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v56 + 1;
  *(_DWORD *)(v43 + 4 * v55) = v56;
  if (v48)
  {
    uint64_t v57 = 0;
    unint64_t v58 = (unint64_t)a3 - 7;
    unsigned int v59 = v8 + 3;
    unsigned int v60 = a2 + 2;
    uint64_t v61 = v7 + 8;
    unint64_t v62 = 3;
    while (1)
    {
      uint64_t v63 = v96[v57];
      uint64_t v64 = (void *)(v7 + v63);
      if (*(_DWORD *)(v7 + v63 + v62 - 3) != *(_DWORD *)((char *)a2 + v62 - 3)) {
        goto LABEL_51;
      }
      if (v58 <= (unint64_t)a2)
      {
        int v67 = a2;
      }
      else
      {
        unint64_t v65 = *(void *)a2 ^ *v64;
        if (v65)
        {
          unint64_t result = __clz(__rbit64(v65)) >> 3;
          goto LABEL_49;
        }
        uint64_t v68 = 0;
        while (1)
        {
          int v67 = &v60[v68];
          if ((unint64_t)&v60[v68] >= v58) {
            break;
          }
          uint64_t v69 = *(void *)(v61 + v63 + v68 * 4);
          v68 += 2;
          unint64_t v70 = *v67 ^ v69;
          if (v70)
          {
            unint64_t result = v68 * 4 + (__clz(__rbit64(v70)) >> 3);
            goto LABEL_49;
          }
        }
        uint64_t v64 = (void *)(v61 + v63 + v68 * 4);
      }
      if (v67 < (void *)((char *)a3 - 3) && *(_DWORD *)v64 == *(_DWORD *)v67)
      {
        int v67 = (void *)((char *)v67 + 4);
        uint64_t v64 = (void *)((char *)v64 + 4);
      }
      if (v67 < (void *)((char *)a3 - 1) && *(unsigned __int16 *)v64 == *(unsigned __int16 *)v67)
      {
        int v67 = (void *)((char *)v67 + 2);
        uint64_t v64 = (void *)((char *)v64 + 2);
      }
      if (v67 < (void *)a3 && *(unsigned __int8 *)v64 == *(unsigned __int8 *)v67) {
        int v67 = (void *)((char *)v67 + 1);
      }
      unint64_t result = (char *)v67 - (char *)a2;
LABEL_49:
      if (result > v62)
      {
        *a4 = v59 - v63;
        unint64_t v62 = result;
        if ((_DWORD *)((char *)a2 + result) == a3) {
          return result;
        }
      }
LABEL_51:
      ++v57;
      unint64_t result = v62;
      if (v57 == v48) {
        return result;
      }
    }
  }
  return 3;
}

unint64_t sub_1DD2BDC18(uint64_t a1, _DWORD *a2, _DWORD *a3, void *a4)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v5 = *(void *)(a1 + 56);
  int v6 = *(_DWORD *)(a1 + 52);
  uint64_t v7 = *(void *)(a1 + 8);
  unsigned int v8 = a2 - v7;
  unsigned int v9 = 1 << *(_DWORD *)(a1 + 256);
  if ((int)a2 - (int)v7 - *(_DWORD *)(a1 + 28) > v9 && *(_DWORD *)(a1 + 40) == 0) {
    unsigned int v11 = a2 - v7 - v9;
  }
  else {
    unsigned int v11 = *(_DWORD *)(a1 + 28);
  }
  unsigned int v12 = *(_DWORD *)(a1 + 268);
  if (v12 >= 5) {
    LOBYTE(v12) = 5;
  }
  uint64_t v13 = *(void *)(a1 + 96);
  if (*(_DWORD *)(a1 + 300))
  {
    unsigned int v14 = ((-1640531535 * *a2) ^ v13) >> (24 - v6);
    *(_DWORD *)(a1 + 44) = v8;
  }
  else
  {
    uint64_t v15 = a1 + 64;
    unint64_t v16 = *(unsigned int *)(a1 + 44);
    if (v8 - v16 >= 0x181)
    {
      uint64_t v17 = *(void *)(a1 + 56);
      uint64_t v18 = *(void *)(a1 + 112);
      if (v16 <= 0xFFFFFF9F)
      {
        unint64_t v74 = v16 + 96;
        do
        {
          unsigned int v75 = ((-1640531535 * *(_DWORD *)(v7 + 8 + v16)) ^ *(_DWORD *)(a1 + 96)) >> (24 - v6);
          uint64_t v76 = (v75 >> 3) & 0x1FFFFFE0;
          _X23 = v4 + 4 * v76;
          __asm
          {
            PRFM            #0, [X23]
            PRFM            #0, [X23,#0x40]
          }
          _X22 = v5 + v76;
          __asm { PRFM            #0, [X22] }
          unint64_t v82 = *(unsigned int *)(v15 + 4 * (v16 & 7));
          *(_DWORD *)(v15 + 4 * (v16 & 7)) = v75;
          uint64_t v83 = (v82 >> 3) & 0x1FFFFFE0;
          uint64_t v84 = v4 + 4 * v83;
          int v85 = (unsigned char *)(v5 + v83);
          if (((*v85 - 1) & 0x1F) != 0) {
            uint64_t v86 = 0;
          }
          else {
            uint64_t v86 = 31;
          }
          uint64_t v87 = v86 + ((*v85 - 1) & 0x1F);
          *int v85 = v87;
          v85[v87] = v82;
          *(_DWORD *)(v84 + 4 * v87) = v16++;
        }
        while (v16 < v74);
        uint64_t v18 = *(void *)(a1 + 112);
        uint64_t v17 = *(void *)(a1 + 56);
      }
      uint64_t v88 = v8 - 32;
      LODWORD(v16) = v8 - 32;
      int v89 = a2 + 1 - (v7 + v88);
      if ((v89 + 1) < 8) {
        int v90 = v89 + 1;
      }
      else {
        int v90 = 8;
      }
      if ((unint64_t)a2 + 1 >= v7 + v88) {
        int v91 = v90;
      }
      else {
        int v91 = 0;
      }
      if (v88 < v91 + (int)v88)
      {
        unsigned int v92 = *(_DWORD *)(a1 + 96);
        int v93 = 24 - *(_DWORD *)(a1 + 52);
        do
        {
          unsigned int v94 = ((-1640531535 * *(_DWORD *)(v7 + v88)) ^ v92) >> v93;
          uint64_t v95 = (v94 >> 3) & 0x1FFFFFE0;
          _X25 = v18 + 4 * v95;
          __asm
          {
            PRFM            #0, [X25]
            PRFM            #0, [X25,#0x40]
          }
          _X24 = v17 + v95;
          __asm { PRFM            #0, [X24] }
          *(_DWORD *)(a1 + 4 * (v88++ & 7) + 64) = v94;
          --v91;
        }
        while (v91);
      }
    }
    else
    {
      uint64_t v17 = *(void *)(a1 + 56);
      uint64_t v18 = *(void *)(a1 + 112);
    }
    if (v16 < v8)
    {
      uint64_t v19 = *(void *)(a1 + 8) + 8;
      int v20 = 24 - *(_DWORD *)(a1 + 52);
      unint64_t v16 = v16;
      do
      {
        unsigned int v21 = ((-1640531535 * *(_DWORD *)(v19 + v16)) ^ *(_DWORD *)(a1 + 96)) >> v20;
        uint64_t v22 = (v21 >> 3) & 0x1FFFFFE0;
        _X25 = v18 + 4 * v22;
        __asm
        {
          PRFM            #0, [X25]
          PRFM            #0, [X25,#0x40]
        }
        _X24 = v17 + v22;
        __asm { PRFM            #0, [X24] }
        unint64_t v31 = *(unsigned int *)(v15 + 4 * (v16 & 7));
        *(_DWORD *)(v15 + 4 * (v16 & 7)) = v21;
        uint64_t v32 = (v31 >> 3) & 0x1FFFFFE0;
        uint64_t v33 = v18 + 4 * v32;
        uint64_t v34 = (unsigned char *)(v17 + v32);
        if (((*v34 - 1) & 0x1F) != 0) {
          uint64_t v35 = 0;
        }
        else {
          uint64_t v35 = 31;
        }
        uint64_t v36 = v35 + ((*v34 - 1) & 0x1F);
        *uint64_t v34 = v36;
        v34[v36] = v31;
        *(_DWORD *)(v33 + 4 * v36) = v16++;
      }
      while (v16 < (a2 - v7));
    }
    *(_DWORD *)(a1 + 44) = v8;
    unsigned int v37 = ((-1640531535 * *(_DWORD *)(v7 + v8 + 8)) ^ v13) >> (24 - v6);
    uint64_t v38 = (v37 >> 3) & 0x1FFFFFE0;
    _X4 = v4 + 4 * v38;
    __asm
    {
      PRFM            #0, [X4]
      PRFM            #0, [X4,#0x40]
    }
    _X15 = v5 + v38;
    __asm { PRFM            #0, [X15] }
    unsigned int v14 = *(_DWORD *)(v15 + 4 * (v8 & 7));
    *(_DWORD *)(v15 + 4 * (v8 & 7)) = v37;
  }
  *(_DWORD *)(a1 + 104) += v14;
  uint64_t v44 = (v14 >> 3) & 0x1FFFFFE0;
  uint64_t v45 = v4 + 4 * v44;
  char v46 = (__int16 *)(v5 + v44);
  int16x8x2_t v103 = vld2q_s16(v46);
  char v47 = *(unsigned char *)v46;
  char v48 = 2 * *(unsigned char *)v46;
  int8x16_t v49 = vdupq_n_s8(v14);
  unint64_t v50 = __ROR8__(vsli_n_s8(vshrn_n_s16((int16x8_t)vceqq_s8(v49, (int8x16_t)v103.val[0]), 6uLL), vshrn_n_s16((int16x8_t)vceqq_s8(v49, (int8x16_t)v103.val[1]), 6uLL), 4uLL), v48) & 0x5555555555555555;
  if (v50)
  {
    uint64_t v51 = 0;
    int v52 = 1 << v12;
    do
    {
      unsigned int v53 = ((__clz(__rbit64(v50)) + (v48 & 0xFE)) >> 1) & 0x1F;
      if (v53)
      {
        uint64_t v54 = *(unsigned int *)(v45 + 4 * v53);
        if (v54 < v11) {
          break;
        }
        _X7 = v7 + v54;
        __asm { PRFM            #0, [X7] }
        v101[v51++] = v54;
        --v52;
      }
      v50 &= v50 - 1;
    }
    while (v50 && v52);
  }
  else
  {
    uint64_t v51 = 0;
  }
  if (((v47 - 1) & 0x1F) != 0) {
    uint64_t v57 = 0;
  }
  else {
    uint64_t v57 = 31;
  }
  uint64_t v58 = v57 + ((v47 - 1) & 0x1F);
  *(unsigned char *)char v46 = v58;
  *((unsigned char *)v46 + v58) = v14;
  int v59 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v59 + 1;
  *(_DWORD *)(v45 + 4 * v58) = v59;
  if (v51)
  {
    uint64_t v60 = 0;
    unint64_t v61 = (unint64_t)a3 - 7;
    unsigned int v62 = v8 + 3;
    uint64_t v63 = a2 + 2;
    uint64_t v64 = v7 + 8;
    unint64_t v65 = 3;
    while (1)
    {
      uint64_t v66 = v101[v60];
      int v67 = (void *)(v7 + v66);
      if (*(_DWORD *)(v7 + v66 + v65 - 3) != *(_DWORD *)((char *)a2 + v65 - 3)) {
        goto LABEL_51;
      }
      if (v61 <= (unint64_t)a2)
      {
        unint64_t v70 = a2;
      }
      else
      {
        unint64_t v68 = *(void *)a2 ^ *v67;
        if (v68)
        {
          unint64_t result = __clz(__rbit64(v68)) >> 3;
          goto LABEL_49;
        }
        uint64_t v71 = 0;
        while (1)
        {
          unint64_t v70 = &v63[v71];
          if ((unint64_t)&v63[v71] >= v61) {
            break;
          }
          uint64_t v72 = *(void *)(v64 + v66 + v71 * 4);
          v71 += 2;
          unint64_t v73 = *v70 ^ v72;
          if (v73)
          {
            unint64_t result = v71 * 4 + (__clz(__rbit64(v73)) >> 3);
            goto LABEL_49;
          }
        }
        int v67 = (void *)(v64 + v66 + v71 * 4);
      }
      if (v70 < (void *)((char *)a3 - 3) && *(_DWORD *)v67 == *(_DWORD *)v70)
      {
        unint64_t v70 = (void *)((char *)v70 + 4);
        int v67 = (void *)((char *)v67 + 4);
      }
      if (v70 < (void *)((char *)a3 - 1) && *(unsigned __int16 *)v67 == *(unsigned __int16 *)v70)
      {
        unint64_t v70 = (void *)((char *)v70 + 2);
        int v67 = (void *)((char *)v67 + 2);
      }
      if (v70 < (void *)a3 && *(unsigned __int8 *)v67 == *(unsigned __int8 *)v70) {
        unint64_t v70 = (void *)((char *)v70 + 1);
      }
      unint64_t result = (char *)v70 - (char *)a2;
LABEL_49:
      if (result > v65)
      {
        *a4 = v62 - v66;
        unint64_t v65 = result;
        if ((_DWORD *)((char *)a2 + result) == a3) {
          return result;
        }
      }
LABEL_51:
      ++v60;
      unint64_t result = v65;
      if (v60 == v51) {
        return result;
      }
    }
  }
  return 3;
}

unint64_t sub_1DD2BE178(uint64_t a1, _DWORD *a2, _DWORD *a3, void *a4)
{
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v5 = *(void *)(a1 + 56);
  int v6 = *(_DWORD *)(a1 + 52);
  uint64_t v7 = *(void *)(a1 + 8);
  unsigned int v8 = a2 - v7;
  unsigned int v9 = 1 << *(_DWORD *)(a1 + 256);
  if ((int)a2 - (int)v7 - *(_DWORD *)(a1 + 28) > v9 && *(_DWORD *)(a1 + 40) == 0) {
    unsigned int v11 = a2 - v7 - v9;
  }
  else {
    unsigned int v11 = *(_DWORD *)(a1 + 28);
  }
  unsigned int v12 = *(_DWORD *)(a1 + 268);
  if (v12 >= 6) {
    LOBYTE(v12) = 6;
  }
  uint64_t v13 = *(void *)(a1 + 96);
  if (*(_DWORD *)(a1 + 300))
  {
    unsigned int v14 = ((-1640531535 * *a2) ^ v13) >> (24 - v6);
    *(_DWORD *)(a1 + 44) = v8;
  }
  else
  {
    uint64_t v15 = a1 + 64;
    unint64_t v16 = *(unsigned int *)(a1 + 44);
    if (v8 - v16 >= 0x181)
    {
      uint64_t v17 = *(void *)(a1 + 56);
      uint64_t v18 = *(void *)(a1 + 112);
      if (v16 <= 0xFFFFFF9F)
      {
        unint64_t v76 = v16 + 96;
        do
        {
          unsigned int v77 = ((-1640531535 * *(_DWORD *)(v7 + 8 + v16)) ^ *(_DWORD *)(a1 + 96)) >> (24 - v6);
          uint64_t v78 = (v77 >> 2) & 0x3FFFFFC0;
          _X23 = v4 + 4 * v78;
          __asm
          {
            PRFM            #0, [X23]
            PRFM            #0, [X23,#0x40]
          }
          _X22 = v5 + v78;
          __asm
          {
            PRFM            #0, [X22]
            PRFM            #0, [X22,#0x20]
          }
          unint64_t v85 = *(unsigned int *)(v15 + 4 * (v16 & 7));
          *(_DWORD *)(v15 + 4 * (v16 & 7)) = v77;
          uint64_t v86 = (v85 >> 2) & 0x3FFFFFC0;
          uint64_t v87 = v4 + 4 * v86;
          uint64_t v88 = (unsigned char *)(v5 + v86);
          if (((*v88 - 1) & 0x3F) != 0) {
            uint64_t v89 = 0;
          }
          else {
            uint64_t v89 = 63;
          }
          uint64_t v90 = v89 + ((*v88 - 1) & 0x3F);
          *uint64_t v88 = v90;
          v88[v90] = v85;
          *(_DWORD *)(v87 + 4 * v90) = v16++;
        }
        while (v16 < v76);
        uint64_t v18 = *(void *)(a1 + 112);
        uint64_t v17 = *(void *)(a1 + 56);
      }
      uint64_t v91 = v8 - 32;
      LODWORD(v16) = v8 - 32;
      int v92 = a2 + 1 - (v7 + v91);
      if ((v92 + 1) < 8) {
        int v93 = v92 + 1;
      }
      else {
        int v93 = 8;
      }
      if ((unint64_t)a2 + 1 >= v7 + v91) {
        int v94 = v93;
      }
      else {
        int v94 = 0;
      }
      if (v91 < v94 + (int)v91)
      {
        unsigned int v95 = *(_DWORD *)(a1 + 96);
        int v96 = 24 - *(_DWORD *)(a1 + 52);
        do
        {
          unsigned int v97 = ((-1640531535 * *(_DWORD *)(v7 + v91)) ^ v95) >> v96;
          uint64_t v98 = (v97 >> 2) & 0x3FFFFFC0;
          _X25 = v18 + 4 * v98;
          __asm
          {
            PRFM            #0, [X25]
            PRFM            #0, [X25,#0x40]
          }
          _X24 = v17 + v98;
          __asm
          {
            PRFM            #0, [X24]
            PRFM            #0, [X24,#0x20]
          }
          *(_DWORD *)(a1 + 4 * (v91++ & 7) + 64) = v97;
          --v94;
        }
        while (v94);
      }
    }
    else
    {
      uint64_t v17 = *(void *)(a1 + 56);
      uint64_t v18 = *(void *)(a1 + 112);
    }
    if (v16 < v8)
    {
      uint64_t v19 = *(void *)(a1 + 8) + 8;
      int v20 = 24 - *(_DWORD *)(a1 + 52);
      unint64_t v16 = v16;
      do
      {
        unsigned int v21 = ((-1640531535 * *(_DWORD *)(v19 + v16)) ^ *(_DWORD *)(a1 + 96)) >> v20;
        uint64_t v22 = (v21 >> 2) & 0x3FFFFFC0;
        _X25 = v18 + 4 * v22;
        __asm
        {
          PRFM            #0, [X25]
          PRFM            #0, [X25,#0x40]
        }
        _X24 = v17 + v22;
        __asm
        {
          PRFM            #0, [X24]
          PRFM            #0, [X24,#0x20]
        }
        unint64_t v32 = *(unsigned int *)(v15 + 4 * (v16 & 7));
        *(_DWORD *)(v15 + 4 * (v16 & 7)) = v21;
        uint64_t v33 = (v32 >> 2) & 0x3FFFFFC0;
        uint64_t v34 = v18 + 4 * v33;
        uint64_t v35 = (unsigned char *)(v17 + v33);
        if (((*v35 - 1) & 0x3F) != 0) {
          uint64_t v36 = 0;
        }
        else {
          uint64_t v36 = 63;
        }
        uint64_t v37 = v36 + ((*v35 - 1) & 0x3F);
        *uint64_t v35 = v37;
        v35[v37] = v32;
        *(_DWORD *)(v34 + 4 * v37) = v16++;
      }
      while (v16 < (a2 - v7));
    }
    *(_DWORD *)(a1 + 44) = v8;
    unsigned int v38 = ((-1640531535 * *(_DWORD *)(v7 + v8 + 8)) ^ v13) >> (24 - v6);
    uint64_t v39 = (v38 >> 2) & 0x3FFFFFC0;
    _X4 = v4 + 4 * v39;
    __asm
    {
      PRFM            #0, [X4]
      PRFM            #0, [X4,#0x40]
    }
    _X15 = v5 + v39;
    __asm
    {
      PRFM            #0, [X15]
      PRFM            #0, [X15,#0x20]
    }
    unsigned int v14 = *(_DWORD *)(v15 + 4 * (v8 & 7));
    *(_DWORD *)(v15 + 4 * (v8 & 7)) = v38;
  }
  *(_DWORD *)(a1 + 104) += v14;
  uint64_t v46 = (v14 >> 2) & 0x3FFFFFC0;
  uint64_t v47 = v4 + 4 * v46;
  char v48 = (char *)(v5 + v46);
  char v49 = *v48;
  int8x16x4_t v107 = vld4q_s8(v48);
  int8x16_t v50 = vdupq_n_s8(v14);
  v107.val[0] = vsriq_n_s8(vsriq_n_s8(vceqq_s8(v107.val[3], v50), vceqq_s8(v107.val[2], v50), 1uLL), vsriq_n_s8(vceqq_s8(v107.val[1], v50), vceqq_s8(v107.val[0], v50), 1uLL), 2uLL);
  int8x8_t v51 = vshrn_n_s16((int16x8_t)vsriq_n_s8(v107.val[0], v107.val[0], 4uLL), 4uLL);
  uint64_t v52 = 0;
  if (v51)
  {
    int v53 = 1 << v12;
    unint64_t v54 = __ROR8__(*(void *)&v51, v49);
    do
    {
      unsigned int v55 = (__clz(__rbit64(v54)) + v49) & 0x3F;
      if (v55)
      {
        uint64_t v56 = *(unsigned int *)(v47 + 4 * v55);
        if (v56 < v11) {
          break;
        }
        _X6 = v7 + v56;
        __asm { PRFM            #0, [X6] }
        v105[v52++] = v56;
        --v53;
      }
      v54 &= v54 - 1;
    }
    while (v54 && v53);
  }
  if (((v49 - 1) & 0x3F) != 0) {
    uint64_t v59 = 0;
  }
  else {
    uint64_t v59 = 63;
  }
  uint64_t v60 = v59 + ((v49 - 1) & 0x3F);
  *char v48 = v60;
  v48[v60] = v14;
  int v61 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v61 + 1;
  *(_DWORD *)(v47 + 4 * v60) = v61;
  if (v52)
  {
    uint64_t v62 = 0;
    unint64_t v63 = (unint64_t)a3 - 7;
    unsigned int v64 = v8 + 3;
    unint64_t v65 = a2 + 2;
    uint64_t v66 = v7 + 8;
    unint64_t v67 = 3;
    while (1)
    {
      uint64_t v68 = v105[v62];
      uint64_t v69 = (void *)(v7 + v68);
      if (*(_DWORD *)(v7 + v68 + v67 - 3) != *(_DWORD *)((char *)a2 + v67 - 3)) {
        goto LABEL_49;
      }
      if (v63 <= (unint64_t)a2)
      {
        uint64_t v72 = a2;
      }
      else
      {
        unint64_t v70 = *(void *)a2 ^ *v69;
        if (v70)
        {
          unint64_t result = __clz(__rbit64(v70)) >> 3;
          goto LABEL_47;
        }
        uint64_t v73 = 0;
        while (1)
        {
          uint64_t v72 = &v65[v73];
          if ((unint64_t)&v65[v73] >= v63) {
            break;
          }
          uint64_t v74 = *(void *)(v66 + v68 + v73 * 4);
          v73 += 2;
          unint64_t v75 = *v72 ^ v74;
          if (v75)
          {
            unint64_t result = v73 * 4 + (__clz(__rbit64(v75)) >> 3);
            goto LABEL_47;
          }
        }
        uint64_t v69 = (void *)(v66 + v68 + v73 * 4);
      }
      if (v72 < (void *)((char *)a3 - 3) && *(_DWORD *)v69 == *(_DWORD *)v72)
      {
        uint64_t v72 = (void *)((char *)v72 + 4);
        uint64_t v69 = (void *)((char *)v69 + 4);
      }
      if (v72 < (void *)((char *)a3 - 1) && *(unsigned __int16 *)v69 == *(unsigned __int16 *)v72)
      {
        uint64_t v72 = (void *)((char *)v72 + 2);
        uint64_t v69 = (void *)((char *)v69 + 2);
      }
      if (v72 < (void *)a3 && *(unsigned __int8 *)v69 == *(unsigned __int8 *)v72) {
        uint64_t v72 = (void *)((char *)v72 + 1);
      }
      unint64_t result = (char *)v72 - (char *)a2;
LABEL_47:
      if (result > v67)
      {
        *a4 = v64 - v68;
        unint64_t v67 = result;
        if ((_DWORD *)((char *)a2 + result) == a3) {
          return result;
        }
      }
LABEL_49:
      ++v62;
      unint64_t result = v67;
      if (v62 == v52) {
        return result;
      }
    }
  }
  return 3;
}

unint64_t sub_1DD2BE6E4(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v96 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v5 = *(void *)(a1 + 56);
  int v6 = *(_DWORD *)(a1 + 52);
  uint64_t v7 = *(void *)(a1 + 8);
  unsigned int v8 = a2 - v7;
  unsigned int v9 = 1 << *(_DWORD *)(a1 + 256);
  if ((int)a2 - (int)v7 - *(_DWORD *)(a1 + 28) > v9 && *(_DWORD *)(a1 + 40) == 0) {
    unsigned int v11 = a2 - v7 - v9;
  }
  else {
    unsigned int v11 = *(_DWORD *)(a1 + 28);
  }
  unsigned int v12 = *(_DWORD *)(a1 + 268);
  if (v12 >= 4) {
    LOBYTE(v12) = 4;
  }
  uint64_t v13 = *(void *)(a1 + 96);
  if (*(_DWORD *)(a1 + 300))
  {
    _X15 = ((0xCF1BBCDCBB000000 * *a2) ^ v13) >> (56 - v6);
    *(_DWORD *)(a1 + 44) = v8;
  }
  else
  {
    uint64_t v15 = a1 + 64;
    unint64_t v16 = *(unsigned int *)(a1 + 44);
    if (v8 - v16 >= 0x181)
    {
      uint64_t v17 = *(void *)(a1 + 56);
      uint64_t v18 = *(void *)(a1 + 112);
      if (v16 <= 0xFFFFFF9F)
      {
        unint64_t v70 = v16 + 96;
        do
        {
          unint64_t v71 = ((0xCF1BBCDCBB000000 * *(void *)(v7 + 8 + v16)) ^ *(void *)(a1 + 96)) >> (56 - v6);
          uint64_t v72 = (v71 >> 4) & 0xFFFFFF0;
          _X23 = v4 + 4 * v72;
          __asm { PRFM            #0, [X23] }
          _X22 = v5 + v72;
          __asm { PRFM            #0, [X22] }
          unint64_t v77 = *(unsigned int *)(v15 + 4 * (v16 & 7));
          *(_DWORD *)(v15 + 4 * (v16 & 7)) = v71;
          uint64_t v78 = (v77 >> 4) & 0xFFFFFF0;
          uint64_t v79 = v4 + 4 * v78;
          uint64_t v80 = (unsigned char *)(v5 + v78);
          if (((*v80 - 1) & 0xF) != 0) {
            uint64_t v81 = 0;
          }
          else {
            uint64_t v81 = 15;
          }
          uint64_t v82 = v81 + ((*v80 - 1) & 0xF);
          unsigned char *v80 = v82;
          v80[v82] = v77;
          *(_DWORD *)(v79 + 4 * v82) = v16++;
        }
        while (v16 < v70);
        uint64_t v18 = *(void *)(a1 + 112);
        uint64_t v17 = *(void *)(a1 + 56);
      }
      uint64_t v83 = v8 - 32;
      LODWORD(v16) = v8 - 32;
      int v84 = a2 + 1 - (v7 + v83);
      if ((v84 + 1) < 8) {
        int v85 = v84 + 1;
      }
      else {
        int v85 = 8;
      }
      if ((unint64_t)a2 + 1 >= v7 + v83) {
        int v86 = v85;
      }
      else {
        int v86 = 0;
      }
      if (v83 < v86 + (int)v83)
      {
        uint64_t v87 = *(void *)(a1 + 96);
        int v88 = 56 - *(_DWORD *)(a1 + 52);
        do
        {
          unint64_t v89 = ((0xCF1BBCDCBB000000 * *(void *)(v7 + v83)) ^ v87) >> v88;
          uint64_t v90 = (v89 >> 4) & 0xFFFFFF0;
          _X25 = v18 + 4 * v90;
          __asm { PRFM            #0, [X25] }
          _X24 = v17 + v90;
          __asm { PRFM            #0, [X24] }
          *(_DWORD *)(a1 + 4 * (v83++ & 7) + 64) = v89;
          --v86;
        }
        while (v86);
      }
    }
    else
    {
      uint64_t v17 = *(void *)(a1 + 56);
      uint64_t v18 = *(void *)(a1 + 112);
    }
    if (v16 < v8)
    {
      uint64_t v19 = *(void *)(a1 + 8) + 8;
      int v20 = 56 - *(_DWORD *)(a1 + 52);
      unint64_t v16 = v16;
      do
      {
        unint64_t v21 = ((0xCF1BBCDCBB000000 * *(void *)(v19 + v16)) ^ *(void *)(a1 + 96)) >> v20;
        uint64_t v22 = (v21 >> 4) & 0xFFFFFF0;
        _X25 = v18 + 4 * v22;
        __asm { PRFM            #0, [X25] }
        _X24 = v17 + v22;
        __asm { PRFM            #0, [X24] }
        unint64_t v30 = *(unsigned int *)(v15 + 4 * (v16 & 7));
        *(_DWORD *)(v15 + 4 * (v16 & 7)) = v21;
        uint64_t v31 = (v30 >> 4) & 0xFFFFFF0;
        uint64_t v32 = v18 + 4 * v31;
        uint64_t v33 = (unsigned char *)(v17 + v31);
        if (((*v33 - 1) & 0xF) != 0) {
          uint64_t v34 = 0;
        }
        else {
          uint64_t v34 = 15;
        }
        uint64_t v35 = v34 + ((*v33 - 1) & 0xF);
        *uint64_t v33 = v35;
        v33[v35] = v30;
        *(_DWORD *)(v32 + 4 * v35) = v16++;
      }
      while (v16 < (a2 - v7));
    }
    *(_DWORD *)(a1 + 44) = v8;
    unint64_t v36 = ((0xCF1BBCDCBB000000 * *(void *)(v7 + v8 + 8)) ^ v13) >> (56 - v6);
    uint64_t v37 = (v36 >> 4) & 0xFFFFFF0;
    _X4 = v4 + 4 * v37;
    __asm { PRFM            #0, [X4] }
    _X15 = v5 + v37;
    __asm { PRFM            #0, [X15] }
    LODWORD(_X15) = *(_DWORD *)(v15 + 4 * (v8 & 7));
    *(_DWORD *)(v15 + 4 * (v8 & 7)) = v36;
  }
  *(_DWORD *)(a1 + 104) += _X15;
  uint64_t v41 = (_X15 >> 4) & 0xFFFFFF0;
  uint64_t v42 = v4 + 4 * v41;
  uint64_t v43 = (int8x16_t *)(v5 + v41);
  char v44 = 4 * v43->i8[0];
  char v45 = (char)*v43;
  unint64_t v46 = __ROR8__(vshrn_n_s16((int16x8_t)vceqq_s8(*v43, vdupq_n_s8(_X15)), 4uLL), v44) & 0x8888888888888888;
  if (v46)
  {
    uint64_t v47 = 0;
    int v48 = 1 << v12;
    do
    {
      unsigned int v49 = ((__clz(__rbit64(v46)) + (v44 & 0xFC)) >> 2) & 0xF;
      if (v49)
      {
        uint64_t v50 = *(unsigned int *)(v42 + 4 * v49);
        if (v50 < v11) {
          break;
        }
        _X7 = v7 + v50;
        __asm { PRFM            #0, [X7] }
        v95[v47++] = v50;
        --v48;
      }
      v46 &= v46 - 1;
    }
    while (v46 && v48);
  }
  else
  {
    uint64_t v47 = 0;
  }
  if (((v45 - 1) & 0xF) != 0) {
    uint64_t v53 = 0;
  }
  else {
    uint64_t v53 = 15;
  }
  uint64_t v54 = v53 + ((v45 - 1) & 0xF);
  v43->i8[0] = v54;
  v43->i8[v54] = _X15;
  int v55 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v55 + 1;
  *(_DWORD *)(v42 + 4 * v54) = v55;
  if (v47)
  {
    uint64_t v56 = 0;
    unint64_t v57 = (unint64_t)a3 - 7;
    unsigned int v58 = v8 + 3;
    uint64_t v59 = a2 + 1;
    uint64_t v60 = v7 + 8;
    unint64_t v61 = 3;
    while (1)
    {
      uint64_t v62 = v95[v56];
      unint64_t v63 = (void *)(v7 + v62);
      if (*(_DWORD *)(v7 + v62 + v61 - 3) != *(_DWORD *)((char *)a2 + v61 - 3)) {
        goto LABEL_51;
      }
      if (v57 <= (unint64_t)a2)
      {
        uint64_t v66 = a2;
      }
      else
      {
        unint64_t v64 = *a2 ^ *v63;
        if (v64)
        {
          unint64_t result = __clz(__rbit64(v64)) >> 3;
          goto LABEL_49;
        }
        uint64_t v67 = 0;
        while (1)
        {
          uint64_t v66 = &v59[v67];
          if ((unint64_t)&v59[v67] >= v57) {
            break;
          }
          uint64_t v68 = *(void *)(v60 + v62 + v67 * 8);
          ++v67;
          unint64_t v69 = *v66 ^ v68;
          if (v69)
          {
            unint64_t result = v67 * 8 + (__clz(__rbit64(v69)) >> 3);
            goto LABEL_49;
          }
        }
        unint64_t v63 = (void *)(v60 + v62 + v67 * 8);
      }
      if (v66 < (void *)((char *)a3 - 3) && *(_DWORD *)v63 == *(_DWORD *)v66)
      {
        uint64_t v66 = (void *)((char *)v66 + 4);
        unint64_t v63 = (void *)((char *)v63 + 4);
      }
      if (v66 < (void *)((char *)a3 - 1) && *(unsigned __int16 *)v63 == *(unsigned __int16 *)v66)
      {
        uint64_t v66 = (void *)((char *)v66 + 2);
        unint64_t v63 = (void *)((char *)v63 + 2);
      }
      if (v66 < a3 && *(unsigned __int8 *)v63 == *(unsigned __int8 *)v66) {
        uint64_t v66 = (void *)((char *)v66 + 1);
      }
      unint64_t result = (char *)v66 - (char *)a2;
LABEL_49:
      if (result > v61)
      {
        *a4 = v58 - v62;
        unint64_t v61 = result;
        if ((void *)((char *)a2 + result) == a3) {
          return result;
        }
      }
LABEL_51:
      ++v56;
      unint64_t result = v61;
      if (v56 == v47) {
        return result;
      }
    }
  }
  return 3;
}

unint64_t sub_1DD2BEC34(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v101 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v5 = *(void *)(a1 + 56);
  int v6 = *(_DWORD *)(a1 + 52);
  uint64_t v7 = *(void *)(a1 + 8);
  unsigned int v8 = a2 - v7;
  unsigned int v9 = 1 << *(_DWORD *)(a1 + 256);
  if ((int)a2 - (int)v7 - *(_DWORD *)(a1 + 28) > v9 && *(_DWORD *)(a1 + 40) == 0) {
    unsigned int v11 = a2 - v7 - v9;
  }
  else {
    unsigned int v11 = *(_DWORD *)(a1 + 28);
  }
  unsigned int v12 = *(_DWORD *)(a1 + 268);
  if (v12 >= 5) {
    LOBYTE(v12) = 5;
  }
  uint64_t v13 = *(void *)(a1 + 96);
  if (*(_DWORD *)(a1 + 300))
  {
    _X15 = ((0xCF1BBCDCBB000000 * *a2) ^ v13) >> (56 - v6);
    *(_DWORD *)(a1 + 44) = v8;
  }
  else
  {
    uint64_t v15 = a1 + 64;
    unint64_t v16 = *(unsigned int *)(a1 + 44);
    if (v8 - v16 >= 0x181)
    {
      uint64_t v17 = *(void *)(a1 + 56);
      uint64_t v18 = *(void *)(a1 + 112);
      if (v16 <= 0xFFFFFF9F)
      {
        unint64_t v73 = v16 + 96;
        do
        {
          unint64_t v74 = ((0xCF1BBCDCBB000000 * *(void *)(v7 + 8 + v16)) ^ *(void *)(a1 + 96)) >> (56 - v6);
          uint64_t v75 = (v74 >> 3) & 0x1FFFFFE0;
          _X23 = v4 + 4 * v75;
          __asm
          {
            PRFM            #0, [X23]
            PRFM            #0, [X23,#0x40]
          }
          _X22 = v5 + v75;
          __asm { PRFM            #0, [X22] }
          unint64_t v81 = *(unsigned int *)(v15 + 4 * (v16 & 7));
          *(_DWORD *)(v15 + 4 * (v16 & 7)) = v74;
          uint64_t v82 = (v81 >> 3) & 0x1FFFFFE0;
          uint64_t v83 = v4 + 4 * v82;
          int v84 = (unsigned char *)(v5 + v82);
          if (((*v84 - 1) & 0x1F) != 0) {
            uint64_t v85 = 0;
          }
          else {
            uint64_t v85 = 31;
          }
          uint64_t v86 = v85 + ((*v84 - 1) & 0x1F);
          *int v84 = v86;
          v84[v86] = v81;
          *(_DWORD *)(v83 + 4 * v86) = v16++;
        }
        while (v16 < v73);
        uint64_t v18 = *(void *)(a1 + 112);
        uint64_t v17 = *(void *)(a1 + 56);
      }
      uint64_t v87 = v8 - 32;
      LODWORD(v16) = v8 - 32;
      int v88 = a2 + 1 - (v7 + v87);
      if ((v88 + 1) < 8) {
        int v89 = v88 + 1;
      }
      else {
        int v89 = 8;
      }
      if ((unint64_t)a2 + 1 >= v7 + v87) {
        int v90 = v89;
      }
      else {
        int v90 = 0;
      }
      if (v87 < v90 + (int)v87)
      {
        uint64_t v91 = *(void *)(a1 + 96);
        int v92 = 56 - *(_DWORD *)(a1 + 52);
        do
        {
          unint64_t v93 = ((0xCF1BBCDCBB000000 * *(void *)(v7 + v87)) ^ v91) >> v92;
          uint64_t v94 = (v93 >> 3) & 0x1FFFFFE0;
          _X25 = v18 + 4 * v94;
          __asm
          {
            PRFM            #0, [X25]
            PRFM            #0, [X25,#0x40]
          }
          _X24 = v17 + v94;
          __asm { PRFM            #0, [X24] }
          *(_DWORD *)(a1 + 4 * (v87++ & 7) + 64) = v93;
          --v90;
        }
        while (v90);
      }
    }
    else
    {
      uint64_t v17 = *(void *)(a1 + 56);
      uint64_t v18 = *(void *)(a1 + 112);
    }
    if (v16 < v8)
    {
      uint64_t v19 = *(void *)(a1 + 8) + 8;
      int v20 = 56 - *(_DWORD *)(a1 + 52);
      unint64_t v16 = v16;
      do
      {
        unint64_t v21 = ((0xCF1BBCDCBB000000 * *(void *)(v19 + v16)) ^ *(void *)(a1 + 96)) >> v20;
        uint64_t v22 = (v21 >> 3) & 0x1FFFFFE0;
        _X25 = v18 + 4 * v22;
        __asm
        {
          PRFM            #0, [X25]
          PRFM            #0, [X25,#0x40]
        }
        _X24 = v17 + v22;
        __asm { PRFM            #0, [X24] }
        unint64_t v31 = *(unsigned int *)(v15 + 4 * (v16 & 7));
        *(_DWORD *)(v15 + 4 * (v16 & 7)) = v21;
        uint64_t v32 = (v31 >> 3) & 0x1FFFFFE0;
        uint64_t v33 = v18 + 4 * v32;
        uint64_t v34 = (unsigned char *)(v17 + v32);
        if (((*v34 - 1) & 0x1F) != 0) {
          uint64_t v35 = 0;
        }
        else {
          uint64_t v35 = 31;
        }
        uint64_t v36 = v35 + ((*v34 - 1) & 0x1F);
        *uint64_t v34 = v36;
        v34[v36] = v31;
        *(_DWORD *)(v33 + 4 * v36) = v16++;
      }
      while (v16 < (a2 - v7));
    }
    *(_DWORD *)(a1 + 44) = v8;
    unint64_t v37 = ((0xCF1BBCDCBB000000 * *(void *)(v7 + v8 + 8)) ^ v13) >> (56 - v6);
    uint64_t v38 = (v37 >> 3) & 0x1FFFFFE0;
    _X4 = v4 + 4 * v38;
    __asm
    {
      PRFM            #0, [X4]
      PRFM            #0, [X4,#0x40]
    }
    _X15 = v5 + v38;
    __asm { PRFM            #0, [X15] }
    LODWORD(_X15) = *(_DWORD *)(v15 + 4 * (v8 & 7));
    *(_DWORD *)(v15 + 4 * (v8 & 7)) = v37;
  }
  *(_DWORD *)(a1 + 104) += _X15;
  uint64_t v43 = (_X15 >> 3) & 0x1FFFFFE0;
  uint64_t v44 = v4 + 4 * v43;
  char v45 = (__int16 *)(v5 + v43);
  int16x8x2_t v102 = vld2q_s16(v45);
  char v46 = *(unsigned char *)v45;
  char v47 = 2 * *(unsigned char *)v45;
  int8x16_t v48 = vdupq_n_s8(_X15);
  unint64_t v49 = __ROR8__(vsli_n_s8(vshrn_n_s16((int16x8_t)vceqq_s8(v48, (int8x16_t)v102.val[0]), 6uLL), vshrn_n_s16((int16x8_t)vceqq_s8(v48, (int8x16_t)v102.val[1]), 6uLL), 4uLL), v47) & 0x5555555555555555;
  if (v49)
  {
    uint64_t v50 = 0;
    int v51 = 1 << v12;
    do
    {
      unsigned int v52 = ((__clz(__rbit64(v49)) + (v47 & 0xFE)) >> 1) & 0x1F;
      if (v52)
      {
        uint64_t v53 = *(unsigned int *)(v44 + 4 * v52);
        if (v53 < v11) {
          break;
        }
        _X7 = v7 + v53;
        __asm { PRFM            #0, [X7] }
        v100[v50++] = v53;
        --v51;
      }
      v49 &= v49 - 1;
    }
    while (v49 && v51);
  }
  else
  {
    uint64_t v50 = 0;
  }
  if (((v46 - 1) & 0x1F) != 0) {
    uint64_t v56 = 0;
  }
  else {
    uint64_t v56 = 31;
  }
  uint64_t v57 = v56 + ((v46 - 1) & 0x1F);
  *(unsigned char *)char v45 = v57;
  *((unsigned char *)v45 + v57) = _X15;
  int v58 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v58 + 1;
  *(_DWORD *)(v44 + 4 * v57) = v58;
  if (v50)
  {
    uint64_t v59 = 0;
    unint64_t v60 = (unint64_t)a3 - 7;
    unsigned int v61 = v8 + 3;
    uint64_t v62 = a2 + 1;
    uint64_t v63 = v7 + 8;
    unint64_t v64 = 3;
    while (1)
    {
      uint64_t v65 = v100[v59];
      uint64_t v66 = (void *)(v7 + v65);
      if (*(_DWORD *)(v7 + v65 + v64 - 3) != *(_DWORD *)((char *)a2 + v64 - 3)) {
        goto LABEL_51;
      }
      if (v60 <= (unint64_t)a2)
      {
        unint64_t v69 = a2;
      }
      else
      {
        unint64_t v67 = *a2 ^ *v66;
        if (v67)
        {
          unint64_t result = __clz(__rbit64(v67)) >> 3;
          goto LABEL_49;
        }
        uint64_t v70 = 0;
        while (1)
        {
          unint64_t v69 = &v62[v70];
          if ((unint64_t)&v62[v70] >= v60) {
            break;
          }
          uint64_t v71 = *(void *)(v63 + v65 + v70 * 8);
          ++v70;
          unint64_t v72 = *v69 ^ v71;
          if (v72)
          {
            unint64_t result = v70 * 8 + (__clz(__rbit64(v72)) >> 3);
            goto LABEL_49;
          }
        }
        uint64_t v66 = (void *)(v63 + v65 + v70 * 8);
      }
      if (v69 < (void *)((char *)a3 - 3) && *(_DWORD *)v66 == *(_DWORD *)v69)
      {
        unint64_t v69 = (void *)((char *)v69 + 4);
        uint64_t v66 = (void *)((char *)v66 + 4);
      }
      if (v69 < (void *)((char *)a3 - 1) && *(unsigned __int16 *)v66 == *(unsigned __int16 *)v69)
      {
        unint64_t v69 = (void *)((char *)v69 + 2);
        uint64_t v66 = (void *)((char *)v66 + 2);
      }
      if (v69 < a3 && *(unsigned __int8 *)v66 == *(unsigned __int8 *)v69) {
        unint64_t v69 = (void *)((char *)v69 + 1);
      }
      unint64_t result = (char *)v69 - (char *)a2;
LABEL_49:
      if (result > v64)
      {
        *a4 = v61 - v65;
        unint64_t v64 = result;
        if ((void *)((char *)a2 + result) == a3) {
          return result;
        }
      }
LABEL_51:
      ++v59;
      unint64_t result = v64;
      if (v59 == v50) {
        return result;
      }
    }
  }
  return 3;
}

unint64_t sub_1DD2BF19C(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v105 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v5 = *(void *)(a1 + 56);
  int v6 = *(_DWORD *)(a1 + 52);
  uint64_t v7 = *(void *)(a1 + 8);
  unsigned int v8 = a2 - v7;
  unsigned int v9 = 1 << *(_DWORD *)(a1 + 256);
  if ((int)a2 - (int)v7 - *(_DWORD *)(a1 + 28) > v9 && *(_DWORD *)(a1 + 40) == 0) {
    unsigned int v11 = a2 - v7 - v9;
  }
  else {
    unsigned int v11 = *(_DWORD *)(a1 + 28);
  }
  unsigned int v12 = *(_DWORD *)(a1 + 268);
  if (v12 >= 6) {
    LOBYTE(v12) = 6;
  }
  uint64_t v13 = *(void *)(a1 + 96);
  if (*(_DWORD *)(a1 + 300))
  {
    _X15 = ((0xCF1BBCDCBB000000 * *a2) ^ v13) >> (56 - v6);
    *(_DWORD *)(a1 + 44) = v8;
  }
  else
  {
    uint64_t v15 = a1 + 64;
    unint64_t v16 = *(unsigned int *)(a1 + 44);
    if (v8 - v16 >= 0x181)
    {
      uint64_t v17 = *(void *)(a1 + 56);
      uint64_t v18 = *(void *)(a1 + 112);
      if (v16 <= 0xFFFFFF9F)
      {
        unint64_t v75 = v16 + 96;
        do
        {
          unint64_t v76 = ((0xCF1BBCDCBB000000 * *(void *)(v7 + 8 + v16)) ^ *(void *)(a1 + 96)) >> (56 - v6);
          uint64_t v77 = (v76 >> 2) & 0x3FFFFFC0;
          _X23 = v4 + 4 * v77;
          __asm
          {
            PRFM            #0, [X23]
            PRFM            #0, [X23,#0x40]
          }
          _X22 = v5 + v77;
          __asm
          {
            PRFM            #0, [X22]
            PRFM            #0, [X22,#0x20]
          }
          unint64_t v84 = *(unsigned int *)(v15 + 4 * (v16 & 7));
          *(_DWORD *)(v15 + 4 * (v16 & 7)) = v76;
          uint64_t v85 = (v84 >> 2) & 0x3FFFFFC0;
          uint64_t v86 = v4 + 4 * v85;
          uint64_t v87 = (unsigned char *)(v5 + v85);
          if (((*v87 - 1) & 0x3F) != 0) {
            uint64_t v88 = 0;
          }
          else {
            uint64_t v88 = 63;
          }
          uint64_t v89 = v88 + ((*v87 - 1) & 0x3F);
          unsigned char *v87 = v89;
          v87[v89] = v84;
          *(_DWORD *)(v86 + 4 * v89) = v16++;
        }
        while (v16 < v75);
        uint64_t v18 = *(void *)(a1 + 112);
        uint64_t v17 = *(void *)(a1 + 56);
      }
      uint64_t v90 = v8 - 32;
      LODWORD(v16) = v8 - 32;
      int v91 = a2 + 1 - (v7 + v90);
      if ((v91 + 1) < 8) {
        int v92 = v91 + 1;
      }
      else {
        int v92 = 8;
      }
      if ((unint64_t)a2 + 1 >= v7 + v90) {
        int v93 = v92;
      }
      else {
        int v93 = 0;
      }
      if (v90 < v93 + (int)v90)
      {
        uint64_t v94 = *(void *)(a1 + 96);
        int v95 = 56 - *(_DWORD *)(a1 + 52);
        do
        {
          unint64_t v96 = ((0xCF1BBCDCBB000000 * *(void *)(v7 + v90)) ^ v94) >> v95;
          uint64_t v97 = (v96 >> 2) & 0x3FFFFFC0;
          _X25 = v18 + 4 * v97;
          __asm
          {
            PRFM            #0, [X25]
            PRFM            #0, [X25,#0x40]
          }
          _X24 = v17 + v97;
          __asm
          {
            PRFM            #0, [X24]
            PRFM            #0, [X24,#0x20]
          }
          *(_DWORD *)(a1 + 4 * (v90++ & 7) + 64) = v96;
          --v93;
        }
        while (v93);
      }
    }
    else
    {
      uint64_t v17 = *(void *)(a1 + 56);
      uint64_t v18 = *(void *)(a1 + 112);
    }
    if (v16 < v8)
    {
      uint64_t v19 = *(void *)(a1 + 8) + 8;
      int v20 = 56 - *(_DWORD *)(a1 + 52);
      unint64_t v16 = v16;
      do
      {
        unint64_t v21 = ((0xCF1BBCDCBB000000 * *(void *)(v19 + v16)) ^ *(void *)(a1 + 96)) >> v20;
        uint64_t v22 = (v21 >> 2) & 0x3FFFFFC0;
        _X25 = v18 + 4 * v22;
        __asm
        {
          PRFM            #0, [X25]
          PRFM            #0, [X25,#0x40]
        }
        _X24 = v17 + v22;
        __asm
        {
          PRFM            #0, [X24]
          PRFM            #0, [X24,#0x20]
        }
        unint64_t v32 = *(unsigned int *)(v15 + 4 * (v16 & 7));
        *(_DWORD *)(v15 + 4 * (v16 & 7)) = v21;
        uint64_t v33 = (v32 >> 2) & 0x3FFFFFC0;
        uint64_t v34 = v18 + 4 * v33;
        uint64_t v35 = (unsigned char *)(v17 + v33);
        if (((*v35 - 1) & 0x3F) != 0) {
          uint64_t v36 = 0;
        }
        else {
          uint64_t v36 = 63;
        }
        uint64_t v37 = v36 + ((*v35 - 1) & 0x3F);
        *uint64_t v35 = v37;
        v35[v37] = v32;
        *(_DWORD *)(v34 + 4 * v37) = v16++;
      }
      while (v16 < (a2 - v7));
    }
    *(_DWORD *)(a1 + 44) = v8;
    unint64_t v38 = ((0xCF1BBCDCBB000000 * *(void *)(v7 + v8 + 8)) ^ v13) >> (56 - v6);
    uint64_t v39 = (v38 >> 2) & 0x3FFFFFC0;
    _X4 = v4 + 4 * v39;
    __asm
    {
      PRFM            #0, [X4]
      PRFM            #0, [X4,#0x40]
    }
    _X15 = v5 + v39;
    __asm
    {
      PRFM            #0, [X15]
      PRFM            #0, [X15,#0x20]
    }
    LODWORD(_X15) = *(_DWORD *)(v15 + 4 * (v8 & 7));
    *(_DWORD *)(v15 + 4 * (v8 & 7)) = v38;
  }
  *(_DWORD *)(a1 + 104) += _X15;
  uint64_t v45 = (_X15 >> 2) & 0x3FFFFFC0;
  uint64_t v46 = v4 + 4 * v45;
  char v47 = (char *)(v5 + v45);
  char v48 = *v47;
  int8x16x4_t v106 = vld4q_s8(v47);
  int8x16_t v49 = vdupq_n_s8(_X15);
  v106.val[0] = vsriq_n_s8(vsriq_n_s8(vceqq_s8(v106.val[3], v49), vceqq_s8(v106.val[2], v49), 1uLL), vsriq_n_s8(vceqq_s8(v106.val[1], v49), vceqq_s8(v106.val[0], v49), 1uLL), 2uLL);
  int8x8_t v50 = vshrn_n_s16((int16x8_t)vsriq_n_s8(v106.val[0], v106.val[0], 4uLL), 4uLL);
  uint64_t v51 = 0;
  if (v50)
  {
    int v52 = 1 << v12;
    unint64_t v53 = __ROR8__(*(void *)&v50, v48);
    do
    {
      unsigned int v54 = (__clz(__rbit64(v53)) + v48) & 0x3F;
      if (v54)
      {
        uint64_t v55 = *(unsigned int *)(v46 + 4 * v54);
        if (v55 < v11) {
          break;
        }
        _X6 = v7 + v55;
        __asm { PRFM            #0, [X6] }
        v104[v51++] = v55;
        --v52;
      }
      v53 &= v53 - 1;
    }
    while (v53 && v52);
  }
  if (((v48 - 1) & 0x3F) != 0) {
    uint64_t v58 = 0;
  }
  else {
    uint64_t v58 = 63;
  }
  uint64_t v59 = v58 + ((v48 - 1) & 0x3F);
  *char v47 = v59;
  v47[v59] = _X15;
  int v60 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v60 + 1;
  *(_DWORD *)(v46 + 4 * v59) = v60;
  if (v51)
  {
    uint64_t v61 = 0;
    unint64_t v62 = (unint64_t)a3 - 7;
    unsigned int v63 = v8 + 3;
    unint64_t v64 = a2 + 1;
    uint64_t v65 = v7 + 8;
    unint64_t v66 = 3;
    while (1)
    {
      uint64_t v67 = v104[v61];
      uint64_t v68 = (void *)(v7 + v67);
      if (*(_DWORD *)(v7 + v67 + v66 - 3) != *(_DWORD *)((char *)a2 + v66 - 3)) {
        goto LABEL_49;
      }
      if (v62 <= (unint64_t)a2)
      {
        uint64_t v71 = a2;
      }
      else
      {
        unint64_t v69 = *a2 ^ *v68;
        if (v69)
        {
          unint64_t result = __clz(__rbit64(v69)) >> 3;
          goto LABEL_47;
        }
        uint64_t v72 = 0;
        while (1)
        {
          uint64_t v71 = &v64[v72];
          if ((unint64_t)&v64[v72] >= v62) {
            break;
          }
          uint64_t v73 = *(void *)(v65 + v67 + v72 * 8);
          ++v72;
          unint64_t v74 = *v71 ^ v73;
          if (v74)
          {
            unint64_t result = v72 * 8 + (__clz(__rbit64(v74)) >> 3);
            goto LABEL_47;
          }
        }
        uint64_t v68 = (void *)(v65 + v67 + v72 * 8);
      }
      if (v71 < (void *)((char *)a3 - 3) && *(_DWORD *)v68 == *(_DWORD *)v71)
      {
        uint64_t v71 = (void *)((char *)v71 + 4);
        uint64_t v68 = (void *)((char *)v68 + 4);
      }
      if (v71 < (void *)((char *)a3 - 1) && *(unsigned __int16 *)v68 == *(unsigned __int16 *)v71)
      {
        uint64_t v71 = (void *)((char *)v71 + 2);
        uint64_t v68 = (void *)((char *)v68 + 2);
      }
      if (v71 < a3 && *(unsigned __int8 *)v68 == *(unsigned __int8 *)v71) {
        uint64_t v71 = (void *)((char *)v71 + 1);
      }
      unint64_t result = (char *)v71 - (char *)a2;
LABEL_47:
      if (result > v66)
      {
        *a4 = v63 - v67;
        unint64_t v66 = result;
        if ((void *)((char *)a2 + result) == a3) {
          return result;
        }
      }
LABEL_49:
      ++v61;
      unint64_t result = v66;
      if (v61 == v51) {
        return result;
      }
    }
  }
  return 3;
}

unint64_t sub_1DD2BF710(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v96 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v5 = *(void *)(a1 + 56);
  int v6 = *(_DWORD *)(a1 + 52);
  uint64_t v7 = *(void *)(a1 + 8);
  unsigned int v8 = a2 - v7;
  unsigned int v9 = 1 << *(_DWORD *)(a1 + 256);
  if ((int)a2 - (int)v7 - *(_DWORD *)(a1 + 28) > v9 && *(_DWORD *)(a1 + 40) == 0) {
    unsigned int v11 = a2 - v7 - v9;
  }
  else {
    unsigned int v11 = *(_DWORD *)(a1 + 28);
  }
  unsigned int v12 = *(_DWORD *)(a1 + 268);
  if (v12 >= 4) {
    LOBYTE(v12) = 4;
  }
  uint64_t v13 = *(void *)(a1 + 96);
  if (*(_DWORD *)(a1 + 300))
  {
    _X15 = ((0xCF1BBCDCBF9B0000 * *a2) ^ v13) >> (56 - v6);
    *(_DWORD *)(a1 + 44) = v8;
  }
  else
  {
    uint64_t v15 = a1 + 64;
    unint64_t v16 = *(unsigned int *)(a1 + 44);
    if (v8 - v16 >= 0x181)
    {
      uint64_t v17 = *(void *)(a1 + 56);
      uint64_t v18 = *(void *)(a1 + 112);
      if (v16 <= 0xFFFFFF9F)
      {
        unint64_t v70 = v16 + 96;
        do
        {
          unint64_t v71 = ((0xCF1BBCDCBF9B0000 * *(void *)(v7 + 8 + v16)) ^ *(void *)(a1 + 96)) >> (56 - v6);
          uint64_t v72 = (v71 >> 4) & 0xFFFFFF0;
          _X23 = v4 + 4 * v72;
          __asm { PRFM            #0, [X23] }
          _X22 = v5 + v72;
          __asm { PRFM            #0, [X22] }
          unint64_t v77 = *(unsigned int *)(v15 + 4 * (v16 & 7));
          *(_DWORD *)(v15 + 4 * (v16 & 7)) = v71;
          uint64_t v78 = (v77 >> 4) & 0xFFFFFF0;
          uint64_t v79 = v4 + 4 * v78;
          uint64_t v80 = (unsigned char *)(v5 + v78);
          if (((*v80 - 1) & 0xF) != 0) {
            uint64_t v81 = 0;
          }
          else {
            uint64_t v81 = 15;
          }
          uint64_t v82 = v81 + ((*v80 - 1) & 0xF);
          unsigned char *v80 = v82;
          v80[v82] = v77;
          *(_DWORD *)(v79 + 4 * v82) = v16++;
        }
        while (v16 < v70);
        uint64_t v18 = *(void *)(a1 + 112);
        uint64_t v17 = *(void *)(a1 + 56);
      }
      uint64_t v83 = v8 - 32;
      LODWORD(v16) = v8 - 32;
      int v84 = a2 + 1 - (v7 + v83);
      if ((v84 + 1) < 8) {
        int v85 = v84 + 1;
      }
      else {
        int v85 = 8;
      }
      if ((unint64_t)a2 + 1 >= v7 + v83) {
        int v86 = v85;
      }
      else {
        int v86 = 0;
      }
      if (v83 < v86 + (int)v83)
      {
        uint64_t v87 = *(void *)(a1 + 96);
        int v88 = 56 - *(_DWORD *)(a1 + 52);
        do
        {
          unint64_t v89 = ((0xCF1BBCDCBF9B0000 * *(void *)(v7 + v83)) ^ v87) >> v88;
          uint64_t v90 = (v89 >> 4) & 0xFFFFFF0;
          _X25 = v18 + 4 * v90;
          __asm { PRFM            #0, [X25] }
          _X24 = v17 + v90;
          __asm { PRFM            #0, [X24] }
          *(_DWORD *)(a1 + 4 * (v83++ & 7) + 64) = v89;
          --v86;
        }
        while (v86);
      }
    }
    else
    {
      uint64_t v17 = *(void *)(a1 + 56);
      uint64_t v18 = *(void *)(a1 + 112);
    }
    if (v16 < v8)
    {
      uint64_t v19 = *(void *)(a1 + 8) + 8;
      int v20 = 56 - *(_DWORD *)(a1 + 52);
      unint64_t v16 = v16;
      do
      {
        unint64_t v21 = ((0xCF1BBCDCBF9B0000 * *(void *)(v19 + v16)) ^ *(void *)(a1 + 96)) >> v20;
        uint64_t v22 = (v21 >> 4) & 0xFFFFFF0;
        _X25 = v18 + 4 * v22;
        __asm { PRFM            #0, [X25] }
        _X24 = v17 + v22;
        __asm { PRFM            #0, [X24] }
        unint64_t v30 = *(unsigned int *)(v15 + 4 * (v16 & 7));
        *(_DWORD *)(v15 + 4 * (v16 & 7)) = v21;
        uint64_t v31 = (v30 >> 4) & 0xFFFFFF0;
        uint64_t v32 = v18 + 4 * v31;
        uint64_t v33 = (unsigned char *)(v17 + v31);
        if (((*v33 - 1) & 0xF) != 0) {
          uint64_t v34 = 0;
        }
        else {
          uint64_t v34 = 15;
        }
        uint64_t v35 = v34 + ((*v33 - 1) & 0xF);
        *uint64_t v33 = v35;
        v33[v35] = v30;
        *(_DWORD *)(v32 + 4 * v35) = v16++;
      }
      while (v16 < (a2 - v7));
    }
    *(_DWORD *)(a1 + 44) = v8;
    unint64_t v36 = ((0xCF1BBCDCBF9B0000 * *(void *)(v7 + v8 + 8)) ^ v13) >> (56 - v6);
    uint64_t v37 = (v36 >> 4) & 0xFFFFFF0;
    _X4 = v4 + 4 * v37;
    __asm { PRFM            #0, [X4] }
    _X15 = v5 + v37;
    __asm { PRFM            #0, [X15] }
    LODWORD(_X15) = *(_DWORD *)(v15 + 4 * (v8 & 7));
    *(_DWORD *)(v15 + 4 * (v8 & 7)) = v36;
  }
  *(_DWORD *)(a1 + 104) += _X15;
  uint64_t v41 = (_X15 >> 4) & 0xFFFFFF0;
  uint64_t v42 = v4 + 4 * v41;
  uint64_t v43 = (int8x16_t *)(v5 + v41);
  char v44 = 4 * v43->i8[0];
  char v45 = (char)*v43;
  unint64_t v46 = __ROR8__(vshrn_n_s16((int16x8_t)vceqq_s8(*v43, vdupq_n_s8(_X15)), 4uLL), v44) & 0x8888888888888888;
  if (v46)
  {
    uint64_t v47 = 0;
    int v48 = 1 << v12;
    do
    {
      unsigned int v49 = ((__clz(__rbit64(v46)) + (v44 & 0xFC)) >> 2) & 0xF;
      if (v49)
      {
        uint64_t v50 = *(unsigned int *)(v42 + 4 * v49);
        if (v50 < v11) {
          break;
        }
        _X7 = v7 + v50;
        __asm { PRFM            #0, [X7] }
        v95[v47++] = v50;
        --v48;
      }
      v46 &= v46 - 1;
    }
    while (v46 && v48);
  }
  else
  {
    uint64_t v47 = 0;
  }
  if (((v45 - 1) & 0xF) != 0) {
    uint64_t v53 = 0;
  }
  else {
    uint64_t v53 = 15;
  }
  uint64_t v54 = v53 + ((v45 - 1) & 0xF);
  v43->i8[0] = v54;
  v43->i8[v54] = _X15;
  int v55 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v55 + 1;
  *(_DWORD *)(v42 + 4 * v54) = v55;
  if (v47)
  {
    uint64_t v56 = 0;
    unint64_t v57 = (unint64_t)a3 - 7;
    unsigned int v58 = v8 + 3;
    uint64_t v59 = a2 + 1;
    uint64_t v60 = v7 + 8;
    unint64_t v61 = 3;
    while (1)
    {
      uint64_t v62 = v95[v56];
      unsigned int v63 = (void *)(v7 + v62);
      if (*(_DWORD *)(v7 + v62 + v61 - 3) != *(_DWORD *)((char *)a2 + v61 - 3)) {
        goto LABEL_51;
      }
      if (v57 <= (unint64_t)a2)
      {
        unint64_t v66 = a2;
      }
      else
      {
        unint64_t v64 = *a2 ^ *v63;
        if (v64)
        {
          unint64_t result = __clz(__rbit64(v64)) >> 3;
          goto LABEL_49;
        }
        uint64_t v67 = 0;
        while (1)
        {
          unint64_t v66 = &v59[v67];
          if ((unint64_t)&v59[v67] >= v57) {
            break;
          }
          uint64_t v68 = *(void *)(v60 + v62 + v67 * 8);
          ++v67;
          unint64_t v69 = *v66 ^ v68;
          if (v69)
          {
            unint64_t result = v67 * 8 + (__clz(__rbit64(v69)) >> 3);
            goto LABEL_49;
          }
        }
        unsigned int v63 = (void *)(v60 + v62 + v67 * 8);
      }
      if (v66 < (void *)((char *)a3 - 3) && *(_DWORD *)v63 == *(_DWORD *)v66)
      {
        unint64_t v66 = (void *)((char *)v66 + 4);
        unsigned int v63 = (void *)((char *)v63 + 4);
      }
      if (v66 < (void *)((char *)a3 - 1) && *(unsigned __int16 *)v63 == *(unsigned __int16 *)v66)
      {
        unint64_t v66 = (void *)((char *)v66 + 2);
        unsigned int v63 = (void *)((char *)v63 + 2);
      }
      if (v66 < a3 && *(unsigned __int8 *)v63 == *(unsigned __int8 *)v66) {
        unint64_t v66 = (void *)((char *)v66 + 1);
      }
      unint64_t result = (char *)v66 - (char *)a2;
LABEL_49:
      if (result > v61)
      {
        *a4 = v58 - v62;
        unint64_t v61 = result;
        if ((void *)((char *)a2 + result) == a3) {
          return result;
        }
      }
LABEL_51:
      ++v56;
      unint64_t result = v61;
      if (v56 == v47) {
        return result;
      }
    }
  }
  return 3;
}

unint64_t sub_1DD2BFC60(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v101 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v5 = *(void *)(a1 + 56);
  int v6 = *(_DWORD *)(a1 + 52);
  uint64_t v7 = *(void *)(a1 + 8);
  unsigned int v8 = a2 - v7;
  unsigned int v9 = 1 << *(_DWORD *)(a1 + 256);
  if ((int)a2 - (int)v7 - *(_DWORD *)(a1 + 28) > v9 && *(_DWORD *)(a1 + 40) == 0) {
    unsigned int v11 = a2 - v7 - v9;
  }
  else {
    unsigned int v11 = *(_DWORD *)(a1 + 28);
  }
  unsigned int v12 = *(_DWORD *)(a1 + 268);
  if (v12 >= 5) {
    LOBYTE(v12) = 5;
  }
  uint64_t v13 = *(void *)(a1 + 96);
  if (*(_DWORD *)(a1 + 300))
  {
    _X15 = ((0xCF1BBCDCBF9B0000 * *a2) ^ v13) >> (56 - v6);
    *(_DWORD *)(a1 + 44) = v8;
  }
  else
  {
    uint64_t v15 = a1 + 64;
    unint64_t v16 = *(unsigned int *)(a1 + 44);
    if (v8 - v16 >= 0x181)
    {
      uint64_t v17 = *(void *)(a1 + 56);
      uint64_t v18 = *(void *)(a1 + 112);
      if (v16 <= 0xFFFFFF9F)
      {
        unint64_t v73 = v16 + 96;
        do
        {
          unint64_t v74 = ((0xCF1BBCDCBF9B0000 * *(void *)(v7 + 8 + v16)) ^ *(void *)(a1 + 96)) >> (56 - v6);
          uint64_t v75 = (v74 >> 3) & 0x1FFFFFE0;
          _X23 = v4 + 4 * v75;
          __asm
          {
            PRFM            #0, [X23]
            PRFM            #0, [X23,#0x40]
          }
          _X22 = v5 + v75;
          __asm { PRFM            #0, [X22] }
          unint64_t v81 = *(unsigned int *)(v15 + 4 * (v16 & 7));
          *(_DWORD *)(v15 + 4 * (v16 & 7)) = v74;
          uint64_t v82 = (v81 >> 3) & 0x1FFFFFE0;
          uint64_t v83 = v4 + 4 * v82;
          int v84 = (unsigned char *)(v5 + v82);
          if (((*v84 - 1) & 0x1F) != 0) {
            uint64_t v85 = 0;
          }
          else {
            uint64_t v85 = 31;
          }
          uint64_t v86 = v85 + ((*v84 - 1) & 0x1F);
          *int v84 = v86;
          v84[v86] = v81;
          *(_DWORD *)(v83 + 4 * v86) = v16++;
        }
        while (v16 < v73);
        uint64_t v18 = *(void *)(a1 + 112);
        uint64_t v17 = *(void *)(a1 + 56);
      }
      uint64_t v87 = v8 - 32;
      LODWORD(v16) = v8 - 32;
      int v88 = a2 + 1 - (v7 + v87);
      if ((v88 + 1) < 8) {
        int v89 = v88 + 1;
      }
      else {
        int v89 = 8;
      }
      if ((unint64_t)a2 + 1 >= v7 + v87) {
        int v90 = v89;
      }
      else {
        int v90 = 0;
      }
      if (v87 < v90 + (int)v87)
      {
        uint64_t v91 = *(void *)(a1 + 96);
        int v92 = 56 - *(_DWORD *)(a1 + 52);
        do
        {
          unint64_t v93 = ((0xCF1BBCDCBF9B0000 * *(void *)(v7 + v87)) ^ v91) >> v92;
          uint64_t v94 = (v93 >> 3) & 0x1FFFFFE0;
          _X25 = v18 + 4 * v94;
          __asm
          {
            PRFM            #0, [X25]
            PRFM            #0, [X25,#0x40]
          }
          _X24 = v17 + v94;
          __asm { PRFM            #0, [X24] }
          *(_DWORD *)(a1 + 4 * (v87++ & 7) + 64) = v93;
          --v90;
        }
        while (v90);
      }
    }
    else
    {
      uint64_t v17 = *(void *)(a1 + 56);
      uint64_t v18 = *(void *)(a1 + 112);
    }
    if (v16 < v8)
    {
      uint64_t v19 = *(void *)(a1 + 8) + 8;
      int v20 = 56 - *(_DWORD *)(a1 + 52);
      unint64_t v16 = v16;
      do
      {
        unint64_t v21 = ((0xCF1BBCDCBF9B0000 * *(void *)(v19 + v16)) ^ *(void *)(a1 + 96)) >> v20;
        uint64_t v22 = (v21 >> 3) & 0x1FFFFFE0;
        _X25 = v18 + 4 * v22;
        __asm
        {
          PRFM            #0, [X25]
          PRFM            #0, [X25,#0x40]
        }
        _X24 = v17 + v22;
        __asm { PRFM            #0, [X24] }
        unint64_t v31 = *(unsigned int *)(v15 + 4 * (v16 & 7));
        *(_DWORD *)(v15 + 4 * (v16 & 7)) = v21;
        uint64_t v32 = (v31 >> 3) & 0x1FFFFFE0;
        uint64_t v33 = v18 + 4 * v32;
        uint64_t v34 = (unsigned char *)(v17 + v32);
        if (((*v34 - 1) & 0x1F) != 0) {
          uint64_t v35 = 0;
        }
        else {
          uint64_t v35 = 31;
        }
        uint64_t v36 = v35 + ((*v34 - 1) & 0x1F);
        *uint64_t v34 = v36;
        v34[v36] = v31;
        *(_DWORD *)(v33 + 4 * v36) = v16++;
      }
      while (v16 < (a2 - v7));
    }
    *(_DWORD *)(a1 + 44) = v8;
    unint64_t v37 = ((0xCF1BBCDCBF9B0000 * *(void *)(v7 + v8 + 8)) ^ v13) >> (56 - v6);
    uint64_t v38 = (v37 >> 3) & 0x1FFFFFE0;
    _X4 = v4 + 4 * v38;
    __asm
    {
      PRFM            #0, [X4]
      PRFM            #0, [X4,#0x40]
    }
    _X15 = v5 + v38;
    __asm { PRFM            #0, [X15] }
    LODWORD(_X15) = *(_DWORD *)(v15 + 4 * (v8 & 7));
    *(_DWORD *)(v15 + 4 * (v8 & 7)) = v37;
  }
  *(_DWORD *)(a1 + 104) += _X15;
  uint64_t v43 = (_X15 >> 3) & 0x1FFFFFE0;
  uint64_t v44 = v4 + 4 * v43;
  char v45 = (__int16 *)(v5 + v43);
  int16x8x2_t v102 = vld2q_s16(v45);
  char v46 = *(unsigned char *)v45;
  char v47 = 2 * *(unsigned char *)v45;
  int8x16_t v48 = vdupq_n_s8(_X15);
  unint64_t v49 = __ROR8__(vsli_n_s8(vshrn_n_s16((int16x8_t)vceqq_s8(v48, (int8x16_t)v102.val[0]), 6uLL), vshrn_n_s16((int16x8_t)vceqq_s8(v48, (int8x16_t)v102.val[1]), 6uLL), 4uLL), v47) & 0x5555555555555555;
  if (v49)
  {
    uint64_t v50 = 0;
    int v51 = 1 << v12;
    do
    {
      unsigned int v52 = ((__clz(__rbit64(v49)) + (v47 & 0xFE)) >> 1) & 0x1F;
      if (v52)
      {
        uint64_t v53 = *(unsigned int *)(v44 + 4 * v52);
        if (v53 < v11) {
          break;
        }
        _X7 = v7 + v53;
        __asm { PRFM            #0, [X7] }
        v100[v50++] = v53;
        --v51;
      }
      v49 &= v49 - 1;
    }
    while (v49 && v51);
  }
  else
  {
    uint64_t v50 = 0;
  }
  if (((v46 - 1) & 0x1F) != 0) {
    uint64_t v56 = 0;
  }
  else {
    uint64_t v56 = 31;
  }
  uint64_t v57 = v56 + ((v46 - 1) & 0x1F);
  *(unsigned char *)char v45 = v57;
  *((unsigned char *)v45 + v57) = _X15;
  int v58 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v58 + 1;
  *(_DWORD *)(v44 + 4 * v57) = v58;
  if (v50)
  {
    uint64_t v59 = 0;
    unint64_t v60 = (unint64_t)a3 - 7;
    unsigned int v61 = v8 + 3;
    uint64_t v62 = a2 + 1;
    uint64_t v63 = v7 + 8;
    unint64_t v64 = 3;
    while (1)
    {
      uint64_t v65 = v100[v59];
      unint64_t v66 = (void *)(v7 + v65);
      if (*(_DWORD *)(v7 + v65 + v64 - 3) != *(_DWORD *)((char *)a2 + v64 - 3)) {
        goto LABEL_51;
      }
      if (v60 <= (unint64_t)a2)
      {
        unint64_t v69 = a2;
      }
      else
      {
        unint64_t v67 = *a2 ^ *v66;
        if (v67)
        {
          unint64_t result = __clz(__rbit64(v67)) >> 3;
          goto LABEL_49;
        }
        uint64_t v70 = 0;
        while (1)
        {
          unint64_t v69 = &v62[v70];
          if ((unint64_t)&v62[v70] >= v60) {
            break;
          }
          uint64_t v71 = *(void *)(v63 + v65 + v70 * 8);
          ++v70;
          unint64_t v72 = *v69 ^ v71;
          if (v72)
          {
            unint64_t result = v70 * 8 + (__clz(__rbit64(v72)) >> 3);
            goto LABEL_49;
          }
        }
        unint64_t v66 = (void *)(v63 + v65 + v70 * 8);
      }
      if (v69 < (void *)((char *)a3 - 3) && *(_DWORD *)v66 == *(_DWORD *)v69)
      {
        unint64_t v69 = (void *)((char *)v69 + 4);
        unint64_t v66 = (void *)((char *)v66 + 4);
      }
      if (v69 < (void *)((char *)a3 - 1) && *(unsigned __int16 *)v66 == *(unsigned __int16 *)v69)
      {
        unint64_t v69 = (void *)((char *)v69 + 2);
        unint64_t v66 = (void *)((char *)v66 + 2);
      }
      if (v69 < a3 && *(unsigned __int8 *)v66 == *(unsigned __int8 *)v69) {
        unint64_t v69 = (void *)((char *)v69 + 1);
      }
      unint64_t result = (char *)v69 - (char *)a2;
LABEL_49:
      if (result > v64)
      {
        *a4 = v61 - v65;
        unint64_t v64 = result;
        if ((void *)((char *)a2 + result) == a3) {
          return result;
        }
      }
LABEL_51:
      ++v59;
      unint64_t result = v64;
      if (v59 == v50) {
        return result;
      }
    }
  }
  return 3;
}

unint64_t sub_1DD2C01C8(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v105 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v5 = *(void *)(a1 + 56);
  int v6 = *(_DWORD *)(a1 + 52);
  uint64_t v7 = *(void *)(a1 + 8);
  unsigned int v8 = a2 - v7;
  unsigned int v9 = 1 << *(_DWORD *)(a1 + 256);
  if ((int)a2 - (int)v7 - *(_DWORD *)(a1 + 28) > v9 && *(_DWORD *)(a1 + 40) == 0) {
    unsigned int v11 = a2 - v7 - v9;
  }
  else {
    unsigned int v11 = *(_DWORD *)(a1 + 28);
  }
  unsigned int v12 = *(_DWORD *)(a1 + 268);
  if (v12 >= 6) {
    LOBYTE(v12) = 6;
  }
  uint64_t v13 = *(void *)(a1 + 96);
  if (*(_DWORD *)(a1 + 300))
  {
    _X15 = ((0xCF1BBCDCBF9B0000 * *a2) ^ v13) >> (56 - v6);
    *(_DWORD *)(a1 + 44) = v8;
  }
  else
  {
    uint64_t v15 = a1 + 64;
    unint64_t v16 = *(unsigned int *)(a1 + 44);
    if (v8 - v16 >= 0x181)
    {
      uint64_t v17 = *(void *)(a1 + 56);
      uint64_t v18 = *(void *)(a1 + 112);
      if (v16 <= 0xFFFFFF9F)
      {
        unint64_t v75 = v16 + 96;
        do
        {
          unint64_t v76 = ((0xCF1BBCDCBF9B0000 * *(void *)(v7 + 8 + v16)) ^ *(void *)(a1 + 96)) >> (56 - v6);
          uint64_t v77 = (v76 >> 2) & 0x3FFFFFC0;
          _X23 = v4 + 4 * v77;
          __asm
          {
            PRFM            #0, [X23]
            PRFM            #0, [X23,#0x40]
          }
          _X22 = v5 + v77;
          __asm
          {
            PRFM            #0, [X22]
            PRFM            #0, [X22,#0x20]
          }
          unint64_t v84 = *(unsigned int *)(v15 + 4 * (v16 & 7));
          *(_DWORD *)(v15 + 4 * (v16 & 7)) = v76;
          uint64_t v85 = (v84 >> 2) & 0x3FFFFFC0;
          uint64_t v86 = v4 + 4 * v85;
          uint64_t v87 = (unsigned char *)(v5 + v85);
          if (((*v87 - 1) & 0x3F) != 0) {
            uint64_t v88 = 0;
          }
          else {
            uint64_t v88 = 63;
          }
          uint64_t v89 = v88 + ((*v87 - 1) & 0x3F);
          unsigned char *v87 = v89;
          v87[v89] = v84;
          *(_DWORD *)(v86 + 4 * v89) = v16++;
        }
        while (v16 < v75);
        uint64_t v18 = *(void *)(a1 + 112);
        uint64_t v17 = *(void *)(a1 + 56);
      }
      uint64_t v90 = v8 - 32;
      LODWORD(v16) = v8 - 32;
      int v91 = a2 + 1 - (v7 + v90);
      if ((v91 + 1) < 8) {
        int v92 = v91 + 1;
      }
      else {
        int v92 = 8;
      }
      if ((unint64_t)a2 + 1 >= v7 + v90) {
        int v93 = v92;
      }
      else {
        int v93 = 0;
      }
      if (v90 < v93 + (int)v90)
      {
        uint64_t v94 = *(void *)(a1 + 96);
        int v95 = 56 - *(_DWORD *)(a1 + 52);
        do
        {
          unint64_t v96 = ((0xCF1BBCDCBF9B0000 * *(void *)(v7 + v90)) ^ v94) >> v95;
          uint64_t v97 = (v96 >> 2) & 0x3FFFFFC0;
          _X25 = v18 + 4 * v97;
          __asm
          {
            PRFM            #0, [X25]
            PRFM            #0, [X25,#0x40]
          }
          _X24 = v17 + v97;
          __asm
          {
            PRFM            #0, [X24]
            PRFM            #0, [X24,#0x20]
          }
          *(_DWORD *)(a1 + 4 * (v90++ & 7) + 64) = v96;
          --v93;
        }
        while (v93);
      }
    }
    else
    {
      uint64_t v17 = *(void *)(a1 + 56);
      uint64_t v18 = *(void *)(a1 + 112);
    }
    if (v16 < v8)
    {
      uint64_t v19 = *(void *)(a1 + 8) + 8;
      int v20 = 56 - *(_DWORD *)(a1 + 52);
      unint64_t v16 = v16;
      do
      {
        unint64_t v21 = ((0xCF1BBCDCBF9B0000 * *(void *)(v19 + v16)) ^ *(void *)(a1 + 96)) >> v20;
        uint64_t v22 = (v21 >> 2) & 0x3FFFFFC0;
        _X25 = v18 + 4 * v22;
        __asm
        {
          PRFM            #0, [X25]
          PRFM            #0, [X25,#0x40]
        }
        _X24 = v17 + v22;
        __asm
        {
          PRFM            #0, [X24]
          PRFM            #0, [X24,#0x20]
        }
        unint64_t v32 = *(unsigned int *)(v15 + 4 * (v16 & 7));
        *(_DWORD *)(v15 + 4 * (v16 & 7)) = v21;
        uint64_t v33 = (v32 >> 2) & 0x3FFFFFC0;
        uint64_t v34 = v18 + 4 * v33;
        uint64_t v35 = (unsigned char *)(v17 + v33);
        if (((*v35 - 1) & 0x3F) != 0) {
          uint64_t v36 = 0;
        }
        else {
          uint64_t v36 = 63;
        }
        uint64_t v37 = v36 + ((*v35 - 1) & 0x3F);
        *uint64_t v35 = v37;
        v35[v37] = v32;
        *(_DWORD *)(v34 + 4 * v37) = v16++;
      }
      while (v16 < (a2 - v7));
    }
    *(_DWORD *)(a1 + 44) = v8;
    unint64_t v38 = ((0xCF1BBCDCBF9B0000 * *(void *)(v7 + v8 + 8)) ^ v13) >> (56 - v6);
    uint64_t v39 = (v38 >> 2) & 0x3FFFFFC0;
    _X4 = v4 + 4 * v39;
    __asm
    {
      PRFM            #0, [X4]
      PRFM            #0, [X4,#0x40]
    }
    _X15 = v5 + v39;
    __asm
    {
      PRFM            #0, [X15]
      PRFM            #0, [X15,#0x20]
    }
    LODWORD(_X15) = *(_DWORD *)(v15 + 4 * (v8 & 7));
    *(_DWORD *)(v15 + 4 * (v8 & 7)) = v38;
  }
  *(_DWORD *)(a1 + 104) += _X15;
  uint64_t v45 = (_X15 >> 2) & 0x3FFFFFC0;
  uint64_t v46 = v4 + 4 * v45;
  char v47 = (char *)(v5 + v45);
  char v48 = *v47;
  int8x16x4_t v106 = vld4q_s8(v47);
  int8x16_t v49 = vdupq_n_s8(_X15);
  v106.val[0] = vsriq_n_s8(vsriq_n_s8(vceqq_s8(v106.val[3], v49), vceqq_s8(v106.val[2], v49), 1uLL), vsriq_n_s8(vceqq_s8(v106.val[1], v49), vceqq_s8(v106.val[0], v49), 1uLL), 2uLL);
  int8x8_t v50 = vshrn_n_s16((int16x8_t)vsriq_n_s8(v106.val[0], v106.val[0], 4uLL), 4uLL);
  uint64_t v51 = 0;
  if (v50)
  {
    int v52 = 1 << v12;
    unint64_t v53 = __ROR8__(*(void *)&v50, v48);
    do
    {
      unsigned int v54 = (__clz(__rbit64(v53)) + v48) & 0x3F;
      if (v54)
      {
        uint64_t v55 = *(unsigned int *)(v46 + 4 * v54);
        if (v55 < v11) {
          break;
        }
        _X6 = v7 + v55;
        __asm { PRFM            #0, [X6] }
        v104[v51++] = v55;
        --v52;
      }
      v53 &= v53 - 1;
    }
    while (v53 && v52);
  }
  if (((v48 - 1) & 0x3F) != 0) {
    uint64_t v58 = 0;
  }
  else {
    uint64_t v58 = 63;
  }
  uint64_t v59 = v58 + ((v48 - 1) & 0x3F);
  *char v47 = v59;
  v47[v59] = _X15;
  int v60 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v60 + 1;
  *(_DWORD *)(v46 + 4 * v59) = v60;
  if (v51)
  {
    uint64_t v61 = 0;
    unint64_t v62 = (unint64_t)a3 - 7;
    unsigned int v63 = v8 + 3;
    unint64_t v64 = a2 + 1;
    uint64_t v65 = v7 + 8;
    unint64_t v66 = 3;
    while (1)
    {
      uint64_t v67 = v104[v61];
      uint64_t v68 = (void *)(v7 + v67);
      if (*(_DWORD *)(v7 + v67 + v66 - 3) != *(_DWORD *)((char *)a2 + v66 - 3)) {
        goto LABEL_49;
      }
      if (v62 <= (unint64_t)a2)
      {
        uint64_t v71 = a2;
      }
      else
      {
        unint64_t v69 = *a2 ^ *v68;
        if (v69)
        {
          unint64_t result = __clz(__rbit64(v69)) >> 3;
          goto LABEL_47;
        }
        uint64_t v72 = 0;
        while (1)
        {
          uint64_t v71 = &v64[v72];
          if ((unint64_t)&v64[v72] >= v62) {
            break;
          }
          uint64_t v73 = *(void *)(v65 + v67 + v72 * 8);
          ++v72;
          unint64_t v74 = *v71 ^ v73;
          if (v74)
          {
            unint64_t result = v72 * 8 + (__clz(__rbit64(v74)) >> 3);
            goto LABEL_47;
          }
        }
        uint64_t v68 = (void *)(v65 + v67 + v72 * 8);
      }
      if (v71 < (void *)((char *)a3 - 3) && *(_DWORD *)v68 == *(_DWORD *)v71)
      {
        uint64_t v71 = (void *)((char *)v71 + 4);
        uint64_t v68 = (void *)((char *)v68 + 4);
      }
      if (v71 < (void *)((char *)a3 - 1) && *(unsigned __int16 *)v68 == *(unsigned __int16 *)v71)
      {
        uint64_t v71 = (void *)((char *)v71 + 2);
        uint64_t v68 = (void *)((char *)v68 + 2);
      }
      if (v71 < a3 && *(unsigned __int8 *)v68 == *(unsigned __int8 *)v71) {
        uint64_t v71 = (void *)((char *)v71 + 1);
      }
      unint64_t result = (char *)v71 - (char *)a2;
LABEL_47:
      if (result > v66)
      {
        *a4 = v63 - v67;
        unint64_t v66 = result;
        if ((void *)((char *)a2 + result) == a3) {
          return result;
        }
      }
LABEL_49:
      ++v61;
      unint64_t result = v66;
      if (v61 == v51) {
        return result;
      }
    }
  }
  return 3;
}

unint64_t sub_1DD2C073C(uint64_t a1, _DWORD *a2, unint64_t a3, void *a4)
{
  uint64_t v5 = a2;
  uint64_t v6 = *(void *)(a1 + 128);
  int v7 = *(_DWORD *)(a1 + 260);
  unsigned int v8 = 1 << v7;
  int v9 = (1 << v7) - 1;
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v12 = *(unsigned int *)(a1 + 24);
  int v60 = (void *)(v11 + v12);
  uint64_t v59 = (char *)(v10 + v12);
  unsigned int v13 = a2 - v11;
  unsigned int v14 = 1 << *(_DWORD *)(a1 + 256);
  unsigned int v15 = a2 - v11 - v14;
  BOOL v16 = (int)a2 - (int)v11 - *(_DWORD *)(a1 + 28) > v14;
  uint64_t v17 = *(unsigned int *)(a1 + 44);
  if (v16 && *(_DWORD *)(a1 + 40) == 0) {
    unsigned int v19 = v15;
  }
  else {
    unsigned int v19 = *(_DWORD *)(a1 + 28);
  }
  BOOL v20 = v13 >= v8;
  unsigned int v21 = v13 - v8;
  if (v20) {
    unsigned int v22 = v21;
  }
  else {
    unsigned int v22 = 0;
  }
  int v23 = 1 << *(_DWORD *)(a1 + 268);
  int v24 = *(_DWORD *)(a1 + 300);
  uint64_t v25 = *(void *)(a1 + 112);
  int v26 = ~(-1 << v7);
  int v27 = 32 - *(_DWORD *)(a1 + 264);
  if (v17 <= v13) {
    uint64_t v28 = v13;
  }
  else {
    uint64_t v28 = v17;
  }
  do
  {
    if (v28 == v17) {
      break;
    }
    unsigned int v29 = (-1640531535 * *(_DWORD *)(v11 + v17)) >> v27;
    *(_DWORD *)(v6 + 4 * (v17 & v26)) = *(_DWORD *)(v25 + 4 * v29);
    *(_DWORD *)(v25 + 4 * v29) = v17++;
  }
  while (!v24);
  *(_DWORD *)(a1 + 44) = v13;
  unint64_t v30 = (char *)a2 - 3;
  int v31 = *a2;
  unsigned int v32 = *(_DWORD *)(v25 + 4 * ((-1640531535 * *a2) >> v27));
  if (v32 < v19) {
    return 3;
  }
  unint64_t v34 = a3 - 7;
  unint64_t v50 = a3 - 1;
  unint64_t v51 = a3 - 3;
  unsigned int v54 = a2 + 1;
  unsigned int v53 = v13 + 3;
  char v48 = a2 + 2;
  uint64_t v49 = v11 + 8;
  unint64_t v35 = 3;
  unsigned int v58 = v22;
  uint64_t v56 = v6;
  uint64_t v57 = v11;
  int v55 = v9;
  uint64_t v52 = v10;
  while (1)
  {
    uint64_t v36 = v32;
    if (v32 >= v12)
    {
      uint64_t v42 = (void *)(v11 + v32);
      if (*(_DWORD *)((char *)v42 + v35 - 3) != *(_DWORD *)&v30[v35]) {
        goto LABEL_38;
      }
      if (v34 <= (unint64_t)v5)
      {
        uint64_t v44 = v5;
      }
      else
      {
        unint64_t v43 = *v5 ^ *v42;
        if (v43)
        {
          unint64_t result = __clz(__rbit64(v43)) >> 3;
          goto LABEL_36;
        }
        uint64_t v45 = 0;
        while (1)
        {
          uint64_t v44 = &v48[v45];
          if ((unint64_t)&v48[v45] >= v34) {
            break;
          }
          uint64_t v46 = *(void *)(v49 + v36 + v45 * 4);
          v45 += 2;
          unint64_t v47 = *v44 ^ v46;
          if (v47)
          {
            unint64_t result = v45 * 4 + (__clz(__rbit64(v47)) >> 3);
            goto LABEL_36;
          }
        }
        uint64_t v42 = (void *)(v49 + v36 + v45 * 4);
      }
      if ((unint64_t)v44 < v51 && *(_DWORD *)v42 == *(_DWORD *)v44)
      {
        uint64_t v44 = (void *)((char *)v44 + 4);
        uint64_t v42 = (void *)((char *)v42 + 4);
      }
      if ((unint64_t)v44 < v50 && *(unsigned __int16 *)v42 == *(unsigned __int16 *)v44)
      {
        uint64_t v44 = (void *)((char *)v44 + 2);
        uint64_t v42 = (void *)((char *)v42 + 2);
      }
      if ((unint64_t)v44 < a3 && *(unsigned __int8 *)v42 == *(unsigned __int8 *)v44) {
        uint64_t v44 = (void *)((char *)v44 + 1);
      }
      unint64_t result = (char *)v44 - (char *)v5;
    }
    else
    {
      uint64_t v37 = v10 + v32;
      if (*(_DWORD *)(v10 + v36) != v31) {
        goto LABEL_38;
      }
      unint64_t v38 = v5;
      uint64_t v39 = v12;
      unint64_t v40 = v35;
      unint64_t v41 = sub_1DD2A6010(v54, (char *)(v37 + 4), a3, v59, v60);
      unint64_t v35 = v40;
      uint64_t v12 = v39;
      uint64_t v5 = v38;
      uint64_t v6 = v56;
      uint64_t v11 = v57;
      uint64_t v10 = v52;
      unsigned int v22 = v58;
      int v9 = v55;
      unint64_t result = v41 + 4;
    }
LABEL_36:
    if (result > v35)
    {
      *a4 = v53 - v36;
      unint64_t v35 = result;
      if ((void *)((char *)v5 + result) == (void *)a3) {
        return result;
      }
    }
LABEL_38:
    if (v36 <= v22) {
      return v35;
    }
    if (!--v23) {
      return v35;
    }
    unsigned int v32 = *(_DWORD *)(v6 + 4 * (v36 & v9));
    unint64_t result = v35;
    if (v32 < v19) {
      return result;
    }
  }
}

unint64_t sub_1DD2C0A64(uint64_t a1, void *a2, unint64_t a3, void *a4)
{
  uint64_t v6 = *(void *)(a1 + 128);
  int v7 = *(_DWORD *)(a1 + 260);
  unsigned int v8 = 1 << v7;
  int v9 = (1 << v7) - 1;
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v12 = *(unsigned int *)(a1 + 24);
  unsigned int v13 = *(_DWORD *)(a1 + 28);
  unsigned int v58 = (void *)(v11 + v12);
  uint64_t v57 = (char *)(v10 + v12);
  unsigned int v14 = a2 - v11;
  unsigned int v15 = 1 << *(_DWORD *)(a1 + 256);
  unsigned int v16 = a2 - v11 - v15;
  BOOL v17 = a2 - v11 - v13 > v15;
  uint64_t v18 = *(unsigned int *)(a1 + 44);
  if (v17 && *(_DWORD *)(a1 + 40) == 0) {
    uint64_t v20 = v16;
  }
  else {
    uint64_t v20 = v13;
  }
  BOOL v21 = v14 >= v8;
  unsigned int v22 = v14 - v8;
  if (v21) {
    unsigned int v23 = v22;
  }
  else {
    unsigned int v23 = 0;
  }
  int v24 = 1 << *(_DWORD *)(a1 + 268);
  int v25 = *(_DWORD *)(a1 + 300);
  uint64_t v26 = *(void *)(a1 + 112);
  int v27 = ~(-1 << v7);
  int v28 = 64 - *(_DWORD *)(a1 + 264);
  if (v18 <= v14) {
    uint64_t v29 = v14;
  }
  else {
    uint64_t v29 = v18;
  }
  do
  {
    if (v29 == v18) {
      break;
    }
    unint64_t v30 = (0xCF1BBCDCBB000000 * *(void *)(v11 + v18)) >> v28;
    *(_DWORD *)(v6 + 4 * (v18 & v27)) = *(_DWORD *)(v26 + 4 * v30);
    *(_DWORD *)(v26 + 4 * v30) = v18++;
  }
  while (!v25);
  uint64_t v31 = *a2;
  *(_DWORD *)(a1 + 44) = v14;
  unsigned int v32 = *(_DWORD *)(v26 + 4 * ((0xCF1BBCDCBB000000 * v31) >> v28));
  if (v32 < v20) {
    return 3;
  }
  unint64_t v34 = a3 - 7;
  unint64_t v50 = a3 - 1;
  unint64_t v51 = a3 - 3;
  int v52 = v9;
  unsigned int v53 = v14 + 3;
  char v48 = a2 + 1;
  uint64_t v49 = v11 + 8;
  unint64_t v35 = 3;
  uint64_t v55 = v6;
  uint64_t v56 = v11;
  unsigned int v54 = v23;
  while (1)
  {
    uint64_t v36 = v32;
    if (v32 >= v12)
    {
      uint64_t v42 = (void *)(v11 + v32);
      if (*(_DWORD *)((char *)v42 + v35 - 3) != *(_DWORD *)((char *)a2 + v35 - 3)) {
        goto LABEL_38;
      }
      if (v34 <= (unint64_t)a2)
      {
        uint64_t v44 = a2;
      }
      else
      {
        unint64_t v43 = *a2 ^ *v42;
        if (v43)
        {
          unint64_t result = __clz(__rbit64(v43)) >> 3;
          goto LABEL_36;
        }
        uint64_t v45 = 0;
        while (1)
        {
          uint64_t v44 = &v48[v45];
          if ((unint64_t)&v48[v45] >= v34) {
            break;
          }
          uint64_t v46 = *(void *)(v49 + v36 + v45 * 8);
          ++v45;
          unint64_t v47 = *v44 ^ v46;
          if (v47)
          {
            unint64_t result = v45 * 8 + (__clz(__rbit64(v47)) >> 3);
            goto LABEL_36;
          }
        }
        uint64_t v42 = (void *)(v49 + v36 + v45 * 8);
      }
      if ((unint64_t)v44 < v51 && *(_DWORD *)v42 == *(_DWORD *)v44)
      {
        uint64_t v44 = (void *)((char *)v44 + 4);
        uint64_t v42 = (void *)((char *)v42 + 4);
      }
      if ((unint64_t)v44 < v50 && *(unsigned __int16 *)v42 == *(unsigned __int16 *)v44)
      {
        uint64_t v44 = (void *)((char *)v44 + 2);
        uint64_t v42 = (void *)((char *)v42 + 2);
      }
      if ((unint64_t)v44 < a3 && *(unsigned __int8 *)v42 == *(unsigned __int8 *)v44) {
        uint64_t v44 = (void *)((char *)v44 + 1);
      }
      unint64_t result = (char *)v44 - (char *)a2;
    }
    else
    {
      uint64_t v37 = v10 + v32;
      if (*(_DWORD *)(v10 + v36) != *(_DWORD *)a2) {
        goto LABEL_38;
      }
      uint64_t v38 = v10;
      uint64_t v39 = v12;
      uint64_t v40 = v20;
      unint64_t v41 = sub_1DD2A6010((void *)((char *)a2 + 4), (char *)(v37 + 4), a3, v57, v58);
      uint64_t v20 = v40;
      unsigned int v23 = v54;
      uint64_t v12 = v39;
      uint64_t v10 = v38;
      uint64_t v6 = v55;
      uint64_t v11 = v56;
      int v9 = v52;
      unint64_t result = v41 + 4;
    }
LABEL_36:
    if (result > v35)
    {
      *a4 = v53 - v36;
      unint64_t v35 = result;
      if ((void *)((char *)a2 + result) == (void *)a3) {
        return result;
      }
    }
LABEL_38:
    if (v36 <= v23) {
      return v35;
    }
    if (!--v24) {
      return v35;
    }
    unsigned int v32 = *(_DWORD *)(v6 + 4 * (v36 & v9));
    unint64_t result = v35;
    if (v32 < v20) {
      return result;
    }
  }
}

unint64_t sub_1DD2C0D88(uint64_t a1, void *a2, unint64_t a3, void *a4)
{
  uint64_t v6 = *(void *)(a1 + 128);
  int v7 = *(_DWORD *)(a1 + 260);
  unsigned int v8 = 1 << v7;
  int v9 = (1 << v7) - 1;
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v12 = *(unsigned int *)(a1 + 24);
  unsigned int v13 = *(_DWORD *)(a1 + 28);
  unsigned int v58 = (void *)(v11 + v12);
  uint64_t v57 = (char *)(v10 + v12);
  unsigned int v14 = a2 - v11;
  unsigned int v15 = 1 << *(_DWORD *)(a1 + 256);
  unsigned int v16 = a2 - v11 - v15;
  BOOL v17 = a2 - v11 - v13 > v15;
  uint64_t v18 = *(unsigned int *)(a1 + 44);
  if (v17 && *(_DWORD *)(a1 + 40) == 0) {
    uint64_t v20 = v16;
  }
  else {
    uint64_t v20 = v13;
  }
  BOOL v21 = v14 >= v8;
  unsigned int v22 = v14 - v8;
  if (v21) {
    unsigned int v23 = v22;
  }
  else {
    unsigned int v23 = 0;
  }
  int v24 = 1 << *(_DWORD *)(a1 + 268);
  int v25 = *(_DWORD *)(a1 + 300);
  uint64_t v26 = *(void *)(a1 + 112);
  int v27 = ~(-1 << v7);
  int v28 = 64 - *(_DWORD *)(a1 + 264);
  if (v18 <= v14) {
    uint64_t v29 = v14;
  }
  else {
    uint64_t v29 = v18;
  }
  do
  {
    if (v29 == v18) {
      break;
    }
    unint64_t v30 = (0xCF1BBCDCBF9B0000 * *(void *)(v11 + v18)) >> v28;
    *(_DWORD *)(v6 + 4 * (v18 & v27)) = *(_DWORD *)(v26 + 4 * v30);
    *(_DWORD *)(v26 + 4 * v30) = v18++;
  }
  while (!v25);
  uint64_t v31 = *a2;
  *(_DWORD *)(a1 + 44) = v14;
  unsigned int v32 = *(_DWORD *)(v26 + 4 * ((0xCF1BBCDCBF9B0000 * v31) >> v28));
  if (v32 < v20) {
    return 3;
  }
  unint64_t v34 = a3 - 7;
  unint64_t v50 = a3 - 1;
  unint64_t v51 = a3 - 3;
  int v52 = v9;
  unsigned int v53 = v14 + 3;
  char v48 = a2 + 1;
  uint64_t v49 = v11 + 8;
  unint64_t v35 = 3;
  uint64_t v55 = v6;
  uint64_t v56 = v11;
  unsigned int v54 = v23;
  while (1)
  {
    uint64_t v36 = v32;
    if (v32 >= v12)
    {
      uint64_t v42 = (void *)(v11 + v32);
      if (*(_DWORD *)((char *)v42 + v35 - 3) != *(_DWORD *)((char *)a2 + v35 - 3)) {
        goto LABEL_38;
      }
      if (v34 <= (unint64_t)a2)
      {
        uint64_t v44 = a2;
      }
      else
      {
        unint64_t v43 = *a2 ^ *v42;
        if (v43)
        {
          unint64_t result = __clz(__rbit64(v43)) >> 3;
          goto LABEL_36;
        }
        uint64_t v45 = 0;
        while (1)
        {
          uint64_t v44 = &v48[v45];
          if ((unint64_t)&v48[v45] >= v34) {
            break;
          }
          uint64_t v46 = *(void *)(v49 + v36 + v45 * 8);
          ++v45;
          unint64_t v47 = *v44 ^ v46;
          if (v47)
          {
            unint64_t result = v45 * 8 + (__clz(__rbit64(v47)) >> 3);
            goto LABEL_36;
          }
        }
        uint64_t v42 = (void *)(v49 + v36 + v45 * 8);
      }
      if ((unint64_t)v44 < v51 && *(_DWORD *)v42 == *(_DWORD *)v44)
      {
        uint64_t v44 = (void *)((char *)v44 + 4);
        uint64_t v42 = (void *)((char *)v42 + 4);
      }
      if ((unint64_t)v44 < v50 && *(unsigned __int16 *)v42 == *(unsigned __int16 *)v44)
      {
        uint64_t v44 = (void *)((char *)v44 + 2);
        uint64_t v42 = (void *)((char *)v42 + 2);
      }
      if ((unint64_t)v44 < a3 && *(unsigned __int8 *)v42 == *(unsigned __int8 *)v44) {
        uint64_t v44 = (void *)((char *)v44 + 1);
      }
      unint64_t result = (char *)v44 - (char *)a2;
    }
    else
    {
      uint64_t v37 = v10 + v32;
      if (*(_DWORD *)(v10 + v36) != *(_DWORD *)a2) {
        goto LABEL_38;
      }
      uint64_t v38 = v10;
      uint64_t v39 = v12;
      uint64_t v40 = v20;
      unint64_t v41 = sub_1DD2A6010((void *)((char *)a2 + 4), (char *)(v37 + 4), a3, v57, v58);
      uint64_t v20 = v40;
      unsigned int v23 = v54;
      uint64_t v12 = v39;
      uint64_t v10 = v38;
      uint64_t v6 = v55;
      uint64_t v11 = v56;
      int v9 = v52;
      unint64_t result = v41 + 4;
    }
LABEL_36:
    if (result > v35)
    {
      *a4 = v53 - v36;
      unint64_t v35 = result;
      if ((void *)((char *)a2 + result) == (void *)a3) {
        return result;
      }
    }
LABEL_38:
    if (v36 <= v23) {
      return v35;
    }
    if (!--v24) {
      return v35;
    }
    unsigned int v32 = *(_DWORD *)(v6 + 4 * (v36 & v9));
    unint64_t result = v35;
    if (v32 < v20) {
      return result;
    }
  }
}

unint64_t sub_1DD2C10AC(uint64_t a1, uint64_t *a2, unint64_t a3, unsigned int *a4)
{
  if (*(void *)(a1 + 8) + (unint64_t)*(unsigned int *)(a1 + 44) > (unint64_t)a2) {
    return 0;
  }
  sub_1DD2CE248(a1, (int)a2, 4);
  return sub_1DD2CE388(a1, a2, a3, a4, 4, 1);
}

unint64_t sub_1DD2C1138(uint64_t a1, uint64_t *a2, unint64_t a3, unsigned int *a4)
{
  if (*(void *)(a1 + 8) + (unint64_t)*(unsigned int *)(a1 + 44) > (unint64_t)a2) {
    return 0;
  }
  sub_1DD2CE248(a1, (int)a2, 5);
  return sub_1DD2CE388(a1, a2, a3, a4, 5, 1);
}

unint64_t sub_1DD2C11C4(uint64_t a1, uint64_t *a2, unint64_t a3, unsigned int *a4)
{
  if (*(void *)(a1 + 8) + (unint64_t)*(unsigned int *)(a1 + 44) > (unint64_t)a2) {
    return 0;
  }
  sub_1DD2CE248(a1, (int)a2, 6);
  return sub_1DD2CE388(a1, a2, a3, a4, 6, 1);
}

unint64_t sub_1DD2C1250(uint64_t a1, _DWORD *a2, unint64_t a3, void *a4)
{
  uint64_t v4 = a2;
  uint64_t v115 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 112);
  uint64_t v6 = *(void *)(a1 + 56);
  int v7 = *(_DWORD *)(a1 + 52);
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  unsigned int v10 = a2 - v9;
  unsigned int v11 = 1 << *(_DWORD *)(a1 + 256);
  uint64_t v12 = *(unsigned int *)(a1 + 24);
  if ((int)a2 - (int)v9 - *(_DWORD *)(a1 + 28) > v11 && *(_DWORD *)(a1 + 40) == 0) {
    unsigned int v14 = a2 - v9 - v11;
  }
  else {
    unsigned int v14 = *(_DWORD *)(a1 + 28);
  }
  unsigned int v15 = *(_DWORD *)(a1 + 268);
  if (v15 >= 4) {
    LOBYTE(v15) = 4;
  }
  uint64_t v16 = *(void *)(a1 + 96);
  uint64_t v113 = *(void *)(a1 + 8);
  if (*(_DWORD *)(a1 + 300))
  {
    unsigned int v17 = ((-1640531535 * *a2) ^ v16) >> (24 - v7);
    *(_DWORD *)(a1 + 44) = v10;
  }
  else
  {
    uint64_t v18 = a1 + 64;
    unint64_t v19 = *(unsigned int *)(a1 + 44);
    uint64_t v20 = *(void *)(a1 + 16);
    if (v10 - v19 >= 0x181)
    {
      uint64_t v21 = *(void *)(a1 + 56);
      uint64_t v22 = *(void *)(a1 + 112);
      if (v19 <= 0xFFFFFF9F)
      {
        unint64_t v79 = v19 + 96;
        do
        {
          unsigned int v80 = ((-1640531535 * *(_DWORD *)(v9 + 8 + v19)) ^ *(_DWORD *)(a1 + 96)) >> (24 - v7);
          uint64_t v81 = (v80 >> 4) & 0xFFFFFF0;
          _X19 = v5 + 4 * v81;
          __asm { PRFM            #0, [X19] }
          _X7 = v6 + v81;
          __asm { PRFM            #0, [X7] }
          unint64_t v86 = *(unsigned int *)(v18 + 4 * (v19 & 7));
          *(_DWORD *)(v18 + 4 * (v19 & 7)) = v80;
          uint64_t v87 = (v86 >> 4) & 0xFFFFFF0;
          uint64_t v88 = v5 + 4 * v87;
          uint64_t v89 = (unsigned char *)(v6 + v87);
          if (((*v89 - 1) & 0xF) != 0) {
            uint64_t v90 = 0;
          }
          else {
            uint64_t v90 = 15;
          }
          uint64_t v91 = v90 + ((*v89 - 1) & 0xF);
          *uint64_t v89 = v91;
          v89[v91] = v86;
          *(_DWORD *)(v88 + 4 * v91) = v19++;
        }
        while (v19 < v79);
        uint64_t v22 = *(void *)(a1 + 112);
        uint64_t v21 = *(void *)(a1 + 56);
        uint64_t v9 = v113;
      }
      uint64_t v92 = v10 - 32;
      LODWORD(v19) = v10 - 32;
      int v93 = v4 + 1 - (v9 + v92);
      if ((v93 + 1) < 8) {
        int v94 = v93 + 1;
      }
      else {
        int v94 = 8;
      }
      if ((unint64_t)v4 + 1 >= v9 + v92) {
        int v95 = v94;
      }
      else {
        int v95 = 0;
      }
      if (v92 < v95 + (int)v92)
      {
        unsigned int v96 = *(_DWORD *)(a1 + 96);
        int v97 = 24 - *(_DWORD *)(a1 + 52);
        do
        {
          unsigned int v98 = ((-1640531535 * *(_DWORD *)(v9 + v92)) ^ v96) >> v97;
          uint64_t v99 = (v98 >> 4) & 0xFFFFFF0;
          _X22 = v22 + 4 * v99;
          __asm { PRFM            #0, [X22] }
          _X20 = v21 + v99;
          __asm { PRFM            #0, [X20] }
          *(_DWORD *)(a1 + 4 * (v92++ & 7) + 64) = v98;
          --v95;
        }
        while (v95);
      }
    }
    else
    {
      uint64_t v21 = *(void *)(a1 + 56);
      uint64_t v22 = *(void *)(a1 + 112);
    }
    if (v19 < v10)
    {
      uint64_t v23 = *(void *)(a1 + 8) + 8;
      int v24 = 24 - *(_DWORD *)(a1 + 52);
      unint64_t v19 = v19;
      do
      {
        unsigned int v25 = ((-1640531535 * *(_DWORD *)(v23 + v19)) ^ *(_DWORD *)(a1 + 96)) >> v24;
        uint64_t v26 = (v25 >> 4) & 0xFFFFFF0;
        _X22 = v22 + 4 * v26;
        __asm { PRFM            #0, [X22] }
        _X20 = v21 + v26;
        __asm { PRFM            #0, [X20] }
        unint64_t v34 = *(unsigned int *)(v18 + 4 * (v19 & 7));
        *(_DWORD *)(v18 + 4 * (v19 & 7)) = v25;
        uint64_t v35 = (v34 >> 4) & 0xFFFFFF0;
        uint64_t v36 = v22 + 4 * v35;
        uint64_t v37 = (unsigned char *)(v21 + v35);
        if (((*v37 - 1) & 0xF) != 0) {
          uint64_t v38 = 0;
        }
        else {
          uint64_t v38 = 15;
        }
        uint64_t v39 = v38 + ((*v37 - 1) & 0xF);
        *uint64_t v37 = v39;
        v37[v39] = v34;
        *(_DWORD *)(v36 + 4 * v39) = v19++;
      }
      while (v19 < v10);
    }
    *(_DWORD *)(a1 + 44) = v10;
    unsigned int v40 = ((-1640531535 * *(_DWORD *)(v9 + v10 + 8)) ^ v16) >> (24 - v7);
    uint64_t v41 = (v40 >> 4) & 0xFFFFFF0;
    _X17 = v5 + 4 * v41;
    __asm { PRFM            #0, [X17] }
    _X14 = v6 + v41;
    __asm { PRFM            #0, [X14] }
    unsigned int v17 = *(_DWORD *)(v18 + 4 * (v10 & 7));
    *(_DWORD *)(v18 + 4 * (v10 & 7)) = v40;
    uint64_t v8 = v20;
  }
  *(_DWORD *)(a1 + 104) += v17;
  uint64_t v46 = (v17 >> 4) & 0xFFFFFF0;
  uint64_t v47 = v5 + 4 * v46;
  char v48 = (int8x16_t *)(v6 + v46);
  char v49 = 4 * v48->i8[0];
  char v50 = (char)*v48;
  uint64_t v51 = 0;
  unint64_t v52 = __ROR8__(vshrn_n_s16((int16x8_t)vceqq_s8(*v48, vdupq_n_s8(v17)), 4uLL), v49) & 0x8888888888888888;
  if (v52)
  {
    int v53 = 1 << v15;
    do
    {
      unsigned int v54 = ((__clz(__rbit64(v52)) + (v49 & 0xFC)) >> 2) & 0xF;
      if (v54)
      {
        uint64_t v55 = *(unsigned int *)(v47 + 4 * v54);
        if (v55 < v14) {
          break;
        }
        if (v55 >= v12) {
          uint64_t v56 = v9;
        }
        else {
          uint64_t v56 = v8;
        }
        _X3 = v56 + v55;
        __asm { PRFM            #0, [X3] }
        v114[v51++] = v55;
        --v53;
      }
      v52 &= v52 - 1;
    }
    while (v52 && v53);
  }
  if (((v50 - 1) & 0xF) != 0) {
    uint64_t v59 = 0;
  }
  else {
    uint64_t v59 = 15;
  }
  uint64_t v60 = v59 + ((v50 - 1) & 0xF);
  v48->i8[0] = v60;
  v48->i8[v60] = v17;
  int v61 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v61 + 1;
  *(_DWORD *)(v47 + 4 * v60) = v61;
  if (v51)
  {
    uint64_t v62 = 0;
    char v111 = (void *)(v9 + v12);
    char v110 = (char *)(v8 + v12);
    unsigned int v63 = (char *)v4 - 3;
    unint64_t v64 = a3 - 7;
    unint64_t v106 = a3 - 1;
    unint64_t v107 = a3 - 3;
    uint64_t v109 = (void *)((char *)v4 + 4);
    unsigned int v108 = v10 + 3;
    int v104 = v4 + 1;
    uint64_t v105 = v9 + 8;
    unint64_t v65 = 3;
    while (1)
    {
      uint64_t v66 = v114[v62];
      if (v66 >= v12)
      {
        uint64_t v73 = (void *)(v9 + v66);
        if (*(_DWORD *)(v9 + v66 + v65 - 3) != *(_DWORD *)&v63[v65]) {
          goto LABEL_55;
        }
        if (v64 <= (unint64_t)v4)
        {
          unint64_t v75 = v4;
        }
        else
        {
          unint64_t v74 = *v4 ^ *v73;
          if (v74)
          {
            unint64_t result = __clz(__rbit64(v74)) >> 3;
            goto LABEL_53;
          }
          uint64_t v76 = 0;
          while (1)
          {
            unint64_t v75 = &v104[v76];
            if ((unint64_t)&v104[v76] >= v64) {
              break;
            }
            uint64_t v77 = *(void *)(v105 + v66 + v76 * 8);
            ++v76;
            unint64_t v78 = *v75 ^ v77;
            if (v78)
            {
              unint64_t result = v76 * 8 + (__clz(__rbit64(v78)) >> 3);
              goto LABEL_53;
            }
          }
          uint64_t v73 = (void *)(v105 + v66 + v76 * 8);
        }
        if ((unint64_t)v75 < v107 && *(_DWORD *)v73 == *(_DWORD *)v75)
        {
          unint64_t v75 = (void *)((char *)v75 + 4);
          uint64_t v73 = (void *)((char *)v73 + 4);
        }
        if ((unint64_t)v75 < v106 && *(unsigned __int16 *)v73 == *(unsigned __int16 *)v75)
        {
          unint64_t v75 = (void *)((char *)v75 + 2);
          uint64_t v73 = (void *)((char *)v73 + 2);
        }
        if ((unint64_t)v75 < a3 && *(unsigned __int8 *)v73 == *(unsigned __int8 *)v75) {
          unint64_t v75 = (void *)((char *)v75 + 1);
        }
        unint64_t result = (char *)v75 - (char *)v4;
      }
      else
      {
        if (*(_DWORD *)(v8 + v66) != *(_DWORD *)v4) {
          goto LABEL_55;
        }
        unint64_t v67 = a3;
        uint64_t v68 = v4;
        uint64_t v69 = v12;
        uint64_t v70 = v63;
        unint64_t v71 = sub_1DD2A6010(v109, (char *)(v8 + v66 + 4), a3, v110, v111);
        unsigned int v63 = v70;
        uint64_t v12 = v69;
        uint64_t v4 = v68;
        uint64_t v9 = v113;
        a3 = v67;
        unint64_t result = v71 + 4;
      }
LABEL_53:
      if (result > v65)
      {
        *a4 = v108 - v66;
        unint64_t v65 = result;
        if ((void *)((char *)v4 + result) == (void *)a3) {
          return result;
        }
      }
LABEL_55:
      ++v62;
      unint64_t result = v65;
      if (v62 == v51) {
        return result;
      }
    }
  }
  return 3;
}

unint64_t sub_1DD2C1850(uint64_t a1, _DWORD *a2, unint64_t a3, void *a4)
{
  uint64_t v4 = a2;
  uint64_t v120 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 112);
  uint64_t v6 = *(void *)(a1 + 56);
  int v7 = *(_DWORD *)(a1 + 52);
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  unsigned int v10 = a2 - v9;
  unsigned int v11 = 1 << *(_DWORD *)(a1 + 256);
  uint64_t v12 = *(unsigned int *)(a1 + 24);
  if ((int)a2 - (int)v9 - *(_DWORD *)(a1 + 28) > v11 && *(_DWORD *)(a1 + 40) == 0) {
    unsigned int v14 = a2 - v9 - v11;
  }
  else {
    unsigned int v14 = *(_DWORD *)(a1 + 28);
  }
  unsigned int v15 = *(_DWORD *)(a1 + 268);
  if (v15 >= 5) {
    LOBYTE(v15) = 5;
  }
  uint64_t v16 = *(void *)(a1 + 96);
  uint64_t v118 = *(void *)(a1 + 8);
  if (*(_DWORD *)(a1 + 300))
  {
    unsigned int v17 = ((-1640531535 * *a2) ^ v16) >> (24 - v7);
    *(_DWORD *)(a1 + 44) = v10;
  }
  else
  {
    uint64_t v18 = a1 + 64;
    unint64_t v19 = *(unsigned int *)(a1 + 44);
    uint64_t v20 = *(void *)(a1 + 16);
    if (v10 - v19 >= 0x181)
    {
      uint64_t v21 = *(void *)(a1 + 56);
      uint64_t v22 = *(void *)(a1 + 112);
      if (v19 <= 0xFFFFFF9F)
      {
        unint64_t v82 = v19 + 96;
        do
        {
          unsigned int v83 = ((-1640531535 * *(_DWORD *)(v9 + 8 + v19)) ^ *(_DWORD *)(a1 + 96)) >> (24 - v7);
          uint64_t v84 = (v83 >> 3) & 0x1FFFFFE0;
          _X19 = v5 + 4 * v84;
          __asm
          {
            PRFM            #0, [X19]
            PRFM            #0, [X19,#0x40]
          }
          _X7 = v6 + v84;
          __asm { PRFM            #0, [X7] }
          unint64_t v90 = *(unsigned int *)(v18 + 4 * (v19 & 7));
          *(_DWORD *)(v18 + 4 * (v19 & 7)) = v83;
          uint64_t v91 = (v90 >> 3) & 0x1FFFFFE0;
          uint64_t v92 = v5 + 4 * v91;
          int v93 = (unsigned char *)(v6 + v91);
          if (((*v93 - 1) & 0x1F) != 0) {
            uint64_t v94 = 0;
          }
          else {
            uint64_t v94 = 31;
          }
          uint64_t v95 = v94 + ((*v93 - 1) & 0x1F);
          unsigned char *v93 = v95;
          v93[v95] = v90;
          *(_DWORD *)(v92 + 4 * v95) = v19++;
        }
        while (v19 < v82);
        uint64_t v22 = *(void *)(a1 + 112);
        uint64_t v21 = *(void *)(a1 + 56);
        uint64_t v9 = v118;
      }
      uint64_t v96 = v10 - 32;
      LODWORD(v19) = v10 - 32;
      int v97 = v4 + 1 - (v9 + v96);
      if ((v97 + 1) < 8) {
        int v98 = v97 + 1;
      }
      else {
        int v98 = 8;
      }
      if ((unint64_t)v4 + 1 >= v9 + v96) {
        int v99 = v98;
      }
      else {
        int v99 = 0;
      }
      if (v96 < v99 + (int)v96)
      {
        unsigned int v100 = *(_DWORD *)(a1 + 96);
        int v101 = 24 - *(_DWORD *)(a1 + 52);
        do
        {
          unsigned int v102 = ((-1640531535 * *(_DWORD *)(v9 + v96)) ^ v100) >> v101;
          uint64_t v103 = (v102 >> 3) & 0x1FFFFFE0;
          _X22 = v22 + 4 * v103;
          __asm
          {
            PRFM            #0, [X22]
            PRFM            #0, [X22,#0x40]
          }
          _X20 = v21 + v103;
          __asm { PRFM            #0, [X20] }
          *(_DWORD *)(a1 + 4 * (v96++ & 7) + 64) = v102;
          --v99;
        }
        while (v99);
      }
    }
    else
    {
      uint64_t v21 = *(void *)(a1 + 56);
      uint64_t v22 = *(void *)(a1 + 112);
    }
    if (v19 < v10)
    {
      uint64_t v23 = *(void *)(a1 + 8) + 8;
      int v24 = 24 - *(_DWORD *)(a1 + 52);
      unint64_t v19 = v19;
      do
      {
        unsigned int v25 = ((-1640531535 * *(_DWORD *)(v23 + v19)) ^ *(_DWORD *)(a1 + 96)) >> v24;
        uint64_t v26 = (v25 >> 3) & 0x1FFFFFE0;
        _X22 = v22 + 4 * v26;
        __asm
        {
          PRFM            #0, [X22]
          PRFM            #0, [X22,#0x40]
        }
        _X20 = v21 + v26;
        __asm { PRFM            #0, [X20] }
        unint64_t v35 = *(unsigned int *)(v18 + 4 * (v19 & 7));
        *(_DWORD *)(v18 + 4 * (v19 & 7)) = v25;
        uint64_t v36 = (v35 >> 3) & 0x1FFFFFE0;
        uint64_t v37 = v22 + 4 * v36;
        uint64_t v38 = (unsigned char *)(v21 + v36);
        if (((*v38 - 1) & 0x1F) != 0) {
          uint64_t v39 = 0;
        }
        else {
          uint64_t v39 = 31;
        }
        uint64_t v40 = v39 + ((*v38 - 1) & 0x1F);
        *uint64_t v38 = v40;
        v38[v40] = v35;
        *(_DWORD *)(v37 + 4 * v40) = v19++;
      }
      while (v19 < v10);
    }
    *(_DWORD *)(a1 + 44) = v10;
    unsigned int v41 = ((-1640531535 * *(_DWORD *)(v9 + v10 + 8)) ^ v16) >> (24 - v7);
    uint64_t v42 = (v41 >> 3) & 0x1FFFFFE0;
    _X17 = v5 + 4 * v42;
    __asm
    {
      PRFM            #0, [X17]
      PRFM            #0, [X17,#0x40]
    }
    _X14 = v6 + v42;
    __asm { PRFM            #0, [X14] }
    unsigned int v17 = *(_DWORD *)(v18 + 4 * (v10 & 7));
    *(_DWORD *)(v18 + 4 * (v10 & 7)) = v41;
    uint64_t v8 = v20;
  }
  *(_DWORD *)(a1 + 104) += v17;
  uint64_t v48 = (v17 >> 3) & 0x1FFFFFE0;
  uint64_t v49 = v5 + 4 * v48;
  char v50 = (__int16 *)(v6 + v48);
  int16x8x2_t v121 = vld2q_s16(v50);
  char v51 = *(unsigned char *)v50;
  char v52 = 2 * *(unsigned char *)v50;
  int8x16_t v53 = vdupq_n_s8(v17);
  uint64_t v54 = 0;
  unint64_t v55 = __ROR8__(vsli_n_s8(vshrn_n_s16((int16x8_t)vceqq_s8(v53, (int8x16_t)v121.val[0]), 6uLL), vshrn_n_s16((int16x8_t)vceqq_s8(v53, (int8x16_t)v121.val[1]), 6uLL), 4uLL), v52) & 0x5555555555555555;
  if (v55)
  {
    int v56 = 1 << v15;
    do
    {
      unsigned int v57 = ((__clz(__rbit64(v55)) + (v52 & 0xFE)) >> 1) & 0x1F;
      if (v57)
      {
        uint64_t v58 = *(unsigned int *)(v49 + 4 * v57);
        if (v58 < v14) {
          break;
        }
        if (v58 >= v12) {
          uint64_t v59 = v9;
        }
        else {
          uint64_t v59 = v8;
        }
        _X3 = v59 + v58;
        __asm { PRFM            #0, [X3] }
        v119[v54++] = v58;
        --v56;
      }
      v55 &= v55 - 1;
    }
    while (v55 && v56);
  }
  if (((v51 - 1) & 0x1F) != 0) {
    uint64_t v62 = 0;
  }
  else {
    uint64_t v62 = 31;
  }
  uint64_t v63 = v62 + ((v51 - 1) & 0x1F);
  *(unsigned char *)char v50 = v63;
  *((unsigned char *)v50 + v63) = v17;
  int v64 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v64 + 1;
  *(_DWORD *)(v49 + 4 * v63) = v64;
  if (v54)
  {
    uint64_t v65 = 0;
    uint64_t v116 = (void *)(v9 + v12);
    uint64_t v115 = (char *)(v8 + v12);
    uint64_t v66 = (char *)v4 - 3;
    unint64_t v67 = a3 - 7;
    unint64_t v111 = a3 - 1;
    unint64_t v112 = a3 - 3;
    uint64_t v114 = (void *)((char *)v4 + 4);
    unsigned int v113 = v10 + 3;
    uint64_t v109 = v4 + 1;
    uint64_t v110 = v9 + 8;
    unint64_t v68 = 3;
    while (1)
    {
      uint64_t v69 = v119[v65];
      if (v69 >= v12)
      {
        uint64_t v76 = (void *)(v9 + v69);
        if (*(_DWORD *)(v9 + v69 + v68 - 3) != *(_DWORD *)&v66[v68]) {
          goto LABEL_55;
        }
        if (v67 <= (unint64_t)v4)
        {
          unint64_t v78 = v4;
        }
        else
        {
          unint64_t v77 = *v4 ^ *v76;
          if (v77)
          {
            unint64_t result = __clz(__rbit64(v77)) >> 3;
            goto LABEL_53;
          }
          uint64_t v79 = 0;
          while (1)
          {
            unint64_t v78 = &v109[v79];
            if ((unint64_t)&v109[v79] >= v67) {
              break;
            }
            uint64_t v80 = *(void *)(v110 + v69 + v79 * 8);
            ++v79;
            unint64_t v81 = *v78 ^ v80;
            if (v81)
            {
              unint64_t result = v79 * 8 + (__clz(__rbit64(v81)) >> 3);
              goto LABEL_53;
            }
          }
          uint64_t v76 = (void *)(v110 + v69 + v79 * 8);
        }
        if ((unint64_t)v78 < v112 && *(_DWORD *)v76 == *(_DWORD *)v78)
        {
          unint64_t v78 = (void *)((char *)v78 + 4);
          uint64_t v76 = (void *)((char *)v76 + 4);
        }
        if ((unint64_t)v78 < v111 && *(unsigned __int16 *)v76 == *(unsigned __int16 *)v78)
        {
          unint64_t v78 = (void *)((char *)v78 + 2);
          uint64_t v76 = (void *)((char *)v76 + 2);
        }
        if ((unint64_t)v78 < a3 && *(unsigned __int8 *)v76 == *(unsigned __int8 *)v78) {
          unint64_t v78 = (void *)((char *)v78 + 1);
        }
        unint64_t result = (char *)v78 - (char *)v4;
      }
      else
      {
        if (*(_DWORD *)(v8 + v69) != *(_DWORD *)v4) {
          goto LABEL_55;
        }
        unint64_t v70 = a3;
        unint64_t v71 = v4;
        uint64_t v72 = v12;
        uint64_t v73 = v66;
        unint64_t v74 = sub_1DD2A6010(v114, (char *)(v8 + v69 + 4), a3, v115, v116);
        uint64_t v66 = v73;
        uint64_t v12 = v72;
        uint64_t v4 = v71;
        uint64_t v9 = v118;
        a3 = v70;
        unint64_t result = v74 + 4;
      }
LABEL_53:
      if (result > v68)
      {
        *a4 = v113 - v69;
        unint64_t v68 = result;
        if ((void *)((char *)v4 + result) == (void *)a3) {
          return result;
        }
      }
LABEL_55:
      ++v65;
      unint64_t result = v68;
      if (v65 == v54) {
        return result;
      }
    }
  }
  return 3;
}

unint64_t sub_1DD2C1E68(uint64_t a1, _DWORD *a2, unint64_t a3, void *a4)
{
  uint64_t v4 = a2;
  uint64_t v124 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 112);
  uint64_t v6 = *(void *)(a1 + 56);
  int v7 = *(_DWORD *)(a1 + 52);
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  unsigned int v10 = a2 - v9;
  unsigned int v11 = 1 << *(_DWORD *)(a1 + 256);
  uint64_t v12 = *(unsigned int *)(a1 + 24);
  if ((int)a2 - (int)v9 - *(_DWORD *)(a1 + 28) > v11 && *(_DWORD *)(a1 + 40) == 0) {
    unsigned int v14 = a2 - v9 - v11;
  }
  else {
    unsigned int v14 = *(_DWORD *)(a1 + 28);
  }
  unsigned int v15 = *(_DWORD *)(a1 + 268);
  if (v15 >= 6) {
    LOBYTE(v15) = 6;
  }
  uint64_t v16 = *(void *)(a1 + 96);
  uint64_t v122 = *(void *)(a1 + 8);
  if (*(_DWORD *)(a1 + 300))
  {
    unsigned int v17 = ((-1640531535 * *a2) ^ v16) >> (24 - v7);
    *(_DWORD *)(a1 + 44) = v10;
  }
  else
  {
    uint64_t v18 = a1 + 64;
    unint64_t v19 = *(unsigned int *)(a1 + 44);
    uint64_t v20 = *(void *)(a1 + 16);
    if (v10 - v19 >= 0x181)
    {
      uint64_t v21 = *(void *)(a1 + 56);
      uint64_t v22 = *(void *)(a1 + 112);
      if (v19 <= 0xFFFFFF9F)
      {
        unint64_t v84 = v19 + 96;
        do
        {
          unsigned int v85 = ((-1640531535 * *(_DWORD *)(v9 + 8 + v19)) ^ *(_DWORD *)(a1 + 96)) >> (24 - v7);
          uint64_t v86 = (v85 >> 2) & 0x3FFFFFC0;
          _X19 = v5 + 4 * v86;
          __asm
          {
            PRFM            #0, [X19]
            PRFM            #0, [X19,#0x40]
          }
          _X7 = v6 + v86;
          __asm
          {
            PRFM            #0, [X7]
            PRFM            #0, [X7,#0x20]
          }
          unint64_t v93 = *(unsigned int *)(v18 + 4 * (v19 & 7));
          *(_DWORD *)(v18 + 4 * (v19 & 7)) = v85;
          uint64_t v94 = (v93 >> 2) & 0x3FFFFFC0;
          uint64_t v95 = v5 + 4 * v94;
          uint64_t v96 = (unsigned char *)(v6 + v94);
          if (((*v96 - 1) & 0x3F) != 0) {
            uint64_t v97 = 0;
          }
          else {
            uint64_t v97 = 63;
          }
          uint64_t v98 = v97 + ((*v96 - 1) & 0x3F);
          *uint64_t v96 = v98;
          v96[v98] = v93;
          *(_DWORD *)(v95 + 4 * v98) = v19++;
        }
        while (v19 < v84);
        uint64_t v22 = *(void *)(a1 + 112);
        uint64_t v21 = *(void *)(a1 + 56);
        uint64_t v9 = v122;
      }
      uint64_t v99 = v10 - 32;
      LODWORD(v19) = v10 - 32;
      int v100 = v4 + 1 - (v9 + v99);
      if ((v100 + 1) < 8) {
        int v101 = v100 + 1;
      }
      else {
        int v101 = 8;
      }
      if ((unint64_t)v4 + 1 >= v9 + v99) {
        int v102 = v101;
      }
      else {
        int v102 = 0;
      }
      if (v99 < v102 + (int)v99)
      {
        unsigned int v103 = *(_DWORD *)(a1 + 96);
        int v104 = 24 - *(_DWORD *)(a1 + 52);
        do
        {
          unsigned int v105 = ((-1640531535 * *(_DWORD *)(v9 + v99)) ^ v103) >> v104;
          uint64_t v106 = (v105 >> 2) & 0x3FFFFFC0;
          _X22 = v22 + 4 * v106;
          __asm
          {
            PRFM            #0, [X22]
            PRFM            #0, [X22,#0x40]
          }
          _X20 = v21 + v106;
          __asm
          {
            PRFM            #0, [X20]
            PRFM            #0, [X20,#0x20]
          }
          *(_DWORD *)(a1 + 4 * (v99++ & 7) + 64) = v105;
          --v102;
        }
        while (v102);
      }
    }
    else
    {
      uint64_t v21 = *(void *)(a1 + 56);
      uint64_t v22 = *(void *)(a1 + 112);
    }
    if (v19 < v10)
    {
      uint64_t v23 = *(void *)(a1 + 8) + 8;
      int v24 = 24 - *(_DWORD *)(a1 + 52);
      unint64_t v19 = v19;
      do
      {
        unsigned int v25 = ((-1640531535 * *(_DWORD *)(v23 + v19)) ^ *(_DWORD *)(a1 + 96)) >> v24;
        uint64_t v26 = (v25 >> 2) & 0x3FFFFFC0;
        _X22 = v22 + 4 * v26;
        __asm
        {
          PRFM            #0, [X22]
          PRFM            #0, [X22,#0x40]
        }
        _X20 = v21 + v26;
        __asm
        {
          PRFM            #0, [X20]
          PRFM            #0, [X20,#0x20]
        }
        unint64_t v36 = *(unsigned int *)(v18 + 4 * (v19 & 7));
        *(_DWORD *)(v18 + 4 * (v19 & 7)) = v25;
        uint64_t v37 = (v36 >> 2) & 0x3FFFFFC0;
        uint64_t v38 = v22 + 4 * v37;
        uint64_t v39 = (unsigned char *)(v21 + v37);
        if (((*v39 - 1) & 0x3F) != 0) {
          uint64_t v40 = 0;
        }
        else {
          uint64_t v40 = 63;
        }
        uint64_t v41 = v40 + ((*v39 - 1) & 0x3F);
        *uint64_t v39 = v41;
        v39[v41] = v36;
        *(_DWORD *)(v38 + 4 * v41) = v19++;
      }
      while (v19 < v10);
    }
    *(_DWORD *)(a1 + 44) = v10;
    unsigned int v42 = ((-1640531535 * *(_DWORD *)(v9 + v10 + 8)) ^ v16) >> (24 - v7);
    uint64_t v43 = (v42 >> 2) & 0x3FFFFFC0;
    _X17 = v5 + 4 * v43;
    __asm
    {
      PRFM            #0, [X17]
      PRFM            #0, [X17,#0x40]
    }
    _X14 = v6 + v43;
    __asm
    {
      PRFM            #0, [X14]
      PRFM            #0, [X14,#0x20]
    }
    unsigned int v17 = *(_DWORD *)(v18 + 4 * (v10 & 7));
    *(_DWORD *)(v18 + 4 * (v10 & 7)) = v42;
    uint64_t v8 = v20;
  }
  *(_DWORD *)(a1 + 104) += v17;
  uint64_t v50 = (v17 >> 2) & 0x3FFFFFC0;
  uint64_t v51 = v5 + 4 * v50;
  char v52 = (char *)(v6 + v50);
  char v53 = *v52;
  int8x16x4_t v125 = vld4q_s8(v52);
  int8x16_t v54 = vdupq_n_s8(v17);
  v125.val[0] = vsriq_n_s8(vsriq_n_s8(vceqq_s8(v125.val[3], v54), vceqq_s8(v125.val[2], v54), 1uLL), vsriq_n_s8(vceqq_s8(v125.val[1], v54), vceqq_s8(v125.val[0], v54), 1uLL), 2uLL);
  int8x8_t v55 = vshrn_n_s16((int16x8_t)vsriq_n_s8(v125.val[0], v125.val[0], 4uLL), 4uLL);
  uint64_t v56 = 0;
  if (v55)
  {
    int v57 = 1 << v15;
    unint64_t v58 = __ROR8__(*(void *)&v55, v53);
    do
    {
      unsigned int v59 = (__clz(__rbit64(v58)) + v53) & 0x3F;
      if (v59)
      {
        uint64_t v60 = *(unsigned int *)(v51 + 4 * v59);
        if (v60 < v14) {
          break;
        }
        if (v60 >= v12) {
          uint64_t v61 = v9;
        }
        else {
          uint64_t v61 = v8;
        }
        _X1 = v61 + v60;
        __asm { PRFM            #0, [X1] }
        v123[v56++] = v60;
        --v57;
      }
      v58 &= v58 - 1;
    }
    while (v58 && v57);
  }
  if (((v53 - 1) & 0x3F) != 0) {
    uint64_t v64 = 0;
  }
  else {
    uint64_t v64 = 63;
  }
  uint64_t v65 = v64 + ((v53 - 1) & 0x3F);
  *char v52 = v65;
  v52[v65] = v17;
  int v66 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v66 + 1;
  *(_DWORD *)(v51 + 4 * v65) = v66;
  if (v56)
  {
    uint64_t v67 = 0;
    uint64_t v120 = (void *)(v9 + v12);
    int v119 = (char *)(v8 + v12);
    unint64_t v68 = (char *)v4 - 3;
    unint64_t v69 = a3 - 7;
    unint64_t v115 = a3 - 1;
    unint64_t v116 = a3 - 3;
    uint64_t v118 = (void *)((char *)v4 + 4);
    unsigned int v117 = v10 + 3;
    unsigned int v113 = v4 + 1;
    uint64_t v114 = v9 + 8;
    unint64_t v70 = 3;
    while (1)
    {
      uint64_t v71 = v123[v67];
      if (v71 >= v12)
      {
        unint64_t v78 = (void *)(v9 + v71);
        if (*(_DWORD *)(v9 + v71 + v70 - 3) != *(_DWORD *)&v68[v70]) {
          goto LABEL_55;
        }
        if (v69 <= (unint64_t)v4)
        {
          uint64_t v80 = v4;
        }
        else
        {
          unint64_t v79 = *v4 ^ *v78;
          if (v79)
          {
            unint64_t result = __clz(__rbit64(v79)) >> 3;
            goto LABEL_53;
          }
          uint64_t v81 = 0;
          while (1)
          {
            uint64_t v80 = &v113[v81];
            if ((unint64_t)&v113[v81] >= v69) {
              break;
            }
            uint64_t v82 = *(void *)(v114 + v71 + v81 * 8);
            ++v81;
            unint64_t v83 = *v80 ^ v82;
            if (v83)
            {
              unint64_t result = v81 * 8 + (__clz(__rbit64(v83)) >> 3);
              goto LABEL_53;
            }
          }
          unint64_t v78 = (void *)(v114 + v71 + v81 * 8);
        }
        if ((unint64_t)v80 < v116 && *(_DWORD *)v78 == *(_DWORD *)v80)
        {
          uint64_t v80 = (void *)((char *)v80 + 4);
          unint64_t v78 = (void *)((char *)v78 + 4);
        }
        if ((unint64_t)v80 < v115 && *(unsigned __int16 *)v78 == *(unsigned __int16 *)v80)
        {
          uint64_t v80 = (void *)((char *)v80 + 2);
          unint64_t v78 = (void *)((char *)v78 + 2);
        }
        if ((unint64_t)v80 < a3 && *(unsigned __int8 *)v78 == *(unsigned __int8 *)v80) {
          uint64_t v80 = (void *)((char *)v80 + 1);
        }
        unint64_t result = (char *)v80 - (char *)v4;
      }
      else
      {
        if (*(_DWORD *)(v8 + v71) != *(_DWORD *)v4) {
          goto LABEL_55;
        }
        unint64_t v72 = a3;
        uint64_t v73 = v4;
        uint64_t v74 = v12;
        unint64_t v75 = v68;
        unint64_t v76 = sub_1DD2A6010(v118, (char *)(v8 + v71 + 4), a3, v119, v120);
        unint64_t v68 = v75;
        uint64_t v12 = v74;
        uint64_t v4 = v73;
        uint64_t v9 = v122;
        a3 = v72;
        unint64_t result = v76 + 4;
      }
LABEL_53:
      if (result > v70)
      {
        *a4 = v117 - v71;
        unint64_t v70 = result;
        if ((void *)((char *)v4 + result) == (void *)a3) {
          return result;
        }
      }
LABEL_55:
      ++v67;
      unint64_t result = v70;
      if (v67 == v56) {
        return result;
      }
    }
  }
  return 3;
}

unint64_t sub_1DD2C2494(uint64_t a1, void *a2, unint64_t a3, void *a4)
{
  uint64_t v4 = a2;
  uint64_t v114 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 112);
  uint64_t v6 = *(void *)(a1 + 56);
  int v7 = *(_DWORD *)(a1 + 52);
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  unsigned int v10 = a2 - v9;
  unsigned int v11 = 1 << *(_DWORD *)(a1 + 256);
  uint64_t v12 = *(unsigned int *)(a1 + 24);
  if ((int)a2 - (int)v9 - *(_DWORD *)(a1 + 28) > v11 && *(_DWORD *)(a1 + 40) == 0) {
    unsigned int v14 = a2 - v9 - v11;
  }
  else {
    unsigned int v14 = *(_DWORD *)(a1 + 28);
  }
  unsigned int v15 = *(_DWORD *)(a1 + 268);
  if (v15 >= 4) {
    LOBYTE(v15) = 4;
  }
  uint64_t v16 = *(void *)(a1 + 96);
  uint64_t v112 = *(void *)(a1 + 8);
  if (*(_DWORD *)(a1 + 300))
  {
    _X14 = ((0xCF1BBCDCBB000000 * *a2) ^ v16) >> (56 - v7);
    *(_DWORD *)(a1 + 44) = v10;
  }
  else
  {
    uint64_t v18 = a1 + 64;
    unint64_t v19 = *(unsigned int *)(a1 + 44);
    uint64_t v20 = *(void *)(a1 + 16);
    if (v10 - v19 >= 0x181)
    {
      uint64_t v21 = *(void *)(a1 + 56);
      uint64_t v22 = *(void *)(a1 + 112);
      if (v19 <= 0xFFFFFF9F)
      {
        unint64_t v78 = v19 + 96;
        do
        {
          unint64_t v79 = ((0xCF1BBCDCBB000000 * *(void *)(v9 + 8 + v19)) ^ *(void *)(a1 + 96)) >> (56 - v7);
          uint64_t v80 = (v79 >> 4) & 0xFFFFFF0;
          _X19 = v5 + 4 * v80;
          __asm { PRFM            #0, [X19] }
          _X7 = v6 + v80;
          __asm { PRFM            #0, [X7] }
          unint64_t v85 = *(unsigned int *)(v18 + 4 * (v19 & 7));
          *(_DWORD *)(v18 + 4 * (v19 & 7)) = v79;
          uint64_t v86 = (v85 >> 4) & 0xFFFFFF0;
          uint64_t v87 = v5 + 4 * v86;
          uint64_t v88 = (unsigned char *)(v6 + v86);
          if (((*v88 - 1) & 0xF) != 0) {
            uint64_t v89 = 0;
          }
          else {
            uint64_t v89 = 15;
          }
          uint64_t v90 = v89 + ((*v88 - 1) & 0xF);
          *uint64_t v88 = v90;
          v88[v90] = v85;
          *(_DWORD *)(v87 + 4 * v90) = v19++;
        }
        while (v19 < v78);
        uint64_t v22 = *(void *)(a1 + 112);
        uint64_t v21 = *(void *)(a1 + 56);
        uint64_t v9 = v112;
      }
      uint64_t v91 = v10 - 32;
      LODWORD(v19) = v10 - 32;
      int v92 = v4 + 1 - (v9 + v91);
      if ((v92 + 1) < 8) {
        int v93 = v92 + 1;
      }
      else {
        int v93 = 8;
      }
      if ((unint64_t)v4 + 1 >= v9 + v91) {
        int v94 = v93;
      }
      else {
        int v94 = 0;
      }
      if (v91 < v94 + (int)v91)
      {
        uint64_t v95 = *(void *)(a1 + 96);
        int v96 = 56 - *(_DWORD *)(a1 + 52);
        do
        {
          unint64_t v97 = ((0xCF1BBCDCBB000000 * *(void *)(v9 + v91)) ^ v95) >> v96;
          uint64_t v98 = (v97 >> 4) & 0xFFFFFF0;
          _X22 = v22 + 4 * v98;
          __asm { PRFM            #0, [X22] }
          _X20 = v21 + v98;
          __asm { PRFM            #0, [X20] }
          *(_DWORD *)(a1 + 4 * (v91++ & 7) + 64) = v97;
          --v94;
        }
        while (v94);
      }
    }
    else
    {
      uint64_t v21 = *(void *)(a1 + 56);
      uint64_t v22 = *(void *)(a1 + 112);
    }
    if (v19 < v10)
    {
      uint64_t v23 = *(void *)(a1 + 8) + 8;
      int v24 = 56 - *(_DWORD *)(a1 + 52);
      unint64_t v19 = v19;
      do
      {
        unint64_t v25 = ((0xCF1BBCDCBB000000 * *(void *)(v23 + v19)) ^ *(void *)(a1 + 96)) >> v24;
        uint64_t v26 = (v25 >> 4) & 0xFFFFFF0;
        _X22 = v22 + 4 * v26;
        __asm { PRFM            #0, [X22] }
        _X20 = v21 + v26;
        __asm { PRFM            #0, [X20] }
        unint64_t v34 = *(unsigned int *)(v18 + 4 * (v19 & 7));
        *(_DWORD *)(v18 + 4 * (v19 & 7)) = v25;
        uint64_t v35 = (v34 >> 4) & 0xFFFFFF0;
        uint64_t v36 = v22 + 4 * v35;
        uint64_t v37 = (unsigned char *)(v21 + v35);
        if (((*v37 - 1) & 0xF) != 0) {
          uint64_t v38 = 0;
        }
        else {
          uint64_t v38 = 15;
        }
        uint64_t v39 = v38 + ((*v37 - 1) & 0xF);
        *uint64_t v37 = v39;
        v37[v39] = v34;
        *(_DWORD *)(v36 + 4 * v39) = v19++;
      }
      while (v19 < v10);
    }
    *(_DWORD *)(a1 + 44) = v10;
    unint64_t v40 = ((0xCF1BBCDCBB000000 * *(void *)(v9 + v10 + 8)) ^ v16) >> (56 - v7);
    uint64_t v41 = (v40 >> 4) & 0xFFFFFF0;
    _X17 = v5 + 4 * v41;
    __asm { PRFM            #0, [X17] }
    _X14 = v6 + v41;
    __asm { PRFM            #0, [X14] }
    LODWORD(_X14) = *(_DWORD *)(v18 + 4 * (v10 & 7));
    *(_DWORD *)(v18 + 4 * (v10 & 7)) = v40;
    uint64_t v8 = v20;
  }
  *(_DWORD *)(a1 + 104) += _X14;
  uint64_t v45 = (_X14 >> 4) & 0xFFFFFF0;
  uint64_t v46 = v5 + 4 * v45;
  uint64_t v47 = (int8x16_t *)(v6 + v45);
  char v48 = 4 * v47->i8[0];
  char v49 = (char)*v47;
  uint64_t v50 = 0;
  unint64_t v51 = __ROR8__(vshrn_n_s16((int16x8_t)vceqq_s8(*v47, vdupq_n_s8(_X14)), 4uLL), v48) & 0x8888888888888888;
  if (v51)
  {
    int v52 = 1 << v15;
    do
    {
      unsigned int v53 = ((__clz(__rbit64(v51)) + (v48 & 0xFC)) >> 2) & 0xF;
      if (v53)
      {
        uint64_t v54 = *(unsigned int *)(v46 + 4 * v53);
        if (v54 < v14) {
          break;
        }
        if (v54 >= v12) {
          uint64_t v55 = v9;
        }
        else {
          uint64_t v55 = v8;
        }
        _X3 = v55 + v54;
        __asm { PRFM            #0, [X3] }
        v113[v50++] = v54;
        --v52;
      }
      v51 &= v51 - 1;
    }
    while (v51 && v52);
  }
  if (((v49 - 1) & 0xF) != 0) {
    uint64_t v58 = 0;
  }
  else {
    uint64_t v58 = 15;
  }
  uint64_t v59 = v58 + ((v49 - 1) & 0xF);
  v47->i8[0] = v59;
  v47->i8[v59] = _X14;
  int v60 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v60 + 1;
  *(_DWORD *)(v46 + 4 * v59) = v60;
  if (v50)
  {
    uint64_t v61 = 0;
    uint64_t v110 = (void *)(v9 + v12);
    uint64_t v109 = (char *)(v8 + v12);
    uint64_t v62 = (char *)v4 - 3;
    unint64_t v63 = a3 - 7;
    unint64_t v105 = a3 - 1;
    unint64_t v106 = a3 - 3;
    unsigned int v108 = (void *)((char *)v4 + 4);
    unsigned int v107 = v10 + 3;
    unsigned int v103 = v4 + 1;
    uint64_t v104 = v9 + 8;
    unint64_t v64 = 3;
    while (1)
    {
      uint64_t v65 = v113[v61];
      if (v65 >= v12)
      {
        unint64_t v72 = (void *)(v9 + v65);
        if (*(_DWORD *)(v9 + v65 + v64 - 3) != *(_DWORD *)&v62[v64]) {
          goto LABEL_55;
        }
        if (v63 <= (unint64_t)v4)
        {
          uint64_t v74 = v4;
        }
        else
        {
          unint64_t v73 = *v4 ^ *v72;
          if (v73)
          {
            unint64_t result = __clz(__rbit64(v73)) >> 3;
            goto LABEL_53;
          }
          uint64_t v75 = 0;
          while (1)
          {
            uint64_t v74 = &v103[v75];
            if ((unint64_t)&v103[v75] >= v63) {
              break;
            }
            uint64_t v76 = *(void *)(v104 + v65 + v75 * 8);
            ++v75;
            unint64_t v77 = *v74 ^ v76;
            if (v77)
            {
              unint64_t result = v75 * 8 + (__clz(__rbit64(v77)) >> 3);
              goto LABEL_53;
            }
          }
          unint64_t v72 = (void *)(v104 + v65 + v75 * 8);
        }
        if ((unint64_t)v74 < v106 && *(_DWORD *)v72 == *(_DWORD *)v74)
        {
          uint64_t v74 = (void *)((char *)v74 + 4);
          unint64_t v72 = (void *)((char *)v72 + 4);
        }
        if ((unint64_t)v74 < v105 && *(unsigned __int16 *)v72 == *(unsigned __int16 *)v74)
        {
          uint64_t v74 = (void *)((char *)v74 + 2);
          unint64_t v72 = (void *)((char *)v72 + 2);
        }
        if ((unint64_t)v74 < a3 && *(unsigned __int8 *)v72 == *(unsigned __int8 *)v74) {
          uint64_t v74 = (void *)((char *)v74 + 1);
        }
        unint64_t result = (char *)v74 - (char *)v4;
      }
      else
      {
        if (*(_DWORD *)(v8 + v65) != *(_DWORD *)v4) {
          goto LABEL_55;
        }
        unint64_t v66 = a3;
        uint64_t v67 = v4;
        uint64_t v68 = v12;
        unint64_t v69 = v62;
        unint64_t v70 = sub_1DD2A6010(v108, (char *)(v8 + v65 + 4), a3, v109, v110);
        uint64_t v62 = v69;
        uint64_t v12 = v68;
        uint64_t v4 = v67;
        uint64_t v9 = v112;
        a3 = v66;
        unint64_t result = v70 + 4;
      }
LABEL_53:
      if (result > v64)
      {
        *a4 = v107 - v65;
        unint64_t v64 = result;
        if ((void *)((char *)v4 + result) == (void *)a3) {
          return result;
        }
      }
LABEL_55:
      ++v61;
      unint64_t result = v64;
      if (v61 == v50) {
        return result;
      }
    }
  }
  return 3;
}

unint64_t sub_1DD2C2A9C(uint64_t a1, void *a2, unint64_t a3, void *a4)
{
  uint64_t v4 = a2;
  uint64_t v119 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 112);
  uint64_t v6 = *(void *)(a1 + 56);
  int v7 = *(_DWORD *)(a1 + 52);
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  unsigned int v10 = a2 - v9;
  unsigned int v11 = 1 << *(_DWORD *)(a1 + 256);
  uint64_t v12 = *(unsigned int *)(a1 + 24);
  if ((int)a2 - (int)v9 - *(_DWORD *)(a1 + 28) > v11 && *(_DWORD *)(a1 + 40) == 0) {
    unsigned int v14 = a2 - v9 - v11;
  }
  else {
    unsigned int v14 = *(_DWORD *)(a1 + 28);
  }
  unsigned int v15 = *(_DWORD *)(a1 + 268);
  if (v15 >= 5) {
    LOBYTE(v15) = 5;
  }
  uint64_t v16 = *(void *)(a1 + 96);
  uint64_t v117 = *(void *)(a1 + 8);
  if (*(_DWORD *)(a1 + 300))
  {
    _X14 = ((0xCF1BBCDCBB000000 * *a2) ^ v16) >> (56 - v7);
    *(_DWORD *)(a1 + 44) = v10;
  }
  else
  {
    uint64_t v18 = a1 + 64;
    unint64_t v19 = *(unsigned int *)(a1 + 44);
    uint64_t v20 = *(void *)(a1 + 16);
    if (v10 - v19 >= 0x181)
    {
      uint64_t v21 = *(void *)(a1 + 56);
      uint64_t v22 = *(void *)(a1 + 112);
      if (v19 <= 0xFFFFFF9F)
      {
        unint64_t v81 = v19 + 96;
        do
        {
          unint64_t v82 = ((0xCF1BBCDCBB000000 * *(void *)(v9 + 8 + v19)) ^ *(void *)(a1 + 96)) >> (56 - v7);
          uint64_t v83 = (v82 >> 3) & 0x1FFFFFE0;
          _X19 = v5 + 4 * v83;
          __asm
          {
            PRFM            #0, [X19]
            PRFM            #0, [X19,#0x40]
          }
          _X7 = v6 + v83;
          __asm { PRFM            #0, [X7] }
          unint64_t v89 = *(unsigned int *)(v18 + 4 * (v19 & 7));
          *(_DWORD *)(v18 + 4 * (v19 & 7)) = v82;
          uint64_t v90 = (v89 >> 3) & 0x1FFFFFE0;
          uint64_t v91 = v5 + 4 * v90;
          int v92 = (unsigned char *)(v6 + v90);
          if (((*v92 - 1) & 0x1F) != 0) {
            uint64_t v93 = 0;
          }
          else {
            uint64_t v93 = 31;
          }
          uint64_t v94 = v93 + ((*v92 - 1) & 0x1F);
          *int v92 = v94;
          v92[v94] = v89;
          *(_DWORD *)(v91 + 4 * v94) = v19++;
        }
        while (v19 < v81);
        uint64_t v22 = *(void *)(a1 + 112);
        uint64_t v21 = *(void *)(a1 + 56);
        uint64_t v9 = v117;
      }
      uint64_t v95 = v10 - 32;
      LODWORD(v19) = v10 - 32;
      int v96 = v4 + 1 - (v9 + v95);
      if ((v96 + 1) < 8) {
        int v97 = v96 + 1;
      }
      else {
        int v97 = 8;
      }
      if ((unint64_t)v4 + 1 >= v9 + v95) {
        int v98 = v97;
      }
      else {
        int v98 = 0;
      }
      if (v95 < v98 + (int)v95)
      {
        uint64_t v99 = *(void *)(a1 + 96);
        int v100 = 56 - *(_DWORD *)(a1 + 52);
        do
        {
          unint64_t v101 = ((0xCF1BBCDCBB000000 * *(void *)(v9 + v95)) ^ v99) >> v100;
          uint64_t v102 = (v101 >> 3) & 0x1FFFFFE0;
          _X22 = v22 + 4 * v102;
          __asm
          {
            PRFM            #0, [X22]
            PRFM            #0, [X22,#0x40]
          }
          _X20 = v21 + v102;
          __asm { PRFM            #0, [X20] }
          *(_DWORD *)(a1 + 4 * (v95++ & 7) + 64) = v101;
          --v98;
        }
        while (v98);
      }
    }
    else
    {
      uint64_t v21 = *(void *)(a1 + 56);
      uint64_t v22 = *(void *)(a1 + 112);
    }
    if (v19 < v10)
    {
      uint64_t v23 = *(void *)(a1 + 8) + 8;
      int v24 = 56 - *(_DWORD *)(a1 + 52);
      unint64_t v19 = v19;
      do
      {
        unint64_t v25 = ((0xCF1BBCDCBB000000 * *(void *)(v23 + v19)) ^ *(void *)(a1 + 96)) >> v24;
        uint64_t v26 = (v25 >> 3) & 0x1FFFFFE0;
        _X22 = v22 + 4 * v26;
        __asm
        {
          PRFM            #0, [X22]
          PRFM            #0, [X22,#0x40]
        }
        _X20 = v21 + v26;
        __asm { PRFM            #0, [X20] }
        unint64_t v35 = *(unsigned int *)(v18 + 4 * (v19 & 7));
        *(_DWORD *)(v18 + 4 * (v19 & 7)) = v25;
        uint64_t v36 = (v35 >> 3) & 0x1FFFFFE0;
        uint64_t v37 = v22 + 4 * v36;
        uint64_t v38 = (unsigned char *)(v21 + v36);
        if (((*v38 - 1) & 0x1F) != 0) {
          uint64_t v39 = 0;
        }
        else {
          uint64_t v39 = 31;
        }
        uint64_t v40 = v39 + ((*v38 - 1) & 0x1F);
        *uint64_t v38 = v40;
        v38[v40] = v35;
        *(_DWORD *)(v37 + 4 * v40) = v19++;
      }
      while (v19 < v10);
    }
    *(_DWORD *)(a1 + 44) = v10;
    unint64_t v41 = ((0xCF1BBCDCBB000000 * *(void *)(v9 + v10 + 8)) ^ v16) >> (56 - v7);
    uint64_t v42 = (v41 >> 3) & 0x1FFFFFE0;
    _X17 = v5 + 4 * v42;
    __asm
    {
      PRFM            #0, [X17]
      PRFM            #0, [X17,#0x40]
    }
    _X14 = v6 + v42;
    __asm { PRFM            #0, [X14] }
    LODWORD(_X14) = *(_DWORD *)(v18 + 4 * (v10 & 7));
    *(_DWORD *)(v18 + 4 * (v10 & 7)) = v41;
    uint64_t v8 = v20;
  }
  *(_DWORD *)(a1 + 104) += _X14;
  uint64_t v47 = (_X14 >> 3) & 0x1FFFFFE0;
  uint64_t v48 = v5 + 4 * v47;
  char v49 = (__int16 *)(v6 + v47);
  int16x8x2_t v120 = vld2q_s16(v49);
  char v50 = *(unsigned char *)v49;
  char v51 = 2 * *(unsigned char *)v49;
  int8x16_t v52 = vdupq_n_s8(_X14);
  uint64_t v53 = 0;
  unint64_t v54 = __ROR8__(vsli_n_s8(vshrn_n_s16((int16x8_t)vceqq_s8(v52, (int8x16_t)v120.val[0]), 6uLL), vshrn_n_s16((int16x8_t)vceqq_s8(v52, (int8x16_t)v120.val[1]), 6uLL), 4uLL), v51) & 0x5555555555555555;
  if (v54)
  {
    int v55 = 1 << v15;
    do
    {
      unsigned int v56 = ((__clz(__rbit64(v54)) + (v51 & 0xFE)) >> 1) & 0x1F;
      if (v56)
      {
        uint64_t v57 = *(unsigned int *)(v48 + 4 * v56);
        if (v57 < v14) {
          break;
        }
        if (v57 >= v12) {
          uint64_t v58 = v9;
        }
        else {
          uint64_t v58 = v8;
        }
        _X3 = v58 + v57;
        __asm { PRFM            #0, [X3] }
        v118[v53++] = v57;
        --v55;
      }
      v54 &= v54 - 1;
    }
    while (v54 && v55);
  }
  if (((v50 - 1) & 0x1F) != 0) {
    uint64_t v61 = 0;
  }
  else {
    uint64_t v61 = 31;
  }
  uint64_t v62 = v61 + ((v50 - 1) & 0x1F);
  *(unsigned char *)char v49 = v62;
  *((unsigned char *)v49 + v62) = _X14;
  int v63 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v63 + 1;
  *(_DWORD *)(v48 + 4 * v62) = v63;
  if (v53)
  {
    uint64_t v64 = 0;
    unint64_t v115 = (void *)(v9 + v12);
    uint64_t v114 = (char *)(v8 + v12);
    uint64_t v65 = (char *)v4 - 3;
    unint64_t v66 = a3 - 7;
    unint64_t v110 = a3 - 1;
    unint64_t v111 = a3 - 3;
    unsigned int v113 = (void *)((char *)v4 + 4);
    unsigned int v112 = v10 + 3;
    unsigned int v108 = v4 + 1;
    uint64_t v109 = v9 + 8;
    unint64_t v67 = 3;
    while (1)
    {
      uint64_t v68 = v118[v64];
      if (v68 >= v12)
      {
        uint64_t v75 = (void *)(v9 + v68);
        if (*(_DWORD *)(v9 + v68 + v67 - 3) != *(_DWORD *)&v65[v67]) {
          goto LABEL_55;
        }
        if (v66 <= (unint64_t)v4)
        {
          unint64_t v77 = v4;
        }
        else
        {
          unint64_t v76 = *v4 ^ *v75;
          if (v76)
          {
            unint64_t result = __clz(__rbit64(v76)) >> 3;
            goto LABEL_53;
          }
          uint64_t v78 = 0;
          while (1)
          {
            unint64_t v77 = &v108[v78];
            if ((unint64_t)&v108[v78] >= v66) {
              break;
            }
            uint64_t v79 = *(void *)(v109 + v68 + v78 * 8);
            ++v78;
            unint64_t v80 = *v77 ^ v79;
            if (v80)
            {
              unint64_t result = v78 * 8 + (__clz(__rbit64(v80)) >> 3);
              goto LABEL_53;
            }
          }
          uint64_t v75 = (void *)(v109 + v68 + v78 * 8);
        }
        if ((unint64_t)v77 < v111 && *(_DWORD *)v75 == *(_DWORD *)v77)
        {
          unint64_t v77 = (void *)((char *)v77 + 4);
          uint64_t v75 = (void *)((char *)v75 + 4);
        }
        if ((unint64_t)v77 < v110 && *(unsigned __int16 *)v75 == *(unsigned __int16 *)v77)
        {
          unint64_t v77 = (void *)((char *)v77 + 2);
          uint64_t v75 = (void *)((char *)v75 + 2);
        }
        if ((unint64_t)v77 < a3 && *(unsigned __int8 *)v75 == *(unsigned __int8 *)v77) {
          unint64_t v77 = (void *)((char *)v77 + 1);
        }
        unint64_t result = (char *)v77 - (char *)v4;
      }
      else
      {
        if (*(_DWORD *)(v8 + v68) != *(_DWORD *)v4) {
          goto LABEL_55;
        }
        unint64_t v69 = a3;
        unint64_t v70 = v4;
        uint64_t v71 = v12;
        unint64_t v72 = v65;
        unint64_t v73 = sub_1DD2A6010(v113, (char *)(v8 + v68 + 4), a3, v114, v115);
        uint64_t v65 = v72;
        uint64_t v12 = v71;
        uint64_t v4 = v70;
        uint64_t v9 = v117;
        a3 = v69;
        unint64_t result = v73 + 4;
      }
LABEL_53:
      if (result > v67)
      {
        *a4 = v112 - v68;
        unint64_t v67 = result;
        if ((void *)((char *)v4 + result) == (void *)a3) {
          return result;
        }
      }
LABEL_55:
      ++v64;
      unint64_t result = v67;
      if (v64 == v53) {
        return result;
      }
    }
  }
  return 3;
}

unint64_t sub_1DD2C30BC(uint64_t a1, void *a2, unint64_t a3, void *a4)
{
  uint64_t v4 = a2;
  uint64_t v123 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 112);
  uint64_t v6 = *(void *)(a1 + 56);
  int v7 = *(_DWORD *)(a1 + 52);
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  unsigned int v10 = a2 - v9;
  unsigned int v11 = 1 << *(_DWORD *)(a1 + 256);
  uint64_t v12 = *(unsigned int *)(a1 + 24);
  if ((int)a2 - (int)v9 - *(_DWORD *)(a1 + 28) > v11 && *(_DWORD *)(a1 + 40) == 0) {
    unsigned int v14 = a2 - v9 - v11;
  }
  else {
    unsigned int v14 = *(_DWORD *)(a1 + 28);
  }
  unsigned int v15 = *(_DWORD *)(a1 + 268);
  if (v15 >= 6) {
    LOBYTE(v15) = 6;
  }
  uint64_t v16 = *(void *)(a1 + 96);
  uint64_t v121 = *(void *)(a1 + 8);
  if (*(_DWORD *)(a1 + 300))
  {
    _X14 = ((0xCF1BBCDCBB000000 * *a2) ^ v16) >> (56 - v7);
    *(_DWORD *)(a1 + 44) = v10;
  }
  else
  {
    uint64_t v18 = a1 + 64;
    unint64_t v19 = *(unsigned int *)(a1 + 44);
    uint64_t v20 = *(void *)(a1 + 16);
    if (v10 - v19 >= 0x181)
    {
      uint64_t v21 = *(void *)(a1 + 56);
      uint64_t v22 = *(void *)(a1 + 112);
      if (v19 <= 0xFFFFFF9F)
      {
        unint64_t v83 = v19 + 96;
        do
        {
          unint64_t v84 = ((0xCF1BBCDCBB000000 * *(void *)(v9 + 8 + v19)) ^ *(void *)(a1 + 96)) >> (56 - v7);
          uint64_t v85 = (v84 >> 2) & 0x3FFFFFC0;
          _X19 = v5 + 4 * v85;
          __asm
          {
            PRFM            #0, [X19]
            PRFM            #0, [X19,#0x40]
          }
          _X7 = v6 + v85;
          __asm
          {
            PRFM            #0, [X7]
            PRFM            #0, [X7,#0x20]
          }
          unint64_t v92 = *(unsigned int *)(v18 + 4 * (v19 & 7));
          *(_DWORD *)(v18 + 4 * (v19 & 7)) = v84;
          uint64_t v93 = (v92 >> 2) & 0x3FFFFFC0;
          uint64_t v94 = v5 + 4 * v93;
          uint64_t v95 = (unsigned char *)(v6 + v93);
          if (((*v95 - 1) & 0x3F) != 0) {
            uint64_t v96 = 0;
          }
          else {
            uint64_t v96 = 63;
          }
          uint64_t v97 = v96 + ((*v95 - 1) & 0x3F);
          *uint64_t v95 = v97;
          v95[v97] = v92;
          *(_DWORD *)(v94 + 4 * v97) = v19++;
        }
        while (v19 < v83);
        uint64_t v22 = *(void *)(a1 + 112);
        uint64_t v21 = *(void *)(a1 + 56);
        uint64_t v9 = v121;
      }
      uint64_t v98 = v10 - 32;
      LODWORD(v19) = v10 - 32;
      int v99 = v4 + 1 - (v9 + v98);
      if ((v99 + 1) < 8) {
        int v100 = v99 + 1;
      }
      else {
        int v100 = 8;
      }
      if ((unint64_t)v4 + 1 >= v9 + v98) {
        int v101 = v100;
      }
      else {
        int v101 = 0;
      }
      if (v98 < v101 + (int)v98)
      {
        uint64_t v102 = *(void *)(a1 + 96);
        int v103 = 56 - *(_DWORD *)(a1 + 52);
        do
        {
          unint64_t v104 = ((0xCF1BBCDCBB000000 * *(void *)(v9 + v98)) ^ v102) >> v103;
          uint64_t v105 = (v104 >> 2) & 0x3FFFFFC0;
          _X22 = v22 + 4 * v105;
          __asm
          {
            PRFM            #0, [X22]
            PRFM            #0, [X22,#0x40]
          }
          _X20 = v21 + v105;
          __asm
          {
            PRFM            #0, [X20]
            PRFM            #0, [X20,#0x20]
          }
          *(_DWORD *)(a1 + 4 * (v98++ & 7) + 64) = v104;
          --v101;
        }
        while (v101);
      }
    }
    else
    {
      uint64_t v21 = *(void *)(a1 + 56);
      uint64_t v22 = *(void *)(a1 + 112);
    }
    if (v19 < v10)
    {
      uint64_t v23 = *(void *)(a1 + 8) + 8;
      int v24 = 56 - *(_DWORD *)(a1 + 52);
      unint64_t v19 = v19;
      do
      {
        unint64_t v25 = ((0xCF1BBCDCBB000000 * *(void *)(v23 + v19)) ^ *(void *)(a1 + 96)) >> v24;
        uint64_t v26 = (v25 >> 2) & 0x3FFFFFC0;
        _X22 = v22 + 4 * v26;
        __asm
        {
          PRFM            #0, [X22]
          PRFM            #0, [X22,#0x40]
        }
        _X20 = v21 + v26;
        __asm
        {
          PRFM            #0, [X20]
          PRFM            #0, [X20,#0x20]
        }
        unint64_t v36 = *(unsigned int *)(v18 + 4 * (v19 & 7));
        *(_DWORD *)(v18 + 4 * (v19 & 7)) = v25;
        uint64_t v37 = (v36 >> 2) & 0x3FFFFFC0;
        uint64_t v38 = v22 + 4 * v37;
        uint64_t v39 = (unsigned char *)(v21 + v37);
        if (((*v39 - 1) & 0x3F) != 0) {
          uint64_t v40 = 0;
        }
        else {
          uint64_t v40 = 63;
        }
        uint64_t v41 = v40 + ((*v39 - 1) & 0x3F);
        *uint64_t v39 = v41;
        v39[v41] = v36;
        *(_DWORD *)(v38 + 4 * v41) = v19++;
      }
      while (v19 < v10);
    }
    *(_DWORD *)(a1 + 44) = v10;
    unint64_t v42 = ((0xCF1BBCDCBB000000 * *(void *)(v9 + v10 + 8)) ^ v16) >> (56 - v7);
    uint64_t v43 = (v42 >> 2) & 0x3FFFFFC0;
    _X17 = v5 + 4 * v43;
    __asm
    {
      PRFM            #0, [X17]
      PRFM            #0, [X17,#0x40]
    }
    _X14 = v6 + v43;
    __asm
    {
      PRFM            #0, [X14]
      PRFM            #0, [X14,#0x20]
    }
    LODWORD(_X14) = *(_DWORD *)(v18 + 4 * (v10 & 7));
    *(_DWORD *)(v18 + 4 * (v10 & 7)) = v42;
    uint64_t v8 = v20;
  }
  *(_DWORD *)(a1 + 104) += _X14;
  uint64_t v49 = (_X14 >> 2) & 0x3FFFFFC0;
  uint64_t v50 = v5 + 4 * v49;
  char v51 = (char *)(v6 + v49);
  char v52 = *v51;
  int8x16x4_t v124 = vld4q_s8(v51);
  int8x16_t v53 = vdupq_n_s8(_X14);
  v124.val[0] = vsriq_n_s8(vsriq_n_s8(vceqq_s8(v124.val[3], v53), vceqq_s8(v124.val[2], v53), 1uLL), vsriq_n_s8(vceqq_s8(v124.val[1], v53), vceqq_s8(v124.val[0], v53), 1uLL), 2uLL);
  int8x8_t v54 = vshrn_n_s16((int16x8_t)vsriq_n_s8(v124.val[0], v124.val[0], 4uLL), 4uLL);
  uint64_t v55 = 0;
  if (v54)
  {
    int v56 = 1 << v15;
    unint64_t v57 = __ROR8__(*(void *)&v54, v52);
    do
    {
      unsigned int v58 = (__clz(__rbit64(v57)) + v52) & 0x3F;
      if (v58)
      {
        uint64_t v59 = *(unsigned int *)(v50 + 4 * v58);
        if (v59 < v14) {
          break;
        }
        if (v59 >= v12) {
          uint64_t v60 = v9;
        }
        else {
          uint64_t v60 = v8;
        }
        _X1 = v60 + v59;
        __asm { PRFM            #0, [X1] }
        v122[v55++] = v59;
        --v56;
      }
      v57 &= v57 - 1;
    }
    while (v57 && v56);
  }
  if (((v52 - 1) & 0x3F) != 0) {
    uint64_t v63 = 0;
  }
  else {
    uint64_t v63 = 63;
  }
  uint64_t v64 = v63 + ((v52 - 1) & 0x3F);
  *char v51 = v64;
  v51[v64] = _X14;
  int v65 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v65 + 1;
  *(_DWORD *)(v50 + 4 * v64) = v65;
  if (v55)
  {
    uint64_t v66 = 0;
    uint64_t v119 = (void *)(v9 + v12);
    uint64_t v118 = (char *)(v8 + v12);
    unint64_t v67 = (char *)v4 - 3;
    unint64_t v68 = a3 - 7;
    unint64_t v114 = a3 - 1;
    unint64_t v115 = a3 - 3;
    uint64_t v117 = (void *)((char *)v4 + 4);
    unsigned int v116 = v10 + 3;
    unsigned int v112 = v4 + 1;
    uint64_t v113 = v9 + 8;
    unint64_t v69 = 3;
    while (1)
    {
      uint64_t v70 = v122[v66];
      if (v70 >= v12)
      {
        unint64_t v77 = (void *)(v9 + v70);
        if (*(_DWORD *)(v9 + v70 + v69 - 3) != *(_DWORD *)&v67[v69]) {
          goto LABEL_55;
        }
        if (v68 <= (unint64_t)v4)
        {
          uint64_t v79 = v4;
        }
        else
        {
          unint64_t v78 = *v4 ^ *v77;
          if (v78)
          {
            unint64_t result = __clz(__rbit64(v78)) >> 3;
            goto LABEL_53;
          }
          uint64_t v80 = 0;
          while (1)
          {
            uint64_t v79 = &v112[v80];
            if ((unint64_t)&v112[v80] >= v68) {
              break;
            }
            uint64_t v81 = *(void *)(v113 + v70 + v80 * 8);
            ++v80;
            unint64_t v82 = *v79 ^ v81;
            if (v82)
            {
              unint64_t result = v80 * 8 + (__clz(__rbit64(v82)) >> 3);
              goto LABEL_53;
            }
          }
          unint64_t v77 = (void *)(v113 + v70 + v80 * 8);
        }
        if ((unint64_t)v79 < v115 && *(_DWORD *)v77 == *(_DWORD *)v79)
        {
          uint64_t v79 = (void *)((char *)v79 + 4);
          unint64_t v77 = (void *)((char *)v77 + 4);
        }
        if ((unint64_t)v79 < v114 && *(unsigned __int16 *)v77 == *(unsigned __int16 *)v79)
        {
          uint64_t v79 = (void *)((char *)v79 + 2);
          unint64_t v77 = (void *)((char *)v77 + 2);
        }
        if ((unint64_t)v79 < a3 && *(unsigned __int8 *)v77 == *(unsigned __int8 *)v79) {
          uint64_t v79 = (void *)((char *)v79 + 1);
        }
        unint64_t result = (char *)v79 - (char *)v4;
      }
      else
      {
        if (*(_DWORD *)(v8 + v70) != *(_DWORD *)v4) {
          goto LABEL_55;
        }
        unint64_t v71 = a3;
        unint64_t v72 = v4;
        uint64_t v73 = v12;
        uint64_t v74 = v67;
        unint64_t v75 = sub_1DD2A6010(v117, (char *)(v8 + v70 + 4), a3, v118, v119);
        unint64_t v67 = v74;
        uint64_t v12 = v73;
        uint64_t v4 = v72;
        uint64_t v9 = v121;
        a3 = v71;
        unint64_t result = v75 + 4;
      }
LABEL_53:
      if (result > v69)
      {
        *a4 = v116 - v70;
        unint64_t v69 = result;
        if ((void *)((char *)v4 + result) == (void *)a3) {
          return result;
        }
      }
LABEL_55:
      ++v66;
      unint64_t result = v69;
      if (v66 == v55) {
        return result;
      }
    }
  }
  return 3;
}

unint64_t sub_1DD2C36F0(uint64_t a1, void *a2, unint64_t a3, void *a4)
{
  uint64_t v4 = a2;
  uint64_t v114 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 112);
  uint64_t v6 = *(void *)(a1 + 56);
  int v7 = *(_DWORD *)(a1 + 52);
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  unsigned int v10 = a2 - v9;
  unsigned int v11 = 1 << *(_DWORD *)(a1 + 256);
  uint64_t v12 = *(unsigned int *)(a1 + 24);
  if ((int)a2 - (int)v9 - *(_DWORD *)(a1 + 28) > v11 && *(_DWORD *)(a1 + 40) == 0) {
    unsigned int v14 = a2 - v9 - v11;
  }
  else {
    unsigned int v14 = *(_DWORD *)(a1 + 28);
  }
  unsigned int v15 = *(_DWORD *)(a1 + 268);
  if (v15 >= 4) {
    LOBYTE(v15) = 4;
  }
  uint64_t v16 = *(void *)(a1 + 96);
  uint64_t v112 = *(void *)(a1 + 8);
  if (*(_DWORD *)(a1 + 300))
  {
    _X14 = ((0xCF1BBCDCBF9B0000 * *a2) ^ v16) >> (56 - v7);
    *(_DWORD *)(a1 + 44) = v10;
  }
  else
  {
    uint64_t v18 = a1 + 64;
    unint64_t v19 = *(unsigned int *)(a1 + 44);
    uint64_t v20 = *(void *)(a1 + 16);
    if (v10 - v19 >= 0x181)
    {
      uint64_t v21 = *(void *)(a1 + 56);
      uint64_t v22 = *(void *)(a1 + 112);
      if (v19 <= 0xFFFFFF9F)
      {
        unint64_t v78 = v19 + 96;
        do
        {
          unint64_t v79 = ((0xCF1BBCDCBF9B0000 * *(void *)(v9 + 8 + v19)) ^ *(void *)(a1 + 96)) >> (56 - v7);
          uint64_t v80 = (v79 >> 4) & 0xFFFFFF0;
          _X19 = v5 + 4 * v80;
          __asm { PRFM            #0, [X19] }
          _X7 = v6 + v80;
          __asm { PRFM            #0, [X7] }
          unint64_t v85 = *(unsigned int *)(v18 + 4 * (v19 & 7));
          *(_DWORD *)(v18 + 4 * (v19 & 7)) = v79;
          uint64_t v86 = (v85 >> 4) & 0xFFFFFF0;
          uint64_t v87 = v5 + 4 * v86;
          uint64_t v88 = (unsigned char *)(v6 + v86);
          if (((*v88 - 1) & 0xF) != 0) {
            uint64_t v89 = 0;
          }
          else {
            uint64_t v89 = 15;
          }
          uint64_t v90 = v89 + ((*v88 - 1) & 0xF);
          *uint64_t v88 = v90;
          v88[v90] = v85;
          *(_DWORD *)(v87 + 4 * v90) = v19++;
        }
        while (v19 < v78);
        uint64_t v22 = *(void *)(a1 + 112);
        uint64_t v21 = *(void *)(a1 + 56);
        uint64_t v9 = v112;
      }
      uint64_t v91 = v10 - 32;
      LODWORD(v19) = v10 - 32;
      int v92 = v4 + 1 - (v9 + v91);
      if ((v92 + 1) < 8) {
        int v93 = v92 + 1;
      }
      else {
        int v93 = 8;
      }
      if ((unint64_t)v4 + 1 >= v9 + v91) {
        int v94 = v93;
      }
      else {
        int v94 = 0;
      }
      if (v91 < v94 + (int)v91)
      {
        uint64_t v95 = *(void *)(a1 + 96);
        int v96 = 56 - *(_DWORD *)(a1 + 52);
        do
        {
          unint64_t v97 = ((0xCF1BBCDCBF9B0000 * *(void *)(v9 + v91)) ^ v95) >> v96;
          uint64_t v98 = (v97 >> 4) & 0xFFFFFF0;
          _X22 = v22 + 4 * v98;
          __asm { PRFM            #0, [X22] }
          _X20 = v21 + v98;
          __asm { PRFM            #0, [X20] }
          *(_DWORD *)(a1 + 4 * (v91++ & 7) + 64) = v97;
          --v94;
        }
        while (v94);
      }
    }
    else
    {
      uint64_t v21 = *(void *)(a1 + 56);
      uint64_t v22 = *(void *)(a1 + 112);
    }
    if (v19 < v10)
    {
      uint64_t v23 = *(void *)(a1 + 8) + 8;
      int v24 = 56 - *(_DWORD *)(a1 + 52);
      unint64_t v19 = v19;
      do
      {
        unint64_t v25 = ((0xCF1BBCDCBF9B0000 * *(void *)(v23 + v19)) ^ *(void *)(a1 + 96)) >> v24;
        uint64_t v26 = (v25 >> 4) & 0xFFFFFF0;
        _X22 = v22 + 4 * v26;
        __asm { PRFM            #0, [X22] }
        _X20 = v21 + v26;
        __asm { PRFM            #0, [X20] }
        unint64_t v34 = *(unsigned int *)(v18 + 4 * (v19 & 7));
        *(_DWORD *)(v18 + 4 * (v19 & 7)) = v25;
        uint64_t v35 = (v34 >> 4) & 0xFFFFFF0;
        uint64_t v36 = v22 + 4 * v35;
        uint64_t v37 = (unsigned char *)(v21 + v35);
        if (((*v37 - 1) & 0xF) != 0) {
          uint64_t v38 = 0;
        }
        else {
          uint64_t v38 = 15;
        }
        uint64_t v39 = v38 + ((*v37 - 1) & 0xF);
        *uint64_t v37 = v39;
        v37[v39] = v34;
        *(_DWORD *)(v36 + 4 * v39) = v19++;
      }
      while (v19 < v10);
    }
    *(_DWORD *)(a1 + 44) = v10;
    unint64_t v40 = ((0xCF1BBCDCBF9B0000 * *(void *)(v9 + v10 + 8)) ^ v16) >> (56 - v7);
    uint64_t v41 = (v40 >> 4) & 0xFFFFFF0;
    _X17 = v5 + 4 * v41;
    __asm { PRFM            #0, [X17] }
    _X14 = v6 + v41;
    __asm { PRFM            #0, [X14] }
    LODWORD(_X14) = *(_DWORD *)(v18 + 4 * (v10 & 7));
    *(_DWORD *)(v18 + 4 * (v10 & 7)) = v40;
    uint64_t v8 = v20;
  }
  *(_DWORD *)(a1 + 104) += _X14;
  uint64_t v45 = (_X14 >> 4) & 0xFFFFFF0;
  uint64_t v46 = v5 + 4 * v45;
  uint64_t v47 = (int8x16_t *)(v6 + v45);
  char v48 = 4 * v47->i8[0];
  char v49 = (char)*v47;
  uint64_t v50 = 0;
  unint64_t v51 = __ROR8__(vshrn_n_s16((int16x8_t)vceqq_s8(*v47, vdupq_n_s8(_X14)), 4uLL), v48) & 0x8888888888888888;
  if (v51)
  {
    int v52 = 1 << v15;
    do
    {
      unsigned int v53 = ((__clz(__rbit64(v51)) + (v48 & 0xFC)) >> 2) & 0xF;
      if (v53)
      {
        uint64_t v54 = *(unsigned int *)(v46 + 4 * v53);
        if (v54 < v14) {
          break;
        }
        if (v54 >= v12) {
          uint64_t v55 = v9;
        }
        else {
          uint64_t v55 = v8;
        }
        _X3 = v55 + v54;
        __asm { PRFM            #0, [X3] }
        v113[v50++] = v54;
        --v52;
      }
      v51 &= v51 - 1;
    }
    while (v51 && v52);
  }
  if (((v49 - 1) & 0xF) != 0) {
    uint64_t v58 = 0;
  }
  else {
    uint64_t v58 = 15;
  }
  uint64_t v59 = v58 + ((v49 - 1) & 0xF);
  v47->i8[0] = v59;
  v47->i8[v59] = _X14;
  int v60 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v60 + 1;
  *(_DWORD *)(v46 + 4 * v59) = v60;
  if (v50)
  {
    uint64_t v61 = 0;
    unint64_t v110 = (void *)(v9 + v12);
    uint64_t v109 = (char *)(v8 + v12);
    uint64_t v62 = (char *)v4 - 3;
    unint64_t v63 = a3 - 7;
    unint64_t v105 = a3 - 1;
    unint64_t v106 = a3 - 3;
    unsigned int v108 = (void *)((char *)v4 + 4);
    unsigned int v107 = v10 + 3;
    int v103 = v4 + 1;
    uint64_t v104 = v9 + 8;
    unint64_t v64 = 3;
    while (1)
    {
      uint64_t v65 = v113[v61];
      if (v65 >= v12)
      {
        unint64_t v72 = (void *)(v9 + v65);
        if (*(_DWORD *)(v9 + v65 + v64 - 3) != *(_DWORD *)&v62[v64]) {
          goto LABEL_55;
        }
        if (v63 <= (unint64_t)v4)
        {
          uint64_t v74 = v4;
        }
        else
        {
          unint64_t v73 = *v4 ^ *v72;
          if (v73)
          {
            unint64_t result = __clz(__rbit64(v73)) >> 3;
            goto LABEL_53;
          }
          uint64_t v75 = 0;
          while (1)
          {
            uint64_t v74 = &v103[v75];
            if ((unint64_t)&v103[v75] >= v63) {
              break;
            }
            uint64_t v76 = *(void *)(v104 + v65 + v75 * 8);
            ++v75;
            unint64_t v77 = *v74 ^ v76;
            if (v77)
            {
              unint64_t result = v75 * 8 + (__clz(__rbit64(v77)) >> 3);
              goto LABEL_53;
            }
          }
          unint64_t v72 = (void *)(v104 + v65 + v75 * 8);
        }
        if ((unint64_t)v74 < v106 && *(_DWORD *)v72 == *(_DWORD *)v74)
        {
          uint64_t v74 = (void *)((char *)v74 + 4);
          unint64_t v72 = (void *)((char *)v72 + 4);
        }
        if ((unint64_t)v74 < v105 && *(unsigned __int16 *)v72 == *(unsigned __int16 *)v74)
        {
          uint64_t v74 = (void *)((char *)v74 + 2);
          unint64_t v72 = (void *)((char *)v72 + 2);
        }
        if ((unint64_t)v74 < a3 && *(unsigned __int8 *)v72 == *(unsigned __int8 *)v74) {
          uint64_t v74 = (void *)((char *)v74 + 1);
        }
        unint64_t result = (char *)v74 - (char *)v4;
      }
      else
      {
        if (*(_DWORD *)(v8 + v65) != *(_DWORD *)v4) {
          goto LABEL_55;
        }
        unint64_t v66 = a3;
        unint64_t v67 = v4;
        uint64_t v68 = v12;
        unint64_t v69 = v62;
        unint64_t v70 = sub_1DD2A6010(v108, (char *)(v8 + v65 + 4), a3, v109, v110);
        uint64_t v62 = v69;
        uint64_t v12 = v68;
        uint64_t v4 = v67;
        uint64_t v9 = v112;
        a3 = v66;
        unint64_t result = v70 + 4;
      }
LABEL_53:
      if (result > v64)
      {
        *a4 = v107 - v65;
        unint64_t v64 = result;
        if ((void *)((char *)v4 + result) == (void *)a3) {
          return result;
        }
      }
LABEL_55:
      ++v61;
      unint64_t result = v64;
      if (v61 == v50) {
        return result;
      }
    }
  }
  return 3;
}

unint64_t sub_1DD2C3CF8(uint64_t a1, void *a2, unint64_t a3, void *a4)
{
  uint64_t v4 = a2;
  uint64_t v119 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 112);
  uint64_t v6 = *(void *)(a1 + 56);
  int v7 = *(_DWORD *)(a1 + 52);
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  unsigned int v10 = a2 - v9;
  unsigned int v11 = 1 << *(_DWORD *)(a1 + 256);
  uint64_t v12 = *(unsigned int *)(a1 + 24);
  if ((int)a2 - (int)v9 - *(_DWORD *)(a1 + 28) > v11 && *(_DWORD *)(a1 + 40) == 0) {
    unsigned int v14 = a2 - v9 - v11;
  }
  else {
    unsigned int v14 = *(_DWORD *)(a1 + 28);
  }
  unsigned int v15 = *(_DWORD *)(a1 + 268);
  if (v15 >= 5) {
    LOBYTE(v15) = 5;
  }
  uint64_t v16 = *(void *)(a1 + 96);
  uint64_t v117 = *(void *)(a1 + 8);
  if (*(_DWORD *)(a1 + 300))
  {
    _X14 = ((0xCF1BBCDCBF9B0000 * *a2) ^ v16) >> (56 - v7);
    *(_DWORD *)(a1 + 44) = v10;
  }
  else
  {
    uint64_t v18 = a1 + 64;
    unint64_t v19 = *(unsigned int *)(a1 + 44);
    uint64_t v20 = *(void *)(a1 + 16);
    if (v10 - v19 >= 0x181)
    {
      uint64_t v21 = *(void *)(a1 + 56);
      uint64_t v22 = *(void *)(a1 + 112);
      if (v19 <= 0xFFFFFF9F)
      {
        unint64_t v81 = v19 + 96;
        do
        {
          unint64_t v82 = ((0xCF1BBCDCBF9B0000 * *(void *)(v9 + 8 + v19)) ^ *(void *)(a1 + 96)) >> (56 - v7);
          uint64_t v83 = (v82 >> 3) & 0x1FFFFFE0;
          _X19 = v5 + 4 * v83;
          __asm
          {
            PRFM            #0, [X19]
            PRFM            #0, [X19,#0x40]
          }
          _X7 = v6 + v83;
          __asm { PRFM            #0, [X7] }
          unint64_t v89 = *(unsigned int *)(v18 + 4 * (v19 & 7));
          *(_DWORD *)(v18 + 4 * (v19 & 7)) = v82;
          uint64_t v90 = (v89 >> 3) & 0x1FFFFFE0;
          uint64_t v91 = v5 + 4 * v90;
          int v92 = (unsigned char *)(v6 + v90);
          if (((*v92 - 1) & 0x1F) != 0) {
            uint64_t v93 = 0;
          }
          else {
            uint64_t v93 = 31;
          }
          uint64_t v94 = v93 + ((*v92 - 1) & 0x1F);
          *int v92 = v94;
          v92[v94] = v89;
          *(_DWORD *)(v91 + 4 * v94) = v19++;
        }
        while (v19 < v81);
        uint64_t v22 = *(void *)(a1 + 112);
        uint64_t v21 = *(void *)(a1 + 56);
        uint64_t v9 = v117;
      }
      uint64_t v95 = v10 - 32;
      LODWORD(v19) = v10 - 32;
      int v96 = v4 + 1 - (v9 + v95);
      if ((v96 + 1) < 8) {
        int v97 = v96 + 1;
      }
      else {
        int v97 = 8;
      }
      if ((unint64_t)v4 + 1 >= v9 + v95) {
        int v98 = v97;
      }
      else {
        int v98 = 0;
      }
      if (v95 < v98 + (int)v95)
      {
        uint64_t v99 = *(void *)(a1 + 96);
        int v100 = 56 - *(_DWORD *)(a1 + 52);
        do
        {
          unint64_t v101 = ((0xCF1BBCDCBF9B0000 * *(void *)(v9 + v95)) ^ v99) >> v100;
          uint64_t v102 = (v101 >> 3) & 0x1FFFFFE0;
          _X22 = v22 + 4 * v102;
          __asm
          {
            PRFM            #0, [X22]
            PRFM            #0, [X22,#0x40]
          }
          _X20 = v21 + v102;
          __asm { PRFM            #0, [X20] }
          *(_DWORD *)(a1 + 4 * (v95++ & 7) + 64) = v101;
          --v98;
        }
        while (v98);
      }
    }
    else
    {
      uint64_t v21 = *(void *)(a1 + 56);
      uint64_t v22 = *(void *)(a1 + 112);
    }
    if (v19 < v10)
    {
      uint64_t v23 = *(void *)(a1 + 8) + 8;
      int v24 = 56 - *(_DWORD *)(a1 + 52);
      unint64_t v19 = v19;
      do
      {
        unint64_t v25 = ((0xCF1BBCDCBF9B0000 * *(void *)(v23 + v19)) ^ *(void *)(a1 + 96)) >> v24;
        uint64_t v26 = (v25 >> 3) & 0x1FFFFFE0;
        _X22 = v22 + 4 * v26;
        __asm
        {
          PRFM            #0, [X22]
          PRFM            #0, [X22,#0x40]
        }
        _X20 = v21 + v26;
        __asm { PRFM            #0, [X20] }
        unint64_t v35 = *(unsigned int *)(v18 + 4 * (v19 & 7));
        *(_DWORD *)(v18 + 4 * (v19 & 7)) = v25;
        uint64_t v36 = (v35 >> 3) & 0x1FFFFFE0;
        uint64_t v37 = v22 + 4 * v36;
        uint64_t v38 = (unsigned char *)(v21 + v36);
        if (((*v38 - 1) & 0x1F) != 0) {
          uint64_t v39 = 0;
        }
        else {
          uint64_t v39 = 31;
        }
        uint64_t v40 = v39 + ((*v38 - 1) & 0x1F);
        *uint64_t v38 = v40;
        v38[v40] = v35;
        *(_DWORD *)(v37 + 4 * v40) = v19++;
      }
      while (v19 < v10);
    }
    *(_DWORD *)(a1 + 44) = v10;
    unint64_t v41 = ((0xCF1BBCDCBF9B0000 * *(void *)(v9 + v10 + 8)) ^ v16) >> (56 - v7);
    uint64_t v42 = (v41 >> 3) & 0x1FFFFFE0;
    _X17 = v5 + 4 * v42;
    __asm
    {
      PRFM            #0, [X17]
      PRFM            #0, [X17,#0x40]
    }
    _X14 = v6 + v42;
    __asm { PRFM            #0, [X14] }
    LODWORD(_X14) = *(_DWORD *)(v18 + 4 * (v10 & 7));
    *(_DWORD *)(v18 + 4 * (v10 & 7)) = v41;
    uint64_t v8 = v20;
  }
  *(_DWORD *)(a1 + 104) += _X14;
  uint64_t v47 = (_X14 >> 3) & 0x1FFFFFE0;
  uint64_t v48 = v5 + 4 * v47;
  char v49 = (__int16 *)(v6 + v47);
  int16x8x2_t v120 = vld2q_s16(v49);
  char v50 = *(unsigned char *)v49;
  char v51 = 2 * *(unsigned char *)v49;
  int8x16_t v52 = vdupq_n_s8(_X14);
  uint64_t v53 = 0;
  unint64_t v54 = __ROR8__(vsli_n_s8(vshrn_n_s16((int16x8_t)vceqq_s8(v52, (int8x16_t)v120.val[0]), 6uLL), vshrn_n_s16((int16x8_t)vceqq_s8(v52, (int8x16_t)v120.val[1]), 6uLL), 4uLL), v51) & 0x5555555555555555;
  if (v54)
  {
    int v55 = 1 << v15;
    do
    {
      unsigned int v56 = ((__clz(__rbit64(v54)) + (v51 & 0xFE)) >> 1) & 0x1F;
      if (v56)
      {
        uint64_t v57 = *(unsigned int *)(v48 + 4 * v56);
        if (v57 < v14) {
          break;
        }
        if (v57 >= v12) {
          uint64_t v58 = v9;
        }
        else {
          uint64_t v58 = v8;
        }
        _X3 = v58 + v57;
        __asm { PRFM            #0, [X3] }
        v118[v53++] = v57;
        --v55;
      }
      v54 &= v54 - 1;
    }
    while (v54 && v55);
  }
  if (((v50 - 1) & 0x1F) != 0) {
    uint64_t v61 = 0;
  }
  else {
    uint64_t v61 = 31;
  }
  uint64_t v62 = v61 + ((v50 - 1) & 0x1F);
  *(unsigned char *)char v49 = v62;
  *((unsigned char *)v49 + v62) = _X14;
  int v63 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v63 + 1;
  *(_DWORD *)(v48 + 4 * v62) = v63;
  if (v53)
  {
    uint64_t v64 = 0;
    unint64_t v115 = (void *)(v9 + v12);
    uint64_t v114 = (char *)(v8 + v12);
    uint64_t v65 = (char *)v4 - 3;
    unint64_t v66 = a3 - 7;
    unint64_t v110 = a3 - 1;
    unint64_t v111 = a3 - 3;
    uint64_t v113 = (void *)((char *)v4 + 4);
    unsigned int v112 = v10 + 3;
    unsigned int v108 = v4 + 1;
    uint64_t v109 = v9 + 8;
    unint64_t v67 = 3;
    while (1)
    {
      uint64_t v68 = v118[v64];
      if (v68 >= v12)
      {
        uint64_t v75 = (void *)(v9 + v68);
        if (*(_DWORD *)(v9 + v68 + v67 - 3) != *(_DWORD *)&v65[v67]) {
          goto LABEL_55;
        }
        if (v66 <= (unint64_t)v4)
        {
          unint64_t v77 = v4;
        }
        else
        {
          unint64_t v76 = *v4 ^ *v75;
          if (v76)
          {
            unint64_t result = __clz(__rbit64(v76)) >> 3;
            goto LABEL_53;
          }
          uint64_t v78 = 0;
          while (1)
          {
            unint64_t v77 = &v108[v78];
            if ((unint64_t)&v108[v78] >= v66) {
              break;
            }
            uint64_t v79 = *(void *)(v109 + v68 + v78 * 8);
            ++v78;
            unint64_t v80 = *v77 ^ v79;
            if (v80)
            {
              unint64_t result = v78 * 8 + (__clz(__rbit64(v80)) >> 3);
              goto LABEL_53;
            }
          }
          uint64_t v75 = (void *)(v109 + v68 + v78 * 8);
        }
        if ((unint64_t)v77 < v111 && *(_DWORD *)v75 == *(_DWORD *)v77)
        {
          unint64_t v77 = (void *)((char *)v77 + 4);
          uint64_t v75 = (void *)((char *)v75 + 4);
        }
        if ((unint64_t)v77 < v110 && *(unsigned __int16 *)v75 == *(unsigned __int16 *)v77)
        {
          unint64_t v77 = (void *)((char *)v77 + 2);
          uint64_t v75 = (void *)((char *)v75 + 2);
        }
        if ((unint64_t)v77 < a3 && *(unsigned __int8 *)v75 == *(unsigned __int8 *)v77) {
          unint64_t v77 = (void *)((char *)v77 + 1);
        }
        unint64_t result = (char *)v77 - (char *)v4;
      }
      else
      {
        if (*(_DWORD *)(v8 + v68) != *(_DWORD *)v4) {
          goto LABEL_55;
        }
        unint64_t v69 = a3;
        unint64_t v70 = v4;
        uint64_t v71 = v12;
        unint64_t v72 = v65;
        unint64_t v73 = sub_1DD2A6010(v113, (char *)(v8 + v68 + 4), a3, v114, v115);
        uint64_t v65 = v72;
        uint64_t v12 = v71;
        uint64_t v4 = v70;
        uint64_t v9 = v117;
        a3 = v69;
        unint64_t result = v73 + 4;
      }
LABEL_53:
      if (result > v67)
      {
        *a4 = v112 - v68;
        unint64_t v67 = result;
        if ((void *)((char *)v4 + result) == (void *)a3) {
          return result;
        }
      }
LABEL_55:
      ++v64;
      unint64_t result = v67;
      if (v64 == v53) {
        return result;
      }
    }
  }
  return 3;
}

unint64_t sub_1DD2C4318(uint64_t a1, void *a2, unint64_t a3, void *a4)
{
  uint64_t v4 = a2;
  uint64_t v123 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 112);
  uint64_t v6 = *(void *)(a1 + 56);
  int v7 = *(_DWORD *)(a1 + 52);
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  unsigned int v10 = a2 - v9;
  unsigned int v11 = 1 << *(_DWORD *)(a1 + 256);
  uint64_t v12 = *(unsigned int *)(a1 + 24);
  if ((int)a2 - (int)v9 - *(_DWORD *)(a1 + 28) > v11 && *(_DWORD *)(a1 + 40) == 0) {
    unsigned int v14 = a2 - v9 - v11;
  }
  else {
    unsigned int v14 = *(_DWORD *)(a1 + 28);
  }
  unsigned int v15 = *(_DWORD *)(a1 + 268);
  if (v15 >= 6) {
    LOBYTE(v15) = 6;
  }
  uint64_t v16 = *(void *)(a1 + 96);
  uint64_t v121 = *(void *)(a1 + 8);
  if (*(_DWORD *)(a1 + 300))
  {
    _X14 = ((0xCF1BBCDCBF9B0000 * *a2) ^ v16) >> (56 - v7);
    *(_DWORD *)(a1 + 44) = v10;
  }
  else
  {
    uint64_t v18 = a1 + 64;
    unint64_t v19 = *(unsigned int *)(a1 + 44);
    uint64_t v20 = *(void *)(a1 + 16);
    if (v10 - v19 >= 0x181)
    {
      uint64_t v21 = *(void *)(a1 + 56);
      uint64_t v22 = *(void *)(a1 + 112);
      if (v19 <= 0xFFFFFF9F)
      {
        unint64_t v83 = v19 + 96;
        do
        {
          unint64_t v84 = ((0xCF1BBCDCBF9B0000 * *(void *)(v9 + 8 + v19)) ^ *(void *)(a1 + 96)) >> (56 - v7);
          uint64_t v85 = (v84 >> 2) & 0x3FFFFFC0;
          _X19 = v5 + 4 * v85;
          __asm
          {
            PRFM            #0, [X19]
            PRFM            #0, [X19,#0x40]
          }
          _X7 = v6 + v85;
          __asm
          {
            PRFM            #0, [X7]
            PRFM            #0, [X7,#0x20]
          }
          unint64_t v92 = *(unsigned int *)(v18 + 4 * (v19 & 7));
          *(_DWORD *)(v18 + 4 * (v19 & 7)) = v84;
          uint64_t v93 = (v92 >> 2) & 0x3FFFFFC0;
          uint64_t v94 = v5 + 4 * v93;
          uint64_t v95 = (unsigned char *)(v6 + v93);
          if (((*v95 - 1) & 0x3F) != 0) {
            uint64_t v96 = 0;
          }
          else {
            uint64_t v96 = 63;
          }
          uint64_t v97 = v96 + ((*v95 - 1) & 0x3F);
          *uint64_t v95 = v97;
          v95[v97] = v92;
          *(_DWORD *)(v94 + 4 * v97) = v19++;
        }
        while (v19 < v83);
        uint64_t v22 = *(void *)(a1 + 112);
        uint64_t v21 = *(void *)(a1 + 56);
        uint64_t v9 = v121;
      }
      uint64_t v98 = v10 - 32;
      LODWORD(v19) = v10 - 32;
      int v99 = v4 + 1 - (v9 + v98);
      if ((v99 + 1) < 8) {
        int v100 = v99 + 1;
      }
      else {
        int v100 = 8;
      }
      if ((unint64_t)v4 + 1 >= v9 + v98) {
        int v101 = v100;
      }
      else {
        int v101 = 0;
      }
      if (v98 < v101 + (int)v98)
      {
        uint64_t v102 = *(void *)(a1 + 96);
        int v103 = 56 - *(_DWORD *)(a1 + 52);
        do
        {
          unint64_t v104 = ((0xCF1BBCDCBF9B0000 * *(void *)(v9 + v98)) ^ v102) >> v103;
          uint64_t v105 = (v104 >> 2) & 0x3FFFFFC0;
          _X22 = v22 + 4 * v105;
          __asm
          {
            PRFM            #0, [X22]
            PRFM            #0, [X22,#0x40]
          }
          _X20 = v21 + v105;
          __asm
          {
            PRFM            #0, [X20]
            PRFM            #0, [X20,#0x20]
          }
          *(_DWORD *)(a1 + 4 * (v98++ & 7) + 64) = v104;
          --v101;
        }
        while (v101);
      }
    }
    else
    {
      uint64_t v21 = *(void *)(a1 + 56);
      uint64_t v22 = *(void *)(a1 + 112);
    }
    if (v19 < v10)
    {
      uint64_t v23 = *(void *)(a1 + 8) + 8;
      int v24 = 56 - *(_DWORD *)(a1 + 52);
      unint64_t v19 = v19;
      do
      {
        unint64_t v25 = ((0xCF1BBCDCBF9B0000 * *(void *)(v23 + v19)) ^ *(void *)(a1 + 96)) >> v24;
        uint64_t v26 = (v25 >> 2) & 0x3FFFFFC0;
        _X22 = v22 + 4 * v26;
        __asm
        {
          PRFM            #0, [X22]
          PRFM            #0, [X22,#0x40]
        }
        _X20 = v21 + v26;
        __asm
        {
          PRFM            #0, [X20]
          PRFM            #0, [X20,#0x20]
        }
        unint64_t v36 = *(unsigned int *)(v18 + 4 * (v19 & 7));
        *(_DWORD *)(v18 + 4 * (v19 & 7)) = v25;
        uint64_t v37 = (v36 >> 2) & 0x3FFFFFC0;
        uint64_t v38 = v22 + 4 * v37;
        uint64_t v39 = (unsigned char *)(v21 + v37);
        if (((*v39 - 1) & 0x3F) != 0) {
          uint64_t v40 = 0;
        }
        else {
          uint64_t v40 = 63;
        }
        uint64_t v41 = v40 + ((*v39 - 1) & 0x3F);
        *uint64_t v39 = v41;
        v39[v41] = v36;
        *(_DWORD *)(v38 + 4 * v41) = v19++;
      }
      while (v19 < v10);
    }
    *(_DWORD *)(a1 + 44) = v10;
    unint64_t v42 = ((0xCF1BBCDCBF9B0000 * *(void *)(v9 + v10 + 8)) ^ v16) >> (56 - v7);
    uint64_t v43 = (v42 >> 2) & 0x3FFFFFC0;
    _X17 = v5 + 4 * v43;
    __asm
    {
      PRFM            #0, [X17]
      PRFM            #0, [X17,#0x40]
    }
    _X14 = v6 + v43;
    __asm
    {
      PRFM            #0, [X14]
      PRFM            #0, [X14,#0x20]
    }
    LODWORD(_X14) = *(_DWORD *)(v18 + 4 * (v10 & 7));
    *(_DWORD *)(v18 + 4 * (v10 & 7)) = v42;
    uint64_t v8 = v20;
  }
  *(_DWORD *)(a1 + 104) += _X14;
  uint64_t v49 = (_X14 >> 2) & 0x3FFFFFC0;
  uint64_t v50 = v5 + 4 * v49;
  char v51 = (char *)(v6 + v49);
  char v52 = *v51;
  int8x16x4_t v124 = vld4q_s8(v51);
  int8x16_t v53 = vdupq_n_s8(_X14);
  v124.val[0] = vsriq_n_s8(vsriq_n_s8(vceqq_s8(v124.val[3], v53), vceqq_s8(v124.val[2], v53), 1uLL), vsriq_n_s8(vceqq_s8(v124.val[1], v53), vceqq_s8(v124.val[0], v53), 1uLL), 2uLL);
  int8x8_t v54 = vshrn_n_s16((int16x8_t)vsriq_n_s8(v124.val[0], v124.val[0], 4uLL), 4uLL);
  uint64_t v55 = 0;
  if (v54)
  {
    int v56 = 1 << v15;
    unint64_t v57 = __ROR8__(*(void *)&v54, v52);
    do
    {
      unsigned int v58 = (__clz(__rbit64(v57)) + v52) & 0x3F;
      if (v58)
      {
        uint64_t v59 = *(unsigned int *)(v50 + 4 * v58);
        if (v59 < v14) {
          break;
        }
        if (v59 >= v12) {
          uint64_t v60 = v9;
        }
        else {
          uint64_t v60 = v8;
        }
        _X1 = v60 + v59;
        __asm { PRFM            #0, [X1] }
        v122[v55++] = v59;
        --v56;
      }
      v57 &= v57 - 1;
    }
    while (v57 && v56);
  }
  if (((v52 - 1) & 0x3F) != 0) {
    uint64_t v63 = 0;
  }
  else {
    uint64_t v63 = 63;
  }
  uint64_t v64 = v63 + ((v52 - 1) & 0x3F);
  *char v51 = v64;
  v51[v64] = _X14;
  int v65 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v65 + 1;
  *(_DWORD *)(v50 + 4 * v64) = v65;
  if (v55)
  {
    uint64_t v66 = 0;
    uint64_t v119 = (void *)(v9 + v12);
    uint64_t v118 = (char *)(v8 + v12);
    unint64_t v67 = (char *)v4 - 3;
    unint64_t v68 = a3 - 7;
    unint64_t v114 = a3 - 1;
    unint64_t v115 = a3 - 3;
    uint64_t v117 = (void *)((char *)v4 + 4);
    unsigned int v116 = v10 + 3;
    unsigned int v112 = v4 + 1;
    uint64_t v113 = v9 + 8;
    unint64_t v69 = 3;
    while (1)
    {
      uint64_t v70 = v122[v66];
      if (v70 >= v12)
      {
        unint64_t v77 = (void *)(v9 + v70);
        if (*(_DWORD *)(v9 + v70 + v69 - 3) != *(_DWORD *)&v67[v69]) {
          goto LABEL_55;
        }
        if (v68 <= (unint64_t)v4)
        {
          uint64_t v79 = v4;
        }
        else
        {
          unint64_t v78 = *v4 ^ *v77;
          if (v78)
          {
            unint64_t result = __clz(__rbit64(v78)) >> 3;
            goto LABEL_53;
          }
          uint64_t v80 = 0;
          while (1)
          {
            uint64_t v79 = &v112[v80];
            if ((unint64_t)&v112[v80] >= v68) {
              break;
            }
            uint64_t v81 = *(void *)(v113 + v70 + v80 * 8);
            ++v80;
            unint64_t v82 = *v79 ^ v81;
            if (v82)
            {
              unint64_t result = v80 * 8 + (__clz(__rbit64(v82)) >> 3);
              goto LABEL_53;
            }
          }
          unint64_t v77 = (void *)(v113 + v70 + v80 * 8);
        }
        if ((unint64_t)v79 < v115 && *(_DWORD *)v77 == *(_DWORD *)v79)
        {
          uint64_t v79 = (void *)((char *)v79 + 4);
          unint64_t v77 = (void *)((char *)v77 + 4);
        }
        if ((unint64_t)v79 < v114 && *(unsigned __int16 *)v77 == *(unsigned __int16 *)v79)
        {
          uint64_t v79 = (void *)((char *)v79 + 2);
          unint64_t v77 = (void *)((char *)v77 + 2);
        }
        if ((unint64_t)v79 < a3 && *(unsigned __int8 *)v77 == *(unsigned __int8 *)v79) {
          uint64_t v79 = (void *)((char *)v79 + 1);
        }
        unint64_t result = (char *)v79 - (char *)v4;
      }
      else
      {
        if (*(_DWORD *)(v8 + v70) != *(_DWORD *)v4) {
          goto LABEL_55;
        }
        unint64_t v71 = a3;
        unint64_t v72 = v4;
        uint64_t v73 = v12;
        uint64_t v74 = v67;
        unint64_t v75 = sub_1DD2A6010(v117, (char *)(v8 + v70 + 4), a3, v118, v119);
        unint64_t v67 = v74;
        uint64_t v12 = v73;
        uint64_t v4 = v72;
        uint64_t v9 = v121;
        a3 = v71;
        unint64_t result = v75 + 4;
      }
LABEL_53:
      if (result > v69)
      {
        *a4 = v116 - v70;
        unint64_t v69 = result;
        if ((void *)((char *)v4 + result) == (void *)a3) {
          return result;
        }
      }
LABEL_55:
      ++v66;
      unint64_t result = v69;
      if (v66 == v55) {
        return result;
      }
    }
  }
  return 3;
}

unint64_t sub_1DD2C494C(uint64_t a1, _DWORD *a2, unint64_t a3, void *a4)
{
  uint64_t v4 = *(void *)(a1 + 128);
  int v5 = *(_DWORD *)(a1 + 260);
  unsigned int v6 = 1 << v5;
  int v7 = (1 << v5) - 1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(unsigned int *)(a1 + 24);
  unsigned int v10 = *(_DWORD *)(a1 + 28);
  unsigned int v58 = (void *)(v8 + v9);
  unsigned int v11 = a2 - v8;
  unsigned int v12 = 1 << *(_DWORD *)(a1 + 256);
  uint64_t v13 = *(unsigned int *)(a1 + 44);
  if (a2 - v8 - v10 > v12 && *(_DWORD *)(a1 + 40) == 0) {
    unsigned int v10 = a2 - v8 - v12;
  }
  BOOL v15 = v11 >= v6;
  unsigned int v16 = v11 - v6;
  if (v15) {
    unsigned int v17 = v16;
  }
  else {
    unsigned int v17 = 0;
  }
  int v18 = 1 << *(_DWORD *)(a1 + 268);
  uint64_t v19 = *(void *)(a1 + 248);
  int v20 = *(_DWORD *)(a1 + 300);
  uint64_t v21 = *(void *)(a1 + 112);
  int v22 = ~(-1 << v5);
  int v23 = 32 - *(_DWORD *)(a1 + 264);
  if (v13 <= v11) {
    uint64_t v24 = v11;
  }
  else {
    uint64_t v24 = v13;
  }
  do
  {
    if (v24 == v13) {
      break;
    }
    unsigned int v25 = (-1640531535 * *(_DWORD *)(v8 + v13)) >> v23;
    *(_DWORD *)(v4 + 4 * (v13 & v22)) = *(_DWORD *)(v21 + 4 * v25);
    *(_DWORD *)(v21 + 4 * v25) = v13++;
  }
  while (!v20);
  *(_DWORD *)(a1 + 44) = v11;
  int v26 = *a2;
  unsigned int v27 = *(_DWORD *)(v21 + 4 * ((-1640531535 * *a2) >> v23));
  if (v27 < v10)
  {
    unint64_t v28 = 3;
    goto LABEL_16;
  }
  unint64_t v42 = a3 - 7;
  uint64_t v43 = a2 + 2;
  uint64_t v44 = v8 + 8;
  unint64_t v28 = 3;
  while (1)
  {
    uint64_t v45 = v27;
    uint64_t v46 = (void *)(v8 + v27);
    if (*(_DWORD *)((char *)v46 + v28 - 3) == *(_DWORD *)((char *)a2 + v28 - 3)) {
      break;
    }
LABEL_48:
    if (v45 > v17)
    {
      if (--v18)
      {
        unsigned int v27 = *(_DWORD *)(v4 + 4 * (v45 & v7));
        if (v27 >= v10) {
          continue;
        }
      }
    }
    goto LABEL_16;
  }
  if (v42 <= (unint64_t)a2)
  {
    uint64_t v49 = a2;
  }
  else
  {
    unint64_t v47 = *(void *)a2 ^ *v46;
    if (v47)
    {
      unint64_t v48 = __clz(__rbit64(v47)) >> 3;
      goto LABEL_46;
    }
    uint64_t v50 = 0;
    while (1)
    {
      uint64_t v49 = &v43[v50];
      if ((unint64_t)&v43[v50] >= v42) {
        break;
      }
      uint64_t v51 = *(void *)(v44 + v45 + v50 * 4);
      v50 += 2;
      unint64_t v52 = *v49 ^ v51;
      if (v52)
      {
        unint64_t v48 = v50 * 4 + (__clz(__rbit64(v52)) >> 3);
        goto LABEL_46;
      }
    }
    uint64_t v46 = (void *)(v44 + v45 + v50 * 4);
  }
  if ((unint64_t)v49 < a3 - 3 && *(_DWORD *)v46 == *(_DWORD *)v49)
  {
    uint64_t v49 = (void *)((char *)v49 + 4);
    uint64_t v46 = (void *)((char *)v46 + 4);
  }
  if ((unint64_t)v49 < a3 - 1 && *(unsigned __int16 *)v46 == *(unsigned __int16 *)v49)
  {
    uint64_t v49 = (void *)((char *)v49 + 2);
    uint64_t v46 = (void *)((char *)v46 + 2);
  }
  if ((unint64_t)v49 < a3 && *(unsigned __int8 *)v46 == *(unsigned __int8 *)v49) {
    uint64_t v49 = (void *)((char *)v49 + 1);
  }
  unint64_t v48 = (char *)v49 - (char *)a2;
LABEL_46:
  if (v48 <= v28) {
    goto LABEL_48;
  }
  *a4 = v11 + 3 - v45;
  unint64_t v28 = v48;
  if ((_DWORD *)((char *)a2 + v48) != (_DWORD *)a3) {
    goto LABEL_48;
  }
  unint64_t v28 = v48;
LABEL_16:
  unsigned int v29 = 1 << *(_DWORD *)(v19 + 260);
  uint64_t v30 = *(void *)(v19 + 8);
  unint64_t v57 = *(char **)v19;
  unsigned int v31 = *(void *)v19 - v30;
  if (v31 >= v29) {
    unsigned int v32 = v31 - v29;
  }
  else {
    unsigned int v32 = 0;
  }
  if (v18)
  {
    unsigned int v33 = *(_DWORD *)(v19 + 24);
    unsigned int v34 = *(_DWORD *)(*(void *)(v19 + 112) + 4 * ((-1640531535 * v26) >> -*(unsigned char *)(v19 + 264)));
    if (v34 >= v33)
    {
      uint64_t v35 = *(void *)(v19 + 128);
      unsigned int v36 = v29 - 1;
      int v56 = a2 + 1;
      int v53 = v11 - v9 + v31 + 3;
      int v37 = v18 - 1;
      do
      {
        uint64_t v38 = v30 + v34;
        if (*(_DWORD *)v38 == v26)
        {
          uint64_t v39 = (_DWORD *)a3;
          unint64_t v40 = sub_1DD2A6010(v56, (char *)(v38 + 4), a3, v57, v58);
          a3 = (unint64_t)v39;
          if (v40 + 4 > v28)
          {
            *a4 = v53 - v34;
            unint64_t v28 = v40 + 4;
            if ((_DWORD *)((char *)a2 + v40 + 4) == v39) {
              break;
            }
          }
        }
        if (v34 <= v32) {
          break;
        }
        BOOL v15 = v37-- != 0;
        if (!v15) {
          break;
        }
        unsigned int v34 = *(_DWORD *)(v35 + 4 * (v34 & v36));
      }
      while (v34 >= v33);
    }
  }
  return v28;
}

unint64_t sub_1DD2C4CB8(uint64_t a1, void *a2, unint64_t a3, void *a4)
{
  uint64_t v4 = *(void *)(a1 + 128);
  int v5 = *(_DWORD *)(a1 + 260);
  unsigned int v6 = 1 << v5;
  int v7 = (1 << v5) - 1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(unsigned int *)(a1 + 24);
  unsigned int v10 = *(_DWORD *)(a1 + 28);
  uint64_t v59 = (void *)(v8 + v9);
  unsigned int v11 = a2 - v8;
  unsigned int v12 = 1 << *(_DWORD *)(a1 + 256);
  uint64_t v13 = *(unsigned int *)(a1 + 44);
  if (a2 - v8 - v10 > v12 && *(_DWORD *)(a1 + 40) == 0) {
    unsigned int v10 = a2 - v8 - v12;
  }
  BOOL v15 = v11 >= v6;
  unsigned int v16 = v11 - v6;
  if (v15) {
    unsigned int v17 = v16;
  }
  else {
    unsigned int v17 = 0;
  }
  int v18 = 1 << *(_DWORD *)(a1 + 268);
  uint64_t v19 = *(void *)(a1 + 248);
  int v20 = *(_DWORD *)(a1 + 300);
  uint64_t v21 = *(void *)(a1 + 112);
  int v22 = ~(-1 << v5);
  int v23 = 64 - *(_DWORD *)(a1 + 264);
  if (v13 <= v11) {
    uint64_t v24 = v11;
  }
  else {
    uint64_t v24 = v13;
  }
  do
  {
    if (v24 == v13) {
      break;
    }
    unint64_t v25 = (0xCF1BBCDCBB000000 * *(void *)(v8 + v13)) >> v23;
    *(_DWORD *)(v4 + 4 * (v13 & v22)) = *(_DWORD *)(v21 + 4 * v25);
    *(_DWORD *)(v21 + 4 * v25) = v13++;
  }
  while (!v20);
  uint64_t v26 = *a2;
  *(_DWORD *)(a1 + 44) = v11;
  unsigned int v27 = *(_DWORD *)(v21 + 4 * ((0xCF1BBCDCBB000000 * v26) >> v23));
  if (v27 < v10)
  {
    unint64_t v28 = 3;
    goto LABEL_16;
  }
  unint64_t v43 = a3 - 7;
  uint64_t v44 = a2 + 1;
  uint64_t v45 = v8 + 8;
  unint64_t v28 = 3;
  while (1)
  {
    uint64_t v46 = v27;
    unint64_t v47 = (void *)(v8 + v27);
    if (*(_DWORD *)((char *)v47 + v28 - 3) == *(_DWORD *)((char *)a2 + v28 - 3)) {
      break;
    }
LABEL_48:
    if (v46 > v17)
    {
      if (--v18)
      {
        unsigned int v27 = *(_DWORD *)(v4 + 4 * (v46 & v7));
        if (v27 >= v10) {
          continue;
        }
      }
    }
    goto LABEL_16;
  }
  if (v43 <= (unint64_t)a2)
  {
    uint64_t v50 = a2;
  }
  else
  {
    unint64_t v48 = *a2 ^ *v47;
    if (v48)
    {
      unint64_t v49 = __clz(__rbit64(v48)) >> 3;
      goto LABEL_46;
    }
    uint64_t v51 = 0;
    while (1)
    {
      uint64_t v50 = &v44[v51];
      if ((unint64_t)&v44[v51] >= v43) {
        break;
      }
      uint64_t v52 = *(void *)(v45 + v46 + v51 * 8);
      ++v51;
      unint64_t v53 = *v50 ^ v52;
      if (v53)
      {
        unint64_t v49 = v51 * 8 + (__clz(__rbit64(v53)) >> 3);
        goto LABEL_46;
      }
    }
    unint64_t v47 = (void *)(v45 + v46 + v51 * 8);
  }
  if ((unint64_t)v50 < a3 - 3 && *(_DWORD *)v47 == *(_DWORD *)v50)
  {
    uint64_t v50 = (void *)((char *)v50 + 4);
    unint64_t v47 = (void *)((char *)v47 + 4);
  }
  if ((unint64_t)v50 < a3 - 1 && *(unsigned __int16 *)v47 == *(unsigned __int16 *)v50)
  {
    uint64_t v50 = (void *)((char *)v50 + 2);
    unint64_t v47 = (void *)((char *)v47 + 2);
  }
  if ((unint64_t)v50 < a3 && *(unsigned __int8 *)v47 == *(unsigned __int8 *)v50) {
    uint64_t v50 = (void *)((char *)v50 + 1);
  }
  unint64_t v49 = (char *)v50 - (char *)a2;
LABEL_46:
  if (v49 <= v28) {
    goto LABEL_48;
  }
  *a4 = v11 + 3 - v46;
  unint64_t v28 = v49;
  if ((void *)((char *)a2 + v49) != (void *)a3) {
    goto LABEL_48;
  }
  unint64_t v28 = v49;
LABEL_16:
  unsigned int v29 = 1 << *(_DWORD *)(v19 + 260);
  uint64_t v30 = *(void *)(v19 + 8);
  unsigned int v58 = *(char **)v19;
  unsigned int v31 = *(void *)v19 - v30;
  if (v31 >= v29) {
    unsigned int v32 = v31 - v29;
  }
  else {
    unsigned int v32 = 0;
  }
  if (v18)
  {
    unsigned int v33 = *(_DWORD *)(v19 + 24);
    unsigned int v34 = *(_DWORD *)(*(void *)(v19 + 112) + 4 * ((0xCF1BBCDCBB000000 * v26) >> -*(unsigned char *)(v19 + 264)));
    if (v34 >= v33)
    {
      uint64_t v35 = *(void *)(v19 + 128);
      unsigned int v36 = v29 - 1;
      int v37 = *(_DWORD *)a2;
      unint64_t v57 = (void *)((char *)a2 + 4);
      int v54 = v11 - v9 + v31 + 3;
      int v38 = v18 - 1;
      do
      {
        uint64_t v39 = v30 + v34;
        if (*(_DWORD *)v39 == v37)
        {
          unint64_t v40 = (void *)a3;
          unint64_t v41 = sub_1DD2A6010(v57, (char *)(v39 + 4), a3, v58, v59);
          a3 = (unint64_t)v40;
          if (v41 + 4 > v28)
          {
            *a4 = v54 - v34;
            unint64_t v28 = v41 + 4;
            if ((void *)((char *)a2 + v41 + 4) == v40) {
              break;
            }
          }
        }
        if (v34 <= v32) {
          break;
        }
        BOOL v15 = v38-- != 0;
        if (!v15) {
          break;
        }
        unsigned int v34 = *(_DWORD *)(v35 + 4 * (v34 & v36));
      }
      while (v34 >= v33);
    }
  }
  return v28;
}

unint64_t sub_1DD2C5028(uint64_t a1, void *a2, unint64_t a3, void *a4)
{
  uint64_t v4 = *(void *)(a1 + 128);
  int v5 = *(_DWORD *)(a1 + 260);
  unsigned int v6 = 1 << v5;
  int v7 = (1 << v5) - 1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(unsigned int *)(a1 + 24);
  unsigned int v10 = *(_DWORD *)(a1 + 28);
  uint64_t v59 = (void *)(v8 + v9);
  unsigned int v11 = a2 - v8;
  unsigned int v12 = 1 << *(_DWORD *)(a1 + 256);
  uint64_t v13 = *(unsigned int *)(a1 + 44);
  if (a2 - v8 - v10 > v12 && *(_DWORD *)(a1 + 40) == 0) {
    unsigned int v10 = a2 - v8 - v12;
  }
  BOOL v15 = v11 >= v6;
  unsigned int v16 = v11 - v6;
  if (v15) {
    unsigned int v17 = v16;
  }
  else {
    unsigned int v17 = 0;
  }
  int v18 = 1 << *(_DWORD *)(a1 + 268);
  uint64_t v19 = *(void *)(a1 + 248);
  int v20 = *(_DWORD *)(a1 + 300);
  uint64_t v21 = *(void *)(a1 + 112);
  int v22 = ~(-1 << v5);
  int v23 = 64 - *(_DWORD *)(a1 + 264);
  if (v13 <= v11) {
    uint64_t v24 = v11;
  }
  else {
    uint64_t v24 = v13;
  }
  do
  {
    if (v24 == v13) {
      break;
    }
    unint64_t v25 = (0xCF1BBCDCBF9B0000 * *(void *)(v8 + v13)) >> v23;
    *(_DWORD *)(v4 + 4 * (v13 & v22)) = *(_DWORD *)(v21 + 4 * v25);
    *(_DWORD *)(v21 + 4 * v25) = v13++;
  }
  while (!v20);
  uint64_t v26 = *a2;
  *(_DWORD *)(a1 + 44) = v11;
  unsigned int v27 = *(_DWORD *)(v21 + 4 * ((0xCF1BBCDCBF9B0000 * v26) >> v23));
  if (v27 < v10)
  {
    unint64_t v28 = 3;
    goto LABEL_16;
  }
  unint64_t v43 = a3 - 7;
  uint64_t v44 = a2 + 1;
  uint64_t v45 = v8 + 8;
  unint64_t v28 = 3;
  while (1)
  {
    uint64_t v46 = v27;
    unint64_t v47 = (void *)(v8 + v27);
    if (*(_DWORD *)((char *)v47 + v28 - 3) == *(_DWORD *)((char *)a2 + v28 - 3)) {
      break;
    }
LABEL_48:
    if (v46 > v17)
    {
      if (--v18)
      {
        unsigned int v27 = *(_DWORD *)(v4 + 4 * (v46 & v7));
        if (v27 >= v10) {
          continue;
        }
      }
    }
    goto LABEL_16;
  }
  if (v43 <= (unint64_t)a2)
  {
    uint64_t v50 = a2;
  }
  else
  {
    unint64_t v48 = *a2 ^ *v47;
    if (v48)
    {
      unint64_t v49 = __clz(__rbit64(v48)) >> 3;
      goto LABEL_46;
    }
    uint64_t v51 = 0;
    while (1)
    {
      uint64_t v50 = &v44[v51];
      if ((unint64_t)&v44[v51] >= v43) {
        break;
      }
      uint64_t v52 = *(void *)(v45 + v46 + v51 * 8);
      ++v51;
      unint64_t v53 = *v50 ^ v52;
      if (v53)
      {
        unint64_t v49 = v51 * 8 + (__clz(__rbit64(v53)) >> 3);
        goto LABEL_46;
      }
    }
    unint64_t v47 = (void *)(v45 + v46 + v51 * 8);
  }
  if ((unint64_t)v50 < a3 - 3 && *(_DWORD *)v47 == *(_DWORD *)v50)
  {
    uint64_t v50 = (void *)((char *)v50 + 4);
    unint64_t v47 = (void *)((char *)v47 + 4);
  }
  if ((unint64_t)v50 < a3 - 1 && *(unsigned __int16 *)v47 == *(unsigned __int16 *)v50)
  {
    uint64_t v50 = (void *)((char *)v50 + 2);
    unint64_t v47 = (void *)((char *)v47 + 2);
  }
  if ((unint64_t)v50 < a3 && *(unsigned __int8 *)v47 == *(unsigned __int8 *)v50) {
    uint64_t v50 = (void *)((char *)v50 + 1);
  }
  unint64_t v49 = (char *)v50 - (char *)a2;
LABEL_46:
  if (v49 <= v28) {
    goto LABEL_48;
  }
  *a4 = v11 + 3 - v46;
  unint64_t v28 = v49;
  if ((void *)((char *)a2 + v49) != (void *)a3) {
    goto LABEL_48;
  }
  unint64_t v28 = v49;
LABEL_16:
  unsigned int v29 = 1 << *(_DWORD *)(v19 + 260);
  uint64_t v30 = *(void *)(v19 + 8);
  unsigned int v58 = *(char **)v19;
  unsigned int v31 = *(void *)v19 - v30;
  if (v31 >= v29) {
    unsigned int v32 = v31 - v29;
  }
  else {
    unsigned int v32 = 0;
  }
  if (v18)
  {
    unsigned int v33 = *(_DWORD *)(v19 + 24);
    unsigned int v34 = *(_DWORD *)(*(void *)(v19 + 112) + 4 * ((0xCF1BBCDCBF9B0000 * v26) >> -*(unsigned char *)(v19 + 264)));
    if (v34 >= v33)
    {
      uint64_t v35 = *(void *)(v19 + 128);
      unsigned int v36 = v29 - 1;
      int v37 = *(_DWORD *)a2;
      unint64_t v57 = (void *)((char *)a2 + 4);
      int v54 = v11 - v9 + v31 + 3;
      int v38 = v18 - 1;
      do
      {
        uint64_t v39 = v30 + v34;
        if (*(_DWORD *)v39 == v37)
        {
          unint64_t v40 = (void *)a3;
          unint64_t v41 = sub_1DD2A6010(v57, (char *)(v39 + 4), a3, v58, v59);
          a3 = (unint64_t)v40;
          if (v41 + 4 > v28)
          {
            *a4 = v54 - v34;
            unint64_t v28 = v41 + 4;
            if ((void *)((char *)a2 + v41 + 4) == v40) {
              break;
            }
          }
        }
        if (v34 <= v32) {
          break;
        }
        BOOL v15 = v38-- != 0;
        if (!v15) {
          break;
        }
        unsigned int v34 = *(_DWORD *)(v35 + 4 * (v34 & v36));
      }
      while (v34 >= v33);
    }
  }
  return v28;
}

unint64_t sub_1DD2C5398(uint64_t a1, uint64_t *a2, unint64_t a3, unsigned int *a4)
{
  if (*(void *)(a1 + 8) + (unint64_t)*(unsigned int *)(a1 + 44) > (unint64_t)a2) {
    return 0;
  }
  sub_1DD2CE248(a1, (int)a2, 4);
  return sub_1DD2CE388(a1, a2, a3, a4, 4, 2);
}

unint64_t sub_1DD2C5424(uint64_t a1, uint64_t *a2, unint64_t a3, unsigned int *a4)
{
  if (*(void *)(a1 + 8) + (unint64_t)*(unsigned int *)(a1 + 44) > (unint64_t)a2) {
    return 0;
  }
  sub_1DD2CE248(a1, (int)a2, 5);
  return sub_1DD2CE388(a1, a2, a3, a4, 5, 2);
}

unint64_t sub_1DD2C54B0(uint64_t a1, uint64_t *a2, unint64_t a3, unsigned int *a4)
{
  if (*(void *)(a1 + 8) + (unint64_t)*(unsigned int *)(a1 + 44) > (unint64_t)a2) {
    return 0;
  }
  sub_1DD2CE248(a1, (int)a2, 6);
  return sub_1DD2CE388(a1, a2, a3, a4, 6, 2);
}

unint64_t sub_1DD2C553C(uint64_t a1, void *a2, unint64_t a3, void *a4)
{
  uint64_t v132 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 112);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 8);
  unsigned int v8 = a2 - v7;
  int v9 = *(_DWORD *)(a1 + 256);
  uint64_t v10 = *(unsigned int *)(a1 + 24);
  if ((int)a2 - (int)v7 - *(_DWORD *)(a1 + 28) > (1 << v9) && *(_DWORD *)(a1 + 40) == 0) {
    unsigned int v12 = a2 - v7 - (1 << v9);
  }
  else {
    unsigned int v12 = *(_DWORD *)(a1 + 28);
  }
  unsigned int v13 = *(_DWORD *)(a1 + 268);
  if (v13 >= 4) {
    LOBYTE(v13) = 4;
  }
  uint64_t v14 = *(void *)(a1 + 96);
  int v15 = 1 << v13;
  uint64_t v16 = *(void *)(a1 + 248);
  unsigned int v17 = -1640531535 * *(_DWORD *)a2;
  unsigned int v18 = v17 >> (24 - *(_DWORD *)(v16 + 52));
  uint64_t v19 = (v18 >> 4) & 0xFFFFFF0;
  _X15 = (int8x16_t *)(*(void *)(v16 + 56) + v19);
  _X11 = *(void *)(v16 + 112) + 4 * v19;
  __asm
  {
    PRFM            #0, [X11]
    PRFM            #0, [X15]
  }
  if (*(_DWORD *)(a1 + 300))
  {
    unsigned int v27 = (v17 ^ v14) >> (24 - *(_DWORD *)(a1 + 52));
    *(_DWORD *)(a1 + 44) = v8;
  }
  else
  {
    uint64_t v28 = a1 + 64;
    unint64_t v29 = *(unsigned int *)(a1 + 44);
    uint64_t v125 = *(unsigned int *)(a1 + 24);
    unint64_t v127 = a4;
    unint64_t v124 = a3;
    int v129 = *(_DWORD *)(a1 + 52);
    uint64_t v30 = *(void *)(a1 + 56);
    uint64_t v31 = *(void *)(a1 + 112);
    if (v8 - v29 >= 0x181)
    {
      if (v29 <= 0xFFFFFF9F)
      {
        unint64_t v99 = v29 + 96;
        do
        {
          unsigned int v100 = ((-1640531535 * *(_DWORD *)(v7 + 8 + v29)) ^ *(_DWORD *)(a1 + 96)) >> (24 - v129);
          uint64_t v101 = (v100 >> 4) & 0xFFFFFF0;
          _X25 = v5 + 4 * v101;
          __asm { PRFM            #0, [X25] }
          _X24 = v6 + v101;
          __asm { PRFM            #0, [X24] }
          unint64_t v106 = *(unsigned int *)(v28 + 4 * (v29 & 7));
          *(_DWORD *)(v28 + 4 * (v29 & 7)) = v100;
          uint64_t v107 = (v106 >> 4) & 0xFFFFFF0;
          uint64_t v108 = v5 + 4 * v107;
          uint64_t v109 = (unsigned char *)(v6 + v107);
          if (((*v109 - 1) & 0xF) != 0) {
            uint64_t v110 = 0;
          }
          else {
            uint64_t v110 = 15;
          }
          uint64_t v111 = v110 + ((*v109 - 1) & 0xF);
          *uint64_t v109 = v111;
          v109[v111] = v106;
          *(_DWORD *)(v108 + 4 * v111) = v29++;
        }
        while (v29 < v99);
        uint64_t v31 = *(void *)(a1 + 112);
        uint64_t v30 = *(void *)(a1 + 56);
      }
      uint64_t v112 = v8 - 32;
      LODWORD(v29) = v8 - 32;
      int v113 = a2 + 1 - (v7 + v112);
      if ((v113 + 1) < 8) {
        int v114 = v113 + 1;
      }
      else {
        int v114 = 8;
      }
      if ((unint64_t)a2 + 1 >= v7 + v112) {
        int v115 = v114;
      }
      else {
        int v115 = 0;
      }
      if (v112 < v115 + (int)v112)
      {
        unsigned int v116 = *(_DWORD *)(a1 + 96);
        int v117 = 24 - *(_DWORD *)(a1 + 52);
        do
        {
          unsigned int v118 = ((-1640531535 * *(_DWORD *)(v7 + v112)) ^ v116) >> v117;
          uint64_t v119 = (v118 >> 4) & 0xFFFFFF0;
          _X27 = v31 + 4 * v119;
          __asm { PRFM            #0, [X27] }
          _X26 = v30 + v119;
          __asm { PRFM            #0, [X26] }
          *(_DWORD *)(a1 + 4 * (v112++ & 7) + 64) = v118;
          --v115;
        }
        while (v115);
      }
    }
    if (v29 < v8)
    {
      uint64_t v32 = *(void *)(a1 + 8) + 8;
      int v33 = 24 - *(_DWORD *)(a1 + 52);
      unint64_t v29 = v29;
      do
      {
        unsigned int v34 = ((-1640531535 * *(_DWORD *)(v32 + v29)) ^ *(_DWORD *)(a1 + 96)) >> v33;
        uint64_t v35 = (v34 >> 4) & 0xFFFFFF0;
        _X27 = v31 + 4 * v35;
        __asm { PRFM            #0, [X27] }
        _X26 = v30 + v35;
        __asm { PRFM            #0, [X26] }
        unint64_t v40 = *(unsigned int *)(v28 + 4 * (v29 & 7));
        *(_DWORD *)(v28 + 4 * (v29 & 7)) = v34;
        uint64_t v41 = (v40 >> 4) & 0xFFFFFF0;
        uint64_t v42 = v31 + 4 * v41;
        unint64_t v43 = (unsigned char *)(v30 + v41);
        if (((*v43 - 1) & 0xF) != 0) {
          uint64_t v44 = 0;
        }
        else {
          uint64_t v44 = 15;
        }
        uint64_t v45 = v44 + ((*v43 - 1) & 0xF);
        *unint64_t v43 = v45;
        v43[v45] = v40;
        *(_DWORD *)(v42 + 4 * v45) = v29++;
      }
      while (v29 < (a2 - v7));
    }
    *(_DWORD *)(a1 + 44) = v8;
    unsigned int v46 = ((-1640531535 * *(_DWORD *)(v7 + v8 + 8)) ^ v14) >> (24 - v129);
    uint64_t v47 = (v46 >> 4) & 0xFFFFFF0;
    _X4 = v5 + 4 * v47;
    __asm { PRFM            #0, [X4] }
    _X2 = v6 + v47;
    __asm { PRFM            #0, [X2] }
    unsigned int v27 = *(_DWORD *)(v28 + 4 * (v8 & 7));
    *(_DWORD *)(v28 + 4 * (v8 & 7)) = v46;
    uint64_t v10 = v125;
    a4 = v127;
    a3 = v124;
  }
  *(_DWORD *)(a1 + 104) += v27;
  uint64_t v52 = (v27 >> 4) & 0xFFFFFF0;
  uint64_t v53 = v5 + 4 * v52;
  int v54 = (int8x16_t *)(v6 + v52);
  char v55 = (char)*v54;
  unint64_t v56 = __ROR8__(vshrn_n_s16((int16x8_t)vceqq_s8(*v54, vdupq_n_s8(v27)), 4uLL), 4 * v54->i8[0]) & 0x8888888888888888;
  if (v56)
  {
    uint64_t v57 = 0;
    int v58 = (4 * v54->i8[0]);
    do
    {
      unsigned int v59 = ((__clz(__rbit64(v56)) + v58) >> 2) & 0xF;
      if (v59)
      {
        uint64_t v60 = *(unsigned int *)(v53 + 4 * v59);
        if (v60 < v12) {
          break;
        }
        _X20 = v7 + v60;
        __asm { PRFM            #0, [X20] }
        v131[v57++] = v60;
        --v15;
      }
      v56 &= v56 - 1;
    }
    while (v56 && v15);
  }
  else
  {
    uint64_t v57 = 0;
  }
  uint64_t v63 = (v55 - 1) & 0xF;
  if (((v55 - 1) & 0xF) != 0) {
    uint64_t v64 = 0;
  }
  else {
    uint64_t v64 = 15;
  }
  uint64_t v65 = v64 + v63;
  v54->i8[0] = v65;
  v54->i8[v65] = v27;
  int v66 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v66 + 1;
  *(_DWORD *)(v53 + 4 * v65) = v66;
  if (v57)
  {
    uint64_t v67 = 0;
    unint64_t v68 = a3 - 7;
    unint64_t v69 = a2 + 1;
    uint64_t v70 = v7 + 8;
    unint64_t v71 = 3;
    while (1)
    {
      uint64_t v72 = v131[v67];
      uint64_t v73 = (void *)(v7 + v72);
      if (*(_DWORD *)(v7 + v72 + v71 - 3) != *(_DWORD *)((char *)a2 + v71 - 3)) {
        goto LABEL_50;
      }
      if (v68 <= (unint64_t)a2)
      {
        unint64_t v76 = a2;
      }
      else
      {
        unint64_t v74 = *a2 ^ *v73;
        if (v74)
        {
          unint64_t v75 = __clz(__rbit64(v74)) >> 3;
          goto LABEL_48;
        }
        while (1)
        {
          unint64_t v76 = (void *)((char *)v69 + v74);
          if ((unint64_t)v69 + v74 >= v68) {
            break;
          }
          uint64_t v77 = *(void *)(v70 + v72 + v74);
          v74 += 8;
          unint64_t v78 = *v76 ^ v77;
          if (v78)
          {
            unint64_t v75 = v74 + (__clz(__rbit64(v78)) >> 3);
            goto LABEL_48;
          }
        }
        uint64_t v73 = (void *)(v70 + v72 + v74);
      }
      if ((unint64_t)v76 < a3 - 3 && *(_DWORD *)v73 == *(_DWORD *)v76)
      {
        unint64_t v76 = (void *)((char *)v76 + 4);
        uint64_t v73 = (void *)((char *)v73 + 4);
      }
      if ((unint64_t)v76 < a3 - 1 && *(unsigned __int16 *)v73 == *(unsigned __int16 *)v76)
      {
        unint64_t v76 = (void *)((char *)v76 + 2);
        uint64_t v73 = (void *)((char *)v73 + 2);
      }
      if ((unint64_t)v76 < a3 && *(unsigned __int8 *)v73 == *(unsigned __int8 *)v76) {
        unint64_t v76 = (void *)((char *)v76 + 1);
      }
      unint64_t v75 = (char *)v76 - (char *)a2;
LABEL_48:
      if (v75 > v71)
      {
        *a4 = v8 + 3 - v72;
        unint64_t v71 = v75;
        if ((void *)((char *)a2 + v75) == (void *)a3) {
          goto LABEL_57;
        }
      }
LABEL_50:
      ++v67;
      unint64_t v75 = v71;
      if (v67 == v57) {
        goto LABEL_57;
      }
    }
  }
  unint64_t v75 = 3;
LABEL_57:
  char v79 = 4 * _X15->i8[0];
  unint64_t v80 = __ROR8__(vshrn_n_s16((int16x8_t)vceqq_s8(*_X15, vdupq_n_s8(v18)), 4uLL), v79) & 0x8888888888888888;
  if (v80) {
    BOOL v81 = v15 == 0;
  }
  else {
    BOOL v81 = 1;
  }
  if (!v81)
  {
    uint64_t v82 = 0;
    int v130 = (void *)(v7 + v10);
    unsigned int v83 = *(_DWORD *)(v16 + 24);
    unint64_t v84 = *(char **)v16;
    uint64_t v85 = *(void *)(v16 + 8);
    int v86 = *(void *)v16 - v85;
    do
    {
      unsigned int v87 = ((__clz(__rbit64(v80)) + (v79 & 0xFC)) >> 2) & 0xF;
      if (v87)
      {
        uint64_t v88 = *(unsigned int *)(_X11 + 4 * v87);
        if (v88 < v83) {
          break;
        }
        _X0 = v85 + v88;
        __asm { PRFM            #0, [X0] }
        v131[v82++] = v88;
        --v15;
      }
      v80 &= v80 - 1;
    }
    while (v80 && v15);
    if (v82)
    {
      uint64_t v128 = a4;
      int v91 = *(_DWORD *)a2;
      int v126 = v8 - v10 + v86 + 3;
      unint64_t v92 = v131;
      do
      {
        unsigned int v94 = *v92++;
        unsigned int v93 = v94;
        uint64_t v95 = v85 + v94;
        if (*(_DWORD *)v95 == v91)
        {
          unint64_t v96 = a3;
          unint64_t v97 = sub_1DD2A6010((void *)((char *)a2 + 4), (char *)(v95 + 4), a3, v84, v130);
          a3 = v96;
          if (v97 + 4 > v75)
          {
            *uint64_t v128 = v126 - v93;
            unint64_t v75 = v97 + 4;
            if ((void *)((char *)a2 + v97 + 4) == (void *)v96) {
              break;
            }
          }
        }
        --v82;
      }
      while (v82);
    }
  }
  return v75;
}

unint64_t sub_1DD2C5BE0(uint64_t a1, void *a2, unint64_t a3, void *a4)
{
  uint64_t v139 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 112);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 8);
  unsigned int v8 = a2 - v7;
  int v9 = *(_DWORD *)(a1 + 256);
  uint64_t v10 = *(unsigned int *)(a1 + 24);
  if ((int)a2 - (int)v7 - *(_DWORD *)(a1 + 28) > (1 << v9) && *(_DWORD *)(a1 + 40) == 0) {
    unsigned int v12 = a2 - v7 - (1 << v9);
  }
  else {
    unsigned int v12 = *(_DWORD *)(a1 + 28);
  }
  unsigned int v13 = *(_DWORD *)(a1 + 268);
  if (v13 >= 5) {
    LOBYTE(v13) = 5;
  }
  uint64_t v14 = *(void *)(a1 + 96);
  int v15 = 1 << v13;
  uint64_t v16 = *(void *)(a1 + 248);
  unsigned int v17 = -1640531535 * *(_DWORD *)a2;
  unsigned int v18 = v17 >> (24 - *(_DWORD *)(v16 + 52));
  uint64_t v19 = (v18 >> 3) & 0x1FFFFFE0;
  _X15 = (const __int16 *)(*(void *)(v16 + 56) + v19);
  _X11 = *(void *)(v16 + 112) + 4 * v19;
  __asm
  {
    PRFM            #0, [X11]
    PRFM            #0, [X11,#0x40]
    PRFM            #0, [X15]
  }
  if (*(_DWORD *)(a1 + 300))
  {
    unsigned int v28 = (v17 ^ v14) >> (24 - *(_DWORD *)(a1 + 52));
    *(_DWORD *)(a1 + 44) = v8;
  }
  else
  {
    uint64_t v29 = a1 + 64;
    unint64_t v30 = *(unsigned int *)(a1 + 44);
    uint64_t v132 = *(unsigned int *)(a1 + 24);
    unint64_t v134 = a4;
    unint64_t v131 = a3;
    int v136 = *(_DWORD *)(a1 + 52);
    uint64_t v31 = *(void *)(a1 + 56);
    uint64_t v32 = *(void *)(a1 + 112);
    if (v8 - v30 >= 0x181)
    {
      if (v30 <= 0xFFFFFF9F)
      {
        unint64_t v104 = v30 + 96;
        do
        {
          unsigned int v105 = ((-1640531535 * *(_DWORD *)(v7 + 8 + v30)) ^ *(_DWORD *)(a1 + 96)) >> (24 - v136);
          uint64_t v106 = (v105 >> 3) & 0x1FFFFFE0;
          _X25 = v5 + 4 * v106;
          __asm
          {
            PRFM            #0, [X25]
            PRFM            #0, [X25,#0x40]
          }
          _X24 = v6 + v106;
          __asm { PRFM            #0, [X24] }
          unint64_t v112 = *(unsigned int *)(v29 + 4 * (v30 & 7));
          *(_DWORD *)(v29 + 4 * (v30 & 7)) = v105;
          uint64_t v113 = (v112 >> 3) & 0x1FFFFFE0;
          uint64_t v114 = v5 + 4 * v113;
          int v115 = (unsigned char *)(v6 + v113);
          if (((*v115 - 1) & 0x1F) != 0) {
            uint64_t v116 = 0;
          }
          else {
            uint64_t v116 = 31;
          }
          uint64_t v117 = v116 + ((*v115 - 1) & 0x1F);
          *int v115 = v117;
          v115[v117] = v112;
          *(_DWORD *)(v114 + 4 * v117) = v30++;
        }
        while (v30 < v104);
        uint64_t v32 = *(void *)(a1 + 112);
        uint64_t v31 = *(void *)(a1 + 56);
      }
      uint64_t v118 = v8 - 32;
      LODWORD(v30) = v8 - 32;
      int v119 = a2 + 1 - (v7 + v118);
      if ((v119 + 1) < 8) {
        int v120 = v119 + 1;
      }
      else {
        int v120 = 8;
      }
      if ((unint64_t)a2 + 1 >= v7 + v118) {
        int v121 = v120;
      }
      else {
        int v121 = 0;
      }
      if (v118 < v121 + (int)v118)
      {
        unsigned int v122 = *(_DWORD *)(a1 + 96);
        int v123 = 24 - *(_DWORD *)(a1 + 52);
        do
        {
          unsigned int v124 = ((-1640531535 * *(_DWORD *)(v7 + v118)) ^ v122) >> v123;
          uint64_t v125 = (v124 >> 3) & 0x1FFFFFE0;
          _X27 = v32 + 4 * v125;
          __asm
          {
            PRFM            #0, [X27]
            PRFM            #0, [X27,#0x40]
          }
          _X26 = v31 + v125;
          __asm { PRFM            #0, [X26] }
          *(_DWORD *)(a1 + 4 * (v118++ & 7) + 64) = v124;
          --v121;
        }
        while (v121);
      }
    }
    if (v30 < v8)
    {
      uint64_t v33 = *(void *)(a1 + 8) + 8;
      int v34 = 24 - *(_DWORD *)(a1 + 52);
      unint64_t v30 = v30;
      do
      {
        unsigned int v35 = ((-1640531535 * *(_DWORD *)(v33 + v30)) ^ *(_DWORD *)(a1 + 96)) >> v34;
        uint64_t v36 = (v35 >> 3) & 0x1FFFFFE0;
        _X27 = v32 + 4 * v36;
        __asm
        {
          PRFM            #0, [X27]
          PRFM            #0, [X27,#0x40]
        }
        _X26 = v31 + v36;
        __asm { PRFM            #0, [X26] }
        unint64_t v42 = *(unsigned int *)(v29 + 4 * (v30 & 7));
        *(_DWORD *)(v29 + 4 * (v30 & 7)) = v35;
        uint64_t v43 = (v42 >> 3) & 0x1FFFFFE0;
        uint64_t v44 = v32 + 4 * v43;
        uint64_t v45 = (unsigned char *)(v31 + v43);
        if (((*v45 - 1) & 0x1F) != 0) {
          uint64_t v46 = 0;
        }
        else {
          uint64_t v46 = 31;
        }
        uint64_t v47 = v46 + ((*v45 - 1) & 0x1F);
        unsigned char *v45 = v47;
        v45[v47] = v42;
        *(_DWORD *)(v44 + 4 * v47) = v30++;
      }
      while (v30 < (a2 - v7));
    }
    *(_DWORD *)(a1 + 44) = v8;
    unsigned int v48 = ((-1640531535 * *(_DWORD *)(v7 + v8 + 8)) ^ v14) >> (24 - v136);
    uint64_t v49 = (v48 >> 3) & 0x1FFFFFE0;
    _X4 = v5 + 4 * v49;
    __asm
    {
      PRFM            #0, [X4]
      PRFM            #0, [X4,#0x40]
    }
    _X2 = v6 + v49;
    __asm { PRFM            #0, [X2] }
    unsigned int v28 = *(_DWORD *)(v29 + 4 * (v8 & 7));
    *(_DWORD *)(v29 + 4 * (v8 & 7)) = v48;
    uint64_t v10 = v132;
    a4 = v134;
    a3 = v131;
  }
  *(_DWORD *)(a1 + 104) += v28;
  uint64_t v55 = (v28 >> 3) & 0x1FFFFFE0;
  uint64_t v56 = v5 + 4 * v55;
  uint64_t v57 = (__int16 *)(v6 + v55);
  int16x8x2_t v140 = vld2q_s16(v57);
  char v58 = *(unsigned char *)v57;
  int8x16_t v59 = vdupq_n_s8(v28);
  unint64_t v60 = __ROR8__(vsli_n_s8(vshrn_n_s16((int16x8_t)vceqq_s8(v59, (int8x16_t)v140.val[0]), 6uLL), vshrn_n_s16((int16x8_t)vceqq_s8(v59, (int8x16_t)v140.val[1]), 6uLL), 4uLL), 2 * *(unsigned char *)v57) & 0x5555555555555555;
  if (v60)
  {
    uint64_t v61 = 0;
    int v62 = (2 * *(unsigned char *)v57);
    do
    {
      unsigned int v63 = ((__clz(__rbit64(v60)) + v62) >> 1) & 0x1F;
      if (v63)
      {
        uint64_t v64 = *(unsigned int *)(v56 + 4 * v63);
        if (v64 < v12) {
          break;
        }
        _X20 = v7 + v64;
        __asm { PRFM            #0, [X20] }
        v138[v61++] = v64;
        --v15;
      }
      v60 &= v60 - 1;
    }
    while (v60 && v15);
  }
  else
  {
    uint64_t v61 = 0;
  }
  uint64_t v67 = (v58 - 1) & 0x1F;
  if (((v58 - 1) & 0x1F) != 0) {
    uint64_t v68 = 0;
  }
  else {
    uint64_t v68 = 31;
  }
  uint64_t v69 = v68 + v67;
  *(unsigned char *)uint64_t v57 = v69;
  *((unsigned char *)v57 + v69) = v28;
  int v70 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v70 + 1;
  *(_DWORD *)(v56 + 4 * v69) = v70;
  if (v61)
  {
    uint64_t v71 = 0;
    unint64_t v72 = a3 - 7;
    uint64_t v73 = a2 + 1;
    uint64_t v74 = v7 + 8;
    unint64_t v75 = 3;
    while (1)
    {
      uint64_t v76 = v138[v71];
      uint64_t v77 = (void *)(v7 + v76);
      if (*(_DWORD *)(v7 + v76 + v75 - 3) != *(_DWORD *)((char *)a2 + v75 - 3)) {
        goto LABEL_50;
      }
      if (v72 <= (unint64_t)a2)
      {
        unint64_t v80 = a2;
      }
      else
      {
        unint64_t v78 = *a2 ^ *v77;
        if (v78)
        {
          unint64_t v79 = __clz(__rbit64(v78)) >> 3;
          goto LABEL_48;
        }
        while (1)
        {
          unint64_t v80 = (void *)((char *)v73 + v78);
          if ((unint64_t)v73 + v78 >= v72) {
            break;
          }
          uint64_t v81 = *(void *)(v74 + v76 + v78);
          v78 += 8;
          unint64_t v82 = *v80 ^ v81;
          if (v82)
          {
            unint64_t v79 = v78 + (__clz(__rbit64(v82)) >> 3);
            goto LABEL_48;
          }
        }
        uint64_t v77 = (void *)(v74 + v76 + v78);
      }
      if ((unint64_t)v80 < a3 - 3 && *(_DWORD *)v77 == *(_DWORD *)v80)
      {
        unint64_t v80 = (void *)((char *)v80 + 4);
        uint64_t v77 = (void *)((char *)v77 + 4);
      }
      if ((unint64_t)v80 < a3 - 1 && *(unsigned __int16 *)v77 == *(unsigned __int16 *)v80)
      {
        unint64_t v80 = (void *)((char *)v80 + 2);
        uint64_t v77 = (void *)((char *)v77 + 2);
      }
      if ((unint64_t)v80 < a3 && *(unsigned __int8 *)v77 == *(unsigned __int8 *)v80) {
        unint64_t v80 = (void *)((char *)v80 + 1);
      }
      unint64_t v79 = (char *)v80 - (char *)a2;
LABEL_48:
      if (v79 > v75)
      {
        *a4 = v8 + 3 - v76;
        unint64_t v75 = v79;
        if ((void *)((char *)a2 + v79) == (void *)a3) {
          goto LABEL_57;
        }
      }
LABEL_50:
      ++v71;
      unint64_t v79 = v75;
      if (v71 == v61) {
        goto LABEL_57;
      }
    }
  }
  unint64_t v79 = 3;
LABEL_57:
  char v83 = 2 * *(unsigned char *)_X15;
  int16x8x2_t v141 = vld2q_s16(_X15);
  int8x16_t v84 = vdupq_n_s8(v18);
  unint64_t v85 = __ROR8__(vsli_n_s8(vshrn_n_s16((int16x8_t)vceqq_s8(v84, (int8x16_t)v141.val[0]), 6uLL), vshrn_n_s16((int16x8_t)vceqq_s8(v84, (int8x16_t)v141.val[1]), 6uLL), 4uLL), v83) & 0x5555555555555555;
  if (v85) {
    BOOL v86 = v15 == 0;
  }
  else {
    BOOL v86 = 1;
  }
  if (!v86)
  {
    uint64_t v87 = 0;
    uint64_t v137 = (void *)(v7 + v10);
    unsigned int v88 = *(_DWORD *)(v16 + 24);
    unint64_t v89 = *(char **)v16;
    uint64_t v90 = *(void *)(v16 + 8);
    int v91 = *(void *)v16 - v90;
    do
    {
      unsigned int v92 = ((__clz(__rbit64(v85)) + (v83 & 0xFE)) >> 1) & 0x1F;
      if (v92)
      {
        uint64_t v93 = *(unsigned int *)(_X11 + 4 * v92);
        if (v93 < v88) {
          break;
        }
        _X0 = v90 + v93;
        __asm { PRFM            #0, [X0] }
        v138[v87++] = v93;
        --v15;
      }
      v85 &= v85 - 1;
    }
    while (v85 && v15);
    if (v87)
    {
      unsigned int v135 = a4;
      int v96 = *(_DWORD *)a2;
      int v133 = v8 - v10 + v91 + 3;
      unint64_t v97 = v138;
      do
      {
        unsigned int v99 = *v97++;
        unsigned int v98 = v99;
        uint64_t v100 = v90 + v99;
        if (*(_DWORD *)v100 == v96)
        {
          unint64_t v101 = a3;
          unint64_t v102 = sub_1DD2A6010((void *)((char *)a2 + 4), (char *)(v100 + 4), a3, v89, v137);
          a3 = v101;
          if (v102 + 4 > v79)
          {
            void *v135 = v133 - v98;
            unint64_t v79 = v102 + 4;
            if ((void *)((char *)a2 + v102 + 4) == (void *)v101) {
              break;
            }
          }
        }
        --v87;
      }
      while (v87);
    }
  }
  return v79;
}

unint64_t sub_1DD2C62AC(uint64_t a1, void *a2, unint64_t a3, void *a4)
{
  uint64_t v145 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 112);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 8);
  unsigned int v8 = a2 - v7;
  int v9 = *(_DWORD *)(a1 + 256);
  uint64_t v10 = *(unsigned int *)(a1 + 24);
  if ((int)a2 - (int)v7 - *(_DWORD *)(a1 + 28) > (1 << v9) && *(_DWORD *)(a1 + 40) == 0) {
    unsigned int v12 = a2 - v7 - (1 << v9);
  }
  else {
    unsigned int v12 = *(_DWORD *)(a1 + 28);
  }
  unsigned int v13 = *(_DWORD *)(a1 + 268);
  if (v13 >= 6) {
    LOBYTE(v13) = 6;
  }
  uint64_t v14 = *(void *)(a1 + 96);
  int v15 = 1 << v13;
  uint64_t v16 = *(void *)(a1 + 248);
  unsigned int v17 = -1640531535 * *(_DWORD *)a2;
  unsigned int v18 = v17 >> (24 - *(_DWORD *)(v16 + 52));
  uint64_t v19 = (v18 >> 2) & 0x3FFFFFC0;
  _X14 = (const char *)(*(void *)(v16 + 56) + v19);
  _X11 = *(void *)(v16 + 112) + 4 * v19;
  __asm
  {
    PRFM            #0, [X11]
    PRFM            #0, [X11,#0x40]
    PRFM            #0, [X14]
    PRFM            #0, [X14,#0x20]
  }
  if (*(_DWORD *)(a1 + 300))
  {
    unsigned int v29 = (v17 ^ v14) >> (24 - *(_DWORD *)(a1 + 52));
    *(_DWORD *)(a1 + 44) = v8;
  }
  else
  {
    uint64_t v30 = a1 + 64;
    unint64_t v31 = *(unsigned int *)(a1 + 44);
    uint64_t v138 = *(unsigned int *)(a1 + 24);
    int16x8x2_t v140 = a4;
    unint64_t v137 = a3;
    int v142 = *(_DWORD *)(a1 + 52);
    uint64_t v32 = *(void *)(a1 + 56);
    uint64_t v33 = *(void *)(a1 + 112);
    if (v8 - v31 >= 0x181)
    {
      if (v31 <= 0xFFFFFF9F)
      {
        unint64_t v108 = v31 + 96;
        do
        {
          unsigned int v109 = ((-1640531535 * *(_DWORD *)(v7 + 8 + v31)) ^ *(_DWORD *)(a1 + 96)) >> (24 - v142);
          uint64_t v110 = (v109 >> 2) & 0x3FFFFFC0;
          _X25 = v5 + 4 * v110;
          __asm
          {
            PRFM            #0, [X25]
            PRFM            #0, [X25,#0x40]
          }
          _X24 = v6 + v110;
          __asm
          {
            PRFM            #0, [X24]
            PRFM            #0, [X24,#0x20]
          }
          unint64_t v117 = *(unsigned int *)(v30 + 4 * (v31 & 7));
          *(_DWORD *)(v30 + 4 * (v31 & 7)) = v109;
          uint64_t v118 = (v117 >> 2) & 0x3FFFFFC0;
          uint64_t v119 = v5 + 4 * v118;
          int v120 = (unsigned char *)(v6 + v118);
          if (((*v120 - 1) & 0x3F) != 0) {
            uint64_t v121 = 0;
          }
          else {
            uint64_t v121 = 63;
          }
          uint64_t v122 = v121 + ((*v120 - 1) & 0x3F);
          *int v120 = v122;
          v120[v122] = v117;
          *(_DWORD *)(v119 + 4 * v122) = v31++;
        }
        while (v31 < v108);
        uint64_t v33 = *(void *)(a1 + 112);
        uint64_t v32 = *(void *)(a1 + 56);
      }
      uint64_t v123 = v8 - 32;
      LODWORD(v31) = v8 - 32;
      int v124 = a2 + 1 - (v7 + v123);
      if ((v124 + 1) < 8) {
        int v125 = v124 + 1;
      }
      else {
        int v125 = 8;
      }
      if ((unint64_t)a2 + 1 >= v7 + v123) {
        int v126 = v125;
      }
      else {
        int v126 = 0;
      }
      if (v123 < v126 + (int)v123)
      {
        unsigned int v127 = *(_DWORD *)(a1 + 96);
        int v128 = 24 - *(_DWORD *)(a1 + 52);
        do
        {
          unsigned int v129 = ((-1640531535 * *(_DWORD *)(v7 + v123)) ^ v127) >> v128;
          uint64_t v130 = (v129 >> 2) & 0x3FFFFFC0;
          _X27 = v33 + 4 * v130;
          __asm
          {
            PRFM            #0, [X27]
            PRFM            #0, [X27,#0x40]
          }
          _X26 = v32 + v130;
          __asm
          {
            PRFM            #0, [X26]
            PRFM            #0, [X26,#0x20]
          }
          *(_DWORD *)(a1 + 4 * (v123++ & 7) + 64) = v129;
          --v126;
        }
        while (v126);
      }
    }
    if (v31 < v8)
    {
      uint64_t v34 = *(void *)(a1 + 8) + 8;
      int v35 = 24 - *(_DWORD *)(a1 + 52);
      unint64_t v31 = v31;
      do
      {
        unsigned int v36 = ((-1640531535 * *(_DWORD *)(v34 + v31)) ^ *(_DWORD *)(a1 + 96)) >> v35;
        uint64_t v37 = (v36 >> 2) & 0x3FFFFFC0;
        _X27 = v33 + 4 * v37;
        __asm
        {
          PRFM            #0, [X27]
          PRFM            #0, [X27,#0x40]
        }
        _X26 = v32 + v37;
        __asm
        {
          PRFM            #0, [X26]
          PRFM            #0, [X26,#0x20]
        }
        unint64_t v44 = *(unsigned int *)(v30 + 4 * (v31 & 7));
        *(_DWORD *)(v30 + 4 * (v31 & 7)) = v36;
        uint64_t v45 = (v44 >> 2) & 0x3FFFFFC0;
        uint64_t v46 = v33 + 4 * v45;
        uint64_t v47 = (unsigned char *)(v32 + v45);
        if (((*v47 - 1) & 0x3F) != 0) {
          uint64_t v48 = 0;
        }
        else {
          uint64_t v48 = 63;
        }
        uint64_t v49 = v48 + ((*v47 - 1) & 0x3F);
        *uint64_t v47 = v49;
        v47[v49] = v44;
        *(_DWORD *)(v46 + 4 * v49) = v31++;
      }
      while (v31 < (a2 - v7));
    }
    *(_DWORD *)(a1 + 44) = v8;
    unsigned int v50 = ((-1640531535 * *(_DWORD *)(v7 + v8 + 8)) ^ v14) >> (24 - v142);
    uint64_t v51 = (v50 >> 2) & 0x3FFFFFC0;
    _X4 = v5 + 4 * v51;
    __asm
    {
      PRFM            #0, [X4]
      PRFM            #0, [X4,#0x40]
    }
    _X2 = v6 + v51;
    __asm
    {
      PRFM            #0, [X2]
      PRFM            #0, [X2,#0x20]
    }
    unsigned int v29 = *(_DWORD *)(v30 + 4 * (v8 & 7));
    *(_DWORD *)(v30 + 4 * (v8 & 7)) = v50;
    uint64_t v10 = v138;
    a4 = v140;
    a3 = v137;
  }
  *(_DWORD *)(a1 + 104) += v29;
  uint64_t v58 = (v29 >> 2) & 0x3FFFFFC0;
  uint64_t v59 = v5 + 4 * v58;
  unint64_t v60 = (char *)(v6 + v58);
  char v61 = *v60;
  int8x16x4_t v146 = vld4q_s8(v60);
  int8x16_t v62 = vdupq_n_s8(v29);
  v146.val[0] = vsriq_n_s8(vsriq_n_s8(vceqq_s8(v146.val[3], v62), vceqq_s8(v146.val[2], v62), 1uLL), vsriq_n_s8(vceqq_s8(v146.val[1], v62), vceqq_s8(v146.val[0], v62), 1uLL), 2uLL);
  int8x8_t v63 = vshrn_n_s16((int16x8_t)vsriq_n_s8(v146.val[0], v146.val[0], 4uLL), 4uLL);
  uint64_t v64 = 0;
  if (v63)
  {
    unint64_t v65 = __ROR8__(*(void *)&v63, v61);
    do
    {
      unsigned int v66 = (__clz(__rbit64(v65)) + v61) & 0x3F;
      if (v66)
      {
        uint64_t v67 = *(unsigned int *)(v59 + 4 * v66);
        if (v67 < v12) {
          break;
        }
        _X19 = v7 + v67;
        __asm { PRFM            #0, [X19] }
        v144[v64++] = v67;
        --v15;
      }
      v65 &= v65 - 1;
    }
    while (v65 && v15);
  }
  uint64_t v70 = (v61 - 1) & 0x3F;
  if (((v61 - 1) & 0x3F) != 0) {
    uint64_t v71 = 0;
  }
  else {
    uint64_t v71 = 63;
  }
  uint64_t v72 = v71 + v70;
  *unint64_t v60 = v72;
  v60[v72] = v29;
  int v73 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v73 + 1;
  *(_DWORD *)(v59 + 4 * v72) = v73;
  if (v64)
  {
    uint64_t v74 = 0;
    unint64_t v75 = a3 - 7;
    uint64_t v76 = a2 + 1;
    uint64_t v77 = v7 + 8;
    unint64_t v78 = 3;
    while (1)
    {
      uint64_t v79 = v144[v74];
      unint64_t v80 = (void *)(v7 + v79);
      if (*(_DWORD *)(v7 + v79 + v78 - 3) != *(_DWORD *)((char *)a2 + v78 - 3)) {
        goto LABEL_48;
      }
      if (v75 <= (unint64_t)a2)
      {
        char v83 = a2;
      }
      else
      {
        unint64_t v81 = *a2 ^ *v80;
        if (v81)
        {
          unint64_t v82 = __clz(__rbit64(v81)) >> 3;
          goto LABEL_46;
        }
        while (1)
        {
          char v83 = (void *)((char *)v76 + v81);
          if ((unint64_t)v76 + v81 >= v75) {
            break;
          }
          uint64_t v84 = *(void *)(v77 + v79 + v81);
          v81 += 8;
          unint64_t v85 = *v83 ^ v84;
          if (v85)
          {
            unint64_t v82 = v81 + (__clz(__rbit64(v85)) >> 3);
            goto LABEL_46;
          }
        }
        unint64_t v80 = (void *)(v77 + v79 + v81);
      }
      if ((unint64_t)v83 < a3 - 3 && *(_DWORD *)v80 == *(_DWORD *)v83)
      {
        char v83 = (void *)((char *)v83 + 4);
        unint64_t v80 = (void *)((char *)v80 + 4);
      }
      if ((unint64_t)v83 < a3 - 1 && *(unsigned __int16 *)v80 == *(unsigned __int16 *)v83)
      {
        char v83 = (void *)((char *)v83 + 2);
        unint64_t v80 = (void *)((char *)v80 + 2);
      }
      if ((unint64_t)v83 < a3 && *(unsigned __int8 *)v80 == *(unsigned __int8 *)v83) {
        char v83 = (void *)((char *)v83 + 1);
      }
      unint64_t v82 = (char *)v83 - (char *)a2;
LABEL_46:
      if (v82 > v78)
      {
        *a4 = v8 + 3 - v79;
        unint64_t v78 = v82;
        if ((void *)((char *)a2 + v82) == (void *)a3) {
          goto LABEL_55;
        }
      }
LABEL_48:
      ++v74;
      unint64_t v82 = v78;
      if (v74 == v64) {
        goto LABEL_55;
      }
    }
  }
  unint64_t v82 = 3;
LABEL_55:
  int8x16x4_t v147 = vld4q_s8(_X14);
  int8x16_t v86 = vdupq_n_s8(v18);
  v147.val[0] = vsriq_n_s8(vsriq_n_s8(vceqq_s8(v147.val[3], v86), vceqq_s8(v147.val[2], v86), 1uLL), vsriq_n_s8(vceqq_s8(v147.val[1], v86), vceqq_s8(v147.val[0], v86), 1uLL), 2uLL);
  int8x8_t v87 = vshrn_n_s16((int16x8_t)vsriq_n_s8(v147.val[0], v147.val[0], 4uLL), 4uLL);
  if (v87) {
    BOOL v88 = v15 == 0;
  }
  else {
    BOOL v88 = 1;
  }
  if (!v88)
  {
    uint64_t v89 = 0;
    unsigned int v143 = (void *)(v7 + v10);
    unsigned int v90 = *(_DWORD *)(v16 + 24);
    int v91 = *(char **)v16;
    uint64_t v92 = *(void *)(v16 + 8);
    int v93 = *(void *)v16 - v92;
    char v94 = *_X14;
    unint64_t v95 = __ROR8__(*(void *)&v87, *_X14);
    do
    {
      unsigned int v96 = (__clz(__rbit64(v95)) + v94) & 0x3F;
      if (v96)
      {
        uint64_t v97 = *(unsigned int *)(_X11 + 4 * v96);
        if (v97 < v90) {
          break;
        }
        _X0 = v92 + v97;
        __asm { PRFM            #0, [X0] }
        v144[v89++] = v97;
        --v15;
      }
      v95 &= v95 - 1;
    }
    while (v95 && v15);
    if (v89)
    {
      int16x8x2_t v141 = a4;
      int v100 = *(_DWORD *)a2;
      int v139 = v8 - v10 + v93 + 3;
      unint64_t v101 = v144;
      do
      {
        unsigned int v103 = *v101++;
        unsigned int v102 = v103;
        uint64_t v104 = v92 + v103;
        if (*(_DWORD *)v104 == v100)
        {
          unint64_t v105 = a3;
          unint64_t v106 = sub_1DD2A6010((void *)((char *)a2 + 4), (char *)(v104 + 4), a3, v91, v143);
          a3 = v105;
          if (v106 + 4 > v82)
          {
            *int16x8x2_t v141 = v139 - v102;
            unint64_t v82 = v106 + 4;
            if ((void *)((char *)a2 + v106 + 4) == (void *)v105) {
              break;
            }
          }
        }
        --v89;
      }
      while (v89);
    }
  }
  return v82;
}

unint64_t sub_1DD2C698C(uint64_t a1, void *a2, unint64_t a3, void *a4)
{
  uint64_t v132 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 112);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 8);
  unsigned int v8 = a2 - v7;
  int v9 = *(_DWORD *)(a1 + 256);
  uint64_t v10 = *(unsigned int *)(a1 + 24);
  if ((int)a2 - (int)v7 - *(_DWORD *)(a1 + 28) > (1 << v9) && *(_DWORD *)(a1 + 40) == 0) {
    unsigned int v12 = a2 - v7 - (1 << v9);
  }
  else {
    unsigned int v12 = *(_DWORD *)(a1 + 28);
  }
  unsigned int v13 = *(_DWORD *)(a1 + 268);
  if (v13 >= 4) {
    LOBYTE(v13) = 4;
  }
  uint64_t v14 = *(void *)(a1 + 96);
  int v15 = 1 << v13;
  uint64_t v16 = *(void *)(a1 + 248);
  unint64_t v17 = 0xCF1BBCDCBB000000 * *a2;
  unint64_t v18 = v17 >> (56 - *(_DWORD *)(v16 + 52));
  uint64_t v19 = (v18 >> 4) & 0xFFFFFF0;
  _X15 = (int8x16_t *)(*(void *)(v16 + 56) + v19);
  _X11 = *(void *)(v16 + 112) + 4 * v19;
  __asm
  {
    PRFM            #0, [X11]
    PRFM            #0, [X15]
  }
  if (*(_DWORD *)(a1 + 300))
  {
    unint64_t v27 = (v17 ^ v14) >> (56 - *(_DWORD *)(a1 + 52));
    *(_DWORD *)(a1 + 44) = v8;
  }
  else
  {
    uint64_t v28 = a1 + 64;
    unint64_t v29 = *(unsigned int *)(a1 + 44);
    uint64_t v125 = *(unsigned int *)(a1 + 24);
    unsigned int v127 = a4;
    unint64_t v124 = a3;
    int v129 = *(_DWORD *)(a1 + 52);
    uint64_t v30 = *(void *)(a1 + 56);
    uint64_t v31 = *(void *)(a1 + 112);
    if (v8 - v29 >= 0x181)
    {
      if (v29 <= 0xFFFFFF9F)
      {
        unint64_t v99 = v29 + 96;
        do
        {
          unint64_t v100 = ((0xCF1BBCDCBB000000 * *(void *)(v7 + 8 + v29)) ^ *(void *)(a1 + 96)) >> (56
                                                                                               - v129);
          uint64_t v101 = (v100 >> 4) & 0xFFFFFF0;
          _X25 = v5 + 4 * v101;
          __asm { PRFM            #0, [X25] }
          _X24 = v6 + v101;
          __asm { PRFM            #0, [X24] }
          unint64_t v106 = *(unsigned int *)(v28 + 4 * (v29 & 7));
          *(_DWORD *)(v28 + 4 * (v29 & 7)) = v100;
          uint64_t v107 = (v106 >> 4) & 0xFFFFFF0;
          uint64_t v108 = v5 + 4 * v107;
          unsigned int v109 = (unsigned char *)(v6 + v107);
          if (((*v109 - 1) & 0xF) != 0) {
            uint64_t v110 = 0;
          }
          else {
            uint64_t v110 = 15;
          }
          uint64_t v111 = v110 + ((*v109 - 1) & 0xF);
          *unsigned int v109 = v111;
          v109[v111] = v106;
          *(_DWORD *)(v108 + 4 * v111) = v29++;
        }
        while (v29 < v99);
        uint64_t v31 = *(void *)(a1 + 112);
        uint64_t v30 = *(void *)(a1 + 56);
      }
      uint64_t v112 = v8 - 32;
      LODWORD(v29) = v8 - 32;
      int v113 = a2 + 1 - (v7 + v112);
      if ((v113 + 1) < 8) {
        int v114 = v113 + 1;
      }
      else {
        int v114 = 8;
      }
      if ((unint64_t)a2 + 1 >= v7 + v112) {
        int v115 = v114;
      }
      else {
        int v115 = 0;
      }
      if (v112 < v115 + (int)v112)
      {
        uint64_t v116 = *(void *)(a1 + 96);
        int v117 = 56 - *(_DWORD *)(a1 + 52);
        do
        {
          unint64_t v118 = ((0xCF1BBCDCBB000000 * *(void *)(v7 + v112)) ^ v116) >> v117;
          uint64_t v119 = (v118 >> 4) & 0xFFFFFF0;
          _X27 = v31 + 4 * v119;
          __asm { PRFM            #0, [X27] }
          _X26 = v30 + v119;
          __asm { PRFM            #0, [X26] }
          *(_DWORD *)(a1 + 4 * (v112++ & 7) + 64) = v118;
          --v115;
        }
        while (v115);
      }
    }
    if (v29 < v8)
    {
      uint64_t v32 = *(void *)(a1 + 8) + 8;
      int v33 = 56 - *(_DWORD *)(a1 + 52);
      unint64_t v29 = v29;
      do
      {
        unint64_t v34 = ((0xCF1BBCDCBB000000 * *(void *)(v32 + v29)) ^ *(void *)(a1 + 96)) >> v33;
        uint64_t v35 = (v34 >> 4) & 0xFFFFFF0;
        _X27 = v31 + 4 * v35;
        __asm { PRFM            #0, [X27] }
        _X26 = v30 + v35;
        __asm { PRFM            #0, [X26] }
        unint64_t v40 = *(unsigned int *)(v28 + 4 * (v29 & 7));
        *(_DWORD *)(v28 + 4 * (v29 & 7)) = v34;
        uint64_t v41 = (v40 >> 4) & 0xFFFFFF0;
        uint64_t v42 = v31 + 4 * v41;
        uint64_t v43 = (unsigned char *)(v30 + v41);
        if (((*v43 - 1) & 0xF) != 0) {
          uint64_t v44 = 0;
        }
        else {
          uint64_t v44 = 15;
        }
        uint64_t v45 = v44 + ((*v43 - 1) & 0xF);
        *uint64_t v43 = v45;
        v43[v45] = v40;
        *(_DWORD *)(v42 + 4 * v45) = v29++;
      }
      while (v29 < (a2 - v7));
    }
    *(_DWORD *)(a1 + 44) = v8;
    unint64_t v46 = ((0xCF1BBCDCBB000000 * *(void *)(v7 + v8 + 8)) ^ v14) >> (56 - v129);
    uint64_t v47 = (v46 >> 4) & 0xFFFFFF0;
    _X4 = v5 + 4 * v47;
    __asm { PRFM            #0, [X4] }
    _X2 = v6 + v47;
    __asm { PRFM            #0, [X2] }
    LODWORD(v27) = *(_DWORD *)(v28 + 4 * (v8 & 7));
    *(_DWORD *)(v28 + 4 * (v8 & 7)) = v46;
    uint64_t v10 = v125;
    a4 = v127;
    a3 = v124;
  }
  *(_DWORD *)(a1 + 104) += v27;
  uint64_t v52 = (v27 >> 4) & 0xFFFFFF0;
  uint64_t v53 = v5 + 4 * v52;
  int v54 = (int8x16_t *)(v6 + v52);
  char v55 = (char)*v54;
  unint64_t v56 = __ROR8__(vshrn_n_s16((int16x8_t)vceqq_s8(*v54, vdupq_n_s8(v27)), 4uLL), 4 * v54->i8[0]) & 0x8888888888888888;
  if (v56)
  {
    uint64_t v57 = 0;
    int v58 = (4 * v54->i8[0]);
    do
    {
      unsigned int v59 = ((__clz(__rbit64(v56)) + v58) >> 2) & 0xF;
      if (v59)
      {
        uint64_t v60 = *(unsigned int *)(v53 + 4 * v59);
        if (v60 < v12) {
          break;
        }
        _X20 = v7 + v60;
        __asm { PRFM            #0, [X20] }
        v131[v57++] = v60;
        --v15;
      }
      v56 &= v56 - 1;
    }
    while (v56 && v15);
  }
  else
  {
    uint64_t v57 = 0;
  }
  uint64_t v63 = (v55 - 1) & 0xF;
  if (((v55 - 1) & 0xF) != 0) {
    uint64_t v64 = 0;
  }
  else {
    uint64_t v64 = 15;
  }
  uint64_t v65 = v64 + v63;
  v54->i8[0] = v65;
  v54->i8[v65] = v27;
  int v66 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v66 + 1;
  *(_DWORD *)(v53 + 4 * v65) = v66;
  if (v57)
  {
    uint64_t v67 = 0;
    unint64_t v68 = a3 - 7;
    uint64_t v69 = a2 + 1;
    uint64_t v70 = v7 + 8;
    unint64_t v71 = 3;
    while (1)
    {
      uint64_t v72 = v131[v67];
      int v73 = (void *)(v7 + v72);
      if (*(_DWORD *)(v7 + v72 + v71 - 3) != *(_DWORD *)((char *)a2 + v71 - 3)) {
        goto LABEL_50;
      }
      if (v68 <= (unint64_t)a2)
      {
        uint64_t v76 = a2;
      }
      else
      {
        unint64_t v74 = *a2 ^ *v73;
        if (v74)
        {
          unint64_t v75 = __clz(__rbit64(v74)) >> 3;
          goto LABEL_48;
        }
        while (1)
        {
          uint64_t v76 = (void *)((char *)v69 + v74);
          if ((unint64_t)v69 + v74 >= v68) {
            break;
          }
          uint64_t v77 = *(void *)(v70 + v72 + v74);
          v74 += 8;
          unint64_t v78 = *v76 ^ v77;
          if (v78)
          {
            unint64_t v75 = v74 + (__clz(__rbit64(v78)) >> 3);
            goto LABEL_48;
          }
        }
        int v73 = (void *)(v70 + v72 + v74);
      }
      if ((unint64_t)v76 < a3 - 3 && *(_DWORD *)v73 == *(_DWORD *)v76)
      {
        uint64_t v76 = (void *)((char *)v76 + 4);
        int v73 = (void *)((char *)v73 + 4);
      }
      if ((unint64_t)v76 < a3 - 1 && *(unsigned __int16 *)v73 == *(unsigned __int16 *)v76)
      {
        uint64_t v76 = (void *)((char *)v76 + 2);
        int v73 = (void *)((char *)v73 + 2);
      }
      if ((unint64_t)v76 < a3 && *(unsigned __int8 *)v73 == *(unsigned __int8 *)v76) {
        uint64_t v76 = (void *)((char *)v76 + 1);
      }
      unint64_t v75 = (char *)v76 - (char *)a2;
LABEL_48:
      if (v75 > v71)
      {
        *a4 = v8 + 3 - v72;
        unint64_t v71 = v75;
        if ((void *)((char *)a2 + v75) == (void *)a3) {
          goto LABEL_57;
        }
      }
LABEL_50:
      ++v67;
      unint64_t v75 = v71;
      if (v67 == v57) {
        goto LABEL_57;
      }
    }
  }
  unint64_t v75 = 3;
LABEL_57:
  char v79 = 4 * _X15->i8[0];
  unint64_t v80 = __ROR8__(vshrn_n_s16((int16x8_t)vceqq_s8(*_X15, vdupq_n_s8(v18)), 4uLL), v79) & 0x8888888888888888;
  if (v80) {
    BOOL v81 = v15 == 0;
  }
  else {
    BOOL v81 = 1;
  }
  if (!v81)
  {
    uint64_t v82 = 0;
    uint64_t v130 = (void *)(v7 + v10);
    unsigned int v83 = *(_DWORD *)(v16 + 24);
    uint64_t v84 = *(char **)v16;
    uint64_t v85 = *(void *)(v16 + 8);
    int v86 = *(void *)v16 - v85;
    do
    {
      unsigned int v87 = ((__clz(__rbit64(v80)) + (v79 & 0xFC)) >> 2) & 0xF;
      if (v87)
      {
        uint64_t v88 = *(unsigned int *)(_X11 + 4 * v87);
        if (v88 < v83) {
          break;
        }
        _X0 = v85 + v88;
        __asm { PRFM            #0, [X0] }
        v131[v82++] = v88;
        --v15;
      }
      v80 &= v80 - 1;
    }
    while (v80 && v15);
    if (v82)
    {
      int v128 = a4;
      int v91 = *(_DWORD *)a2;
      int v126 = v8 - v10 + v86 + 3;
      uint64_t v92 = v131;
      do
      {
        unsigned int v94 = *v92++;
        unsigned int v93 = v94;
        uint64_t v95 = v85 + v94;
        if (*(_DWORD *)v95 == v91)
        {
          unsigned int v96 = (void *)a3;
          unint64_t v97 = sub_1DD2A6010((void *)((char *)a2 + 4), (char *)(v95 + 4), a3, v84, v130);
          a3 = (unint64_t)v96;
          if (v97 + 4 > v75)
          {
            *int v128 = v126 - v93;
            unint64_t v75 = v97 + 4;
            if ((void *)((char *)a2 + v97 + 4) == v96) {
              break;
            }
          }
        }
        --v82;
      }
      while (v82);
    }
  }
  return v75;
}

unint64_t sub_1DD2C7034(uint64_t a1, void *a2, unint64_t a3, void *a4)
{
  uint64_t v139 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 112);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 8);
  unsigned int v8 = a2 - v7;
  int v9 = *(_DWORD *)(a1 + 256);
  uint64_t v10 = *(unsigned int *)(a1 + 24);
  if ((int)a2 - (int)v7 - *(_DWORD *)(a1 + 28) > (1 << v9) && *(_DWORD *)(a1 + 40) == 0) {
    unsigned int v12 = a2 - v7 - (1 << v9);
  }
  else {
    unsigned int v12 = *(_DWORD *)(a1 + 28);
  }
  unsigned int v13 = *(_DWORD *)(a1 + 268);
  if (v13 >= 5) {
    LOBYTE(v13) = 5;
  }
  uint64_t v14 = *(void *)(a1 + 96);
  int v15 = 1 << v13;
  uint64_t v16 = *(void *)(a1 + 248);
  unint64_t v17 = 0xCF1BBCDCBB000000 * *a2;
  unint64_t v18 = v17 >> (56 - *(_DWORD *)(v16 + 52));
  uint64_t v19 = (v18 >> 3) & 0x1FFFFFE0;
  _X15 = (const __int16 *)(*(void *)(v16 + 56) + v19);
  _X11 = *(void *)(v16 + 112) + 4 * v19;
  __asm
  {
    PRFM            #0, [X11]
    PRFM            #0, [X11,#0x40]
    PRFM            #0, [X15]
  }
  if (*(_DWORD *)(a1 + 300))
  {
    unint64_t v28 = (v17 ^ v14) >> (56 - *(_DWORD *)(a1 + 52));
    *(_DWORD *)(a1 + 44) = v8;
  }
  else
  {
    uint64_t v29 = a1 + 64;
    unint64_t v30 = *(unsigned int *)(a1 + 44);
    uint64_t v132 = *(unsigned int *)(a1 + 24);
    unint64_t v134 = a4;
    unint64_t v131 = a3;
    int v136 = *(_DWORD *)(a1 + 52);
    uint64_t v31 = *(void *)(a1 + 56);
    uint64_t v32 = *(void *)(a1 + 112);
    if (v8 - v30 >= 0x181)
    {
      if (v30 <= 0xFFFFFF9F)
      {
        unint64_t v104 = v30 + 96;
        do
        {
          unint64_t v105 = ((0xCF1BBCDCBB000000 * *(void *)(v7 + 8 + v30)) ^ *(void *)(a1 + 96)) >> (56
                                                                                               - v136);
          uint64_t v106 = (v105 >> 3) & 0x1FFFFFE0;
          _X25 = v5 + 4 * v106;
          __asm
          {
            PRFM            #0, [X25]
            PRFM            #0, [X25,#0x40]
          }
          _X24 = v6 + v106;
          __asm { PRFM            #0, [X24] }
          unint64_t v112 = *(unsigned int *)(v29 + 4 * (v30 & 7));
          *(_DWORD *)(v29 + 4 * (v30 & 7)) = v105;
          uint64_t v113 = (v112 >> 3) & 0x1FFFFFE0;
          uint64_t v114 = v5 + 4 * v113;
          int v115 = (unsigned char *)(v6 + v113);
          if (((*v115 - 1) & 0x1F) != 0) {
            uint64_t v116 = 0;
          }
          else {
            uint64_t v116 = 31;
          }
          uint64_t v117 = v116 + ((*v115 - 1) & 0x1F);
          *int v115 = v117;
          v115[v117] = v112;
          *(_DWORD *)(v114 + 4 * v117) = v30++;
        }
        while (v30 < v104);
        uint64_t v32 = *(void *)(a1 + 112);
        uint64_t v31 = *(void *)(a1 + 56);
      }
      uint64_t v118 = v8 - 32;
      LODWORD(v30) = v8 - 32;
      int v119 = a2 + 1 - (v7 + v118);
      if ((v119 + 1) < 8) {
        int v120 = v119 + 1;
      }
      else {
        int v120 = 8;
      }
      if ((unint64_t)a2 + 1 >= v7 + v118) {
        int v121 = v120;
      }
      else {
        int v121 = 0;
      }
      if (v118 < v121 + (int)v118)
      {
        uint64_t v122 = *(void *)(a1 + 96);
        int v123 = 56 - *(_DWORD *)(a1 + 52);
        do
        {
          unint64_t v124 = ((0xCF1BBCDCBB000000 * *(void *)(v7 + v118)) ^ v122) >> v123;
          uint64_t v125 = (v124 >> 3) & 0x1FFFFFE0;
          _X27 = v32 + 4 * v125;
          __asm
          {
            PRFM            #0, [X27]
            PRFM            #0, [X27,#0x40]
          }
          _X26 = v31 + v125;
          __asm { PRFM            #0, [X26] }
          *(_DWORD *)(a1 + 4 * (v118++ & 7) + 64) = v124;
          --v121;
        }
        while (v121);
      }
    }
    if (v30 < v8)
    {
      uint64_t v33 = *(void *)(a1 + 8) + 8;
      int v34 = 56 - *(_DWORD *)(a1 + 52);
      unint64_t v30 = v30;
      do
      {
        unint64_t v35 = ((0xCF1BBCDCBB000000 * *(void *)(v33 + v30)) ^ *(void *)(a1 + 96)) >> v34;
        uint64_t v36 = (v35 >> 3) & 0x1FFFFFE0;
        _X27 = v32 + 4 * v36;
        __asm
        {
          PRFM            #0, [X27]
          PRFM            #0, [X27,#0x40]
        }
        _X26 = v31 + v36;
        __asm { PRFM            #0, [X26] }
        unint64_t v42 = *(unsigned int *)(v29 + 4 * (v30 & 7));
        *(_DWORD *)(v29 + 4 * (v30 & 7)) = v35;
        uint64_t v43 = (v42 >> 3) & 0x1FFFFFE0;
        uint64_t v44 = v32 + 4 * v43;
        uint64_t v45 = (unsigned char *)(v31 + v43);
        if (((*v45 - 1) & 0x1F) != 0) {
          uint64_t v46 = 0;
        }
        else {
          uint64_t v46 = 31;
        }
        uint64_t v47 = v46 + ((*v45 - 1) & 0x1F);
        unsigned char *v45 = v47;
        v45[v47] = v42;
        *(_DWORD *)(v44 + 4 * v47) = v30++;
      }
      while (v30 < (a2 - v7));
    }
    *(_DWORD *)(a1 + 44) = v8;
    unint64_t v48 = ((0xCF1BBCDCBB000000 * *(void *)(v7 + v8 + 8)) ^ v14) >> (56 - v136);
    uint64_t v49 = (v48 >> 3) & 0x1FFFFFE0;
    _X4 = v5 + 4 * v49;
    __asm
    {
      PRFM            #0, [X4]
      PRFM            #0, [X4,#0x40]
    }
    _X2 = v6 + v49;
    __asm { PRFM            #0, [X2] }
    LODWORD(v28) = *(_DWORD *)(v29 + 4 * (v8 & 7));
    *(_DWORD *)(v29 + 4 * (v8 & 7)) = v48;
    uint64_t v10 = v132;
    a4 = v134;
    a3 = v131;
  }
  *(_DWORD *)(a1 + 104) += v28;
  uint64_t v55 = (v28 >> 3) & 0x1FFFFFE0;
  uint64_t v56 = v5 + 4 * v55;
  uint64_t v57 = (__int16 *)(v6 + v55);
  int16x8x2_t v140 = vld2q_s16(v57);
  char v58 = *(unsigned char *)v57;
  int8x16_t v59 = vdupq_n_s8(v28);
  unint64_t v60 = __ROR8__(vsli_n_s8(vshrn_n_s16((int16x8_t)vceqq_s8(v59, (int8x16_t)v140.val[0]), 6uLL), vshrn_n_s16((int16x8_t)vceqq_s8(v59, (int8x16_t)v140.val[1]), 6uLL), 4uLL), 2 * *(unsigned char *)v57) & 0x5555555555555555;
  if (v60)
  {
    uint64_t v61 = 0;
    int v62 = (2 * *(unsigned char *)v57);
    do
    {
      unsigned int v63 = ((__clz(__rbit64(v60)) + v62) >> 1) & 0x1F;
      if (v63)
      {
        uint64_t v64 = *(unsigned int *)(v56 + 4 * v63);
        if (v64 < v12) {
          break;
        }
        _X20 = v7 + v64;
        __asm { PRFM            #0, [X20] }
        v138[v61++] = v64;
        --v15;
      }
      v60 &= v60 - 1;
    }
    while (v60 && v15);
  }
  else
  {
    uint64_t v61 = 0;
  }
  uint64_t v67 = (v58 - 1) & 0x1F;
  if (((v58 - 1) & 0x1F) != 0) {
    uint64_t v68 = 0;
  }
  else {
    uint64_t v68 = 31;
  }
  uint64_t v69 = v68 + v67;
  *(unsigned char *)uint64_t v57 = v69;
  *((unsigned char *)v57 + v69) = v28;
  int v70 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v70 + 1;
  *(_DWORD *)(v56 + 4 * v69) = v70;
  if (v61)
  {
    uint64_t v71 = 0;
    unint64_t v72 = a3 - 7;
    int v73 = a2 + 1;
    uint64_t v74 = v7 + 8;
    unint64_t v75 = 3;
    while (1)
    {
      uint64_t v76 = v138[v71];
      uint64_t v77 = (void *)(v7 + v76);
      if (*(_DWORD *)(v7 + v76 + v75 - 3) != *(_DWORD *)((char *)a2 + v75 - 3)) {
        goto LABEL_50;
      }
      if (v72 <= (unint64_t)a2)
      {
        unint64_t v80 = a2;
      }
      else
      {
        unint64_t v78 = *a2 ^ *v77;
        if (v78)
        {
          unint64_t v79 = __clz(__rbit64(v78)) >> 3;
          goto LABEL_48;
        }
        while (1)
        {
          unint64_t v80 = (void *)((char *)v73 + v78);
          if ((unint64_t)v73 + v78 >= v72) {
            break;
          }
          uint64_t v81 = *(void *)(v74 + v76 + v78);
          v78 += 8;
          unint64_t v82 = *v80 ^ v81;
          if (v82)
          {
            unint64_t v79 = v78 + (__clz(__rbit64(v82)) >> 3);
            goto LABEL_48;
          }
        }
        uint64_t v77 = (void *)(v74 + v76 + v78);
      }
      if ((unint64_t)v80 < a3 - 3 && *(_DWORD *)v77 == *(_DWORD *)v80)
      {
        unint64_t v80 = (void *)((char *)v80 + 4);
        uint64_t v77 = (void *)((char *)v77 + 4);
      }
      if ((unint64_t)v80 < a3 - 1 && *(unsigned __int16 *)v77 == *(unsigned __int16 *)v80)
      {
        unint64_t v80 = (void *)((char *)v80 + 2);
        uint64_t v77 = (void *)((char *)v77 + 2);
      }
      if ((unint64_t)v80 < a3 && *(unsigned __int8 *)v77 == *(unsigned __int8 *)v80) {
        unint64_t v80 = (void *)((char *)v80 + 1);
      }
      unint64_t v79 = (char *)v80 - (char *)a2;
LABEL_48:
      if (v79 > v75)
      {
        *a4 = v8 + 3 - v76;
        unint64_t v75 = v79;
        if ((void *)((char *)a2 + v79) == (void *)a3) {
          goto LABEL_57;
        }
      }
LABEL_50:
      ++v71;
      unint64_t v79 = v75;
      if (v71 == v61) {
        goto LABEL_57;
      }
    }
  }
  unint64_t v79 = 3;
LABEL_57:
  char v83 = 2 * *(unsigned char *)_X15;
  int16x8x2_t v141 = vld2q_s16(_X15);
  int8x16_t v84 = vdupq_n_s8(v18);
  unint64_t v85 = __ROR8__(vsli_n_s8(vshrn_n_s16((int16x8_t)vceqq_s8(v84, (int8x16_t)v141.val[0]), 6uLL), vshrn_n_s16((int16x8_t)vceqq_s8(v84, (int8x16_t)v141.val[1]), 6uLL), 4uLL), v83) & 0x5555555555555555;
  if (v85) {
    BOOL v86 = v15 == 0;
  }
  else {
    BOOL v86 = 1;
  }
  if (!v86)
  {
    uint64_t v87 = 0;
    unint64_t v137 = (void *)(v7 + v10);
    unsigned int v88 = *(_DWORD *)(v16 + 24);
    uint64_t v89 = *(char **)v16;
    uint64_t v90 = *(void *)(v16 + 8);
    int v91 = *(void *)v16 - v90;
    do
    {
      unsigned int v92 = ((__clz(__rbit64(v85)) + (v83 & 0xFE)) >> 1) & 0x1F;
      if (v92)
      {
        uint64_t v93 = *(unsigned int *)(_X11 + 4 * v92);
        if (v93 < v88) {
          break;
        }
        _X0 = v90 + v93;
        __asm { PRFM            #0, [X0] }
        v138[v87++] = v93;
        --v15;
      }
      v85 &= v85 - 1;
    }
    while (v85 && v15);
    if (v87)
    {
      unsigned int v135 = a4;
      int v96 = *(_DWORD *)a2;
      int v133 = v8 - v10 + v91 + 3;
      unint64_t v97 = v138;
      do
      {
        unsigned int v99 = *v97++;
        unsigned int v98 = v99;
        uint64_t v100 = v90 + v99;
        if (*(_DWORD *)v100 == v96)
        {
          uint64_t v101 = (void *)a3;
          unint64_t v102 = sub_1DD2A6010((void *)((char *)a2 + 4), (char *)(v100 + 4), a3, v89, v137);
          a3 = (unint64_t)v101;
          if (v102 + 4 > v79)
          {
            void *v135 = v133 - v98;
            unint64_t v79 = v102 + 4;
            if ((void *)((char *)a2 + v102 + 4) == v101) {
              break;
            }
          }
        }
        --v87;
      }
      while (v87);
    }
  }
  return v79;
}

unint64_t sub_1DD2C7704(uint64_t a1, void *a2, unint64_t a3, void *a4)
{
  uint64_t v145 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 112);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 8);
  unsigned int v8 = a2 - v7;
  int v9 = *(_DWORD *)(a1 + 256);
  uint64_t v10 = *(unsigned int *)(a1 + 24);
  if ((int)a2 - (int)v7 - *(_DWORD *)(a1 + 28) > (1 << v9) && *(_DWORD *)(a1 + 40) == 0) {
    unsigned int v12 = a2 - v7 - (1 << v9);
  }
  else {
    unsigned int v12 = *(_DWORD *)(a1 + 28);
  }
  unsigned int v13 = *(_DWORD *)(a1 + 268);
  if (v13 >= 6) {
    LOBYTE(v13) = 6;
  }
  uint64_t v14 = *(void *)(a1 + 96);
  int v15 = 1 << v13;
  uint64_t v16 = *(void *)(a1 + 248);
  unint64_t v17 = 0xCF1BBCDCBB000000 * *a2;
  unint64_t v18 = v17 >> (56 - *(_DWORD *)(v16 + 52));
  uint64_t v19 = (v18 >> 2) & 0x3FFFFFC0;
  _X14 = (const char *)(*(void *)(v16 + 56) + v19);
  _X11 = *(void *)(v16 + 112) + 4 * v19;
  __asm
  {
    PRFM            #0, [X11]
    PRFM            #0, [X11,#0x40]
    PRFM            #0, [X14]
    PRFM            #0, [X14,#0x20]
  }
  if (*(_DWORD *)(a1 + 300))
  {
    unint64_t v29 = (v17 ^ v14) >> (56 - *(_DWORD *)(a1 + 52));
    *(_DWORD *)(a1 + 44) = v8;
  }
  else
  {
    uint64_t v30 = a1 + 64;
    unint64_t v31 = *(unsigned int *)(a1 + 44);
    uint64_t v138 = *(unsigned int *)(a1 + 24);
    int16x8x2_t v140 = a4;
    unint64_t v137 = a3;
    int v142 = *(_DWORD *)(a1 + 52);
    uint64_t v32 = *(void *)(a1 + 56);
    uint64_t v33 = *(void *)(a1 + 112);
    if (v8 - v31 >= 0x181)
    {
      if (v31 <= 0xFFFFFF9F)
      {
        unint64_t v108 = v31 + 96;
        do
        {
          unint64_t v109 = ((0xCF1BBCDCBB000000 * *(void *)(v7 + 8 + v31)) ^ *(void *)(a1 + 96)) >> (56
                                                                                               - v142);
          uint64_t v110 = (v109 >> 2) & 0x3FFFFFC0;
          _X25 = v5 + 4 * v110;
          __asm
          {
            PRFM            #0, [X25]
            PRFM            #0, [X25,#0x40]
          }
          _X24 = v6 + v110;
          __asm
          {
            PRFM            #0, [X24]
            PRFM            #0, [X24,#0x20]
          }
          unint64_t v117 = *(unsigned int *)(v30 + 4 * (v31 & 7));
          *(_DWORD *)(v30 + 4 * (v31 & 7)) = v109;
          uint64_t v118 = (v117 >> 2) & 0x3FFFFFC0;
          uint64_t v119 = v5 + 4 * v118;
          int v120 = (unsigned char *)(v6 + v118);
          if (((*v120 - 1) & 0x3F) != 0) {
            uint64_t v121 = 0;
          }
          else {
            uint64_t v121 = 63;
          }
          uint64_t v122 = v121 + ((*v120 - 1) & 0x3F);
          *int v120 = v122;
          v120[v122] = v117;
          *(_DWORD *)(v119 + 4 * v122) = v31++;
        }
        while (v31 < v108);
        uint64_t v33 = *(void *)(a1 + 112);
        uint64_t v32 = *(void *)(a1 + 56);
      }
      uint64_t v123 = v8 - 32;
      LODWORD(v31) = v8 - 32;
      int v124 = a2 + 1 - (v7 + v123);
      if ((v124 + 1) < 8) {
        int v125 = v124 + 1;
      }
      else {
        int v125 = 8;
      }
      if ((unint64_t)a2 + 1 >= v7 + v123) {
        int v126 = v125;
      }
      else {
        int v126 = 0;
      }
      if (v123 < v126 + (int)v123)
      {
        uint64_t v127 = *(void *)(a1 + 96);
        int v128 = 56 - *(_DWORD *)(a1 + 52);
        do
        {
          unint64_t v129 = ((0xCF1BBCDCBB000000 * *(void *)(v7 + v123)) ^ v127) >> v128;
          uint64_t v130 = (v129 >> 2) & 0x3FFFFFC0;
          _X27 = v33 + 4 * v130;
          __asm
          {
            PRFM            #0, [X27]
            PRFM            #0, [X27,#0x40]
          }
          _X26 = v32 + v130;
          __asm
          {
            PRFM            #0, [X26]
            PRFM            #0, [X26,#0x20]
          }
          *(_DWORD *)(a1 + 4 * (v123++ & 7) + 64) = v129;
          --v126;
        }
        while (v126);
      }
    }
    if (v31 < v8)
    {
      uint64_t v34 = *(void *)(a1 + 8) + 8;
      int v35 = 56 - *(_DWORD *)(a1 + 52);
      unint64_t v31 = v31;
      do
      {
        unint64_t v36 = ((0xCF1BBCDCBB000000 * *(void *)(v34 + v31)) ^ *(void *)(a1 + 96)) >> v35;
        uint64_t v37 = (v36 >> 2) & 0x3FFFFFC0;
        _X27 = v33 + 4 * v37;
        __asm
        {
          PRFM            #0, [X27]
          PRFM            #0, [X27,#0x40]
        }
        _X26 = v32 + v37;
        __asm
        {
          PRFM            #0, [X26]
          PRFM            #0, [X26,#0x20]
        }
        unint64_t v44 = *(unsigned int *)(v30 + 4 * (v31 & 7));
        *(_DWORD *)(v30 + 4 * (v31 & 7)) = v36;
        uint64_t v45 = (v44 >> 2) & 0x3FFFFFC0;
        uint64_t v46 = v33 + 4 * v45;
        uint64_t v47 = (unsigned char *)(v32 + v45);
        if (((*v47 - 1) & 0x3F) != 0) {
          uint64_t v48 = 0;
        }
        else {
          uint64_t v48 = 63;
        }
        uint64_t v49 = v48 + ((*v47 - 1) & 0x3F);
        *uint64_t v47 = v49;
        v47[v49] = v44;
        *(_DWORD *)(v46 + 4 * v49) = v31++;
      }
      while (v31 < (a2 - v7));
    }
    *(_DWORD *)(a1 + 44) = v8;
    unint64_t v50 = ((0xCF1BBCDCBB000000 * *(void *)(v7 + v8 + 8)) ^ v14) >> (56 - v142);
    uint64_t v51 = (v50 >> 2) & 0x3FFFFFC0;
    _X4 = v5 + 4 * v51;
    __asm
    {
      PRFM            #0, [X4]
      PRFM            #0, [X4,#0x40]
    }
    _X2 = v6 + v51;
    __asm
    {
      PRFM            #0, [X2]
      PRFM            #0, [X2,#0x20]
    }
    LODWORD(v29) = *(_DWORD *)(v30 + 4 * (v8 & 7));
    *(_DWORD *)(v30 + 4 * (v8 & 7)) = v50;
    uint64_t v10 = v138;
    a4 = v140;
    a3 = v137;
  }
  *(_DWORD *)(a1 + 104) += v29;
  uint64_t v58 = (v29 >> 2) & 0x3FFFFFC0;
  uint64_t v59 = v5 + 4 * v58;
  unint64_t v60 = (char *)(v6 + v58);
  char v61 = *v60;
  int8x16x4_t v146 = vld4q_s8(v60);
  int8x16_t v62 = vdupq_n_s8(v29);
  v146.val[0] = vsriq_n_s8(vsriq_n_s8(vceqq_s8(v146.val[3], v62), vceqq_s8(v146.val[2], v62), 1uLL), vsriq_n_s8(vceqq_s8(v146.val[1], v62), vceqq_s8(v146.val[0], v62), 1uLL), 2uLL);
  int8x8_t v63 = vshrn_n_s16((int16x8_t)vsriq_n_s8(v146.val[0], v146.val[0], 4uLL), 4uLL);
  uint64_t v64 = 0;
  if (v63)
  {
    unint64_t v65 = __ROR8__(*(void *)&v63, v61);
    do
    {
      unsigned int v66 = (__clz(__rbit64(v65)) + v61) & 0x3F;
      if (v66)
      {
        uint64_t v67 = *(unsigned int *)(v59 + 4 * v66);
        if (v67 < v12) {
          break;
        }
        _X19 = v7 + v67;
        __asm { PRFM            #0, [X19] }
        v144[v64++] = v67;
        --v15;
      }
      v65 &= v65 - 1;
    }
    while (v65 && v15);
  }
  uint64_t v70 = (v61 - 1) & 0x3F;
  if (((v61 - 1) & 0x3F) != 0) {
    uint64_t v71 = 0;
  }
  else {
    uint64_t v71 = 63;
  }
  uint64_t v72 = v71 + v70;
  *unint64_t v60 = v72;
  v60[v72] = v29;
  int v73 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v73 + 1;
  *(_DWORD *)(v59 + 4 * v72) = v73;
  if (v64)
  {
    uint64_t v74 = 0;
    unint64_t v75 = a3 - 7;
    uint64_t v76 = a2 + 1;
    uint64_t v77 = v7 + 8;
    unint64_t v78 = 3;
    while (1)
    {
      uint64_t v79 = v144[v74];
      unint64_t v80 = (void *)(v7 + v79);
      if (*(_DWORD *)(v7 + v79 + v78 - 3) != *(_DWORD *)((char *)a2 + v78 - 3)) {
        goto LABEL_48;
      }
      if (v75 <= (unint64_t)a2)
      {
        char v83 = a2;
      }
      else
      {
        unint64_t v81 = *a2 ^ *v80;
        if (v81)
        {
          unint64_t v82 = __clz(__rbit64(v81)) >> 3;
          goto LABEL_46;
        }
        while (1)
        {
          char v83 = (void *)((char *)v76 + v81);
          if ((unint64_t)v76 + v81 >= v75) {
            break;
          }
          uint64_t v84 = *(void *)(v77 + v79 + v81);
          v81 += 8;
          unint64_t v85 = *v83 ^ v84;
          if (v85)
          {
            unint64_t v82 = v81 + (__clz(__rbit64(v85)) >> 3);
            goto LABEL_46;
          }
        }
        unint64_t v80 = (void *)(v77 + v79 + v81);
      }
      if ((unint64_t)v83 < a3 - 3 && *(_DWORD *)v80 == *(_DWORD *)v83)
      {
        char v83 = (void *)((char *)v83 + 4);
        unint64_t v80 = (void *)((char *)v80 + 4);
      }
      if ((unint64_t)v83 < a3 - 1 && *(unsigned __int16 *)v80 == *(unsigned __int16 *)v83)
      {
        char v83 = (void *)((char *)v83 + 2);
        unint64_t v80 = (void *)((char *)v80 + 2);
      }
      if ((unint64_t)v83 < a3 && *(unsigned __int8 *)v80 == *(unsigned __int8 *)v83) {
        char v83 = (void *)((char *)v83 + 1);
      }
      unint64_t v82 = (char *)v83 - (char *)a2;
LABEL_46:
      if (v82 > v78)
      {
        *a4 = v8 + 3 - v79;
        unint64_t v78 = v82;
        if ((void *)((char *)a2 + v82) == (void *)a3) {
          goto LABEL_55;
        }
      }
LABEL_48:
      ++v74;
      unint64_t v82 = v78;
      if (v74 == v64) {
        goto LABEL_55;
      }
    }
  }
  unint64_t v82 = 3;
LABEL_55:
  int8x16x4_t v147 = vld4q_s8(_X14);
  int8x16_t v86 = vdupq_n_s8(v18);
  v147.val[0] = vsriq_n_s8(vsriq_n_s8(vceqq_s8(v147.val[3], v86), vceqq_s8(v147.val[2], v86), 1uLL), vsriq_n_s8(vceqq_s8(v147.val[1], v86), vceqq_s8(v147.val[0], v86), 1uLL), 2uLL);
  int8x8_t v87 = vshrn_n_s16((int16x8_t)vsriq_n_s8(v147.val[0], v147.val[0], 4uLL), 4uLL);
  if (v87) {
    BOOL v88 = v15 == 0;
  }
  else {
    BOOL v88 = 1;
  }
  if (!v88)
  {
    uint64_t v89 = 0;
    unsigned int v143 = (void *)(v7 + v10);
    unsigned int v90 = *(_DWORD *)(v16 + 24);
    int v91 = *(char **)v16;
    uint64_t v92 = *(void *)(v16 + 8);
    int v93 = *(void *)v16 - v92;
    char v94 = *_X14;
    unint64_t v95 = __ROR8__(*(void *)&v87, *_X14);
    do
    {
      unsigned int v96 = (__clz(__rbit64(v95)) + v94) & 0x3F;
      if (v96)
      {
        uint64_t v97 = *(unsigned int *)(_X11 + 4 * v96);
        if (v97 < v90) {
          break;
        }
        _X0 = v92 + v97;
        __asm { PRFM            #0, [X0] }
        v144[v89++] = v97;
        --v15;
      }
      v95 &= v95 - 1;
    }
    while (v95 && v15);
    if (v89)
    {
      int16x8x2_t v141 = a4;
      int v100 = *(_DWORD *)a2;
      int v139 = v8 - v10 + v93 + 3;
      uint64_t v101 = v144;
      do
      {
        unsigned int v103 = *v101++;
        unsigned int v102 = v103;
        uint64_t v104 = v92 + v103;
        if (*(_DWORD *)v104 == v100)
        {
          unint64_t v105 = (void *)a3;
          unint64_t v106 = sub_1DD2A6010((void *)((char *)a2 + 4), (char *)(v104 + 4), a3, v91, v143);
          a3 = (unint64_t)v105;
          if (v106 + 4 > v82)
          {
            *int16x8x2_t v141 = v139 - v102;
            unint64_t v82 = v106 + 4;
            if ((void *)((char *)a2 + v106 + 4) == v105) {
              break;
            }
          }
        }
        --v89;
      }
      while (v89);
    }
  }
  return v82;
}

unint64_t sub_1DD2C7DE8(uint64_t a1, void *a2, unint64_t a3, void *a4)
{
  uint64_t v132 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 112);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 8);
  unsigned int v8 = a2 - v7;
  int v9 = *(_DWORD *)(a1 + 256);
  uint64_t v10 = *(unsigned int *)(a1 + 24);
  if ((int)a2 - (int)v7 - *(_DWORD *)(a1 + 28) > (1 << v9) && *(_DWORD *)(a1 + 40) == 0) {
    unsigned int v12 = a2 - v7 - (1 << v9);
  }
  else {
    unsigned int v12 = *(_DWORD *)(a1 + 28);
  }
  unsigned int v13 = *(_DWORD *)(a1 + 268);
  if (v13 >= 4) {
    LOBYTE(v13) = 4;
  }
  uint64_t v14 = *(void *)(a1 + 96);
  int v15 = 1 << v13;
  uint64_t v16 = *(void *)(a1 + 248);
  unint64_t v17 = 0xCF1BBCDCBF9B0000 * *a2;
  unint64_t v18 = v17 >> (56 - *(_DWORD *)(v16 + 52));
  uint64_t v19 = (v18 >> 4) & 0xFFFFFF0;
  _X15 = (int8x16_t *)(*(void *)(v16 + 56) + v19);
  _X11 = *(void *)(v16 + 112) + 4 * v19;
  __asm
  {
    PRFM            #0, [X11]
    PRFM            #0, [X15]
  }
  if (*(_DWORD *)(a1 + 300))
  {
    unint64_t v27 = (v17 ^ v14) >> (56 - *(_DWORD *)(a1 + 52));
    *(_DWORD *)(a1 + 44) = v8;
  }
  else
  {
    uint64_t v28 = a1 + 64;
    unint64_t v29 = *(unsigned int *)(a1 + 44);
    uint64_t v125 = *(unsigned int *)(a1 + 24);
    uint64_t v127 = a4;
    unint64_t v124 = a3;
    int v129 = *(_DWORD *)(a1 + 52);
    uint64_t v30 = *(void *)(a1 + 56);
    uint64_t v31 = *(void *)(a1 + 112);
    if (v8 - v29 >= 0x181)
    {
      if (v29 <= 0xFFFFFF9F)
      {
        unint64_t v99 = v29 + 96;
        do
        {
          unint64_t v100 = ((0xCF1BBCDCBF9B0000 * *(void *)(v7 + 8 + v29)) ^ *(void *)(a1 + 96)) >> (56
                                                                                               - v129);
          uint64_t v101 = (v100 >> 4) & 0xFFFFFF0;
          _X25 = v5 + 4 * v101;
          __asm { PRFM            #0, [X25] }
          _X24 = v6 + v101;
          __asm { PRFM            #0, [X24] }
          unint64_t v106 = *(unsigned int *)(v28 + 4 * (v29 & 7));
          *(_DWORD *)(v28 + 4 * (v29 & 7)) = v100;
          uint64_t v107 = (v106 >> 4) & 0xFFFFFF0;
          uint64_t v108 = v5 + 4 * v107;
          unint64_t v109 = (unsigned char *)(v6 + v107);
          if (((*v109 - 1) & 0xF) != 0) {
            uint64_t v110 = 0;
          }
          else {
            uint64_t v110 = 15;
          }
          uint64_t v111 = v110 + ((*v109 - 1) & 0xF);
          *unint64_t v109 = v111;
          v109[v111] = v106;
          *(_DWORD *)(v108 + 4 * v111) = v29++;
        }
        while (v29 < v99);
        uint64_t v31 = *(void *)(a1 + 112);
        uint64_t v30 = *(void *)(a1 + 56);
      }
      uint64_t v112 = v8 - 32;
      LODWORD(v29) = v8 - 32;
      int v113 = a2 + 1 - (v7 + v112);
      if ((v113 + 1) < 8) {
        int v114 = v113 + 1;
      }
      else {
        int v114 = 8;
      }
      if ((unint64_t)a2 + 1 >= v7 + v112) {
        int v115 = v114;
      }
      else {
        int v115 = 0;
      }
      if (v112 < v115 + (int)v112)
      {
        uint64_t v116 = *(void *)(a1 + 96);
        int v117 = 56 - *(_DWORD *)(a1 + 52);
        do
        {
          unint64_t v118 = ((0xCF1BBCDCBF9B0000 * *(void *)(v7 + v112)) ^ v116) >> v117;
          uint64_t v119 = (v118 >> 4) & 0xFFFFFF0;
          _X27 = v31 + 4 * v119;
          __asm { PRFM            #0, [X27] }
          _X26 = v30 + v119;
          __asm { PRFM            #0, [X26] }
          *(_DWORD *)(a1 + 4 * (v112++ & 7) + 64) = v118;
          --v115;
        }
        while (v115);
      }
    }
    if (v29 < v8)
    {
      uint64_t v32 = *(void *)(a1 + 8) + 8;
      int v33 = 56 - *(_DWORD *)(a1 + 52);
      unint64_t v29 = v29;
      do
      {
        unint64_t v34 = ((0xCF1BBCDCBF9B0000 * *(void *)(v32 + v29)) ^ *(void *)(a1 + 96)) >> v33;
        uint64_t v35 = (v34 >> 4) & 0xFFFFFF0;
        _X27 = v31 + 4 * v35;
        __asm { PRFM            #0, [X27] }
        _X26 = v30 + v35;
        __asm { PRFM            #0, [X26] }
        unint64_t v40 = *(unsigned int *)(v28 + 4 * (v29 & 7));
        *(_DWORD *)(v28 + 4 * (v29 & 7)) = v34;
        uint64_t v41 = (v40 >> 4) & 0xFFFFFF0;
        uint64_t v42 = v31 + 4 * v41;
        uint64_t v43 = (unsigned char *)(v30 + v41);
        if (((*v43 - 1) & 0xF) != 0) {
          uint64_t v44 = 0;
        }
        else {
          uint64_t v44 = 15;
        }
        uint64_t v45 = v44 + ((*v43 - 1) & 0xF);
        *uint64_t v43 = v45;
        v43[v45] = v40;
        *(_DWORD *)(v42 + 4 * v45) = v29++;
      }
      while (v29 < (a2 - v7));
    }
    *(_DWORD *)(a1 + 44) = v8;
    unint64_t v46 = ((0xCF1BBCDCBF9B0000 * *(void *)(v7 + v8 + 8)) ^ v14) >> (56 - v129);
    uint64_t v47 = (v46 >> 4) & 0xFFFFFF0;
    _X4 = v5 + 4 * v47;
    __asm { PRFM            #0, [X4] }
    _X2 = v6 + v47;
    __asm { PRFM            #0, [X2] }
    LODWORD(v27) = *(_DWORD *)(v28 + 4 * (v8 & 7));
    *(_DWORD *)(v28 + 4 * (v8 & 7)) = v46;
    uint64_t v10 = v125;
    a4 = v127;
    a3 = v124;
  }
  *(_DWORD *)(a1 + 104) += v27;
  uint64_t v52 = (v27 >> 4) & 0xFFFFFF0;
  uint64_t v53 = v5 + 4 * v52;
  int v54 = (int8x16_t *)(v6 + v52);
  char v55 = (char)*v54;
  unint64_t v56 = __ROR8__(vshrn_n_s16((int16x8_t)vceqq_s8(*v54, vdupq_n_s8(v27)), 4uLL), 4 * v54->i8[0]) & 0x8888888888888888;
  if (v56)
  {
    uint64_t v57 = 0;
    int v58 = (4 * v54->i8[0]);
    do
    {
      unsigned int v59 = ((__clz(__rbit64(v56)) + v58) >> 2) & 0xF;
      if (v59)
      {
        uint64_t v60 = *(unsigned int *)(v53 + 4 * v59);
        if (v60 < v12) {
          break;
        }
        _X20 = v7 + v60;
        __asm { PRFM            #0, [X20] }
        v131[v57++] = v60;
        --v15;
      }
      v56 &= v56 - 1;
    }
    while (v56 && v15);
  }
  else
  {
    uint64_t v57 = 0;
  }
  uint64_t v63 = (v55 - 1) & 0xF;
  if (((v55 - 1) & 0xF) != 0) {
    uint64_t v64 = 0;
  }
  else {
    uint64_t v64 = 15;
  }
  uint64_t v65 = v64 + v63;
  v54->i8[0] = v65;
  v54->i8[v65] = v27;
  int v66 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v66 + 1;
  *(_DWORD *)(v53 + 4 * v65) = v66;
  if (v57)
  {
    uint64_t v67 = 0;
    unint64_t v68 = a3 - 7;
    uint64_t v69 = a2 + 1;
    uint64_t v70 = v7 + 8;
    unint64_t v71 = 3;
    while (1)
    {
      uint64_t v72 = v131[v67];
      int v73 = (void *)(v7 + v72);
      if (*(_DWORD *)(v7 + v72 + v71 - 3) != *(_DWORD *)((char *)a2 + v71 - 3)) {
        goto LABEL_50;
      }
      if (v68 <= (unint64_t)a2)
      {
        uint64_t v76 = a2;
      }
      else
      {
        unint64_t v74 = *a2 ^ *v73;
        if (v74)
        {
          unint64_t v75 = __clz(__rbit64(v74)) >> 3;
          goto LABEL_48;
        }
        while (1)
        {
          uint64_t v76 = (void *)((char *)v69 + v74);
          if ((unint64_t)v69 + v74 >= v68) {
            break;
          }
          uint64_t v77 = *(void *)(v70 + v72 + v74);
          v74 += 8;
          unint64_t v78 = *v76 ^ v77;
          if (v78)
          {
            unint64_t v75 = v74 + (__clz(__rbit64(v78)) >> 3);
            goto LABEL_48;
          }
        }
        int v73 = (void *)(v70 + v72 + v74);
      }
      if ((unint64_t)v76 < a3 - 3 && *(_DWORD *)v73 == *(_DWORD *)v76)
      {
        uint64_t v76 = (void *)((char *)v76 + 4);
        int v73 = (void *)((char *)v73 + 4);
      }
      if ((unint64_t)v76 < a3 - 1 && *(unsigned __int16 *)v73 == *(unsigned __int16 *)v76)
      {
        uint64_t v76 = (void *)((char *)v76 + 2);
        int v73 = (void *)((char *)v73 + 2);
      }
      if ((unint64_t)v76 < a3 && *(unsigned __int8 *)v73 == *(unsigned __int8 *)v76) {
        uint64_t v76 = (void *)((char *)v76 + 1);
      }
      unint64_t v75 = (char *)v76 - (char *)a2;
LABEL_48:
      if (v75 > v71)
      {
        *a4 = v8 + 3 - v72;
        unint64_t v71 = v75;
        if ((void *)((char *)a2 + v75) == (void *)a3) {
          goto LABEL_57;
        }
      }
LABEL_50:
      ++v67;
      unint64_t v75 = v71;
      if (v67 == v57) {
        goto LABEL_57;
      }
    }
  }
  unint64_t v75 = 3;
LABEL_57:
  char v79 = 4 * _X15->i8[0];
  unint64_t v80 = __ROR8__(vshrn_n_s16((int16x8_t)vceqq_s8(*_X15, vdupq_n_s8(v18)), 4uLL), v79) & 0x8888888888888888;
  if (v80) {
    BOOL v81 = v15 == 0;
  }
  else {
    BOOL v81 = 1;
  }
  if (!v81)
  {
    uint64_t v82 = 0;
    uint64_t v130 = (void *)(v7 + v10);
    unsigned int v83 = *(_DWORD *)(v16 + 24);
    uint64_t v84 = *(char **)v16;
    uint64_t v85 = *(void *)(v16 + 8);
    int v86 = *(void *)v16 - v85;
    do
    {
      unsigned int v87 = ((__clz(__rbit64(v80)) + (v79 & 0xFC)) >> 2) & 0xF;
      if (v87)
      {
        uint64_t v88 = *(unsigned int *)(_X11 + 4 * v87);
        if (v88 < v83) {
          break;
        }
        _X0 = v85 + v88;
        __asm { PRFM            #0, [X0] }
        v131[v82++] = v88;
        --v15;
      }
      v80 &= v80 - 1;
    }
    while (v80 && v15);
    if (v82)
    {
      int v128 = a4;
      int v91 = *(_DWORD *)a2;
      int v126 = v8 - v10 + v86 + 3;
      uint64_t v92 = v131;
      do
      {
        unsigned int v94 = *v92++;
        unsigned int v93 = v94;
        uint64_t v95 = v85 + v94;
        if (*(_DWORD *)v95 == v91)
        {
          unsigned int v96 = (void *)a3;
          unint64_t v97 = sub_1DD2A6010((void *)((char *)a2 + 4), (char *)(v95 + 4), a3, v84, v130);
          a3 = (unint64_t)v96;
          if (v97 + 4 > v75)
          {
            *int v128 = v126 - v93;
            unint64_t v75 = v97 + 4;
            if ((void *)((char *)a2 + v97 + 4) == v96) {
              break;
            }
          }
        }
        --v82;
      }
      while (v82);
    }
  }
  return v75;
}

unint64_t sub_1DD2C8490(uint64_t a1, void *a2, unint64_t a3, void *a4)
{
  uint64_t v139 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 112);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 8);
  unsigned int v8 = a2 - v7;
  int v9 = *(_DWORD *)(a1 + 256);
  uint64_t v10 = *(unsigned int *)(a1 + 24);
  if ((int)a2 - (int)v7 - *(_DWORD *)(a1 + 28) > (1 << v9) && *(_DWORD *)(a1 + 40) == 0) {
    unsigned int v12 = a2 - v7 - (1 << v9);
  }
  else {
    unsigned int v12 = *(_DWORD *)(a1 + 28);
  }
  unsigned int v13 = *(_DWORD *)(a1 + 268);
  if (v13 >= 5) {
    LOBYTE(v13) = 5;
  }
  uint64_t v14 = *(void *)(a1 + 96);
  int v15 = 1 << v13;
  uint64_t v16 = *(void *)(a1 + 248);
  unint64_t v17 = 0xCF1BBCDCBF9B0000 * *a2;
  unint64_t v18 = v17 >> (56 - *(_DWORD *)(v16 + 52));
  uint64_t v19 = (v18 >> 3) & 0x1FFFFFE0;
  _X15 = (const __int16 *)(*(void *)(v16 + 56) + v19);
  _X11 = *(void *)(v16 + 112) + 4 * v19;
  __asm
  {
    PRFM            #0, [X11]
    PRFM            #0, [X11,#0x40]
    PRFM            #0, [X15]
  }
  if (*(_DWORD *)(a1 + 300))
  {
    unint64_t v28 = (v17 ^ v14) >> (56 - *(_DWORD *)(a1 + 52));
    *(_DWORD *)(a1 + 44) = v8;
  }
  else
  {
    uint64_t v29 = a1 + 64;
    unint64_t v30 = *(unsigned int *)(a1 + 44);
    uint64_t v132 = *(unsigned int *)(a1 + 24);
    unint64_t v134 = a4;
    unint64_t v131 = a3;
    int v136 = *(_DWORD *)(a1 + 52);
    uint64_t v31 = *(void *)(a1 + 56);
    uint64_t v32 = *(void *)(a1 + 112);
    if (v8 - v30 >= 0x181)
    {
      if (v30 <= 0xFFFFFF9F)
      {
        unint64_t v104 = v30 + 96;
        do
        {
          unint64_t v105 = ((0xCF1BBCDCBF9B0000 * *(void *)(v7 + 8 + v30)) ^ *(void *)(a1 + 96)) >> (56
                                                                                               - v136);
          uint64_t v106 = (v105 >> 3) & 0x1FFFFFE0;
          _X25 = v5 + 4 * v106;
          __asm
          {
            PRFM            #0, [X25]
            PRFM            #0, [X25,#0x40]
          }
          _X24 = v6 + v106;
          __asm { PRFM            #0, [X24] }
          unint64_t v112 = *(unsigned int *)(v29 + 4 * (v30 & 7));
          *(_DWORD *)(v29 + 4 * (v30 & 7)) = v105;
          uint64_t v113 = (v112 >> 3) & 0x1FFFFFE0;
          uint64_t v114 = v5 + 4 * v113;
          int v115 = (unsigned char *)(v6 + v113);
          if (((*v115 - 1) & 0x1F) != 0) {
            uint64_t v116 = 0;
          }
          else {
            uint64_t v116 = 31;
          }
          uint64_t v117 = v116 + ((*v115 - 1) & 0x1F);
          *int v115 = v117;
          v115[v117] = v112;
          *(_DWORD *)(v114 + 4 * v117) = v30++;
        }
        while (v30 < v104);
        uint64_t v32 = *(void *)(a1 + 112);
        uint64_t v31 = *(void *)(a1 + 56);
      }
      uint64_t v118 = v8 - 32;
      LODWORD(v30) = v8 - 32;
      int v119 = a2 + 1 - (v7 + v118);
      if ((v119 + 1) < 8) {
        int v120 = v119 + 1;
      }
      else {
        int v120 = 8;
      }
      if ((unint64_t)a2 + 1 >= v7 + v118) {
        int v121 = v120;
      }
      else {
        int v121 = 0;
      }
      if (v118 < v121 + (int)v118)
      {
        uint64_t v122 = *(void *)(a1 + 96);
        int v123 = 56 - *(_DWORD *)(a1 + 52);
        do
        {
          unint64_t v124 = ((0xCF1BBCDCBF9B0000 * *(void *)(v7 + v118)) ^ v122) >> v123;
          uint64_t v125 = (v124 >> 3) & 0x1FFFFFE0;
          _X27 = v32 + 4 * v125;
          __asm
          {
            PRFM            #0, [X27]
            PRFM            #0, [X27,#0x40]
          }
          _X26 = v31 + v125;
          __asm { PRFM            #0, [X26] }
          *(_DWORD *)(a1 + 4 * (v118++ & 7) + 64) = v124;
          --v121;
        }
        while (v121);
      }
    }
    if (v30 < v8)
    {
      uint64_t v33 = *(void *)(a1 + 8) + 8;
      int v34 = 56 - *(_DWORD *)(a1 + 52);
      unint64_t v30 = v30;
      do
      {
        unint64_t v35 = ((0xCF1BBCDCBF9B0000 * *(void *)(v33 + v30)) ^ *(void *)(a1 + 96)) >> v34;
        uint64_t v36 = (v35 >> 3) & 0x1FFFFFE0;
        _X27 = v32 + 4 * v36;
        __asm
        {
          PRFM            #0, [X27]
          PRFM            #0, [X27,#0x40]
        }
        _X26 = v31 + v36;
        __asm { PRFM            #0, [X26] }
        unint64_t v42 = *(unsigned int *)(v29 + 4 * (v30 & 7));
        *(_DWORD *)(v29 + 4 * (v30 & 7)) = v35;
        uint64_t v43 = (v42 >> 3) & 0x1FFFFFE0;
        uint64_t v44 = v32 + 4 * v43;
        uint64_t v45 = (unsigned char *)(v31 + v43);
        if (((*v45 - 1) & 0x1F) != 0) {
          uint64_t v46 = 0;
        }
        else {
          uint64_t v46 = 31;
        }
        uint64_t v47 = v46 + ((*v45 - 1) & 0x1F);
        unsigned char *v45 = v47;
        v45[v47] = v42;
        *(_DWORD *)(v44 + 4 * v47) = v30++;
      }
      while (v30 < (a2 - v7));
    }
    *(_DWORD *)(a1 + 44) = v8;
    unint64_t v48 = ((0xCF1BBCDCBF9B0000 * *(void *)(v7 + v8 + 8)) ^ v14) >> (56 - v136);
    uint64_t v49 = (v48 >> 3) & 0x1FFFFFE0;
    _X4 = v5 + 4 * v49;
    __asm
    {
      PRFM            #0, [X4]
      PRFM            #0, [X4,#0x40]
    }
    _X2 = v6 + v49;
    __asm { PRFM            #0, [X2] }
    LODWORD(v28) = *(_DWORD *)(v29 + 4 * (v8 & 7));
    *(_DWORD *)(v29 + 4 * (v8 & 7)) = v48;
    uint64_t v10 = v132;
    a4 = v134;
    a3 = v131;
  }
  *(_DWORD *)(a1 + 104) += v28;
  uint64_t v55 = (v28 >> 3) & 0x1FFFFFE0;
  uint64_t v56 = v5 + 4 * v55;
  uint64_t v57 = (__int16 *)(v6 + v55);
  int16x8x2_t v140 = vld2q_s16(v57);
  char v58 = *(unsigned char *)v57;
  int8x16_t v59 = vdupq_n_s8(v28);
  unint64_t v60 = __ROR8__(vsli_n_s8(vshrn_n_s16((int16x8_t)vceqq_s8(v59, (int8x16_t)v140.val[0]), 6uLL), vshrn_n_s16((int16x8_t)vceqq_s8(v59, (int8x16_t)v140.val[1]), 6uLL), 4uLL), 2 * *(unsigned char *)v57) & 0x5555555555555555;
  if (v60)
  {
    uint64_t v61 = 0;
    int v62 = (2 * *(unsigned char *)v57);
    do
    {
      unsigned int v63 = ((__clz(__rbit64(v60)) + v62) >> 1) & 0x1F;
      if (v63)
      {
        uint64_t v64 = *(unsigned int *)(v56 + 4 * v63);
        if (v64 < v12) {
          break;
        }
        _X20 = v7 + v64;
        __asm { PRFM            #0, [X20] }
        v138[v61++] = v64;
        --v15;
      }
      v60 &= v60 - 1;
    }
    while (v60 && v15);
  }
  else
  {
    uint64_t v61 = 0;
  }
  uint64_t v67 = (v58 - 1) & 0x1F;
  if (((v58 - 1) & 0x1F) != 0) {
    uint64_t v68 = 0;
  }
  else {
    uint64_t v68 = 31;
  }
  uint64_t v69 = v68 + v67;
  *(unsigned char *)uint64_t v57 = v69;
  *((unsigned char *)v57 + v69) = v28;
  int v70 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v70 + 1;
  *(_DWORD *)(v56 + 4 * v69) = v70;
  if (v61)
  {
    uint64_t v71 = 0;
    unint64_t v72 = a3 - 7;
    int v73 = a2 + 1;
    uint64_t v74 = v7 + 8;
    unint64_t v75 = 3;
    while (1)
    {
      uint64_t v76 = v138[v71];
      uint64_t v77 = (void *)(v7 + v76);
      if (*(_DWORD *)(v7 + v76 + v75 - 3) != *(_DWORD *)((char *)a2 + v75 - 3)) {
        goto LABEL_50;
      }
      if (v72 <= (unint64_t)a2)
      {
        unint64_t v80 = a2;
      }
      else
      {
        unint64_t v78 = *a2 ^ *v77;
        if (v78)
        {
          unint64_t v79 = __clz(__rbit64(v78)) >> 3;
          goto LABEL_48;
        }
        while (1)
        {
          unint64_t v80 = (void *)((char *)v73 + v78);
          if ((unint64_t)v73 + v78 >= v72) {
            break;
          }
          uint64_t v81 = *(void *)(v74 + v76 + v78);
          v78 += 8;
          unint64_t v82 = *v80 ^ v81;
          if (v82)
          {
            unint64_t v79 = v78 + (__clz(__rbit64(v82)) >> 3);
            goto LABEL_48;
          }
        }
        uint64_t v77 = (void *)(v74 + v76 + v78);
      }
      if ((unint64_t)v80 < a3 - 3 && *(_DWORD *)v77 == *(_DWORD *)v80)
      {
        unint64_t v80 = (void *)((char *)v80 + 4);
        uint64_t v77 = (void *)((char *)v77 + 4);
      }
      if ((unint64_t)v80 < a3 - 1 && *(unsigned __int16 *)v77 == *(unsigned __int16 *)v80)
      {
        unint64_t v80 = (void *)((char *)v80 + 2);
        uint64_t v77 = (void *)((char *)v77 + 2);
      }
      if ((unint64_t)v80 < a3 && *(unsigned __int8 *)v77 == *(unsigned __int8 *)v80) {
        unint64_t v80 = (void *)((char *)v80 + 1);
      }
      unint64_t v79 = (char *)v80 - (char *)a2;
LABEL_48:
      if (v79 > v75)
      {
        *a4 = v8 + 3 - v76;
        unint64_t v75 = v79;
        if ((void *)((char *)a2 + v79) == (void *)a3) {
          goto LABEL_57;
        }
      }
LABEL_50:
      ++v71;
      unint64_t v79 = v75;
      if (v71 == v61) {
        goto LABEL_57;
      }
    }
  }
  unint64_t v79 = 3;
LABEL_57:
  char v83 = 2 * *(unsigned char *)_X15;
  int16x8x2_t v141 = vld2q_s16(_X15);
  int8x16_t v84 = vdupq_n_s8(v18);
  unint64_t v85 = __ROR8__(vsli_n_s8(vshrn_n_s16((int16x8_t)vceqq_s8(v84, (int8x16_t)v141.val[0]), 6uLL), vshrn_n_s16((int16x8_t)vceqq_s8(v84, (int8x16_t)v141.val[1]), 6uLL), 4uLL), v83) & 0x5555555555555555;
  if (v85) {
    BOOL v86 = v15 == 0;
  }
  else {
    BOOL v86 = 1;
  }
  if (!v86)
  {
    uint64_t v87 = 0;
    unint64_t v137 = (void *)(v7 + v10);
    unsigned int v88 = *(_DWORD *)(v16 + 24);
    uint64_t v89 = *(char **)v16;
    uint64_t v90 = *(void *)(v16 + 8);
    int v91 = *(void *)v16 - v90;
    do
    {
      unsigned int v92 = ((__clz(__rbit64(v85)) + (v83 & 0xFE)) >> 1) & 0x1F;
      if (v92)
      {
        uint64_t v93 = *(unsigned int *)(_X11 + 4 * v92);
        if (v93 < v88) {
          break;
        }
        _X0 = v90 + v93;
        __asm { PRFM            #0, [X0] }
        v138[v87++] = v93;
        --v15;
      }
      v85 &= v85 - 1;
    }
    while (v85 && v15);
    if (v87)
    {
      unsigned int v135 = a4;
      int v96 = *(_DWORD *)a2;
      int v133 = v8 - v10 + v91 + 3;
      unint64_t v97 = v138;
      do
      {
        unsigned int v99 = *v97++;
        unsigned int v98 = v99;
        uint64_t v100 = v90 + v99;
        if (*(_DWORD *)v100 == v96)
        {
          uint64_t v101 = (void *)a3;
          unint64_t v102 = sub_1DD2A6010((void *)((char *)a2 + 4), (char *)(v100 + 4), a3, v89, v137);
          a3 = (unint64_t)v101;
          if (v102 + 4 > v79)
          {
            void *v135 = v133 - v98;
            unint64_t v79 = v102 + 4;
            if ((void *)((char *)a2 + v102 + 4) == v101) {
              break;
            }
          }
        }
        --v87;
      }
      while (v87);
    }
  }
  return v79;
}

unint64_t sub_1DD2C8B60(uint64_t a1, void *a2, unint64_t a3, void *a4)
{
  uint64_t v145 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 112);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 8);
  unsigned int v8 = a2 - v7;
  int v9 = *(_DWORD *)(a1 + 256);
  uint64_t v10 = *(unsigned int *)(a1 + 24);
  if ((int)a2 - (int)v7 - *(_DWORD *)(a1 + 28) > (1 << v9) && *(_DWORD *)(a1 + 40) == 0) {
    unsigned int v12 = a2 - v7 - (1 << v9);
  }
  else {
    unsigned int v12 = *(_DWORD *)(a1 + 28);
  }
  unsigned int v13 = *(_DWORD *)(a1 + 268);
  if (v13 >= 6) {
    LOBYTE(v13) = 6;
  }
  uint64_t v14 = *(void *)(a1 + 96);
  int v15 = 1 << v13;
  uint64_t v16 = *(void *)(a1 + 248);
  unint64_t v17 = 0xCF1BBCDCBF9B0000 * *a2;
  unint64_t v18 = v17 >> (56 - *(_DWORD *)(v16 + 52));
  uint64_t v19 = (v18 >> 2) & 0x3FFFFFC0;
  _X14 = (const char *)(*(void *)(v16 + 56) + v19);
  _X11 = *(void *)(v16 + 112) + 4 * v19;
  __asm
  {
    PRFM            #0, [X11]
    PRFM            #0, [X11,#0x40]
    PRFM            #0, [X14]
    PRFM            #0, [X14,#0x20]
  }
  if (*(_DWORD *)(a1 + 300))
  {
    unint64_t v29 = (v17 ^ v14) >> (56 - *(_DWORD *)(a1 + 52));
    *(_DWORD *)(a1 + 44) = v8;
  }
  else
  {
    uint64_t v30 = a1 + 64;
    unint64_t v31 = *(unsigned int *)(a1 + 44);
    uint64_t v138 = *(unsigned int *)(a1 + 24);
    int16x8x2_t v140 = a4;
    unint64_t v137 = a3;
    int v142 = *(_DWORD *)(a1 + 52);
    uint64_t v32 = *(void *)(a1 + 56);
    uint64_t v33 = *(void *)(a1 + 112);
    if (v8 - v31 >= 0x181)
    {
      if (v31 <= 0xFFFFFF9F)
      {
        unint64_t v108 = v31 + 96;
        do
        {
          unint64_t v109 = ((0xCF1BBCDCBF9B0000 * *(void *)(v7 + 8 + v31)) ^ *(void *)(a1 + 96)) >> (56
                                                                                               - v142);
          uint64_t v110 = (v109 >> 2) & 0x3FFFFFC0;
          _X25 = v5 + 4 * v110;
          __asm
          {
            PRFM            #0, [X25]
            PRFM            #0, [X25,#0x40]
          }
          _X24 = v6 + v110;
          __asm
          {
            PRFM            #0, [X24]
            PRFM            #0, [X24,#0x20]
          }
          unint64_t v117 = *(unsigned int *)(v30 + 4 * (v31 & 7));
          *(_DWORD *)(v30 + 4 * (v31 & 7)) = v109;
          uint64_t v118 = (v117 >> 2) & 0x3FFFFFC0;
          uint64_t v119 = v5 + 4 * v118;
          int v120 = (unsigned char *)(v6 + v118);
          if (((*v120 - 1) & 0x3F) != 0) {
            uint64_t v121 = 0;
          }
          else {
            uint64_t v121 = 63;
          }
          uint64_t v122 = v121 + ((*v120 - 1) & 0x3F);
          *int v120 = v122;
          v120[v122] = v117;
          *(_DWORD *)(v119 + 4 * v122) = v31++;
        }
        while (v31 < v108);
        uint64_t v33 = *(void *)(a1 + 112);
        uint64_t v32 = *(void *)(a1 + 56);
      }
      uint64_t v123 = v8 - 32;
      LODWORD(v31) = v8 - 32;
      int v124 = a2 + 1 - (v7 + v123);
      if ((v124 + 1) < 8) {
        int v125 = v124 + 1;
      }
      else {
        int v125 = 8;
      }
      if ((unint64_t)a2 + 1 >= v7 + v123) {
        int v126 = v125;
      }
      else {
        int v126 = 0;
      }
      if (v123 < v126 + (int)v123)
      {
        uint64_t v127 = *(void *)(a1 + 96);
        int v128 = 56 - *(_DWORD *)(a1 + 52);
        do
        {
          unint64_t v129 = ((0xCF1BBCDCBF9B0000 * *(void *)(v7 + v123)) ^ v127) >> v128;
          uint64_t v130 = (v129 >> 2) & 0x3FFFFFC0;
          _X27 = v33 + 4 * v130;
          __asm
          {
            PRFM            #0, [X27]
            PRFM            #0, [X27,#0x40]
          }
          _X26 = v32 + v130;
          __asm
          {
            PRFM            #0, [X26]
            PRFM            #0, [X26,#0x20]
          }
          *(_DWORD *)(a1 + 4 * (v123++ & 7) + 64) = v129;
          --v126;
        }
        while (v126);
      }
    }
    if (v31 < v8)
    {
      uint64_t v34 = *(void *)(a1 + 8) + 8;
      int v35 = 56 - *(_DWORD *)(a1 + 52);
      unint64_t v31 = v31;
      do
      {
        unint64_t v36 = ((0xCF1BBCDCBF9B0000 * *(void *)(v34 + v31)) ^ *(void *)(a1 + 96)) >> v35;
        uint64_t v37 = (v36 >> 2) & 0x3FFFFFC0;
        _X27 = v33 + 4 * v37;
        __asm
        {
          PRFM            #0, [X27]
          PRFM            #0, [X27,#0x40]
        }
        _X26 = v32 + v37;
        __asm
        {
          PRFM            #0, [X26]
          PRFM            #0, [X26,#0x20]
        }
        unint64_t v44 = *(unsigned int *)(v30 + 4 * (v31 & 7));
        *(_DWORD *)(v30 + 4 * (v31 & 7)) = v36;
        uint64_t v45 = (v44 >> 2) & 0x3FFFFFC0;
        uint64_t v46 = v33 + 4 * v45;
        uint64_t v47 = (unsigned char *)(v32 + v45);
        if (((*v47 - 1) & 0x3F) != 0) {
          uint64_t v48 = 0;
        }
        else {
          uint64_t v48 = 63;
        }
        uint64_t v49 = v48 + ((*v47 - 1) & 0x3F);
        *uint64_t v47 = v49;
        v47[v49] = v44;
        *(_DWORD *)(v46 + 4 * v49) = v31++;
      }
      while (v31 < (a2 - v7));
    }
    *(_DWORD *)(a1 + 44) = v8;
    unint64_t v50 = ((0xCF1BBCDCBF9B0000 * *(void *)(v7 + v8 + 8)) ^ v14) >> (56 - v142);
    uint64_t v51 = (v50 >> 2) & 0x3FFFFFC0;
    _X4 = v5 + 4 * v51;
    __asm
    {
      PRFM            #0, [X4]
      PRFM            #0, [X4,#0x40]
    }
    _X2 = v6 + v51;
    __asm
    {
      PRFM            #0, [X2]
      PRFM            #0, [X2,#0x20]
    }
    LODWORD(v29) = *(_DWORD *)(v30 + 4 * (v8 & 7));
    *(_DWORD *)(v30 + 4 * (v8 & 7)) = v50;
    uint64_t v10 = v138;
    a4 = v140;
    a3 = v137;
  }
  *(_DWORD *)(a1 + 104) += v29;
  uint64_t v58 = (v29 >> 2) & 0x3FFFFFC0;
  uint64_t v59 = v5 + 4 * v58;
  unint64_t v60 = (char *)(v6 + v58);
  char v61 = *v60;
  int8x16x4_t v146 = vld4q_s8(v60);
  int8x16_t v62 = vdupq_n_s8(v29);
  v146.val[0] = vsriq_n_s8(vsriq_n_s8(vceqq_s8(v146.val[3], v62), vceqq_s8(v146.val[2], v62), 1uLL), vsriq_n_s8(vceqq_s8(v146.val[1], v62), vceqq_s8(v146.val[0], v62), 1uLL), 2uLL);
  int8x8_t v63 = vshrn_n_s16((int16x8_t)vsriq_n_s8(v146.val[0], v146.val[0], 4uLL), 4uLL);
  uint64_t v64 = 0;
  if (v63)
  {
    unint64_t v65 = __ROR8__(*(void *)&v63, v61);
    do
    {
      unsigned int v66 = (__clz(__rbit64(v65)) + v61) & 0x3F;
      if (v66)
      {
        uint64_t v67 = *(unsigned int *)(v59 + 4 * v66);
        if (v67 < v12) {
          break;
        }
        _X19 = v7 + v67;
        __asm { PRFM            #0, [X19] }
        v144[v64++] = v67;
        --v15;
      }
      v65 &= v65 - 1;
    }
    while (v65 && v15);
  }
  uint64_t v70 = (v61 - 1) & 0x3F;
  if (((v61 - 1) & 0x3F) != 0) {
    uint64_t v71 = 0;
  }
  else {
    uint64_t v71 = 63;
  }
  uint64_t v72 = v71 + v70;
  *unint64_t v60 = v72;
  v60[v72] = v29;
  int v73 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v73 + 1;
  *(_DWORD *)(v59 + 4 * v72) = v73;
  if (v64)
  {
    uint64_t v74 = 0;
    unint64_t v75 = a3 - 7;
    uint64_t v76 = a2 + 1;
    uint64_t v77 = v7 + 8;
    unint64_t v78 = 3;
    while (1)
    {
      uint64_t v79 = v144[v74];
      unint64_t v80 = (void *)(v7 + v79);
      if (*(_DWORD *)(v7 + v79 + v78 - 3) != *(_DWORD *)((char *)a2 + v78 - 3)) {
        goto LABEL_48;
      }
      if (v75 <= (unint64_t)a2)
      {
        char v83 = a2;
      }
      else
      {
        unint64_t v81 = *a2 ^ *v80;
        if (v81)
        {
          unint64_t v82 = __clz(__rbit64(v81)) >> 3;
          goto LABEL_46;
        }
        while (1)
        {
          char v83 = (void *)((char *)v76 + v81);
          if ((unint64_t)v76 + v81 >= v75) {
            break;
          }
          uint64_t v84 = *(void *)(v77 + v79 + v81);
          v81 += 8;
          unint64_t v85 = *v83 ^ v84;
          if (v85)
          {
            unint64_t v82 = v81 + (__clz(__rbit64(v85)) >> 3);
            goto LABEL_46;
          }
        }
        unint64_t v80 = (void *)(v77 + v79 + v81);
      }
      if ((unint64_t)v83 < a3 - 3 && *(_DWORD *)v80 == *(_DWORD *)v83)
      {
        char v83 = (void *)((char *)v83 + 4);
        unint64_t v80 = (void *)((char *)v80 + 4);
      }
      if ((unint64_t)v83 < a3 - 1 && *(unsigned __int16 *)v80 == *(unsigned __int16 *)v83)
      {
        char v83 = (void *)((char *)v83 + 2);
        unint64_t v80 = (void *)((char *)v80 + 2);
      }
      if ((unint64_t)v83 < a3 && *(unsigned __int8 *)v80 == *(unsigned __int8 *)v83) {
        char v83 = (void *)((char *)v83 + 1);
      }
      unint64_t v82 = (char *)v83 - (char *)a2;
LABEL_46:
      if (v82 > v78)
      {
        *a4 = v8 + 3 - v79;
        unint64_t v78 = v82;
        if ((void *)((char *)a2 + v82) == (void *)a3) {
          goto LABEL_55;
        }
      }
LABEL_48:
      ++v74;
      unint64_t v82 = v78;
      if (v74 == v64) {
        goto LABEL_55;
      }
    }
  }
  unint64_t v82 = 3;
LABEL_55:
  int8x16x4_t v147 = vld4q_s8(_X14);
  int8x16_t v86 = vdupq_n_s8(v18);
  v147.val[0] = vsriq_n_s8(vsriq_n_s8(vceqq_s8(v147.val[3], v86), vceqq_s8(v147.val[2], v86), 1uLL), vsriq_n_s8(vceqq_s8(v147.val[1], v86), vceqq_s8(v147.val[0], v86), 1uLL), 2uLL);
  int8x8_t v87 = vshrn_n_s16((int16x8_t)vsriq_n_s8(v147.val[0], v147.val[0], 4uLL), 4uLL);
  if (v87) {
    BOOL v88 = v15 == 0;
  }
  else {
    BOOL v88 = 1;
  }
  if (!v88)
  {
    uint64_t v89 = 0;
    unsigned int v143 = (void *)(v7 + v10);
    unsigned int v90 = *(_DWORD *)(v16 + 24);
    int v91 = *(char **)v16;
    uint64_t v92 = *(void *)(v16 + 8);
    int v93 = *(void *)v16 - v92;
    char v94 = *_X14;
    unint64_t v95 = __ROR8__(*(void *)&v87, *_X14);
    do
    {
      unsigned int v96 = (__clz(__rbit64(v95)) + v94) & 0x3F;
      if (v96)
      {
        uint64_t v97 = *(unsigned int *)(_X11 + 4 * v96);
        if (v97 < v90) {
          break;
        }
        _X0 = v92 + v97;
        __asm { PRFM            #0, [X0] }
        v144[v89++] = v97;
        --v15;
      }
      v95 &= v95 - 1;
    }
    while (v95 && v15);
    if (v89)
    {
      int16x8x2_t v141 = a4;
      int v100 = *(_DWORD *)a2;
      int v139 = v8 - v10 + v93 + 3;
      uint64_t v101 = v144;
      do
      {
        unsigned int v103 = *v101++;
        unsigned int v102 = v103;
        uint64_t v104 = v92 + v103;
        if (*(_DWORD *)v104 == v100)
        {
          unint64_t v105 = (void *)a3;
          unint64_t v106 = sub_1DD2A6010((void *)((char *)a2 + 4), (char *)(v104 + 4), a3, v91, v143);
          a3 = (unint64_t)v105;
          if (v106 + 4 > v82)
          {
            *int16x8x2_t v141 = v139 - v102;
            unint64_t v82 = v106 + 4;
            if ((void *)((char *)a2 + v106 + 4) == v105) {
              break;
            }
          }
        }
        --v89;
      }
      while (v89);
    }
  }
  return v82;
}

unint64_t sub_1DD2C9244(uint64_t a1, void *a2, unint64_t a3, void *a4)
{
  uint64_t v4 = *(void *)(a1 + 128);
  int v5 = *(_DWORD *)(a1 + 260);
  unsigned int v6 = 1 << v5;
  int v7 = (1 << v5) - 1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(unsigned int *)(a1 + 24);
  uint64_t v84 = (void *)(v8 + v9);
  unsigned int v10 = a2 - v8;
  unsigned int v11 = 1 << *(_DWORD *)(a1 + 256);
  if ((int)a2 - (int)v8 - *(_DWORD *)(a1 + 28) > v11 && *(_DWORD *)(a1 + 40) == 0) {
    unsigned int v13 = a2 - v8 - v11;
  }
  else {
    unsigned int v13 = *(_DWORD *)(a1 + 28);
  }
  _CF = v10 >= v6;
  unsigned int v15 = v10 - v6;
  if (_CF) {
    unsigned int v16 = v15;
  }
  else {
    unsigned int v16 = 0;
  }
  unsigned int v17 = 1 << *(_DWORD *)(a1 + 268);
  uint64_t v18 = *(void *)(a1 + 248);
  uint64_t v19 = (-1640531535 * *(_DWORD *)a2) >> (34 - *(_DWORD *)(v18 + 264));
  uint64_t v20 = *(void *)(v18 + 112);
  _X2 = v20 + 16 * v19;
  __asm { PRFM            #0, [X2] }
  int v25 = *(_DWORD *)(a1 + 300);
  uint64_t v26 = *(void *)(a1 + 112);
  int v27 = ~(-1 << v5);
  uint64_t v28 = *(unsigned int *)(a1 + 44);
  int v29 = 32 - *(_DWORD *)(a1 + 264);
  if (v28 <= v10) {
    uint64_t v30 = v10;
  }
  else {
    uint64_t v30 = v28;
  }
  do
  {
    if (v30 == v28) {
      break;
    }
    unsigned int v31 = (-1640531535 * *(_DWORD *)(v8 + v28)) >> v29;
    *(_DWORD *)(v4 + 4 * (v28 & v27)) = *(_DWORD *)(v26 + 4 * v31);
    *(_DWORD *)(v26 + 4 * v31) = v28++;
  }
  while (!v25);
  *(_DWORD *)(a1 + 44) = v10;
  int v32 = *(_DWORD *)a2;
  unsigned int v33 = *(_DWORD *)(v26 + 4 * ((-1640531535 * *(_DWORD *)a2) >> v29));
  int v80 = a2 - v8;
  if (v33 >= v13)
  {
    unint64_t v64 = a3 - 7;
    unsigned int v65 = v10 + 3;
    unsigned int v66 = a2 + 1;
    uint64_t v67 = v8 + 8;
    unint64_t v34 = 3;
    while (1)
    {
      uint64_t v68 = v33;
      uint64_t v69 = (void *)(v8 + v33);
      if (*(_DWORD *)((char *)v69 + v34 - 3) != *(_DWORD *)((char *)a2 + v34 - 3)) {
        goto LABEL_61;
      }
      if (v64 <= (unint64_t)a2)
      {
        uint64_t v72 = a2;
      }
      else
      {
        unint64_t v70 = *a2 ^ *v69;
        if (v70)
        {
          unint64_t v71 = __clz(__rbit64(v70)) >> 3;
          goto LABEL_59;
        }
        while (1)
        {
          uint64_t v72 = (void *)((char *)v66 + v70);
          if ((unint64_t)v66 + v70 >= v64) {
            break;
          }
          uint64_t v73 = *(void *)(v67 + v68 + v70);
          v70 += 8;
          unint64_t v74 = *v72 ^ v73;
          if (v74)
          {
            unint64_t v71 = v70 + (__clz(__rbit64(v74)) >> 3);
            goto LABEL_59;
          }
        }
        uint64_t v69 = (void *)(v67 + v68 + v70);
      }
      if ((unint64_t)v72 < a3 - 3 && *(_DWORD *)v69 == *(_DWORD *)v72)
      {
        uint64_t v72 = (void *)((char *)v72 + 4);
        uint64_t v69 = (void *)((char *)v69 + 4);
      }
      if ((unint64_t)v72 < a3 - 1 && *(unsigned __int16 *)v69 == *(unsigned __int16 *)v72)
      {
        uint64_t v72 = (void *)((char *)v72 + 2);
        uint64_t v69 = (void *)((char *)v69 + 2);
      }
      if ((unint64_t)v72 < a3 && *(unsigned __int8 *)v69 == *(unsigned __int8 *)v72) {
        uint64_t v72 = (void *)((char *)v72 + 1);
      }
      unint64_t v71 = (char *)v72 - (char *)a2;
LABEL_59:
      if (v71 > v34)
      {
        *a4 = v65 - v68;
        unint64_t v34 = v71;
        if ((void *)((char *)a2 + v71) == (void *)a3)
        {
          unint64_t v34 = v71;
          goto LABEL_17;
        }
      }
LABEL_61:
      if (v68 > v16)
      {
        if (--v17)
        {
          unsigned int v33 = *(_DWORD *)(v4 + 4 * (v68 & v7));
          if (v33 >= v13) {
            continue;
          }
        }
      }
      goto LABEL_17;
    }
  }
  unint64_t v34 = 3;
LABEL_17:
  uint64_t v35 = 0;
  unint64_t v36 = *(char **)v18;
  uint64_t v37 = *(void *)(v18 + 8);
  int v38 = *(void *)v18 - v37 - v9;
  do
  {
    _X14 = v37 + *(unsigned int *)(v20 + 16 * v19 + v35);
    __asm { PRFM            #0, [X14] }
    v35 += 4;
  }
  while (v35 != 12);
  if (v17 >= 3) {
    uint64_t v41 = 3;
  }
  else {
    uint64_t v41 = v17;
  }
  unint64_t v42 = *(unsigned int *)(v20 + ((16 * v19) | 0xC));
  uint64_t v43 = *(void *)(v18 + 128);
  _X9 = v43 + 4 * (v42 >> 8);
  __asm { PRFM            #0, [X9] }
  int v77 = v38;
  uint64_t v75 = v43;
  unint64_t v76 = v42 >> 8;
  int v78 = *(_DWORD *)(v20 + ((16 * v19) | 0xC));
  int v79 = v41;
  if (v41)
  {
    uint64_t v46 = (void *)((char *)a2 + 4);
    int v81 = v80 + v38 + 3;
    uint64_t v47 = (unsigned int *)(v20 + 16 * v19);
    do
    {
      unsigned int v49 = *v47++;
      uint64_t v48 = v49;
      if (!v49) {
        return v34;
      }
      if (*(_DWORD *)(v37 + v48) == v32)
      {
        unint64_t v50 = sub_1DD2A6010(v46, (char *)(v37 + v48 + 4), a3, v36, v84);
        unint64_t v51 = v50 + 4;
        if (v50 + 4 > v34)
        {
          *a4 = (v81 - v48);
          unint64_t v34 = v50 + 4;
          if ((void *)((char *)a2 + v51) == (void *)a3) {
            return v51;
          }
        }
      }
    }
    while (--v41);
  }
  if (v17 - v79 >= v78) {
    uint64_t v52 = v78;
  }
  else {
    uint64_t v52 = v17 - v79;
  }
  if (!v52) {
    return v34;
  }
  uint64_t v53 = (unsigned int *)(v75 + 4 * v76);
  uint64_t v54 = v52;
  do
  {
    unsigned int v55 = *v53++;
    _X10 = v37 + v55;
    __asm { PRFM            #0, [X10] }
    --v54;
  }
  while (v54);
  uint64_t v58 = (unsigned int *)(v75 + 4 * v76);
  unint64_t v51 = v34;
  do
  {
    unsigned int v60 = *v58++;
    unsigned int v59 = v60;
    uint64_t v61 = v37 + v60;
    if (*(_DWORD *)v61 == v32)
    {
      unint64_t v62 = sub_1DD2A6010((void *)((char *)a2 + 4), (char *)(v61 + 4), a3, v36, v84);
      if (v62 + 4 > v51)
      {
        *a4 = v80 + v77 + 3 - v59;
        unint64_t v51 = v62 + 4;
        if ((void *)((char *)a2 + v62 + 4) == (void *)a3) {
          break;
        }
      }
    }
    LODWORD(v52) = v52 - 1;
  }
  while (v52);
  return v51;
}

unint64_t sub_1DD2C96AC(uint64_t a1, void *a2, unint64_t a3, void *a4)
{
  uint64_t v5 = *(void *)(a1 + 128);
  int v6 = *(_DWORD *)(a1 + 260);
  unsigned int v7 = 1 << v6;
  int v8 = (1 << v6) - 1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(unsigned int *)(a1 + 24);
  char v83 = (void *)(v9 + v10);
  unsigned int v11 = a2 - v9;
  unsigned int v12 = 1 << *(_DWORD *)(a1 + 256);
  if ((int)a2 - (int)v9 - *(_DWORD *)(a1 + 28) > v12 && *(_DWORD *)(a1 + 40) == 0) {
    unsigned int v14 = a2 - v9 - v12;
  }
  else {
    unsigned int v14 = *(_DWORD *)(a1 + 28);
  }
  _CF = v11 >= v7;
  unsigned int v16 = v11 - v7;
  if (_CF) {
    unsigned int v17 = v16;
  }
  else {
    unsigned int v17 = 0;
  }
  unsigned int v18 = 1 << *(_DWORD *)(a1 + 268);
  uint64_t v19 = *(void *)(a1 + 248);
  unint64_t v20 = 0xCF1BBCDCBB000000 * *a2;
  unint64_t v21 = v20 >> (66 - *(_DWORD *)(v19 + 264));
  uint64_t v22 = *(void *)(v19 + 112);
  _X3 = v22 + 16 * v21;
  __asm { PRFM            #0, [X3] }
  int v27 = *(_DWORD *)(a1 + 300);
  uint64_t v28 = *(void *)(a1 + 112);
  int v29 = ~(-1 << v6);
  uint64_t v30 = *(unsigned int *)(a1 + 44);
  int v31 = 64 - *(_DWORD *)(a1 + 264);
  if (v30 <= v11) {
    uint64_t v32 = v11;
  }
  else {
    uint64_t v32 = v30;
  }
  do
  {
    if (v32 == v30) {
      break;
    }
    unint64_t v33 = (0xCF1BBCDCBB000000 * *(void *)(v9 + v30)) >> v31;
    *(_DWORD *)(v5 + 4 * (v30 & v29)) = *(_DWORD *)(v28 + 4 * v33);
    *(_DWORD *)(v28 + 4 * v33) = v30++;
  }
  while (!v27);
  *(_DWORD *)(a1 + 44) = v11;
  unsigned int v34 = *(_DWORD *)(v28 + 4 * (v20 >> v31));
  if (v34 >= v14)
  {
    unint64_t v64 = a3 - 7;
    unsigned int v65 = a2 + 1;
    uint64_t v66 = v9 + 8;
    unint64_t v35 = 3;
    while (1)
    {
      uint64_t v67 = v34;
      uint64_t v68 = (void *)(v9 + v34);
      if (*(_DWORD *)((char *)v68 + v35 - 3) != *(_DWORD *)((char *)a2 + v35 - 3)) {
        goto LABEL_61;
      }
      if (v64 <= (unint64_t)a2)
      {
        unint64_t v71 = a2;
      }
      else
      {
        unint64_t v69 = *a2 ^ *v68;
        if (v69)
        {
          unint64_t v70 = __clz(__rbit64(v69)) >> 3;
          goto LABEL_59;
        }
        uint64_t v72 = 0;
        while (1)
        {
          unint64_t v71 = &v65[v72];
          if ((unint64_t)&v65[v72] >= v64) {
            break;
          }
          uint64_t v73 = *(void *)(v66 + v67 + v72 * 8);
          ++v72;
          unint64_t v74 = *v71 ^ v73;
          if (v74)
          {
            unint64_t v70 = v72 * 8 + (__clz(__rbit64(v74)) >> 3);
            goto LABEL_59;
          }
        }
        uint64_t v68 = (void *)(v66 + v67 + v72 * 8);
      }
      if ((unint64_t)v71 < a3 - 3 && *(_DWORD *)v68 == *(_DWORD *)v71)
      {
        unint64_t v71 = (void *)((char *)v71 + 4);
        uint64_t v68 = (void *)((char *)v68 + 4);
      }
      if ((unint64_t)v71 < a3 - 1 && *(unsigned __int16 *)v68 == *(unsigned __int16 *)v71)
      {
        unint64_t v71 = (void *)((char *)v71 + 2);
        uint64_t v68 = (void *)((char *)v68 + 2);
      }
      if ((unint64_t)v71 < a3 && *(unsigned __int8 *)v68 == *(unsigned __int8 *)v71) {
        unint64_t v71 = (void *)((char *)v71 + 1);
      }
      unint64_t v70 = (char *)v71 - (char *)a2;
LABEL_59:
      if (v70 > v35)
      {
        *a4 = v11 + 3 - v67;
        unint64_t v35 = v70;
        if ((void *)((char *)a2 + v70) == (void *)a3)
        {
          unint64_t v35 = v70;
          goto LABEL_17;
        }
      }
LABEL_61:
      if (v67 > v17)
      {
        if (--v18)
        {
          unsigned int v34 = *(_DWORD *)(v5 + 4 * (v67 & v8));
          if (v34 >= v14) {
            continue;
          }
        }
      }
      goto LABEL_17;
    }
  }
  unint64_t v35 = 3;
LABEL_17:
  uint64_t v36 = 0;
  int v38 = *(char **)v19;
  uint64_t v37 = *(void *)(v19 + 8);
  int v39 = *(void *)v19 - v37 - v10;
  do
  {
    _X14 = v37 + *(unsigned int *)(v22 + 16 * v21 + v36);
    __asm { PRFM            #0, [X14] }
    v36 += 4;
  }
  while (v36 != 12);
  if (v18 >= 3) {
    uint64_t v42 = 3;
  }
  else {
    uint64_t v42 = v18;
  }
  uint64_t v43 = *(void *)(v19 + 128);
  _X9 = v43 + 4 * ((unint64_t)*(unsigned int *)(v22 + ((16 * v21) | 0xC)) >> 8);
  __asm { PRFM            #0, [X9] }
  int v77 = v39;
  unsigned int v78 = v11;
  uint64_t v75 = v43;
  unint64_t v76 = (unint64_t)*(unsigned int *)(v22 + ((16 * v21) | 0xC)) >> 8;
  int v79 = *(_DWORD *)(v22 + ((16 * v21) | 0xC));
  int v80 = v42;
  if (v42)
  {
    int v81 = v11 + v39 + 3;
    uint64_t v46 = (unsigned int *)(v22 + 16 * v21);
    do
    {
      unsigned int v48 = *v46++;
      uint64_t v47 = v48;
      if (!v48) {
        return v35;
      }
      if (*(_DWORD *)(v37 + v47) == *(_DWORD *)a2)
      {
        unint64_t v49 = sub_1DD2A6010((void *)((char *)a2 + 4), (char *)(v37 + v47 + 4), a3, v38, v83);
        unint64_t v50 = v49 + 4;
        if (v49 + 4 > v35)
        {
          *a4 = (v81 - v47);
          unint64_t v35 = v49 + 4;
          if ((void *)((char *)a2 + v50) == (void *)a3) {
            return v50;
          }
        }
      }
    }
    while (--v42);
  }
  if (v18 - v80 >= v79) {
    uint64_t v51 = v79;
  }
  else {
    uint64_t v51 = v18 - v80;
  }
  if (!v51) {
    return v35;
  }
  uint64_t v52 = (unsigned int *)(v75 + 4 * v76);
  uint64_t v53 = v51;
  do
  {
    unsigned int v54 = *v52++;
    _X10 = v37 + v54;
    __asm { PRFM            #0, [X10] }
    --v53;
  }
  while (v53);
  int v57 = *(_DWORD *)a2;
  uint64_t v58 = (unsigned int *)(v75 + 4 * v76);
  unint64_t v50 = v35;
  do
  {
    unsigned int v60 = *v58++;
    unsigned int v59 = v60;
    uint64_t v61 = v37 + v60;
    if (*(_DWORD *)v61 == v57)
    {
      unint64_t v62 = sub_1DD2A6010((void *)((char *)a2 + 4), (char *)(v61 + 4), a3, v38, v83);
      if (v62 + 4 > v50)
      {
        *a4 = v78 + v77 + 3 - v59;
        unint64_t v50 = v62 + 4;
        if ((void *)((char *)a2 + v62 + 4) == (void *)a3) {
          break;
        }
      }
    }
    LODWORD(v51) = v51 - 1;
  }
  while (v51);
  return v50;
}

unint64_t sub_1DD2C9B08(uint64_t a1, void *a2, unint64_t a3, void *a4)
{
  uint64_t v5 = *(void *)(a1 + 128);
  int v6 = *(_DWORD *)(a1 + 260);
  unsigned int v7 = 1 << v6;
  int v8 = (1 << v6) - 1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(unsigned int *)(a1 + 24);
  char v83 = (void *)(v9 + v10);
  unsigned int v11 = a2 - v9;
  unsigned int v12 = 1 << *(_DWORD *)(a1 + 256);
  if ((int)a2 - (int)v9 - *(_DWORD *)(a1 + 28) > v12 && *(_DWORD *)(a1 + 40) == 0) {
    unsigned int v14 = a2 - v9 - v12;
  }
  else {
    unsigned int v14 = *(_DWORD *)(a1 + 28);
  }
  _CF = v11 >= v7;
  unsigned int v16 = v11 - v7;
  if (_CF) {
    unsigned int v17 = v16;
  }
  else {
    unsigned int v17 = 0;
  }
  unsigned int v18 = 1 << *(_DWORD *)(a1 + 268);
  uint64_t v19 = *(void *)(a1 + 248);
  unint64_t v20 = 0xCF1BBCDCBF9B0000 * *a2;
  unint64_t v21 = v20 >> (66 - *(_DWORD *)(v19 + 264));
  uint64_t v22 = *(void *)(v19 + 112);
  _X3 = v22 + 16 * v21;
  __asm { PRFM            #0, [X3] }
  int v27 = *(_DWORD *)(a1 + 300);
  uint64_t v28 = *(void *)(a1 + 112);
  int v29 = ~(-1 << v6);
  uint64_t v30 = *(unsigned int *)(a1 + 44);
  int v31 = 64 - *(_DWORD *)(a1 + 264);
  if (v30 <= v11) {
    uint64_t v32 = v11;
  }
  else {
    uint64_t v32 = v30;
  }
  do
  {
    if (v32 == v30) {
      break;
    }
    unint64_t v33 = (0xCF1BBCDCBF9B0000 * *(void *)(v9 + v30)) >> v31;
    *(_DWORD *)(v5 + 4 * (v30 & v29)) = *(_DWORD *)(v28 + 4 * v33);
    *(_DWORD *)(v28 + 4 * v33) = v30++;
  }
  while (!v27);
  *(_DWORD *)(a1 + 44) = v11;
  unsigned int v34 = *(_DWORD *)(v28 + 4 * (v20 >> v31));
  if (v34 >= v14)
  {
    unint64_t v64 = a3 - 7;
    unsigned int v65 = a2 + 1;
    uint64_t v66 = v9 + 8;
    unint64_t v35 = 3;
    while (1)
    {
      uint64_t v67 = v34;
      uint64_t v68 = (void *)(v9 + v34);
      if (*(_DWORD *)((char *)v68 + v35 - 3) != *(_DWORD *)((char *)a2 + v35 - 3)) {
        goto LABEL_61;
      }
      if (v64 <= (unint64_t)a2)
      {
        unint64_t v71 = a2;
      }
      else
      {
        unint64_t v69 = *a2 ^ *v68;
        if (v69)
        {
          unint64_t v70 = __clz(__rbit64(v69)) >> 3;
          goto LABEL_59;
        }
        uint64_t v72 = 0;
        while (1)
        {
          unint64_t v71 = &v65[v72];
          if ((unint64_t)&v65[v72] >= v64) {
            break;
          }
          uint64_t v73 = *(void *)(v66 + v67 + v72 * 8);
          ++v72;
          unint64_t v74 = *v71 ^ v73;
          if (v74)
          {
            unint64_t v70 = v72 * 8 + (__clz(__rbit64(v74)) >> 3);
            goto LABEL_59;
          }
        }
        uint64_t v68 = (void *)(v66 + v67 + v72 * 8);
      }
      if ((unint64_t)v71 < a3 - 3 && *(_DWORD *)v68 == *(_DWORD *)v71)
      {
        unint64_t v71 = (void *)((char *)v71 + 4);
        uint64_t v68 = (void *)((char *)v68 + 4);
      }
      if ((unint64_t)v71 < a3 - 1 && *(unsigned __int16 *)v68 == *(unsigned __int16 *)v71)
      {
        unint64_t v71 = (void *)((char *)v71 + 2);
        uint64_t v68 = (void *)((char *)v68 + 2);
      }
      if ((unint64_t)v71 < a3 && *(unsigned __int8 *)v68 == *(unsigned __int8 *)v71) {
        unint64_t v71 = (void *)((char *)v71 + 1);
      }
      unint64_t v70 = (char *)v71 - (char *)a2;
LABEL_59:
      if (v70 > v35)
      {
        *a4 = v11 + 3 - v67;
        unint64_t v35 = v70;
        if ((void *)((char *)a2 + v70) == (void *)a3)
        {
          unint64_t v35 = v70;
          goto LABEL_17;
        }
      }
LABEL_61:
      if (v67 > v17)
      {
        if (--v18)
        {
          unsigned int v34 = *(_DWORD *)(v5 + 4 * (v67 & v8));
          if (v34 >= v14) {
            continue;
          }
        }
      }
      goto LABEL_17;
    }
  }
  unint64_t v35 = 3;
LABEL_17:
  uint64_t v36 = 0;
  int v38 = *(char **)v19;
  uint64_t v37 = *(void *)(v19 + 8);
  int v39 = *(void *)v19 - v37 - v10;
  do
  {
    _X14 = v37 + *(unsigned int *)(v22 + 16 * v21 + v36);
    __asm { PRFM            #0, [X14] }
    v36 += 4;
  }
  while (v36 != 12);
  if (v18 >= 3) {
    uint64_t v42 = 3;
  }
  else {
    uint64_t v42 = v18;
  }
  uint64_t v43 = *(void *)(v19 + 128);
  _X9 = v43 + 4 * ((unint64_t)*(unsigned int *)(v22 + ((16 * v21) | 0xC)) >> 8);
  __asm { PRFM            #0, [X9] }
  int v77 = v39;
  unsigned int v78 = v11;
  uint64_t v75 = v43;
  unint64_t v76 = (unint64_t)*(unsigned int *)(v22 + ((16 * v21) | 0xC)) >> 8;
  int v79 = *(_DWORD *)(v22 + ((16 * v21) | 0xC));
  int v80 = v42;
  if (v42)
  {
    int v81 = v11 + v39 + 3;
    uint64_t v46 = (unsigned int *)(v22 + 16 * v21);
    do
    {
      unsigned int v48 = *v46++;
      uint64_t v47 = v48;
      if (!v48) {
        return v35;
      }
      if (*(_DWORD *)(v37 + v47) == *(_DWORD *)a2)
      {
        unint64_t v49 = sub_1DD2A6010((void *)((char *)a2 + 4), (char *)(v37 + v47 + 4), a3, v38, v83);
        unint64_t v50 = v49 + 4;
        if (v49 + 4 > v35)
        {
          *a4 = (v81 - v47);
          unint64_t v35 = v49 + 4;
          if ((void *)((char *)a2 + v50) == (void *)a3) {
            return v50;
          }
        }
      }
    }
    while (--v42);
  }
  if (v18 - v80 >= v79) {
    uint64_t v51 = v79;
  }
  else {
    uint64_t v51 = v18 - v80;
  }
  if (!v51) {
    return v35;
  }
  uint64_t v52 = (unsigned int *)(v75 + 4 * v76);
  uint64_t v53 = v51;
  do
  {
    unsigned int v54 = *v52++;
    _X10 = v37 + v54;
    __asm { PRFM            #0, [X10] }
    --v53;
  }
  while (v53);
  int v57 = *(_DWORD *)a2;
  uint64_t v58 = (unsigned int *)(v75 + 4 * v76);
  unint64_t v50 = v35;
  do
  {
    unsigned int v60 = *v58++;
    unsigned int v59 = v60;
    uint64_t v61 = v37 + v60;
    if (*(_DWORD *)v61 == v57)
    {
      unint64_t v62 = sub_1DD2A6010((void *)((char *)a2 + 4), (char *)(v61 + 4), a3, v38, v83);
      if (v62 + 4 > v50)
      {
        *a4 = v78 + v77 + 3 - v59;
        unint64_t v50 = v62 + 4;
        if ((void *)((char *)a2 + v62 + 4) == (void *)a3) {
          break;
        }
      }
    }
    LODWORD(v51) = v51 - 1;
  }
  while (v51);
  return v50;
}

unint64_t sub_1DD2C9F64(uint64_t a1, void *a2, unint64_t a3, void *a4)
{
  uint64_t v146 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 112);
  uint64_t v7 = *(void *)(a1 + 56);
  int v8 = *(_DWORD *)(a1 + 52);
  uint64_t v9 = *(void *)(a1 + 8);
  unsigned int v10 = a2 - v9;
  unsigned int v11 = 1 << *(_DWORD *)(a1 + 256);
  uint64_t v12 = *(unsigned int *)(a1 + 24);
  unsigned int v13 = a2 - v9 - v11;
  _ZF = (int)a2 - (int)v9 - *(_DWORD *)(a1 + 28) > v11 && *(_DWORD *)(a1 + 40) == 0;
  if (!_ZF) {
    unsigned int v13 = *(_DWORD *)(a1 + 28);
  }
  unsigned int v15 = *(_DWORD *)(a1 + 268);
  uint64_t v16 = *(void *)(a1 + 248);
  char v17 = v15 - 4;
  if (v15 >= 4) {
    LOBYTE(v15) = 4;
  }
  uint64_t v18 = *(void *)(a1 + 96);
  int v19 = 1 << v15;
  unsigned int v20 = -1640531535 * *(_DWORD *)a2;
  uint64_t v21 = v20 >> (34 - *(unsigned char *)(v16 + 264));
  _X4 = *(void *)(v16 + 112) + 16 * v21;
  __asm { PRFM            #0, [X4] }
  int v27 = 1 << v17;
  if (!(!_ZF & _CF)) {
    int v27 = 0;
  }
  unint64_t v144 = a3;
  unsigned int v140 = a2 - v9;
  if (*(_DWORD *)(a1 + 300))
  {
    unsigned int v28 = (v20 ^ v18) >> (24 - v8);
    *(_DWORD *)(a1 + 44) = v10;
  }
  else
  {
    uint64_t v29 = a1 + 64;
    unint64_t v30 = *(unsigned int *)(a1 + 44);
    if (v10 - v30 >= 0x181)
    {
      uint64_t v31 = *(void *)(a1 + 56);
      uint64_t v32 = *(void *)(a1 + 112);
      if (v30 <= 0xFFFFFF9F)
      {
        unint64_t v110 = v30 + 96;
        do
        {
          unsigned int v111 = ((-1640531535 * *(_DWORD *)(v9 + 8 + v30)) ^ *(_DWORD *)(a1 + 96)) >> (24 - v8);
          uint64_t v112 = (v111 >> 4) & 0xFFFFFF0;
          _X23 = v6 + 4 * v112;
          __asm { PRFM            #0, [X23] }
          _X22 = v7 + v112;
          __asm { PRFM            #0, [X22] }
          unint64_t v117 = *(unsigned int *)(v29 + 4 * (v30 & 7));
          *(_DWORD *)(v29 + 4 * (v30 & 7)) = v111;
          uint64_t v118 = (v117 >> 4) & 0xFFFFFF0;
          uint64_t v119 = v6 + 4 * v118;
          int v120 = (unsigned char *)(v7 + v118);
          if (((*v120 - 1) & 0xF) != 0) {
            uint64_t v121 = 0;
          }
          else {
            uint64_t v121 = 15;
          }
          uint64_t v122 = v121 + ((*v120 - 1) & 0xF);
          *int v120 = v122;
          v120[v122] = v117;
          *(_DWORD *)(v119 + 4 * v122) = v30++;
        }
        while (v30 < v110);
        uint64_t v32 = *(void *)(a1 + 112);
        uint64_t v31 = *(void *)(a1 + 56);
        unsigned int v10 = a2 - v9;
      }
      uint64_t v123 = v10 - 32;
      LODWORD(v30) = v10 - 32;
      int v124 = a2 + 1 - (v9 + v123);
      if ((v124 + 1) < 8) {
        int v125 = v124 + 1;
      }
      else {
        int v125 = 8;
      }
      if ((unint64_t)a2 + 1 >= v9 + v123) {
        int v126 = v125;
      }
      else {
        int v126 = 0;
      }
      if (v123 < v126 + (int)v123)
      {
        unsigned int v127 = *(_DWORD *)(a1 + 96);
        int v128 = 24 - *(_DWORD *)(a1 + 52);
        do
        {
          unsigned int v129 = ((-1640531535 * *(_DWORD *)(v9 + v123)) ^ v127) >> v128;
          uint64_t v130 = (v129 >> 4) & 0xFFFFFF0;
          _X25 = v32 + 4 * v130;
          __asm { PRFM            #0, [X25] }
          _X24 = v31 + v130;
          __asm { PRFM            #0, [X24] }
          *(_DWORD *)(a1 + 4 * (v123++ & 7) + 64) = v129;
          --v126;
        }
        while (v126);
        unsigned int v10 = a2 - v9;
      }
    }
    else
    {
      uint64_t v31 = *(void *)(a1 + 56);
      uint64_t v32 = *(void *)(a1 + 112);
    }
    if (v30 < v10)
    {
      uint64_t v33 = *(void *)(a1 + 8) + 8;
      int v34 = 24 - *(_DWORD *)(a1 + 52);
      unint64_t v30 = v30;
      do
      {
        unsigned int v35 = ((-1640531535 * *(_DWORD *)(v33 + v30)) ^ *(_DWORD *)(a1 + 96)) >> v34;
        uint64_t v36 = (v35 >> 4) & 0xFFFFFF0;
        _X25 = v32 + 4 * v36;
        __asm { PRFM            #0, [X25] }
        _X24 = v31 + v36;
        __asm { PRFM            #0, [X24] }
        unint64_t v41 = *(unsigned int *)(v29 + 4 * (v30 & 7));
        *(_DWORD *)(v29 + 4 * (v30 & 7)) = v35;
        uint64_t v42 = (v41 >> 4) & 0xFFFFFF0;
        uint64_t v43 = v32 + 4 * v42;
        unint64_t v44 = (unsigned char *)(v31 + v42);
        if (((*v44 - 1) & 0xF) != 0) {
          uint64_t v45 = 0;
        }
        else {
          uint64_t v45 = 15;
        }
        uint64_t v46 = v45 + ((*v44 - 1) & 0xF);
        *unint64_t v44 = v46;
        v44[v46] = v41;
        *(_DWORD *)(v43 + 4 * v46) = v30++;
      }
      while (v30 < v140);
    }
    unsigned int v10 = a2 - v9;
    *(_DWORD *)(a1 + 44) = v140;
    unsigned int v47 = ((-1640531535 * *(_DWORD *)(v9 + v140 + 8)) ^ v18) >> (24 - v8);
    uint64_t v48 = (v47 >> 4) & 0xFFFFFF0;
    _X2 = v6 + 4 * v48;
    __asm { PRFM            #0, [X2] }
    _X17 = v7 + v48;
    __asm { PRFM            #0, [X17] }
    unsigned int v28 = *(_DWORD *)(v29 + 4 * (v140 & 7));
    *(_DWORD *)(v29 + 4 * (v140 & 7)) = v47;
  }
  *(_DWORD *)(a1 + 104) += v28;
  uint64_t v53 = (v28 >> 4) & 0xFFFFFF0;
  uint64_t v54 = v6 + 4 * v53;
  unsigned int v55 = (int8x16_t *)(v7 + v53);
  char v56 = (char)*v55;
  unint64_t v57 = __ROR8__(vshrn_n_s16((int16x8_t)vceqq_s8(*v55, vdupq_n_s8(v28)), 4uLL), 4 * v55->i8[0]) & 0x8888888888888888;
  if (v57)
  {
    uint64_t v58 = 0;
    int v59 = (4 * v55->i8[0]);
    do
    {
      unsigned int v60 = ((__clz(__rbit64(v57)) + v59) >> 2) & 0xF;
      if (v60)
      {
        uint64_t v61 = *(unsigned int *)(v54 + 4 * v60);
        if (v61 < v13) {
          break;
        }
        _X7 = v9 + v61;
        __asm { PRFM            #0, [X7] }
        v145[v58++] = v61;
        --v19;
      }
      v57 &= v57 - 1;
    }
    while (v57 && v19);
  }
  else
  {
    uint64_t v58 = 0;
  }
  uint64_t v64 = (v56 - 1) & 0xF;
  if (((v56 - 1) & 0xF) != 0) {
    uint64_t v65 = 0;
  }
  else {
    uint64_t v65 = 15;
  }
  uint64_t v66 = v65 + v64;
  v55->i8[0] = v66;
  v55->i8[v66] = v28;
  unsigned int v143 = (void *)(v9 + v12);
  int v67 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v67 + 1;
  *(_DWORD *)(v54 + 4 * v66) = v67;
  if (v58)
  {
    uint64_t v68 = 0;
    unint64_t v69 = a3 - 7;
    unint64_t v70 = a2 + 1;
    uint64_t v71 = v9 + 8;
    unint64_t v72 = 3;
    while (1)
    {
      uint64_t v73 = v145[v68];
      unint64_t v74 = (void *)(v9 + v73);
      if (*(_DWORD *)(v9 + v73 + v72 - 3) != *(_DWORD *)((char *)a2 + v72 - 3)) {
        goto LABEL_52;
      }
      if (v69 <= (unint64_t)a2)
      {
        int v77 = a2;
      }
      else
      {
        unint64_t v75 = *a2 ^ *v74;
        if (v75)
        {
          unint64_t v76 = __clz(__rbit64(v75)) >> 3;
          goto LABEL_50;
        }
        uint64_t v78 = 0;
        while (1)
        {
          int v77 = &v70[v78];
          if ((unint64_t)&v70[v78] >= v69) {
            break;
          }
          uint64_t v79 = *(void *)(v71 + v73 + v78 * 8);
          ++v78;
          unint64_t v80 = *v77 ^ v79;
          if (v80)
          {
            unint64_t v76 = v78 * 8 + (__clz(__rbit64(v80)) >> 3);
            goto LABEL_50;
          }
        }
        unint64_t v74 = (void *)(v71 + v73 + v78 * 8);
      }
      if ((unint64_t)v77 < a3 - 3 && *(_DWORD *)v74 == *(_DWORD *)v77)
      {
        int v77 = (void *)((char *)v77 + 4);
        unint64_t v74 = (void *)((char *)v74 + 4);
      }
      if ((unint64_t)v77 < a3 - 1 && *(unsigned __int16 *)v74 == *(unsigned __int16 *)v77)
      {
        int v77 = (void *)((char *)v77 + 2);
        unint64_t v74 = (void *)((char *)v74 + 2);
      }
      if ((unint64_t)v77 < a3 && *(unsigned __int8 *)v74 == *(unsigned __int8 *)v77) {
        int v77 = (void *)((char *)v77 + 1);
      }
      unint64_t v76 = (char *)v77 - (char *)a2;
LABEL_50:
      if (v76 > v72)
      {
        *a4 = v10 + 3 - v73;
        unint64_t v72 = v76;
        if ((void *)((char *)a2 + v76) == (void *)a3) {
          goto LABEL_60;
        }
      }
LABEL_52:
      ++v68;
      unint64_t v76 = v72;
      if (v68 == v58) {
        goto LABEL_60;
      }
    }
  }
  unint64_t v76 = 3;
LABEL_60:
  uint64_t v81 = 0;
  unint64_t v82 = *(char **)v16;
  uint64_t v83 = *(void *)(v16 + 8);
  int v84 = *(void *)v16 - v83 - v12;
  uint64_t v85 = *(void *)(v16 + 112);
  do
  {
    _X16 = v83 + *(unsigned int *)(v85 + 16 * v21 + v81);
    __asm { PRFM            #0, [X16] }
    v81 += 4;
  }
  while (v81 != 12);
  unsigned int v88 = v19 + v27;
  if ((v19 + v27) >= 3) {
    uint64_t v89 = 3;
  }
  else {
    uint64_t v89 = v88;
  }
  unint64_t v138 = *(unsigned int *)(v85 + ((16 * v21) | 0xC));
  int v139 = v89;
  uint64_t v135 = *(void *)(v16 + 128);
  unint64_t v136 = v138 >> 8;
  _X8 = v135 + 4 * (v138 >> 8);
  __asm { PRFM            #0, [X8] }
  int v137 = v84;
  if (v89)
  {
    int v141 = v10 + v84 + 3;
    uint64_t v92 = (unsigned int *)(v85 + 16 * v21);
    do
    {
      unsigned int v94 = *v92++;
      uint64_t v93 = v94;
      if (!v94) {
        return v76;
      }
      if (*(_DWORD *)(v83 + v93) == *(_DWORD *)a2)
      {
        unint64_t v95 = sub_1DD2A6010((void *)((char *)a2 + 4), (char *)(v83 + v93 + 4), a3, v82, v143);
        a3 = v144;
        unint64_t v96 = v95 + 4;
        if (v95 + 4 > v76)
        {
          *a4 = (v141 - v93);
          unint64_t v76 = v95 + 4;
          if ((void *)((char *)a2 + v96) == (void *)v144) {
            return v96;
          }
        }
      }
    }
    while (--v89);
  }
  if (v88 - v139 >= v138) {
    unsigned int v97 = v138;
  }
  else {
    unsigned int v97 = v88 - v139;
  }
  if (!v97) {
    return v76;
  }
  uint64_t v98 = 4 * v97;
  unsigned int v99 = (unsigned int *)(v135 + 4 * v136);
  do
  {
    unsigned int v100 = *v99++;
    _X10 = v83 + v100;
    __asm { PRFM            #0, [X10] }
    v98 -= 4;
  }
  while (v98);
  int v103 = *(_DWORD *)a2;
  uint64_t v104 = (unsigned int *)(v135 + 4 * v136);
  unint64_t v96 = v76;
  do
  {
    unsigned int v106 = *v104++;
    unsigned int v105 = v106;
    uint64_t v107 = v83 + v106;
    if (*(_DWORD *)v107 == v103)
    {
      unint64_t v108 = sub_1DD2A6010((void *)((char *)a2 + 4), (char *)(v107 + 4), a3, v82, v143);
      a3 = v144;
      if (v108 + 4 > v96)
      {
        *a4 = v140 + v137 + 3 - v105;
        unint64_t v96 = v108 + 4;
        if ((void *)((char *)a2 + v108 + 4) == (void *)v144) {
          break;
        }
      }
    }
    --v97;
  }
  while (v97);
  return v96;
}

unint64_t sub_1DD2CA6BC(uint64_t a1, void *a2, unint64_t a3, void *a4)
{
  uint64_t v151 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 112);
  uint64_t v7 = *(void *)(a1 + 56);
  int v8 = *(_DWORD *)(a1 + 52);
  uint64_t v9 = *(void *)(a1 + 8);
  unsigned int v10 = a2 - v9;
  unsigned int v11 = 1 << *(_DWORD *)(a1 + 256);
  uint64_t v12 = *(unsigned int *)(a1 + 24);
  unsigned int v13 = a2 - v9 - v11;
  _ZF = (int)a2 - (int)v9 - *(_DWORD *)(a1 + 28) > v11 && *(_DWORD *)(a1 + 40) == 0;
  if (!_ZF) {
    unsigned int v13 = *(_DWORD *)(a1 + 28);
  }
  unsigned int v15 = *(_DWORD *)(a1 + 268);
  uint64_t v16 = *(void *)(a1 + 248);
  char v17 = v15 - 5;
  if (v15 >= 5) {
    LOBYTE(v15) = 5;
  }
  uint64_t v18 = *(void *)(a1 + 96);
  int v19 = 1 << v15;
  unsigned int v20 = -1640531535 * *(_DWORD *)a2;
  uint64_t v21 = v20 >> (34 - *(unsigned char *)(v16 + 264));
  _X4 = *(void *)(v16 + 112) + 16 * v21;
  __asm { PRFM            #0, [X4] }
  int v27 = 1 << v17;
  if (!(!_ZF & _CF)) {
    int v27 = 0;
  }
  unint64_t v149 = a3;
  unsigned int v145 = a2 - v9;
  if (*(_DWORD *)(a1 + 300))
  {
    unsigned int v28 = (v20 ^ v18) >> (24 - v8);
    *(_DWORD *)(a1 + 44) = v10;
  }
  else
  {
    uint64_t v29 = a1 + 64;
    unint64_t v30 = *(unsigned int *)(a1 + 44);
    if (v10 - v30 >= 0x181)
    {
      uint64_t v31 = *(void *)(a1 + 56);
      uint64_t v32 = *(void *)(a1 + 112);
      if (v30 <= 0xFFFFFF9F)
      {
        unint64_t v113 = v30 + 96;
        do
        {
          unsigned int v114 = ((-1640531535 * *(_DWORD *)(v9 + 8 + v30)) ^ *(_DWORD *)(a1 + 96)) >> (24 - v8);
          uint64_t v115 = (v114 >> 3) & 0x1FFFFFE0;
          _X23 = v6 + 4 * v115;
          __asm
          {
            PRFM            #0, [X23]
            PRFM            #0, [X23,#0x40]
          }
          _X22 = v7 + v115;
          __asm { PRFM            #0, [X22] }
          unint64_t v121 = *(unsigned int *)(v29 + 4 * (v30 & 7));
          *(_DWORD *)(v29 + 4 * (v30 & 7)) = v114;
          uint64_t v122 = (v121 >> 3) & 0x1FFFFFE0;
          uint64_t v123 = v6 + 4 * v122;
          int v124 = (unsigned char *)(v7 + v122);
          if (((*v124 - 1) & 0x1F) != 0) {
            uint64_t v125 = 0;
          }
          else {
            uint64_t v125 = 31;
          }
          uint64_t v126 = v125 + ((*v124 - 1) & 0x1F);
          *int v124 = v126;
          v124[v126] = v121;
          *(_DWORD *)(v123 + 4 * v126) = v30++;
        }
        while (v30 < v113);
        uint64_t v32 = *(void *)(a1 + 112);
        uint64_t v31 = *(void *)(a1 + 56);
        unsigned int v10 = a2 - v9;
      }
      uint64_t v127 = v10 - 32;
      LODWORD(v30) = v10 - 32;
      int v128 = a2 + 1 - (v9 + v127);
      if ((v128 + 1) < 8) {
        int v129 = v128 + 1;
      }
      else {
        int v129 = 8;
      }
      if ((unint64_t)a2 + 1 >= v9 + v127) {
        int v130 = v129;
      }
      else {
        int v130 = 0;
      }
      if (v127 < v130 + (int)v127)
      {
        unsigned int v131 = *(_DWORD *)(a1 + 96);
        int v132 = 24 - *(_DWORD *)(a1 + 52);
        do
        {
          unsigned int v133 = ((-1640531535 * *(_DWORD *)(v9 + v127)) ^ v131) >> v132;
          uint64_t v134 = (v133 >> 3) & 0x1FFFFFE0;
          _X25 = v32 + 4 * v134;
          __asm
          {
            PRFM            #0, [X25]
            PRFM            #0, [X25,#0x40]
          }
          _X24 = v31 + v134;
          __asm { PRFM            #0, [X24] }
          *(_DWORD *)(a1 + 4 * (v127++ & 7) + 64) = v133;
          --v130;
        }
        while (v130);
        unsigned int v10 = a2 - v9;
      }
    }
    else
    {
      uint64_t v31 = *(void *)(a1 + 56);
      uint64_t v32 = *(void *)(a1 + 112);
    }
    if (v30 < v10)
    {
      uint64_t v33 = *(void *)(a1 + 8) + 8;
      int v34 = 24 - *(_DWORD *)(a1 + 52);
      unint64_t v30 = v30;
      do
      {
        unsigned int v35 = ((-1640531535 * *(_DWORD *)(v33 + v30)) ^ *(_DWORD *)(a1 + 96)) >> v34;
        uint64_t v36 = (v35 >> 3) & 0x1FFFFFE0;
        _X25 = v32 + 4 * v36;
        __asm
        {
          PRFM            #0, [X25]
          PRFM            #0, [X25,#0x40]
        }
        _X24 = v31 + v36;
        __asm { PRFM            #0, [X24] }
        unint64_t v42 = *(unsigned int *)(v29 + 4 * (v30 & 7));
        *(_DWORD *)(v29 + 4 * (v30 & 7)) = v35;
        uint64_t v43 = (v42 >> 3) & 0x1FFFFFE0;
        uint64_t v44 = v32 + 4 * v43;
        uint64_t v45 = (unsigned char *)(v31 + v43);
        if (((*v45 - 1) & 0x1F) != 0) {
          uint64_t v46 = 0;
        }
        else {
          uint64_t v46 = 31;
        }
        uint64_t v47 = v46 + ((*v45 - 1) & 0x1F);
        unsigned char *v45 = v47;
        v45[v47] = v42;
        *(_DWORD *)(v44 + 4 * v47) = v30++;
      }
      while (v30 < v145);
    }
    unsigned int v10 = a2 - v9;
    *(_DWORD *)(a1 + 44) = v145;
    unsigned int v48 = ((-1640531535 * *(_DWORD *)(v9 + v145 + 8)) ^ v18) >> (24 - v8);
    uint64_t v49 = (v48 >> 3) & 0x1FFFFFE0;
    _X2 = v6 + 4 * v49;
    __asm
    {
      PRFM            #0, [X2]
      PRFM            #0, [X2,#0x40]
    }
    _X17 = v7 + v49;
    __asm { PRFM            #0, [X17] }
    unsigned int v28 = *(_DWORD *)(v29 + 4 * (v145 & 7));
    *(_DWORD *)(v29 + 4 * (v145 & 7)) = v48;
  }
  *(_DWORD *)(a1 + 104) += v28;
  uint64_t v55 = (v28 >> 3) & 0x1FFFFFE0;
  uint64_t v56 = v6 + 4 * v55;
  unint64_t v57 = (__int16 *)(v7 + v55);
  int16x8x2_t v152 = vld2q_s16(v57);
  char v58 = *(unsigned char *)v57;
  int8x16_t v59 = vdupq_n_s8(v28);
  unint64_t v60 = __ROR8__(vsli_n_s8(vshrn_n_s16((int16x8_t)vceqq_s8(v59, (int8x16_t)v152.val[0]), 6uLL), vshrn_n_s16((int16x8_t)vceqq_s8(v59, (int8x16_t)v152.val[1]), 6uLL), 4uLL), 2 * *(unsigned char *)v57) & 0x5555555555555555;
  if (v60)
  {
    uint64_t v61 = 0;
    int v62 = (2 * *(unsigned char *)v57);
    do
    {
      unsigned int v63 = ((__clz(__rbit64(v60)) + v62) >> 1) & 0x1F;
      if (v63)
      {
        uint64_t v64 = *(unsigned int *)(v56 + 4 * v63);
        if (v64 < v13) {
          break;
        }
        _X7 = v9 + v64;
        __asm { PRFM            #0, [X7] }
        v150[v61++] = v64;
        --v19;
      }
      v60 &= v60 - 1;
    }
    while (v60 && v19);
  }
  else
  {
    uint64_t v61 = 0;
  }
  uint64_t v67 = (v58 - 1) & 0x1F;
  if (((v58 - 1) & 0x1F) != 0) {
    uint64_t v68 = 0;
  }
  else {
    uint64_t v68 = 31;
  }
  uint64_t v69 = v68 + v67;
  *(unsigned char *)unint64_t v57 = v69;
  *((unsigned char *)v57 + v69) = v28;
  int v148 = (void *)(v9 + v12);
  int v70 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v70 + 1;
  *(_DWORD *)(v56 + 4 * v69) = v70;
  if (v61)
  {
    uint64_t v71 = 0;
    unint64_t v72 = a3 - 7;
    uint64_t v73 = a2 + 1;
    uint64_t v74 = v9 + 8;
    unint64_t v75 = 3;
    while (1)
    {
      uint64_t v76 = v150[v71];
      int v77 = (void *)(v9 + v76);
      if (*(_DWORD *)(v9 + v76 + v75 - 3) != *(_DWORD *)((char *)a2 + v75 - 3)) {
        goto LABEL_52;
      }
      if (v72 <= (unint64_t)a2)
      {
        unint64_t v80 = a2;
      }
      else
      {
        unint64_t v78 = *a2 ^ *v77;
        if (v78)
        {
          unint64_t v79 = __clz(__rbit64(v78)) >> 3;
          goto LABEL_50;
        }
        uint64_t v81 = 0;
        while (1)
        {
          unint64_t v80 = &v73[v81];
          if ((unint64_t)&v73[v81] >= v72) {
            break;
          }
          uint64_t v82 = *(void *)(v74 + v76 + v81 * 8);
          ++v81;
          unint64_t v83 = *v80 ^ v82;
          if (v83)
          {
            unint64_t v79 = v81 * 8 + (__clz(__rbit64(v83)) >> 3);
            goto LABEL_50;
          }
        }
        int v77 = (void *)(v74 + v76 + v81 * 8);
      }
      if ((unint64_t)v80 < a3 - 3 && *(_DWORD *)v77 == *(_DWORD *)v80)
      {
        unint64_t v80 = (void *)((char *)v80 + 4);
        int v77 = (void *)((char *)v77 + 4);
      }
      if ((unint64_t)v80 < a3 - 1 && *(unsigned __int16 *)v77 == *(unsigned __int16 *)v80)
      {
        unint64_t v80 = (void *)((char *)v80 + 2);
        int v77 = (void *)((char *)v77 + 2);
      }
      if ((unint64_t)v80 < a3 && *(unsigned __int8 *)v77 == *(unsigned __int8 *)v80) {
        unint64_t v80 = (void *)((char *)v80 + 1);
      }
      unint64_t v79 = (char *)v80 - (char *)a2;
LABEL_50:
      if (v79 > v75)
      {
        *a4 = v10 + 3 - v76;
        unint64_t v75 = v79;
        if ((void *)((char *)a2 + v79) == (void *)a3) {
          goto LABEL_60;
        }
      }
LABEL_52:
      ++v71;
      unint64_t v79 = v75;
      if (v71 == v61) {
        goto LABEL_60;
      }
    }
  }
  unint64_t v79 = 3;
LABEL_60:
  uint64_t v84 = 0;
  uint64_t v85 = *(char **)v16;
  uint64_t v86 = *(void *)(v16 + 8);
  int v87 = *(void *)v16 - v86 - v12;
  uint64_t v88 = *(void *)(v16 + 112);
  do
  {
    _X16 = v86 + *(unsigned int *)(v88 + 16 * v21 + v84);
    __asm { PRFM            #0, [X16] }
    v84 += 4;
  }
  while (v84 != 12);
  unsigned int v91 = v19 + v27;
  if ((v19 + v27) >= 3) {
    uint64_t v92 = 3;
  }
  else {
    uint64_t v92 = v91;
  }
  unint64_t v143 = *(unsigned int *)(v88 + ((16 * v21) | 0xC));
  int v144 = v92;
  uint64_t v140 = *(void *)(v16 + 128);
  unint64_t v141 = v143 >> 8;
  _X8 = v140 + 4 * (v143 >> 8);
  __asm { PRFM            #0, [X8] }
  int v142 = v87;
  if (v92)
  {
    int v146 = v10 + v87 + 3;
    unint64_t v95 = (unsigned int *)(v88 + 16 * v21);
    do
    {
      unsigned int v97 = *v95++;
      uint64_t v96 = v97;
      if (!v97) {
        return v79;
      }
      if (*(_DWORD *)(v86 + v96) == *(_DWORD *)a2)
      {
        unint64_t v98 = sub_1DD2A6010((void *)((char *)a2 + 4), (char *)(v86 + v96 + 4), a3, v85, v148);
        a3 = v149;
        unint64_t v99 = v98 + 4;
        if (v98 + 4 > v79)
        {
          *a4 = (v146 - v96);
          unint64_t v79 = v98 + 4;
          if ((void *)((char *)a2 + v99) == (void *)v149) {
            return v99;
          }
        }
      }
    }
    while (--v92);
  }
  if (v91 - v144 >= v143) {
    unsigned int v100 = v143;
  }
  else {
    unsigned int v100 = v91 - v144;
  }
  if (!v100) {
    return v79;
  }
  uint64_t v101 = 4 * v100;
  unsigned int v102 = (unsigned int *)(v140 + 4 * v141);
  do
  {
    unsigned int v103 = *v102++;
    _X10 = v86 + v103;
    __asm { PRFM            #0, [X10] }
    v101 -= 4;
  }
  while (v101);
  int v106 = *(_DWORD *)a2;
  uint64_t v107 = (unsigned int *)(v140 + 4 * v141);
  unint64_t v99 = v79;
  do
  {
    unsigned int v109 = *v107++;
    unsigned int v108 = v109;
    uint64_t v110 = v86 + v109;
    if (*(_DWORD *)v110 == v106)
    {
      unint64_t v111 = sub_1DD2A6010((void *)((char *)a2 + 4), (char *)(v110 + 4), a3, v85, v148);
      a3 = v149;
      if (v111 + 4 > v99)
      {
        *a4 = v145 + v142 + 3 - v108;
        unint64_t v99 = v111 + 4;
        if ((void *)((char *)a2 + v111 + 4) == (void *)v149) {
          break;
        }
      }
    }
    --v100;
  }
  while (v100);
  return v99;
}

unint64_t sub_1DD2CAE2C(uint64_t a1, void *a2, unint64_t a3, void *a4)
{
  uint64_t v155 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 112);
  uint64_t v7 = *(void *)(a1 + 56);
  int v8 = *(_DWORD *)(a1 + 52);
  uint64_t v9 = *(void *)(a1 + 8);
  unsigned int v10 = a2 - v9;
  unsigned int v11 = 1 << *(_DWORD *)(a1 + 256);
  uint64_t v12 = *(unsigned int *)(a1 + 24);
  unsigned int v13 = a2 - v9 - v11;
  _ZF = (int)a2 - (int)v9 - *(_DWORD *)(a1 + 28) > v11 && *(_DWORD *)(a1 + 40) == 0;
  if (!_ZF) {
    unsigned int v13 = *(_DWORD *)(a1 + 28);
  }
  unsigned int v15 = *(_DWORD *)(a1 + 268);
  uint64_t v16 = *(void *)(a1 + 248);
  char v17 = v15 - 6;
  if (v15 >= 6) {
    LOBYTE(v15) = 6;
  }
  uint64_t v18 = *(void *)(a1 + 96);
  int v19 = 1 << v15;
  unsigned int v20 = -1640531535 * *(_DWORD *)a2;
  uint64_t v21 = v20 >> (34 - *(unsigned char *)(v16 + 264));
  _X4 = *(void *)(v16 + 112) + 16 * v21;
  __asm { PRFM            #0, [X4] }
  int v27 = 1 << v17;
  if (!(!_ZF & _CF)) {
    int v27 = 0;
  }
  unint64_t v153 = a3;
  unsigned int v149 = a2 - v9;
  if (*(_DWORD *)(a1 + 300))
  {
    unsigned int v28 = (v20 ^ v18) >> (24 - v8);
    *(_DWORD *)(a1 + 44) = v10;
  }
  else
  {
    uint64_t v29 = a1 + 64;
    unint64_t v30 = *(unsigned int *)(a1 + 44);
    if (v10 - v30 >= 0x181)
    {
      uint64_t v31 = *(void *)(a1 + 56);
      uint64_t v32 = *(void *)(a1 + 112);
      if (v30 <= 0xFFFFFF9F)
      {
        unint64_t v115 = v30 + 96;
        do
        {
          unsigned int v116 = ((-1640531535 * *(_DWORD *)(v9 + 8 + v30)) ^ *(_DWORD *)(a1 + 96)) >> (24 - v8);
          uint64_t v117 = (v116 >> 2) & 0x3FFFFFC0;
          _X23 = v6 + 4 * v117;
          __asm
          {
            PRFM            #0, [X23]
            PRFM            #0, [X23,#0x40]
          }
          _X22 = v7 + v117;
          __asm
          {
            PRFM            #0, [X22]
            PRFM            #0, [X22,#0x20]
          }
          unint64_t v124 = *(unsigned int *)(v29 + 4 * (v30 & 7));
          *(_DWORD *)(v29 + 4 * (v30 & 7)) = v116;
          uint64_t v125 = (v124 >> 2) & 0x3FFFFFC0;
          uint64_t v126 = v6 + 4 * v125;
          uint64_t v127 = (unsigned char *)(v7 + v125);
          if (((*v127 - 1) & 0x3F) != 0) {
            uint64_t v128 = 0;
          }
          else {
            uint64_t v128 = 63;
          }
          uint64_t v129 = v128 + ((*v127 - 1) & 0x3F);
          *uint64_t v127 = v129;
          v127[v129] = v124;
          *(_DWORD *)(v126 + 4 * v129) = v30++;
        }
        while (v30 < v115);
        uint64_t v32 = *(void *)(a1 + 112);
        uint64_t v31 = *(void *)(a1 + 56);
        unsigned int v10 = a2 - v9;
      }
      uint64_t v130 = v10 - 32;
      LODWORD(v30) = v10 - 32;
      int v131 = a2 + 1 - (v9 + v130);
      if ((v131 + 1) < 8) {
        int v132 = v131 + 1;
      }
      else {
        int v132 = 8;
      }
      if ((unint64_t)a2 + 1 >= v9 + v130) {
        int v133 = v132;
      }
      else {
        int v133 = 0;
      }
      if (v130 < v133 + (int)v130)
      {
        unsigned int v134 = *(_DWORD *)(a1 + 96);
        int v135 = 24 - *(_DWORD *)(a1 + 52);
        do
        {
          unsigned int v136 = ((-1640531535 * *(_DWORD *)(v9 + v130)) ^ v134) >> v135;
          uint64_t v137 = (v136 >> 2) & 0x3FFFFFC0;
          _X25 = v32 + 4 * v137;
          __asm
          {
            PRFM            #0, [X25]
            PRFM            #0, [X25,#0x40]
          }
          _X24 = v31 + v137;
          __asm
          {
            PRFM            #0, [X24]
            PRFM            #0, [X24,#0x20]
          }
          *(_DWORD *)(a1 + 4 * (v130++ & 7) + 64) = v136;
          --v133;
        }
        while (v133);
        unsigned int v10 = a2 - v9;
      }
    }
    else
    {
      uint64_t v31 = *(void *)(a1 + 56);
      uint64_t v32 = *(void *)(a1 + 112);
    }
    if (v30 < v10)
    {
      uint64_t v33 = *(void *)(a1 + 8) + 8;
      int v34 = 24 - *(_DWORD *)(a1 + 52);
      unint64_t v30 = v30;
      do
      {
        unsigned int v35 = ((-1640531535 * *(_DWORD *)(v33 + v30)) ^ *(_DWORD *)(a1 + 96)) >> v34;
        uint64_t v36 = (v35 >> 2) & 0x3FFFFFC0;
        _X25 = v32 + 4 * v36;
        __asm
        {
          PRFM            #0, [X25]
          PRFM            #0, [X25,#0x40]
        }
        _X24 = v31 + v36;
        __asm
        {
          PRFM            #0, [X24]
          PRFM            #0, [X24,#0x20]
        }
        unint64_t v43 = *(unsigned int *)(v29 + 4 * (v30 & 7));
        *(_DWORD *)(v29 + 4 * (v30 & 7)) = v35;
        uint64_t v44 = (v43 >> 2) & 0x3FFFFFC0;
        uint64_t v45 = v32 + 4 * v44;
        uint64_t v46 = (unsigned char *)(v31 + v44);
        if (((*v46 - 1) & 0x3F) != 0) {
          uint64_t v47 = 0;
        }
        else {
          uint64_t v47 = 63;
        }
        uint64_t v48 = v47 + ((*v46 - 1) & 0x3F);
        *uint64_t v46 = v48;
        v46[v48] = v43;
        *(_DWORD *)(v45 + 4 * v48) = v30++;
      }
      while (v30 < v149);
    }
    unsigned int v10 = a2 - v9;
    *(_DWORD *)(a1 + 44) = v149;
    unsigned int v49 = ((-1640531535 * *(_DWORD *)(v9 + v149 + 8)) ^ v18) >> (24 - v8);
    uint64_t v50 = (v49 >> 2) & 0x3FFFFFC0;
    _X2 = v6 + 4 * v50;
    __asm
    {
      PRFM            #0, [X2]
      PRFM            #0, [X2,#0x40]
    }
    _X17 = v7 + v50;
    __asm
    {
      PRFM            #0, [X17]
      PRFM            #0, [X17,#0x20]
    }
    unsigned int v28 = *(_DWORD *)(v29 + 4 * (v149 & 7));
    *(_DWORD *)(v29 + 4 * (v149 & 7)) = v49;
  }
  *(_DWORD *)(a1 + 104) += v28;
  uint64_t v57 = (v28 >> 2) & 0x3FFFFFC0;
  uint64_t v58 = v6 + 4 * v57;
  int8x16_t v59 = (char *)(v7 + v57);
  char v60 = *v59;
  int8x16x4_t v156 = vld4q_s8(v59);
  int8x16_t v61 = vdupq_n_s8(v28);
  v156.val[0] = vsriq_n_s8(vsriq_n_s8(vceqq_s8(v156.val[3], v61), vceqq_s8(v156.val[2], v61), 1uLL), vsriq_n_s8(vceqq_s8(v156.val[1], v61), vceqq_s8(v156.val[0], v61), 1uLL), 2uLL);
  int8x8_t v62 = vshrn_n_s16((int16x8_t)vsriq_n_s8(v156.val[0], v156.val[0], 4uLL), 4uLL);
  uint64_t v63 = 0;
  if (v62)
  {
    unint64_t v64 = __ROR8__(*(void *)&v62, v60);
    do
    {
      unsigned int v65 = (__clz(__rbit64(v64)) + v60) & 0x3F;
      if (v65)
      {
        uint64_t v66 = *(unsigned int *)(v58 + 4 * v65);
        if (v66 < v13) {
          break;
        }
        _X6 = v9 + v66;
        __asm { PRFM            #0, [X6] }
        v154[v63++] = v66;
        --v19;
      }
      v64 &= v64 - 1;
    }
    while (v64 && v19);
  }
  uint64_t v69 = (v60 - 1) & 0x3F;
  if (((v60 - 1) & 0x3F) != 0) {
    uint64_t v70 = 0;
  }
  else {
    uint64_t v70 = 63;
  }
  uint64_t v71 = v70 + v69;
  *int8x16_t v59 = v71;
  v59[v71] = v28;
  int16x8x2_t v152 = (void *)(v9 + v12);
  int v72 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v72 + 1;
  *(_DWORD *)(v58 + 4 * v71) = v72;
  if (v63)
  {
    uint64_t v73 = 0;
    unint64_t v74 = a3 - 7;
    unint64_t v75 = a2 + 1;
    uint64_t v76 = v9 + 8;
    unint64_t v77 = 3;
    while (1)
    {
      uint64_t v78 = v154[v73];
      unint64_t v79 = (void *)(v9 + v78);
      if (*(_DWORD *)(v9 + v78 + v77 - 3) != *(_DWORD *)((char *)a2 + v77 - 3)) {
        goto LABEL_50;
      }
      if (v74 <= (unint64_t)a2)
      {
        uint64_t v82 = a2;
      }
      else
      {
        unint64_t v80 = *a2 ^ *v79;
        if (v80)
        {
          unint64_t v81 = __clz(__rbit64(v80)) >> 3;
          goto LABEL_48;
        }
        uint64_t v83 = 0;
        while (1)
        {
          uint64_t v82 = &v75[v83];
          if ((unint64_t)&v75[v83] >= v74) {
            break;
          }
          uint64_t v84 = *(void *)(v76 + v78 + v83 * 8);
          ++v83;
          unint64_t v85 = *v82 ^ v84;
          if (v85)
          {
            unint64_t v81 = v83 * 8 + (__clz(__rbit64(v85)) >> 3);
            goto LABEL_48;
          }
        }
        unint64_t v79 = (void *)(v76 + v78 + v83 * 8);
      }
      if ((unint64_t)v82 < a3 - 3 && *(_DWORD *)v79 == *(_DWORD *)v82)
      {
        uint64_t v82 = (void *)((char *)v82 + 4);
        unint64_t v79 = (void *)((char *)v79 + 4);
      }
      if ((unint64_t)v82 < a3 - 1 && *(unsigned __int16 *)v79 == *(unsigned __int16 *)v82)
      {
        uint64_t v82 = (void *)((char *)v82 + 2);
        unint64_t v79 = (void *)((char *)v79 + 2);
      }
      if ((unint64_t)v82 < a3 && *(unsigned __int8 *)v79 == *(unsigned __int8 *)v82) {
        uint64_t v82 = (void *)((char *)v82 + 1);
      }
      unint64_t v81 = (char *)v82 - (char *)a2;
LABEL_48:
      if (v81 > v77)
      {
        *a4 = v10 + 3 - v78;
        unint64_t v77 = v81;
        if ((void *)((char *)a2 + v81) == (void *)a3) {
          goto LABEL_58;
        }
      }
LABEL_50:
      ++v73;
      unint64_t v81 = v77;
      if (v73 == v63) {
        goto LABEL_58;
      }
    }
  }
  unint64_t v81 = 3;
LABEL_58:
  uint64_t v86 = 0;
  int v87 = *(char **)v16;
  uint64_t v88 = *(void *)(v16 + 8);
  int v89 = *(void *)v16 - v88 - v12;
  uint64_t v90 = *(void *)(v16 + 112);
  do
  {
    _X16 = v88 + *(unsigned int *)(v90 + 16 * v21 + v86);
    __asm { PRFM            #0, [X16] }
    v86 += 4;
  }
  while (v86 != 12);
  unsigned int v93 = v19 + v27;
  if ((v19 + v27) >= 3) {
    uint64_t v94 = 3;
  }
  else {
    uint64_t v94 = v93;
  }
  unint64_t v147 = *(unsigned int *)(v90 + ((16 * v21) | 0xC));
  int v148 = v94;
  uint64_t v144 = *(void *)(v16 + 128);
  unint64_t v145 = v147 >> 8;
  _X8 = v144 + 4 * (v147 >> 8);
  __asm { PRFM            #0, [X8] }
  int v146 = v89;
  if (v94)
  {
    int v150 = v10 + v89 + 3;
    unsigned int v97 = (unsigned int *)(v90 + 16 * v21);
    do
    {
      unsigned int v99 = *v97++;
      uint64_t v98 = v99;
      if (!v99) {
        return v81;
      }
      if (*(_DWORD *)(v88 + v98) == *(_DWORD *)a2)
      {
        unint64_t v100 = sub_1DD2A6010((void *)((char *)a2 + 4), (char *)(v88 + v98 + 4), a3, v87, v152);
        a3 = v153;
        unint64_t v101 = v100 + 4;
        if (v100 + 4 > v81)
        {
          *a4 = (v150 - v98);
          unint64_t v81 = v100 + 4;
          if ((void *)((char *)a2 + v101) == (void *)v153) {
            return v101;
          }
        }
      }
    }
    while (--v94);
  }
  if (v93 - v148 >= v147) {
    unsigned int v102 = v147;
  }
  else {
    unsigned int v102 = v93 - v148;
  }
  if (!v102) {
    return v81;
  }
  uint64_t v103 = 4 * v102;
  uint64_t v104 = (unsigned int *)(v144 + 4 * v145);
  do
  {
    unsigned int v105 = *v104++;
    _X10 = v88 + v105;
    __asm { PRFM            #0, [X10] }
    v103 -= 4;
  }
  while (v103);
  int v108 = *(_DWORD *)a2;
  unsigned int v109 = (unsigned int *)(v144 + 4 * v145);
  unint64_t v101 = v81;
  do
  {
    unsigned int v111 = *v109++;
    unsigned int v110 = v111;
    uint64_t v112 = v88 + v111;
    if (*(_DWORD *)v112 == v108)
    {
      unint64_t v113 = sub_1DD2A6010((void *)((char *)a2 + 4), (char *)(v112 + 4), a3, v87, v152);
      a3 = v153;
      if (v113 + 4 > v101)
      {
        *a4 = v149 + v146 + 3 - v110;
        unint64_t v101 = v113 + 4;
        if ((void *)((char *)a2 + v113 + 4) == (void *)v153) {
          break;
        }
      }
    }
    --v102;
  }
  while (v102);
  return v101;
}

unint64_t sub_1DD2CB5A8(uint64_t a1, void *a2, unint64_t a3, void *a4)
{
  uint64_t v146 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 112);
  uint64_t v7 = *(void *)(a1 + 56);
  int v8 = *(_DWORD *)(a1 + 52);
  uint64_t v9 = *(void *)(a1 + 8);
  unsigned int v10 = a2 - v9;
  unsigned int v11 = 1 << *(_DWORD *)(a1 + 256);
  uint64_t v12 = *(unsigned int *)(a1 + 24);
  unsigned int v13 = a2 - v9 - v11;
  _ZF = (int)a2 - (int)v9 - *(_DWORD *)(a1 + 28) > v11 && *(_DWORD *)(a1 + 40) == 0;
  if (!_ZF) {
    unsigned int v13 = *(_DWORD *)(a1 + 28);
  }
  unsigned int v15 = *(_DWORD *)(a1 + 268);
  uint64_t v16 = *(void *)(a1 + 248);
  int v17 = 66 - *(_DWORD *)(v16 + 264);
  char v18 = v15 - 4;
  if (v15 >= 4) {
    LOBYTE(v15) = 4;
  }
  uint64_t v19 = *(void *)(a1 + 96);
  int v20 = 1 << v15;
  unint64_t v21 = 0xCF1BBCDCBB000000 * *a2;
  unint64_t v22 = v21 >> v17;
  _X4 = *(void *)(v16 + 112) + 16 * (v21 >> v17);
  __asm { PRFM            #0, [X4] }
  int v28 = 1 << v18;
  if (!(!_ZF & _CF)) {
    int v28 = 0;
  }
  uint64_t v144 = (void *)a3;
  unsigned int v140 = a2 - v9;
  if (*(_DWORD *)(a1 + 300))
  {
    _X17 = (v21 ^ v19) >> (56 - v8);
    *(_DWORD *)(a1 + 44) = v10;
  }
  else
  {
    uint64_t v30 = a1 + 64;
    unint64_t v31 = *(unsigned int *)(a1 + 44);
    if (v10 - v31 >= 0x181)
    {
      uint64_t v32 = *(void *)(a1 + 56);
      uint64_t v33 = *(void *)(a1 + 112);
      if (v31 <= 0xFFFFFF9F)
      {
        unint64_t v110 = v31 + 96;
        do
        {
          unint64_t v111 = ((0xCF1BBCDCBB000000 * *(void *)(v9 + 8 + v31)) ^ *(void *)(a1 + 96)) >> (56 - v8);
          uint64_t v112 = (v111 >> 4) & 0xFFFFFF0;
          _X23 = v6 + 4 * v112;
          __asm { PRFM            #0, [X23] }
          _X22 = v7 + v112;
          __asm { PRFM            #0, [X22] }
          unint64_t v117 = *(unsigned int *)(v30 + 4 * (v31 & 7));
          *(_DWORD *)(v30 + 4 * (v31 & 7)) = v111;
          uint64_t v118 = (v117 >> 4) & 0xFFFFFF0;
          uint64_t v119 = v6 + 4 * v118;
          int v120 = (unsigned char *)(v7 + v118);
          if (((*v120 - 1) & 0xF) != 0) {
            uint64_t v121 = 0;
          }
          else {
            uint64_t v121 = 15;
          }
          uint64_t v122 = v121 + ((*v120 - 1) & 0xF);
          *int v120 = v122;
          v120[v122] = v117;
          *(_DWORD *)(v119 + 4 * v122) = v31++;
        }
        while (v31 < v110);
        uint64_t v33 = *(void *)(a1 + 112);
        uint64_t v32 = *(void *)(a1 + 56);
        unsigned int v10 = a2 - v9;
      }
      uint64_t v123 = v10 - 32;
      LODWORD(v31) = v10 - 32;
      int v124 = a2 + 1 - (v9 + v123);
      if ((v124 + 1) < 8) {
        int v125 = v124 + 1;
      }
      else {
        int v125 = 8;
      }
      if ((unint64_t)a2 + 1 >= v9 + v123) {
        int v126 = v125;
      }
      else {
        int v126 = 0;
      }
      if (v123 < v126 + (int)v123)
      {
        uint64_t v127 = *(void *)(a1 + 96);
        int v128 = 56 - *(_DWORD *)(a1 + 52);
        do
        {
          unint64_t v129 = ((0xCF1BBCDCBB000000 * *(void *)(v9 + v123)) ^ v127) >> v128;
          uint64_t v130 = (v129 >> 4) & 0xFFFFFF0;
          _X25 = v33 + 4 * v130;
          __asm { PRFM            #0, [X25] }
          _X24 = v32 + v130;
          __asm { PRFM            #0, [X24] }
          *(_DWORD *)(a1 + 4 * (v123++ & 7) + 64) = v129;
          --v126;
        }
        while (v126);
        unsigned int v10 = a2 - v9;
      }
    }
    else
    {
      uint64_t v32 = *(void *)(a1 + 56);
      uint64_t v33 = *(void *)(a1 + 112);
    }
    if (v31 < v10)
    {
      uint64_t v34 = *(void *)(a1 + 8) + 8;
      int v35 = 56 - *(_DWORD *)(a1 + 52);
      unint64_t v31 = v31;
      do
      {
        unint64_t v36 = ((0xCF1BBCDCBB000000 * *(void *)(v34 + v31)) ^ *(void *)(a1 + 96)) >> v35;
        uint64_t v37 = (v36 >> 4) & 0xFFFFFF0;
        _X25 = v33 + 4 * v37;
        __asm { PRFM            #0, [X25] }
        _X24 = v32 + v37;
        __asm { PRFM            #0, [X24] }
        unint64_t v42 = *(unsigned int *)(v30 + 4 * (v31 & 7));
        *(_DWORD *)(v30 + 4 * (v31 & 7)) = v36;
        uint64_t v43 = (v42 >> 4) & 0xFFFFFF0;
        uint64_t v44 = v33 + 4 * v43;
        uint64_t v45 = (unsigned char *)(v32 + v43);
        if (((*v45 - 1) & 0xF) != 0) {
          uint64_t v46 = 0;
        }
        else {
          uint64_t v46 = 15;
        }
        uint64_t v47 = v46 + ((*v45 - 1) & 0xF);
        unsigned char *v45 = v47;
        v45[v47] = v42;
        *(_DWORD *)(v44 + 4 * v47) = v31++;
      }
      while (v31 < v140);
    }
    unsigned int v10 = a2 - v9;
    *(_DWORD *)(a1 + 44) = v140;
    unint64_t v48 = ((0xCF1BBCDCBB000000 * *(void *)(v9 + v140 + 8)) ^ v19) >> (56 - v8);
    uint64_t v49 = (v48 >> 4) & 0xFFFFFF0;
    _X2 = v6 + 4 * v49;
    __asm { PRFM            #0, [X2] }
    _X17 = v7 + v49;
    __asm { PRFM            #0, [X17] }
    LODWORD(_X17) = *(_DWORD *)(v30 + 4 * (v140 & 7));
    *(_DWORD *)(v30 + 4 * (v140 & 7)) = v48;
  }
  *(_DWORD *)(a1 + 104) += _X17;
  uint64_t v53 = (_X17 >> 4) & 0xFFFFFF0;
  uint64_t v54 = v6 + 4 * v53;
  uint64_t v55 = (int8x16_t *)(v7 + v53);
  char v56 = (char)*v55;
  unint64_t v57 = __ROR8__(vshrn_n_s16((int16x8_t)vceqq_s8(*v55, vdupq_n_s8(_X17)), 4uLL), 4 * v55->i8[0]) & 0x8888888888888888;
  if (v57)
  {
    uint64_t v58 = 0;
    int v59 = (4 * v55->i8[0]);
    do
    {
      unsigned int v60 = ((__clz(__rbit64(v57)) + v59) >> 2) & 0xF;
      if (v60)
      {
        uint64_t v61 = *(unsigned int *)(v54 + 4 * v60);
        if (v61 < v13) {
          break;
        }
        _X7 = v9 + v61;
        __asm { PRFM            #0, [X7] }
        v145[v58++] = v61;
        --v20;
      }
      v57 &= v57 - 1;
    }
    while (v57 && v20);
  }
  else
  {
    uint64_t v58 = 0;
  }
  uint64_t v64 = (v56 - 1) & 0xF;
  if (((v56 - 1) & 0xF) != 0) {
    uint64_t v65 = 0;
  }
  else {
    uint64_t v65 = 15;
  }
  uint64_t v66 = v65 + v64;
  v55->i8[0] = v66;
  v55->i8[v66] = _X17;
  unint64_t v143 = (void *)(v9 + v12);
  int v67 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v67 + 1;
  *(_DWORD *)(v54 + 4 * v66) = v67;
  if (v58)
  {
    uint64_t v68 = 0;
    unint64_t v69 = a3 - 7;
    uint64_t v70 = a2 + 1;
    uint64_t v71 = v9 + 8;
    unint64_t v72 = 3;
    while (1)
    {
      uint64_t v73 = v145[v68];
      unint64_t v74 = (void *)(v9 + v73);
      if (*(_DWORD *)(v9 + v73 + v72 - 3) != *(_DWORD *)((char *)a2 + v72 - 3)) {
        goto LABEL_52;
      }
      if (v69 <= (unint64_t)a2)
      {
        unint64_t v77 = a2;
      }
      else
      {
        unint64_t v75 = *a2 ^ *v74;
        if (v75)
        {
          unint64_t v76 = __clz(__rbit64(v75)) >> 3;
          goto LABEL_50;
        }
        uint64_t v78 = 0;
        while (1)
        {
          unint64_t v77 = &v70[v78];
          if ((unint64_t)&v70[v78] >= v69) {
            break;
          }
          uint64_t v79 = *(void *)(v71 + v73 + v78 * 8);
          ++v78;
          unint64_t v80 = *v77 ^ v79;
          if (v80)
          {
            unint64_t v76 = v78 * 8 + (__clz(__rbit64(v80)) >> 3);
            goto LABEL_50;
          }
        }
        unint64_t v74 = (void *)(v71 + v73 + v78 * 8);
      }
      if ((unint64_t)v77 < a3 - 3 && *(_DWORD *)v74 == *(_DWORD *)v77)
      {
        unint64_t v77 = (void *)((char *)v77 + 4);
        unint64_t v74 = (void *)((char *)v74 + 4);
      }
      if ((unint64_t)v77 < a3 - 1 && *(unsigned __int16 *)v74 == *(unsigned __int16 *)v77)
      {
        unint64_t v77 = (void *)((char *)v77 + 2);
        unint64_t v74 = (void *)((char *)v74 + 2);
      }
      if ((unint64_t)v77 < a3 && *(unsigned __int8 *)v74 == *(unsigned __int8 *)v77) {
        unint64_t v77 = (void *)((char *)v77 + 1);
      }
      unint64_t v76 = (char *)v77 - (char *)a2;
LABEL_50:
      if (v76 > v72)
      {
        *a4 = v10 + 3 - v73;
        unint64_t v72 = v76;
        if ((void *)((char *)a2 + v76) == (void *)a3) {
          goto LABEL_60;
        }
      }
LABEL_52:
      ++v68;
      unint64_t v76 = v72;
      if (v68 == v58) {
        goto LABEL_60;
      }
    }
  }
  unint64_t v76 = 3;
LABEL_60:
  uint64_t v81 = 0;
  uint64_t v82 = *(char **)v16;
  uint64_t v83 = *(void *)(v16 + 8);
  int v84 = *(void *)v16 - v83 - v12;
  uint64_t v85 = *(void *)(v16 + 112);
  do
  {
    _X16 = v83 + *(unsigned int *)(v85 + 16 * v22 + v81);
    __asm { PRFM            #0, [X16] }
    v81 += 4;
  }
  while (v81 != 12);
  unsigned int v88 = v20 + v28;
  if ((v20 + v28) >= 3) {
    uint64_t v89 = 3;
  }
  else {
    uint64_t v89 = v88;
  }
  unint64_t v138 = *(unsigned int *)(v85 + ((16 * v22) | 0xC));
  int v139 = v89;
  uint64_t v135 = *(void *)(v16 + 128);
  unint64_t v136 = v138 >> 8;
  _X8 = v135 + 4 * (v138 >> 8);
  __asm { PRFM            #0, [X8] }
  int v137 = v84;
  if (v89)
  {
    int v141 = v10 + v84 + 3;
    uint64_t v92 = (unsigned int *)(v85 + 16 * v22);
    do
    {
      unsigned int v94 = *v92++;
      uint64_t v93 = v94;
      if (!v94) {
        return v76;
      }
      if (*(_DWORD *)(v83 + v93) == *(_DWORD *)a2)
      {
        unint64_t v95 = sub_1DD2A6010((void *)((char *)a2 + 4), (char *)(v83 + v93 + 4), a3, v82, v143);
        a3 = (unint64_t)v144;
        unint64_t v96 = v95 + 4;
        if (v95 + 4 > v76)
        {
          *a4 = (v141 - v93);
          unint64_t v76 = v95 + 4;
          if ((void *)((char *)a2 + v96) == v144) {
            return v96;
          }
        }
      }
    }
    while (--v89);
  }
  if (v88 - v139 >= v138) {
    unsigned int v97 = v138;
  }
  else {
    unsigned int v97 = v88 - v139;
  }
  if (!v97) {
    return v76;
  }
  uint64_t v98 = 4 * v97;
  unsigned int v99 = (unsigned int *)(v135 + 4 * v136);
  do
  {
    unsigned int v100 = *v99++;
    _X10 = v83 + v100;
    __asm { PRFM            #0, [X10] }
    v98 -= 4;
  }
  while (v98);
  int v103 = *(_DWORD *)a2;
  uint64_t v104 = (unsigned int *)(v135 + 4 * v136);
  unint64_t v96 = v76;
  do
  {
    unsigned int v106 = *v104++;
    unsigned int v105 = v106;
    uint64_t v107 = v83 + v106;
    if (*(_DWORD *)v107 == v103)
    {
      unint64_t v108 = sub_1DD2A6010((void *)((char *)a2 + 4), (char *)(v107 + 4), a3, v82, v143);
      a3 = (unint64_t)v144;
      if (v108 + 4 > v96)
      {
        *a4 = v140 + v137 + 3 - v105;
        unint64_t v96 = v108 + 4;
        if ((void *)((char *)a2 + v108 + 4) == v144) {
          break;
        }
      }
    }
    --v97;
  }
  while (v97);
  return v96;
}

unint64_t sub_1DD2CBD04(uint64_t a1, void *a2, unint64_t a3, void *a4)
{
  uint64_t v151 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 112);
  uint64_t v7 = *(void *)(a1 + 56);
  int v8 = *(_DWORD *)(a1 + 52);
  uint64_t v9 = *(void *)(a1 + 8);
  unsigned int v10 = a2 - v9;
  unsigned int v11 = 1 << *(_DWORD *)(a1 + 256);
  uint64_t v12 = *(unsigned int *)(a1 + 24);
  unsigned int v13 = a2 - v9 - v11;
  _ZF = (int)a2 - (int)v9 - *(_DWORD *)(a1 + 28) > v11 && *(_DWORD *)(a1 + 40) == 0;
  if (!_ZF) {
    unsigned int v13 = *(_DWORD *)(a1 + 28);
  }
  unsigned int v15 = *(_DWORD *)(a1 + 268);
  uint64_t v16 = *(void *)(a1 + 248);
  int v17 = 66 - *(_DWORD *)(v16 + 264);
  char v18 = v15 - 5;
  if (v15 >= 5) {
    LOBYTE(v15) = 5;
  }
  uint64_t v19 = *(void *)(a1 + 96);
  int v20 = 1 << v15;
  unint64_t v21 = 0xCF1BBCDCBB000000 * *a2;
  unint64_t v22 = v21 >> v17;
  _X4 = *(void *)(v16 + 112) + 16 * (v21 >> v17);
  __asm { PRFM            #0, [X4] }
  int v28 = 1 << v18;
  if (!(!_ZF & _CF)) {
    int v28 = 0;
  }
  unsigned int v149 = (void *)a3;
  unsigned int v145 = a2 - v9;
  if (*(_DWORD *)(a1 + 300))
  {
    _X17 = (v21 ^ v19) >> (56 - v8);
    *(_DWORD *)(a1 + 44) = v10;
  }
  else
  {
    uint64_t v30 = a1 + 64;
    unint64_t v31 = *(unsigned int *)(a1 + 44);
    if (v10 - v31 >= 0x181)
    {
      uint64_t v32 = *(void *)(a1 + 56);
      uint64_t v33 = *(void *)(a1 + 112);
      if (v31 <= 0xFFFFFF9F)
      {
        unint64_t v113 = v31 + 96;
        do
        {
          unint64_t v114 = ((0xCF1BBCDCBB000000 * *(void *)(v9 + 8 + v31)) ^ *(void *)(a1 + 96)) >> (56 - v8);
          uint64_t v115 = (v114 >> 3) & 0x1FFFFFE0;
          _X23 = v6 + 4 * v115;
          __asm
          {
            PRFM            #0, [X23]
            PRFM            #0, [X23,#0x40]
          }
          _X22 = v7 + v115;
          __asm { PRFM            #0, [X22] }
          unint64_t v121 = *(unsigned int *)(v30 + 4 * (v31 & 7));
          *(_DWORD *)(v30 + 4 * (v31 & 7)) = v114;
          uint64_t v122 = (v121 >> 3) & 0x1FFFFFE0;
          uint64_t v123 = v6 + 4 * v122;
          int v124 = (unsigned char *)(v7 + v122);
          if (((*v124 - 1) & 0x1F) != 0) {
            uint64_t v125 = 0;
          }
          else {
            uint64_t v125 = 31;
          }
          uint64_t v126 = v125 + ((*v124 - 1) & 0x1F);
          *int v124 = v126;
          v124[v126] = v121;
          *(_DWORD *)(v123 + 4 * v126) = v31++;
        }
        while (v31 < v113);
        uint64_t v33 = *(void *)(a1 + 112);
        uint64_t v32 = *(void *)(a1 + 56);
        unsigned int v10 = a2 - v9;
      }
      uint64_t v127 = v10 - 32;
      LODWORD(v31) = v10 - 32;
      int v128 = a2 + 1 - (v9 + v127);
      if ((v128 + 1) < 8) {
        int v129 = v128 + 1;
      }
      else {
        int v129 = 8;
      }
      if ((unint64_t)a2 + 1 >= v9 + v127) {
        int v130 = v129;
      }
      else {
        int v130 = 0;
      }
      if (v127 < v130 + (int)v127)
      {
        uint64_t v131 = *(void *)(a1 + 96);
        int v132 = 56 - *(_DWORD *)(a1 + 52);
        do
        {
          unint64_t v133 = ((0xCF1BBCDCBB000000 * *(void *)(v9 + v127)) ^ v131) >> v132;
          uint64_t v134 = (v133 >> 3) & 0x1FFFFFE0;
          _X25 = v33 + 4 * v134;
          __asm
          {
            PRFM            #0, [X25]
            PRFM            #0, [X25,#0x40]
          }
          _X24 = v32 + v134;
          __asm { PRFM            #0, [X24] }
          *(_DWORD *)(a1 + 4 * (v127++ & 7) + 64) = v133;
          --v130;
        }
        while (v130);
        unsigned int v10 = a2 - v9;
      }
    }
    else
    {
      uint64_t v32 = *(void *)(a1 + 56);
      uint64_t v33 = *(void *)(a1 + 112);
    }
    if (v31 < v10)
    {
      uint64_t v34 = *(void *)(a1 + 8) + 8;
      int v35 = 56 - *(_DWORD *)(a1 + 52);
      unint64_t v31 = v31;
      do
      {
        unint64_t v36 = ((0xCF1BBCDCBB000000 * *(void *)(v34 + v31)) ^ *(void *)(a1 + 96)) >> v35;
        uint64_t v37 = (v36 >> 3) & 0x1FFFFFE0;
        _X25 = v33 + 4 * v37;
        __asm
        {
          PRFM            #0, [X25]
          PRFM            #0, [X25,#0x40]
        }
        _X24 = v32 + v37;
        __asm { PRFM            #0, [X24] }
        unint64_t v43 = *(unsigned int *)(v30 + 4 * (v31 & 7));
        *(_DWORD *)(v30 + 4 * (v31 & 7)) = v36;
        uint64_t v44 = (v43 >> 3) & 0x1FFFFFE0;
        uint64_t v45 = v33 + 4 * v44;
        uint64_t v46 = (unsigned char *)(v32 + v44);
        if (((*v46 - 1) & 0x1F) != 0) {
          uint64_t v47 = 0;
        }
        else {
          uint64_t v47 = 31;
        }
        uint64_t v48 = v47 + ((*v46 - 1) & 0x1F);
        *uint64_t v46 = v48;
        v46[v48] = v43;
        *(_DWORD *)(v45 + 4 * v48) = v31++;
      }
      while (v31 < v145);
    }
    unsigned int v10 = a2 - v9;
    *(_DWORD *)(a1 + 44) = v145;
    unint64_t v49 = ((0xCF1BBCDCBB000000 * *(void *)(v9 + v145 + 8)) ^ v19) >> (56 - v8);
    uint64_t v50 = (v49 >> 3) & 0x1FFFFFE0;
    _X2 = v6 + 4 * v50;
    __asm
    {
      PRFM            #0, [X2]
      PRFM            #0, [X2,#0x40]
    }
    _X17 = v7 + v50;
    __asm { PRFM            #0, [X17] }
    LODWORD(_X17) = *(_DWORD *)(v30 + 4 * (v145 & 7));
    *(_DWORD *)(v30 + 4 * (v145 & 7)) = v49;
  }
  *(_DWORD *)(a1 + 104) += _X17;
  uint64_t v55 = (_X17 >> 3) & 0x1FFFFFE0;
  uint64_t v56 = v6 + 4 * v55;
  unint64_t v57 = (__int16 *)(v7 + v55);
  int16x8x2_t v152 = vld2q_s16(v57);
  char v58 = *(unsigned char *)v57;
  int8x16_t v59 = vdupq_n_s8(_X17);
  unint64_t v60 = __ROR8__(vsli_n_s8(vshrn_n_s16((int16x8_t)vceqq_s8(v59, (int8x16_t)v152.val[0]), 6uLL), vshrn_n_s16((int16x8_t)vceqq_s8(v59, (int8x16_t)v152.val[1]), 6uLL), 4uLL), 2 * *(unsigned char *)v57) & 0x5555555555555555;
  if (v60)
  {
    uint64_t v61 = 0;
    int v62 = (2 * *(unsigned char *)v57);
    do
    {
      unsigned int v63 = ((__clz(__rbit64(v60)) + v62) >> 1) & 0x1F;
      if (v63)
      {
        uint64_t v64 = *(unsigned int *)(v56 + 4 * v63);
        if (v64 < v13) {
          break;
        }
        _X7 = v9 + v64;
        __asm { PRFM            #0, [X7] }
        v150[v61++] = v64;
        --v20;
      }
      v60 &= v60 - 1;
    }
    while (v60 && v20);
  }
  else
  {
    uint64_t v61 = 0;
  }
  uint64_t v67 = (v58 - 1) & 0x1F;
  if (((v58 - 1) & 0x1F) != 0) {
    uint64_t v68 = 0;
  }
  else {
    uint64_t v68 = 31;
  }
  uint64_t v69 = v68 + v67;
  *(unsigned char *)unint64_t v57 = v69;
  *((unsigned char *)v57 + v69) = _X17;
  int v148 = (void *)(v9 + v12);
  int v70 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v70 + 1;
  *(_DWORD *)(v56 + 4 * v69) = v70;
  if (v61)
  {
    uint64_t v71 = 0;
    unint64_t v72 = a3 - 7;
    uint64_t v73 = a2 + 1;
    uint64_t v74 = v9 + 8;
    unint64_t v75 = 3;
    while (1)
    {
      uint64_t v76 = v150[v71];
      unint64_t v77 = (void *)(v9 + v76);
      if (*(_DWORD *)(v9 + v76 + v75 - 3) != *(_DWORD *)((char *)a2 + v75 - 3)) {
        goto LABEL_52;
      }
      if (v72 <= (unint64_t)a2)
      {
        unint64_t v80 = a2;
      }
      else
      {
        unint64_t v78 = *a2 ^ *v77;
        if (v78)
        {
          unint64_t v79 = __clz(__rbit64(v78)) >> 3;
          goto LABEL_50;
        }
        uint64_t v81 = 0;
        while (1)
        {
          unint64_t v80 = &v73[v81];
          if ((unint64_t)&v73[v81] >= v72) {
            break;
          }
          uint64_t v82 = *(void *)(v74 + v76 + v81 * 8);
          ++v81;
          unint64_t v83 = *v80 ^ v82;
          if (v83)
          {
            unint64_t v79 = v81 * 8 + (__clz(__rbit64(v83)) >> 3);
            goto LABEL_50;
          }
        }
        unint64_t v77 = (void *)(v74 + v76 + v81 * 8);
      }
      if ((unint64_t)v80 < a3 - 3 && *(_DWORD *)v77 == *(_DWORD *)v80)
      {
        unint64_t v80 = (void *)((char *)v80 + 4);
        unint64_t v77 = (void *)((char *)v77 + 4);
      }
      if ((unint64_t)v80 < a3 - 1 && *(unsigned __int16 *)v77 == *(unsigned __int16 *)v80)
      {
        unint64_t v80 = (void *)((char *)v80 + 2);
        unint64_t v77 = (void *)((char *)v77 + 2);
      }
      if ((unint64_t)v80 < a3 && *(unsigned __int8 *)v77 == *(unsigned __int8 *)v80) {
        unint64_t v80 = (void *)((char *)v80 + 1);
      }
      unint64_t v79 = (char *)v80 - (char *)a2;
LABEL_50:
      if (v79 > v75)
      {
        *a4 = v10 + 3 - v76;
        unint64_t v75 = v79;
        if ((void *)((char *)a2 + v79) == (void *)a3) {
          goto LABEL_60;
        }
      }
LABEL_52:
      ++v71;
      unint64_t v79 = v75;
      if (v71 == v61) {
        goto LABEL_60;
      }
    }
  }
  unint64_t v79 = 3;
LABEL_60:
  uint64_t v84 = 0;
  uint64_t v85 = *(char **)v16;
  uint64_t v86 = *(void *)(v16 + 8);
  int v87 = *(void *)v16 - v86 - v12;
  uint64_t v88 = *(void *)(v16 + 112);
  do
  {
    _X16 = v86 + *(unsigned int *)(v88 + 16 * v22 + v84);
    __asm { PRFM            #0, [X16] }
    v84 += 4;
  }
  while (v84 != 12);
  unsigned int v91 = v20 + v28;
  if ((v20 + v28) >= 3) {
    uint64_t v92 = 3;
  }
  else {
    uint64_t v92 = v91;
  }
  unint64_t v143 = *(unsigned int *)(v88 + ((16 * v22) | 0xC));
  int v144 = v92;
  uint64_t v140 = *(void *)(v16 + 128);
  unint64_t v141 = v143 >> 8;
  _X8 = v140 + 4 * (v143 >> 8);
  __asm { PRFM            #0, [X8] }
  int v142 = v87;
  if (v92)
  {
    int v146 = v10 + v87 + 3;
    unint64_t v95 = (unsigned int *)(v88 + 16 * v22);
    do
    {
      unsigned int v97 = *v95++;
      uint64_t v96 = v97;
      if (!v97) {
        return v79;
      }
      if (*(_DWORD *)(v86 + v96) == *(_DWORD *)a2)
      {
        unint64_t v98 = sub_1DD2A6010((void *)((char *)a2 + 4), (char *)(v86 + v96 + 4), a3, v85, v148);
        a3 = (unint64_t)v149;
        unint64_t v99 = v98 + 4;
        if (v98 + 4 > v79)
        {
          *a4 = (v146 - v96);
          unint64_t v79 = v98 + 4;
          if ((void *)((char *)a2 + v99) == v149) {
            return v99;
          }
        }
      }
    }
    while (--v92);
  }
  if (v91 - v144 >= v143) {
    unsigned int v100 = v143;
  }
  else {
    unsigned int v100 = v91 - v144;
  }
  if (!v100) {
    return v79;
  }
  uint64_t v101 = 4 * v100;
  unsigned int v102 = (unsigned int *)(v140 + 4 * v141);
  do
  {
    unsigned int v103 = *v102++;
    _X10 = v86 + v103;
    __asm { PRFM            #0, [X10] }
    v101 -= 4;
  }
  while (v101);
  int v106 = *(_DWORD *)a2;
  uint64_t v107 = (unsigned int *)(v140 + 4 * v141);
  unint64_t v99 = v79;
  do
  {
    unsigned int v109 = *v107++;
    unsigned int v108 = v109;
    uint64_t v110 = v86 + v109;
    if (*(_DWORD *)v110 == v106)
    {
      unint64_t v111 = sub_1DD2A6010((void *)((char *)a2 + 4), (char *)(v110 + 4), a3, v85, v148);
      a3 = (unint64_t)v149;
      if (v111 + 4 > v99)
      {
        *a4 = v145 + v142 + 3 - v108;
        unint64_t v99 = v111 + 4;
        if ((void *)((char *)a2 + v111 + 4) == v149) {
          break;
        }
      }
    }
    --v100;
  }
  while (v100);
  return v99;
}

unint64_t sub_1DD2CC478(uint64_t a1, void *a2, unint64_t a3, void *a4)
{
  uint64_t v155 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 112);
  uint64_t v7 = *(void *)(a1 + 56);
  int v8 = *(_DWORD *)(a1 + 52);
  uint64_t v9 = *(void *)(a1 + 8);
  unsigned int v10 = a2 - v9;
  unsigned int v11 = 1 << *(_DWORD *)(a1 + 256);
  uint64_t v12 = *(unsigned int *)(a1 + 24);
  unsigned int v13 = a2 - v9 - v11;
  _ZF = (int)a2 - (int)v9 - *(_DWORD *)(a1 + 28) > v11 && *(_DWORD *)(a1 + 40) == 0;
  if (!_ZF) {
    unsigned int v13 = *(_DWORD *)(a1 + 28);
  }
  unsigned int v15 = *(_DWORD *)(a1 + 268);
  uint64_t v16 = *(void *)(a1 + 248);
  int v17 = 66 - *(_DWORD *)(v16 + 264);
  char v18 = v15 - 6;
  if (v15 >= 6) {
    LOBYTE(v15) = 6;
  }
  uint64_t v19 = *(void *)(a1 + 96);
  int v20 = 1 << v15;
  unint64_t v21 = 0xCF1BBCDCBB000000 * *a2;
  unint64_t v22 = v21 >> v17;
  _X4 = *(void *)(v16 + 112) + 16 * (v21 >> v17);
  __asm { PRFM            #0, [X4] }
  int v28 = 1 << v18;
  if (!(!_ZF & _CF)) {
    int v28 = 0;
  }
  unint64_t v153 = (void *)a3;
  unsigned int v149 = a2 - v9;
  if (*(_DWORD *)(a1 + 300))
  {
    _X17 = (v21 ^ v19) >> (56 - v8);
    *(_DWORD *)(a1 + 44) = v10;
  }
  else
  {
    uint64_t v30 = a1 + 64;
    unint64_t v31 = *(unsigned int *)(a1 + 44);
    if (v10 - v31 >= 0x181)
    {
      uint64_t v32 = *(void *)(a1 + 56);
      uint64_t v33 = *(void *)(a1 + 112);
      if (v31 <= 0xFFFFFF9F)
      {
        unint64_t v115 = v31 + 96;
        do
        {
          unint64_t v116 = ((0xCF1BBCDCBB000000 * *(void *)(v9 + 8 + v31)) ^ *(void *)(a1 + 96)) >> (56 - v8);
          uint64_t v117 = (v116 >> 2) & 0x3FFFFFC0;
          _X23 = v6 + 4 * v117;
          __asm
          {
            PRFM            #0, [X23]
            PRFM            #0, [X23,#0x40]
          }
          _X22 = v7 + v117;
          __asm
          {
            PRFM            #0, [X22]
            PRFM            #0, [X22,#0x20]
          }
          unint64_t v124 = *(unsigned int *)(v30 + 4 * (v31 & 7));
          *(_DWORD *)(v30 + 4 * (v31 & 7)) = v116;
          uint64_t v125 = (v124 >> 2) & 0x3FFFFFC0;
          uint64_t v126 = v6 + 4 * v125;
          uint64_t v127 = (unsigned char *)(v7 + v125);
          if (((*v127 - 1) & 0x3F) != 0) {
            uint64_t v128 = 0;
          }
          else {
            uint64_t v128 = 63;
          }
          uint64_t v129 = v128 + ((*v127 - 1) & 0x3F);
          *uint64_t v127 = v129;
          v127[v129] = v124;
          *(_DWORD *)(v126 + 4 * v129) = v31++;
        }
        while (v31 < v115);
        uint64_t v33 = *(void *)(a1 + 112);
        uint64_t v32 = *(void *)(a1 + 56);
        unsigned int v10 = a2 - v9;
      }
      uint64_t v130 = v10 - 32;
      LODWORD(v31) = v10 - 32;
      int v131 = a2 + 1 - (v9 + v130);
      if ((v131 + 1) < 8) {
        int v132 = v131 + 1;
      }
      else {
        int v132 = 8;
      }
      if ((unint64_t)a2 + 1 >= v9 + v130) {
        int v133 = v132;
      }
      else {
        int v133 = 0;
      }
      if (v130 < v133 + (int)v130)
      {
        uint64_t v134 = *(void *)(a1 + 96);
        int v135 = 56 - *(_DWORD *)(a1 + 52);
        do
        {
          unint64_t v136 = ((0xCF1BBCDCBB000000 * *(void *)(v9 + v130)) ^ v134) >> v135;
          uint64_t v137 = (v136 >> 2) & 0x3FFFFFC0;
          _X25 = v33 + 4 * v137;
          __asm
          {
            PRFM            #0, [X25]
            PRFM            #0, [X25,#0x40]
          }
          _X24 = v32 + v137;
          __asm
          {
            PRFM            #0, [X24]
            PRFM            #0, [X24,#0x20]
          }
          *(_DWORD *)(a1 + 4 * (v130++ & 7) + 64) = v136;
          --v133;
        }
        while (v133);
        unsigned int v10 = a2 - v9;
      }
    }
    else
    {
      uint64_t v32 = *(void *)(a1 + 56);
      uint64_t v33 = *(void *)(a1 + 112);
    }
    if (v31 < v10)
    {
      uint64_t v34 = *(void *)(a1 + 8) + 8;
      int v35 = 56 - *(_DWORD *)(a1 + 52);
      unint64_t v31 = v31;
      do
      {
        unint64_t v36 = ((0xCF1BBCDCBB000000 * *(void *)(v34 + v31)) ^ *(void *)(a1 + 96)) >> v35;
        uint64_t v37 = (v36 >> 2) & 0x3FFFFFC0;
        _X25 = v33 + 4 * v37;
        __asm
        {
          PRFM            #0, [X25]
          PRFM            #0, [X25,#0x40]
        }
        _X24 = v32 + v37;
        __asm
        {
          PRFM            #0, [X24]
          PRFM            #0, [X24,#0x20]
        }
        unint64_t v44 = *(unsigned int *)(v30 + 4 * (v31 & 7));
        *(_DWORD *)(v30 + 4 * (v31 & 7)) = v36;
        uint64_t v45 = (v44 >> 2) & 0x3FFFFFC0;
        uint64_t v46 = v33 + 4 * v45;
        uint64_t v47 = (unsigned char *)(v32 + v45);
        if (((*v47 - 1) & 0x3F) != 0) {
          uint64_t v48 = 0;
        }
        else {
          uint64_t v48 = 63;
        }
        uint64_t v49 = v48 + ((*v47 - 1) & 0x3F);
        *uint64_t v47 = v49;
        v47[v49] = v44;
        *(_DWORD *)(v46 + 4 * v49) = v31++;
      }
      while (v31 < v149);
    }
    unsigned int v10 = a2 - v9;
    *(_DWORD *)(a1 + 44) = v149;
    unint64_t v50 = ((0xCF1BBCDCBB000000 * *(void *)(v9 + v149 + 8)) ^ v19) >> (56 - v8);
    uint64_t v51 = (v50 >> 2) & 0x3FFFFFC0;
    _X2 = v6 + 4 * v51;
    __asm
    {
      PRFM            #0, [X2]
      PRFM            #0, [X2,#0x40]
    }
    _X17 = v7 + v51;
    __asm
    {
      PRFM            #0, [X17]
      PRFM            #0, [X17,#0x20]
    }
    LODWORD(_X17) = *(_DWORD *)(v30 + 4 * (v149 & 7));
    *(_DWORD *)(v30 + 4 * (v149 & 7)) = v50;
  }
  *(_DWORD *)(a1 + 104) += _X17;
  uint64_t v57 = (_X17 >> 2) & 0x3FFFFFC0;
  uint64_t v58 = v6 + 4 * v57;
  int8x16_t v59 = (char *)(v7 + v57);
  char v60 = *v59;
  int8x16x4_t v156 = vld4q_s8(v59);
  int8x16_t v61 = vdupq_n_s8(_X17);
  v156.val[0] = vsriq_n_s8(vsriq_n_s8(vceqq_s8(v156.val[3], v61), vceqq_s8(v156.val[2], v61), 1uLL), vsriq_n_s8(vceqq_s8(v156.val[1], v61), vceqq_s8(v156.val[0], v61), 1uLL), 2uLL);
  int8x8_t v62 = vshrn_n_s16((int16x8_t)vsriq_n_s8(v156.val[0], v156.val[0], 4uLL), 4uLL);
  uint64_t v63 = 0;
  if (v62)
  {
    unint64_t v64 = __ROR8__(*(void *)&v62, v60);
    do
    {
      unsigned int v65 = (__clz(__rbit64(v64)) + v60) & 0x3F;
      if (v65)
      {
        uint64_t v66 = *(unsigned int *)(v58 + 4 * v65);
        if (v66 < v13) {
          break;
        }
        _X6 = v9 + v66;
        __asm { PRFM            #0, [X6] }
        v154[v63++] = v66;
        --v20;
      }
      v64 &= v64 - 1;
    }
    while (v64 && v20);
  }
  uint64_t v69 = (v60 - 1) & 0x3F;
  if (((v60 - 1) & 0x3F) != 0) {
    uint64_t v70 = 0;
  }
  else {
    uint64_t v70 = 63;
  }
  uint64_t v71 = v70 + v69;
  *int8x16_t v59 = v71;
  v59[v71] = _X17;
  int16x8x2_t v152 = (void *)(v9 + v12);
  int v72 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v72 + 1;
  *(_DWORD *)(v58 + 4 * v71) = v72;
  if (v63)
  {
    uint64_t v73 = 0;
    unint64_t v74 = a3 - 7;
    unint64_t v75 = a2 + 1;
    uint64_t v76 = v9 + 8;
    unint64_t v77 = 3;
    while (1)
    {
      uint64_t v78 = v154[v73];
      unint64_t v79 = (void *)(v9 + v78);
      if (*(_DWORD *)(v9 + v78 + v77 - 3) != *(_DWORD *)((char *)a2 + v77 - 3)) {
        goto LABEL_50;
      }
      if (v74 <= (unint64_t)a2)
      {
        uint64_t v82 = a2;
      }
      else
      {
        unint64_t v80 = *a2 ^ *v79;
        if (v80)
        {
          unint64_t v81 = __clz(__rbit64(v80)) >> 3;
          goto LABEL_48;
        }
        uint64_t v83 = 0;
        while (1)
        {
          uint64_t v82 = &v75[v83];
          if ((unint64_t)&v75[v83] >= v74) {
            break;
          }
          uint64_t v84 = *(void *)(v76 + v78 + v83 * 8);
          ++v83;
          unint64_t v85 = *v82 ^ v84;
          if (v85)
          {
            unint64_t v81 = v83 * 8 + (__clz(__rbit64(v85)) >> 3);
            goto LABEL_48;
          }
        }
        unint64_t v79 = (void *)(v76 + v78 + v83 * 8);
      }
      if ((unint64_t)v82 < a3 - 3 && *(_DWORD *)v79 == *(_DWORD *)v82)
      {
        uint64_t v82 = (void *)((char *)v82 + 4);
        unint64_t v79 = (void *)((char *)v79 + 4);
      }
      if ((unint64_t)v82 < a3 - 1 && *(unsigned __int16 *)v79 == *(unsigned __int16 *)v82)
      {
        uint64_t v82 = (void *)((char *)v82 + 2);
        unint64_t v79 = (void *)((char *)v79 + 2);
      }
      if ((unint64_t)v82 < a3 && *(unsigned __int8 *)v79 == *(unsigned __int8 *)v82) {
        uint64_t v82 = (void *)((char *)v82 + 1);
      }
      unint64_t v81 = (char *)v82 - (char *)a2;
LABEL_48:
      if (v81 > v77)
      {
        *a4 = v10 + 3 - v78;
        unint64_t v77 = v81;
        if ((void *)((char *)a2 + v81) == (void *)a3) {
          goto LABEL_58;
        }
      }
LABEL_50:
      ++v73;
      unint64_t v81 = v77;
      if (v73 == v63) {
        goto LABEL_58;
      }
    }
  }
  unint64_t v81 = 3;
LABEL_58:
  uint64_t v86 = 0;
  int v87 = *(char **)v16;
  uint64_t v88 = *(void *)(v16 + 8);
  int v89 = *(void *)v16 - v88 - v12;
  uint64_t v90 = *(void *)(v16 + 112);
  do
  {
    _X16 = v88 + *(unsigned int *)(v90 + 16 * v22 + v86);
    __asm { PRFM            #0, [X16] }
    v86 += 4;
  }
  while (v86 != 12);
  unsigned int v93 = v20 + v28;
  if ((v20 + v28) >= 3) {
    uint64_t v94 = 3;
  }
  else {
    uint64_t v94 = v93;
  }
  unint64_t v147 = *(unsigned int *)(v90 + ((16 * v22) | 0xC));
  int v148 = v94;
  uint64_t v144 = *(void *)(v16 + 128);
  unint64_t v145 = v147 >> 8;
  _X8 = v144 + 4 * (v147 >> 8);
  __asm { PRFM            #0, [X8] }
  int v146 = v89;
  if (v94)
  {
    int v150 = v10 + v89 + 3;
    unsigned int v97 = (unsigned int *)(v90 + 16 * v22);
    do
    {
      unsigned int v99 = *v97++;
      uint64_t v98 = v99;
      if (!v99) {
        return v81;
      }
      if (*(_DWORD *)(v88 + v98) == *(_DWORD *)a2)
      {
        unint64_t v100 = sub_1DD2A6010((void *)((char *)a2 + 4), (char *)(v88 + v98 + 4), a3, v87, v152);
        a3 = (unint64_t)v153;
        unint64_t v101 = v100 + 4;
        if (v100 + 4 > v81)
        {
          *a4 = (v150 - v98);
          unint64_t v81 = v100 + 4;
          if ((void *)((char *)a2 + v101) == v153) {
            return v101;
          }
        }
      }
    }
    while (--v94);
  }
  if (v93 - v148 >= v147) {
    unsigned int v102 = v147;
  }
  else {
    unsigned int v102 = v93 - v148;
  }
  if (!v102) {
    return v81;
  }
  uint64_t v103 = 4 * v102;
  uint64_t v104 = (unsigned int *)(v144 + 4 * v145);
  do
  {
    unsigned int v105 = *v104++;
    _X10 = v88 + v105;
    __asm { PRFM            #0, [X10] }
    v103 -= 4;
  }
  while (v103);
  int v108 = *(_DWORD *)a2;
  unsigned int v109 = (unsigned int *)(v144 + 4 * v145);
  unint64_t v101 = v81;
  do
  {
    unsigned int v111 = *v109++;
    unsigned int v110 = v111;
    uint64_t v112 = v88 + v111;
    if (*(_DWORD *)v112 == v108)
    {
      unint64_t v113 = sub_1DD2A6010((void *)((char *)a2 + 4), (char *)(v112 + 4), a3, v87, v152);
      a3 = (unint64_t)v153;
      if (v113 + 4 > v101)
      {
        *a4 = v149 + v146 + 3 - v110;
        unint64_t v101 = v113 + 4;
        if ((void *)((char *)a2 + v113 + 4) == v153) {
          break;
        }
      }
    }
    --v102;
  }
  while (v102);
  return v101;
}

unint64_t sub_1DD2CCBF8(uint64_t a1, void *a2, unint64_t a3, void *a4)
{
  uint64_t v146 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 112);
  uint64_t v7 = *(void *)(a1 + 56);
  int v8 = *(_DWORD *)(a1 + 52);
  uint64_t v9 = *(void *)(a1 + 8);
  unsigned int v10 = a2 - v9;
  unsigned int v11 = 1 << *(_DWORD *)(a1 + 256);
  uint64_t v12 = *(unsigned int *)(a1 + 24);
  unsigned int v13 = a2 - v9 - v11;
  _ZF = (int)a2 - (int)v9 - *(_DWORD *)(a1 + 28) > v11 && *(_DWORD *)(a1 + 40) == 0;
  if (!_ZF) {
    unsigned int v13 = *(_DWORD *)(a1 + 28);
  }
  unsigned int v15 = *(_DWORD *)(a1 + 268);
  uint64_t v16 = *(void *)(a1 + 248);
  int v17 = 66 - *(_DWORD *)(v16 + 264);
  char v18 = v15 - 4;
  if (v15 >= 4) {
    LOBYTE(v15) = 4;
  }
  uint64_t v19 = *(void *)(a1 + 96);
  int v20 = 1 << v15;
  unint64_t v21 = 0xCF1BBCDCBF9B0000 * *a2;
  unint64_t v22 = v21 >> v17;
  _X4 = *(void *)(v16 + 112) + 16 * (v21 >> v17);
  __asm { PRFM            #0, [X4] }
  int v28 = 1 << v18;
  if (!(!_ZF & _CF)) {
    int v28 = 0;
  }
  uint64_t v144 = (void *)a3;
  unsigned int v140 = a2 - v9;
  if (*(_DWORD *)(a1 + 300))
  {
    _X17 = (v21 ^ v19) >> (56 - v8);
    *(_DWORD *)(a1 + 44) = v10;
  }
  else
  {
    uint64_t v30 = a1 + 64;
    unint64_t v31 = *(unsigned int *)(a1 + 44);
    if (v10 - v31 >= 0x181)
    {
      uint64_t v32 = *(void *)(a1 + 56);
      uint64_t v33 = *(void *)(a1 + 112);
      if (v31 <= 0xFFFFFF9F)
      {
        unint64_t v110 = v31 + 96;
        do
        {
          unint64_t v111 = ((0xCF1BBCDCBF9B0000 * *(void *)(v9 + 8 + v31)) ^ *(void *)(a1 + 96)) >> (56 - v8);
          uint64_t v112 = (v111 >> 4) & 0xFFFFFF0;
          _X23 = v6 + 4 * v112;
          __asm { PRFM            #0, [X23] }
          _X22 = v7 + v112;
          __asm { PRFM            #0, [X22] }
          unint64_t v117 = *(unsigned int *)(v30 + 4 * (v31 & 7));
          *(_DWORD *)(v30 + 4 * (v31 & 7)) = v111;
          uint64_t v118 = (v117 >> 4) & 0xFFFFFF0;
          uint64_t v119 = v6 + 4 * v118;
          int v120 = (unsigned char *)(v7 + v118);
          if (((*v120 - 1) & 0xF) != 0) {
            uint64_t v121 = 0;
          }
          else {
            uint64_t v121 = 15;
          }
          uint64_t v122 = v121 + ((*v120 - 1) & 0xF);
          *int v120 = v122;
          v120[v122] = v117;
          *(_DWORD *)(v119 + 4 * v122) = v31++;
        }
        while (v31 < v110);
        uint64_t v33 = *(void *)(a1 + 112);
        uint64_t v32 = *(void *)(a1 + 56);
        unsigned int v10 = a2 - v9;
      }
      uint64_t v123 = v10 - 32;
      LODWORD(v31) = v10 - 32;
      int v124 = a2 + 1 - (v9 + v123);
      if ((v124 + 1) < 8) {
        int v125 = v124 + 1;
      }
      else {
        int v125 = 8;
      }
      if ((unint64_t)a2 + 1 >= v9 + v123) {
        int v126 = v125;
      }
      else {
        int v126 = 0;
      }
      if (v123 < v126 + (int)v123)
      {
        uint64_t v127 = *(void *)(a1 + 96);
        int v128 = 56 - *(_DWORD *)(a1 + 52);
        do
        {
          unint64_t v129 = ((0xCF1BBCDCBF9B0000 * *(void *)(v9 + v123)) ^ v127) >> v128;
          uint64_t v130 = (v129 >> 4) & 0xFFFFFF0;
          _X25 = v33 + 4 * v130;
          __asm { PRFM            #0, [X25] }
          _X24 = v32 + v130;
          __asm { PRFM            #0, [X24] }
          *(_DWORD *)(a1 + 4 * (v123++ & 7) + 64) = v129;
          --v126;
        }
        while (v126);
        unsigned int v10 = a2 - v9;
      }
    }
    else
    {
      uint64_t v32 = *(void *)(a1 + 56);
      uint64_t v33 = *(void *)(a1 + 112);
    }
    if (v31 < v10)
    {
      uint64_t v34 = *(void *)(a1 + 8) + 8;
      int v35 = 56 - *(_DWORD *)(a1 + 52);
      unint64_t v31 = v31;
      do
      {
        unint64_t v36 = ((0xCF1BBCDCBF9B0000 * *(void *)(v34 + v31)) ^ *(void *)(a1 + 96)) >> v35;
        uint64_t v37 = (v36 >> 4) & 0xFFFFFF0;
        _X25 = v33 + 4 * v37;
        __asm { PRFM            #0, [X25] }
        _X24 = v32 + v37;
        __asm { PRFM            #0, [X24] }
        unint64_t v42 = *(unsigned int *)(v30 + 4 * (v31 & 7));
        *(_DWORD *)(v30 + 4 * (v31 & 7)) = v36;
        uint64_t v43 = (v42 >> 4) & 0xFFFFFF0;
        uint64_t v44 = v33 + 4 * v43;
        uint64_t v45 = (unsigned char *)(v32 + v43);
        if (((*v45 - 1) & 0xF) != 0) {
          uint64_t v46 = 0;
        }
        else {
          uint64_t v46 = 15;
        }
        uint64_t v47 = v46 + ((*v45 - 1) & 0xF);
        unsigned char *v45 = v47;
        v45[v47] = v42;
        *(_DWORD *)(v44 + 4 * v47) = v31++;
      }
      while (v31 < v140);
    }
    unsigned int v10 = a2 - v9;
    *(_DWORD *)(a1 + 44) = v140;
    unint64_t v48 = ((0xCF1BBCDCBF9B0000 * *(void *)(v9 + v140 + 8)) ^ v19) >> (56 - v8);
    uint64_t v49 = (v48 >> 4) & 0xFFFFFF0;
    _X2 = v6 + 4 * v49;
    __asm { PRFM            #0, [X2] }
    _X17 = v7 + v49;
    __asm { PRFM            #0, [X17] }
    LODWORD(_X17) = *(_DWORD *)(v30 + 4 * (v140 & 7));
    *(_DWORD *)(v30 + 4 * (v140 & 7)) = v48;
  }
  *(_DWORD *)(a1 + 104) += _X17;
  uint64_t v53 = (_X17 >> 4) & 0xFFFFFF0;
  uint64_t v54 = v6 + 4 * v53;
  uint64_t v55 = (int8x16_t *)(v7 + v53);
  char v56 = (char)*v55;
  unint64_t v57 = __ROR8__(vshrn_n_s16((int16x8_t)vceqq_s8(*v55, vdupq_n_s8(_X17)), 4uLL), 4 * v55->i8[0]) & 0x8888888888888888;
  if (v57)
  {
    uint64_t v58 = 0;
    int v59 = (4 * v55->i8[0]);
    do
    {
      unsigned int v60 = ((__clz(__rbit64(v57)) + v59) >> 2) & 0xF;
      if (v60)
      {
        uint64_t v61 = *(unsigned int *)(v54 + 4 * v60);
        if (v61 < v13) {
          break;
        }
        _X7 = v9 + v61;
        __asm { PRFM            #0, [X7] }
        v145[v58++] = v61;
        --v20;
      }
      v57 &= v57 - 1;
    }
    while (v57 && v20);
  }
  else
  {
    uint64_t v58 = 0;
  }
  uint64_t v64 = (v56 - 1) & 0xF;
  if (((v56 - 1) & 0xF) != 0) {
    uint64_t v65 = 0;
  }
  else {
    uint64_t v65 = 15;
  }
  uint64_t v66 = v65 + v64;
  v55->i8[0] = v66;
  v55->i8[v66] = _X17;
  unint64_t v143 = (void *)(v9 + v12);
  int v67 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v67 + 1;
  *(_DWORD *)(v54 + 4 * v66) = v67;
  if (v58)
  {
    uint64_t v68 = 0;
    unint64_t v69 = a3 - 7;
    uint64_t v70 = a2 + 1;
    uint64_t v71 = v9 + 8;
    unint64_t v72 = 3;
    while (1)
    {
      uint64_t v73 = v145[v68];
      unint64_t v74 = (void *)(v9 + v73);
      if (*(_DWORD *)(v9 + v73 + v72 - 3) != *(_DWORD *)((char *)a2 + v72 - 3)) {
        goto LABEL_52;
      }
      if (v69 <= (unint64_t)a2)
      {
        unint64_t v77 = a2;
      }
      else
      {
        unint64_t v75 = *a2 ^ *v74;
        if (v75)
        {
          unint64_t v76 = __clz(__rbit64(v75)) >> 3;
          goto LABEL_50;
        }
        uint64_t v78 = 0;
        while (1)
        {
          unint64_t v77 = &v70[v78];
          if ((unint64_t)&v70[v78] >= v69) {
            break;
          }
          uint64_t v79 = *(void *)(v71 + v73 + v78 * 8);
          ++v78;
          unint64_t v80 = *v77 ^ v79;
          if (v80)
          {
            unint64_t v76 = v78 * 8 + (__clz(__rbit64(v80)) >> 3);
            goto LABEL_50;
          }
        }
        unint64_t v74 = (void *)(v71 + v73 + v78 * 8);
      }
      if ((unint64_t)v77 < a3 - 3 && *(_DWORD *)v74 == *(_DWORD *)v77)
      {
        unint64_t v77 = (void *)((char *)v77 + 4);
        unint64_t v74 = (void *)((char *)v74 + 4);
      }
      if ((unint64_t)v77 < a3 - 1 && *(unsigned __int16 *)v74 == *(unsigned __int16 *)v77)
      {
        unint64_t v77 = (void *)((char *)v77 + 2);
        unint64_t v74 = (void *)((char *)v74 + 2);
      }
      if ((unint64_t)v77 < a3 && *(unsigned __int8 *)v74 == *(unsigned __int8 *)v77) {
        unint64_t v77 = (void *)((char *)v77 + 1);
      }
      unint64_t v76 = (char *)v77 - (char *)a2;
LABEL_50:
      if (v76 > v72)
      {
        *a4 = v10 + 3 - v73;
        unint64_t v72 = v76;
        if ((void *)((char *)a2 + v76) == (void *)a3) {
          goto LABEL_60;
        }
      }
LABEL_52:
      ++v68;
      unint64_t v76 = v72;
      if (v68 == v58) {
        goto LABEL_60;
      }
    }
  }
  unint64_t v76 = 3;
LABEL_60:
  uint64_t v81 = 0;
  uint64_t v82 = *(char **)v16;
  uint64_t v83 = *(void *)(v16 + 8);
  int v84 = *(void *)v16 - v83 - v12;
  uint64_t v85 = *(void *)(v16 + 112);
  do
  {
    _X16 = v83 + *(unsigned int *)(v85 + 16 * v22 + v81);
    __asm { PRFM            #0, [X16] }
    v81 += 4;
  }
  while (v81 != 12);
  unsigned int v88 = v20 + v28;
  if ((v20 + v28) >= 3) {
    uint64_t v89 = 3;
  }
  else {
    uint64_t v89 = v88;
  }
  unint64_t v138 = *(unsigned int *)(v85 + ((16 * v22) | 0xC));
  int v139 = v89;
  uint64_t v135 = *(void *)(v16 + 128);
  unint64_t v136 = v138 >> 8;
  _X8 = v135 + 4 * (v138 >> 8);
  __asm { PRFM            #0, [X8] }
  int v137 = v84;
  if (v89)
  {
    int v141 = v10 + v84 + 3;
    uint64_t v92 = (unsigned int *)(v85 + 16 * v22);
    do
    {
      unsigned int v94 = *v92++;
      uint64_t v93 = v94;
      if (!v94) {
        return v76;
      }
      if (*(_DWORD *)(v83 + v93) == *(_DWORD *)a2)
      {
        unint64_t v95 = sub_1DD2A6010((void *)((char *)a2 + 4), (char *)(v83 + v93 + 4), a3, v82, v143);
        a3 = (unint64_t)v144;
        unint64_t v96 = v95 + 4;
        if (v95 + 4 > v76)
        {
          *a4 = (v141 - v93);
          unint64_t v76 = v95 + 4;
          if ((void *)((char *)a2 + v96) == v144) {
            return v96;
          }
        }
      }
    }
    while (--v89);
  }
  if (v88 - v139 >= v138) {
    unsigned int v97 = v138;
  }
  else {
    unsigned int v97 = v88 - v139;
  }
  if (!v97) {
    return v76;
  }
  uint64_t v98 = 4 * v97;
  unsigned int v99 = (unsigned int *)(v135 + 4 * v136);
  do
  {
    unsigned int v100 = *v99++;
    _X10 = v83 + v100;
    __asm { PRFM            #0, [X10] }
    v98 -= 4;
  }
  while (v98);
  int v103 = *(_DWORD *)a2;
  uint64_t v104 = (unsigned int *)(v135 + 4 * v136);
  unint64_t v96 = v76;
  do
  {
    unsigned int v106 = *v104++;
    unsigned int v105 = v106;
    uint64_t v107 = v83 + v106;
    if (*(_DWORD *)v107 == v103)
    {
      unint64_t v108 = sub_1DD2A6010((void *)((char *)a2 + 4), (char *)(v107 + 4), a3, v82, v143);
      a3 = (unint64_t)v144;
      if (v108 + 4 > v96)
      {
        *a4 = v140 + v137 + 3 - v105;
        unint64_t v96 = v108 + 4;
        if ((void *)((char *)a2 + v108 + 4) == v144) {
          break;
        }
      }
    }
    --v97;
  }
  while (v97);
  return v96;
}

unint64_t sub_1DD2CD354(uint64_t a1, void *a2, unint64_t a3, void *a4)
{
  uint64_t v151 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 112);
  uint64_t v7 = *(void *)(a1 + 56);
  int v8 = *(_DWORD *)(a1 + 52);
  uint64_t v9 = *(void *)(a1 + 8);
  unsigned int v10 = a2 - v9;
  unsigned int v11 = 1 << *(_DWORD *)(a1 + 256);
  uint64_t v12 = *(unsigned int *)(a1 + 24);
  unsigned int v13 = a2 - v9 - v11;
  _ZF = (int)a2 - (int)v9 - *(_DWORD *)(a1 + 28) > v11 && *(_DWORD *)(a1 + 40) == 0;
  if (!_ZF) {
    unsigned int v13 = *(_DWORD *)(a1 + 28);
  }
  unsigned int v15 = *(_DWORD *)(a1 + 268);
  uint64_t v16 = *(void *)(a1 + 248);
  int v17 = 66 - *(_DWORD *)(v16 + 264);
  char v18 = v15 - 5;
  if (v15 >= 5) {
    LOBYTE(v15) = 5;
  }
  uint64_t v19 = *(void *)(a1 + 96);
  int v20 = 1 << v15;
  unint64_t v21 = 0xCF1BBCDCBF9B0000 * *a2;
  unint64_t v22 = v21 >> v17;
  _X4 = *(void *)(v16 + 112) + 16 * (v21 >> v17);
  __asm { PRFM            #0, [X4] }
  int v28 = 1 << v18;
  if (!(!_ZF & _CF)) {
    int v28 = 0;
  }
  unsigned int v149 = (void *)a3;
  unsigned int v145 = a2 - v9;
  if (*(_DWORD *)(a1 + 300))
  {
    _X17 = (v21 ^ v19) >> (56 - v8);
    *(_DWORD *)(a1 + 44) = v10;
  }
  else
  {
    uint64_t v30 = a1 + 64;
    unint64_t v31 = *(unsigned int *)(a1 + 44);
    if (v10 - v31 >= 0x181)
    {
      uint64_t v32 = *(void *)(a1 + 56);
      uint64_t v33 = *(void *)(a1 + 112);
      if (v31 <= 0xFFFFFF9F)
      {
        unint64_t v113 = v31 + 96;
        do
        {
          unint64_t v114 = ((0xCF1BBCDCBF9B0000 * *(void *)(v9 + 8 + v31)) ^ *(void *)(a1 + 96)) >> (56 - v8);
          uint64_t v115 = (v114 >> 3) & 0x1FFFFFE0;
          _X23 = v6 + 4 * v115;
          __asm
          {
            PRFM            #0, [X23]
            PRFM            #0, [X23,#0x40]
          }
          _X22 = v7 + v115;
          __asm { PRFM            #0, [X22] }
          unint64_t v121 = *(unsigned int *)(v30 + 4 * (v31 & 7));
          *(_DWORD *)(v30 + 4 * (v31 & 7)) = v114;
          uint64_t v122 = (v121 >> 3) & 0x1FFFFFE0;
          uint64_t v123 = v6 + 4 * v122;
          int v124 = (unsigned char *)(v7 + v122);
          if (((*v124 - 1) & 0x1F) != 0) {
            uint64_t v125 = 0;
          }
          else {
            uint64_t v125 = 31;
          }
          uint64_t v126 = v125 + ((*v124 - 1) & 0x1F);
          *int v124 = v126;
          v124[v126] = v121;
          *(_DWORD *)(v123 + 4 * v126) = v31++;
        }
        while (v31 < v113);
        uint64_t v33 = *(void *)(a1 + 112);
        uint64_t v32 = *(void *)(a1 + 56);
        unsigned int v10 = a2 - v9;
      }
      uint64_t v127 = v10 - 32;
      LODWORD(v31) = v10 - 32;
      int v128 = a2 + 1 - (v9 + v127);
      if ((v128 + 1) < 8) {
        int v129 = v128 + 1;
      }
      else {
        int v129 = 8;
      }
      if ((unint64_t)a2 + 1 >= v9 + v127) {
        int v130 = v129;
      }
      else {
        int v130 = 0;
      }
      if (v127 < v130 + (int)v127)
      {
        uint64_t v131 = *(void *)(a1 + 96);
        int v132 = 56 - *(_DWORD *)(a1 + 52);
        do
        {
          unint64_t v133 = ((0xCF1BBCDCBF9B0000 * *(void *)(v9 + v127)) ^ v131) >> v132;
          uint64_t v134 = (v133 >> 3) & 0x1FFFFFE0;
          _X25 = v33 + 4 * v134;
          __asm
          {
            PRFM            #0, [X25]
            PRFM            #0, [X25,#0x40]
          }
          _X24 = v32 + v134;
          __asm { PRFM            #0, [X24] }
          *(_DWORD *)(a1 + 4 * (v127++ & 7) + 64) = v133;
          --v130;
        }
        while (v130);
        unsigned int v10 = a2 - v9;
      }
    }
    else
    {
      uint64_t v32 = *(void *)(a1 + 56);
      uint64_t v33 = *(void *)(a1 + 112);
    }
    if (v31 < v10)
    {
      uint64_t v34 = *(void *)(a1 + 8) + 8;
      int v35 = 56 - *(_DWORD *)(a1 + 52);
      unint64_t v31 = v31;
      do
      {
        unint64_t v36 = ((0xCF1BBCDCBF9B0000 * *(void *)(v34 + v31)) ^ *(void *)(a1 + 96)) >> v35;
        uint64_t v37 = (v36 >> 3) & 0x1FFFFFE0;
        _X25 = v33 + 4 * v37;
        __asm
        {
          PRFM            #0, [X25]
          PRFM            #0, [X25,#0x40]
        }
        _X24 = v32 + v37;
        __asm { PRFM            #0, [X24] }
        unint64_t v43 = *(unsigned int *)(v30 + 4 * (v31 & 7));
        *(_DWORD *)(v30 + 4 * (v31 & 7)) = v36;
        uint64_t v44 = (v43 >> 3) & 0x1FFFFFE0;
        uint64_t v45 = v33 + 4 * v44;
        uint64_t v46 = (unsigned char *)(v32 + v44);
        if (((*v46 - 1) & 0x1F) != 0) {
          uint64_t v47 = 0;
        }
        else {
          uint64_t v47 = 31;
        }
        uint64_t v48 = v47 + ((*v46 - 1) & 0x1F);
        *uint64_t v46 = v48;
        v46[v48] = v43;
        *(_DWORD *)(v45 + 4 * v48) = v31++;
      }
      while (v31 < v145);
    }
    unsigned int v10 = a2 - v9;
    *(_DWORD *)(a1 + 44) = v145;
    unint64_t v49 = ((0xCF1BBCDCBF9B0000 * *(void *)(v9 + v145 + 8)) ^ v19) >> (56 - v8);
    uint64_t v50 = (v49 >> 3) & 0x1FFFFFE0;
    _X2 = v6 + 4 * v50;
    __asm
    {
      PRFM            #0, [X2]
      PRFM            #0, [X2,#0x40]
    }
    _X17 = v7 + v50;
    __asm { PRFM            #0, [X17] }
    LODWORD(_X17) = *(_DWORD *)(v30 + 4 * (v145 & 7));
    *(_DWORD *)(v30 + 4 * (v145 & 7)) = v49;
  }
  *(_DWORD *)(a1 + 104) += _X17;
  uint64_t v55 = (_X17 >> 3) & 0x1FFFFFE0;
  uint64_t v56 = v6 + 4 * v55;
  unint64_t v57 = (__int16 *)(v7 + v55);
  int16x8x2_t v152 = vld2q_s16(v57);
  char v58 = *(unsigned char *)v57;
  int8x16_t v59 = vdupq_n_s8(_X17);
  unint64_t v60 = __ROR8__(vsli_n_s8(vshrn_n_s16((int16x8_t)vceqq_s8(v59, (int8x16_t)v152.val[0]), 6uLL), vshrn_n_s16((int16x8_t)vceqq_s8(v59, (int8x16_t)v152.val[1]), 6uLL), 4uLL), 2 * *(unsigned char *)v57) & 0x5555555555555555;
  if (v60)
  {
    uint64_t v61 = 0;
    int v62 = (2 * *(unsigned char *)v57);
    do
    {
      unsigned int v63 = ((__clz(__rbit64(v60)) + v62) >> 1) & 0x1F;
      if (v63)
      {
        uint64_t v64 = *(unsigned int *)(v56 + 4 * v63);
        if (v64 < v13) {
          break;
        }
        _X7 = v9 + v64;
        __asm { PRFM            #0, [X7] }
        v150[v61++] = v64;
        --v20;
      }
      v60 &= v60 - 1;
    }
    while (v60 && v20);
  }
  else
  {
    uint64_t v61 = 0;
  }
  uint64_t v67 = (v58 - 1) & 0x1F;
  if (((v58 - 1) & 0x1F) != 0) {
    uint64_t v68 = 0;
  }
  else {
    uint64_t v68 = 31;
  }
  uint64_t v69 = v68 + v67;
  *(unsigned char *)unint64_t v57 = v69;
  *((unsigned char *)v57 + v69) = _X17;
  int v148 = (void *)(v9 + v12);
  int v70 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v70 + 1;
  *(_DWORD *)(v56 + 4 * v69) = v70;
  if (v61)
  {
    uint64_t v71 = 0;
    unint64_t v72 = a3 - 7;
    uint64_t v73 = a2 + 1;
    uint64_t v74 = v9 + 8;
    unint64_t v75 = 3;
    while (1)
    {
      uint64_t v76 = v150[v71];
      unint64_t v77 = (void *)(v9 + v76);
      if (*(_DWORD *)(v9 + v76 + v75 - 3) != *(_DWORD *)((char *)a2 + v75 - 3)) {
        goto LABEL_52;
      }
      if (v72 <= (unint64_t)a2)
      {
        unint64_t v80 = a2;
      }
      else
      {
        unint64_t v78 = *a2 ^ *v77;
        if (v78)
        {
          unint64_t v79 = __clz(__rbit64(v78)) >> 3;
          goto LABEL_50;
        }
        uint64_t v81 = 0;
        while (1)
        {
          unint64_t v80 = &v73[v81];
          if ((unint64_t)&v73[v81] >= v72) {
            break;
          }
          uint64_t v82 = *(void *)(v74 + v76 + v81 * 8);
          ++v81;
          unint64_t v83 = *v80 ^ v82;
          if (v83)
          {
            unint64_t v79 = v81 * 8 + (__clz(__rbit64(v83)) >> 3);
            goto LABEL_50;
          }
        }
        unint64_t v77 = (void *)(v74 + v76 + v81 * 8);
      }
      if ((unint64_t)v80 < a3 - 3 && *(_DWORD *)v77 == *(_DWORD *)v80)
      {
        unint64_t v80 = (void *)((char *)v80 + 4);
        unint64_t v77 = (void *)((char *)v77 + 4);
      }
      if ((unint64_t)v80 < a3 - 1 && *(unsigned __int16 *)v77 == *(unsigned __int16 *)v80)
      {
        unint64_t v80 = (void *)((char *)v80 + 2);
        unint64_t v77 = (void *)((char *)v77 + 2);
      }
      if ((unint64_t)v80 < a3 && *(unsigned __int8 *)v77 == *(unsigned __int8 *)v80) {
        unint64_t v80 = (void *)((char *)v80 + 1);
      }
      unint64_t v79 = (char *)v80 - (char *)a2;
LABEL_50:
      if (v79 > v75)
      {
        *a4 = v10 + 3 - v76;
        unint64_t v75 = v79;
        if ((void *)((char *)a2 + v79) == (void *)a3) {
          goto LABEL_60;
        }
      }
LABEL_52:
      ++v71;
      unint64_t v79 = v75;
      if (v71 == v61) {
        goto LABEL_60;
      }
    }
  }
  unint64_t v79 = 3;
LABEL_60:
  uint64_t v84 = 0;
  uint64_t v85 = *(char **)v16;
  uint64_t v86 = *(void *)(v16 + 8);
  int v87 = *(void *)v16 - v86 - v12;
  uint64_t v88 = *(void *)(v16 + 112);
  do
  {
    _X16 = v86 + *(unsigned int *)(v88 + 16 * v22 + v84);
    __asm { PRFM            #0, [X16] }
    v84 += 4;
  }
  while (v84 != 12);
  unsigned int v91 = v20 + v28;
  if ((v20 + v28) >= 3) {
    uint64_t v92 = 3;
  }
  else {
    uint64_t v92 = v91;
  }
  unint64_t v143 = *(unsigned int *)(v88 + ((16 * v22) | 0xC));
  int v144 = v92;
  uint64_t v140 = *(void *)(v16 + 128);
  unint64_t v141 = v143 >> 8;
  _X8 = v140 + 4 * (v143 >> 8);
  __asm { PRFM            #0, [X8] }
  int v142 = v87;
  if (v92)
  {
    int v146 = v10 + v87 + 3;
    unint64_t v95 = (unsigned int *)(v88 + 16 * v22);
    do
    {
      unsigned int v97 = *v95++;
      uint64_t v96 = v97;
      if (!v97) {
        return v79;
      }
      if (*(_DWORD *)(v86 + v96) == *(_DWORD *)a2)
      {
        unint64_t v98 = sub_1DD2A6010((void *)((char *)a2 + 4), (char *)(v86 + v96 + 4), a3, v85, v148);
        a3 = (unint64_t)v149;
        unint64_t v99 = v98 + 4;
        if (v98 + 4 > v79)
        {
          *a4 = (v146 - v96);
          unint64_t v79 = v98 + 4;
          if ((void *)((char *)a2 + v99) == v149) {
            return v99;
          }
        }
      }
    }
    while (--v92);
  }
  if (v91 - v144 >= v143) {
    unsigned int v100 = v143;
  }
  else {
    unsigned int v100 = v91 - v144;
  }
  if (!v100) {
    return v79;
  }
  uint64_t v101 = 4 * v100;
  unsigned int v102 = (unsigned int *)(v140 + 4 * v141);
  do
  {
    unsigned int v103 = *v102++;
    _X10 = v86 + v103;
    __asm { PRFM            #0, [X10] }
    v101 -= 4;
  }
  while (v101);
  int v106 = *(_DWORD *)a2;
  uint64_t v107 = (unsigned int *)(v140 + 4 * v141);
  unint64_t v99 = v79;
  do
  {
    unsigned int v109 = *v107++;
    unsigned int v108 = v109;
    uint64_t v110 = v86 + v109;
    if (*(_DWORD *)v110 == v106)
    {
      unint64_t v111 = sub_1DD2A6010((void *)((char *)a2 + 4), (char *)(v110 + 4), a3, v85, v148);
      a3 = (unint64_t)v149;
      if (v111 + 4 > v99)
      {
        *a4 = v145 + v142 + 3 - v108;
        unint64_t v99 = v111 + 4;
        if ((void *)((char *)a2 + v111 + 4) == v149) {
          break;
        }
      }
    }
    --v100;
  }
  while (v100);
  return v99;
}

unint64_t sub_1DD2CDAC8(uint64_t a1, void *a2, unint64_t a3, void *a4)
{
  uint64_t v155 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 112);
  uint64_t v7 = *(void *)(a1 + 56);
  int v8 = *(_DWORD *)(a1 + 52);
  uint64_t v9 = *(void *)(a1 + 8);
  unsigned int v10 = a2 - v9;
  unsigned int v11 = 1 << *(_DWORD *)(a1 + 256);
  uint64_t v12 = *(unsigned int *)(a1 + 24);
  unsigned int v13 = a2 - v9 - v11;
  _ZF = (int)a2 - (int)v9 - *(_DWORD *)(a1 + 28) > v11 && *(_DWORD *)(a1 + 40) == 0;
  if (!_ZF) {
    unsigned int v13 = *(_DWORD *)(a1 + 28);
  }
  unsigned int v15 = *(_DWORD *)(a1 + 268);
  uint64_t v16 = *(void *)(a1 + 248);
  int v17 = 66 - *(_DWORD *)(v16 + 264);
  char v18 = v15 - 6;
  if (v15 >= 6) {
    LOBYTE(v15) = 6;
  }
  uint64_t v19 = *(void *)(a1 + 96);
  int v20 = 1 << v15;
  unint64_t v21 = 0xCF1BBCDCBF9B0000 * *a2;
  unint64_t v22 = v21 >> v17;
  _X4 = *(void *)(v16 + 112) + 16 * (v21 >> v17);
  __asm { PRFM            #0, [X4] }
  int v28 = 1 << v18;
  if (!(!_ZF & _CF)) {
    int v28 = 0;
  }
  unint64_t v153 = (void *)a3;
  unsigned int v149 = a2 - v9;
  if (*(_DWORD *)(a1 + 300))
  {
    _X17 = (v21 ^ v19) >> (56 - v8);
    *(_DWORD *)(a1 + 44) = v10;
  }
  else
  {
    uint64_t v30 = a1 + 64;
    unint64_t v31 = *(unsigned int *)(a1 + 44);
    if (v10 - v31 >= 0x181)
    {
      uint64_t v32 = *(void *)(a1 + 56);
      uint64_t v33 = *(void *)(a1 + 112);
      if (v31 <= 0xFFFFFF9F)
      {
        unint64_t v115 = v31 + 96;
        do
        {
          unint64_t v116 = ((0xCF1BBCDCBF9B0000 * *(void *)(v9 + 8 + v31)) ^ *(void *)(a1 + 96)) >> (56 - v8);
          uint64_t v117 = (v116 >> 2) & 0x3FFFFFC0;
          _X23 = v6 + 4 * v117;
          __asm
          {
            PRFM            #0, [X23]
            PRFM            #0, [X23,#0x40]
          }
          _X22 = v7 + v117;
          __asm
          {
            PRFM            #0, [X22]
            PRFM            #0, [X22,#0x20]
          }
          unint64_t v124 = *(unsigned int *)(v30 + 4 * (v31 & 7));
          *(_DWORD *)(v30 + 4 * (v31 & 7)) = v116;
          uint64_t v125 = (v124 >> 2) & 0x3FFFFFC0;
          uint64_t v126 = v6 + 4 * v125;
          uint64_t v127 = (unsigned char *)(v7 + v125);
          if (((*v127 - 1) & 0x3F) != 0) {
            uint64_t v128 = 0;
          }
          else {
            uint64_t v128 = 63;
          }
          uint64_t v129 = v128 + ((*v127 - 1) & 0x3F);
          *uint64_t v127 = v129;
          v127[v129] = v124;
          *(_DWORD *)(v126 + 4 * v129) = v31++;
        }
        while (v31 < v115);
        uint64_t v33 = *(void *)(a1 + 112);
        uint64_t v32 = *(void *)(a1 + 56);
        unsigned int v10 = a2 - v9;
      }
      uint64_t v130 = v10 - 32;
      LODWORD(v31) = v10 - 32;
      int v131 = a2 + 1 - (v9 + v130);
      if ((v131 + 1) < 8) {
        int v132 = v131 + 1;
      }
      else {
        int v132 = 8;
      }
      if ((unint64_t)a2 + 1 >= v9 + v130) {
        int v133 = v132;
      }
      else {
        int v133 = 0;
      }
      if (v130 < v133 + (int)v130)
      {
        uint64_t v134 = *(void *)(a1 + 96);
        int v135 = 56 - *(_DWORD *)(a1 + 52);
        do
        {
          unint64_t v136 = ((0xCF1BBCDCBF9B0000 * *(void *)(v9 + v130)) ^ v134) >> v135;
          uint64_t v137 = (v136 >> 2) & 0x3FFFFFC0;
          _X25 = v33 + 4 * v137;
          __asm
          {
            PRFM            #0, [X25]
            PRFM            #0, [X25,#0x40]
          }
          _X24 = v32 + v137;
          __asm
          {
            PRFM            #0, [X24]
            PRFM            #0, [X24,#0x20]
          }
          *(_DWORD *)(a1 + 4 * (v130++ & 7) + 64) = v136;
          --v133;
        }
        while (v133);
        unsigned int v10 = a2 - v9;
      }
    }
    else
    {
      uint64_t v32 = *(void *)(a1 + 56);
      uint64_t v33 = *(void *)(a1 + 112);
    }
    if (v31 < v10)
    {
      uint64_t v34 = *(void *)(a1 + 8) + 8;
      int v35 = 56 - *(_DWORD *)(a1 + 52);
      unint64_t v31 = v31;
      do
      {
        unint64_t v36 = ((0xCF1BBCDCBF9B0000 * *(void *)(v34 + v31)) ^ *(void *)(a1 + 96)) >> v35;
        uint64_t v37 = (v36 >> 2) & 0x3FFFFFC0;
        _X25 = v33 + 4 * v37;
        __asm
        {
          PRFM            #0, [X25]
          PRFM            #0, [X25,#0x40]
        }
        _X24 = v32 + v37;
        __asm
        {
          PRFM            #0, [X24]
          PRFM            #0, [X24,#0x20]
        }
        unint64_t v44 = *(unsigned int *)(v30 + 4 * (v31 & 7));
        *(_DWORD *)(v30 + 4 * (v31 & 7)) = v36;
        uint64_t v45 = (v44 >> 2) & 0x3FFFFFC0;
        uint64_t v46 = v33 + 4 * v45;
        uint64_t v47 = (unsigned char *)(v32 + v45);
        if (((*v47 - 1) & 0x3F) != 0) {
          uint64_t v48 = 0;
        }
        else {
          uint64_t v48 = 63;
        }
        uint64_t v49 = v48 + ((*v47 - 1) & 0x3F);
        *uint64_t v47 = v49;
        v47[v49] = v44;
        *(_DWORD *)(v46 + 4 * v49) = v31++;
      }
      while (v31 < v149);
    }
    unsigned int v10 = a2 - v9;
    *(_DWORD *)(a1 + 44) = v149;
    unint64_t v50 = ((0xCF1BBCDCBF9B0000 * *(void *)(v9 + v149 + 8)) ^ v19) >> (56 - v8);
    uint64_t v51 = (v50 >> 2) & 0x3FFFFFC0;
    _X2 = v6 + 4 * v51;
    __asm
    {
      PRFM            #0, [X2]
      PRFM            #0, [X2,#0x40]
    }
    _X17 = v7 + v51;
    __asm
    {
      PRFM            #0, [X17]
      PRFM            #0, [X17,#0x20]
    }
    LODWORD(_X17) = *(_DWORD *)(v30 + 4 * (v149 & 7));
    *(_DWORD *)(v30 + 4 * (v149 & 7)) = v50;
  }
  *(_DWORD *)(a1 + 104) += _X17;
  uint64_t v57 = (_X17 >> 2) & 0x3FFFFFC0;
  uint64_t v58 = v6 + 4 * v57;
  int8x16_t v59 = (char *)(v7 + v57);
  char v60 = *v59;
  int8x16x4_t v156 = vld4q_s8(v59);
  int8x16_t v61 = vdupq_n_s8(_X17);
  v156.val[0] = vsriq_n_s8(vsriq_n_s8(vceqq_s8(v156.val[3], v61), vceqq_s8(v156.val[2], v61), 1uLL), vsriq_n_s8(vceqq_s8(v156.val[1], v61), vceqq_s8(v156.val[0], v61), 1uLL), 2uLL);
  int8x8_t v62 = vshrn_n_s16((int16x8_t)vsriq_n_s8(v156.val[0], v156.val[0], 4uLL), 4uLL);
  uint64_t v63 = 0;
  if (v62)
  {
    unint64_t v64 = __ROR8__(*(void *)&v62, v60);
    do
    {
      unsigned int v65 = (__clz(__rbit64(v64)) + v60) & 0x3F;
      if (v65)
      {
        uint64_t v66 = *(unsigned int *)(v58 + 4 * v65);
        if (v66 < v13) {
          break;
        }
        _X6 = v9 + v66;
        __asm { PRFM            #0, [X6] }
        v154[v63++] = v66;
        --v20;
      }
      v64 &= v64 - 1;
    }
    while (v64 && v20);
  }
  uint64_t v69 = (v60 - 1) & 0x3F;
  if (((v60 - 1) & 0x3F) != 0) {
    uint64_t v70 = 0;
  }
  else {
    uint64_t v70 = 63;
  }
  uint64_t v71 = v70 + v69;
  *int8x16_t v59 = v71;
  v59[v71] = _X17;
  int16x8x2_t v152 = (void *)(v9 + v12);
  int v72 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v72 + 1;
  *(_DWORD *)(v58 + 4 * v71) = v72;
  if (v63)
  {
    uint64_t v73 = 0;
    unint64_t v74 = a3 - 7;
    unint64_t v75 = a2 + 1;
    uint64_t v76 = v9 + 8;
    unint64_t v77 = 3;
    while (1)
    {
      uint64_t v78 = v154[v73];
      unint64_t v79 = (void *)(v9 + v78);
      if (*(_DWORD *)(v9 + v78 + v77 - 3) != *(_DWORD *)((char *)a2 + v77 - 3)) {
        goto LABEL_50;
      }
      if (v74 <= (unint64_t)a2)
      {
        uint64_t v82 = a2;
      }
      else
      {
        unint64_t v80 = *a2 ^ *v79;
        if (v80)
        {
          unint64_t v81 = __clz(__rbit64(v80)) >> 3;
          goto LABEL_48;
        }
        uint64_t v83 = 0;
        while (1)
        {
          uint64_t v82 = &v75[v83];
          if ((unint64_t)&v75[v83] >= v74) {
            break;
          }
          uint64_t v84 = *(void *)(v76 + v78 + v83 * 8);
          ++v83;
          unint64_t v85 = *v82 ^ v84;
          if (v85)
          {
            unint64_t v81 = v83 * 8 + (__clz(__rbit64(v85)) >> 3);
            goto LABEL_48;
          }
        }
        unint64_t v79 = (void *)(v76 + v78 + v83 * 8);
      }
      if ((unint64_t)v82 < a3 - 3 && *(_DWORD *)v79 == *(_DWORD *)v82)
      {
        uint64_t v82 = (void *)((char *)v82 + 4);
        unint64_t v79 = (void *)((char *)v79 + 4);
      }
      if ((unint64_t)v82 < a3 - 1 && *(unsigned __int16 *)v79 == *(unsigned __int16 *)v82)
      {
        uint64_t v82 = (void *)((char *)v82 + 2);
        unint64_t v79 = (void *)((char *)v79 + 2);
      }
      if ((unint64_t)v82 < a3 && *(unsigned __int8 *)v79 == *(unsigned __int8 *)v82) {
        uint64_t v82 = (void *)((char *)v82 + 1);
      }
      unint64_t v81 = (char *)v82 - (char *)a2;
LABEL_48:
      if (v81 > v77)
      {
        *a4 = v10 + 3 - v78;
        unint64_t v77 = v81;
        if ((void *)((char *)a2 + v81) == (void *)a3) {
          goto LABEL_58;
        }
      }
LABEL_50:
      ++v73;
      unint64_t v81 = v77;
      if (v73 == v63) {
        goto LABEL_58;
      }
    }
  }
  unint64_t v81 = 3;
LABEL_58:
  uint64_t v86 = 0;
  int v87 = *(char **)v16;
  uint64_t v88 = *(void *)(v16 + 8);
  int v89 = *(void *)v16 - v88 - v12;
  uint64_t v90 = *(void *)(v16 + 112);
  do
  {
    _X16 = v88 + *(unsigned int *)(v90 + 16 * v22 + v86);
    __asm { PRFM            #0, [X16] }
    v86 += 4;
  }
  while (v86 != 12);
  unsigned int v93 = v20 + v28;
  if ((v20 + v28) >= 3) {
    uint64_t v94 = 3;
  }
  else {
    uint64_t v94 = v93;
  }
  unint64_t v147 = *(unsigned int *)(v90 + ((16 * v22) | 0xC));
  int v148 = v94;
  uint64_t v144 = *(void *)(v16 + 128);
  unint64_t v145 = v147 >> 8;
  _X8 = v144 + 4 * (v147 >> 8);
  __asm { PRFM            #0, [X8] }
  int v146 = v89;
  if (v94)
  {
    int v150 = v10 + v89 + 3;
    unsigned int v97 = (unsigned int *)(v90 + 16 * v22);
    do
    {
      unsigned int v99 = *v97++;
      uint64_t v98 = v99;
      if (!v99) {
        return v81;
      }
      if (*(_DWORD *)(v88 + v98) == *(_DWORD *)a2)
      {
        unint64_t v100 = sub_1DD2A6010((void *)((char *)a2 + 4), (char *)(v88 + v98 + 4), a3, v87, v152);
        a3 = (unint64_t)v153;
        unint64_t v101 = v100 + 4;
        if (v100 + 4 > v81)
        {
          *a4 = (v150 - v98);
          unint64_t v81 = v100 + 4;
          if ((void *)((char *)a2 + v101) == v153) {
            return v101;
          }
        }
      }
    }
    while (--v94);
  }
  if (v93 - v148 >= v147) {
    unsigned int v102 = v147;
  }
  else {
    unsigned int v102 = v93 - v148;
  }
  if (!v102) {
    return v81;
  }
  uint64_t v103 = 4 * v102;
  uint64_t v104 = (unsigned int *)(v144 + 4 * v145);
  do
  {
    unsigned int v105 = *v104++;
    _X10 = v88 + v105;
    __asm { PRFM            #0, [X10] }
    v103 -= 4;
  }
  while (v103);
  int v108 = *(_DWORD *)a2;
  unsigned int v109 = (unsigned int *)(v144 + 4 * v145);
  unint64_t v101 = v81;
  do
  {
    unsigned int v111 = *v109++;
    unsigned int v110 = v111;
    uint64_t v112 = v88 + v111;
    if (*(_DWORD *)v112 == v108)
    {
      unint64_t v113 = sub_1DD2A6010((void *)((char *)a2 + 4), (char *)(v112 + 4), a3, v87, v152);
      a3 = (unint64_t)v153;
      if (v113 + 4 > v101)
      {
        *a4 = v149 + v146 + 3 - v110;
        unint64_t v101 = v113 + 4;
        if ((void *)((char *)a2 + v113 + 4) == v153) {
          break;
        }
      }
    }
    --v102;
  }
  while (v102);
  return v101;
}

uint64_t sub_1DD2CE248(uint64_t result, int a2, int a3)
{
  uint64_t v3 = *(void *)(result + 8);
  unsigned int v4 = a2 - v3;
  unint64_t v5 = *(unsigned int *)(result + 44);
  if (v5 < a2 - (int)v3)
  {
    uint64_t v6 = *(void *)(result + 112);
    int v7 = ~(-1 << (*(_DWORD *)(result + 260) - 1));
    int v8 = *(_DWORD *)(result + 264);
    uint64_t v9 = *(void *)(result + 128);
    do
    {
      switch(a3)
      {
        case 5:
          unint64_t v10 = 0xCF1BBCDCBB000000 * *(void *)(v3 + v5);
          goto LABEL_9;
        case 6:
          unint64_t v10 = 0xCF1BBCDCBF9B0000 * *(void *)(v3 + v5);
          goto LABEL_9;
        case 7:
          unint64_t v10 = 0xCF1BBCDCBFA56300 * *(void *)(v3 + v5);
          goto LABEL_9;
        case 8:
          unint64_t v10 = 0xCF1BBCDCB7A56463 * *(void *)(v3 + v5);
LABEL_9:
          unint64_t v11 = v10 >> (64 - v8);
          break;
        default:
          unint64_t v11 = (-1640531535 * *(_DWORD *)(v3 + v5)) >> (32 - v8);
          break;
      }
      int v12 = *(_DWORD *)(v6 + 4 * v11);
      unsigned int v13 = (_DWORD *)(v9 + 8 * (v5 & v7));
      *(_DWORD *)(v6 + 4 * v11) = v5;
      *unsigned int v13 = v12;
      v13[1] = 1;
      ++v5;
    }
    while (v5 < v4);
  }
  *(_DWORD *)(result + 44) = v4;
  return result;
}

unint64_t sub_1DD2CE388(uint64_t a1, uint64_t *a2, unint64_t a3, unsigned int *a4, int a5, int a6)
{
  uint64_t v6 = *(void *)(a1 + 112);
  int v7 = *(_DWORD *)(a1 + 264);
  int v8 = a5 - 5;
  switch(a5)
  {
    case 5:
      int v9 = (int)a2;
      uint64_t v10 = *a2;
      unsigned int v11 = -1157627904;
      goto LABEL_7;
    case 6:
      int v9 = (int)a2;
      uint64_t v10 = *a2;
      unsigned int v11 = -1080360960;
      goto LABEL_7;
    case 7:
      int v9 = (int)a2;
      uint64_t v10 = *a2;
      unsigned int v11 = -1079680256;
      goto LABEL_7;
    case 8:
      int v9 = (int)a2;
      uint64_t v10 = *a2;
      unsigned int v11 = -1213897629;
LABEL_7:
      unint64_t v12 = (v10 * (v11 | 0xCF1BBCDC00000000)) >> -(char)v7;
      break;
    default:
      int v9 = (int)a2;
      unint64_t v12 = (-1640531535 * *(_DWORD *)a2) >> -(char)v7;
      break;
  }
  uint64_t v13 = *(void *)(a1 + 8);
  unsigned int v14 = v9 - v13;
  unsigned int v15 = 1 << *(_DWORD *)(a1 + 256);
  if (v9 - (int)v13 - *(_DWORD *)(a1 + 28) > v15 && *(_DWORD *)(a1 + 40) == 0) {
    unsigned int v17 = v9 - v13 - v15;
  }
  else {
    unsigned int v17 = *(_DWORD *)(a1 + 28);
  }
  uint64_t v18 = *(void *)(a1 + 128);
  unsigned int v19 = ~(-1 << (*(_DWORD *)(a1 + 260) - 1));
  unsigned int v136 = v17;
  unsigned int v137 = v14;
  unsigned int v20 = v14 + (-1 << (*(_DWORD *)(a1 + 260) - 1)) + 1;
  if (v14 < v19) {
    unsigned int v20 = 0;
  }
  unsigned int v138 = v20;
  if (v20 <= v17) {
    uint64_t v21 = v17;
  }
  else {
    uint64_t v21 = v20;
  }
  int v22 = 1 << *(_DWORD *)(a1 + 268);
  unsigned int v23 = *(_DWORD *)(v6 + 4 * v12);
  uint64_t v144 = a1;
  uint64_t v147 = *(void *)(a1 + 128);
  uint64_t v148 = *(void *)(a1 + 8);
  int v157 = a6;
  int v145 = ~(-1 << (*(_DWORD *)(a1 + 260) - 1));
  int v135 = v8;
  if (v23 > v21)
  {
    unsigned int v24 = 0;
    unsigned int v25 = 1 << *(_DWORD *)(a1 + 268);
    while (1)
    {
      unsigned int v26 = v23;
      int v27 = (unsigned int *)(v18 + 8 * (v23 & v19));
      unsigned int v28 = v27[1];
      BOOL v29 = v28 == 1 && v25 >= 2;
      if (!v29) {
        break;
      }
      v27[1] = v24;
      --v25;
      unsigned int v23 = *v27;
      unsigned int v24 = v26;
      if (v23 <= v21) {
        goto LABEL_31;
      }
    }
    if (v28 == 1) {
      *(void *)int v27 = 0;
    }
    unsigned int v26 = v24;
    if (v24)
    {
LABEL_31:
      unint64_t v133 = v12;
      uint64_t v134 = v6;
      int v142 = v22;
      uint64_t v141 = v18 + 4;
      uint64_t v30 = *(void *)(a1 + 16);
      while (1)
      {
        unsigned int v31 = v26;
        unsigned int v32 = *(_DWORD *)(v141 + 8 * (v26 & v19));
        int v33 = -1 << (*(_DWORD *)(a1 + 260) - 1);
        unint64_t v34 = *(unsigned int *)(a1 + 24);
        unsigned int v35 = *(_DWORD *)(a1 + 28);
        if (v34 <= v31) {
          uint64_t v36 = v13;
        }
        else {
          uint64_t v36 = v30;
        }
        uint64_t v163 = (char *)(v30 + v34);
        if (v34 <= v31) {
          unint64_t v37 = a3;
        }
        else {
          unint64_t v37 = v30 + v34;
        }
        int v38 = (unsigned int *)(v18 + 8 * (v31 & ~v33));
        int v39 = v38 + 1;
        unsigned int v40 = *v38;
        v180[0] = 0;
        unsigned int v41 = 1 << *(_DWORD *)(a1 + 256);
        if (v31 - v35 > v41) {
          unsigned int v35 = v31 - v41;
        }
        unsigned int v160 = v25;
        unsigned int v158 = v32;
        if (v25)
        {
          if (v40 > v35) {
            break;
          }
        }
LABEL_86:
        *int v39 = 0;
        *int v38 = 0;
        unsigned int v25 = v160 + 1;
        a1 = v144;
        unsigned int v19 = v145;
        unsigned int v26 = v158;
        if (!v158)
        {
          int v22 = v142;
          unsigned int v74 = v136;
          unint64_t v12 = v133;
          uint64_t v6 = v134;
          goto LABEL_89;
        }
      }
      unint64_t v42 = 0;
      unint64_t v43 = 0;
      int v44 = ~v33;
      unsigned int v45 = v31;
      uint64_t v46 = v36 + v31;
      uint64_t v151 = (void *)(v13 + v34);
      unint64_t v47 = v37 - 7;
      unint64_t v48 = v37 - 3;
      unint64_t v49 = v37 - 1;
      uint64_t v146 = v46 + 8;
      unsigned int v172 = v35;
      int v155 = ~v33;
      uint64_t v152 = v46;
      unsigned int v153 = v31;
      unint64_t v149 = v37 - 3;
      unint64_t v150 = v37 - 7;
      while (1)
      {
        if (v43 >= v42) {
          unint64_t v50 = v42;
        }
        else {
          unint64_t v50 = v43;
        }
        uint64_t v51 = v13;
        unint64_t v175 = v43;
        unint64_t v177 = v42;
        if (a6 != 1) {
          goto LABEL_55;
        }
        unint64_t v52 = v50 + v40;
        if (v34 > v45 || v52 >= v34) {
          break;
        }
        uint64_t v166 = v30 + v40;
        uint64_t v169 = v39;
        uint64_t v53 = (void *)(v46 + v50);
        uint64_t v54 = v30;
        uint64_t v55 = v21;
        uint64_t v56 = v38;
        unint64_t v57 = v34;
        unint64_t v58 = v37;
        unint64_t v59 = sub_1DD2A6010(v53, (char *)(v166 + v50), v37, v163, v151);
        unint64_t v37 = v58;
        unint64_t v34 = v57;
        int v38 = v56;
        uint64_t v21 = v55;
        uint64_t v46 = v152;
        unsigned int v45 = v153;
        uint64_t v30 = v54;
        unint64_t v48 = v149;
        unint64_t v47 = v150;
        uint64_t v18 = v147;
        uint64_t v13 = v148;
        a6 = v157;
        unint64_t v60 = v59 + v50;
        int v44 = v155;
        uint64_t v61 = v166;
        int v39 = v169;
        if (v60 + v40 >= v34) {
          uint64_t v61 = v148 + v40;
        }
LABEL_70:
        if (v46 + v60 == v37) {
          goto LABEL_86;
        }
        uint64_t v67 = (unsigned int *)(v18 + 8 * (v40 & v44));
        if (*(unsigned __int8 *)(v61 + v60) >= *(unsigned __int8 *)(v46 + v60))
        {
          *int v39 = v40;
          if (v40 <= v21)
          {
            int v39 = v180;
            goto LABEL_86;
          }
          unint64_t v42 = v60;
          int v39 = (unsigned int *)(v18 + 8 * (v40 & v44));
          unsigned int v68 = v172;
          unint64_t v43 = v175;
        }
        else
        {
          *int v38 = v40;
          if (v40 <= v21)
          {
            int v38 = v180;
            goto LABEL_86;
          }
          int v38 = v67 + 1;
          unint64_t v43 = v60;
          ++v67;
          unsigned int v68 = v172;
          unint64_t v42 = v177;
        }
        if (--v25)
        {
          unsigned int v40 = *v67;
          if (*v67 > v68) {
            continue;
          }
        }
        goto LABEL_86;
      }
      if (v52 >= v34) {
        uint64_t v51 = v13;
      }
      else {
        uint64_t v51 = v30;
      }
LABEL_55:
      uint64_t v61 = v51 + v40;
      int8x8_t v62 = (char *)(v46 + v50);
      uint64_t v63 = (void *)(v61 + v50);
      if (v47 <= v46 + v50)
      {
        uint64_t v66 = (_DWORD *)(v46 + v50);
      }
      else
      {
        unint64_t v64 = *(void *)v62 ^ *v63;
        if (v64)
        {
          unint64_t v65 = __clz(__rbit64(v64)) >> 3;
LABEL_69:
          unint64_t v60 = v65 + v50;
          goto LABEL_70;
        }
        uint64_t v69 = 0;
        uint64_t v70 = v146 + v50;
        while (1)
        {
          uint64_t v71 = (void *)(v70 + v69);
          if (v70 + v69 >= v47) {
            break;
          }
          uint64_t v72 = *(void *)(v51 + v50 + v40 + 8 + v69);
          v69 += 8;
          unint64_t v73 = *v71 ^ v72;
          if (v73)
          {
            unint64_t v65 = v69 + (__clz(__rbit64(v73)) >> 3);
            goto LABEL_69;
          }
        }
        uint64_t v66 = (_DWORD *)(v146 + v50 + v69);
        uint64_t v63 = (void *)(v51 + v69 + v50 + v40 + 8);
      }
      if ((unint64_t)v66 < v48 && *(_DWORD *)v63 == *v66)
      {
        ++v66;
        uint64_t v63 = (void *)((char *)v63 + 4);
      }
      if ((unint64_t)v66 < v49 && *(unsigned __int16 *)v63 == *(unsigned __int16 *)v66)
      {
        uint64_t v66 = (_DWORD *)((char *)v66 + 2);
        uint64_t v63 = (void *)((char *)v63 + 2);
      }
      if ((unint64_t)v66 < v37 && *(unsigned __int8 *)v63 == *(unsigned __int8 *)v66) {
        uint64_t v66 = (_DWORD *)((char *)v66 + 1);
      }
      unint64_t v65 = (char *)v66 - v62;
      goto LABEL_69;
    }
  }
  uint64_t v30 = *(void *)(a1 + 16);
  unsigned int v74 = v136;
LABEL_89:
  unint64_t v75 = *(unsigned int *)(a1 + 24);
  uint64_t v76 = (unsigned int *)(v18 + 8 * (v19 & v137));
  unint64_t v77 = v76 + 1;
  unsigned int v78 = v137 + 9;
  int v179 = 0;
  unsigned int v79 = *(_DWORD *)(v6 + 4 * v12);
  *(_DWORD *)(v6 + 4 * v12) = v137;
  if (v79 <= v74)
  {
    unint64_t v178 = 0;
    uint64_t v83 = a2;
    goto LABEL_138;
  }
  unint64_t v178 = 0;
  unint64_t v80 = 0;
  unint64_t v81 = 0;
  v167 = (char *)(v30 + v75);
  int v164 = (void *)(v13 + v75);
  unint64_t v82 = a3 - 7;
  uint64_t v83 = a2;
  uint64_t v154 = v13 + 8;
  int8x16x4_t v156 = a2 + 1;
  while (1)
  {
    int v143 = v22;
    if (v81 >= v80) {
      unint64_t v84 = v80;
    }
    else {
      unint64_t v84 = v81;
    }
    uint64_t v85 = v79;
    uint64_t v86 = (char *)v83 + v84;
    if (a6 != 1 || v84 + v79 >= v75)
    {
      uint64_t v96 = v13 + v79;
      unsigned int v97 = (void *)(v96 + v84);
      if (v82 <= (unint64_t)v86)
      {
        unint64_t v100 = (_DWORD *)((char *)v83 + v84);
      }
      else
      {
        unint64_t v98 = *(void *)v86 ^ *v97;
        if (v98)
        {
          unint64_t v99 = __clz(__rbit64(v98)) >> 3;
LABEL_118:
          uint64_t v83 = a2;
          goto LABEL_119;
        }
        uint64_t v101 = 0;
        unsigned int v102 = (char *)v156 + v84;
        while (1)
        {
          uint64_t v103 = &v102[v101];
          if ((unint64_t)&v102[v101] >= v82) {
            break;
          }
          uint64_t v104 = *(void *)(v154 + v84 + v79 + v101);
          v101 += 8;
          unint64_t v105 = *(void *)v103 ^ v104;
          if (v105)
          {
            unint64_t v99 = v101 + (__clz(__rbit64(v105)) >> 3);
            goto LABEL_118;
          }
        }
        unint64_t v100 = (_DWORD *)((char *)v156 + v84 + v101);
        unsigned int v97 = (void *)(v154 + v84 + v79 + v101);
      }
      if ((unint64_t)v100 < a3 - 3 && *(_DWORD *)v97 == *v100)
      {
        ++v100;
        unsigned int v97 = (void *)((char *)v97 + 4);
      }
      if ((unint64_t)v100 < a3 - 1 && *(unsigned __int16 *)v97 == *(unsigned __int16 *)v100)
      {
        unint64_t v100 = (_DWORD *)((char *)v100 + 2);
        unsigned int v97 = (void *)((char *)v97 + 2);
      }
      if ((unint64_t)v100 < a3 && *(unsigned __int8 *)v97 == *(unsigned __int8 *)v100) {
        unint64_t v100 = (_DWORD *)((char *)v100 + 1);
      }
      unint64_t v99 = (char *)v100 - v86;
      uint64_t v83 = a2;
LABEL_119:
      unint64_t v95 = v99 + v84;
      goto LABEL_120;
    }
    unsigned int v173 = v79;
    uint64_t v87 = v30 + v79;
    uint64_t v88 = (char *)(v30 + v85 + v84);
    uint64_t v89 = v30;
    unint64_t v90 = v75;
    unsigned int v91 = v76;
    unint64_t v170 = v84;
    unint64_t v92 = v81;
    unint64_t v93 = v82;
    unint64_t v94 = sub_1DD2A6010(v86, v88, a3, v167, v164);
    unint64_t v82 = v93;
    unint64_t v81 = v92;
    uint64_t v76 = v91;
    unint64_t v75 = v90;
    uint64_t v30 = v89;
    uint64_t v18 = v147;
    uint64_t v13 = v148;
    unsigned int v74 = v136;
    unint64_t v95 = v94 + v170;
    uint64_t v96 = v94 + v170 + v85 >= v90 ? v148 + v85 : v87;
    unsigned int v79 = v173;
    unsigned int v19 = v145;
    uint64_t v83 = a2;
    int v22 = v143;
LABEL_120:
    if (v95 <= v178)
    {
      a6 = v157;
      goto LABEL_128;
    }
    if (v95 > v78 - v79) {
      unsigned int v78 = v79 + v95;
    }
    if ((int)(__clz(*a4) - __clz(v137 - v79 + 1)) < 4 * ((int)v95 - (int)v178))
    {
      *(void *)a4 = v137 - v79 + 3;
      unint64_t v178 = v95;
    }
    a6 = v157;
    if ((uint64_t *)((char *)v83 + v95) == (uint64_t *)a3) {
      break;
    }
LABEL_128:
    int v106 = (unsigned int *)(v18 + 8 * (v79 & v19));
    if (*(unsigned __int8 *)(v96 + v95) >= *((unsigned __int8 *)v83 + v95))
    {
      unsigned int *v77 = v79;
      if (v79 <= v138)
      {
        unint64_t v77 = (unsigned int *)&v179;
        goto LABEL_138;
      }
      unint64_t v80 = v95;
      unint64_t v77 = (unsigned int *)(v18 + 8 * (v79 & v19));
    }
    else
    {
      unsigned int *v76 = v79;
      if (v79 <= v138)
      {
        uint64_t v76 = (unsigned int *)&v179;
        goto LABEL_138;
      }
      ++v106;
      unint64_t v81 = v95;
      uint64_t v76 = v106;
    }
    if (--v22)
    {
      unsigned int v79 = *v106;
      if (*v106 > v74) {
        continue;
      }
    }
    goto LABEL_138;
  }
  if (v157 == 2) {
    int v22 = 0;
  }
LABEL_138:
  unsigned int *v77 = 0;
  unsigned int *v76 = 0;
  unsigned int v161 = v78;
  if (a6 == 2 && v22)
  {
    uint64_t v107 = *(void *)(v144 + 248);
    int v108 = *(_DWORD *)(v107 + 264);
    switch(v135)
    {
      case 0:
        uint64_t v109 = *v83;
        unsigned int v110 = -1157627904;
        goto LABEL_150;
      case 1:
        uint64_t v109 = *v83;
        unsigned int v110 = -1080360960;
        goto LABEL_150;
      case 2:
        uint64_t v109 = *v83;
        unsigned int v110 = -1079680256;
        goto LABEL_150;
      case 3:
        uint64_t v109 = *v83;
        unsigned int v110 = -1213897629;
LABEL_150:
        unint64_t v111 = (v109 * (v110 | 0xCF1BBCDC00000000)) >> -(char)v108;
        break;
      default:
        unint64_t v111 = (-1640531535 * *(_DWORD *)v83) >> -(char)v108;
        break;
    }
    uint64_t v112 = *(char **)v107;
    uint64_t v113 = *(void *)(v107 + 8);
    uint64_t v114 = *(void *)v107 - v113;
    unsigned int v115 = *(_DWORD *)(v107 + 28);
    unsigned int v116 = ~(-1 << (*(_DWORD *)(v107 + 260) - 1));
    uint64_t v117 = v114 - v115 <= v116 ? v115 : (v114 + (-1 << (*(_DWORD *)(v107 + 260) - 1)) + 1);
    unsigned int v118 = *(_DWORD *)(*(void *)(v107 + 112) + 4 * v111);
    if (v118 > v115)
    {
      unsigned int v165 = *(_DWORD *)(v107 + 28);
      unint64_t v119 = 0;
      unint64_t v120 = 0;
      v176 = (void *)(v13 + *(unsigned int *)(v144 + 24));
      uint64_t v168 = *(void *)(v107 + 128);
      unint64_t v174 = (*(_DWORD *)v107 - v113);
      uint64_t v159 = (*(_DWORD *)(v144 + 28) - v114);
      uint64_t v171 = v13 + v159;
      int v121 = v22 - 1;
      do
      {
        uint64_t v122 = v117;
        if (v120 >= v119) {
          unint64_t v123 = v119;
        }
        else {
          unint64_t v123 = v120;
        }
        uint64_t v124 = v113;
        uint64_t v125 = v113 + v118;
        uint64_t v126 = v112;
        unint64_t v127 = sub_1DD2A6010((uint64_t *)((char *)v83 + v123), (char *)(v125 + v123), a3, v112, v176);
        unint64_t v128 = v127 + v123;
        if (v127 + v123 + v118 >= v174) {
          uint64_t v129 = v171 + v118;
        }
        else {
          uint64_t v129 = v125;
        }
        if (v128 <= v178)
        {
          uint64_t v83 = a2;
          uint64_t v113 = v124;
          uint64_t v112 = v126;
          uint64_t v117 = v122;
        }
        else
        {
          int v130 = v137 - (v159 + v118);
          if ((int)(__clz(*a4 + 1) - __clz(v130 + 1)) < 4 * ((int)v128 - (int)v178))
          {
            *(void *)a4 = (v130 + 3);
            unint64_t v178 = v127 + v123;
          }
          uint64_t v83 = a2;
          uint64_t v113 = v124;
          uint64_t v112 = v126;
          uint64_t v117 = v122;
          if ((uint64_t *)((char *)a2 + v128) == (uint64_t *)a3) {
            break;
          }
        }
        int v131 = (unsigned int *)(v168 + 8 * (v118 & v116));
        if (*(unsigned __int8 *)(v129 + v128) >= *((unsigned __int8 *)v83 + v128))
        {
          if (v118 <= v117) {
            break;
          }
        }
        else
        {
          if (v118 <= v117) {
            break;
          }
          ++v131;
          unint64_t v120 = v127 + v123;
          unint64_t v128 = v119;
        }
        BOOL v29 = v121-- != 0;
        if (!v29) {
          break;
        }
        unsigned int v118 = *v131;
        unint64_t v119 = v128;
      }
      while (*v131 > v165);
    }
  }
  *(_DWORD *)(v144 + 44) = v161 - 8;
  return v178;
}

_DWORD *sub_1DD2CEE9C(_DWORD *result, unsigned int *a2)
{
  unsigned int v2 = *a2;
  result[5] = *a2;
  if (!result[3]) {
    result[3] = 64;
  }
  unsigned int v3 = result[1];
  if (!v3)
  {
    unsigned int v3 = v2 - 7;
    if (v2 - 7 <= 6) {
      unsigned int v3 = 6;
    }
    result[1] = v3;
  }
  unsigned int v4 = result[2];
  if (!result[4])
  {
    BOOL v5 = v2 >= v3;
    unsigned int v6 = v2 - v3;
    if (!v5) {
      unsigned int v6 = 0;
    }
    result[4] = v6;
  }
  if (v4) {
    unsigned int v7 = v4;
  }
  else {
    unsigned int v7 = 3;
  }
  if (v7 >= v3) {
    unsigned int v7 = v3;
  }
  result[2] = v7;
  return result;
}

uint64_t sub_1DD2CEF04(_DWORD *a1)
{
  unsigned int v2 = a1[1];
  unsigned int v1 = a1[2];
  if (v1 >= v2) {
    LOBYTE(v1) = a1[1];
  }
  uint64_t v3 = (1 << (v2 - v1)) + (8 << v2);
  if (*a1 == 1) {
    return v3;
  }
  else {
    return 0;
  }
}

unint64_t sub_1DD2CEF38(_DWORD *a1, unint64_t a2)
{
  if (*a1 == 1) {
    return a2 / a1[3];
  }
  else {
    return 0;
  }
}

unint64_t sub_1DD2CEF58(unint64_t result, unint64_t a2, unint64_t a3, _DWORD *a4)
{
  int v4 = a4[1];
  int v5 = a4[2];
  uint64_t v28 = *(void *)(result + 8);
  unint64_t v7 = a4[3];
  int v6 = a4[4];
  if (v7 >= 0x40) {
    unsigned int v8 = 64;
  }
  else {
    unsigned int v8 = a4[3];
  }
  unsigned int v9 = v6 - 1;
  uint64_t v10 = ~(-1 << v6);
  char v11 = v8 - v6;
  if (v9 >= v8) {
    char v11 = 0;
  }
  v30[0] = 0xFFFFFFFFLL;
  v30[1] = v10 << v11;
  if (a2 < a3)
  {
    unint64_t v12 = a2;
    unint64_t v13 = result;
    unint64_t v25 = a3;
    uint64_t v26 = result + 64;
    unint64_t v15 = a2 + v7;
    uint64_t v16 = ~(-1 << (v4 - v5));
    do
    {
      unsigned int v29 = 0;
      unint64_t result = sub_1DD2CF0CC(v30, v12, a3 - v12, v26, &v29);
      unint64_t v27 = result;
      uint64_t v17 = v29;
      if (v29)
      {
        uint64_t v18 = (uint64_t *)v26;
        do
        {
          uint64_t v19 = *v18++;
          uint64_t v20 = v12 + v19;
          if (v12 + v19 >= v15)
          {
            int v21 = v20 - v7;
            unint64_t result = sub_1DD2947FC((uint64_t *)(v20 - v7), v7, 0);
            char v22 = a4[2];
            uint64_t v23 = *(void *)(v13 + 56);
            unsigned __int8 v24 = *(unsigned char *)(v23 + (result & v16));
            *(void *)(*(void *)(v13 + 40) + 8 * ((result & v16) << v22) + 8 * v24) = result & 0xFFFFFFFF00000000 | (v21 - v28);
            *(unsigned char *)(v23 + (result & v16)) = (v24 + 1) & ~(-1 << v22);
          }
          --v17;
        }
        while (v17);
      }
      v12 += v27;
      a3 = v25;
    }
    while (v12 < v25);
  }
  return result;
}

unint64_t sub_1DD2CF0CC(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (a3 < 4)
  {
    unint64_t v9 = 0;
LABEL_18:
    if (v9 < a3)
    {
      while (1)
      {
        uint64_t v5 = qword_1DD322498[*(unsigned __int8 *)(a2 + v9)] + 2 * v5;
        unint64_t v14 = v9 + 1;
        if ((v5 & v6) != 0)
        {
          if (v14 >= a3) {
            goto LABEL_27;
          }
        }
        else
        {
          uint64_t v15 = *a5;
          *(void *)(a4 + 8 * v15) = v14;
          LODWORD(v15) = v15 + 1;
          *a5 = v15;
          if (v15 == 64 || v14 >= a3)
          {
LABEL_27:
            ++v9;
            break;
          }
        }
        ++v9;
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = a2 + 1;
    while (1)
    {
      uint64_t v5 = qword_1DD322498[*(unsigned __int8 *)(a2 + v7)] + 2 * v5;
      if ((v5 & v6) == 0)
      {
        uint64_t v10 = *a5;
        *(void *)(a4 + 8 * v10) = v7 + 1;
        *a5 = v10 + 1;
        if (v10 == 63)
        {
          unint64_t v9 = v7 + 1;
          goto LABEL_28;
        }
      }
      uint64_t v5 = qword_1DD322498[*(unsigned __int8 *)(v8 + v7)] + 2 * v5;
      if ((v5 & v6) == 0)
      {
        uint64_t v11 = *a5;
        *(void *)(a4 + 8 * v11) = v7 + 2;
        *a5 = v11 + 1;
        if (v11 == 63)
        {
          unint64_t v9 = v7 + 2;
          goto LABEL_28;
        }
      }
      uint64_t v5 = qword_1DD322498[*(unsigned __int8 *)(v8 + v7 + 1)] + 2 * v5;
      if ((v5 & v6) == 0)
      {
        uint64_t v12 = *a5;
        *(void *)(a4 + 8 * v12) = v7 + 3;
        *a5 = v12 + 1;
        if (v12 == 63)
        {
          unint64_t v9 = v7 + 3;
          goto LABEL_28;
        }
      }
      uint64_t v5 = qword_1DD322498[*(unsigned __int8 *)(v8 + v7 + 2)] + 2 * v5;
      unint64_t v9 = v7 + 4;
      if ((v5 & v6) == 0)
      {
        uint64_t v13 = *a5;
        *(void *)(a4 + 8 * v13) = v9;
        LODWORD(v13) = v13 + 1;
        *a5 = v13;
        if (v13 == 64) {
          break;
        }
      }
      v7 += 4;
      if (v9 + 3 >= a3) {
        goto LABEL_18;
      }
    }
    unint64_t v9 = v7 + 4;
  }
LABEL_28:
  *a1 = v5;
  return v9;
}

unint64_t sub_1DD2CF258(uint32x2_t *a1, void *a2, _DWORD *a3, uint64_t a4, unint64_t a5)
{
  if ((a5 & 0xFFFFF) != 0) {
    uint64_t v5 = (a5 >> 20) + 1;
  }
  else {
    uint64_t v5 = a5 >> 20;
  }
  if (!v5) {
    return 0;
  }
  uint64_t v8 = a1;
  unint64_t v9 = 0;
  uint64_t v10 = 0;
  int v11 = 1 << a3[5];
  uint64_t v12 = (char *)(a4 + a5);
  uint64_t v13 = a1 + 8;
  unint64_t v14 = a1 + 72;
  unint64_t v15 = a2[3];
  uint64_t v140 = (uint64_t *)&a1[74];
  uint64_t v147 = a3;
  while (1)
  {
    if (v15 >= a2[4]) {
      return 0;
    }
    uint64_t v16 = (unsigned __int8 *)(a4 + (v10 << 20));
    uint64_t v17 = (unint64_t)(v12 - (char *)v16) >= 0x100000 ? (uint64_t)(v16 + 0x100000) : (uint64_t)v12;
    uint32x2_t v18 = v8[1];
    unsigned int v19 = v17 - v18.i32[0];
    if ((v17 - v18.i32[0]) > 0xE0000000)
    {
      uint64_t v21 = 1 << a3[1];
      unsigned int v22 = v16 - v18.i32[0] - v11;
      uint64_t v23 = v22 - 2;
      uint32x2_t v24 = (uint32x2_t)(*(void *)&v8[2] + v23);
      v8[1] = (uint32x2_t)(*(void *)&v18 + v23);
      v8[2] = v24;
      v8[3] = (uint32x2_t)vbsl_s8((int8x8_t)vcgt_u32((uint32x2_t)vdup_n_s32(v22), v8[3]), (int8x8_t)0x200000002, (int8x8_t)vsub_s32((int32x2_t)v8[3], vdup_n_s32(v23)));
      ++v8[4].i32[0];
      unint64_t v25 = (_DWORD *)v8[5];
      do
      {
        int v26 = *v25 - v23;
        if (*v25 < v23) {
          int v26 = 0;
        }
        *unint64_t v25 = v26;
        v25 += 2;
        --v21;
      }
      while (v21);
      __int32 v20 = 0;
      v8[6].i32[0] = 0;
      uint32x2_t v18 = v8[1];
      unsigned int v19 = v17 - v18.i32[0];
    }
    else
    {
      __int32 v20 = v8[6].i32[0];
    }
    unsigned __int32 v27 = v8[3].u32[1];
    if (v20 + v11 >= v19)
    {
      unsigned int v29 = v8[3].u32[0];
    }
    else
    {
      unsigned int v28 = v19 - v11;
      if (v27 < v28)
      {
        v8[3].i32[1] = v28;
        unsigned __int32 v27 = v28;
      }
      unsigned int v29 = v8[3].u32[0];
      if (v29 < v27)
      {
        v8[3].i32[0] = v27;
        unsigned int v29 = v27;
      }
      v8[6].i32[0] = 0;
    }
    unint64_t v162 = a3[3];
    int v31 = a3[1];
    int v30 = a3[2];
    if (v27 >= v29)
    {
      uint32x2_t v32 = 0;
      unsigned int v33 = v29;
    }
    else
    {
      uint32x2_t v32 = v8[2];
      unsigned int v33 = v27;
    }
    unint64_t v34 = v17 - (void)v16;
    unint64_t v35 = *(void *)&v32 + v33;
    if (v27 >= v29) {
      unint64_t v35 = 0;
    }
    unint64_t v152 = v35;
    uint64_t v36 = (char *)(*(void *)&v32 + v29);
    int8x16x4_t v156 = v36;
    if (v27 >= v29) {
      uint64_t v36 = 0;
    }
    unint64_t v148 = (unint64_t)v36;
    unint64_t result = v34;
    if (v34 >= v162) {
      break;
    }
LABEL_162:
    if (result > 0xFFFFFFFFFFFFFF88) {
      return result;
    }
    unint64_t v126 = a2[3];
    if (v15 >= v126) {
      unint64_t result = v34 + v9;
    }
    else {
      *(_DWORD *)(*a2 + 12 * v15 + 4) += v9;
    }
    ++v10;
    unint64_t v15 = v126;
    unint64_t v9 = result;
    if (v10 == v5) {
      return 0;
    }
  }
  uint32x2_t v155 = v32;
  unint64_t v134 = v34;
  int v38 = (char *)&v16[v34];
  unint64_t v39 = (unint64_t)&v16[v34 - 8];
  if (v162 >= 0x40) {
    unsigned int v40 = 64;
  }
  else {
    unsigned int v40 = a3[3];
  }
  int v41 = a3[4];
  unsigned int v42 = v41 - 1;
  uint64_t v43 = ~(-1 << v41);
  char v44 = v40 - v41;
  if (v42 >= v40) {
    char v45 = 0;
  }
  else {
    char v45 = v44;
  }
  v164[0] = 0xFFFFFFFFLL;
  v164[1] = v43 << v45;
  unint64_t v141 = v39;
  if ((unint64_t)&v16[v162] >= v39)
  {
LABEL_161:
    unint64_t result = v38 - (char *)v16;
    unint64_t v34 = v134;
    goto LABEL_162;
  }
  unint64_t v127 = v15;
  unint64_t v128 = v9;
  uint64_t v129 = v12;
  int v130 = v11;
  uint64_t v131 = v10;
  uint64_t v132 = v5;
  uint64_t v133 = a4;
  uint64_t v146 = 1 << v30;
  unint64_t v154 = (unint64_t)(v38 - 3);
  unint64_t v160 = (unint64_t)v38;
  unint64_t v153 = (unint64_t)(v38 - 1);
  uint64_t v145 = *(void *)&v18 - 1;
  uint64_t v149 = *(void *)&v18 + 8;
  uint64_t v144 = *(void *)&v18 + 8 + v29;
  unsigned int v161 = (void *)(*(void *)&v18 + v29);
  unint64_t v46 = v39;
  unint64_t v47 = (unint64_t)&v16[v162];
  unsigned int v138 = v14;
  int v139 = a2;
  unint64_t v150 = v8;
  int v135 = v13;
  uint32x2_t v157 = v18;
  unsigned int v158 = v29;
  unsigned int v159 = v33;
  int v137 = ~(-1 << (v31 - v30));
  unint64_t v136 = (unint64_t)(v38 - 7);
  while (2)
  {
    unsigned int v163 = 0;
    unint64_t v48 = sub_1DD2CF0CC(v164, v47, v46 - v47, (uint64_t)v13, &v163);
    if (!v163)
    {
      uint64_t v8 = v150;
      goto LABEL_159;
    }
    unint64_t v142 = v47;
    unint64_t v143 = v48;
    unint64_t v49 = v47 - v162;
    unint64_t v50 = a3;
    uint64_t v51 = v140;
    uint64_t v151 = v163;
    uint64_t v52 = v163;
    unint64_t v53 = v162;
    do
    {
      uint64_t v54 = (uint64_t)*v13++;
      unint64_t v55 = sub_1DD2947FC((uint64_t *)(v49 + v54), v162, 0);
      uint64_t v56 = v55 & v137;
      *(v51 - 2) = v49 + v54;
      *((_DWORD *)v51 - 2) = v56;
      *((_DWORD *)v51 - 1) = HIDWORD(v55);
      _X8 = *(void *)&v150[5] + 8 * (v56 << v50[2]);
      *uint64_t v51 = _X8;
      v51 += 3;
      __asm { PRFM            #0, [X8] }
      --v52;
    }
    while (v52);
    uint64_t v63 = 0;
    a3 = v50;
    uint64_t v8 = v150;
    unint64_t v14 = v138;
    a2 = v139;
    uint32x2_t v64 = v157;
    unsigned int v65 = v27;
    unsigned int v66 = v159;
    uint64_t v67 = v161;
    uint64_t v68 = v151;
    while (2)
    {
      uint64_t v69 = &v138[3 * v63];
      uint64_t v70 = (unsigned __int8 *)*v69;
      uint64_t v71 = v69[1].u32[0];
      unsigned int v72 = v69[1].u32[1];
      uint64_t v73 = *(void *)v69 - *(void *)&v64;
      if (*(void *)v69 < (unint64_t)v16) {
        goto LABEL_154;
      }
      unsigned int v74 = 0;
      unint64_t v75 = 0;
      int v76 = 0;
      unint64_t v77 = 0;
      unsigned int v78 = (unsigned int *)v138[3 * v63 + 2];
      unsigned int v79 = &v78[2 * v146];
      unint64_t v80 = v70 + 8;
      while (2)
      {
        if (v78[1] != v72) {
          goto LABEL_147;
        }
        uint64_t v81 = *v78;
        if (v81 <= v66) {
          goto LABEL_147;
        }
        if (v65 < v158)
        {
          if (v81 >= v158) {
            uint32x2_t v82 = v64;
          }
          else {
            uint32x2_t v82 = v155;
          }
          uint64_t v83 = (char *)(*(void *)&v82 + v81);
          if (v81 >= v158) {
            unint64_t v84 = (char *)v160;
          }
          else {
            unint64_t v84 = v156;
          }
          uint64_t v85 = (char *)&v70[v84 - v83];
          if ((unint64_t)v85 >= v160) {
            uint64_t v85 = (char *)v160;
          }
          if (v85 - 7 <= (char *)v70)
          {
            unint64_t v90 = (char *)v70;
            unsigned int v91 = (_DWORD *)(*(void *)&v82 + v81);
          }
          else
          {
            unint64_t v86 = *(void *)v70 ^ *(void *)v83;
            if (v86)
            {
              unint64_t v87 = __clz(__rbit64(v86)) >> 3;
              uint32x2_t v64 = v157;
LABEL_96:
              uint64_t v67 = v161;
              unint64_t v53 = v162;
LABEL_97:
              if (&v83[v87] != v84) {
                goto LABEL_123;
              }
              unint64_t v99 = (char *)&v70[v87];
              if (v136 <= (unint64_t)&v70[v87])
              {
                uint64_t v104 = &v70[v87];
                unint64_t v105 = v67;
              }
              else
              {
                unint64_t v100 = *(void *)v99 ^ *v67;
                if (v100)
                {
                  unint64_t v101 = __clz(__rbit64(v100)) >> 3;
LABEL_121:
                  uint64_t v67 = v161;
                  unint64_t v53 = v162;
LABEL_122:
                  v87 += v101;
LABEL_123:
                  if (v87 >= v53)
                  {
                    uint64_t v93 = 0;
                    if (v81 >= v158) {
                      unsigned int v110 = (unsigned __int8 *)v67;
                    }
                    else {
                      unsigned int v110 = (unsigned __int8 *)v152;
                    }
                    if (v70 > v16 && v83 > (char *)v110)
                    {
                      uint64_t v93 = 0;
                      unint64_t v111 = (unsigned __int8 *)(*(void *)&v82 + v81 - 1);
                      uint64_t v112 = v70 - 1;
                      do
                      {
                        if (*v112 != *v111) {
                          break;
                        }
                        ++v93;
                        if (v112 <= v16) {
                          break;
                        }
                        --v112;
                        BOOL v96 = v111-- > v110;
                      }
                      while (v96);
                    }
                    if (v110 == (unsigned __int8 *)v152 || &v83[-v93] != (char *)v110)
                    {
                      unsigned int v65 = v27;
                    }
                    else
                    {
                      uint64_t v113 = 0;
                      unsigned int v65 = v27;
                      if (v148 > v152 && &v70[-v93] > v16)
                      {
                        uint64_t v113 = 0;
                        uint64_t v114 = &v70[-v93 - 1];
                        unsigned int v115 = (unsigned __int8 *)(v148 - 1);
                        do
                        {
                          if (*v114 != *v115) {
                            break;
                          }
                          ++v113;
                          if (v114 <= v16) {
                            break;
                          }
                          --v114;
                          BOOL v96 = (unint64_t)v115-- > v152;
                        }
                        while (v96);
                      }
                      v93 += v113;
                    }
                    uint64_t v67 = v161;
                    unint64_t v53 = v162;
                    goto LABEL_144;
                  }
                  goto LABEL_146;
                }
                int v106 = (char *)v80 + v87;
                while (1)
                {
                  uint64_t v107 = &v106[v100];
                  if ((unint64_t)&v106[v100] >= v136) {
                    break;
                  }
                  uint64_t v108 = *(void *)(v144 + v100);
                  v100 += 8;
                  unint64_t v109 = *(void *)v107 ^ v108;
                  if (v109)
                  {
                    unint64_t v101 = v100 + (__clz(__rbit64(v109)) >> 3);
                    a3 = v147;
                    uint32x2_t v64 = v157;
                    goto LABEL_121;
                  }
                }
                uint64_t v104 = (unsigned __int8 *)v80 + v87 + v100;
                unint64_t v105 = (_DWORD *)(v144 + v100);
                a3 = v147;
              }
              if ((unint64_t)v104 < v154 && *v105 == *(_DWORD *)v104)
              {
                v104 += 4;
                ++v105;
              }
              if ((unint64_t)v104 < v153 && *(unsigned __int16 *)v105 == *(unsigned __int16 *)v104)
              {
                v104 += 2;
                unint64_t v105 = (_DWORD *)((char *)v105 + 2);
              }
              if ((unint64_t)v104 < v160 && *(unsigned __int8 *)v105 == *v104) {
                ++v104;
              }
              uint32x2_t v64 = v157;
              uint64_t v67 = v161;
              unint64_t v53 = v162;
              unint64_t v101 = v104 - (unsigned __int8 *)v99;
              unsigned int v65 = v27;
              goto LABEL_122;
            }
            while (1)
            {
              unint64_t v90 = (char *)v80 + v86;
              if ((char *)v80 + v86 >= v85 - 7) {
                break;
              }
              uint64_t v97 = *(void *)(*(void *)&v82 + v81 + 8 + v86);
              v86 += 8;
              unint64_t v98 = *(void *)v90 ^ v97;
              if (v98)
              {
                unint64_t v87 = v86 + (__clz(__rbit64(v98)) >> 3);
                a3 = v147;
                uint32x2_t v64 = v157;
                unsigned int v65 = v27;
                goto LABEL_96;
              }
            }
            unsigned int v91 = (_DWORD *)(*(void *)&v82 + v81 + v86 + 8);
            a3 = v147;
          }
          if (v90 < v85 - 3 && *v91 == *(_DWORD *)v90)
          {
            v90 += 4;
            ++v91;
          }
          if (v90 < v85 - 1 && *(unsigned __int16 *)v91 == *(unsigned __int16 *)v90)
          {
            v90 += 2;
            unsigned int v91 = (_DWORD *)((char *)v91 + 2);
          }
          uint32x2_t v64 = v157;
          if (v90 < v85 && *(unsigned __int8 *)v91 == *v90) {
            ++v90;
          }
          uint64_t v67 = v161;
          unint64_t v53 = v162;
          unint64_t v87 = v90 - (char *)v70;
          unsigned int v65 = v27;
          goto LABEL_97;
        }
        uint64_t v88 = (_DWORD *)(*(void *)&v64 + v81);
        if (v136 <= (unint64_t)v70)
        {
          unint64_t v92 = v70;
LABEL_75:
          if ((unint64_t)v92 < v154 && *v88 == *(_DWORD *)v92)
          {
            v92 += 4;
            ++v88;
          }
          if ((unint64_t)v92 < v153 && *(unsigned __int16 *)v88 == *(unsigned __int16 *)v92)
          {
            v92 += 2;
            uint64_t v88 = (_DWORD *)((char *)v88 + 2);
          }
          if ((unint64_t)v92 < v160 && *(unsigned __int8 *)v88 == *v92) {
            ++v92;
          }
          unint64_t v87 = v92 - v70;
          goto LABEL_85;
        }
        unint64_t v89 = *(void *)v70 ^ *(void *)v88;
        if (!v89)
        {
          while (1)
          {
            unint64_t v92 = (unsigned __int8 *)v80 + v89;
            if ((unint64_t)v80 + v89 >= v136) {
              break;
            }
            uint64_t v102 = *(void *)(v149 + v81 + v89);
            v89 += 8;
            unint64_t v103 = *(void *)v92 ^ v102;
            if (v103)
            {
              unint64_t v87 = v89 + (__clz(__rbit64(v103)) >> 3);
              goto LABEL_85;
            }
          }
          uint64_t v88 = (_DWORD *)(v149 + v81 + v89);
          goto LABEL_75;
        }
        unint64_t v87 = __clz(__rbit64(v89)) >> 3;
LABEL_85:
        if (v87 >= v53)
        {
          uint64_t v93 = 0;
          if (v70 > v16 && v81 > v158)
          {
            uint64_t v93 = 0;
            unint64_t v94 = (unsigned __int8 *)(v145 + v81);
            unint64_t v95 = v70 - 1;
            do
            {
              if (*v95 != *v94) {
                break;
              }
              ++v93;
              if (v95 <= v16) {
                break;
              }
              --v95;
              BOOL v96 = v94-- > (unsigned __int8 *)v67;
            }
            while (v96);
          }
LABEL_144:
          if (v93 + v87 > v75)
          {
            unint64_t v77 = v87;
            int v76 = v93;
            unint64_t v75 = v93 + v87;
            unsigned int v74 = v78;
          }
LABEL_146:
          unsigned int v66 = v159;
        }
LABEL_147:
        v78 += 2;
        if (v78 < v79) {
          continue;
        }
        break;
      }
      uint64_t v8 = v150;
      uint64_t v68 = v151;
      if (!v74)
      {
LABEL_154:
        uint32x2_t v123 = v8[7];
        char v124 = a3[2];
        unsigned __int8 v125 = *(unsigned char *)(*(void *)&v123 + v71);
        *(void *)(*(void *)&v8[5] + 8 * (v71 << v124) + 8 * v125) = v73 | ((unint64_t)v72 << 32);
        *(unsigned char *)(*(void *)&v123 + v71) = (v125 + 1) & ~(-1 << v124);
LABEL_155:
        if (++v63 == v68)
        {
          uint64_t v13 = v135;
          unint64_t v46 = v141;
          unint64_t v47 = v142;
          unint64_t v48 = v143;
          goto LABEL_159;
        }
        continue;
      }
      break;
    }
    uint64_t v116 = v139[3];
    if (v116 != v139[4])
    {
      uint64_t v117 = (_DWORD *)(*v139 + 12 * v116);
      int v118 = v73 - *v74;
      v117[1] = v70 - v76 - v16;
      v117[2] = v76 + v77;
      *uint64_t v117 = v118;
      v139[3] = v116 + 1;
      unint64_t v119 = v73 | ((unint64_t)v72 << 32);
      char v120 = a3[2];
      uint32x2_t v121 = v150[7];
      unsigned __int8 v122 = *(unsigned char *)(*(void *)&v121 + v71);
      *(void *)(*(void *)&v150[5] + 8 * (v71 << v120) + 8 * v122) = v119;
      *(unsigned char *)(*(void *)&v121 + v71) = (v122 + 1) & ~(-1 << v120);
      uint64_t v16 = &v70[v77];
      if ((unint64_t)&v70[v77] <= v142 + v143)
      {
        uint64_t v68 = v151;
        goto LABEL_155;
      }
      unint64_t v48 = v143;
      unint64_t v47 = (unint64_t)&v16[-v143];
      uint64_t v13 = v135;
      unint64_t v46 = v141;
LABEL_159:
      v47 += v48;
      if (v47 >= v46)
      {
        uint64_t v5 = v132;
        a4 = v133;
        uint64_t v10 = v131;
        int v11 = v130;
        unint64_t v9 = v128;
        uint64_t v12 = v129;
        unint64_t v15 = v127;
        int v38 = (char *)v160;
        goto LABEL_161;
      }
      continue;
    }
    return -70;
  }
}

uint64_t *sub_1DD2CFCCC(uint64_t *result, unint64_t a2, unsigned int a3)
{
  if (a2)
  {
    unint64_t v3 = result[3];
    unint64_t v4 = result[1];
    if (v4 <= v3) {
      uint64_t v5 = result[3];
    }
    else {
      uint64_t v5 = result[1];
    }
    uint64_t v6 = 12 * v4;
    while (v5 != v4)
    {
      uint64_t v7 = *result;
      uint64_t v8 = *result + v6;
      unint64_t v9 = *(unsigned int *)(v8 + 4);
      unint64_t v10 = a2 - v9;
      if (a2 <= v9)
      {
        *(_DWORD *)(v8 + 4) = v9 - a2;
        return result;
      }
      *(_DWORD *)(v8 + 4) = 0;
      unint64_t v11 = *(unsigned int *)(v8 + 8);
      a2 = v10 - v11;
      if (v10 < v11)
      {
        *(_DWORD *)(v7 + v6 + 8) = v11 - v10;
        if ((int)v11 - (int)v10 < a3)
        {
          unint64_t v12 = v4 + 1;
          if (v12 < v3) {
            *(_DWORD *)(v7 + v6 + 16) += v11 - v10;
          }
          result[1] = v12;
        }
        return result;
      }
      *(_DWORD *)(v8 + 8) = 0;
      result[1] = ++v4;
      v6 += 12;
      if (v10 == v11) {
        return result;
      }
    }
  }
  return result;
}

uint64_t sub_1DD2CFD70(uint64_t result, int a2)
{
  unsigned int v2 = *(_DWORD *)(result + 16) + a2;
  if (!v2) {
    goto LABEL_12;
  }
  unint64_t v3 = *(void *)(result + 24);
  unint64_t v4 = *(void *)(result + 8);
  uint64_t v5 = v4 <= v3 ? *(void *)(result + 24) : *(void *)(result + 8);
  uint64_t v6 = 12 * v4;
  while (v5 != v4)
  {
    unsigned int v7 = *(_DWORD *)(*(void *)result + v6 + 8) + *(_DWORD *)(*(void *)result + v6 + 4);
    BOOL v8 = v2 >= v7;
    unsigned int v9 = v2 - v7;
    if (!v8)
    {
      *(void *)(result + 16) = v2;
      break;
    }
    *(void *)(result + 8) = ++v4;
    v6 += 12;
    unsigned int v2 = v9;
    if (!v9) {
      goto LABEL_12;
    }
  }
  if (v3 == v4) {
LABEL_12:
  }
    *(void *)(result + 16) = 0;
  return result;
}

uint64_t sub_1DD2CFDE4(uint64_t *a1, uint64_t a2, uint64_t a3, void *a4, int a5, unint64_t a6, uint64_t a7)
{
  if (*(_DWORD *)(a2 + 28) >= *(_DWORD *)(a2 + 24))
  {
    uint64_t v14 = *(void *)(a2 + 248);
    if (v14)
    {
      if (*(_DWORD *)(v14 + 140)) {
        int v13 = 3;
      }
      else {
        int v13 = 2;
      }
    }
    else
    {
      int v13 = 0;
    }
  }
  else
  {
    int v13 = 1;
  }
  unsigned int v53 = *(_DWORD *)(a2 + 272);
  unint64_t v15 = sub_1DD2989E8(*(_DWORD *)(a2 + 280), a5, v13);
  if (*(_DWORD *)(a2 + 280) > 6u)
  {
    *(void *)(a2 + 288) = a1;
    uint64_t v16 = ((uint64_t (*)(uint64_t, uint64_t, void *, unint64_t, uint64_t))v15)(a2, a3, a4, a6, a7);
    sub_1DD2CFD70((uint64_t)a1, a7);
    return v16;
  }
  unint64_t v18 = a6 + a7;
  unint64_t v19 = a1[1];
  BOOL v20 = v19 >= a1[3] || a7 < 1;
  uint64_t v54 = v15;
  if (!v20)
  {
    unint64_t v24 = v18 - 32;
    while (1)
    {
      unsigned int v25 = v18 - a6;
      uint64_t v26 = *a1 + 12 * v19;
      uint64_t v27 = *(void *)v26;
      uint64_t v28 = HIDWORD(*(void *)v26);
      unsigned int v29 = *(_DWORD *)(v26 + 8);
      if (v29 + v28 <= (int)v18 - (int)a6)
      {
        a1[1] = v19 + 1;
        if (!v27) {
          goto LABEL_15;
        }
      }
      else
      {
        if (v25 - v28 >= v53) {
          int v30 = *(void *)v26;
        }
        else {
          int v30 = 0;
        }
        if (v25 <= v28)
        {
          LODWORD(v27) = 0;
        }
        else
        {
          unsigned int v29 = v25 - v28;
          LODWORD(v27) = v30;
        }
        sub_1DD2CFCCC(a1, (v18 - a6), v53);
        if (!v27) {
          goto LABEL_15;
        }
      }
      unsigned int v31 = a6 - *(_DWORD *)(a2 + 8);
      int v32 = *(_DWORD *)(a2 + 44);
      if (v32 + 1024 < v31)
      {
        unsigned int v33 = v31 - v32 - 1024;
        if (v33 >= 0x200) {
          unsigned int v33 = 512;
        }
        *(_DWORD *)(a2 + 44) = v31 - v33;
      }
      sub_1DD2D01B0(a2, a6);
      uint64_t v34 = ((uint64_t (*)(uint64_t, uint64_t, void *, unint64_t, uint64_t))v54)(a2, a3, a4, a6, v28);
      *(void *)((char *)a4 + 4) = *a4;
      unint64_t v35 = a6 + v28;
      *(_DWORD *)a4 = v27;
      uint64_t v36 = (char *)(a6 + v28 - v34);
      unint64_t v37 = *(_OWORD **)(a3 + 24);
      if (a6 + v28 > v24) {
        break;
      }
      *unint64_t v37 = *(_OWORD *)v36;
      uint64_t v44 = *(void *)(a3 + 24);
      if ((unint64_t)v34 > 0x10)
      {
        *(_OWORD *)(v44 + 16) = *((_OWORD *)v36 + 1);
        if (v34 >= 33)
        {
          unint64_t v45 = v44 + v34;
          unint64_t v46 = (_OWORD *)(v44 + 32);
          unint64_t v47 = (long long *)(a6 + v28 - v34 + 48);
          do
          {
            *unint64_t v46 = *(v47 - 1);
            long long v48 = *v47;
            v47 += 2;
            v46[1] = v48;
            v46 += 2;
          }
          while ((unint64_t)v46 < v45);
        }
        goto LABEL_50;
      }
      *(void *)(a3 + 24) = v44 + v34;
      uint64_t v49 = *(void *)(a3 + 8);
LABEL_53:
      *(_WORD *)(v49 + 4) = v34;
      *(_DWORD *)uint64_t v49 = v27 + 3;
      unint64_t v51 = v29 - 3;
      if (v51 >= 0x10000)
      {
        unint64_t v52 = (unint64_t)(v49 - *(void *)a3) >> 3;
        *(_DWORD *)(a3 + 72) = 2;
        *(_DWORD *)(a3 + 76) = v52;
      }
      *(_WORD *)(v49 + 6) = v51;
      *(void *)(a3 + 8) = v49 + 8;
      a6 = v35 + v29;
      unint64_t v19 = a1[1];
      if (v19 >= a1[3] || a6 >= v18) {
        goto LABEL_15;
      }
    }
    if ((unint64_t)v36 <= v24)
    {
      int v38 = (_OWORD *)((char *)v37 + v24 - (void)v36);
      *unint64_t v37 = *(_OWORD *)v36;
      if ((uint64_t)(v24 - (void)v36) >= 17)
      {
        unint64_t v39 = v37 + 1;
        unsigned int v40 = (long long *)(a6 + v28 - v34 + 32);
        do
        {
          *unint64_t v39 = *(v40 - 1);
          long long v41 = *v40;
          v40 += 2;
          v39[1] = v41;
          v39 += 2;
        }
        while (v39 < v38);
      }
      uint64_t v36 = (char *)(v18 - 32);
      unint64_t v37 = v38;
    }
    if ((unint64_t)v36 < v35)
    {
      unint64_t v42 = v35 - (void)v36;
      do
      {
        char v43 = *v36++;
        *(unsigned char *)unint64_t v37 = v43;
        unint64_t v37 = (_OWORD *)((char *)v37 + 1);
        --v42;
      }
      while (v42);
    }
LABEL_50:
    *(void *)(a3 + 24) += v34;
    uint64_t v49 = *(void *)(a3 + 8);
    if ((unint64_t)v34 >= 0x10000)
    {
      unint64_t v50 = (unint64_t)(v49 - *(void *)a3) >> 3;
      *(_DWORD *)(a3 + 72) = 1;
      *(_DWORD *)(a3 + 76) = v50;
    }
    goto LABEL_53;
  }
LABEL_15:
  unsigned int v21 = a6 - *(_DWORD *)(a2 + 8);
  int v22 = *(_DWORD *)(a2 + 44);
  if (v22 + 1024 < v21)
  {
    unsigned int v23 = v21 - v22 - 1024;
    if (v23 >= 0x200) {
      unsigned int v23 = 512;
    }
    *(_DWORD *)(a2 + 44) = v21 - v23;
  }
  sub_1DD2D01B0(a2, a6);
  return ((uint64_t (*)(uint64_t, uint64_t, void *, unint64_t, unint64_t))v54)(a2, a3, a4, a6, v18 - a6);
}

uint64_t sub_1DD2D01B0(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 280);
  if (v2 == 2) {
    return sub_1DD29F640(result, a2, 0, 0);
  }
  if (v2 == 1) {
    return sub_1DD2A6DAC(result, a2, 0, 0);
  }
  return result;
}

uint64_t sub_1DD2D01E0(uint64_t result, int a2, unint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 8);
  unsigned int v5 = a2 - v4;
  unsigned int v6 = *(_DWORD *)(result + 44);
  if (v6 < a2 - (int)v4)
  {
    int v8 = *(_DWORD *)(result + 272);
    do
    {
      unint64_t result = sub_1DD2D1A18(v3, (void *)(v4 + v6), a3, v5, v8, 0);
      v6 += result;
    }
    while (v6 < v5);
  }
  *(_DWORD *)(v3 + 44) = v5;
  return result;
}

int64_t sub_1DD2D0258(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unint64_t a5)
{
  return sub_1DD2D0260(a1, a2, a3, a4, a5, 0);
}

int64_t sub_1DD2D0260(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unint64_t a5, unsigned int a6)
{
  uint64_t v172 = *MEMORY[0x1E4F143B8];
  unsigned int v9 = *(_DWORD *)(a1 + 272);
  unsigned int v10 = v9 - 6;
  BOOL v11 = v9 >= 3;
  uint64_t v12 = v9 - 3;
  if (v11) {
    uint64_t v13 = 3;
  }
  else {
    uint64_t v13 = 0;
  }
  if (v12) {
    uint64_t v14 = 4;
  }
  else {
    uint64_t v14 = 3;
  }
  uint64_t v162 = v14;
  if (v10 < 0xFFFFFFFD) {
    uint64_t v12 = v13;
  }
  uint64_t v147 = (uint64_t (*)(uint64_t, uint64_t, int *, unsigned __int8 *, unsigned __int8 *, uint64_t, BOOL, uint64_t))*(&off_1F387D158 + 4 * a6 + v12);
  uint64_t v15 = a1 + 144;
  unint64_t v148 = &a4[a5];
  uint64_t v149 = a4;
  unint64_t v153 = (unint64_t)&a4[a5 - 8];
  uint64_t v16 = (unsigned __int8 *)(*(void *)(a1 + 8) + *(unsigned int *)(a1 + 24));
  if (*(_DWORD *)(a1 + 276) >= 0xFFFu) {
    int v17 = 4095;
  }
  else {
    int v17 = *(_DWORD *)(a1 + 276);
  }
  unsigned int v144 = v17;
  int v167 = *(_DWORD *)(a1 + 44);
  unint64_t v18 = *(_DWORD **)(a1 + 184);
  uint64_t v155 = *(void *)(a1 + 176);
  uint64_t v166 = 0;
  long long v164 = 0u;
  long long v165 = 0u;
  long long v163 = 0u;
  uint64_t v170 = 0;
  int v171 = 0;
  unint64_t v19 = *(long long **)(a1 + 288);
  if (v19)
  {
    long long v20 = v19[1];
    long long v163 = *v19;
    long long v164 = v20;
    *(void *)&long long v165 = *((void *)v19 + 4);
  }
  else
  {
    *(void *)&long long v165 = 0;
    long long v163 = 0uLL;
    long long v164 = 0uLL;
  }
  LODWORD(v166) = 0;
  *((void *)&v165 + 1) = 0;
  sub_1DD2D1E7C((uint64_t)&v163, 0, a5);
  sub_1DD2D1F14(v15, v149, a5, 0);
  if (v16 == v149) {
    unsigned int v21 = v149 + 1;
  }
  else {
    unsigned int v21 = v149;
  }
  if ((unint64_t)v21 < v153)
  {
    int v143 = 0;
    unsigned int v158 = (char *)(v148 - 32);
    unsigned int v159 = (uint64_t *)v15;
    unsigned int v23 = v149;
    uint64_t v22 = a3;
    uint64_t v152 = a2;
    uint64_t v24 = v155;
    while (1)
    {
      uint64_t v151 = v23;
      int v25 = v21 - v23;
      LODWORD(v168) = 0;
      LODWORD(v168) = v147(v24, a1, &v167, v21, v148, v22, v21 == v23, v162);
      sub_1DD2D23F4((uint64_t)&v163, v24, &v168, v21 - v149, v148 - v21);
      uint64_t v26 = v21;
      uint64_t v27 = v168;
      if (!v168)
      {
        unsigned int v21 = v26 + 1;
        uint64_t v22 = a3;
        goto LABEL_148;
      }
      unint64_t v154 = v26;
      for (uint64_t i = 0; i != 3; ++i)
        v18[i + 4] = *(_DWORD *)(a3 + i * 4);
      v18[2] = 0;
      v18[3] = v25;
      int v29 = sub_1DD2D24DC(v25, (uint64_t)v159, 0);
      *unint64_t v18 = v29;
      uint64_t v30 = (v27 - 1);
      unsigned int v31 = *(_DWORD *)(v155 + 8 * v30 + 4);
      if (v31 > v144)
      {
        unsigned int v32 = 0;
        unsigned int v33 = *(_DWORD *)(v155 + 8 * v30);
        unsigned int v21 = v154;
        goto LABEL_107;
      }
      int v34 = v29;
      int v35 = sub_1DD2D24DC(0, (uint64_t)v159, 0);
      uint64_t v36 = v162 - 1;
      unint64_t v37 = v18 + 7;
      do
      {
        *unint64_t v37 = 0x40000000;
        v37 += 7;
        --v36;
      }
      while (v36);
      unsigned int v38 = v162;
      do
      {
        unint64_t v39 = (unsigned int *)(v155 + 8 * v36);
        unsigned int v40 = v39[1];
        if (v38 <= v40)
        {
          unsigned int v41 = *v39;
          uint64_t v42 = 31 - __clz(v41);
          int v43 = *(_DWORD *)(a1 + 224);
          int v44 = (v42 << 9) - 25549;
          if (v42 <= 0x13) {
            int v44 = -15821;
          }
          do
          {
            if (v43 == 1)
            {
              int v45 = v42 - __clz(v38 - 2);
              int v46 = 12032;
            }
            else
            {
              unsigned int v47 = v38 - 3;
              if (v38 - 3 < 0x80) {
                unsigned int v48 = byte_1DD322E41[v47];
              }
              else {
                unsigned int v48 = 67 - __clz(v47);
              }
              int v45 = __clz(*(_DWORD *)(*(void *)(a1 + 168) + 4 * v42) + 1)
                  + v42
                  + byte_1DD322E0C[v48]
                  + __clz(*(_DWORD *)(*(void *)(a1 + 160) + 4 * v48) + 1);
              int v46 = v44 + *(_DWORD *)(a1 + 220) + *(_DWORD *)(a1 + 216);
            }
            int v49 = v35 + v34 + v46 + (v45 << 8);
            unint64_t v50 = &v18[7 * v38];
            v50[2] = v38;
            v50[3] = v25;
            *unint64_t v50 = v49;
            v50[1] = v41;
            ++v38;
          }
          while (v38 <= v40);
        }
        ++v36;
      }
      while (v36 != v27);
      unsigned int v51 = v38 - 1;
      if (v38 == 1)
      {
LABEL_104:
        unint64_t v105 = &v18[7 * v51];
        unsigned int v33 = v105[1];
        int v143 = *v105;
        unsigned int v31 = v105[2];
        int v25 = v105[3];
        uint64_t v170 = *((void *)v105 + 2);
        int v171 = v105[6];
        unsigned int v32 = v51 - (v25 + v31);
        if (v51 < v25 + v31) {
          unsigned int v32 = 0;
        }
        unsigned int v21 = v154;
        if (!v31) {
          goto LABEL_156;
        }
LABEL_107:
        int v106 = &v18[7 * v32];
        uint64_t v168 = *((void *)v106 + 2);
        int v169 = v106[6];
        if (v33 >= 4)
        {
          int v107 = HIDWORD(v168);
          HIDWORD(v168) = v168;
          unsigned int v108 = v33 - 3;
          goto LABEL_121;
        }
        if (v25) {
          unsigned int v109 = v33;
        }
        else {
          unsigned int v109 = v33 + 1;
        }
        unsigned int v110 = v109 - 1;
        if (v109 == 4)
        {
          int v111 = v168;
          unsigned int v108 = v168 - 1;
        }
        else
        {
          if (v109 == 1)
          {
            int v107 = v169;
            goto LABEL_122;
          }
          unsigned int v108 = *((_DWORD *)&v168 + v110);
          int v111 = v168;
        }
        if (v110 <= 1) {
          uint64_t v112 = &v169;
        }
        else {
          uint64_t v112 = (int *)&v168 + 1;
        }
        int v107 = *v112;
        HIDWORD(v168) = v111;
LABEL_121:
        LODWORD(v168) = v108;
LABEL_122:
        *(void *)a3 = v168;
        *(_DWORD *)(a3 + 8) = v107;
        goto LABEL_123;
      }
      unsigned int v52 = 1;
      while (1)
      {
        unsigned int v53 = &v18[7 * v52 - 7];
        if (v53[2]) {
          int v54 = 1;
        }
        else {
          int v54 = v18[7 * v52 - 4] + 1;
        }
        unint64_t v160 = (unint64_t)&v154[v52];
        unsigned int v156 = v52 - 1;
        if (*(_DWORD *)(a1 + 240) == 2)
        {
          int v55 = 2048;
        }
        else if (*(_DWORD *)(a1 + 224) == 1)
        {
          int v55 = 1536;
        }
        else
        {
          int v56 = *(_DWORD *)(a1 + 208);
          unsigned int v57 = v56 - 256;
          unsigned int v58 = 7936 - (__clz(*(_DWORD *)(*(void *)(a1 + 144) + 4 * v154[v52 - 1]) + 1) << 8);
          if (v58 <= v56 - 256) {
            unsigned int v57 = v58;
          }
          int v55 = v56 - v57;
        }
        unsigned int v59 = v52;
        int v60 = *v53;
        int v61 = v55 + sub_1DD2D24DC(v54, (uint64_t)v159, 0) + v60;
        int v62 = sub_1DD2D24DC(v54 - 1, (uint64_t)v159, 0);
        uint64_t v63 = &v18[7 * v59];
        int v66 = *v63;
        uint32x2_t v64 = v63 + 2;
        int v65 = v66;
        if (v61 - v62 <= v66)
        {
          unint64_t v75 = &v18[7 * v59];
          v75[1] = 0;
          v75[2] = 0;
          v75[3] = v54;
          _DWORD *v75 = v61 - v62;
          int v65 = v61 - v62;
          uint64_t v67 = v155;
LABEL_57:
          int v76 = 0;
          unint64_t v77 = &v18[7 * v59];
          unsigned int v78 = &v18[7 * v156];
          *((void *)v77 + 2) = *((void *)v78 + 2);
          v77[6] = v78[6];
          int v79 = 1;
          a2 = v152;
          unint64_t v74 = v160;
          goto LABEL_71;
        }
        uint64_t v67 = v155;
        if (!*v64) {
          goto LABEL_57;
        }
        uint64_t v68 = &v18[7 * (v59 - *v64)];
        uint64_t v69 = &v18[7 * v59];
        unsigned int v70 = v69[1];
        int v71 = v69[3];
        uint64_t v168 = *((void *)v68 + 2);
        int v169 = v68[6];
        if (v70 >= 4)
        {
          int v72 = HIDWORD(v168);
          HIDWORD(v168) = v168;
          unsigned int v73 = v70 - 3;
          a2 = v152;
          unint64_t v74 = v160;
LABEL_69:
          LODWORD(v168) = v73;
          goto LABEL_70;
        }
        if (!v71) {
          ++v70;
        }
        unsigned int v80 = v70 - 1;
        if (v70 == 4)
        {
          int v81 = v168;
          unsigned int v73 = v168 - 1;
          a2 = v152;
          unint64_t v74 = v160;
LABEL_65:
          if (v80 <= 1) {
            uint32x2_t v82 = &v169;
          }
          else {
            uint32x2_t v82 = (int *)&v168 + 1;
          }
          int v72 = *v82;
          HIDWORD(v168) = v81;
          goto LABEL_69;
        }
        a2 = v152;
        unint64_t v74 = v160;
        if (v70 != 1)
        {
          unsigned int v73 = *((_DWORD *)&v168 + v80);
          int v81 = v168;
          goto LABEL_65;
        }
        int v72 = v169;
LABEL_70:
        int v79 = 0;
        uint64_t v83 = &v18[7 * v59];
        *((void *)v83 + 2) = v168;
        v83[6] = v72;
        int v76 = 1;
LABEL_71:
        if (v74 <= v153) {
          break;
        }
        unsigned int v52 = v59 + 1;
LABEL_103:
        if (v52 > v51) {
          goto LABEL_104;
        }
      }
      if (v59 == v51) {
        goto LABEL_104;
      }
      unsigned int v52 = v59 + 1;
      if (v18[7 * v59 + 7] <= v65 + 128) {
        goto LABEL_103;
      }
      int v146 = v65;
      unint64_t v142 = v64;
      unsigned int v157 = v76;
      unint64_t v84 = v74;
      if (v79) {
        int v25 = v18[7 * v59 + 3];
      }
      else {
        int v25 = 0;
      }
      int v145 = sub_1DD2D24DC(0, (uint64_t)v159, 0);
      LODWORD(v168) = 0;
      LODWORD(v168) = v147(v67, a1, &v167, (unsigned __int8 *)v84, v148, (uint64_t)&v18[7 * v59 + 4], v157, v162);
      sub_1DD2D23F4((uint64_t)&v163, v155, &v168, v84 - v149, v148 - v84);
      uint64_t v85 = v168;
      if (!v168)
      {
        a2 = v152;
LABEL_102:
        unsigned int v52 = v59 + 1;
        goto LABEL_103;
      }
      uint64_t v86 = (v168 - 1);
      unsigned int v31 = *(_DWORD *)(v155 + 8 * v86 + 4);
      a2 = v152;
      if (v31 <= v144 && v31 + v59 <= 0xFFF)
      {
        uint64_t v87 = 0;
        do
        {
          uint64_t v88 = (unsigned int *)(v155 + 8 * v87);
          unsigned int v89 = v162;
          if (v87) {
            unsigned int v89 = *(v88 - 1) + 1;
          }
          unsigned int v90 = v88[1];
          if (v90 >= v89)
          {
            unsigned int v91 = *v88;
            uint64_t v92 = 31 - __clz(v91);
            int v93 = *(_DWORD *)(a1 + 224);
            int v94 = (v92 << 9) - 25549;
            if (v92 <= 0x13) {
              int v94 = -15821;
            }
            do
            {
              if (v93 == 1)
              {
                int v95 = v92 - __clz(v90 - 2);
                int v96 = 12032;
              }
              else
              {
                unsigned int v97 = v90 - 3;
                if (v90 - 3 < 0x80) {
                  unsigned int v98 = byte_1DD322E41[v97];
                }
                else {
                  unsigned int v98 = 67 - __clz(v97);
                }
                int v95 = __clz(*(_DWORD *)(*(void *)(a1 + 168) + 4 * v92) + 1)
                    + v92
                    + byte_1DD322E0C[v98]
                    + __clz(*(_DWORD *)(*(void *)(a1 + 160) + 4 * v98) + 1);
                int v96 = v94 + *(_DWORD *)(a1 + 220) + *(_DWORD *)(a1 + 216);
              }
              int v99 = v96 + (v95 << 8);
              unint64_t v100 = v90 + v59;
              int v101 = v145 + v146 + v99;
              if (v100 <= v51)
              {
                if (v101 >= v18[7 * v100]) {
                  break;
                }
              }
              else
              {
                uint64_t v102 = 0;
                unint64_t v103 = &v18[7 * v51 + 7];
                do
                {
                  *unint64_t v103 = 0x40000000;
                  v103 += 7;
                  ++v102;
                }
                while ((unint64_t)v51 + v102 < v100);
                v51 += v102;
              }
              uint64_t v104 = &v18[7 * v100];
              v104[2] = v90;
              v104[3] = v25;
              int *v104 = v101;
              v104[1] = v91;
              --v90;
            }
            while (v90 >= v89);
          }
          ++v87;
        }
        while (v87 != v85);
        goto LABEL_102;
      }
      if (*v142) {
        int v138 = 0;
      }
      else {
        int v138 = v18[7 * v59 + 3];
      }
      unsigned int v21 = v154;
      unsigned int v33 = *(_DWORD *)(v155 + 8 * v86);
      unsigned int v32 = v59 - v138;
      if (v32 > 0x1000) {
        unsigned int v32 = 0;
      }
      if (v31) {
        goto LABEL_107;
      }
LABEL_156:
      int v139 = &v18[7 * v32];
      uint64_t v140 = *((void *)v139 + 2);
      *(_DWORD *)(a3 + 8) = v139[6];
      *(void *)a3 = v140;
LABEL_123:
      unsigned int v161 = v32 + 1;
      uint64_t v113 = &v18[7 * v32 + 7];
      *uint64_t v113 = v143;
      v113[1] = v33;
      v113[2] = v31;
      v113[3] = v25;
      *((void *)v113 + 2) = v170;
      v113[6] = v171;
      unsigned int v114 = v32;
      if (!v32)
      {
        unsigned int v120 = 1;
LABEL_130:
        uint32x2_t v121 = v151;
        while (2)
        {
          unsigned int v122 = v120;
          uint32x2_t v123 = &v18[7 * v120];
          uint64_t v125 = v123[2];
          uint64_t v124 = v123[3];
          if (v125)
          {
            unsigned int v126 = v18[7 * v122 + 1];
            unint64_t v127 = v121;
            sub_1DD2D25B4(v159, v124, v121, v126, v125);
            unint64_t v128 = v127;
            uint64_t v129 = *(_OWORD **)(a2 + 24);
            if (&v127[v124] > (unsigned __int8 *)v158)
            {
              sub_1DD29DBFC(v129, (char *)v127, (unint64_t)&v127[v124], v158);
              goto LABEL_140;
            }
            *uint64_t v129 = *(_OWORD *)v127;
            if (v124 >= 0x11
              && (uint64_t v130 = *(void *)(a2 + 24),
                  *(_OWORD *)(v130 + 16) = *((_OWORD *)v127 + 1),
                  (unint64_t)(v124 - 16) >= 0x11))
            {
              unint64_t v132 = v130 + v124;
              uint64_t v133 = (_OWORD *)(v130 + 32);
              unint64_t v134 = (long long *)(v127 + 48);
              do
              {
                _OWORD *v133 = *(v134 - 1);
                long long v135 = *v134;
                v134 += 2;
                v133[1] = v135;
                v133 += 2;
              }
              while ((unint64_t)v133 < v132);
LABEL_140:
              *(void *)(a2 + 24) += v124;
              uint64_t v131 = *(void *)(a2 + 8);
              if (v124 >= 0x10000)
              {
                unint64_t v136 = (unint64_t)(v131 - *(void *)a2) >> 3;
                *(_DWORD *)(a2 + 72) = 1;
                *(_DWORD *)(a2 + 76) = v136;
              }
              unint64_t v128 = v127;
            }
            else
            {
              *(void *)(a2 + 24) += v124;
              uint64_t v131 = *(void *)(a2 + 8);
            }
            *(_WORD *)(v131 + 4) = v124;
            *(_DWORD *)uint64_t v131 = v126;
            if ((unint64_t)(v125 - 3) >= 0x10000)
            {
              unint64_t v137 = (unint64_t)(v131 - *(void *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 2;
              *(_DWORD *)(a2 + 76) = v137;
            }
            *(_WORD *)(v131 + 6) = v125 - 3;
            *(void *)(a2 + 8) = v131 + 8;
            uint32x2_t v121 = &v128[(v125 + v124)];
            unsigned int v21 = v121;
          }
          else
          {
            unsigned int v21 = &v121[v124];
          }
          unsigned int v120 = v122 + 1;
          if (v122 + 1 > v161) {
            goto LABEL_147;
          }
          continue;
        }
      }
      do
      {
        unsigned int v115 = &v18[7 * v114];
        unsigned int v116 = v115[3] + v115[2];
        uint64_t v117 = &v18[7 * v32];
        long long v118 = *(_OWORD *)v115;
        *(_OWORD *)((char *)v117 + 12) = *(_OWORD *)(v115 + 3);
        *uint64_t v117 = v118;
        --v32;
        BOOL v11 = v114 >= v116;
        v114 -= v116;
        BOOL v119 = v114 != 0 && v11;
        if (!v11) {
          unsigned int v114 = 0;
        }
      }
      while (v119);
      unsigned int v120 = v32 + 1;
      if (v32 + 1 <= v161) {
        goto LABEL_130;
      }
      uint32x2_t v121 = v151;
LABEL_147:
      uint64_t v151 = v121;
      sub_1DD2D26A0((int32x2_t *)v159, 0);
      uint64_t v22 = a3;
      uint64_t v24 = v155;
LABEL_148:
      unsigned int v23 = v151;
      if ((unint64_t)v21 >= v153)
      {
        uint64_t v149 = v151;
        return v148 - v149;
      }
    }
  }
  return v148 - v149;
}

int64_t sub_1DD2D0D78(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unint64_t a5)
{
  return sub_1DD2D0D80(a1, a2, a3, a4, a5, 0);
}

int64_t sub_1DD2D0D80(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unint64_t a5, unsigned int a6)
{
  uint64_t v184 = *MEMORY[0x1E4F143B8];
  unsigned int v8 = *(_DWORD *)(a1 + 272);
  unsigned int v9 = v8 - 6;
  BOOL v10 = v8 >= 3;
  uint64_t v11 = v8 - 3;
  if (v10) {
    uint64_t v12 = 3;
  }
  else {
    uint64_t v12 = 0;
  }
  if (v11) {
    uint64_t v13 = 4;
  }
  else {
    uint64_t v13 = 3;
  }
  uint64_t v173 = v13;
  if (v9 < 0xFFFFFFFD) {
    uint64_t v11 = v12;
  }
  unsigned int v159 = (uint64_t (*)(uint64_t, uint64_t, int *, unsigned __int8 *, unsigned __int8 *, uint64_t, BOOL))*(&off_1F387D158 + 4 * a6 + v11);
  unint64_t v160 = a4;
  uint64_t v14 = a1 + 144;
  uint64_t v162 = &a4[a5];
  unint64_t v163 = (unint64_t)&a4[a5 - 8];
  uint64_t v15 = (unsigned __int8 *)(*(void *)(a1 + 8) + *(unsigned int *)(a1 + 24));
  if (*(_DWORD *)(a1 + 276) >= 0xFFFu) {
    int v16 = 4095;
  }
  else {
    int v16 = *(_DWORD *)(a1 + 276);
  }
  unsigned int v156 = v16;
  int v179 = *(_DWORD *)(a1 + 44);
  uint64_t v18 = *(void *)(a1 + 176);
  int v17 = *(_DWORD **)(a1 + 184);
  uint64_t v178 = 0;
  long long v176 = 0u;
  long long v177 = 0u;
  long long v175 = 0u;
  uint64_t v182 = 0;
  int v183 = 0;
  unint64_t v19 = *(long long **)(a1 + 288);
  if (v19)
  {
    long long v20 = v19[1];
    long long v175 = *v19;
    long long v176 = v20;
    *(void *)&long long v177 = *((void *)v19 + 4);
  }
  else
  {
    *(void *)&long long v177 = 0;
    long long v175 = 0uLL;
    long long v176 = 0uLL;
  }
  LODWORD(v178) = 0;
  *((void *)&v177 + 1) = 0;
  sub_1DD2D1E7C((uint64_t)&v175, 0, a5);
  sub_1DD2D1F14(v14, v160, a5, 2);
  if (v15 == v160) {
    unsigned int v21 = v160 + 1;
  }
  else {
    unsigned int v21 = v160;
  }
  if ((unint64_t)v21 < v163)
  {
    uint64_t v172 = (uint64_t *)v14;
    int v154 = 0;
    uint64_t v168 = (char *)(v162 - 32);
    uint64_t v22 = v160;
    uint64_t v23 = a3;
    uint64_t v24 = v18;
    uint64_t v174 = v18;
    int v25 = v21;
    while (1)
    {
      unsigned int v161 = v22;
      int v26 = v25 - v22;
      LODWORD(v180) = 0;
      LODWORD(v180) = v159(v24, a1, &v179, v25, v162, v23, v25 == v22);
      sub_1DD2D23F4((uint64_t)&v175, v24, &v180, v25 - v160, v162 - v25);
      uint64_t v27 = v25;
      uint64_t v28 = v180;
      if (!v180)
      {
        int v25 = v27 + 1;
        goto LABEL_148;
      }
      long long v164 = v27;
      for (uint64_t i = 0; i != 3; ++i)
        v17[i + 4] = *(_DWORD *)(a3 + i * 4);
      v17[2] = 0;
      v17[3] = v26;
      int v30 = sub_1DD2D24DC(v26, (uint64_t)v172, 2);
      *int v17 = v30;
      uint64_t v31 = (v28 - 1);
      unsigned int v32 = *(_DWORD *)(v174 + 8 * v31 + 4);
      if (v32 > v156)
      {
        unsigned int v33 = 0;
        unsigned int v34 = *(_DWORD *)(v174 + 8 * v31);
        int v25 = v164;
        goto LABEL_101;
      }
      int v35 = v30;
      int v36 = sub_1DD2D24DC(0, (uint64_t)v172, 2);
      uint64_t v37 = v173 - 1;
      unsigned int v38 = v17 + 7;
      do
      {
        *unsigned int v38 = 0x40000000;
        v38 += 7;
        --v37;
      }
      while (v37);
      int v39 = v36 + v35;
      unsigned int v40 = v173;
      do
      {
        unsigned int v41 = (unsigned int *)(v174 + 8 * v37);
        unsigned int v42 = v41[1];
        if (v40 <= v42)
        {
          unsigned int v43 = *v41;
          unsigned int v44 = __clz(v43);
          uint64_t v45 = 31 - v44;
          int v46 = *(_DWORD *)(a1 + 224);
          unsigned int v47 = (v40 << 8) - 512;
          do
          {
            if (v46 == 1)
            {
              unsigned int v48 = __clz(v40 - 2);
              int v49 = (v47 >> ~(_BYTE)v48) + ((31 - v48 + v45) << 8) + 4096;
            }
            else
            {
              unsigned int v50 = v40 - 3;
              if (v40 - 3 < 0x80) {
                unsigned int v51 = byte_1DD322E41[v50];
              }
              else {
                unsigned int v51 = 67 - __clz(v50);
              }
              unsigned int v52 = *(_DWORD *)(*(void *)(a1 + 168) + 4 * v45) + 1;
              unsigned int v53 = __clz(v52);
              int v54 = byte_1DD322E0C[v51];
              unsigned int v55 = *(_DWORD *)(*(void *)(a1 + 160) + 4 * v51) + 1;
              unsigned int v56 = __clz(v55);
              int v49 = *(_DWORD *)(a1 + 220)
                  + *(_DWORD *)(a1 + 216)
                  - (v52 << 8 >> ~(_BYTE)v53)
                  - (v55 << 8 >> ~(_BYTE)v56)
                  + ((v53 - v44 + v54 + v56 + 16777185) << 8)
                  + 51;
            }
            unsigned int v57 = &v17[7 * v40];
            v57[2] = v40;
            v57[3] = v26;
            *unsigned int v57 = v39 + v49;
            v57[1] = v43;
            ++v40;
            v47 += 256;
          }
          while (v40 <= v42);
        }
        ++v37;
      }
      while (v37 != v28);
      unsigned int v58 = v40 - 1;
      if (v40 == 1)
      {
LABEL_98:
        unsigned int v116 = &v17[7 * v58];
        unsigned int v34 = v116[1];
        int v154 = *v116;
        unsigned int v32 = v116[2];
        int v26 = v116[3];
        uint64_t v182 = *((void *)v116 + 2);
        int v183 = v116[6];
        unsigned int v33 = v58 - (v26 + v32);
        if (v58 < v26 + v32) {
          unsigned int v33 = 0;
        }
        int v25 = v164;
        if (!v32) {
          goto LABEL_129;
        }
LABEL_101:
        uint64_t v117 = &v17[7 * v33];
        uint64_t v180 = *((void *)v117 + 2);
        int v181 = v117[6];
        if (v34 >= 4)
        {
          int v118 = HIDWORD(v180);
          HIDWORD(v180) = v180;
          unsigned int v119 = v34 - 3;
          goto LABEL_115;
        }
        if (v26) {
          unsigned int v120 = v34;
        }
        else {
          unsigned int v120 = v34 + 1;
        }
        unsigned int v121 = v120 - 1;
        if (v120 == 4)
        {
          int v122 = v180;
          unsigned int v119 = v180 - 1;
        }
        else
        {
          if (v120 == 1)
          {
            int v118 = v181;
            goto LABEL_116;
          }
          unsigned int v119 = *((_DWORD *)&v180 + v121);
          int v122 = v180;
        }
        if (v121 <= 1) {
          uint32x2_t v123 = &v181;
        }
        else {
          uint32x2_t v123 = (int *)&v180 + 1;
        }
        int v118 = *v123;
        HIDWORD(v180) = v122;
LABEL_115:
        LODWORD(v180) = v119;
LABEL_116:
        *(void *)a3 = v180;
        *(_DWORD *)(a3 + 8) = v118;
        goto LABEL_117;
      }
      unsigned int v59 = 1;
      while (1)
      {
        int v60 = &v17[7 * v59 - 7];
        int v61 = v60[2] ? 1 : v17[7 * v59 - 4] + 1;
        unint64_t v170 = (unint64_t)&v164[v59];
        unsigned int v165 = v59 - 1;
        if (*(_DWORD *)(a1 + 240) == 2)
        {
          int v62 = 2048;
        }
        else if (*(_DWORD *)(a1 + 224) == 1)
        {
          int v62 = 1536;
        }
        else
        {
          int v63 = *(_DWORD *)(a1 + 208);
          unsigned int v64 = v63 - 256;
          unsigned int v65 = *(_DWORD *)(*(void *)(a1 + 144) + 4 * *(unsigned __int8 *)(v170 - 1)) + 1;
          unsigned int v66 = __clz(v65);
          unsigned int v67 = (v65 << 8 >> ~(_BYTE)v66) + ((31 - v66) << 8);
          if (v67 <= v63 - 256) {
            unsigned int v64 = v67;
          }
          int v62 = v63 - v64;
        }
        unsigned int v68 = v59;
        int v69 = *v60;
        int v70 = v61;
        int v71 = v62 + sub_1DD2D24DC(v61, (uint64_t)v172, 2) + v69;
        int v72 = sub_1DD2D24DC(v70 - 1, (uint64_t)v172, 2);
        unsigned int v73 = &v17[7 * v68];
        int v76 = *v73;
        unint64_t v74 = v73 + 2;
        int v75 = v76;
        if (v71 - v72 <= v76)
        {
          uint64_t v83 = &v17[7 * v68];
          v83[1] = 0;
          v83[2] = 0;
          v83[3] = v70;
          *uint64_t v83 = v71 - v72;
          int v75 = v71 - v72;
        }
        else if (*v74)
        {
          unint64_t v77 = &v17[7 * (v68 - *v74)];
          unsigned int v78 = &v17[7 * v68];
          unsigned int v79 = v78[1];
          int v80 = v78[3];
          uint64_t v180 = *((void *)v77 + 2);
          int v181 = v77[6];
          if (v79 >= 4)
          {
            int v81 = HIDWORD(v180);
            HIDWORD(v180) = v180;
            unsigned int v82 = v79 - 3;
            goto LABEL_68;
          }
          if (!v80) {
            ++v79;
          }
          unsigned int v88 = v79 - 1;
          if (v79 == 4)
          {
            int v89 = v180;
            unsigned int v82 = v180 - 1;
          }
          else
          {
            if (v79 == 1)
            {
              int v81 = v181;
              goto LABEL_69;
            }
            unsigned int v82 = *((_DWORD *)&v180 + v88);
            int v89 = v180;
          }
          if (v88 <= 1) {
            unsigned int v90 = &v181;
          }
          else {
            unsigned int v90 = (int *)&v180 + 1;
          }
          int v81 = *v90;
          HIDWORD(v180) = v89;
LABEL_68:
          LODWORD(v180) = v82;
LABEL_69:
          int v87 = 0;
          unsigned int v91 = &v17[7 * v68];
          *((void *)v91 + 2) = v180;
          v91[6] = v81;
          int v84 = 1;
          goto LABEL_70;
        }
        int v84 = 0;
        uint64_t v85 = &v17[7 * v68];
        uint64_t v86 = &v17[7 * v165];
        *((void *)v85 + 2) = *((void *)v86 + 2);
        v85[6] = v86[6];
        int v87 = 1;
LABEL_70:
        if (v170 <= v163)
        {
          if (v68 == v58) {
            goto LABEL_98;
          }
          uint64_t v155 = v74;
          int v166 = v75;
          unsigned int v167 = v84;
          int v26 = v87 ? v17[7 * v68 + 3] : 0;
          int v158 = sub_1DD2D24DC(0, (uint64_t)v172, 2);
          LODWORD(v180) = 0;
          LODWORD(v180) = ((uint64_t (*)(uint64_t, uint64_t, int *, unint64_t, unsigned __int8 *, _DWORD *, void, uint64_t))v159)(v174, a1, &v179, v170, v162, &v17[7 * v68 + 4], v167, v173);
          sub_1DD2D23F4((uint64_t)&v175, v174, &v180, v170 - v160, v162 - v170);
          uint64_t v92 = v180;
          if (v180) {
            break;
          }
        }
LABEL_97:
        unsigned int v59 = v68 + 1;
        if (v68 + 1 > v58) {
          goto LABEL_98;
        }
      }
      uint64_t v93 = (v180 - 1);
      unsigned int v32 = *(_DWORD *)(v174 + 8 * v93 + 4);
      if (v32 <= v156 && v32 + v68 <= 0xFFF)
      {
        uint64_t v94 = 0;
        while (1)
        {
          int v95 = (unsigned int *)(v174 + 8 * v94);
          unsigned int v96 = v173;
          if (v94) {
            unsigned int v96 = *(v95 - 1) + 1;
          }
          unsigned int v97 = v95[1];
          if (v97 >= v96) {
            break;
          }
LABEL_96:
          if (++v94 == v92) {
            goto LABEL_97;
          }
        }
        unsigned int v98 = *v95;
        unsigned int v99 = __clz(v98);
        uint64_t v100 = 31 - v99;
        int v101 = *(_DWORD *)(a1 + 224);
        while (2)
        {
          if (v101 == 1)
          {
            unsigned int v102 = __clz(v97 - 2);
            int v103 = ((v97 - 2) << 8 >> ~(_BYTE)v102) + ((31 - v102 + v100) << 8) + 4096;
          }
          else
          {
            unsigned int v104 = v97 - 3;
            if (v97 - 3 < 0x80) {
              unsigned int v105 = byte_1DD322E41[v104];
            }
            else {
              unsigned int v105 = 67 - __clz(v104);
            }
            unsigned int v106 = *(_DWORD *)(*(void *)(a1 + 168) + 4 * v100) + 1;
            unsigned int v107 = __clz(v106);
            int v108 = byte_1DD322E0C[v105];
            unsigned int v109 = *(_DWORD *)(*(void *)(a1 + 160) + 4 * v105) + 1;
            unsigned int v110 = __clz(v109);
            int v103 = *(_DWORD *)(a1 + 220)
                 + *(_DWORD *)(a1 + 216)
                 - (v106 << 8 >> ~(_BYTE)v107)
                 - (v109 << 8 >> ~(_BYTE)v110)
                 + ((v107 - v99 + v108 + v110 + 16777185) << 8)
                 + 51;
          }
          unint64_t v111 = v97 + v68;
          int v112 = v158 + v166 + v103;
          if (v111 <= v58)
          {
            if (v112 < v17[7 * v111]) {
              goto LABEL_94;
            }
          }
          else
          {
            uint64_t v113 = 0;
            unsigned int v114 = &v17[7 * v58 + 7];
            do
            {
              *unsigned int v114 = 0x40000000;
              v114 += 7;
              ++v113;
            }
            while ((unint64_t)v58 + v113 < v111);
            v58 += v113;
LABEL_94:
            unsigned int v115 = &v17[7 * v111];
            v115[2] = v97;
            v115[3] = v26;
            *unsigned int v115 = v112;
            v115[1] = v98;
          }
          if (--v97 < v96) {
            goto LABEL_96;
          }
          continue;
        }
      }
      if (*v155) {
        int v133 = 0;
      }
      else {
        int v133 = v17[7 * v68 + 3];
      }
      int v25 = v164;
      unsigned int v34 = *(_DWORD *)(v174 + 8 * v93);
      unsigned int v33 = v68 - v133;
      if (v33 > 0x1000) {
        unsigned int v33 = 0;
      }
      if (v32) {
        goto LABEL_101;
      }
LABEL_129:
      unint64_t v134 = &v17[7 * v33];
      uint64_t v135 = *((void *)v134 + 2);
      *(_DWORD *)(a3 + 8) = v134[6];
      *(void *)a3 = v135;
LABEL_117:
      unsigned int v171 = v33 + 1;
      uint64_t v124 = &v17[7 * v33 + 7];
      *uint64_t v124 = v154;
      v124[1] = v34;
      v124[2] = v32;
      v124[3] = v26;
      *((void *)v124 + 2) = v182;
      v124[6] = v183;
      unsigned int v125 = v33;
      unsigned int v126 = v161;
      if (v33)
      {
        do
        {
          unint64_t v127 = &v17[7 * v125];
          unsigned int v128 = v127[3] + v127[2];
          uint64_t v129 = &v17[7 * v33];
          long long v130 = *(_OWORD *)v127;
          *(_OWORD *)((char *)v129 + 12) = *(_OWORD *)(v127 + 3);
          *uint64_t v129 = v130;
          --v33;
          BOOL v10 = v125 >= v128;
          v125 -= v128;
          BOOL v131 = v125 != 0 && v10;
          if (!v10) {
            unsigned int v125 = 0;
          }
        }
        while (v131);
        unsigned int v132 = v33 + 1;
        goto LABEL_130;
      }
      unsigned int v132 = 1;
      while (2)
      {
        unsigned int v136 = v132;
        unint64_t v137 = &v17[7 * v132];
        uint64_t v139 = v137[2];
        uint64_t v138 = v137[3];
        if (v139)
        {
          unsigned int v140 = v17[7 * v136 + 1];
          unint64_t v141 = v126;
          sub_1DD2D25B4(v172, v138, v126, v140, v139);
          unint64_t v142 = v141;
          uint64_t v143 = a2;
          unsigned int v144 = *(_OWORD **)(a2 + 24);
          if (&v141[v138] > (unsigned __int8 *)v168)
          {
            sub_1DD29DBFC(v144, (char *)v141, (unint64_t)&v141[v138], v168);
            uint64_t v143 = a2;
            goto LABEL_140;
          }
          *unsigned int v144 = *(_OWORD *)v141;
          if (v138 >= 0x11
            && (uint64_t v145 = *(void *)(a2 + 24),
                *(_OWORD *)(v145 + 16) = *((_OWORD *)v141 + 1),
                (unint64_t)(v138 - 16) >= 0x11))
          {
            unint64_t v147 = v145 + v138;
            unint64_t v148 = (_OWORD *)(v145 + 32);
            uint64_t v149 = (long long *)(v141 + 48);
            do
            {
              *unint64_t v148 = *(v149 - 1);
              long long v150 = *v149;
              v149 += 2;
              v148[1] = v150;
              v148 += 2;
            }
            while ((unint64_t)v148 < v147);
LABEL_140:
            *(void *)(v143 + 24) += v138;
            uint64_t v146 = *(void *)(v143 + 8);
            if (v138 >= 0x10000)
            {
              unint64_t v151 = (unint64_t)(v146 - *(void *)v143) >> 3;
              *(_DWORD *)(v143 + 72) = 1;
              *(_DWORD *)(v143 + 76) = v151;
            }
            unint64_t v142 = v141;
          }
          else
          {
            *(void *)(a2 + 24) += v138;
            uint64_t v146 = *(void *)(a2 + 8);
          }
          *(_WORD *)(v146 + 4) = v138;
          *(_DWORD *)uint64_t v146 = v140;
          if ((unint64_t)(v139 - 3) >= 0x10000)
          {
            unint64_t v152 = (unint64_t)(v146 - *(void *)v143) >> 3;
            *(_DWORD *)(v143 + 72) = 2;
            *(_DWORD *)(v143 + 76) = v152;
          }
          *(_WORD *)(v146 + 6) = v139 - 3;
          *(void *)(v143 + 8) = v146 + 8;
          unsigned int v126 = &v142[(v139 + v138)];
          int v25 = v126;
        }
        else
        {
          int v25 = &v126[v138];
        }
        unsigned int v132 = v136 + 1;
LABEL_130:
        if (v132 <= v171) {
          continue;
        }
        break;
      }
      unsigned int v161 = v126;
      sub_1DD2D26A0((int32x2_t *)v172, 2);
LABEL_148:
      uint64_t v23 = a3;
      uint64_t v24 = v174;
      uint64_t v22 = v161;
      if ((unint64_t)v25 >= v163)
      {
        unint64_t v160 = v161;
        return v162 - v160;
      }
    }
  }
  return v162 - v160;
}

int64_t sub_1DD2D18E8(uint64_t a1, void *a2, uint64_t a3, unsigned __int8 *a4, unint64_t a5)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!*(_DWORD *)(a1 + 196) && a2[1] == *a2)
  {
    int v10 = *(_DWORD *)(a1 + 24);
    if (v10 == *(_DWORD *)(a1 + 28) && a5 >= 9 && v10 == a4 - *(_DWORD *)(a1 + 8))
    {
      uint64_t v15 = *(void *)a3;
      int v16 = *(_DWORD *)(a3 + 8);
      sub_1DD2D0D80(a1, (uint64_t)a2, (uint64_t)&v15, a4, a5, 0);
      sub_1DD298A28((uint64_t)a2);
      *(void *)(a1 + 8) -= a5;
      int v13 = *(_DWORD *)(a1 + 24) + a5;
      *(_DWORD *)(a1 + 24) = v13;
      *(_DWORD *)(a1 + 28) = v13;
      *(_DWORD *)(a1 + 44) = v13;
    }
  }
  return sub_1DD2D0D80(a1, (uint64_t)a2, a3, a4, a5, 0);
}

int64_t sub_1DD2D19F8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unint64_t a5)
{
  return sub_1DD2D0260(a1, a2, a3, a4, a5, 2u);
}

int64_t sub_1DD2D1A00(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unint64_t a5)
{
  return sub_1DD2D0D80(a1, a2, a3, a4, a5, 2u);
}

int64_t sub_1DD2D1A08(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unint64_t a5)
{
  return sub_1DD2D0260(a1, a2, a3, a4, a5, 1u);
}

int64_t sub_1DD2D1A10(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unint64_t a5)
{
  return sub_1DD2D0D80(a1, a2, a3, a4, a5, 1u);
}

uint64_t sub_1DD2D1A18(uint64_t a1, void *a2, unint64_t a3, int a4, int a5, uint64_t a6)
{
  uint64_t v7 = *(void *)(a1 + 112);
  int v8 = *(_DWORD *)(a1 + 264);
  switch(a5)
  {
    case 5:
      uint64_t v9 = *a2;
      unsigned int v10 = -1157627904;
      goto LABEL_7;
    case 6:
      uint64_t v9 = *a2;
      unsigned int v10 = -1080360960;
      goto LABEL_7;
    case 7:
      uint64_t v9 = *a2;
      unsigned int v10 = -1079680256;
      goto LABEL_7;
    case 8:
      uint64_t v9 = *a2;
      unsigned int v10 = -1213897629;
LABEL_7:
      unint64_t v11 = (v9 * (v10 | 0xCF1BBCDC00000000)) >> -(char)v8;
      break;
    default:
      unint64_t v11 = (-1640531535 * *(_DWORD *)a2) >> -(char)v8;
      break;
  }
  uint64_t v12 = *(void *)(a1 + 128);
  int v13 = -1 << (*(_DWORD *)(a1 + 260) - 1);
  uint64_t v14 = ~v13;
  unsigned int v15 = *(_DWORD *)(v7 + 4 * v11);
  uint64_t v16 = *(void *)(a1 + 8);
  uint64_t v17 = *(void *)(a1 + 16);
  int v18 = a2 - v16;
  if ((int)a2 - (int)v16 >= v14) {
    unsigned int v19 = a2 - v16 + v13 + 1;
  }
  else {
    unsigned int v19 = 0;
  }
  long long v20 = (void *)(v12 + 8 * (v18 & ~v13));
  v77[0] = 0;
  unsigned int v21 = 1 << *(_DWORD *)(a1 + 256);
  unint64_t v23 = *(unsigned int *)(a1 + 24);
  unsigned int v22 = *(_DWORD *)(a1 + 28);
  if (a4 - v22 > v21 && *(_DWORD *)(a1 + 40) == 0) {
    unsigned int v22 = a4 - v21;
  }
  int v25 = v18 + 9;
  int v26 = *(_DWORD *)(a1 + 268);
  *(_DWORD *)(v7 + 4 * v11) = v18;
  if (v15 < v22)
  {
    unsigned int v27 = 0;
    *long long v20 = 0;
    goto LABEL_66;
  }
  unsigned int v73 = v22;
  int v58 = a2 - v16;
  unint64_t v28 = 0;
  unint64_t v29 = 0;
  unsigned int v65 = (char *)(v17 + v23);
  unsigned int v64 = (void *)(v16 + v23);
  int v30 = (unsigned int *)v20 + 1;
  int v76 = 1 << v26;
  unint64_t v31 = a3 - 7;
  unint64_t v61 = a3 - 1;
  unint64_t v62 = a3 - 3;
  uint64_t v59 = v16 + 8;
  int v60 = a2 + 1;
  unint64_t v32 = 8;
  unsigned int v67 = a2;
  unsigned int v66 = v19;
  unint64_t v63 = a3 - 7;
  while (1)
  {
    if (v29 >= v28) {
      unint64_t v33 = v28;
    }
    else {
      unint64_t v33 = v29;
    }
    unsigned int v34 = (char *)a2 + v33;
    unint64_t v74 = v29;
    unint64_t v75 = v28;
    if (!a6 || v33 + v15 >= v23)
    {
      uint64_t v44 = v16 + v15;
      uint64_t v45 = (void *)(v44 + v33);
      if (v31 <= (unint64_t)v34)
      {
        unsigned int v48 = (_DWORD *)((char *)a2 + v33);
      }
      else
      {
        unint64_t v46 = *(void *)v34 ^ *v45;
        if (v46)
        {
          unint64_t v47 = __clz(__rbit64(v46)) >> 3;
LABEL_40:
          unint64_t v28 = v47 + v33;
          goto LABEL_41;
        }
        uint64_t v51 = 0;
        unsigned int v52 = (char *)v60 + v33;
        while (1)
        {
          unsigned int v53 = &v52[v51];
          if ((unint64_t)&v52[v51] >= v31) {
            break;
          }
          uint64_t v54 = *(void *)(v59 + v33 + v15 + v51);
          v51 += 8;
          unint64_t v55 = *(void *)v53 ^ v54;
          if (v55)
          {
            unint64_t v47 = v51 + (__clz(__rbit64(v55)) >> 3);
            goto LABEL_40;
          }
        }
        unsigned int v48 = (_DWORD *)((char *)v60 + v33 + v51);
        uint64_t v45 = (void *)(v59 + v33 + v15 + v51);
      }
      if ((unint64_t)v48 < v62 && *(_DWORD *)v45 == *v48)
      {
        ++v48;
        uint64_t v45 = (void *)((char *)v45 + 4);
      }
      if ((unint64_t)v48 < v61 && *(unsigned __int16 *)v45 == *(unsigned __int16 *)v48)
      {
        unsigned int v48 = (_DWORD *)((char *)v48 + 2);
        uint64_t v45 = (void *)((char *)v45 + 2);
      }
      if ((unint64_t)v48 < a3 && *(unsigned __int8 *)v45 == *(unsigned __int8 *)v48) {
        unsigned int v48 = (_DWORD *)((char *)v48 + 1);
      }
      unint64_t v47 = (char *)v48 - v34;
      goto LABEL_40;
    }
    uint64_t v69 = v15;
    uint64_t v70 = v17 + v15;
    int v35 = (char *)(v70 + v33);
    int v72 = v30;
    uint64_t v36 = v14;
    uint64_t v37 = a6;
    uint64_t v38 = v12;
    unint64_t v68 = v33;
    int v39 = v25;
    uint64_t v40 = v16;
    uint64_t v41 = v17;
    unsigned int v71 = v15;
    unint64_t v42 = v32;
    unint64_t v43 = sub_1DD2A6010(v34, v35, a3, v65, v64);
    int v30 = v72;
    unint64_t v32 = v42;
    unsigned int v15 = v71;
    uint64_t v17 = v41;
    uint64_t v16 = v40;
    unint64_t v31 = v63;
    int v25 = v39;
    uint64_t v14 = v36;
    uint64_t v12 = v38;
    unsigned int v19 = v66;
    a2 = v67;
    a6 = v37;
    unint64_t v28 = v43 + v68;
    uint64_t v44 = v70;
    if (v43 + v68 + v69 >= v23) {
      uint64_t v44 = v16 + v69;
    }
LABEL_41:
    int v49 = v15 + v28;
    if (v28 <= v25 - v15) {
      int v49 = v25;
    }
    if (v28 > v32)
    {
      int v25 = v49;
      unint64_t v32 = v28;
    }
    if ((void *)((char *)a2 + v28) == (void *)a3) {
      goto LABEL_61;
    }
    unsigned int v50 = (unsigned int *)(v12 + 8 * (v15 & v14));
    if (*(unsigned __int8 *)(v44 + v28) >= *((unsigned __int8 *)a2 + v28)) {
      break;
    }
    *(_DWORD *)long long v20 = v15;
    if (v15 <= v19)
    {
      long long v20 = v77;
      goto LABEL_61;
    }
    ++v50;
    unint64_t v29 = v28;
    long long v20 = v50;
    unint64_t v28 = v75;
LABEL_51:
    if (v76 != 1)
    {
      --v76;
      unsigned int v15 = *v50;
      if (*v50 >= v73) {
        continue;
      }
    }
    goto LABEL_61;
  }
  *int v30 = v15;
  if (v15 > v19)
  {
    int v30 = (unsigned int *)(v12 + 8 * (v15 & v14));
    unint64_t v29 = v74;
    goto LABEL_51;
  }
  int v30 = v77;
LABEL_61:
  *int v30 = 0;
  *(_DWORD *)long long v20 = 0;
  unsigned int v27 = v32 - 384;
  if ((v32 - 384) >= 0xC0) {
    unsigned int v27 = 192;
  }
  if (v32 <= 0x180) {
    unsigned int v27 = 0;
  }
  int v18 = v58;
LABEL_66:
  unsigned int v56 = v25 - v18 - 8;
  if (v27 <= v56) {
    return v56;
  }
  else {
    return v27;
  }
}

uint64_t sub_1DD2D1E7C(uint64_t result, int a2, unsigned int a3)
{
  unint64_t v3 = *(void *)(result + 24);
  if (!v3 || (unint64_t v4 = *(void *)(result + 8), v4 >= v3))
  {
    *(void *)(result + 40) = -1;
    return result;
  }
  unsigned int v5 = (int *)(*(void *)result + 12 * v4);
  unint64_t v6 = v5[1];
  unint64_t v7 = *(void *)(result + 16);
  int v8 = v6 - v7;
  if (v7 >= v6) {
    unsigned int v9 = 0;
  }
  else {
    unsigned int v9 = v6 - v7;
  }
  if (v9) {
    int v8 = 0;
  }
  if (v9 >= a3)
  {
    *(void *)(result + 40) = -1;
  }
  else
  {
    int v10 = v8 + v5[2];
    int v11 = *v5;
    unsigned int v12 = v10 + v9 + a2;
    *(_DWORD *)(result + 40) = v9 + a2;
    *(_DWORD *)(result + 44) = v12;
    *(_DWORD *)(result + 48) = v11;
    if (v12 <= a3 + a2)
    {
      int v13 = v10 + v9;
      return sub_1DD2CFD70(result, v13);
    }
    *(_DWORD *)(result + 44) = a3 + a2;
  }
  int v13 = a3;
  return sub_1DD2CFD70(result, v13);
}

int32x2_t *sub_1DD2D1F14(uint64_t a1, unsigned __int8 *a2, unint64_t a3, int a4)
{
  int v6 = *(_DWORD *)(a1 + 96);
  *(_DWORD *)(a1 + 80) = 0;
  if (*(_DWORD *)(a1 + 52))
  {
    if (v6 != 2)
    {
      uint64_t v7 = 0;
      int32x2_t v8 = *(int32x2_t *)a1;
      int32x4_t v9 = 0uLL;
      do
      {
        int32x4_t v9 = vaddq_s32(*(int32x4_t *)(*(void *)&v8 + v7), v9);
        v7 += 16;
      }
      while (v7 != 1024);
      unsigned int v10 = vaddvq_s32(v9);
      if (v10 >= 0x2000)
      {
        uint64_t v11 = 0;
        int32x4_t v12 = 0uLL;
        uint32x4_t v13 = (uint32x4_t)vnegq_s32(vdupq_n_s32(__clz(v10 >> 12) ^ 0x1F));
        v14.i64[0] = 0x100000001;
        v14.i64[1] = 0x100000001;
        do
        {
          int32x4_t v15 = vaddq_s32((int32x4_t)vshlq_u32(*(uint32x4_t *)(*(void *)&v8 + v11), v13), v14);
          int32x4_t v12 = vaddq_s32(v15, v12);
          *(int32x4_t *)(*(void *)&v8 + v11) = v15;
          v11 += 16;
        }
        while (v11 != 1024);
        unsigned int v10 = vaddvq_s32(v12);
      }
      *(_DWORD *)(a1 + 48) = v10;
    }
    uint64_t v16 = 0;
    uint64_t v17 = *(void *)(a1 + 8);
    int32x4_t v18 = 0uLL;
    do
    {
      int32x4_t v18 = vaddq_s32(*(int32x4_t *)(v17 + v16), v18);
      v16 += 16;
    }
    while (v16 != 144);
    unsigned int v19 = vaddvq_s32(v18);
    if (v19 >= 0x1000)
    {
      uint64_t v20 = 0;
      int32x4_t v21 = 0uLL;
      uint32x4_t v22 = (uint32x4_t)vnegq_s32(vdupq_n_s32(__clz(v19 >> 11) ^ 0x1F));
      v23.i64[0] = 0x100000001;
      v23.i64[1] = 0x100000001;
      do
      {
        int32x4_t v24 = vaddq_s32((int32x4_t)vshlq_u32(*(uint32x4_t *)(v17 + v20), v22), v23);
        int32x4_t v21 = vaddq_s32(v24, v21);
        *(int32x4_t *)(v17 + v20) = v24;
        v20 += 16;
      }
      while (v20 != 144);
      unsigned int v19 = vaddvq_s32(v21);
    }
    uint64_t v25 = 0;
    unsigned int v26 = 0;
    *(_DWORD *)(a1 + 52) = v19;
    uint64_t v27 = *(void *)(a1 + 16);
    do
    {
      v26 += *(_DWORD *)(v27 + v25);
      v25 += 4;
    }
    while (v25 != 212);
    if (v26 >= 0x1000)
    {
      uint64_t v28 = 0;
      unsigned int v29 = __clz(v26 >> 11) ^ 0x1F;
      unsigned int v26 = 0;
      do
      {
        int v30 = (*(_DWORD *)(v27 + v28) >> v29) + 1;
        v26 += v30;
        *(_DWORD *)(v27 + v28) = v30;
        v28 += 4;
      }
      while (v28 != 212);
    }
    uint64_t v31 = 0;
    *(_DWORD *)(a1 + 56) = v26;
    uint64_t v32 = *(void *)(a1 + 24);
    int32x4_t v33 = 0uLL;
    do
    {
      int32x4_t v33 = vaddq_s32(*(int32x4_t *)(v32 + v31), v33);
      v31 += 16;
    }
    while (v31 != 128);
    unsigned int v34 = vaddvq_s32(v33);
    if (v34 >= 0x1000)
    {
      uint64_t v35 = 0;
      int32x4_t v36 = 0uLL;
      uint32x4_t v37 = (uint32x4_t)vnegq_s32(vdupq_n_s32(__clz(v34 >> 11) ^ 0x1F));
      v38.i64[0] = 0x100000001;
      v38.i64[1] = 0x100000001;
      do
      {
        int32x4_t v39 = vaddq_s32((int32x4_t)vshlq_u32(*(uint32x4_t *)(v32 + v35), v37), v38);
        int32x4_t v36 = vaddq_s32(v39, v36);
        *(int32x4_t *)(v32 + v35) = v39;
        v35 += 16;
      }
      while (v35 != 128);
      unsigned int v34 = vaddvq_s32(v36);
    }
LABEL_63:
    *(_DWORD *)(a1 + 60) = v34;
    return sub_1DD2D26A0((int32x2_t *)a1, a4);
  }
  if (a3 <= 8) {
    *(_DWORD *)(a1 + 80) = 1;
  }
  uint64_t v40 = *(void *)(a1 + 88);
  if (*(_DWORD *)(v40 + 2056) != 2)
  {
    if (v6 != 2)
    {
      unsigned int v72 = 255;
      sub_1DD2959D8(*(void **)a1, &v72, a2, a3);
      uint64_t v65 = 0;
      int32x2_t v66 = *(int32x2_t *)a1;
      int32x4_t v67 = 0uLL;
      do
      {
        int32x4_t v68 = vsubq_s32((int32x4_t)vshrq_n_u32(*(uint32x4_t *)(*(void *)&v66 + v65), 8uLL), vtstq_s32(*(int32x4_t *)(*(void *)&v66 + v65), *(int32x4_t *)(*(void *)&v66 + v65)));
        int32x4_t v67 = vaddq_s32(v68, v67);
        *(int32x4_t *)(*(void *)&v66 + v65) = v68;
        v65 += 16;
      }
      while (v65 != 1024);
      *(_DWORD *)(a1 + 48) = vaddvq_s32(v67);
    }
    uint64_t v69 = *(_OWORD **)(a1 + 8);
    v69[6] = xmmword_1DD322CF8;
    v69[7] = unk_1DD322D08;
    v69[8] = xmmword_1DD322D18;
    v69[2] = xmmword_1DD322CB8;
    v69[3] = unk_1DD322CC8;
    v69[4] = xmmword_1DD322CD8;
    v69[5] = unk_1DD322CE8;
    *uint64_t v69 = xmmword_1DD322C98;
    v69[1] = unk_1DD322CA8;
    *(_DWORD *)(a1 + 52) = 40;
    memset_pattern16(*(void **)(a1 + 16), &unk_1DD322ED0, 0xD4uLL);
    unsigned int v34 = 53;
    *(_DWORD *)(a1 + 56) = 53;
    uint64_t v70 = *(_OWORD **)(a1 + 24);
    v70[4] = xmmword_1DD322D68;
    v70[5] = unk_1DD322D78;
    v70[6] = xmmword_1DD322D88;
    v70[7] = unk_1DD322D98;
    *uint64_t v70 = xmmword_1DD322D28;
    v70[1] = unk_1DD322D38;
    v70[2] = xmmword_1DD322D48;
    v70[3] = unk_1DD322D58;
    goto LABEL_63;
  }
  *(_DWORD *)(a1 + 80) = 0;
  if (v6 != 2)
  {
    uint64_t v41 = 0;
    *(_DWORD *)(a1 + 48) = 0;
    do
    {
      int v42 = sub_1DD29625C(*(void *)(a1 + 88), v41);
      int v43 = 1 << (11 - v42);
      if (!v42) {
        int v43 = 1;
      }
      *(_DWORD *)(*(void *)a1 + 4 * v41) = v43;
      *(_DWORD *)(a1 + 48) += v43;
      ++v41;
    }
    while (v41 != 256);
    uint64_t v40 = *(void *)(a1 + 88);
  }
  uint64_t v44 = 0;
  uint64_t v45 = 1 << (*(_WORD *)(v40 + 4288) - 1);
  if (!*(_WORD *)(v40 + 4288)) {
    uint64_t v45 = 1;
  }
  *(_DWORD *)(a1 + 52) = 0;
  uint64_t v46 = *(void *)(a1 + 8);
  unint64_t v47 = (int *)(v40 + 4 * v45 + 4296);
  do
  {
    int v48 = *v47;
    v47 += 2;
    int v49 = 1 << (10 - ((v48 + 0xFFFF) >> 16));
    if ((v48 + 0xFFFF) < 0x10000) {
      int v50 = 1;
    }
    else {
      int v50 = v49;
    }
    *(_DWORD *)(v46 + v44) = v50;
    *(_DWORD *)(a1 + 52) += v50;
    v44 += 4;
  }
  while (v44 != 144);
  uint64_t v51 = 0;
  uint64_t v52 = 1 << (*(_WORD *)(v40 + 2836) - 1);
  if (!*(_WORD *)(v40 + 2836)) {
    uint64_t v52 = 1;
  }
  *(_DWORD *)(a1 + 56) = 0;
  uint64_t v53 = *(void *)(a1 + 16);
  uint64_t v54 = (int *)(v40 + 4 * v52 + 2844);
  do
  {
    int v55 = *v54;
    v54 += 2;
    int v56 = 1 << (10 - ((v55 + 0xFFFF) >> 16));
    if ((v55 + 0xFFFF) < 0x10000) {
      int v57 = 1;
    }
    else {
      int v57 = v56;
    }
    *(_DWORD *)(v53 + v51) = v57;
    *(_DWORD *)(a1 + 56) += v57;
    v51 += 4;
  }
  while (v51 != 212);
  uint64_t v58 = 0;
  uint64_t v59 = 1 << (*(_WORD *)(v40 + 2064) - 1);
  if (!*(_WORD *)(v40 + 2064)) {
    uint64_t v59 = 1;
  }
  *(_DWORD *)(a1 + 60) = 0;
  uint64_t v60 = *(void *)(a1 + 24);
  unint64_t v61 = (int *)(v40 + 4 * v59 + 2072);
  do
  {
    int v62 = *v61;
    v61 += 2;
    int v63 = 1 << (10 - ((v62 + 0xFFFF) >> 16));
    if ((v62 + 0xFFFF) < 0x10000) {
      int v64 = 1;
    }
    else {
      int v64 = v63;
    }
    *(_DWORD *)(v60 + v58) = v64;
    *(_DWORD *)(a1 + 60) += v64;
    v58 += 4;
  }
  while (v58 != 128);
  return sub_1DD2D26A0((int32x2_t *)a1, a4);
}

uint64_t sub_1DD2D23F4(uint64_t result, uint64_t a2, _DWORD *a3, unsigned int a4, unsigned int a5)
{
  unint64_t v5 = *(void *)(result + 24);
  if (v5)
  {
    int v6 = (_DWORD *)result;
    if (*(void *)(result + 8) < v5)
    {
      unsigned int v10 = *(_DWORD *)(result + 44);
      if (a4 >= v10)
      {
        if (a4 > v10) {
          sub_1DD2CFD70(result, a4 - v10);
        }
        unint64_t result = sub_1DD2D1E7C((uint64_t)v6, a4, a5);
        unsigned int v10 = v6[11];
      }
      unsigned int v12 = v10 - a4;
      if (v6[10] <= a4 && v10 > a4 && v12 >= 3)
      {
        uint64_t v15 = *a3;
        if (!v15 || v15 <= 0xFFF && v12 > *(_DWORD *)(a2 + 8 * (v15 - 1) + 4))
        {
          int v16 = v6[12] + 3;
          *(_DWORD *)(a2 + 8 * v15 + 4) = v12;
          *(_DWORD *)(a2 + 8 * (*a3)++) = v16;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1DD2D24DC(int a1, uint64_t a2, int a3)
{
  if (*(_DWORD *)(a2 + 80) == 1)
  {
    unsigned int v3 = __clz(a1 + 1);
    int v4 = 7936 - (v3 << 8);
    unsigned int v5 = (((a1 + 1) << 8) >> ~(_BYTE)v3) + ((31 - v3) << 8);
    int v6 = 0;
    if (!a3) {
      unsigned int v5 = v4;
    }
  }
  else
  {
    int v6 = -256;
    do
    {
      unsigned int v7 = a1;
      v6 += 256;
      a1 = 0x1FFFF;
    }
    while (v7 == 0x20000);
    if (v7 < 0x40) {
      unsigned int v8 = byte_1DD322DCC[v7];
    }
    else {
      unsigned int v8 = 50 - __clz(v7);
    }
    int v9 = *(_DWORD *)(a2 + 68) + (byte_1DD322DA8[v8] << 8);
    unsigned int v10 = *(_DWORD *)(*(void *)(a2 + 8) + 4 * v8) + 1;
    unsigned int v11 = __clz(v10);
    int v12 = (v11 << 8) - (v10 << 8 >> ~(_BYTE)v11) - 7936;
    if (!a3) {
      int v12 = (v11 << 8) - 7936;
    }
    unsigned int v5 = v9 + v12;
  }
  return v5 + v6;
}

uint64_t *sub_1DD2D25B4(uint64_t *result, unsigned int a2, unsigned __int8 *a3, unsigned int a4, int a5)
{
  if (*((_DWORD *)result + 24) != 2)
  {
    if (a2)
    {
      uint64_t v5 = *result;
      uint64_t v6 = a2;
      do
      {
        unsigned int v7 = *a3++;
        *(_DWORD *)(v5 + 4 * v7) += 2;
        --v6;
      }
      while (v6);
    }
    *((_DWORD *)result + 12) += 2 * a2;
  }
  if (a2 < 0x40) {
    unsigned int v8 = byte_1DD322DCC[a2];
  }
  else {
    unsigned int v8 = 50 - __clz(a2);
  }
  ++*(_DWORD *)(result[1] + 4 * v8);
  ++*((_DWORD *)result + 13);
  unsigned int v9 = __clz(a4);
  ++*(_DWORD *)(result[3] + 4 * (31 - v9));
  ++*((_DWORD *)result + 15);
  unsigned int v10 = a5 - 3;
  if ((a5 - 3) < 0x80) {
    unsigned int v11 = byte_1DD322E41[v10];
  }
  else {
    unsigned int v11 = 67 - __clz(v10);
  }
  ++*(_DWORD *)(result[2] + 4 * v11);
  ++*((_DWORD *)result + 14);
  return result;
}

int32x2_t *sub_1DD2D26A0(int32x2_t *result, int a2)
{
  if (result[12].i32[0] != 2)
  {
    unsigned int v2 = result[6].i32[0] + 1;
    unsigned int v3 = __clz(v2);
    int v4 = (v2 << 8 >> ~(_BYTE)v3) + ((31 - v3) << 8);
    if (!a2) {
      int v4 = 7936 - (v3 << 8);
    }
    result[8].i32[0] = v4;
  }
  unsigned int v5 = result[6].i32[1] + 1;
  unsigned int v6 = __clz(v5);
  if (a2)
  {
    int v7 = (v5 << 8 >> ~(_BYTE)v6) + ((31 - v6) << 8);
    int32x2_t v8 = vadd_s32(result[7], (int32x2_t)0x100000001);
    int32x2_t v9 = vsub_s32((int32x2_t)0x1F0000001FLL, vclz_s32(v8));
    int32x2_t v10 = vadd_s32(vshl_n_s32(v9, 8uLL), (int32x2_t)vshl_u32((uint32x2_t)vshl_n_s32(v8, 8uLL), (uint32x2_t)vneg_s32(v9)));
  }
  else
  {
    int v7 = 7936 - (v6 << 8);
    int32x2_t v10 = vsub_s32((int32x2_t)0x1F0000001F00, vshl_n_s32(vclz_s32(vadd_s32(result[7], (int32x2_t)0x100000001)), 8uLL));
  }
  result[8].i32[1] = v7;
  result[9] = v10;
  return result;
}

uint64_t sub_1DD2D276C(_DWORD *a1, uint64_t a2, _DWORD *a3, int *a4, unint64_t a5, _DWORD *a6, unsigned int a7, int a8)
{
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v9 = *(unsigned int *)(a2 + 44);
  if (v8 + v9 > (unint64_t)a4) {
    return 0;
  }
  uint64_t v17 = a1;
  unsigned int v18 = a4 - v8;
  unsigned int v19 = a4 - v8;
  if (v9 < (int)a4 - (int)v8)
  {
    do
      LODWORD(v9) = sub_1DD2D1A18(a2, (void *)(v8 + v9), a5, v18, 3, 0) + v9;
    while (v9 < v18);
    uint64_t v8 = *(void *)(a2 + 8);
    unsigned int v19 = a4 - v8;
    uint64_t v17 = a1;
  }
  *(_DWORD *)(a2 + 44) = v18;
  unsigned int v20 = *(_DWORD *)(a2 + 276);
  if (v20 >= 0xFFF) {
    uint64_t v21 = 4095;
  }
  else {
    uint64_t v21 = v20;
  }
  uint64_t v22 = *(void *)(a2 + 112);
  uint64_t v23 = (-1640531535 * *a4) >> -*(unsigned char *)(a2 + 264);
  unsigned int v24 = *(_DWORD *)(v22 + 4 * v23);
  uint64_t v97 = *(void *)(a2 + 128);
  int v94 = -1 << (*(_DWORD *)(a2 + 260) - 1);
  int v96 = ~v94;
  unsigned int v25 = v19 + v94 + 1;
  if (v19 < ~v94) {
    unsigned int v25 = 0;
  }
  unsigned int v100 = v25;
  unsigned int v26 = 1 << *(_DWORD *)(a2 + 256);
  int v27 = *(_DWORD *)(a2 + 24);
  BOOL v28 = v19 - *(_DWORD *)(a2 + 28) > v26;
  unsigned int v29 = v19 - v26;
  if (!v28 || *(_DWORD *)(a2 + 40) != 0) {
    unsigned int v29 = *(_DWORD *)(a2 + 28);
  }
  if (v29 <= 1) {
    unsigned int v31 = 1;
  }
  else {
    unsigned int v31 = v29;
  }
  int v101 = 0;
  unint64_t v32 = (a8 - 1);
  int v92 = *(_DWORD *)(a2 + 268);
  uint64_t v10 = 0;
  if (a7 <= 0xFFFFFFFC)
  {
    unsigned int v33 = v19 - v27;
    unsigned int v34 = (void *)((char *)a4 + 3);
    unint64_t v35 = a5 - 7;
    int32x4_t v36 = (char *)a4 + 11;
    uint64_t v37 = a7;
    while (1)
    {
      if (v37 == 3) {
        unsigned int v38 = *a6 - 1;
      }
      else {
        unsigned int v38 = a6[v37];
      }
      if (v38 - 1 >= v33
        || (v19 - v38 >= v29 ? (BOOL v39 = ((*(int *)((char *)a4 - v38) ^ *a4) & 0xFFFFFF) == 0) : (BOOL v39 = 0), !v39))
      {
        unsigned int v40 = 0;
        goto LABEL_45;
      }
      uint64_t v41 = -(uint64_t)v38;
      int v42 = (char *)v34 - v38;
      if (v35 <= (unint64_t)v34) {
        break;
      }
      unint64_t v43 = *v34 ^ *(void *)v42;
      if (!v43)
      {
        uint64_t v46 = v21;
        uint64_t v47 = 0;
        while (1)
        {
          uint64_t v44 = &v36[v47];
          if ((unint64_t)&v36[v47] >= v35) {
            break;
          }
          uint64_t v48 = *(void *)&v36[v41 + v47];
          v47 += 8;
          unint64_t v49 = *(void *)v44 ^ v48;
          if (v49)
          {
            uint64_t v44 = (char *)(v47 + (__clz(__rbit64(v49)) >> 3));
            uint64_t v21 = v46;
            goto LABEL_44;
          }
        }
        int v42 = &v44[v41];
        uint64_t v21 = v46;
        goto LABEL_34;
      }
      uint64_t v44 = (char *)(__clz(__rbit64(v43)) >> 3);
LABEL_44:
      unsigned int v40 = v44 + 3;
LABEL_45:
      if (v32 < v40)
      {
        uint64_t v45 = &v17[2 * v10];
        _DWORD *v45 = v37 - a7 + 1;
        v45[1] = v40;
        uint64_t v10 = (v10 + 1);
        if (v40 > v21) {
          return v10;
        }
        unint64_t v32 = v40;
        if ((int *)((char *)a4 + v40) == (int *)a5) {
          return v10;
        }
      }
      if (++v37 >= (unint64_t)(a7 + 3)) {
        goto LABEL_55;
      }
    }
    uint64_t v44 = (char *)a4 + 3;
LABEL_34:
    if ((unint64_t)v44 < a5 - 3 && *(_DWORD *)v42 == *(_DWORD *)v44)
    {
      v44 += 4;
      v42 += 4;
    }
    if ((unint64_t)v44 < a5 - 1 && *(unsigned __int16 *)v42 == *(unsigned __int16 *)v44)
    {
      v44 += 2;
      v42 += 2;
    }
    if ((unint64_t)v44 < a5 && *v42 == *v44) {
      LODWORD(v44) = v44 + 1;
    }
    LODWORD(v44) = v44 - v34;
    goto LABEL_44;
  }
LABEL_55:
  unsigned int v98 = v31;
  if (v32 > 2)
  {
    uint64_t v57 = v97;
    int v52 = ~v94;
  }
  else
  {
    unsigned int v90 = v21;
    uint64_t v91 = v23;
    uint64_t v50 = v22;
    unsigned int v51 = sub_1DD2D7E48(a2, a3, a4);
    unsigned int v31 = v98;
    int v52 = ~v94;
    if (v51 < v98)
    {
      uint64_t v57 = v97;
      uint64_t v22 = v50;
      uint64_t v23 = v91;
    }
    else
    {
      uint64_t v22 = v50;
      uint64_t v23 = v91;
      if (!((v19 - v51) >> 18))
      {
        uint64_t v53 = (void *)(v8 + v51);
        if (a5 - 7 <= (unint64_t)a4)
        {
          uint64_t v58 = a4;
          unsigned int v55 = v90;
        }
        else
        {
          unint64_t v54 = *(void *)a4 ^ *v53;
          unsigned int v55 = v90;
          if (v54)
          {
            unint64_t v56 = __clz(__rbit64(v54)) >> 3;
            uint64_t v57 = v97;
            goto LABEL_75;
          }
          uint64_t v86 = a4 + 2;
          uint64_t v57 = v97;
          while (1)
          {
            int v87 = (void *)((char *)v86 + v54);
            if ((unint64_t)v86 + v54 >= a5 - 7) {
              break;
            }
            uint64_t v88 = *(void *)(v51 + v8 + 8 + v54);
            v54 += 8;
            unint64_t v89 = *v87 ^ v88;
            if (v89)
            {
              unint64_t v56 = v54 + (__clz(__rbit64(v89)) >> 3);
              goto LABEL_75;
            }
          }
          uint64_t v58 = (int *)((char *)a4 + v54 + 8);
          uint64_t v53 = (void *)(v51 + v8 + v54 + 8);
        }
        if ((unint64_t)v58 < a5 - 3 && *(_DWORD *)v53 == *v58)
        {
          ++v58;
          uint64_t v53 = (void *)((char *)v53 + 4);
        }
        uint64_t v57 = v97;
        if ((unint64_t)v58 < a5 - 1 && *(unsigned __int16 *)v53 == *(unsigned __int16 *)v58)
        {
          uint64_t v58 = (int *)((char *)v58 + 2);
          uint64_t v53 = (void *)((char *)v53 + 2);
        }
        if ((unint64_t)v58 < a5 && *(unsigned __int8 *)v53 == *(unsigned __int8 *)v58) {
          uint64_t v58 = (int *)((char *)v58 + 1);
        }
        unint64_t v56 = (char *)v58 - (char *)a4;
LABEL_75:
        if (v56 >= 3)
        {
          *uint64_t v17 = v19 - v51 + 3;
          v17[1] = v56;
          if (v56 > v55 || (int *)((char *)a4 + v56) == (int *)a5)
          {
            unsigned int v60 = v19 + 1;
            uint64_t v10 = 1;
            goto LABEL_84;
          }
          uint64_t v10 = 1;
          unint64_t v32 = v56;
        }
        goto LABEL_82;
      }
      uint64_t v57 = v97;
    }
  }
LABEL_82:
  unint64_t v61 = (unsigned int *)(v57 + 8 * (v19 & ~v94));
  int v62 = v61 + 1;
  unsigned int v63 = v19 + 9;
  *(_DWORD *)(v22 + 4 * v23) = v19;
  if (v24 < v31) {
    goto LABEL_83;
  }
  unint64_t v65 = 0;
  unint64_t v66 = 0;
  int v67 = 1 << v92;
  unint64_t v68 = a5 - 7;
  int v95 = a4 + 2;
  uint64_t v69 = v8 + 8;
  while (1)
  {
    unint64_t v70 = v66 >= v65 ? v65 : v66;
    uint64_t v71 = v8 + v24;
    unsigned int v72 = (char *)a4 + v70;
    unsigned int v73 = (void *)(v71 + v70);
    if (v68 <= (unint64_t)a4 + v70)
    {
      int v76 = (int *)((char *)a4 + v70);
    }
    else
    {
      unint64_t v74 = *(void *)v72 ^ *v73;
      if (v74)
      {
        unint64_t v75 = __clz(__rbit64(v74)) >> 3;
        goto LABEL_104;
      }
      uint64_t v81 = 0;
      unsigned int v82 = (char *)v95 + v70;
      while (1)
      {
        uint64_t v83 = &v82[v81];
        if ((unint64_t)&v82[v81] >= v68) {
          break;
        }
        uint64_t v84 = *(void *)(v69 + v70 + v24 + v81);
        v81 += 8;
        unint64_t v85 = *(void *)v83 ^ v84;
        if (v85)
        {
          unint64_t v75 = v81 + (__clz(__rbit64(v85)) >> 3);
          uint64_t v57 = v97;
          int v52 = v96;
          unsigned int v31 = v98;
          goto LABEL_104;
        }
      }
      int v76 = (int *)((char *)v95 + v70 + v81);
      unsigned int v73 = (void *)(v69 + v70 + v24 + v81);
      uint64_t v57 = v97;
      int v52 = v96;
    }
    if ((unint64_t)v76 < a5 - 3 && *(_DWORD *)v73 == *v76)
    {
      ++v76;
      unsigned int v73 = (void *)((char *)v73 + 4);
    }
    if ((unint64_t)v76 < a5 - 1 && *(unsigned __int16 *)v73 == *(unsigned __int16 *)v76)
    {
      int v76 = (_DWORD *)((char *)v76 + 2);
      unsigned int v73 = (void *)((char *)v73 + 2);
    }
    if ((unint64_t)v76 < a5 && *(unsigned __int8 *)v73 == *(unsigned __int8 *)v76) {
      int v76 = (_DWORD *)((char *)v76 + 1);
    }
    unsigned int v31 = v98;
    unint64_t v75 = (char *)v76 - v72;
LABEL_104:
    unint64_t v77 = v75 + v70;
    if (v77 > v32)
    {
      if (v77 > v63 - v24) {
        unsigned int v63 = v24 + v77;
      }
      unsigned int v78 = &v17[2 * v10];
      *unsigned int v78 = v19 + 3 - v24;
      v78[1] = v77;
      uint64_t v10 = (v10 + 1);
      BOOL v79 = v77 > 0x1000 || (int *)((char *)a4 + v77) == (int *)a5;
      unint64_t v32 = v77;
      if (v79) {
        goto LABEL_83;
      }
    }
    int v80 = (unsigned int *)(v57 + 8 * (v24 & v52));
    if (*(unsigned __int8 *)(v71 + v77) >= *((unsigned __int8 *)a4 + v77)) {
      break;
    }
    *unint64_t v61 = v24;
    if (v24 <= v100)
    {
      unint64_t v61 = (unsigned int *)&v101;
      goto LABEL_83;
    }
    ++v80;
    unint64_t v66 = v77;
    unint64_t v61 = v80;
LABEL_116:
    if (--v67)
    {
      unsigned int v24 = *v80;
      if (*v80 >= v31) {
        continue;
      }
    }
    goto LABEL_83;
  }
  unsigned int *v62 = v24;
  if (v24 > v100)
  {
    unint64_t v65 = v77;
    int v62 = (unsigned int *)(v57 + 8 * (v24 & v52));
    goto LABEL_116;
  }
  int v62 = (unsigned int *)&v101;
LABEL_83:
  unsigned int *v62 = 0;
  *unint64_t v61 = 0;
  unsigned int v60 = v63 - 8;
LABEL_84:
  *(_DWORD *)(a2 + 44) = v60;
  return v10;
}

uint64_t sub_1DD2D2EA0(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, unint64_t a5, _DWORD *a6, unsigned int a7, int a8)
{
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v9 = *(unsigned int *)(a2 + 44);
  if (v8 + v9 > (unint64_t)a4) {
    return 0;
  }
  unsigned int v18 = a4 - v8;
  unsigned int v19 = a4 - v8;
  if (v9 < (int)a4 - (int)v8)
  {
    do
      LODWORD(v9) = sub_1DD2D1A18(a2, (void *)(v8 + v9), a5, v18, 4, 0) + v9;
    while (v9 < v18);
    uint64_t v8 = *(void *)(a2 + 8);
    unsigned int v19 = a4 - v8;
  }
  *(_DWORD *)(a2 + 44) = v18;
  if (*(_DWORD *)(a2 + 276) >= 0xFFFu) {
    unsigned int v20 = 4095;
  }
  else {
    unsigned int v20 = *(_DWORD *)(a2 + 276);
  }
  uint64_t v76 = (-1640531535 * *a4) >> -*(unsigned char *)(a2 + 264);
  uint64_t v77 = *(void *)(a2 + 112);
  unsigned int v21 = *(_DWORD *)(v77 + 4 * v76);
  uint64_t v22 = *(void *)(a2 + 128);
  int v23 = -1 << (*(_DWORD *)(a2 + 260) - 1);
  int v24 = ~v23;
  unsigned int v25 = v19 + v23 + 1;
  if (v19 < ~v23) {
    unsigned int v25 = 0;
  }
  unsigned int v80 = v25;
  unsigned int v26 = 1 << *(_DWORD *)(a2 + 256);
  int v27 = *(_DWORD *)(a2 + 24);
  BOOL v28 = v19 - *(_DWORD *)(a2 + 28) > v26;
  unsigned int v29 = v19 - v26;
  if (v28 && *(_DWORD *)(a2 + 40) == 0) {
    unsigned int v31 = v29;
  }
  else {
    unsigned int v31 = *(_DWORD *)(a2 + 28);
  }
  if (v31 <= 1) {
    unsigned int v32 = 1;
  }
  else {
    unsigned int v32 = v31;
  }
  int v82 = 0;
  int v33 = *(_DWORD *)(a2 + 268);
  unint64_t v34 = (a8 - 1);
  if (a7 <= 0xFFFFFFFC)
  {
    uint64_t result = 0;
    unsigned int v35 = v19 - v27;
    int32x4_t v36 = a4 + 1;
    unint64_t v37 = a5 - 7;
    unsigned int v38 = a4 + 3;
    uint64_t v39 = a7;
    while (1)
    {
      if (v39 == 3) {
        unsigned int v40 = *a6 - 1;
      }
      else {
        unsigned int v40 = a6[v39];
      }
      if (v40 - 1 >= v35 || (v19 - v40 >= v31 ? (BOOL v41 = *a4 == *(_DWORD *)((char *)a4 - v40)) : (BOOL v41 = 0), !v41))
      {
        unsigned int v42 = 0;
        goto LABEL_46;
      }
      uint64_t v43 = -(uint64_t)v40;
      uint64_t v44 = (void *)((char *)v36 - v40);
      if (v37 <= (unint64_t)v36) {
        break;
      }
      unint64_t v45 = *v36 ^ *v44;
      if (!v45)
      {
        uint64_t v49 = 0;
        while (1)
        {
          uint64_t v47 = &v38[v49];
          if ((unint64_t)&v38[v49] >= v37) {
            break;
          }
          uint64_t v50 = *(void *)((char *)v38 + v43 + v49 * 4);
          v49 += 2;
          unint64_t v51 = *v47 ^ v50;
          if (v51)
          {
            unint64_t v46 = v49 * 4 + (__clz(__rbit64(v51)) >> 3);
            goto LABEL_45;
          }
        }
        uint64_t v44 = (void *)((char *)v47 + v43);
        goto LABEL_35;
      }
      unint64_t v46 = __clz(__rbit64(v45)) >> 3;
LABEL_45:
      unsigned int v42 = v46 + 4;
LABEL_46:
      if (v34 < v42)
      {
        uint64_t v48 = (_DWORD *)(a1 + 8 * result);
        *uint64_t v48 = v39 - a7 + 1;
        v48[1] = v42;
        uint64_t result = (result + 1);
        if (v42 > v20) {
          return result;
        }
        unint64_t v34 = v42;
        if ((_DWORD *)((char *)a4 + v42) == (_DWORD *)a5) {
          return result;
        }
      }
      if (++v39 >= (unint64_t)(a7 + 3)) {
        goto LABEL_57;
      }
    }
    uint64_t v47 = a4 + 1;
LABEL_35:
    if ((unint64_t)v47 < a5 - 3 && *(_DWORD *)v44 == *(_DWORD *)v47)
    {
      uint64_t v47 = (void *)((char *)v47 + 4);
      uint64_t v44 = (void *)((char *)v44 + 4);
    }
    if ((unint64_t)v47 < a5 - 1 && *(unsigned __int16 *)v44 == *(unsigned __int16 *)v47)
    {
      uint64_t v47 = (void *)((char *)v47 + 2);
      uint64_t v44 = (void *)((char *)v44 + 2);
    }
    if ((unint64_t)v47 < a5 && *(unsigned __int8 *)v44 == *(unsigned __int8 *)v47) {
      LODWORD(v47) = v47 + 1;
    }
    LODWORD(v46) = v47 - v36;
    goto LABEL_45;
  }
  uint64_t result = 0;
LABEL_57:
  int v52 = (unsigned int *)(v22 + 8 * (v19 & ~v23));
  uint64_t v53 = v52 + 1;
  unsigned int v54 = v19 + 9;
  *(_DWORD *)(v77 + 4 * v76) = v19;
  if (v21 < v32) {
    goto LABEL_58;
  }
  unint64_t v55 = 0;
  unint64_t v56 = 0;
  int v57 = 1 << v33;
  unint64_t v58 = a5 - 7;
  unsigned int v81 = v19 + 3;
  BOOL v79 = a4 + 2;
  uint64_t v78 = v8 + 8;
  unsigned int v59 = v80;
  while (1)
  {
    unint64_t v60 = v56 >= v55 ? v55 : v56;
    uint64_t v61 = v8 + v21;
    int v62 = (char *)a4 + v60;
    unsigned int v63 = (void *)(v61 + v60);
    if (v58 <= (unint64_t)a4 + v60)
    {
      unint64_t v66 = (_DWORD *)((char *)a4 + v60);
    }
    else
    {
      unint64_t v64 = *(void *)v62 ^ *v63;
      if (v64)
      {
        unint64_t v65 = __clz(__rbit64(v64)) >> 3;
        goto LABEL_78;
      }
      uint64_t v71 = 0;
      unsigned int v72 = (char *)v79 + v60;
      while (1)
      {
        unsigned int v73 = &v72[v71];
        if ((unint64_t)&v72[v71] >= v58) {
          break;
        }
        uint64_t v74 = *(void *)(v78 + v60 + v21 + v71);
        v71 += 8;
        unint64_t v75 = *(void *)v73 ^ v74;
        if (v75)
        {
          unint64_t v65 = v71 + (__clz(__rbit64(v75)) >> 3);
          unsigned int v59 = v80;
          goto LABEL_78;
        }
      }
      unint64_t v66 = (_DWORD *)((char *)v79 + v60 + v71);
      unsigned int v63 = (void *)(v78 + v60 + v21 + v71);
      unsigned int v59 = v80;
    }
    if ((unint64_t)v66 < a5 - 3 && *(_DWORD *)v63 == *v66)
    {
      ++v66;
      unsigned int v63 = (void *)((char *)v63 + 4);
    }
    if ((unint64_t)v66 < a5 - 1 && *(unsigned __int16 *)v63 == *(unsigned __int16 *)v66)
    {
      unint64_t v66 = (_DWORD *)((char *)v66 + 2);
      unsigned int v63 = (void *)((char *)v63 + 2);
    }
    if ((unint64_t)v66 < a5 && *(unsigned __int8 *)v63 == *(unsigned __int8 *)v66) {
      unint64_t v66 = (_DWORD *)((char *)v66 + 1);
    }
    unint64_t v65 = (char *)v66 - v62;
LABEL_78:
    unint64_t v67 = v65 + v60;
    if (v67 > v34)
    {
      if (v67 > v54 - v21) {
        unsigned int v54 = v21 + v67;
      }
      unint64_t v68 = (_DWORD *)(a1 + 8 * result);
      _DWORD *v68 = v81 - v21;
      v68[1] = v67;
      uint64_t result = (result + 1);
      BOOL v69 = v67 > 0x1000 || (_DWORD *)((char *)a4 + v67) == (_DWORD *)a5;
      unint64_t v34 = v67;
      if (v69) {
        goto LABEL_58;
      }
    }
    unint64_t v70 = (unsigned int *)(v22 + 8 * (v21 & v24));
    if (*(unsigned __int8 *)(v61 + v67) >= *((unsigned __int8 *)a4 + v67)) {
      break;
    }
    *int v52 = v21;
    if (v21 <= v59)
    {
      int v52 = (unsigned int *)&v82;
      goto LABEL_58;
    }
    ++v70;
    unint64_t v56 = v67;
    int v52 = v70;
LABEL_90:
    if (--v57)
    {
      unsigned int v21 = *v70;
      if (*v70 >= v32) {
        continue;
      }
    }
    goto LABEL_58;
  }
  *uint64_t v53 = v21;
  if (v21 > v59)
  {
    unint64_t v55 = v67;
    uint64_t v53 = (unsigned int *)(v22 + 8 * (v21 & v24));
    goto LABEL_90;
  }
  uint64_t v53 = (unsigned int *)&v82;
LABEL_58:
  *uint64_t v53 = 0;
  *int v52 = 0;
  *(_DWORD *)(a2 + 44) = v54 - 8;
  return result;
}

uint64_t sub_1DD2D33E8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unint64_t a5, _DWORD *a6, unsigned int a7, int a8)
{
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v9 = *(unsigned int *)(a2 + 44);
  if (v8 + v9 > (unint64_t)a4) {
    return 0;
  }
  unsigned int v18 = a4 - v8;
  unsigned int v19 = a4 - v8;
  if (v9 < (int)a4 - (int)v8)
  {
    do
      LODWORD(v9) = sub_1DD2D1A18(a2, (void *)(v8 + v9), a5, v18, 5, 0) + v9;
    while (v9 < v18);
    uint64_t v8 = *(void *)(a2 + 8);
    unsigned int v19 = a4 - v8;
  }
  *(_DWORD *)(a2 + 44) = v18;
  if (*(_DWORD *)(a2 + 276) >= 0xFFFu) {
    unsigned int v20 = 4095;
  }
  else {
    unsigned int v20 = *(_DWORD *)(a2 + 276);
  }
  unint64_t v76 = (0xCF1BBCDCBB000000 * *a4) >> -*(unsigned char *)(a2 + 264);
  uint64_t v77 = *(void *)(a2 + 112);
  unsigned int v21 = *(_DWORD *)(v77 + 4 * v76);
  uint64_t v22 = *(void *)(a2 + 128);
  int v23 = -1 << (*(_DWORD *)(a2 + 260) - 1);
  int v24 = ~v23;
  unsigned int v25 = v19 + v23 + 1;
  if (v19 < ~v23) {
    unsigned int v25 = 0;
  }
  unsigned int v80 = v25;
  unsigned int v26 = 1 << *(_DWORD *)(a2 + 256);
  int v27 = *(_DWORD *)(a2 + 24);
  BOOL v28 = v19 - *(_DWORD *)(a2 + 28) > v26;
  unsigned int v29 = v19 - v26;
  if (v28 && *(_DWORD *)(a2 + 40) == 0) {
    unsigned int v31 = v29;
  }
  else {
    unsigned int v31 = *(_DWORD *)(a2 + 28);
  }
  if (v31 <= 1) {
    unsigned int v32 = 1;
  }
  else {
    unsigned int v32 = v31;
  }
  int v82 = 0;
  int v33 = *(_DWORD *)(a2 + 268);
  unint64_t v34 = (a8 - 1);
  if (a7 <= 0xFFFFFFFC)
  {
    uint64_t result = 0;
    unsigned int v35 = v19 - v27;
    int32x4_t v36 = (void *)((char *)a4 + 4);
    unint64_t v37 = a5 - 7;
    unsigned int v38 = (char *)a4 + 12;
    uint64_t v39 = a7;
    while (1)
    {
      if (v39 == 3) {
        unsigned int v40 = *a6 - 1;
      }
      else {
        unsigned int v40 = a6[v39];
      }
      if (v40 - 1 >= v35
        || (v19 - v40 >= v31 ? (BOOL v41 = *(_DWORD *)a4 == *(_DWORD *)((char *)a4 - v40)) : (BOOL v41 = 0), !v41))
      {
        unsigned int v42 = 0;
        goto LABEL_46;
      }
      uint64_t v43 = -(uint64_t)v40;
      uint64_t v44 = (char *)v36 - v40;
      if (v37 <= (unint64_t)v36) {
        break;
      }
      unint64_t v45 = *v36 ^ *(void *)v44;
      if (!v45)
      {
        uint64_t v49 = 0;
        while (1)
        {
          uint64_t v47 = &v38[v49];
          if ((unint64_t)&v38[v49] >= v37) {
            break;
          }
          uint64_t v50 = *(void *)&v38[v43 + v49];
          v49 += 8;
          unint64_t v51 = *(void *)v47 ^ v50;
          if (v51)
          {
            unint64_t v46 = v49 + (__clz(__rbit64(v51)) >> 3);
            goto LABEL_45;
          }
        }
        uint64_t v44 = &v47[v43];
        goto LABEL_35;
      }
      unint64_t v46 = __clz(__rbit64(v45)) >> 3;
LABEL_45:
      unsigned int v42 = v46 + 4;
LABEL_46:
      if (v34 < v42)
      {
        uint64_t v48 = (_DWORD *)(a1 + 8 * result);
        *uint64_t v48 = v39 - a7 + 1;
        v48[1] = v42;
        uint64_t result = (result + 1);
        if (v42 > v20) {
          return result;
        }
        unint64_t v34 = v42;
        if ((void *)((char *)a4 + v42) == (void *)a5) {
          return result;
        }
      }
      if (++v39 >= (unint64_t)(a7 + 3)) {
        goto LABEL_57;
      }
    }
    uint64_t v47 = (char *)a4 + 4;
LABEL_35:
    if ((unint64_t)v47 < a5 - 3 && *(_DWORD *)v44 == *(_DWORD *)v47)
    {
      v47 += 4;
      v44 += 4;
    }
    if ((unint64_t)v47 < a5 - 1 && *(unsigned __int16 *)v44 == *(unsigned __int16 *)v47)
    {
      v47 += 2;
      v44 += 2;
    }
    if ((unint64_t)v47 < a5 && *v44 == *v47) {
      LODWORD(v47) = v47 + 1;
    }
    LODWORD(v46) = v47 - v36;
    goto LABEL_45;
  }
  uint64_t result = 0;
LABEL_57:
  int v52 = (unsigned int *)(v22 + 8 * (v19 & ~v23));
  uint64_t v53 = v52 + 1;
  unsigned int v54 = v19 + 9;
  *(_DWORD *)(v77 + 4 * v76) = v19;
  if (v21 < v32) {
    goto LABEL_58;
  }
  unint64_t v55 = 0;
  unint64_t v56 = 0;
  int v57 = 1 << v33;
  unint64_t v58 = a5 - 7;
  unsigned int v81 = v19 + 3;
  BOOL v79 = a4 + 1;
  uint64_t v78 = v8 + 8;
  unsigned int v59 = v80;
  while (1)
  {
    unint64_t v60 = v56 >= v55 ? v55 : v56;
    uint64_t v61 = v8 + v21;
    int v62 = (char *)a4 + v60;
    unsigned int v63 = (void *)(v61 + v60);
    if (v58 <= (unint64_t)a4 + v60)
    {
      unint64_t v66 = (_DWORD *)((char *)a4 + v60);
    }
    else
    {
      unint64_t v64 = *(void *)v62 ^ *v63;
      if (v64)
      {
        unint64_t v65 = __clz(__rbit64(v64)) >> 3;
        goto LABEL_78;
      }
      uint64_t v71 = 0;
      unsigned int v72 = (char *)v79 + v60;
      while (1)
      {
        unsigned int v73 = &v72[v71];
        if ((unint64_t)&v72[v71] >= v58) {
          break;
        }
        uint64_t v74 = *(void *)(v78 + v60 + v21 + v71);
        v71 += 8;
        unint64_t v75 = *(void *)v73 ^ v74;
        if (v75)
        {
          unint64_t v65 = v71 + (__clz(__rbit64(v75)) >> 3);
          unsigned int v59 = v80;
          goto LABEL_78;
        }
      }
      unint64_t v66 = (_DWORD *)((char *)v79 + v60 + v71);
      unsigned int v63 = (void *)(v78 + v60 + v21 + v71);
      unsigned int v59 = v80;
    }
    if ((unint64_t)v66 < a5 - 3 && *(_DWORD *)v63 == *v66)
    {
      ++v66;
      unsigned int v63 = (void *)((char *)v63 + 4);
    }
    if ((unint64_t)v66 < a5 - 1 && *(unsigned __int16 *)v63 == *(unsigned __int16 *)v66)
    {
      unint64_t v66 = (_DWORD *)((char *)v66 + 2);
      unsigned int v63 = (void *)((char *)v63 + 2);
    }
    if ((unint64_t)v66 < a5 && *(unsigned __int8 *)v63 == *(unsigned __int8 *)v66) {
      unint64_t v66 = (_DWORD *)((char *)v66 + 1);
    }
    unint64_t v65 = (char *)v66 - v62;
LABEL_78:
    unint64_t v67 = v65 + v60;
    if (v67 > v34)
    {
      if (v67 > v54 - v21) {
        unsigned int v54 = v21 + v67;
      }
      unint64_t v68 = (_DWORD *)(a1 + 8 * result);
      _DWORD *v68 = v81 - v21;
      v68[1] = v67;
      uint64_t result = (result + 1);
      BOOL v69 = v67 > 0x1000 || (void *)((char *)a4 + v67) == (void *)a5;
      unint64_t v34 = v67;
      if (v69) {
        goto LABEL_58;
      }
    }
    unint64_t v70 = (unsigned int *)(v22 + 8 * (v21 & v24));
    if (*(unsigned __int8 *)(v61 + v67) >= *((unsigned __int8 *)a4 + v67)) {
      break;
    }
    *int v52 = v21;
    if (v21 <= v59)
    {
      int v52 = (unsigned int *)&v82;
      goto LABEL_58;
    }
    ++v70;
    unint64_t v56 = v67;
    int v52 = v70;
LABEL_90:
    if (--v57)
    {
      unsigned int v21 = *v70;
      if (*v70 >= v32) {
        continue;
      }
    }
    goto LABEL_58;
  }
  *uint64_t v53 = v21;
  if (v21 > v59)
  {
    unint64_t v55 = v67;
    uint64_t v53 = (unsigned int *)(v22 + 8 * (v21 & v24));
    goto LABEL_90;
  }
  uint64_t v53 = (unsigned int *)&v82;
LABEL_58:
  *uint64_t v53 = 0;
  *int v52 = 0;
  *(_DWORD *)(a2 + 44) = v54 - 8;
  return result;
}

uint64_t sub_1DD2D3934(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unint64_t a5, _DWORD *a6, unsigned int a7, int a8)
{
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v9 = *(unsigned int *)(a2 + 44);
  if (v8 + v9 > (unint64_t)a4) {
    return 0;
  }
  unsigned int v18 = a4 - v8;
  unsigned int v19 = a4 - v8;
  if (v9 < (int)a4 - (int)v8)
  {
    do
      LODWORD(v9) = sub_1DD2D1A18(a2, (void *)(v8 + v9), a5, v18, 6, 0) + v9;
    while (v9 < v18);
    uint64_t v8 = *(void *)(a2 + 8);
    unsigned int v19 = a4 - v8;
  }
  *(_DWORD *)(a2 + 44) = v18;
  if (*(_DWORD *)(a2 + 276) >= 0xFFFu) {
    unsigned int v20 = 4095;
  }
  else {
    unsigned int v20 = *(_DWORD *)(a2 + 276);
  }
  unint64_t v76 = (0xCF1BBCDCBF9B0000 * *a4) >> -*(unsigned char *)(a2 + 264);
  uint64_t v77 = *(void *)(a2 + 112);
  unsigned int v21 = *(_DWORD *)(v77 + 4 * v76);
  uint64_t v22 = *(void *)(a2 + 128);
  int v23 = -1 << (*(_DWORD *)(a2 + 260) - 1);
  int v24 = ~v23;
  unsigned int v25 = v19 + v23 + 1;
  if (v19 < ~v23) {
    unsigned int v25 = 0;
  }
  unsigned int v80 = v25;
  unsigned int v26 = 1 << *(_DWORD *)(a2 + 256);
  int v27 = *(_DWORD *)(a2 + 24);
  BOOL v28 = v19 - *(_DWORD *)(a2 + 28) > v26;
  unsigned int v29 = v19 - v26;
  if (v28 && *(_DWORD *)(a2 + 40) == 0) {
    unsigned int v31 = v29;
  }
  else {
    unsigned int v31 = *(_DWORD *)(a2 + 28);
  }
  if (v31 <= 1) {
    unsigned int v32 = 1;
  }
  else {
    unsigned int v32 = v31;
  }
  int v82 = 0;
  int v33 = *(_DWORD *)(a2 + 268);
  unint64_t v34 = (a8 - 1);
  if (a7 <= 0xFFFFFFFC)
  {
    uint64_t result = 0;
    unsigned int v35 = v19 - v27;
    int32x4_t v36 = (void *)((char *)a4 + 4);
    unint64_t v37 = a5 - 7;
    unsigned int v38 = (char *)a4 + 12;
    uint64_t v39 = a7;
    while (1)
    {
      if (v39 == 3) {
        unsigned int v40 = *a6 - 1;
      }
      else {
        unsigned int v40 = a6[v39];
      }
      if (v40 - 1 >= v35
        || (v19 - v40 >= v31 ? (BOOL v41 = *(_DWORD *)a4 == *(_DWORD *)((char *)a4 - v40)) : (BOOL v41 = 0), !v41))
      {
        unsigned int v42 = 0;
        goto LABEL_46;
      }
      uint64_t v43 = -(uint64_t)v40;
      uint64_t v44 = (char *)v36 - v40;
      if (v37 <= (unint64_t)v36) {
        break;
      }
      unint64_t v45 = *v36 ^ *(void *)v44;
      if (!v45)
      {
        uint64_t v49 = 0;
        while (1)
        {
          uint64_t v47 = &v38[v49];
          if ((unint64_t)&v38[v49] >= v37) {
            break;
          }
          uint64_t v50 = *(void *)&v38[v43 + v49];
          v49 += 8;
          unint64_t v51 = *(void *)v47 ^ v50;
          if (v51)
          {
            unint64_t v46 = v49 + (__clz(__rbit64(v51)) >> 3);
            goto LABEL_45;
          }
        }
        uint64_t v44 = &v47[v43];
        goto LABEL_35;
      }
      unint64_t v46 = __clz(__rbit64(v45)) >> 3;
LABEL_45:
      unsigned int v42 = v46 + 4;
LABEL_46:
      if (v34 < v42)
      {
        uint64_t v48 = (_DWORD *)(a1 + 8 * result);
        *uint64_t v48 = v39 - a7 + 1;
        v48[1] = v42;
        uint64_t result = (result + 1);
        if (v42 > v20) {
          return result;
        }
        unint64_t v34 = v42;
        if ((void *)((char *)a4 + v42) == (void *)a5) {
          return result;
        }
      }
      if (++v39 >= (unint64_t)(a7 + 3)) {
        goto LABEL_57;
      }
    }
    uint64_t v47 = (char *)a4 + 4;
LABEL_35:
    if ((unint64_t)v47 < a5 - 3 && *(_DWORD *)v44 == *(_DWORD *)v47)
    {
      v47 += 4;
      v44 += 4;
    }
    if ((unint64_t)v47 < a5 - 1 && *(unsigned __int16 *)v44 == *(unsigned __int16 *)v47)
    {
      v47 += 2;
      v44 += 2;
    }
    if ((unint64_t)v47 < a5 && *v44 == *v47) {
      LODWORD(v47) = v47 + 1;
    }
    LODWORD(v46) = v47 - v36;
    goto LABEL_45;
  }
  uint64_t result = 0;
LABEL_57:
  int v52 = (unsigned int *)(v22 + 8 * (v19 & ~v23));
  uint64_t v53 = v52 + 1;
  unsigned int v54 = v19 + 9;
  *(_DWORD *)(v77 + 4 * v76) = v19;
  if (v21 < v32) {
    goto LABEL_58;
  }
  unint64_t v55 = 0;
  unint64_t v56 = 0;
  int v57 = 1 << v33;
  unint64_t v58 = a5 - 7;
  unsigned int v81 = v19 + 3;
  BOOL v79 = a4 + 1;
  uint64_t v78 = v8 + 8;
  unsigned int v59 = v80;
  while (1)
  {
    unint64_t v60 = v56 >= v55 ? v55 : v56;
    uint64_t v61 = v8 + v21;
    int v62 = (char *)a4 + v60;
    unsigned int v63 = (void *)(v61 + v60);
    if (v58 <= (unint64_t)a4 + v60)
    {
      unint64_t v66 = (_DWORD *)((char *)a4 + v60);
    }
    else
    {
      unint64_t v64 = *(void *)v62 ^ *v63;
      if (v64)
      {
        unint64_t v65 = __clz(__rbit64(v64)) >> 3;
        goto LABEL_78;
      }
      uint64_t v71 = 0;
      unsigned int v72 = (char *)v79 + v60;
      while (1)
      {
        unsigned int v73 = &v72[v71];
        if ((unint64_t)&v72[v71] >= v58) {
          break;
        }
        uint64_t v74 = *(void *)(v78 + v60 + v21 + v71);
        v71 += 8;
        unint64_t v75 = *(void *)v73 ^ v74;
        if (v75)
        {
          unint64_t v65 = v71 + (__clz(__rbit64(v75)) >> 3);
          unsigned int v59 = v80;
          goto LABEL_78;
        }
      }
      unint64_t v66 = (_DWORD *)((char *)v79 + v60 + v71);
      unsigned int v63 = (void *)(v78 + v60 + v21 + v71);
      unsigned int v59 = v80;
    }
    if ((unint64_t)v66 < a5 - 3 && *(_DWORD *)v63 == *v66)
    {
      ++v66;
      unsigned int v63 = (void *)((char *)v63 + 4);
    }
    if ((unint64_t)v66 < a5 - 1 && *(unsigned __int16 *)v63 == *(unsigned __int16 *)v66)
    {
      unint64_t v66 = (_DWORD *)((char *)v66 + 2);
      unsigned int v63 = (void *)((char *)v63 + 2);
    }
    if ((unint64_t)v66 < a5 && *(unsigned __int8 *)v63 == *(unsigned __int8 *)v66) {
      unint64_t v66 = (_DWORD *)((char *)v66 + 1);
    }
    unint64_t v65 = (char *)v66 - v62;
LABEL_78:
    unint64_t v67 = v65 + v60;
    if (v67 > v34)
    {
      if (v67 > v54 - v21) {
        unsigned int v54 = v21 + v67;
      }
      unint64_t v68 = (_DWORD *)(a1 + 8 * result);
      _DWORD *v68 = v81 - v21;
      v68[1] = v67;
      uint64_t result = (result + 1);
      BOOL v69 = v67 > 0x1000 || (void *)((char *)a4 + v67) == (void *)a5;
      unint64_t v34 = v67;
      if (v69) {
        goto LABEL_58;
      }
    }
    unint64_t v70 = (unsigned int *)(v22 + 8 * (v21 & v24));
    if (*(unsigned __int8 *)(v61 + v67) >= *((unsigned __int8 *)a4 + v67)) {
      break;
    }
    *int v52 = v21;
    if (v21 <= v59)
    {
      int v52 = (unsigned int *)&v82;
      goto LABEL_58;
    }
    ++v70;
    unint64_t v56 = v67;
    int v52 = v70;
LABEL_90:
    if (--v57)
    {
      unsigned int v21 = *v70;
      if (*v70 >= v32) {
        continue;
      }
    }
    goto LABEL_58;
  }
  *uint64_t v53 = v21;
  if (v21 > v59)
  {
    unint64_t v55 = v67;
    uint64_t v53 = (unsigned int *)(v22 + 8 * (v21 & v24));
    goto LABEL_90;
  }
  uint64_t v53 = (unsigned int *)&v82;
LABEL_58:
  *uint64_t v53 = 0;
  *int v52 = 0;
  *(_DWORD *)(a2 + 44) = v54 - 8;
  return result;
}

uint64_t sub_1DD2D3E80(_DWORD *a1, uint64_t a2, _DWORD *a3, unint64_t a4, unint64_t a5, _DWORD *a6, unsigned int a7, int a8)
{
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v9 = *(unsigned int *)(a2 + 44);
  if (v8 + v9 > a4) {
    return 0;
  }
  unint64_t v13 = a4;
  uint64_t v15 = a1;
  unsigned int v16 = a4 - v8;
  unsigned int v17 = a4 - v8;
  unsigned int v125 = a7;
  uint32x2_t v123 = a6;
  if (v9 < (int)a4 - (int)v8)
  {
    do
      LODWORD(v9) = sub_1DD2D1A18(a2, (void *)(v8 + v9), a5, v16, 3, 1) + v9;
    while (v9 < v16);
    uint64_t v8 = *(void *)(a2 + 8);
    unsigned int v17 = v13 - v8;
    uint64_t v15 = a1;
    a7 = v125;
    a6 = v123;
  }
  *(_DWORD *)(a2 + 44) = v16;
  if (*(_DWORD *)(a2 + 276) >= 0xFFFu) {
    unsigned int v18 = 4095;
  }
  else {
    unsigned int v18 = *(_DWORD *)(a2 + 276);
  }
  uint64_t v117 = *(void *)(a2 + 112);
  uint64_t v112 = (-1640531535 * *(_DWORD *)v13) >> -*(unsigned char *)(a2 + 264);
  unsigned int v19 = *(_DWORD *)(v117 + 4 * v112);
  uint64_t v127 = *(void *)(a2 + 128);
  int v109 = -1 << (*(_DWORD *)(a2 + 260) - 1);
  unint64_t v20 = *(unsigned int *)(a2 + 24);
  uint64_t v122 = *(void *)(a2 + 16);
  unsigned int v115 = (char *)(v122 + v20);
  uint64_t v128 = v8;
  unsigned int v114 = (void *)(v8 + v20);
  int v121 = ~v109;
  unsigned int v21 = v17 + v109 + 1;
  if (v17 < ~v109) {
    unsigned int v21 = 0;
  }
  unsigned int v120 = v21;
  unsigned int v22 = 1 << *(_DWORD *)(a2 + 256);
  BOOL v23 = v17 - *(_DWORD *)(a2 + 28) > v22;
  unsigned int v24 = v17 - v22;
  if (v23 && *(_DWORD *)(a2 + 40) == 0) {
    unsigned int v26 = v24;
  }
  else {
    unsigned int v26 = *(_DWORD *)(a2 + 28);
  }
  if (v26 <= 1) {
    int v27 = 1;
  }
  else {
    int v27 = v26;
  }
  unsigned int v129 = v27;
  v133[0] = 0;
  uint64_t v111 = a2;
  int v99 = *(_DWORD *)(a2 + 268);
  unint64_t v28 = (a8 - 1);
  unint64_t v116 = v20;
  unsigned int v130 = v17;
  unint64_t v132 = a5;
  uint64_t v10 = 0;
  if (a7 <= 0xFFFFFFFC)
  {
    unint64_t v29 = a7 + 3;
    unsigned int v30 = v17 - v20;
    unsigned int v31 = v17 - v26;
    unsigned int v32 = (void *)(v13 + 3);
    unint64_t v33 = a5 - 7;
    unint64_t v34 = a5 - 3;
    unint64_t v35 = a5 - 1;
    unint64_t v36 = v13 + 11;
    uint64_t v37 = a7;
    unint64_t v107 = v29;
    unsigned int v105 = v18;
    unsigned int v103 = v17 - v20;
    unint64_t v102 = v35;
    unsigned int v101 = v17 - v26;
    while (1)
    {
      unsigned int v38 = v37 == 3 ? *a6 - 1 : a6[v37];
      unsigned int v39 = v17 - v38;
      if (v38 - 1 < v30) {
        break;
      }
      BOOL v45 = v38 - 1 < v31 && v20 + ~v39 >= 3;
      if (!v45 || (uint64_t v46 = v122 + v39, ((*(_DWORD *)v46 ^ *(_DWORD *)v13) & 0xFFFFFF) != 0))
      {
LABEL_40:
        unsigned int v47 = 0;
        goto LABEL_54;
      }
      unint64_t v48 = v33;
      unint64_t v49 = v34;
      int v50 = sub_1DD2A6010((void *)(v13 + 3), (char *)(v46 + 3), v132, v115, v114);
      unint64_t v34 = v49;
      unint64_t v33 = v48;
      unint64_t v35 = v102;
      unsigned int v31 = v101;
      unsigned int v30 = v103;
      a6 = v123;
      a7 = v125;
      unsigned int v17 = v130;
      unint64_t v20 = v116;
      uint64_t v15 = a1;
      unsigned int v47 = v50 + 3;
      unint64_t v29 = v107;
      unsigned int v18 = v105;
LABEL_54:
      if (v28 < v47)
      {
        unint64_t v51 = &v15[2 * v10];
        *unint64_t v51 = v37 - a7 + 1;
        v51[1] = v47;
        uint64_t v10 = (v10 + 1);
        if (v47 > v18) {
          return v10;
        }
        unint64_t v28 = v47;
        if (v13 + v47 == v132) {
          return v10;
        }
      }
      if (++v37 >= v29) {
        goto LABEL_64;
      }
    }
    if (v39 < v26 || ((*(_DWORD *)(v13 - v38) ^ *(_DWORD *)v13) & 0xFFFFFF) != 0) {
      goto LABEL_40;
    }
    uint64_t v41 = -(uint64_t)v38;
    unsigned int v42 = (void *)((char *)v32 - v38);
    if (v33 <= (unint64_t)v32)
    {
      uint64_t v44 = (void *)(v13 + 3);
    }
    else
    {
      unint64_t v43 = *v32 ^ *v42;
      if (v43)
      {
        uint64_t v44 = (void *)(__clz(__rbit64(v43)) >> 3);
LABEL_52:
        unsigned int v47 = v44 + 3;
        goto LABEL_54;
      }
      uint64_t v52 = 0;
      while (1)
      {
        uint64_t v44 = (void *)(v36 + v52);
        if (v36 + v52 >= v33) {
          break;
        }
        uint64_t v53 = *(void *)(v36 + v41 + v52);
        v52 += 8;
        unint64_t v54 = *v44 ^ v53;
        if (v54)
        {
          uint64_t v44 = (void *)(v52 + (__clz(__rbit64(v54)) >> 3));
          goto LABEL_52;
        }
      }
      unsigned int v42 = (void *)((char *)v44 + v41);
    }
    if ((unint64_t)v44 < v34 && *(_DWORD *)v42 == *(_DWORD *)v44)
    {
      uint64_t v44 = (void *)((char *)v44 + 4);
      unsigned int v42 = (void *)((char *)v42 + 4);
    }
    if ((unint64_t)v44 < v35 && *(unsigned __int16 *)v42 == *(unsigned __int16 *)v44)
    {
      uint64_t v44 = (void *)((char *)v44 + 2);
      unsigned int v42 = (void *)((char *)v42 + 2);
    }
    if ((unint64_t)v44 < v132 && *(unsigned __int8 *)v42 == *(unsigned __int8 *)v44) {
      LODWORD(v44) = v44 + 1;
    }
    LODWORD(v44) = v44 - v32;
    goto LABEL_52;
  }
LABEL_64:
  if (v28 > 2)
  {
    unint64_t v58 = v132;
    uint64_t v59 = v128;
  }
  else
  {
    unsigned int v55 = v18;
    unsigned int v56 = sub_1DD2D7E48(v111, a3, (int *)v13);
    if (v56 < v129)
    {
      unint64_t v58 = v132;
      uint64_t v15 = a1;
      uint64_t v59 = v128;
      unint64_t v20 = v116;
      unsigned int v17 = v130;
    }
    else
    {
      unsigned int v17 = v130;
      unsigned int v57 = v130 - v56;
      unint64_t v58 = v132;
      uint64_t v15 = a1;
      uint64_t v59 = v128;
      unint64_t v20 = v116;
      if (!((v130 - v56) >> 18))
      {
        if (v56 < v116)
        {
          unint64_t v60 = sub_1DD2A6010((void *)v13, (char *)(v122 + v56), v132, v115, v114);
          unsigned int v17 = v130;
          unint64_t v20 = v116;
          uint64_t v15 = a1;
          goto LABEL_136;
        }
        uint64_t v91 = (void *)(v128 + v56);
        if (v132 - 7 <= v13)
        {
          uint64_t v93 = (_DWORD *)v13;
        }
        else
        {
          unint64_t v92 = *(void *)v13 ^ *v91;
          if (v92)
          {
            unint64_t v60 = __clz(__rbit64(v92)) >> 3;
            goto LABEL_136;
          }
          unint64_t v95 = v13 + 8;
          while (1)
          {
            int v96 = (void *)(v95 + v92);
            if (v95 + v92 >= v132 - 7) {
              break;
            }
            uint64_t v97 = *(void *)(v56 + v128 + 8 + v92);
            v92 += 8;
            unint64_t v98 = *v96 ^ v97;
            if (v98)
            {
              unint64_t v60 = v92 + (__clz(__rbit64(v98)) >> 3);
              goto LABEL_136;
            }
          }
          uint64_t v93 = (_DWORD *)(v13 + v92 + 8);
          uint64_t v91 = (void *)(v56 + v128 + v92 + 8);
        }
        if ((unint64_t)v93 < v132 - 3 && *(_DWORD *)v91 == *v93)
        {
          ++v93;
          uint64_t v91 = (void *)((char *)v91 + 4);
        }
        if ((unint64_t)v93 < v132 - 1 && *(unsigned __int16 *)v91 == *(unsigned __int16 *)v93)
        {
          uint64_t v93 = (_DWORD *)((char *)v93 + 2);
          uint64_t v91 = (void *)((char *)v91 + 2);
        }
        if ((unint64_t)v93 < v132 && *(unsigned __int8 *)v91 == *(unsigned __int8 *)v93) {
          uint64_t v93 = (_DWORD *)((char *)v93 + 1);
        }
        unint64_t v60 = (unint64_t)v93 - v13;
LABEL_136:
        if (v60 >= 3)
        {
          *uint64_t v15 = v57 + 3;
          v15[1] = v60;
          if (v60 > v55 || v13 + v60 == v132)
          {
            unsigned int v62 = v17 + 1;
            uint64_t v10 = 1;
            goto LABEL_72;
          }
          uint64_t v10 = 1;
          unint64_t v28 = v60;
        }
      }
    }
  }
  unsigned int v126 = (unsigned int *)(v127 + 8 * (v17 & ~v109));
  uint64_t v124 = v126 + 1;
  uint64_t v61 = v17 + 9;
  *(_DWORD *)(v117 + 4 * v112) = v17;
  if (v19 < v129) {
    goto LABEL_71;
  }
  unint64_t v64 = 0;
  unint64_t v65 = 0;
  int v66 = 1 << v99;
  unint64_t v67 = v58 - 7;
  unint64_t v108 = v58 - 1;
  unint64_t v110 = v58 - 3;
  unsigned int v113 = v17 + 3;
  uint64_t v104 = v59 + 8;
  unint64_t v106 = v13 + 8;
  unint64_t v118 = v13;
  while (1)
  {
    if (v65 >= v64) {
      unint64_t v68 = v64;
    }
    else {
      unint64_t v68 = v65;
    }
    uint64_t v69 = v19;
    unint64_t v70 = (char *)(v13 + v68);
    int v131 = v66;
    if (v68 + v19 >= v20)
    {
      uint64_t v79 = v59 + v19;
      unsigned int v80 = (void *)(v79 + v68);
      if (v67 <= (unint64_t)v70)
      {
        uint64_t v83 = (_DWORD *)(v13 + v68);
      }
      else
      {
        unint64_t v81 = *(void *)v70 ^ *v80;
        if (v81)
        {
          unint64_t v82 = __clz(__rbit64(v81)) >> 3;
LABEL_97:
          unint64_t v78 = v82 + v68;
          goto LABEL_98;
        }
        uint64_t v86 = 0;
        unint64_t v87 = v106 + v68;
        while (1)
        {
          uint64_t v88 = (void *)(v87 + v86);
          if (v87 + v86 >= v67) {
            break;
          }
          uint64_t v89 = *(void *)(v104 + v68 + v19 + v86);
          v86 += 8;
          unint64_t v90 = *v88 ^ v89;
          if (v90)
          {
            unint64_t v82 = v86 + (__clz(__rbit64(v90)) >> 3);
            goto LABEL_97;
          }
        }
        uint64_t v83 = (_DWORD *)(v106 + v68 + v86);
        unsigned int v80 = (void *)(v104 + v68 + v19 + v86);
      }
      if ((unint64_t)v83 < v110 && *(_DWORD *)v80 == *v83)
      {
        ++v83;
        unsigned int v80 = (void *)((char *)v80 + 4);
      }
      if ((unint64_t)v83 < v108 && *(unsigned __int16 *)v80 == *(unsigned __int16 *)v83)
      {
        uint64_t v83 = (_DWORD *)((char *)v83 + 2);
        unsigned int v80 = (void *)((char *)v80 + 2);
      }
      if ((unint64_t)v83 < v132 && *(unsigned __int8 *)v80 == *(unsigned __int8 *)v83) {
        uint64_t v83 = (_DWORD *)((char *)v83 + 1);
      }
      unint64_t v82 = (char *)v83 - v70;
      goto LABEL_97;
    }
    uint64_t v71 = v122 + v19;
    unint64_t v72 = v64;
    unsigned int v73 = v19;
    uint64_t v74 = v10;
    unint64_t v75 = v28;
    uint64_t v76 = v61;
    unint64_t v77 = sub_1DD2A6010(v70, (char *)(v71 + v68), v132, v115, v114);
    uint64_t v61 = v76;
    unint64_t v28 = v75;
    uint64_t v10 = v74;
    unsigned int v19 = v73;
    unint64_t v64 = v72;
    unint64_t v20 = v116;
    uint64_t v15 = a1;
    unint64_t v78 = v77 + v68;
    uint64_t v79 = v77 + v68 + v69 >= v116 ? v128 + v69 : v71;
    uint64_t v59 = v128;
LABEL_98:
    if (v78 <= v28)
    {
      unint64_t v13 = v118;
    }
    else
    {
      if (v78 <= v61 - v19) {
        uint64_t v61 = v61;
      }
      else {
        uint64_t v61 = v19 + v78;
      }
      uint64_t v84 = &v15[2 * v10];
      *uint64_t v84 = v113 - v19;
      v84[1] = v78;
      uint64_t v10 = (v10 + 1);
      if (v78 > 0x1000) {
        goto LABEL_71;
      }
      unint64_t v13 = v118;
      unint64_t v28 = v78;
      if (v118 + v78 == v132) {
        goto LABEL_71;
      }
    }
    unint64_t v85 = (unsigned int *)(v127 + 8 * (v19 & v121));
    if (*(unsigned __int8 *)(v79 + v78) >= *(unsigned __int8 *)(v13 + v78)) {
      break;
    }
    unsigned int *v126 = v19;
    if (v19 <= v120)
    {
      unsigned int v126 = v133;
      goto LABEL_71;
    }
    ++v85;
    unint64_t v65 = v78;
    unsigned int v126 = v85;
LABEL_111:
    int v66 = v131 - 1;
    if (v131 != 1)
    {
      unsigned int v19 = *v85;
      if (*v85 >= v129) {
        continue;
      }
    }
    goto LABEL_71;
  }
  *uint64_t v124 = v19;
  if (v19 > v120)
  {
    unint64_t v64 = v78;
    uint64_t v124 = (unsigned int *)(v127 + 8 * (v19 & v121));
    goto LABEL_111;
  }
  uint64_t v124 = v133;
LABEL_71:
  *uint64_t v124 = 0;
  unsigned int *v126 = 0;
  unsigned int v62 = v61 - 8;
LABEL_72:
  *(_DWORD *)(v111 + 44) = v62;
  return v10;
}

uint64_t sub_1DD2D4760(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, unint64_t a5, _DWORD *a6, unsigned int a7, int a8)
{
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v9 = *(unsigned int *)(a2 + 44);
  if (v8 + v9 > (unint64_t)a4) {
    return 0;
  }
  unint64_t v13 = a4;
  unsigned int v15 = a4 - v8;
  unsigned int v16 = a4 - v8;
  unsigned int v111 = a7;
  unint64_t v108 = a6;
  if (v9 < (int)a4 - (int)v8)
  {
    do
      LODWORD(v9) = sub_1DD2D1A18(a2, (void *)(v8 + v9), a5, v15, 4, 1) + v9;
    while (v9 < v15);
    uint64_t v8 = *(void *)(a2 + 8);
    unsigned int v16 = v13 - v8;
    a7 = v111;
    a6 = v108;
  }
  *(_DWORD *)(a2 + 44) = v15;
  unsigned int v17 = *(_DWORD *)(a2 + 276);
  if (v17 >= 0xFFF) {
    uint64_t v18 = 4095;
  }
  else {
    uint64_t v18 = v17;
  }
  uint64_t v19 = *(void *)(a2 + 112);
  uint64_t v20 = (-1640531535 * *v13) >> -*(unsigned char *)(a2 + 264);
  unsigned int v21 = *(_DWORD *)(v19 + 4 * v20);
  uint64_t v110 = *(void *)(a2 + 128);
  int v22 = -1 << (*(_DWORD *)(a2 + 260) - 1);
  unint64_t v24 = *(unsigned int *)(a2 + 24);
  unsigned int v23 = *(_DWORD *)(a2 + 28);
  uint64_t v104 = *(void *)(a2 + 16);
  uint64_t v105 = v8;
  uint64_t v97 = (char *)(v104 + v24);
  int v96 = (void *)(v8 + v24);
  int v103 = ~v22;
  unsigned int v25 = v16 + v22 + 1;
  if (v16 < ~v22) {
    unsigned int v25 = 0;
  }
  unsigned int v102 = v25;
  unsigned int v26 = 1 << *(_DWORD *)(a2 + 256);
  BOOL v27 = v16 - v23 > v26;
  unsigned int v28 = v16 - v26;
  if (v27 && *(_DWORD *)(a2 + 40) == 0) {
    uint64_t v30 = v28;
  }
  else {
    uint64_t v30 = v23;
  }
  if (v30 <= 1) {
    int v31 = 1;
  }
  else {
    int v31 = v30;
  }
  unsigned int v106 = v31;
  v114[0] = 0;
  uint64_t v88 = a2;
  unint64_t v113 = (a8 - 1);
  unint64_t v98 = v24;
  uint64_t v85 = v20;
  uint64_t v86 = v19;
  int v84 = v22;
  int v83 = *(_DWORD *)(a2 + 268);
  uint64_t v10 = 0;
  if (a7 <= 0xFFFFFFFC)
  {
    unint64_t v32 = a7 + 3;
    unsigned int v33 = v16 - v24;
    unsigned int v34 = v16 - v30;
    unint64_t v35 = v13 + 1;
    unint64_t v36 = a5 - 7;
    uint64_t v37 = v13 + 3;
    uint64_t v38 = a7;
    uint64_t v39 = a1;
    unsigned int v99 = v16;
    unsigned int v93 = v16 - v24;
    unsigned int v91 = v16 - v30;
    while (1)
    {
      if (v38 == 3) {
        unsigned int v40 = *a6 - 1;
      }
      else {
        unsigned int v40 = a6[v38];
      }
      unsigned int v41 = v16 - v40;
      if (v40 - 1 >= v33)
      {
        if (v40 - 1 < v34 && v24 + ~v41 >= 3)
        {
          uint64_t v48 = v104 + v41;
          if (*v13 == *(_DWORD *)v48)
          {
            uint64_t v49 = v18;
            uint64_t v50 = v39;
            uint64_t v51 = v30;
            int v52 = sub_1DD2A6010(v35, (char *)(v48 + 4), a5, v97, v96);
            unint64_t v36 = a5 - 7;
            unint64_t v35 = v13 + 1;
            unsigned int v34 = v91;
            unsigned int v33 = v93;
            uint64_t v30 = v51;
            uint64_t v39 = v50;
            uint64_t v18 = v49;
            a6 = v108;
            a7 = v111;
            unint64_t v24 = v98;
            unsigned int v53 = v52 + 4;
            unsigned int v16 = v99;
            goto LABEL_54;
          }
        }
LABEL_41:
        unsigned int v53 = 0;
        goto LABEL_54;
      }
      if (v41 < v30 || *v13 != *(_DWORD *)((char *)v13 - v40)) {
        goto LABEL_41;
      }
      uint64_t v43 = -(uint64_t)v40;
      uint64_t v44 = (void *)((char *)v35 - v40);
      if (v36 <= (unint64_t)v35) {
        break;
      }
      unint64_t v45 = *v35 ^ *v44;
      if (!v45)
      {
        uint64_t v55 = 0;
        while (1)
        {
          uint64_t v46 = &v37[v55];
          if ((unint64_t)&v37[v55] >= v36) {
            break;
          }
          uint64_t v56 = *(void *)((char *)v37 + v43 + v55 * 4);
          v55 += 2;
          unint64_t v57 = *v46 ^ v56;
          if (v57)
          {
            uint64_t v46 = (void *)(v55 * 4 + (__clz(__rbit64(v57)) >> 3));
            goto LABEL_53;
          }
        }
        uint64_t v44 = (void *)((char *)v46 + v43);
        goto LABEL_43;
      }
      uint64_t v46 = (void *)(__clz(__rbit64(v45)) >> 3);
LABEL_53:
      unsigned int v53 = v46 + 4;
LABEL_54:
      if (v113 < v53)
      {
        unint64_t v54 = (_DWORD *)(v39 + 8 * v10);
        *unint64_t v54 = v38 - a7 + 1;
        v54[1] = v53;
        uint64_t v10 = (v10 + 1);
        if (v53 > v18) {
          return v10;
        }
        unint64_t v113 = v53;
        if ((_DWORD *)((char *)v13 + v53) == (_DWORD *)a5) {
          return v10;
        }
      }
      if (++v38 >= v32) {
        goto LABEL_65;
      }
    }
    uint64_t v46 = v35;
LABEL_43:
    if ((unint64_t)v46 < a5 - 3 && *(_DWORD *)v44 == *(_DWORD *)v46)
    {
      uint64_t v46 = (void *)((char *)v46 + 4);
      uint64_t v44 = (void *)((char *)v44 + 4);
    }
    if ((unint64_t)v46 < a5 - 1 && *(unsigned __int16 *)v44 == *(unsigned __int16 *)v46)
    {
      uint64_t v46 = (void *)((char *)v46 + 2);
      uint64_t v44 = (void *)((char *)v44 + 2);
    }
    if ((unint64_t)v46 < a5 && *(unsigned __int8 *)v44 == *(unsigned __int8 *)v46) {
      LODWORD(v46) = v46 + 1;
    }
    LODWORD(v46) = v46 - v35;
    goto LABEL_53;
  }
  uint64_t v39 = a1;
LABEL_65:
  int v109 = (unsigned int *)(v110 + 8 * (v16 & ~v84));
  unint64_t v107 = v109 + 1;
  uint64_t v58 = v16 + 9;
  *(_DWORD *)(v86 + 4 * v85) = v16;
  if (v21 < v106) {
    goto LABEL_66;
  }
  unint64_t v60 = 0;
  unint64_t v61 = 0;
  int v62 = 1 << v83;
  unint64_t v63 = a5 - 7;
  unint64_t v90 = a5 - 1;
  unint64_t v92 = a5 - 3;
  unsigned int v94 = v16 + 3;
  uint64_t v89 = v13 + 2;
  uint64_t v87 = v105 + 8;
  unsigned int v100 = v13;
  unint64_t v101 = a5;
  while (1)
  {
    if (v61 >= v60) {
      unint64_t v64 = v60;
    }
    else {
      unint64_t v64 = v61;
    }
    unint64_t v65 = (char *)v13 + v64;
    int v112 = v62;
    if (v64 + v21 >= v24)
    {
      uint64_t v71 = v105 + v21;
      unint64_t v72 = (void *)(v71 + v64);
      if (v63 <= (unint64_t)v65)
      {
        unint64_t v75 = (_DWORD *)((char *)v13 + v64);
      }
      else
      {
        unint64_t v73 = *(void *)v65 ^ *v72;
        if (v73)
        {
          unint64_t v74 = __clz(__rbit64(v73)) >> 3;
LABEL_91:
          unint64_t v70 = v74 + v64;
          goto LABEL_92;
        }
        uint64_t v78 = 0;
        uint64_t v79 = (char *)v89 + v64;
        while (1)
        {
          unsigned int v80 = &v79[v78];
          if ((unint64_t)&v79[v78] >= v63) {
            break;
          }
          uint64_t v81 = *(void *)(v87 + v64 + v21 + v78);
          v78 += 8;
          unint64_t v82 = *(void *)v80 ^ v81;
          if (v82)
          {
            unint64_t v74 = v78 + (__clz(__rbit64(v82)) >> 3);
            goto LABEL_91;
          }
        }
        unint64_t v75 = (_DWORD *)((char *)v89 + v64 + v78);
        unint64_t v72 = (void *)(v87 + v64 + v21 + v78);
      }
      if ((unint64_t)v75 < v92 && *(_DWORD *)v72 == *v75)
      {
        ++v75;
        unint64_t v72 = (void *)((char *)v72 + 4);
      }
      if ((unint64_t)v75 < v90 && *(unsigned __int16 *)v72 == *(unsigned __int16 *)v75)
      {
        unint64_t v75 = (_DWORD *)((char *)v75 + 2);
        unint64_t v72 = (void *)((char *)v72 + 2);
      }
      if ((unint64_t)v75 < a5 && *(unsigned __int8 *)v72 == *(unsigned __int8 *)v75) {
        unint64_t v75 = (_DWORD *)((char *)v75 + 1);
      }
      unint64_t v74 = (char *)v75 - v65;
      goto LABEL_91;
    }
    uint64_t v66 = v58;
    unint64_t v67 = a5;
    unint64_t v68 = v63;
    unint64_t v69 = sub_1DD2A6010(v65, (char *)(v104 + v21 + v64), v67, v97, v96);
    uint64_t v58 = v66;
    unint64_t v63 = v68;
    unint64_t v24 = v98;
    unint64_t v70 = v69 + v64;
    uint64_t v71 = v69 + v64 + v21 >= v98 ? v105 + v21 : v104 + v21;
    uint64_t v39 = a1;
LABEL_92:
    if (v70 <= v113)
    {
      unint64_t v13 = v100;
      a5 = v101;
    }
    else
    {
      if (v70 <= v58 - v21) {
        uint64_t v58 = v58;
      }
      else {
        uint64_t v58 = v21 + v70;
      }
      uint64_t v76 = (_DWORD *)(v39 + 8 * v10);
      _DWORD *v76 = v94 - v21;
      v76[1] = v70;
      uint64_t v10 = (v10 + 1);
      unint64_t v13 = v100;
      a5 = v101;
      if (v70 > 0x1000) {
        goto LABEL_66;
      }
      unint64_t v113 = v70;
      if ((_DWORD *)((char *)v100 + v70) == (_DWORD *)v101) {
        goto LABEL_66;
      }
    }
    unint64_t v77 = (unsigned int *)(v110 + 8 * (v21 & v103));
    if (*(unsigned __int8 *)(v71 + v70) >= *((unsigned __int8 *)v13 + v70)) {
      break;
    }
    *int v109 = v21;
    if (v21 <= v102)
    {
      int v109 = v114;
      goto LABEL_66;
    }
    ++v77;
    unint64_t v61 = v70;
    int v109 = v77;
LABEL_105:
    int v62 = v112 - 1;
    if (v112 != 1)
    {
      unsigned int v21 = *v77;
      if (*v77 >= v106) {
        continue;
      }
    }
    goto LABEL_66;
  }
  *unint64_t v107 = v21;
  if (v21 > v102)
  {
    unint64_t v60 = v70;
    unint64_t v107 = (unsigned int *)(v110 + 8 * (v21 & v103));
    goto LABEL_105;
  }
  unint64_t v107 = v114;
LABEL_66:
  *unint64_t v107 = 0;
  *int v109 = 0;
  *(_DWORD *)(v88 + 44) = v58 - 8;
  return v10;
}

uint64_t sub_1DD2D4E54(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unint64_t a5, _DWORD *a6, unsigned int a7, int a8)
{
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v9 = *(unsigned int *)(a2 + 44);
  if (v8 + v9 > (unint64_t)a4) {
    return 0;
  }
  unint64_t v13 = a4;
  unsigned int v15 = a4 - v8;
  unsigned int v16 = a4 - v8;
  unsigned int v111 = a7;
  unint64_t v108 = a6;
  if (v9 < (int)a4 - (int)v8)
  {
    do
      LODWORD(v9) = sub_1DD2D1A18(a2, (void *)(v8 + v9), a5, v15, 5, 1) + v9;
    while (v9 < v15);
    uint64_t v8 = *(void *)(a2 + 8);
    unsigned int v16 = v13 - v8;
    a7 = v111;
    a6 = v108;
  }
  *(_DWORD *)(a2 + 44) = v15;
  unsigned int v17 = *(_DWORD *)(a2 + 276);
  if (v17 >= 0xFFF) {
    uint64_t v18 = 4095;
  }
  else {
    uint64_t v18 = v17;
  }
  uint64_t v19 = *(void *)(a2 + 112);
  unint64_t v20 = (0xCF1BBCDCBB000000 * *v13) >> -*(unsigned char *)(a2 + 264);
  unsigned int v21 = *(_DWORD *)(v19 + 4 * v20);
  uint64_t v110 = *(void *)(a2 + 128);
  int v22 = -1 << (*(_DWORD *)(a2 + 260) - 1);
  unint64_t v24 = *(unsigned int *)(a2 + 24);
  unsigned int v23 = *(_DWORD *)(a2 + 28);
  uint64_t v104 = *(void *)(a2 + 16);
  uint64_t v105 = v8;
  uint64_t v97 = (char *)(v104 + v24);
  int v96 = (void *)(v8 + v24);
  int v103 = ~v22;
  unsigned int v25 = v16 + v22 + 1;
  if (v16 < ~v22) {
    unsigned int v25 = 0;
  }
  unsigned int v102 = v25;
  unsigned int v26 = 1 << *(_DWORD *)(a2 + 256);
  BOOL v27 = v16 - v23 > v26;
  unsigned int v28 = v16 - v26;
  if (v27 && *(_DWORD *)(a2 + 40) == 0) {
    uint64_t v30 = v28;
  }
  else {
    uint64_t v30 = v23;
  }
  if (v30 <= 1) {
    int v31 = 1;
  }
  else {
    int v31 = v30;
  }
  unsigned int v106 = v31;
  v114[0] = 0;
  uint64_t v88 = a2;
  unint64_t v113 = (a8 - 1);
  unint64_t v98 = v24;
  unint64_t v85 = v20;
  uint64_t v86 = v19;
  int v84 = v22;
  int v83 = *(_DWORD *)(a2 + 268);
  uint64_t v10 = 0;
  if (a7 <= 0xFFFFFFFC)
  {
    unint64_t v32 = a7 + 3;
    unsigned int v33 = v16 - v24;
    unsigned int v34 = v16 - v30;
    unint64_t v35 = (char *)v13 + 4;
    unint64_t v36 = a5 - 7;
    uint64_t v37 = (char *)v13 + 12;
    uint64_t v38 = a7;
    uint64_t v39 = a1;
    unsigned int v99 = v16;
    unsigned int v93 = v16 - v24;
    unsigned int v91 = v16 - v30;
    while (1)
    {
      if (v38 == 3) {
        unsigned int v40 = *a6 - 1;
      }
      else {
        unsigned int v40 = a6[v38];
      }
      unsigned int v41 = v16 - v40;
      if (v40 - 1 >= v33)
      {
        if (v40 - 1 < v34 && v24 + ~v41 >= 3)
        {
          uint64_t v48 = v104 + v41;
          if (*(_DWORD *)v13 == *(_DWORD *)v48)
          {
            uint64_t v49 = v18;
            uint64_t v50 = v39;
            uint64_t v51 = v30;
            int v52 = sub_1DD2A6010(v35, (char *)(v48 + 4), a5, v97, v96);
            unint64_t v36 = a5 - 7;
            unint64_t v35 = (char *)v13 + 4;
            unsigned int v34 = v91;
            unsigned int v33 = v93;
            uint64_t v30 = v51;
            uint64_t v39 = v50;
            uint64_t v18 = v49;
            a6 = v108;
            a7 = v111;
            unint64_t v24 = v98;
            unsigned int v53 = v52 + 4;
            unsigned int v16 = v99;
            goto LABEL_54;
          }
        }
LABEL_41:
        unsigned int v53 = 0;
        goto LABEL_54;
      }
      if (v41 < v30 || *(_DWORD *)v13 != *(_DWORD *)((char *)v13 - v40)) {
        goto LABEL_41;
      }
      uint64_t v43 = -(uint64_t)v40;
      uint64_t v44 = &v35[-v40];
      if (v36 <= (unint64_t)v35) {
        break;
      }
      unint64_t v45 = *(void *)v35 ^ *(void *)v44;
      if (!v45)
      {
        uint64_t v55 = 0;
        while (1)
        {
          uint64_t v46 = &v37[v55];
          if ((unint64_t)&v37[v55] >= v36) {
            break;
          }
          uint64_t v56 = *(void *)&v37[v43 + v55];
          v55 += 8;
          unint64_t v57 = *(void *)v46 ^ v56;
          if (v57)
          {
            uint64_t v46 = (char *)(v55 + (__clz(__rbit64(v57)) >> 3));
            goto LABEL_53;
          }
        }
        uint64_t v44 = &v46[v43];
        goto LABEL_43;
      }
      uint64_t v46 = (char *)(__clz(__rbit64(v45)) >> 3);
LABEL_53:
      unsigned int v53 = v46 + 4;
LABEL_54:
      if (v113 < v53)
      {
        unint64_t v54 = (_DWORD *)(v39 + 8 * v10);
        *unint64_t v54 = v38 - a7 + 1;
        v54[1] = v53;
        uint64_t v10 = (v10 + 1);
        if (v53 > v18) {
          return v10;
        }
        unint64_t v113 = v53;
        if ((void *)((char *)v13 + v53) == (void *)a5) {
          return v10;
        }
      }
      if (++v38 >= v32) {
        goto LABEL_65;
      }
    }
    uint64_t v46 = v35;
LABEL_43:
    if ((unint64_t)v46 < a5 - 3 && *(_DWORD *)v44 == *(_DWORD *)v46)
    {
      v46 += 4;
      v44 += 4;
    }
    if ((unint64_t)v46 < a5 - 1 && *(unsigned __int16 *)v44 == *(unsigned __int16 *)v46)
    {
      v46 += 2;
      v44 += 2;
    }
    if ((unint64_t)v46 < a5 && *v44 == *v46) {
      LODWORD(v46) = v46 + 1;
    }
    LODWORD(v46) = v46 - v35;
    goto LABEL_53;
  }
  uint64_t v39 = a1;
LABEL_65:
  int v109 = (unsigned int *)(v110 + 8 * (v16 & ~v84));
  unint64_t v107 = v109 + 1;
  uint64_t v58 = v16 + 9;
  *(_DWORD *)(v86 + 4 * v85) = v16;
  if (v21 < v106) {
    goto LABEL_66;
  }
  unint64_t v60 = 0;
  unint64_t v61 = 0;
  int v62 = 1 << v83;
  unint64_t v63 = a5 - 7;
  unint64_t v90 = a5 - 1;
  unint64_t v92 = a5 - 3;
  unsigned int v94 = v16 + 3;
  uint64_t v89 = v13 + 1;
  uint64_t v87 = v105 + 8;
  unsigned int v100 = v13;
  unint64_t v101 = a5;
  while (1)
  {
    if (v61 >= v60) {
      unint64_t v64 = v60;
    }
    else {
      unint64_t v64 = v61;
    }
    unint64_t v65 = (char *)v13 + v64;
    int v112 = v62;
    if (v64 + v21 >= v24)
    {
      uint64_t v71 = v105 + v21;
      unint64_t v72 = (void *)(v71 + v64);
      if (v63 <= (unint64_t)v65)
      {
        unint64_t v75 = (_DWORD *)((char *)v13 + v64);
      }
      else
      {
        unint64_t v73 = *(void *)v65 ^ *v72;
        if (v73)
        {
          unint64_t v74 = __clz(__rbit64(v73)) >> 3;
LABEL_91:
          unint64_t v70 = v74 + v64;
          goto LABEL_92;
        }
        uint64_t v78 = 0;
        uint64_t v79 = (char *)v89 + v64;
        while (1)
        {
          unsigned int v80 = &v79[v78];
          if ((unint64_t)&v79[v78] >= v63) {
            break;
          }
          uint64_t v81 = *(void *)(v87 + v64 + v21 + v78);
          v78 += 8;
          unint64_t v82 = *(void *)v80 ^ v81;
          if (v82)
          {
            unint64_t v74 = v78 + (__clz(__rbit64(v82)) >> 3);
            goto LABEL_91;
          }
        }
        unint64_t v75 = (_DWORD *)((char *)v89 + v64 + v78);
        unint64_t v72 = (void *)(v87 + v64 + v21 + v78);
      }
      if ((unint64_t)v75 < v92 && *(_DWORD *)v72 == *v75)
      {
        ++v75;
        unint64_t v72 = (void *)((char *)v72 + 4);
      }
      if ((unint64_t)v75 < v90 && *(unsigned __int16 *)v72 == *(unsigned __int16 *)v75)
      {
        unint64_t v75 = (_DWORD *)((char *)v75 + 2);
        unint64_t v72 = (void *)((char *)v72 + 2);
      }
      if ((unint64_t)v75 < a5 && *(unsigned __int8 *)v72 == *(unsigned __int8 *)v75) {
        unint64_t v75 = (_DWORD *)((char *)v75 + 1);
      }
      unint64_t v74 = (char *)v75 - v65;
      goto LABEL_91;
    }
    uint64_t v66 = v58;
    unint64_t v67 = a5;
    unint64_t v68 = v63;
    unint64_t v69 = sub_1DD2A6010(v65, (char *)(v104 + v21 + v64), v67, v97, v96);
    uint64_t v58 = v66;
    unint64_t v63 = v68;
    unint64_t v24 = v98;
    unint64_t v70 = v69 + v64;
    uint64_t v71 = v69 + v64 + v21 >= v98 ? v105 + v21 : v104 + v21;
    uint64_t v39 = a1;
LABEL_92:
    if (v70 <= v113)
    {
      unint64_t v13 = v100;
      a5 = v101;
    }
    else
    {
      if (v70 <= v58 - v21) {
        uint64_t v58 = v58;
      }
      else {
        uint64_t v58 = v21 + v70;
      }
      uint64_t v76 = (_DWORD *)(v39 + 8 * v10);
      _DWORD *v76 = v94 - v21;
      v76[1] = v70;
      uint64_t v10 = (v10 + 1);
      unint64_t v13 = v100;
      a5 = v101;
      if (v70 > 0x1000) {
        goto LABEL_66;
      }
      unint64_t v113 = v70;
      if ((void *)((char *)v100 + v70) == (void *)v101) {
        goto LABEL_66;
      }
    }
    unint64_t v77 = (unsigned int *)(v110 + 8 * (v21 & v103));
    if (*(unsigned __int8 *)(v71 + v70) >= *((unsigned __int8 *)v13 + v70)) {
      break;
    }
    *int v109 = v21;
    if (v21 <= v102)
    {
      int v109 = v114;
      goto LABEL_66;
    }
    ++v77;
    unint64_t v61 = v70;
    int v109 = v77;
LABEL_105:
    int v62 = v112 - 1;
    if (v112 != 1)
    {
      unsigned int v21 = *v77;
      if (*v77 >= v106) {
        continue;
      }
    }
    goto LABEL_66;
  }
  *unint64_t v107 = v21;
  if (v21 > v102)
  {
    unint64_t v60 = v70;
    unint64_t v107 = (unsigned int *)(v110 + 8 * (v21 & v103));
    goto LABEL_105;
  }
  unint64_t v107 = v114;
LABEL_66:
  *unint64_t v107 = 0;
  *int v109 = 0;
  *(_DWORD *)(v88 + 44) = v58 - 8;
  return v10;
}

uint64_t sub_1DD2D554C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unint64_t a5, _DWORD *a6, unsigned int a7, int a8)
{
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v9 = *(unsigned int *)(a2 + 44);
  if (v8 + v9 > (unint64_t)a4) {
    return 0;
  }
  unint64_t v13 = a4;
  unsigned int v15 = a4 - v8;
  unsigned int v16 = a4 - v8;
  unsigned int v111 = a7;
  unint64_t v108 = a6;
  if (v9 < (int)a4 - (int)v8)
  {
    do
      LODWORD(v9) = sub_1DD2D1A18(a2, (void *)(v8 + v9), a5, v15, 6, 1) + v9;
    while (v9 < v15);
    uint64_t v8 = *(void *)(a2 + 8);
    unsigned int v16 = v13 - v8;
    a7 = v111;
    a6 = v108;
  }
  *(_DWORD *)(a2 + 44) = v15;
  unsigned int v17 = *(_DWORD *)(a2 + 276);
  if (v17 >= 0xFFF) {
    uint64_t v18 = 4095;
  }
  else {
    uint64_t v18 = v17;
  }
  uint64_t v19 = *(void *)(a2 + 112);
  unint64_t v20 = (0xCF1BBCDCBF9B0000 * *v13) >> -*(unsigned char *)(a2 + 264);
  unsigned int v21 = *(_DWORD *)(v19 + 4 * v20);
  uint64_t v110 = *(void *)(a2 + 128);
  int v22 = -1 << (*(_DWORD *)(a2 + 260) - 1);
  unint64_t v24 = *(unsigned int *)(a2 + 24);
  unsigned int v23 = *(_DWORD *)(a2 + 28);
  uint64_t v104 = *(void *)(a2 + 16);
  uint64_t v105 = v8;
  uint64_t v97 = (char *)(v104 + v24);
  int v96 = (void *)(v8 + v24);
  int v103 = ~v22;
  unsigned int v25 = v16 + v22 + 1;
  if (v16 < ~v22) {
    unsigned int v25 = 0;
  }
  unsigned int v102 = v25;
  unsigned int v26 = 1 << *(_DWORD *)(a2 + 256);
  BOOL v27 = v16 - v23 > v26;
  unsigned int v28 = v16 - v26;
  if (v27 && *(_DWORD *)(a2 + 40) == 0) {
    uint64_t v30 = v28;
  }
  else {
    uint64_t v30 = v23;
  }
  if (v30 <= 1) {
    int v31 = 1;
  }
  else {
    int v31 = v30;
  }
  unsigned int v106 = v31;
  v114[0] = 0;
  uint64_t v88 = a2;
  unint64_t v113 = (a8 - 1);
  unint64_t v98 = v24;
  unint64_t v85 = v20;
  uint64_t v86 = v19;
  int v84 = v22;
  int v83 = *(_DWORD *)(a2 + 268);
  uint64_t v10 = 0;
  if (a7 <= 0xFFFFFFFC)
  {
    unint64_t v32 = a7 + 3;
    unsigned int v33 = v16 - v24;
    unsigned int v34 = v16 - v30;
    unint64_t v35 = (char *)v13 + 4;
    unint64_t v36 = a5 - 7;
    uint64_t v37 = (char *)v13 + 12;
    uint64_t v38 = a7;
    uint64_t v39 = a1;
    unsigned int v99 = v16;
    unsigned int v93 = v16 - v24;
    unsigned int v91 = v16 - v30;
    while (1)
    {
      if (v38 == 3) {
        unsigned int v40 = *a6 - 1;
      }
      else {
        unsigned int v40 = a6[v38];
      }
      unsigned int v41 = v16 - v40;
      if (v40 - 1 >= v33)
      {
        if (v40 - 1 < v34 && v24 + ~v41 >= 3)
        {
          uint64_t v48 = v104 + v41;
          if (*(_DWORD *)v13 == *(_DWORD *)v48)
          {
            uint64_t v49 = v18;
            uint64_t v50 = v39;
            uint64_t v51 = v30;
            int v52 = sub_1DD2A6010(v35, (char *)(v48 + 4), a5, v97, v96);
            unint64_t v36 = a5 - 7;
            unint64_t v35 = (char *)v13 + 4;
            unsigned int v34 = v91;
            unsigned int v33 = v93;
            uint64_t v30 = v51;
            uint64_t v39 = v50;
            uint64_t v18 = v49;
            a6 = v108;
            a7 = v111;
            unint64_t v24 = v98;
            unsigned int v53 = v52 + 4;
            unsigned int v16 = v99;
            goto LABEL_54;
          }
        }
LABEL_41:
        unsigned int v53 = 0;
        goto LABEL_54;
      }
      if (v41 < v30 || *(_DWORD *)v13 != *(_DWORD *)((char *)v13 - v40)) {
        goto LABEL_41;
      }
      uint64_t v43 = -(uint64_t)v40;
      uint64_t v44 = &v35[-v40];
      if (v36 <= (unint64_t)v35) {
        break;
      }
      unint64_t v45 = *(void *)v35 ^ *(void *)v44;
      if (!v45)
      {
        uint64_t v55 = 0;
        while (1)
        {
          uint64_t v46 = &v37[v55];
          if ((unint64_t)&v37[v55] >= v36) {
            break;
          }
          uint64_t v56 = *(void *)&v37[v43 + v55];
          v55 += 8;
          unint64_t v57 = *(void *)v46 ^ v56;
          if (v57)
          {
            uint64_t v46 = (char *)(v55 + (__clz(__rbit64(v57)) >> 3));
            goto LABEL_53;
          }
        }
        uint64_t v44 = &v46[v43];
        goto LABEL_43;
      }
      uint64_t v46 = (char *)(__clz(__rbit64(v45)) >> 3);
LABEL_53:
      unsigned int v53 = v46 + 4;
LABEL_54:
      if (v113 < v53)
      {
        unint64_t v54 = (_DWORD *)(v39 + 8 * v10);
        *unint64_t v54 = v38 - a7 + 1;
        v54[1] = v53;
        uint64_t v10 = (v10 + 1);
        if (v53 > v18) {
          return v10;
        }
        unint64_t v113 = v53;
        if ((void *)((char *)v13 + v53) == (void *)a5) {
          return v10;
        }
      }
      if (++v38 >= v32) {
        goto LABEL_65;
      }
    }
    uint64_t v46 = v35;
LABEL_43:
    if ((unint64_t)v46 < a5 - 3 && *(_DWORD *)v44 == *(_DWORD *)v46)
    {
      v46 += 4;
      v44 += 4;
    }
    if ((unint64_t)v46 < a5 - 1 && *(unsigned __int16 *)v44 == *(unsigned __int16 *)v46)
    {
      v46 += 2;
      v44 += 2;
    }
    if ((unint64_t)v46 < a5 && *v44 == *v46) {
      LODWORD(v46) = v46 + 1;
    }
    LODWORD(v46) = v46 - v35;
    goto LABEL_53;
  }
  uint64_t v39 = a1;
LABEL_65:
  int v109 = (unsigned int *)(v110 + 8 * (v16 & ~v84));
  unint64_t v107 = v109 + 1;
  uint64_t v58 = v16 + 9;
  *(_DWORD *)(v86 + 4 * v85) = v16;
  if (v21 < v106) {
    goto LABEL_66;
  }
  unint64_t v60 = 0;
  unint64_t v61 = 0;
  int v62 = 1 << v83;
  unint64_t v63 = a5 - 7;
  unint64_t v90 = a5 - 1;
  unint64_t v92 = a5 - 3;
  unsigned int v94 = v16 + 3;
  uint64_t v89 = v13 + 1;
  uint64_t v87 = v105 + 8;
  unsigned int v100 = v13;
  unint64_t v101 = a5;
  while (1)
  {
    if (v61 >= v60) {
      unint64_t v64 = v60;
    }
    else {
      unint64_t v64 = v61;
    }
    unint64_t v65 = (char *)v13 + v64;
    int v112 = v62;
    if (v64 + v21 >= v24)
    {
      uint64_t v71 = v105 + v21;
      unint64_t v72 = (void *)(v71 + v64);
      if (v63 <= (unint64_t)v65)
      {
        unint64_t v75 = (_DWORD *)((char *)v13 + v64);
      }
      else
      {
        unint64_t v73 = *(void *)v65 ^ *v72;
        if (v73)
        {
          unint64_t v74 = __clz(__rbit64(v73)) >> 3;
LABEL_91:
          unint64_t v70 = v74 + v64;
          goto LABEL_92;
        }
        uint64_t v78 = 0;
        uint64_t v79 = (char *)v89 + v64;
        while (1)
        {
          unsigned int v80 = &v79[v78];
          if ((unint64_t)&v79[v78] >= v63) {
            break;
          }
          uint64_t v81 = *(void *)(v87 + v64 + v21 + v78);
          v78 += 8;
          unint64_t v82 = *(void *)v80 ^ v81;
          if (v82)
          {
            unint64_t v74 = v78 + (__clz(__rbit64(v82)) >> 3);
            goto LABEL_91;
          }
        }
        unint64_t v75 = (_DWORD *)((char *)v89 + v64 + v78);
        unint64_t v72 = (void *)(v87 + v64 + v21 + v78);
      }
      if ((unint64_t)v75 < v92 && *(_DWORD *)v72 == *v75)
      {
        ++v75;
        unint64_t v72 = (void *)((char *)v72 + 4);
      }
      if ((unint64_t)v75 < v90 && *(unsigned __int16 *)v72 == *(unsigned __int16 *)v75)
      {
        unint64_t v75 = (_DWORD *)((char *)v75 + 2);
        unint64_t v72 = (void *)((char *)v72 + 2);
      }
      if ((unint64_t)v75 < a5 && *(unsigned __int8 *)v72 == *(unsigned __int8 *)v75) {
        unint64_t v75 = (_DWORD *)((char *)v75 + 1);
      }
      unint64_t v74 = (char *)v75 - v65;
      goto LABEL_91;
    }
    uint64_t v66 = v58;
    unint64_t v67 = a5;
    unint64_t v68 = v63;
    unint64_t v69 = sub_1DD2A6010(v65, (char *)(v104 + v21 + v64), v67, v97, v96);
    uint64_t v58 = v66;
    unint64_t v63 = v68;
    unint64_t v24 = v98;
    unint64_t v70 = v69 + v64;
    uint64_t v71 = v69 + v64 + v21 >= v98 ? v105 + v21 : v104 + v21;
    uint64_t v39 = a1;
LABEL_92:
    if (v70 <= v113)
    {
      unint64_t v13 = v100;
      a5 = v101;
    }
    else
    {
      if (v70 <= v58 - v21) {
        uint64_t v58 = v58;
      }
      else {
        uint64_t v58 = v21 + v70;
      }
      uint64_t v76 = (_DWORD *)(v39 + 8 * v10);
      _DWORD *v76 = v94 - v21;
      v76[1] = v70;
      uint64_t v10 = (v10 + 1);
      unint64_t v13 = v100;
      a5 = v101;
      if (v70 > 0x1000) {
        goto LABEL_66;
      }
      unint64_t v113 = v70;
      if ((void *)((char *)v100 + v70) == (void *)v101) {
        goto LABEL_66;
      }
    }
    unint64_t v77 = (unsigned int *)(v110 + 8 * (v21 & v103));
    if (*(unsigned __int8 *)(v71 + v70) >= *((unsigned __int8 *)v13 + v70)) {
      break;
    }
    *int v109 = v21;
    if (v21 <= v102)
    {
      int v109 = v114;
      goto LABEL_66;
    }
    ++v77;
    unint64_t v61 = v70;
    int v109 = v77;
LABEL_105:
    int v62 = v112 - 1;
    if (v112 != 1)
    {
      unsigned int v21 = *v77;
      if (*v77 >= v106) {
        continue;
      }
    }
    goto LABEL_66;
  }
  *unint64_t v107 = v21;
  if (v21 > v102)
  {
    unint64_t v60 = v70;
    unint64_t v107 = (unsigned int *)(v110 + 8 * (v21 & v103));
    goto LABEL_105;
  }
  unint64_t v107 = v114;
LABEL_66:
  *unint64_t v107 = 0;
  *int v109 = 0;
  *(_DWORD *)(v88 + 44) = v58 - 8;
  return v10;
}

uint64_t sub_1DD2D5C44(_DWORD *a1, uint64_t a2, _DWORD *a3, int *a4, unint64_t a5, _DWORD *a6, unsigned int a7, int a8)
{
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v9 = *(unsigned int *)(a2 + 44);
  if (v8 + v9 > (unint64_t)a4) {
    return 0;
  }
  unint64_t v13 = a4;
  unsigned int v16 = a1;
  unsigned int v17 = a4 - v8;
  unsigned int v18 = a4 - v8;
  unsigned int v146 = a7;
  uint64_t v145 = a6;
  if (v9 < (int)a4 - (int)v8)
  {
    do
      LODWORD(v9) = sub_1DD2D1A18(a2, (void *)(v8 + v9), a5, v17, 3, 0) + v9;
    while (v9 < v17);
    uint64_t v8 = *(void *)(a2 + 8);
    unsigned int v18 = v13 - v8;
    unsigned int v16 = a1;
    a7 = v146;
    a6 = v145;
  }
  uint64_t v142 = v8;
  *(_DWORD *)(a2 + 44) = v17;
  unsigned int v19 = *(_DWORD *)(a2 + 276);
  uint64_t v20 = *(void *)(a2 + 112);
  uint64_t v21 = (-1640531535 * *v13) >> -*(unsigned char *)(a2 + 264);
  unsigned int v22 = *(_DWORD *)(v20 + 4 * v21);
  if (v19 >= 0xFFF) {
    unsigned int v19 = 4095;
  }
  unsigned int v147 = v19;
  uint64_t v140 = *(void *)(a2 + 128);
  int v23 = -1 << (*(_DWORD *)(a2 + 260) - 1);
  int v144 = ~v23;
  uint64_t v24 = *(unsigned int *)(a2 + 24);
  unsigned int v25 = *(_DWORD *)(a2 + 28);
  unsigned int v159 = (void *)(v8 + v24);
  unsigned int v26 = v18 + v23 + 1;
  if (v18 < ~v23) {
    unsigned int v26 = 0;
  }
  unsigned int v152 = v26;
  unsigned int v27 = 1 << *(_DWORD *)(a2 + 256);
  if (v18 - v25 > v27 && *(_DWORD *)(a2 + 40) == 0) {
    uint64_t v29 = v18 - v27;
  }
  else {
    uint64_t v29 = v25;
  }
  if (v29 <= 1) {
    unsigned int v30 = 1;
  }
  else {
    unsigned int v30 = v29;
  }
  v162[0] = 0;
  uint64_t v31 = *(void *)(a2 + 248);
  uint64_t v32 = *(void *)(v31 + 8);
  int v158 = *(char **)v31;
  int v33 = *(_DWORD *)(v31 + 28);
  unsigned int v34 = v29 - (*(void *)v31 - v32);
  uint64_t v135 = v31;
  unsigned int v35 = *(_DWORD *)v31 - v32 + (-1 << (*(_DWORD *)(v31 + 260) - 1)) + 1;
  if (*(void *)v31 - v32 - v33 <= ~(-1 << (*(_DWORD *)(v31 + 260) - 1))) {
    unsigned int v35 = *(_DWORD *)(v31 + 28);
  }
  int v153 = ~(-1 << (*(_DWORD *)(v31 + 260) - 1));
  unsigned int v154 = v35;
  unint64_t v36 = (a8 - 1);
  uint64_t v143 = a2;
  unint64_t v161 = a5;
  unsigned int v150 = v18;
  unsigned int v160 = v30;
  uint64_t v155 = *(void *)(v31 + 8);
  unsigned int v157 = *(_DWORD *)(v31 + 28);
  unsigned int v149 = v29 - (*(void *)v31 - v32);
  unsigned int v127 = *(_DWORD *)v31 - v32;
  uint64_t v128 = a3;
  char v134 = *(_DWORD *)(v31 + 264);
  uint64_t v138 = v21;
  uint64_t v139 = v20;
  int v137 = v23;
  char v136 = *(_DWORD *)(a2 + 268);
  uint64_t v10 = 0;
  if (a7 <= 0xFFFFFFFC)
  {
    unint64_t v37 = a7 + 3;
    unsigned int v38 = v18 - v24;
    uint64_t v39 = v18 - v33 - v34;
    unsigned int v40 = (void *)((char *)v13 + 3);
    unint64_t v41 = a5 - 7;
    unint64_t v42 = a5 - 3;
    unint64_t v43 = a5 - 1;
    uint64_t v44 = (char *)v13 + 11;
    uint64_t v45 = v32 - v34;
    uint64_t v46 = a7;
    unsigned int v47 = v147;
    unsigned int v133 = v22;
    unint64_t v132 = v37;
    unsigned int v131 = v18 - v24;
    unint64_t v129 = v41;
    unsigned int v130 = (void *)((char *)v13 + 3);
    while (1)
    {
      unsigned int v48 = v46 == 3 ? *a6 - 1 : a6[v46];
      unsigned int v49 = v18 - v48;
      if (v48 - 1 < v38) {
        break;
      }
      BOOL v55 = v48 - 1 < v39 && v24 + ~v49 >= 3;
      if (!v55 || (uint64_t v56 = v45 + v49, ((*(_DWORD *)v56 ^ *v13) & 0xFFFFFF) != 0))
      {
LABEL_41:
        unsigned int v57 = 0;
        goto LABEL_55;
      }
      uint64_t v58 = v40;
      uint64_t v59 = v24;
      uint64_t v60 = v29;
      uint64_t v61 = v39;
      unint64_t v62 = v42;
      unint64_t v141 = v36;
      unint64_t v63 = v13;
      unint64_t v64 = v44;
      uint64_t v65 = v45;
      int v66 = sub_1DD2A6010(v58, (char *)(v56 + 3), v161, v158, v159);
      unsigned int v38 = v131;
      uint64_t v45 = v65;
      uint64_t v44 = v64;
      unint64_t v13 = v63;
      unint64_t v36 = v141;
      unsigned int v22 = v133;
      unint64_t v42 = v62;
      a7 = v146;
      unsigned int v47 = v147;
      uint64_t v39 = v61;
      uint64_t v29 = v60;
      uint64_t v24 = v59;
      unint64_t v41 = v129;
      unsigned int v40 = v130;
      a6 = v145;
      unsigned int v30 = v160;
      unsigned int v18 = v150;
      unsigned int v16 = a1;
      unsigned int v57 = v66 + 3;
      unint64_t v37 = v132;
LABEL_55:
      if (v36 < v57)
      {
        unint64_t v67 = &v16[2 * v10];
        *unint64_t v67 = v46 - a7 + 1;
        v67[1] = v57;
        uint64_t v10 = (v10 + 1);
        if (v57 > v47) {
          return v10;
        }
        unint64_t v36 = v57;
        if ((int *)((char *)v13 + v57) == (int *)v161) {
          return v10;
        }
      }
      if (++v46 >= v37) {
        goto LABEL_65;
      }
    }
    if (v49 < v29 || ((*(int *)((char *)v13 - v48) ^ *v13) & 0xFFFFFF) != 0) {
      goto LABEL_41;
    }
    uint64_t v51 = -(uint64_t)v48;
    int v52 = (char *)v40 - v48;
    if (v41 <= (unint64_t)v40)
    {
      unint64_t v54 = (char *)v40;
    }
    else
    {
      unint64_t v53 = *v40 ^ *(void *)v52;
      if (v53)
      {
        unint64_t v54 = (char *)(__clz(__rbit64(v53)) >> 3);
LABEL_53:
        unsigned int v57 = v54 + 3;
        goto LABEL_55;
      }
      uint64_t v68 = 0;
      while (1)
      {
        unint64_t v54 = &v44[v68];
        if ((unint64_t)&v44[v68] >= v41) {
          break;
        }
        uint64_t v69 = *(void *)&v44[v51 + v68];
        v68 += 8;
        unint64_t v70 = *(void *)v54 ^ v69;
        if (v70)
        {
          unint64_t v54 = (char *)(v68 + (__clz(__rbit64(v70)) >> 3));
          goto LABEL_53;
        }
      }
      int v52 = &v54[v51];
    }
    if ((unint64_t)v54 < v42 && *(_DWORD *)v52 == *(_DWORD *)v54)
    {
      v54 += 4;
      v52 += 4;
    }
    if ((unint64_t)v54 < v43 && *(unsigned __int16 *)v52 == *(unsigned __int16 *)v54)
    {
      v54 += 2;
      v52 += 2;
    }
    if ((unint64_t)v54 < v161 && *v52 == *v54) {
      LODWORD(v54) = v54 + 1;
    }
    LODWORD(v54) = v54 - v40;
    goto LABEL_53;
  }
LABEL_65:
  if (v36 > 2)
  {
    unint64_t v73 = (int *)v161;
    uint64_t v74 = v142;
    uint64_t v75 = v140;
    unsigned int v76 = v152;
  }
  else
  {
    uint64_t v71 = v143;
    unsigned int v72 = sub_1DD2D7E48(v143, v128, v13);
    unsigned int v30 = v160;
    unint64_t v73 = (int *)v161;
    uint64_t v74 = v142;
    uint64_t v75 = v140;
    unsigned int v76 = v152;
    if (v72 < v160)
    {
      unsigned int v16 = a1;
      unsigned int v18 = v150;
    }
    else
    {
      unsigned int v18 = v150;
      unsigned int v16 = a1;
      if (!((v150 - v72) >> 18))
      {
        unint64_t v77 = (void *)(v142 + v72);
        if (v161 - 7 <= (unint64_t)v13)
        {
          unsigned int v80 = v13;
        }
        else
        {
          unint64_t v78 = *(void *)v13 ^ *v77;
          if (v78)
          {
            unint64_t v79 = __clz(__rbit64(v78)) >> 3;
            goto LABEL_84;
          }
          uint32x2_t v123 = v13 + 2;
          while (1)
          {
            uint64_t v124 = (void *)((char *)v123 + v78);
            if ((unint64_t)v123 + v78 >= v161 - 7) {
              break;
            }
            uint64_t v125 = *(void *)(v72 + v142 + 8 + v78);
            v78 += 8;
            unint64_t v126 = *v124 ^ v125;
            if (v126)
            {
              unint64_t v79 = v78 + (__clz(__rbit64(v126)) >> 3);
              goto LABEL_84;
            }
          }
          unsigned int v80 = (int *)((char *)v13 + v78 + 8);
          unint64_t v77 = (void *)(v72 + v142 + v78 + 8);
        }
        if ((unint64_t)v80 < v161 - 3 && *(_DWORD *)v77 == *v80)
        {
          ++v80;
          unint64_t v77 = (void *)((char *)v77 + 4);
        }
        if ((unint64_t)v80 < v161 - 1 && *(unsigned __int16 *)v77 == *(unsigned __int16 *)v80)
        {
          unsigned int v80 = (int *)((char *)v80 + 2);
          unint64_t v77 = (void *)((char *)v77 + 2);
        }
        if ((unint64_t)v80 < v161 && *(unsigned __int8 *)v77 == *(unsigned __int8 *)v80) {
          unsigned int v80 = (int *)((char *)v80 + 1);
        }
        unint64_t v79 = (char *)v80 - (char *)v13;
LABEL_84:
        if (v79 >= 3)
        {
          *a1 = v150 - v72 + 3;
          a1[1] = v79;
          if (v79 > v147 || (int *)((char *)v13 + v79) == (int *)v161)
          {
            unsigned int v82 = v150 + 1;
            uint64_t v10 = 1;
            goto LABEL_157;
          }
          uint64_t v10 = 1;
          unint64_t v36 = v79;
        }
      }
    }
  }
  int v83 = (unsigned int *)(v75 + 8 * (v18 & ~v137));
  unsigned int v84 = v18 + 9;
  int v85 = 1 << v136;
  *(_DWORD *)(v139 + 4 * v138) = v18;
  if (v22 < v30)
  {
    *(void *)int v83 = 0;
    goto LABEL_136;
  }
  unint64_t v86 = 0;
  unint64_t v87 = 0;
  uint64_t v88 = v83 + 1;
  uint64_t v89 = (char *)v73 - 7;
  unsigned int v90 = v18 + 3;
  unsigned int v91 = v13 + 2;
  uint64_t v92 = v74 + 8;
  int v93 = v144;
  while (1)
  {
    unint64_t v94 = v87 >= v86 ? v86 : v87;
    uint64_t v95 = v74 + v22;
    int v96 = (char *)v13 + v94;
    uint64_t v97 = (void *)(v95 + v94);
    if (v89 <= (char *)v13 + v94)
    {
      unsigned int v100 = (int *)((char *)v13 + v94);
    }
    else
    {
      unint64_t v98 = *(void *)v96 ^ *v97;
      if (v98)
      {
        unint64_t v99 = __clz(__rbit64(v98)) >> 3;
        goto LABEL_111;
      }
      uint64_t v105 = 0;
      unsigned int v106 = (char *)v91 + v94;
      while (1)
      {
        unint64_t v107 = &v106[v105];
        if (&v106[v105] >= v89) {
          break;
        }
        uint64_t v108 = *(void *)(v92 + v94 + v22 + v105);
        v105 += 8;
        unint64_t v109 = *(void *)v107 ^ v108;
        if (v109)
        {
          unint64_t v99 = v105 + (__clz(__rbit64(v109)) >> 3);
          int v93 = v144;
          unsigned int v76 = v152;
          unsigned int v30 = v160;
          goto LABEL_111;
        }
      }
      unsigned int v100 = (int *)((char *)v91 + v94 + v105);
      uint64_t v97 = (void *)(v92 + v94 + v22 + v105);
      int v93 = v144;
      unsigned int v76 = v152;
    }
    if (v100 < (int *)((char *)v73 - 3) && *(_DWORD *)v97 == *v100)
    {
      ++v100;
      uint64_t v97 = (void *)((char *)v97 + 4);
    }
    if (v100 < (int *)((char *)v73 - 1) && *(unsigned __int16 *)v97 == *(unsigned __int16 *)v100)
    {
      unsigned int v100 = (int *)((char *)v100 + 2);
      uint64_t v97 = (void *)((char *)v97 + 2);
    }
    if (v100 < v73 && *(unsigned __int8 *)v97 == *(unsigned __int8 *)v100) {
      unsigned int v100 = (int *)((char *)v100 + 1);
    }
    unsigned int v30 = v160;
    unint64_t v99 = (char *)v100 - v96;
LABEL_111:
    unint64_t v101 = v99 + v94;
    if (v101 > v36)
    {
      if (v101 > v84 - v22) {
        unsigned int v84 = v22 + v101;
      }
      unsigned int v102 = &v16[2 * v10];
      _DWORD *v102 = v90 - v22;
      v102[1] = v101;
      uint64_t v10 = (v10 + 1);
      if (v101 > 0x1000 || (int *)((char *)v13 + v101) == v73)
      {
        *uint64_t v88 = 0;
        *int v83 = 0;
        goto LABEL_156;
      }
      unint64_t v36 = v101;
    }
    uint64_t v104 = (unsigned int *)(v75 + 8 * (v22 & v93));
    if (*(unsigned __int8 *)(v95 + v101) >= *((unsigned __int8 *)v13 + v101)) {
      break;
    }
    *int v83 = v22;
    if (v22 <= v76)
    {
      int v83 = v162;
      goto LABEL_135;
    }
    ++v104;
    unint64_t v87 = v101;
    int v83 = v104;
LABEL_124:
    if (--v85)
    {
      unsigned int v22 = *v104;
      if (*v104 >= v30) {
        continue;
      }
    }
    goto LABEL_135;
  }
  *uint64_t v88 = v22;
  if (v22 > v76)
  {
    unint64_t v86 = v101;
    uint64_t v88 = (unsigned int *)(v75 + 8 * (v22 & v93));
    goto LABEL_124;
  }
  uint64_t v88 = v162;
LABEL_135:
  *uint64_t v88 = 0;
  *int v83 = 0;
  unsigned int v18 = v150;
  if (v85)
  {
LABEL_136:
    unsigned int v110 = *(_DWORD *)(*(void *)(v135 + 112) + 4 * ((-1640531535 * *v13) >> -v134));
    if (v110 > v157)
    {
      unint64_t v111 = 0;
      unint64_t v112 = 0;
      uint64_t v151 = *(void *)(v135 + 128);
      unsigned int v148 = v18 + 3;
      int v113 = v85 - 1;
      do
      {
        if (v112 >= v111) {
          unint64_t v114 = v111;
        }
        else {
          unint64_t v114 = v112;
        }
        unint64_t v115 = sub_1DD2A6010((int *)((char *)v13 + v114), (char *)(v155 + v110 + v114), v161, v158, v159);
        unint64_t v116 = v115 + v114;
        if (v115 + v114 + v110 >= v127) {
          uint64_t v117 = v142 + v149 + v110;
        }
        else {
          uint64_t v117 = v155 + v110;
        }
        if (v116 > v36)
        {
          if (v116 > v84 - (v110 + v149)) {
            unsigned int v84 = v110 + v149 + v116;
          }
          unint64_t v118 = &a1[2 * v10];
          *unint64_t v118 = v148 - (v110 + v149);
          v118[1] = v116;
          uint64_t v10 = (v10 + 1);
          if (v116 > 0x1000) {
            break;
          }
          unint64_t v36 = v115 + v114;
          if ((int *)((char *)v13 + v116) == (int *)v161) {
            break;
          }
        }
        if (v110 <= v154) {
          break;
        }
        unsigned int v119 = *(unsigned __int8 *)(v117 + v116);
        unsigned int v120 = *((unsigned __int8 *)v13 + v116);
        BOOL v55 = v119 >= v120;
        BOOL v121 = v119 < v120;
        if (v55) {
          unint64_t v111 = v115 + v114;
        }
        else {
          unint64_t v112 = v115 + v114;
        }
        BOOL v55 = v113-- != 0;
        if (!v55) {
          break;
        }
        unsigned int v110 = *(_DWORD *)(v151 + 8 * (v110 & v153) + 4 * v121);
      }
      while (v110 > v157);
    }
  }
LABEL_156:
  unsigned int v82 = v84 - 8;
  uint64_t v71 = v143;
LABEL_157:
  *(_DWORD *)(v71 + 44) = v82;
  return v10;
}

uint64_t sub_1DD2D65F8(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, unint64_t a5, _DWORD *a6, uint64_t a7, int a8)
{
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v9 = *(unsigned int *)(a2 + 44);
  if (v8 + v9 > (unint64_t)a4) {
    return 0;
  }
  int32x4_t v14 = a4;
  unsigned int v16 = a4 - v8;
  unsigned int v17 = a4 - v8;
  unsigned int v131 = a6;
  if (v9 < (int)a4 - (int)v8)
  {
    do
      LODWORD(v9) = sub_1DD2D1A18(a2, (void *)(v8 + v9), a5, v16, 4, 0) + v9;
    while (v9 < v16);
    uint64_t v8 = *(void *)(a2 + 8);
    unsigned int v17 = v14 - v8;
    a6 = v131;
  }
  *(_DWORD *)(a2 + 44) = v16;
  unsigned int v18 = *(_DWORD *)(a2 + 276);
  uint64_t v112 = (-1640531535 * *v14) >> -*(unsigned char *)(a2 + 264);
  uint64_t v113 = *(void *)(a2 + 112);
  unsigned int v19 = *(_DWORD *)(v113 + 4 * v112);
  if (v18 >= 0xFFF) {
    uint64_t v20 = 4095;
  }
  else {
    uint64_t v20 = v18;
  }
  uint64_t v114 = *(void *)(a2 + 128);
  int v111 = -1 << (*(_DWORD *)(a2 + 260) - 1);
  uint64_t v22 = *(unsigned int *)(a2 + 24);
  unsigned int v21 = *(_DWORD *)(a2 + 28);
  uint64_t v141 = v8;
  uint64_t v138 = (void *)(v8 + v22);
  int v107 = ~v111;
  unsigned int v23 = v17 + v111 + 1;
  if (v17 < ~v111) {
    unsigned int v23 = 0;
  }
  unsigned int v125 = v23;
  unsigned int v24 = 1 << *(_DWORD *)(a2 + 256);
  if (v17 - v21 > v24 && *(_DWORD *)(a2 + 40) == 0) {
    uint64_t v26 = v17 - v24;
  }
  else {
    uint64_t v26 = v21;
  }
  if (v26 <= 1) {
    int v27 = 1;
  }
  else {
    int v27 = v26;
  }
  unsigned int v139 = v27;
  v143[0] = 0;
  int v110 = *(_DWORD *)(a2 + 268);
  uint64_t v115 = a2;
  uint64_t v28 = *(void *)(a2 + 248);
  uint64_t v29 = *(void *)(v28 + 8);
  int v137 = *(char **)v28;
  int v30 = *(_DWORD *)(v28 + 28);
  unsigned int v31 = v26 - (*(void *)v28 - v29);
  int v108 = *(_DWORD *)(v28 + 264);
  uint64_t v109 = v28;
  unsigned int v133 = ~(-1 << (*(_DWORD *)(v28 + 260) - 1));
  uint64_t v106 = *(void *)v28 - v29;
  unsigned int v32 = v106 + (-1 << (*(_DWORD *)(v28 + 260) - 1)) + 1;
  if (*(void *)v28 - v29 - v30 <= v133) {
    unsigned int v32 = *(_DWORD *)(v28 + 28);
  }
  unsigned int v134 = v32;
  unint64_t v33 = (a8 - 1);
  uint64_t v135 = *(void *)(v28 + 8);
  unsigned int v136 = *(_DWORD *)(v28 + 28);
  unsigned int v127 = v26 - (*(void *)v28 - v29);
  uint64_t v10 = 0;
  if (a7 <= 0xFFFFFFFC)
  {
    unint64_t v34 = (a7 + 3);
    unsigned int v35 = v17 - v22;
    unsigned int v36 = v17 - v30 - v31;
    unint64_t v37 = v14 + 1;
    unint64_t v38 = a5 - 7;
    unint64_t v123 = a5 - 1;
    unint64_t v124 = a5 - 3;
    uint64_t v39 = v14 + 3;
    uint64_t v40 = v29 - v31;
    uint64_t v41 = a7;
    uint64_t v42 = a1;
    unsigned int v121 = v17 - v22;
    unsigned int v122 = v19;
    unsigned int v120 = v36;
    unint64_t v118 = a5 - 7;
    unsigned int v119 = v14 + 1;
    unint64_t v116 = v14;
    uint64_t v117 = v14 + 3;
    while (1)
    {
      if (v41 == 3) {
        unsigned int v43 = *a6 - 1;
      }
      else {
        unsigned int v43 = a6[v41];
      }
      unsigned int v44 = v17 - v43;
      if (v43 - 1 >= v35)
      {
        BOOL v50 = v43 - 1 < v36 && v22 + ~v44 >= 3;
        if (v50)
        {
          uint64_t v51 = v40 + v44;
          if (*v14 == *(_DWORD *)v51)
          {
            int v52 = v37;
            unint64_t v53 = a5;
            uint64_t v54 = a7;
            uint64_t v55 = v42;
            uint64_t v56 = v20;
            unsigned int v129 = v10;
            unint64_t v126 = v33;
            unint64_t v57 = a5;
            uint64_t v58 = v22;
            uint64_t v59 = v26;
            unint64_t v60 = v34;
            uint64_t v61 = v40;
            int v62 = sub_1DD2A6010(v52, (char *)(v51 + 4), v53, v137, v138);
            uint64_t v40 = v61;
            uint64_t v39 = v117;
            unint64_t v38 = v118;
            unint64_t v37 = v119;
            unint64_t v34 = v60;
            uint64_t v26 = v59;
            uint64_t v22 = v58;
            a5 = v57;
            int32x4_t v14 = v116;
            unint64_t v33 = v126;
            unsigned int v19 = v122;
            uint64_t v10 = v129;
            uint64_t v20 = v56;
            a6 = v131;
            uint64_t v42 = v55;
            a7 = v54;
            unsigned int v63 = v62 + 4;
            unsigned int v36 = v120;
            unsigned int v35 = v121;
            goto LABEL_56;
          }
        }
LABEL_43:
        unsigned int v63 = 0;
        goto LABEL_56;
      }
      if (v44 < v26 || *v14 != *(_DWORD *)((char *)v14 - v43)) {
        goto LABEL_43;
      }
      uint64_t v46 = -(uint64_t)v43;
      unsigned int v47 = (void *)((char *)v37 - v43);
      if (v38 <= (unint64_t)v37) {
        break;
      }
      unint64_t v48 = *v37 ^ *v47;
      if (!v48)
      {
        uint64_t v65 = 0;
        while (1)
        {
          unsigned int v49 = &v39[v65];
          if ((unint64_t)&v39[v65] >= v38) {
            break;
          }
          uint64_t v66 = *(void *)((char *)v39 + v46 + v65 * 4);
          v65 += 2;
          unint64_t v67 = *v49 ^ v66;
          if (v67)
          {
            unsigned int v49 = (void *)(v65 * 4 + (__clz(__rbit64(v67)) >> 3));
            goto LABEL_55;
          }
        }
        unsigned int v47 = (void *)((char *)v49 + v46);
        goto LABEL_45;
      }
      unsigned int v49 = (void *)(__clz(__rbit64(v48)) >> 3);
LABEL_55:
      unsigned int v63 = v49 + 4;
LABEL_56:
      if (v33 < v63)
      {
        unint64_t v64 = (_DWORD *)(v42 + 8 * v10);
        _DWORD *v64 = v41 - a7 + 1;
        v64[1] = v63;
        uint64_t v10 = (v10 + 1);
        if (v63 > v20) {
          return v10;
        }
        unint64_t v33 = v63;
        if ((_DWORD *)((char *)v14 + v63) == (_DWORD *)a5) {
          return v10;
        }
      }
      if (++v41 >= v34) {
        goto LABEL_67;
      }
    }
    unsigned int v49 = v37;
LABEL_45:
    if ((unint64_t)v49 < v124 && *(_DWORD *)v47 == *(_DWORD *)v49)
    {
      unsigned int v49 = (void *)((char *)v49 + 4);
      unsigned int v47 = (void *)((char *)v47 + 4);
    }
    if ((unint64_t)v49 < v123 && *(unsigned __int16 *)v47 == *(unsigned __int16 *)v49)
    {
      unsigned int v49 = (void *)((char *)v49 + 2);
      unsigned int v47 = (void *)((char *)v47 + 2);
    }
    if ((unint64_t)v49 < a5 && *(unsigned __int8 *)v47 == *(unsigned __int8 *)v49) {
      LODWORD(v49) = v49 + 1;
    }
    LODWORD(v49) = v49 - v37;
    goto LABEL_55;
  }
  uint64_t v42 = a1;
LABEL_67:
  uint64_t v68 = (unsigned int *)(v114 + 8 * (v17 & ~v111));
  unsigned int v69 = v17 + 9;
  int v70 = 1 << v110;
  *(_DWORD *)(v113 + 4 * v112) = v17;
  if (v19 < v139)
  {
    unint64_t v140 = a5;
    *(void *)uint64_t v68 = 0;
    goto LABEL_112;
  }
  unint64_t v71 = 0;
  unint64_t v72 = 0;
  unint64_t v73 = v68 + 1;
  unint64_t v74 = a5 - 7;
  unint64_t v132 = v14 + 2;
  uint64_t v75 = v141 + 8;
  unsigned int v76 = v125;
  while (1)
  {
    unint64_t v77 = v72 >= v71 ? v71 : v72;
    uint64_t v78 = v141 + v19;
    unint64_t v79 = (char *)v14 + v77;
    unsigned int v80 = (void *)(v78 + v77);
    if (v74 <= (unint64_t)v14 + v77)
    {
      int v83 = (_DWORD *)((char *)v14 + v77);
    }
    else
    {
      unint64_t v81 = *(void *)v79 ^ *v80;
      if (v81)
      {
        unint64_t v82 = __clz(__rbit64(v81)) >> 3;
        goto LABEL_87;
      }
      uint64_t v88 = 0;
      uint64_t v89 = (char *)v132 + v77;
      while (1)
      {
        unsigned int v90 = &v89[v88];
        if ((unint64_t)&v89[v88] >= v74) {
          break;
        }
        uint64_t v91 = *(void *)(v75 + v77 + v19 + v88);
        v88 += 8;
        unint64_t v92 = *(void *)v90 ^ v91;
        if (v92)
        {
          unint64_t v82 = v88 + (__clz(__rbit64(v92)) >> 3);
          unsigned int v76 = v125;
          goto LABEL_87;
        }
      }
      int v83 = (_DWORD *)((char *)v132 + v77 + v88);
      unsigned int v80 = (void *)(v75 + v77 + v19 + v88);
      unsigned int v76 = v125;
    }
    if ((unint64_t)v83 < a5 - 3 && *(_DWORD *)v80 == *v83)
    {
      ++v83;
      unsigned int v80 = (void *)((char *)v80 + 4);
    }
    if ((unint64_t)v83 < a5 - 1 && *(unsigned __int16 *)v80 == *(unsigned __int16 *)v83)
    {
      int v83 = (_DWORD *)((char *)v83 + 2);
      unsigned int v80 = (void *)((char *)v80 + 2);
    }
    if ((unint64_t)v83 < a5 && *(unsigned __int8 *)v80 == *(unsigned __int8 *)v83) {
      int v83 = (_DWORD *)((char *)v83 + 1);
    }
    unint64_t v82 = (char *)v83 - v79;
LABEL_87:
    unint64_t v84 = v82 + v77;
    if (v84 > v33)
    {
      if (v84 > v69 - v19) {
        unsigned int v69 = v19 + v84;
      }
      int v85 = (_DWORD *)(v42 + 8 * v10);
      *int v85 = v17 + 3 - v19;
      v85[1] = v84;
      uint64_t v10 = (v10 + 1);
      if (v84 > 0x1000 || (_DWORD *)((char *)v14 + v84) == (_DWORD *)a5)
      {
        unsigned int *v73 = 0;
        unsigned int *v68 = 0;
        goto LABEL_132;
      }
      unint64_t v33 = v84;
    }
    unint64_t v87 = (unsigned int *)(v114 + 8 * (v19 & v107));
    if (*(unsigned __int8 *)(v78 + v84) >= *((unsigned __int8 *)v14 + v84)) {
      break;
    }
    unsigned int *v68 = v19;
    if (v19 <= v76)
    {
      uint64_t v68 = v143;
      goto LABEL_111;
    }
    ++v87;
    unint64_t v72 = v84;
    uint64_t v68 = v87;
LABEL_100:
    if (--v70)
    {
      unsigned int v19 = *v87;
      if (*v87 >= v139) {
        continue;
      }
    }
    goto LABEL_111;
  }
  unsigned int *v73 = v19;
  if (v19 > v76)
  {
    unint64_t v71 = v84;
    unint64_t v73 = (unsigned int *)(v114 + 8 * (v19 & v107));
    goto LABEL_100;
  }
  unint64_t v73 = v143;
LABEL_111:
  unint64_t v140 = a5;
  unsigned int *v73 = 0;
  unsigned int *v68 = 0;
  if (v70)
  {
LABEL_112:
    unsigned int v93 = *(_DWORD *)(*(void *)(v109 + 112) + 4 * ((-1640531535 * *v14) >> -(char)v108));
    if (v93 > v136)
    {
      unint64_t v94 = 0;
      unint64_t v95 = 0;
      uint64_t v130 = *(void *)(v109 + 128);
      int v96 = v70 - 1;
      uint64_t v142 = v141 + v127;
      do
      {
        if (v95 >= v94) {
          unint64_t v97 = v94;
        }
        else {
          unint64_t v97 = v95;
        }
        unint64_t v98 = sub_1DD2A6010((_DWORD *)((char *)v14 + v97), (char *)(v135 + v93 + v97), v140, v137, v138);
        unint64_t v99 = v98 + v97;
        if (v98 + v97 + v93 >= v106) {
          uint64_t v100 = v142 + v93;
        }
        else {
          uint64_t v100 = v135 + v93;
        }
        if (v99 > v33)
        {
          if (v99 > v69 - (v93 + v127)) {
            unsigned int v69 = v93 + v127 + v99;
          }
          unint64_t v101 = (_DWORD *)(a1 + 8 * v10);
          *unint64_t v101 = v17 + 3 - (v93 + v127);
          v101[1] = v99;
          uint64_t v10 = (v10 + 1);
          if (v99 > 0x1000) {
            break;
          }
          unint64_t v33 = v98 + v97;
          if ((_DWORD *)((char *)v14 + v99) == (_DWORD *)v140) {
            break;
          }
        }
        if (v93 <= v134) {
          break;
        }
        unsigned int v102 = *(unsigned __int8 *)(v100 + v99);
        unsigned int v103 = *((unsigned __int8 *)v14 + v99);
        BOOL v50 = v102 >= v103;
        BOOL v104 = v102 < v103;
        if (v50) {
          unint64_t v94 = v98 + v97;
        }
        else {
          unint64_t v95 = v98 + v97;
        }
        BOOL v50 = v96-- != 0;
        if (!v50) {
          break;
        }
        unsigned int v93 = *(_DWORD *)(v130 + 8 * (v93 & v133) + 4 * v104);
      }
      while (v93 > v136);
    }
  }
LABEL_132:
  *(_DWORD *)(v115 + 44) = v69 - 8;
  return v10;
}

uint64_t sub_1DD2D6E18(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unint64_t a5, _DWORD *a6, uint64_t a7, int a8)
{
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v9 = *(unsigned int *)(a2 + 44);
  if (v8 + v9 > (unint64_t)a4) {
    return 0;
  }
  int32x4_t v14 = a4;
  unsigned int v16 = a4 - v8;
  unsigned int v17 = a4 - v8;
  unint64_t v132 = a6;
  if (v9 < (int)a4 - (int)v8)
  {
    do
      LODWORD(v9) = sub_1DD2D1A18(a2, (void *)(v8 + v9), a5, v16, 5, 0) + v9;
    while (v9 < v16);
    uint64_t v8 = *(void *)(a2 + 8);
    unsigned int v17 = v14 - v8;
    a6 = v132;
  }
  *(_DWORD *)(a2 + 44) = v16;
  unsigned int v18 = *(_DWORD *)(a2 + 276);
  unint64_t v110 = 0xCF1BBCDCBB000000 * *v14;
  unint64_t v113 = v110 >> -*(unsigned char *)(a2 + 264);
  uint64_t v114 = *(void *)(a2 + 112);
  unsigned int v19 = *(_DWORD *)(v114 + 4 * v113);
  if (v18 >= 0xFFF) {
    uint64_t v20 = 4095;
  }
  else {
    uint64_t v20 = v18;
  }
  uint64_t v115 = *(void *)(a2 + 128);
  int v112 = -1 << (*(_DWORD *)(a2 + 260) - 1);
  uint64_t v22 = *(unsigned int *)(a2 + 24);
  unsigned int v21 = *(_DWORD *)(a2 + 28);
  uint64_t v142 = v8;
  unsigned int v139 = (void *)(v8 + v22);
  int v107 = ~v112;
  unsigned int v23 = v17 + v112 + 1;
  if (v17 < ~v112) {
    unsigned int v23 = 0;
  }
  unsigned int v126 = v23;
  unsigned int v24 = 1 << *(_DWORD *)(a2 + 256);
  if (v17 - v21 > v24 && *(_DWORD *)(a2 + 40) == 0) {
    uint64_t v26 = v17 - v24;
  }
  else {
    uint64_t v26 = v21;
  }
  if (v26 <= 1) {
    int v27 = 1;
  }
  else {
    int v27 = v26;
  }
  unsigned int v140 = v27;
  v144[0] = 0;
  int v111 = *(_DWORD *)(a2 + 268);
  uint64_t v116 = a2;
  uint64_t v28 = *(void *)(a2 + 248);
  uint64_t v29 = *(void *)(v28 + 8);
  uint64_t v138 = *(char **)v28;
  int v30 = *(_DWORD *)(v28 + 28);
  unsigned int v31 = v26 - (*(void *)v28 - v29);
  int v108 = *(_DWORD *)(v28 + 264);
  uint64_t v109 = v28;
  unsigned int v134 = ~(-1 << (*(_DWORD *)(v28 + 260) - 1));
  uint64_t v106 = *(void *)v28 - v29;
  unsigned int v32 = v106 + (-1 << (*(_DWORD *)(v28 + 260) - 1)) + 1;
  if (*(void *)v28 - v29 - v30 <= v134) {
    unsigned int v32 = *(_DWORD *)(v28 + 28);
  }
  unsigned int v135 = v32;
  unint64_t v33 = (a8 - 1);
  uint64_t v136 = *(void *)(v28 + 8);
  unsigned int v137 = *(_DWORD *)(v28 + 28);
  unsigned int v128 = v26 - (*(void *)v28 - v29);
  uint64_t v10 = 0;
  if (a7 <= 0xFFFFFFFC)
  {
    unint64_t v34 = (a7 + 3);
    unsigned int v35 = v17 - v22;
    unsigned int v36 = v17 - v30 - v31;
    unint64_t v37 = (void *)((char *)v14 + 4);
    unint64_t v38 = a5 - 7;
    unint64_t v124 = a5 - 1;
    unint64_t v125 = a5 - 3;
    uint64_t v39 = (char *)v14 + 12;
    uint64_t v40 = v29 - v31;
    uint64_t v41 = a7;
    uint64_t v42 = a1;
    unsigned int v122 = v17 - v22;
    unsigned int v123 = v19;
    unsigned int v121 = v36;
    unint64_t v119 = a5 - 7;
    unsigned int v120 = (void *)((char *)v14 + 4);
    uint64_t v117 = v14;
    unint64_t v118 = (char *)v14 + 12;
    while (1)
    {
      if (v41 == 3) {
        unsigned int v43 = *a6 - 1;
      }
      else {
        unsigned int v43 = a6[v41];
      }
      unsigned int v44 = v17 - v43;
      if (v43 - 1 >= v35)
      {
        BOOL v50 = v43 - 1 < v36 && v22 + ~v44 >= 3;
        if (v50)
        {
          uint64_t v51 = v40 + v44;
          if (*(_DWORD *)v14 == *(_DWORD *)v51)
          {
            int v52 = v37;
            unint64_t v53 = a5;
            uint64_t v54 = a7;
            uint64_t v55 = v42;
            uint64_t v56 = v20;
            unsigned int v130 = v10;
            unint64_t v127 = v33;
            unint64_t v57 = a5;
            uint64_t v58 = v22;
            uint64_t v59 = v26;
            unint64_t v60 = v34;
            uint64_t v61 = v40;
            int v62 = sub_1DD2A6010(v52, (char *)(v51 + 4), v53, v138, v139);
            uint64_t v40 = v61;
            uint64_t v39 = v118;
            unint64_t v38 = v119;
            unint64_t v37 = v120;
            unint64_t v34 = v60;
            uint64_t v26 = v59;
            uint64_t v22 = v58;
            a5 = v57;
            int32x4_t v14 = v117;
            unint64_t v33 = v127;
            unsigned int v19 = v123;
            uint64_t v10 = v130;
            uint64_t v20 = v56;
            a6 = v132;
            uint64_t v42 = v55;
            a7 = v54;
            unsigned int v63 = v62 + 4;
            unsigned int v36 = v121;
            unsigned int v35 = v122;
            goto LABEL_56;
          }
        }
LABEL_43:
        unsigned int v63 = 0;
        goto LABEL_56;
      }
      if (v44 < v26 || *(_DWORD *)v14 != *(_DWORD *)((char *)v14 - v43)) {
        goto LABEL_43;
      }
      uint64_t v46 = -(uint64_t)v43;
      unsigned int v47 = (char *)v37 - v43;
      if (v38 <= (unint64_t)v37) {
        break;
      }
      unint64_t v48 = *v37 ^ *(void *)v47;
      if (!v48)
      {
        uint64_t v65 = 0;
        while (1)
        {
          unsigned int v49 = &v39[v65];
          if ((unint64_t)&v39[v65] >= v38) {
            break;
          }
          uint64_t v66 = *(void *)&v39[v46 + v65];
          v65 += 8;
          unint64_t v67 = *(void *)v49 ^ v66;
          if (v67)
          {
            unsigned int v49 = (char *)(v65 + (__clz(__rbit64(v67)) >> 3));
            goto LABEL_55;
          }
        }
        unsigned int v47 = &v49[v46];
        goto LABEL_45;
      }
      unsigned int v49 = (char *)(__clz(__rbit64(v48)) >> 3);
LABEL_55:
      unsigned int v63 = v49 + 4;
LABEL_56:
      if (v33 < v63)
      {
        unint64_t v64 = (_DWORD *)(v42 + 8 * v10);
        _DWORD *v64 = v41 - a7 + 1;
        v64[1] = v63;
        uint64_t v10 = (v10 + 1);
        if (v63 > v20) {
          return v10;
        }
        unint64_t v33 = v63;
        if ((void *)((char *)v14 + v63) == (void *)a5) {
          return v10;
        }
      }
      if (++v41 >= v34) {
        goto LABEL_67;
      }
    }
    unsigned int v49 = (char *)v37;
LABEL_45:
    if ((unint64_t)v49 < v125 && *(_DWORD *)v47 == *(_DWORD *)v49)
    {
      v49 += 4;
      v47 += 4;
    }
    if ((unint64_t)v49 < v124 && *(unsigned __int16 *)v47 == *(unsigned __int16 *)v49)
    {
      v49 += 2;
      v47 += 2;
    }
    if ((unint64_t)v49 < a5 && *v47 == *v49) {
      LODWORD(v49) = v49 + 1;
    }
    LODWORD(v49) = v49 - v37;
    goto LABEL_55;
  }
  uint64_t v42 = a1;
LABEL_67:
  uint64_t v68 = (unsigned int *)(v115 + 8 * (v17 & ~v112));
  unsigned int v69 = v17 + 9;
  int v70 = 1 << v111;
  *(_DWORD *)(v114 + 4 * v113) = v17;
  if (v19 < v140)
  {
    unint64_t v141 = a5;
    *(void *)uint64_t v68 = 0;
    goto LABEL_112;
  }
  unint64_t v71 = 0;
  unint64_t v72 = 0;
  unint64_t v73 = v68 + 1;
  unint64_t v74 = a5 - 7;
  unsigned int v133 = v14 + 1;
  uint64_t v75 = v142 + 8;
  unsigned int v76 = v126;
  while (1)
  {
    unint64_t v77 = v72 >= v71 ? v71 : v72;
    uint64_t v78 = v142 + v19;
    unint64_t v79 = (char *)v14 + v77;
    unsigned int v80 = (void *)(v78 + v77);
    if (v74 <= (unint64_t)v14 + v77)
    {
      int v83 = (_DWORD *)((char *)v14 + v77);
    }
    else
    {
      unint64_t v81 = *(void *)v79 ^ *v80;
      if (v81)
      {
        unint64_t v82 = __clz(__rbit64(v81)) >> 3;
        goto LABEL_87;
      }
      uint64_t v88 = 0;
      uint64_t v89 = (char *)v133 + v77;
      while (1)
      {
        unsigned int v90 = &v89[v88];
        if ((unint64_t)&v89[v88] >= v74) {
          break;
        }
        uint64_t v91 = *(void *)(v75 + v77 + v19 + v88);
        v88 += 8;
        unint64_t v92 = *(void *)v90 ^ v91;
        if (v92)
        {
          unint64_t v82 = v88 + (__clz(__rbit64(v92)) >> 3);
          unsigned int v76 = v126;
          goto LABEL_87;
        }
      }
      int v83 = (_DWORD *)((char *)v133 + v77 + v88);
      unsigned int v80 = (void *)(v75 + v77 + v19 + v88);
      unsigned int v76 = v126;
    }
    if ((unint64_t)v83 < a5 - 3 && *(_DWORD *)v80 == *v83)
    {
      ++v83;
      unsigned int v80 = (void *)((char *)v80 + 4);
    }
    if ((unint64_t)v83 < a5 - 1 && *(unsigned __int16 *)v80 == *(unsigned __int16 *)v83)
    {
      int v83 = (_DWORD *)((char *)v83 + 2);
      unsigned int v80 = (void *)((char *)v80 + 2);
    }
    if ((unint64_t)v83 < a5 && *(unsigned __int8 *)v80 == *(unsigned __int8 *)v83) {
      int v83 = (_DWORD *)((char *)v83 + 1);
    }
    unint64_t v82 = (char *)v83 - v79;
LABEL_87:
    unint64_t v84 = v82 + v77;
    if (v84 > v33)
    {
      if (v84 > v69 - v19) {
        unsigned int v69 = v19 + v84;
      }
      int v85 = (_DWORD *)(v42 + 8 * v10);
      *int v85 = v17 + 3 - v19;
      v85[1] = v84;
      uint64_t v10 = (v10 + 1);
      if (v84 > 0x1000 || (void *)((char *)v14 + v84) == (void *)a5)
      {
        unsigned int *v73 = 0;
        unsigned int *v68 = 0;
        goto LABEL_132;
      }
      unint64_t v33 = v84;
    }
    unint64_t v87 = (unsigned int *)(v115 + 8 * (v19 & v107));
    if (*(unsigned __int8 *)(v78 + v84) >= *((unsigned __int8 *)v14 + v84)) {
      break;
    }
    unsigned int *v68 = v19;
    if (v19 <= v76)
    {
      uint64_t v68 = v144;
      goto LABEL_111;
    }
    ++v87;
    unint64_t v72 = v84;
    uint64_t v68 = v87;
LABEL_100:
    if (--v70)
    {
      unsigned int v19 = *v87;
      if (*v87 >= v140) {
        continue;
      }
    }
    goto LABEL_111;
  }
  unsigned int *v73 = v19;
  if (v19 > v76)
  {
    unint64_t v71 = v84;
    unint64_t v73 = (unsigned int *)(v115 + 8 * (v19 & v107));
    goto LABEL_100;
  }
  unint64_t v73 = v144;
LABEL_111:
  unint64_t v141 = a5;
  unsigned int *v73 = 0;
  unsigned int *v68 = 0;
  if (v70)
  {
LABEL_112:
    unsigned int v93 = *(_DWORD *)(*(void *)(v109 + 112) + 4 * (v110 >> -(char)v108));
    if (v93 > v137)
    {
      unint64_t v94 = 0;
      unint64_t v95 = 0;
      uint64_t v131 = *(void *)(v109 + 128);
      int v96 = v70 - 1;
      uint64_t v143 = v142 + v128;
      do
      {
        if (v95 >= v94) {
          unint64_t v97 = v94;
        }
        else {
          unint64_t v97 = v95;
        }
        unint64_t v98 = sub_1DD2A6010((void *)((char *)v14 + v97), (char *)(v136 + v93 + v97), v141, v138, v139);
        unint64_t v99 = v98 + v97;
        if (v98 + v97 + v93 >= v106) {
          uint64_t v100 = v143 + v93;
        }
        else {
          uint64_t v100 = v136 + v93;
        }
        if (v99 > v33)
        {
          if (v99 > v69 - (v93 + v128)) {
            unsigned int v69 = v93 + v128 + v99;
          }
          unint64_t v101 = (_DWORD *)(a1 + 8 * v10);
          *unint64_t v101 = v17 + 3 - (v93 + v128);
          v101[1] = v99;
          uint64_t v10 = (v10 + 1);
          if (v99 > 0x1000) {
            break;
          }
          unint64_t v33 = v98 + v97;
          if ((void *)((char *)v14 + v99) == (void *)v141) {
            break;
          }
        }
        if (v93 <= v135) {
          break;
        }
        unsigned int v102 = *(unsigned __int8 *)(v100 + v99);
        unsigned int v103 = *((unsigned __int8 *)v14 + v99);
        BOOL v50 = v102 >= v103;
        BOOL v104 = v102 < v103;
        if (v50) {
          unint64_t v94 = v98 + v97;
        }
        else {
          unint64_t v95 = v98 + v97;
        }
        BOOL v50 = v96-- != 0;
        if (!v50) {
          break;
        }
        unsigned int v93 = *(_DWORD *)(v131 + 8 * (v93 & v134) + 4 * v104);
      }
      while (v93 > v137);
    }
  }
LABEL_132:
  *(_DWORD *)(v116 + 44) = v69 - 8;
  return v10;
}

uint64_t sub_1DD2D7630(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unint64_t a5, _DWORD *a6, uint64_t a7, int a8)
{
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v9 = *(unsigned int *)(a2 + 44);
  if (v8 + v9 > (unint64_t)a4) {
    return 0;
  }
  int32x4_t v14 = a4;
  unsigned int v16 = a4 - v8;
  unsigned int v17 = a4 - v8;
  unint64_t v132 = a6;
  if (v9 < (int)a4 - (int)v8)
  {
    do
      LODWORD(v9) = sub_1DD2D1A18(a2, (void *)(v8 + v9), a5, v16, 6, 0) + v9;
    while (v9 < v16);
    uint64_t v8 = *(void *)(a2 + 8);
    unsigned int v17 = v14 - v8;
    a6 = v132;
  }
  *(_DWORD *)(a2 + 44) = v16;
  unsigned int v18 = *(_DWORD *)(a2 + 276);
  unint64_t v110 = 0xCF1BBCDCBF9B0000 * *v14;
  unint64_t v113 = v110 >> -*(unsigned char *)(a2 + 264);
  uint64_t v114 = *(void *)(a2 + 112);
  unsigned int v19 = *(_DWORD *)(v114 + 4 * v113);
  if (v18 >= 0xFFF) {
    uint64_t v20 = 4095;
  }
  else {
    uint64_t v20 = v18;
  }
  uint64_t v115 = *(void *)(a2 + 128);
  int v112 = -1 << (*(_DWORD *)(a2 + 260) - 1);
  uint64_t v22 = *(unsigned int *)(a2 + 24);
  unsigned int v21 = *(_DWORD *)(a2 + 28);
  uint64_t v142 = v8;
  unsigned int v139 = (void *)(v8 + v22);
  int v107 = ~v112;
  unsigned int v23 = v17 + v112 + 1;
  if (v17 < ~v112) {
    unsigned int v23 = 0;
  }
  unsigned int v126 = v23;
  unsigned int v24 = 1 << *(_DWORD *)(a2 + 256);
  if (v17 - v21 > v24 && *(_DWORD *)(a2 + 40) == 0) {
    uint64_t v26 = v17 - v24;
  }
  else {
    uint64_t v26 = v21;
  }
  if (v26 <= 1) {
    int v27 = 1;
  }
  else {
    int v27 = v26;
  }
  unsigned int v140 = v27;
  v144[0] = 0;
  int v111 = *(_DWORD *)(a2 + 268);
  uint64_t v116 = a2;
  uint64_t v28 = *(void *)(a2 + 248);
  uint64_t v29 = *(void *)(v28 + 8);
  uint64_t v138 = *(char **)v28;
  int v30 = *(_DWORD *)(v28 + 28);
  unsigned int v31 = v26 - (*(void *)v28 - v29);
  int v108 = *(_DWORD *)(v28 + 264);
  uint64_t v109 = v28;
  unsigned int v134 = ~(-1 << (*(_DWORD *)(v28 + 260) - 1));
  uint64_t v106 = *(void *)v28 - v29;
  unsigned int v32 = v106 + (-1 << (*(_DWORD *)(v28 + 260) - 1)) + 1;
  if (*(void *)v28 - v29 - v30 <= v134) {
    unsigned int v32 = *(_DWORD *)(v28 + 28);
  }
  unsigned int v135 = v32;
  unint64_t v33 = (a8 - 1);
  uint64_t v136 = *(void *)(v28 + 8);
  unsigned int v137 = *(_DWORD *)(v28 + 28);
  unsigned int v128 = v26 - (*(void *)v28 - v29);
  uint64_t v10 = 0;
  if (a7 <= 0xFFFFFFFC)
  {
    unint64_t v34 = (a7 + 3);
    unsigned int v35 = v17 - v22;
    unsigned int v36 = v17 - v30 - v31;
    unint64_t v37 = (void *)((char *)v14 + 4);
    unint64_t v38 = a5 - 7;
    unint64_t v124 = a5 - 1;
    unint64_t v125 = a5 - 3;
    uint64_t v39 = (char *)v14 + 12;
    uint64_t v40 = v29 - v31;
    uint64_t v41 = a7;
    uint64_t v42 = a1;
    unsigned int v122 = v17 - v22;
    unsigned int v123 = v19;
    unsigned int v121 = v36;
    unint64_t v119 = a5 - 7;
    unsigned int v120 = (void *)((char *)v14 + 4);
    uint64_t v117 = v14;
    unint64_t v118 = (char *)v14 + 12;
    while (1)
    {
      if (v41 == 3) {
        unsigned int v43 = *a6 - 1;
      }
      else {
        unsigned int v43 = a6[v41];
      }
      unsigned int v44 = v17 - v43;
      if (v43 - 1 >= v35)
      {
        BOOL v50 = v43 - 1 < v36 && v22 + ~v44 >= 3;
        if (v50)
        {
          uint64_t v51 = v40 + v44;
          if (*(_DWORD *)v14 == *(_DWORD *)v51)
          {
            int v52 = v37;
            unint64_t v53 = a5;
            uint64_t v54 = a7;
            uint64_t v55 = v42;
            uint64_t v56 = v20;
            unsigned int v130 = v10;
            unint64_t v127 = v33;
            unint64_t v57 = a5;
            uint64_t v58 = v22;
            uint64_t v59 = v26;
            unint64_t v60 = v34;
            uint64_t v61 = v40;
            int v62 = sub_1DD2A6010(v52, (char *)(v51 + 4), v53, v138, v139);
            uint64_t v40 = v61;
            uint64_t v39 = v118;
            unint64_t v38 = v119;
            unint64_t v37 = v120;
            unint64_t v34 = v60;
            uint64_t v26 = v59;
            uint64_t v22 = v58;
            a5 = v57;
            int32x4_t v14 = v117;
            unint64_t v33 = v127;
            unsigned int v19 = v123;
            uint64_t v10 = v130;
            uint64_t v20 = v56;
            a6 = v132;
            uint64_t v42 = v55;
            a7 = v54;
            unsigned int v63 = v62 + 4;
            unsigned int v36 = v121;
            unsigned int v35 = v122;
            goto LABEL_56;
          }
        }
LABEL_43:
        unsigned int v63 = 0;
        goto LABEL_56;
      }
      if (v44 < v26 || *(_DWORD *)v14 != *(_DWORD *)((char *)v14 - v43)) {
        goto LABEL_43;
      }
      uint64_t v46 = -(uint64_t)v43;
      unsigned int v47 = (char *)v37 - v43;
      if (v38 <= (unint64_t)v37) {
        break;
      }
      unint64_t v48 = *v37 ^ *(void *)v47;
      if (!v48)
      {
        uint64_t v65 = 0;
        while (1)
        {
          unsigned int v49 = &v39[v65];
          if ((unint64_t)&v39[v65] >= v38) {
            break;
          }
          uint64_t v66 = *(void *)&v39[v46 + v65];
          v65 += 8;
          unint64_t v67 = *(void *)v49 ^ v66;
          if (v67)
          {
            unsigned int v49 = (char *)(v65 + (__clz(__rbit64(v67)) >> 3));
            goto LABEL_55;
          }
        }
        unsigned int v47 = &v49[v46];
        goto LABEL_45;
      }
      unsigned int v49 = (char *)(__clz(__rbit64(v48)) >> 3);
LABEL_55:
      unsigned int v63 = v49 + 4;
LABEL_56:
      if (v33 < v63)
      {
        unint64_t v64 = (_DWORD *)(v42 + 8 * v10);
        _DWORD *v64 = v41 - a7 + 1;
        v64[1] = v63;
        uint64_t v10 = (v10 + 1);
        if (v63 > v20) {
          return v10;
        }
        unint64_t v33 = v63;
        if ((void *)((char *)v14 + v63) == (void *)a5) {
          return v10;
        }
      }
      if (++v41 >= v34) {
        goto LABEL_67;
      }
    }
    unsigned int v49 = (char *)v37;
LABEL_45:
    if ((unint64_t)v49 < v125 && *(_DWORD *)v47 == *(_DWORD *)v49)
    {
      v49 += 4;
      v47 += 4;
    }
    if ((unint64_t)v49 < v124 && *(unsigned __int16 *)v47 == *(unsigned __int16 *)v49)
    {
      v49 += 2;
      v47 += 2;
    }
    if ((unint64_t)v49 < a5 && *v47 == *v49) {
      LODWORD(v49) = v49 + 1;
    }
    LODWORD(v49) = v49 - v37;
    goto LABEL_55;
  }
  uint64_t v42 = a1;
LABEL_67:
  uint64_t v68 = (unsigned int *)(v115 + 8 * (v17 & ~v112));
  unsigned int v69 = v17 + 9;
  int v70 = 1 << v111;
  *(_DWORD *)(v114 + 4 * v113) = v17;
  if (v19 < v140)
  {
    unint64_t v141 = a5;
    *(void *)uint64_t v68 = 0;
    goto LABEL_112;
  }
  unint64_t v71 = 0;
  unint64_t v72 = 0;
  unint64_t v73 = v68 + 1;
  unint64_t v74 = a5 - 7;
  unsigned int v133 = v14 + 1;
  uint64_t v75 = v142 + 8;
  unsigned int v76 = v126;
  while (1)
  {
    unint64_t v77 = v72 >= v71 ? v71 : v72;
    uint64_t v78 = v142 + v19;
    unint64_t v79 = (char *)v14 + v77;
    unsigned int v80 = (void *)(v78 + v77);
    if (v74 <= (unint64_t)v14 + v77)
    {
      int v83 = (_DWORD *)((char *)v14 + v77);
    }
    else
    {
      unint64_t v81 = *(void *)v79 ^ *v80;
      if (v81)
      {
        unint64_t v82 = __clz(__rbit64(v81)) >> 3;
        goto LABEL_87;
      }
      uint64_t v88 = 0;
      uint64_t v89 = (char *)v133 + v77;
      while (1)
      {
        unsigned int v90 = &v89[v88];
        if ((unint64_t)&v89[v88] >= v74) {
          break;
        }
        uint64_t v91 = *(void *)(v75 + v77 + v19 + v88);
        v88 += 8;
        unint64_t v92 = *(void *)v90 ^ v91;
        if (v92)
        {
          unint64_t v82 = v88 + (__clz(__rbit64(v92)) >> 3);
          unsigned int v76 = v126;
          goto LABEL_87;
        }
      }
      int v83 = (_DWORD *)((char *)v133 + v77 + v88);
      unsigned int v80 = (void *)(v75 + v77 + v19 + v88);
      unsigned int v76 = v126;
    }
    if ((unint64_t)v83 < a5 - 3 && *(_DWORD *)v80 == *v83)
    {
      ++v83;
      unsigned int v80 = (void *)((char *)v80 + 4);
    }
    if ((unint64_t)v83 < a5 - 1 && *(unsigned __int16 *)v80 == *(unsigned __int16 *)v83)
    {
      int v83 = (_DWORD *)((char *)v83 + 2);
      unsigned int v80 = (void *)((char *)v80 + 2);
    }
    if ((unint64_t)v83 < a5 && *(unsigned __int8 *)v80 == *(unsigned __int8 *)v83) {
      int v83 = (_DWORD *)((char *)v83 + 1);
    }
    unint64_t v82 = (char *)v83 - v79;
LABEL_87:
    unint64_t v84 = v82 + v77;
    if (v84 > v33)
    {
      if (v84 > v69 - v19) {
        unsigned int v69 = v19 + v84;
      }
      int v85 = (_DWORD *)(v42 + 8 * v10);
      *int v85 = v17 + 3 - v19;
      v85[1] = v84;
      uint64_t v10 = (v10 + 1);
      if (v84 > 0x1000 || (void *)((char *)v14 + v84) == (void *)a5)
      {
        unsigned int *v73 = 0;
        unsigned int *v68 = 0;
        goto LABEL_132;
      }
      unint64_t v33 = v84;
    }
    unint64_t v87 = (unsigned int *)(v115 + 8 * (v19 & v107));
    if (*(unsigned __int8 *)(v78 + v84) >= *((unsigned __int8 *)v14 + v84)) {
      break;
    }
    unsigned int *v68 = v19;
    if (v19 <= v76)
    {
      uint64_t v68 = v144;
      goto LABEL_111;
    }
    ++v87;
    unint64_t v72 = v84;
    uint64_t v68 = v87;
LABEL_100:
    if (--v70)
    {
      unsigned int v19 = *v87;
      if (*v87 >= v140) {
        continue;
      }
    }
    goto LABEL_111;
  }
  unsigned int *v73 = v19;
  if (v19 > v76)
  {
    unint64_t v71 = v84;
    unint64_t v73 = (unsigned int *)(v115 + 8 * (v19 & v107));
    goto LABEL_100;
  }
  unint64_t v73 = v144;
LABEL_111:
  unint64_t v141 = a5;
  unsigned int *v73 = 0;
  unsigned int *v68 = 0;
  if (v70)
  {
LABEL_112:
    unsigned int v93 = *(_DWORD *)(*(void *)(v109 + 112) + 4 * (v110 >> -(char)v108));
    if (v93 > v137)
    {
      unint64_t v94 = 0;
      unint64_t v95 = 0;
      uint64_t v131 = *(void *)(v109 + 128);
      int v96 = v70 - 1;
      uint64_t v143 = v142 + v128;
      do
      {
        if (v95 >= v94) {
          unint64_t v97 = v94;
        }
        else {
          unint64_t v97 = v95;
        }
        unint64_t v98 = sub_1DD2A6010((void *)((char *)v14 + v97), (char *)(v136 + v93 + v97), v141, v138, v139);
        unint64_t v99 = v98 + v97;
        if (v98 + v97 + v93 >= v106) {
          uint64_t v100 = v143 + v93;
        }
        else {
          uint64_t v100 = v136 + v93;
        }
        if (v99 > v33)
        {
          if (v99 > v69 - (v93 + v128)) {
            unsigned int v69 = v93 + v128 + v99;
          }
          unint64_t v101 = (_DWORD *)(a1 + 8 * v10);
          *unint64_t v101 = v17 + 3 - (v93 + v128);
          v101[1] = v99;
          uint64_t v10 = (v10 + 1);
          if (v99 > 0x1000) {
            break;
          }
          unint64_t v33 = v98 + v97;
          if ((void *)((char *)v14 + v99) == (void *)v141) {
            break;
          }
        }
        if (v93 <= v135) {
          break;
        }
        unsigned int v102 = *(unsigned __int8 *)(v100 + v99);
        unsigned int v103 = *((unsigned __int8 *)v14 + v99);
        BOOL v50 = v102 >= v103;
        BOOL v104 = v102 < v103;
        if (v50) {
          unint64_t v94 = v98 + v97;
        }
        else {
          unint64_t v95 = v98 + v97;
        }
        BOOL v50 = v96-- != 0;
        if (!v50) {
          break;
        }
        unsigned int v93 = *(_DWORD *)(v131 + 8 * (v93 & v134) + 4 * v104);
      }
      while (v93 > v137);
    }
  }
LABEL_132:
  *(_DWORD *)(v116 + 44) = v69 - 8;
  return v10;
}

uint64_t sub_1DD2D7E48(uint64_t a1, _DWORD *a2, int *a3)
{
  uint64_t v3 = *(void *)(a1 + 120);
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *a2;
  int v6 = *a3;
  int v7 = 32 - *(_DWORD *)(a1 + 48);
  if (v5 < (int)a3 - (int)v4)
  {
    do
    {
      *(_DWORD *)(v3 + 4 * ((900185344 * *(_DWORD *)(v4 + v5)) >> v7)) = v5;
      ++v5;
    }
    while (v5 < (a3 - v4));
  }
  *a2 = a3 - v4;
  return *(unsigned int *)(v3 + 4 * ((900185344 * v6) >> v7));
}

uint64_t sub_1DD2D7EAC(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 3128) & 1) == 0) {
    sub_1DD2946B4(*(void *)a1);
  }
  sub_1DD2D7FF4(a1);
  unsigned int v2 = *(char **)(a1 + 8);
  unsigned int v3 = *(_DWORD *)(a1 + 3040) + 1;
  long long v10 = *(_OWORD *)(a1 + 3088);
  uint64_t v11 = *(void *)(a1 + 3104);
  sub_1DD2D8120(v2, v3, (uint64_t)&v10);
  sub_1DD2D81CC(*(pthread_mutex_t **)(a1 + 16));
  sub_1DD2D829C(*(pthread_mutex_t **)(a1 + 24));
  sub_1DD2D81CC(*(pthread_mutex_t **)(a1 + 32));
  uint64_t v4 = *(void (**)(uint64_t))(a1 + 608);
  uint64_t v5 = *(void *)(a1 + 616);
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 336));
  pthread_cond_destroy((pthread_cond_t *)(a1 + 400));
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 2864));
  pthread_cond_destroy((pthread_cond_t *)(a1 + 2928));
  if (*(void *)(a1 + 696))
  {
    if (!v4)
    {
      free(*(void **)(a1 + 696));
      int v6 = *(void **)(a1 + 712);
      if (!v6) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
    v4(v5);
  }
  int v6 = *(void **)(a1 + 712);
  if (v6)
  {
    if (v4)
    {
      v4(v5);
      goto LABEL_12;
    }
LABEL_11:
    free(v6);
  }
LABEL_12:
  sub_1DD29A21C(*(void **)(a1 + 3112));
  if (*(void *)(a1 + 312))
  {
    int v7 = *(void (**)(void))(a1 + 3096);
    if (v7) {
      v7(*(void *)(a1 + 3104));
    }
    else {
      free(*(void **)(a1 + 312));
    }
  }
  uint64_t v8 = *(void (**)(void, uint64_t))(a1 + 3096);
  if (v8) {
    v8(*(void *)(a1 + 3104), a1);
  }
  else {
    free((void *)a1);
  }
  return 0;
}

void sub_1DD2D7FF4(uint64_t a1)
{
  unsigned int v2 = 0;
  do
  {
    uint64_t v3 = *(void *)(a1 + 8) + 464 * v2;
    long long v10 = *(_OWORD *)(v3 + 16);
    long long v11 = *(_OWORD *)(v3 + 32);
    long long v12 = *(_OWORD *)(v3 + 48);
    long long v13 = *(_OWORD *)(v3 + 64);
    long long v7 = *(_OWORD *)(v3 + 80);
    long long v8 = *(_OWORD *)(v3 + 96);
    long long v9 = *(_OWORD *)(v3 + 112);
    sub_1DD2D833C(*(void *)(a1 + 16), *(void **)(v3 + 160), *(void *)(v3 + 168));
    uint64_t v4 = (_OWORD *)(*(void *)(a1 + 8) + 464 * v2);
    v4[27] = 0u;
    v4[28] = 0u;
    v4[25] = 0u;
    v4[26] = 0u;
    v4[23] = 0u;
    v4[24] = 0u;
    v4[21] = 0u;
    v4[22] = 0u;
    v4[19] = 0u;
    v4[20] = 0u;
    v4[17] = 0u;
    v4[18] = 0u;
    v4[15] = 0u;
    v4[16] = 0u;
    v4[13] = 0u;
    v4[14] = 0u;
    v4[11] = 0u;
    v4[12] = 0u;
    v4[9] = 0u;
    v4[10] = 0u;
    v4[7] = 0u;
    v4[8] = 0u;
    v4[5] = 0u;
    v4[6] = 0u;
    v4[3] = 0u;
    v4[4] = 0u;
    v4[1] = 0u;
    v4[2] = 0u;
    *uint64_t v4 = 0u;
    uint64_t v5 = (_OWORD *)(*(void *)(a1 + 8) + 464 * v2);
    v5[1] = v10;
    v5[2] = v11;
    v5[3] = v12;
    v5[4] = v13;
    int v6 = (_OWORD *)(*(void *)(a1 + 8) + 464 * v2);
    v6[5] = v7;
    v6[6] = v8;
    v6[7] = v9;
    ++v2;
  }
  while (v2 <= *(_DWORD *)(a1 + 3040));
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(_DWORD *)(a1 + 3056) = 1;
}

void sub_1DD2D8120(char *a1, unsigned int a2, uint64_t a3)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t v5 = a2;
      int v6 = (pthread_cond_t *)(a1 + 80);
      do
      {
        pthread_mutex_destroy((pthread_mutex_t *)&v6[-2].__opaque[24]);
        pthread_cond_destroy(v6);
        int v6 = (pthread_cond_t *)((char *)v6 + 464);
        --v5;
      }
      while (v5);
    }
    long long v7 = *(void (**)(uint64_t, char *))(a3 + 8);
    if (v7)
    {
      uint64_t v8 = *(void *)(a3 + 16);
      v7(v8, a1);
    }
    else
    {
      free(a1);
    }
  }
}

void sub_1DD2D81CC(pthread_mutex_t *a1)
{
  if (a1)
  {
    if (*(_DWORD *)a1[1].__opaque)
    {
      unint64_t v2 = 0;
      uint64_t v3 = (void **)&a1[1].__opaque[32];
      do
      {
        if (*v3)
        {
          uint64_t v4 = *(void (**)(void))&a1[1].__opaque[16];
          if (v4) {
            v4(*(void *)&a1[1].__opaque[24]);
          }
          else {
            free(*v3);
          }
        }
        ++v2;
        v3 += 2;
      }
      while (v2 < *(unsigned int *)a1[1].__opaque);
    }
    pthread_mutex_destroy(a1);
    uint64_t v5 = *(void (**)(uint64_t, pthread_mutex_t *))&a1[1].__opaque[16];
    if (v5)
    {
      uint64_t v6 = *(void *)&a1[1].__opaque[24];
      v5(v6, a1);
    }
    else
    {
      free(a1);
    }
  }
}

void sub_1DD2D829C(pthread_mutex_t *a1)
{
  if (SLODWORD(a1[1].__sig) >= 1)
  {
    uint64_t v2 = 0;
    do
      sub_1DD2982C0(*(void *)&a1[1].__opaque[8 * v2++ + 24]);
    while (v2 < SLODWORD(a1[1].__sig));
  }
  pthread_mutex_destroy(a1);
  uint64_t v3 = *(void (**)(uint64_t, pthread_mutex_t *))&a1[1].__opaque[8];
  if (v3)
  {
    uint64_t v4 = *(void *)&a1[1].__opaque[16];
    v3(v4, a1);
  }
  else
  {
    free(a1);
  }
}

void sub_1DD2D833C(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    pthread_mutex_lock((pthread_mutex_t *)a1);
    uint64_t v6 = *(unsigned int *)(a1 + 76);
    if (v6 >= *(_DWORD *)(a1 + 72))
    {
      pthread_mutex_unlock((pthread_mutex_t *)a1);
      uint64_t v8 = *(void (**)(uint64_t, void *))(a1 + 88);
      if (v8)
      {
        uint64_t v9 = *(void *)(a1 + 96);
        v8(v9, a2);
      }
      else
      {
        free(a2);
      }
    }
    else
    {
      *(_DWORD *)(a1 + 76) = v6 + 1;
      uint64_t v7 = a1 + 16 * v6;
      *(void *)(v7 + 104) = a2;
      *(void *)(v7 + 112) = a3;
      pthread_mutex_unlock((pthread_mutex_t *)a1);
    }
  }
}

uint64_t sub_1DD2D8410(int *a1, char *a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v68 = 0;
  if (a5 < 0x5D4) {
    return -44;
  }
  uint64_t v8 = (unsigned char *)(a4 + 1236);
  unint64_t v5 = sub_1DD2939AC((unsigned char *)(a4 + 1236), 0x100uLL, a4, &v68, (_DWORD *)&v68 + 1, a2, a3, (unsigned __int16 *)(a4 + 104), 0x36CuLL);
  if (v5 > 0xFFFFFFFFFFFFFF88) {
    return v5;
  }
  int v9 = *a1;
  int v10 = *a1;
  unsigned int v11 = v10 + 1;
  if ((v10 + 1) < 0xB) {
    unsigned int v12 = v10 + 1;
  }
  else {
    unsigned int v12 = 11;
  }
  uint64_t v14 = v68;
  int v13 = HIDWORD(v68);
  unsigned int v15 = HIDWORD(v68) - v12;
  if (HIDWORD(v68) <= v12)
  {
    if (HIDWORD(v68) < v12)
    {
      uint64_t v16 = v12 - HIDWORD(v68);
      if (v68)
      {
        uint64_t v17 = v68;
        do
        {
          if (*v8) {
            char v18 = v16;
          }
          else {
            char v18 = 0;
          }
          *v8++ += v18;
          --v17;
        }
        while (v17);
      }
      if (v16 < v12)
      {
        unsigned int v19 = (_DWORD *)(a4 + 4 * v12);
        unsigned int v20 = v12;
        do
          *v19-- = *(_DWORD *)(a4 + 4 * (v15 + v20--));
        while (v16 < v20);
      }
      if (v12 != v13) {
        bzero((void *)(a4 + 4 * (v16 - (v12 + ~v13))), 4 * (v12 + ~v13) + 4);
      }
    }
  }
  else
  {
    unsigned int v12 = HIDWORD(v68);
    if (HIDWORD(v68) > v11) {
      return -44;
    }
  }
  *(unsigned char *)a1 = v9;
  *((unsigned char *)a1 + 1) = 0;
  *((unsigned char *)a1 + 2) = v12;
  *((unsigned char *)a1 + 3) = HIBYTE(v9);
  if ((v12 & 0x80000000) == 0)
  {
    int v21 = 0;
    uint64_t v22 = v12 + 1;
    unsigned int v23 = (int *)a4;
    do
    {
      int v24 = *v23;
      v23[13] = v21;
      v21 += v24;
      ++v23;
      --v22;
    }
    while (v22);
  }
  if ((int)v14 < 4)
  {
    LODWORD(v25) = 0;
  }
  else
  {
    unint64_t v25 = 0;
    uint64_t v26 = a4 + 1236;
    do
    {
      for (uint64_t i = 0; i != 4; ++i)
      {
        uint64_t v28 = a4 + 4 * *(unsigned __int8 *)(v26 + i);
        uint64_t v29 = *(unsigned int *)(v28 + 52);
        *(_DWORD *)(v28 + 52) = v29 + 1;
        *(unsigned char *)(a4 + v29 + 980) = i + v25;
      }
      v25 += 4;
      v26 += 4;
    }
    while (v25 < (v14 - 3));
  }
  if ((int)v25 < (int)v14)
  {
    unint64_t v25 = v25;
    do
    {
      uint64_t v30 = a4 + 4 * *(unsigned __int8 *)(a4 + 1236 + v25);
      uint64_t v31 = *(unsigned int *)(v30 + 52);
      *(_DWORD *)(v30 + 52) = v31 + 1;
      *(unsigned char *)(a4 + v31 + 980) = v25++;
    }
    while (v14 != v25);
  }
  uint64_t v32 = v12 + 1;
  if (v32 >= 2)
  {
    int v33 = 0;
    unint64_t v34 = a1 + 3;
    int v35 = *(_DWORD *)a4;
    uint64_t v36 = a4 + 980;
    unint64_t v37 = a1 + 1;
    uint64_t v38 = (uint64_t)a1 + 7;
    uint64_t v39 = (uint64_t)a1 + 5;
    uint64_t v40 = a1 + 5;
    for (uint64_t j = 1; j != v32; ++j)
    {
      uint64_t v42 = *(unsigned int *)(a4 + 4 * j);
      int v43 = 1 << j >> 1;
      char v44 = v32 - j;
      switch(v43)
      {
        case 1:
          if ((int)v42 >= 1)
          {
            uint64_t v45 = (unsigned char *)(v39 + 2 * v33);
            uint64_t v46 = *(unsigned int *)(a4 + 4 * j);
            unsigned int v47 = (char *)(v36 + v35);
            do
            {
              char v48 = *v47++;
              *(v45 - 1) = v44;
              unsigned char *v45 = v48;
              v45 += 2;
              --v46;
            }
            while (v46);
          }
          break;
        case 2:
          if ((int)v42 >= 1)
          {
            unsigned int v49 = (char *)(v36 + v35);
            uint64_t v50 = *(unsigned int *)(a4 + 4 * j);
            uint64_t v51 = (unsigned char *)(v38 + 2 * v33);
            do
            {
              char v52 = *v49++;
              *(v51 - 3) = v44;
              *(v51 - 2) = v52;
              *(v51 - 1) = v44;
              *uint64_t v51 = v52;
              v51 += 4;
              --v50;
            }
            while (v50);
          }
          break;
        case 4:
          if ((int)v42 >= 1)
          {
            uint64_t v58 = (void *)((char *)v37 + 2 * v33);
            uint64_t v59 = *(unsigned int *)(a4 + 4 * j);
            unint64_t v60 = (unsigned __int8 *)(v36 + v35);
            do
            {
              unsigned int v61 = *v60++;
              *v58++ = 0x1000100010001 * ((v32 - j) | ((unint64_t)v61 << 8));
              --v59;
            }
            while (v59);
          }
          break;
        case 8:
          if ((int)v42 >= 1)
          {
            int v62 = (unint64_t *)((char *)v34 + 2 * v33);
            uint64_t v63 = *(unsigned int *)(a4 + 4 * j);
            unint64_t v64 = (unsigned __int8 *)(v36 + v35);
            do
            {
              unsigned int v65 = *v64++;
              unint64_t v66 = 0x1000100010001 * ((v32 - j) | ((unint64_t)v65 << 8));
              *(v62 - 1) = v66;
              unint64_t *v62 = v66;
              v62 += 2;
              --v63;
            }
            while (v63);
          }
          break;
        default:
          if ((int)v42 >= 1)
          {
            uint64_t v53 = 0;
            uint64_t v54 = (unint64_t *)((char *)v40 + 2 * v33);
            do
            {
              if (1 << j >= 2)
              {
                uint64_t v55 = 0;
                unint64_t v56 = 0x1000100010001
                    * ((v32 - j) | ((unint64_t)*(unsigned __int8 *)(a4 + v53 + v35 + 980) << 8));
                unint64_t v57 = v54;
                do
                {
                  *(v57 - 2) = v56;
                  *(v57 - 1) = v56;
                  *unint64_t v57 = v56;
                  v57[1] = v56;
                  v57 += 4;
                  v55 += 16;
                }
                while (v55 < v43);
              }
              ++v53;
              uint64_t v54 = (unint64_t *)((char *)v54 + 2 * v43);
            }
            while (v53 != v42);
          }
          break;
      }
      v35 += v42;
      v33 += v42 * v43;
    }
  }
  return v5;
}

unint64_t sub_1DD2D8808(int *a1, char *a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a5 < 0x84C) {
    return -1;
  }
  v84[12] = v5;
  v84[13] = v6;
  unsigned int v11 = a1 + 1;
  int v10 = *a1;
  *(_OWORD *)(a4 + 704) = 0u;
  *(_OWORD *)(a4 + 720) = 0u;
  *(_OWORD *)(a4 + 672) = 0u;
  *(_OWORD *)(a4 + 688) = 0u;
  *(_OWORD *)(a4 + 640) = 0u;
  *(_OWORD *)(a4 + 656) = 0u;
  *(_OWORD *)(a4 + 624) = 0u;
  if (v10 <= 0xCu)
  {
    v84[0] = 0;
    unint64_t result = sub_1DD2939AC((unsigned char *)(a4 + 992), 0x100uLL, a4 + 624, v84, (_DWORD *)v84 + 1, a2, a3, (unsigned __int16 *)(a4 + 1248), 0x36CuLL);
    if (result > 0xFFFFFFFFFFFFFF88) {
      return result;
    }
    unsigned int v12 = HIDWORD(v84[0]);
    if (HIDWORD(v84[0]) <= v10)
    {
      unint64_t v59 = result;
      int v60 = v10;
      int v13 = 0;
      uint64_t v68 = a4 + 676;
      uint64_t v14 = (_DWORD *)(a4 + 680);
      BOOL v16 = HIDWORD(v84[0]) < 0xC && v10 > 0xBu;
      int v69 = HIDWORD(v84[0]) + 1;
      while (!*(_DWORD *)(a4 + 4 * (HIDWORD(v84[0]) + v13--) + 624))
        ;
      int v18 = 0;
      if (v16) {
        int v10 = 11;
      }
      else {
        int v10 = v10;
      }
      int v19 = HIDWORD(v84[0]) + v13;
      uint64_t v20 = (HIDWORD(v84[0]) + v13 + 2);
      if ((HIDWORD(v84[0]) + v13) < 0xFFFFFFFE)
      {
        int v21 = 0;
        uint64_t v22 = (_DWORD *)(a4 + 684);
        uint64_t v23 = v20 - 1;
        do
        {
          int v18 = *(v22 - 14) + v21;
          *v22++ = v21;
          int v21 = v18;
          --v23;
        }
        while (v23);
      }
      *uint64_t v14 = v18;
      v14[v20] = v18;
      uint64_t v24 = LODWORD(v84[0]);
      if (LODWORD(v84[0]))
      {
        uint64_t v25 = 0;
        do
        {
          uint64_t v26 = *(unsigned __int8 *)(a4 + 992 + v25);
          uint64_t v27 = v14[v26];
          v14[v26] = v27 + 1;
          *(unsigned char *)(a4 + v27 + 736) = v25++;
        }
        while (v24 != v25);
      }
      *uint64_t v14 = 0;
      if (v20 >= 2)
      {
        int v28 = 0;
        unsigned int v29 = v10 - v12;
        uint64_t v30 = v20 - 1;
        uint64_t v31 = a4;
        do
        {
          *(_DWORD *)(v31 + 4) = v28;
          v31 += 4;
          v28 += *(_DWORD *)(v31 + 624) << v29++;
          --v30;
        }
        while (v30);
      }
      int v80 = v19 + 1;
      unsigned int v32 = v10 + v13 + 1;
      unsigned int v67 = -v13;
      if (-v13 < v32)
      {
        unsigned int v33 = -v13;
        uint64_t v34 = 13 * v33;
        do
        {
          if (v20 >= 2)
          {
            uint64_t v35 = v20 - 1;
            uint64_t v36 = (_DWORD *)(a4 + 4);
            do
            {
              v36[v34] = *v36 >> v33;
              ++v36;
              --v35;
            }
            while (v35);
          }
          ++v33;
          v34 += 13;
        }
        while (v32 != v33);
      }
      uint64_t v64 = a4;
      unsigned int v61 = a1;
      if (v80 < 1)
      {
LABEL_60:
        *(unsigned char *)unsigned int v61 = v60;
        *((unsigned char *)v61 + 1) = 1;
        *((unsigned char *)v61 + 2) = v10;
        *((unsigned char *)v61 + 3) = HIBYTE(v60);
        return v59;
      }
      uint64_t v37 = a4 + 736;
      int v63 = v69 - v10;
      unsigned int v65 = a1 + 5;
      uint64_t v66 = v20;
      int v74 = (2 * v12) | 1;
      LODWORD(v38) = v74 - v10;
      uint64_t v62 = (int)v20;
      uint64_t v39 = 1;
      unint64_t v79 = v11;
      while (1)
      {
        int v40 = v38 - 1;
        uint64_t v38 = (int)v38 <= 1 ? 1 : v38;
        uint64_t v41 = *(int *)(v68 + 4 * v39);
        uint64_t v42 = *(int *)(v68 + 4 * (v39 + 1));
        unsigned int v43 = v69 - v39;
        unsigned int v44 = v10 - (v69 - v39);
        int v72 = v40;
        unsigned int v73 = v12;
        uint64_t v71 = v39 + 1;
        if (v44 >= v67) {
          break;
        }
        sub_1DD2D9CCC((uint64_t)&v11[*(unsigned int *)(v64 + 4 * v39)], (unsigned __int8 *)(v37 + v41), (unsigned __int8 *)(v37 + v42), v43, v10, 0, 1);
LABEL_59:
        unsigned int v12 = v73 - 1;
        --v74;
        uint64_t v39 = v71;
        LODWORD(v38) = v72;
        if (v71 == v66) {
          goto LABEL_60;
        }
      }
      if (v41 == v42) {
        goto LABEL_59;
      }
      uint64_t v45 = 52 * v12;
      uint64_t v78 = v64 + 4 * v38;
      int v77 = v74 - v38;
      uint64_t v76 = v62 - v38;
      int v46 = 1 << v44;
      if ((int)(v63 + v43) <= 1) {
        uint64_t v47 = 1;
      }
      else {
        uint64_t v47 = v63 + v43;
      }
      int v48 = *(_DWORD *)(v64 + 4 * v39);
      uint64_t v70 = v64 + 52 * v43;
      int v75 = (v43 << 16) + 0x1000000;
      int v83 = *(_DWORD *)(v68 + 4 * (v39 + 1));
      int v82 = 1 << v44;
      uint64_t v81 = v47;
      while (1)
      {
        int v49 = *(unsigned __int8 *)(v37 + v41);
        uint64_t v50 = (unint64_t *)&v11[v48];
        if (v47 >= 2)
        {
          unint64_t v51 = v75 | v49 | ((unint64_t)(v75 | v49) << 32);
          if (v46 == 2)
          {
            char v52 = (unint64_t *)&v11[v48];
          }
          else
          {
            if (v46 != 4)
            {
              unint64_t v53 = *(unsigned int *)(v70 + 4 * v47);
              if ((int)v53 >= 1)
              {
                unint64_t v54 = 0;
                uint64_t v55 = (unint64_t *)&v65[v48];
                do
                {
                  *(v55 - 2) = v51;
                  *(v55 - 1) = v51;
                  *uint64_t v55 = v51;
                  v55[1] = v51;
                  v55 += 4;
                  v54 += 8;
                }
                while (v54 < v53);
              }
              goto LABEL_55;
            }
            *uint64_t v50 = v51;
            char v52 = v50 + 1;
          }
          *char v52 = v51;
        }
LABEL_55:
        if ((int)v47 <= v80)
        {
          uint64_t v56 = v76;
          int v57 = v77;
          uint64_t v58 = v78;
          do
          {
            sub_1DD2D9CCC((uint64_t)v50 + 4 * *(unsigned int *)(v58 + v45), (unsigned __int8 *)(v37 + *(int *)(v58 + 676)), (unsigned __int8 *)(v37 + *(int *)(v58 + 680)), v57, v10, v49, 2);
            v58 += 4;
            --v57;
            --v56;
          }
          while (v56);
        }
        int v46 = v82;
        v48 += v82;
        ++v41;
        unsigned int v11 = v79;
        uint64_t v47 = v81;
        if (v83 == v41) {
          goto LABEL_59;
        }
      }
    }
  }
  return -44;
}

uint64_t sub_1DD2D8CA4(char *a1, unint64_t a2, unsigned __int8 *a3, uint64_t a4, int *a5)
{
  if (!a4) {
    return -72;
  }
  uint64_t v5 = a4 - 8;
  if ((unint64_t)a4 < 8)
  {
    uint64_t v6 = *a3;
    switch(a4)
    {
      case 2:
        goto LABEL_18;
      case 3:
        goto LABEL_17;
      case 4:
        goto LABEL_16;
      case 5:
        goto LABEL_15;
      case 6:
        goto LABEL_14;
      case 7:
        v6 |= (unint64_t)a3[6] << 48;
LABEL_14:
        v6 += (unint64_t)a3[5] << 40;
LABEL_15:
        v6 += (unint64_t)a3[4] << 32;
LABEL_16:
        v6 += (unint64_t)a3[3] << 24;
LABEL_17:
        v6 += (unint64_t)a3[2] << 16;
LABEL_18:
        v6 += (unint64_t)a3[1] << 8;
        break;
      default:
        break;
    }
    if (!a3[a4 - 1]) {
      return -20;
    }
    uint64_t v5 = 0;
    unsigned int v7 = __clz(a3[a4 - 1]) - 8 * a4 + 41;
    uint64_t v8 = &a1[a2];
    int v9 = a5 + 1;
    int v10 = *a5;
    unsigned int v11 = HIWORD(*a5);
    if (a2 < 8) {
      goto LABEL_51;
    }
    goto LABEL_21;
  }
  if (!a3[a4 - 1]) {
    return -1;
  }
  if ((unint64_t)a4 <= 0xFFFFFFFFFFFFFF88)
  {
    uint64_t v6 = *(void *)&a3[v5];
    unsigned int v7 = __clz(a3[a4 - 1]) - 23;
    uint64_t v8 = &a1[a2];
    int v9 = a5 + 1;
    int v10 = *a5;
    unsigned int v11 = HIWORD(*a5);
    if (a2 <= 7)
    {
      if (a4 >= 16)
      {
        LODWORD(v12) = v7 >> 3;
        v7 &= 7u;
      }
      else
      {
        if (a4 == 8)
        {
LABEL_51:
          if ((unint64_t)(v8 - a1) >= 2)
          {
            unint64_t v48 = (unint64_t)(v8 - 2);
            int v49 = -v11 & 0x3F;
            while (v7 <= 0x40)
            {
              if (v5 >= 8)
              {
                BOOL v51 = 0;
                unsigned int v52 = v7 >> 3;
                v7 &= 7u;
              }
              else
              {
                if (!v5) {
                  break;
                }
                uint64_t v50 = &a3[v5 - (v7 >> 3)];
                BOOL v51 = v50 < a3;
                unsigned int v52 = v50 >= a3 ? v7 >> 3 : v5;
                v7 -= 8 * v52;
              }
              v5 -= v52;
              uint64_t v6 = *(void *)&a3[v5];
              if ((unint64_t)a1 > v48 || v51) {
                break;
              }
              unint64_t v53 = &v9[(unint64_t)(v6 << v7) >> v49];
              *(_WORD *)a1 = *(_WORD *)v53;
              v7 += *((unsigned __int8 *)v53 + 2);
              a1 += *((unsigned __int8 *)v53 + 3);
            }
            while ((unint64_t)a1 <= v48)
            {
              unint64_t v54 = &v9[(unint64_t)(v6 << v7) >> v49];
              *(_WORD *)a1 = *(_WORD *)v54;
              v7 += *((unsigned __int8 *)v54 + 2);
              a1 += *((unsigned __int8 *)v54 + 3);
            }
          }
          if (a1 < v8)
          {
            unint64_t v55 = (unint64_t)(v6 << v7) >> -(char)v11;
            uint64_t v56 = (char *)&v9[v55];
            *a1 = *v56;
            if (v56[3] == 1)
            {
              v7 += v56[2];
            }
            else if (v7 <= 0x3F)
            {
              unsigned int v57 = v7 + BYTE2(v9[v55]);
              if (v57 >= 0x40) {
                unsigned int v7 = 64;
              }
              else {
                unsigned int v7 = v57;
              }
            }
          }
          if (v7 == 64 && v5 == 0) {
            return a2;
          }
          else {
            return -20;
          }
        }
        uint64_t v12 = v7 >> 3;
        if (&a3[v5 - v12] < a3) {
          LODWORD(v12) = a4 - 8;
        }
        v7 -= 8 * v12;
      }
      v5 -= v12;
      uint64_t v6 = *(void *)&a3[v5];
      goto LABEL_51;
    }
LABEL_21:
    unsigned int v13 = v10 & 0xFC0000;
    int v14 = -v11 & 0x3F;
    unsigned int v15 = &a1[a2];
    BOOL v16 = a5 + 1;
    if (v13 >= 0xC0000)
    {
      unint64_t v34 = (unint64_t)(v15 - 7);
      do
      {
        if (v5 >= 8)
        {
          BOOL v36 = 0;
          unsigned int v37 = v7 >> 3;
          v7 &= 7u;
        }
        else
        {
          if (!v5) {
            goto LABEL_51;
          }
          uint64_t v35 = &a3[v5 - (v7 >> 3)];
          BOOL v36 = v35 < a3;
          if (v35 >= a3) {
            unsigned int v37 = v7 >> 3;
          }
          else {
            unsigned int v37 = v5;
          }
          v7 -= 8 * v37;
        }
        v5 -= v37;
        uint64_t v6 = *(void *)&a3[v5];
        if ((unint64_t)a1 >= v34) {
          break;
        }
        if (v36) {
          break;
        }
        uint64_t v38 = &v16[(unint64_t)(v6 << v7) >> v14];
        *(_WORD *)a1 = *(_WORD *)v38;
        unsigned int v39 = v7 + *((unsigned __int8 *)v38 + 2);
        int v40 = &a1[*((unsigned __int8 *)v38 + 3)];
        uint64_t v41 = &v16[(unint64_t)(v6 << v39) >> v14];
        *(_WORD *)int v40 = *(_WORD *)v41;
        unsigned int v42 = v39 + *((unsigned __int8 *)v41 + 2);
        unsigned int v43 = &v40[*((unsigned __int8 *)v41 + 3)];
        unsigned int v44 = &v16[(unint64_t)(v6 << v42) >> v14];
        *(_WORD *)unsigned int v43 = *(_WORD *)v44;
        unsigned int v45 = v42 + *((unsigned __int8 *)v44 + 2);
        int v46 = &v43[*((unsigned __int8 *)v44 + 3)];
        uint64_t v47 = &v16[(unint64_t)(v6 << v45) >> v14];
        *(_WORD *)int v46 = *(_WORD *)v47;
        unsigned int v7 = v45 + *((unsigned __int8 *)v47 + 2);
        a1 = &v46[*((unsigned __int8 *)v47 + 3)];
      }
      while (v7 <= 0x40);
    }
    else
    {
      unint64_t v17 = (unint64_t)(v15 - 9);
      do
      {
        if (v5 >= 8)
        {
          BOOL v19 = 0;
          unsigned int v20 = v7 >> 3;
          v7 &= 7u;
        }
        else
        {
          if (!v5) {
            goto LABEL_51;
          }
          int v18 = &a3[v5 - (v7 >> 3)];
          BOOL v19 = v18 < a3;
          if (v18 >= a3) {
            unsigned int v20 = v7 >> 3;
          }
          else {
            unsigned int v20 = v5;
          }
          v7 -= 8 * v20;
        }
        v5 -= v20;
        uint64_t v6 = *(void *)&a3[v5];
        if ((unint64_t)a1 >= v17) {
          break;
        }
        if (v19) {
          break;
        }
        int v21 = &v16[(unint64_t)(v6 << v7) >> v14];
        *(_WORD *)a1 = *(_WORD *)v21;
        unsigned int v22 = v7 + *((unsigned __int8 *)v21 + 2);
        uint64_t v23 = &a1[*((unsigned __int8 *)v21 + 3)];
        uint64_t v24 = &v16[(unint64_t)(v6 << v22) >> v14];
        *(_WORD *)uint64_t v23 = *(_WORD *)v24;
        unsigned int v25 = v22 + *((unsigned __int8 *)v24 + 2);
        uint64_t v26 = &v23[*((unsigned __int8 *)v24 + 3)];
        uint64_t v27 = &v16[(unint64_t)(v6 << v25) >> v14];
        *(_WORD *)uint64_t v26 = *(_WORD *)v27;
        unsigned int v28 = v25 + *((unsigned __int8 *)v27 + 2);
        unsigned int v29 = &v26[*((unsigned __int8 *)v27 + 3)];
        uint64_t v30 = &v16[(unint64_t)(v6 << v28) >> v14];
        *(_WORD *)unsigned int v29 = *(_WORD *)v30;
        unsigned int v31 = v28 + *((unsigned __int8 *)v30 + 2);
        unsigned int v32 = &v29[*((unsigned __int8 *)v30 + 3)];
        unsigned int v33 = &v16[(unint64_t)(v6 << v31) >> v14];
        *(_WORD *)unsigned int v32 = *(_WORD *)v33;
        unsigned int v7 = v31 + *((unsigned __int8 *)v33 + 2);
        a1 = &v32[*((unsigned __int8 *)v33 + 3)];
      }
      while (v7 <= 0x40);
    }
    goto LABEL_51;
  }
  return a4;
}

BOOL sub_1DD2D9134(unint64_t a1, unint64_t a2)
{
  if (a2 >= a1) {
    uint64_t v2 = 15;
  }
  else {
    uint64_t v2 = (16 * a2 / a1);
  }
  uint64_t v3 = (_DWORD *)((char *)&unk_1DD322EE0 + 16 * v2);
  unsigned int v4 = *v3 + v3[1] * (a1 >> 8);
  LODWORD(v3) = v3[2] + v3[3] * (a1 >> 8);
  return v3 + (v3 >> 5) < v4;
}

unint64_t sub_1DD2D9180(int *a1, unsigned char *a2, uint64_t a3, char *a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  unint64_t result = sub_1DD2D8410(a1, a4, a5, a6, a7);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    if (a5 <= result)
    {
      return -72;
    }
    else
    {
      return sub_1DD2D9230(a2, a3, (unsigned __int8 *)&a4[result], a5 - result, (uint64_t)a1);
    }
  }
  return result;
}

uint64_t sub_1DD2D9220(char *a1, unint64_t a2, unsigned __int8 *a3, uint64_t a4, int *a5)
{
  if (*((unsigned char *)a5 + 1)) {
    return sub_1DD2D8CA4(a1, a2, a3, a4, a5);
  }
  else {
    return sub_1DD2D9230(a1, a2, a3, a4, (uint64_t)a5);
  }
}

uint64_t sub_1DD2D9230(unsigned char *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  if (!a4) {
    return -72;
  }
  unint64_t v5 = (unint64_t)&a1[a2];
  uint64_t v6 = a5 + 4;
  int v7 = *(unsigned __int16 *)(a5 + 2);
  uint64_t v8 = a4 - 8;
  if ((unint64_t)a4 < 8)
  {
    uint64_t v10 = *a3;
    switch(a4)
    {
      case 2:
        goto LABEL_18;
      case 3:
        goto LABEL_17;
      case 4:
        goto LABEL_16;
      case 5:
        goto LABEL_15;
      case 6:
        goto LABEL_14;
      case 7:
        v10 |= (unint64_t)a3[6] << 48;
LABEL_14:
        v10 += (unint64_t)a3[5] << 40;
LABEL_15:
        v10 += (unint64_t)a3[4] << 32;
LABEL_16:
        v10 += (unint64_t)a3[3] << 24;
LABEL_17:
        v10 += (unint64_t)a3[2] << 16;
LABEL_18:
        v10 += (unint64_t)a3[1] << 8;
        break;
      default:
        break;
    }
    if (!a3[a4 - 1]) {
      return -20;
    }
    unsigned int v11 = __clz(a3[a4 - 1]) - 8 * a4 + 41;
    if (a2 < 4)
    {
      int v9 = a3;
      goto LABEL_39;
    }
    uint64_t v8 = 0;
    int v9 = a3;
LABEL_22:
    int v14 = -v7 & 0x3F;
    unsigned int v15 = a1;
    while (1)
    {
      if (v8 >= 8)
      {
        BOOL v18 = 0;
        LODWORD(v16) = v11 >> 3;
        v11 &= 7u;
      }
      else
      {
        if (!v8) {
          break;
        }
        uint64_t v16 = v11 >> 3;
        unint64_t v17 = (char *)&v9[-v16];
        BOOL v18 = v17 < (char *)a3;
        if (v17 < (char *)a3) {
          LODWORD(v16) = v8;
        }
        v11 -= 8 * v16;
      }
      v8 -= v16;
      int v9 = &a3[v8];
      uint64_t v10 = *(void *)&a3[v8];
      if ((unint64_t)v15 >= v5 - 3 || v18) {
        break;
      }
      BOOL v19 = (unsigned __int8 *)(v6 + 2 * ((unint64_t)(v10 << v11) >> v14));
      unsigned int v20 = v11 + *v19;
      *unsigned int v15 = v19[1];
      int v21 = (unsigned __int8 *)(v6 + 2 * ((unint64_t)(v10 << v20) >> v14));
      unsigned int v22 = v20 + *v21;
      v15[1] = v21[1];
      uint64_t v23 = (unsigned __int8 *)(v6 + 2 * ((unint64_t)(v10 << v22) >> v14));
      unsigned int v24 = v22 + *v23;
      v15[2] = v23[1];
      unsigned int v25 = (unsigned __int8 *)(v6 + 2 * ((unint64_t)(v10 << v24) >> v14));
      unsigned __int8 v26 = v25[1];
      unsigned int v11 = v24 + *v25;
      uint64_t v12 = v15 + 4;
      v15[3] = v26;
      v15 += 4;
      if (v11 > 0x40) {
        goto LABEL_40;
      }
    }
    uint64_t v12 = v15;
    goto LABEL_40;
  }
  if (!a3[a4 - 1]) {
    return -1;
  }
  if ((unint64_t)a4 <= 0xFFFFFFFFFFFFFF88)
  {
    int v9 = &a3[v8];
    uint64_t v10 = *(void *)&a3[v8];
    unsigned int v11 = __clz(a3[a4 - 1]) - 23;
    if (a2 <= 3)
    {
      if (a4 >= 16)
      {
        LODWORD(v13) = v11 >> 3;
        v11 &= 7u;
      }
      else
      {
        uint64_t v12 = a1;
        if (!v8)
        {
LABEL_40:
          if ((unint64_t)v12 < v5)
          {
            int v27 = -v7 & 0x3F;
            uint64_t v28 = &a1[a2] - v12;
            do
            {
              unsigned int v29 = (unsigned __int8 *)(v6 + 2 * ((unint64_t)(v10 << v11) >> v27));
              v11 += *v29;
              *v12++ = v29[1];
              --v28;
            }
            while (v28);
          }
          if (v11 == 64 && v9 == a3) {
            return a2;
          }
          else {
            return -20;
          }
        }
        uint64_t v13 = v11 >> 3;
        if (&v9[-v13] < a3) {
          LODWORD(v13) = v8;
        }
        v11 -= 8 * v13;
      }
      v9 -= v13;
      uint64_t v10 = *(void *)v9;
LABEL_39:
      uint64_t v12 = a1;
      goto LABEL_40;
    }
    goto LABEL_22;
  }
  return a4;
}

unint64_t sub_1DD2D94AC(char *a1, unint64_t a2, unsigned __int16 *a3, unint64_t a4, unsigned int *a5, char a6)
{
  if (*((unsigned char *)a5 + 1)) {
    return sub_1DD2D94BC(a1, a2, a3, a4, a5, a6);
  }
  else {
    return sub_1DD2D989C(a1, a2, a3, a4, (uint64_t)a5, a6);
  }
}

unint64_t sub_1DD2D94BC(char *a1, unint64_t a2, unsigned __int16 *a3, unint64_t a4, unsigned int *a5, char a6)
{
  if ((a6 & 0x20) != 0) {
    goto LABEL_55;
  }
  uint64_t v53 = 0;
  long long v51 = 0u;
  long long v52 = 0u;
  memset(v50, 0, sizeof(v50));
  unint64_t result = sub_1DD2DB908(v50, (uint64_t)a1, a2, a3, a4, (uint64_t)a5);
  if (result - 1 > 0xFFFFFFFFFFFFFF87) {
    goto LABEL_54;
  }
  uint64_t v12 = a5 + 1;
  sub_1DD2DB6A0(v50);
  uint64_t v13 = 0;
  unint64_t v14 = (a2 + 3) >> 2;
  unsigned int v15 = a1;
  do
  {
    uint64_t v16 = (char *)(&a1[a2] - v15);
    v15 += v14;
    if (v14 > (unint64_t)v16) {
      unsigned int v15 = &a1[a2];
    }
    unint64_t v17 = (char *)v50 + 8 * v13;
    BOOL v18 = v17 + 32;
    BOOL v19 = (char *)*((void *)v17 + 4);
    if (v19 > v15) {
      return -20;
    }
    unsigned int v20 = *(uint64_t **)v17;
    if (*(void *)v17 < (unint64_t)(*((void *)v17 + 15) - 8)) {
      return -20;
    }
    uint64_t v21 = *v20;
    unint64_t v22 = __clz(__rbit64(*((void *)&v50[4] + v13)));
    uint64_t v23 = (uint64_t *)*((void *)&v51 + 1);
    unint64_t v24 = *((void *)&v51 + 1) + 8;
    unint64_t v25 = v15 - v19;
    if ((unint64_t)(v15 - v19) < 8)
    {
      if ((unint64_t)v20 >= v24)
      {
        unsigned int v20 = (uint64_t *)((char *)v20 - (v22 >> 3));
        unsigned int v43 = v22 & 7;
      }
      else
      {
        if (v20 == *((uint64_t **)&v51 + 1))
        {
          unsigned int v43 = v22;
          goto LABEL_28;
        }
        uint64_t v42 = v22 >> 3;
        if ((unint64_t)v20 - v42 >= *((void *)&v51 + 1)) {
          uint64_t v42 = v42;
        }
        else {
          uint64_t v42 = (v20 - DWORD2(v51));
        }
        unsigned int v20 = (uint64_t *)((char *)v20 - v42);
        unsigned int v43 = v22 - 8 * v42;
      }
      uint64_t v21 = *v20;
LABEL_28:
      unsigned __int8 v26 = v19;
      goto LABEL_32;
    }
    unsigned __int8 v26 = v19;
    while ((unint64_t)v20 >= v24)
    {
      BOOL v28 = 0;
      LODWORD(v27) = v22 >> 3;
      LODWORD(v22) = v22 & 7;
LABEL_16:
      unsigned int v20 = (uint64_t *)((char *)v20 - v27);
      uint64_t v21 = *v20;
      if (v26 < v15 - 9 && !v28)
      {
        unsigned int v29 = &v12[(unint64_t)(v21 << v22) >> 53];
        *(_WORD *)unsigned __int8 v26 = *(_WORD *)v29;
        int v30 = v22 + *((unsigned __int8 *)v29 + 2);
        unsigned int v31 = &v26[*((unsigned __int8 *)v29 + 3)];
        unsigned int v32 = &v12[(unint64_t)(v21 << v30) >> 53];
        *(_WORD *)unsigned int v31 = *(_WORD *)v32;
        int v33 = v30 + *((unsigned __int8 *)v32 + 2);
        unint64_t v34 = &v31[*((unsigned __int8 *)v32 + 3)];
        uint64_t v35 = &v12[(unint64_t)(v21 << v33) >> 53];
        *(_WORD *)unint64_t v34 = *(_WORD *)v35;
        int v36 = v33 + *((unsigned __int8 *)v35 + 2);
        unsigned int v37 = &v34[*((unsigned __int8 *)v35 + 3)];
        uint64_t v38 = &v12[(unint64_t)(v21 << v36) >> 53];
        *(_WORD *)unsigned int v37 = *(_WORD *)v38;
        int v39 = v36 + *((unsigned __int8 *)v38 + 2);
        int v40 = &v37[*((unsigned __int8 *)v38 + 3)];
        uint64_t v41 = &v12[(unint64_t)(v21 << v39) >> 53];
        *(_WORD *)int v40 = *(_WORD *)v41;
        LODWORD(v22) = v39 + *((unsigned __int8 *)v41 + 2);
        unsigned __int8 v26 = &v40[*((unsigned __int8 *)v41 + 3)];
        if (v22 <= 0x40) {
          continue;
        }
      }
      goto LABEL_31;
    }
    if (v20 != v23)
    {
      uint64_t v27 = v22 >> 3;
      BOOL v28 = (uint64_t *)((char *)v20 - v27) < v23;
      if ((uint64_t *)((char *)v20 - v27) < v23) {
        LODWORD(v27) = v20 - v23;
      }
      LODWORD(v22) = v22 - 8 * v27;
      goto LABEL_16;
    }
    unsigned int v20 = v23;
LABEL_31:
    unint64_t v25 = v15 - v26;
    unsigned int v43 = v22;
LABEL_32:
    if (v25 >= 2)
    {
      unint64_t v44 = (unint64_t)(v15 - 2);
      while (v43 <= 0x40)
      {
        if ((unint64_t)v20 >= v24)
        {
          BOOL v46 = 0;
          LODWORD(v45) = v43 >> 3;
          v43 &= 7u;
        }
        else
        {
          if (v20 == v23) {
            break;
          }
          uint64_t v45 = v43 >> 3;
          BOOL v46 = (uint64_t *)((char *)v20 - v45) < v23;
          if ((uint64_t *)((char *)v20 - v45) < v23) {
            LODWORD(v45) = v20 - v23;
          }
          v43 -= 8 * v45;
        }
        unsigned int v20 = (uint64_t *)((char *)v20 - v45);
        uint64_t v21 = *v20;
        if ((unint64_t)v26 > v44 || v46) {
          break;
        }
        uint64_t v47 = &v12[(unint64_t)(v21 << v43) >> 53];
        *(_WORD *)unsigned __int8 v26 = *(_WORD *)v47;
        v43 += *((unsigned __int8 *)v47 + 2);
        v26 += *((unsigned __int8 *)v47 + 3);
      }
      while ((unint64_t)v26 <= v44)
      {
        unint64_t v48 = &v12[(unint64_t)(v21 << v43) >> 53];
        *(_WORD *)unsigned __int8 v26 = *(_WORD *)v48;
        LOBYTE(v43) = v43 + *((unsigned char *)v48 + 2);
        v26 += *((unsigned __int8 *)v48 + 3);
      }
    }
    if (v26 < v15) {
      *v26++ = *((unsigned char *)v12 + (((unint64_t)(v21 << v43) >> 51) & 0x1FFC));
    }
    int v49 = (char *)(*v18 + v26 - v19);
    *BOOL v18 = v49;
    if (v49 != v15) {
      return -20;
    }
    ++v13;
  }
  while (v13 != 4);
  unint64_t result = a2;
LABEL_54:
  if (!result)
  {
LABEL_55:
    return sub_1DD2D9F78(a1, a2, a3, a4, a5);
  }
  return result;
}

unint64_t sub_1DD2D989C(unsigned char *a1, unint64_t a2, unsigned __int16 *a3, unint64_t a4, uint64_t a5, char a6)
{
  if ((a6 & 0x20) != 0)
  {
LABEL_37:
    return sub_1DD2DBA88(a1, a2, a3, a4, a5);
  }
  uint64_t v46 = 0;
  long long v44 = 0u;
  long long v45 = 0u;
  memset(v43, 0, sizeof(v43));
  unint64_t result = sub_1DD2DB908(v43, (uint64_t)a1, a2, a3, a4, a5);
  if (result - 1 > 0xFFFFFFFFFFFFFF87)
  {
LABEL_36:
    if (result) {
      return result;
    }
    goto LABEL_37;
  }
  uint64_t v12 = a5 + 4;
  sub_1DD2DC880(v43);
  uint64_t v13 = 0;
  unint64_t v14 = (a2 + 3) >> 2;
  unsigned int v15 = a1;
  while (1)
  {
    uint64_t v16 = (unsigned char *)(&a1[a2] - v15);
    v15 += v14;
    if (v14 > (unint64_t)v16) {
      unsigned int v15 = &a1[a2];
    }
    unint64_t v17 = (char *)v43 + 8 * v13;
    BOOL v18 = v17 + 32;
    BOOL v19 = (unsigned char *)*((void *)v17 + 4);
    if (v19 > v15) {
      return -20;
    }
    unsigned int v20 = *(uint64_t **)v17;
    if (*(void *)v17 < (unint64_t)(*((void *)v17 + 15) - 8)) {
      return -20;
    }
    uint64_t v21 = *v20;
    unint64_t v22 = __clz(__rbit64(*((void *)&v43[4] + v13)));
    uint64_t v23 = (uint64_t *)*((void *)&v44 + 1);
    unint64_t v24 = *((void *)&v44 + 1) + 8;
    uint64_t v25 = v15 - v19;
    if (v15 - v19 < 4)
    {
      if ((unint64_t)v20 >= v24)
      {
        int v39 = (uint64_t *)((char *)v20 - (v22 >> 3));
        LODWORD(v22) = v22 & 7;
        uint64_t v21 = *v39;
      }
      else if (v20 != *((uint64_t **)&v44 + 1))
      {
        uint64_t v38 = v22 >> 3;
        if ((unint64_t)v20 - v38 >= *((void *)&v44 + 1)) {
          uint64_t v38 = v38;
        }
        else {
          uint64_t v38 = (v20 - DWORD2(v44));
        }
        LODWORD(v22) = v22 - 8 * v38;
        uint64_t v21 = *(uint64_t *)((char *)v20 - v38);
      }
      unsigned int v37 = v19;
    }
    else
    {
      unsigned __int8 v26 = v19;
      while (1)
      {
        if ((unint64_t)v20 >= v24)
        {
          BOOL v28 = 0;
          LODWORD(v27) = v22 >> 3;
          LODWORD(v22) = v22 & 7;
        }
        else
        {
          if (v20 == v23) {
            break;
          }
          uint64_t v27 = v22 >> 3;
          BOOL v28 = (uint64_t *)((char *)v20 - v27) < v23;
          if ((uint64_t *)((char *)v20 - v27) < v23) {
            LODWORD(v27) = v20 - v23;
          }
          LODWORD(v22) = v22 - 8 * v27;
        }
        unsigned int v20 = (uint64_t *)((char *)v20 - v27);
        uint64_t v21 = *v20;
        if (v26 >= v15 - 3 || v28) {
          break;
        }
        unsigned int v29 = (unsigned __int8 *)(v12 + 2 * ((unint64_t)(v21 << v22) >> 53));
        int v30 = v22 + *v29;
        *unsigned __int8 v26 = v29[1];
        unsigned int v31 = (unsigned __int8 *)(v12 + 2 * ((unint64_t)(v21 << v30) >> 53));
        int v32 = v30 + *v31;
        v26[1] = v31[1];
        int v33 = (unsigned __int8 *)(v12 + 2 * ((unint64_t)(v21 << v32) >> 53));
        int v34 = v32 + *v33;
        v26[2] = v33[1];
        uint64_t v35 = (unsigned __int8 *)(v12 + 2 * ((unint64_t)(v21 << v34) >> 53));
        unsigned __int8 v36 = v35[1];
        LODWORD(v22) = v34 + *v35;
        unsigned int v37 = v26 + 4;
        v26[3] = v36;
        v26 += 4;
        if (v22 > 0x40) {
          goto LABEL_29;
        }
      }
      unsigned int v37 = v26;
    }
LABEL_29:
    if (v37 < v15)
    {
      uint64_t v40 = v15 - v37;
      do
      {
        uint64_t v41 = (unsigned __int8 *)(v12 + 2 * ((unint64_t)(v21 << v22) >> 53));
        LODWORD(v22) = v22 + *v41;
        *v37++ = v41[1];
        --v40;
      }
      while (v40);
      BOOL v19 = (unsigned char *)*v18;
    }
    uint64_t v42 = &v19[v25];
    *BOOL v18 = v42;
    if (v42 != v15) {
      return -20;
    }
    if (++v13 == 4)
    {
      unint64_t result = a2;
      goto LABEL_36;
    }
  }
}

unint64_t sub_1DD2D9B7C(int *a1, char *a2, unint64_t a3, char *a4, unint64_t a5, uint64_t a6, unint64_t a7, char a8)
{
  if (!a3) {
    return -70;
  }
  if (!a5) {
    return -20;
  }
  if (sub_1DD2D9134(a3, a5))
  {
    unint64_t result = sub_1DD2D8808(a1, a4, a5, a6, a7);
    if (result > 0xFFFFFFFFFFFFFF88) {
      return result;
    }
    if (a5 > result)
    {
      return sub_1DD2D94BC(a2, a3, (unsigned __int16 *)&a4[result], a5 - result, (unsigned int *)a1, a8);
    }
    return -72;
  }
  unint64_t result = sub_1DD2D8410(a1, a4, a5, a6, a7);
  if (result > 0xFFFFFFFFFFFFFF88) {
    return result;
  }
  if (a5 <= result) {
    return -72;
  }
  return sub_1DD2D989C(a2, a3, (unsigned __int16 *)&a4[result], a5 - result, (uint64_t)a1, a8);
}

uint64_t sub_1DD2D9CCC(uint64_t result, unsigned __int8 *a2, unsigned __int8 *a3, int a4, char a5, int a6, int a7)
{
  uint64_t v7 = (1 << (a5 - a4));
  switch((int)v7)
  {
    case 1:
      for (; a2 != a3; result += 4)
      {
        int v9 = *a2++;
        int v8 = v9;
        int v10 = a6 + (v9 << 8);
        if (a7 != 1) {
          int v8 = v10;
        }
        *(_DWORD *)unint64_t result = (a7 << 24) + (a4 << 16) + v8;
      }
      break;
    case 2:
      for (; a2 != a3; result += 8)
      {
        int v12 = *a2++;
        int v11 = v12;
        int v13 = a6 + (v12 << 8);
        if (a7 != 1) {
          int v11 = v13;
        }
        int v14 = (a7 << 24) + (a4 << 16) + v11;
        *(_DWORD *)unint64_t result = v14;
        *(_DWORD *)(result + 4) = v14;
      }
      break;
    case 4:
      for (; a2 != a3; result += 16)
      {
        int v19 = *a2++;
        int v18 = v19;
        int v20 = a6 + (v19 << 8);
        if (a7 != 1) {
          int v18 = v20;
        }
        unint64_t v21 = ((a7 << 24) + (a4 << 16) + v18) | ((unint64_t)((a7 << 24)
                                                                                              + (a4 << 16)
                                                                                              + v18) << 32);
        *(void *)unint64_t result = v21;
        *(void *)(result + 8) = v21;
      }
      break;
    case 8:
      for (; a2 != a3; result += 32)
      {
        int v23 = *a2++;
        int v22 = v23;
        int v24 = a6 + (v23 << 8);
        if (a7 != 1) {
          int v22 = v24;
        }
        unint64_t v25 = ((a7 << 24) + (a4 << 16) + v22) | ((unint64_t)((a7 << 24)
                                                                                              + (a4 << 16)
                                                                                              + v22) << 32);
        *(void *)unint64_t result = v25;
        *(void *)(result + 8) = v25;
        *(void *)(result + 16) = v25;
        *(void *)(result + 24) = v25;
      }
      break;
    default:
      for (; a2 != a3; ++a2)
      {
        unsigned int v15 = (unint64_t *)result;
        int v16 = *a2;
        if (a7 != 1) {
          int v16 = a6 + (v16 << 8);
        }
        unint64_t v17 = ((a7 << 24) + (a4 << 16) + v16) | ((unint64_t)((a7 << 24)
                                                                                              + (a4 << 16)
                                                                                              + v16) << 32);
        result += 4 * v7;
        do
        {
          *unsigned int v15 = v17;
          v15[1] = v17;
          v15[2] = v17;
          v15[3] = v17;
          v15 += 4;
        }
        while (v15 != (unint64_t *)result);
      }
      break;
  }
  return result;
}

uint64_t sub_1DD2D9E58(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  if (a3)
  {
    *(void *)(a1 + 24) = a2;
    *(void *)(a1 + 32) = a2 + 8;
    if (a3 < 8)
    {
      *(void *)(a1 + 16) = a2;
      uint64_t v5 = *a2;
      *(void *)a1 = v5;
      switch(a3)
      {
        case 2uLL:
          goto LABEL_12;
        case 3uLL:
          goto LABEL_11;
        case 4uLL:
          goto LABEL_10;
        case 5uLL:
          goto LABEL_9;
        case 6uLL:
          goto LABEL_8;
        case 7uLL:
          v5 |= (unint64_t)a2[6] << 48;
          *(void *)a1 = v5;
LABEL_8:
          v5 += (unint64_t)a2[5] << 40;
          *(void *)a1 = v5;
LABEL_9:
          v5 += (unint64_t)a2[4] << 32;
          *(void *)a1 = v5;
LABEL_10:
          v5 += (unint64_t)a2[3] << 24;
          *(void *)a1 = v5;
LABEL_11:
          v5 += (unint64_t)a2[2] << 16;
          *(void *)a1 = v5;
LABEL_12:
          *(void *)a1 = v5 + ((unint64_t)a2[1] << 8);
          break;
        default:
          break;
      }
      if (!a2[a3 - 1])
      {
        *(_DWORD *)(a1 + 8) = 0;
        return -20;
      }
      unsigned int v4 = __clz(a2[a3 - 1]) - 8 * a3 + 41;
    }
    else
    {
      uint64_t v3 = *(void *)&a2[a3 - 8];
      *(void *)(a1 + 16) = &a2[a3 - 8];
      *(void *)a1 = v3;
      if (!a2[a3 - 1])
      {
        *(_DWORD *)(a1 + 8) = 0;
        return -1;
      }
      unsigned int v4 = __clz(a2[a3 - 1]) - 23;
    }
    *(_DWORD *)(a1 + 8) = v4;
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    return -72;
  }
  return a3;
}

unint64_t sub_1DD2D9F78(_WORD *a1, unint64_t a2, unsigned __int16 *a3, unint64_t a4, unsigned int *a5)
{
  if (a4 < 0xA) {
    return -20;
  }
  uint64_t v303 = v5;
  uint64_t v304 = v6;
  int v10 = a5 + 1;
  unsigned int v11 = *a5;
  unint64_t v302 = 0;
  long long v300 = 0u;
  long long v301 = 0u;
  unint64_t result = -20;
  if (a2 >= 6)
  {
    int v13 = (char *)a1 + a2;
    uint64_t v14 = *a3;
    uint64_t v15 = a3[1];
    uint64_t v16 = a3[2];
    unint64_t v18 = v14 + 6 + v15 + v16;
    unint64_t v19 = (unint64_t)a1 + ((a2 + 3) >> 2) + ((a2 + 3) >> 2);
    unint64_t v20 = v19 + ((a2 + 3) >> 2);
    if (a4 >= v18 && v20 <= (unint64_t)v13)
    {
      if (!*a3) {
        return -72;
      }
      int v22 = (unsigned __int8 *)(a3 + 3);
      if (v14 < 8)
      {
        uint64_t v25 = *v22;
        switch(*a3)
        {
          case 2u:
            goto LABEL_19;
          case 3u:
            goto LABEL_18;
          case 4u:
            goto LABEL_17;
          case 5u:
            goto LABEL_16;
          case 6u:
            goto LABEL_15;
          case 7u:
            v25 |= (unint64_t)*((unsigned __int8 *)a3 + 12) << 48;
LABEL_15:
            v25 += (unint64_t)*((unsigned __int8 *)a3 + 11) << 40;
LABEL_16:
            v25 += (unint64_t)*((unsigned __int8 *)a3 + 10) << 32;
LABEL_17:
            v25 += (unint64_t)*((unsigned __int8 *)a3 + 9) << 24;
LABEL_18:
            v25 += (unint64_t)*((unsigned __int8 *)a3 + 8) << 16;
LABEL_19:
            v25 += (unint64_t)*((unsigned __int8 *)a3 + 7) << 8;
            break;
          default:
            break;
        }
        unsigned int v27 = v22[v14 - 1];
        if (!v27) {
          return result;
        }
        unsigned int v26 = __clz(v27) - 8 * v14 + 41;
        uint64_t v24 = 6;
        if (!a3[1]) {
          return -72;
        }
      }
      else
      {
        unsigned int v23 = v22[v14 - 1];
        if (!v23) {
          return -1;
        }
        uint64_t v24 = v14 - 2;
        uint64_t v25 = *(void *)((char *)a3 + v14 - 2);
        unsigned int v26 = __clz(v23) - 23;
        if (!a3[1]) {
          return -72;
        }
      }
      uint64_t v17 = v14 + 6;
      BOOL v28 = (unsigned __int8 *)a3 + v14 + 6;
      if (v15 < 8)
      {
        uint64_t v30 = *v28;
        switch(a3[1])
        {
          case 2u:
            goto LABEL_31;
          case 3u:
            goto LABEL_30;
          case 4u:
            goto LABEL_29;
          case 5u:
            goto LABEL_28;
          case 6u:
            goto LABEL_27;
          case 7u:
            v30 |= (unint64_t)v28[6] << 48;
LABEL_27:
            v30 += (unint64_t)v28[5] << 40;
LABEL_28:
            v30 += (unint64_t)v28[4] << 32;
LABEL_29:
            v30 += (unint64_t)v28[3] << 24;
LABEL_30:
            v30 += (unint64_t)v28[2] << 16;
LABEL_31:
            v30 += (unint64_t)v28[1] << 8;
            break;
          default:
            break;
        }
        if (!v28[v15 - 1]) {
          return -20;
        }
        uint64_t v29 = 0;
        unsigned int v31 = __clz(v28[v15 - 1]) - 8 * v15 + 41;
      }
      else
      {
        if (!v28[v15 - 1]) {
          return -1;
        }
        uint64_t v29 = v15 - 8;
        uint64_t v30 = *(void *)&v28[v15 - 8];
        unsigned int v31 = __clz(v28[v15 - 1]) - 23;
      }
      if (a3[2])
      {
        int v32 = &v28[v15];
        if (v16 >= 8)
        {
          if (v32[v16 - 1])
          {
            v290 = (char *)a1 + ((a2 + 3) >> 2);
            v291 = (_WORD *)(v19 + ((a2 + 3) >> 2));
            v295 = (unsigned __int8 *)a3 + v17;
            uint64_t v296 = v29;
            uint64_t v289 = v24;
            v292 = (char *)a1 + a2;
            uint64_t v298 = v16 - 8;
            uint64_t v299 = *(void *)&v32[v16 - 8];
            unsigned int v33 = __clz(v32[v16 - 1]) - 23;
LABEL_49:
            unsigned int v297 = v33;
            v294 = v32;
            unint64_t result = sub_1DD2D9E58((uint64_t)&v300, &v32[v16], a4 - v18);
            unint64_t v36 = (unint64_t)v291;
            unint64_t v35 = (unint64_t)v292;
            uint64_t v38 = v289;
            unint64_t v37 = (unint64_t)v290;
            int v39 = (char *)v19;
            unint64_t v40 = (unint64_t)v295;
            if (result > 0xFFFFFFFFFFFFFF88) {
              return result;
            }
            unint64_t v41 = (unint64_t)(v292 - 7);
            unsigned int v42 = HIWORD(v11);
            if ((unint64_t)(v292 - (char *)v291) < 8 || (unint64_t)v291 >= v41)
            {
              int v49 = v290;
              unint64_t v48 = v39;
              uint64_t v47 = v291;
            }
            else
            {
              uint64_t v43 = v300;
              int v44 = -v42 & 0x3F;
              unsigned int v45 = DWORD2(v300);
              unint64_t v293 = v302;
              uint64_t v46 = (uint64_t *)v301;
              uint64_t v47 = v291;
              v288 = v39;
              unint64_t v48 = v39;
              int v49 = v290;
              do
              {
                unint64_t v50 = v41;
                long long v51 = &v10[(unint64_t)(v25 << v26) >> v44];
                *a1 = *(_WORD *)v51;
                unsigned int v52 = v26 + *((unsigned __int8 *)v51 + 2);
                uint64_t v53 = (_WORD *)((char *)a1 + *((unsigned __int8 *)v51 + 3));
                unint64_t v54 = &v10[(unint64_t)(v30 << v31) >> v44];
                *(_WORD *)int v49 = *(_WORD *)v54;
                unsigned int v55 = v31 + *((unsigned __int8 *)v54 + 2);
                uint64_t v56 = &v49[*((unsigned __int8 *)v54 + 3)];
                unsigned int v57 = &v10[(unint64_t)(v299 << v297) >> v44];
                *unint64_t v48 = *(_WORD *)v57;
                unsigned int v58 = v297 + *((unsigned __int8 *)v57 + 2);
                unint64_t v59 = (_WORD *)((char *)v48 + *((unsigned __int8 *)v57 + 3));
                int v60 = &v10[(unint64_t)(v43 << v45) >> v44];
                *uint64_t v47 = *(_WORD *)v60;
                unsigned int v61 = v45 + *((unsigned __int8 *)v60 + 2);
                uint64_t v62 = (_WORD *)((char *)v47 + *((unsigned __int8 *)v60 + 3));
                int v63 = &v10[(unint64_t)(v25 << v52) >> v44];
                *uint64_t v53 = *(_WORD *)v63;
                unsigned int v64 = v52 + *((unsigned __int8 *)v63 + 2);
                uint64_t v65 = *((unsigned __int8 *)v63 + 3);
                uint64_t v66 = &v10[(unint64_t)(v30 << v55) >> v44];
                *(_WORD *)uint64_t v56 = *(_WORD *)v66;
                unsigned int v67 = v55 + *((unsigned __int8 *)v66 + 2);
                uint64_t v68 = &v56[*((unsigned __int8 *)v66 + 3)];
                int v69 = &v10[(unint64_t)(v299 << v58) >> v44];
                *unint64_t v59 = *(_WORD *)v69;
                unsigned int v70 = v58 + *((unsigned __int8 *)v69 + 2);
                uint64_t v71 = (_WORD *)((char *)v59 + *((unsigned __int8 *)v69 + 3));
                int v72 = &v10[(unint64_t)(v43 << v61) >> v44];
                _WORD *v62 = *(_WORD *)v72;
                unsigned int v73 = v61 + *((unsigned __int8 *)v72 + 2);
                int v74 = (_WORD *)((char *)v62 + *((unsigned __int8 *)v72 + 3));
                int v75 = (_WORD *)((char *)v53 + v65);
                uint64_t v76 = &v10[(unint64_t)(v25 << v64) >> v44];
                _WORD *v75 = *(_WORD *)v76;
                LODWORD(v65) = v64 + *((unsigned __int8 *)v76 + 2);
                int v77 = (_WORD *)((char *)v75 + *((unsigned __int8 *)v76 + 3));
                uint64_t v78 = &v10[(unint64_t)(v30 << v67) >> v44];
                *(_WORD *)uint64_t v68 = *(_WORD *)v78;
                unsigned int v79 = v67 + *((unsigned __int8 *)v78 + 2);
                int v80 = &v68[*((unsigned __int8 *)v78 + 3)];
                uint64_t v81 = &v10[(unint64_t)(v299 << v70) >> v44];
                _WORD *v71 = *(_WORD *)v81;
                unsigned int v82 = v70 + *((unsigned __int8 *)v81 + 2);
                int v83 = (_WORD *)((char *)v71 + *((unsigned __int8 *)v81 + 3));
                unint64_t v84 = &v10[(unint64_t)(v43 << v73) >> v44];
                _WORD *v74 = *(_WORD *)v84;
                unsigned int v85 = v73 + *((unsigned __int8 *)v84 + 2);
                unint64_t v86 = (_WORD *)((char *)v74 + *((unsigned __int8 *)v84 + 3));
                unint64_t v87 = &v10[(unint64_t)(v25 << v65) >> v44];
                _WORD *v77 = *(_WORD *)v87;
                unsigned int v26 = v65 + *((unsigned __int8 *)v87 + 2);
                uint64_t v88 = *((unsigned __int8 *)v87 + 3);
                uint64_t v89 = &v10[(unint64_t)(v30 << v79) >> v44];
                *(_WORD *)int v80 = *(_WORD *)v89;
                int v90 = *((unsigned __int8 *)v89 + 2);
                uint64_t v91 = *((unsigned __int8 *)v89 + 3);
                unint64_t v92 = &v10[(unint64_t)(v299 << v82) >> v44];
                *int v83 = *(_WORD *)v92;
                int v93 = *((unsigned __int8 *)v92 + 2);
                uint64_t v94 = *((unsigned __int8 *)v92 + 3);
                unint64_t v95 = &v10[(unint64_t)(v43 << v85) >> v44];
                _WORD *v86 = *(_WORD *)v95;
                if (v38 < 14)
                {
                  uint64_t v98 = v38;
                  int v96 = 3;
                }
                else
                {
                  int v96 = 0;
                  uint64_t v97 = v38 - (v26 >> 3);
                  v26 &= 7u;
                  uint64_t v98 = v97;
                  uint64_t v25 = *(void *)((char *)a3 + v97);
                }
                unsigned int v31 = v79 + v90;
                if (v296 < 8)
                {
                  int v99 = 3;
                }
                else
                {
                  int v99 = 0;
                  uint64_t v100 = v296 - (v31 >> 3);
                  v31 &= 7u;
                  uint64_t v296 = v100;
                  uint64_t v30 = *(void *)&v295[v100];
                }
                unsigned int v101 = v82 + v93;
                uint64_t v102 = v298;
                if (v298 < 8)
                {
                  int v103 = 3;
                }
                else
                {
                  int v103 = 0;
                  uint64_t v102 = v298 - (v101 >> 3);
                  v101 &= 7u;
                  uint64_t v299 = *(void *)&v294[v102];
                }
                unsigned int v45 = v85 + *((unsigned __int8 *)v95 + 2);
                unsigned int v297 = v101;
                uint64_t v298 = v102;
                if ((unint64_t)v46 < v293)
                {
                  int v104 = 3;
                }
                else
                {
                  int v104 = 0;
                  uint64_t v46 = (uint64_t *)((char *)v46 - (v45 >> 3));
                  v45 &= 7u;
                  uint64_t v43 = *v46;
                }
                a1 = (_WORD *)((char *)v77 + v88);
                int v49 = &v80[v91];
                unint64_t v48 = (_WORD *)((char *)v83 + v94);
                uint64_t v47 = (_WORD *)((char *)v86 + *((unsigned __int8 *)v95 + 3));
                int v105 = v99 | v96 | v103 | v104;
                uint64_t v38 = v98;
                unint64_t v41 = v50;
              }
              while (!v105 && (unint64_t)v47 < v50);
              *(void *)&long long v301 = v46;
              *(void *)&long long v300 = v43;
              DWORD2(v300) = v45;
              unint64_t v36 = (unint64_t)v291;
              unint64_t v35 = (unint64_t)v292;
              unsigned int v42 = HIWORD(v11);
              int v39 = v288;
              unint64_t v40 = (unint64_t)v295;
              unint64_t v37 = (unint64_t)v290;
            }
            unint64_t result = -20;
            if ((unint64_t)a1 > v37 || v49 > v39 || (unint64_t)v48 > v36) {
              return result;
            }
            if (v37 - (unint64_t)a1 < 8)
            {
              uint64_t v106 = v296;
              uint64_t v107 = v299;
              if (v26 > 0x40) {
                goto LABEL_109;
              }
              if (v38 >= 14)
              {
                LODWORD(v124) = v26 >> 3;
                v26 &= 7u;
              }
              else
              {
                if (v38 == 6) {
                  goto LABEL_109;
                }
                uint64_t v124 = v26 >> 3;
                if (v38 - v124 < 6) {
                  LODWORD(v124) = v38 - 6;
                }
                v26 -= 8 * v124;
              }
              v38 -= v124;
              uint64_t v25 = *(void *)((char *)a3 + v38);
            }
            else
            {
              uint64_t v106 = v296;
              uint64_t v107 = v299;
              if (BYTE2(v11) >= 0xCu)
              {
                if (v26 <= 0x40)
                {
                  int v125 = -v42 & 0x3F;
                  do
                  {
                    if (v38 >= 14)
                    {
                      BOOL v127 = 0;
                      LODWORD(v126) = v26 >> 3;
                      v26 &= 7u;
                    }
                    else
                    {
                      if (v38 == 6) {
                        break;
                      }
                      uint64_t v126 = v26 >> 3;
                      BOOL v127 = v38 - v126 < 6;
                      if (v38 - v126 < 6) {
                        LODWORD(v126) = v38 - 6;
                      }
                      v26 -= 8 * v126;
                    }
                    v38 -= v126;
                    uint64_t v25 = *(void *)((char *)a3 + v38);
                    if ((unint64_t)a1 >= v37 - 7) {
                      break;
                    }
                    if (v127) {
                      break;
                    }
                    unsigned int v128 = &v10[(unint64_t)(v25 << v26) >> v125];
                    *a1 = *(_WORD *)v128;
                    unsigned int v129 = v26 + *((unsigned __int8 *)v128 + 2);
                    unsigned int v130 = (_WORD *)((char *)a1 + *((unsigned __int8 *)v128 + 3));
                    uint64_t v131 = &v10[(unint64_t)(v25 << v129) >> v125];
                    *unsigned int v130 = *(_WORD *)v131;
                    unsigned int v132 = v129 + *((unsigned __int8 *)v131 + 2);
                    unsigned int v133 = (_WORD *)((char *)v130 + *((unsigned __int8 *)v131 + 3));
                    unsigned int v134 = &v10[(unint64_t)(v25 << v132) >> v125];
                    _WORD *v133 = *(_WORD *)v134;
                    unsigned int v135 = v132 + *((unsigned __int8 *)v134 + 2);
                    uint64_t v136 = (_WORD *)((char *)v133 + *((unsigned __int8 *)v134 + 3));
                    unsigned int v137 = &v10[(unint64_t)(v25 << v135) >> v125];
                    *uint64_t v136 = *(_WORD *)v137;
                    unsigned int v26 = v135 + *((unsigned __int8 *)v137 + 2);
                    uint64_t v107 = v299;
                    a1 = (_WORD *)((char *)v136 + *((unsigned __int8 *)v137 + 3));
                  }
                  while (v26 <= 0x40);
                }
              }
              else if (v26 <= 0x40)
              {
                int v108 = -v42 & 0x3F;
                do
                {
                  if (v38 >= 14)
                  {
                    BOOL v110 = 0;
                    LODWORD(v109) = v26 >> 3;
                    v26 &= 7u;
                  }
                  else
                  {
                    if (v38 == 6) {
                      break;
                    }
                    uint64_t v109 = v26 >> 3;
                    BOOL v110 = v38 - v109 < 6;
                    if (v38 - v109 < 6) {
                      LODWORD(v109) = v38 - 6;
                    }
                    v26 -= 8 * v109;
                  }
                  v38 -= v109;
                  uint64_t v25 = *(void *)((char *)a3 + v38);
                  if ((unint64_t)a1 >= v37 - 9) {
                    break;
                  }
                  if (v110) {
                    break;
                  }
                  int v111 = &v10[(unint64_t)(v25 << v26) >> v108];
                  *a1 = *(_WORD *)v111;
                  unsigned int v112 = v26 + *((unsigned __int8 *)v111 + 2);
                  unint64_t v113 = (_WORD *)((char *)a1 + *((unsigned __int8 *)v111 + 3));
                  uint64_t v114 = &v10[(unint64_t)(v25 << v112) >> v108];
                  *unint64_t v113 = *(_WORD *)v114;
                  unsigned int v115 = v112 + *((unsigned __int8 *)v114 + 2);
                  uint64_t v116 = (_WORD *)((char *)v113 + *((unsigned __int8 *)v114 + 3));
                  uint64_t v117 = &v10[(unint64_t)(v25 << v115) >> v108];
                  _WORD *v116 = *(_WORD *)v117;
                  unsigned int v118 = v115 + *((unsigned __int8 *)v117 + 2);
                  unint64_t v119 = (_WORD *)((char *)v116 + *((unsigned __int8 *)v117 + 3));
                  unsigned int v120 = &v10[(unint64_t)(v25 << v118) >> v108];
                  *unint64_t v119 = *(_WORD *)v120;
                  unsigned int v121 = v118 + *((unsigned __int8 *)v120 + 2);
                  unsigned int v122 = (_WORD *)((char *)v119 + *((unsigned __int8 *)v120 + 3));
                  unsigned int v123 = &v10[(unint64_t)(v25 << v121) >> v108];
                  *unsigned int v122 = *(_WORD *)v123;
                  unsigned int v26 = v121 + *((unsigned __int8 *)v123 + 2);
                  uint64_t v107 = v299;
                  a1 = (_WORD *)((char *)v122 + *((unsigned __int8 *)v123 + 3));
                }
                while (v26 <= 0x40);
              }
            }
LABEL_109:
            if (v37 - (unint64_t)a1 >= 2)
            {
              unint64_t v138 = v37 - 2;
              int v139 = -v42 & 0x3F;
              while (v26 <= 0x40)
              {
                if (v38 >= 14)
                {
                  BOOL v141 = 0;
                  LODWORD(v140) = v26 >> 3;
                  v26 &= 7u;
                }
                else
                {
                  if (v38 == 6) {
                    break;
                  }
                  uint64_t v140 = v26 >> 3;
                  BOOL v141 = v38 - v140 < 6;
                  if (v38 - v140 < 6) {
                    LODWORD(v140) = v38 - 6;
                  }
                  v26 -= 8 * v140;
                }
                v38 -= v140;
                uint64_t v25 = *(void *)((char *)a3 + v38);
                if ((unint64_t)a1 > v138 || v141) {
                  break;
                }
                uint64_t v142 = &v10[(unint64_t)(v25 << v26) >> v139];
                *a1 = *(_WORD *)v142;
                v26 += *((unsigned __int8 *)v142 + 2);
                a1 = (_WORD *)((char *)a1 + *((unsigned __int8 *)v142 + 3));
              }
              while ((unint64_t)a1 <= v138)
              {
                uint64_t v143 = &v10[(unint64_t)(v25 << v26) >> v139];
                *a1 = *(_WORD *)v143;
                v26 += *((unsigned __int8 *)v143 + 2);
                a1 = (_WORD *)((char *)a1 + *((unsigned __int8 *)v143 + 3));
              }
            }
            int v144 = v26;
            if ((unint64_t)a1 < v37)
            {
              unint64_t v145 = (unint64_t)(v25 << v26) >> -(char)v42;
              unsigned int v146 = &v10[v145];
              *(unsigned char *)a1 = *v146;
              if (v146[3] != 1)
              {
                unsigned int v148 = v297;
                uint64_t v147 = v298;
                if (v26 <= 0x3F)
                {
                  unsigned int v168 = v26 + BYTE2(v10[v145]);
                  if (v168 >= 0x40) {
                    int v144 = 64;
                  }
                  else {
                    int v144 = v168;
                  }
                }
LABEL_127:
                if ((unint64_t)(v39 - v49) < 8)
                {
                  if (v31 > 0x40) {
                    goto LABEL_166;
                  }
                  if (v106 >= 8)
                  {
                    unsigned int v167 = v31 >> 3;
                    v31 &= 7u;
                  }
                  else
                  {
                    if (!v106) {
                      goto LABEL_166;
                    }
                    if (v40 + v106 - (v31 >> 3) >= v40) {
                      unsigned int v167 = v31 >> 3;
                    }
                    else {
                      unsigned int v167 = v106;
                    }
                    v31 -= 8 * v167;
                  }
                  v106 -= v167;
                  uint64_t v30 = *(void *)(v40 + v106);
                }
                else if (BYTE2(v11) >= 0xCu)
                {
                  if (v31 <= 0x40)
                  {
                    int v169 = -v42 & 0x3F;
                    do
                    {
                      if (v106 >= 8)
                      {
                        BOOL v172 = 0;
                        LODWORD(v170) = v31 >> 3;
                        v31 &= 7u;
                      }
                      else
                      {
                        if (!v106) {
                          break;
                        }
                        uint64_t v170 = v31 >> 3;
                        unint64_t v171 = v40 + v106 - v170;
                        BOOL v152 = v171 >= v40;
                        BOOL v172 = v171 < v40;
                        if (!v152) {
                          LODWORD(v170) = v106;
                        }
                        v31 -= 8 * v170;
                      }
                      v106 -= v170;
                      uint64_t v30 = *(void *)(v40 + v106);
                      if (v49 >= v39 - 7) {
                        break;
                      }
                      if (v172) {
                        break;
                      }
                      uint64_t v173 = &v10[(unint64_t)(v30 << v31) >> v169];
                      *(_WORD *)int v49 = *(_WORD *)v173;
                      unsigned int v174 = v31 + *((unsigned __int8 *)v173 + 2);
                      long long v175 = &v49[*((unsigned __int8 *)v173 + 3)];
                      long long v176 = &v10[(unint64_t)(v30 << v174) >> v169];
                      *(_WORD *)long long v175 = *(_WORD *)v176;
                      unsigned int v177 = v174 + *((unsigned __int8 *)v176 + 2);
                      uint64_t v178 = &v175[*((unsigned __int8 *)v176 + 3)];
                      int v179 = &v10[(unint64_t)(v30 << v177) >> v169];
                      *(_WORD *)uint64_t v178 = *(_WORD *)v179;
                      unsigned int v180 = v177 + *((unsigned __int8 *)v179 + 2);
                      int v181 = &v178[*((unsigned __int8 *)v179 + 3)];
                      uint64_t v182 = &v10[(unint64_t)(v30 << v180) >> v169];
                      *(_WORD *)int v181 = *(_WORD *)v182;
                      unsigned int v31 = v180 + *((unsigned __int8 *)v182 + 2);
                      uint64_t v107 = v299;
                      int v49 = &v181[*((unsigned __int8 *)v182 + 3)];
                    }
                    while (v31 <= 0x40);
                  }
                }
                else if (v31 <= 0x40)
                {
                  int v149 = -v42 & 0x3F;
                  do
                  {
                    if (v106 >= 8)
                    {
                      BOOL v153 = 0;
                      LODWORD(v150) = v31 >> 3;
                      v31 &= 7u;
                    }
                    else
                    {
                      if (!v106) {
                        break;
                      }
                      uint64_t v150 = v31 >> 3;
                      unint64_t v151 = v40 + v106 - v150;
                      BOOL v152 = v151 >= v40;
                      BOOL v153 = v151 < v40;
                      if (!v152) {
                        LODWORD(v150) = v106;
                      }
                      v31 -= 8 * v150;
                    }
                    v106 -= v150;
                    uint64_t v30 = *(void *)(v40 + v106);
                    if (v49 >= v39 - 9) {
                      break;
                    }
                    if (v153) {
                      break;
                    }
                    unsigned int v154 = &v10[(unint64_t)(v30 << v31) >> v149];
                    *(_WORD *)int v49 = *(_WORD *)v154;
                    unsigned int v155 = v31 + *((unsigned __int8 *)v154 + 2);
                    unsigned int v156 = &v49[*((unsigned __int8 *)v154 + 3)];
                    unsigned int v157 = &v10[(unint64_t)(v30 << v155) >> v149];
                    *(_WORD *)unsigned int v156 = *(_WORD *)v157;
                    unsigned int v158 = v155 + *((unsigned __int8 *)v157 + 2);
                    unsigned int v159 = &v156[*((unsigned __int8 *)v157 + 3)];
                    unsigned int v160 = &v10[(unint64_t)(v30 << v158) >> v149];
                    *(_WORD *)unsigned int v159 = *(_WORD *)v160;
                    unsigned int v161 = v158 + *((unsigned __int8 *)v160 + 2);
                    uint64_t v162 = &v159[*((unsigned __int8 *)v160 + 3)];
                    unint64_t v163 = &v10[(unint64_t)(v30 << v161) >> v149];
                    *(_WORD *)uint64_t v162 = *(_WORD *)v163;
                    unsigned int v164 = v161 + *((unsigned __int8 *)v163 + 2);
                    unsigned int v165 = &v162[*((unsigned __int8 *)v163 + 3)];
                    int v166 = &v10[(unint64_t)(v30 << v164) >> v149];
                    *(_WORD *)unsigned int v165 = *(_WORD *)v166;
                    unsigned int v31 = v164 + *((unsigned __int8 *)v166 + 2);
                    uint64_t v107 = v299;
                    int v49 = &v165[*((unsigned __int8 *)v166 + 3)];
                  }
                  while (v31 <= 0x40);
                }
LABEL_166:
                if ((unint64_t)(v39 - v49) >= 2)
                {
                  unint64_t v183 = (unint64_t)(v39 - 2);
                  int v184 = -v42 & 0x3F;
                  while (v31 <= 0x40)
                  {
                    if (v106 >= 8)
                    {
                      BOOL v187 = 0;
                      LODWORD(v185) = v31 >> 3;
                      v31 &= 7u;
                    }
                    else
                    {
                      if (!v106) {
                        break;
                      }
                      uint64_t v185 = v31 >> 3;
                      unint64_t v186 = v40 + v106 - v185;
                      BOOL v152 = v186 >= v40;
                      BOOL v187 = v186 < v40;
                      if (!v152) {
                        LODWORD(v185) = v106;
                      }
                      v31 -= 8 * v185;
                    }
                    v106 -= v185;
                    uint64_t v30 = *(void *)(v40 + v106);
                    if ((unint64_t)v49 > v183 || v187) {
                      break;
                    }
                    v188 = &v10[(unint64_t)(v30 << v31) >> v184];
                    *(_WORD *)int v49 = *(_WORD *)v188;
                    v31 += *((unsigned __int8 *)v188 + 2);
                    v49 += *((unsigned __int8 *)v188 + 3);
                  }
                  while ((unint64_t)v49 <= v183)
                  {
                    v189 = &v10[(unint64_t)(v30 << v31) >> v184];
                    *(_WORD *)int v49 = *(_WORD *)v189;
                    v31 += *((unsigned __int8 *)v189 + 2);
                    v49 += *((unsigned __int8 *)v189 + 3);
                  }
                }
                if (v49 >= v39)
                {
                  unint64_t v192 = (unint64_t)v294;
                }
                else
                {
                  unint64_t v190 = (unint64_t)(v30 << v31) >> -(char)v42;
                  v191 = (char *)&v10[v190];
                  *int v49 = *v191;
                  unint64_t v192 = (unint64_t)v294;
                  if (v191[3] == 1)
                  {
                    v31 += v191[2];
                  }
                  else if (v31 <= 0x3F)
                  {
                    unsigned int v212 = v31 + BYTE2(v10[v190]);
                    if (v212 >= 0x40) {
                      unsigned int v31 = 64;
                    }
                    else {
                      unsigned int v31 = v212;
                    }
                  }
                }
                if (v36 - (unint64_t)v48 < 8)
                {
                  if (v148 <= 0x40)
                  {
                    if (v147 >= 8)
                    {
                      unsigned int v211 = v148 >> 3;
                      v148 &= 7u;
                    }
                    else
                    {
                      if (!v147) {
                        goto LABEL_226;
                      }
                      if (v192 + v147 - (v148 >> 3) >= v192) {
                        unsigned int v211 = v148 >> 3;
                      }
                      else {
                        unsigned int v211 = v147;
                      }
                      v148 -= 8 * v211;
                    }
                    v147 -= v211;
                    uint64_t v107 = *(void *)(v192 + v147);
                  }
                }
                else if (BYTE2(v11) >= 0xCu)
                {
                  if (v148 <= 0x40)
                  {
                    int v213 = -v42 & 0x3F;
                    while (1)
                    {
                      if (v147 >= 8)
                      {
                        BOOL v215 = 0;
                        unsigned int v216 = v148 >> 3;
                        int v197 = v148 & 7;
                      }
                      else
                      {
                        if (!v147) {
                          goto LABEL_226;
                        }
                        unint64_t v214 = v192 + v147 - (v148 >> 3);
                        BOOL v152 = v214 >= v192;
                        BOOL v215 = v214 < v192;
                        unsigned int v216 = v152 ? v148 >> 3 : v147;
                        int v197 = v148 - 8 * v216;
                      }
                      v147 -= v216;
                      uint64_t v107 = *(void *)(v192 + v147);
                      if ((unint64_t)v48 >= v36 - 7 || v215) {
                        goto LABEL_225;
                      }
                      v217 = &v10[(unint64_t)(v107 << v197) >> v213];
                      *unint64_t v48 = *(_WORD *)v217;
                      int v218 = v197 + *((unsigned __int8 *)v217 + 2);
                      v219 = (_WORD *)((char *)v48 + *((unsigned __int8 *)v217 + 3));
                      v220 = &v10[(unint64_t)(v107 << v218) >> v213];
                      _WORD *v219 = *(_WORD *)v220;
                      int v221 = v218 + *((unsigned __int8 *)v220 + 2);
                      v222 = (_WORD *)((char *)v219 + *((unsigned __int8 *)v220 + 3));
                      v223 = &v10[(unint64_t)(v107 << v221) >> v213];
                      _WORD *v222 = *(_WORD *)v223;
                      int v224 = v221 + *((unsigned __int8 *)v223 + 2);
                      v225 = (_WORD *)((char *)v222 + *((unsigned __int8 *)v223 + 3));
                      v226 = &v10[(unint64_t)(v107 << v224) >> v213];
                      _WORD *v225 = *(_WORD *)v226;
                      unsigned int v148 = v224 + *((unsigned __int8 *)v226 + 2);
                      unint64_t v48 = (_WORD *)((char *)v225 + *((unsigned __int8 *)v226 + 3));
                      if (v148 > 0x40) {
                        goto LABEL_226;
                      }
                    }
                  }
                }
                else if (v148 <= 0x40)
                {
                  int v193 = -v42 & 0x3F;
                  while (1)
                  {
                    if (v147 >= 8)
                    {
                      BOOL v195 = 0;
                      unsigned int v196 = v148 >> 3;
                      int v197 = v148 & 7;
                    }
                    else
                    {
                      if (!v147) {
                        goto LABEL_226;
                      }
                      unint64_t v194 = v192 + v147 - (v148 >> 3);
                      BOOL v152 = v194 >= v192;
                      BOOL v195 = v194 < v192;
                      unsigned int v196 = v152 ? v148 >> 3 : v147;
                      int v197 = v148 - 8 * v196;
                    }
                    v147 -= v196;
                    uint64_t v107 = *(void *)(v192 + v147);
                    if ((unint64_t)v48 >= v36 - 9 || v195) {
                      break;
                    }
                    v198 = &v10[(unint64_t)(v107 << v197) >> v193];
                    *unint64_t v48 = *(_WORD *)v198;
                    int v199 = v197 + *((unsigned __int8 *)v198 + 2);
                    v200 = (_WORD *)((char *)v48 + *((unsigned __int8 *)v198 + 3));
                    v201 = &v10[(unint64_t)(v107 << v199) >> v193];
                    _WORD *v200 = *(_WORD *)v201;
                    int v202 = v199 + *((unsigned __int8 *)v201 + 2);
                    v203 = (_WORD *)((char *)v200 + *((unsigned __int8 *)v201 + 3));
                    v204 = &v10[(unint64_t)(v107 << v202) >> v193];
                    _WORD *v203 = *(_WORD *)v204;
                    int v205 = v202 + *((unsigned __int8 *)v204 + 2);
                    v206 = (_WORD *)((char *)v203 + *((unsigned __int8 *)v204 + 3));
                    v207 = &v10[(unint64_t)(v107 << v205) >> v193];
                    _WORD *v206 = *(_WORD *)v207;
                    int v208 = v205 + *((unsigned __int8 *)v207 + 2);
                    v209 = (_WORD *)((char *)v206 + *((unsigned __int8 *)v207 + 3));
                    v210 = &v10[(unint64_t)(v107 << v208) >> v193];
                    _WORD *v209 = *(_WORD *)v210;
                    unsigned int v148 = v208 + *((unsigned __int8 *)v210 + 2);
                    unint64_t v48 = (_WORD *)((char *)v209 + *((unsigned __int8 *)v210 + 3));
                    if (v148 > 0x40) {
                      goto LABEL_226;
                    }
                  }
LABEL_225:
                  unsigned int v148 = v197;
                }
                if (v36 - (unint64_t)v48 < 2) {
                  goto LABEL_241;
                }
LABEL_226:
                unint64_t v227 = v36 - 2;
                int v228 = -v42 & 0x3F;
                while (v148 <= 0x40)
                {
                  if (v147 >= 8)
                  {
                    BOOL v230 = 0;
                    unsigned int v231 = v148 >> 3;
                    int v232 = v148 & 7;
                  }
                  else
                  {
                    if (!v147) {
                      break;
                    }
                    unint64_t v229 = v192 + v147 - (v148 >> 3);
                    BOOL v152 = v229 >= v192;
                    BOOL v230 = v229 < v192;
                    if (v152) {
                      unsigned int v231 = v148 >> 3;
                    }
                    else {
                      unsigned int v231 = v147;
                    }
                    int v232 = v148 - 8 * v231;
                  }
                  v147 -= v231;
                  uint64_t v107 = *(void *)(v192 + v147);
                  if ((unint64_t)v48 > v227 || v230)
                  {
                    unsigned int v148 = v232;
                    break;
                  }
                  v233 = &v10[(unint64_t)(v107 << v232) >> v228];
                  *unint64_t v48 = *(_WORD *)v233;
                  unsigned int v148 = v232 + *((unsigned __int8 *)v233 + 2);
                  unint64_t v48 = (_WORD *)((char *)v48 + *((unsigned __int8 *)v233 + 3));
                }
                if ((unint64_t)v48 <= v227)
                {
                  unsigned int v235 = v148;
                  do
                  {
                    v236 = &v10[(unint64_t)(v107 << v235) >> v228];
                    *unint64_t v48 = *(_WORD *)v236;
                    v235 += *((unsigned __int8 *)v236 + 2);
                    unint64_t v48 = (_WORD *)((char *)v48 + *((unsigned __int8 *)v236 + 3));
                  }
                  while ((unint64_t)v48 <= v227);
                  unsigned int v234 = v235;
                }
                else
                {
LABEL_241:
                  unsigned int v234 = v148;
                }
                if ((unint64_t)v48 < v36)
                {
                  unint64_t v237 = (unint64_t)(v107 << v234) >> -(char)v42;
                  v238 = &v10[v237];
                  *(unsigned char *)unint64_t v48 = *v238;
                  if (v238[3] == 1)
                  {
                    v234 += v238[2];
                  }
                  else if (v234 <= 0x3F)
                  {
                    unsigned int v239 = v234 + BYTE2(v10[v237]);
                    if (v239 >= 0x40) {
                      unsigned int v234 = 64;
                    }
                    else {
                      unsigned int v234 = v239;
                    }
                  }
                }
                if (v35 - (unint64_t)v47 >= 8)
                {
                  unsigned int v240 = DWORD2(v300);
                  if (BYTE2(v11) >= 0xCu)
                  {
                    if (DWORD2(v300) <= 0x40)
                    {
                      int v255 = -v42 & 0x3F;
                      do
                      {
                        if ((unint64_t)v301 >= v302)
                        {
                          BOOL v257 = 0;
                          v258 = (uint64_t *)(v301 - (v240 >> 3));
                          *(void *)&long long v301 = v258;
                          v240 &= 7u;
                        }
                        else
                        {
                          if ((void)v301 == *((void *)&v301 + 1)) {
                            goto LABEL_290;
                          }
                          uint64_t v256 = v240 >> 3;
                          BOOL v257 = (unint64_t)(v301 - v256) < *((void *)&v301 + 1);
                          if ((unint64_t)(v301 - v256) >= *((void *)&v301 + 1)) {
                            uint64_t v256 = v256;
                          }
                          else {
                            uint64_t v256 = (v301 - DWORD2(v301));
                          }
                          v258 = (uint64_t *)(v301 - v256);
                          *(void *)&long long v301 = v301 - v256;
                          v240 -= 8 * v256;
                        }
                        DWORD2(v300) = v240;
                        uint64_t v259 = *v258;
                        *(void *)&long long v300 = v259;
                        if ((unint64_t)v47 >= v41) {
                          break;
                        }
                        if (v257) {
                          break;
                        }
                        v260 = &v10[(unint64_t)(v259 << v240) >> v255];
                        *uint64_t v47 = *(_WORD *)v260;
                        DWORD2(v300) = v240 + *((unsigned __int8 *)v260 + 2);
                        v261 = (_WORD *)((char *)v47 + *((unsigned __int8 *)v260 + 3));
                        v262 = &v10[(void)v300 << SBYTE8(v300) >> v255];
                        _WORD *v261 = *(_WORD *)v262;
                        DWORD2(v300) += *((unsigned __int8 *)v262 + 2);
                        v263 = (_WORD *)((char *)v261 + *((unsigned __int8 *)v262 + 3));
                        v264 = &v10[(void)v300 << SBYTE8(v300) >> v255];
                        _WORD *v263 = *(_WORD *)v264;
                        DWORD2(v300) += *((unsigned __int8 *)v264 + 2);
                        v265 = (_WORD *)((char *)v263 + *((unsigned __int8 *)v264 + 3));
                        v266 = &v10[(void)v300 << SBYTE8(v300) >> v255];
                        _WORD *v265 = *(_WORD *)v266;
                        unsigned int v240 = DWORD2(v300) + *((unsigned __int8 *)v266 + 2);
                        DWORD2(v300) = v240;
                        uint64_t v47 = (_WORD *)((char *)v265 + *((unsigned __int8 *)v266 + 3));
                      }
                      while (v240 <= 0x40);
                    }
                  }
                  else if (DWORD2(v300) <= 0x40)
                  {
                    int v241 = -v42 & 0x3F;
                    do
                    {
                      if ((unint64_t)v301 >= v302)
                      {
                        BOOL v243 = 0;
                        v244 = (uint64_t *)(v301 - (v240 >> 3));
                        *(void *)&long long v301 = v244;
                        v240 &= 7u;
                      }
                      else
                      {
                        if ((void)v301 == *((void *)&v301 + 1)) {
                          goto LABEL_290;
                        }
                        uint64_t v242 = v240 >> 3;
                        BOOL v243 = (unint64_t)(v301 - v242) < *((void *)&v301 + 1);
                        if ((unint64_t)(v301 - v242) >= *((void *)&v301 + 1)) {
                          uint64_t v242 = v242;
                        }
                        else {
                          uint64_t v242 = (v301 - DWORD2(v301));
                        }
                        v244 = (uint64_t *)(v301 - v242);
                        *(void *)&long long v301 = v301 - v242;
                        v240 -= 8 * v242;
                      }
                      DWORD2(v300) = v240;
                      uint64_t v245 = *v244;
                      *(void *)&long long v300 = v245;
                      if ((unint64_t)v47 >= v35 - 9) {
                        break;
                      }
                      if (v243) {
                        break;
                      }
                      v246 = &v10[(unint64_t)(v245 << v240) >> v241];
                      *uint64_t v47 = *(_WORD *)v246;
                      DWORD2(v300) = v240 + *((unsigned __int8 *)v246 + 2);
                      v247 = (_WORD *)((char *)v47 + *((unsigned __int8 *)v246 + 3));
                      v248 = &v10[(void)v300 << SBYTE8(v300) >> v241];
                      _WORD *v247 = *(_WORD *)v248;
                      DWORD2(v300) += *((unsigned __int8 *)v248 + 2);
                      v249 = (_WORD *)((char *)v247 + *((unsigned __int8 *)v248 + 3));
                      v250 = &v10[(void)v300 << SBYTE8(v300) >> v241];
                      _WORD *v249 = *(_WORD *)v250;
                      DWORD2(v300) += *((unsigned __int8 *)v250 + 2);
                      v251 = (_WORD *)((char *)v249 + *((unsigned __int8 *)v250 + 3));
                      v252 = &v10[(void)v300 << SBYTE8(v300) >> v241];
                      _WORD *v251 = *(_WORD *)v252;
                      DWORD2(v300) += *((unsigned __int8 *)v252 + 2);
                      v253 = (_WORD *)((char *)v251 + *((unsigned __int8 *)v252 + 3));
                      v254 = &v10[(void)v300 << SBYTE8(v300) >> v241];
                      _WORD *v253 = *(_WORD *)v254;
                      unsigned int v240 = DWORD2(v300) + *((unsigned __int8 *)v254 + 2);
                      DWORD2(v300) = v240;
                      uint64_t v47 = (_WORD *)((char *)v253 + *((unsigned __int8 *)v254 + 3));
                    }
                    while (v240 <= 0x40);
                  }
                  goto LABEL_290;
                }
                unsigned int v240 = DWORD2(v300);
                if (DWORD2(v300) <= 0x40)
                {
                  if ((unint64_t)v301 >= v302)
                  {
                    v269 = (void *)(v301 - ((unint64_t)DWORD2(v300) >> 3));
                    *(void *)&long long v301 = v269;
                    unsigned int v240 = BYTE8(v300) & 7;
                  }
                  else
                  {
                    if ((void)v301 == *((void *)&v301 + 1)) {
                      goto LABEL_290;
                    }
                    unint64_t v267 = (unint64_t)DWORD2(v300) >> 3;
                    if ((unint64_t)v301 - v267 >= *((void *)&v301 + 1)) {
                      uint64_t v268 = v267;
                    }
                    else {
                      uint64_t v268 = (v301 - DWORD2(v301));
                    }
                    v269 = (void *)(v301 - v268);
                    *(void *)&long long v301 = v301 - v268;
                    unsigned int v240 = DWORD2(v300) - 8 * v268;
                  }
                  DWORD2(v300) = v240;
                  *(void *)&long long v300 = *v269;
                }
LABEL_290:
                if (v35 - (unint64_t)v47 >= 2)
                {
                  unint64_t v270 = v35 - 2;
                  int v271 = -v42 & 0x3F;
                  while (v240 <= 0x40)
                  {
                    if ((unint64_t)v301 >= v302)
                    {
                      BOOL v273 = 0;
                      v274 = (uint64_t *)(v301 - (v240 >> 3));
                      *(void *)&long long v301 = v274;
                      v240 &= 7u;
                    }
                    else
                    {
                      if ((void)v301 == *((void *)&v301 + 1)) {
                        break;
                      }
                      uint64_t v272 = v240 >> 3;
                      BOOL v273 = (unint64_t)(v301 - v272) < *((void *)&v301 + 1);
                      uint64_t v272 = (unint64_t)(v301 - v272) >= *((void *)&v301 + 1)
                           ? v272
                           : (v301 - DWORD2(v301));
                      v274 = (uint64_t *)(v301 - v272);
                      *(void *)&long long v301 = v301 - v272;
                      v240 -= 8 * v272;
                    }
                    DWORD2(v300) = v240;
                    uint64_t v275 = *v274;
                    *(void *)&long long v300 = v275;
                    if ((unint64_t)v47 > v270 || v273) {
                      break;
                    }
                    v276 = &v10[(unint64_t)(v275 << v240) >> v271];
                    *uint64_t v47 = *(_WORD *)v276;
                    unsigned int v240 = DWORD2(v300) + *((unsigned __int8 *)v276 + 2);
                    DWORD2(v300) = v240;
                    uint64_t v47 = (_WORD *)((char *)v47 + *((unsigned __int8 *)v276 + 3));
                  }
                  while ((unint64_t)v47 <= v270)
                  {
                    v277 = &v10[(void)v300 << v240 >> v271];
                    *uint64_t v47 = *(_WORD *)v277;
                    unsigned int v240 = DWORD2(v300) + *((unsigned __int8 *)v277 + 2);
                    DWORD2(v300) = v240;
                    uint64_t v47 = (_WORD *)((char *)v47 + *((unsigned __int8 *)v277 + 3));
                  }
                }
                if ((unint64_t)v47 < v35)
                {
                  uint64_t v278 = (void)v300 << v240 >> -(char)v42;
                  v279 = &v10[v278];
                  *(unsigned char *)uint64_t v47 = *v279;
                  if (v279[3] == 1)
                  {
                    unsigned int v240 = DWORD2(v300) + v279[2];
                  }
                  else
                  {
                    unsigned int v240 = DWORD2(v300);
                    if (DWORD2(v300) <= 0x3F)
                    {
                      unsigned int v280 = DWORD2(v300) + BYTE2(v10[v278]);
                      if (v280 >= 0x40) {
                        unsigned int v240 = 64;
                      }
                      else {
                        unsigned int v240 = v280;
                      }
                    }
                  }
                }
                if (v240 == 64
                  && (void)v301 == *((void *)&v301 + 1)
                  && v234 == 64
                  && v147 == 0
                  && v31 == 64
                  && v106 == 0
                  && v144 == 64
                  && v38 == 6)
                {
                  return a2;
                }
                else
                {
                  return -20;
                }
              }
              int v144 = v26 + v146[2];
            }
            unsigned int v148 = v297;
            uint64_t v147 = v298;
            goto LABEL_127;
          }
          return -1;
        }
        uint64_t v34 = *v32;
        switch(a3[2])
        {
          case 2u:
            goto LABEL_46;
          case 3u:
            goto LABEL_45;
          case 4u:
            goto LABEL_44;
          case 5u:
            goto LABEL_43;
          case 6u:
            goto LABEL_42;
          case 7u:
            v34 |= (unint64_t)v32[6] << 48;
LABEL_42:
            v34 += (unint64_t)v32[5] << 40;
LABEL_43:
            v34 += (unint64_t)v32[4] << 32;
LABEL_44:
            v34 += (unint64_t)v32[3] << 24;
LABEL_45:
            v34 += (unint64_t)v32[2] << 16;
LABEL_46:
            v34 += (unint64_t)v32[1] << 8;
            break;
          default:
            break;
        }
        if (v32[v16 - 1])
        {
          v290 = (char *)a1 + ((a2 + 3) >> 2);
          v291 = (_WORD *)(v19 + ((a2 + 3) >> 2));
          v295 = v28;
          uint64_t v296 = v29;
          uint64_t v298 = 0;
          uint64_t v299 = v34;
          uint64_t v289 = v24;
          v292 = (char *)a1 + a2;
          unsigned int v33 = __clz(v32[v16 - 1]) - 8 * v16 + 41;
          goto LABEL_49;
        }
        return -20;
      }
      return -72;
    }
  }
  return result;
}

double sub_1DD2DB6A0(long long *a1)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)a1 + 12);
  uint64_t v2 = *((void *)a1 + 13);
  long long v3 = a1[5];
  long long v46 = a1[4];
  long long v47 = v3;
  long long v4 = a1[1];
  long long v44 = *a1;
  long long v45 = v4;
  long long v5 = a1[3];
  *(_OWORD *)uint64_t v43 = a1[2];
  *(_OWORD *)&v43[16] = v5;
  long long v40 = *(_OWORD *)&v43[8];
  uint64_t v6 = (char *)*((void *)&v5 + 1);
  uint64_t v7 = *((void *)a1 + 14);
  uint64_t v41 = *((void *)&v5 + 1);
  uint64_t v42 = v7;
  while (1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = ((unint64_t)(v44 - v2) * (unsigned __int128)0x2492492492492493uLL) >> 64;
    int8x16_t v10 = (int8x16_t)vdupq_n_s64((v9 + ((unint64_t)(v44 - v2 - v9) >> 1)) >> 2);
    do
    {
      int8x16_t v11 = (int8x16_t)vsubq_s64(*(int64x2_t *)((char *)&v40 + v8), *(int64x2_t *)&v43[v8]);
      v11.i64[0] /= 0xAuLL;
      v11.i64[1] /= 0xAuLL;
      int8x16_t v10 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v11, (uint64x2_t)v10), v10, v11);
      v8 += 16;
    }
    while (v8 != 32);
    unint64_t v12 = vextq_s8(v10, v10, 8uLL).u64[0];
    int8x8_t v13 = vbsl_s8((int8x8_t)vcgtd_u64(v12, v10.u64[0]), *(int8x8_t *)v10.i8, (int8x8_t)v12);
    if (*(void *)&v13 < 2uLL
      || *((void *)&v44 + 1) < (unint64_t)v44
      || (unint64_t)v45 < *((void *)&v44 + 1)
      || *((void *)&v45 + 1) < (unint64_t)v45)
    {
      break;
    }
    int v14 = 0;
    uint64_t v15 = &v6[5 * *(void *)&v13];
    while (1)
    {
      for (uint64_t i = 0; i != 24; i += 8)
      {
        unint64_t v17 = *(void *)((char *)&v46 + i);
        unint64_t v18 = (__int16 *)(v1 + 4 * (v17 >> 53));
        __int16 v19 = *v18;
        char v20 = *((unsigned char *)v18 + 2);
        uint64_t v21 = *((unsigned __int8 *)v18 + 3);
        int v22 = *(_WORD **)&v43[i];
        *(void *)((char *)&v46 + i) = v17 << v20;
        *int v22 = v19;
        *(void *)&v43[i] = (char *)v22 + v21;
      }
      if (++v14 == 5)
      {
        uint64_t v23 = 0;
        uint64_t v24 = *((void *)&v47 + 1);
        uint64_t v25 = (__int16 *)(v1 + 4 * (*((void *)&v47 + 1) >> 53));
        __int16 v26 = *v25;
        char v27 = *((unsigned char *)v25 + 2);
        uint64_t v28 = *((unsigned __int8 *)v25 + 3);
        uint64_t v29 = *(void *)&v43[24];
        **(_WORD **)&v43[24] = v26;
        *((void *)&v47 + 1) = v24 << v27;
        uint64_t v6 = (char *)(v29 + v28);
        do
        {
          uint64_t v30 = *((void *)&v47 + 1);
          unsigned int v31 = (__int16 *)(v1 + 4 * (*((void *)&v47 + 1) >> 53));
          __int16 v32 = *v31;
          char v33 = *((unsigned char *)v31 + 2);
          uint64_t v34 = *((unsigned __int8 *)v31 + 3);
          *(_WORD *)uint64_t v6 = v32;
          *((void *)&v47 + 1) = v30 << v33;
          v6 += v34;
          LODWORD(v30) = __clz(__rbit64(*(void *)((char *)&v46 + v23)));
          LOBYTE(v34) = v30 & 7;
          unint64_t v35 = (void *)(*(void *)((char *)&v44 + v23) - (v30 >> 3));
          *(void *)((char *)&v44 + v23) = v35;
          *(void *)((char *)&v46 + v23) = (*v35 | 1) << v34;
          v23 += 8;
        }
        while (v23 != 32);
        int v14 = 0;
        *(void *)&v43[24] = v6;
        if (v6 >= v15) {
          break;
        }
      }
    }
  }
  long long v36 = v47;
  a1[4] = v46;
  a1[5] = v36;
  long long v37 = v45;
  *a1 = v44;
  a1[1] = v37;
  double result = *(double *)v43;
  long long v39 = *(_OWORD *)&v43[16];
  a1[2] = *(_OWORD *)v43;
  a1[3] = v39;
  return result;
}

uint64_t sub_1DD2DB908(void *a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4, unint64_t a5, uint64_t a6)
{
  if (a5 < 0xA) {
    return -20;
  }
  if (*(unsigned __int8 *)(a6 + 2) << 16 != 720896) {
    return 0;
  }
  uint64_t v6 = 0;
  unint64_t v7 = *a4;
  uint64_t v8 = a4[1];
  uint64_t v9 = a4[2];
  int8x16_t v10 = (char *)a4 + v7 + 6;
  a1[15] = a4 + 3;
  a1[16] = v10;
  int8x16_t v11 = &v10[v8];
  unint64_t v12 = &v10[v8 + v9];
  a1[17] = &v10[v8];
  a1[18] = v12;
  if (v7 < 0x10) {
    return v6;
  }
  if (v8 < 8) {
    return v6;
  }
  if (v9 < 8) {
    return v6;
  }
  unint64_t v13 = v7 + v8 + v9 + 6;
  if (a5 - v13 < 8) {
    return v6;
  }
  if (a5 < v13) {
    return -20;
  }
  *a1 = v10 - 8;
  a1[1] = v11 - 8;
  int v14 = (char *)a4 + a5;
  a1[2] = v12 - 8;
  a1[3] = (char *)a4 + a5 - 8;
  uint64_t v15 = a2 + ((unint64_t)(a3 + 3) >> 2);
  a1[4] = a2;
  a1[5] = v15;
  uint64_t v16 = v15 + ((unint64_t)(a3 + 3) >> 2);
  unint64_t v17 = v16 + ((unint64_t)(a3 + 3) >> 2);
  a1[6] = v16;
  a1[7] = v17;
  if (v17 >= a2 + a3) {
    return 0;
  }
  unsigned int v18 = (__clz(*(v10 - 1)) ^ 0xFFFFFFE0) + 9;
  if (*(v10 - 1)) {
    char v19 = v18;
  }
  else {
    char v19 = 0;
  }
  a1[8] = (*((void *)v10 - 1) | 1) << v19;
  unsigned int v20 = (__clz(*(v11 - 1)) ^ 0xFFFFFFE0) + 9;
  if (*(v11 - 1)) {
    char v21 = v20;
  }
  else {
    char v21 = 0;
  }
  a1[9] = (*((void *)v11 - 1) | 1) << v21;
  unsigned int v22 = (__clz(*(v12 - 1)) ^ 0xFFFFFFE0) + 9;
  if (*(v12 - 1)) {
    char v23 = v22;
  }
  else {
    char v23 = 0;
  }
  a1[10] = (*((void *)v12 - 1) | 1) << v23;
  unsigned int v24 = (__clz(*(v14 - 1)) ^ 0xFFFFFFE0) + 9;
  if (*(v14 - 1)) {
    char v25 = v24;
  }
  else {
    char v25 = 0;
  }
  uint64_t v26 = *((void *)v14 - 1) | 1;
  a1[13] = a4 + 7;
  a1[14] = a2 + a3;
  a1[11] = v26 << v25;
  a1[12] = a6 + 4;
  return 1;
}

unint64_t sub_1DD2DBA88(unsigned char *a1, unint64_t a2, unsigned __int16 *a3, unint64_t a4, uint64_t a5)
{
  if (a4 < 0xA) {
    return -20;
  }
  uint64_t v194 = v5;
  uint64_t v195 = v6;
  unint64_t v193 = 0;
  long long v191 = 0u;
  long long v192 = 0u;
  unint64_t result = -20;
  if (a2 < 6) {
    return result;
  }
  int8x16_t v11 = &a1[a2];
  uint64_t v12 = *a3;
  uint64_t v13 = a3[1];
  uint64_t v14 = a3[2];
  unint64_t v15 = v12 + 6 + v13 + v14;
  unint64_t v16 = (unint64_t)&a1[(a2 + 3) >> 2];
  unint64_t v17 = v16 + ((a2 + 3) >> 2);
  unint64_t v18 = v17 + ((a2 + 3) >> 2);
  if (a4 < v15 || v18 > (unint64_t)v11) {
    return result;
  }
  if (!v12) {
    return -72;
  }
  char v21 = (unsigned __int8 *)(a3 + 3);
  int v22 = *(unsigned __int16 *)(a5 + 2);
  if (v12 < 8)
  {
    uint64_t v24 = *v21;
    switch((int)v12)
    {
      case 2:
        goto LABEL_19;
      case 3:
        goto LABEL_18;
      case 4:
        goto LABEL_17;
      case 5:
        goto LABEL_16;
      case 6:
        goto LABEL_15;
      case 7:
        v24 |= (unint64_t)*((unsigned __int8 *)a3 + 12) << 48;
LABEL_15:
        v24 += (unint64_t)*((unsigned __int8 *)a3 + 11) << 40;
LABEL_16:
        v24 += (unint64_t)*((unsigned __int8 *)a3 + 10) << 32;
LABEL_17:
        v24 += (unint64_t)*((unsigned __int8 *)a3 + 9) << 24;
LABEL_18:
        v24 += (unint64_t)*((unsigned __int8 *)a3 + 8) << 16;
LABEL_19:
        v24 += (unint64_t)*((unsigned __int8 *)a3 + 7) << 8;
        break;
      default:
        break;
    }
    unsigned int v26 = v21[v12 - 1];
    if (!v26) {
      return -20;
    }
    unsigned int v25 = __clz(v26) - 8 * v12 + 41;
    uint64_t v187 = 6;
    if (v13) {
      goto LABEL_22;
    }
    return -72;
  }
  unsigned int v23 = v21[v12 - 1];
  if (!v23) {
    return -1;
  }
  uint64_t v187 = v12 - 2;
  uint64_t v24 = *(void *)((char *)a3 + v12 - 2);
  unsigned int v25 = __clz(v23) - 23;
  if (!v13) {
    return -72;
  }
LABEL_22:
  char v27 = (unsigned __int8 *)a3 + v12 + 6;
  if (v13 >= 8)
  {
    if (v27[v13 - 1])
    {
      uint64_t v28 = v13 - 8;
      uint64_t v29 = *(void *)&v27[v13 - 8];
      unsigned int v30 = __clz(v27[v13 - 1]) - 23;
      goto LABEL_34;
    }
    return -1;
  }
  uint64_t v29 = *v27;
  switch((int)v13)
  {
    case 2:
      goto LABEL_31;
    case 3:
      goto LABEL_30;
    case 4:
      goto LABEL_29;
    case 5:
      goto LABEL_28;
    case 6:
      goto LABEL_27;
    case 7:
      v29 |= (unint64_t)v27[6] << 48;
LABEL_27:
      v29 += (unint64_t)v27[5] << 40;
LABEL_28:
      v29 += (unint64_t)v27[4] << 32;
LABEL_29:
      v29 += (unint64_t)v27[3] << 24;
LABEL_30:
      v29 += (unint64_t)v27[2] << 16;
LABEL_31:
      v29 += (unint64_t)v27[1] << 8;
      break;
    default:
      break;
  }
  if (!v27[v13 - 1]) {
    return -20;
  }
  uint64_t v28 = 0;
  unsigned int v30 = __clz(v27[v13 - 1]) - 8 * v13 + 41;
LABEL_34:
  if (!v14) {
    return -72;
  }
  unsigned int v31 = &v27[v13];
  int v184 = (unsigned __int8 *)(v17 + ((a2 + 3) >> 2));
  uint64_t v185 = v27;
  if (v14 < 8)
  {
    unint64_t v183 = *v31;
    unint64_t v33 = v183;
    switch((int)v14)
    {
      case 2:
        goto LABEL_46;
      case 3:
        goto LABEL_45;
      case 4:
        goto LABEL_44;
      case 5:
        goto LABEL_43;
      case 6:
        goto LABEL_42;
      case 7:
        unint64_t v33 = v183 | ((unint64_t)v31[6] << 48);
LABEL_42:
        v33 += (unint64_t)v31[5] << 40;
LABEL_43:
        v33 += (unint64_t)v31[4] << 32;
LABEL_44:
        v33 += (unint64_t)v31[3] << 24;
LABEL_45:
        v33 += (unint64_t)v31[2] << 16;
LABEL_46:
        unint64_t v183 = v33 + ((unint64_t)v31[1] << 8);
        break;
      default:
        break;
    }
    if (v31[v14 - 1])
    {
      uint64_t v189 = 0;
      uint64_t v190 = v28;
      uint64_t v188 = v29;
      int v181 = (unsigned __int8 *)(v16 + ((a2 + 3) >> 2));
      uint64_t v182 = &a1[a2];
      int v180 = v22;
      unsigned int v32 = __clz(v31[v14 - 1]) - 8 * v14 + 41;
      goto LABEL_49;
    }
    return -20;
  }
  if (!v31[v14 - 1]) {
    return -1;
  }
  uint64_t v188 = v29;
  int v181 = (unsigned __int8 *)(v16 + ((a2 + 3) >> 2));
  uint64_t v182 = &a1[a2];
  int v180 = v22;
  uint64_t v189 = v14 - 8;
  uint64_t v190 = v28;
  unint64_t v183 = *(void *)&v31[v14 - 8];
  unsigned int v32 = __clz(v31[v14 - 1]) - 23;
LABEL_49:
  unint64_t v186 = &v27[v13];
  unint64_t result = sub_1DD2D9E58((uint64_t)&v191, &v31[v14], a4 - v15);
  unint64_t v34 = (unint64_t)v181;
  unint64_t v35 = (unint64_t)v182;
  unint64_t v36 = (unint64_t)v184;
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    unint64_t v37 = (unint64_t)(v182 - 3);
    uint64_t v38 = a5 + 4;
    unint64_t v39 = (a2 + 3) >> 2;
    if ((unint64_t)(v182 - v184) < 8)
    {
      unsigned int v89 = v25;
      unsigned int v90 = v30;
      unsigned int v91 = v32;
      unint64_t v92 = a1;
      int v93 = &a1[(a2 + 3) >> 2];
      uint64_t v94 = v181;
      unint64_t v95 = v184;
      uint64_t v41 = v187;
      unint64_t v42 = v183;
    }
    else
    {
      uint64_t v40 = v191;
      uint64_t v41 = v187;
      unint64_t v42 = v183;
      if ((unint64_t)v184 >= v37)
      {
        unint64_t v92 = a1;
        int v93 = &a1[(a2 + 3) >> 2];
        uint64_t v94 = v181;
        unint64_t v95 = v184;
      }
      else
      {
        int v43 = -v180 & 0x3F;
        unsigned int v44 = DWORD2(v191);
        unint64_t v45 = v193;
        long long v46 = (uint64_t *)v192;
        long long v47 = a1;
        do
        {
          uint64_t v48 = v47;
          int v49 = &v47[3 * v39];
          unint64_t v50 = &v48[2 * v39];
          long long v51 = &v48[v39];
          unsigned int v52 = (unsigned __int8 *)(v38 + 2 * ((unint64_t)(v24 << v25) >> v43));
          unsigned __int8 v53 = v52[1];
          LODWORD(v52) = v25 + *v52;
          *uint64_t v48 = v53;
          unint64_t v54 = (unsigned __int8 *)(v38 + 2 * ((unint64_t)(v188 << v30) >> v43));
          unsigned __int8 v55 = v54[1];
          LODWORD(v54) = v30 + *v54;
          *long long v51 = v55;
          uint64_t v56 = (unsigned __int8 *)(v38 + 2 * (v42 << v32 >> v43));
          unsigned __int8 v57 = v56[1];
          LODWORD(v56) = v32 + *v56;
          *unint64_t v50 = v57;
          unsigned int v58 = (unsigned __int8 *)(v38 + 2 * ((unint64_t)(v40 << v44) >> v43));
          unint64_t v59 = v42;
          unsigned int v60 = v44 + *v58;
          *int v49 = v58[1];
          unsigned int v61 = (unsigned __int8 *)(v38 + 2 * ((unint64_t)(v24 << (char)v52) >> v43));
          LODWORD(v52) = v52 + *v61;
          v48[1] = v61[1];
          uint64_t v62 = (unsigned __int8 *)(v38 + 2 * ((unint64_t)(v188 << (char)v54) >> v43));
          LODWORD(v54) = v54 + *v62;
          v51[1] = v62[1];
          int v63 = (unsigned __int8 *)(v38 + 2 * (v42 << (char)v56 >> v43));
          LODWORD(v56) = v56 + *v63;
          v50[1] = v63[1];
          unsigned int v64 = (unsigned __int8 *)(v38 + 2 * ((unint64_t)(v40 << v60) >> v43));
          unsigned int v65 = v60 + *v64;
          v49[1] = v64[1];
          uint64_t v66 = (unsigned __int8 *)(v38 + 2 * ((unint64_t)(v24 << (char)v52) >> v43));
          unsigned __int8 v67 = v66[1];
          LODWORD(v66) = v52 + *v66;
          v48[2] = v67;
          uint64_t v68 = (unsigned __int8 *)(v38 + 2 * ((unint64_t)(v188 << (char)v54) >> v43));
          int v69 = v54 + *v68;
          v51[2] = v68[1];
          unsigned int v70 = (unsigned __int8 *)(v38 + 2 * (v59 << (char)v56 >> v43));
          unsigned __int8 v71 = v70[1];
          int v72 = v56 + *v70;
          v50[2] = v71;
          unsigned int v73 = (unsigned __int8 *)(v38 + 2 * ((unint64_t)(v40 << v65) >> v43));
          unsigned int v74 = v65 + *v73;
          v49[2] = v73[1];
          int v75 = (unsigned __int8 *)(v38 + 2 * ((unint64_t)(v24 << (char)v66) >> v43));
          unsigned int v25 = v66 + *v75;
          v48[3] = v75[1];
          uint64_t v76 = (unsigned __int8 *)(v38 + 2 * ((unint64_t)(v188 << v69) >> v43));
          int v77 = *v76;
          v51[3] = v76[1];
          unint64_t v78 = v59;
          unsigned int v79 = (unsigned __int8 *)(v38 + 2 * (v59 << v72 >> v43));
          int v80 = *v79;
          v50[3] = v79[1];
          uint64_t v81 = (unsigned __int8 *)(v38 + 2 * ((unint64_t)(v40 << v74) >> v43));
          int v82 = *v81;
          v49[3] = v81[1];
          if (v41 < 14)
          {
            int v83 = 3;
          }
          else
          {
            int v83 = 0;
            v41 -= v25 >> 3;
            v25 &= 7u;
            uint64_t v24 = *(void *)((char *)a3 + v41);
          }
          unsigned int v30 = v69 + v77;
          if (v190 < 8)
          {
            int v84 = 3;
          }
          else
          {
            int v84 = 0;
            uint64_t v85 = v190 - (v30 >> 3);
            v30 &= 7u;
            uint64_t v190 = v85;
            uint64_t v188 = *(void *)&v185[v85];
          }
          unsigned int v32 = v72 + v80;
          if (v189 < 8)
          {
            int v86 = 3;
            unint64_t v42 = v78;
          }
          else
          {
            int v86 = 0;
            uint64_t v87 = v189 - (v32 >> 3);
            v32 &= 7u;
            uint64_t v189 = v87;
            unint64_t v42 = *(void *)&v186[v87];
          }
          unsigned int v44 = v74 + v82;
          if ((unint64_t)v46 < v45)
          {
            int v88 = 3;
          }
          else
          {
            int v88 = 0;
            long long v46 = (uint64_t *)((char *)v46 - (v44 >> 3));
            v44 &= 7u;
            uint64_t v40 = *v46;
          }
          if ((unint64_t)(v49 + 4) >= v37) {
            break;
          }
          long long v47 = v48 + 4;
        }
        while (!(v84 | v83 | v86 | v88));
        unint64_t v92 = v48 + 4;
        DWORD2(v191) = v44;
        *(void *)&long long v192 = v46;
        unint64_t v95 = &v48[3 * v39 + 4];
        uint64_t v94 = &v48[2 * v39 + 4];
        int v93 = &v48[v39 + 4];
        unint64_t v36 = (unint64_t)v184;
        unint64_t v34 = (unint64_t)v181;
        unint64_t v35 = (unint64_t)v182;
      }
      *(void *)&long long v191 = v40;
      unsigned int v89 = v25;
      unsigned int v90 = v30;
      unsigned int v91 = v32;
    }
    unint64_t result = -20;
    if ((unint64_t)v92 <= v16 && (unint64_t)v93 <= v34 && (unint64_t)v94 <= v36)
    {
      unint64_t v96 = v42;
      unint64_t v97 = v34;
      if ((uint64_t)(v16 - (void)v92) < 4)
      {
        int v98 = v180;
        uint64_t v99 = v41;
        unsigned int v101 = (char *)v185;
        uint64_t v100 = v186;
        uint64_t v102 = v188;
        if (v89 > 0x40) {
          goto LABEL_101;
        }
        if (v41 >= 14)
        {
          uint64_t v99 = v41 - (v89 >> 3);
          v89 &= 7u;
        }
        else
        {
          if (v41 == 6) {
            goto LABEL_101;
          }
          uint64_t v115 = v89 >> 3;
          if (v41 - v115 >= 6) {
            uint64_t v115 = v115;
          }
          else {
            uint64_t v115 = (v41 - 6);
          }
          uint64_t v99 = v41 - v115;
          v89 -= 8 * v115;
        }
        uint64_t v24 = *(void *)((char *)a3 + v99);
      }
      else
      {
        int v98 = v180;
        uint64_t v99 = v41;
        unsigned int v101 = (char *)v185;
        uint64_t v100 = v186;
        uint64_t v102 = v188;
        if (v89 <= 0x40)
        {
          int v103 = -v180 & 0x3F;
          while (1)
          {
            if (v99 >= 14)
            {
              BOOL v105 = 0;
              LODWORD(v104) = v89 >> 3;
              v89 &= 7u;
            }
            else
            {
              if (v99 == 6) {
                break;
              }
              uint64_t v104 = v89 >> 3;
              BOOL v105 = v99 - v104 < 6;
              if (v99 - v104 < 6) {
                LODWORD(v104) = v99 - 6;
              }
              uint64_t v100 = v186;
              v89 -= 8 * v104;
            }
            v99 -= v104;
            uint64_t v24 = *(void *)((char *)a3 + v99);
            if ((unint64_t)v92 >= v16 - 3 || v105) {
              break;
            }
            uint64_t v106 = (unsigned __int8 *)(v38 + 2 * ((unint64_t)(v24 << v89) >> v103));
            unsigned int v107 = v89 + *v106;
            *unint64_t v92 = v106[1];
            int v108 = (unsigned __int8 *)(v38 + 2 * ((unint64_t)(v24 << v107) >> v103));
            unsigned int v109 = v107 + *v108;
            v92[1] = v108[1];
            BOOL v110 = (unsigned __int8 *)(v38 + 2 * ((unint64_t)(v24 << v109) >> v103));
            unsigned int v111 = v109 + *v110;
            v92[2] = v110[1];
            unsigned int v112 = (unsigned __int8 *)(v38 + 2 * ((unint64_t)(v24 << v111) >> v103));
            unsigned __int8 v113 = v112[1];
            unsigned int v89 = v111 + *v112;
            uint64_t v114 = v92 + 4;
            v92[3] = v113;
            v92 += 4;
            if (v89 > 0x40) {
              goto LABEL_100;
            }
          }
          uint64_t v114 = v92;
LABEL_100:
          unint64_t v92 = v114;
        }
      }
LABEL_101:
      uint64_t v116 = &v101[v190];
      if ((unint64_t)v92 < v16)
      {
        unint64_t v117 = &a1[v39] - v92;
        do
        {
          unsigned int v118 = (unsigned __int8 *)(v38 + 2 * ((unint64_t)(v24 << v89) >> (-(char)v98 & 0x3F)));
          v89 += *v118;
          *v92++ = v118[1];
          --v117;
        }
        while (v117);
      }
      if ((uint64_t)(v97 - (void)v93) < 4)
      {
        if (v90 > 0x40) {
          goto LABEL_127;
        }
        if (v190 >= 8)
        {
          LODWORD(v132) = v90 >> 3;
          v90 &= 7u;
        }
        else
        {
          if (!v190) {
            goto LABEL_127;
          }
          uint64_t v132 = v90 >> 3;
          if (&v116[-v132] < v101) {
            LODWORD(v132) = v190;
          }
          v90 -= 8 * v132;
        }
        v116 -= v132;
        uint64_t v102 = *(void *)v116;
      }
      else if (v90 <= 0x40)
      {
        int v119 = -v98 & 0x3F;
        unsigned int v120 = v93;
        while (1)
        {
          if (v190 >= 8)
          {
            BOOL v122 = 0;
            unsigned int v123 = v90 >> 3;
            v90 &= 7u;
          }
          else
          {
            if (!v190) {
              break;
            }
            unsigned int v121 = &v116[-(v90 >> 3)];
            BOOL v122 = v121 < v101;
            unsigned int v123 = v121 >= v101 ? v90 >> 3 : v190;
            v90 -= 8 * v123;
          }
          v190 -= v123;
          uint64_t v116 = &v101[v190];
          uint64_t v102 = *(void *)&v101[v190];
          if ((unint64_t)v120 >= v97 - 3 || v122) {
            break;
          }
          uint64_t v124 = (unsigned __int8 *)(v38 + 2 * ((unint64_t)(v102 << v90) >> v119));
          unsigned int v125 = v90 + *v124;
          *unsigned int v120 = v124[1];
          uint64_t v126 = (unsigned __int8 *)(v38 + 2 * ((unint64_t)(v102 << v125) >> v119));
          unsigned int v127 = v125 + *v126;
          v120[1] = v126[1];
          unsigned int v128 = (unsigned __int8 *)(v38 + 2 * ((unint64_t)(v102 << v127) >> v119));
          unsigned int v129 = v127 + *v128;
          v120[2] = v128[1];
          unsigned int v130 = (unsigned __int8 *)(v38 + 2 * ((unint64_t)(v102 << v129) >> v119));
          unsigned __int8 v131 = v130[1];
          unsigned int v90 = v129 + *v130;
          int v93 = v120 + 4;
          v120[3] = v131;
          v120 += 4;
          if (v90 > 0x40) {
            goto LABEL_127;
          }
        }
        int v93 = v120;
      }
LABEL_127:
      for (uint64_t i = &v100[v189]; (unint64_t)v93 < v97; ++v93)
      {
        unsigned int v134 = (unsigned __int8 *)(v38 + 2 * ((unint64_t)(v102 << v90) >> (-(char)v98 & 0x3F)));
        v90 += *v134;
        unsigned __int8 *v93 = v134[1];
      }
      unint64_t v135 = (unint64_t)v184;
      if (v184 - v94 < 4)
      {
        if (v91 > 0x40) {
          goto LABEL_152;
        }
        if (v189 >= 8)
        {
          LODWORD(v150) = v91 >> 3;
          v91 &= 7u;
        }
        else
        {
          if (!v189) {
            goto LABEL_152;
          }
          uint64_t v150 = v91 >> 3;
          if (&i[-v150] < v100) {
            LODWORD(v150) = v189;
          }
          v91 -= 8 * v150;
        }
        i -= v150;
        unint64_t v96 = *(void *)i;
      }
      else
      {
        uint64_t v136 = v189;
        if (v91 <= 0x40)
        {
          int v137 = -v98 & 0x3F;
          unint64_t v138 = v94;
          while (1)
          {
            if (v136 >= 8)
            {
              BOOL v140 = 0;
              unsigned int v141 = v91 >> 3;
              v91 &= 7u;
            }
            else
            {
              if (!v136) {
                break;
              }
              uint64_t v139 = v91 >> 3;
              BOOL v140 = &i[-v139] < v100;
              unsigned int v141 = &i[-v139] >= v100 ? v91 >> 3 : v136;
              unint64_t v135 = (unint64_t)v184;
              v91 -= 8 * v141;
            }
            v136 -= v141;
            uint64_t i = &v100[v136];
            unint64_t v96 = *(void *)&v100[v136];
            if (v138 >= v184 - 3 || v140) {
              break;
            }
            uint64_t v142 = (unsigned __int8 *)(v38 + 2 * (v96 << v91 >> v137));
            unsigned int v143 = v91 + *v142;
            unsigned __int8 *v138 = v142[1];
            int v144 = (unsigned __int8 *)(v38 + 2 * (v96 << v143 >> v137));
            unsigned int v145 = v143 + *v144;
            v138[1] = v144[1];
            unsigned int v146 = (unsigned __int8 *)(v38 + 2 * (v96 << v145 >> v137));
            unsigned int v147 = v145 + *v146;
            v138[2] = v146[1];
            unsigned int v148 = (unsigned __int8 *)(v38 + 2 * (v96 << v147 >> v137));
            unsigned __int8 v149 = v148[1];
            unsigned int v91 = v147 + *v148;
            uint64_t v94 = v138 + 4;
            v138[3] = v149;
            unint64_t v135 = (unint64_t)v184;
            v138 += 4;
            if (v91 > 0x40) {
              goto LABEL_152;
            }
          }
          uint64_t v94 = v138;
        }
      }
LABEL_152:
      while ((unint64_t)v94 < v135)
      {
        unint64_t v151 = (unsigned __int8 *)(v38 + 2 * (v96 << v91 >> (-(char)v98 & 0x3F)));
        v91 += *v151;
        *v94++ = v151[1];
      }
      if ((uint64_t)(v35 - (void)v95) >= 4)
      {
        unsigned int v152 = DWORD2(v191);
        if (DWORD2(v191) <= 0x40)
        {
          int v153 = -v98 & 0x3F;
          while (1)
          {
            if ((unint64_t)v192 >= v193)
            {
              BOOL v155 = 0;
              unsigned int v156 = (uint64_t *)(v192 - (v152 >> 3));
              *(void *)&long long v192 = v156;
              v152 &= 7u;
            }
            else
            {
              if ((void)v192 == *((void *)&v192 + 1)) {
                break;
              }
              uint64_t v154 = v152 >> 3;
              BOOL v155 = (unint64_t)(v192 - v154) < *((void *)&v192 + 1);
              uint64_t v154 = (unint64_t)(v192 - v154) >= *((void *)&v192 + 1)
                   ? v154
                   : (v192 - DWORD2(v192));
              uint64_t v100 = v186;
              unsigned int v156 = (uint64_t *)(v192 - v154);
              *(void *)&long long v192 = v192 - v154;
              v152 -= 8 * v154;
            }
            DWORD2(v191) = v152;
            uint64_t v157 = *v156;
            *(void *)&long long v191 = v157;
            if ((unint64_t)v95 >= v37 || v155) {
              break;
            }
            unsigned int v158 = (unsigned __int8 *)(v38 + 2 * ((unint64_t)(v157 << v152) >> v153));
            unsigned __int8 v159 = v158[1];
            DWORD2(v191) = v152 + *v158;
            *unint64_t v95 = v159;
            unsigned int v160 = (unsigned __int8 *)(v38 + 2 * ((void)v191 << SBYTE8(v191) >> v153));
            unsigned __int8 v161 = v160[1];
            DWORD2(v191) += *v160;
            v95[1] = v161;
            uint64_t v162 = (unsigned __int8 *)(v38 + 2 * ((void)v191 << SBYTE8(v191) >> v153));
            unsigned __int8 v163 = v162[1];
            DWORD2(v191) += *v162;
            v95[2] = v163;
            unsigned int v164 = (unsigned __int8 *)(v38 + 2 * ((void)v191 << SBYTE8(v191) >> v153));
            unsigned __int8 v165 = v164[1];
            DWORD2(v191) += *v164;
            int v166 = v95 + 4;
            v95[3] = v165;
            unsigned int v152 = DWORD2(v191);
            v95 += 4;
            if (DWORD2(v191) > 0x40) {
              goto LABEL_176;
            }
          }
          int v166 = v95;
LABEL_176:
          unint64_t v95 = v166;
        }
        goto LABEL_180;
      }
      unsigned int v152 = DWORD2(v191);
      if (DWORD2(v191) <= 0x40)
      {
        if ((unint64_t)v192 >= v193)
        {
          int v169 = (void *)(v192 - ((unint64_t)DWORD2(v191) >> 3));
          *(void *)&long long v192 = v169;
          unsigned int v152 = BYTE8(v191) & 7;
LABEL_179:
          DWORD2(v191) = v152;
          *(void *)&long long v191 = *v169;
          goto LABEL_180;
        }
        if ((void)v192 != *((void *)&v192 + 1))
        {
          unint64_t v167 = (unint64_t)DWORD2(v191) >> 3;
          if ((unint64_t)v192 - v167 >= *((void *)&v192 + 1)) {
            uint64_t v168 = v167;
          }
          else {
            uint64_t v168 = (v192 - DWORD2(v192));
          }
          int v169 = (void *)(v192 - v168);
          *(void *)&long long v192 = v192 - v168;
          unsigned int v152 = DWORD2(v191) - 8 * v168;
          goto LABEL_179;
        }
      }
LABEL_180:
      if ((unint64_t)v95 < v35)
      {
        unint64_t v170 = &a1[a2] - v95;
        do
        {
          unint64_t v171 = (unsigned __int8 *)(v38 + 2 * ((void)v191 << SBYTE8(v191) >> (-(char)v98 & 0x3F)));
          unsigned __int8 v172 = v171[1];
          DWORD2(v191) += *v171;
          *v95++ = v172;
          --v170;
        }
        while (v170);
        unsigned int v152 = DWORD2(v191);
      }
      if (v152 == 64
        && (void)v192 == *((void *)&v192 + 1)
        && v91 == 64
        && i == v100
        && v90 == 64
        && v116 == v101
        && v89 == 64
        && v99 == 6)
      {
        return a2;
      }
      else
      {
        return -20;
      }
    }
  }
  return result;
}

double sub_1DD2DC880(long long *a1)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)a1 + 13);
  uint64_t v1 = *((void *)a1 + 14);
  uint64_t v3 = *((void *)a1 + 12);
  long long v4 = a1[5];
  long long v34 = a1[4];
  long long v35 = v4;
  long long v5 = a1[1];
  long long v32 = *a1;
  long long v33 = v5;
  long long v6 = a1[3];
  long long v30 = a1[2];
  long long v31 = v6;
  unint64_t v7 = v32;
  unint64_t v8 = (v1 - *((void *)&v6 + 1)) / 5uLL;
  uint64_t v9 = ((unint64_t)(v32 - v2) * (unsigned __int128)0x2492492492492493uLL) >> 64;
  unint64_t v10 = (v9 + ((unint64_t)(v32 - v2 - v9) >> 1)) >> 2;
  if (v8 >= v10) {
    unint64_t v8 = v10;
  }
  uint64_t v11 = 5 * v8;
  if (v11 >= 20)
  {
    unint64_t v12 = *((void *)&v6 + 1) + v11;
    do
    {
      if (*((void *)&v32 + 1) < v7) {
        break;
      }
      if ((unint64_t)v33 < *((void *)&v32 + 1) || *((void *)&v33 + 1) < (unint64_t)v33) {
        break;
      }
      uint64_t v14 = 0;
      while (1)
      {
        for (uint64_t i = 0; i != 32; i += 8)
        {
          unint64_t v16 = *(void *)((char *)&v34 + i);
          __int16 v17 = *(_WORD *)(v3 + ((v16 >> 52) & 0xFFE));
          *(void *)((char *)&v34 + i) = v16 << v17;
          *(unsigned char *)(*(void *)((char *)&v30 + i) + v14) = HIBYTE(v17);
        }
        if (++v14 == 5)
        {
          for (uint64_t j = 0; j != 32; j += 8)
          {
            unsigned int v19 = __clz(__rbit64(*(void *)((char *)&v34 + j)));
            char v20 = v19 & 7;
            *(void *)((char *)&v30 + j) += 5;
            char v21 = (void *)(*(void *)((char *)&v32 + j) - (v19 >> 3));
            *(void *)((char *)&v32 + j) = v21;
            *(void *)((char *)&v34 + j) = (*v21 | 1) << v20;
          }
          uint64_t v14 = 0;
          if (*((void *)&v31 + 1) >= v12) {
            break;
          }
        }
      }
      unint64_t v22 = (v1 - *((void *)&v31 + 1)) / 5uLL;
      unint64_t v7 = v32;
      uint64_t v23 = ((unint64_t)(v32 - v2) * (unsigned __int128)0x2492492492492493uLL) >> 64;
      unint64_t v24 = (v23 + ((unint64_t)(v32 - v2 - v23) >> 1)) >> 2;
      if (v22 >= v24) {
        unint64_t v22 = v24;
      }
      uint64_t v25 = 5 * v22;
      unint64_t v12 = *((void *)&v31 + 1) + 5 * v22;
    }
    while (v25 >= 20);
  }
  long long v26 = v35;
  a1[4] = v34;
  a1[5] = v26;
  long long v27 = v33;
  *a1 = v32;
  a1[1] = v27;
  double result = *(double *)&v30;
  long long v29 = v31;
  a1[2] = v30;
  a1[3] = v29;
  return result;
}

double sub_1DD2DCA64(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 30192) = *(_DWORD *)(a2 + 27316);
  uint64_t v2 = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 29896) = v2;
  *(void *)(a1 + 29904) = v2;
  uint64_t v4 = v2 + v3;
  *(void *)(a1 + 29912) = v4;
  *(void *)(a1 + 29888) = v4;
  if (*(_DWORD *)(a2 + 27320))
  {
    *(void *)a1 = a2 + 24;
    *(void *)(a1 + 8) = a2 + 6184;
    *(void *)&double result = 0x100000001;
    *(void *)(a1 + 30000) = 0x100000001;
    *(void *)(a1 + 16) = a2 + 4128;
    *(void *)(a1 + 24) = a2 + 10288;
    *(_DWORD *)(a1 + 26684) = *(_DWORD *)(a2 + 26676);
    *(_DWORD *)(a1 + 26688) = *(_DWORD *)(a2 + 26680);
    *(_DWORD *)(a1 + 26692) = *(_DWORD *)(a2 + 26684);
  }
  else
  {
    double result = 0.0;
    *(void *)(a1 + 30000) = 0;
  }
  return result;
}

uint64_t sub_1DD2DCAF0(void **a1)
{
  if (a1)
  {
    uint64_t v2 = (void (*)(void *))a1[3417];
    uint64_t v3 = a1[3418];
    if (*a1)
    {
      if (v2)
      {
        v2(a1[3418]);
LABEL_6:
        ((void (*)(void *, void **))v2)(v3, a1);
        return 0;
      }
      free(*a1);
    }
    else if (v2)
    {
      goto LABEL_6;
    }
    free(a1);
  }
  return 0;
}

uint64_t sub_1DD2DCB68(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 27316);
  }
  return result;
}

char *sub_1DD2DCB78(long long *a1)
{
  uint64_t v1 = *(uint64_t (**)(void, uint64_t))a1;
  if ((*(void *)a1 == 0) != (*((void *)a1 + 1) == 0)) {
    return 0;
  }
  if (v1)
  {
    double result = (char *)v1(*((void *)a1 + 2), 95976);
    if (!result) {
      return result;
    }
  }
  else
  {
    double result = (char *)malloc(0x176E8uLL);
    if (!result) {
      return result;
    }
  }
  long long v4 = *a1;
  *((void *)result + 3768) = *((void *)a1 + 2);
  *((_OWORD *)result + 1883) = v4;
  *((void *)result + 3739) = 0;
  *(void *)(result + 30196) = 0;
  *((void *)result + 3784) = 0;
  *((_DWORD *)result + 7556) = 0;
  *((void *)result + 3788) = 0;
  *((_DWORD *)result + 7578) = 0;
  *((void *)result + 11996) = 0;
  *((void *)result + 3776) = 0;
  *((void *)result + 3771) = 0;
  *(_OWORD *)(result + 30232) = 0u;
  *((_OWORD *)result + 1886) = 0u;
  *((void *)result + 3782) = 134217729;
  *(void *)(result + 30324) = 0;
  *((void *)result + 3763) = 0;
  *((void *)result + 3777) = 0;
  return result;
}

char *sub_1DD2DCC54()
{
  return sub_1DD2DCB78(&xmmword_1DD322FF0);
}

uint64_t sub_1DD2DCC60(uint64_t result)
{
  if (!result) {
    return result;
  }
  uint64_t v1 = result;
  if (*(void *)(result + 30168)) {
    return -64;
  }
  uint64_t v2 = (_DWORD *)(result + 30200);
  uint64_t v3 = *(void (**)(uint64_t))(result + 30136);
  uint64_t v4 = *(void *)(result + 30144);
  sub_1DD2DCAF0(*(void ***)(result + 30176));
  *uint64_t v2 = 0;
  *(_OWORD *)(v1 + 30176) = 0u;
  if (*(void *)(v1 + 30232))
  {
    if (v3) {
      v3(v4);
    }
    else {
      free(*(void **)(v1 + 30232));
    }
  }
  *(void *)(v1 + 30232) = 0;
  long long v5 = *(void ***)(v1 + 30304);
  if (v5)
  {
    int v6 = *(_DWORD *)(v1 + 30312);
    switch(v6)
    {
      case 7:
        sub_1DD2ED2B0((uint64_t)v5);
        break;
      case 6:
        sub_1DD2EA1B0(v5);
        break;
      case 5:
        sub_1DD2E6D08(v5);
        break;
    }
  }
  unint64_t v7 = *(void ***)(v1 + 30208);
  if (v7)
  {
    if (*v7)
    {
      if (v3)
      {
        v3(v4);
LABEL_20:
        ((void (*)(uint64_t, void **))v3)(v4, v7);
LABEL_23:
        *(void *)(v1 + 30208) = 0;
        goto LABEL_24;
      }
      free(*v7);
    }
    else if (v3)
    {
      goto LABEL_20;
    }
    free(v7);
    goto LABEL_23;
  }
LABEL_24:
  if (v3) {
    ((void (*)(uint64_t, uint64_t))v3)(v4, v1);
  }
  else {
    free((void *)v1);
  }
  return 0;
}

uint64_t sub_1DD2DCD88(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v3 = 5;
  if (a3) {
    unint64_t v3 = 1;
  }
  if (v3 > a2) {
    return -72;
  }
  unint64_t v5 = *(unsigned __int8 *)(v3 + a1 - 1);
  BOOL v6 = v5 < 0x40;
  uint64_t v7 = qword_1DD323268[v5 & 3];
  uint64_t v8 = *(void *)((char *)&unk_1DD323288 + ((v5 >> 3) & 0x18));
  LODWORD(v5) = v5 & 0x20;
  BOOL v9 = v5 == 0;
  uint64_t v10 = v6 & (v5 >> 5);
  uint64_t v11 = v7 + v3 + v8;
  if (v9) {
    ++v11;
  }
  return v11 + v10;
}

size_t sub_1DD2DCDF4(uint64_t a1, char *__src, size_t __n, int a4)
{
  if (a4) {
    size_t v7 = 1;
  }
  else {
    size_t v7 = 5;
  }
  if (!__src && __n) {
    return -1;
  }
  if (v7 <= __n)
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    if (a4 == 1 || *(_DWORD *)__src == -47205080)
    {
      unint64_t v9 = sub_1DD2DCD88((uint64_t)__src, __n, a4);
      if (v9 <= __n)
      {
        *(_DWORD *)(a1 + 24) = v9;
        unsigned int v10 = __src[v7 - 1];
        if ((v10 & 8) != 0)
        {
          return -14;
        }
        else
        {
          if ((v10 & 0x20) != 0)
          {
            unint64_t v12 = 0;
          }
          else
          {
            unint64_t v11 = __src[v7];
            if (v11 > 0xAF) {
              return -16;
            }
            ++v7;
            unint64_t v12 = (1 << ((v11 >> 3) + 10))
                + ((unint64_t)(1 << ((v11 >> 3) + 10)) >> 3) * (v11 & 7);
          }
          int v13 = v10 & 3;
          unsigned int v14 = v10 >> 6;
          switch(v13)
          {
            case 3:
              int v15 = *(_DWORD *)&__src[v7];
              v7 += 4;
              break;
            case 2:
              int v15 = *(unsigned __int16 *)&__src[v7];
              v7 += 2;
              break;
            case 1:
              int v15 = __src[v7++];
              break;
            default:
              int v15 = 0;
              break;
          }
          int v16 = (v10 >> 2) & 1;
          switch(v14)
          {
            case 1u:
              uint64_t v17 = *(unsigned __int16 *)&__src[v7] + 256;
              break;
            case 2u:
              uint64_t v17 = *(unsigned int *)&__src[v7];
              break;
            case 3u:
              uint64_t v17 = *(void *)&__src[v7];
              break;
            default:
              if ((v10 & 0x20) != 0) {
                uint64_t v17 = __src[v7];
              }
              else {
                uint64_t v17 = -1;
              }
              break;
          }
          size_t v7 = 0;
          if ((v10 & 0x20) != 0) {
            unint64_t v18 = v17;
          }
          else {
            unint64_t v18 = v12;
          }
          *(void *)a1 = v17;
          *(void *)(a1 + 8) = v18;
          if (v18 >= 0x20000) {
            LODWORD(v18) = 0x20000;
          }
          *(_DWORD *)(a1 + 16) = v18;
          *(_DWORD *)(a1 + 20) = 0;
          *(_DWORD *)(a1 + 28) = v15;
          *(_DWORD *)(a1 + 32) = v16;
        }
      }
      else
      {
        return v9;
      }
    }
    else
    {
      if (*(_DWORD *)__src >> 4 != 25481893) {
        return -10;
      }
      if (__n >= 8)
      {
        size_t v7 = 0;
        *(void *)a1 = *((unsigned int *)__src + 1);
        *(_DWORD *)(a1 + 20) = 1;
      }
      else
      {
        return 8;
      }
    }
  }
  else if (__n)
  {
    if (a4 != 1)
    {
      unsigned int __dst = -47205080;
      memcpy(&__dst, __src, __n);
      if (__dst != -47205080)
      {
        unsigned int __dst = 407710288;
        memcpy(&__dst, __src, __n);
        if (__dst >> 4 != 25481893) {
          return -10;
        }
      }
    }
  }
  return v7;
}

uint64_t sub_1DD2DD050(void *a1, char *a2, uint64_t a3, unint64_t a4, size_t a5, _DWORD *a6, uint64_t a7, uint64_t a8)
{
  int v15 = a1 + 3745;
  if (a8)
  {
    a6 = (_DWORD *)sub_1DD286598(a8);
    a7 = sub_1DD273400(a8);
  }
  unint64_t v16 = 5;
  if (v15[36]) {
    unint64_t v16 = 1;
  }
  if (v16 > a5)
  {
    uint64_t v17 = a2;
    goto LABEL_7;
  }
  int v20 = 0;
  unint64_t v59 = a7;
  unsigned int v58 = a1 + 3751;
  uint64_t v17 = a2;
  while (1)
  {
LABEL_12:
    while (a5 < 4)
    {
LABEL_23:
      unsigned __int8 v60 = v20;
      if (a8)
      {
        sub_1DD2DDC64((uint64_t)a1, a8);
      }
      else
      {
        unint64_t v24 = sub_1DD2DDB10((uint64_t)a1, a6, v59);
        if (v24 > 0xFFFFFFFFFFFFFF88) {
          return v24;
        }
      }
      sub_1DD2E1DD4(a1, (uint64_t)v17, a3);
      int v25 = v15[36];
      unint64_t v26 = 9;
      if (v25) {
        unint64_t v26 = 5;
      }
      if (a5 < v26) {
        goto LABEL_38;
      }
      if (v25) {
        unint64_t v27 = 1;
      }
      else {
        unint64_t v27 = 5;
      }
      size_t v28 = sub_1DD2DCD88(a4, v27, v25);
      size_t v18 = v28;
      if (v28 > 0xFFFFFFFFFFFFFF88) {
        goto LABEL_39;
      }
      if (a5 < v28 + 3)
      {
LABEL_38:
        size_t v18 = -72;
        goto LABEL_39;
      }
      size_t v39 = sub_1DD2DD7D0((uint64_t)a1, (char *)a4, v28);
      if (v39 > 0xFFFFFFFFFFFFFF88)
      {
        size_t v18 = v39;
        goto LABEL_39;
      }
      unsigned __int8 v55 = a2;
      unsigned __int8 v57 = v15;
      unint64_t v50 = a6;
      uint64_t v40 = (unsigned __int16 *)(a4 + v18);
      LODWORD(__len) = 0;
      uint64_t v62 = 0;
      unint64_t v52 = a5 - v18;
      unint64_t v41 = sub_1DD2DDE1C((unsigned __int16 *)(a4 + v18), a5 - v18, &v62);
      unint64_t v42 = v41;
      if (v41 > 0xFFFFFFFFFFFFFF88)
      {
        size_t v18 = v41;
LABEL_105:
        a2 = v55;
        int v15 = v57;
        a6 = v50;
        goto LABEL_39;
      }
      unint64_t v51 = (unint64_t)&v17[a3];
      int v43 = v17;
      while (1)
      {
        BOOL v29 = v52 - 3 >= v42;
        unint64_t v52 = v52 - 3 - v42;
        if (!v29)
        {
          size_t v18 = -72;
          goto LABEL_105;
        }
        unsigned int v44 = (unsigned __int8 *)v40 + 3;
        unint64_t v45 = &v17[a3];
        if ((unint64_t)v40 + 3 < v51 && v44 >= (unsigned __int8 *)v43) {
          unint64_t v45 = (char *)v40 + 3;
        }
        if (v62 == 2)
        {
          long long v47 = (char *)v40 + 3;
          size_t v18 = sub_1DD2DE998((uint64_t)a1, v43, v45 - v43, v44, v42, 1, 0);
          if (v18 > 0xFFFFFFFFFFFFFF88) {
            goto LABEL_105;
          }
        }
        else
        {
          if (v62 == 1)
          {
            size_t v18 = __len;
            if (v45 - v43 < (unint64_t)__len) {
              goto LABEL_109;
            }
            if (v43)
            {
              long long v47 = (char *)v40 + 3;
              memset(v43, *v44, __len);
              goto LABEL_98;
            }
            if (__len)
            {
LABEL_113:
              size_t v18 = -74;
              goto LABEL_105;
            }
          }
          else
          {
            if (v62) {
              goto LABEL_108;
            }
            if (v42 > v51 - (unint64_t)v43)
            {
LABEL_109:
              size_t v18 = -70;
              goto LABEL_105;
            }
            if (v43)
            {
              long long v47 = (char *)v40 + 3;
              memmove(v43, v44, v42);
              size_t v18 = v42;
              goto LABEL_98;
            }
            if (v42) {
              goto LABEL_113;
            }
          }
          long long v47 = (char *)v40 + 3;
          size_t v18 = 0;
        }
LABEL_98:
        if (v57[38]) {
          sub_1DD29499C((uint64_t)v58, v43, v18);
        }
        v43 += v18;
        uint64_t v40 = (unsigned __int16 *)&v47[v42];
        if (HIDWORD(v62)) {
          break;
        }
        LODWORD(__len) = 0;
        uint64_t v62 = 0;
        unint64_t v42 = sub_1DD2DDE1C(v40, v52, &v62);
        size_t v18 = v42;
        if (v42 >= 0xFFFFFFFFFFFFFF89) {
          goto LABEL_105;
        }
      }
      uint64_t v48 = a1[3741];
      size_t v18 = v43 - v17;
      if (v48 != -1 && v18 != v48)
      {
LABEL_108:
        size_t v18 = -20;
        goto LABEL_105;
      }
      a6 = v50;
      if (*v57)
      {
        size_t v49 = v52 - 4;
        if (v52 < 4)
        {
          size_t v18 = -22;
          goto LABEL_115;
        }
        unsigned __int8 v53 = v40;
        int v15 = v57;
        if (v57[37] || *(_DWORD *)v53 == sub_1DD294B48(v58))
        {
          a4 = (unint64_t)(v53 + 2);
          a5 = v49;
        }
        else
        {
          size_t v18 = -22;
        }
        a2 = v55;
      }
      else
      {
        a4 = (unint64_t)v40;
        a5 = v52;
LABEL_115:
        a2 = v55;
        int v15 = v57;
      }
LABEL_39:
      if (((sub_1DD294D00(v18) == 10) & v60) != 0) {
        return -72;
      }
      if (v18 > 0xFFFFFFFFFFFFFF88) {
        return v18;
      }
      v17 += v18;
      a3 -= v18;
      unint64_t v16 = 5;
      if (v15[36]) {
        unint64_t v16 = 1;
      }
      int v20 = 1;
      if (a5 < v16)
      {
LABEL_7:
        if (a5) {
          return -72;
        }
        else {
          return v17 - a2;
        }
      }
    }
    if ((*(_DWORD *)a4 + 47205083) > 2) {
      break;
    }
    uint64_t v62 = 0;
    size_t __len = 0;
    uint64_t v64 = 0;
    int v23 = *(_DWORD *)a4;
    int v61 = v20;
    if (*(_DWORD *)a4 == -47205081)
    {
      sub_1DD2ED0E4(a4, a5, &__len, &v64);
    }
    else if (v23 == -47205082)
    {
      sub_1DD2EA040(a4, a5, &__len, &v64);
    }
    else if (v23 == -47205083)
    {
      sub_1DD2E6C4C((_DWORD *)a4, a5, (uint64_t *)&__len, &v64);
    }
    else
    {
      size_t __len = -10;
    }
    BOOL v29 = __len <= a5 || __len >= 0xFFFFFFFFFFFFFF89;
    if (v29) {
      size_t v18 = __len;
    }
    else {
      size_t v18 = -72;
    }
    if (v18 > 0xFFFFFFFFFFFFFF88) {
      return v18;
    }
    if (a1[3771]) {
      return -64;
    }
    if (v18 < 4) {
      return -10;
    }
    int v30 = *(_DWORD *)a4;
    unint64_t v54 = a2;
    uint64_t v56 = v15;
    if (*(_DWORD *)a4 == -47205081)
    {
      uint64_t v31 = (uint64_t)a6;
      sub_1DD2EBEBC();
      if (!v35) {
        return -64;
      }
      uint64_t v36 = (uint64_t)v35;
      unint64_t v34 = sub_1DD2ECB3C(v35, v17, a3, a4, v18, v31, v59);
      sub_1DD2EBEF8(v36);
    }
    else if (v30 == -47205082)
    {
      uint64_t v31 = (uint64_t)a6;
      sub_1DD2E905C();
      if (!v37) {
        return -64;
      }
      uint64_t v38 = v37;
      unint64_t v34 = sub_1DD2E9D58(v37, v17, a3, a4, v18, v31, v59);
      sub_1DD2E5888(v38);
    }
    else
    {
      if (v30 != -47205083) {
        return -10;
      }
      uint64_t v31 = (uint64_t)a6;
      sub_1DD2E5840();
      if (!v32) {
        return -64;
      }
      long long v33 = v32;
      unint64_t v34 = sub_1DD2E6954(v32, v17, a3, (_DWORD *)a4, v18, v31, v59);
      sub_1DD2E5888(v33);
    }
    int v20 = v61;
    if (v34 > 0xFFFFFFFFFFFFFF88) {
      return v34;
    }
    v17 += v34;
    a3 -= v34;
    a4 += v18;
    a5 -= v18;
    a2 = v54;
    if (v56[36]) {
      unint64_t v16 = 1;
    }
    else {
      unint64_t v16 = 5;
    }
    a6 = (_DWORD *)v31;
    int v15 = v56;
    if (a5 < v16) {
      goto LABEL_7;
    }
  }
  if (*(_DWORD *)a4 >> 4 != 25481893) {
    goto LABEL_23;
  }
  if (a5 < 8) {
    return -72;
  }
  uint64_t v21 = *(unsigned int *)(a4 + 4);
  if (v21 > 0xFFFFFFF7) {
    return -14;
  }
  size_t v22 = v21 + 8;
  if (v22 <= a5) {
    size_t v18 = v22;
  }
  else {
    size_t v18 = -72;
  }
  if (v18 <= 0xFFFFFFFFFFFFFF88)
  {
    a4 += v18;
    a5 -= v18;
    if (a5 < v16) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
  return v18;
}

uint64_t sub_1DD2DD6FC(void *a1, char *a2, uint64_t a3, unint64_t a4, size_t a5)
{
  sub_1DD2DD770((uint64_t)a1);
  return sub_1DD2DD050(a1, a2, a3, a4, a5, 0, 0, v10);
}

double sub_1DD2DD770(uint64_t a1)
{
  uint64_t v2 = (_DWORD *)(a1 + 30200);
  int v3 = *(_DWORD *)(a1 + 30200);
  if (v3 != -1)
  {
    if (v3 == 1)
    {
      *uint64_t v2 = 0;
    }
    else
    {
      sub_1DD2DCAF0(*(void ***)(a1 + 30176));
      *uint64_t v2 = 0;
      double result = 0.0;
      *(_OWORD *)(a1 + 30176) = 0u;
    }
  }
  return result;
}

size_t sub_1DD2DD7D0(uint64_t a1, char *a2, size_t a3)
{
  unint64_t v5 = (_DWORD *)(a1 + 29956);
  size_t result = sub_1DD2DCDF4(a1 + 29928, a2, a3, *(_DWORD *)(a1 + 30104));
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    if (result)
    {
      return -72;
    }
    else
    {
      if (v5[65] == 1 && *(void *)(a1 + 30208)) {
        sub_1DD2DDD5C(a1);
      }
      if (*v5 && v5[59] != *v5)
      {
        return -32;
      }
      else
      {
        if (v5[1])
        {
          int v7 = v5[38];
          v5[39] = v7 == 0;
          if (!v7) {
            sub_1DD294954(a1 + 30008, 0);
          }
        }
        else
        {
          v5[39] = 0;
        }
        size_t result = 0;
        *(void *)(a1 + 29976) += a3;
      }
    }
  }
  return result;
}

uint64_t sub_1DD2DD8A4(int *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (a3 >= 9)
  {
    uint64_t v6 = a2 + 8;
    unint64_t v7 = sub_1DD2D8808(a1 + 2566, (char *)(a2 + 8), a3 - 8, (uint64_t)a1, 0x2818uLL);
    if (v7 <= 0xFFFFFFFFFFFFFF88)
    {
      unint64_t v8 = v7;
      unint64_t v9 = a2 + a3;
      uint64_t v10 = (_DWORD *)(v6 + v7);
      unsigned int v25 = 0;
      unsigned int v26 = 31;
      unint64_t v11 = sub_1DD293948(v27, &v26, &v25, v10, a2 + a3 - (void)v10);
      if (v11 <= 0xFFFFFFFFFFFFFF88 && v26 <= 0x1F && v25 < 9)
      {
        unint64_t v12 = v11;
        sub_1DD2DE3E4(a1 + 1026, (uint64_t)v27, v26, (uint64_t)&unk_1DD323008, (uint64_t)&unk_1DD323088, v25, (uint64_t)(a1 + 6666));
        int v13 = (char *)v10 + v12;
        unsigned int v25 = 0;
        unsigned int v26 = 52;
        unint64_t v14 = sub_1DD293948(v27, &v26, &v25, (_DWORD *)((char *)v10 + v12), v9 - ((void)v10 + v12));
        if (v14 <= 0xFFFFFFFFFFFFFF88 && v26 <= 0x34 && v25 < 0xA)
        {
          unint64_t v15 = v14;
          sub_1DD2DE3E4(a1 + 1540, (uint64_t)v27, v26, (uint64_t)&unk_1DD3230A8, (uint64_t)&unk_1DD32317C, v25, (uint64_t)(a1 + 6666));
          unint64_t v16 = &v13[v15];
          unsigned int v25 = 0;
          unsigned int v26 = 35;
          unint64_t v17 = sub_1DD293948(v27, &v26, &v25, &v13[v15], v9 - (void)&v13[v15]);
          if (v17 <= 0xFFFFFFFFFFFFFF88 && v26 <= 0x23 && v25 < 0xA)
          {
            unint64_t v18 = v17;
            sub_1DD2DE3E4(a1, (uint64_t)v27, v26, (uint64_t)&unk_1DD3231B4, (uint64_t)&unk_1DD323244, v25, (uint64_t)(a1 + 6666));
            unint64_t v19 = (unint64_t)&v16[v18 + 12];
            if (v19 <= v9)
            {
              uint64_t v21 = 0;
              unint64_t v22 = v9 - v19;
              while (1)
              {
                unint64_t v23 = *(unsigned int *)&v16[v18 + v21 * 4];
                if (!v23 || v22 < v23) {
                  break;
                }
                a1[v21 + 6663] = v23;
                if (++v21 == 3) {
                  return v8 + v12 + v15 + v18 + 20;
                }
              }
            }
          }
        }
      }
    }
  }
  return -30;
}

uint64_t sub_1DD2DDB10(uint64_t a1, _DWORD *a2, unint64_t a3)
{
  uint64_t result = 0;
  uint64_t v5 = 5;
  if (*(_DWORD *)(a1 + 30104)) {
    uint64_t v5 = 1;
  }
  *(void *)(a1 + 29920) = v5;
  *(void *)(a1 + 26684) = 0x400000001;
  *(_DWORD *)(a1 + 26692) = 8;
  *(_OWORD *)(a1 + 29888) = 0u;
  *(_OWORD *)(a1 + 29904) = 0u;
  *(_OWORD *)(a1 + 29976) = 0u;
  *(_DWORD *)(a1 + 10296) = 201326604;
  *(_DWORD *)(a1 + 30192) = 0;
  *(_OWORD *)(a1 + 29992) = xmmword_1DD322FE0;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 6192;
  *(void *)(a1 + 16) = a1 + 4136;
  *(void *)(a1 + 24) = a1 + 10296;
  if (a2 && a3)
  {
    if (a3 > 7 && *a2 == -332356553)
    {
      *(_DWORD *)(a1 + 30192) = a2[1];
      unint64_t v8 = sub_1DD2DD8A4((int *)(a1 + 32), (uint64_t)a2, a3);
      if (v8 > 0xFFFFFFFFFFFFFF88) {
        return -30;
      }
      *(void *)(a1 + 30000) = 0x100000001;
      uint64_t v9 = *(void *)(a1 + 29888);
      *(void *)(a1 + 29912) = v9;
      *(void *)(a1 + 29904) = (char *)a2 + v8 + *(void *)(a1 + 29896) - v9;
      *(void *)(a1 + 29896) = (char *)a2 + v8;
    }
    else
    {
      *(void *)(a1 + 29904) = a2;
      *(void *)(a1 + 29896) = a2;
    }
    uint64_t result = 0;
    *(void *)(a1 + 29888) = (char *)a2 + a3;
  }
  return result;
}

uint64_t sub_1DD2DDC64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 29992;
  if (a2)
  {
    uint64_t v5 = sub_1DD286598(a2);
    *(_DWORD *)(v4 + 204) = *(void *)(a1 + 29912) != v5 + sub_1DD273400(a2);
  }
  uint64_t v6 = 5;
  if (*(_DWORD *)(v4 + 112)) {
    uint64_t v6 = 1;
  }
  *(void *)(a1 + 29920) = v6;
  *(_OWORD *)(a1 + 29888) = 0u;
  *(_OWORD *)(a1 + 29904) = 0u;
  *(_OWORD *)(a1 + 29976) = 0u;
  *(_DWORD *)(a1 + 10296) = 201326604;
  *(_DWORD *)(v4 + 200) = 0;
  *(_OWORD *)uint64_t v4 = xmmword_1DD322FE0;
  *(void *)(a1 + 26684) = 0x400000001;
  *(_DWORD *)(a1 + 26692) = 8;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 6192;
  *(void *)(a1 + 16) = a1 + 4136;
  *(void *)(a1 + 24) = a1 + 10296;
  if (a2) {
    sub_1DD2DCA64(a1, a2);
  }
  return 0;
}

uint64_t sub_1DD2DDD5C(uint64_t result)
{
  if (*(void *)(result + 30184))
  {
    uint64_t v1 = result;
    uint64_t v2 = (_DWORD *)(result + 29956);
    int v3 = *(void **)(result + 30208);
    int v4 = *(_DWORD *)(result + 29956);
    LODWORD(v11) = v4;
    unint64_t v5 = sub_1DD2947FC(&v11, 4uLL, 0);
    uint64_t v6 = v3[1] - 1;
    uint64_t v7 = v6 & v5;
    do
    {
      uint64_t v8 = v7;
      uint64_t result = sub_1DD2DCB68(*(void *)(*v3 + 8 * v7));
      uint64_t v7 = (v8 & v6) + 1;
    }
    while (result != v4 && result != 0);
    uint64_t v10 = *(void *)(*v3 + 8 * v8);
    if (v10)
    {
      uint64_t result = sub_1DD2DCAF0(*(void ***)(v1 + 30176));
      *(void *)(v1 + 30176) = 0;
      v2[59] = *v2;
      *(void *)(v1 + 30184) = v10;
      v2[61] = -1;
    }
  }
  return result;
}

uint64_t sub_1DD2DDE1C(unsigned __int16 *a1, unint64_t a2, _DWORD *a3)
{
  if (a2 < 3) {
    return -72;
  }
  unint64_t v4 = *a1;
  unint64_t v5 = (v4 & 0xFFF8 | (*((unsigned __int8 *)a1 + 2) << 16)) >> 3;
  uint64_t result = (v4 >> 1) & 3;
  *a3 = result;
  a3[1] = v4 & 1;
  a3[2] = v5;
  if (result != 1)
  {
    if (result == 3) {
      return -20;
    }
    else {
      return v5;
    }
  }
  return result;
}

uint64_t sub_1DD2DDE70(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4, unint64_t a5, int a6)
{
  if (a3 < 2) {
    return -20;
  }
  uint64_t v10 = a1 + 30000;
  unint64_t v11 = *a2;
  int v12 = v11 & 3;
  switch(v11 & 3)
  {
    case 1uLL:
      unsigned int v17 = (v11 >> 2) & 3;
      unint64_t v18 = 0x20000;
      if (a5 < 0x20000) {
        unint64_t v18 = a5;
      }
      if (v17 == 1)
      {
        if (a3 < 3) {
          return -20;
        }
        unint64_t v19 = (unint64_t)*(unsigned __int16 *)a2 >> 4;
        uint64_t v20 = 2;
      }
      else if (v17 == 3)
      {
        if (a3 < 4) {
          return -20;
        }
        unint64_t v19 = (*(unsigned __int16 *)a2 | ((unint64_t)a2[2] << 16)) >> 4;
        uint64_t v20 = 3;
      }
      else
      {
        unint64_t v19 = v11 >> 3;
        uint64_t v20 = 1;
      }
      if (!a4 && v19) {
        return -70;
      }
      if (v19 > 0x20000) {
        return -20;
      }
      if (v18 < v19) {
        return -70;
      }
      if (a6 || v19 + 131136 >= a5)
      {
        size_t v45 = v19 - 0x10000;
        if (v19 > 0x10000)
        {
          long long v46 = (char *)(a4 + v18 - v19 + 65504);
          *(void *)(a1 + 30360) = v46;
          *(void *)(a1 + 30368) = &v46[v45];
          *(_DWORD *)(v10 + 376) = 2;
          memset(v46, a2[v20], v45);
          long long v35 = (char *)(a1 + 30380);
          int v47 = a2[v20];
          size_t v48 = 0x10000;
          goto LABEL_77;
        }
        int v36 = 0;
        long long v35 = (char *)(a1 + 30380);
      }
      else
      {
        long long v35 = (char *)(a4 + 131104);
        int v36 = 1;
      }
      *(void *)(a1 + 30360) = v35;
      *(void *)(a1 + 30368) = &v35[v19];
      *(_DWORD *)(v10 + 376) = v36;
      int v47 = a2[v20];
      size_t v48 = v19;
LABEL_77:
      memset(v35, v47, v48);
      *(void *)(a1 + 30120) = *(void *)(a1 + 30360);
      *(void *)(a1 + 30152) = v19;
      return v20 + 1;
    case 2uLL:
      goto LABEL_18;
    case 3uLL:
      if (!*(_DWORD *)v10) {
        return -30;
      }
LABEL_18:
      if (a3 < 5) {
        return -20;
      }
      unsigned int v21 = (v11 >> 2) & 3;
      unint64_t v22 = *(unsigned int *)a2;
      if (a5 >= 0x20000) {
        unint64_t v23 = 0x20000;
      }
      else {
        unint64_t v23 = a5;
      }
      BOOL v24 = *(_DWORD *)(a1 + 30220) != 0;
      if (v21 == 2)
      {
        BOOL v25 = 0;
        unsigned int v26 = (v22 >> 4) & 0x3FFF;
        unint64_t v27 = v22 >> 18;
        uint64_t v28 = 4;
      }
      else if (v21 == 3)
      {
        BOOL v25 = 0;
        unsigned int v26 = (v22 >> 4) & 0x3FFFF;
        unint64_t v27 = (v22 >> 22) | ((unint64_t)a2[4] << 10);
        uint64_t v28 = 5;
      }
      else
      {
        BOOL v25 = v21 == 0;
        unsigned int v26 = (v22 >> 4) & 0x3FF;
        unint64_t v27 = (v22 >> 14) & 0x3FF;
        uint64_t v28 = 3;
      }
      if (!a4 && v26) {
        return -70;
      }
      unint64_t v37 = v26;
      if (v26 > 0x20000) {
        return -20;
      }
      if (v26 <= 5 && !v25) {
        return -24;
      }
      unint64_t v6 = v27 + v28;
      if (v27 + v28 > a3) {
        return -20;
      }
      if (v23 < v26) {
        return -70;
      }
      if (a6 || (unint64_t)v26 + 131136 >= a5)
      {
        if (v26 <= 0x10000)
        {
          int v44 = 0;
          unint64_t v42 = (char *)(a1 + 30380);
          *(void *)(a1 + 30360) = a1 + 30380;
          uint64_t v43 = a1 + 30380 + v26;
        }
        else
        {
          uint64_t v43 = a4 + v23;
          unint64_t v42 = (char *)(a4 + v23 - v37);
          *(void *)(a1 + 30360) = v42;
          int v44 = 2;
        }
      }
      else
      {
        unint64_t v42 = (char *)(a4 + 131104);
        *(void *)(a1 + 30360) = a4 + 131104;
        uint64_t v43 = a4 + 131104 + v26;
        int v44 = 1;
      }
      *(void *)(a1 + 30368) = v43;
      *(_DWORD *)(a1 + 30376) = v44;
      if (v37 >= 0x301 && *(_DWORD *)(a1 + 30196))
      {
        unint64_t v49 = 0;
        do
        {
          _X13 = *(void *)(a1 + 24) + v49;
          __asm { PRFM            #2, [X13] }
          unint64_t v55 = v49 >> 2;
          v49 += 64;
        }
        while (v55 < 0xFF1);
      }
      if (v12 == 3)
      {
        uint64_t v56 = &a2[v28];
        unsigned __int8 v57 = *(int **)(a1 + 24);
        if (v25) {
          unint64_t v58 = sub_1DD2D9220(v42, v37, v56, v27, v57);
        }
        else {
          unint64_t v58 = sub_1DD2D94AC(v42, v37, (unsigned __int16 *)v56, v27, (unsigned int *)v57, 16 * v24);
        }
      }
      else
      {
        unint64_t v59 = (int *)(a1 + 10296);
        unsigned __int8 v60 = (char *)&a2[v28];
        uint64_t v61 = a1 + 27324;
        if (v25) {
          unint64_t v58 = sub_1DD2D9180(v59, v42, v37, v60, v27, v61, 0xA00uLL);
        }
        else {
          unint64_t v58 = sub_1DD2D9B7C(v59, v42, v37, v60, v27, v61, 0xA00uLL, 16 * v24);
        }
      }
      unint64_t v62 = v58;
      if (*(_DWORD *)(v10 + 376) == 2)
      {
        memcpy((void *)(a1 + 30380), (const void *)(*(void *)(a1 + 30368) - 0x10000), 0x10000uLL);
        memmove((void *)(*(void *)(a1 + 30360) + 65504), *(const void **)(a1 + 30360), v37 - 0x10000);
        *(int64x2_t *)(v10 + 360) = vaddq_s64(*(int64x2_t *)(v10 + 360), (int64x2_t)xmmword_1DD3232B0);
      }
      if (v62 > 0xFFFFFFFFFFFFFF88) {
        return -20;
      }
      *(void *)(a1 + 30120) = *(void *)(a1 + 30360);
      *(void *)(a1 + 30152) = v37;
      *(_DWORD *)uint64_t v10 = 1;
      if (v12 == 2) {
        *(void *)(a1 + 24) = a1 + 10296;
      }
      return v6;
    default:
      unsigned int v13 = (v11 >> 2) & 3;
      unint64_t v14 = 0x20000;
      if (a5 < 0x20000) {
        unint64_t v14 = a5;
      }
      if (v13 == 1)
      {
        unint64_t v15 = (unint64_t)*(unsigned __int16 *)a2 >> 4;
        uint64_t v16 = 2;
      }
      else if (v13 == 3)
      {
        if (a3 < 3) {
          return -20;
        }
        unint64_t v15 = (*(unsigned __int16 *)a2 | ((unint64_t)a2[2] << 16)) >> 4;
        uint64_t v16 = 3;
      }
      else
      {
        unint64_t v15 = v11 >> 3;
        uint64_t v16 = 1;
      }
      if (a4) {
        _ZF = 1;
      }
      else {
        _ZF = v15 == 0;
      }
      char v30 = !_ZF;
      unint64_t v6 = -70;
      if (v14 < v15 || (v30 & 1) != 0) {
        return v6;
      }
      if (a6 || v15 + 131136 >= a5)
      {
        if (v15 <= 0x10000)
        {
          int v31 = 0;
          int v34 = 0;
          long long v32 = (void *)(a1 + 30380);
          *(void *)(a1 + 30360) = a1 + 30380;
          uint64_t v33 = a1 + 30380 + v15;
        }
        else
        {
          long long v32 = (void *)(a4 + v14 - v15 + 65504);
          uint64_t v33 = a4 + v14 - 32;
          *(void *)(a1 + 30360) = v32;
          int v34 = 2;
          int v31 = 1;
        }
      }
      else
      {
        int v31 = 0;
        long long v32 = (void *)(a4 + 131104);
        *(void *)(a1 + 30360) = a4 + 131104;
        uint64_t v33 = a4 + 131104 + v15;
        int v34 = 1;
      }
      *(void *)(a1 + 30368) = v33;
      *(_DWORD *)(v10 + 376) = v34;
      unint64_t v6 = v16 + v15;
      if (v16 + v15 + 32 <= a3)
      {
        unint64_t v41 = &a2[v16];
        *(void *)(a1 + 30120) = v41;
        *(void *)(a1 + 30152) = v15;
        *(void *)(a1 + 30368) = &v41[v15];
        *(_DWORD *)(v10 + 376) = 0;
      }
      else
      {
        if (v6 > a3) {
          return -20;
        }
        uint64_t v38 = &a2[v16];
        if (v31)
        {
          memcpy(v32, &a2[v16], v15 - 0x10000);
          long long v32 = (void *)(a1 + 30380);
          size_t v39 = &v38[v15 - 0x10000];
          size_t v40 = 0x10000;
        }
        else
        {
          size_t v39 = &a2[v16];
          size_t v40 = v15;
        }
        memcpy(v32, v39, v40);
        *(void *)(a1 + 30120) = *(void *)(a1 + 30360);
        *(void *)(a1 + 30152) = v15;
      }
      break;
  }
  return v6;
}

int *sub_1DD2DE3E4(int *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v7 = result + 2;
  unint64_t v8 = (1 << a6);
  uint64_t v9 = (v8 - 1);
  uint64_t v10 = (a3 + 1);
  if (a3 == -1)
  {
    *uint64_t result = 1;
    result[1] = a6;
    unsigned int v11 = (v8 >> 3) + (v8 >> 1) + 3;
LABEL_16:
    unint64_t v26 = 0;
    uint64_t v27 = 0;
    do
    {
      v7[2 * (v27 & v9) + 1] = *(unsigned __int8 *)(a7 + v26 + 106);
      v7[2 * ((v27 + v11) & v9) + 1] = *(unsigned __int8 *)(a7 + v26 + 107);
      uint64_t v27 = (v27 + 2 * v11) & v9;
      v26 += 2;
    }
    while (v26 < v8);
    goto LABEL_26;
  }
  uint64_t v12 = 0;
  int v13 = 1;
  unsigned int v14 = v8 - 1;
  do
  {
    int v15 = *(__int16 *)(a2 + 2 * v12);
    if (v15 == -1)
    {
      unsigned int v17 = &v7[2 * v14--];
      v17[1] = v12;
      __int16 v16 = 1;
    }
    else
    {
      __int16 v16 = *(_WORD *)(a2 + 2 * v12);
      if (0x10000 << (a6 - 1) >> 16 <= v15) {
        int v13 = 0;
      }
    }
    *(_WORD *)(a7 + 2 * v12++) = v16;
  }
  while (v10 != v12);
  *uint64_t result = v13;
  result[1] = a6;
  unsigned int v18 = v8 >> 3;
  if (v14 == v9)
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    do
    {
      int v22 = *(__int16 *)(a2 + 2 * v19);
      unint64_t v23 = *(unsigned __int16 *)(a2 + 2 * v19);
      *(void *)(a7 + 106 + v21) = v20;
      if (v22 >= 9)
      {
        uint64_t v24 = 114;
        do
        {
          *(void *)(a7 + v21 + v24) = v20;
          unint64_t v25 = v24 - 98;
          v24 += 8;
        }
        while (v25 < v23);
      }
      v21 += (__int16)v23;
      ++v19;
      v20 += 0x101010101010101;
    }
    while (v19 != v10);
    unsigned int v11 = v18 + 3 + (v8 >> 1);
    goto LABEL_16;
  }
  uint64_t v28 = 0;
  unsigned int v29 = 0;
  unsigned int v30 = v18 + (v8 >> 1) + 3;
  do
  {
    int v31 = *(__int16 *)(a2 + 2 * v28);
    if (v31 >= 1)
    {
      for (int i = 0; i != v31; ++i)
      {
        v7[2 * v29 + 1] = v28;
        do
          unsigned int v29 = (v30 + v29) & v9;
        while (v29 > v14);
      }
    }
    ++v28;
  }
  while (v28 != v10);
LABEL_26:
  uint64_t v33 = result + 3;
  uint64_t v34 = (1 << a6);
  do
  {
    uint64_t v35 = *v33;
    unsigned int v36 = *(unsigned __int16 *)(a7 + 2 * v35);
    *(_WORD *)(a7 + 2 * v35) = v36 + 1;
    unsigned int v37 = a6 - 31 + __clz(v36);
    *((unsigned char *)v33 - 1) = v37;
    *((_WORD *)v33 - 2) = (v36 << v37) - v8;
    *((unsigned char *)v33 - 2) = *(unsigned char *)(a5 + v35);
    *uint64_t v33 = *(_DWORD *)(a4 + 4 * v35);
    v33 += 2;
    --v34;
  }
  while (v34);
  return result;
}

uint64_t sub_1DD2DE5D0(uint64_t a1, int *a2, unsigned __int8 *a3, uint64_t a4)
{
  if (!a4) {
    return -72;
  }
  unint64_t v5 = a3 + 1;
  int v6 = *a3;
  if (*a3)
  {
    if ((v6 & 0x80) != 0)
    {
      if (v6 == 255)
      {
        if (a4 < 3) {
          return -72;
        }
        unint64_t v5 = a3 + 3;
        int v6 = *(unsigned __int16 *)(a3 + 1) + 32512;
      }
      else
      {
        if (a4 < 2) {
          return -72;
        }
        unint64_t v5 = a3 + 2;
        int v6 = (a3[1] | (v6 << 8)) - 0x8000;
      }
    }
    unint64_t v8 = &a3[a4];
    *a2 = v6;
    uint64_t v9 = v5 + 1;
    if (v5 + 1 > &a3[a4]) {
      return -72;
    }
    unsigned int v11 = (int *)(a1 + 30004);
    unsigned int v12 = *v5;
    unint64_t v13 = sub_1DD2DE7E0(a1 + 32, (void *)a1, v12 >> 6, 0x23u, 9u, v9, v8 - v9, (uint64_t)&unk_1DD3232C0, (uint64_t)&unk_1DD323350, (uint64_t)&unk_1DD323374, *(_DWORD *)(a1 + 30004), *(_DWORD *)(a1 + 30196), v6, a1 + 27324);
    if (v13 > 0xFFFFFFFFFFFFFF88) {
      return -20;
    }
    unsigned int v14 = &v9[v13];
    unint64_t v15 = sub_1DD2DE7E0(a1 + 4136, (void *)(a1 + 16), (v12 >> 4) & 3, 0x1Fu, 8u, v14, v8 - v14, (uint64_t)&unk_1DD32357C, (uint64_t)&unk_1DD3235FC, (uint64_t)&unk_1DD32361C, *v11, *(_DWORD *)(a1 + 30196), v6, a1 + 27324);
    if (v15 > 0xFFFFFFFFFFFFFF88) {
      return -20;
    }
    __int16 v16 = &v14[v15];
    unint64_t v17 = sub_1DD2DE7E0(a1 + 6192, (void *)(a1 + 8), (v12 >> 2) & 3, 0x34u, 9u, v16, v8 - v16, (uint64_t)&unk_1DD323724, (uint64_t)&unk_1DD3237F8, (uint64_t)&unk_1DD323830, *v11, *(_DWORD *)(a1 + 30196), v6, a1 + 27324);
    if (v17 > 0xFFFFFFFFFFFFFF88) {
      return -20;
    }
    else {
      return &v16[v17] - a3;
    }
  }
  else
  {
    *a2 = 0;
    if (a4 == 1) {
      return 1;
    }
    else {
      return -72;
    }
  }
}

uint64_t sub_1DD2DE7E0(uint64_t a1, void *a2, int a3, unsigned int a4, unsigned int a5, _DWORD *a6, size_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, int a13, uint64_t a14)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  unsigned int v33 = a4;
  switch(a3)
  {
    case 0:
      uint64_t v18 = 0;
      *a2 = a10;
      break;
    case 1:
      if (a7)
      {
        uint64_t v19 = *(unsigned __int8 *)a6;
        if (v19 > a4) {
          goto LABEL_18;
        }
        int v20 = *(_DWORD *)(a8 + 4 * v19);
        char v21 = *(unsigned char *)(a9 + v19);
        *(void *)a1 = 0;
        *(unsigned char *)(a1 + 11) = 0;
        *(_WORD *)(a1 + 8) = 0;
        *(unsigned char *)(a1 + 10) = v21;
        *(_DWORD *)(a1 + 12) = v20;
        *a2 = a1;
        uint64_t v18 = 1;
      }
      else
      {
        uint64_t v18 = -72;
      }
      break;
    case 2:
      unsigned int v32 = 0;
      unint64_t v22 = sub_1DD293948(v34, &v33, &v32, a6, a7);
      if (v22 > 0xFFFFFFFFFFFFFF88 || v32 > a5) {
        goto LABEL_18;
      }
      uint64_t v18 = v22;
      sub_1DD2DE3E4((int *)a1, (uint64_t)v34, v33, a8, a9, v32, a14);
      *a2 = a1;
      break;
    case 3:
      if (a11)
      {
        if (a12) {
          BOOL v23 = a13 < 25;
        }
        else {
          BOOL v23 = 1;
        }
        if (!v23)
        {
          unint64_t v24 = 0;
          do
          {
            _X11 = *a2 + v24;
            __asm { PRFM            #2, [X11] }
            v24 += 64;
          }
          while (v24 < 8 * (unint64_t)((1 << a5) + 1));
        }
        uint64_t v18 = 0;
      }
      else
      {
LABEL_18:
        uint64_t v18 = -20;
      }
      break;
    default:
      uint64_t v18 = -1;
      break;
  }
  return v18;
}

unint64_t sub_1DD2DE998(uint64_t a1, char *a2, unint64_t a3, unsigned __int8 *a4, unint64_t a5, int a6, int a7)
{
  if (a5 > 0x20000) {
    return -72;
  }
  uint64_t v30 = v7;
  uint64_t v31 = v8;
  unint64_t result = sub_1DD2DDE70(a1, a4, a5, (uint64_t)a2, a3, a7);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    __int16 v16 = (unsigned int *)(a1 + 29944);
    unint64_t v17 = &a4[result];
    uint64_t v18 = a5 - result;
    if (a6) {
      uint64_t v19 = *v16 >= a3 ? a3 : *v16;
    }
    else {
      uint64_t v19 = a3 >= 0x20000 ? 0x20000 : a3;
    }
    uint64_t v20 = *(void *)(a1 + 29904);
    int v21 = *(_DWORD *)(a1 + 30196);
    int v29 = 0;
    unint64_t result = sub_1DD2DE5D0(a1, &v29, v17, v18);
    if (result <= 0xFFFFFFFFFFFFFF88)
    {
      unint64_t v22 = result;
      BOOL v23 = !a2 || a3 == 0;
      int v24 = v29;
      BOOL v25 = !v23 || v29 <= 0;
      BOOL v26 = !v25;
      unint64_t result = -70;
      if ((unint64_t)a2 <= 0xFFFFFFFFFFEFFFFFLL && !v26)
      {
        uint64_t v27 = &v17[v22];
        unint64_t v28 = v18 - v22;
        if (!v21 && (unint64_t)&a2[v19 - v20] >= 0x1000001 && v29 >= 9) {
          int v21 = sub_1DD2DEB44(*(void *)(a1 + 16), v29) > 6;
        }
        *(_DWORD *)(a1 + 30196) = 0;
        if (v21)
        {
          return sub_1DD2DEBA0(a1, a2, a3, v27, v28, v24);
        }
        else if (*(_DWORD *)(a1 + 30376) == 2)
        {
          return sub_1DD2E04CC((uint64_t *)a1, a2, a3, v27, v28, v24);
        }
        else
        {
          return sub_1DD2E1674(a1, a2, a3, v27, v28, v24);
        }
      }
    }
  }
  return result;
}

unint64_t sub_1DD2DEB44(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  int v2 = 0;
  LODWORD(v3) = 0;
  int v4 = *(_DWORD *)(a1 + 4);
  unsigned int v5 = 1;
  do
  {
    unsigned int v6 = *(unsigned __int8 *)(a1 + 8 + 8 * (v5 - 1) + 2);
    if (v3 <= v6) {
      uint64_t v3 = *(unsigned __int8 *)(a1 + 8 + 8 * (v5 - 1) + 2);
    }
    else {
      uint64_t v3 = v3;
    }
    if (v6 > 0x16) {
      ++v2;
    }
  }
  while (!(v5++ >> v4));
  return (v2 << (8 - v4)) | (unint64_t)(v3 << 32);
}

unint64_t sub_1DD2DEBA0(uint64_t a1, char *__dst, uint64_t a3, unsigned __int8 *a4, unint64_t a5, int a6)
{
  unsigned int v6 = __dst;
  uint64_t v7 = a1;
  v325[22] = *MEMORY[0x1E4F143B8];
  v315 = (_DWORD *)(a1 + 30004);
  int v8 = *(_DWORD *)(a1 + 30376);
  if (v8 == 1) {
    uint64_t v9 = *(char **)(a1 + 30360);
  }
  else {
    uint64_t v9 = &__dst[a3];
  }
  uint64_t v10 = *(char **)(a1 + 30120);
  v320 = v10;
  unint64_t v11 = *(void *)(a1 + 30368);
  if (!a6)
  {
    __int16 v16 = v6;
    goto LABEL_16;
  }
  uint64_t v12 = 0;
  unint64_t v13 = *(char **)(a1 + 29896);
  uint64_t v312 = a1 + 30380;
  uint64_t v311 = *(void *)(a1 + 29904);
  unint64_t v316 = *(void *)(a1 + 29912);
  long long v318 = 0u;
  memset(v319, 0, sizeof(v319));
  _DWORD *v315 = 1;
  long long v317 = 0u;
  do
  {
    *((void *)&v319[3] + v12 + 1) = *(unsigned int *)(a1 + 26684 + 4 * v12);
    ++v12;
  }
  while (v12 != 3);
  if (a6 >= 8) {
    int v14 = 8;
  }
  else {
    int v14 = a6;
  }
  if (!a5) {
    return -20;
  }
  *((void *)&v318 + 1) = a4;
  *(void *)&v319[0] = a4 + 8;
  if (a5 < 8)
  {
    uint64_t v20 = *a4;
    *(void *)&long long v318 = a4;
    *(void *)&long long v317 = v20;
    switch(a5)
    {
      case 2uLL:
        goto LABEL_29;
      case 3uLL:
        goto LABEL_28;
      case 4uLL:
        goto LABEL_27;
      case 5uLL:
        goto LABEL_26;
      case 6uLL:
        goto LABEL_25;
      case 7uLL:
        v20 |= (unint64_t)a4[6] << 48;
LABEL_25:
        v20 += (unint64_t)a4[5] << 40;
LABEL_26:
        v20 += (unint64_t)a4[4] << 32;
LABEL_27:
        v20 += (unint64_t)a4[3] << 24;
LABEL_28:
        v20 += (unint64_t)a4[2] << 16;
LABEL_29:
        *(void *)&long long v317 = v20 + ((unint64_t)a4[1] << 8);
        break;
      default:
        break;
    }
    if (!a4[a5 - 1]) {
      return -20;
    }
    DWORD2(v317) = __clz(a4[a5 - 1]) - 8 * a5 + 41;
  }
  else
  {
    unint64_t v15 = *(void *)&a4[a5 - 8];
    *(void *)&long long v318 = &a4[a5 - 8];
    *(void *)&long long v317 = v15;
    if (!HIBYTE(v15)) {
      return -20;
    }
    DWORD2(v317) = __clz(HIBYTE(v15)) - 23;
    if (a5 > 0xFFFFFFFFFFFFFF88) {
      return -20;
    }
  }
  int v299 = v14;
  unint64_t v313 = v11;
  uint64_t v300 = (uint64_t)v9;
  uint64_t v298 = v6;
  uint64_t v21 = v6 - v13;
  sub_1DD2E1E04((void *)v319 + 1, (uint64_t)&v317, *(void *)a1);
  sub_1DD2E1E04((void *)&v319[1] + 1, (uint64_t)&v317, *(void *)(v7 + 16));
  uint64_t v308 = v7;
  sub_1DD2E1E04((void *)&v319[2] + 1, (uint64_t)&v317, *(void *)(v7 + 8));
  unsigned int v22 = DWORD2(v317);
  v314 = v13;
  if (DWORD2(v317) <= 0x40)
  {
    uint64_t v25 = 0;
    BOOL v26 = (unint64_t *)*((void *)&v318 + 1);
    uint64_t v27 = *((void *)&v319[0] + 1);
    unint64_t v28 = *(void *)&v319[0];
    uint64_t v29 = *(void *)&v319[1];
    uint64_t v30 = *((void *)&v319[2] + 1);
    uint64_t v31 = *(void *)&v319[3];
    uint64_t v32 = *((void *)&v319[1] + 1);
    uint64_t v33 = *(void *)&v319[2];
    unint64_t v34 = v317;
    uint64_t v35 = (unint64_t *)v318;
    uint64_t v23 = v299 & ~(v299 >> 31);
    unsigned int v36 = v325;
    unint64_t v38 = *((void *)&v319[3] + 1);
    unint64_t v37 = *(void *)&v319[4];
    while ((unint64_t)v35 < v28)
    {
      if (v35 != v26)
      {
        uint64_t v39 = v22 >> 3;
        if ((unint64_t *)((char *)v35 - v39) >= v26) {
          uint64_t v39 = v39;
        }
        else {
          uint64_t v39 = (v35 - v26);
        }
        uint64_t v35 = (unint64_t *)((char *)v35 - v39);
        *(void *)&long long v318 = v35;
        v22 -= 8 * v39;
        goto LABEL_44;
      }
      uint64_t v35 = v26;
LABEL_45:
      if (v23 == v25)
      {
        int v77 = a6;
        goto LABEL_91;
      }
      uint64_t v40 = v23;
      unint64_t v41 = (unsigned __int16 *)(v29 + 8 * v27);
      unint64_t v42 = (unsigned __int16 *)(v31 + 8 * v30);
      unint64_t v43 = *((unsigned int *)v42 + 1);
      uint64_t v44 = *((unsigned int *)v41 + 1);
      size_t v45 = (unsigned __int16 *)(v33 + 8 * v32);
      uint64_t v46 = *((unsigned int *)v45 + 1);
      int v47 = *((unsigned __int8 *)v41 + 2);
      int v48 = *((unsigned __int8 *)v42 + 2);
      unsigned int v49 = *((unsigned __int8 *)v45 + 2);
      uint64_t v50 = *v41;
      uint64_t v51 = *v42;
      uint64_t v52 = *v45;
      int v53 = *((unsigned __int8 *)v41 + 3);
      int v54 = *((unsigned __int8 *)v42 + 3);
      int v55 = *((unsigned __int8 *)v45 + 3);
      if (v49 >= 2)
      {
        unint64_t v56 = v34 << v22 >> -(char)v49;
        v22 += v49;
        *((void *)&v319[4] + 1) = v37;
        unint64_t v37 = v38;
        unint64_t v38 = v56 + v46;
LABEL_50:
        uint64_t v23 = v40;
        goto LABEL_51;
      }
      if (!*((unsigned char *)v45 + 2))
      {
        unint64_t v38 = *((void *)&v319[3] + (v44 == 0) + 1);
        unint64_t v37 = *((void *)&v319[3] + (v44 != 0) + 1);
        goto LABEL_50;
      }
      if (v44) {
        uint64_t v72 = v46;
      }
      else {
        uint64_t v72 = (v46 + 1);
      }
      unint64_t v73 = v34 << v22++;
      DWORD2(v317) = v22;
      uint64_t v74 = v72 + (v73 >> 63);
      if (v74 == 3)
      {
        if (v38 == 1) {
          uint64_t v75 = 1;
        }
        else {
          uint64_t v75 = v38 - 1;
        }
        uint64_t v23 = v40;
      }
      else
      {
        uint64_t v76 = v74;
        if (*((void *)&v319[3] + v74 + 1)) {
          uint64_t v75 = *((void *)&v319[3] + v74 + 1);
        }
        else {
          uint64_t v75 = 1;
        }
        _ZF = v76 == 1;
        uint64_t v23 = v40;
        if (_ZF) {
          goto LABEL_85;
        }
      }
      *((void *)&v319[4] + 1) = v37;
LABEL_85:
      unint64_t v37 = v38;
      unint64_t v38 = v75;
LABEL_51:
      unsigned __int8 v57 = v48 + v47 + v49;
      *((void *)&v319[3] + 1) = v38;
      *(void *)&v319[4] = v37;
      unint64_t v58 = (v34 << v22 >> -(char)v48) + v43;
      if (v48)
      {
        v22 += v48;
        unint64_t v43 = v58;
      }
      if (v57 >= 0x1Fu)
      {
        unint64_t v13 = v314;
        if (v22 <= 0x40)
        {
          if ((unint64_t)v35 >= v28)
          {
            uint64_t v35 = (unint64_t *)((char *)v35 - (v22 >> 3));
            *(void *)&long long v318 = v35;
            v22 &= 7u;
          }
          else
          {
            if (v35 == v26)
            {
              uint64_t v35 = v26;
              goto LABEL_55;
            }
            uint64_t v71 = v22 >> 3;
            if ((unint64_t *)((char *)v35 - v71) >= v26) {
              uint64_t v71 = v71;
            }
            else {
              uint64_t v71 = (v35 - v26);
            }
            uint64_t v35 = (unint64_t *)((char *)v35 - v71);
            *(void *)&long long v318 = v35;
            v22 -= 8 * v71;
          }
          unint64_t v34 = *v35;
          *(void *)&long long v317 = *v35;
        }
      }
      else
      {
        unint64_t v13 = v314;
      }
LABEL_55:
      unint64_t v59 = (v34 << v22 >> -(char)v47) + v44;
      if (v47) {
        v22 += v47;
      }
      else {
        unint64_t v59 = v44;
      }
      int v60 = v22 + v53;
      uint64_t v27 = ((v34 >> -(char)v60) & dword_1DD323A38[v53]) + v50;
      int v61 = v60 + v54;
      uint64_t v30 = ((v34 >> -(char)v61) & dword_1DD323A38[v54]) + v51;
      *((void *)&v319[2] + 1) = v30;
      unsigned int v22 = v61 + v55;
      unint64_t v62 = (v34 >> -(char)v22) & dword_1DD323A38[v55];
      DWORD2(v317) = v22;
      uint64_t v32 = v62 + v52;
      *((void *)&v319[0] + 1) = v27;
      *((void *)&v319[1] + 1) = v32;
      uint64_t v63 = v59 + v21;
      unint64_t v64 = v316;
      if (v38 <= v59 + v21) {
        unint64_t v64 = (unint64_t)v13;
      }
      _X6 = v64 + v63 - v38;
      __asm
      {
        PRFM            #0, [X6]
        PRFM            #0, [X6,#0x40]
      }
      uint64_t v21 = v63 + v43;
      *(v36 - 2) = v59;
      *(v36 - 1) = v43;
      *unsigned int v36 = v38;
      v36 += 3;
      ++v25;
      if (v22 > 0x40)
      {
        LODWORD(v23) = v25;
        goto LABEL_90;
      }
    }
    uint64_t v35 = (unint64_t *)((char *)v35 - (v22 >> 3));
    *(void *)&long long v318 = v35;
    v22 &= 7u;
LABEL_44:
    DWORD2(v317) = v22;
    unint64_t v34 = *v35;
    *(void *)&long long v317 = *v35;
    goto LABEL_45;
  }
  LODWORD(v23) = 0;
LABEL_90:
  int v77 = a6;
  if ((int)v23 < v299) {
    return -20;
  }
LABEL_91:
  unint64_t v309 = v300 - 32;
  unint64_t v301 = v308 + 95916;
  __int16 v16 = v298;
  while (v22 < 0x41)
  {
    unint64_t v78 = (void *)v318;
    if ((unint64_t)v318 >= *(void *)&v319[0])
    {
      unint64_t v78 = (void *)(v318 - (v22 >> 3));
      *(void *)&long long v318 = v78;
      v22 &= 7u;
    }
    else
    {
      if ((void)v318 == *((void *)&v318 + 1)) {
        goto LABEL_101;
      }
      uint64_t v79 = v22 >> 3;
      if ((unint64_t)(v318 - v79) >= *((void *)&v318 + 1)) {
        uint64_t v80 = v79;
      }
      else {
        uint64_t v80 = (v318 - DWORD2(v318));
      }
      unint64_t v78 = (void *)(v318 - v80);
      *(void *)&long long v318 = v318 - v80;
      v22 -= 8 * v80;
    }
    DWORD2(v317) = v22;
    *(void *)&long long v317 = *v78;
LABEL_101:
    if ((int)v23 >= v77) {
      goto LABEL_245;
    }
    uint64_t v81 = (unsigned __int16 *)(*(void *)&v319[1] + 8 * *((void *)&v319[0] + 1));
    int v82 = (unsigned __int16 *)(*(void *)&v319[3] + 8 * *((void *)&v319[2] + 1));
    int v83 = (unsigned __int16 *)(*(void *)&v319[2] + 8 * *((void *)&v319[1] + 1));
    unint64_t v84 = *((unsigned int *)v82 + 1);
    unint64_t v85 = *((unsigned int *)v81 + 1);
    uint64_t v86 = *((unsigned int *)v83 + 1);
    int v87 = *((unsigned __int8 *)v81 + 2);
    int v88 = *((unsigned __int8 *)v82 + 2);
    unsigned int v89 = *((unsigned __int8 *)v83 + 2);
    uint64_t v90 = *v81;
    uint64_t v91 = *v82;
    uint64_t v92 = *v83;
    int v93 = *((unsigned __int8 *)v81 + 3);
    int v94 = *((unsigned __int8 *)v82 + 3);
    int v95 = *((unsigned __int8 *)v83 + 3);
    if (v89 >= 2)
    {
      uint64_t v96 = (void)v317 << v22 >> -(char)v89;
      v22 += v89;
      unint64_t v97 = v96 + v86;
      v319[4] = *(_OWORD *)((char *)&v319[3] + 8);
      goto LABEL_107;
    }
    if (*((unsigned char *)v83 + 2))
    {
      if (v85) {
        uint64_t v86 = v86;
      }
      else {
        uint64_t v86 = (v86 + 1);
      }
      unint64_t v170 = (void)v317 << v22++;
      DWORD2(v317) = v22;
      uint64_t v171 = v86 + (v170 >> 63);
      if (v171 == 3)
      {
        if (*((void *)&v319[3] + 1) == 1) {
          unint64_t v97 = 1;
        }
        else {
          unint64_t v97 = *((void *)&v319[3] + 1) - 1;
        }
        goto LABEL_199;
      }
      if (*((void *)&v319[3] + v171 + 1)) {
        unint64_t v97 = *((void *)&v319[3] + v171 + 1);
      }
      else {
        unint64_t v97 = 1;
      }
      if (v171 != 1) {
LABEL_199:
      }
        *((void *)&v319[4] + 1) = *(void *)&v319[4];
      uint64_t v98 = *((void *)&v319[3] + 1);
      goto LABEL_106;
    }
    unint64_t v97 = *((void *)&v319[3] + (v85 == 0) + 1);
    uint64_t v98 = *((void *)&v319[3] + (v85 != 0) + 1);
LABEL_106:
    *(void *)&v319[4] = v98;
LABEL_107:
    *((void *)&v319[3] + 1) = v97;
    if (v88)
    {
      uint64_t v99 = (void)v317 << v22 >> -(char)v88;
      v22 += v88;
      v84 += v99;
    }
    if ((v88 + v87 + v89) >= 0x1Fu && v22 <= 0x40)
    {
      if ((unint64_t)v78 >= *(void *)&v319[0])
      {
        unint64_t v167 = (void *)((char *)v78 - (v22 >> 3));
        *(void *)&long long v318 = v167;
        v22 &= 7u;
      }
      else
      {
        if (v78 == *((void **)&v318 + 1)) {
          goto LABEL_110;
        }
        uint64_t v165 = v22 >> 3;
        if ((unint64_t)v78 - v165 >= *((void *)&v318 + 1)) {
          uint64_t v166 = v165;
        }
        else {
          uint64_t v166 = (v78 - DWORD2(v318));
        }
        unint64_t v167 = (void *)((char *)v78 - v166);
        *(void *)&long long v318 = v167;
        v22 -= 8 * v166;
      }
      *(void *)&long long v317 = *v167;
    }
LABEL_110:
    unint64_t v100 = ((void)v317 << v22 >> -(char)v87) + v85;
    _ZF = v87 == 0;
    if (v87) {
      unsigned int v102 = v22 + v87;
    }
    else {
      unsigned int v102 = v22;
    }
    if (_ZF) {
      unint64_t v103 = v85;
    }
    else {
      unint64_t v103 = v100;
    }
    uint64_t v104 = (((unint64_t)v317 >> -(char)(v102 + v93)) & dword_1DD323A38[v93]) + v90;
    int v105 = v102 + v93 + v94;
    *((void *)&v319[2] + 1) = (((unint64_t)v317 >> -(char)v105) & dword_1DD323A38[v94]) + v91;
    int v106 = v105 + v95;
    unint64_t v107 = (unint64_t)v317 >> -(char)(v105 + v95);
    uint64_t v108 = dword_1DD323A38[v95];
    DWORD2(v317) = v106;
    *((void *)&v319[0] + 1) = v104;
    *((void *)&v319[1] + 1) = (v107 & v108) + v92;
    if (v315[93] != 2)
    {
      unsigned int v123 = &v324[3 * (v23 & 7)];
      unint64_t v124 = *v123;
      int64_t v125 = v123[1];
      unint64_t v126 = v123[2];
      unsigned int v127 = &v16[*v123];
      unsigned int v128 = v320;
      unsigned int v129 = &v320[*v123];
      _X8 = &v127[-v126];
      __asm { PRFM            #0, [X8] }
      if ((unint64_t)v129 > v313 || (unint64_t v19 = v125 + v124, (unint64_t)&v16[v125 + v124] > v309))
      {
        unint64_t v321 = v124;
        int64_t v322 = v125;
        unint64_t v323 = v126;
        unint64_t v168 = v103;
        uint64_t v169 = sub_1DD2E1F50(v16, v300, &v321, &v320, v313, v13, v311, v316);
        int v77 = a6;
        unint64_t v19 = v169;
        unint64_t v103 = v168;
      }
      else
      {
        *(_OWORD *)__int16 v16 = *(_OWORD *)v320;
        BOOL v225 = v124 > 0x10;
        uint64_t v132 = v124 - 16;
        if (v225)
        {
          *((_OWORD *)v16 + 1) = *((_OWORD *)v128 + 1);
          if (v132 >= 17)
          {
            unsigned int v174 = v16 + 32;
            long long v175 = (long long *)(v128 + 48);
            do
            {
              *(_OWORD *)unsigned int v174 = *(v175 - 1);
              long long v176 = *v175;
              v175 += 2;
              *((_OWORD *)v174 + 1) = v176;
              v174 += 32;
            }
            while (v174 < v127);
          }
        }
        v320 = v129;
        if (v126 <= v127 - v13)
        {
LABEL_138:
          if (v126 < 0x10)
          {
            if (v126 > 7)
            {
              *(void *)unsigned int v127 = *(void *)_X8;
            }
            else
            {
              uint64_t v179 = dword_1DD323AD8[v126];
              *unsigned int v127 = *_X8;
              v127[1] = _X8[1];
              v127[2] = _X8[2];
              v127[3] = _X8[3];
              int v180 = &_X8[dword_1DD323AB8[v126]];
              *((_DWORD *)v127 + 1) = *(_DWORD *)v180;
              _X8 = &v180[-v179];
            }
            if ((unint64_t)v125 >= 9)
            {
              uint64_t v189 = _X8 + 8;
              uint64_t v190 = v127 + 8;
              long long v191 = &v127[v125];
              if (v127 - _X8 > 15)
              {
                *uint64_t v190 = *v189;
                if (v125 >= 25)
                {
                  int v199 = v127 + 24;
                  v200 = (long long *)(_X8 + 40);
                  do
                  {
                    *(_OWORD *)int v199 = *(v200 - 1);
                    long long v201 = *v200;
                    v200 += 2;
                    *((_OWORD *)v199 + 1) = v201;
                    v199 += 32;
                  }
                  while (v199 < v191);
                }
              }
              else
              {
                do
                {
                  uint64_t v192 = *(void *)v189;
                  uint64_t v189 = (_OWORD *)((char *)v189 + 8);
                  *(void *)uint64_t v190 = v192;
                  uint64_t v190 = (_OWORD *)((char *)v190 + 8);
                }
                while (v190 < (_OWORD *)v191);
              }
              int v77 = a6;
              unint64_t v13 = v314;
            }
          }
          else
          {
            *(_OWORD *)unsigned int v127 = *(_OWORD *)_X8;
            if (v125 >= 17)
            {
              uint64_t v139 = v127 + 16;
              BOOL v140 = (long long *)(_X8 + 32);
              do
              {
                *(_OWORD *)uint64_t v139 = *(v140 - 1);
                long long v141 = *v140;
                v140 += 2;
                *((_OWORD *)v139 + 1) = v141;
                v139 += 32;
              }
              while (v139 < &v127[v125]);
            }
          }
        }
        else
        {
          if (v126 > (unint64_t)&v127[-v311]) {
            return -20;
          }
          unint64_t v303 = v103;
          v306 = v16;
          unint64_t v133 = v19;
          unint64_t v134 = v97;
          uint64_t v135 = v21;
          unint64_t v136 = v84;
          uint64_t v137 = _X8 - v13;
          unint64_t v138 = (const void *)(v316 + _X8 - v13);
          if ((unint64_t)v138 + v125 > v316)
          {
            memmove(v127, v138, v13 - _X8);
            v127 -= v137;
            v125 += v137;
            _X8 = v13;
            int v77 = a6;
            unint64_t v84 = v136;
            uint64_t v21 = v135;
            unint64_t v97 = v134;
            unint64_t v19 = v133;
            unint64_t v103 = v303;
            __int16 v16 = v306;
            goto LABEL_138;
          }
          memmove(v127, v138, v125);
          int v77 = a6;
          unint64_t v84 = v136;
          uint64_t v21 = v135;
          unint64_t v97 = v134;
          unint64_t v19 = v133;
          unint64_t v103 = v303;
          __int16 v16 = v306;
        }
      }
LABEL_160:
      if (v19 > 0xFFFFFFFFFFFFFF88) {
        return v19;
      }
      uint64_t v155 = v103 + v21;
      unint64_t v156 = v316;
      if (v97 <= v103 + v21) {
        unint64_t v156 = (unint64_t)v13;
      }
      _X9 = v156 + v155 - v97;
      __asm
      {
        PRFM            #0, [X9]
        PRFM            #0, [X9,#0x40]
      }
      unsigned int v160 = &v324[3 * (v23 & 7)];
      *unsigned int v160 = v103;
      v160[1] = v84;
      v160[2] = v97;
      v16 += v19;
      goto LABEL_169;
    }
    unint64_t v305 = v84;
    unsigned int v109 = v320;
    BOOL v110 = &v324[3 * (v23 & 7)];
    unint64_t v111 = *v110;
    unsigned int v112 = &v320[*v110];
    unsigned __int8 v113 = *(char **)(v308 + 30368);
    if (v112 <= v113)
    {
      uint64_t v142 = v112 - 32;
      int64_t v144 = v110[1];
      unint64_t v143 = v110[2];
      if ((unint64_t)v112 > v313 || (unint64_t v19 = v144 + v111, &v16[v144 + v111] > v142))
      {
        unint64_t v321 = v111;
        int64_t v322 = v144;
        unint64_t v323 = v143;
        unint64_t v172 = v103;
        uint64_t v173 = sub_1DD2E220C(v16, v300, v142, &v321, &v320, v313, v13, v311, v316);
        int v77 = a6;
        unint64_t v19 = v173;
        unint64_t v103 = v172;
      }
      else
      {
        unsigned int v145 = &v16[v111];
        *(_OWORD *)__int16 v16 = *(_OWORD *)v320;
        if (v111 > 0x10)
        {
          *((_OWORD *)v16 + 1) = *((_OWORD *)v109 + 1);
          if ((uint64_t)(v111 - 16) >= 17)
          {
            int v181 = v16 + 32;
            uint64_t v182 = (long long *)(v109 + 48);
            do
            {
              *(_OWORD *)int v181 = *(v182 - 1);
              long long v183 = *v182;
              v182 += 2;
              *((_OWORD *)v181 + 1) = v183;
              v181 += 32;
            }
            while (v181 < v145);
          }
        }
        unsigned int v146 = &v145[-v143];
        v320 = v112;
        if (v143 > v145 - v13)
        {
          if (v143 > (unint64_t)&v145[-v311]) {
            return -20;
          }
          unint64_t v304 = v103;
          uint64_t v147 = v146 - v13;
          unsigned int v148 = (const void *)(v316 + v146 - v13);
          if ((unint64_t)v148 + v144 <= v316)
          {
            memmove(v145, v148, v144);
            int v77 = a6;
            unint64_t v103 = v304;
            unint64_t v84 = v305;
            goto LABEL_160;
          }
          memmove(v145, v148, v13 - v146);
          v145 -= v147;
          v144 += v147;
          unsigned int v146 = v13;
          int v77 = a6;
          unint64_t v103 = v304;
        }
        if (v143 >= 0x10)
        {
          *(_OWORD *)unsigned int v145 = *(_OWORD *)v146;
          unint64_t v84 = v305;
          if (v144 >= 17)
          {
            unsigned __int8 v149 = v145 + 16;
            uint64_t v150 = (long long *)(v146 + 32);
            do
            {
              *(_OWORD *)unsigned __int8 v149 = *(v150 - 1);
              long long v151 = *v150;
              v150 += 2;
              *((_OWORD *)v149 + 1) = v151;
              v149 += 32;
            }
            while (v149 < &v145[v144]);
          }
          goto LABEL_160;
        }
        if (v143 > 7)
        {
          *(void *)unsigned int v145 = *(void *)v146;
        }
        else
        {
          uint64_t v187 = dword_1DD323AD8[v143];
          *unsigned int v145 = *v146;
          v145[1] = v146[1];
          v145[2] = v146[2];
          v145[3] = v146[3];
          uint64_t v188 = &v146[dword_1DD323AB8[v143]];
          *((_DWORD *)v145 + 1) = *(_DWORD *)v188;
          unsigned int v146 = &v188[-v187];
        }
        if ((unint64_t)v144 >= 9)
        {
          uint64_t v195 = v146 + 8;
          unsigned int v196 = v145 + 8;
          int v197 = &v145[v144];
          if (v145 - v146 > 15)
          {
            *(_OWORD *)unsigned int v196 = *v195;
            if (v144 >= 25)
            {
              v206 = v145 + 24;
              v207 = (long long *)(v146 + 40);
              do
              {
                *(_OWORD *)v206 = *(v207 - 1);
                long long v208 = *v207;
                v207 += 2;
                *((_OWORD *)v206 + 1) = v208;
                v206 += 32;
              }
              while (v206 < v197);
            }
          }
          else
          {
            do
            {
              uint64_t v198 = *(void *)v195;
              uint64_t v195 = (_OWORD *)((char *)v195 + 8);
              *(void *)unsigned int v196 = v198;
              v196 += 8;
            }
            while (v196 < v197);
          }
        }
        int v77 = a6;
        unint64_t v13 = v314;
      }
      unint64_t v84 = v305;
      goto LABEL_160;
    }
    unint64_t v114 = v113 - v320;
    if (v113 != v320)
    {
      if (v114 > v300 - (uint64_t)v16) {
        return -70;
      }
      unint64_t v115 = v103;
      sub_1DD2E1EA4(v16, v320, v114);
      unint64_t v103 = v115;
      int v77 = a6;
      v111 -= v114;
      unint64_t *v110 = v111;
      v16 += v114;
    }
    v320 = (char *)v312;
    v315[93] = 0;
    int64_t v116 = v110[1];
    unint64_t v117 = v110[2];
    unsigned int v118 = &v16[v111];
    _X8 = &v16[v111 - v117];
    __asm { PRFM            #0, [X8] }
    if (v312 + v111 > v301 || (unint64_t v19 = v116 + v111, (unint64_t)&v16[v116 + v111] > v309))
    {
      unint64_t v321 = v111;
      int64_t v322 = v116;
      unint64_t v323 = v117;
      unint64_t v177 = v103;
      unint64_t v13 = v314;
      uint64_t v178 = sub_1DD2E1F50(v16, v300, &v321, &v320, v301, v314, v311, v316);
      int v77 = a6;
      unint64_t v19 = v178;
      unint64_t v103 = v177;
      goto LABEL_241;
    }
    *(_OWORD *)__int16 v16 = *(_OWORD *)v312;
    if (v111 > 0x10)
    {
      *((_OWORD *)v16 + 1) = *(_OWORD *)(v312 + 16);
      if ((uint64_t)(v111 - 16) >= 17)
      {
        int v184 = v16 + 32;
        uint64_t v185 = (long long *)(v312 + 48);
        do
        {
          *(_OWORD *)int v184 = *(v185 - 1);
          long long v186 = *v185;
          v185 += 2;
          *((_OWORD *)v184 + 1) = v186;
          v184 += 32;
        }
        while (v184 < v118);
      }
    }
    v320 = (char *)(v312 + v111);
    if (v117 <= v118 - v314) {
      goto LABEL_128;
    }
    if (v117 > (unint64_t)&v118[-v311]) {
      return -20;
    }
    unint64_t v302 = v103;
    uint64_t v121 = _X8 - v314;
    BOOL v122 = (const void *)(v316 + _X8 - v314);
    if ((unint64_t)v122 + v116 > v316)
    {
      memmove(v118, v122, v314 - _X8);
      v118 -= v121;
      v116 += v121;
      _X8 = v314;
      int v77 = a6;
      unint64_t v103 = v302;
LABEL_128:
      if (v117 >= 0x10)
      {
        *(_OWORD *)unsigned int v118 = *(_OWORD *)_X8;
        unint64_t v84 = v305;
        if (v116 >= 17)
        {
          unsigned int v152 = v118 + 16;
          int v153 = (long long *)(_X8 + 32);
          unint64_t v13 = v314;
          do
          {
            *(_OWORD *)unsigned int v152 = *(v153 - 1);
            long long v154 = *v153;
            v153 += 2;
            *((_OWORD *)v152 + 1) = v154;
            v152 += 32;
          }
          while (v152 < &v118[v116]);
        }
        else
        {
          unint64_t v13 = v314;
        }
        goto LABEL_165;
      }
      if (v117 > 7)
      {
        *(void *)unsigned int v118 = *(void *)_X8;
      }
      else
      {
        uint64_t v193 = dword_1DD323AD8[v117];
        *unsigned int v118 = *_X8;
        v118[1] = _X8[1];
        v118[2] = _X8[2];
        v118[3] = _X8[3];
        uint64_t v194 = &_X8[dword_1DD323AB8[v117]];
        *((_DWORD *)v118 + 1) = *(_DWORD *)v194;
        _X8 = &v194[-v193];
      }
      if ((unint64_t)v116 >= 9)
      {
        int v202 = _X8 + 8;
        v203 = v118 + 8;
        v204 = &v118[v116];
        if (v118 - _X8 > 15)
        {
          *(_OWORD *)v203 = *v202;
          if (v116 >= 25)
          {
            v209 = v118 + 24;
            v210 = (long long *)(_X8 + 40);
            do
            {
              *(_OWORD *)v209 = *(v210 - 1);
              long long v211 = *v210;
              v210 += 2;
              *((_OWORD *)v209 + 1) = v211;
              v209 += 32;
            }
            while (v209 < v204);
          }
        }
        else
        {
          do
          {
            uint64_t v205 = *(void *)v202;
            int v202 = (_OWORD *)((char *)v202 + 8);
            *(void *)v203 = v205;
            v203 += 8;
          }
          while (v203 < v204);
        }
      }
      int v77 = a6;
      unint64_t v13 = v314;
LABEL_241:
      unint64_t v84 = v305;
      goto LABEL_165;
    }
    memmove(v118, v122, v116);
    int v77 = a6;
    unint64_t v13 = v314;
    unint64_t v103 = v302;
    unint64_t v84 = v305;
LABEL_165:
    if (v19 > 0xFFFFFFFFFFFFFF88) {
      return v19;
    }
    uint64_t v155 = v103 + v21;
    unint64_t v161 = v316;
    if (v97 <= v103 + v21) {
      unint64_t v161 = (unint64_t)v13;
    }
    _X9 = v161 + v155 - v97;
    __asm
    {
      PRFM            #0, [X9]
      PRFM            #0, [X9,#0x40]
    }
    unint64_t *v110 = v103;
    v110[1] = v84;
    v110[2] = v97;
    v16 += v19;
    unint64_t v313 = v308 + 95916;
LABEL_169:
    uint64_t v21 = v155 + v84;
    LODWORD(v23) = v23 + 1;
    unsigned int v22 = DWORD2(v317);
  }
  if ((int)v23 < v77) {
    return -20;
  }
LABEL_245:
  int v213 = v23 - v299;
  if ((int)v23 - v299 < v77)
  {
    unint64_t v307 = v308 + 95916;
    do
    {
      unint64_t v214 = &v324[3 * (v213 & 7)];
      if (v315[93] == 2)
      {
        BOOL v215 = v320;
        unint64_t v216 = *v214;
        v217 = &v320[*v214];
        int v218 = *(char **)(v308 + 30368);
        if (v217 > v218)
        {
          unint64_t v219 = v218 - v320;
          if (v218 != v320)
          {
            if (v219 > v300 - (uint64_t)v16) {
              return -70;
            }
            sub_1DD2E1EA4(v16, v320, v219);
            int v77 = a6;
            v216 -= v219;
            *unint64_t v214 = v216;
            v16 += v219;
          }
          v320 = (char *)v312;
          v315[93] = 0;
          int64_t v220 = v214[1];
          unint64_t v221 = v214[2];
          v222 = &v16[v216];
          unint64_t v19 = v220 + v216;
          _X8 = &v16[v216 - v221];
          __asm { PRFM            #0, [X8] }
          BOOL v225 = v312 + v216 > v307 || (unint64_t)&v16[v220 + v216] > v309;
          if (v225)
          {
            unint64_t v321 = v216;
            int64_t v322 = v220;
            unint64_t v323 = v221;
            unint64_t v13 = v314;
            uint64_t v263 = sub_1DD2E1F50(v16, v300, &v321, &v320, v307, v314, v311, v316);
            int v77 = a6;
            unint64_t v19 = v263;
          }
          else
          {
            *(_OWORD *)__int16 v16 = *(_OWORD *)v312;
            if (v216 > 0x10)
            {
              *((_OWORD *)v16 + 1) = *(_OWORD *)(v312 + 16);
              if ((uint64_t)(v216 - 16) >= 17)
              {
                v269 = v16 + 32;
                unint64_t v270 = (long long *)(v312 + 48);
                do
                {
                  *(_OWORD *)v269 = *(v270 - 1);
                  long long v271 = *v270;
                  v270 += 2;
                  *((_OWORD *)v269 + 1) = v271;
                  v269 += 32;
                }
                while (v269 < v222);
              }
            }
            v320 = (char *)(v312 + v216);
            unint64_t v13 = v314;
            if (v221 <= v222 - v314)
            {
LABEL_261:
              if (v221 < 0x10)
              {
                if (v221 > 7)
                {
                  *(void *)v222 = *(void *)_X8;
                }
                else
                {
                  uint64_t v278 = dword_1DD323AD8[v221];
                  char *v222 = *_X8;
                  v222[1] = _X8[1];
                  v222[2] = _X8[2];
                  v222[3] = _X8[3];
                  v279 = &_X8[dword_1DD323AB8[v221]];
                  *((_DWORD *)v222 + 1) = *(_DWORD *)v279;
                  _X8 = &v279[-v278];
                }
                if ((unint64_t)v220 >= 9)
                {
                  v287 = _X8 + 8;
                  v288 = v222 + 8;
                  uint64_t v289 = &v222[v220];
                  if (v222 - _X8 > 15)
                  {
                    _OWORD *v288 = *v287;
                    if (v220 >= 25)
                    {
                      v294 = v222 + 24;
                      v295 = (long long *)(_X8 + 40);
                      do
                      {
                        *(_OWORD *)v294 = *(v295 - 1);
                        long long v296 = *v295;
                        v295 += 2;
                        *((_OWORD *)v294 + 1) = v296;
                        v294 += 32;
                      }
                      while (v294 < v289);
                    }
                  }
                  else
                  {
                    do
                    {
                      uint64_t v290 = *(void *)v287;
                      v287 = (_OWORD *)((char *)v287 + 8);
                      *(void *)v288 = v290;
                      v288 = (_OWORD *)((char *)v288 + 8);
                    }
                    while (v288 < (_OWORD *)v289);
                  }
                }
                int v77 = a6;
                unint64_t v13 = v314;
              }
              else
              {
                *(_OWORD *)v222 = *(_OWORD *)_X8;
                if (v220 >= 17)
                {
                  int v228 = v222 + 16;
                  unint64_t v229 = (long long *)(_X8 + 32);
                  do
                  {
                    *(_OWORD *)int v228 = *(v229 - 1);
                    long long v230 = *v229;
                    v229 += 2;
                    *((_OWORD *)v228 + 1) = v230;
                    v228 += 32;
                  }
                  while (v228 < &v222[v220]);
                }
              }
            }
            else
            {
              if (v221 > (unint64_t)&v222[-v311]) {
                return -20;
              }
              uint64_t v226 = _X8 - v314;
              unint64_t v227 = (const void *)(v316 + _X8 - v314);
              if ((unint64_t)v227 + v220 > v316)
              {
                memmove(v222, v227, v314 - _X8);
                v222 -= v226;
                v220 += v226;
                _X8 = v314;
                int v77 = a6;
                unint64_t v13 = v314;
                goto LABEL_261;
              }
              memmove(v222, v227, v220);
              int v77 = a6;
              unint64_t v13 = v314;
            }
          }
          if (v19 >= 0xFFFFFFFFFFFFFF89) {
            return v19;
          }
          v16 += v19;
          unint64_t v313 = v308 + 95916;
          goto LABEL_302;
        }
        v247 = v217 - 32;
        uint64_t v248 = v214[1];
        unint64_t v249 = v214[2];
        unint64_t v19 = v248 + v216;
        if ((unint64_t)v217 > v313 || &v16[v248 + v216] > v247)
        {
          unint64_t v321 = v216;
          int64_t v322 = v248;
          unint64_t v323 = v249;
          unint64_t v13 = v314;
          uint64_t v259 = sub_1DD2E220C(v16, v300, v247, &v321, &v320, v313, v314, v311, v316);
          goto LABEL_306;
        }
        v251 = &v16[v216];
        *(_OWORD *)__int16 v16 = *(_OWORD *)v320;
        if (v216 > 0x10)
        {
          *((_OWORD *)v16 + 1) = *((_OWORD *)v215 + 1);
          if ((uint64_t)(v216 - 16) >= 17)
          {
            v266 = v16 + 32;
            unint64_t v267 = (long long *)(v215 + 48);
            do
            {
              *(_OWORD *)v266 = *(v267 - 1);
              long long v268 = *v267;
              v267 += 2;
              *((_OWORD *)v266 + 1) = v268;
              v266 += 32;
            }
            while (v266 < v251);
          }
        }
        v252 = &v251[-v249];
        v320 = v217;
        unint64_t v13 = v314;
        if (v249 <= v251 - v314) {
          goto LABEL_289;
        }
        if (v249 > (unint64_t)&v251[-v311]) {
          return -20;
        }
        int v241 = v314;
        uint64_t v253 = v252 - v314;
        BOOL v243 = (const void *)(v316 + v252 - v314);
        if ((unint64_t)v243 + v248 > v316)
        {
          memmove(v251, v243, v314 - v252);
          v251 -= v253;
          v248 += v253;
          v252 = v314;
          int v77 = a6;
          unint64_t v13 = v314;
LABEL_289:
          if (v249 >= 0x10)
          {
            *(_OWORD *)v251 = *(_OWORD *)v252;
            if (v248 >= 17)
            {
              v254 = v251 + 16;
              int v255 = (long long *)(v252 + 32);
              do
              {
                *(_OWORD *)v254 = *(v255 - 1);
                long long v256 = *v255;
                v255 += 2;
                *((_OWORD *)v254 + 1) = v256;
                v254 += 32;
              }
              while (v254 < &v251[v248]);
            }
            goto LABEL_297;
          }
          if (v249 > 7)
          {
            *(void *)v251 = *(void *)v252;
          }
          else
          {
            uint64_t v272 = dword_1DD323AD8[v249];
            char *v251 = *v252;
            v251[1] = v252[1];
            v251[2] = v252[2];
            v251[3] = v252[3];
            BOOL v273 = &v252[dword_1DD323AB8[v249]];
            *((_DWORD *)v251 + 1) = *(_DWORD *)v273;
            v252 = &v273[-v272];
          }
          if ((unint64_t)v248 >= 9)
          {
            unsigned int v280 = v252 + 8;
            v281 = v251 + 8;
            v282 = &v251[v248];
            if (v251 - v252 > 15)
            {
              *(_OWORD *)v281 = *v280;
              if (v248 >= 25)
              {
                v291 = v251 + 24;
                v292 = (long long *)(v252 + 40);
                do
                {
                  *(_OWORD *)v291 = *(v292 - 1);
                  long long v293 = *v292;
                  v292 += 2;
                  *((_OWORD *)v291 + 1) = v293;
                  v291 += 32;
                }
                while (v291 < v282);
              }
            }
            else
            {
              do
              {
                uint64_t v283 = *(void *)v280;
                unsigned int v280 = (_OWORD *)((char *)v280 + 8);
                *(void *)v281 = v283;
                v281 += 8;
              }
              while (v281 < v282);
            }
          }
          goto LABEL_348;
        }
        BOOL v257 = v251;
        size_t v258 = v248;
      }
      else
      {
        unint64_t v231 = *v214;
        uint64_t v232 = v214[1];
        unint64_t v233 = v214[2];
        unsigned int v234 = &v16[v231];
        unint64_t v19 = v232 + v231;
        unsigned int v235 = v320;
        v236 = &v320[v231];
        _X8 = &v16[v231 - v233];
        __asm { PRFM            #0, [X8] }
        if ((unint64_t)&v320[v231] > v313 || (unint64_t)&v16[v232 + v231] > v309)
        {
          unint64_t v321 = v231;
          int64_t v322 = v232;
          unint64_t v323 = v233;
          uint64_t v259 = sub_1DD2E1F50(v16, v300, &v321, &v320, v313, v13, v311, v316);
LABEL_306:
          int v77 = a6;
          unint64_t v19 = v259;
          goto LABEL_297;
        }
        *(_OWORD *)__int16 v16 = *(_OWORD *)v320;
        BOOL v225 = v231 > 0x10;
        uint64_t v240 = v231 - 16;
        if (v225)
        {
          *((_OWORD *)v16 + 1) = *((_OWORD *)v235 + 1);
          if (v240 >= 17)
          {
            v260 = v16 + 32;
            v261 = (long long *)(v235 + 48);
            do
            {
              *(_OWORD *)v260 = *(v261 - 1);
              long long v262 = *v261;
              v261 += 2;
              *((_OWORD *)v260 + 1) = v262;
              v260 += 32;
            }
            while (v260 < v234);
          }
        }
        v320 = v236;
        if (v233 <= v234 - v13) {
          goto LABEL_275;
        }
        if (v233 > (unint64_t)&v234[-v311]) {
          return -20;
        }
        int v241 = v13;
        int64_t v242 = _X8 - v13;
        BOOL v243 = (const void *)(v316 + v242);
        if (v316 + v242 + v232 > v316)
        {
          memmove(v234, v243, -v242);
          v234 -= v242;
          v232 += v242;
          _X8 = v241;
          int v77 = a6;
          unint64_t v13 = v241;
LABEL_275:
          if (v233 >= 0x10)
          {
            *(_OWORD *)unsigned int v234 = *(_OWORD *)_X8;
            if (v232 >= 17)
            {
              v244 = v234 + 16;
              uint64_t v245 = (long long *)(_X8 + 32);
              do
              {
                *(_OWORD *)v244 = *(v245 - 1);
                long long v246 = *v245;
                v245 += 2;
                *((_OWORD *)v244 + 1) = v246;
                v244 += 32;
              }
              while (v244 < &v234[v232]);
            }
            goto LABEL_297;
          }
          if (v233 > 7)
          {
            *(void *)unsigned int v234 = *(void *)_X8;
          }
          else
          {
            uint64_t v264 = dword_1DD323AD8[v233];
            *unsigned int v234 = *_X8;
            v234[1] = _X8[1];
            v234[2] = _X8[2];
            v234[3] = _X8[3];
            v265 = &_X8[dword_1DD323AB8[v233]];
            *((_DWORD *)v234 + 1) = *(_DWORD *)v265;
            _X8 = &v265[-v264];
          }
          if ((unint64_t)v232 >= 9)
          {
            v274 = _X8 + 8;
            uint64_t v275 = v234 + 8;
            v276 = &v234[v232];
            if (v234 - _X8 > 15)
            {
              *(_OWORD *)uint64_t v275 = *v274;
              if (v232 >= 25)
              {
                v284 = v234 + 24;
                v285 = (long long *)(_X8 + 40);
                do
                {
                  *(_OWORD *)v284 = *(v285 - 1);
                  long long v286 = *v285;
                  v285 += 2;
                  *((_OWORD *)v284 + 1) = v286;
                  v284 += 32;
                }
                while (v284 < v276);
              }
            }
            else
            {
              do
              {
                uint64_t v277 = *(void *)v274;
                v274 = (_OWORD *)((char *)v274 + 8);
                *(void *)uint64_t v275 = v277;
                v275 += 8;
              }
              while (v275 < v276);
            }
          }
LABEL_348:
          int v77 = a6;
          unint64_t v13 = v314;
          goto LABEL_297;
        }
        BOOL v257 = v234;
        size_t v258 = v232;
      }
      memmove(v257, v243, v258);
      int v77 = a6;
      unint64_t v13 = v241;
LABEL_297:
      if (v19 > 0xFFFFFFFFFFFFFF88) {
        return v19;
      }
      v16 += v19;
LABEL_302:
      ++v213;
    }
    while (v213 != v77);
  }
  uint64_t v297 = 0;
  uint64_t v7 = v308;
  do
  {
    *(_DWORD *)(v308 + 26684 + 4 * v297) = *((void *)&v319[3] + v297 + 1);
    ++v297;
  }
  while (v297 != 3);
  int v8 = v315[93];
  uint64_t v10 = v320;
  unsigned int v6 = v298;
  uint64_t v9 = (char *)v300;
  unint64_t v11 = v313;
LABEL_16:
  if (v8 == 2)
  {
    unint64_t v17 = v11 - (void)v10;
    if (v11 - (unint64_t)v10 > v9 - v16) {
      return -70;
    }
    if (v16)
    {
      memmove(v16, v10, v11 - (void)v10);
      v16 += v17;
    }
    uint64_t v10 = (char *)(v7 + 30380);
    unint64_t v11 = v7 + 95916;
  }
  unint64_t v18 = v11 - (void)v10;
  if (v11 - (unint64_t)v10 > v9 - v16) {
    return -70;
  }
  if (v16)
  {
    memmove(v16, v10, v11 - (void)v10);
    int v24 = &v16[v18];
  }
  else
  {
    int v24 = 0;
  }
  return v24 - v6;
}

uint64_t sub_1DD2E04CC(uint64_t *a1, char *__dst, uint64_t a3, unsigned __int8 *a4, unint64_t a5, int a6)
{
  unsigned int v6 = __dst;
  int v8 = (_DWORD *)a1 + 7501;
  uint64_t v9 = &__dst[a3];
  uint64_t v10 = (char *)a1[3765];
  unsigned int v212 = v10;
  unint64_t v11 = a1[3796];
  if (!a6)
  {
    uint64_t v205 = a1;
    unint64_t v15 = __dst;
    goto LABEL_10;
  }
  uint64_t v12 = 0;
  unint64_t v13 = (char *)a1[3737];
  unint64_t v207 = a1[3739];
  uint64_t v208 = a1[3738];
  long long v210 = 0u;
  memset(v211, 0, sizeof(v211));
  *int v8 = 1;
  long long v209 = 0u;
  do
  {
    *((void *)&v211[3] + v12 + 1) = *((unsigned int *)a1 + v12 + 6671);
    ++v12;
  }
  while (v12 != 3);
  if (!a5) {
    return -20;
  }
  *((void *)&v210 + 1) = a4;
  *(void *)&v211[0] = a4 + 8;
  if (a5 < 8)
  {
    uint64_t v19 = *a4;
    *(void *)&long long v210 = a4;
    *(void *)&long long v209 = v19;
    switch(a5)
    {
      case 2uLL:
        goto LABEL_23;
      case 3uLL:
        goto LABEL_22;
      case 4uLL:
        goto LABEL_21;
      case 5uLL:
        goto LABEL_20;
      case 6uLL:
        goto LABEL_19;
      case 7uLL:
        v19 |= (unint64_t)a4[6] << 48;
LABEL_19:
        v19 += (unint64_t)a4[5] << 40;
LABEL_20:
        v19 += (unint64_t)a4[4] << 32;
LABEL_21:
        v19 += (unint64_t)a4[3] << 24;
LABEL_22:
        v19 += (unint64_t)a4[2] << 16;
LABEL_23:
        *(void *)&long long v209 = v19 + ((unint64_t)a4[1] << 8);
        break;
      default:
        break;
    }
    if (!a4[a5 - 1]) {
      return -20;
    }
    DWORD2(v209) = __clz(a4[a5 - 1]) - 8 * a5 + 41;
  }
  else
  {
    unint64_t v14 = *(void *)&a4[a5 - 8];
    *(void *)&long long v210 = &a4[a5 - 8];
    *(void *)&long long v209 = v14;
    if (!HIBYTE(v14)) {
      return -20;
    }
    DWORD2(v209) = __clz(HIBYTE(v14)) - 23;
    if (a5 > 0xFFFFFFFFFFFFFF88) {
      return -20;
    }
  }
  uint64_t v206 = v11;
  sub_1DD2E1E04((void *)v211 + 1, (uint64_t)&v209, *a1);
  sub_1DD2E1E04((void *)&v211[1] + 1, (uint64_t)&v209, a1[2]);
  sub_1DD2E1E04((void *)&v211[2] + 1, (uint64_t)&v209, a1[1]);
  uint64_t v20 = (unsigned __int16 *)(*(void *)&v211[1] + 8 * *((void *)&v211[0] + 1));
  uint64_t v21 = (unsigned __int16 *)(*(void *)&v211[3] + 8 * *((void *)&v211[2] + 1));
  unsigned int v22 = (unsigned __int16 *)(*(void *)&v211[2] + 8 * *((void *)&v211[1] + 1));
  int64_t v23 = *((unsigned int *)v21 + 1);
  unint64_t v24 = *((unsigned int *)v20 + 1);
  uint64_t v25 = *((unsigned int *)v22 + 1);
  int v26 = *((unsigned __int8 *)v20 + 2);
  int v27 = *((unsigned __int8 *)v21 + 2);
  unsigned int v28 = *((unsigned __int8 *)v22 + 2);
  uint64_t v29 = *v20;
  uint64_t v30 = *v21;
  uint64_t v31 = *v22;
  int v32 = *((unsigned __int8 *)v20 + 3);
  int v33 = *((unsigned __int8 *)v21 + 3);
  int v34 = *((unsigned __int8 *)v22 + 3);
  long long v201 = (char *)a1 + 30380;
  if (v28 >= 2)
  {
    uint64_t v35 = (void)v209 << SBYTE8(v209) >> -(char)v28;
    DWORD2(v209) += v28;
    unint64_t v36 = v35 + v25;
    v211[4] = *(_OWORD *)((char *)&v211[3] + 8);
    goto LABEL_33;
  }
  if (*((unsigned char *)v22 + 2))
  {
    if (v24) {
      uint64_t v25 = v25;
    }
    else {
      uint64_t v25 = (v25 + 1);
    }
    unint64_t v187 = (void)v209 << SBYTE8(v209);
    ++DWORD2(v209);
    uint64_t v188 = v25 + (v187 >> 63);
    if (v188 == 3)
    {
      if (*((void *)&v211[3] + 1) == 1) {
        unint64_t v36 = 1;
      }
      else {
        unint64_t v36 = *((void *)&v211[3] + 1) - 1;
      }
    }
    else
    {
      if (*((void *)&v211[3] + v188 + 1)) {
        unint64_t v36 = *((void *)&v211[3] + v188 + 1);
      }
      else {
        unint64_t v36 = 1;
      }
      if (v188 == 1) {
        goto LABEL_257;
      }
    }
    *((void *)&v211[4] + 1) = *(void *)&v211[4];
LABEL_257:
    uint64_t v38 = *((void *)&v211[3] + 1);
    goto LABEL_32;
  }
  unint64_t v36 = *((void *)&v211[3] + (v24 == 0) + 1);
  uint64_t v38 = *((void *)&v211[3] + (v24 != 0) + 1);
LABEL_32:
  *(void *)&v211[4] = v38;
LABEL_33:
  *((void *)&v211[3] + 1) = v36;
  unint64_t v11 = v206;
  unsigned __int8 v39 = v27 + v26 + v28;
  if (v27)
  {
    uint64_t v40 = (void)v209 << SBYTE8(v209) >> -(char)v27;
    DWORD2(v209) += v27;
    v23 += v40;
  }
  int v41 = DWORD2(v209);
  uint64_t v202 = (uint64_t)v9;
  v203 = v6;
  if (v39 >= 0x1Fu && DWORD2(v209) <= 0x40)
  {
    uint64_t v183 = v210;
    if ((unint64_t)v210 >= *(void *)&v211[0])
    {
      *(void *)&long long v210 = v210 - ((unint64_t)DWORD2(v209) >> 3);
      int v41 = BYTE8(v209) & 7;
      *(void *)&long long v209 = *(void *)v210;
      unint64_t v11 = v206;
    }
    else
    {
      unint64_t v11 = v206;
      if ((void)v210 != *((void *)&v210 + 1))
      {
        unint64_t v184 = (unint64_t)DWORD2(v209) >> 3;
        if ((unint64_t)v210 - v184 >= *((void *)&v210 + 1)) {
          uint64_t v185 = v184;
        }
        else {
          uint64_t v185 = (v210 - DWORD2(v210));
        }
        *(void *)&long long v210 = v210 - v185;
        int v41 = DWORD2(v209) - 8 * v185;
        *(void *)&long long v209 = *(void *)(v183 - v185);
      }
    }
  }
  unint64_t v42 = ((void)v209 << v41 >> -(char)v26) + v24;
  _ZF = v26 == 0;
  if (v26) {
    int v44 = v41 + v26;
  }
  else {
    int v44 = v41;
  }
  if (_ZF) {
    unint64_t v45 = v24;
  }
  else {
    unint64_t v45 = v42;
  }
  uint64_t v46 = (((unint64_t)v209 >> -(char)(v44 + v32)) & dword_1DD323A38[v32]) + v29;
  *((void *)&v211[2] + 1) = (((unint64_t)v209 >> -(char)(v44 + v32 + v33)) & dword_1DD323A38[v33]) + v30;
  int v47 = v44 + v32 + v33 + v34;
  unint64_t v48 = ((unint64_t)v209 >> -(char)(v44 + v32 + v33 + v34)) & dword_1DD323A38[v34];
  DWORD2(v209) = v47;
  *((void *)&v211[0] + 1) = v46;
  *((void *)&v211[1] + 1) = v48 + v31;
  unsigned int v49 = &v10[v45];
  uint64_t v205 = a1;
  uint64_t v50 = (char *)a1[3796];
  if (&v10[v45] <= v50)
  {
    unint64_t v15 = v6;
    int v51 = a6;
    while (1)
    {
      unsigned int v65 = v49 - 32;
      if ((unint64_t)v49 > v11 || (unint64_t v18 = v45 + v23, &v15[v45 + v23] > v65))
      {
        unint64_t v213 = v45;
        int64_t v214 = v23;
        unint64_t v215 = v36;
        uint64_t v101 = sub_1DD2E220C(v15, v202, v65, &v213, &v212, v206, v13, v208, v207);
        unint64_t v11 = v206;
        unint64_t v18 = v101;
      }
      else
      {
        uint64_t v66 = &v15[v45];
        *(_OWORD *)unint64_t v15 = *(_OWORD *)v10;
        if (v45 > 0x10)
        {
          *((_OWORD *)v15 + 1) = *((_OWORD *)v10 + 1);
          if ((uint64_t)(v45 - 16) >= 17)
          {
            unsigned int v102 = v15 + 32;
            unint64_t v103 = (long long *)(v10 + 48);
            do
            {
              *(_OWORD *)unsigned int v102 = *(v103 - 1);
              long long v104 = *v103;
              v103 += 2;
              *((_OWORD *)v102 + 1) = v104;
              v102 += 32;
            }
            while (v102 < v66);
          }
        }
        unsigned __int8 v67 = &v66[-v36];
        unsigned int v212 = v49;
        if (v36 > v66 - v13)
        {
          if (v36 > (unint64_t)&v66[-v208]) {
            return -20;
          }
          uint64_t v68 = v67 - v13;
          int v69 = (const void *)(v207 + v67 - v13);
          if ((unint64_t)v69 + v23 <= v207)
          {
            memmove(&v15[v45], v69, v23);
            unint64_t v11 = v206;
            goto LABEL_74;
          }
          memmove(&v15[v45], v69, v13 - v67);
          v66 -= v68;
          v23 += v68;
          unsigned __int8 v67 = v13;
          unint64_t v11 = v206;
        }
        if (v36 < 0x10)
        {
          if (v36 > 7)
          {
            *(void *)uint64_t v66 = *(void *)v67;
          }
          else
          {
            uint64_t v108 = dword_1DD323AD8[v36];
            *uint64_t v66 = *v67;
            v66[1] = v67[1];
            v66[2] = v67[2];
            v66[3] = v67[3];
            unsigned int v109 = &v67[dword_1DD323AB8[v36]];
            *((_DWORD *)v66 + 1) = *(_DWORD *)v109;
            unsigned __int8 v67 = &v109[-v108];
          }
          if ((unint64_t)v23 >= 9)
          {
            unsigned int v112 = v67 + 8;
            unsigned __int8 v113 = v66 + 8;
            unint64_t v114 = (unint64_t)&v66[v23];
            if (v66 - v67 > 15)
            {
              *unsigned __int8 v113 = *v112;
              if (v23 >= 25)
              {
                int64_t v116 = v66 + 24;
                unint64_t v117 = (long long *)(v67 + 40);
                do
                {
                  _OWORD *v116 = *(v117 - 1);
                  long long v118 = *v117;
                  v117 += 2;
                  v116[1] = v118;
                  v116 += 2;
                }
                while ((unint64_t)v116 < v114);
              }
            }
            else
            {
              do
              {
                uint64_t v115 = *(void *)v112;
                unsigned int v112 = (_OWORD *)((char *)v112 + 8);
                *(void *)unsigned __int8 v113 = v115;
                unsigned __int8 v113 = (_OWORD *)((char *)v113 + 8);
              }
              while ((unint64_t)v113 < v114);
            }
          }
        }
        else
        {
          *(_OWORD *)uint64_t v66 = *(_OWORD *)v67;
          if (v23 >= 17)
          {
            unsigned int v70 = v66 + 16;
            uint64_t v71 = (long long *)(v67 + 32);
            do
            {
              *(_OWORD *)unsigned int v70 = *(v71 - 1);
              long long v72 = *v71;
              v71 += 2;
              *((_OWORD *)v70 + 1) = v72;
              v70 += 32;
            }
            while (v70 < &v66[v23]);
          }
        }
      }
LABEL_74:
      if (v18 > 0xFFFFFFFFFFFFFF88) {
        return v18;
      }
      v15 += v18;
      if (!--v51) {
        goto LABEL_223;
      }
      unsigned int v73 = DWORD2(v209);
      if (DWORD2(v209) <= 0x40)
      {
        if ((unint64_t)v210 >= *(void *)&v211[0])
        {
          uint64_t v76 = (void *)(v210 - ((unint64_t)DWORD2(v209) >> 3));
          *(void *)&long long v210 = v76;
          unsigned int v73 = BYTE8(v209) & 7;
        }
        else
        {
          if ((void)v210 == *((void *)&v210 + 1)) {
            goto LABEL_85;
          }
          unint64_t v74 = (unint64_t)DWORD2(v209) >> 3;
          if ((unint64_t)v210 - v74 >= *((void *)&v210 + 1)) {
            uint64_t v75 = v74;
          }
          else {
            uint64_t v75 = (v210 - DWORD2(v210));
          }
          uint64_t v76 = (void *)(v210 - v75);
          *(void *)&long long v210 = v210 - v75;
          unsigned int v73 = DWORD2(v209) - 8 * v75;
        }
        *(void *)&long long v209 = *v76;
      }
LABEL_85:
      int v77 = (unsigned __int16 *)(*(void *)&v211[1] + 8 * *((void *)&v211[0] + 1));
      unint64_t v78 = (unsigned __int16 *)(*(void *)&v211[3] + 8 * *((void *)&v211[2] + 1));
      uint64_t v79 = (unsigned __int16 *)(*(void *)&v211[2] + 8 * *((void *)&v211[1] + 1));
      int64_t v23 = *((unsigned int *)v78 + 1);
      unint64_t v80 = *((unsigned int *)v77 + 1);
      uint64_t v81 = *((unsigned int *)v79 + 1);
      int v82 = *((unsigned __int8 *)v77 + 2);
      int v83 = *((unsigned __int8 *)v78 + 2);
      unsigned int v84 = *((unsigned __int8 *)v79 + 2);
      uint64_t v85 = *v77;
      uint64_t v86 = *v78;
      uint64_t v87 = *v79;
      int v88 = *((unsigned __int8 *)v77 + 3);
      int v89 = *((unsigned __int8 *)v78 + 3);
      int v90 = *((unsigned __int8 *)v79 + 3);
      if (v84 >= 2)
      {
        uint64_t v91 = (void)v209 << v73 >> -(char)v84;
        v73 += v84;
        unint64_t v36 = v91 + v81;
        *((void *)&v211[4] + 1) = *(void *)&v211[4];
        goto LABEL_87;
      }
      if (*((unsigned char *)v79 + 2))
      {
        if (v80) {
          uint64_t v81 = v81;
        }
        else {
          uint64_t v81 = (v81 + 1);
        }
        unint64_t v110 = (void)v209 << v73++;
        DWORD2(v209) = v73;
        uint64_t v111 = v81 + (v110 >> 63);
        if (v111 == 3)
        {
          if (*((void *)&v211[3] + 1) == 1) {
            unint64_t v36 = 1;
          }
          else {
            unint64_t v36 = *((void *)&v211[3] + 1) - 1;
          }
          goto LABEL_130;
        }
        if (*((void *)&v211[3] + v111 + 1)) {
          unint64_t v36 = *((void *)&v211[3] + v111 + 1);
        }
        else {
          unint64_t v36 = 1;
        }
        if (v111 != 1) {
LABEL_130:
        }
          *((void *)&v211[4] + 1) = *(void *)&v211[4];
LABEL_87:
        uint64_t v92 = (char *)&v211[3] + 8;
        goto LABEL_90;
      }
      unint64_t v36 = *((void *)&v211[3] + (v80 == 0) + 1);
      uint64_t v92 = (char *)&v211[3] + 8 * (v80 != 0) + 8;
LABEL_90:
      uint64_t v93 = *(void *)v92;
      *((void *)&v211[3] + 1) = v36;
      *(void *)&v211[4] = v93;
      if (v83)
      {
        uint64_t v94 = (void)v209 << v73 >> -(char)v83;
        v73 += v83;
        v23 += v94;
      }
      if ((v83 + v82 + v84) < 0x1Fu || v73 > 0x40) {
        goto LABEL_93;
      }
      if ((unint64_t)v210 >= *(void *)&v211[0])
      {
        unint64_t v107 = (void *)(v210 - (v73 >> 3));
        *(void *)&long long v210 = v107;
        v73 &= 7u;
LABEL_125:
        *(void *)&long long v209 = *v107;
        goto LABEL_93;
      }
      if ((void)v210 != *((void *)&v210 + 1))
      {
        uint64_t v105 = v73 >> 3;
        if ((unint64_t)(v210 - v105) >= *((void *)&v210 + 1)) {
          uint64_t v106 = v105;
        }
        else {
          uint64_t v106 = (v210 - DWORD2(v210));
        }
        unint64_t v107 = (void *)(v210 - v106);
        *(void *)&long long v210 = v210 - v106;
        v73 -= 8 * v106;
        goto LABEL_125;
      }
LABEL_93:
      unint64_t v95 = ((void)v209 << v73 >> -(char)v82) + v80;
      if (v82)
      {
        v73 += v82;
        unint64_t v45 = v95;
      }
      else
      {
        unint64_t v45 = v80;
      }
      int v96 = v73 + v88;
      uint64_t v97 = (((unint64_t)v209 >> -(char)v96) & dword_1DD323A38[v88]) + v85;
      int v98 = v96 + v89;
      *((void *)&v211[2] + 1) = (((unint64_t)v209 >> -(char)v98) & dword_1DD323A38[v89]) + v86;
      int v99 = v98 + v90;
      unint64_t v100 = ((unint64_t)v209 >> -(char)v99) & dword_1DD323A38[v90];
      DWORD2(v209) = v99;
      *((void *)&v211[0] + 1) = v97;
      *((void *)&v211[1] + 1) = v100 + v87;
      uint64_t v10 = v212;
      unsigned int v49 = &v212[v45];
      uint64_t v50 = (char *)v205[3796];
      if (&v212[v45] > v50) {
        goto LABEL_44;
      }
    }
  }
  unint64_t v15 = v6;
  int v51 = a6;
LABEL_44:
  if (v51 < 1) {
    return -20;
  }
  unint64_t v52 = v50 - v10;
  if (v50 != v10)
  {
    if (v52 > v202 - (uint64_t)v15) {
      return -70;
    }
    sub_1DD2E1EA4(v15, v10, v50 - v10);
    v45 -= v52;
    v15 += v52;
  }
  unsigned int v212 = v201;
  unint64_t v11 = (unint64_t)v205 + 95916;
  v8[93] = 0;
  int v53 = &v15[v45];
  _X8 = &v15[v45 - v36];
  __asm { PRFM            #0, [X8] }
  unint64_t v59 = v202 - 32;
  if (&v201[v45] > (char *)v205 + 95916 || (unint64_t v18 = v45 + v23, (unint64_t)&v15[v45 + v23] > v59))
  {
    unint64_t v213 = v45;
    int64_t v214 = v23;
    unint64_t v215 = v36;
    uint64_t v186 = sub_1DD2E1F50(v15, v202, &v213, &v212, v11, v13, v208, v207);
    unint64_t v11 = (unint64_t)v205 + 95916;
    unint64_t v18 = v186;
    goto LABEL_139;
  }
  *(_OWORD *)unint64_t v15 = *(_OWORD *)v201;
  if (v45 > 0x10)
  {
    *((_OWORD *)v15 + 1) = *((_OWORD *)v201 + 1);
    if ((uint64_t)(v45 - 16) >= 17)
    {
      uint64_t v189 = v15 + 32;
      uint64_t v190 = (long long *)(v201 + 48);
      do
      {
        *(_OWORD *)uint64_t v189 = *(v190 - 1);
        long long v191 = *v190;
        v190 += 2;
        *((_OWORD *)v189 + 1) = v191;
        v189 += 32;
      }
      while (v189 < v53);
    }
  }
  unsigned int v212 = &v201[v45];
  if (v36 > v53 - v13)
  {
    if (v36 > (unint64_t)&v53[-v208]) {
      return -20;
    }
    uint64_t v60 = _X8 - v13;
    int v61 = (const void *)(v207 + _X8 - v13);
    if ((unint64_t)v61 + v23 <= v207)
    {
      memmove(v53, v61, v23);
LABEL_138:
      unint64_t v11 = (unint64_t)v205 + 95916;
      goto LABEL_139;
    }
    memmove(v53, v61, v13 - _X8);
    v53 -= v60;
    v23 += v60;
    _X8 = v13;
    unint64_t v11 = (unint64_t)v205 + 95916;
  }
  if (v36 < 0x10)
  {
    if (v36 > 7)
    {
      *(void *)int v53 = *(void *)_X8;
    }
    else
    {
      uint64_t v192 = dword_1DD323AD8[v36];
      *int v53 = *_X8;
      v53[1] = _X8[1];
      v53[2] = _X8[2];
      v53[3] = _X8[3];
      uint64_t v193 = &_X8[dword_1DD323AB8[v36]];
      *((_DWORD *)v53 + 1) = *(_DWORD *)v193;
      _X8 = &v193[-v192];
    }
    if ((unint64_t)v23 >= 9)
    {
      uint64_t v194 = _X8 + 8;
      uint64_t v195 = v53 + 8;
      unsigned int v196 = &v53[v23];
      if (v53 - _X8 > 15)
      {
        *uint64_t v195 = *v194;
        if (v23 >= 25)
        {
          uint64_t v198 = v53 + 24;
          int v199 = (long long *)(_X8 + 40);
          do
          {
            *(_OWORD *)uint64_t v198 = *(v199 - 1);
            long long v200 = *v199;
            v199 += 2;
            *((_OWORD *)v198 + 1) = v200;
            v198 += 32;
          }
          while (v198 < v196);
        }
      }
      else
      {
        do
        {
          uint64_t v197 = *(void *)v194;
          uint64_t v194 = (_OWORD *)((char *)v194 + 8);
          *(void *)uint64_t v195 = v197;
          uint64_t v195 = (_OWORD *)((char *)v195 + 8);
        }
        while (v195 < (_OWORD *)v196);
      }
    }
    goto LABEL_138;
  }
  *(_OWORD *)int v53 = *(_OWORD *)_X8;
  if (v23 >= 17)
  {
    unint64_t v62 = v53 + 16;
    uint64_t v63 = (long long *)(_X8 + 32);
    do
    {
      *(_OWORD *)unint64_t v62 = *(v63 - 1);
      long long v64 = *v63;
      v63 += 2;
      *((_OWORD *)v62 + 1) = v64;
      v62 += 32;
    }
    while (v62 < &v53[v23]);
  }
LABEL_139:
  if (v18 > 0xFFFFFFFFFFFFFF88) {
    return v18;
  }
  v15 += v18;
  int v119 = v51 - 1;
  if (v51 != 1)
  {
    unsigned int v120 = DWORD2(v209);
    if (DWORD2(v209) > 0x40) {
      goto LABEL_150;
    }
    if ((unint64_t)v210 >= *(void *)&v211[0])
    {
      unsigned int v123 = (void *)(v210 - ((unint64_t)DWORD2(v209) >> 3));
      *(void *)&long long v210 = v123;
      unsigned int v120 = BYTE8(v209) & 7;
    }
    else
    {
      if ((void)v210 == *((void *)&v210 + 1)) {
        goto LABEL_150;
      }
      unint64_t v121 = (unint64_t)DWORD2(v209) >> 3;
      if ((unint64_t)v210 - v121 >= *((void *)&v210 + 1)) {
        uint64_t v122 = v121;
      }
      else {
        uint64_t v122 = (v210 - DWORD2(v210));
      }
      unsigned int v123 = (void *)(v210 - v122);
      *(void *)&long long v210 = v210 - v122;
      unsigned int v120 = DWORD2(v209) - 8 * v122;
    }
    *(void *)&long long v209 = *v123;
LABEL_150:
    while (1)
    {
      unint64_t v124 = (unsigned __int16 *)(*(void *)&v211[1] + 8 * *((void *)&v211[0] + 1));
      int64_t v125 = (unsigned __int16 *)(*(void *)&v211[3] + 8 * *((void *)&v211[2] + 1));
      unint64_t v126 = (unsigned __int16 *)(*(void *)&v211[2] + 8 * *((void *)&v211[1] + 1));
      int64_t v127 = *((unsigned int *)v125 + 1);
      unint64_t v128 = *((unsigned int *)v124 + 1);
      uint64_t v129 = *((unsigned int *)v126 + 1);
      int v130 = *((unsigned __int8 *)v124 + 2);
      int v131 = *((unsigned __int8 *)v125 + 2);
      unsigned int v132 = *((unsigned __int8 *)v126 + 2);
      uint64_t v133 = *v124;
      uint64_t v134 = *v125;
      uint64_t v135 = *v126;
      int v136 = *((unsigned __int8 *)v124 + 3);
      int v137 = *((unsigned __int8 *)v125 + 3);
      int v138 = *((unsigned __int8 *)v126 + 3);
      if (v132 >= 2) {
        break;
      }
      if (*((unsigned char *)v126 + 2))
      {
        if (v128) {
          uint64_t v129 = v129;
        }
        else {
          uint64_t v129 = (v129 + 1);
        }
        unint64_t v172 = (void)v209 << v120++;
        DWORD2(v209) = v120;
        uint64_t v173 = v129 + (v172 >> 63);
        if (v173 == 3)
        {
          if (*((void *)&v211[3] + 1) == 1) {
            unint64_t v140 = 1;
          }
          else {
            unint64_t v140 = *((void *)&v211[3] + 1) - 1;
          }
          goto LABEL_216;
        }
        if (*((void *)&v211[3] + v173 + 1)) {
          unint64_t v140 = *((void *)&v211[3] + v173 + 1);
        }
        else {
          unint64_t v140 = 1;
        }
        if (v173 != 1) {
LABEL_216:
        }
          *((void *)&v211[4] + 1) = *(void *)&v211[4];
LABEL_152:
        long long v141 = (char *)&v211[3] + 8;
        goto LABEL_155;
      }
      unint64_t v140 = *((void *)&v211[3] + (v128 == 0) + 1);
      long long v141 = (char *)&v211[3] + 8 * (v128 != 0) + 8;
LABEL_155:
      uint64_t v142 = *(void *)v141;
      *((void *)&v211[3] + 1) = v140;
      *(void *)&v211[4] = v142;
      if (v131)
      {
        uint64_t v143 = (void)v209 << v120 >> -(char)v131;
        v120 += v131;
        v127 += v143;
      }
      if ((v131 + v130 + v132) >= 0x1Fu && v120 <= 0x40)
      {
        if ((unint64_t)v210 >= *(void *)&v211[0])
        {
          uint64_t v166 = (void *)(v210 - (v120 >> 3));
          *(void *)&long long v210 = v166;
          v120 &= 7u;
        }
        else
        {
          if ((void)v210 == *((void *)&v210 + 1)) {
            goto LABEL_158;
          }
          uint64_t v164 = v120 >> 3;
          if ((unint64_t)(v210 - v164) >= *((void *)&v210 + 1)) {
            uint64_t v165 = v164;
          }
          else {
            uint64_t v165 = (v210 - DWORD2(v210));
          }
          uint64_t v166 = (void *)(v210 - v165);
          *(void *)&long long v210 = v210 - v165;
          v120 -= 8 * v165;
        }
        *(void *)&long long v209 = *v166;
      }
LABEL_158:
      unint64_t v144 = ((void)v209 << v120 >> -(char)v130) + v128;
      if (v130)
      {
        v120 += v130;
        unint64_t v128 = v144;
      }
      int v145 = v120 + v136;
      uint64_t v146 = (((unint64_t)v209 >> -(char)v145) & dword_1DD323A38[v136]) + v133;
      int v147 = v145 + v137;
      *((void *)&v211[2] + 1) = (((unint64_t)v209 >> -(char)v147) & dword_1DD323A38[v137]) + v134;
      int v148 = v147 + v138;
      unint64_t v149 = ((unint64_t)v209 >> -(char)v148) & dword_1DD323A38[v138];
      DWORD2(v209) = v148;
      *((void *)&v211[0] + 1) = v146;
      *((void *)&v211[1] + 1) = v149 + v135;
      uint64_t v150 = &v15[v128];
      long long v151 = v212;
      unsigned int v152 = &v212[v128];
      _X8 = &v15[v128 - v140];
      __asm { PRFM            #0, [X8] }
      if ((unint64_t)&v212[v128] > v11 || (unint64_t v18 = v128 + v127, (unint64_t)&v15[v128 + v127] > v59))
      {
        unint64_t v213 = v128;
        int64_t v214 = v127;
        unint64_t v215 = v140;
        uint64_t v163 = sub_1DD2E1F50(v15, v202, &v213, &v212, v11, v13, v208, v207);
        unint64_t v11 = (unint64_t)v205 + 95916;
        unint64_t v18 = v163;
      }
      else
      {
        *(_OWORD *)unint64_t v15 = *(_OWORD *)v212;
        if (v128 > 0x10)
        {
          *((_OWORD *)v15 + 1) = *((_OWORD *)v151 + 1);
          if ((uint64_t)(v128 - 16) >= 17)
          {
            unint64_t v167 = v15 + 32;
            unint64_t v168 = (long long *)(v151 + 48);
            do
            {
              *(_OWORD *)unint64_t v167 = *(v168 - 1);
              long long v169 = *v168;
              v168 += 2;
              *((_OWORD *)v167 + 1) = v169;
              v167 += 32;
            }
            while (v167 < v150);
          }
        }
        unsigned int v212 = v152;
        if (v140 <= v150 - v13) {
          goto LABEL_167;
        }
        if (v140 > (unint64_t)&v150[-v208]) {
          return -20;
        }
        uint64_t v155 = _X8 - v13;
        unint64_t v156 = (const void *)(v207 + _X8 - v13);
        if ((unint64_t)v156 + v127 > v207)
        {
          memmove(&v15[v128], v156, v13 - _X8);
          v150 -= v155;
          v127 += v155;
          _X8 = v13;
          unint64_t v11 = (unint64_t)v205 + 95916;
LABEL_167:
          if (v140 < 0x10)
          {
            if (v140 > 7)
            {
              *(void *)uint64_t v150 = *(void *)_X8;
            }
            else
            {
              uint64_t v170 = dword_1DD323AD8[v140];
              char *v150 = *_X8;
              v150[1] = _X8[1];
              v150[2] = _X8[2];
              v150[3] = _X8[3];
              uint64_t v171 = &_X8[dword_1DD323AB8[v140]];
              *((_DWORD *)v150 + 1) = *(_DWORD *)v171;
              _X8 = &v171[-v170];
            }
            if ((unint64_t)v127 >= 9)
            {
              unsigned int v174 = _X8 + 8;
              long long v175 = v150 + 8;
              unint64_t v176 = (unint64_t)&v150[v127];
              if (v150 - _X8 > 15)
              {
                *long long v175 = *v174;
                if (v127 >= 25)
                {
                  uint64_t v178 = v150 + 24;
                  uint64_t v179 = (long long *)(_X8 + 40);
                  do
                  {
                    *uint64_t v178 = *(v179 - 1);
                    long long v180 = *v179;
                    v179 += 2;
                    v178[1] = v180;
                    v178 += 2;
                  }
                  while ((unint64_t)v178 < v176);
                }
              }
              else
              {
                do
                {
                  uint64_t v177 = *(void *)v174;
                  unsigned int v174 = (_OWORD *)((char *)v174 + 8);
                  *(void *)long long v175 = v177;
                  long long v175 = (_OWORD *)((char *)v175 + 8);
                }
                while ((unint64_t)v175 < v176);
              }
            }
          }
          else
          {
            *(_OWORD *)uint64_t v150 = *(_OWORD *)_X8;
            if (v127 >= 17)
            {
              uint64_t v157 = v150 + 16;
              unsigned int v158 = (long long *)(_X8 + 32);
              do
              {
                *(_OWORD *)uint64_t v157 = *(v158 - 1);
                long long v159 = *v158;
                v158 += 2;
                *((_OWORD *)v157 + 1) = v159;
                v157 += 32;
              }
              while (v157 < &v150[v127]);
            }
          }
          goto LABEL_173;
        }
        memmove(&v15[v128], v156, v127);
        unint64_t v11 = (unint64_t)v205 + 95916;
      }
LABEL_173:
      if (v18 > 0xFFFFFFFFFFFFFF88) {
        return v18;
      }
      v15 += v18;
      if (!--v119) {
        goto LABEL_223;
      }
      unsigned int v120 = DWORD2(v209);
      if (DWORD2(v209) <= 0x40)
      {
        if ((unint64_t)v210 >= *(void *)&v211[0])
        {
          uint64_t v162 = (void *)(v210 - ((unint64_t)DWORD2(v209) >> 3));
          *(void *)&long long v210 = v162;
          unsigned int v120 = BYTE8(v209) & 7;
          goto LABEL_183;
        }
        if ((void)v210 != *((void *)&v210 + 1))
        {
          unint64_t v160 = (unint64_t)DWORD2(v209) >> 3;
          if ((unint64_t)v210 - v160 >= *((void *)&v210 + 1)) {
            uint64_t v161 = v160;
          }
          else {
            uint64_t v161 = (v210 - DWORD2(v210));
          }
          uint64_t v162 = (void *)(v210 - v161);
          *(void *)&long long v210 = v210 - v161;
          unsigned int v120 = DWORD2(v209) - 8 * v161;
LABEL_183:
          DWORD2(v209) = v120;
          *(void *)&long long v209 = *v162;
        }
      }
    }
    uint64_t v139 = (void)v209 << v120 >> -(char)v132;
    v120 += v132;
    unint64_t v140 = v139 + v129;
    *((void *)&v211[4] + 1) = *(void *)&v211[4];
    goto LABEL_152;
  }
LABEL_223:
  uint64_t v9 = (char *)v202;
  unsigned int v6 = v203;
  if (DWORD2(v209) <= 0x40)
  {
    unint64_t v18 = -20;
    if (DWORD2(v209) != 64 || (unint64_t)v210 >= *(void *)&v211[0] || (void)v210 != *((void *)&v210 + 1)) {
      return v18;
    }
  }
  for (uint64_t i = 0; i != 3; ++i)
    *((_DWORD *)v205 + i + 6671) = *((void *)&v211[3] + i + 1);
  uint64_t v10 = v212;
LABEL_10:
  if (v8[93] == 2)
  {
    uint64_t v16 = v11 - (void)v10;
    if (v11 - (unint64_t)v10 > v9 - v15) {
      return -70;
    }
    if (v15)
    {
      memmove(v15, v10, v11 - (void)v10);
      v15 += v16;
    }
    uint64_t v10 = (char *)v205 + 30380;
    unint64_t v11 = (unint64_t)v205 + 95916;
    v8[93] = 0;
  }
  uint64_t v17 = v11 - (void)v10;
  if (v11 - (unint64_t)v10 > v9 - v15) {
    return -70;
  }
  if (v15)
  {
    memcpy(v15, v10, v11 - (void)v10);
    unint64_t v37 = &v15[v17];
  }
  else
  {
    unint64_t v37 = 0;
  }
  return v37 - v6;
}

uint64_t sub_1DD2E1674(uint64_t a1, char *__dst, uint64_t a3, unsigned __int8 *a4, unint64_t a5, int a6)
{
  int v6 = a6;
  uint64_t v7 = __dst;
  if (*(_DWORD *)(a1 + 30376)) {
    uint64_t v9 = *(char **)(a1 + 30360);
  }
  else {
    uint64_t v9 = &__dst[a3];
  }
  uint64_t v10 = *(char **)(a1 + 30120);
  uint64_t v91 = v10;
  uint64_t v87 = &v10[*(void *)(a1 + 30152)];
  if (a6)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *(char **)(a1 + 29896);
    unint64_t v85 = *(void *)(a1 + 29912);
    uint64_t v86 = *(void *)(a1 + 29904);
    long long v89 = 0u;
    memset(v90, 0, sizeof(v90));
    *(_DWORD *)(a1 + 30004) = 1;
    long long v88 = 0u;
    do
    {
      *((void *)&v90[3] + v11 + 1) = *(unsigned int *)(a1 + 26684 + 4 * v11);
      ++v11;
    }
    while (v11 != 3);
    if (!a5) {
      return -20;
    }
    *((void *)&v89 + 1) = a4;
    *(void *)&v90[0] = a4 + 8;
    if (a5 < 8)
    {
      uint64_t v18 = *a4;
      *(void *)&long long v89 = a4;
      *(void *)&long long v88 = v18;
      switch(a5)
      {
        case 2uLL:
          goto LABEL_23;
        case 3uLL:
          goto LABEL_22;
        case 4uLL:
          goto LABEL_21;
        case 5uLL:
          goto LABEL_20;
        case 6uLL:
          goto LABEL_19;
        case 7uLL:
          v18 |= (unint64_t)a4[6] << 48;
LABEL_19:
          v18 += (unint64_t)a4[5] << 40;
LABEL_20:
          v18 += (unint64_t)a4[4] << 32;
LABEL_21:
          v18 += (unint64_t)a4[3] << 24;
LABEL_22:
          v18 += (unint64_t)a4[2] << 16;
LABEL_23:
          *(void *)&long long v88 = v18 + ((unint64_t)a4[1] << 8);
          break;
        default:
          break;
      }
      if (!a4[a5 - 1]) {
        return -20;
      }
      DWORD2(v88) = __clz(a4[a5 - 1]) - 8 * a5 + 41;
    }
    else
    {
      unint64_t v13 = *(void *)&a4[a5 - 8];
      *(void *)&long long v89 = &a4[a5 - 8];
      *(void *)&long long v88 = v13;
      if (!HIBYTE(v13)) {
        return -20;
      }
      DWORD2(v88) = __clz(HIBYTE(v13)) - 23;
      if (a5 > 0xFFFFFFFFFFFFFF88) {
        return -20;
      }
    }
    sub_1DD2E1E04((void *)v90 + 1, (uint64_t)&v88, *(void *)a1);
    sub_1DD2E1E04((void *)&v90[1] + 1, (uint64_t)&v88, *(void *)(a1 + 16));
    uint64_t v82 = a1;
    sub_1DD2E1E04((void *)&v90[2] + 1, (uint64_t)&v88, *(void *)(a1 + 8));
    int v83 = v7;
    uint64_t v84 = (uint64_t)v9;
    uint64_t v19 = v9 - 32;
    unint64_t v14 = v7;
    while (1)
    {
      uint64_t v20 = (unsigned __int16 *)(*(void *)&v90[1] + 8 * *((void *)&v90[0] + 1));
      uint64_t v21 = (unsigned __int16 *)(*(void *)&v90[3] + 8 * *((void *)&v90[2] + 1));
      unsigned int v22 = (unsigned __int16 *)(*(void *)&v90[2] + 8 * *((void *)&v90[1] + 1));
      int64_t v23 = *((unsigned int *)v21 + 1);
      unint64_t v24 = *((unsigned int *)v20 + 1);
      uint64_t v25 = *((unsigned int *)v22 + 1);
      int v26 = *((unsigned __int8 *)v20 + 2);
      int v27 = *((unsigned __int8 *)v21 + 2);
      unsigned int v28 = *((unsigned __int8 *)v22 + 2);
      uint64_t v29 = *v20;
      uint64_t v30 = *v21;
      uint64_t v31 = *v22;
      int v32 = *((unsigned __int8 *)v20 + 3);
      int v33 = *((unsigned __int8 *)v21 + 3);
      int v34 = *((unsigned __int8 *)v22 + 3);
      if (v28 >= 2)
      {
        unsigned int v35 = DWORD2(v88) + v28;
        unint64_t v36 = ((void)v88 << SBYTE8(v88) >> -(char)v28) + v25;
        v90[4] = *(_OWORD *)((char *)&v90[3] + 8);
        goto LABEL_29;
      }
      if (!*((unsigned char *)v22 + 2))
      {
        unint64_t v36 = *((void *)&v90[3] + (v24 == 0) + 1);
        uint64_t v58 = *((void *)&v90[3] + (v24 != 0) + 1);
        *((void *)&v90[3] + 1) = v36;
        *(void *)&v90[4] = v58;
        unsigned int v35 = DWORD2(v88);
        if (!v27) {
          goto LABEL_31;
        }
LABEL_30:
        uint64_t v37 = (void)v88 << v35 >> -(char)v27;
        v35 += v27;
        v23 += v37;
        goto LABEL_31;
      }
      if (v24) {
        uint64_t v25 = v25;
      }
      else {
        uint64_t v25 = (v25 + 1);
      }
      unint64_t v71 = (void)v88 << SBYTE8(v88);
      unsigned int v35 = ++DWORD2(v88);
      uint64_t v72 = v25 + (v71 >> 63);
      if (v72 == 3)
      {
        if (*((void *)&v90[3] + 1) == 1) {
          unint64_t v36 = 1;
        }
        else {
          unint64_t v36 = *((void *)&v90[3] + 1) - 1;
        }
      }
      else
      {
        if (*((void *)&v90[3] + v72 + 1)) {
          unint64_t v36 = *((void *)&v90[3] + v72 + 1);
        }
        else {
          unint64_t v36 = 1;
        }
        if (v72 == 1) {
          goto LABEL_97;
        }
      }
      *((void *)&v90[4] + 1) = *(void *)&v90[4];
LABEL_97:
      *(void *)&v90[4] = *((void *)&v90[3] + 1);
LABEL_29:
      *((void *)&v90[3] + 1) = v36;
      if (v27) {
        goto LABEL_30;
      }
LABEL_31:
      if ((v27 + v26 + v28) < 0x1Fu || v35 > 0x40) {
        goto LABEL_32;
      }
      if ((unint64_t)v89 >= *(void *)&v90[0])
      {
        unsigned int v65 = (void *)(v89 - (v35 >> 3));
        *(void *)&long long v89 = v65;
        v35 &= 7u;
      }
      else
      {
        if ((void)v89 == *((void *)&v89 + 1)) {
          goto LABEL_32;
        }
        uint64_t v63 = v35 >> 3;
        if ((unint64_t)(v89 - v63) >= *((void *)&v89 + 1)) {
          uint64_t v64 = v63;
        }
        else {
          uint64_t v64 = (v89 - DWORD2(v89));
        }
        unsigned int v65 = (void *)(v89 - v64);
        *(void *)&long long v89 = v89 - v64;
        v35 -= 8 * v64;
      }
      *(void *)&long long v88 = *v65;
LABEL_32:
      unint64_t v38 = ((void)v88 << v35 >> -(char)v26) + v24;
      _ZF = v26 == 0;
      if (v26) {
        unsigned int v40 = v35 + v26;
      }
      else {
        unsigned int v40 = v35;
      }
      if (!_ZF) {
        unint64_t v24 = v38;
      }
      int v41 = v40 + v32;
      uint64_t v42 = (((unint64_t)v88 >> -(char)v41) & dword_1DD323A38[v32]) + v29;
      *((void *)&v90[2] + 1) = (((unint64_t)v88 >> -(char)(v41 + v33)) & dword_1DD323A38[v33]) + v30;
      int v43 = v41 + v33 + v34;
      unint64_t v44 = ((unint64_t)v88 >> -(char)(v41 + v33 + v34)) & dword_1DD323A38[v34];
      DWORD2(v88) = v43;
      *((void *)&v90[0] + 1) = v42;
      *((void *)&v90[1] + 1) = v44 + v31;
      unint64_t v45 = (unint64_t)&v14[v24];
      uint64_t v46 = v91;
      int v47 = &v91[v24];
      _X8 = &v14[v24 - v36];
      __asm { PRFM            #0, [X8] }
      if (&v91[v24] > v87 || (unint64_t v16 = v24 + v23, &v14[v24 + v23] > v19))
      {
        v92[0] = v24;
        v92[1] = v23;
        v92[2] = v36;
        unint64_t v16 = sub_1DD2E1F50(v14, v84, v92, &v91, (uint64_t)v87, v12, v86, v85);
      }
      else
      {
        *(_OWORD *)unint64_t v14 = *(_OWORD *)v91;
        if (v24 > 0x10)
        {
          *((_OWORD *)v14 + 1) = *((_OWORD *)v46 + 1);
          if ((uint64_t)(v24 - 16) >= 17)
          {
            uint64_t v66 = v14 + 32;
            unsigned __int8 v67 = (long long *)(v46 + 48);
            do
            {
              *uint64_t v66 = *(v67 - 1);
              long long v68 = *v67;
              v67 += 2;
              v66[1] = v68;
              v66 += 2;
            }
            while ((unint64_t)v66 < v45);
          }
        }
        uint64_t v91 = v47;
        if (v36 <= v45 - (unint64_t)v12) {
          goto LABEL_44;
        }
        if (v36 > v45 - v86) {
          return -20;
        }
        uint64_t v53 = _X8 - v12;
        int v54 = (const void *)(v85 + _X8 - v12);
        if ((unint64_t)v54 + v23 > v85)
        {
          memmove(&v14[v24], v54, v12 - _X8);
          v45 -= v53;
          v23 += v53;
          _X8 = v12;
LABEL_44:
          if (v36 < 0x10)
          {
            if (v36 > 7)
            {
              *(void *)unint64_t v45 = *(void *)_X8;
            }
            else
            {
              uint64_t v69 = dword_1DD323AD8[v36];
              *(unsigned char *)unint64_t v45 = *_X8;
              *(unsigned char *)(v45 + 1) = _X8[1];
              *(unsigned char *)(v45 + 2) = _X8[2];
              *(unsigned char *)(v45 + 3) = _X8[3];
              unsigned int v70 = &_X8[dword_1DD323AB8[v36]];
              *(_DWORD *)(v45 + 4) = *(_DWORD *)v70;
              _X8 = &v70[-v69];
            }
            if ((unint64_t)v23 >= 9)
            {
              unsigned int v73 = _X8 + 8;
              unint64_t v74 = (_OWORD *)(v45 + 8);
              unint64_t v75 = v45 + v23;
              if ((uint64_t)(v45 - (void)_X8) > 15)
              {
                _OWORD *v74 = *v73;
                if (v23 >= 25)
                {
                  int v77 = (_OWORD *)(v45 + 24);
                  unint64_t v78 = (long long *)(_X8 + 40);
                  do
                  {
                    _OWORD *v77 = *(v78 - 1);
                    long long v79 = *v78;
                    v78 += 2;
                    v77[1] = v79;
                    v77 += 2;
                  }
                  while ((unint64_t)v77 < v75);
                }
              }
              else
              {
                do
                {
                  uint64_t v76 = *(void *)v73;
                  unsigned int v73 = (_OWORD *)((char *)v73 + 8);
                  *(void *)unint64_t v74 = v76;
                  unint64_t v74 = (_OWORD *)((char *)v74 + 8);
                }
                while ((unint64_t)v74 < v75);
              }
            }
          }
          else
          {
            *(_OWORD *)unint64_t v45 = *(_OWORD *)_X8;
            if (v23 >= 17)
            {
              int v55 = (_OWORD *)(v45 + 16);
              unint64_t v56 = (long long *)(_X8 + 32);
              do
              {
                *int v55 = *(v56 - 1);
                long long v57 = *v56;
                v56 += 2;
                v55[1] = v57;
                v55 += 2;
              }
              while ((unint64_t)v55 < v45 + v23);
            }
          }
          goto LABEL_53;
        }
        memmove(&v14[v24], v54, v23);
      }
LABEL_53:
      if (v16 > 0xFFFFFFFFFFFFFF88) {
        return v16;
      }
      v14 += v16;
      if (!--v6)
      {
        uint64_t v7 = v83;
        uint64_t v9 = (char *)v84;
        if (DWORD2(v88) > 0x40
          || (unint64_t v16 = -20, DWORD2(v88) == 64)
          && (unint64_t)v89 < *(void *)&v90[0]
          && (void)v89 == *((void *)&v89 + 1))
        {
          for (uint64_t i = 0; i != 3; ++i)
            *(_DWORD *)(v82 + 26684 + 4 * i) = *((void *)&v90[3] + i + 1);
          uint64_t v10 = v91;
          goto LABEL_13;
        }
        return v16;
      }
      if (DWORD2(v88) <= 0x40)
      {
        if ((unint64_t)v89 >= *(void *)&v90[0])
        {
          int v61 = (void *)(v89 - ((unint64_t)DWORD2(v88) >> 3));
          *(void *)&long long v89 = v61;
          int v62 = BYTE8(v88) & 7;
          goto LABEL_63;
        }
        if ((void)v89 != *((void *)&v89 + 1))
        {
          unint64_t v59 = (unint64_t)DWORD2(v88) >> 3;
          if ((unint64_t)v89 - v59 >= *((void *)&v89 + 1)) {
            uint64_t v60 = v59;
          }
          else {
            uint64_t v60 = (v89 - DWORD2(v89));
          }
          int v61 = (void *)(v89 - v60);
          *(void *)&long long v89 = v89 - v60;
          int v62 = DWORD2(v88) - 8 * v60;
LABEL_63:
          DWORD2(v88) = v62;
          *(void *)&long long v88 = *v61;
        }
      }
    }
  }
  unint64_t v14 = v7;
LABEL_13:
  int64_t v15 = v87 - v10;
  if (v87 - v10 > (unint64_t)(v9 - v14)) {
    return -70;
  }
  if (v14)
  {
    memcpy(v14, v10, v87 - v10);
    uint64_t v17 = &v14[v15];
  }
  else
  {
    uint64_t v17 = 0;
  }
  return v17 - v7;
}

void *sub_1DD2E1DD4(void *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = result[3736];
    if (v3 != a2)
    {
      result[3739] = v3;
      result[3738] = a2 + result[3737] - v3;
      result[3737] = a2;
      result[3736] = a2;
    }
  }
  return result;
}

void *sub_1DD2E1E04(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a3 + 4);
  unsigned int v4 = *(_DWORD *)(a2 + 8) + v3;
  uint64_t v5 = (*(void *)a2 >> -(char)(*(unsigned char *)(a2 + 8) + v3)) & dword_1DD323A38[v3];
  *(_DWORD *)(a2 + 8) = v4;
  *unint64_t result = v5;
  if (v4 <= 0x40)
  {
    unint64_t v6 = *(void *)(a2 + 16);
    if (v6 >= *(void *)(a2 + 32))
    {
      uint64_t v10 = (void *)(v6 - (v4 >> 3));
      *(void *)(a2 + 16) = v10;
      int v11 = v4 & 7;
LABEL_9:
      *(_DWORD *)(a2 + 8) = v11;
      *(void *)a2 = *v10;
      goto LABEL_10;
    }
    unint64_t v7 = *(void *)(a2 + 24);
    if (v6 != v7)
    {
      uint64_t v8 = v4 >> 3;
      if (v6 - v8 >= v7) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = (v6 - v7);
      }
      uint64_t v10 = (void *)(v6 - v9);
      *(void *)(a2 + 16) = v10;
      int v11 = v4 - 8 * v9;
      goto LABEL_9;
    }
  }
LABEL_10:
  result[1] = a3 + 8;
  return result;
}

char *sub_1DD2E1EA4(char *result, char *a2, uint64_t a3)
{
  uint64_t v3 = &result[a3];
  if (a3 < 8 || result - a2 >= -7)
  {
    if (a3 >= 1)
    {
      do
      {
        char v9 = *a2++;
        *result++ = v9;
      }
      while (result < v3);
    }
  }
  else
  {
    if ((unint64_t)(result - a2) > 0xFFFFFFFFFFFFFFEFLL || (v4 = v3 - 32, uint64_t v5 = v4 - result, v4 < result))
    {
      unsigned int v4 = result;
    }
    else
    {
      *(_OWORD *)unint64_t result = *(_OWORD *)a2;
      if (v5 >= 17)
      {
        unint64_t v6 = result + 16;
        unint64_t v7 = (long long *)(a2 + 32);
        do
        {
          *(_OWORD *)unint64_t v6 = *(v7 - 1);
          long long v8 = *v7;
          v7 += 2;
          *((_OWORD *)v6 + 1) = v8;
          v6 += 32;
        }
        while (v6 < v4);
      }
      a2 += v5;
    }
    int64_t v10 = &result[a3] - v4;
    do
    {
      char v11 = *a2++;
      *v4++ = v11;
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t sub_1DD2E1F50(unsigned char *a1, uint64_t a2, unint64_t *a3, char **a4, uint64_t a5, char *a6, uint64_t a7, unint64_t a8)
{
  unint64_t v9 = *a3;
  unint64_t v10 = a3[1] + *a3;
  if (v10 <= a2 - (uint64_t)a1)
  {
    uint64_t v12 = *a4;
    if (v9 > a5 - (uint64_t)*a4) {
      return -20;
    }
    unint64_t v16 = &a1[v9];
    uint64_t v17 = &v12[v9];
    uint64_t v18 = &a1[v9 - a3[2]];
    uint64_t v19 = (unsigned char *)(a2 - 32);
    sub_1DD2E2078(a1, (unsigned char *)(a2 - 32), v12, v9, 0);
    *a4 = v17;
    uint64_t v20 = (char *)a3[2];
    if ((unint64_t)v20 <= v16 - a6)
    {
      uint64_t v24 = a3[1];
      a6 = v18;
    }
    else
    {
      if (v20 > &v16[-a7]) {
        return -20;
      }
      uint64_t v21 = v18 - a6;
      unsigned int v22 = (const void *)(a8 + v18 - a6);
      size_t v23 = a3[1];
      if ((unint64_t)v22 + v23 <= a8)
      {
        memmove(v16, v22, v23);
        return v10;
      }
      memmove(v16, v22, a6 - v18);
      v16 -= v21;
      uint64_t v24 = a3[1] + v21;
      a3[1] = v24;
    }
    sub_1DD2E2078(v16, v19, a6, v24, 1);
    return v10;
  }
  return -70;
}

unsigned char *sub_1DD2E2078(unsigned char *result, unsigned char *a2, char *a3, uint64_t a4, int a5)
{
  uint64_t v5 = &result[a4];
  if (a4 > 7)
  {
    if (a5 == 1)
    {
      uint64_t v7 = result - a3;
      if ((unint64_t)(result - a3) > 7)
      {
        *(void *)unint64_t result = *(void *)a3;
      }
      else
      {
        uint64_t v8 = dword_1DD323AD8[v7];
        *unint64_t result = *a3;
        result[1] = a3[1];
        result[2] = a3[2];
        result[3] = a3[3];
        unint64_t v9 = &a3[dword_1DD323AB8[v7]];
        *((_DWORD *)result + 1) = *(_DWORD *)v9;
        a3 = &v9[-v8];
      }
      a3 += 8;
      result += 8;
      a4 -= 8;
    }
    if (v5 <= a2)
    {
      unint64_t v13 = &result[a4];
      if (a5 == 1 && result - a3 <= 15)
      {
        do
        {
          uint64_t v14 = *(void *)a3;
          a3 += 8;
          *(void *)unint64_t result = v14;
          result += 8;
        }
        while (result < v13);
      }
      else
      {
        *(_OWORD *)unint64_t result = *(_OWORD *)a3;
        if ((unint64_t)a4 >= 0x11)
        {
          int64_t v15 = result + 16;
          unint64_t v16 = (long long *)(a3 + 32);
          do
          {
            *int64_t v15 = *(v16 - 1);
            long long v17 = *v16;
            v16 += 2;
            v15[1] = v17;
            v15 += 2;
          }
          while (v15 < (_OWORD *)v13);
        }
      }
    }
    else
    {
      if (result <= a2)
      {
        uint64_t v10 = a2 - result;
        if (a5 == 1 && result - a3 < 16)
        {
          char v11 = (uint64_t *)a3;
          do
          {
            uint64_t v12 = *v11++;
            *(void *)unint64_t result = v12;
            result += 8;
          }
          while (result < a2);
        }
        else
        {
          *(_OWORD *)unint64_t result = *(_OWORD *)a3;
          if (v10 > 16)
          {
            uint64_t v18 = result + 16;
            uint64_t v19 = (long long *)(a3 + 32);
            do
            {
              *uint64_t v18 = *(v19 - 1);
              long long v20 = *v19;
              v19 += 2;
              v18[1] = v20;
              v18 += 2;
            }
            while (v18 < (_OWORD *)a2);
          }
        }
        a3 += v10;
        unint64_t result = a2;
      }
      while (result < v5)
      {
        char v21 = *a3++;
        *result++ = v21;
      }
    }
  }
  else if (a4 >= 1)
  {
    do
    {
      char v6 = *a3++;
      *result++ = v6;
    }
    while (result < v5);
  }
  return result;
}

uint64_t sub_1DD2E220C(char *a1, uint64_t a2, unsigned char *a3, unint64_t *a4, char **a5, uint64_t a6, char *a7, uint64_t a8, unint64_t a9)
{
  unint64_t v10 = *a4;
  unint64_t v11 = a4[1] + *a4;
  if (v11 > a2 - (uint64_t)a1) {
    return -70;
  }
  unint64_t v13 = *a5;
  if (v10 > a6 - (uint64_t)*a5) {
    return -20;
  }
  long long v17 = &v13[v10];
  if (v13 >= a1 || v17 <= a1)
  {
    uint64_t v18 = &a1[v10];
    uint64_t v19 = &a1[v10 - a4[2]];
    sub_1DD2E1EA4(a1, v13, v10);
    *a5 = v17;
    long long v20 = (char *)a4[2];
    if ((unint64_t)v20 <= v18 - a7)
    {
      uint64_t v24 = a4[1];
      a7 = v19;
    }
    else
    {
      if (v20 > &v18[-a8]) {
        return -20;
      }
      uint64_t v21 = v19 - a7;
      unsigned int v22 = (const void *)(a9 + v19 - a7);
      size_t v23 = a4[1];
      if ((unint64_t)v22 + v23 <= a9)
      {
        memmove(v18, v22, v23);
        return v11;
      }
      memmove(v18, v22, a7 - v19);
      v18 -= v21;
      uint64_t v24 = a4[1] + v21;
      a4[1] = v24;
    }
    sub_1DD2E2078(v18, a3, a7, v24, 1);
    return v11;
  }
  return -70;
}

uint64_t sub_1DD2E233C(int *a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (a3 > 0xFF) {
    return -46;
  }
  unsigned __int16 v5 = a4;
  if (a4 > 0xC) {
    return -44;
  }
  uint64_t v8 = a1 + 1;
  unsigned int v9 = 1 << a4;
  int v10 = (1 << a4) - 1;
  size_t v11 = a3 + 1;
  bzero(a1 + 1, v11);
  uint64_t v12 = 0;
  unsigned __int16 v13 = 1;
  unsigned int v14 = v9 - 1;
  do
  {
    int v15 = *(__int16 *)(a2 + 2 * v12);
    if (v15 == -1)
    {
      long long v17 = &v8[v14--];
      *((unsigned char *)v17 + 2) = v12;
      __int16 v16 = 1;
    }
    else
    {
      __int16 v16 = *(_WORD *)(a2 + 2 * v12);
      if (0x8000 << v5 >> 16 <= v15) {
        unsigned __int16 v13 = 0;
      }
    }
    v26[v12++] = v16;
  }
  while (v11 != v12);
  uint64_t v18 = 0;
  unsigned int v19 = 0;
  do
  {
    int v20 = *(__int16 *)(a2 + 2 * v18);
    if (v20 >= 1)
    {
      for (int i = 0; i != v20; ++i)
      {
        BYTE2(v8[v19]) = v18;
        do
          unsigned int v19 = ((v9 >> 3) + (v9 >> 1) + 3 + v19) & v10;
        while (v19 > v14);
      }
    }
    ++v18;
  }
  while (v18 != v11);
  if (v19) {
    return -1;
  }
  unsigned int v22 = (char *)a1 + 7;
  uint64_t v23 = (1 << v5);
  do
  {
    uint64_t v24 = *(v22 - 1);
    unsigned int v25 = (unsigned __int16)v26[v24];
    v26[v24] = v25 + 1;
    LOBYTE(v24) = v5 + 1 + (__clz(v25) ^ 0xE0);
    *unsigned int v22 = v24;
    *(_WORD *)(v22 - 3) = ((_WORD)v25 << v24) - v9;
    v22 += 4;
    --v23;
  }
  while (v23);
  uint64_t result = 0;
  *a1 = v5 | (v13 << 16);
  return result;
}

uint64_t sub_1DD2E2504(uint64_t a1, unsigned int *a2, _DWORD *a3, unsigned int *a4, unint64_t a5)
{
  if (a5 < 4) {
    return -72;
  }
  unsigned int v6 = *a4;
  unsigned int v7 = *a4 & 0xF;
  if (v7 > 0xA) {
    return -44;
  }
  BOOL v9 = 0;
  unsigned int v10 = 0;
  *a3 = v7 + 5;
  uint64_t v11 = (32 << v7);
  int v12 = v11 | 1;
  unsigned int v13 = v7 + 6;
  unsigned int v14 = v6 >> 4;
  unsigned int v15 = *a2;
  unint64_t v16 = (unint64_t)a4 + a5 - 5;
  unint64_t v17 = (unint64_t)a4 + a5 - 7;
  unint64_t v18 = (unint64_t)a4 + a5 - 4;
  int v19 = 4;
  int v20 = a4;
  unint64_t v47 = v17;
  unsigned int v46 = v15;
  do
  {
    if (v10 > v15) {
      return -1;
    }
    if (v9)
    {
      unsigned int v21 = v10;
      while ((_WORD)v14 == 0xFFFF)
      {
        if ((unint64_t)v20 >= v16)
        {
          v14 >>= 16;
          v19 += 16;
        }
        else
        {
          unsigned int v22 = *(_DWORD *)((char *)v20 + 2);
          int v20 = (_DWORD *)((char *)v20 + 2);
          unsigned int v14 = v22 >> v19;
        }
        v21 += 24;
      }
      int v23 = v14 & 3;
      while (v23 == 3)
      {
        v21 += 3;
        int v23 = (v14 >> 2) & 3;
        v14 >>= 2;
        v19 += 2;
      }
      unsigned int v24 = v21 + v23;
      if (v21 + v23 > v15) {
        return -48;
      }
      if (v10 >= v24)
      {
        unsigned int v24 = v10;
      }
      else
      {
        bzero((void *)(a1 + 2 * v10), 2 * (~v10 + v21 + v23) + 2);
        unint64_t v17 = v47;
        unsigned int v15 = v46;
      }
      v19 += 2;
      unsigned int v25 = (_DWORD *)((char *)v20 + (v19 >> 3));
      if ((unint64_t)v20 <= v17 || (unint64_t)v25 <= v18)
      {
        v19 &= 7u;
        unsigned int v14 = *v25 >> v19;
        int v20 = v25;
      }
      else
      {
        v14 >>= 2;
      }
    }
    else
    {
      unsigned int v24 = v10;
    }
    __int16 v26 = 2 * v11 - 1;
    __int16 v27 = v26 - v12;
    __int16 v28 = v26 - v12;
    __int16 v29 = v14 & v26;
    __int16 v30 = v29 - v28;
    if (v29 < (int)v11) {
      __int16 v30 = v29;
    }
    unsigned int v31 = v13 - 1;
    if ((v14 & (v11 - 1)) < v27)
    {
      __int16 v32 = v14 & (v11 - 1);
    }
    else
    {
      unsigned int v31 = v13;
      __int16 v32 = v30;
    }
    __int16 v33 = v32 - 1;
    LOWORD(v34) = v33;
    if (v33 < 0) {
      int v34 = -v33;
    }
    v12 -= (__int16)v34;
    *(_WORD *)(a1 + 2 * v24) = v33;
    BOOL v9 = v33 == 0;
    if (v12 >= (int)v11)
    {
      uint64_t v35 = v11;
    }
    else
    {
      do
      {
        --v13;
        uint64_t v35 = ((int)v11 >> 1);
        BOOL v36 = v12 < (int)v11 >> 1;
        LODWORD(v11) = (int)v11 >> 1;
      }
      while (v36);
    }
    int v37 = v31 + v19;
    unsigned int v10 = v24 + 1;
    BOOL v38 = (unint64_t)v20 > v17;
    unsigned __int8 v39 = (_DWORD *)((char *)v20 + (v37 >> 3));
    BOOL v40 = (unint64_t)v39 > v18;
    int v41 = v37 & 7;
    int v42 = v37 + 8 * (v20 - v18);
    if (v38 && v40) {
      int v20 = (_DWORD *)v18;
    }
    else {
      int v20 = v39;
    }
    if (v38 && v40) {
      int v19 = v42;
    }
    else {
      int v19 = v41;
    }
    unsigned int v14 = *v20 >> v19;
    uint64_t v11 = v35;
  }
  while (v12 > 1);
  if (v12 != 1) {
    return -1;
  }
  *a2 = v24;
  if ((char *)v20 + ((v19 + 7) >> 3) - (char *)a4 <= a5) {
    return (char *)v20 + ((v19 + 7) >> 3) - (char *)a4;
  }
  else {
    return -72;
  }
}

uint64_t sub_1DD2E27B0(unsigned char *a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4, unsigned __int16 *a5)
{
  unsigned __int16 v5 = &a1[a2];
  unint64_t v6 = (unint64_t)&a1[a2 - 3];
  if (!a5[1])
  {
    if (!a4) {
      return -72;
    }
    uint64_t v10 = a4 - 8;
    if (a4 < 8)
    {
      unint64_t v11 = *a3;
      switch(a4)
      {
        case 2uLL:
          goto LABEL_35;
        case 3uLL:
          goto LABEL_34;
        case 4uLL:
          goto LABEL_33;
        case 5uLL:
          goto LABEL_32;
        case 6uLL:
          goto LABEL_31;
        case 7uLL:
          v11 |= (unint64_t)a3[6] << 48;
LABEL_31:
          v11 += (unint64_t)a3[5] << 40;
LABEL_32:
          v11 += (unint64_t)a3[4] << 32;
LABEL_33:
          v11 += (unint64_t)a3[3] << 24;
LABEL_34:
          v11 += (unint64_t)a3[2] << 16;
LABEL_35:
          v11 += (unint64_t)a3[1] << 8;
          break;
        default:
          break;
      }
      if (!a3[a4 - 1]) {
        return -1;
      }
      uint64_t v10 = 0;
      unsigned int v12 = __clz(a3[a4 - 1]) - 8 * a4 + 41;
    }
    else
    {
      unint64_t v11 = *(void *)&a3[v10];
      if (!HIBYTE(v11)) {
        return -1;
      }
      if (a4 > 0xFFFFFFFFFFFFFF88) {
        return a4;
      }
      unsigned int v12 = __clz(HIBYTE(v11)) - 23;
    }
    int v17 = *a5;
    unint64_t v18 = v11 << v12 >> 1 >> (63 - v17);
    unsigned int v19 = v12 + v17;
    if (v19 <= 0x40)
    {
      if (v10 >= 8)
      {
        unsigned int v20 = v19 >> 3;
        v19 &= 7u;
      }
      else
      {
        if (!v10) {
          goto LABEL_107;
        }
        if (&a3[v10 - (v19 >> 3)] >= a3) {
          unsigned int v20 = v19 >> 3;
        }
        else {
          unsigned int v20 = v10;
        }
        v19 -= 8 * v20;
      }
      v10 -= v20;
      unint64_t v11 = *(void *)&a3[v10];
    }
LABEL_107:
    unint64_t v61 = v11 << v19 >> 1 >> ((63 - v17) & 0x3F);
    unsigned int v62 = v19 + v17;
    if (v19 + v17 > 0x40)
    {
LABEL_108:
      uint64_t v63 = a1;
LABEL_130:
      long long v89 = &a3[v10];
      goto LABEL_131;
    }
    if (v10 >= 8)
    {
      uint64_t v66 = v62 >> 3;
      v62 &= 7u;
      v10 -= v66;
    }
    else
    {
      if (!v10) {
        goto LABEL_118;
      }
      uint64_t v64 = v62 >> 3;
      if (&a3[v10 - v64] >= a3) {
        uint64_t v65 = v64;
      }
      else {
        uint64_t v65 = v10;
      }
      v62 -= 8 * v65;
      v10 -= v65;
      if (v62 > 0x40) {
        goto LABEL_108;
      }
    }
    unint64_t v11 = *(void *)&a3[v10];
LABEL_118:
    unsigned __int8 v67 = a5 + 2;
    uint64_t v63 = a1 + 1;
    while (1)
    {
      long long v68 = v63 - 1;
      if (v10 >= 8)
      {
        BOOL v70 = 0;
        unsigned int v71 = v62 >> 3;
        v62 &= 7u;
      }
      else
      {
        if (!v10) {
          goto LABEL_143;
        }
        uint64_t v69 = &a3[v10 - (v62 >> 3)];
        BOOL v70 = v69 < a3;
        unsigned int v71 = v69 >= a3 ? v62 >> 3 : v10;
        v62 -= 8 * v71;
      }
      v10 -= v71;
      unint64_t v11 = *(void *)&a3[v10];
      if (v70 || (unint64_t)v68 >= v6) {
        break;
      }
      uint64_t v72 = &v67[2 * v18];
      uint64_t v73 = *v72;
      char v74 = *((unsigned char *)v72 + 2);
      LODWORD(v72) = *((unsigned __int8 *)v72 + 3);
      unint64_t v75 = v11 << v62 >> 1 >> (63 - v72);
      LODWORD(v72) = v62 + v72;
      uint64_t v76 = v75 + v73;
      *(v63 - 1) = v74;
      int v77 = &v67[2 * v61];
      uint64_t v78 = *v77;
      char v79 = *((unsigned char *)v77 + 2);
      LODWORD(v77) = *((unsigned __int8 *)v77 + 3);
      unint64_t v80 = v11 << (char)v72 >> 1 >> (63 - v77);
      LODWORD(v72) = v72 + v77;
      uint64_t v81 = v80 + v78;
      *uint64_t v63 = v79;
      uint64_t v82 = &v67[2 * v76];
      uint64_t v83 = *v82;
      char v84 = *((unsigned char *)v82 + 2);
      LODWORD(v82) = *((unsigned __int8 *)v82 + 3);
      unint64_t v85 = v11 << (char)v72 >> 1 >> (63 - v82);
      LODWORD(v82) = v72 + v82;
      unint64_t v18 = v85 + v83;
      v63[1] = v84;
      uint64_t v86 = &v67[2 * v81];
      int v87 = *((unsigned __int8 *)v86 + 3);
      unint64_t v88 = v11 << (char)v82 >> 1 >> (63 - v87);
      unsigned int v62 = v82 + v87;
      LOBYTE(v87) = *((unsigned char *)v86 + 2);
      unint64_t v61 = v88 + *v86;
      v63[2] = v87;
      v63 += 4;
      a2 -= 4;
      if (v62 >= 0x41)
      {
        --v63;
        goto LABEL_130;
      }
    }
    if (v62 > 0x40)
    {
      long long v89 = &a3[v10];
      --v63;
      goto LABEL_131;
    }
LABEL_143:
    while (v10 < 8)
    {
      if (v10)
      {
        if (&a3[v10 - (v62 >> 3)] >= a3) {
          unsigned int v91 = v62 >> 3;
        }
        else {
          unsigned int v91 = v10;
        }
        v62 -= 8 * v91;
        goto LABEL_150;
      }
      uint64_t v92 = 0;
LABEL_151:
      long long v89 = &a3[v92];
      if (!a2) {
        goto LABEL_181;
      }
      if (!v92 && v62 == 64 && !v18)
      {
        --v63;
LABEL_178:
        unsigned int v62 = 64;
        long long v89 = a3;
LABEL_131:
        if (v89 == a3 && v62 == 64 && !v18 && !v61) {
          return v63 - a1;
        }
        BOOL v50 = v63 == v5;
        goto LABEL_137;
      }
      uint64_t v93 = &v67[2 * v18];
      uint64_t v94 = *v93;
      char v95 = *((unsigned char *)v93 + 2);
      LODWORD(v93) = *((unsigned __int8 *)v93 + 3);
      unint64_t v96 = v11 << v62 >> 1 >> (63 - v93);
      v62 += v93;
      unint64_t v18 = v96 + v94;
      *(v63 - 1) = v95;
      if (v62 > 0x40)
      {
        uint64_t v63 = v68 + 1;
        goto LABEL_131;
      }
      if (v92 >= 8)
      {
        unsigned int v97 = v62 >> 3;
        v62 &= 7u;
LABEL_163:
        uint64_t v10 = v92 - v97;
        unint64_t v11 = *(void *)&a3[v10];
        goto LABEL_164;
      }
      if (v92)
      {
        if (&v89[-(v62 >> 3)] >= a3) {
          unsigned int v97 = v62 >> 3;
        }
        else {
          unsigned int v97 = v92;
        }
        v62 -= 8 * v97;
        goto LABEL_163;
      }
      uint64_t v10 = 0;
LABEL_164:
      if (a2 == 1)
      {
        long long v89 = &a3[v10];
LABEL_181:
        uint64_t v63 = v5;
        goto LABEL_131;
      }
      if (!v10 && v62 == 64 && !v61) {
        goto LABEL_178;
      }
      int v98 = &v67[2 * v61];
      uint64_t v99 = *v98;
      char v100 = *((unsigned char *)v98 + 2);
      LODWORD(v98) = *((unsigned __int8 *)v98 + 3);
      unint64_t v101 = v11 << v62 >> 1 >> (63 - v98);
      v62 += v98;
      unint64_t v61 = v101 + v99;
      v68 += 2;
      *uint64_t v63 = v100;
      v63 += 2;
      a2 -= 2;
      if (v62 >= 0x41)
      {
        long long v89 = &a3[v10];
        --v63;
        goto LABEL_131;
      }
    }
    unsigned int v91 = v62 >> 3;
    v62 &= 7u;
LABEL_150:
    uint64_t v92 = v10 - v91;
    unint64_t v11 = *(void *)&a3[v92];
    goto LABEL_151;
  }
  if (!a4) {
    return -72;
  }
  uint64_t v7 = a4 - 8;
  if (a4 < 8)
  {
    unint64_t v8 = *a3;
    switch(a4)
    {
      case 2uLL:
        goto LABEL_19;
      case 3uLL:
        goto LABEL_18;
      case 4uLL:
        goto LABEL_17;
      case 5uLL:
        goto LABEL_16;
      case 6uLL:
        goto LABEL_15;
      case 7uLL:
        v8 |= (unint64_t)a3[6] << 48;
LABEL_15:
        v8 += (unint64_t)a3[5] << 40;
LABEL_16:
        v8 += (unint64_t)a3[4] << 32;
LABEL_17:
        v8 += (unint64_t)a3[3] << 24;
LABEL_18:
        v8 += (unint64_t)a3[2] << 16;
LABEL_19:
        v8 += (unint64_t)a3[1] << 8;
        break;
      default:
        break;
    }
    if (a3[a4 - 1])
    {
      uint64_t v7 = 0;
      unsigned int v9 = __clz(a3[a4 - 1]) - 8 * a4 + 41;
      goto LABEL_22;
    }
    return -1;
  }
  unint64_t v8 = *(void *)&a3[v7];
  if (!HIBYTE(v8)) {
    return -1;
  }
  if (a4 > 0xFFFFFFFFFFFFFF88) {
    return a4;
  }
  unsigned int v9 = __clz(HIBYTE(v8)) - 23;
LABEL_22:
  int v13 = *a5;
  unint64_t v14 = v8 << v9 >> 1 >> (63 - v13);
  unsigned int v15 = v9 + v13;
  if (v15 > 0x40) {
    goto LABEL_48;
  }
  if (v7 >= 8)
  {
    unsigned int v16 = v15 >> 3;
    v15 &= 7u;
  }
  else
  {
    if (!v7) {
      goto LABEL_48;
    }
    if (&a3[v7 - (v15 >> 3)] >= a3) {
      unsigned int v16 = v15 >> 3;
    }
    else {
      unsigned int v16 = v7;
    }
    v15 -= 8 * v16;
  }
  v7 -= v16;
  unint64_t v8 = *(void *)&a3[v7];
LABEL_48:
  unint64_t v21 = v8 << v15 >> 1 >> ((63 - v13) & 0x3F);
  unsigned int v22 = v15 + v13;
  if (v15 + v13 > 0x40)
  {
LABEL_49:
    int v23 = a1;
LABEL_71:
    unsigned int v49 = &a3[v7];
    goto LABEL_72;
  }
  if (v7 >= 8)
  {
    uint64_t v26 = v22 >> 3;
    v22 &= 7u;
    v7 -= v26;
  }
  else
  {
    if (!v7) {
      goto LABEL_59;
    }
    uint64_t v24 = v22 >> 3;
    if (&a3[v7 - v24] >= a3) {
      uint64_t v25 = v24;
    }
    else {
      uint64_t v25 = v7;
    }
    v22 -= 8 * v25;
    v7 -= v25;
    if (v22 > 0x40) {
      goto LABEL_49;
    }
  }
  unint64_t v8 = *(void *)&a3[v7];
LABEL_59:
  __int16 v27 = a5 + 2;
  int v23 = a1 + 1;
  while (1)
  {
    __int16 v28 = v23 - 1;
    if (v7 >= 8)
    {
      BOOL v30 = 0;
      unsigned int v31 = v22 >> 3;
      v22 &= 7u;
    }
    else
    {
      if (!v7) {
        goto LABEL_80;
      }
      __int16 v29 = &a3[v7 - (v22 >> 3)];
      BOOL v30 = v29 < a3;
      unsigned int v31 = v29 >= a3 ? v22 >> 3 : v7;
      v22 -= 8 * v31;
    }
    v7 -= v31;
    unint64_t v8 = *(void *)&a3[v7];
    if (v30 || (unint64_t)v28 >= v6) {
      break;
    }
    __int16 v32 = &v27[2 * v14];
    uint64_t v33 = *v32;
    char v34 = *((unsigned char *)v32 + 2);
    LODWORD(v32) = *((unsigned __int8 *)v32 + 3);
    unint64_t v35 = v8 << v22 >> -(char)v32;
    LODWORD(v32) = v22 + v32;
    uint64_t v36 = v35 + v33;
    *(v23 - 1) = v34;
    int v37 = &v27[2 * v21];
    uint64_t v38 = *v37;
    char v39 = *((unsigned char *)v37 + 2);
    LODWORD(v37) = *((unsigned __int8 *)v37 + 3);
    unint64_t v40 = v8 << (char)v32 >> -(char)v37;
    LODWORD(v32) = v32 + v37;
    uint64_t v41 = v40 + v38;
    *int v23 = v39;
    int v42 = &v27[2 * v36];
    uint64_t v43 = *v42;
    char v44 = *((unsigned char *)v42 + 2);
    LODWORD(v42) = *((unsigned __int8 *)v42 + 3);
    unint64_t v45 = v8 << (char)v32 >> -(char)v42;
    LODWORD(v42) = v32 + v42;
    unint64_t v14 = v45 + v43;
    v23[1] = v44;
    unsigned int v46 = &v27[2 * v41];
    int v47 = *((unsigned __int8 *)v46 + 3);
    unint64_t v48 = v8 << (char)v42 >> -(char)v47;
    unsigned int v22 = v42 + v47;
    LOBYTE(v47) = *((unsigned char *)v46 + 2);
    unint64_t v21 = v48 + *v46;
    v23[2] = v47;
    v23 += 4;
    a2 -= 4;
    if (v22 >= 0x41)
    {
      --v23;
      goto LABEL_71;
    }
  }
  if (v22 > 0x40)
  {
    unsigned int v49 = &a3[v7];
    --v23;
    goto LABEL_72;
  }
  while (1)
  {
LABEL_80:
    if (v7 >= 8)
    {
      unsigned int v51 = v22 >> 3;
      v22 &= 7u;
    }
    else
    {
      if (!v7) {
        goto LABEL_88;
      }
      unsigned int v51 = &a3[v7 - (v22 >> 3)] >= a3 ? v22 >> 3 : v7;
      v22 -= 8 * v51;
    }
    v7 -= v51;
    unint64_t v8 = *(void *)&a3[v7];
LABEL_88:
    unsigned int v49 = &a3[v7];
    if (!a2) {
      goto LABEL_176;
    }
    if (!v7 && v22 == 64)
    {
      --v23;
LABEL_173:
      unsigned int v22 = 64;
      unsigned int v49 = a3;
      goto LABEL_72;
    }
    unint64_t v52 = &v27[2 * v14];
    uint64_t v53 = *v52;
    char v54 = *((unsigned char *)v52 + 2);
    LODWORD(v52) = *((unsigned __int8 *)v52 + 3);
    unint64_t v55 = v8 << v22 >> -(char)v52;
    v22 += v52;
    unint64_t v14 = v55 + v53;
    *(v23 - 1) = v54;
    if (v22 > 0x40)
    {
      int v23 = v28 + 1;
      goto LABEL_72;
    }
    if (v7 >= 8)
    {
      unsigned int v56 = v22 >> 3;
      v22 &= 7u;
    }
    else
    {
      if (!v7) {
        goto LABEL_100;
      }
      unsigned int v56 = &v49[-(v22 >> 3)] >= a3 ? v22 >> 3 : v7;
      v22 -= 8 * v56;
    }
    v7 -= v56;
    unint64_t v8 = *(void *)&a3[v7];
LABEL_100:
    if (a2 == 1) {
      break;
    }
    if (!v7 && v22 == 64) {
      goto LABEL_173;
    }
    long long v57 = &v27[2 * v21];
    uint64_t v58 = *v57;
    char v59 = *((unsigned char *)v57 + 2);
    LODWORD(v57) = *((unsigned __int8 *)v57 + 3);
    unint64_t v60 = v8 << v22 >> -(char)v57;
    v22 += v57;
    unint64_t v21 = v60 + v58;
    v28 += 2;
    *int v23 = v59;
    v23 += 2;
    a2 -= 2;
    if (v22 >= 0x41)
    {
      unsigned int v49 = &a3[v7];
      --v23;
      goto LABEL_72;
    }
  }
  unsigned int v49 = &a3[v7];
LABEL_176:
  int v23 = v5;
LABEL_72:
  if (v49 == a3 && v22 == 64 && !v14 && !v21) {
    return v23 - a1;
  }
  BOOL v50 = v23 == v5;
LABEL_137:
  if (v50) {
    return -70;
  }
  else {
    return -20;
  }
}

unint64_t sub_1DD2E3014()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  v15[64] = *MEMORY[0x1E4F143B8];
  unsigned int v12 = 255;
  if (v3 < 2) {
    return -72;
  }
  unint64_t v4 = v3;
  unsigned __int16 v5 = v2;
  uint64_t v6 = v1;
  uint64_t v7 = (unsigned char *)v0;
  memset(v14, 0, 512);
  unsigned int v13 = 0;
  unint64_t result = sub_1DD2E2504((uint64_t)v15, &v12, &v13, v2, v3);
  if (result > 0xFFFFFFFFFFFFFF88) {
    return result;
  }
  unint64_t v9 = result;
  BOOL v10 = v4 > result;
  unint64_t v11 = v4 - result;
  if (!v10) {
    return -72;
  }
  unint64_t result = sub_1DD2E233C((int *)v14, (uint64_t)v15, v12, v13);
  if (result <= 0xFFFFFFFFFFFFFF88) {
    return sub_1DD2E27B0(v7, v6, (unsigned __int8 *)v5 + v9, v11, (unsigned __int16 *)v14);
  }
  return result;
}

unint64_t sub_1DD2E3168(_WORD *a1, char *a2, unint64_t a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  unsigned int v19 = 0;
  unsigned int v20 = 0;
  unint64_t result = sub_1DD2E32A8(v22, (uint64_t)v21, &v19, &v20, a2, a3);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    unsigned int v5 = v20;
    if (v20 <= (unsigned __int16)*a1)
    {
      *a1 = v20;
      if (v5)
      {
        uint64_t v6 = 0;
        unsigned int v7 = 0;
        if (v5 + 1 > 2) {
          uint64_t v8 = v5 + 1;
        }
        else {
          uint64_t v8 = 2;
        }
        uint64_t v9 = v8 - 1;
        do
        {
          unsigned int v10 = v21[v6 + 1] << v6;
          v21[v6 + 1] = v7;
          v7 += v10;
          ++v6;
        }
        while (v9 != v6);
      }
      uint64_t v11 = v19;
      if (v19)
      {
        uint64_t v12 = 0;
        char v13 = v5 + 1;
        do
        {
          uint64_t v14 = *((unsigned __int8 *)v22 + v12);
          uint64_t v15 = v21[v14];
          uint64_t v16 = (v15 + (1 << v14 >> 1));
          if (v15 < v16)
          {
            int v17 = (char *)&a1[v15 + 1] + 1;
            uint64_t v18 = v16 - v15;
            do
            {
              *(v17 - 1) = v12;
              *int v17 = v13 - v14;
              v17 += 2;
              --v18;
            }
            while (v18);
          }
          v21[v14] = v16;
          ++v12;
        }
        while (v12 != v11);
      }
    }
    else
    {
      return -44;
    }
  }
  return result;
}

uint64_t sub_1DD2E32A8(_OWORD *a1, uint64_t a2, _DWORD *a3, _DWORD *a4, char *a5, unint64_t a6)
{
  if (a6)
  {
    unint64_t v10 = *a5;
    if ((*a5 & 0x80000000) == 0)
    {
      if (v10 < a6)
      {
        unint64_t v11 = sub_1DD2E3014();
        uint64_t v12 = v11;
        if (v11 > 0xFFFFFFFFFFFFFF88) {
          return v12;
        }
        goto LABEL_14;
      }
      return -72;
    }
    if (v10 < 0xF2)
    {
      if ((v10 - 126) >> 1 >= a6) {
        return -72;
      }
      unint64_t v11 = v10 - 127;
      if (v10 == 127)
      {
        *(_DWORD *)(a2 + 64) = 0;
        *(_OWORD *)(a2 + 32) = 0u;
        *(_OWORD *)(a2 + 48) = 0u;
        *(_OWORD *)a2 = 0u;
        *(_OWORD *)(a2 + 16) = 0u;
        return -20;
      }
      uint64_t v14 = 0;
      uint64_t v15 = a5 + 1;
      do
      {
        uint64_t v16 = (char *)a1 + v14;
        *uint64_t v16 = *v15 >> 4;
        char v17 = *v15++;
        v16[1] = v17 & 0xF;
        v14 += 2;
      }
      while (v11 > v14);
      unint64_t v10 = (v10 - 126) >> 1;
    }
    else
    {
      unint64_t v11 = dword_1DD323C78[v10 - 242];
      *(void *)&long long v13 = 0x101010101010101;
      *((void *)&v13 + 1) = 0x101010101010101;
      a1[14] = v13;
      a1[15] = v13;
      a1[12] = v13;
      a1[13] = v13;
      a1[10] = v13;
      a1[11] = v13;
      a1[8] = v13;
      a1[9] = v13;
      a1[6] = v13;
      a1[7] = v13;
      a1[4] = v13;
      a1[5] = v13;
      a1[2] = v13;
      a1[3] = v13;
      *a1 = v13;
      a1[1] = v13;
      unint64_t v10 = 0;
    }
LABEL_14:
    *(_DWORD *)(a2 + 64) = 0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    if (v11)
    {
      uint64_t v18 = 0;
      unsigned int v19 = 0;
      unsigned int v20 = 1;
      while (1)
      {
        unint64_t v21 = *((unsigned __int8 *)a1 + v18);
        if (v21 > 0xF) {
          break;
        }
        ++*(_DWORD *)(a2 + 4 * v21);
        v19 += 1 << *((unsigned char *)a1 + v18) >> 1;
        uint64_t v18 = v20;
        if (v11 <= v20++)
        {
          if (!v19) {
            return -20;
          }
          unsigned int v23 = __clz(v19);
          if ((v23 ^ 0x1F) > 0xF) {
            return -20;
          }
          unsigned int v24 = (2 << (v23 ^ 0x1F)) - v19;
          unsigned int v25 = __clz(v24) ^ 0x1F;
          if (1 << v25 != v24) {
            return -20;
          }
          unsigned int v26 = v25 + 1;
          *((unsigned char *)a1 + v11) = v26;
          ++*(_DWORD *)(a2 + 4 * v26);
          unsigned int v27 = *(_DWORD *)(a2 + 4);
          uint64_t v12 = -20;
          if (v27 >= 2 && (v27 & 1) == 0)
          {
            *a3 = v11 + 1;
            *a4 = 32 - v23;
            return v10 + 1;
          }
          return v12;
        }
      }
    }
    return -20;
  }
  return -72;
}

uint64_t sub_1DD2E34B4(unsigned char *a1, unint64_t a2, unsigned __int8 *a3, unint64_t a4, unsigned __int16 *a5)
{
  if (a2 <= a4) {
    return -70;
  }
  if (!a4) {
    return -72;
  }
  uint64_t v19 = v5;
  uint64_t v20 = v6;
  int v10 = *a5;
  uint64_t v8 = (uint64_t)(a5 + 1);
  int v9 = v10;
  unint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = a3;
  if (a4 >= 8)
  {
    unint64_t v11 = *(void *)&a3[a4 - 8];
    uint64_t v17 = (uint64_t)&a3[a4 - 8];
    unint64_t v15 = v11;
    if (HIBYTE(v11))
    {
      LODWORD(v16) = __clz(HIBYTE(v11)) - 23;
      if (a4 > 0xFFFFFFFFFFFFFF88) {
        return a4;
      }
      goto LABEL_18;
    }
    return -1;
  }
  unint64_t v12 = *a3;
  uint64_t v17 = (uint64_t)a3;
  unint64_t v15 = v12;
  switch(a4)
  {
    case 2uLL:
      goto LABEL_15;
    case 3uLL:
      goto LABEL_14;
    case 4uLL:
      goto LABEL_13;
    case 5uLL:
      goto LABEL_12;
    case 6uLL:
      goto LABEL_11;
    case 7uLL:
      v12 |= (unint64_t)a3[6] << 48;
LABEL_11:
      v12 += (unint64_t)a3[5] << 40;
LABEL_12:
      v12 += (unint64_t)a3[4] << 32;
LABEL_13:
      v12 += (unint64_t)a3[3] << 24;
LABEL_14:
      v12 += (unint64_t)a3[2] << 16;
LABEL_15:
      unint64_t v15 = v12 + ((unint64_t)a3[1] << 8);
      break;
    default:
      break;
  }
  if (!a3[a4 - 1]) {
    return -1;
  }
  LODWORD(v16) = __clz(a3[a4 - 1]) - 8 * a4 + 41;
LABEL_18:
  sub_1DD2E3720(a1, (uint64_t)&v15, (unint64_t)&a1[a2], v8, v9);
  if (v16 == 64 && v17 == (void)v18) {
    return a2;
  }
  else {
    return -20;
  }
}

uint64_t sub_1DD2E3618(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  if (a3)
  {
    *(void *)(a1 + 24) = a2;
    if (a3 < 8)
    {
      *(void *)(a1 + 16) = a2;
      uint64_t v5 = *a2;
      *(void *)a1 = v5;
      switch(a3)
      {
        case 2uLL:
          goto LABEL_12;
        case 3uLL:
          goto LABEL_11;
        case 4uLL:
          goto LABEL_10;
        case 5uLL:
          goto LABEL_9;
        case 6uLL:
          goto LABEL_8;
        case 7uLL:
          v5 |= (unint64_t)a2[6] << 48;
          *(void *)a1 = v5;
LABEL_8:
          v5 += (unint64_t)a2[5] << 40;
          *(void *)a1 = v5;
LABEL_9:
          v5 += (unint64_t)a2[4] << 32;
          *(void *)a1 = v5;
LABEL_10:
          v5 += (unint64_t)a2[3] << 24;
          *(void *)a1 = v5;
LABEL_11:
          v5 += (unint64_t)a2[2] << 16;
          *(void *)a1 = v5;
LABEL_12:
          *(void *)a1 = v5 + ((unint64_t)a2[1] << 8);
          break;
        default:
          break;
      }
      if (a2[a3 - 1])
      {
        unsigned int v4 = __clz(a2[a3 - 1]) - 8 * a3 + 41;
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v3 = *(void *)&a2[a3 - 8];
      *(void *)(a1 + 16) = &a2[a3 - 8];
      *(void *)a1 = v3;
      if (a2[a3 - 1])
      {
        unsigned int v4 = __clz(a2[a3 - 1]) - 23;
LABEL_15:
        *(_DWORD *)(a1 + 8) = v4;
        return a3;
      }
    }
    return -1;
  }
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return -72;
}

unsigned char *sub_1DD2E3720(unsigned char *result, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v5 = -a5 & 0x3F;
  unsigned int v6 = *(_DWORD *)(a2 + 8);
  if (v6 > 0x40)
  {
LABEL_2:
    unsigned int v7 = result;
    goto LABEL_13;
  }
  do
  {
    unint64_t v9 = *(void *)(a2 + 16);
    unint64_t v8 = *(void *)(a2 + 24);
    if (v9 >= v8 + 8)
    {
      BOOL v13 = 0;
      uint64_t v14 = (uint64_t *)(v9 - (v6 >> 3));
      *(void *)(a2 + 16) = v14;
      v6 &= 7u;
    }
    else
    {
      if (v9 == v8) {
        goto LABEL_2;
      }
      uint64_t v10 = v6 >> 3;
      unsigned int v11 = v9 - v8;
      BOOL v12 = v9 - v10 >= v8;
      BOOL v13 = v9 - v10 < v8;
      if (v12) {
        uint64_t v10 = v10;
      }
      else {
        uint64_t v10 = v11;
      }
      uint64_t v14 = (uint64_t *)(v9 - v10);
      *(void *)(a2 + 16) = v14;
      v6 -= 8 * v10;
    }
    *(_DWORD *)(a2 + 8) = v6;
    uint64_t v15 = *v14;
    *(void *)a2 = v15;
    if (v13 || (unint64_t)result > a3 - 4) {
      goto LABEL_2;
    }
    uint64_t v16 = (char *)(a4 + 2 * ((unint64_t)(v15 << v6) >> v5));
    char v17 = *v16;
    *(_DWORD *)(a2 + 8) = v6 + v16[1];
    *unint64_t result = v17;
    int v18 = *(_DWORD *)(a2 + 8);
    uint64_t v19 = (char *)(a4 + 2 * (*(void *)a2 << v18 >> v5));
    char v20 = *v19;
    *(_DWORD *)(a2 + 8) = v18 + v19[1];
    result[1] = v20;
    int v21 = *(_DWORD *)(a2 + 8);
    unsigned int v22 = (char *)(a4 + 2 * (*(void *)a2 << v21 >> v5));
    char v23 = *v22;
    *(_DWORD *)(a2 + 8) = v21 + v22[1];
    result[2] = v23;
    int v24 = *(_DWORD *)(a2 + 8);
    unsigned int v25 = (char *)(a4 + 2 * (*(void *)a2 << v24 >> v5));
    char v26 = *v25;
    *(_DWORD *)(a2 + 8) = v24 + v25[1];
    unsigned int v7 = result + 4;
    result[3] = v26;
    unsigned int v6 = *(_DWORD *)(a2 + 8);
    result += 4;
  }
  while (v6 <= 0x40);
LABEL_13:
  while (v6 <= 0x40)
  {
    unint64_t v28 = *(void *)(a2 + 16);
    unint64_t v27 = *(void *)(a2 + 24);
    if (v28 >= v27 + 8)
    {
      BOOL v31 = 0;
      __int16 v32 = (uint64_t *)(v28 - (v6 >> 3));
      *(void *)(a2 + 16) = v32;
      int v33 = v6 & 7;
    }
    else
    {
      if (v28 == v27) {
        break;
      }
      uint64_t v29 = v6 >> 3;
      unsigned int v30 = v28 - v27;
      BOOL v12 = v28 - v29 >= v27;
      BOOL v31 = v28 - v29 < v27;
      uint64_t v29 = v12 ? v29 : v30;
      __int16 v32 = (uint64_t *)(v28 - v29);
      *(void *)(a2 + 16) = v32;
      int v33 = v6 - 8 * v29;
    }
    *(_DWORD *)(a2 + 8) = v33;
    uint64_t v34 = *v32;
    *(void *)a2 = v34;
    if (v31 || (unint64_t)v7 >= a3) {
      break;
    }
    unint64_t v35 = (char *)(a4 + 2 * ((unint64_t)(v34 << v33) >> v5));
    char v36 = *v35;
    *(_DWORD *)(a2 + 8) = v33 + v35[1];
    *v7++ = v36;
    unsigned int v6 = *(_DWORD *)(a2 + 8);
  }
  while ((unint64_t)v7 < a3)
  {
    int v37 = *(_DWORD *)(a2 + 8);
    uint64_t v38 = (char *)(a4 + 2 * (*(void *)a2 << v37 >> v5));
    char v39 = *v38;
    *(_DWORD *)(a2 + 8) = v37 + v38[1];
    *v7++ = v39;
  }
  return result;
}

unint64_t sub_1DD2E3928()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  unint64_t v2 = v1;
  unsigned int v4 = v3;
  unint64_t v6 = v5;
  unsigned int v7 = (unsigned char *)v0;
  v10[1024] = *MEMORY[0x1E4F143B8];
  bzero(v10, 0x2000uLL);
  unsigned __int16 v9 = 12;
  unint64_t result = sub_1DD2E3168(&v9, v4, v2);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    if (v2 <= result) {
      return -72;
    }
    else {
      return sub_1DD2E34B4(v7, v6, (unsigned __int8 *)&v4[result], v2 - result, &v9);
    }
  }
  return result;
}

unint64_t sub_1DD2E3A08(unsigned char *a1, uint64_t a2, unsigned __int16 *a3, unint64_t a4, unsigned __int16 *a5)
{
  if (a4 < 0xA) {
    return -20;
  }
  uint64_t v139 = v5;
  uint64_t v140 = v6;
  uint64_t v9 = (uint64_t)(a5 + 1);
  int v10 = *a5;
  unint64_t v135 = 0;
  uint64_t v136 = 0;
  int v137 = 0;
  unint64_t v131 = 0;
  uint64_t v132 = 0;
  uint64_t v133 = 0;
  unint64_t v127 = 0;
  uint64_t v128 = 0;
  uint64_t v129 = 0;
  long long v125 = 0u;
  long long v126 = 0u;
  uint64_t v11 = *a3;
  uint64_t v12 = a3[1];
  uint64_t v13 = a3[2];
  unint64_t v14 = v11 + v12 + v13 + 6;
  unint64_t v15 = a4 - v14;
  if (a4 < v14) {
    return -20;
  }
  if (!v11) {
    return -72;
  }
  int v18 = (unsigned __int8 *)(a3 + 3);
  uint64_t v19 = (unsigned __int8 *)a3 + v11 + 6;
  int v138 = a3 + 3;
  if (v11 < 8)
  {
    unint64_t v22 = *v18;
    int v137 = a3 + 3;
    unint64_t v135 = v22;
    switch((int)v11)
    {
      case 2:
        goto LABEL_15;
      case 3:
        goto LABEL_14;
      case 4:
        goto LABEL_13;
      case 5:
        goto LABEL_12;
      case 6:
        goto LABEL_11;
      case 7:
        v22 |= (unint64_t)*((unsigned __int8 *)a3 + 12) << 48;
LABEL_11:
        v22 += (unint64_t)*((unsigned __int8 *)a3 + 11) << 40;
LABEL_12:
        v22 += (unint64_t)*((unsigned __int8 *)a3 + 10) << 32;
LABEL_13:
        v22 += (unint64_t)*((unsigned __int8 *)a3 + 9) << 24;
LABEL_14:
        v22 += (unint64_t)*((unsigned __int8 *)a3 + 8) << 16;
LABEL_15:
        unint64_t v135 = v22 + ((unint64_t)*((unsigned __int8 *)a3 + 7) << 8);
        break;
      default:
        break;
    }
    if (!v18[v11 - 1]) {
      return -1;
    }
    unsigned int v21 = __clz(v18[v11 - 1]) - 8 * v11 + 41;
  }
  else
  {
    unint64_t v20 = *((void *)v19 - 1);
    int v137 = (unsigned __int16 *)(v19 - 8);
    unint64_t v135 = v20;
    if (!HIBYTE(v20)) {
      return -1;
    }
    unsigned int v21 = __clz(HIBYTE(v20)) - 23;
  }
  LODWORD(v136) = v21;
  if (!v12) {
    return -72;
  }
  char v23 = &v19[v12];
  uint64_t v134 = v19;
  if (v12 < 8)
  {
    unint64_t v26 = *v19;
    uint64_t v133 = v19;
    unint64_t v131 = v26;
    switch((int)v12)
    {
      case 2:
        goto LABEL_28;
      case 3:
        goto LABEL_27;
      case 4:
        goto LABEL_26;
      case 5:
        goto LABEL_25;
      case 6:
        goto LABEL_24;
      case 7:
        v26 |= (unint64_t)v19[6] << 48;
LABEL_24:
        v26 += (unint64_t)v19[5] << 40;
LABEL_25:
        v26 += (unint64_t)v19[4] << 32;
LABEL_26:
        v26 += (unint64_t)v19[3] << 24;
LABEL_27:
        v26 += (unint64_t)v19[2] << 16;
LABEL_28:
        unint64_t v131 = v26 + ((unint64_t)v19[1] << 8);
        break;
      default:
        break;
    }
    unsigned int v27 = v19[v12 - 1];
    if (!v27) {
      return -1;
    }
    unsigned int v25 = __clz(v27) - 8 * v12 + 41;
  }
  else
  {
    unint64_t v24 = *((void *)v23 - 1);
    uint64_t v133 = v23 - 8;
    unint64_t v131 = v24;
    if (!HIBYTE(v24)) {
      return -1;
    }
    unsigned int v25 = __clz(HIBYTE(v24)) - 23;
  }
  LODWORD(v132) = v25;
  if (!v13) {
    return -72;
  }
  unint64_t v28 = &v23[v13];
  int v130 = v23;
  if (v13 < 8)
  {
    unint64_t v31 = *v23;
    uint64_t v129 = v23;
    unint64_t v127 = v31;
    switch((int)v13)
    {
      case 2:
        goto LABEL_42;
      case 3:
        goto LABEL_41;
      case 4:
        goto LABEL_40;
      case 5:
        goto LABEL_39;
      case 6:
        goto LABEL_38;
      case 7:
        v31 |= (unint64_t)v23[6] << 48;
LABEL_38:
        v31 += (unint64_t)v23[5] << 40;
LABEL_39:
        v31 += (unint64_t)v23[4] << 32;
LABEL_40:
        v31 += (unint64_t)v23[3] << 24;
LABEL_41:
        v31 += (unint64_t)v23[2] << 16;
LABEL_42:
        unint64_t v127 = v31 + ((unint64_t)v23[1] << 8);
        break;
      default:
        break;
    }
    unsigned int v32 = v23[v13 - 1];
    if (v32)
    {
      unsigned int v30 = __clz(v32) - 8 * v13 + 41;
      goto LABEL_45;
    }
    return -1;
  }
  unint64_t v29 = *((void *)v28 - 1);
  uint64_t v129 = v28 - 8;
  unint64_t v127 = v29;
  if (!HIBYTE(v29)) {
    return -1;
  }
  unsigned int v30 = __clz(HIBYTE(v29)) - 23;
LABEL_45:
  LODWORD(v128) = v30;
  unint64_t result = sub_1DD2E3618((uint64_t)&v125, v28, v15);
  if (result > 0xFFFFFFFFFFFFFF88) {
    return result;
  }
  unint64_t v33 = (unint64_t)&a1[a2];
  unint64_t v117 = &a1[(unint64_t)(a2 + 3) >> 2];
  uint64_t v34 = &v117[((unint64_t)(a2 + 3) >> 2) + ((unint64_t)(a2 + 3) >> 2)];
  int v35 = sub_1DD2E4328((uint64_t)&v135);
  int v36 = sub_1DD2E4328((uint64_t)&v131) | v35;
  int v37 = sub_1DD2E4328((uint64_t)&v127);
  int v38 = sub_1DD2E4328((uint64_t)&v125);
  unint64_t v39 = v135;
  unint64_t v40 = v131;
  unint64_t v41 = v127;
  unint64_t v116 = (unint64_t)v34;
  if (v36 | v37 | v38 || (unint64_t v42 = v33 - 7, (unint64_t)v34 >= v33 - 7))
  {
    unint64_t v104 = (unint64_t)&a1[(unint64_t)(a2 + 3) >> 2];
    unint64_t v105 = (unint64_t)&v117[(unint64_t)(a2 + 3) >> 2];
    uint64_t v106 = (unsigned char *)v104;
    unint64_t v107 = (unsigned char *)v105;
    goto LABEL_110;
  }
  uint64_t v115 = &a1[a2];
  uint64_t v43 = v125;
  unint64_t v44 = (unint64_t)(a2 + 3) >> 2;
  int v45 = -v10 & 0x3F;
  unsigned int v46 = v136;
  unint64_t v48 = v137;
  int v47 = v138;
  unint64_t v124 = (unint64_t)(v138 + 4);
  unsigned int v49 = v133;
  int v119 = v134;
  unsigned int v120 = v138;
  unint64_t v123 = (unint64_t)(v134 + 8);
  unsigned int v51 = v129;
  BOOL v50 = v130;
  unint64_t v122 = (unint64_t)(v130 + 8);
  long long v118 = (uint64_t *)*((void *)&v126 + 1);
  unint64_t v52 = (uint64_t *)v126;
  unint64_t v121 = *((void *)&v126 + 1) + 8;
  unsigned int v53 = v132;
  unsigned int v54 = v128;
  unsigned int v55 = DWORD2(v125);
  unsigned int v56 = v130;
  do
  {
    long long v57 = a1;
    uint64_t v58 = &a1[3 * v44];
    char v59 = &v57[2 * v44];
    unint64_t v60 = &v57[v44];
    unint64_t v61 = (unsigned char *)(v9 + 2 * (v39 << v46 >> v45));
    unsigned int v62 = v46 + v61[1];
    *long long v57 = *v61;
    uint64_t v63 = (unsigned char *)(v9 + 2 * (v40 << v53 >> v45));
    unsigned int v64 = v53 + v63[1];
    *unint64_t v60 = *v63;
    uint64_t v65 = (unsigned char *)(v9 + 2 * (v41 << v54 >> v45));
    unsigned int v66 = v54 + v65[1];
    *char v59 = *v65;
    unsigned __int8 v67 = (unsigned char *)(v9 + 2 * ((unint64_t)(v43 << v55) >> v45));
    unsigned int v68 = v55 + v67[1];
    *uint64_t v58 = *v67;
    uint64_t v69 = (unsigned char *)(v9 + 2 * (v39 << v62 >> v45));
    unsigned int v70 = v62 + v69[1];
    v57[1] = *v69;
    unsigned int v71 = (unsigned char *)(v9 + 2 * (v40 << v64 >> v45));
    unsigned int v72 = v64 + v71[1];
    v60[1] = *v71;
    uint64_t v73 = (unsigned char *)(v9 + 2 * (v41 << v66 >> v45));
    unsigned int v74 = v66 + v73[1];
    v59[1] = *v73;
    unint64_t v75 = (unsigned char *)(v9 + 2 * ((unint64_t)(v43 << v68) >> v45));
    unsigned int v76 = v68 + v75[1];
    v58[1] = *v75;
    int v77 = (unsigned char *)(v9 + 2 * (v39 << v70 >> v45));
    unsigned int v78 = v70 + v77[1];
    v57[2] = *v77;
    char v79 = (unsigned char *)(v9 + 2 * (v40 << v72 >> v45));
    unsigned int v80 = v72 + v79[1];
    v60[2] = *v79;
    uint64_t v81 = (unsigned char *)(v9 + 2 * (v41 << v74 >> v45));
    unsigned int v82 = v74 + v81[1];
    v59[2] = *v81;
    uint64_t v83 = (unsigned char *)(v9 + 2 * ((unint64_t)(v43 << v76) >> v45));
    unsigned int v84 = v76 + v83[1];
    v58[2] = *v83;
    unint64_t v85 = (unsigned char *)(v9 + 2 * (v39 << v78 >> v45));
    unsigned int v46 = v78 + v85[1];
    v57[3] = *v85;
    uint64_t v86 = (char *)(v9 + 2 * (v40 << v80 >> v45));
    char v87 = *v86;
    int v88 = v86[1];
    v60[3] = v87;
    long long v89 = (char *)(v9 + 2 * (v41 << v82 >> v45));
    char v90 = *v89;
    int v91 = v89[1];
    v59[3] = v90;
    uint64_t v92 = (char *)(v9 + 2 * ((unint64_t)(v43 << v84) >> v45));
    char v93 = *v92;
    int v94 = v92[1];
    v58[3] = v93;
    if (v46 > 0x40)
    {
      int v95 = 3;
      goto LABEL_60;
    }
    if ((unint64_t)v48 >= v124)
    {
      int v95 = 0;
      unint64_t v48 = (unsigned __int16 *)((char *)v48 - (v46 >> 3));
      v46 &= 7u;
    }
    else
    {
      if (v48 == v47)
      {
        if (v46 < 0x40) {
          int v95 = 1;
        }
        else {
          int v95 = 2;
        }
        goto LABEL_59;
      }
      uint64_t v96 = v46 >> 3;
      int v95 = (unsigned __int16 *)((char *)v48 - v96) < v47;
      if ((unsigned __int16 *)((char *)v48 - v96) >= v47) {
        uint64_t v96 = v96;
      }
      else {
        uint64_t v96 = (v48 - v47);
      }
      unint64_t v48 = (unsigned __int16 *)((char *)v48 - v96);
      v46 -= 8 * v96;
    }
    unint64_t v39 = *(void *)v48;
LABEL_59:
    BOOL v50 = v56;
LABEL_60:
    unsigned int v53 = v80 + v88;
    if (v53 > 0x40)
    {
      int v97 = 3;
      goto LABEL_71;
    }
    if ((unint64_t)v49 >= v123)
    {
      int v97 = 0;
      v49 -= v53 >> 3;
      v53 &= 7u;
    }
    else
    {
      if (v49 == v119)
      {
        if (v53 < 0x40) {
          int v97 = 1;
        }
        else {
          int v97 = 2;
        }
        goto LABEL_70;
      }
      uint64_t v98 = v53 >> 3;
      int v97 = &v49[-v98] < v119;
      if (&v49[-v98] >= v119) {
        uint64_t v98 = v98;
      }
      else {
        uint64_t v98 = (v49 - v119);
      }
      int v47 = v120;
      v49 -= v98;
      v53 -= 8 * v98;
    }
    unint64_t v40 = *(void *)v49;
LABEL_70:
    BOOL v50 = v56;
LABEL_71:
    unsigned int v54 = v82 + v91;
    if (v54 > 0x40)
    {
      int v99 = 3;
      goto LABEL_81;
    }
    if ((unint64_t)v51 >= v122)
    {
      int v99 = 0;
      v51 -= v54 >> 3;
      v54 &= 7u;
LABEL_80:
      unint64_t v41 = *(void *)v51;
      goto LABEL_81;
    }
    if (v51 != v50)
    {
      uint64_t v100 = v54 >> 3;
      int v99 = &v51[-v100] < v56;
      if (&v51[-v100] >= v56) {
        uint64_t v100 = v100;
      }
      else {
        uint64_t v100 = (v51 - v56);
      }
      v51 -= v100;
      v54 -= 8 * v100;
      goto LABEL_80;
    }
    if (v54 < 0x40) {
      int v99 = 1;
    }
    else {
      int v99 = 2;
    }
LABEL_81:
    unsigned int v55 = v84 + v94;
    if (v55 > 0x40)
    {
      int v101 = 3;
      goto LABEL_91;
    }
    if ((unint64_t)v52 >= v121)
    {
      int v101 = 0;
      unint64_t v52 = (uint64_t *)((char *)v52 - (v55 >> 3));
      *(void *)&long long v126 = v52;
      v55 &= 7u;
LABEL_90:
      uint64_t v43 = *v52;
      *(void *)&long long v125 = *v52;
      goto LABEL_91;
    }
    if (v52 != v118)
    {
      uint64_t v102 = v55 >> 3;
      int v101 = (uint64_t *)((char *)v52 - v102) < v118;
      if ((uint64_t *)((char *)v52 - v102) >= v118) {
        uint64_t v102 = v102;
      }
      else {
        uint64_t v102 = (v52 - v118);
      }
      int v47 = v120;
      unint64_t v52 = (uint64_t *)((char *)v52 - v102);
      *(void *)&long long v126 = v52;
      v55 -= 8 * v102;
      goto LABEL_90;
    }
    if (v55 < 0x40) {
      int v101 = 1;
    }
    else {
      int v101 = 2;
    }
LABEL_91:
    if (v97 | v95 | v99 | v101) {
      break;
    }
    BOOL v50 = v56;
    unint64_t v103 = v58 + 4;
    a1 = v57 + 4;
  }
  while ((unint64_t)v103 < v42);
  a1 = v57 + 4;
  LODWORD(v136) = v46;
  LODWORD(v132) = v53;
  LODWORD(v128) = v54;
  DWORD2(v125) = v55;
  int v137 = v48;
  uint64_t v133 = v49;
  uint64_t v34 = &v57[3 * v44 + 4];
  unint64_t v107 = &v57[2 * v44 + 4];
  uint64_t v106 = &v57[v44 + 4];
  uint64_t v129 = v51;
  unint64_t v33 = (unint64_t)v115;
  unint64_t v104 = (unint64_t)v117;
  unint64_t v105 = (unint64_t)&v117[(unint64_t)(a2 + 3) >> 2];
LABEL_110:
  unint64_t v135 = v39;
  unint64_t v131 = v40;
  unint64_t result = -20;
  unint64_t v127 = v41;
  if ((unint64_t)a1 <= v104 && (unint64_t)v106 <= v105 && (unint64_t)v107 <= v116)
  {
    sub_1DD2E3720(a1, (uint64_t)&v135, v104, v9, v10);
    sub_1DD2E3720(v106, (uint64_t)&v131, v105, v9, v10);
    sub_1DD2E3720(v107, (uint64_t)&v127, v116, v9, v10);
    sub_1DD2E3720(v34, (uint64_t)&v125, v33, v9, v10);
    if (DWORD2(v125) == 64
      && (void)v126 == *((void *)&v126 + 1)
      && v128 == 64
      && v129 == v130
      && v132 == 64
      && v133 == v134
      && v136 == 64
      && v137 == v138)
    {
      return a2;
    }
    else
    {
      return -20;
    }
  }
  return result;
}

uint64_t sub_1DD2E4328(uint64_t a1)
{
  unint64_t v1 = *(unsigned int *)(a1 + 8);
  if (v1 > 0x40) {
    return 3;
  }
  unint64_t v4 = *(void *)(a1 + 16);
  unint64_t v3 = *(void *)(a1 + 24);
  if (v4 >= v3 + 8)
  {
    BOOL v2 = 0;
    uint64_t v9 = (void *)(v4 - (v1 >> 3));
    *(void *)(a1 + 16) = v9;
    int v10 = v1 & 7;
LABEL_10:
    *(_DWORD *)(a1 + 8) = v10;
    *(void *)a1 = *v9;
    return v2;
  }
  if (v4 != v3)
  {
    unint64_t v5 = v1 >> 3;
    unint64_t v6 = v4 - (v1 >> 3);
    unsigned int v7 = v4 - v3;
    BOOL v8 = v6 >= v3;
    BOOL v2 = v6 < v3;
    if (v8) {
      unint64_t v5 = v5;
    }
    else {
      unint64_t v5 = v7;
    }
    uint64_t v9 = (void *)(v4 - v5);
    *(void *)(a1 + 16) = v9;
    int v10 = v1 - 8 * v5;
    goto LABEL_10;
  }
  if (v1 < 0x40) {
    return 1;
  }
  else {
    return 2;
  }
}

unint64_t sub_1DD2E43B0()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  unint64_t v2 = v1;
  unint64_t v4 = v3;
  uint64_t v6 = v5;
  unsigned int v7 = (unsigned char *)v0;
  v10[1024] = *MEMORY[0x1E4F143B8];
  bzero(v10, 0x2000uLL);
  unsigned __int16 v9 = 12;
  unint64_t result = sub_1DD2E3168(&v9, v4, v2);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    if (v2 <= result) {
      return -72;
    }
    else {
      return sub_1DD2E3A08(v7, v6, (unsigned __int16 *)&v4[result], v2 - result, &v9);
    }
  }
  return result;
}

unint64_t sub_1DD2E4490(unsigned int *a1, char *a2, unint64_t a3)
{
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  memset(v91, 0, 68);
  uint64_t v90 = 0;
  memset(v89, 0, sizeof(v89));
  unint64_t v3 = a1 + 1;
  unsigned int v4 = *a1;
  if (*a1 > 0x10) {
    return -44;
  }
  uint64_t v56 = 0;
  unint64_t result = sub_1DD2E32A8(v92, (uint64_t)v91, &v56, (_DWORD *)&v56 + 1, a2, a3);
  if (result > 0xFFFFFFFFFFFFFF88) {
    return result;
  }
  int v7 = HIDWORD(v56);
  char v8 = v4 - BYTE4(v56);
  if (v4 < HIDWORD(v56)) {
    return -44;
  }
  int v9 = 0;
  do
    unint64_t v10 = (HIDWORD(v56) + v9--);
  while (!v91[v10]);
  int v11 = HIDWORD(v56) + v9;
  if (HIDWORD(v56) + v9 == -1)
  {
    int v14 = 0;
  }
  else
  {
    unint64_t v12 = 0;
    int v13 = 0;
    do
    {
      int v14 = v91[v12 + 1] + v13;
      v89[v12++ + 2] = v13;
      int v13 = v14;
    }
    while (v12 < v10);
  }
  v89[1] = v14;
  uint64_t v15 = v56;
  if (v56)
  {
    uint64_t v16 = 0;
    do
    {
      uint64_t v17 = *((unsigned __int8 *)v92 + v16);
      uint64_t v18 = v89[v17 + 1];
      v89[v17 + 1] = v18 + 1;
      uint64_t v19 = (char *)&v91[20] + 2 * v18;
      *uint64_t v19 = v16;
      v19[1] = v17;
      ++v16;
    }
    while (v15 != v16);
  }
  long long v87 = 0u;
  long long v88 = 0u;
  long long v85 = 0u;
  long long v86 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  long long v79 = 0u;
  long long v80 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  unsigned int v20 = -v9;
  v89[1] = 0;
  if (v11 != -1)
  {
    unint64_t v21 = 0;
    int v22 = 0;
    do
    {
      int v23 = v91[v21 + 1] << (v8 + v21);
      *((_DWORD *)&v57 + v21 + 1) = v22;
      v22 += v23;
      ++v21;
    }
    while (v21 < v10);
  }
  if (v20 <= v4 + v9)
  {
    unsigned int v24 = -v9;
    do
    {
      if (v11 != -1)
      {
        unint64_t v25 = 0;
        do
        {
          *((_DWORD *)&v57 + 17 * v24 + v25 + 1) = *((_DWORD *)&v57 + v25 + 1) >> v24;
          ++v25;
        }
        while (v25 < v10);
      }
      ++v24;
    }
    while (v24 <= v4 + v9);
  }
  v93[1] = v58;
  v93[2] = v59;
  v93[3] = v60;
  int v94 = v61;
  v93[0] = v57;
  if (v14)
  {
    uint64_t v26 = 0;
    int v27 = v7 + 1;
    int v28 = v27 - v4;
    unsigned int v55 = a1 + 1;
    do
    {
      unint64_t v29 = (unsigned __int8 *)&v91[20] + 2 * v26;
      int v30 = *v29;
      uint64_t v31 = v29[1];
      unsigned int v32 = v27 - v31;
      uint64_t v33 = *((unsigned int *)v93 + v31);
      unsigned int v34 = v4 - (v27 - v31);
      int v35 = 1 << (v4 - (v27 - v31));
      if (v34 >= v20)
      {
        unint64_t v39 = (char *)&v57 + 68 * v32;
        long long v40 = *(_OWORD *)v39;
        v95[1] = *((_OWORD *)v39 + 1);
        long long v41 = *((_OWORD *)v39 + 3);
        v95[2] = *((_OWORD *)v39 + 2);
        LODWORD(v42) = v28 + v32;
        if ((int)(v28 + v32) <= 1) {
          uint64_t v42 = 1;
        }
        else {
          uint64_t v42 = v42;
        }
        uint64_t v43 = v89[v42];
        v95[3] = v41;
        int v96 = *((_DWORD *)v39 + 16);
        v95[0] = v40;
        if (v42 >= 2)
        {
          uint64_t v44 = *((unsigned int *)v95 + v42);
          if (v44)
          {
            int v45 = &v3[v33];
            do
            {
              *v45++ = v30 & 0xFF00FFFF | ((v27 - v31) << 16) | 0x1000000;
              --v44;
            }
            while (v44);
          }
        }
        if (v14 != v43)
        {
          uint64_t v46 = 0;
          int v47 = (char *)&v91[20] + 2 * v43;
          uint64_t v48 = (v14 - v43);
          do
          {
            unsigned int v49 = &v47[2 * v46];
            int v50 = *v49;
            uint64_t v51 = v49[1];
            unsigned int v52 = *((_DWORD *)v95 + v51);
            unsigned int v53 = (1 << (v34 - (v27 - v51))) + v52;
            unsigned int v54 = (v50 << 8) & 0xFF00FFFF | ((v27 - v51 + v32) << 16) | v30 | 0x2000000;
            do
              v3[v33 + v52++] = v54;
            while (v52 < v53);
            *((_DWORD *)v95 + v51) = v53;
            ++v46;
          }
          while (v46 != v48);
        }
        LODWORD(v36) = v35 + v33;
      }
      else
      {
        uint64_t v36 = (v35 + v33);
        if (v33 < v36)
        {
          uint64_t v37 = v36 - v33;
          int v38 = &v55[v33];
          do
          {
            *v38++ = v30 & 0xFF00FFFF | ((v27 - v31) << 16) | 0x1000000;
            --v37;
          }
          while (v37);
        }
      }
      *((_DWORD *)v93 + v31) = v36;
      ++v26;
    }
    while (v26 != v14);
  }
  return result;
}

uint64_t sub_1DD2E4898(_WORD *a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4, int *a5)
{
  if (!a4) {
    return -72;
  }
  int v7 = *a5;
  unint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = a3;
  if (a4 >= 8)
  {
    unint64_t v8 = *(void *)&a3[a4 - 8];
    uint64_t v14 = (uint64_t)&a3[a4 - 8];
    unint64_t v12 = v8;
    if (HIBYTE(v8))
    {
      LODWORD(v13) = __clz(HIBYTE(v8)) - 23;
      if (a4 > 0xFFFFFFFFFFFFFF88) {
        return a4;
      }
      goto LABEL_16;
    }
    return -1;
  }
  unint64_t v9 = *a3;
  uint64_t v14 = (uint64_t)a3;
  unint64_t v12 = v9;
  switch(a4)
  {
    case 2uLL:
      goto LABEL_13;
    case 3uLL:
      goto LABEL_12;
    case 4uLL:
      goto LABEL_11;
    case 5uLL:
      goto LABEL_10;
    case 6uLL:
      goto LABEL_9;
    case 7uLL:
      v9 |= (unint64_t)a3[6] << 48;
LABEL_9:
      v9 += (unint64_t)a3[5] << 40;
LABEL_10:
      v9 += (unint64_t)a3[4] << 32;
LABEL_11:
      v9 += (unint64_t)a3[3] << 24;
LABEL_12:
      v9 += (unint64_t)a3[2] << 16;
LABEL_13:
      unint64_t v12 = v9 + ((unint64_t)a3[1] << 8);
      break;
    default:
      break;
  }
  if (!a3[a4 - 1]) {
    return -1;
  }
  LODWORD(v13) = __clz(a3[a4 - 1]) - 8 * a4 + 41;
LABEL_16:
  sub_1DD2E49EC(a1, (uint64_t)&v12, (unint64_t)a1 + a2, (uint64_t)(a5 + 1), v7);
  if (v13 == 64 && v14 == (void)v15) {
    return a2;
  }
  else {
    return -20;
  }
}

_WORD *sub_1DD2E49EC(_WORD *result, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v5 = -a5 & 0x3F;
  for (i = *(_DWORD *)(a2 + 8); i <= 0x40; unint64_t result = (_WORD *)((char *)v23 + *(unsigned __int8 *)(v24 + 3)))
  {
    unint64_t v8 = *(void *)(a2 + 16);
    unint64_t v7 = *(void *)(a2 + 24);
    if (v8 >= v7 + 8)
    {
      BOOL v12 = 0;
      uint64_t v13 = (uint64_t *)(v8 - (i >> 3));
      *(void *)(a2 + 16) = v13;
      i &= 7u;
    }
    else
    {
      if (v8 == v7) {
        break;
      }
      uint64_t v9 = i >> 3;
      unsigned int v10 = v8 - v7;
      BOOL v11 = v8 - v9 >= v7;
      BOOL v12 = v8 - v9 < v7;
      if (v11) {
        uint64_t v9 = v9;
      }
      else {
        uint64_t v9 = v10;
      }
      uint64_t v13 = (uint64_t *)(v8 - v9);
      *(void *)(a2 + 16) = v13;
      i -= 8 * v9;
    }
    *(_DWORD *)(a2 + 8) = i;
    uint64_t v14 = *v13;
    *(void *)a2 = v14;
    if (v12) {
      break;
    }
    if ((unint64_t)result >= a3 - 7) {
      break;
    }
    uint64_t v15 = a4 + 4 * ((unint64_t)(v14 << i) >> v5);
    *unint64_t result = *(_WORD *)v15;
    int v16 = *(_DWORD *)(a2 + 8) + *(unsigned __int8 *)(v15 + 2);
    *(_DWORD *)(a2 + 8) = v16;
    uint64_t v17 = (_WORD *)((char *)result + *(unsigned __int8 *)(v15 + 3));
    uint64_t v18 = a4 + 4 * (*(void *)a2 << v16 >> v5);
    *uint64_t v17 = *(_WORD *)v18;
    int v19 = *(_DWORD *)(a2 + 8) + *(unsigned __int8 *)(v18 + 2);
    *(_DWORD *)(a2 + 8) = v19;
    unsigned int v20 = (_WORD *)((char *)v17 + *(unsigned __int8 *)(v18 + 3));
    uint64_t v21 = a4 + 4 * (*(void *)a2 << v19 >> v5);
    *unsigned int v20 = *(_WORD *)v21;
    int v22 = *(_DWORD *)(a2 + 8) + *(unsigned __int8 *)(v21 + 2);
    *(_DWORD *)(a2 + 8) = v22;
    int v23 = (_WORD *)((char *)v20 + *(unsigned __int8 *)(v21 + 3));
    uint64_t v24 = a4 + 4 * (*(void *)a2 << v22 >> v5);
    *int v23 = *(_WORD *)v24;
    unsigned int i = *(_DWORD *)(a2 + 8) + *(unsigned __int8 *)(v24 + 2);
    *(_DWORD *)(a2 + 8) = i;
  }
  unint64_t v25 = a3 - 2;
  while (i <= 0x40)
  {
    unint64_t v27 = *(void *)(a2 + 16);
    unint64_t v26 = *(void *)(a2 + 24);
    if (v27 >= v26 + 8)
    {
      BOOL v30 = 0;
      uint64_t v31 = (uint64_t *)(v27 - (i >> 3));
      *(void *)(a2 + 16) = v31;
      i &= 7u;
    }
    else
    {
      if (v27 == v26) {
        break;
      }
      uint64_t v28 = i >> 3;
      unsigned int v29 = v27 - v26;
      BOOL v11 = v27 - v28 >= v26;
      BOOL v30 = v27 - v28 < v26;
      uint64_t v28 = v11 ? v28 : v29;
      uint64_t v31 = (uint64_t *)(v27 - v28);
      *(void *)(a2 + 16) = v31;
      i -= 8 * v28;
    }
    *(_DWORD *)(a2 + 8) = i;
    uint64_t v32 = *v31;
    *(void *)a2 = v32;
    if (v30 || (unint64_t)result > v25) {
      break;
    }
    uint64_t v33 = a4 + 4 * ((unint64_t)(v32 << i) >> v5);
    *unint64_t result = *(_WORD *)v33;
    unsigned int i = *(_DWORD *)(a2 + 8) + *(unsigned __int8 *)(v33 + 2);
    *(_DWORD *)(a2 + 8) = i;
    unint64_t result = (_WORD *)((char *)result + *(unsigned __int8 *)(v33 + 3));
  }
  while ((unint64_t)result <= v25)
  {
    uint64_t v34 = a4 + 4 * (*(void *)a2 << i >> v5);
    *unint64_t result = *(_WORD *)v34;
    unsigned int i = *(_DWORD *)(a2 + 8) + *(unsigned __int8 *)(v34 + 2);
    *(_DWORD *)(a2 + 8) = i;
    unint64_t result = (_WORD *)((char *)result + *(unsigned __int8 *)(v34 + 3));
  }
  if ((unint64_t)result < a3)
  {
    uint64_t v35 = *(void *)a2 << i >> v5;
    uint64_t v36 = (unsigned char *)(a4 + 4 * v35);
    *(unsigned char *)unint64_t result = *v36;
    if (v36[3] == 1)
    {
      unsigned int v37 = *(_DWORD *)(a2 + 8) + v36[2];
    }
    else
    {
      unsigned int v38 = *(_DWORD *)(a2 + 8);
      if (v38 > 0x3F) {
        return result;
      }
      unsigned int v37 = v38 + *(unsigned __int8 *)(a4 + 4 * v35 + 2);
      if (v37 >= 0x40) {
        unsigned int v37 = 64;
      }
    }
    *(_DWORD *)(a2 + 8) = v37;
  }
  return result;
}

unint64_t sub_1DD2E4C84(_WORD *a1, uint64_t a2, unsigned __int16 *a3, unint64_t a4, int *a5)
{
  if (a4 < 0xA) {
    return -20;
  }
  uint64_t v150 = v5;
  uint64_t v151 = v6;
  uint64_t v9 = (uint64_t)(a5 + 1);
  int v10 = *a5;
  unint64_t v146 = 0;
  uint64_t v147 = 0;
  int v148 = 0;
  unint64_t v142 = 0;
  uint64_t v143 = 0;
  unint64_t v144 = 0;
  unint64_t v138 = 0;
  uint64_t v139 = 0;
  uint64_t v140 = 0;
  long long v136 = 0u;
  long long v137 = 0u;
  uint64_t v11 = *a3;
  uint64_t v12 = a3[1];
  uint64_t v13 = a3[2];
  unint64_t v14 = v11 + v12 + v13 + 6;
  unint64_t v15 = a4 - v14;
  if (a4 < v14) {
    return -20;
  }
  if (!v11) {
    return -72;
  }
  uint64_t v18 = (unsigned __int8 *)(a3 + 3);
  int v19 = (unsigned __int8 *)a3 + v11 + 6;
  unint64_t v149 = a3 + 3;
  if (v11 < 8)
  {
    unint64_t v22 = *v18;
    int v148 = a3 + 3;
    unint64_t v146 = v22;
    switch((int)v11)
    {
      case 2:
        goto LABEL_15;
      case 3:
        goto LABEL_14;
      case 4:
        goto LABEL_13;
      case 5:
        goto LABEL_12;
      case 6:
        goto LABEL_11;
      case 7:
        v22 |= (unint64_t)*((unsigned __int8 *)a3 + 12) << 48;
LABEL_11:
        v22 += (unint64_t)*((unsigned __int8 *)a3 + 11) << 40;
LABEL_12:
        v22 += (unint64_t)*((unsigned __int8 *)a3 + 10) << 32;
LABEL_13:
        v22 += (unint64_t)*((unsigned __int8 *)a3 + 9) << 24;
LABEL_14:
        v22 += (unint64_t)*((unsigned __int8 *)a3 + 8) << 16;
LABEL_15:
        unint64_t v146 = v22 + ((unint64_t)*((unsigned __int8 *)a3 + 7) << 8);
        break;
      default:
        break;
    }
    if (!v18[v11 - 1]) {
      return -1;
    }
    unsigned int v21 = __clz(v18[v11 - 1]) - 8 * v11 + 41;
  }
  else
  {
    unint64_t v20 = *((void *)v19 - 1);
    int v148 = (unsigned __int16 *)(v19 - 8);
    unint64_t v146 = v20;
    if (!HIBYTE(v20)) {
      return -1;
    }
    unsigned int v21 = __clz(HIBYTE(v20)) - 23;
  }
  LODWORD(v147) = v21;
  if (!v12) {
    return -72;
  }
  int v23 = &v19[v12];
  int v145 = v19;
  if (v12 < 8)
  {
    unint64_t v26 = *v19;
    unint64_t v144 = v19;
    unint64_t v142 = v26;
    switch((int)v12)
    {
      case 2:
        goto LABEL_28;
      case 3:
        goto LABEL_27;
      case 4:
        goto LABEL_26;
      case 5:
        goto LABEL_25;
      case 6:
        goto LABEL_24;
      case 7:
        v26 |= (unint64_t)v19[6] << 48;
LABEL_24:
        v26 += (unint64_t)v19[5] << 40;
LABEL_25:
        v26 += (unint64_t)v19[4] << 32;
LABEL_26:
        v26 += (unint64_t)v19[3] << 24;
LABEL_27:
        v26 += (unint64_t)v19[2] << 16;
LABEL_28:
        unint64_t v142 = v26 + ((unint64_t)v19[1] << 8);
        break;
      default:
        break;
    }
    unsigned int v27 = v19[v12 - 1];
    if (!v27) {
      return -1;
    }
    unsigned int v25 = __clz(v27) - 8 * v12 + 41;
  }
  else
  {
    unint64_t v24 = *((void *)v23 - 1);
    unint64_t v144 = v23 - 8;
    unint64_t v142 = v24;
    if (!HIBYTE(v24)) {
      return -1;
    }
    unsigned int v25 = __clz(HIBYTE(v24)) - 23;
  }
  LODWORD(v143) = v25;
  if (!v13) {
    return -72;
  }
  uint64_t v28 = &v23[v13];
  long long v141 = v23;
  if (v13 < 8)
  {
    unint64_t v31 = *v23;
    uint64_t v140 = v23;
    unint64_t v138 = v31;
    switch((int)v13)
    {
      case 2:
        goto LABEL_42;
      case 3:
        goto LABEL_41;
      case 4:
        goto LABEL_40;
      case 5:
        goto LABEL_39;
      case 6:
        goto LABEL_38;
      case 7:
        v31 |= (unint64_t)v23[6] << 48;
LABEL_38:
        v31 += (unint64_t)v23[5] << 40;
LABEL_39:
        v31 += (unint64_t)v23[4] << 32;
LABEL_40:
        v31 += (unint64_t)v23[3] << 24;
LABEL_41:
        v31 += (unint64_t)v23[2] << 16;
LABEL_42:
        unint64_t v138 = v31 + ((unint64_t)v23[1] << 8);
        break;
      default:
        break;
    }
    unsigned int v32 = v23[v13 - 1];
    if (v32)
    {
      unsigned int v30 = __clz(v32) - 8 * v13 + 41;
      goto LABEL_45;
    }
    return -1;
  }
  unint64_t v29 = *((void *)v28 - 1);
  uint64_t v140 = v28 - 8;
  unint64_t v138 = v29;
  if (!HIBYTE(v29)) {
    return -1;
  }
  unsigned int v30 = __clz(HIBYTE(v29)) - 23;
LABEL_45:
  LODWORD(v139) = v30;
  unint64_t result = sub_1DD2E3618((uint64_t)&v136, v28, v15);
  if (result > 0xFFFFFFFFFFFFFF88) {
    return result;
  }
  unint64_t v33 = (unint64_t)a1 + a2;
  unint64_t v124 = (char *)a1 + ((unint64_t)(a2 + 3) >> 2);
  long long v125 = &v124[(unint64_t)(a2 + 3) >> 2];
  unint64_t v34 = (unint64_t)&v125[(unint64_t)(a2 + 3) >> 2];
  int v35 = sub_1DD2E4328((uint64_t)&v146);
  int v36 = sub_1DD2E4328((uint64_t)&v142) | v35;
  int v37 = sub_1DD2E4328((uint64_t)&v138);
  int v38 = sub_1DD2E4328((uint64_t)&v136);
  unint64_t v39 = v146;
  unint64_t v40 = v142;
  unint64_t v41 = v138;
  if (v36 | v37 | v38 || (unint64_t v134 = v33 - 7, v34 >= v33 - 7))
  {
    unint64_t v114 = (unint64_t)a1 + ((unint64_t)(a2 + 3) >> 2);
    unint64_t v115 = (unint64_t)&v124[(unint64_t)(a2 + 3) >> 2];
    unsigned int v52 = (_WORD *)v114;
    unsigned int v53 = (char *)v115;
    uint64_t v51 = &v125[(unint64_t)(a2 + 3) >> 2];
    goto LABEL_108;
  }
  unint64_t v123 = (char *)a1 + a2;
  uint64_t v42 = v136;
  int v43 = -v10 & 0x3F;
  unsigned int v44 = v147;
  unsigned int v45 = v143;
  uint64_t v133 = v148;
  uint64_t v128 = v149;
  uint64_t v132 = v149 + 4;
  uint64_t v46 = v144;
  unint64_t v127 = v145;
  unint64_t v131 = v145 + 8;
  int v47 = v140;
  long long v126 = v141;
  int v130 = v141 + 8;
  unsigned int v49 = (void *)*((void *)&v137 + 1);
  uint64_t v48 = (void *)v137;
  unint64_t v129 = *((void *)&v137 + 1) + 8;
  unsigned int v50 = v139;
  uint64_t v51 = &v125[(unint64_t)(a2 + 3) >> 2];
  unsigned int v52 = (_WORD *)((char *)a1 + ((unint64_t)(a2 + 3) >> 2));
  unsigned int v53 = &v124[(unint64_t)(a2 + 3) >> 2];
  unsigned int v54 = DWORD2(v136);
  do
  {
    unint64_t v135 = v48;
    uint64_t v55 = v9 + 4 * (v39 << v44 >> v43);
    *a1 = *(_WORD *)v55;
    unsigned int v56 = v44 + *(unsigned __int8 *)(v55 + 2);
    long long v57 = (_WORD *)((char *)a1 + *(unsigned __int8 *)(v55 + 3));
    uint64_t v58 = v9 + 4 * (v40 << v45 >> v43);
    *unsigned int v52 = *(_WORD *)v58;
    unsigned int v59 = v45 + *(unsigned __int8 *)(v58 + 2);
    long long v60 = (_WORD *)((char *)v52 + *(unsigned __int8 *)(v58 + 3));
    uint64_t v61 = v9 + 4 * (v41 << v50 >> v43);
    *(_WORD *)unsigned int v53 = *(_WORD *)v61;
    unsigned int v62 = v50 + *(unsigned __int8 *)(v61 + 2);
    long long v63 = &v53[*(unsigned __int8 *)(v61 + 3)];
    uint64_t v64 = v9 + 4 * ((unint64_t)(v42 << v54) >> v43);
    *(_WORD *)uint64_t v51 = *(_WORD *)v64;
    unsigned int v65 = v54 + *(unsigned __int8 *)(v64 + 2);
    long long v66 = &v51[*(unsigned __int8 *)(v64 + 3)];
    uint64_t v67 = v9 + 4 * (v39 << v56 >> v43);
    *long long v57 = *(_WORD *)v67;
    unsigned int v68 = v56 + *(unsigned __int8 *)(v67 + 2);
    uint64_t v69 = *(unsigned __int8 *)(v67 + 3);
    uint64_t v70 = v9 + 4 * (v40 << v59 >> v43);
    *long long v60 = *(_WORD *)v70;
    unsigned int v71 = v59 + *(unsigned __int8 *)(v70 + 2);
    long long v72 = (_WORD *)((char *)v60 + *(unsigned __int8 *)(v70 + 3));
    uint64_t v73 = v9 + 4 * (v41 << v62 >> v43);
    *(_WORD *)long long v63 = *(_WORD *)v73;
    unsigned int v74 = v62 + *(unsigned __int8 *)(v73 + 2);
    long long v75 = &v63[*(unsigned __int8 *)(v73 + 3)];
    uint64_t v76 = v9 + 4 * ((unint64_t)(v42 << v65) >> v43);
    *(_WORD *)long long v66 = *(_WORD *)v76;
    unsigned int v77 = v65 + *(unsigned __int8 *)(v76 + 2);
    long long v78 = &v66[*(unsigned __int8 *)(v76 + 3)];
    long long v79 = (_WORD *)((char *)v57 + v69);
    uint64_t v80 = v9 + 4 * (v39 << v68 >> v43);
    *long long v79 = *(_WORD *)v80;
    unsigned int v81 = v68 + *(unsigned __int8 *)(v80 + 2);
    long long v82 = (_WORD *)((char *)v79 + *(unsigned __int8 *)(v80 + 3));
    uint64_t v83 = v9 + 4 * (v40 << v71 >> v43);
    *long long v72 = *(_WORD *)v83;
    unsigned int v84 = v71 + *(unsigned __int8 *)(v83 + 2);
    long long v85 = (_WORD *)((char *)v72 + *(unsigned __int8 *)(v83 + 3));
    uint64_t v86 = v9 + 4 * (v41 << v74 >> v43);
    *(_WORD *)long long v75 = *(_WORD *)v86;
    unsigned int v87 = v74 + *(unsigned __int8 *)(v86 + 2);
    long long v88 = &v75[*(unsigned __int8 *)(v86 + 3)];
    uint64_t v89 = v9 + 4 * ((unint64_t)(v42 << v77) >> v43);
    *(_WORD *)long long v78 = *(_WORD *)v89;
    unsigned int v90 = v77 + *(unsigned __int8 *)(v89 + 2);
    int v91 = &v78[*(unsigned __int8 *)(v89 + 3)];
    uint64_t v92 = v9 + 4 * (v39 << v81 >> v43);
    *long long v82 = *(_WORD *)v92;
    unsigned int v44 = v81 + *(unsigned __int8 *)(v92 + 2);
    uint64_t v93 = *(unsigned __int8 *)(v92 + 3);
    uint64_t v94 = v9 + 4 * (v40 << v84 >> v43);
    *long long v85 = *(_WORD *)v94;
    int v95 = *(unsigned __int8 *)(v94 + 2);
    uint64_t v96 = *(unsigned __int8 *)(v94 + 3);
    uint64_t v97 = v9 + 4 * (v41 << v87 >> v43);
    *(_WORD *)long long v88 = *(_WORD *)v97;
    int v98 = *(unsigned __int8 *)(v97 + 2);
    uint64_t v99 = *(unsigned __int8 *)(v97 + 3);
    uint64_t v100 = v9 + 4 * ((unint64_t)(v42 << v90) >> v43);
    *(_WORD *)int v91 = *(_WORD *)v100;
    if (v44 > 0x40)
    {
      int v101 = 3;
      goto LABEL_59;
    }
    if (v133 >= v132)
    {
      int v101 = 0;
      unint64_t v103 = (unsigned __int16 *)((char *)v133 - (v44 >> 3));
      v44 &= 7u;
LABEL_58:
      uint64_t v133 = v103;
      unint64_t v39 = *(void *)v103;
      goto LABEL_59;
    }
    if (v133 != v128)
    {
      uint64_t v102 = v44 >> 3;
      int v101 = (unsigned __int16 *)((char *)v133 - v102) < v128;
      if ((unsigned __int16 *)((char *)v133 - v102) >= v128) {
        uint64_t v102 = v102;
      }
      else {
        uint64_t v102 = (v133 - v128);
      }
      unint64_t v103 = (unsigned __int16 *)((char *)v133 - v102);
      v44 -= 8 * v102;
      goto LABEL_58;
    }
    if (v44 < 0x40) {
      int v101 = 1;
    }
    else {
      int v101 = 2;
    }
LABEL_59:
    unsigned int v45 = v84 + v95;
    int v104 = *(unsigned __int8 *)(v100 + 2);
    uint64_t v105 = *(unsigned __int8 *)(v100 + 3);
    if (v45 > 0x40)
    {
      int v106 = 3;
      unint64_t v107 = v46;
      goto LABEL_69;
    }
    unint64_t v107 = v46;
    if (v46 >= v131)
    {
      int v106 = 0;
      unint64_t v107 = &v46[-(v45 >> 3)];
      v45 &= 7u;
LABEL_68:
      unint64_t v40 = *(void *)v107;
      goto LABEL_69;
    }
    if (v46 != v127)
    {
      uint64_t v108 = v45 >> 3;
      int v106 = &v46[-v108] < v127;
      if (&v46[-v108] >= v127) {
        uint64_t v108 = v108;
      }
      else {
        uint64_t v108 = (v46 - v127);
      }
      unint64_t v107 = &v46[-v108];
      v45 -= 8 * v108;
      goto LABEL_68;
    }
    if (v45 < 0x40) {
      int v106 = 1;
    }
    else {
      int v106 = 2;
    }
LABEL_69:
    unsigned int v50 = v87 + v98;
    uint64_t v46 = v107;
    if (v50 > 0x40)
    {
      int v109 = 3;
      unint64_t v110 = v47;
      goto LABEL_79;
    }
    unint64_t v110 = v47;
    if (v47 >= v130)
    {
      int v109 = 0;
      unint64_t v110 = &v47[-(v50 >> 3)];
      v50 &= 7u;
LABEL_78:
      unint64_t v41 = *(void *)v110;
      goto LABEL_79;
    }
    if (v47 != v126)
    {
      uint64_t v111 = v50 >> 3;
      int v109 = &v47[-v111] < v126;
      if (&v47[-v111] >= v126) {
        uint64_t v111 = v111;
      }
      else {
        uint64_t v111 = (v47 - v126);
      }
      unint64_t v110 = &v47[-v111];
      v50 -= 8 * v111;
      goto LABEL_78;
    }
    if (v50 < 0x40) {
      int v109 = 1;
    }
    else {
      int v109 = 2;
    }
LABEL_79:
    unsigned int v54 = v90 + v104;
    if (v54 > 0x40)
    {
      int v47 = v110;
      int v112 = 3;
      uint64_t v48 = v135;
      goto LABEL_89;
    }
    uint64_t v48 = v135;
    int v47 = v110;
    if ((unint64_t)v135 >= v129)
    {
      int v112 = 0;
      uint64_t v48 = (void *)((char *)v135 - (v54 >> 3));
      *(void *)&long long v137 = v48;
      v54 &= 7u;
LABEL_88:
      uint64_t v42 = *v48;
      *(void *)&long long v136 = *v48;
      goto LABEL_89;
    }
    if (v135 != v49)
    {
      uint64_t v113 = v54 >> 3;
      int v112 = (void *)((char *)v135 - v113) < v49;
      if ((void *)((char *)v135 - v113) >= v49) {
        uint64_t v113 = v113;
      }
      else {
        uint64_t v113 = (v135 - v49);
      }
      uint64_t v48 = (void *)((char *)v135 - v113);
      *(void *)&long long v137 = (char *)v135 - v113;
      v54 -= 8 * v113;
      goto LABEL_88;
    }
    if (v54 < 0x40) {
      int v112 = 1;
    }
    else {
      int v112 = 2;
    }
LABEL_89:
    a1 = (_WORD *)((char *)v82 + v93);
    unsigned int v52 = (_WORD *)((char *)v85 + v96);
    unsigned int v53 = &v88[v99];
    uint64_t v51 = &v91[v105];
  }
  while (!(v106 | v101 | v109 | v112) && (unint64_t)v51 < v134);
  LODWORD(v147) = v44;
  LODWORD(v143) = v45;
  LODWORD(v139) = v50;
  DWORD2(v136) = v54;
  int v148 = v133;
  unint64_t v144 = v46;
  uint64_t v140 = v47;
  unint64_t v34 = (unint64_t)&v125[(unint64_t)(a2 + 3) >> 2];
  unint64_t v33 = (unint64_t)v123;
  unint64_t v114 = (unint64_t)v124;
  unint64_t v115 = (unint64_t)&v124[(unint64_t)(a2 + 3) >> 2];
LABEL_108:
  unint64_t v146 = v39;
  unint64_t v142 = v40;
  unint64_t result = -20;
  unint64_t v138 = v41;
  if ((unint64_t)a1 <= v114 && (unint64_t)v52 <= v115 && (unint64_t)v53 <= v34)
  {
    sub_1DD2E49EC(a1, (uint64_t)&v146, v114, v9, v10);
    sub_1DD2E49EC(v52, (uint64_t)&v142, v115, v9, v10);
    sub_1DD2E49EC(v53, (uint64_t)&v138, v34, v9, v10);
    sub_1DD2E49EC(v51, (uint64_t)&v136, v33, v9, v10);
    if (DWORD2(v136) == 64
      && (void)v137 == *((void *)&v137 + 1)
      && v139 == 64
      && v140 == v141
      && v143 == 64
      && v144 == v145
      && v147 == 64
      && v148 == v149)
    {
      return a2;
    }
    else
    {
      return -20;
    }
  }
  return result;
}

unint64_t sub_1DD2E5634()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  unint64_t v2 = v1;
  unsigned int v4 = v3;
  uint64_t v6 = v5;
  unint64_t v7 = (_WORD *)v0;
  v10[2048] = *MEMORY[0x1E4F143B8];
  bzero(v10, 0x4000uLL);
  int v9 = 12;
  unint64_t result = sub_1DD2E4490((unsigned int *)&v9, v4, v2);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    if (v2 <= result) {
      return -72;
    }
    else {
      return sub_1DD2E4C84(v7, v6, (unsigned __int16 *)&v4[result], v2 - result, &v9);
    }
  }
  return result;
}

size_t sub_1DD2E5714(void *a1, size_t __len, unsigned __int8 *a3, size_t a4)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (!__len) {
    return -70;
  }
  size_t v4 = __len;
  if (a4 >= __len) {
    return -20;
  }
  if (a4 == 1)
  {
    memset(a1, *a3, __len);
    return v4;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  do
  {
    unint64_t v8 = (char *)&unk_1DD323AF8 + 24 * (16 * a4 / __len);
    *(unsigned int *)((char *)&v10 + v6) = *(_DWORD *)&v8[8 * v7] + *(_DWORD *)&v8[8 * v7 + 4] * (__len >> 8);
    ++v7;
    v6 += 4;
  }
  while (v6 != 12);
  int v9 = off_1F3877B98[v11 + (v11 >> 4) < v10];
  return v9();
}

double sub_1DD2E5840()
{
  uint64_t v0 = malloc(0x26898uLL);
  if (v0)
  {
    v0[3334] = 5;
    double result = 0.0;
    *((_OWORD *)v0 + 1665) = 0u;
    *((_OWORD *)v0 + 1666) = 0u;
    *((_DWORD *)v0 + 2563) = 12;
    *(void *)((char *)v0 + 26732) = 0;
  }
  return result;
}

uint64_t sub_1DD2E5888(void *a1)
{
  return 0;
}

uint64_t sub_1DD2E58A4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 < 5) {
    return 5;
  }
  if (*(_DWORD *)a2 != -47205083) {
    return -10;
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 8) = (*(unsigned char *)(a2 + 4) & 0xF) + 11;
  if (*(unsigned __int8 *)(a2 + 4) >= 0x10u) {
    return -14;
  }
  else {
    return 0;
  }
}

uint64_t sub_1DD2E5900(unsigned __int16 *a1, char *a2, uint64_t a3, unsigned __int8 *a4, unint64_t a5)
{
  uint64_t v188 = *MEMORY[0x1E4F143B8];
  if (a5 >> 17) {
    return -72;
  }
  if (a5 < 3) {
    return -20;
  }
  int v9 = (int *)(a1 + 13368);
  unsigned int v10 = a1 + 2053;
  unsigned int v11 = *a4;
  switch(v11 >> 6)
  {
    case 1u:
      if ((v11 & 0x30) != 0x10) {
        return -20;
      }
      if (*v9)
      {
        unsigned __int8 v27 = a4[1];
        unint64_t v28 = a4[2] | ((v27 & 3) << 8);
        unint64_t v19 = v28 + 3;
        if (v28 + 3 > a5) {
          return -20;
        }
        unint64_t v29 = ((unint64_t)(v11 & 0xF) << 6) | (v27 >> 2);
        unsigned int v30 = (unsigned __int8 *)(a1 + 13380);
        if ((unint64_t)sub_1DD2E4898(a1 + 13380, v29, a4 + 3, v28, (int *)a1 + 2563) > 0xFFFFFFFFFFFFFF88) {
          return -20;
        }
        goto LABEL_31;
      }
      return -30;
    case 2u:
      int v21 = (v11 >> 4) & 3;
      if (v21 == 2)
      {
        unsigned int v22 = a4[1] | ((v11 & 0xF) << 8);
        uint64_t v23 = 2;
      }
      else if (v21 == 3)
      {
        unsigned int v22 = ((v11 & 0xF) << 16) | (a4[1] << 8) | a4[2];
        uint64_t v23 = 3;
      }
      else
      {
        unsigned int v22 = v11 & 0x1F;
        uint64_t v23 = 1;
      }
      unint64_t v29 = v22;
      unint64_t v19 = v23 + v22;
      if (v19 + 8 <= a5)
      {
        unsigned int v30 = &a4[v23];
        *((void *)a1 + 3343) = &a4[v23];
        *((void *)a1 + 3344) = v22;
      }
      else
      {
        if (v19 > a5) {
          return -20;
        }
        unsigned int v30 = (unsigned __int8 *)(a1 + 13380);
        memcpy(a1 + 13380, &a4[v23], v22);
LABEL_31:
        *((void *)a1 + 3343) = v30;
        *((void *)a1 + 3344) = v29;
        *(void *)&v30[v29] = 0;
      }
      goto LABEL_36;
    case 3u:
      int v24 = (v11 >> 4) & 3;
      if (v24 == 2)
      {
        unsigned int v25 = a4[1] | ((v11 & 0xF) << 8);
        unsigned int v26 = 2;
      }
      else if (v24 == 3)
      {
        uint64_t result = -20;
        if (a5 < 4) {
          return result;
        }
        unsigned int v25 = ((v11 & 0xF) << 16) | (a4[1] << 8) | a4[2];
        if (v25 > 0x20000) {
          return result;
        }
        unsigned int v26 = 3;
      }
      else
      {
        unsigned int v25 = v11 & 0x1F;
        unsigned int v26 = 1;
      }
      unint64_t v29 = v25;
      unsigned int v30 = (unsigned __int8 *)(a1 + 13380);
      memset(a1 + 13380, a4[v26], v25 + 8);
      *((void *)a1 + 3343) = a1 + 13380;
      *((void *)a1 + 3344) = v29;
      unint64_t v19 = v26 + 1;
      goto LABEL_36;
    default:
      if (a5 < 5) {
        return -20;
      }
      int v14 = (v11 >> 4) & 3;
      if (v14 == 2)
      {
        unsigned int v45 = a4[2];
        size_t v18 = a4[3] | ((v45 & 0x3F) << 8);
        unint64_t v19 = v18 + 4;
        if (v18 + 4 > a5) {
          return -20;
        }
        size_t v17 = ((v11 & 0xF) << 10) | (4 * a4[1]) | (v45 >> 6);
        uint64_t v20 = 4;
        goto LABEL_51;
      }
      if (v14 == 3)
      {
        int v15 = ((v11 & 0xF) << 14) | (a4[1] << 6);
        unsigned int v16 = a4[2];
        size_t v17 = v15 | (v16 >> 2);
        uint64_t result = -20;
        if (v17 > 0x20000) {
          return result;
        }
        size_t v18 = (unsigned __int16)(a4[3] << 8) | ((v16 & 3) << 16) | a4[4];
        unint64_t v19 = v18 + 5;
        if (v18 + 5 > a5) {
          return result;
        }
        uint64_t v20 = 5;
        goto LABEL_51;
      }
      unsigned int v46 = a4[1];
      size_t v18 = a4[2] | ((v46 & 3) << 8);
      unint64_t v19 = v18 + 3;
      if (v18 + 3 > a5) {
        return -20;
      }
      size_t v17 = (v46 >> 2) & 0xFFFFFC3F | ((v11 & 0xF) << 6);
      if ((v11 & 0x10) == 0)
      {
        uint64_t v20 = 3;
LABEL_51:
        size_t v47 = sub_1DD2E5714(a1 + 13380, v17, &a4[v20], v18);
        goto LABEL_52;
      }
      size_t v47 = sub_1DD2E3928();
LABEL_52:
      if (v47 > 0xFFFFFFFFFFFFFF88) {
        return -20;
      }
      *((void *)a1 + 3343) = a1 + 13380;
      *((void *)a1 + 3344) = v17;
      *(void *)((char *)a1 + v17 + 26760) = 0;
      unsigned int v30 = (unsigned __int8 *)*((void *)a1 + 3343);
      unint64_t v29 = *((void *)a1 + 3344);
LABEL_36:
      uint64_t v31 = a5 - v19;
      if (a5 == v19) {
        return -72;
      }
      unsigned int v32 = &a4[v19];
      unint64_t v33 = &a2[a3];
      unint64_t v34 = &v30[v29];
      int v35 = v32 + 1;
      int v36 = *v32;
      if (!*v32) {
        goto LABEL_103;
      }
      int v37 = (unsigned char *)*((void *)a1 + 3331);
      uint64_t v38 = *((void *)a1 + 3332);
      unint64_t v39 = *((void *)a1 + 3333);
      int v40 = *v9;
      if ((v36 & 0x80) != 0)
      {
        if (v31 < 2) {
          return -72;
        }
        int v35 = v32 + 2;
        int v36 = (v32[1] | (v36 << 8)) - 0x8000;
      }
      unint64_t v41 = (unint64_t)&a4[a5];
      if (v35 >= &a4[a5]) {
        return -72;
      }
      unsigned int v42 = *v35;
      if ((v42 & 2) != 0)
      {
        int v43 = v35 + 3;
        if ((unint64_t)(v35 + 3) > v41) {
          return -72;
        }
        uint64_t v44 = __rev16(*(unsigned __int16 *)(v35 + 1));
      }
      else
      {
        int v43 = v35 + 2;
        if ((unint64_t)(v35 + 2) > v41) {
          return -72;
        }
        uint64_t v44 = v35[1] | ((v42 & 1) << 8);
      }
      uint64_t v48 = (unsigned int *)&v43[v44];
      if ((unint64_t)&v43[v44] > v41 - 3) {
        return -72;
      }
      uint64_t v186 = 0;
      unsigned int v49 = v42 >> 6;
      unsigned int v185 = 0;
      if (v42 >> 6)
      {
        if (v49 == 2)
        {
          unint64_t v183 = (unint64_t)v48;
          if (!v40) {
            return -20;
          }
        }
        else if (v49 == 1)
        {
          HIDWORD(v186) = 0;
          unint64_t v183 = (unint64_t)v48;
          char v50 = *(unsigned char *)v48;
          uint64_t v48 = (unsigned int *)((char *)v48 + 1);
          *(_DWORD *)a1 = 0;
          a1[2] = 0;
          *((unsigned char *)a1 + 6) = v50;
          *((unsigned char *)a1 + 7) = 0;
        }
        else
        {
          uint64_t v167 = v31;
          unint64_t v171 = v39;
          uint64_t v175 = v38;
          uint64_t v179 = v43;
          uint64_t v161 = v34;
          uint64_t v164 = v37;
          unsigned int v158 = v33;
          unsigned int v184 = 63;
          unint64_t v53 = sub_1DD2E2504((uint64_t)v187, &v184, (_DWORD *)&v186 + 1, v48, v41 - (void)v48);
          if (v53 > 0xFFFFFFFFFFFFFF88) {
            return -1;
          }
          if (HIDWORD(v186) >= 0xB) {
            return -20;
          }
          unint64_t v183 = (unint64_t)v48;
          uint64_t v48 = (unsigned int *)((char *)v48 + v53);
          sub_1DD2E233C((int *)a1, (uint64_t)v187, v184, HIDWORD(v186));
          unint64_t v33 = v158;
          unint64_t v34 = v161;
          int v37 = v164;
          uint64_t v31 = v167;
          unint64_t v39 = v171;
          uint64_t v38 = v175;
          int v43 = v179;
        }
      }
      else
      {
        uint64_t v51 = 0;
        HIDWORD(v186) = 6;
        *(_DWORD *)a1 = 65542;
        unsigned int v52 = (char *)a1 + 7;
        do
        {
          *(_WORD *)(v52 - 3) = 0;
          *(v52 - 1) = v51;
          *unsigned int v52 = 6;
          v52 += 4;
          ++v51;
        }
        while (v51 != 64);
        unint64_t v183 = (unint64_t)v48;
      }
      int v54 = (v42 >> 4) & 3;
      if (v54)
      {
        if (v54 == 2)
        {
          if (!v40) {
            return -20;
          }
        }
        else if (v54 == 1)
        {
          LODWORD(v186) = 0;
          if ((unint64_t)v48 > v41 - 2) {
            return -72;
          }
          char v55 = *(unsigned char *)v48;
          uint64_t v48 = (unsigned int *)((char *)v48 + 1);
          *((_DWORD *)a1 + 1025) = 0;
          a1[2052] = 0;
          *unsigned int v10 = v55 & 0x1F;
        }
        else
        {
          uint64_t v168 = v31;
          unint64_t v172 = v39;
          uint64_t v176 = v38;
          long long v180 = v43;
          uint64_t v162 = v34;
          uint64_t v165 = v37;
          long long v159 = v33;
          unsigned int v184 = 31;
          unint64_t v58 = sub_1DD2E2504((uint64_t)v187, &v184, &v186, v48, v41 - (void)v48);
          if (v58 > 0xFFFFFFFFFFFFFF88) {
            return -1;
          }
          if (v186 >= 0xA) {
            return -20;
          }
          uint64_t v48 = (unsigned int *)((char *)v48 + v58);
          sub_1DD2E233C((int *)a1 + 1025, (uint64_t)v187, v184, v186);
          unint64_t v33 = v159;
          unint64_t v34 = v162;
          int v37 = v165;
          uint64_t v31 = v168;
          unint64_t v39 = v172;
          uint64_t v38 = v176;
          int v43 = v180;
        }
      }
      else
      {
        uint64_t v56 = 0;
        LODWORD(v186) = 5;
        *((_DWORD *)a1 + 1025) = 65541;
        long long v57 = (char *)v10 + 1;
        do
        {
          *(_WORD *)(v57 - 3) = 0;
          *(v57 - 1) = v56;
          *long long v57 = 5;
          v57 += 4;
          ++v56;
        }
        while (v56 != 32);
      }
      int v59 = (v42 >> 2) & 3;
      switch(v59)
      {
        case 0:
          uint64_t v61 = 0;
          *((_DWORD *)a1 + 1538) = 65543;
          unsigned int v62 = (char *)v10 + 2053;
          do
          {
            *(_WORD *)(v62 - 3) = 0;
            *(v62 - 1) = v61;
            unsigned char *v62 = 7;
            v62 += 4;
            ++v61;
          }
          while (v61 != 128);
          goto LABEL_96;
        case 2:
          if (!v40) {
            return -20;
          }
          goto LABEL_96;
        case 1:
          unsigned int v185 = 0;
          if ((unint64_t)v48 > v41 - 2) {
            return -72;
          }
          char v60 = *(unsigned char *)v48;
          uint64_t v48 = (unsigned int *)((char *)v48 + 1);
          *((_DWORD *)a1 + 1538) = 0;
          a1[3078] = 0;
          *((unsigned char *)v10 + 2052) = v60;
          *((unsigned char *)v10 + 2053) = 0;
          goto LABEL_96;
      }
      uint64_t v169 = v31;
      unint64_t v173 = v39;
      uint64_t v177 = v38;
      int v181 = v43;
      long long v63 = v37;
      uint64_t v64 = v33;
      unsigned int v65 = v34;
      unsigned int v184 = 127;
      unint64_t v66 = sub_1DD2E2504((uint64_t)v187, &v184, &v185, v48, v41 - (void)v48);
      if (v66 > 0xFFFFFFFFFFFFFF88) {
        return -1;
      }
      if (v185 >= 0xB) {
        return -20;
      }
      uint64_t v48 = (unsigned int *)((char *)v48 + v66);
      sub_1DD2E233C((int *)a1 + 1538, (uint64_t)v187, v184, v185);
      unint64_t v34 = v65;
      unint64_t v33 = v64;
      int v37 = v63;
      unint64_t v39 = v173;
      uint64_t v38 = v177;
      int v43 = v181;
      uint64_t v31 = v169;
LABEL_96:
      uint64_t result = (char *)v48 - (char *)v32;
      if ((unint64_t)((char *)v48 - (char *)v32) > 0xFFFFFFFFFFFFFF88) {
        return result;
      }
      if (!v36)
      {
LABEL_103:
        long long v72 = a2;
        goto LABEL_104;
      }
      if (result == v31) {
        return -20;
      }
      unint64_t v67 = v41 - (void)v48;
      uint64_t v157 = v48;
      uint64_t v163 = v34;
      uint64_t v166 = v37;
      unint64_t v174 = v39;
      uint64_t v178 = v38;
      uint64_t v182 = v43;
      if (v41 - (unint64_t)v48 < 8)
      {
        uint64_t v68 = *(unsigned __int8 *)v48;
        switch(v67)
        {
          case 2uLL:
            goto LABEL_117;
          case 3uLL:
            goto LABEL_116;
          case 4uLL:
            goto LABEL_115;
          case 5uLL:
            goto LABEL_114;
          case 6uLL:
            goto LABEL_113;
          case 7uLL:
            v68 |= (unint64_t)*((unsigned __int8 *)v48 + 6) << 48;
LABEL_113:
            v68 += (unint64_t)*((unsigned __int8 *)v48 + 5) << 40;
LABEL_114:
            v68 += (unint64_t)*((unsigned __int8 *)v48 + 4) << 32;
LABEL_115:
            v68 += (unint64_t)*((unsigned __int8 *)v48 + 3) << 24;
LABEL_116:
            v68 += (unint64_t)*((unsigned __int8 *)v48 + 2) << 16;
LABEL_117:
            v68 += (unint64_t)*((unsigned __int8 *)v48 + 1) << 8;
            break;
          default:
            break;
        }
        if (!*(unsigned char *)(v41 - 1)) {
          return -20;
        }
        unsigned int v71 = __clz(*(unsigned __int8 *)(v41 - 1)) - 8 * (v41 - v48) + 41;
        unint64_t v69 = (unint64_t)v48;
      }
      else
      {
        if (!*(unsigned char *)(v41 - 1) || v67 > 0xFFFFFFFFFFFFFF88) {
          return -20;
        }
        uint64_t v70 = *(void *)(v41 - 8);
        unint64_t v69 = v41 - 8;
        uint64_t v68 = v70;
        unsigned int v71 = __clz(*((unsigned __int8 *)v48 + v67 - 1)) - 23;
      }
      int v75 = *a1;
      unsigned int v76 = v71 + v75;
      if (v71 + v75 > 0x40)
      {
        uint64_t v77 = v68;
        long long v78 = (unsigned int *)v69;
        goto LABEL_129;
      }
      if (v69 >= (unint64_t)(v48 + 2))
      {
        LODWORD(v79) = v76 >> 3;
        v76 &= 7u;
      }
      else
      {
        uint64_t v77 = v68;
        long long v78 = v48;
        if ((unsigned int *)v69 == v48) {
          goto LABEL_129;
        }
        uint64_t v79 = v76 >> 3;
        if (v69 - v79 < (unint64_t)v48) {
          LODWORD(v79) = v69 - v48;
        }
        v76 -= 8 * v79;
      }
      long long v78 = (unsigned int *)(v69 - v79);
      uint64_t v77 = *(void *)v78;
LABEL_129:
      int v80 = a1[2050];
      unsigned int v81 = v76 + v80;
      if (v76 + v80 > 0x40)
      {
        uint64_t v82 = v77;
        uint64_t v83 = v78;
        goto LABEL_138;
      }
      if (v78 >= v48 + 2)
      {
        LODWORD(v84) = v81 >> 3;
        v81 &= 7u;
      }
      else
      {
        uint64_t v82 = v77;
        uint64_t v83 = v48;
        if (v78 == v48) {
          goto LABEL_138;
        }
        uint64_t v84 = v81 >> 3;
        if ((unsigned int *)((char *)v78 - v84) < v48) {
          LODWORD(v84) = v78 - v48;
        }
        v81 -= 8 * v84;
      }
      uint64_t v83 = (unsigned int *)((char *)v78 - v84);
      uint64_t v82 = *(void *)v83;
LABEL_138:
      int v85 = a1[3076];
      if (v81 + v85 > 0x40) {
        return -20;
      }
      unsigned int v86 = v81 + v85;
      uint64_t v151 = (unsigned __int8 *)(v48 + 2);
      if (v83 >= v48 + 2)
      {
        uint64_t v87 = v86 >> 3;
        v86 &= 7u;
      }
      else
      {
        if (v83 == v48)
        {
          unint64_t v156 = v48;
          uint64_t v153 = v82;
          goto LABEL_149;
        }
        uint64_t v87 = v86 >> 3;
        if ((unsigned int *)((char *)v83 - v87) >= v48) {
          uint64_t v87 = v87;
        }
        else {
          uint64_t v87 = (v83 - v48);
        }
        if (v81 + v85 - 8 * v87 > 0x40) {
          return -20;
        }
        unsigned int v86 = v81 + v85 - 8 * v87;
      }
      unint64_t v156 = (unsigned int *)((char *)v83 - v87);
      uint64_t v153 = *(void *)((char *)v83 - v87);
LABEL_149:
      unint64_t v155 = (unint64_t)(v68 << v71) >> 1 >> (63 - v75);
      unint64_t v88 = (unint64_t)(v77 << v76) >> 1 >> (63 - v80);
      unint64_t v149 = a1 + 2052;
      uint64_t v150 = a1 + 2;
      unint64_t v154 = (unint64_t)(v82 << v81) >> 1 >> (63 - v85);
      int v148 = a1 + 3078;
      unsigned int v152 = v33 - 8;
      unint64_t v160 = v33;
      unint64_t v147 = (unint64_t)(v33 - 12);
      uint64_t v89 = 1;
      long long v72 = a2;
      uint64_t v170 = 1;
      unsigned int i = v86;
      do
      {
        int v91 = v30;
        uint64_t v92 = v72;
        uint64_t v93 = v156;
        if (v156 >= (unsigned int *)v151)
        {
          LODWORD(v94) = i >> 3;
          i &= 7u;
LABEL_156:
          int v95 = (unsigned int *)((char *)v93 - v94);
          uint64_t v153 = *(void *)v95;
          goto LABEL_157;
        }
        if (v156 != v157)
        {
          uint64_t v94 = i >> 3;
          uint64_t v93 = v156;
          if ((unsigned int *)((char *)v156 - v94) < v157) {
            LODWORD(v94) = v156 - v157;
          }
          i -= 8 * v94;
          goto LABEL_156;
        }
        int v95 = v157;
LABEL_157:
        uint64_t v96 = v182;
        uint64_t v97 = v89;
        if (!v36)
        {
          unint64_t v33 = v160;
          unint64_t v34 = v163;
          goto LABEL_104;
        }
        int v98 = &v150[2 * v155];
        unint64_t v99 = *((unsigned __int8 *)v98 + 2);
        unint64_t v100 = v170;
        if (*((unsigned char *)v98 + 2)) {
          unint64_t v100 = v89;
        }
        unint64_t v156 = v95;
        if (v99 == 63)
        {
          uint64_t v102 = v182 + 1;
          uint64_t v101 = *v182;
          if (v101 == 255)
          {
            int v104 = v182 + 3;
            if ((unint64_t)(v182 + 3) <= v183)
            {
              unint64_t v105 = *(unsigned __int16 *)v102;
              if (unint64_t)v104 < v183 && (v105)
              {
                v105 |= (unint64_t)v182[3] << 16;
                int v104 = v182 + 4;
              }
              unint64_t v99 = v105 >> 1;
              uint64_t v102 = v104;
            }
            else
            {
              unint64_t v99 = 63;
            }
          }
          else
          {
            unint64_t v99 = v101 + 63;
          }
          if ((unint64_t)v102 >= v183) {
            uint64_t v96 = (unsigned __int8 *)(v183 - 1);
          }
          else {
            uint64_t v96 = v102;
          }
          unint64_t v103 = v154;
          uint64_t v97 = v89;
        }
        else
        {
          unint64_t v103 = v154;
        }
        int v106 = &v149[2 * v88];
        uint64_t v107 = *((unsigned __int8 *)v106 + 2);
        if (*((unsigned char *)v106 + 2)) {
          int v108 = v107 - 1;
        }
        else {
          int v108 = 0;
        }
        uint64_t v109 = v170;
        if (v107 | (v99 == 0)) {
          uint64_t v109 = v97;
        }
        uint64_t v170 = v109;
        unint64_t v110 = &v148[2 * v103];
        uint64_t v111 = *((unsigned __int8 *)v110 + 2);
        if (v111 == 127)
        {
          if ((unint64_t)v96 >= v183)
          {
            uint64_t v113 = 0;
            int v112 = v96;
          }
          else
          {
            int v112 = v96 + 1;
            uint64_t v113 = *v96;
            if (v113 == 255)
            {
              unint64_t v114 = v96 + 3;
              if ((unint64_t)(v96 + 3) <= v183)
              {
                unint64_t v146 = *(unsigned __int16 *)v112;
                if (unint64_t)v114 < v183 && (v146)
                {
                  v146 |= (unint64_t)v96[3] << 16;
                  unint64_t v114 = v96 + 4;
                }
                uint64_t v111 = v146 >> 1;
                int v112 = v114;
              }
              else
              {
                uint64_t v111 = 127;
              }
              goto LABEL_187;
            }
          }
          uint64_t v111 = v113 + 127;
LABEL_187:
          if ((unint64_t)v112 >= v183) {
            uint64_t v96 = (unsigned __int8 *)(v183 - 1);
          }
          else {
            uint64_t v96 = v112;
          }
        }
        if (*((unsigned char *)v106 + 2)) {
          unint64_t v115 = ((unint64_t)(v153 << i) >> 1 >> (63 - v108)) + dword_1DD323CB0[v107];
        }
        else {
          unint64_t v115 = v100;
        }
        size_t v116 = v111 + 4;
        unint64_t v117 = v111 + 4 + v99;
        if (v117 > v160 - v72) {
          return -70;
        }
        if (v99 > v163 - v30) {
          return -20;
        }
        long long v118 = &v72[v99];
        uint64_t result = -70;
        if (&v72[v99] > v152) {
          return result;
        }
        v72 += v117;
        if (&v92[v117] > v160) {
          return result;
        }
        v30 += v99;
        if (&v91[v99] > v163) {
          return -20;
        }
        --v36;
        uint64_t v119 = *v106;
        int v120 = *((unsigned __int8 *)v106 + 3);
        int v121 = v108 + i + v120;
        unint64_t v88 = ((unint64_t)(v153 << (v108 + i)) >> 1 >> (63
                                                                                               - v120))
            + v119;
        uint64_t v122 = *v98;
        int v123 = *((unsigned __int8 *)v98 + 3);
        unint64_t v124 = (unint64_t)(v153 << v121) >> 1 >> (63 - v123);
        int v125 = v121 + v123;
        unint64_t v126 = v124 + v122;
        LODWORD(v122) = *((unsigned __int8 *)v110 + 3);
        unsigned int v127 = v125 + v122;
        unint64_t v128 = ((unint64_t)(v153 << v125) >> 1 >> (63 - v122)) + *v110;
        unint64_t v129 = &v118[-v115];
        do
        {
          uint64_t v130 = *(void *)v91;
          v91 += 8;
          *(void *)uint64_t v92 = v130;
          v92 += 8;
        }
        while (v92 < v118);
        uint64_t v182 = v96;
        unint64_t v154 = v128;
        unint64_t v155 = v126;
        if (v115 <= v118 - v166)
        {
          unint64_t v134 = v111 + 4;
LABEL_207:
          uint64_t v89 = v115;
          if (v115 > 7)
          {
            *(void *)long long v118 = *(void *)v129;
          }
          else
          {
            uint64_t v135 = dword_1DD323D50[v115];
            *long long v118 = *v129;
            v118[1] = v129[1];
            v118[2] = v129[2];
            v118[3] = v129[3];
            long long v136 = &v129[dword_1DD323D30[v115]];
            *((_DWORD *)v118 + 1) = *(_DWORD *)v136;
            unint64_t v129 = &v136[-v135];
          }
          long long v137 = v118 + 8;
          unint64_t v138 = v129 + 8;
          if ((unint64_t)v72 <= v147)
          {
            unsigned int i = v127;
            do
            {
              uint64_t v143 = *(void *)v138;
              v138 += 8;
              *(void *)long long v137 = v143;
              v137 += 8;
            }
            while (v137 < &v118[v134]);
          }
          else
          {
            if (v137 < v152)
            {
              int64_t v139 = v152 - v137;
              uint64_t v140 = (uint64_t *)v138;
              do
              {
                uint64_t v141 = *v140++;
                *(void *)long long v137 = v141;
                v137 += 8;
              }
              while (v137 < v152);
              v138 += v139;
              long long v137 = v152;
            }
            for (unsigned int i = v127; v137 < v72; ++v137)
            {
              char v142 = *v138++;
              *long long v137 = v142;
            }
          }
          continue;
        }
        if (v115 > (unint64_t)&v118[-v178]) {
          return -20;
        }
        uint64_t v89 = v115;
        uint64_t v131 = v129 - v166;
        uint64_t v132 = (const void *)(v174 + v129 - v166);
        if ((unint64_t)v132 + v116 <= v174)
        {
          memmove(v118, v132, v116);
          unsigned int i = v127;
          continue;
        }
        memmove(v118, v132, v166 - v129);
        v118 -= v131;
        if (v118 <= v152)
        {
          unint64_t v133 = v116 + v131;
          if (v133 > 3)
          {
            unint64_t v134 = v133;
            unint64_t v129 = v166;
            unint64_t v115 = v89;
            goto LABEL_207;
          }
        }
        unsigned int i = v127;
        if (v118 < v72)
        {
          unint64_t v144 = v166;
          do
          {
            char v145 = *v144++;
            *v118++ = v145;
          }
          while (v118 < v72);
        }
      }
      while (i < 0x41);
      unint64_t v33 = v160;
      unint64_t v34 = v163;
      if (v36) {
        return -20;
      }
LABEL_104:
      size_t v73 = v34 - v30;
      if (v34 < v30) {
        return -20;
      }
      unsigned int v74 = &v72[v73];
      if (&v72[v73] > v33) {
        return -70;
      }
      if (v34 != v30)
      {
        memcpy(v72, v30, v73);
        long long v72 = v74;
      }
      return v72 - a2;
  }
}

unint64_t sub_1DD2E67C4(uint64_t a1, char *a2, uint64_t a3, _DWORD *a4, unint64_t a5)
{
  if (a5 < 8) {
    return -72;
  }
  if (*a4 != -47205083) {
    return -10;
  }
  *(void *)(a1 + 26680) = 5;
  unint64_t result = sub_1DD2E58A4(a1 + 26688, (uint64_t)a4, 5uLL);
  if (result > 0xFFFFFFFFFFFFFF88) {
    return result;
  }
  unsigned int v11 = (char *)a4 + a5;
  uint64_t v12 = &a2[a3];
  uint64_t v13 = (unsigned __int8 *)a4 + 5;
  unint64_t v14 = a5 - 5;
  int v15 = a2;
  while (1)
  {
    unsigned int v16 = *v13;
    unsigned int v17 = v16 >> 6;
    if (v16 >> 6 == 2)
    {
      unint64_t v18 = 1;
    }
    else
    {
      if (v17 == 3)
      {
        if (v14 != 3) {
          return -72;
        }
        return v15 - a2;
      }
      unint64_t v18 = v13[2] | ((v16 & 7) << 16) | (v13[1] << 8);
    }
    BOOL v19 = v14 - 3 >= v18;
    unint64_t v14 = v14 - 3 - v18;
    if (!v19) {
      return -72;
    }
    uint64_t v20 = (char *)(v13 + 3);
    if (v17 == 1) {
      break;
    }
    if (v17) {
      return -1;
    }
    unint64_t result = sub_1DD2E5900((unsigned __int16 *)a1, v15, v12 - v15, v13 + 3, v18);
    if (!v18) {
      return v15 - a2;
    }
LABEL_19:
    if (result <= 0xFFFFFFFFFFFFFF88)
    {
      v15 += result;
      uint64_t v13 = (unsigned __int8 *)&v20[v18];
      unint64_t result = -72;
      if ((unint64_t)(v11 - &v20[v18]) >= 3) {
        continue;
      }
    }
    return result;
  }
  if (v15 && v18 <= v12 - v15)
  {
    memcpy(v15, v20, v18);
    unint64_t result = v18;
    if (!v18) {
      return v15 - a2;
    }
    goto LABEL_19;
  }
  if (v18) {
    return -70;
  }
  return v15 - a2;
}

unint64_t sub_1DD2E6954(void *a1, char *a2, uint64_t a3, _DWORD *a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_1DD2E69EC((uint64_t)a1, a6, a7);
  uint64_t v12 = (char *)a1[3330];
  if (v12 != a2)
  {
    a1[3333] = v12;
    a1[3332] = &a2[a1[3331] - (void)v12];
    a1[3331] = a2;
    a1[3330] = a2;
  }
  return sub_1DD2E67C4((uint64_t)a1, a2, a3, a4, a5);
}

uint64_t sub_1DD2E69EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = 0;
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 26672) = 5;
  *(_DWORD *)(a1 + 10252) = 12;
  *(_OWORD *)(a1 + 26640) = 0u;
  *(_OWORD *)(a1 + 26656) = 0u;
  *(void *)(a1 + 26732) = 0;
  if (a2 && a3)
  {
    if (*(_DWORD *)a2 != -332356555)
    {
      uint64_t result = 0;
      *(void *)(a1 + 26656) = a2;
      *(void *)(a1 + 26648) = a2;
      goto LABEL_17;
    }
    uint64_t v7 = a2 + 4;
    unsigned int v28 = 31;
    unsigned int v26 = 127;
    unsigned int v24 = 63;
    unint64_t v8 = sub_1DD2E4490((unsigned int *)(a1 + 10252), (char *)(a2 + 4), a3 - 4);
    if (v8 <= 0xFFFFFFFFFFFFFF88)
    {
      unint64_t v9 = v8;
      unsigned int v27 = 0;
      uint64_t v10 = v7 + v8;
      unint64_t v11 = a3 - 4 - v8;
      unint64_t v12 = sub_1DD2E2504((uint64_t)v31, &v28, &v27, (unsigned int *)(v7 + v8), v11);
      if (v12 <= 0xFFFFFFFFFFFFFF88 && v27 <= 9)
      {
        unint64_t v13 = v12;
        if ((unint64_t)sub_1DD2E233C((int *)(a1 + 4100), (uint64_t)v31, v28, v27) <= 0xFFFFFFFFFFFFFF88)
        {
          unsigned int v25 = 0;
          uint64_t v14 = v10 + v13;
          unint64_t v15 = v11 - v13;
          unint64_t v16 = sub_1DD2E2504((uint64_t)v30, &v26, &v25, (unsigned int *)(v10 + v13), v15);
          if (v16 <= 0xFFFFFFFFFFFFFF88 && v25 <= 0xA)
          {
            unint64_t v17 = v16;
            if ((unint64_t)sub_1DD2E233C((int *)(a1 + 6152), (uint64_t)v30, v26, v25) <= 0xFFFFFFFFFFFFFF88)
            {
              unsigned int v23 = 0;
              unint64_t v18 = sub_1DD2E2504((uint64_t)v29, &v24, &v23, (unsigned int *)(v14 + v17), v15 - v17);
              if (v23 <= 0xA)
              {
                unint64_t v19 = v18;
                if (v18 <= 0xFFFFFFFFFFFFFF88
                  && (unint64_t)sub_1DD2E233C((int *)a1, (uint64_t)v29, v24, v23) < 0xFFFFFFFFFFFFFF89)
                {
                  *(_DWORD *)(a1 + 26736) = 1;
                  unint64_t v20 = v13 + v9 + v17 + v19;
                  if (v20 <= 0xFFFFFFFFFFFFFF88)
                  {
                    uint64_t result = 0;
                    uint64_t v21 = v7 + v20;
                    uint64_t v22 = *(void *)(a1 + 26640);
                    *(void *)(a1 + 26664) = v22;
                    *(void *)(a1 + 26656) = v21 + *(void *)(a1 + 26648) - v22;
                    *(void *)(a1 + 26648) = v21;
LABEL_17:
                    *(void *)(a1 + 26640) = a2 + a3;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }
    return -30;
  }
  return result;
}

_DWORD *sub_1DD2E6C4C(_DWORD *result, unint64_t a2, uint64_t *a3, uint64_t *a4)
{
  if (a2 > 4)
  {
    if (*result != -47205083)
    {
      uint64_t v10 = -10;
      goto LABEL_15;
    }
    unint64_t v4 = a2 - 5;
    if (a2 - 5 >= 3)
    {
      uint64_t v5 = 0;
      uint64_t v6 = (unsigned __int8 *)result + 5;
      do
      {
        unsigned int v7 = *v6;
        if (v7 >> 6 == 2)
        {
          unint64_t v9 = v4 - 3;
          if (!v9) {
            break;
          }
          unint64_t v8 = 1;
        }
        else
        {
          if (v7 >> 6 == 3) {
            goto LABEL_17;
          }
          unint64_t v8 = v6[2] | ((v7 & 7) << 16) | (v6[1] << 8);
          unint64_t v9 = v4 - 3;
          if (v9 < v8) {
            break;
          }
          if (!v8)
          {
LABEL_17:
            *a3 = v6 - (unsigned __int8 *)result + 3;
            goto LABEL_16;
          }
        }
        v6 += v8 + 3;
        unint64_t v4 = v9 - v8;
        v5 += 0x20000;
      }
      while (v4 >= 3);
    }
  }
  uint64_t v10 = -72;
LABEL_15:
  *a3 = v10;
  uint64_t v5 = -2;
LABEL_16:
  *a4 = v5;
  return result;
}

uint64_t sub_1DD2E6D08(void **a1)
{
  if (a1)
  {
    free(*a1);
    free(a1[6]);
    free(a1[9]);
    free(a1);
  }
  return 0;
}

uint64_t sub_1DD2E6D54(int *a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (a3 > 0xFF) {
    return -46;
  }
  if (a4 > 0xC) {
    return -44;
  }
  uint64_t v5 = 0;
  uint64_t v6 = a1 + 1;
  uint64_t v7 = a3 + 1;
  unsigned int v8 = 1 << a4;
  unsigned __int16 v9 = 1;
  unsigned int v10 = (1 << a4) - 1;
  do
  {
    int v11 = *(__int16 *)(a2 + 2 * v5);
    if (v11 == -1)
    {
      unint64_t v13 = &v6[v10--];
      *((unsigned char *)v13 + 2) = v5;
      __int16 v12 = 1;
    }
    else
    {
      __int16 v12 = *(_WORD *)(a2 + 2 * v5);
      if (0x8000 << a4 >> 16 <= v11) {
        unsigned __int16 v9 = 0;
      }
    }
    v22[v5++] = v12;
  }
  while (v7 != v5);
  uint64_t v14 = 0;
  unsigned int v15 = 0;
  *a1 = (unsigned __int16)a4 | (v9 << 16);
  do
  {
    int v16 = *(__int16 *)(a2 + 2 * v14);
    if (v16 >= 1)
    {
      for (int i = 0; i != v16; ++i)
      {
        BYTE2(v6[v15]) = v14;
        do
          unsigned int v15 = ((v8 >> 3) + (v8 >> 1) + 3 + v15) & ((1 << a4) - 1);
        while (v15 > v10);
      }
    }
    ++v14;
  }
  while (v14 != v7);
  if (v15) {
    return -1;
  }
  unint64_t v18 = (char *)a1 + 7;
  uint64_t v19 = (1 << a4);
  do
  {
    uint64_t v20 = *(v18 - 1);
    unsigned int v21 = (unsigned __int16)v22[v20];
    v22[v20] = v21 + 1;
    LOBYTE(v20) = a4 + 1 + (__clz(v21) ^ 0xE0);
    *unint64_t v18 = v20;
    *(_WORD *)(v18 - 3) = ((_WORD)v21 << v20) - v8;
    v18 += 4;
    --v19;
  }
  while (v19);
  return 0;
}

unint64_t sub_1DD2E6EE8(unint64_t a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4, unsigned __int16 *a5)
{
  uint64_t v7 = a1 + a2;
  unint64_t v8 = a1 + a2 - 3;
  if (a5[1])
  {
    long long v82 = 0uLL;
    long long v83 = 0uLL;
    unint64_t result = sub_1DD2E78E0((uint64_t)&v82, a3, a4);
    if (result <= 0xFFFFFFFFFFFFFF88)
    {
      int v11 = *a5;
      unsigned int v10 = a5 + 2;
      uint64_t v12 = (void)v82 << SBYTE8(v82) >> 1 >> (63 - v11);
      DWORD2(v82) += v11;
      sub_1DD2E4328((uint64_t)&v82);
      uint64_t v13 = (void)v82 << SBYTE8(v82) >> 1 >> (63 - v11);
      DWORD2(v82) += v11;
      sub_1DD2E4328((uint64_t)&v82);
      if (sub_1DD2E4328((uint64_t)&v82) || v8 <= a1)
      {
        uint64_t v14 = (unsigned char *)a1;
      }
      else
      {
        uint64_t v14 = (unsigned char *)a1;
        do
        {
          unsigned int v15 = &v10[2 * v12];
          uint64_t v16 = *v15;
          char v17 = *((unsigned char *)v15 + 2);
          LODWORD(v15) = *((unsigned __int8 *)v15 + 3);
          uint64_t v18 = v82;
          uint64_t v19 = (void)v82 << SBYTE8(v82) >> -(char)v15;
          LODWORD(v15) = DWORD2(v82) + v15;
          uint64_t v20 = v19 + v16;
          *uint64_t v14 = v17;
          unsigned int v21 = &v10[2 * v13];
          uint64_t v22 = *v21;
          LOBYTE(v19) = *((unsigned char *)v21 + 2);
          LODWORD(v21) = *((unsigned __int8 *)v21 + 3);
          unint64_t v23 = (unint64_t)(v18 << (char)v15) >> -(char)v21;
          LODWORD(v15) = v15 + v21;
          uint64_t v24 = v23 + v22;
          v14[1] = v19;
          unsigned int v25 = &v10[2 * v20];
          uint64_t v26 = *v25;
          LOBYTE(v19) = *((unsigned char *)v25 + 2);
          LODWORD(v25) = *((unsigned __int8 *)v25 + 3);
          unint64_t v27 = (unint64_t)(v18 << (char)v15) >> -(char)v25;
          LODWORD(v15) = v15 + v25;
          uint64_t v12 = v27 + v26;
          v14[2] = v19;
          unsigned int v28 = &v10[2 * v24];
          uint64_t v29 = *v28;
          LOBYTE(v26) = *((unsigned char *)v28 + 2);
          LODWORD(v28) = *((unsigned __int8 *)v28 + 3);
          DWORD2(v82) = v15 + v28;
          uint64_t v13 = ((unint64_t)(v18 << (char)v15) >> -(char)v28) + v29;
          v14[3] = v26;
          v14 += 4;
        }
        while (!sub_1DD2E4328((uint64_t)&v82) && (unint64_t)v14 < v8);
      }
      unint64_t v50 = v7 - 2;
      uint64_t v51 = &v14[-a1];
      unsigned int v52 = v14 + 1;
      uint64_t v53 = 2;
      while (1)
      {
        int v54 = v51;
        if ((unint64_t)(v52 - 1) > v50) {
          return -70;
        }
        char v55 = &v10[2 * v12];
        uint64_t v56 = *v55;
        char v57 = *((unsigned char *)v55 + 2);
        int v58 = *((unsigned __int8 *)v55 + 3);
        uint64_t v59 = v82;
        char v60 = BYTE8(v82);
        DWORD2(v82) += v58;
        *(v52 - 1) = v57;
        if (sub_1DD2E4328((uint64_t)&v82) == 3) {
          goto LABEL_23;
        }
        if ((unint64_t)v52 > v50) {
          return -70;
        }
        uint64_t v12 = ((unint64_t)(v59 << v60) >> -(char)v58) + v56;
        uint64_t v61 = &v10[2 * v13];
        uint64_t v62 = *v61;
        char v63 = *((unsigned char *)v61 + 2);
        LODWORD(v61) = *((unsigned __int8 *)v61 + 3);
        uint64_t v64 = (void)v82 << SBYTE8(v82) >> -(char)v61;
        DWORD2(v82) += v61;
        uint64_t v13 = v64 + v62;
        *unsigned int v52 = v63;
        v52 += 2;
        int v65 = sub_1DD2E4328((uint64_t)&v82);
        uint64_t v51 = v54 + 2;
        if (v65 == 3)
        {
          --v52;
          uint64_t v53 = 3;
          uint64_t v13 = v12;
LABEL_23:
          *unsigned int v52 = v10[2 * v13 + 1];
          return (unint64_t)&v54[v53];
        }
      }
    }
  }
  else
  {
    long long v82 = 0uLL;
    long long v83 = 0uLL;
    unint64_t result = sub_1DD2E78E0((uint64_t)&v82, a3, a4);
    if (result <= 0xFFFFFFFFFFFFFF88)
    {
      int v31 = *a5;
      unsigned int v30 = a5 + 2;
      uint64_t v32 = (void)v82 << SBYTE8(v82) >> 1 >> (63 - v31);
      DWORD2(v82) += v31;
      sub_1DD2E4328((uint64_t)&v82);
      uint64_t v33 = (void)v82 << SBYTE8(v82) >> 1 >> (63 - v31);
      DWORD2(v82) += v31;
      sub_1DD2E4328((uint64_t)&v82);
      if (sub_1DD2E4328((uint64_t)&v82) || v8 <= a1)
      {
        unint64_t v34 = (unsigned char *)a1;
      }
      else
      {
        unint64_t v34 = (unsigned char *)a1;
        do
        {
          int v35 = &v30[2 * v32];
          uint64_t v36 = *v35;
          char v37 = *((unsigned char *)v35 + 2);
          LODWORD(v35) = *((unsigned __int8 *)v35 + 3);
          uint64_t v38 = v82;
          uint64_t v39 = (void)v82 << SBYTE8(v82) >> 1 >> (63 - v35);
          LODWORD(v35) = DWORD2(v82) + v35;
          uint64_t v40 = v39 + v36;
          *unint64_t v34 = v37;
          unint64_t v41 = &v30[2 * v33];
          uint64_t v42 = *v41;
          LOBYTE(v39) = *((unsigned char *)v41 + 2);
          LODWORD(v41) = *((unsigned __int8 *)v41 + 3);
          unint64_t v43 = (unint64_t)(v38 << (char)v35) >> 1 >> (63 - v41);
          LODWORD(v35) = v35 + v41;
          uint64_t v44 = v43 + v42;
          v34[1] = v39;
          unsigned int v45 = &v30[2 * v40];
          uint64_t v46 = *v45;
          LOBYTE(v39) = *((unsigned char *)v45 + 2);
          LODWORD(v45) = *((unsigned __int8 *)v45 + 3);
          unint64_t v47 = (unint64_t)(v38 << (char)v35) >> 1 >> (63 - v45);
          LODWORD(v35) = v35 + v45;
          uint64_t v32 = v47 + v46;
          v34[2] = v39;
          uint64_t v48 = &v30[2 * v44];
          uint64_t v49 = *v48;
          LOBYTE(v46) = *((unsigned char *)v48 + 2);
          LODWORD(v48) = *((unsigned __int8 *)v48 + 3);
          DWORD2(v82) = v35 + v48;
          uint64_t v33 = ((unint64_t)(v38 << (char)v35) >> 1 >> (63 - v48)) + v49;
          v34[3] = v46;
          v34 += 4;
        }
        while (!sub_1DD2E4328((uint64_t)&v82) && (unint64_t)v34 < v8);
      }
      unint64_t v66 = v7 - 2;
      unint64_t v67 = &v34[-a1];
      uint64_t v68 = v34 + 1;
      while (1)
      {
        unint64_t v69 = v67;
        if ((unint64_t)(v68 - 1) > v66) {
          return -70;
        }
        uint64_t v70 = &v30[2 * v32];
        uint64_t v71 = *v70;
        char v72 = *((unsigned char *)v70 + 2);
        int v73 = *((unsigned __int8 *)v70 + 3);
        uint64_t v74 = v82;
        char v75 = BYTE8(v82);
        DWORD2(v82) += v73;
        *(v68 - 1) = v72;
        if (sub_1DD2E4328((uint64_t)&v82) == 3) {
          break;
        }
        if ((unint64_t)v68 > v66) {
          return -70;
        }
        uint64_t v32 = ((unint64_t)(v74 << v75) >> 1 >> (63 - v73)) + v71;
        unsigned int v76 = &v30[2 * v33];
        uint64_t v77 = *v76;
        char v78 = *((unsigned char *)v76 + 2);
        LODWORD(v76) = *((unsigned __int8 *)v76 + 3);
        uint64_t v79 = (void)v82 << SBYTE8(v82) >> 1 >> (63 - v76);
        DWORD2(v82) += v76;
        uint64_t v33 = v79 + v77;
        unsigned char *v68 = v78;
        v68 += 2;
        int v80 = sub_1DD2E4328((uint64_t)&v82);
        unint64_t v67 = v69 + 2;
        if (v80 == 3)
        {
          --v68;
          uint64_t v81 = 3;
          uint64_t v33 = v32;
LABEL_33:
          unsigned char *v68 = v30[2 * v33 + 1];
          return (unint64_t)&v69[v81];
        }
      }
      uint64_t v81 = 2;
      goto LABEL_33;
    }
  }
  return result;
}

unint64_t sub_1DD2E73BC()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  v15[64] = *MEMORY[0x1E4F143B8];
  unsigned int v12 = 255;
  if (v3 < 2) {
    return -72;
  }
  unint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v6 = v1;
  unint64_t v7 = v0;
  memset(v14, 0, 512);
  unsigned int v13 = 0;
  unint64_t result = sub_1DD2E2504((uint64_t)v15, &v12, &v13, v2, v3);
  if (result > 0xFFFFFFFFFFFFFF88) {
    return result;
  }
  unint64_t v9 = result;
  BOOL v10 = v4 > result;
  unint64_t v11 = v4 - result;
  if (!v10) {
    return -72;
  }
  unint64_t result = sub_1DD2E6D54((int *)v14, (uint64_t)v15, v12, v13);
  if (result <= 0xFFFFFFFFFFFFFF88) {
    return sub_1DD2E6EE8(v7, v6, (unsigned __int8 *)v5 + v9, v11, (unsigned __int16 *)v14);
  }
  return result;
}

unint64_t sub_1DD2E7510(_WORD *a1, char *a2, unint64_t a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  unsigned int v19 = 0;
  unsigned int v20 = 0;
  unint64_t result = sub_1DD2E7648(v22, (uint64_t)v21, &v19, &v20, a2, a3);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    unsigned int v5 = v20;
    if (v20 <= (unsigned __int16)*a1)
    {
      *a1 = v20;
      uint64_t v6 = v5 + 1;
      if (v6 >= 2)
      {
        uint64_t v7 = 0;
        unsigned int v8 = 0;
        uint64_t v9 = v6 - 1;
        do
        {
          unsigned int v10 = v21[v7 + 1] << v7;
          v21[v7 + 1] = v8;
          v8 += v10;
          ++v7;
        }
        while (v9 != v7);
      }
      uint64_t v11 = v19;
      if (v19)
      {
        uint64_t v12 = 0;
        char v13 = v5 + 1;
        do
        {
          uint64_t v14 = *((unsigned __int8 *)v22 + v12);
          uint64_t v15 = v21[v14];
          uint64_t v16 = (v15 + (1 << v14 >> 1));
          if (v15 < v16)
          {
            char v17 = (char *)&a1[v15 + 1] + 1;
            uint64_t v18 = v16 - v15;
            do
            {
              *(v17 - 1) = v12;
              *char v17 = v13 - v14;
              v17 += 2;
              --v18;
            }
            while (v18);
          }
          v21[v14] = v16;
          ++v12;
        }
        while (v12 != v11);
      }
    }
    else
    {
      return -44;
    }
  }
  return result;
}

uint64_t sub_1DD2E7648(_OWORD *a1, uint64_t a2, _DWORD *a3, _DWORD *a4, char *a5, unint64_t a6)
{
  if (a6)
  {
    unint64_t v10 = *a5;
    if ((*a5 & 0x80000000) == 0)
    {
      if (v10 < a6)
      {
        unint64_t v11 = sub_1DD2E73BC();
        uint64_t v12 = v11;
        if (v11 > 0xFFFFFFFFFFFFFF88) {
          return v12;
        }
        goto LABEL_14;
      }
      return -72;
    }
    if (v10 < 0xF2)
    {
      if ((v10 - 126) >> 1 >= a6) {
        return -72;
      }
      unint64_t v11 = v10 - 127;
      if (v10 == 127)
      {
        *(_DWORD *)(a2 + 64) = 0;
        *(_OWORD *)(a2 + 32) = 0u;
        *(_OWORD *)(a2 + 48) = 0u;
        *(_OWORD *)a2 = 0u;
        *(_OWORD *)(a2 + 16) = 0u;
        return -20;
      }
      uint64_t v14 = 0;
      uint64_t v15 = a5 + 1;
      do
      {
        uint64_t v16 = (char *)a1 + v14;
        *uint64_t v16 = *v15 >> 4;
        char v17 = *v15++;
        v16[1] = v17 & 0xF;
        v14 += 2;
      }
      while (v11 > v14);
      unint64_t v10 = (v10 - 126) >> 1;
    }
    else
    {
      unint64_t v11 = dword_1DD323EF0[v10 - 242];
      *(void *)&long long v13 = 0x101010101010101;
      *((void *)&v13 + 1) = 0x101010101010101;
      a1[14] = v13;
      a1[15] = v13;
      a1[12] = v13;
      a1[13] = v13;
      a1[10] = v13;
      a1[11] = v13;
      a1[8] = v13;
      a1[9] = v13;
      a1[6] = v13;
      a1[7] = v13;
      a1[4] = v13;
      a1[5] = v13;
      a1[2] = v13;
      a1[3] = v13;
      *a1 = v13;
      a1[1] = v13;
      unint64_t v10 = 0;
    }
LABEL_14:
    *(_DWORD *)(a2 + 64) = 0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    if (v11)
    {
      uint64_t v18 = 0;
      unsigned int v19 = 0;
      unsigned int v20 = 1;
      while (1)
      {
        unint64_t v21 = *((unsigned __int8 *)a1 + v18);
        if (v21 > 0xF) {
          break;
        }
        ++*(_DWORD *)(a2 + 4 * v21);
        v19 += 1 << *((unsigned char *)a1 + v18) >> 1;
        uint64_t v18 = v20;
        if (v11 <= v20++)
        {
          if (!v19) {
            return -20;
          }
          unsigned int v23 = __clz(v19);
          if ((v23 ^ 0x1F) > 0xF) {
            return -20;
          }
          *a4 = 32 - v23;
          unsigned int v24 = (2 << (v23 ^ 0x1F)) - v19;
          unsigned int v25 = __clz(v24) ^ 0x1F;
          if (1 << v25 != v24) {
            return -20;
          }
          unsigned int v26 = v25 + 1;
          *((unsigned char *)a1 + v11) = v26;
          ++*(_DWORD *)(a2 + 4 * v26);
          unsigned int v27 = *(_DWORD *)(a2 + 4);
          uint64_t v12 = -20;
          if (v27 >= 2 && (v27 & 1) == 0)
          {
            *a3 = v11 + 1;
            return v10 + 1;
          }
          return v12;
        }
      }
    }
    return -20;
  }
  return -72;
}

unint64_t sub_1DD2E7854(unsigned char *a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4, unsigned __int16 *a5)
{
  int v8 = *a5;
  long long v11 = 0u;
  long long v12 = 0u;
  unint64_t result = sub_1DD2E78E0((uint64_t)&v11, a3, a4);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    sub_1DD2E79EC(a1, (uint64_t)&v11, (unint64_t)&a1[a2], (uint64_t)(a5 + 1), v8);
    if (DWORD2(v11) == 64 && (void)v12 == *((void *)&v12 + 1)) {
      return a2;
    }
    else {
      return -20;
    }
  }
  return result;
}

uint64_t sub_1DD2E78E0(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  if (a3)
  {
    *(void *)(a1 + 24) = a2;
    if (a3 < 8)
    {
      *(void *)(a1 + 16) = a2;
      uint64_t v4 = *a2;
      *(void *)a1 = v4;
      switch(a3)
      {
        case 2uLL:
          goto LABEL_12;
        case 3uLL:
          goto LABEL_11;
        case 4uLL:
          goto LABEL_10;
        case 5uLL:
          goto LABEL_9;
        case 6uLL:
          goto LABEL_8;
        case 7uLL:
          v4 |= (unint64_t)a2[6] << 48;
          *(void *)a1 = v4;
LABEL_8:
          v4 += (unint64_t)a2[5] << 40;
          *(void *)a1 = v4;
LABEL_9:
          v4 += (unint64_t)a2[4] << 32;
          *(void *)a1 = v4;
LABEL_10:
          v4 += (unint64_t)a2[3] << 24;
          *(void *)a1 = v4;
LABEL_11:
          v4 += (unint64_t)a2[2] << 16;
          *(void *)a1 = v4;
LABEL_12:
          *(void *)a1 = v4 + ((unint64_t)a2[1] << 8);
          break;
        default:
          break;
      }
      if (a2[a3 - 1])
      {
        unsigned int v3 = __clz(a2[a3 - 1]) - 8 * a3 + 41;
        goto LABEL_15;
      }
    }
    else
    {
      *(void *)(a1 + 16) = &a2[a3 - 8];
      *(void *)a1 = *(void *)&a2[a3 - 8];
      if (a2[a3 - 1])
      {
        unsigned int v3 = __clz(a2[a3 - 1]) - 23;
LABEL_15:
        *(_DWORD *)(a1 + 8) = v3;
        return a3;
      }
    }
    return -1;
  }
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return -72;
}

uint64_t sub_1DD2E79EC(unsigned char *a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  if (!sub_1DD2E4328(a2) && a3 - 4 >= (unint64_t)a1)
  {
    int v10 = -a5 & 0x3F;
    do
    {
      int v11 = *(_DWORD *)(a2 + 8);
      long long v12 = (char *)(a4 + 2 * (*(void *)a2 << v11 >> v10));
      char v13 = *v12;
      *(_DWORD *)(a2 + 8) = v11 + v12[1];
      *a1 = v13;
      int v14 = *(_DWORD *)(a2 + 8);
      uint64_t v15 = (char *)(a4 + 2 * (*(void *)a2 << v14 >> v10));
      char v16 = *v15;
      *(_DWORD *)(a2 + 8) = v14 + v15[1];
      a1[1] = v16;
      int v17 = *(_DWORD *)(a2 + 8);
      uint64_t v18 = (char *)(a4 + 2 * (*(void *)a2 << v17 >> v10));
      char v19 = *v18;
      *(_DWORD *)(a2 + 8) = v17 + v18[1];
      a1[2] = v19;
      int v20 = *(_DWORD *)(a2 + 8);
      unint64_t v21 = (char *)(a4 + 2 * (*(void *)a2 << v20 >> v10));
      char v22 = *v21;
      *(_DWORD *)(a2 + 8) = v20 + v21[1];
      a1[3] = v22;
      a1 += 4;
    }
    while (!sub_1DD2E4328(a2) && (unint64_t)a1 <= a3 - 4);
  }
  for (uint64_t result = sub_1DD2E4328(a2); !result && (unint64_t)a1 < a3; uint64_t result = sub_1DD2E4328(a2))
  {
    int v24 = *(_DWORD *)(a2 + 8);
    unsigned int v25 = (char *)(a4 + 2 * (*(void *)a2 << v24 >> (-(char)a5 & 0x3F)));
    char v26 = *v25;
    *(_DWORD *)(a2 + 8) = v24 + v25[1];
    *a1++ = v26;
  }
  if ((unint64_t)a1 < a3)
  {
    unint64_t v27 = a3 - (void)a1;
    do
    {
      int v28 = *(_DWORD *)(a2 + 8);
      uint64_t v29 = (char *)(a4 + 2 * (*(void *)a2 << v28 >> (-(char)a5 & 0x3F)));
      char v30 = *v29;
      *(_DWORD *)(a2 + 8) = v28 + v29[1];
      *a1++ = v30;
      --v27;
    }
    while (v27);
  }
  return result;
}

unint64_t sub_1DD2E7BA8()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  unint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = (unsigned char *)v0;
  v10[1024] = *MEMORY[0x1E4F143B8];
  bzero(v10, 0x2000uLL);
  unsigned __int16 v9 = 12;
  unint64_t result = sub_1DD2E7510(&v9, v4, v2);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    if (v2 <= result) {
      return -72;
    }
    else {
      return sub_1DD2E7854(v7, v6, (unsigned __int8 *)&v4[result], v2 - result, &v9);
    }
  }
  return result;
}

unint64_t sub_1DD2E7C88(unsigned char *a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4, unsigned __int16 *a5)
{
  if (a4 < 0xA) {
    return -20;
  }
  uint64_t v90 = v5;
  uint64_t v91 = v6;
  uint64_t v8 = (uint64_t)(a5 + 1);
  int v9 = *a5;
  long long v88 = 0u;
  long long v89 = 0u;
  long long v86 = 0u;
  long long v87 = 0u;
  long long v84 = 0u;
  long long v85 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  uint64_t v10 = *(unsigned __int16 *)a3;
  unint64_t v11 = *((unsigned __int16 *)a3 + 1);
  unint64_t v12 = *((unsigned __int16 *)a3 + 2);
  unint64_t v13 = v10 + v11 + v12 + 6;
  unint64_t v14 = a4 - v13;
  if (a4 < v13) {
    return -20;
  }
  int v17 = (unsigned __int16 *)(a3 + 6);
  unint64_t result = sub_1DD2E78E0((uint64_t)&v88, a3 + 6, *(unsigned __int16 *)a3);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    uint64_t v18 = (unsigned __int8 *)v17 + v10;
    unint64_t result = sub_1DD2E78E0((uint64_t)&v86, v18, v11);
    if (result <= 0xFFFFFFFFFFFFFF88)
    {
      char v19 = &v18[v11];
      unint64_t result = sub_1DD2E78E0((uint64_t)&v84, v19, v12);
      if (result <= 0xFFFFFFFFFFFFFF88)
      {
        unint64_t result = sub_1DD2E78E0((uint64_t)&v82, &v19[v12], v14);
        if (result <= 0xFFFFFFFFFFFFFF88)
        {
          unint64_t v20 = (unint64_t)&a1[a2];
          unint64_t v21 = a2 + 3;
          uint64_t v79 = &a1[(unint64_t)(a2 + 3) >> 2];
          char v22 = &v79[((unint64_t)(a2 + 3) >> 2) + ((unint64_t)(a2 + 3) >> 2)];
          int v23 = sub_1DD2E4328((uint64_t)&v88);
          int v24 = sub_1DD2E4328((uint64_t)&v86) | v23;
          int v25 = sub_1DD2E4328((uint64_t)&v84);
          unint64_t v78 = (unint64_t)v22;
          if (v24 | v25 | sub_1DD2E4328((uint64_t)&v82)
            || (unint64_t v81 = v20 - 7, (unint64_t)v22 >= v20 - 7))
          {
            unint64_t v68 = (unint64_t)&a1[(unint64_t)(a2 + 3) >> 2];
            unint64_t v69 = (unint64_t)&v79[(unint64_t)(a2 + 3) >> 2];
            unint64_t v67 = (unsigned char *)v68;
            unint64_t v66 = (unsigned char *)v69;
          }
          else
          {
            uint64_t v77 = &a1[a2];
            unint64_t v26 = v21 >> 2;
            int v27 = -v9 & 0x3F;
            uint64_t v80 = 3 * (v21 >> 2);
            uint64_t v28 = 2 * (v21 >> 2);
            do
            {
              uint64_t v29 = &a1[v80];
              char v30 = &a1[v28];
              int v31 = &a1[v26];
              uint64_t v32 = v88;
              uint64_t v33 = (unsigned char *)(v8 + 2 * ((void)v88 << SBYTE8(v88) >> v27));
              int v34 = DWORD2(v88) + v33[1];
              *a1 = *v33;
              uint64_t v35 = v86;
              uint64_t v36 = (unsigned char *)(v8 + 2 * ((void)v86 << SBYTE8(v86) >> v27));
              int v37 = DWORD2(v86) + v36[1];
              *int v31 = *v36;
              uint64_t v38 = v84;
              uint64_t v39 = (char *)(v8 + 2 * ((void)v84 << SBYTE8(v84) >> v27));
              char v40 = *v39;
              LODWORD(v39) = DWORD2(v84) + v39[1];
              *char v30 = v40;
              uint64_t v41 = v82;
              uint64_t v42 = (unsigned char *)(v8 + 2 * ((void)v82 << SBYTE8(v82) >> v27));
              int v43 = DWORD2(v82) + v42[1];
              *uint64_t v29 = *v42;
              uint64_t v44 = (unsigned char *)(v8 + 2 * ((unint64_t)(v32 << v34) >> v27));
              int v45 = v34 + v44[1];
              a1[1] = *v44;
              uint64_t v46 = (unsigned char *)(v8 + 2 * ((unint64_t)(v35 << v37) >> v27));
              int v47 = v37 + v46[1];
              v31[1] = *v46;
              uint64_t v48 = (unsigned char *)(v8 + 2 * ((unint64_t)(v38 << (char)v39) >> v27));
              LODWORD(v39) = v39 + v48[1];
              v30[1] = *v48;
              uint64_t v49 = (unsigned char *)(v8 + 2 * ((unint64_t)(v41 << v43) >> v27));
              int v50 = v43 + v49[1];
              v29[1] = *v49;
              uint64_t v51 = (unsigned char *)(v8 + 2 * ((unint64_t)(v32 << v45) >> v27));
              int v52 = v45 + v51[1];
              a1[2] = *v51;
              uint64_t v53 = (unsigned char *)(v8 + 2 * ((unint64_t)(v35 << v47) >> v27));
              int v54 = v47 + v53[1];
              v31[2] = *v53;
              char v55 = (unsigned char *)(v8 + 2 * ((unint64_t)(v38 << (char)v39) >> v27));
              LODWORD(v39) = v39 + v55[1];
              uint64_t v30[2] = *v55;
              uint64_t v56 = (unsigned char *)(v8 + 2 * ((unint64_t)(v41 << v50) >> v27));
              int v57 = v50 + v56[1];
              v29[2] = *v56;
              int v58 = (unsigned char *)(v8 + 2 * ((unint64_t)(v32 << v52) >> v27));
              LOBYTE(v56) = *v58;
              DWORD2(v88) = v52 + v58[1];
              uint64_t v59 = a1 + 4;
              a1[3] = (_BYTE)v56;
              char v60 = (unsigned char *)(v8 + 2 * ((unint64_t)(v35 << v54) >> v27));
              LOBYTE(v35) = *v60;
              DWORD2(v86) = v54 + v60[1];
              v31[3] = v35;
              uint64_t v61 = (unsigned char *)(v8 + 2 * ((unint64_t)(v38 << (char)v39) >> v27));
              LOBYTE(v60) = *v61;
              DWORD2(v84) = v39 + v61[1];
              v30[3] = (_BYTE)v60;
              uint64_t v62 = (unsigned char *)(v8 + 2 * ((unint64_t)(v41 << v57) >> v27));
              LOBYTE(v61) = *v62;
              DWORD2(v82) = v57 + v62[1];
              v29[3] = (_BYTE)v61;
              int v63 = sub_1DD2E4328((uint64_t)&v88);
              int v64 = sub_1DD2E4328((uint64_t)&v86) | v63;
              int v65 = sub_1DD2E4328((uint64_t)&v84);
              if (v64 | v65 | sub_1DD2E4328((uint64_t)&v82)) {
                break;
              }
              a1 = v59;
            }
            while ((unint64_t)(v29 + 4) < v81);
            char v22 = &v59[3 * v26];
            unint64_t v66 = &v59[2 * v26];
            unint64_t v67 = &v59[v26];
            a1 = v59;
            unint64_t v20 = (unint64_t)v77;
            unint64_t v68 = (unint64_t)v79;
            unint64_t v69 = (unint64_t)&v79[(unint64_t)(a2 + 3) >> 2];
          }
          unint64_t result = -20;
          if ((unint64_t)a1 <= v68 && (unint64_t)v67 <= v69 && (unint64_t)v66 <= v78)
          {
            sub_1DD2E79EC(a1, (uint64_t)&v88, v68, v8, v9);
            sub_1DD2E79EC(v67, (uint64_t)&v86, v69, v8, v9);
            sub_1DD2E79EC(v66, (uint64_t)&v84, v78, v8, v9);
            sub_1DD2E79EC(v22, (uint64_t)&v82, v20, v8, v9);
            if (DWORD2(v82) == 64
              && (void)v83 == *((void *)&v83 + 1)
              && DWORD2(v84) == 64
              && (void)v85 == *((void *)&v85 + 1)
              && DWORD2(v86) == 64
              && (void)v87 == *((void *)&v87 + 1)
              && DWORD2(v88) == 64
              && (void)v89 == *((void *)&v89 + 1))
            {
              return a2;
            }
            else
            {
              return -20;
            }
          }
        }
      }
    }
  }
  return result;
}

unint64_t sub_1DD2E8160()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  unint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = (unsigned char *)v0;
  v10[1024] = *MEMORY[0x1E4F143B8];
  bzero(v10, 0x2000uLL);
  unsigned __int16 v9 = 12;
  unint64_t result = sub_1DD2E7510(&v9, v4, v2);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    if (v2 <= result) {
      return -72;
    }
    else {
      return sub_1DD2E7C88(v7, v6, (unsigned __int8 *)&v4[result], v2 - result, &v9);
    }
  }
  return result;
}

unint64_t sub_1DD2E8240(unsigned int *a1, char *a2, unint64_t a3)
{
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  memset(v100, 0, 68);
  uint64_t v99 = 0;
  memset(v98, 0, sizeof(v98));
  unsigned int v3 = a1 + 1;
  unsigned int v4 = *a1;
  if (*a1 > 0x10) {
    return -44;
  }
  uint64_t v65 = 0;
  unint64_t result = sub_1DD2E7648(v101, (uint64_t)v100, &v65, (_DWORD *)&v65 + 1, a2, a3);
  if (result > 0xFFFFFFFFFFFFFF88) {
    return result;
  }
  unsigned int v7 = v4 - HIDWORD(v65);
  if (v4 < HIDWORD(v65)) {
    return -44;
  }
  int v8 = 0;
  int v9 = HIDWORD(v65) + 1;
  while (!v100[HIDWORD(v65) + v8--])
    ;
  int v11 = 0;
  unsigned int v12 = HIDWORD(v65) + v8;
  uint64_t v13 = (HIDWORD(v65) + v8 + 2);
  if ((HIDWORD(v65) + v8) <= 0xFFFFFFFD)
  {
    int v14 = 0;
    uint64_t v15 = &v100[1];
    char v16 = &v98[2];
    uint64_t v17 = v13 - 1;
    do
    {
      int v18 = *v15++;
      int v11 = v18 + v14;
      *v16++ = v14;
      v14 += v18;
      --v17;
    }
    while (v17);
  }
  v98[1] = v11;
  uint64_t v19 = v65;
  if (v65)
  {
    uint64_t v20 = 0;
    do
    {
      uint64_t v21 = *((unsigned __int8 *)v101 + v20);
      uint64_t v22 = v98[v21 + 1];
      v98[v21 + 1] = v22 + 1;
      int v23 = (char *)&v100[20] + 2 * v22;
      *int v23 = v20;
      v23[1] = v21;
      ++v20;
    }
    while (v19 != v20);
  }
  long long v96 = 0u;
  long long v97 = 0u;
  long long v94 = 0u;
  long long v95 = 0u;
  long long v92 = 0u;
  long long v93 = 0u;
  long long v90 = 0u;
  long long v91 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  long long v86 = 0u;
  long long v87 = 0u;
  long long v84 = 0u;
  long long v85 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  long long v80 = 0u;
  long long v81 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  v98[1] = 0;
  if (v12 <= 0xFFFFFFFD)
  {
    int v24 = 0;
    int v25 = &v100[1];
    unint64_t v26 = (_DWORD *)&v66 + 1;
    uint64_t v27 = v13 - 1;
    do
    {
      int v28 = *v25++;
      *v26++ = v24;
      v24 += v28 << v7++;
      --v27;
    }
    while (v27);
  }
  unsigned int v29 = -v8;
  if (-v8 < v4 + v8 + 1)
  {
    int v30 = v4 + v8 + 1;
    unsigned int v31 = -v8;
    uint64_t v32 = 17 * v31;
    uint64_t v33 = v13 - 1;
    do
    {
      if (v12 <= 0xFFFFFFFD)
      {
        uint64_t v34 = v33;
        uint64_t v35 = (_DWORD *)&v66 + 1;
        do
        {
          v35[v32] = *v35 >> v31;
          ++v35;
          --v34;
        }
        while (v34);
      }
      ++v31;
      v32 += 17;
    }
    while (v30 != v31);
  }
  v102[1] = v67;
  v102[2] = v68;
  v102[3] = v69;
  int v103 = v70;
  v102[0] = v66;
  if (v11)
  {
    uint64_t v36 = 0;
    unsigned int v37 = v9 - v4;
    int v64 = a1 + 1;
    do
    {
      uint64_t v38 = (unsigned __int8 *)&v100[20] + 2 * v36;
      int v39 = *v38;
      uint64_t v40 = v38[1];
      unsigned int v41 = v9 - v40;
      uint64_t v42 = *((unsigned int *)v102 + v40);
      unsigned int v43 = v4 - (v9 - v40);
      int v44 = 1 << (v4 - (v9 - v40));
      if (v43 >= v29)
      {
        uint64_t v48 = (char *)&v66 + 68 * v41;
        long long v49 = *(_OWORD *)v48;
        v104[1] = *((_OWORD *)v48 + 1);
        long long v50 = *((_OWORD *)v48 + 3);
        v104[2] = *((_OWORD *)v48 + 2);
        LODWORD(v51) = v37 + v41;
        if ((int)(v37 + v41) <= 1) {
          uint64_t v51 = 1;
        }
        else {
          uint64_t v51 = v51;
        }
        uint64_t v52 = v98[v51];
        v104[3] = v50;
        int v105 = *((_DWORD *)v48 + 16);
        v104[0] = v49;
        if (v51 >= 2)
        {
          uint64_t v53 = *((unsigned int *)v104 + v51);
          if (v53)
          {
            int v54 = &v3[v42];
            do
            {
              *v54++ = v39 & 0xFF00FFFF | ((v9 - v40) << 16) | 0x1000000;
              --v53;
            }
            while (v53);
          }
        }
        if (v11 != v52)
        {
          uint64_t v55 = 0;
          uint64_t v56 = (char *)&v100[20] + 2 * v52;
          uint64_t v57 = (v11 - v52);
          do
          {
            int v58 = &v56[2 * v55];
            int v59 = *v58;
            uint64_t v60 = v58[1];
            unsigned int v61 = *((_DWORD *)v104 + v60);
            unsigned int v62 = (1 << (v43 - (v9 - v60))) + v61;
            unsigned int v63 = (v59 << 8) & 0xFF00FFFF | ((v9 - v60 + v41) << 16) | v39 | 0x2000000;
            do
              v3[v42 + v61++] = v63;
            while (v61 < v62);
            *((_DWORD *)v104 + v60) = v62;
            ++v55;
          }
          while (v55 != v57);
        }
        LODWORD(v45) = v44 + v42;
      }
      else
      {
        uint64_t v45 = (v44 + v42);
        if (v42 < v45)
        {
          uint64_t v46 = v45 - v42;
          int v47 = &v64[v42];
          do
          {
            *v47++ = v39 & 0xFF00FFFF | ((v9 - v40) << 16) | 0x1000000;
            --v46;
          }
          while (v46);
        }
      }
      *((_DWORD *)v102 + v40) = v45;
      ++v36;
    }
    while (v36 != v11);
  }
  return result;
}

unint64_t sub_1DD2E8658(_WORD *a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4, int *a5)
{
  int v8 = *a5;
  long long v11 = 0u;
  long long v12 = 0u;
  unint64_t result = sub_1DD2E78E0((uint64_t)&v11, a3, a4);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    sub_1DD2E86E4(a1, (uint64_t)&v11, (unint64_t)a1 + a2, (uint64_t)(a5 + 1), v8);
    if (DWORD2(v11) == 64 && (void)v12 == *((void *)&v12 + 1)) {
      return a2;
    }
    else {
      return -20;
    }
  }
  return result;
}

uint64_t sub_1DD2E86E4(_WORD *a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  if (!sub_1DD2E4328(a2) && a3 - 7 > (unint64_t)a1)
  {
    int v10 = -a5 & 0x3F;
    do
    {
      uint64_t v11 = a4 + 4 * (*(void *)a2 << *(_DWORD *)(a2 + 8) >> v10);
      *a1 = *(_WORD *)v11;
      int v12 = *(_DWORD *)(a2 + 8) + *(unsigned __int8 *)(v11 + 2);
      *(_DWORD *)(a2 + 8) = v12;
      uint64_t v13 = (_WORD *)((char *)a1 + *(unsigned __int8 *)(v11 + 3));
      uint64_t v14 = a4 + 4 * (*(void *)a2 << v12 >> v10);
      *uint64_t v13 = *(_WORD *)v14;
      int v15 = *(_DWORD *)(a2 + 8) + *(unsigned __int8 *)(v14 + 2);
      *(_DWORD *)(a2 + 8) = v15;
      char v16 = (_WORD *)((char *)v13 + *(unsigned __int8 *)(v14 + 3));
      uint64_t v17 = a4 + 4 * (*(void *)a2 << v15 >> v10);
      *char v16 = *(_WORD *)v17;
      int v18 = *(_DWORD *)(a2 + 8) + *(unsigned __int8 *)(v17 + 2);
      *(_DWORD *)(a2 + 8) = v18;
      uint64_t v19 = (_WORD *)((char *)v16 + *(unsigned __int8 *)(v17 + 3));
      uint64_t v20 = a4 + 4 * (*(void *)a2 << v18 >> v10);
      *uint64_t v19 = *(_WORD *)v20;
      *(_DWORD *)(a2 + 8) += *(unsigned __int8 *)(v20 + 2);
      a1 = (_WORD *)((char *)v19 + *(unsigned __int8 *)(v20 + 3));
    }
    while (!sub_1DD2E4328(a2) && (unint64_t)a1 < a3 - 7);
  }
  unint64_t v21 = a3 - 2;
  for (uint64_t result = sub_1DD2E4328(a2); !result && (unint64_t)a1 <= v21; uint64_t result = sub_1DD2E4328(a2))
  {
    uint64_t v23 = a4 + 4 * (*(void *)a2 << *(_DWORD *)(a2 + 8) >> (-(char)a5 & 0x3F));
    *a1 = *(_WORD *)v23;
    *(_DWORD *)(a2 + 8) += *(unsigned __int8 *)(v23 + 2);
    a1 = (_WORD *)((char *)a1 + *(unsigned __int8 *)(v23 + 3));
  }
  if ((unint64_t)a1 <= v21)
  {
    int v24 = *(_DWORD *)(a2 + 8);
    do
    {
      uint64_t v25 = a4 + 4 * (*(void *)a2 << v24 >> (-(char)a5 & 0x3F));
      *a1 = *(_WORD *)v25;
      int v24 = *(_DWORD *)(a2 + 8) + *(unsigned __int8 *)(v25 + 2);
      *(_DWORD *)(a2 + 8) = v24;
      a1 = (_WORD *)((char *)a1 + *(unsigned __int8 *)(v25 + 3));
    }
    while ((unint64_t)a1 <= v21);
  }
  if ((unint64_t)a1 < a3)
  {
    uint64_t v26 = *(void *)a2 << *(_DWORD *)(a2 + 8) >> -(char)a5;
    uint64_t v27 = (unsigned char *)(a4 + 4 * v26);
    *(unsigned char *)a1 = *v27;
    if (v27[3] == 1)
    {
      unsigned int v28 = *(_DWORD *)(a2 + 8) + v27[2];
    }
    else
    {
      unsigned int v29 = *(_DWORD *)(a2 + 8);
      if (v29 > 0x3F) {
        return result;
      }
      unsigned int v28 = v29 + *(unsigned __int8 *)(a4 + 4 * v26 + 2);
      if (v28 >= 0x40) {
        unsigned int v28 = 64;
      }
    }
    *(_DWORD *)(a2 + 8) = v28;
  }
  return result;
}

uint64_t sub_1DD2E8944(_WORD *a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4, int *a5)
{
  if (a4 < 0xA) {
    return -20;
  }
  uint64_t v5 = (uint64_t)(a5 + 1);
  int v6 = *a5;
  long long v97 = 0u;
  long long v98 = 0u;
  long long v95 = 0u;
  long long v96 = 0u;
  long long v93 = 0u;
  long long v94 = 0u;
  long long v91 = 0u;
  long long v92 = 0u;
  uint64_t v7 = *(unsigned __int16 *)a3;
  unint64_t v8 = *((unsigned __int16 *)a3 + 1);
  unint64_t v9 = *((unsigned __int16 *)a3 + 2);
  unint64_t v10 = v7 + v8 + v9 + 6;
  unint64_t v11 = a4 - v10;
  if (a4 < v10) {
    return -20;
  }
  char v16 = (unsigned __int16 *)(a3 + 6);
  unint64_t v12 = sub_1DD2E78E0((uint64_t)&v97, a3 + 6, *(unsigned __int16 *)a3);
  if (v12 <= 0xFFFFFFFFFFFFFF88)
  {
    uint64_t v17 = (unsigned __int8 *)v16 + v7;
    unint64_t v12 = sub_1DD2E78E0((uint64_t)&v95, v17, v8);
    if (v12 <= 0xFFFFFFFFFFFFFF88)
    {
      int v18 = &v17[v8];
      unint64_t v12 = sub_1DD2E78E0((uint64_t)&v93, v18, v9);
      if (v12 <= 0xFFFFFFFFFFFFFF88)
      {
        unint64_t v12 = sub_1DD2E78E0((uint64_t)&v91, &v18[v9], v11);
        if (v12 <= 0xFFFFFFFFFFFFFF88)
        {
          uint64_t v19 = (char *)a1 + a2;
          uint64_t v20 = (_WORD *)((char *)a1 + ((unint64_t)(a2 + 3) >> 2));
          unint64_t v21 = (_WORD *)((char *)v20 + ((unint64_t)(a2 + 3) >> 2));
          uint64_t v22 = (char *)v21 + ((unint64_t)(a2 + 3) >> 2);
          int v23 = sub_1DD2E4328((uint64_t)&v97);
          int v24 = sub_1DD2E4328((uint64_t)&v95) | v23;
          int v25 = sub_1DD2E4328((uint64_t)&v93);
          unint64_t v86 = (unint64_t)a1 + a2;
          unint64_t v87 = (unint64_t)v20;
          unint64_t v88 = (unint64_t)v21;
          unint64_t v89 = (unint64_t)v22;
          if (!(v24 | v25 | sub_1DD2E4328((uint64_t)&v91)))
          {
            unint64_t v90 = (unint64_t)(v19 - 7);
            if (v22 < v19 - 7)
            {
              int v26 = -v6 & 0x3F;
              do
              {
                uint64_t v27 = v97;
                int v28 = DWORD2(v97);
                uint64_t v29 = v5 + 4 * ((void)v97 << SBYTE8(v97) >> v26);
                *a1 = *(_WORD *)v29;
                int v30 = v28 + *(unsigned __int8 *)(v29 + 2);
                unsigned int v31 = (_WORD *)((char *)a1 + *(unsigned __int8 *)(v29 + 3));
                uint64_t v32 = v95;
                LODWORD(v29) = DWORD2(v95);
                uint64_t v33 = v5 + 4 * ((void)v95 << SBYTE8(v95) >> v26);
                *uint64_t v20 = *(_WORD *)v33;
                int v34 = v29 + *(unsigned __int8 *)(v33 + 2);
                uint64_t v35 = (_WORD *)((char *)v20 + *(unsigned __int8 *)(v33 + 3));
                uint64_t v36 = v93;
                LODWORD(v33) = DWORD2(v93);
                uint64_t v37 = v5 + 4 * ((void)v93 << SBYTE8(v93) >> v26);
                *unint64_t v21 = *(_WORD *)v37;
                int v38 = v33 + *(unsigned __int8 *)(v37 + 2);
                int v39 = (_WORD *)((char *)v21 + *(unsigned __int8 *)(v37 + 3));
                uint64_t v40 = v91;
                int v41 = DWORD2(v91);
                uint64_t v42 = v5 + 4 * ((void)v91 << SBYTE8(v91) >> v26);
                *(_WORD *)uint64_t v22 = *(_WORD *)v42;
                int v43 = v41 + *(unsigned __int8 *)(v42 + 2);
                int v44 = &v22[*(unsigned __int8 *)(v42 + 3)];
                uint64_t v45 = v5 + 4 * ((unint64_t)(v27 << v30) >> v26);
                *unsigned int v31 = *(_WORD *)v45;
                int v46 = v30 + *(unsigned __int8 *)(v45 + 2);
                uint64_t v47 = *(unsigned __int8 *)(v45 + 3);
                uint64_t v48 = v5 + 4 * ((unint64_t)(v32 << v34) >> v26);
                *uint64_t v35 = *(_WORD *)v48;
                int v49 = v34 + *(unsigned __int8 *)(v48 + 2);
                long long v50 = (_WORD *)((char *)v35 + *(unsigned __int8 *)(v48 + 3));
                uint64_t v51 = v5 + 4 * ((unint64_t)(v36 << v38) >> v26);
                *int v39 = *(_WORD *)v51;
                int v52 = v38 + *(unsigned __int8 *)(v51 + 2);
                uint64_t v53 = (_WORD *)((char *)v39 + *(unsigned __int8 *)(v51 + 3));
                uint64_t v54 = v5 + 4 * ((unint64_t)(v40 << v43) >> v26);
                *(_WORD *)int v44 = *(_WORD *)v54;
                int v55 = v43 + *(unsigned __int8 *)(v54 + 2);
                uint64_t v56 = &v44[*(unsigned __int8 *)(v54 + 3)];
                uint64_t v57 = (_WORD *)((char *)v31 + v47);
                uint64_t v58 = v5 + 4 * ((unint64_t)(v27 << v46) >> v26);
                *uint64_t v57 = *(_WORD *)v58;
                int v59 = v46 + *(unsigned __int8 *)(v58 + 2);
                uint64_t v60 = (_WORD *)((char *)v57 + *(unsigned __int8 *)(v58 + 3));
                uint64_t v61 = v5 + 4 * ((unint64_t)(v32 << v49) >> v26);
                *long long v50 = *(_WORD *)v61;
                int v62 = v49 + *(unsigned __int8 *)(v61 + 2);
                unsigned int v63 = (_WORD *)((char *)v50 + *(unsigned __int8 *)(v61 + 3));
                uint64_t v64 = v5 + 4 * ((unint64_t)(v36 << v52) >> v26);
                *uint64_t v53 = *(_WORD *)v64;
                int v65 = v52 + *(unsigned __int8 *)(v64 + 2);
                long long v66 = (_WORD *)((char *)v53 + *(unsigned __int8 *)(v64 + 3));
                uint64_t v67 = v5 + 4 * ((unint64_t)(v40 << v55) >> v26);
                *(_WORD *)uint64_t v56 = *(_WORD *)v67;
                int v68 = v55 + *(unsigned __int8 *)(v67 + 2);
                long long v69 = &v56[*(unsigned __int8 *)(v67 + 3)];
                uint64_t v70 = v5 + 4 * ((unint64_t)(v27 << v59) >> v26);
                *uint64_t v60 = *(_WORD *)v70;
                DWORD2(v97) = v59 + *(unsigned __int8 *)(v70 + 2);
                a1 = (_WORD *)((char *)v60 + *(unsigned __int8 *)(v70 + 3));
                uint64_t v71 = v5 + 4 * ((unint64_t)(v32 << v62) >> v26);
                *unsigned int v63 = *(_WORD *)v71;
                DWORD2(v95) = v62 + *(unsigned __int8 *)(v71 + 2);
                uint64_t v20 = (_WORD *)((char *)v63 + *(unsigned __int8 *)(v71 + 3));
                uint64_t v72 = v5 + 4 * ((unint64_t)(v36 << v65) >> v26);
                *long long v66 = *(_WORD *)v72;
                DWORD2(v93) = v65 + *(unsigned __int8 *)(v72 + 2);
                unint64_t v21 = (_WORD *)((char *)v66 + *(unsigned __int8 *)(v72 + 3));
                uint64_t v73 = v5 + 4 * ((unint64_t)(v40 << v68) >> v26);
                *(_WORD *)long long v69 = *(_WORD *)v73;
                DWORD2(v91) = v68 + *(unsigned __int8 *)(v73 + 2);
                uint64_t v22 = &v69[*(unsigned __int8 *)(v73 + 3)];
                int v74 = sub_1DD2E4328((uint64_t)&v97);
                int v75 = sub_1DD2E4328((uint64_t)&v95) | v74;
                int v76 = sub_1DD2E4328((uint64_t)&v93);
              }
              while (!(v75 | v76 | sub_1DD2E4328((uint64_t)&v91)) && (unint64_t)v22 < v90);
            }
          }
          unint64_t v12 = -20;
          if ((unint64_t)a1 <= v87 && (unint64_t)v20 <= v88 && (unint64_t)v21 <= v89)
          {
            sub_1DD2E86E4(a1, (uint64_t)&v97, v87, v5, v6);
            sub_1DD2E86E4(v20, (uint64_t)&v95, v88, v5, v6);
            sub_1DD2E86E4(v21, (uint64_t)&v93, v89, v5, v6);
            sub_1DD2E86E4(v22, (uint64_t)&v91, v86, v5, v6);
            if (DWORD2(v91) == 64
              && (void)v92 == *((void *)&v92 + 1)
              && DWORD2(v93) == 64
              && (void)v94 == *((void *)&v94 + 1)
              && DWORD2(v95) == 64
              && (void)v96 == *((void *)&v96 + 1)
              && DWORD2(v97) == 64
              && (void)v98 == *((void *)&v98 + 1))
            {
              return a2;
            }
          }
        }
      }
    }
  }
  return v12;
}

unint64_t sub_1DD2E8E3C()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  unint64_t v2 = v1;
  unsigned int v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = (_WORD *)v0;
  v10[2048] = *MEMORY[0x1E4F143B8];
  bzero(v10, 0x4000uLL);
  int v9 = 12;
  unint64_t result = sub_1DD2E8240((unsigned int *)&v9, v4, v2);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    if (v2 <= result) {
      return -72;
    }
    else {
      return sub_1DD2E8944(v7, v6, (unsigned __int8 *)&v4[result], v2 - result, &v9);
    }
  }
  return result;
}

uint64_t sub_1DD2E8F1C(void *a1, size_t __len, unsigned __int8 *__src, size_t a4)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (!__len) {
    return -70;
  }
  size_t v4 = __len;
  if (a4 > __len) {
    return -20;
  }
  if (a4 == __len)
  {
    memcpy(a1, __src, __len);
    return v4;
  }
  if (a4 == 1)
  {
    memset(a1, *__src, __len);
    return v4;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  do
  {
    unint64_t v8 = (char *)&unk_1DD323D70 + 24 * (16 * a4 / __len);
    *(unsigned int *)((char *)&v10 + v6) = *(_DWORD *)&v8[8 * v7] + *(_DWORD *)&v8[8 * v7 + 4] * (__len >> 8);
    ++v7;
    v6 += 4;
  }
  while (v6 != 12);
  int v9 = off_1F3877BB0[v11 + (v11 >> 4) < v10];
  return v9();
}

double sub_1DD2E905C()
{
  uint64_t v0 = malloc(0x25488uLL);
  if (v0)
  {
    v0[2694] = 5;
    double result = 0.0;
    *((_OWORD *)v0 + 1345) = 0u;
    *((_OWORD *)v0 + 1346) = 0u;
    *((_DWORD *)v0 + 1283) = 12;
    *(void *)((char *)v0 + 21588) = 0;
  }
  return result;
}

uint64_t sub_1DD2E90A4(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  if (a3 < 5) {
    return 5;
  }
  if (*(_DWORD *)a2 != -47205082) {
    return -10;
  }
  unint64_t v3 = *(void *)((char *)&unk_1DD323F28 + (((unint64_t)*(unsigned __int8 *)(a2 + 4) >> 3) & 0x18)) + 5;
  if (v3 <= a3)
  {
    *a1 = 0;
    a1[1] = 0;
    unint64_t v4 = *(unsigned __int8 *)(a2 + 4);
    *((_DWORD *)a1 + 2) = (v4 & 0xF) + 12;
    if ((v4 & 0x20) != 0)
    {
      return -14;
    }
    else
    {
      uint64_t v5 = v4 >> 6;
      switch(v4 >> 6)
      {
        case 1uLL:
          uint64_t v5 = *(unsigned __int8 *)(a2 + 5);
          break;
        case 2uLL:
          uint64_t v5 = *(unsigned __int16 *)(a2 + 5) + 256;
          break;
        case 3uLL:
          uint64_t v5 = *(void *)(a2 + 5);
          break;
        default:
          break;
      }
      unint64_t v3 = 0;
      *a1 = v5;
    }
  }
  return v3;
}

uint64_t sub_1DD2E9174(unsigned __int16 *a1, char *a2, uint64_t a3, unsigned __int8 *a4, unint64_t a5)
{
  if (a5 >> 17) {
    return -72;
  }
  if (a5 < 3) {
    return -20;
  }
  unsigned int v9 = *a4;
  switch(v9 >> 6)
  {
    case 1u:
      if ((v9 & 0x30) != 0x10) {
        return -20;
      }
      if (*((_DWORD *)a1 + 5398))
      {
        unsigned __int8 v20 = a4[1];
        unint64_t v21 = a4[2] | ((v20 & 3) << 8);
        unint64_t v18 = v21 + 3;
        if (v21 + 3 > a5) {
          return -20;
        }
        unint64_t v22 = ((unint64_t)(v9 & 0xF) << 6) | (v20 >> 2);
        int v23 = (unsigned __int8 *)(a1 + 10808);
        if (sub_1DD2E8658(a1 + 10808, v22, a4 + 3, v21, (int *)a1 + 1283) > 0xFFFFFFFFFFFFFF88) {
          return -20;
        }
        goto LABEL_31;
      }
      return -30;
    case 2u:
      int v24 = (v9 >> 4) & 3;
      if (v24 == 2)
      {
        unsigned int v25 = a4[1] | ((v9 & 0xF) << 8);
        uint64_t v26 = 2;
      }
      else if (v24 == 3)
      {
        unsigned int v25 = ((v9 & 0xF) << 16) | (a4[1] << 8) | a4[2];
        uint64_t v26 = 3;
      }
      else
      {
        unsigned int v25 = v9 & 0x1F;
        uint64_t v26 = 1;
      }
      unint64_t v22 = v25;
      unint64_t v18 = v26 + v25;
      if (v18 + 8 <= a5)
      {
        int v23 = &a4[v26];
        *((void *)a1 + 2700) = &a4[v26];
        *((void *)a1 + 2701) = v25;
      }
      else
      {
        if (v18 > a5) {
          return -20;
        }
        int v23 = (unsigned __int8 *)(a1 + 10808);
        memcpy(a1 + 10808, &a4[v26], v25);
LABEL_31:
        *((void *)a1 + 2700) = v23;
        *((void *)a1 + 2701) = v22;
        *(void *)&v23[v22] = 0;
      }
      goto LABEL_36;
    case 3u:
      int v27 = (v9 >> 4) & 3;
      if (v27 == 2)
      {
        unsigned int v28 = a4[1] | ((v9 & 0xF) << 8);
        unsigned int v29 = 2;
      }
      else if (v27 == 3)
      {
        unint64_t v5 = -20;
        if (a5 < 4) {
          return v5;
        }
        unsigned int v28 = ((v9 & 0xF) << 16) | (a4[1] << 8) | a4[2];
        if (v28 > 0x20000) {
          return v5;
        }
        unsigned int v29 = 3;
      }
      else
      {
        unsigned int v28 = v9 & 0x1F;
        unsigned int v29 = 1;
      }
      unint64_t v22 = v28;
      int v23 = (unsigned __int8 *)(a1 + 10808);
      memset(a1 + 10808, a4[v29], v28 + 8);
      *((void *)a1 + 2700) = v23;
      *((void *)a1 + 2701) = v22;
      unint64_t v18 = v29 + 1;
      goto LABEL_36;
    default:
      if (a5 < 5) {
        return -20;
      }
      int v13 = (v9 >> 4) & 3;
      if (v13 == 2)
      {
        unsigned int v115 = a4[2];
        size_t v17 = a4[3] | ((v115 & 0x3F) << 8);
        unint64_t v18 = v17 + 4;
        if (v17 + 4 > a5) {
          return -20;
        }
        size_t v16 = ((v9 & 0xF) << 10) | (4 * a4[1]) | (v115 >> 6);
        uint64_t v19 = 4;
        goto LABEL_119;
      }
      if (v13 == 3)
      {
        int v14 = ((v9 & 0xF) << 14) | (a4[1] << 6);
        unsigned int v15 = a4[2];
        size_t v16 = v14 | (v15 >> 2);
        unint64_t v5 = -20;
        if (v16 > 0x20000) {
          return v5;
        }
        size_t v17 = (unsigned __int16)(a4[3] << 8) | ((v15 & 3) << 16) | a4[4];
        unint64_t v18 = v17 + 5;
        if (v17 + 5 > a5) {
          return v5;
        }
        uint64_t v19 = 5;
        goto LABEL_119;
      }
      unsigned int v116 = a4[1];
      size_t v17 = a4[2] | ((v116 & 3) << 8);
      unint64_t v18 = v17 + 3;
      if (v17 + 3 > a5) {
        return -20;
      }
      size_t v16 = (v116 >> 2) & 0xFFFFFC3F | ((v9 & 0xF) << 6);
      if ((v9 & 0x10) == 0)
      {
        uint64_t v19 = 3;
LABEL_119:
        unint64_t v117 = sub_1DD2E8F1C(a1 + 10808, v16, &a4[v19], v17);
        goto LABEL_120;
      }
      unint64_t v117 = sub_1DD2E7BA8();
LABEL_120:
      if (v117 > 0xFFFFFFFFFFFFFF88) {
        return -20;
      }
      *((void *)a1 + 2700) = a1 + 10808;
      *((void *)a1 + 2701) = v16;
      *(void *)((char *)a1 + v16 + 21616) = 0;
      int v23 = (unsigned __int8 *)*((void *)a1 + 2700);
      unint64_t v22 = *((void *)a1 + 2701);
LABEL_36:
      uint64_t v30 = a5 - v18;
      if (a5 == v18) {
        return -72;
      }
      unsigned int v31 = &a4[v18];
      uint64_t v32 = &a2[a3];
      uint64_t v33 = &v23[v22];
      int v34 = (int *)(a1 + 10796);
      uint64_t v36 = v31 + 1;
      int v35 = *v31;
      if (!*v31)
      {
        *int v34 = 0;
        uint64_t v58 = a2;
        goto LABEL_107;
      }
      int v37 = *v34;
      if ((v35 & 0x80) != 0)
      {
        if (v35 == 255)
        {
          if (v30 < 3) {
            return -72;
          }
          uint64_t v36 = v31 + 3;
          int v35 = *(unsigned __int16 *)(v31 + 1) + 32512;
        }
        else
        {
          if (v30 < 2) {
            return -72;
          }
          uint64_t v36 = v31 + 2;
          int v35 = (v31[1] | (v35 << 8)) - 0x8000;
        }
      }
      unint64_t v38 = (unint64_t)&a4[a5];
      if ((unint64_t)(v36 + 4) > v38) {
        return -72;
      }
      int v125 = v35;
      unint64_t v121 = *((void *)a1 + 2693);
      uint64_t v122 = *((void *)a1 + 2692);
      int v123 = (char *)*((void *)a1 + 2691);
      unint64_t v124 = v32;
      int v120 = v33;
      unsigned int v41 = *v36;
      int v39 = (unsigned int *)(v36 + 1);
      unsigned int v40 = v41;
      unint64_t v42 = sub_1DD2EA1FC((uint64_t)a1, v41 >> 6, 0x23u, 9u, v39, v38 - (void)v39, (uint64_t)&unk_1DD323F48, 6u, v37);
      if (v42 > 0xFFFFFFFFFFFFFF88) {
        return -20;
      }
      int v43 = (char *)v39 + v42;
      unint64_t v44 = sub_1DD2EA1FC((uint64_t)(a1 + 1026), (v40 >> 4) & 3, 0x1Cu, 8u, (unsigned int *)((char *)v39 + v42), v38 - ((void)v39 + v42), (uint64_t)&unk_1DD323F90, 5u, v37);
      if (v44 > 0xFFFFFFFFFFFFFF88) {
        return -20;
      }
      uint64_t v45 = (unsigned int *)&v43[v44];
      unint64_t v46 = sub_1DD2EA1FC((uint64_t)(a1 + 1540), (v40 >> 2) & 3, 0x34u, 9u, v45, v38 - (void)v45, (uint64_t)&unk_1DD323FCA, 6u, v37);
      if (v46 > 0xFFFFFFFFFFFFFF88) {
        return -20;
      }
      unint64_t v5 = (char *)v45 + v46 - (char *)v31;
      if (v5 > 0xFFFFFFFFFFFFFF88) {
        return v5;
      }
      *int v34 = 0;
      if (!v125)
      {
        uint64_t v58 = a2;
        uint64_t v33 = v120;
        uint64_t v32 = v124;
        goto LABEL_107;
      }
      long long v128 = 0u;
      long long v129 = 0u;
      uint64_t v47 = (char *)v45 + v46;
      long long v127 = 0u;
      memset(v126, 0, sizeof(v126));
      memset_pattern16(v130, &unk_1DD3243B0, 0x18uLL);
      uint64_t v33 = v120;
      if ((unint64_t)sub_1DD2E78E0((uint64_t)v126, &v31[v5], v38 - (void)v47) > 0xFFFFFFFFFFFFFF88) {
        return -20;
      }
      int v48 = *a1;
      uint64_t v49 = *(void *)&v126[0] << SBYTE8(v126[0]) >> 1 >> (63 - v48);
      DWORD2(v126[0]) += v48;
      *(void *)&long long v127 = v49;
      sub_1DD2E4328((uint64_t)v126);
      int v50 = a1[1026];
      uint64_t v51 = *(void *)&v126[0] << SBYTE8(v126[0]) >> 1 >> (63 - v50);
      DWORD2(v126[0]) += v50;
      *((void *)&v127 + 1) = a1 + 2;
      *(void *)&long long v128 = v51;
      sub_1DD2E4328((uint64_t)v126);
      int v52 = a1 + 1028;
      uint64_t v53 = a1 + 1540;
      int v54 = *v53;
      unint64_t v55 = *(void *)&v126[0] << SBYTE8(v126[0]) >> 1;
      DWORD2(v126[0]) += v54;
      *((void *)&v128 + 1) = v52;
      *(void *)&long long v129 = v55 >> (63 - v54);
      sub_1DD2E4328((uint64_t)v126);
      unint64_t v119 = (unint64_t)(v124 - 8);
      *((void *)&v129 + 1) = v53 + 2;
      uint64_t v56 = v23;
      unint64_t v57 = (unint64_t)a2;
      break;
  }
  while (1)
  {
    uint64_t v58 = (char *)v57;
    int v23 = v56;
    int v59 = sub_1DD2E4328((uint64_t)v126);
    int v60 = v125 - 1;
    if (v59 == 3 || v125 == 0) {
      break;
    }
    uint64_t v62 = *((void *)&v127 + 1);
    uint64_t v63 = v127;
    uint64_t v64 = *(unsigned __int8 *)(*((void *)&v127 + 1) + 4 * v127 + 2);
    uint64_t v65 = *((void *)&v129 + 1);
    uint64_t v66 = v129;
    uint64_t v67 = *(unsigned __int8 *)(*((void *)&v129 + 1) + 4 * v129 + 2);
    uint64_t v68 = *((void *)&v128 + 1);
    uint64_t v69 = v128;
    int v70 = *(unsigned __int8 *)(*((void *)&v128 + 1) + 4 * v128 + 2);
    if (*(unsigned char *)(*((void *)&v128 + 1) + 4 * v128 + 2))
    {
      uint64_t v71 = dword_1DD3242FC[*(unsigned __int8 *)(*((void *)&v128 + 1) + 4 * v128 + 2)];
      uint64_t v72 = *(void *)&v126[0] << SBYTE8(v126[0]) >> 1 >> (63 - v70);
      DWORD2(v126[0]) += v70;
      unint64_t v73 = v72 + v71;
      unint64_t v74 = v73 - 2;
      if (v73 > 2)
      {
        *(_OWORD *)&v130[8] = *(_OWORD *)v130;
LABEL_64:
        *(void *)uint64_t v130 = v74;
        goto LABEL_66;
      }
    }
    else
    {
      unint64_t v73 = 0;
    }
    if (v73 != 2 && v64 == 0) {
      unint64_t v73 = 1 - v73;
    }
    if (v73)
    {
      unint64_t v74 = *(void *)&v130[8 * v73];
      if (v73 != 1) {
        *(void *)&v130[16] = *(void *)&v130[8];
      }
      *(void *)&v130[8] = *(void *)v130;
      goto LABEL_64;
    }
    unint64_t v74 = *(void *)v130;
LABEL_66:
    int v76 = dword_1DD3240C4[v67];
    if (v67 < 0x20)
    {
      uint64_t v77 = 0;
    }
    else
    {
      uint64_t v77 = *(void *)&v126[0] << SBYTE8(v126[0]) >> 1 >> (63 - v76);
      DWORD2(v126[0]) += v76;
    }
    int v78 = dword_1DD324034[v64];
    if (v64 < 0x10)
    {
      uint64_t v79 = 0;
    }
    else
    {
      uint64_t v79 = *(void *)&v126[0] << SBYTE8(v126[0]) >> 1 >> (63 - v78);
      DWORD2(v126[0]) += v78;
    }
    int v80 = dword_1DD324228[v67];
    uint64_t v81 = dword_1DD324198[v64];
    if ((v78 + v70 + v76) >= 0x20)
    {
      unint64_t v82 = v74;
      sub_1DD2E4328((uint64_t)v126);
      int v60 = v125 - 1;
      unint64_t v74 = v82;
      uint64_t v62 = *((void *)&v127 + 1);
      uint64_t v63 = v127;
      uint64_t v65 = *((void *)&v129 + 1);
      uint64_t v66 = v129;
      uint64_t v68 = *((void *)&v128 + 1);
      uint64_t v69 = v128;
    }
    size_t v83 = v77 + (v80 + 3);
    unint64_t v84 = v79 + v81;
    long long v85 = (unsigned __int16 *)(v62 + 4 * v63);
    uint64_t v86 = *v85;
    LODWORD(v85) = *((unsigned __int8 *)v85 + 3);
    uint64_t v87 = *(void *)&v126[0] << SBYTE8(v126[0]) >> 1 >> (63 - v85);
    DWORD2(v126[0]) += v85;
    *(void *)&long long v127 = v87 + v86;
    unint64_t v88 = (unsigned __int16 *)(v65 + 4 * v66);
    uint64_t v89 = *v88;
    LODWORD(v88) = *((unsigned __int8 *)v88 + 3);
    uint64_t v90 = *(void *)&v126[0] << SBYTE8(v126[0]) >> 1 >> (63 - v88);
    DWORD2(v126[0]) += v88;
    *(void *)&long long v129 = v90 + v89;
    long long v91 = (unsigned __int16 *)(v68 + 4 * v69);
    uint64_t v92 = *v91;
    LODWORD(v91) = *((unsigned __int8 *)v91 + 3);
    uint64_t v93 = *(void *)&v126[0] << SBYTE8(v126[0]) >> 1 >> (63 - v91);
    DWORD2(v126[0]) += v91;
    *(void *)&long long v128 = v93 + v92;
    unint64_t v94 = v79 + v81 + v83;
    if (v94 > v124 - v58) {
      return -70;
    }
    long long v95 = v124 - 8;
    if (v84 > v120 - v56) {
      return -20;
    }
    long long v96 = &v58[v84];
    unint64_t v5 = -70;
    if ((unint64_t)&v58[v84] > v119) {
      return v5;
    }
    unint64_t v57 = (unint64_t)&v58[v94];
    if (&v58[v94] > v124) {
      return v5;
    }
    v56 += v84;
    if (&v23[v84] > v120) {
      return -20;
    }
    int v125 = v60;
    unint64_t v5 = v94;
    long long v97 = &v96[-v74];
    do
    {
      uint64_t v98 = *(void *)v23;
      v23 += 8;
      *(void *)uint64_t v58 = v98;
      v58 += 8;
    }
    while (v58 < v96);
    if (v74 <= v96 - v123) {
      goto LABEL_87;
    }
    if (v74 > (unint64_t)&v96[-v122]) {
      return -20;
    }
    uint64_t v99 = v97 - v123;
    unint64_t v100 = (const void *)(v121 + v97 - v123);
    if ((unint64_t)v100 + v83 > v121)
    {
      unint64_t v118 = v74;
      size_t v101 = v83;
      memmove(v96, v100, v123 - v97);
      v96 -= v99;
      long long v95 = v124 - 8;
      if ((unint64_t)v96 > v119 || (size_t v83 = v99 + v101, v99 + v101 <= 2))
      {
        if ((unint64_t)v96 < v57)
        {
          uint64_t v111 = v123;
          do
          {
            char v112 = *v111++;
            *v96++ = v112;
          }
          while ((unint64_t)v96 < v57);
        }
        goto LABEL_104;
      }
      long long v97 = v123;
      unint64_t v74 = v118;
LABEL_87:
      if (v74 > 7)
      {
        *(void *)long long v96 = *(void *)v97;
      }
      else
      {
        uint64_t v102 = dword_1DD324390[v74];
        *long long v96 = *v97;
        v96[1] = v97[1];
        v96[2] = v97[2];
        v96[3] = v97[3];
        int v103 = &v97[dword_1DD324370[v74]];
        *((_DWORD *)v96 + 1) = *(_DWORD *)v103;
        long long v97 = &v103[-v102];
      }
      int v104 = v96 + 8;
      int v105 = v97 + 8;
      if (v57 <= (unint64_t)(v124 - 13))
      {
        do
        {
          uint64_t v110 = *(void *)v105;
          v105 += 8;
          *(void *)int v104 = v110;
          v104 += 8;
        }
        while (v104 < &v96[v83]);
      }
      else
      {
        if (v104 < v95)
        {
          int64_t v106 = v95 - v104;
          uint64_t v107 = (uint64_t *)v105;
          do
          {
            uint64_t v108 = *v107++;
            *(void *)int v104 = v108;
            v104 += 8;
          }
          while (v104 < v95);
          v105 += v106;
          int v104 = v95;
        }
        while ((unint64_t)v104 < v57)
        {
          char v109 = *v105++;
          *v104++ = v109;
        }
      }
      goto LABEL_104;
    }
    memmove(v96, v100, v83);
LABEL_104:
    if (v94 >= 0xFFFFFFFFFFFFFF89) {
      return v5;
    }
  }
  uint64_t v32 = v124;
  if (v125) {
    return -20;
  }
LABEL_107:
  size_t v113 = v33 - v23;
  if (v33 < v23) {
    return -20;
  }
  unint64_t v114 = &v58[v113];
  if (&v58[v113] > v32) {
    return -70;
  }
  if (v33 != v23)
  {
    memcpy(v58, v23, v113);
    uint64_t v58 = v114;
  }
  return v58 - a2;
}

uint64_t sub_1DD2E9BA0(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v23 = 0;
  if (a5 >= 8)
  {
    uint64_t v6 = *(void *)((char *)&unk_1DD323F28 + (((unint64_t)*(unsigned __int8 *)(a4 + 4) >> 3) & 0x18));
    unint64_t v7 = v6 + 5;
    if ((unint64_t)(v6 + 5) > 0xFFFFFFFFFFFFFF88) {
      return v6 + 5;
    }
    if (v6 + 8 <= a5)
    {
      if (sub_1DD2E90A4((uint64_t *)(a1 + 21568), a4, v7)) {
        return -20;
      }
      unint64_t v13 = a4 + a5;
      int v14 = (unsigned __int8 *)(a4 + v7);
      size_t v9 = sub_1DD2EA154((unsigned __int8 *)(a4 + v7), a5 - v7, (int *)&v23);
      if (v9 > 0xFFFFFFFFFFFFFF88) {
        return v9;
      }
      unsigned int v15 = &a2[a3];
      unint64_t v16 = a5 - v7;
      size_t v17 = a2;
      while (1)
      {
        unint64_t v18 = v16 - 3;
        BOOL v19 = v16 - 3 >= v9;
        unint64_t v16 = v16 - 3 - v9;
        if (!v19) {
          break;
        }
        unsigned __int8 v20 = (char *)(v14 + 3);
        if (v23 == 3)
        {
          if (v18) {
            return -72;
          }
          unint64_t v21 = 0;
        }
        else if (v23 == 1)
        {
          if (!v17 || v9 > v15 - v17)
          {
            if (v9) {
              return -70;
            }
            return v17 - a2;
          }
          memcpy(v17, v20, v9);
          unint64_t v21 = v9;
        }
        else
        {
          if (v23) {
            return -1;
          }
          unint64_t v21 = sub_1DD2E9174((unsigned __int16 *)a1, v17, v15 - v17, (unsigned __int8 *)v20, v9);
        }
        if (!v9) {
          return v17 - a2;
        }
        if (v21 > 0xFFFFFFFFFFFFFF88) {
          return v21;
        }
        v17 += v21;
        int v14 = (unsigned __int8 *)&v20[v9];
        size_t v9 = sub_1DD2EA154(v14, v13 - (void)v14, (int *)&v23);
        if (v9 >= 0xFFFFFFFFFFFFFF89) {
          return v9;
        }
      }
    }
  }
  return -72;
}

uint64_t sub_1DD2E9D58(void *a1, char *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_1DD2E9DF0((uint64_t)a1, a6, a7);
  uint64_t v12 = (char *)a1[2690];
  if (v12 != a2)
  {
    a1[2693] = v12;
    a1[2692] = &a2[a1[2691] - (void)v12];
    a1[2691] = a2;
    a1[2690] = a2;
  }
  return sub_1DD2E9BA0((uint64_t)a1, a2, a3, a4, a5);
}

uint64_t sub_1DD2E9DF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = 0;
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 21552) = 5;
  *(_DWORD *)(a1 + 5132) = 12;
  *(_OWORD *)(a1 + 21520) = 0u;
  *(_OWORD *)(a1 + 21536) = 0u;
  *(void *)(a1 + 21588) = 0;
  if (a2 && a3)
  {
    if (*(_DWORD *)a2 != -332356554)
    {
      *(void *)(a1 + 21536) = a2;
      *(void *)(a1 + 21528) = a2;
      goto LABEL_17;
    }
    uint64_t v7 = a2 + 4;
    unint64_t v8 = sub_1DD2E8240((unsigned int *)(a1 + 5132), (char *)(a2 + 4), a3 - 4);
    if (v8 <= 0xFFFFFFFFFFFFFF88)
    {
      unint64_t v9 = v8;
      uint64_t v10 = v7 + v8;
      unint64_t v11 = a3 - 4 - v8;
      unsigned int v23 = 0;
      unsigned int v24 = 28;
      unint64_t v12 = sub_1DD2E2504((uint64_t)v25, &v24, &v23, (unsigned int *)(v7 + v8), v11);
      if (v12 <= 0xFFFFFFFFFFFFFF88 && v23 <= 8)
      {
        unint64_t v13 = v12;
        if ((unint64_t)sub_1DD2E6D54((int *)(a1 + 2052), (uint64_t)v25, v24, v23) < 0xFFFFFFFFFFFFFF89)
        {
          uint64_t v14 = v10 + v13;
          unint64_t v15 = v11 - v13;
          unsigned int v23 = 0;
          unsigned int v24 = 52;
          unint64_t v16 = sub_1DD2E2504((uint64_t)v25, &v24, &v23, (unsigned int *)(v10 + v13), v15);
          if (v16 <= 0xFFFFFFFFFFFFFF88 && v23 <= 9)
          {
            unint64_t v17 = v16;
            if ((unint64_t)sub_1DD2E6D54((int *)(a1 + 3080), (uint64_t)v25, v24, v23) < 0xFFFFFFFFFFFFFF89)
            {
              unsigned int v23 = 0;
              unsigned int v24 = 35;
              unint64_t v18 = sub_1DD2E2504((uint64_t)v25, &v24, &v23, (unsigned int *)(v14 + v17), v15 - v17);
              if (v18 <= 0xFFFFFFFFFFFFFF88 && v23 <= 9)
              {
                unint64_t v19 = v18;
                if ((unint64_t)sub_1DD2E6D54((int *)a1, (uint64_t)v25, v24, v23) < 0xFFFFFFFFFFFFFF89)
                {
                  *(_DWORD *)(a1 + 21592) = 1;
                  unint64_t v20 = v13 + v9 + v17 + v19;
                  if (v20 <= 0xFFFFFFFFFFFFFF88)
                  {
                    uint64_t v21 = v7 + v20;
                    uint64_t v22 = *(void *)(a1 + 21520);
                    *(void *)(a1 + 21544) = v22;
                    *(void *)(a1 + 21536) = v21 + *(void *)(a1 + 21528) - v22;
                    *(void *)(a1 + 21528) = v21;
LABEL_17:
                    uint64_t result = 0;
                    *(void *)(a1 + 21520) = a2 + a3;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }
    return -30;
  }
  return result;
}

unint64_t sub_1DD2EA040(unint64_t result, unint64_t a2, void *a3, uint64_t *a4)
{
  uint64_t v14 = 0;
  if (a2 < 5) {
    goto LABEL_2;
  }
  unint64_t v7 = result;
  uint64_t v8 = *(void *)((char *)&unk_1DD323F28 + (((unint64_t)*(unsigned __int8 *)(result + 4) >> 3) & 0x18));
  uint64_t v6 = v8 + 5;
  if ((unint64_t)(v8 + 5) >= 0xFFFFFFFFFFFFFF89) {
    goto LABEL_14;
  }
  if (*(_DWORD *)result != -47205082)
  {
    uint64_t v6 = -10;
    goto LABEL_14;
  }
  if (v8 + 8 > a2)
  {
LABEL_2:
    uint64_t v6 = -72;
LABEL_14:
    *a3 = v6;
    goto LABEL_15;
  }
  unint64_t v9 = result + v6;
  unint64_t v10 = a2 - v6;
  uint64_t result = sub_1DD2EA154((unsigned __int8 *)(result + v6), a2 - v6, (int *)&v14);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    uint64_t v11 = 0;
    do
    {
      BOOL v12 = v10 - 3 >= result;
      unint64_t v10 = v10 - 3 - result;
      if (!v12) {
        goto LABEL_2;
      }
      unint64_t v13 = v9 + 3;
      if (!result)
      {
        *a3 = v13 - v7;
        goto LABEL_16;
      }
      unint64_t v9 = v13 + result;
      uint64_t result = sub_1DD2EA154((unsigned __int8 *)(v13 + result), v10, (int *)&v14);
      v11 += 0x20000;
    }
    while (result < 0xFFFFFFFFFFFFFF89);
  }
  *a3 = result;
LABEL_15:
  uint64_t v11 = -2;
LABEL_16:
  *a4 = v11;
  return result;
}

uint64_t sub_1DD2EA154(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  if (a2 < 3) {
    return -72;
  }
  int v4 = *a1 >> 6;
  *a3 = v4;
  HIDWORD(v5) = *a1 & 7;
  LODWORD(v5) = bswap32(*(unsigned __int16 *)(a1 + 1));
  uint64_t result = (v5 >> 16);
  if (v4 == 2) {
    int v6 = result;
  }
  else {
    int v6 = 0;
  }
  a3[1] = v6;
  if (v4 == 3) {
    return 0;
  }
  if (v4 == 2) {
    return 1;
  }
  return result;
}

uint64_t sub_1DD2EA1B0(void **a1)
{
  if (a1)
  {
    free(*a1);
    free(a1[4]);
    free(a1[7]);
    free(a1);
  }
  return 0;
}

uint64_t sub_1DD2EA1FC(uint64_t a1, int a2, unsigned int a3, unsigned int a4, unsigned int *a5, unint64_t a6, uint64_t a7, unsigned int a8, int a9)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  unsigned int v16 = a3;
  if (!a2)
  {
    sub_1DD2E6D54((int *)a1, a7, a3, a8);
    return 0;
  }
  if (a2 != 2)
  {
    if (a2 == 1)
    {
      if (!a6) {
        return -72;
      }
      unsigned int v10 = *(unsigned __int8 *)a5;
      if (v10 <= a3)
      {
        *(_DWORD *)a1 = 0;
        *(_WORD *)(a1 + 4) = 0;
        *(unsigned char *)(a1 + 6) = v10;
        uint64_t v11 = 1;
        *(unsigned char *)(a1 + 7) = 0;
        return v11;
      }
    }
    else
    {
      unsigned int v15 = 0;
      unint64_t v13 = sub_1DD2E2504((uint64_t)v17, &v16, &v15, a5, a6);
      if (v13 <= 0xFFFFFFFFFFFFFF88 && v15 <= a4)
      {
        uint64_t v11 = v13;
        sub_1DD2E6D54((int *)a1, (uint64_t)v17, v16, v15);
        return v11;
      }
    }
    return -20;
  }
  if (a9) {
    return 0;
  }
  else {
    return -20;
  }
}

unint64_t sub_1DD2EA320(char *__b, size_t __len, uint64_t a3, _DWORD *a4, _DWORD *a5, char *a6, unint64_t a7)
{
  if (!a7) {
    return -72;
  }
  unint64_t v11 = *a6;
  if (*a6 < 0)
  {
    if (v11 >= 0xF2)
    {
      unint64_t v13 = dword_1DD3243C0[v11 - 242];
      memset(__b, 1, __len);
      unint64_t v11 = 0;
      goto LABEL_9;
    }
    if ((v11 - 126) >> 1 >= a7) {
      return -72;
    }
    unint64_t v13 = v11 - 127;
    if (v11 - 127 < __len)
    {
      if (v11 != 127)
      {
        uint64_t v24 = 0;
        unsigned int v25 = a6 + 1;
        do
        {
          uint64_t v26 = &__b[v24];
          *uint64_t v26 = *v25 >> 4;
          char v27 = *v25++;
          v26[1] = v27 & 0xF;
          v24 += 2;
        }
        while (v13 > v24);
        unint64_t v11 = (v11 - 126) >> 1;
LABEL_9:
        *(_DWORD *)(a3 + 64) = 0;
        *(_OWORD *)(a3 + 32) = 0u;
        *(_OWORD *)(a3 + 48) = 0u;
        *(_OWORD *)a3 = 0u;
        *(_OWORD *)(a3 + 16) = 0u;
        if (v13)
        {
          uint64_t v14 = 0;
          unsigned int v15 = 0;
          unsigned int v16 = 1;
          while (1)
          {
            unint64_t v17 = __b[v14];
            if (v17 > 0xF) {
              break;
            }
            ++*(_DWORD *)(a3 + 4 * v17);
            v15 += 1 << __b[v14] >> 1;
            uint64_t v14 = v16;
            if (v13 <= v16++)
            {
              if (!v15) {
                return -20;
              }
              unsigned int v19 = __clz(v15);
              if ((v19 ^ 0x1F) > 0xF) {
                return -20;
              }
              *a5 = 32 - v19;
              unsigned int v20 = (2 << (v19 ^ 0x1F)) - v15;
              unsigned int v21 = __clz(v20) ^ 0x1F;
              if (1 << v21 != v20) {
                return -20;
              }
              unsigned int v22 = v21 + 1;
              __b[v13] = v22;
              ++*(_DWORD *)(a3 + 4 * v22);
              unsigned int v23 = *(_DWORD *)(a3 + 4);
              unint64_t result = -20;
              if (v23 >= 2 && (v23 & 1) == 0)
              {
                *a4 = v13 + 1;
                return v11 + 1;
              }
              return result;
            }
          }
        }
        return -20;
      }
      *(_DWORD *)(a3 + 64) = 0;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
    }
    return -20;
  }
  if (v11 >= a7) {
    return -72;
  }
  unint64_t result = sub_1DD2EA51C();
  unint64_t v13 = result;
  if (result <= 0xFFFFFFFFFFFFFF88) {
    goto LABEL_9;
  }
  return result;
}

unint64_t sub_1DD2EA51C()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  v15[64] = *MEMORY[0x1E4F143B8];
  unsigned int v12 = 255;
  if (v3 < 2) {
    return -72;
  }
  unint64_t v4 = v3;
  unint64_t v5 = v2;
  uint64_t v6 = v1;
  unint64_t v7 = v0;
  memset(v14, 0, 512);
  unsigned int v13 = 0;
  unint64_t result = sub_1DD2E2504((uint64_t)v15, &v12, &v13, v2, v3);
  if (result > 0xFFFFFFFFFFFFFF88) {
    return result;
  }
  unint64_t v9 = result;
  BOOL v10 = v4 > result;
  unint64_t v11 = v4 - result;
  if (!v10) {
    return -72;
  }
  unint64_t result = sub_1DD2E6D54((int *)v14, (uint64_t)v15, v12, v13);
  if (result <= 0xFFFFFFFFFFFFFF88) {
    return sub_1DD2EA670(v7, v6, (unsigned __int8 *)v5 + v9, v11, (unsigned __int16 *)v14);
  }
  return result;
}

unint64_t sub_1DD2EA670(unint64_t a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4, unsigned __int16 *a5)
{
  uint64_t v7 = a1 + a2;
  unint64_t v8 = a1 + a2 - 3;
  if (a5[1])
  {
    long long v82 = 0uLL;
    long long v83 = 0uLL;
    unint64_t result = sub_1DD2ED31C((uint64_t)&v82, a3, a4);
    if (result <= 0xFFFFFFFFFFFFFF88)
    {
      int v11 = *a5;
      BOOL v10 = a5 + 2;
      uint64_t v12 = (void)v82 << SBYTE8(v82) >> 1 >> (63 - v11);
      DWORD2(v82) += v11;
      sub_1DD2E4328((uint64_t)&v82);
      uint64_t v13 = (void)v82 << SBYTE8(v82) >> 1 >> (63 - v11);
      DWORD2(v82) += v11;
      sub_1DD2E4328((uint64_t)&v82);
      if (sub_1DD2E4328((uint64_t)&v82) || v8 <= a1)
      {
        uint64_t v14 = (unsigned char *)a1;
      }
      else
      {
        uint64_t v14 = (unsigned char *)a1;
        do
        {
          unsigned int v15 = &v10[2 * v12];
          uint64_t v16 = *v15;
          char v17 = *((unsigned char *)v15 + 2);
          LODWORD(v15) = *((unsigned __int8 *)v15 + 3);
          uint64_t v18 = v82;
          uint64_t v19 = (void)v82 << SBYTE8(v82) >> -(char)v15;
          LODWORD(v15) = DWORD2(v82) + v15;
          uint64_t v20 = v19 + v16;
          *uint64_t v14 = v17;
          unsigned int v21 = &v10[2 * v13];
          uint64_t v22 = *v21;
          LOBYTE(v19) = *((unsigned char *)v21 + 2);
          LODWORD(v21) = *((unsigned __int8 *)v21 + 3);
          unint64_t v23 = (unint64_t)(v18 << (char)v15) >> -(char)v21;
          LODWORD(v15) = v15 + v21;
          uint64_t v24 = v23 + v22;
          v14[1] = v19;
          unsigned int v25 = &v10[2 * v20];
          uint64_t v26 = *v25;
          LOBYTE(v19) = *((unsigned char *)v25 + 2);
          LODWORD(v25) = *((unsigned __int8 *)v25 + 3);
          unint64_t v27 = (unint64_t)(v18 << (char)v15) >> -(char)v25;
          LODWORD(v15) = v15 + v25;
          uint64_t v12 = v27 + v26;
          v14[2] = v19;
          unsigned int v28 = &v10[2 * v24];
          uint64_t v29 = *v28;
          LOBYTE(v26) = *((unsigned char *)v28 + 2);
          LODWORD(v28) = *((unsigned __int8 *)v28 + 3);
          DWORD2(v82) = v15 + v28;
          uint64_t v13 = ((unint64_t)(v18 << (char)v15) >> -(char)v28) + v29;
          v14[3] = v26;
          v14 += 4;
        }
        while (!sub_1DD2E4328((uint64_t)&v82) && (unint64_t)v14 < v8);
      }
      unint64_t v50 = v7 - 2;
      uint64_t v51 = &v14[-a1];
      int v52 = v14 + 1;
      uint64_t v53 = 2;
      while (1)
      {
        int v54 = v51;
        if ((unint64_t)(v52 - 1) > v50) {
          return -70;
        }
        unint64_t v55 = &v10[2 * v12];
        uint64_t v56 = *v55;
        char v57 = *((unsigned char *)v55 + 2);
        int v58 = *((unsigned __int8 *)v55 + 3);
        uint64_t v59 = v82;
        char v60 = BYTE8(v82);
        DWORD2(v82) += v58;
        *(v52 - 1) = v57;
        if (sub_1DD2E4328((uint64_t)&v82) == 3) {
          goto LABEL_23;
        }
        if ((unint64_t)v52 > v50) {
          return -70;
        }
        uint64_t v12 = ((unint64_t)(v59 << v60) >> -(char)v58) + v56;
        uint64_t v61 = &v10[2 * v13];
        uint64_t v62 = *v61;
        char v63 = *((unsigned char *)v61 + 2);
        LODWORD(v61) = *((unsigned __int8 *)v61 + 3);
        uint64_t v64 = (void)v82 << SBYTE8(v82) >> -(char)v61;
        DWORD2(v82) += v61;
        uint64_t v13 = v64 + v62;
        *int v52 = v63;
        v52 += 2;
        int v65 = sub_1DD2E4328((uint64_t)&v82);
        uint64_t v51 = v54 + 2;
        if (v65 == 3)
        {
          --v52;
          uint64_t v53 = 3;
          uint64_t v13 = v12;
LABEL_23:
          *int v52 = v10[2 * v13 + 1];
          return (unint64_t)&v54[v53];
        }
      }
    }
  }
  else
  {
    long long v82 = 0uLL;
    long long v83 = 0uLL;
    unint64_t result = sub_1DD2ED31C((uint64_t)&v82, a3, a4);
    if (result <= 0xFFFFFFFFFFFFFF88)
    {
      int v31 = *a5;
      uint64_t v30 = a5 + 2;
      uint64_t v32 = (void)v82 << SBYTE8(v82) >> 1 >> (63 - v31);
      DWORD2(v82) += v31;
      sub_1DD2E4328((uint64_t)&v82);
      uint64_t v33 = (void)v82 << SBYTE8(v82) >> 1 >> (63 - v31);
      DWORD2(v82) += v31;
      sub_1DD2E4328((uint64_t)&v82);
      if (sub_1DD2E4328((uint64_t)&v82) || v8 <= a1)
      {
        int v34 = (unsigned char *)a1;
      }
      else
      {
        int v34 = (unsigned char *)a1;
        do
        {
          int v35 = &v30[2 * v32];
          uint64_t v36 = *v35;
          char v37 = *((unsigned char *)v35 + 2);
          LODWORD(v35) = *((unsigned __int8 *)v35 + 3);
          uint64_t v38 = v82;
          uint64_t v39 = (void)v82 << SBYTE8(v82) >> 1 >> (63 - v35);
          LODWORD(v35) = DWORD2(v82) + v35;
          uint64_t v40 = v39 + v36;
          *int v34 = v37;
          unsigned int v41 = &v30[2 * v33];
          uint64_t v42 = *v41;
          LOBYTE(v39) = *((unsigned char *)v41 + 2);
          LODWORD(v41) = *((unsigned __int8 *)v41 + 3);
          unint64_t v43 = (unint64_t)(v38 << (char)v35) >> 1 >> (63 - v41);
          LODWORD(v35) = v35 + v41;
          uint64_t v44 = v43 + v42;
          v34[1] = v39;
          uint64_t v45 = &v30[2 * v40];
          uint64_t v46 = *v45;
          LOBYTE(v39) = *((unsigned char *)v45 + 2);
          LODWORD(v45) = *((unsigned __int8 *)v45 + 3);
          unint64_t v47 = (unint64_t)(v38 << (char)v35) >> 1 >> (63 - v45);
          LODWORD(v35) = v35 + v45;
          uint64_t v32 = v47 + v46;
          v34[2] = v39;
          int v48 = &v30[2 * v44];
          uint64_t v49 = *v48;
          LOBYTE(v46) = *((unsigned char *)v48 + 2);
          LODWORD(v48) = *((unsigned __int8 *)v48 + 3);
          DWORD2(v82) = v35 + v48;
          uint64_t v33 = ((unint64_t)(v38 << (char)v35) >> 1 >> (63 - v48)) + v49;
          v34[3] = v46;
          v34 += 4;
        }
        while (!sub_1DD2E4328((uint64_t)&v82) && (unint64_t)v34 < v8);
      }
      unint64_t v66 = v7 - 2;
      uint64_t v67 = &v34[-a1];
      uint64_t v68 = v34 + 1;
      while (1)
      {
        uint64_t v69 = v67;
        if ((unint64_t)(v68 - 1) > v66) {
          return -70;
        }
        int v70 = &v30[2 * v32];
        uint64_t v71 = *v70;
        char v72 = *((unsigned char *)v70 + 2);
        int v73 = *((unsigned __int8 *)v70 + 3);
        uint64_t v74 = v82;
        char v75 = BYTE8(v82);
        DWORD2(v82) += v73;
        *(v68 - 1) = v72;
        if (sub_1DD2E4328((uint64_t)&v82) == 3) {
          break;
        }
        if ((unint64_t)v68 > v66) {
          return -70;
        }
        uint64_t v32 = ((unint64_t)(v74 << v75) >> 1 >> (63 - v73)) + v71;
        int v76 = &v30[2 * v33];
        uint64_t v77 = *v76;
        char v78 = *((unsigned char *)v76 + 2);
        LODWORD(v76) = *((unsigned __int8 *)v76 + 3);
        uint64_t v79 = (void)v82 << SBYTE8(v82) >> 1 >> (63 - v76);
        DWORD2(v82) += v76;
        uint64_t v33 = v79 + v77;
        unsigned char *v68 = v78;
        v68 += 2;
        int v80 = sub_1DD2E4328((uint64_t)&v82);
        uint64_t v67 = v69 + 2;
        if (v80 == 3)
        {
          --v68;
          uint64_t v81 = 3;
          uint64_t v33 = v32;
LABEL_33:
          unsigned char *v68 = v30[2 * v33 + 1];
          return (unint64_t)&v69[v81];
        }
      }
      uint64_t v81 = 2;
      goto LABEL_33;
    }
  }
  return result;
}

unint64_t sub_1DD2EAB44(unsigned int *a1, char *a2, unint64_t a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  unsigned int v19 = 0;
  unsigned int v20 = 0;
  unint64_t result = sub_1DD2EA320(__b, 0x100uLL, (uint64_t)v21, &v19, &v20, a2, a3);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    unsigned int v5 = v20;
    if (v20 <= *a1 + 1)
    {
      *a1 = *a1 & 0xFF0000FF | (v20 << 16);
      uint64_t v6 = v5 + 1;
      if (v6 >= 2)
      {
        uint64_t v7 = 0;
        unsigned int v8 = 0;
        uint64_t v9 = v6 - 1;
        do
        {
          unsigned int v10 = v21[v7 + 1] << v7;
          v21[v7 + 1] = v8;
          v8 += v10;
          ++v7;
        }
        while (v9 != v7);
      }
      uint64_t v11 = v19;
      if (v19)
      {
        uint64_t v12 = 0;
        char v13 = v5 + 1;
        do
        {
          uint64_t v14 = __b[v12];
          uint64_t v15 = v21[v14];
          uint64_t v16 = (v15 + (1 << v14 >> 1));
          if (v15 < v16)
          {
            char v17 = (char *)a1 + 2 * v15 + 5;
            uint64_t v18 = v16 - v15;
            do
            {
              *(v17 - 1) = v12;
              *char v17 = v13 - v14;
              v17 += 2;
              --v18;
            }
            while (v18);
          }
          v21[v14] = v16;
          ++v12;
        }
        while (v12 != v11);
      }
    }
    else
    {
      return -44;
    }
  }
  return result;
}

unint64_t sub_1DD2EAC90(unsigned char *a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4, int *a5)
{
  long long v11 = 0u;
  long long v12 = 0u;
  int v8 = *a5;
  unint64_t result = sub_1DD2ED31C((uint64_t)&v11, a3, a4);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    sub_1DD2E79EC(a1, (uint64_t)&v11, (unint64_t)&a1[a2], (uint64_t)(a5 + 1), BYTE2(v8));
    if (DWORD2(v11) == 64 && (void)v12 == *((void *)&v12 + 1)) {
      return a2;
    }
    else {
      return -20;
    }
  }
  return result;
}

unint64_t sub_1DD2EAD1C(unsigned int *a1, unsigned char *a2, uint64_t a3, char *a4, unint64_t a5)
{
  unint64_t result = sub_1DD2EAB44(a1, a4, a5);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    if (a5 <= result)
    {
      return -72;
    }
    else
    {
      return sub_1DD2EAC90(a2, a3, (unsigned __int8 *)&a4[result], a5 - result, (int *)a1);
    }
  }
  return result;
}

unint64_t sub_1DD2EADB0(unsigned char *a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4, unsigned int *a5)
{
  if (a4 < 0xA) {
    return -20;
  }
  uint64_t v87 = v5;
  uint64_t v88 = v6;
  long long v85 = 0u;
  long long v86 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  uint64_t v8 = (uint64_t)(a5 + 1);
  unsigned int v9 = *a5;
  long long v79 = 0u;
  long long v80 = 0u;
  uint64_t v10 = *(unsigned __int16 *)a3;
  unint64_t v11 = *((unsigned __int16 *)a3 + 1);
  unint64_t v12 = *((unsigned __int16 *)a3 + 2);
  unint64_t v13 = v10 + v11 + v12 + 6;
  unint64_t v14 = a4 - v13;
  if (a4 < v13) {
    return -20;
  }
  char v17 = (unsigned __int16 *)(a3 + 6);
  unint64_t result = sub_1DD2ED31C((uint64_t)&v85, a3 + 6, *(unsigned __int16 *)a3);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    uint64_t v18 = (unsigned __int8 *)v17 + v10;
    unint64_t result = sub_1DD2ED31C((uint64_t)&v83, v18, v11);
    if (result <= 0xFFFFFFFFFFFFFF88)
    {
      unsigned int v19 = &v18[v11];
      unint64_t result = sub_1DD2ED31C((uint64_t)&v81, v19, v12);
      if (result <= 0xFFFFFFFFFFFFFF88)
      {
        unint64_t result = sub_1DD2ED31C((uint64_t)&v79, &v19[v12], v14);
        if (result <= 0xFFFFFFFFFFFFFF88)
        {
          unint64_t v20 = (unint64_t)&a1[a2];
          int v76 = &a1[(unint64_t)(a2 + 3) >> 2];
          unint64_t v77 = (unint64_t)&v76[(unint64_t)(a2 + 3) >> 2];
          unint64_t v21 = v77 + ((unint64_t)(a2 + 3) >> 2);
          int v22 = sub_1DD2E4328((uint64_t)&v85);
          int v23 = sub_1DD2E4328((uint64_t)&v83) | v22;
          int v24 = sub_1DD2E4328((uint64_t)&v81);
          if (v23 | v24 | sub_1DD2E4328((uint64_t)&v79) || (unint64_t v78 = v20 - 7, v21 >= v20 - 7))
          {
            unint64_t v67 = (unint64_t)&a1[(unint64_t)(a2 + 3) >> 2];
            int v65 = &v76[(unint64_t)(a2 + 3) >> 2];
            unint64_t v66 = (unsigned char *)v67;
            uint64_t v64 = (unsigned char *)(v77 + ((unint64_t)(a2 + 3) >> 2));
          }
          else
          {
            char v75 = &a1[a2];
            unint64_t v25 = (unint64_t)(a2 + 3) >> 2;
            int v26 = -HIWORD(v9) & 0x3F;
            do
            {
              unint64_t v27 = &a1[3 * v25];
              unsigned int v28 = &a1[2 * v25];
              uint64_t v29 = &a1[v25];
              uint64_t v30 = v85;
              int v31 = (unsigned char *)(v8 + 2 * ((void)v85 << SBYTE8(v85) >> v26));
              int v32 = DWORD2(v85) + v31[1];
              *a1 = *v31;
              uint64_t v33 = v83;
              int v34 = (unsigned char *)(v8 + 2 * ((void)v83 << SBYTE8(v83) >> v26));
              int v35 = DWORD2(v83) + v34[1];
              *uint64_t v29 = *v34;
              uint64_t v36 = v81;
              char v37 = (char *)(v8 + 2 * ((void)v81 << SBYTE8(v81) >> v26));
              char v38 = *v37;
              LODWORD(v37) = DWORD2(v81) + v37[1];
              unsigned char *v28 = v38;
              uint64_t v39 = v79;
              uint64_t v40 = (unsigned char *)(v8 + 2 * ((void)v79 << SBYTE8(v79) >> v26));
              int v41 = DWORD2(v79) + v40[1];
              *unint64_t v27 = *v40;
              uint64_t v42 = (unsigned char *)(v8 + 2 * ((unint64_t)(v30 << v32) >> v26));
              int v43 = v32 + v42[1];
              a1[1] = *v42;
              uint64_t v44 = (unsigned char *)(v8 + 2 * ((unint64_t)(v33 << v35) >> v26));
              int v45 = v35 + v44[1];
              v29[1] = *v44;
              uint64_t v46 = (unsigned char *)(v8 + 2 * ((unint64_t)(v36 << (char)v37) >> v26));
              LODWORD(v37) = v37 + v46[1];
              v28[1] = *v46;
              unint64_t v47 = (unsigned char *)(v8 + 2 * ((unint64_t)(v39 << v41) >> v26));
              int v48 = v41 + v47[1];
              v27[1] = *v47;
              uint64_t v49 = (unsigned char *)(v8 + 2 * ((unint64_t)(v30 << v43) >> v26));
              int v50 = v43 + v49[1];
              a1[2] = *v49;
              uint64_t v51 = (unsigned char *)(v8 + 2 * ((unint64_t)(v33 << v45) >> v26));
              int v52 = v45 + v51[1];
              v29[2] = *v51;
              uint64_t v53 = (unsigned char *)(v8 + 2 * ((unint64_t)(v36 << (char)v37) >> v26));
              LODWORD(v37) = v37 + v53[1];
              v28[2] = *v53;
              int v54 = (unsigned char *)(v8 + 2 * ((unint64_t)(v39 << v48) >> v26));
              int v55 = v48 + v54[1];
              v27[2] = *v54;
              uint64_t v56 = (unsigned char *)(v8 + 2 * ((unint64_t)(v30 << v50) >> v26));
              LOBYTE(v54) = *v56;
              DWORD2(v85) = v50 + v56[1];
              char v57 = a1 + 4;
              a1[3] = (_BYTE)v54;
              int v58 = (unsigned char *)(v8 + 2 * ((unint64_t)(v33 << v52) >> v26));
              LOBYTE(v33) = *v58;
              DWORD2(v83) = v52 + v58[1];
              v29[3] = v33;
              uint64_t v59 = (unsigned char *)(v8 + 2 * ((unint64_t)(v36 << (char)v37) >> v26));
              LOBYTE(v58) = *v59;
              DWORD2(v81) = v37 + v59[1];
              v28[3] = (_BYTE)v58;
              char v60 = (unsigned char *)(v8 + 2 * ((unint64_t)(v39 << v55) >> v26));
              LOBYTE(v59) = *v60;
              DWORD2(v79) = v55 + v60[1];
              v27[3] = (_BYTE)v59;
              int v61 = sub_1DD2E4328((uint64_t)&v85);
              int v62 = sub_1DD2E4328((uint64_t)&v83) | v61;
              int v63 = sub_1DD2E4328((uint64_t)&v81);
              if (v62 | v63 | sub_1DD2E4328((uint64_t)&v79)) {
                break;
              }
              a1 = v57;
            }
            while ((unint64_t)(v27 + 4) < v78);
            uint64_t v64 = &v57[3 * v25];
            int v65 = &v57[2 * v25];
            unint64_t v66 = &v57[v25];
            a1 = v57;
            unint64_t v21 = v77 + ((unint64_t)(a2 + 3) >> 2);
            unint64_t v20 = (unint64_t)v75;
            unint64_t v67 = (unint64_t)v76;
          }
          unint64_t result = -20;
          if ((unint64_t)a1 <= v67 && (unint64_t)v66 <= v77 && (unint64_t)v65 <= v21)
          {
            sub_1DD2E79EC(a1, (uint64_t)&v85, v67, v8, BYTE2(v9));
            sub_1DD2E79EC(v66, (uint64_t)&v83, v77, v8, BYTE2(v9));
            sub_1DD2E79EC(v65, (uint64_t)&v81, v21, v8, BYTE2(v9));
            sub_1DD2E79EC(v64, (uint64_t)&v79, v20, v8, BYTE2(v9));
            if (DWORD2(v79) == 64
              && (void)v80 == *((void *)&v80 + 1)
              && DWORD2(v81) == 64
              && (void)v82 == *((void *)&v82 + 1)
              && DWORD2(v83) == 64
              && (void)v84 == *((void *)&v84 + 1)
              && DWORD2(v85) == 64
              && (void)v86 == *((void *)&v86 + 1))
            {
              return a2;
            }
            else
            {
              return -20;
            }
          }
        }
      }
    }
  }
  return result;
}

unint64_t sub_1DD2EB28C(unsigned int *a1, unsigned char *a2, uint64_t a3, char *a4, unint64_t a5)
{
  unint64_t result = sub_1DD2EAB44(a1, a4, a5);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    if (a5 <= result)
    {
      return -72;
    }
    else
    {
      return sub_1DD2EADB0(a2, a3, (unsigned __int8 *)&a4[result], a5 - result, a1);
    }
  }
  return result;
}

unint64_t sub_1DD2EB320(unsigned int *a1, char *a2, unint64_t a3)
{
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  memset(v100, 0, 68);
  uint64_t v99 = 0;
  memset(v98, 0, sizeof(v98));
  unint64_t v3 = a1 + 1;
  unsigned int v4 = *a1;
  if (v4 > 0x10) {
    return -44;
  }
  unsigned int v63 = *a1;
  uint64_t v65 = 0;
  unint64_t result = sub_1DD2EA320(__b, 0x100uLL, (uint64_t)v100, &v65, (_DWORD *)&v65 + 1, a2, a3);
  if (result > 0xFFFFFFFFFFFFFF88) {
    return result;
  }
  unsigned int v6 = v4 - HIDWORD(v65);
  if (v4 < HIDWORD(v65)) {
    return -44;
  }
  int v7 = 0;
  int v8 = HIDWORD(v65) + 1;
  while (!v100[HIDWORD(v65) + v7--])
    ;
  int v10 = 0;
  unsigned int v11 = HIDWORD(v65) + v7;
  uint64_t v12 = (HIDWORD(v65) + v7 + 2);
  if ((HIDWORD(v65) + v7) <= 0xFFFFFFFD)
  {
    int v13 = 0;
    unint64_t v14 = &v100[1];
    uint64_t v15 = &v98[2];
    uint64_t v16 = v12 - 1;
    do
    {
      int v17 = *v14++;
      int v10 = v17 + v13;
      *v15++ = v13;
      v13 += v17;
      --v16;
    }
    while (v16);
  }
  v98[1] = v10;
  uint64_t v18 = v65;
  if (v65)
  {
    uint64_t v19 = 0;
    do
    {
      uint64_t v20 = __b[v19];
      uint64_t v21 = v98[v20 + 1];
      v98[v20 + 1] = v21 + 1;
      int v22 = (char *)&v100[20] + 2 * v21;
      *int v22 = v19;
      v22[1] = v20;
      ++v19;
    }
    while (v18 != v19);
  }
  long long v96 = 0u;
  long long v97 = 0u;
  long long v94 = 0u;
  long long v95 = 0u;
  long long v92 = 0u;
  long long v93 = 0u;
  long long v90 = 0u;
  long long v91 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  long long v86 = 0u;
  long long v87 = 0u;
  long long v84 = 0u;
  long long v85 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  long long v80 = 0u;
  long long v81 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  v98[1] = 0;
  if (v11 <= 0xFFFFFFFD)
  {
    int v23 = 0;
    int v24 = &v100[1];
    unint64_t v25 = (_DWORD *)&v66 + 1;
    uint64_t v26 = v12 - 1;
    do
    {
      int v27 = *v24++;
      *v25++ = v23;
      v23 += v27 << v6++;
      --v26;
    }
    while (v26);
  }
  unsigned int v28 = -v7;
  if (-v7 < v4 + v7 + 1)
  {
    int v29 = v4 + v7 + 1;
    unsigned int v30 = -v7;
    uint64_t v31 = 17 * v30;
    uint64_t v32 = v12 - 1;
    do
    {
      if (v11 <= 0xFFFFFFFD)
      {
        uint64_t v33 = v32;
        int v34 = (_DWORD *)&v66 + 1;
        do
        {
          v34[v31] = *v34 >> v30;
          ++v34;
          --v33;
        }
        while (v33);
      }
      ++v30;
      v31 += 17;
    }
    while (v29 != v30);
  }
  v102[1] = v67;
  v102[2] = v68;
  v102[3] = v69;
  int v103 = v70;
  v102[0] = v66;
  if (v10)
  {
    uint64_t v35 = 0;
    unsigned int v36 = v8 - v4;
    do
    {
      char v37 = (unsigned __int8 *)&v100[20] + 2 * v35;
      int v38 = *v37;
      uint64_t v39 = v37[1];
      unsigned int v40 = v8 - v39;
      uint64_t v41 = *((unsigned int *)v102 + v39);
      unsigned int v42 = v4 - (v8 - v39);
      int v43 = 1 << (v4 - (v8 - v39));
      if (v42 >= v28)
      {
        unint64_t v47 = (char *)&v66 + 68 * v40;
        long long v48 = *(_OWORD *)v47;
        v104[1] = *((_OWORD *)v47 + 1);
        long long v49 = *((_OWORD *)v47 + 3);
        v104[2] = *((_OWORD *)v47 + 2);
        LODWORD(v50) = v36 + v40;
        if ((int)(v36 + v40) <= 1) {
          uint64_t v50 = 1;
        }
        else {
          uint64_t v50 = v50;
        }
        uint64_t v51 = v98[v50];
        v104[3] = v49;
        int v105 = *((_DWORD *)v47 + 16);
        v104[0] = v48;
        if (v50 >= 2)
        {
          uint64_t v52 = *((unsigned int *)v104 + v50);
          if (v52)
          {
            uint64_t v53 = &v3[v41];
            do
            {
              *v53++ = v38 & 0xFF00FFFF | ((v8 - v39) << 16) | 0x1000000;
              --v52;
            }
            while (v52);
          }
        }
        if (v10 != v51)
        {
          uint64_t v54 = 0;
          int v55 = (char *)&v100[20] + 2 * v51;
          uint64_t v56 = (v10 - v51);
          do
          {
            char v57 = &v55[2 * v54];
            int v58 = *v57;
            uint64_t v59 = v57[1];
            unsigned int v60 = *((_DWORD *)v104 + v59);
            unsigned int v61 = (1 << (v42 - (v8 - v59))) + v60;
            unsigned int v62 = (v58 << 8) & 0xFF00FFFF | ((v8 - v59 + v40) << 16) | v38 | 0x2000000;
            do
              v3[v41 + v60++] = v62;
            while (v60 < v61);
            *((_DWORD *)v104 + v59) = v61;
            ++v54;
          }
          while (v54 != v56);
        }
        LODWORD(v44) = v43 + v41;
      }
      else
      {
        uint64_t v44 = (v43 + v41);
        if (v41 < v44)
        {
          uint64_t v45 = v44 - v41;
          uint64_t v46 = &a1[v41 + 1];
          do
          {
            *v46++ = v38 & 0xFF00FFFF | ((v8 - v39) << 16) | 0x1000000;
            --v45;
          }
          while (v45);
        }
      }
      *((_DWORD *)v102 + v39) = v44;
      ++v35;
    }
    while (v35 != v10);
  }
  *a1 = v63 & 0xFF0000FF | (v63 << 16) | 0x100;
  return result;
}

unint64_t sub_1DD2EB75C(_WORD *a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4, uint64_t a5)
{
  long long v10 = 0u;
  long long v11 = 0u;
  unint64_t result = sub_1DD2ED31C((uint64_t)&v10, a3, a4);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    sub_1DD2E86E4(a1, (uint64_t)&v10, (unint64_t)a1 + a2, a5 + 4, *(unsigned __int8 *)(a5 + 2));
    if (DWORD2(v10) == 64 && (void)v11 == *((void *)&v11 + 1)) {
      return a2;
    }
    else {
      return -20;
    }
  }
  return result;
}

uint64_t sub_1DD2EB7E4(_WORD *a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4, unsigned int *a5)
{
  if (a4 < 0xA) {
    return -20;
  }
  long long v98 = 0u;
  long long v99 = 0u;
  long long v96 = 0u;
  long long v97 = 0u;
  long long v94 = 0u;
  long long v95 = 0u;
  uint64_t v6 = (uint64_t)(a5 + 1);
  unsigned int v5 = *a5;
  long long v92 = 0u;
  long long v93 = 0u;
  unint64_t v7 = *(unsigned __int16 *)a3;
  unint64_t v8 = *((unsigned __int16 *)a3 + 1);
  unint64_t v9 = *((unsigned __int16 *)a3 + 2);
  unint64_t v10 = v7 + v8 + v9 + 6;
  unint64_t v11 = a4 - v10;
  if (a4 < v10) {
    return -20;
  }
  unsigned int v91 = v5;
  uint64_t v16 = (unsigned __int16 *)(a3 + 6);
  unint64_t v12 = sub_1DD2ED31C((uint64_t)&v98, a3 + 6, v7);
  if (v12 <= 0xFFFFFFFFFFFFFF88)
  {
    int v17 = (unsigned __int8 *)v16 + v7;
    unint64_t v12 = sub_1DD2ED31C((uint64_t)&v96, v17, v8);
    if (v12 <= 0xFFFFFFFFFFFFFF88)
    {
      uint64_t v18 = &v17[v8];
      unint64_t v12 = sub_1DD2ED31C((uint64_t)&v94, v18, v9);
      if (v12 <= 0xFFFFFFFFFFFFFF88)
      {
        unint64_t v12 = sub_1DD2ED31C((uint64_t)&v92, &v18[v9], v11);
        if (v12 <= 0xFFFFFFFFFFFFFF88)
        {
          uint64_t v19 = (char *)a1 + a2;
          uint64_t v20 = (_WORD *)((char *)a1 + ((unint64_t)(a2 + 3) >> 2));
          uint64_t v21 = (_WORD *)((char *)v20 + ((unint64_t)(a2 + 3) >> 2));
          int v22 = (char *)v21 + ((unint64_t)(a2 + 3) >> 2);
          int v23 = sub_1DD2E4328((uint64_t)&v98);
          int v24 = sub_1DD2E4328((uint64_t)&v96) | v23;
          int v25 = sub_1DD2E4328((uint64_t)&v94);
          unint64_t v87 = (unint64_t)a1 + a2;
          unint64_t v88 = (unint64_t)v20;
          unint64_t v89 = (unint64_t)v21;
          unint64_t v90 = (unint64_t)v22;
          if (!(v24 | v25 | sub_1DD2E4328((uint64_t)&v92)))
          {
            unint64_t v26 = (unint64_t)(v19 - 7);
            if (v22 < v19 - 7)
            {
              int v27 = -HIWORD(v91) & 0x3F;
              do
              {
                uint64_t v28 = v98;
                int v29 = DWORD2(v98);
                uint64_t v30 = v6 + 4 * ((void)v98 << SBYTE8(v98) >> v27);
                *a1 = *(_WORD *)v30;
                int v31 = v29 + *(unsigned __int8 *)(v30 + 2);
                uint64_t v32 = (_WORD *)((char *)a1 + *(unsigned __int8 *)(v30 + 3));
                uint64_t v33 = v96;
                LODWORD(v30) = DWORD2(v96);
                uint64_t v34 = v6 + 4 * ((void)v96 << SBYTE8(v96) >> v27);
                *uint64_t v20 = *(_WORD *)v34;
                int v35 = v30 + *(unsigned __int8 *)(v34 + 2);
                unsigned int v36 = (_WORD *)((char *)v20 + *(unsigned __int8 *)(v34 + 3));
                uint64_t v37 = v94;
                LODWORD(v34) = DWORD2(v94);
                uint64_t v38 = v6 + 4 * ((void)v94 << SBYTE8(v94) >> v27);
                *uint64_t v21 = *(_WORD *)v38;
                int v39 = v34 + *(unsigned __int8 *)(v38 + 2);
                unsigned int v40 = (_WORD *)((char *)v21 + *(unsigned __int8 *)(v38 + 3));
                uint64_t v41 = v92;
                int v42 = DWORD2(v92);
                uint64_t v43 = v6 + 4 * ((void)v92 << SBYTE8(v92) >> v27);
                *(_WORD *)int v22 = *(_WORD *)v43;
                int v44 = v42 + *(unsigned __int8 *)(v43 + 2);
                uint64_t v45 = &v22[*(unsigned __int8 *)(v43 + 3)];
                uint64_t v46 = v6 + 4 * ((unint64_t)(v28 << v31) >> v27);
                *uint64_t v32 = *(_WORD *)v46;
                int v47 = v31 + *(unsigned __int8 *)(v46 + 2);
                uint64_t v48 = *(unsigned __int8 *)(v46 + 3);
                uint64_t v49 = v6 + 4 * ((unint64_t)(v33 << v35) >> v27);
                *unsigned int v36 = *(_WORD *)v49;
                int v50 = v35 + *(unsigned __int8 *)(v49 + 2);
                uint64_t v51 = (_WORD *)((char *)v36 + *(unsigned __int8 *)(v49 + 3));
                uint64_t v52 = v6 + 4 * ((unint64_t)(v37 << v39) >> v27);
                *unsigned int v40 = *(_WORD *)v52;
                int v53 = v39 + *(unsigned __int8 *)(v52 + 2);
                uint64_t v54 = (_WORD *)((char *)v40 + *(unsigned __int8 *)(v52 + 3));
                uint64_t v55 = v6 + 4 * ((unint64_t)(v41 << v44) >> v27);
                *(_WORD *)uint64_t v45 = *(_WORD *)v55;
                int v56 = v44 + *(unsigned __int8 *)(v55 + 2);
                char v57 = &v45[*(unsigned __int8 *)(v55 + 3)];
                int v58 = (_WORD *)((char *)v32 + v48);
                uint64_t v59 = v6 + 4 * ((unint64_t)(v28 << v47) >> v27);
                *int v58 = *(_WORD *)v59;
                int v60 = v47 + *(unsigned __int8 *)(v59 + 2);
                unsigned int v61 = (_WORD *)((char *)v58 + *(unsigned __int8 *)(v59 + 3));
                uint64_t v62 = v6 + 4 * ((unint64_t)(v33 << v50) >> v27);
                *uint64_t v51 = *(_WORD *)v62;
                int v63 = v50 + *(unsigned __int8 *)(v62 + 2);
                uint64_t v64 = (_WORD *)((char *)v51 + *(unsigned __int8 *)(v62 + 3));
                uint64_t v65 = v6 + 4 * ((unint64_t)(v37 << v53) >> v27);
                *uint64_t v54 = *(_WORD *)v65;
                int v66 = v53 + *(unsigned __int8 *)(v65 + 2);
                long long v67 = (_WORD *)((char *)v54 + *(unsigned __int8 *)(v65 + 3));
                uint64_t v68 = v6 + 4 * ((unint64_t)(v41 << v56) >> v27);
                *(_WORD *)char v57 = *(_WORD *)v68;
                int v69 = v56 + *(unsigned __int8 *)(v68 + 2);
                long long v70 = &v57[*(unsigned __int8 *)(v68 + 3)];
                uint64_t v71 = v6 + 4 * ((unint64_t)(v28 << v60) >> v27);
                *unsigned int v61 = *(_WORD *)v71;
                DWORD2(v98) = v60 + *(unsigned __int8 *)(v71 + 2);
                a1 = (_WORD *)((char *)v61 + *(unsigned __int8 *)(v71 + 3));
                uint64_t v72 = v6 + 4 * ((unint64_t)(v33 << v63) >> v27);
                _WORD *v64 = *(_WORD *)v72;
                DWORD2(v96) = v63 + *(unsigned __int8 *)(v72 + 2);
                uint64_t v20 = (_WORD *)((char *)v64 + *(unsigned __int8 *)(v72 + 3));
                uint64_t v73 = v6 + 4 * ((unint64_t)(v37 << v66) >> v27);
                *long long v67 = *(_WORD *)v73;
                DWORD2(v94) = v66 + *(unsigned __int8 *)(v73 + 2);
                uint64_t v21 = (_WORD *)((char *)v67 + *(unsigned __int8 *)(v73 + 3));
                uint64_t v74 = v6 + 4 * ((unint64_t)(v41 << v69) >> v27);
                *(_WORD *)long long v70 = *(_WORD *)v74;
                DWORD2(v92) = v69 + *(unsigned __int8 *)(v74 + 2);
                int v22 = &v70[*(unsigned __int8 *)(v74 + 3)];
                int v75 = sub_1DD2E4328((uint64_t)&v98);
                int v76 = sub_1DD2E4328((uint64_t)&v96) | v75;
                int v77 = sub_1DD2E4328((uint64_t)&v94);
              }
              while (!(v76 | v77 | sub_1DD2E4328((uint64_t)&v92)) && (unint64_t)v22 < v26);
            }
          }
          unint64_t v12 = -20;
          if ((unint64_t)a1 <= v88 && (unint64_t)v20 <= v89 && (unint64_t)v21 <= v90)
          {
            sub_1DD2E86E4(a1, (uint64_t)&v98, v88, v6, BYTE2(v91));
            sub_1DD2E86E4(v20, (uint64_t)&v96, v89, v6, BYTE2(v91));
            sub_1DD2E86E4(v21, (uint64_t)&v94, v90, v6, BYTE2(v91));
            sub_1DD2E86E4(v22, (uint64_t)&v92, v87, v6, BYTE2(v91));
            if (DWORD2(v92) == 64
              && (void)v93 == *((void *)&v93 + 1)
              && DWORD2(v94) == 64
              && (void)v95 == *((void *)&v95 + 1)
              && DWORD2(v96) == 64
              && (void)v97 == *((void *)&v97 + 1)
              && DWORD2(v98) == 64
              && (void)v99 == *((void *)&v99 + 1))
            {
              return a2;
            }
          }
        }
      }
    }
  }
  return v12;
}

unint64_t sub_1DD2EBCE8(unsigned int *a1, _WORD *a2, uint64_t a3, char *a4, unint64_t a5)
{
  unint64_t result = sub_1DD2EB320(a1, a4, a5);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    if (a5 <= result)
    {
      return -72;
    }
    else
    {
      return sub_1DD2EB7E4(a2, a3, (unsigned __int8 *)&a4[result], a5 - result, a1);
    }
  }
  return result;
}

uint64_t sub_1DD2EBD7C(unsigned int *a1, unsigned char *a2, unint64_t a3, char *a4, unint64_t a5)
{
  if (!a3) {
    return -70;
  }
  uint64_t v5 = -20;
  if (a5 >= a3 || a5 < 2) {
    return v5;
  }
  uint64_t v6 = (_DWORD *)((char *)&unk_1DD3243F8 + 24 * (16 * a5 / a3));
  unsigned int v7 = *v6 + v6[1] * (a3 >> 8);
  LODWORD(v6) = v6[2] + v6[3] * (a3 >> 8);
  if (v6 + (v6 >> 3) >= v7) {
    return sub_1DD2EB28C(a1, a2, a3, a4, a5);
  }
  else {
    return sub_1DD2EBCE8(a1, a2, a3, a4, a5);
  }
}

double sub_1DD2EBDE4(long long *a1)
{
  unint64_t v2 = *(void *(**)(int, size_t))a1;
  uint64_t v3 = *((void *)a1 + 1);
  if (*(void *)a1)
  {
    if (!v3) {
      return result;
    }
  }
  else
  {
    if (v3) {
      return result;
    }
    *a1 = xmmword_1F387D140;
    *((void *)a1 + 2) = qword_1F387D150;
    unint64_t v2 = sub_1DD2ED42C;
  }
  uint64_t v4 = (uint64_t)v2(*((void *)a1 + 2), 152864);
  if (v4)
  {
    long long v6 = *a1;
    *(void *)(v4 + 21744) = *((void *)a1 + 2);
    *(_OWORD *)(v4 + 21728) = v6;
    *(void *)(v4 + 21552) = 5;
    double result = 0.0;
    *(_OWORD *)(v4 + 21520) = 0u;
    *(_OWORD *)(v4 + 21536) = 0u;
    *(_DWORD *)(v4 + 5132) = 201326604;
    *(_DWORD *)(v4 + 21612) = 0;
    *(void *)(v4 + 21604) = 0;
    *(_DWORD *)(v4 + 21712) = 0;
    *(void *)(v4 + 21560) = 0x400000001;
    *(_DWORD *)(v4 + 21568) = 8;
  }
  return result;
}

double sub_1DD2EBEBC()
{
  long long v1 = xmmword_1F387D140;
  uint64_t v2 = qword_1F387D150;
  return sub_1DD2EBDE4(&v1);
}

uint64_t sub_1DD2EBEF8(uint64_t a1)
{
  if (a1) {
    (*(void (**)(void, uint64_t))(a1 + 21736))(*(void *)(a1 + 21744), a1);
  }
  return 0;
}

uint64_t sub_1DD2EBF28(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 < 5) {
    return 5;
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  if (*(_DWORD *)a2 == -47205081)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 4);
    int v6 = v5 & 3;
    unint64_t v7 = v5 >> 6;
    unint64_t v8 = qword_1DD324598[v5 >> 6] + qword_1DD324578[v5 & 3] - ((v5 & 0x20) >> 5);
    if (v5 < 0x40 && (v5 & 0x20) != 0) {
      ++v8;
    }
    unint64_t v3 = v8 + 6;
    if (v3 <= a3)
    {
      if ((v5 & 8) == 0)
      {
        if ((v5 & 0x20) != 0)
        {
          unsigned int v10 = 0;
          uint64_t v11 = 5;
          goto LABEL_21;
        }
        if (*(unsigned __int8 *)(a2 + 5) <= 0x8Fu)
        {
          unsigned int v10 = (1024 << (*(unsigned char *)(a2 + 5) >> 3))
              + ((1024 << (*(unsigned char *)(a2 + 5) >> 3)) >> 3) * (*(unsigned char *)(a2 + 5) & 7);
          uint64_t v11 = 6;
LABEL_21:
          switch(v6)
          {
            case 3:
              int v12 = *(_DWORD *)(a2 + v11);
              v11 += 4;
              break;
            case 2:
              int v12 = *(unsigned __int16 *)(a2 + v11);
              v11 += 2;
              break;
            case 1:
              int v12 = *(unsigned __int8 *)(a2 + v11++);
              break;
            default:
              int v12 = 0;
              break;
          }
          switch(v7)
          {
            case 1:
              uint64_t v13 = *(unsigned __int16 *)(a2 + v11) + 256;
              break;
            case 2:
              uint64_t v13 = *(unsigned int *)(a2 + v11);
              break;
            case 3:
              uint64_t v13 = *(void *)(a2 + v11);
              break;
            default:
              if ((v5 & 0x20) != 0) {
                uint64_t v13 = *(unsigned __int8 *)(a2 + v11);
              }
              else {
                uint64_t v13 = 0;
              }
              break;
          }
          if (v10) {
            unsigned int v14 = v10;
          }
          else {
            unsigned int v14 = v13;
          }
          if (v14 <= 0x8000000)
          {
            unint64_t v3 = 0;
            *(void *)a1 = v13;
            *(_DWORD *)(a1 + 8) = v14;
            *(_DWORD *)(a1 + 12) = v12;
            *(_DWORD *)(a1 + 16) = (v5 >> 2) & 1;
            return v3;
          }
        }
      }
      return -14;
    }
  }
  else if (*(_DWORD *)a2 >> 4 == 25481893)
  {
    if (a3 >= 8)
    {
      unint64_t v3 = 0;
      *(void *)a1 = *(unsigned int *)(a2 + 4);
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      return 8;
    }
  }
  else
  {
    return -10;
  }
  return v3;
}

uint64_t sub_1DD2EC0D0(unsigned __int16 *a1, char *a2, uint64_t a3, unsigned __int8 *a4, unint64_t a5)
{
  if (a5 >> 17) {
    return -72;
  }
  if (a5 < 3) {
    return -20;
  }
  unsigned int v10 = a1 + 10804;
  unsigned int v11 = *a4;
  switch(v11 >> 6)
  {
    case 1u:
      if ((v11 & 0x30) != 0x10) {
        return -20;
      }
      if (*v10)
      {
        unsigned __int8 v21 = a4[1];
        unint64_t v22 = a4[2] | ((v21 & 3) << 8);
        unint64_t v19 = v22 + 3;
        if (v22 + 3 > a5) {
          return -20;
        }
        if (*((unsigned __int8 *)a1 + 5133) << 8 != 256) {
          return -20;
        }
        unint64_t v23 = ((unint64_t)(v11 & 0xF) << 6) | (v21 >> 2);
        int v24 = a1 + 10880;
        if (sub_1DD2EB75C(a1 + 10880, v23, a4 + 3, v22, (uint64_t)(a1 + 2566)) > 0xFFFFFFFFFFFFFF88) {
          return -20;
        }
        goto LABEL_32;
      }
      return -30;
    case 2u:
      int v25 = (v11 >> 4) & 3;
      if (v25 == 2)
      {
        unsigned int v26 = a4[1] | ((v11 & 0xF) << 8);
        uint64_t v27 = 2;
      }
      else if (v25 == 3)
      {
        unsigned int v26 = ((v11 & 0xF) << 16) | (a4[1] << 8) | a4[2];
        uint64_t v27 = 3;
      }
      else
      {
        unsigned int v26 = v11 & 0x1F;
        uint64_t v27 = 1;
      }
      unint64_t v23 = v26;
      unint64_t v19 = v27 + v26;
      if (v19 + 8 <= a5)
      {
        int v24 = (unsigned __int16 *)&a4[v27];
        *((void *)a1 + 2715) = &a4[v27];
        *((void *)a1 + 2719) = v26;
      }
      else
      {
        if (v19 > a5) {
          return -20;
        }
        int v24 = a1 + 10880;
        memcpy(a1 + 10880, &a4[v27], v26);
LABEL_32:
        *((void *)a1 + 2715) = v24;
        *((void *)a1 + 2719) = v23;
        *(void *)((char *)v24 + v23) = 0;
      }
      goto LABEL_37;
    case 3u:
      int v28 = (v11 >> 4) & 3;
      if (v28 == 2)
      {
        unsigned int v29 = a4[1] | ((v11 & 0xF) << 8);
        unsigned int v30 = 2;
      }
      else if (v28 == 3)
      {
        unint64_t v5 = -20;
        if (a5 < 4) {
          return v5;
        }
        unsigned int v29 = ((v11 & 0xF) << 16) | (a4[1] << 8) | a4[2];
        if (v29 > 0x20000) {
          return v5;
        }
        unsigned int v30 = 3;
      }
      else
      {
        unsigned int v29 = v11 & 0x1F;
        unsigned int v30 = 1;
      }
      unint64_t v23 = v29;
      int v24 = a1 + 10880;
      memset(a1 + 10880, a4[v30], v29 + 8);
      *((void *)a1 + 2715) = v24;
      *((void *)a1 + 2719) = v23;
      unint64_t v19 = v30 + 1;
      goto LABEL_37;
    default:
      if (a5 < 5) {
        return -20;
      }
      int v14 = (v11 >> 4) & 3;
      if (v14 == 2)
      {
        unsigned int v109 = a4[2];
        unint64_t v18 = a4[3] | ((v109 & 0x3F) << 8);
        unint64_t v19 = v18 + 4;
        if (v18 + 4 > a5) {
          return -20;
        }
        unint64_t v17 = ((v11 & 0xF) << 10) | (4 * a4[1]) | (v109 >> 6);
        uint64_t v20 = 4;
        goto LABEL_120;
      }
      if (v14 == 3)
      {
        int v15 = ((v11 & 0xF) << 14) | (a4[1] << 6);
        unsigned int v16 = a4[2];
        unint64_t v17 = v15 | (v16 >> 2);
        unint64_t v5 = -20;
        if (v17 > 0x20000) {
          return v5;
        }
        unint64_t v18 = (unsigned __int16)(a4[3] << 8) | ((v16 & 3) << 16) | a4[4];
        unint64_t v19 = v18 + 5;
        if (v18 + 5 > a5) {
          return v5;
        }
        uint64_t v20 = 5;
        goto LABEL_120;
      }
      unsigned int v110 = a4[1];
      unint64_t v18 = a4[2] | ((v110 & 3) << 8);
      unint64_t v19 = v18 + 3;
      if (v18 + 3 > a5) {
        return -20;
      }
      unint64_t v17 = (v110 >> 2) & 0xFFFFFC3F | ((v11 & 0xF) << 6);
      if ((v11 & 0x10) == 0)
      {
        uint64_t v20 = 3;
LABEL_120:
        unint64_t v111 = sub_1DD2EBD7C((unsigned int *)a1 + 1283, (unsigned char *)a1 + 21760, v17, (char *)&a4[v20], v18);
        goto LABEL_121;
      }
      unint64_t v111 = sub_1DD2EAD1C((unsigned int *)a1 + 1283, (unsigned char *)a1 + 21760, v17, (char *)a4 + 3, v18);
LABEL_121:
      if (v111 > 0xFFFFFFFFFFFFFF88) {
        return -20;
      }
      *((void *)a1 + 2715) = a1 + 10880;
      *((void *)a1 + 2719) = v17;
      *unsigned int v10 = 1;
      *(void *)((char *)a1 + v17 + 21760) = 0;
      int v24 = (unsigned __int16 *)*((void *)a1 + 2715);
      unint64_t v23 = *((void *)a1 + 2719);
LABEL_37:
      uint64_t v31 = a5 - v19;
      if (a5 == v19) {
        return -72;
      }
      uint64_t v32 = &a4[v19];
      uint64_t v33 = &a2[a3];
      uint64_t v34 = (char *)v24 + v23;
      unsigned int v36 = v32 + 1;
      int v35 = *v32;
      if (!*v32)
      {
        int v56 = v24;
        uint64_t v55 = a2;
        goto LABEL_109;
      }
      int v37 = v10[1];
      if ((v35 & 0x80) != 0)
      {
        if (v35 == 255)
        {
          if (v31 < 3) {
            return -72;
          }
          unsigned int v36 = v32 + 3;
          int v35 = *(unsigned __int16 *)(v32 + 1) + 32512;
        }
        else
        {
          if (v31 < 2) {
            return -72;
          }
          unsigned int v36 = v32 + 2;
          int v35 = (v32[1] | (v35 << 8)) - 0x8000;
        }
      }
      unint64_t v38 = (unint64_t)&a4[a5];
      if ((unint64_t)(v36 + 4) > v38) {
        return -72;
      }
      int v120 = v35;
      unint64_t v115 = *((void *)a1 + 2693);
      uint64_t v116 = *((void *)a1 + 2692);
      unint64_t v117 = (char *)*((void *)a1 + 2691);
      unint64_t v118 = v34;
      unint64_t v119 = v33;
      unsigned int v41 = *v36;
      int v39 = (unsigned int *)(v36 + 1);
      unsigned int v40 = v41;
      unint64_t v42 = sub_1DD2EA1FC((uint64_t)a1, v41 >> 6, 0x23u, 9u, v39, v38 - (void)v39, (uint64_t)&unk_1DD3245B8, 6u, v37);
      if (v42 > 0xFFFFFFFFFFFFFF88) {
        return -20;
      }
      uint64_t v43 = (char *)v39 + v42;
      unint64_t v44 = sub_1DD2EA1FC((uint64_t)(a1 + 1026), (v40 >> 4) & 3, 0x1Cu, 8u, (unsigned int *)((char *)v39 + v42), v38 - ((void)v39 + v42), (uint64_t)&unk_1DD324600, 5u, v37);
      if (v44 > 0xFFFFFFFFFFFFFF88) {
        return -20;
      }
      uint64_t v45 = (unsigned int *)&v43[v44];
      unint64_t v46 = sub_1DD2EA1FC((uint64_t)(a1 + 1540), (v40 >> 2) & 3, 0x34u, 9u, v45, v38 - (void)v45, (uint64_t)&unk_1DD32463A, 6u, v37);
      if (v46 > 0xFFFFFFFFFFFFFF88) {
        return -20;
      }
      unint64_t v5 = (char *)v45 + v46 - (char *)v32;
      if (v5 > 0xFFFFFFFFFFFFFF88) {
        return v5;
      }
      if (!v120)
      {
        int v56 = v24;
        uint64_t v55 = a2;
        goto LABEL_130;
      }
      uint64_t v47 = 0;
      long long v124 = 0u;
      memset(v125, 0, 24);
      long long v122 = 0u;
      long long v123 = 0u;
      memset(v121, 0, sizeof(v121));
      v10[1] = 1;
      do
      {
        *((void *)v125 + v47) = *(unsigned int *)&a1[2 * v47 + 10780];
        ++v47;
      }
      while (v47 != 3);
      if ((unint64_t)sub_1DD2ED31C((uint64_t)v121, (unsigned __int8 *)v45 + v46, v38 - ((void)v45 + v46)) > 0xFFFFFFFFFFFFFF88) {
        return -20;
      }
      int v48 = *a1;
      uint64_t v49 = *(void *)&v121[0] << SBYTE8(v121[0]) >> 1 >> (63 - v48);
      DWORD2(v121[0]) += v48;
      *(void *)&long long v122 = v49;
      sub_1DD2E4328((uint64_t)v121);
      int v50 = a1[1026];
      uint64_t v51 = *(void *)&v121[0] << SBYTE8(v121[0]) >> 1 >> (63 - v50);
      DWORD2(v121[0]) += v50;
      *((void *)&v122 + 1) = a1 + 2;
      *(void *)&long long v123 = v51;
      sub_1DD2E4328((uint64_t)v121);
      int v52 = a1[1540];
      unint64_t v53 = *(void *)&v121[0] << SBYTE8(v121[0]) >> 1;
      DWORD2(v121[0]) += v52;
      *((void *)&v123 + 1) = a1 + 1028;
      *(void *)&long long v124 = v53 >> (63 - v52);
      sub_1DD2E4328((uint64_t)v121);
      unint64_t v114 = (unint64_t)(v119 - 8);
      *((void *)&v124 + 1) = a1 + 1542;
      unint64_t v54 = (unint64_t)a2;
      break;
  }
  while (1)
  {
    uint64_t v55 = (char *)v54;
    int v56 = v24;
    if (sub_1DD2E4328((uint64_t)v121) == 3 || v120 == 0) {
      break;
    }
    uint64_t v58 = *((void *)&v122 + 1);
    uint64_t v59 = v122;
    uint64_t v60 = *(unsigned __int8 *)(*((void *)&v122 + 1) + 4 * v122 + 2);
    uint64_t v61 = *((void *)&v124 + 1);
    uint64_t v62 = v124;
    uint64_t v63 = *(unsigned __int8 *)(*((void *)&v124 + 1) + 4 * v124 + 2);
    uint64_t v64 = *((void *)&v123 + 1);
    uint64_t v65 = v123;
    uint64_t v66 = *(unsigned __int8 *)(*((void *)&v123 + 1) + 4 * v123 + 2);
    if (*(unsigned char *)(*((void *)&v123 + 1) + 4 * v123 + 2))
    {
      uint64_t v67 = dword_1DD32496C[v66];
      uint64_t v68 = *(void *)&v121[0] << SBYTE8(v121[0]) >> 1 >> (63 - v66);
      DWORD2(v121[0]) += v66;
      unint64_t v69 = v68 + v67;
      if (v66 != 1)
      {
        *(_OWORD *)((char *)v125 + 8) = v125[0];
LABEL_67:
        *(void *)&v125[0] = v69;
        goto LABEL_69;
      }
    }
    else
    {
      unint64_t v69 = 0;
    }
    unint64_t v70 = 1 - v69;
    if (v69 >= 2 || v60 != 0) {
      unint64_t v70 = v69;
    }
    if (v70)
    {
      unint64_t v69 = *((void *)v125 + v70);
      if (v70 != 1) {
        *(void *)&v125[1] = *((void *)&v125[0] + 1);
      }
      *((void *)&v125[0] + 1) = *(void *)&v125[0];
      goto LABEL_67;
    }
    unint64_t v69 = *(void *)&v125[0];
LABEL_69:
    int v72 = dword_1DD324734[v63];
    if (v63 < 0x20)
    {
      uint64_t v73 = 0;
    }
    else
    {
      uint64_t v73 = *(void *)&v121[0] << SBYTE8(v121[0]) >> 1 >> (63 - v72);
      DWORD2(v121[0]) += v72;
    }
    int v74 = dword_1DD3246A4[v60];
    if (v60 < 0x10)
    {
      uint64_t v75 = 0;
    }
    else
    {
      uint64_t v75 = *(void *)&v121[0] << SBYTE8(v121[0]) >> 1 >> (63 - v74);
      DWORD2(v121[0]) += v74;
    }
    uint64_t v76 = dword_1DD324898[v63];
    uint64_t v77 = dword_1DD324808[v60];
    if ((v74 + v66 + v72) >= 0x20)
    {
      unint64_t v78 = v69;
      sub_1DD2E4328((uint64_t)v121);
      unint64_t v69 = v78;
      uint64_t v58 = *((void *)&v122 + 1);
      uint64_t v59 = v122;
      uint64_t v61 = *((void *)&v124 + 1);
      uint64_t v62 = v124;
      uint64_t v64 = *((void *)&v123 + 1);
      uint64_t v65 = v123;
    }
    unint64_t v79 = v75 + v77;
    long long v80 = (unsigned __int16 *)(v58 + 4 * v59);
    uint64_t v81 = *v80;
    LODWORD(v80) = *((unsigned __int8 *)v80 + 3);
    uint64_t v82 = *(void *)&v121[0] << SBYTE8(v121[0]) >> 1 >> (63 - v80);
    DWORD2(v121[0]) += v80;
    *(void *)&long long v122 = v82 + v81;
    long long v83 = (unsigned __int16 *)(v61 + 4 * v62);
    uint64_t v84 = *v83;
    LODWORD(v83) = *((unsigned __int8 *)v83 + 3);
    uint64_t v85 = *(void *)&v121[0] << SBYTE8(v121[0]) >> 1 >> (63 - v83);
    DWORD2(v121[0]) += v83;
    *(void *)&long long v124 = v85 + v84;
    long long v86 = (unsigned __int16 *)(v64 + 4 * v65);
    uint64_t v87 = *v86;
    LODWORD(v86) = *((unsigned __int8 *)v86 + 3);
    uint64_t v88 = *(void *)&v121[0] << SBYTE8(v121[0]) >> 1 >> (63 - v86);
    DWORD2(v121[0]) += v86;
    *(void *)&long long v123 = v88 + v87;
    unint64_t v5 = -70;
    if (v79 + 8 > v119 - v55) {
      return v5;
    }
    size_t v89 = v73 + v76;
    unint64_t v90 = v79 + v73 + v76;
    if (v90 > v119 - v55) {
      return v5;
    }
    if (v79 > v118 - (char *)v24) {
      return -20;
    }
    --v120;
    unsigned int v91 = &v55[v79];
    unint64_t v5 = v90;
    unint64_t v54 = (unint64_t)&v55[v90];
    int v24 = (unsigned __int16 *)((char *)v24 + v79);
    long long v92 = &v55[v79 - v69];
    do
    {
      uint64_t v93 = *(void *)v56;
      v56 += 4;
      *(void *)uint64_t v55 = v93;
      v55 += 8;
    }
    while (v55 < v91);
    if (v69 <= v91 - v117) {
      goto LABEL_88;
    }
    if (v69 > (unint64_t)&v91[-v116]) {
      return -20;
    }
    uint64_t v94 = v92 - v117;
    long long v95 = (const void *)(v115 + v92 - v117);
    if ((unint64_t)v95 + v89 > v115)
    {
      unint64_t v113 = v69;
      size_t v96 = v89;
      memmove(v91, v95, v117 - v92);
      v91 -= v94;
      if ((unint64_t)v91 > v114 || (size_t v89 = v94 + v96, v94 + v96 <= 2))
      {
        if ((unint64_t)v91 < v54)
        {
          uint64_t v106 = v117;
          do
          {
            char v107 = *v106++;
            *v91++ = v107;
          }
          while ((unint64_t)v91 < v54);
        }
        goto LABEL_102;
      }
      long long v92 = v117;
      unint64_t v69 = v113;
LABEL_88:
      if (v69 > 7)
      {
        *(void *)unsigned int v91 = *(void *)v92;
      }
      else
      {
        uint64_t v97 = dword_1DD324A00[v69];
        *unsigned int v91 = *v92;
        v91[1] = v92[1];
        v91[2] = v92[2];
        v91[3] = v92[3];
        long long v98 = &v92[dword_1DD3249E0[v69]];
        *((_DWORD *)v91 + 1) = *(_DWORD *)v98;
        long long v92 = &v98[-v97];
      }
      long long v99 = v91 + 8;
      unint64_t v100 = v92 + 8;
      if (v54 <= (unint64_t)(v119 - 13))
      {
        do
        {
          uint64_t v105 = *(void *)v100;
          v100 += 8;
          *(void *)long long v99 = v105;
          v99 += 8;
        }
        while (v99 < &v91[v89]);
      }
      else
      {
        if ((unint64_t)v99 < v114)
        {
          unint64_t v101 = v114 - (void)v99;
          uint64_t v102 = (uint64_t *)v100;
          do
          {
            uint64_t v103 = *v102++;
            *(void *)long long v99 = v103;
            v99 += 8;
          }
          while ((unint64_t)v99 < v114);
          v100 += v101;
          long long v99 = v119 - 8;
        }
        while ((unint64_t)v99 < v54)
        {
          char v104 = *v100++;
          *v99++ = v104;
        }
      }
      goto LABEL_102;
    }
    memmove(v91, v95, v89);
LABEL_102:
    if (v90 >= 0xFFFFFFFFFFFFFF89) {
      return v5;
    }
  }
  if (v120) {
    return -20;
  }
  for (uint64_t i = 0; i != 3; ++i)
    *(_DWORD *)&a1[2 * i + 10780] = *((void *)v125 + i);
LABEL_130:
  uint64_t v34 = v118;
  uint64_t v33 = v119;
LABEL_109:
  int64_t v108 = v34 - (char *)v56;
  if (v34 - (char *)v56 > (unint64_t)(v33 - v55)) {
    return -70;
  }
  if (v34 != (char *)v56)
  {
    memcpy(v55, v56, v34 - (char *)v56);
    v55 += v108;
  }
  return v55 - a2;
}

uint64_t sub_1DD2ECB3C(void *a1, char *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  sub_1DD2ECBD4((uint64_t)a1, a6, a7);
  int v12 = (char *)a1[2690];
  if (v12 != a2)
  {
    a1[2693] = v12;
    a1[2692] = &a2[a1[2691] - (void)v12];
    a1[2691] = a2;
    a1[2690] = a2;
  }
  return sub_1DD2ECE90((uint64_t)a1, a2, a3, a4, a5);
}

double sub_1DD2ECBD4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 21552) = 5;
  *(_DWORD *)(a1 + 5132) = 201326604;
  *(void *)(a1 + 21560) = 0x400000001;
  *(_DWORD *)(a1 + 21568) = 8;
  double result = 0.0;
  *(_OWORD *)(a1 + 21520) = 0u;
  *(_OWORD *)(a1 + 21536) = 0u;
  *(void *)(a1 + 21608) = 0;
  *(_DWORD *)(a1 + 21604) = 0;
  *(_DWORD *)(a1 + 21712) = 0;
  if (a2 && a3)
  {
    if (a3 <= 7 || *(_DWORD *)a2 != -332356553)
    {
      *(void *)(a1 + 21536) = a2;
      *(void *)(a1 + 21528) = a2;
      uint64_t v22 = a2 + a3;
LABEL_18:
      *(void *)(a1 + 21520) = v22;
      return result;
    }
    *(_DWORD *)(a1 + 21712) = *(_DWORD *)(a2 + 4);
    uint64_t v7 = a2 + 8;
    unint64_t v8 = a3 - 8;
    unint64_t v9 = sub_1DD2EB320((unsigned int *)(a1 + 5132), (char *)(a2 + 8), a3 - 8);
    if (v9 <= 0xFFFFFFFFFFFFFF88)
    {
      unint64_t v10 = a2 + a3;
      uint64_t v11 = v7 + v9;
      unsigned int v27 = 0;
      unsigned int v28 = 28;
      unint64_t v12 = sub_1DD2E2504((uint64_t)v29, &v28, &v27, (unsigned int *)(v7 + v9), v10 - (v7 + v9));
      if (v12 <= 0xFFFFFFFFFFFFFF88 && v27 < 9)
      {
        unint64_t v13 = v12;
        if ((unint64_t)sub_1DD2E6D54((int *)(a1 + 2052), (uint64_t)v29, v28, v27) <= 0xFFFFFFFFFFFFFF88)
        {
          int v14 = (unsigned int *)(v11 + v13);
          unsigned int v27 = 0;
          unsigned int v28 = 52;
          unint64_t v15 = sub_1DD2E2504((uint64_t)v29, &v28, &v27, v14, v10 - (void)v14);
          if (v15 <= 0xFFFFFFFFFFFFFF88 && v27 < 0xA)
          {
            unint64_t v16 = v15;
            if ((unint64_t)sub_1DD2E6D54((int *)(a1 + 3080), (uint64_t)v29, v28, v27) <= 0xFFFFFFFFFFFFFF88)
            {
              unint64_t v17 = (unsigned int *)((char *)v14 + v16);
              unsigned int v27 = 0;
              unsigned int v28 = 35;
              unint64_t v18 = sub_1DD2E2504((uint64_t)v29, &v28, &v27, v17, v10 - (void)v17);
              if (v18 <= 0xFFFFFFFFFFFFFF88 && v27 < 0xA)
              {
                unint64_t v19 = v18;
                if ((unint64_t)sub_1DD2E6D54((int *)a1, (uint64_t)v29, v28, v27) <= 0xFFFFFFFFFFFFFF88)
                {
                  uint64_t v20 = (unsigned int *)((char *)v17 + v19);
                  unint64_t v21 = (unint64_t)v17 + v19 + 12;
                  if (v21 <= v10)
                  {
                    unint64_t v23 = *v20;
                    *(_DWORD *)(a1 + 21560) = v23;
                    if (v23)
                    {
                      if (v8 > v23)
                      {
                        unint64_t v24 = v20[1];
                        *(_DWORD *)(a1 + 21564) = v24;
                        if (v24)
                        {
                          if (v8 > v24)
                          {
                            unint64_t v25 = v20[2];
                            *(_DWORD *)(a1 + 21568) = v25;
                            if (v25)
                            {
                              if (v8 > v25)
                              {
                                *(void *)&double result = 0x100000001;
                                *(void *)(a1 + 21608) = 0x100000001;
                                if (v21 - v7 <= 0xFFFFFFFFFFFFFF88)
                                {
                                  uint64_t v26 = *(void *)(a1 + 21520);
                                  *(void *)(a1 + 21544) = v26;
                                  *(void *)(a1 + 21536) = v21 + *(void *)(a1 + 21528) - v26;
                                  *(void *)(a1 + 21528) = v21;
                                  uint64_t v22 = v8 + v7;
                                  goto LABEL_18;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1DD2ECE90(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a5 < 8) {
    return -72;
  }
  unint64_t v6 = *(unsigned __int8 *)(a4 + 4);
  uint64_t v7 = *(void *)((char *)qword_1DD324598 + ((v6 >> 3) & 0x18));
  if (v6 >= 0x40 || (v6 & 0x20) == 0) {
    unint64_t v9 = v7 + qword_1DD324578[v6 & 3] - ((v6 & 0x20) >> 5);
  }
  else {
    unint64_t v9 = v7 + qword_1DD324578[v6 & 3] - ((v6 & 0x20) >> 5) + 1;
  }
  size_t v10 = v9 + 6;
  if (v9 + 6 <= 0xFFFFFFFFFFFFFF88)
  {
    if (v9 + 9 > a5) {
      return -72;
    }
    if (sub_1DD2ED238(a1, a4, v10))
    {
      return -20;
    }
    else
    {
      unint64_t v16 = a4 + a5;
      unint64_t v17 = (unsigned __int8 *)(a4 + v10);
      size_t __len = 0;
      unint64_t v18 = sub_1DD2EA154((unsigned __int8 *)(a4 + v10), a5 - v10, (int *)&__len);
      unint64_t v19 = v18;
      if (v18 <= 0xFFFFFFFFFFFFFF88)
      {
        uint64_t v20 = &a2[a3];
        unint64_t v21 = a5 - v10;
        uint64_t v22 = a2;
        while (1)
        {
          unint64_t v23 = v21 - 3;
          BOOL v24 = v21 - 3 >= v19;
          unint64_t v21 = v21 - 3 - v19;
          if (!v24) {
            return -72;
          }
          unint64_t v25 = v17 + 3;
          switch((int)__len)
          {
            case 0:
              size_t v10 = sub_1DD2EC0D0((unsigned __int16 *)a1, v22, v20 - v22, v25, v19);
              if (v10 <= 0xFFFFFFFFFFFFFF88) {
                goto LABEL_28;
              }
              return v10;
            case 1:
              if (v19 > v20 - v22) {
                return -70;
              }
              if (!v19) {
                goto LABEL_27;
              }
              memcpy(v22, v25, v19);
              size_t v10 = v19;
              goto LABEL_28;
            case 2:
              size_t v10 = HIDWORD(__len);
              if (v20 - v22 < (unint64_t)HIDWORD(__len)) {
                return -70;
              }
              if (HIDWORD(__len)) {
                memset(v22, *v25, HIDWORD(__len));
              }
              else {
LABEL_27:
              }
                size_t v10 = 0;
LABEL_28:
              if (*(_DWORD *)(a1 + 21592)) {
                sub_1DD29499C(a1 + 21616, v22, v10);
              }
              v22 += v10;
              unint64_t v17 = &v25[v19];
              size_t __len = 0;
              unint64_t v19 = sub_1DD2EA154(v17, v16 - (void)v17, (int *)&__len);
              size_t v10 = v19;
              if (v19 >= 0xFFFFFFFFFFFFFF89) {
                return v10;
              }
              break;
            case 3:
              if (v23) {
                return -72;
              }
              return v22 - a2;
            default:
              return -1;
          }
        }
      }
      return v18;
    }
  }
  return v10;
}

unint64_t sub_1DD2ED0E4(unint64_t result, unint64_t a2, unint64_t *a3, void *a4)
{
  if (a2 <= 7) {
    goto LABEL_2;
  }
  unint64_t v7 = result;
  unint64_t v8 = *(unsigned __int8 *)(result + 4);
  uint64_t v9 = *(void *)((char *)qword_1DD324598 + ((v8 >> 3) & 0x18));
  if (v8 >= 0x40 || (v8 & 0x20) == 0) {
    unint64_t v11 = v9 + qword_1DD324578[v8 & 3] - ((v8 & 0x20) >> 5);
  }
  else {
    unint64_t v11 = v9 + qword_1DD324578[v8 & 3] - ((v8 & 0x20) >> 5) + 1;
  }
  unint64_t v6 = v11 + 6;
  if (v6 >= 0xFFFFFFFFFFFFFF89) {
    goto LABEL_20;
  }
  if (*(_DWORD *)result != -47205081)
  {
    unint64_t v6 = -10;
    goto LABEL_20;
  }
  if (v6 + 3 > a2)
  {
LABEL_2:
    unint64_t v6 = -72;
LABEL_20:
    *a3 = v6;
LABEL_21:
    *a4 = -2;
    return result;
  }
  unint64_t v12 = result + v6;
  unint64_t v13 = a2 - v6;
  uint64_t v17 = 0;
  double result = sub_1DD2EA154((unsigned __int8 *)(result + v6), a2 - v6, (int *)&v17);
  if (result > 0xFFFFFFFFFFFFFF88)
  {
LABEL_24:
    *a3 = result;
    goto LABEL_21;
  }
  uint64_t v14 = 0;
  while (1)
  {
    unint64_t v15 = v12 + 3;
    if (v17 == 3) {
      break;
    }
    BOOL v16 = v13 - 3 >= result;
    unint64_t v13 = v13 - 3 - result;
    if (!v16)
    {
      double result = -72;
      goto LABEL_24;
    }
    unint64_t v12 = v15 + result;
    uint64_t v17 = 0;
    double result = sub_1DD2EA154((unsigned __int8 *)(v15 + result), v13, (int *)&v17);
    v14 += 0x20000;
    if (result >= 0xFFFFFFFFFFFFFF89) {
      goto LABEL_24;
    }
  }
  *a3 = v15 - v7;
  *a4 = v14;
  return result;
}

uint64_t sub_1DD2ED238(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = (_DWORD *)(a1 + 21588);
  uint64_t v5 = sub_1DD2EBF28(a1 + 21576, a2, a3);
  if (*v4 && v4[31] != *v4) {
    return -32;
  }
  if (v4[1]) {
    sub_1DD294954(a1 + 21616, 0);
  }
  return v5;
}

uint64_t sub_1DD2ED2B0(uint64_t a1)
{
  if (a1)
  {
    if (*(void *)a1) {
      (*(void (**)(void))(*(void *)a1 + 21736))(*(void *)(*(void *)a1 + 21744));
    }
    if (*(void *)(a1 + 40)) {
      (*(void (**)(void))(a1 + 144))(*(void *)(a1 + 152));
    }
    if (*(void *)(a1 + 64)) {
      (*(void (**)(void))(a1 + 144))(*(void *)(a1 + 152));
    }
    (*(void (**)(void, uint64_t))(a1 + 144))(*(void *)(a1 + 152), a1);
  }
  return 0;
}

uint64_t sub_1DD2ED31C(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  if (a3)
  {
    *(void *)(a1 + 24) = a2;
    if (a3 < 8)
    {
      *(void *)(a1 + 16) = a2;
      uint64_t v4 = *a2;
      *(void *)a1 = v4;
      switch(a3)
      {
        case 2uLL:
          goto LABEL_12;
        case 3uLL:
          goto LABEL_11;
        case 4uLL:
          goto LABEL_10;
        case 5uLL:
          goto LABEL_9;
        case 6uLL:
          goto LABEL_8;
        case 7uLL:
          v4 |= (unint64_t)a2[6] << 48;
          *(void *)a1 = v4;
LABEL_8:
          v4 += (unint64_t)a2[5] << 40;
          *(void *)a1 = v4;
LABEL_9:
          v4 += (unint64_t)a2[4] << 32;
          *(void *)a1 = v4;
LABEL_10:
          v4 += (unint64_t)a2[3] << 24;
          *(void *)a1 = v4;
LABEL_11:
          v4 += (unint64_t)a2[2] << 16;
          *(void *)a1 = v4;
LABEL_12:
          *(void *)a1 = v4 + ((unint64_t)a2[1] << 8);
          break;
        default:
          break;
      }
      if (a2[a3 - 1])
      {
        unsigned int v3 = __clz(a2[a3 - 1]) - 8 * a3 + 41;
        goto LABEL_15;
      }
    }
    else
    {
      *(void *)(a1 + 16) = &a2[a3 - 8];
      *(void *)a1 = *(void *)&a2[a3 - 8];
      if (a2[a3 - 1])
      {
        unsigned int v3 = __clz(a2[a3 - 1]) - 23;
LABEL_15:
        *(_DWORD *)(a1 + 8) = v3;
        return a3;
      }
    }
    *(_DWORD *)(a1 + 8) = 0;
    return -1;
  }
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return -72;
}

void *sub_1DD2ED42C(int a1, size_t __size)
{
  return malloc(__size);
}

void sub_1DD2ED434(int a1, void *a2)
{
}

uint64_t sub_1DD2ED43C(int a1, unsigned __int8 *a2, unint64_t a3)
{
  unint64_t v3 = HIWORD(a1);
  unint64_t v4 = (unsigned __int16)a1;
  if (a3 != 1)
  {
    if (!a2) {
      return 1;
    }
    if (a3 < 0x10)
    {
      for (; a3; --a3)
      {
        unsigned int v9 = *a2++;
        v4 += v9;
        v3 += v4;
      }
      if (v4 > 0xFFF0) {
        v4 -= 65521;
      }
      v3 %= 0xFFF1uLL;
      return v4 | (v3 << 16);
    }
    if (a3 >> 4 >= 0x15B)
    {
      do
      {
        a3 -= 5552;
        int v10 = -347;
        unint64_t v11 = a2;
        do
        {
          unint64_t v12 = v4 + *v11;
          uint64_t v13 = v12 + v3;
          unint64_t v14 = v12 + v11[1];
          uint64_t v15 = v13 + v14;
          unint64_t v16 = v14 + v11[2];
          uint64_t v17 = v15 + v16;
          unint64_t v18 = v16 + v11[3];
          uint64_t v19 = v17 + v18;
          unint64_t v20 = v18 + v11[4];
          uint64_t v21 = v19 + v20;
          unint64_t v22 = v20 + v11[5];
          uint64_t v23 = v21 + v22;
          unint64_t v24 = v22 + v11[6];
          uint64_t v25 = v23 + v24;
          unint64_t v26 = v24 + v11[7];
          uint64_t v27 = v25 + v26;
          unint64_t v28 = v26 + v11[8];
          uint64_t v29 = v27 + v28;
          uint64_t v30 = v28 + v11[9];
          uint64_t v31 = v29 + v30;
          uint64_t v32 = v30 + v11[10];
          uint64_t v33 = v31 + v32;
          uint64_t v34 = v32 + v11[11];
          uint64_t v35 = v33 + v34;
          uint64_t v36 = v34 + v11[12];
          uint64_t v37 = v35 + v36;
          uint64_t v38 = v36 + v11[13];
          uint64_t v39 = v37 + v38;
          uint64_t v40 = v38 + v11[14];
          uint64_t v41 = v39 + v40;
          unint64_t v4 = v40 + v11[15];
          unint64_t v3 = v41 + v4;
          v11 += 16;
        }
        while (!__CFADD__(v10++, 1));
        a2 += 5552;
        v4 %= 0xFFF1uLL;
        v3 %= 0xFFF1uLL;
      }
      while (a3 >> 4 > 0x15A);
      if (!a3) {
        return v4 | (v3 << 16);
      }
      if (a3 < 0x10) {
        goto LABEL_30;
      }
    }
    do
    {
      a3 -= 16;
      unint64_t v43 = v4 + *a2;
      uint64_t v44 = v43 + v3;
      unint64_t v45 = v43 + a2[1];
      uint64_t v46 = v44 + v45;
      unint64_t v47 = v45 + a2[2];
      uint64_t v48 = v46 + v47;
      unint64_t v49 = v47 + a2[3];
      uint64_t v50 = v48 + v49;
      unint64_t v51 = v49 + a2[4];
      uint64_t v52 = v50 + v51;
      unint64_t v53 = v51 + a2[5];
      uint64_t v54 = v52 + v53;
      unint64_t v55 = v53 + a2[6];
      uint64_t v56 = v54 + v55;
      unint64_t v57 = v55 + a2[7];
      uint64_t v58 = v56 + v57;
      unint64_t v59 = v57 + a2[8];
      uint64_t v60 = v58 + v59;
      uint64_t v61 = v59 + a2[9];
      uint64_t v62 = v60 + v61;
      uint64_t v63 = v61 + a2[10];
      uint64_t v64 = v62 + v63;
      uint64_t v65 = v63 + a2[11];
      uint64_t v66 = v64 + v65;
      uint64_t v67 = v65 + a2[12];
      uint64_t v68 = v66 + v67;
      uint64_t v69 = v67 + a2[13];
      uint64_t v70 = v68 + v69;
      uint64_t v71 = v69 + a2[14];
      uint64_t v72 = v70 + v71;
      unint64_t v4 = v71 + a2[15];
      unint64_t v3 = v72 + v4;
      a2 += 16;
    }
    while (a3 > 0xF);
    if (a3)
    {
LABEL_30:
      do
      {
        unsigned int v73 = *a2++;
        v4 += v73;
        v3 += v4;
        --a3;
      }
      while (a3);
    }
    v4 %= 0xFFF1uLL;
    v3 %= 0xFFF1uLL;
    return v4 | (v3 << 16);
  }
  unint64_t v5 = (unsigned __int16)a1 + (unint64_t)*a2;
  if (v5 > 0xFFF0) {
    v5 -= 65521;
  }
  unint64_t v6 = v5 + HIWORD(a1);
  if (v6 <= 0xFFF0) {
    uint64_t v7 = v6 << 16;
  }
  else {
    uint64_t v7 = (v6 << 16) - 4293984256u;
  }
  return v7 | v5;
}

uint64_t sub_1DD2ED768(int a1, unsigned __int8 *a2, unsigned int a3)
{
  return sub_1DD2ED43C(a1, a2, a3);
}

uint64_t sub_1DD2ED770(int a1, unsigned __int8 *a2, unint64_t a3)
{
  if (!a2) {
    return 0;
  }
  unint64_t v3 = a2;
  _X20 = ~a1;
  if (a3 && (a2 & 7) != 0)
  {
    unint64_t v5 = a2 + 1;
    do
    {
      int v7 = *v3++;
      _W9 = v7;
      __asm { CRC32B          W20, W20, W9 }
      _X20 = _OFF;
      __asm { CRC32B          W20, W20, W9 }
      if (!--a3) {
        break;
      }
    }
    while ((unint64_t)(v5++ & 7));
  }
  unint64_t v14 = a3 >> 3;
  if (a3 >= 0x17610)
  {
    uint64_t v15 = v3 + 31920;
    do
    {
      LODWORD(_X13) = 0;
      _W14 = 0;
      uint64_t v18 = -31920;
      uint64_t v19 = v15;
      do
      {
        _X17 = *(void *)&v3[v18 + 31920];
        _X0 = *(void *)v19;
        _X1 = *((void *)v19 + 3990);
        __asm
        {
          CRC32X          W20, W20, X17
          CRC32X          W14, W14, X0
          CRC32X          W13, W13, X1
        }
        _X13 = _OFF;
        __asm { CRC32X          W13, W13, X1 }
        v19 += 8;
        v18 += 8;
      }
      while (v18);
      int v24 = 0;
      v3 += 95760;
      for (unsigned int i = 0x80000000; ; i >>= 1)
      {
        if ((i & 0xA10D3D0C) != 0)
        {
          v24 ^= _X20;
          if (((i - 1) & 0xA10D3D0C) == 0) {
            break;
          }
        }
        if (_X20) {
          LODWORD(_X20) = (_X20 >> 1) ^ 0xEDB88320;
        }
        else {
          LODWORD(_X20) = _X20 >> 1;
        }
      }
      LODWORD(v26) = 0;
      unsigned int v27 = v24 ^ _W14;
      for (unsigned int j = 0x80000000; ; j >>= 1)
      {
        if ((j & 0xA10D3D0C) != 0)
        {
          uint64_t v26 = v26 ^ v27;
          if (((j - 1) & 0xA10D3D0C) == 0) {
            break;
          }
        }
        if (v27) {
          unsigned int v27 = (v27 >> 1) ^ 0xEDB88320;
        }
        else {
          v27 >>= 1;
        }
      }
      v14 -= 11970;
      _X20 = _X13 ^ v26;
      v15 += 95760;
    }
    while (v14 > 0x2EC1);
  }
  unint64_t v29 = a3 & 7;
  if (v14 >= 0x960)
  {
    unint64_t v30 = (unsigned __int16)v14 / 3;
    if ((unsigned __int16)v14 >= 3u)
    {
      LODWORD(_X24) = 0;
      _W25 = 0;
      if (v30 <= 1) {
        uint64_t v34 = 1;
      }
      else {
        uint64_t v34 = (unsigned __int16)v14 / 3;
      }
      uint64_t v35 = (uint64_t *)v3;
      do
      {
        _X11 = v35[v30];
        _X12 = v35[2 * v30];
        uint64_t v39 = *v35++;
        _X13 = v39;
        __asm
        {
          CRC32X          W20, W20, X13
          CRC32X          W25, W25, X11
          CRC32X          W24, W24, X12
        }
        _X24 = _OFF;
        __asm { CRC32X          W24, W24, X12 }
        --v34;
      }
      while (v34);
    }
    else
    {
      _W25 = 0;
      _X24 = 0;
    }
    uint64_t v41 = 3 * v30;
    v3 += 24 * v30;
    int v42 = sub_1DD2EDA1C(v30, 6);
    int v43 = 0;
    for (unsigned int k = 0x80000000; ; k >>= 1)
    {
      if ((k & v42) != 0)
      {
        v43 ^= _X20;
        if (((k - 1) & v42) == 0) {
          break;
        }
      }
      if (_X20) {
        LODWORD(_X20) = (_X20 >> 1) ^ 0xEDB88320;
      }
      else {
        LODWORD(_X20) = _X20 >> 1;
      }
    }
    LODWORD(v45) = 0;
    unsigned int v46 = v43 ^ _W25;
    for (unsigned int m = 0x80000000; ; m >>= 1)
    {
      if ((m & v42) != 0)
      {
        uint64_t v45 = v45 ^ v46;
        if (((m - 1) & v42) == 0) {
          break;
        }
      }
      if (v46) {
        unsigned int v46 = (v46 >> 1) ^ 0xEDB88320;
      }
      else {
        v46 >>= 1;
      }
    }
    v14 -= v41;
    _X20 = _X24 ^ v45;
  }
  if (v14)
  {
    uint64_t v48 = (uint64_t *)v3;
    unint64_t v49 = v14;
    do
    {
      uint64_t v51 = *v48++;
      _X10 = v51;
      __asm { CRC32X          W20, W20, X10 }
      _X20 = _OFF;
      __asm { CRC32X          W20, W20, X10 }
      --v49;
    }
    while (v49);
  }
  if (v29)
  {
    unint64_t v53 = &v3[8 * v14];
    do
    {
      int v55 = *v53++;
      _W9 = v55;
      __asm { CRC32B          W20, W20, W9 }
      _X20 = _OFF;
      __asm { CRC32B          W20, W20, W9 }
      --v29;
    }
    while (v29);
  }
  return _X20 ^ 0xFFFFFFFFLL;
}

uint64_t sub_1DD2EDA1C(uint64_t a1, char a2)
{
  if (!a1) {
    return 0x80000000;
  }
  uint64_t v2 = 0x80000000;
  do
  {
    if (a1)
    {
      LODWORD(v3) = 0;
      int v5 = dword_1DD324A20[a2 & 0x1F];
      for (unsigned int i = 0x80000000; ; i >>= 1)
      {
        if ((i & v5) != 0)
        {
          uint64_t v3 = v3 ^ v2;
          if (((i - 1) & v5) == 0) {
            break;
          }
        }
        if (v2) {
          LODWORD(v2) = (v2 >> 1) ^ 0xEDB88320;
        }
        else {
          LODWORD(v2) = v2 >> 1;
        }
      }
    }
    else
    {
      uint64_t v3 = v2;
    }
    ++a2;
    uint64_t v2 = v3;
    BOOL v4 = (unint64_t)a1 > 1;
    a1 >>= 1;
  }
  while (v4);
  return v3;
}

uint64_t sub_1DD2EDAA4(int a1, unsigned __int8 *a2, unsigned int a3)
{
  return sub_1DD2ED770(a1, a2, a3);
}

uint64_t sub_1DD2EDAAC(void *a1, unsigned int a2, int a3, unsigned int a4, int a5, unsigned int a6, unsigned char *a7, int a8)
{
  if (!a7) {
    return 4294967290;
  }
  uint64_t result = 4294967290;
  if (a8 != 112 || *a7 != 49) {
    return result;
  }
  if (!a1) {
    return 4294967294;
  }
  unsigned int v12 = a4;
  a1[6] = 0;
  uint64_t v13 = (void *(*)(uint64_t, int, int))a1[8];
  if (!v13)
  {
    uint64_t v13 = sub_1DD2F431C;
    a1[8] = sub_1DD2F431C;
    a1[10] = 0;
  }
  if (!a1[9]) {
    a1[9] = sub_1DD2F4324;
  }
  if (a2 == -1) {
    unsigned int v14 = 6;
  }
  else {
    unsigned int v14 = a2;
  }
  if ((a4 & 0x80000000) == 0)
  {
    if (a4 < 0x10)
    {
      char v16 = 0;
      int v15 = 1;
    }
    else
    {
      int v15 = 2;
      char v16 = 1;
      unsigned int v12 = a4 - 16;
    }
    goto LABEL_20;
  }
  if (a4 < 0xFFFFFFF1) {
    return 4294967294;
  }
  int v15 = 0;
  unsigned int v12 = -a4;
  char v16 = 1;
LABEL_20:
  uint64_t result = 4294967294;
  if (a6 <= 4 && v14 <= 9 && a3 == 8 && (a5 - 10) >= 0xFFFFFFF7 && v12 >= 8 && v12 <= 0xF)
  {
    if (v12 != 8) {
      char v16 = 0;
    }
    if ((v16 & 1) == 0)
    {
      uint64_t v17 = (uint64_t)v13(a1[10], 1, 5952);
      if (v17)
      {
        uint64_t v18 = v17;
        if (v12 == 8) {
          int v19 = 9;
        }
        else {
          int v19 = v12;
        }
        a1[7] = v17;
        *(void *)uint64_t v17 = a1;
        *(_DWORD *)(v17 + 8) = 42;
        *(_DWORD *)(v17 + 48) = v15;
        *(void *)(v17 + 56) = 0;
        *(_DWORD *)(v17 + 80) = 1 << v19;
        *(_DWORD *)(v17 + 84) = v19;
        *(_DWORD *)(v17 + 88) = (1 << v19) - 1;
        *(_DWORD *)(v17 + 132) = 128 << a5;
        *(_DWORD *)(v17 + 136) = a5 + 7;
        *(_DWORD *)(v17 + 140) = (128 << a5) - 1;
        *(_DWORD *)(v17 + 144) = (a5 + 9) / 3u;
        *(void *)(v17 + 96) = ((uint64_t (*)(void))a1[8])(a1[10]);
        *(void *)(v18 + 112) = ((uint64_t (*)(void, void, uint64_t))a1[8])(a1[10], *(unsigned int *)(v18 + 80), 2);
        *(void *)(v18 + 120) = ((uint64_t (*)(void, void, uint64_t))a1[8])(a1[10], *(unsigned int *)(v18 + 132), 2);
        *(void *)(v18 + 5944) = 0;
        *(_DWORD *)(v18 + 5896) = 64 << a5;
        uint64_t v20 = ((uint64_t (*)(void))a1[8])(a1[10]);
        uint64_t v21 = *(unsigned int *)(v18 + 5896);
        *(void *)(v18 + 16) = v20;
        *(void *)(v18 + 24) = 4 * v21;
        if (*(void *)(v18 + 96) && *(void *)(v18 + 112) && *(void *)(v18 + 120) && v20)
        {
          *(void *)(v18 + 5888) = v20 + v21;
          *(_DWORD *)(v18 + 5904) = 3 * v21 - 3;
          *(_DWORD *)(v18 + 196) = v14;
          *(_DWORD *)(v18 + 200) = a6;
          *(unsigned char *)(v18 + 72) = 8;
          return sub_1DD2EDE10((uint64_t)a1);
        }
        *(_DWORD *)(v18 + 8) = 666;
        a1[6] = "insufficient memory";
        sub_1DD2EDD60((uint64_t)a1);
      }
      return 4294967292;
    }
  }
  return result;
}

uint64_t sub_1DD2EDD60(uint64_t a1)
{
  if (sub_1DD2EDEB4((void *)a1)) {
    return 4294967294;
  }
  uint64_t v3 = *(void *)(a1 + 56);
  int v4 = *(_DWORD *)(v3 + 8);
  if (*(void *)(v3 + 16))
  {
    (*(void (**)(void, void))(a1 + 72))(*(void *)(a1 + 80), *(void *)(v3 + 16));
    uint64_t v3 = *(void *)(a1 + 56);
  }
  if (*(void *)(v3 + 120))
  {
    (*(void (**)(void, void))(a1 + 72))(*(void *)(a1 + 80), *(void *)(v3 + 120));
    uint64_t v3 = *(void *)(a1 + 56);
  }
  if (*(void *)(v3 + 112))
  {
    (*(void (**)(void, void))(a1 + 72))(*(void *)(a1 + 80), *(void *)(v3 + 112));
    uint64_t v3 = *(void *)(a1 + 56);
  }
  if (*(void *)(v3 + 96))
  {
    (*(void (**)(void, void))(a1 + 72))(*(void *)(a1 + 80), *(void *)(v3 + 96));
    uint64_t v3 = *(void *)(a1 + 56);
  }
  (*(void (**)(void, uint64_t))(a1 + 72))(*(void *)(a1 + 80), v3);
  *(void *)(a1 + 56) = 0;
  if (v4 == 113) {
    return 4294967293;
  }
  else {
    return 0;
  }
}

uint64_t sub_1DD2EDE10(uint64_t a1)
{
  uint64_t v2 = sub_1DD2EE170(a1);
  if (!v2)
  {
    uint64_t v3 = *(void *)(a1 + 56);
    *(void *)(v3 + 104) = 2 * *(unsigned int *)(v3 + 80);
    int v4 = *(char **)(v3 + 120);
    size_t v5 = 2 * (*(_DWORD *)(v3 + 132) - 1);
    *(_WORD *)&v4[v5] = 0;
    bzero(v4, v5);
    unint64_t v6 = (unsigned __int16 *)((char *)&unk_1F387D0A0 + 16 * *(int *)(v3 + 196));
    int v7 = v6[2];
    *(_DWORD *)(v3 + 204) = *v6;
    *(_DWORD *)(v3 + 208) = v7;
    int v8 = v6[1];
    *(_DWORD *)(v3 + 188) = v6[3];
    *(_DWORD *)(v3 + 192) = v8;
    *(void *)(v3 + 152) = 0;
    *(_DWORD *)(v3 + 5932) = 0;
    *(void *)(v3 + 180) = 0x200000000;
    *(_DWORD *)(v3 + 160) = 2;
    *(void *)(v3 + 168) = 0;
    *(_DWORD *)(v3 + 128) = 0;
  }
  return v2;
}

BOOL sub_1DD2EDEB4(void *a1)
{
  BOOL result = 1;
  if (a1)
  {
    if (a1[8])
    {
      if (a1[9])
      {
        uint64_t v1 = a1[7];
        if (v1)
        {
          if (*(void **)v1 == a1)
          {
            int v3 = *(_DWORD *)(v1 + 8);
            BOOL v4 = (v3 - 57) > 0x38 || ((1 << (v3 - 57)) & 0x100400400011001) == 0;
            if (!v4 || v3 == 666 || v3 == 42) {
              return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_1DD2EDF30(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  unsigned int v3 = *(_DWORD *)(a1 + 180);
  int32x2_t v4 = vdup_n_s32(v2);
  do
  {
    unsigned int v5 = *(_DWORD *)(a1 + 172);
    unsigned int v6 = *(_DWORD *)(a1 + 104) - (v3 + v5);
    if (v5 >= (int)v2 - 262 + *(_DWORD *)(a1 + 80))
    {
      memcpy(*(void **)(a1 + 96), (const void *)(*(void *)(a1 + 96) + v2), v2 - v6);
      int32x2_t v7 = vsub_s32(*(int32x2_t *)(a1 + 172), v4);
      *(int32x2_t *)(a1 + 172) = v7;
      *(void *)(a1 + 152) -= v2;
      unsigned int v5 = v7.i32[0];
      if (*(_DWORD *)(a1 + 5932) > v7.i32[0]) {
        *(_DWORD *)(a1 + 5932) = v7.i32[0];
      }
      uint64_t v8 = *(unsigned int *)(a1 + 80);
      uint64_t v9 = *(unsigned int *)(a1 + 132);
      int v10 = (_WORD *)(*(void *)(a1 + 120) + 2 * v9 - 2);
      do
      {
        unsigned int v11 = (unsigned __int16)*v10;
        BOOL v12 = v11 >= v8;
        __int16 v13 = v11 - v8;
        if (!v12) {
          __int16 v13 = 0;
        }
        *v10-- = v13;
        LODWORD(v9) = v9 - 1;
      }
      while (v9);
      unsigned int v14 = (_WORD *)(*(void *)(a1 + 112) + 2 * v8 - 2);
      int v15 = v8;
      do
      {
        unsigned int v16 = (unsigned __int16)*v14;
        BOOL v12 = v16 >= v8;
        __int16 v17 = v16 - v8;
        if (!v12) {
          __int16 v17 = 0;
        }
        *v14-- = v17;
        --v15;
      }
      while (v15);
      v6 += v2;
    }
    if (!*(_DWORD *)(*(void *)a1 + 8)) {
      break;
    }
    unsigned int v3 = *(_DWORD *)(a1 + 180)
       + sub_1DD2F0358(*(void *)a1, (void *)(*(void *)(a1 + 96) + v5 + *(unsigned int *)(a1 + 180)), v6);
    *(_DWORD *)(a1 + 180) = v3;
    int v18 = *(_DWORD *)(a1 + 5932);
    if (v18 + v3 >= 3)
    {
      unsigned int v19 = *(_DWORD *)(a1 + 172) - v18;
      uint64_t v20 = *(void *)(a1 + 96);
      int v21 = *(unsigned __int8 *)(v20 + v19);
      *(_DWORD *)(a1 + 128) = v21;
      int v23 = *(_DWORD *)(a1 + 140);
      int v22 = *(_DWORD *)(a1 + 144);
      unsigned int v24 = ((v21 << v22) ^ *(unsigned __int8 *)(v20 + v19 + 1)) & v23;
      *(_DWORD *)(a1 + 128) = v24;
      do
      {
        if (!v18) {
          break;
        }
        unsigned int v24 = ((v24 << v22) ^ *(unsigned __int8 *)(v20 + v19 + 2)) & v23;
        uint64_t v25 = *(void *)(a1 + 120);
        *(_WORD *)(*(void *)(a1 + 112) + 2 * (*(_DWORD *)(a1 + 88) & v19)) = *(_WORD *)(v25 + 2 * v24);
        *(_WORD *)(v25 + 2 * v24) = v19;
        *(_DWORD *)(a1 + 128) = v24;
        ++v19;
        *(_DWORD *)(a1 + 5932) = --v18;
      }
      while (v3 + v18 > 2);
    }
  }
  while (v3 <= 0x105 && *(_DWORD *)(*(void *)a1 + 8));
  unint64_t v26 = *(void *)(a1 + 5944);
  unint64_t v27 = *(void *)(a1 + 104);
  if (v27 > v26)
  {
    unint64_t v28 = *(unsigned int *)(a1 + 180) + (unint64_t)*(unsigned int *)(a1 + 172);
    if (v26 >= v28)
    {
      if (v28 + 258 <= v26) {
        return;
      }
      if (v28 + 258 - v26 >= v27 - v26) {
        unint64_t v31 = v27 - v26;
      }
      else {
        unint64_t v31 = v28 + 258 - v26;
      }
      bzero((void *)(*(void *)(a1 + 96) + v26), v31);
      size_t v30 = *(void *)(a1 + 5944) + v31;
    }
    else
    {
      if (v27 - v28 >= 0x102) {
        size_t v29 = 258;
      }
      else {
        size_t v29 = v27 - v28;
      }
      bzero((void *)(*(void *)(a1 + 96) + v28), v29);
      size_t v30 = v29 + v28;
    }
    *(void *)(a1 + 5944) = v30;
  }
}

uint64_t sub_1DD2EE170(uint64_t a1)
{
  if (sub_1DD2EDEB4((void *)a1)) {
    return 4294967294;
  }
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 88) = 2;
  uint64_t v3 = *(void *)(a1 + 56);
  *(void *)(v3 + 32) = *(void *)(v3 + 16);
  *(void *)(v3 + 40) = 0;
  int v4 = *(_DWORD *)(v3 + 48);
  if (v4 < 0)
  {
    int v4 = -v4;
    *(_DWORD *)(v3 + 48) = v4;
  }
  BOOL v5 = v4 == 2;
  if (v4 == 2) {
    int v6 = 57;
  }
  else {
    int v6 = 42;
  }
  *(_DWORD *)(v3 + 8) = v6;
  if (v5) {
    uint64_t v7 = sub_1DD2EDAA4(0, 0, 0);
  }
  else {
    uint64_t v7 = sub_1DD2ED768(0, 0, 0);
  }
  *(void *)(a1 + 96) = v7;
  *(_DWORD *)(v3 + 76) = -2;
  sub_1DD2F2AFC(v3);
  return 0;
}

uint64_t sub_1DD2EE214(uint64_t a1, uint64_t a2)
{
  BOOL v4 = sub_1DD2EDEB4((void *)a1);
  uint64_t result = 4294967294;
  if (a2 > 5 || v4) {
    return result;
  }
  if (!*(void *)(a1 + 24)
    || (uint64_t v6 = *(void *)(a1 + 56), (v7 = *(_DWORD *)(a1 + 8)) != 0) && !*(void *)a1
    || (int v8 = *(_DWORD *)(v6 + 8), a2 != 4) && v8 == 666)
  {
    *(void *)(a1 + 48) = "stream error";
    return result;
  }
  if (!*(_DWORD *)(a1 + 32)) {
    goto LABEL_30;
  }
  int v9 = *(_DWORD *)(v6 + 76);
  *(_DWORD *)(v6 + 76) = a2;
  if (*(void *)(v6 + 40))
  {
    sub_1DD2EEDA0(a1);
    if (!*(_DWORD *)(a1 + 32)) {
      goto LABEL_160;
    }
    int v8 = *(_DWORD *)(v6 + 8);
  }
  else if (!v7)
  {
    int v11 = v9 <= 4 ? 0 : -9;
    int v12 = a2 <= 4 ? 0 : -9;
    if (a2 != 4 && v12 + 2 * (int)a2 <= v11 + 2 * v9) {
      goto LABEL_30;
    }
  }
  switch(v8)
  {
    case 42:
      if (!*(_DWORD *)(v6 + 48))
      {
        *(_DWORD *)(v6 + 8) = 113;
        goto LABEL_133;
      }
      if (*(int *)(v6 + 200) <= 1)
      {
        int v13 = *(_DWORD *)(v6 + 196);
        if (v13 == 6) {
          int v14 = 128;
        }
        else {
          int v14 = 192;
        }
        if (v13 >= 6) {
          int v15 = v14;
        }
        else {
          int v15 = 64;
        }
        if (v13 >= 2) {
          int v10 = v15;
        }
        else {
          int v10 = 0;
        }
      }
      else
      {
        int v10 = 0;
      }
      unsigned int v16 = v10 | ((*(_DWORD *)(v6 + 84) << 12) - 30720);
      if (*(_DWORD *)(v6 + 172)) {
        v16 |= 0x20u;
      }
      uint64_t v17 = *(void *)(v6 + 16);
      uint64_t v18 = *(void *)(v6 + 40);
      *(void *)(v6 + 40) = v18 + 1;
      *(unsigned char *)(v17 + v18) = BYTE1(v16);
      uint64_t v19 = *(void *)(v6 + 16);
      uint64_t v20 = *(void *)(v6 + 40);
      *(void *)(v6 + 40) = v20 + 1;
      *(unsigned char *)(v19 + v20) = ((v16 % 0x1F) | v16) ^ 0x1F;
      if (*(_DWORD *)(v6 + 172))
      {
        unint64_t v21 = *(void *)(a1 + 96);
        unint64_t v22 = v21 >> 16;
        uint64_t v23 = *(void *)(v6 + 16);
        uint64_t v24 = *(void *)(v6 + 40);
        *(void *)(v6 + 40) = v24 + 1;
        *(unsigned char *)(v23 + v24) = BYTE3(v21);
        uint64_t v25 = *(void *)(v6 + 16);
        uint64_t v26 = *(void *)(v6 + 40);
        *(void *)(v6 + 40) = v26 + 1;
        *(unsigned char *)(v25 + v26) = v22;
        uint64_t v27 = *(void *)(a1 + 96);
        uint64_t v28 = *(void *)(v6 + 16);
        uint64_t v29 = *(void *)(v6 + 40);
        *(void *)(v6 + 40) = v29 + 1;
        *(unsigned char *)(v28 + v29) = BYTE1(v27);
        uint64_t v30 = *(void *)(v6 + 16);
        uint64_t v31 = *(void *)(v6 + 40);
        *(void *)(v6 + 40) = v31 + 1;
        *(unsigned char *)(v30 + v31) = v27;
      }
      *(void *)(a1 + 96) = sub_1DD2ED768(0, 0, 0);
      *(_DWORD *)(v6 + 8) = 113;
      sub_1DD2EEDA0(a1);
      if (*(void *)(v6 + 40)) {
        goto LABEL_160;
      }
      int v8 = *(_DWORD *)(v6 + 8);
      break;
    case 666:
      if (!*(_DWORD *)(a1 + 8)) {
        goto LABEL_134;
      }
LABEL_30:
      *(void *)(a1 + 48) = "buffer error";
      return 4294967291;
    case 57:
      *(void *)(a1 + 96) = sub_1DD2EDAA4(0, 0, 0);
      uint64_t v32 = *(void *)(v6 + 16);
      uint64_t v33 = *(void *)(v6 + 40);
      *(void *)(v6 + 40) = v33 + 1;
      *(unsigned char *)(v32 + v33) = 31;
      uint64_t v34 = *(void *)(v6 + 16);
      uint64_t v35 = *(void *)(v6 + 40);
      *(void *)(v6 + 40) = v35 + 1;
      *(unsigned char *)(v34 + v35) = -117;
      uint64_t v36 = *(void *)(v6 + 16);
      uint64_t v37 = *(void *)(v6 + 40);
      *(void *)(v6 + 40) = v37 + 1;
      *(unsigned char *)(v36 + v37) = 8;
      uint64_t v38 = *(void *)(v6 + 56);
      if (v38)
      {
        char v39 = (*(_DWORD *)v38 != 0) | (2 * (*(_DWORD *)(v38 + 68) != 0)) | (4 * (*(void *)(v38 + 24) != 0)) | (8 * (*(void *)(v38 + 40) != 0)) | (16 * (*(void *)(v38 + 56) != 0));
        uint64_t v40 = *(void *)(v6 + 16);
        uint64_t v41 = *(void *)(v6 + 40);
        *(void *)(v6 + 40) = v41 + 1;
        *(unsigned char *)(v40 + v41) = v39;
        uint64_t v42 = *(void *)(*(void *)(v6 + 56) + 8);
        uint64_t v43 = *(void *)(v6 + 16);
        uint64_t v44 = *(void *)(v6 + 40);
        *(void *)(v6 + 40) = v44 + 1;
        *(unsigned char *)(v43 + v44) = v42;
        uint64_t v45 = *(void *)(*(void *)(v6 + 56) + 8) >> 8;
        uint64_t v46 = *(void *)(v6 + 16);
        uint64_t v47 = *(void *)(v6 + 40);
        *(void *)(v6 + 40) = v47 + 1;
        *(unsigned char *)(v46 + v47) = v45;
        uint64_t v48 = *(void *)(*(void *)(v6 + 56) + 8) >> 16;
        uint64_t v49 = *(void *)(v6 + 16);
        uint64_t v50 = *(void *)(v6 + 40);
        *(void *)(v6 + 40) = v50 + 1;
        *(unsigned char *)(v49 + v50) = v48;
        uint64_t v51 = *(void *)(*(void *)(v6 + 56) + 8) >> 24;
        uint64_t v52 = *(void *)(v6 + 16);
        uint64_t v53 = *(void *)(v6 + 40);
        *(void *)(v6 + 40) = v53 + 1;
        *(unsigned char *)(v52 + v53) = v51;
        int v54 = *(_DWORD *)(v6 + 196);
        if (v54 == 9)
        {
          char v55 = 2;
        }
        else if (*(int *)(v6 + 200) > 1 || v54 < 2)
        {
          char v55 = 4;
        }
        else
        {
          char v55 = 0;
        }
        uint64_t v69 = *(void *)(v6 + 16);
        uint64_t v70 = *(void *)(v6 + 40);
        *(void *)(v6 + 40) = v70 + 1;
        *(unsigned char *)(v69 + v70) = v55;
        char v71 = *(_DWORD *)(*(void *)(v6 + 56) + 20);
        uint64_t v72 = *(void *)(v6 + 16);
        uint64_t v73 = *(void *)(v6 + 40);
        *(void *)(v6 + 40) = v73 + 1;
        *(unsigned char *)(v72 + v73) = v71;
        uint64_t v74 = *(void *)(v6 + 56);
        if (*(void *)(v74 + 24))
        {
          char v75 = *(_DWORD *)(v74 + 32);
          uint64_t v76 = *(void *)(v6 + 16);
          uint64_t v77 = *(void *)(v6 + 40);
          *(void *)(v6 + 40) = v77 + 1;
          *(unsigned char *)(v76 + v77) = v75;
          int v78 = *(_DWORD *)(*(void *)(v6 + 56) + 32) >> 8;
          uint64_t v79 = *(void *)(v6 + 16);
          uint64_t v80 = *(void *)(v6 + 40);
          *(void *)(v6 + 40) = v80 + 1;
          *(unsigned char *)(v79 + v80) = v78;
          uint64_t v74 = *(void *)(v6 + 56);
        }
        if (*(_DWORD *)(v74 + 68)) {
          *(void *)(a1 + 96) = sub_1DD2EDAA4(*(void *)(a1 + 96), *(unsigned __int8 **)(v6 + 16), *(_DWORD *)(v6 + 40));
        }
        *(void *)(v6 + 64) = 0;
        *(_DWORD *)(v6 + 8) = 69;
        goto LABEL_76;
      }
      uint64_t v56 = *(void *)(v6 + 16);
      uint64_t v57 = *(void *)(v6 + 40);
      *(void *)(v6 + 40) = v57 + 1;
      *(unsigned char *)(v56 + v57) = 0;
      uint64_t v58 = *(void *)(v6 + 16);
      uint64_t v59 = *(void *)(v6 + 40);
      *(void *)(v6 + 40) = v59 + 1;
      *(unsigned char *)(v58 + v59) = 0;
      uint64_t v60 = *(void *)(v6 + 16);
      uint64_t v61 = *(void *)(v6 + 40);
      *(void *)(v6 + 40) = v61 + 1;
      *(unsigned char *)(v60 + v61) = 0;
      uint64_t v62 = *(void *)(v6 + 16);
      uint64_t v63 = *(void *)(v6 + 40);
      *(void *)(v6 + 40) = v63 + 1;
      *(unsigned char *)(v62 + v63) = 0;
      uint64_t v64 = *(void *)(v6 + 16);
      uint64_t v65 = *(void *)(v6 + 40);
      *(void *)(v6 + 40) = v65 + 1;
      *(unsigned char *)(v64 + v65) = 0;
      int v66 = *(_DWORD *)(v6 + 196);
      if (v66 == 9)
      {
        char v67 = 2;
      }
      else if (*(int *)(v6 + 200) > 1 || v66 < 2)
      {
        char v67 = 4;
      }
      else
      {
        char v67 = 0;
      }
      uint64_t v82 = *(void *)(v6 + 16);
      uint64_t v83 = *(void *)(v6 + 40);
      *(void *)(v6 + 40) = v83 + 1;
      *(unsigned char *)(v82 + v83) = v67;
      uint64_t v84 = *(void *)(v6 + 16);
      uint64_t v85 = *(void *)(v6 + 40);
      *(void *)(v6 + 40) = v85 + 1;
      *(unsigned char *)(v84 + v85) = 19;
      *(_DWORD *)(v6 + 8) = 113;
      sub_1DD2EEDA0(a1);
      if (*(void *)(v6 + 40)) {
        goto LABEL_160;
      }
      int v8 = *(_DWORD *)(v6 + 8);
      break;
  }
  if (v8 <= 90)
  {
    if (v8 != 69)
    {
      if (v8 != 73) {
        goto LABEL_133;
      }
      goto LABEL_92;
    }
LABEL_76:
    uint64_t v86 = *(void *)(v6 + 56);
    uint64_t v87 = *(void *)(v86 + 24);
    if (v87)
    {
      unint64_t v88 = *(void *)(v6 + 40);
      int v89 = *(unsigned __int16 *)(v86 + 32);
      uint64_t v90 = *(void *)(v6 + 64);
      size_t v91 = (v89 - v90);
      size_t v92 = *(void *)(v6 + 24);
      if (v88 + v91 > v92)
      {
        while (1)
        {
          int v93 = v92 - v88;
          size_t v94 = (v92 - v88);
          memcpy((void *)(*(void *)(v6 + 16) + v88), (const void *)(*(void *)(*(void *)(v6 + 56) + 24) + *(void *)(v6 + 64)), v94);
          unint64_t v95 = *(void *)(v6 + 24);
          *(void *)(v6 + 40) = v95;
          if (*(_DWORD *)(*(void *)(v6 + 56) + 68)) {
            BOOL v96 = v95 > v88;
          }
          else {
            BOOL v96 = 0;
          }
          if (v96) {
            *(void *)(a1 + 96) = sub_1DD2EDAA4(*(void *)(a1 + 96), (unsigned __int8 *)(*(void *)(v6 + 16) + v88), (int)v95 - (int)v88);
          }
          *(void *)(v6 + 64) += v94;
          sub_1DD2EEDA0(a1);
          if (*(void *)(v6 + 40)) {
            goto LABEL_160;
          }
          unint64_t v88 = 0;
          size_t v91 = (v91 - v93);
          size_t v92 = *(void *)(v6 + 24);
          if (v92 >= v91)
          {
            unint64_t v88 = 0;
            uint64_t v90 = *(void *)(v6 + 64);
            uint64_t v87 = *(void *)(*(void *)(v6 + 56) + 24);
            break;
          }
        }
      }
      memcpy((void *)(*(void *)(v6 + 16) + v88), (const void *)(v87 + v90), v91);
      size_t v97 = *(void *)(v6 + 40) + v91;
      *(void *)(v6 + 40) = v97;
      if (*(_DWORD *)(*(void *)(v6 + 56) + 68) && v97 > v88) {
        *(void *)(a1 + 96) = sub_1DD2EDAA4(*(void *)(a1 + 96), (unsigned __int8 *)(*(void *)(v6 + 16) + v88), (int)v97 - (int)v88);
      }
      *(void *)(v6 + 64) = 0;
    }
    *(_DWORD *)(v6 + 8) = 73;
LABEL_92:
    if (*(void *)(*(void *)(v6 + 56) + 40))
    {
      unint64_t v98 = *(void *)(v6 + 40);
      do
      {
        unint64_t v99 = *(void *)(v6 + 40);
        uint64_t v100 = *(void *)(v6 + 56);
        if (v99 == *(void *)(v6 + 24))
        {
          if (*(_DWORD *)(v100 + 68)) {
            BOOL v101 = v99 > v98;
          }
          else {
            BOOL v101 = 0;
          }
          if (v101) {
            *(void *)(a1 + 96) = sub_1DD2EDAA4(*(void *)(a1 + 96), (unsigned __int8 *)(*(void *)(v6 + 16) + v98), (int)v99 - (int)v98);
          }
          sub_1DD2EEDA0(a1);
          unint64_t v98 = *(void *)(v6 + 40);
          if (v98) {
            goto LABEL_160;
          }
          unint64_t v99 = 0;
          uint64_t v100 = *(void *)(v6 + 56);
        }
        uint64_t v102 = *(void *)(v100 + 40);
        uint64_t v103 = *(void *)(v6 + 64);
        *(void *)(v6 + 64) = v103 + 1;
        LODWORD(v102) = *(unsigned __int8 *)(v102 + v103);
        uint64_t v104 = *(void *)(v6 + 16);
        *(void *)(v6 + 40) = v99 + 1;
        *(unsigned char *)(v104 + v99) = v102;
      }
      while (v102);
      if (*(_DWORD *)(*(void *)(v6 + 56) + 68))
      {
        unint64_t v105 = *(void *)(v6 + 40);
        if (v105 > v98) {
          *(void *)(a1 + 96) = sub_1DD2EDAA4(*(void *)(a1 + 96), (unsigned __int8 *)(*(void *)(v6 + 16) + v98), (int)v105 - (int)v98);
        }
      }
      *(void *)(v6 + 64) = 0;
    }
    *(_DWORD *)(v6 + 8) = 91;
    goto LABEL_112;
  }
  if (v8 != 91)
  {
    if (v8 != 103) {
      goto LABEL_133;
    }
    goto LABEL_128;
  }
LABEL_112:
  if (*(void *)(*(void *)(v6 + 56) + 56))
  {
    unint64_t v106 = *(void *)(v6 + 40);
    do
    {
      unint64_t v107 = *(void *)(v6 + 40);
      uint64_t v108 = *(void *)(v6 + 56);
      if (v107 == *(void *)(v6 + 24))
      {
        if (*(_DWORD *)(v108 + 68)) {
          BOOL v109 = v107 > v106;
        }
        else {
          BOOL v109 = 0;
        }
        if (v109) {
          *(void *)(a1 + 96) = sub_1DD2EDAA4(*(void *)(a1 + 96), (unsigned __int8 *)(*(void *)(v6 + 16) + v106), (int)v107 - (int)v106);
        }
        sub_1DD2EEDA0(a1);
        unint64_t v106 = *(void *)(v6 + 40);
        if (v106) {
          goto LABEL_160;
        }
        unint64_t v107 = 0;
        uint64_t v108 = *(void *)(v6 + 56);
      }
      uint64_t v110 = *(void *)(v108 + 56);
      uint64_t v111 = *(void *)(v6 + 64);
      *(void *)(v6 + 64) = v111 + 1;
      LODWORD(v110) = *(unsigned __int8 *)(v110 + v111);
      uint64_t v112 = *(void *)(v6 + 16);
      *(void *)(v6 + 40) = v107 + 1;
      *(unsigned char *)(v112 + v107) = v110;
    }
    while (v110);
    if (*(_DWORD *)(*(void *)(v6 + 56) + 68))
    {
      unint64_t v113 = *(void *)(v6 + 40);
      if (v113 > v106) {
        *(void *)(a1 + 96) = sub_1DD2EDAA4(*(void *)(a1 + 96), (unsigned __int8 *)(*(void *)(v6 + 16) + v106), (int)v113 - (int)v106);
      }
    }
  }
  *(_DWORD *)(v6 + 8) = 103;
LABEL_128:
  if (*(_DWORD *)(*(void *)(v6 + 56) + 68))
  {
    uint64_t v114 = *(void *)(v6 + 40);
    if ((unint64_t)(v114 + 2) > *(void *)(v6 + 24))
    {
      sub_1DD2EEDA0(a1);
      uint64_t v114 = *(void *)(v6 + 40);
      if (v114) {
        goto LABEL_160;
      }
    }
    uint64_t v115 = *(void *)(a1 + 96);
    uint64_t v116 = *(void *)(v6 + 16);
    *(void *)(v6 + 40) = v114 + 1;
    *(unsigned char *)(v116 + v114) = v115;
    uint64_t v117 = *(void *)(a1 + 96) >> 8;
    uint64_t v118 = *(void *)(v6 + 16);
    uint64_t v119 = *(void *)(v6 + 40);
    *(void *)(v6 + 40) = v119 + 1;
    *(unsigned char *)(v118 + v119) = v117;
    *(void *)(a1 + 96) = sub_1DD2EDAA4(0, 0, 0);
  }
  *(_DWORD *)(v6 + 8) = 113;
  sub_1DD2EEDA0(a1);
  if (*(void *)(v6 + 40))
  {
LABEL_160:
    uint64_t result = 0;
    *(_DWORD *)(v6 + 76) = -1;
    return result;
  }
LABEL_133:
  if (*(_DWORD *)(a1 + 8)) {
    goto LABEL_135;
  }
LABEL_134:
  if (*(_DWORD *)(v6 + 180)) {
    goto LABEL_135;
  }
  if (!a2) {
    return 0;
  }
  if (*(_DWORD *)(v6 + 8) != 666)
  {
LABEL_135:
    uint64_t v120 = *(int *)(v6 + 196);
    if (v120)
    {
      int v121 = *(_DWORD *)(v6 + 200);
      if (v121 == 3)
      {
        int v122 = sub_1DD2EF4CC(v6, a2);
      }
      else if (v121 == 2)
      {
        int v122 = sub_1DD2EF304(v6, a2);
      }
      else
      {
        int v122 = qword_1F387D0A0[2 * v120 + 1](v6, a2);
      }
    }
    else
    {
      int v122 = sub_1DD2EEE38(v6, a2);
    }
    if ((v122 & 0xFFFFFFFE) == 2) {
      *(_DWORD *)(v6 + 8) = 666;
    }
    if ((v122 & 0xFFFFFFFD) != 0)
    {
      if (v122 != 1) {
        goto LABEL_158;
      }
      if (a2 != 5)
      {
        if (a2 == 1)
        {
          sub_1DD2F2DE4(v6);
        }
        else
        {
          sub_1DD2F2BA8(v6, 0, 0, 0);
          if (a2 == 3)
          {
            long long v123 = *(char **)(v6 + 120);
            size_t v124 = 2 * (*(_DWORD *)(v6 + 132) - 1);
            *(_WORD *)&v123[v124] = 0;
            bzero(v123, v124);
            if (!*(_DWORD *)(v6 + 180))
            {
              *(_DWORD *)(v6 + 172) = 0;
              *(void *)(v6 + 152) = 0;
              *(_DWORD *)(v6 + 5932) = 0;
            }
          }
        }
      }
      sub_1DD2EEDA0(a1);
      if (*(_DWORD *)(a1 + 32)) {
        goto LABEL_158;
      }
      goto LABEL_160;
    }
    if (!*(_DWORD *)(a1 + 32)) {
      goto LABEL_160;
    }
    return 0;
  }
LABEL_158:
  if (a2 != 4) {
    return 0;
  }
  int v125 = *(_DWORD *)(v6 + 48);
  if (v125 < 1) {
    return 1;
  }
  unint64_t v126 = *(void *)(a1 + 96);
  if (v125 == 2)
  {
    uint64_t v127 = *(void *)(v6 + 16);
    uint64_t v128 = *(void *)(v6 + 40);
    *(void *)(v6 + 40) = v128 + 1;
    *(unsigned char *)(v127 + v128) = v126;
    uint64_t v129 = *(void *)(a1 + 96) >> 8;
    uint64_t v130 = *(void *)(v6 + 16);
    uint64_t v131 = *(void *)(v6 + 40);
    *(void *)(v6 + 40) = v131 + 1;
    *(unsigned char *)(v130 + v131) = v129;
    uint64_t v132 = *(void *)(a1 + 96) >> 16;
    uint64_t v133 = *(void *)(v6 + 16);
    uint64_t v134 = *(void *)(v6 + 40);
    *(void *)(v6 + 40) = v134 + 1;
    *(unsigned char *)(v133 + v134) = v132;
    uint64_t v135 = *(void *)(a1 + 96) >> 24;
    uint64_t v136 = *(void *)(v6 + 16);
    uint64_t v137 = *(void *)(v6 + 40);
    *(void *)(v6 + 40) = v137 + 1;
    *(unsigned char *)(v136 + v137) = v135;
    uint64_t v138 = *(void *)(a1 + 16);
    uint64_t v139 = *(void *)(v6 + 16);
    uint64_t v140 = *(void *)(v6 + 40);
    *(void *)(v6 + 40) = v140 + 1;
    *(unsigned char *)(v139 + v140) = v138;
    uint64_t v141 = *(void *)(a1 + 16) >> 8;
    uint64_t v142 = *(void *)(v6 + 16);
    uint64_t v143 = *(void *)(v6 + 40);
    *(void *)(v6 + 40) = v143 + 1;
    *(unsigned char *)(v142 + v143) = v141;
    uint64_t v144 = *(void *)(a1 + 16) >> 16;
    uint64_t v145 = *(void *)(v6 + 16);
    uint64_t v146 = *(void *)(v6 + 40);
    *(void *)(v6 + 40) = v146 + 1;
    *(unsigned char *)(v145 + v146) = v144;
    uint64_t v147 = *(void *)(a1 + 16) >> 24;
  }
  else
  {
    unint64_t v148 = v126 >> 16;
    uint64_t v149 = *(void *)(v6 + 16);
    uint64_t v150 = *(void *)(v6 + 40);
    *(void *)(v6 + 40) = v150 + 1;
    *(unsigned char *)(v149 + v150) = BYTE3(v126);
    uint64_t v151 = *(void *)(v6 + 16);
    uint64_t v152 = *(void *)(v6 + 40);
    *(void *)(v6 + 40) = v152 + 1;
    *(unsigned char *)(v151 + v152) = v148;
    uint64_t v147 = *(void *)(a1 + 96);
    uint64_t v153 = *(void *)(v6 + 16);
    uint64_t v154 = *(void *)(v6 + 40);
    *(void *)(v6 + 40) = v154 + 1;
    *(unsigned char *)(v153 + v154) = BYTE1(v147);
  }
  uint64_t v155 = *(void *)(v6 + 16);
  uint64_t v156 = *(void *)(v6 + 40);
  *(void *)(v6 + 40) = v156 + 1;
  *(unsigned char *)(v155 + v156) = v147;
  sub_1DD2EEDA0(a1);
  int v157 = *(_DWORD *)(v6 + 48);
  if (v157 >= 1) {
    *(_DWORD *)(v6 + 48) = -v157;
  }
  return *(void *)(v6 + 40) == 0;
}

void *sub_1DD2EEDA0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t result = (void *)sub_1DD2F2D50(v2);
  unsigned int v4 = *(_DWORD *)(v2 + 40);
  unsigned int v5 = *(_DWORD *)(a1 + 32);
  if (v5 >= v4) {
    size_t v6 = v4;
  }
  else {
    size_t v6 = v5;
  }
  if (v6)
  {
    uint64_t result = memcpy(*(void **)(a1 + 24), *(const void **)(v2 + 32), v6);
    *(void *)(a1 + 24) += v6;
    *(void *)(a1 + 40) += v6;
    *(_DWORD *)(a1 + 32) -= v6;
    uint64_t v7 = *(void *)(v2 + 40) - v6;
    *(void *)(v2 + 32) += v6;
    *(void *)(v2 + 40) = v7;
    if (!v7) {
      *(void *)(v2 + 32) = *(void *)(v2 + 16);
    }
  }
  return result;
}

uint64_t sub_1DD2EEE38(uint64_t a1, int a2)
{
  if (*(void *)(a1 + 24) - 5 >= (unint64_t)*(unsigned int *)(a1 + 80)) {
    LODWORD(v4) = *(_DWORD *)(a1 + 80);
  }
  else {
    uint64_t v4 = *(void *)(a1 + 24) - 5;
  }
  int v5 = *(_DWORD *)(*(void *)a1 + 8);
  while (1)
  {
    int v6 = *(_DWORD *)(a1 + 5940) + 42;
    uint64_t v7 = *(void *)a1;
    unsigned int v8 = *(_DWORD *)(*(void *)a1 + 32);
    if (v8 < v6 >> 3) {
      break;
    }
    unsigned int v9 = v8 - (v6 >> 3);
    int v10 = *(_DWORD *)(a1 + 172);
    int v11 = *(_DWORD *)(a1 + 152);
    size_t v12 = (v10 - v11);
    uint64_t v13 = *(unsigned int *)(v7 + 8);
    unint64_t v14 = v12 + v13;
    unsigned int v15 = v12 + v13;
    if (v14 >= 0xFFFF) {
      unsigned int v16 = 0xFFFF;
    }
    else {
      unsigned int v16 = v15;
    }
    if (v16 >= v9) {
      unsigned int v17 = v9;
    }
    else {
      unsigned int v17 = v16;
    }
    if (v17 < v4)
    {
      BOOL v18 = a2 != 4 && v17 == 0;
      BOOL v19 = v18;
      int v20 = 1;
      BOOL v21 = v17 != v15 || a2 == 0;
      if (v21 || v19) {
        goto LABEL_40;
      }
    }
    BOOL v23 = a2 == 4 && v17 == v15;
    sub_1DD2F2BA8(a1, 0, 0, v23);
    *(_WORD *)(*(void *)(a1 + 40) + *(void *)(a1 + 16) - 4) = v17;
    *(_WORD *)(*(void *)(a1 + 40) + *(void *)(a1 + 16) - 2) = ~(_WORD)v17;
    sub_1DD2EEDA0(*(void *)a1);
    if (v10 != v11)
    {
      if (v12 >= v17) {
        size_t v12 = v17;
      }
      else {
        size_t v12 = v12;
      }
      memcpy(*(void **)(*(void *)a1 + 24), (const void *)(*(void *)(a1 + 96) + *(void *)(a1 + 152)), v12);
      uint64_t v24 = *(void *)a1;
      *(void *)(v24 + 24) = *(void *)(*(void *)a1 + 24) + v12;
      *(_DWORD *)(v24 + 32) -= v12;
      *(void *)(v24 + 40) += v12;
      *(void *)(a1 + 152) += v12;
      v17 -= v12;
    }
    if (v17)
    {
      sub_1DD2F0358(*(void *)a1, *(void **)(*(void *)a1 + 24), v17);
      uint64_t v25 = *(void *)a1;
      *(void *)(v25 + 24) = *(void *)(*(void *)a1 + 24) + v17;
      *(_DWORD *)(v25 + 32) -= v17;
      *(void *)(v25 + 40) += v17;
    }
    if (v23)
    {
      int v20 = 0;
      uint64_t v7 = *(void *)a1;
      goto LABEL_40;
    }
  }
  int v20 = 1;
LABEL_40:
  int v26 = *(_DWORD *)(v7 + 8);
  size_t v27 = (v5 - v26);
  if (v5 == v26)
  {
    unint64_t v28 = *(unsigned int *)(a1 + 172);
    unsigned int v29 = *(_DWORD *)(a1 + 172);
  }
  else
  {
    size_t v30 = *(unsigned int *)(a1 + 80);
    if (v27 >= v30)
    {
      *(_DWORD *)(a1 + 5928) = 2;
      memcpy(*(void **)(a1 + 96), (const void *)(*(void *)v7 - v30), v30);
      unsigned int v29 = *(_DWORD *)(a1 + 80);
      *(_DWORD *)(a1 + 172) = v29;
      *(_DWORD *)(a1 + 5932) = v29;
    }
    else
    {
      uint64_t v31 = *(unsigned int *)(a1 + 172);
      if (*(void *)(a1 + 104) - v31 <= (unint64_t)v27)
      {
        size_t v32 = (v31 - v30);
        *(_DWORD *)(a1 + 172) = v32;
        memcpy(*(void **)(a1 + 96), (const void *)(*(void *)(a1 + 96) + v30), v32);
        unsigned int v33 = *(_DWORD *)(a1 + 5928);
        if (v33 <= 1) {
          *(_DWORD *)(a1 + 5928) = v33 + 1;
        }
        LODWORD(v31) = *(_DWORD *)(a1 + 172);
        if (*(_DWORD *)(a1 + 5932) > v31) {
          *(_DWORD *)(a1 + 5932) = v31;
        }
      }
      memcpy((void *)(*(void *)(a1 + 96) + v31), (const void *)(**(void **)a1 - v27), v27);
      unsigned int v29 = *(_DWORD *)(a1 + 172) + v27;
      *(_DWORD *)(a1 + 172) = v29;
      int v34 = *(_DWORD *)(a1 + 5932);
      unsigned int v35 = *(_DWORD *)(a1 + 80) - v34;
      if (v27 < v35) {
        unsigned int v35 = v27;
      }
      *(_DWORD *)(a1 + 5932) = v35 + v34;
    }
    unint64_t v28 = v29;
    *(void *)(a1 + 152) = v29;
  }
  if (*(void *)(a1 + 5944) < v28) {
    *(void *)(a1 + 5944) = v28;
  }
  if (!v20) {
    return 3;
  }
  if ((a2 | 4) != 4 && !*(_DWORD *)(*(void *)a1 + 8) && *(void *)(a1 + 152) == v28) {
    return 1;
  }
  unsigned int v37 = *(_DWORD *)(a1 + 104) - v29;
  if (*(_DWORD *)(*(void *)a1 + 8) > v37)
  {
    uint64_t v38 = *(void *)(a1 + 152);
    uint64_t v39 = *(unsigned int *)(a1 + 80);
    BOOL v53 = v38 < v39;
    uint64_t v40 = v38 - v39;
    if (!v53)
    {
      *(void *)(a1 + 152) = v40;
      size_t v41 = v29 - v39;
      *(_DWORD *)(a1 + 172) = v41;
      memcpy(*(void **)(a1 + 96), (const void *)(*(void *)(a1 + 96) + v39), v41);
      unsigned int v42 = *(_DWORD *)(a1 + 5928);
      if (v42 <= 1) {
        *(_DWORD *)(a1 + 5928) = v42 + 1;
      }
      v37 += *(_DWORD *)(a1 + 80);
      unsigned int v29 = *(_DWORD *)(a1 + 172);
      if (*(_DWORD *)(a1 + 5932) > v29) {
        *(_DWORD *)(a1 + 5932) = v29;
      }
    }
  }
  if (v37 >= *(_DWORD *)(*(void *)a1 + 8)) {
    unsigned int v37 = *(_DWORD *)(*(void *)a1 + 8);
  }
  if (v37)
  {
    sub_1DD2F0358(*(void *)a1, (void *)(*(void *)(a1 + 96) + v29), v37);
    unsigned int v29 = *(_DWORD *)(a1 + 172) + v37;
    *(_DWORD *)(a1 + 172) = v29;
    int v43 = *(_DWORD *)(a1 + 5932);
    unsigned int v44 = *(_DWORD *)(a1 + 80) - v43;
    if (v37 < v44) {
      unsigned int v44 = v37;
    }
    *(_DWORD *)(a1 + 5932) = v44 + v43;
  }
  unsigned int v45 = v29;
  if (*(void *)(a1 + 5944) < (unint64_t)v29) {
    *(void *)(a1 + 5944) = v29;
  }
  LODWORD(v46) = 0xFFFF;
  if (*(void *)(a1 + 24) - (unint64_t)((*(_DWORD *)(a1 + 5940) + 42) >> 3) < 0xFFFF) {
    uint64_t v46 = *(void *)(a1 + 24) - ((*(_DWORD *)(a1 + 5940) + 42) >> 3);
  }
  if (*(_DWORD *)(a1 + 80) >= v46) {
    unsigned int v47 = v46;
  }
  else {
    unsigned int v47 = *(_DWORD *)(a1 + 80);
  }
  uint64_t v48 = *(void *)(a1 + 152);
  unsigned int v49 = v45 - v48;
  if (v45 - v48 >= v47) {
    goto LABEL_91;
  }
  uint64_t v36 = 0;
  BOOL v51 = a2 == 4 || v45 != v48;
  if (a2 && v51)
  {
    if (*(_DWORD *)(*(void *)a1 + 8)) {
      return 0;
    }
LABEL_91:
    if (v49 >= v46) {
      size_t v52 = v46;
    }
    else {
      size_t v52 = v49;
    }
    if (a2 == 4)
    {
      if (*(_DWORD *)(*(void *)a1 + 8)) {
        BOOL v53 = 1;
      }
      else {
        BOOL v53 = v49 > v46;
      }
      char v54 = !v53;
    }
    else
    {
      char v54 = 0;
    }
    if (v54) {
      uint64_t v36 = 2;
    }
    else {
      uint64_t v36 = 0;
    }
    sub_1DD2F2BA8(a1, (const void *)(*(void *)(a1 + 96) + v48), v52, v54 & 1);
    *(void *)(a1 + 152) += v52;
    sub_1DD2EEDA0(*(void *)a1);
  }
  return v36;
}

uint64_t sub_1DD2EF304(uint64_t a1, int a2)
{
  while (1)
  {
    if (!*(_DWORD *)(a1 + 180))
    {
      sub_1DD2EDF30(a1);
      if (!*(_DWORD *)(a1 + 180)) {
        break;
      }
    }
    *(_DWORD *)(a1 + 160) = 0;
    uint64_t v4 = *(unsigned __int8 *)(*(void *)(a1 + 96) + *(unsigned int *)(a1 + 172));
    uint64_t v5 = *(void *)(a1 + 5888);
    uint64_t v6 = *(unsigned int *)(a1 + 5900);
    *(_DWORD *)(a1 + 5900) = v6 + 1;
    *(unsigned char *)(v5 + v6) = 0;
    uint64_t v7 = *(void *)(a1 + 5888);
    uint64_t v8 = *(unsigned int *)(a1 + 5900);
    *(_DWORD *)(a1 + 5900) = v8 + 1;
    *(unsigned char *)(v7 + v8) = 0;
    uint64_t v9 = *(void *)(a1 + 5888);
    uint64_t v10 = *(unsigned int *)(a1 + 5900);
    *(_DWORD *)(a1 + 5900) = v10 + 1;
    *(unsigned char *)(v9 + v10) = v4;
    ++*(_WORD *)(a1 + 4 * v4 + 212);
    LODWORD(v9) = *(_DWORD *)(a1 + 5900);
    LODWORD(v10) = *(_DWORD *)(a1 + 5904);
    --*(_DWORD *)(a1 + 180);
    uint64_t v11 = (*(_DWORD *)(a1 + 172) + 1);
    *(_DWORD *)(a1 + 172) = v11;
    if (v9 == v10)
    {
      uint64_t v12 = *(void *)(a1 + 152);
      uint64_t v13 = v12 < 0 ? 0 : (const void *)(*(void *)(a1 + 96) + v12);
      sub_1DD2F2EB4(a1, v13, v11 - v12, 0);
      *(void *)(a1 + 152) = *(unsigned int *)(a1 + 172);
      sub_1DD2EEDA0(*(void *)a1);
      if (!*(_DWORD *)(*(void *)a1 + 32)) {
        return 0;
      }
    }
  }
  if (!a2) {
    return 0;
  }
  *(_DWORD *)(a1 + 5932) = 0;
  if (a2 != 4)
  {
    if (!*(_DWORD *)(a1 + 5900)) {
      return 1;
    }
    uint64_t v16 = *(void *)(a1 + 152);
    unsigned int v17 = v16 < 0 ? 0 : (const void *)(*(void *)(a1 + 96) + v16);
    sub_1DD2F2EB4(a1, v17, *(unsigned int *)(a1 + 172) - v16, 0);
    *(void *)(a1 + 152) = *(unsigned int *)(a1 + 172);
    sub_1DD2EEDA0(*(void *)a1);
    return *(_DWORD *)(*(void *)a1 + 32) != 0;
  }
  uint64_t v14 = *(void *)(a1 + 152);
  if (v14 < 0) {
    unsigned int v15 = 0;
  }
  else {
    unsigned int v15 = (const void *)(*(void *)(a1 + 96) + v14);
  }
  sub_1DD2F2EB4(a1, v15, *(unsigned int *)(a1 + 172) - v14, 1);
  *(void *)(a1 + 152) = *(unsigned int *)(a1 + 172);
  sub_1DD2EEDA0(*(void *)a1);
  if (*(_DWORD *)(*(void *)a1 + 32)) {
    return 3;
  }
  else {
    return 2;
  }
}

uint64_t sub_1DD2EF4CC(uint64_t a1, int a2)
{
  while (1)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 180);
    if (v4 >= 0x103)
    {
      *(_DWORD *)(a1 + 160) = 0;
      uint64_t v5 = *(unsigned int *)(a1 + 172);
      if (!*(_DWORD *)(a1 + 172)) {
        goto LABEL_23;
      }
      goto LABEL_9;
    }
    sub_1DD2EDF30(a1);
    unsigned int v4 = *(_DWORD *)(a1 + 180);
    if (!a2 && v4 < 0x103) {
      return 0;
    }
    if (!v4) {
      break;
    }
    *(_DWORD *)(a1 + 160) = 0;
    uint64_t v5 = *(unsigned int *)(a1 + 172);
    if (v4 < 3 || !*(_DWORD *)(a1 + 172))
    {
LABEL_23:
      LODWORD(v16) = *(_DWORD *)(a1 + 5900);
LABEL_24:
      uint64_t v17 = *(unsigned __int8 *)(*(void *)(a1 + 96) + v5);
      uint64_t v18 = *(void *)(a1 + 5888);
      *(_DWORD *)(a1 + 5900) = v16 + 1;
      *(unsigned char *)(v18 + v16) = 0;
      uint64_t v19 = *(void *)(a1 + 5888);
      uint64_t v20 = *(unsigned int *)(a1 + 5900);
      *(_DWORD *)(a1 + 5900) = v20 + 1;
      *(unsigned char *)(v19 + v20) = 0;
      uint64_t v21 = *(void *)(a1 + 5888);
      uint64_t v22 = *(unsigned int *)(a1 + 5900);
      *(_DWORD *)(a1 + 5900) = v22 + 1;
      *(unsigned char *)(v21 + v22) = v17;
      ++*(_WORD *)(a1 + 4 * v17 + 212);
      int v23 = *(_DWORD *)(a1 + 5900);
      int v24 = *(_DWORD *)(a1 + 5904);
      --*(_DWORD *)(a1 + 180);
      unsigned int v25 = *(_DWORD *)(a1 + 172) + 1;
      *(_DWORD *)(a1 + 172) = v25;
      goto LABEL_25;
    }
LABEL_9:
    uint64_t v6 = (unsigned __int8 *)(*(void *)(a1 + 96) + v5);
    int v7 = *(v6 - 1);
    if (v7 != *v6 || v7 != v6[1] || v7 != v6[2]) {
      goto LABEL_23;
    }
    uint64_t v8 = 0;
    int v9 = v6 + 258;
    while (1)
    {
      uint64_t v10 = &v6[v8];
      if (v7 != v6[v8 + 3])
      {
        int v15 = v10 + 3;
        goto LABEL_38;
      }
      if (v7 != v10[4])
      {
        int v15 = v6 + v8 + 4;
        goto LABEL_38;
      }
      uint64_t v11 = &v6[v8];
      if (v7 != v6[v8 + 5])
      {
        int v15 = v11 + 5;
        goto LABEL_38;
      }
      if (v7 != v11[6])
      {
        int v15 = v6 + v8 + 6;
        goto LABEL_38;
      }
      uint64_t v12 = &v6[v8];
      if (v7 != v6[v8 + 7])
      {
        int v15 = v12 + 7;
        goto LABEL_38;
      }
      if (v7 != v12[8])
      {
        int v15 = v6 + v8 + 8;
        goto LABEL_38;
      }
      uint64_t v13 = &v6[v8];
      if (v7 != v6[v8 + 9]) {
        break;
      }
      unint64_t v14 = v8 + 2;
      v8 += 8;
      if (v14 > 0xF9 || v7 != v13[10])
      {
        int v15 = v6 + v8 + 2;
        goto LABEL_38;
      }
    }
    int v15 = v13 + 9;
LABEL_38:
    unsigned int v28 = v15 - v9 + 258;
    if (v28 < v4) {
      unsigned int v4 = v28;
    }
    *(_DWORD *)(a1 + 160) = v4;
    uint64_t v16 = *(unsigned int *)(a1 + 5900);
    BOOL v29 = v4 >= 3;
    unsigned __int8 v30 = v4 - 3;
    if (!v29) {
      goto LABEL_24;
    }
    uint64_t v31 = *(void *)(a1 + 5888);
    *(_DWORD *)(a1 + 5900) = v16 + 1;
    *(unsigned char *)(v31 + v16) = 1;
    uint64_t v32 = *(void *)(a1 + 5888);
    uint64_t v33 = *(unsigned int *)(a1 + 5900);
    *(_DWORD *)(a1 + 5900) = v33 + 1;
    *(unsigned char *)(v32 + v33) = 0;
    uint64_t v34 = *(void *)(a1 + 5888);
    uint64_t v35 = *(unsigned int *)(a1 + 5900);
    *(_DWORD *)(a1 + 5900) = v35 + 1;
    *(unsigned char *)(v34 + v35) = v30;
    uint64_t v36 = a1 + 4 * byte_1DD325668[v30];
    ++*(_WORD *)(v36 + 1240);
    ++*(_WORD *)(a1 + 2504);
    int v23 = *(_DWORD *)(a1 + 5900);
    int v24 = *(_DWORD *)(a1 + 5904);
    LODWORD(v36) = *(_DWORD *)(a1 + 160);
    *(_DWORD *)(a1 + 180) -= v36;
    unsigned int v25 = *(_DWORD *)(a1 + 172) + v36;
    *(_DWORD *)(a1 + 172) = v25;
    *(_DWORD *)(a1 + 160) = 0;
LABEL_25:
    if (v23 == v24)
    {
      uint64_t v26 = *(void *)(a1 + 152);
      size_t v27 = v26 < 0 ? 0 : (const void *)(*(void *)(a1 + 96) + v26);
      sub_1DD2F2EB4(a1, v27, v25 - v26, 0);
      *(void *)(a1 + 152) = *(unsigned int *)(a1 + 172);
      sub_1DD2EEDA0(*(void *)a1);
      if (!*(_DWORD *)(*(void *)a1 + 32)) {
        return 0;
      }
    }
  }
  *(_DWORD *)(a1 + 5932) = 0;
  if (a2 != 4)
  {
    if (!*(_DWORD *)(a1 + 5900)) {
      return 1;
    }
    uint64_t v39 = *(void *)(a1 + 152);
    uint64_t v40 = v39 < 0 ? 0 : (const void *)(*(void *)(a1 + 96) + v39);
    sub_1DD2F2EB4(a1, v40, *(unsigned int *)(a1 + 172) - v39, 0);
    *(void *)(a1 + 152) = *(unsigned int *)(a1 + 172);
    sub_1DD2EEDA0(*(void *)a1);
    return *(_DWORD *)(*(void *)a1 + 32) != 0;
  }
  uint64_t v37 = *(void *)(a1 + 152);
  if (v37 < 0) {
    uint64_t v38 = 0;
  }
  else {
    uint64_t v38 = (const void *)(*(void *)(a1 + 96) + v37);
  }
  sub_1DD2F2EB4(a1, v38, *(unsigned int *)(a1 + 172) - v37, 1);
  *(void *)(a1 + 152) = *(unsigned int *)(a1 + 172);
  sub_1DD2EEDA0(*(void *)a1);
  if (*(_DWORD *)(*(void *)a1 + 32)) {
    return 3;
  }
  else {
    return 2;
  }
}

uint64_t sub_1DD2EF898(uint64_t a1, int a2)
{
  while (1)
  {
    if (*(_DWORD *)(a1 + 180) > 0x105u) {
      goto LABEL_6;
    }
    sub_1DD2EDF30(a1);
    unsigned int v4 = *(_DWORD *)(a1 + 180);
    if (!a2 && v4 < 0x106) {
      return 0;
    }
    if (!v4) {
      break;
    }
    if (v4 < 3) {
      goto LABEL_8;
    }
LABEL_6:
    unsigned int v5 = *(_DWORD *)(a1 + 172);
    unsigned int v6 = ((*(_DWORD *)(a1 + 128) << *(_DWORD *)(a1 + 144)) ^ *(unsigned __int8 *)(*(void *)(a1 + 96) + v5 + 2)) & *(_DWORD *)(a1 + 140);
    *(_DWORD *)(a1 + 128) = v6;
    uint64_t v7 = *(void *)(a1 + 120);
    unsigned int v8 = *(unsigned __int16 *)(v7 + 2 * v6);
    *(_WORD *)(*(void *)(a1 + 112) + 2 * (*(_DWORD *)(a1 + 88) & v5)) = v8;
    *(_WORD *)(v7 + 2 * v6) = v5;
    if (!v8 || v5 - v8 > *(_DWORD *)(a1 + 80) - 262)
    {
LABEL_8:
      unsigned int v9 = *(_DWORD *)(a1 + 160);
      goto LABEL_10;
    }
    unsigned int v9 = sub_1DD2F015C(a1, v8);
    *(_DWORD *)(a1 + 160) = v9;
LABEL_10:
    if (v9 < 3)
    {
      uint64_t v34 = *(unsigned __int8 *)(*(void *)(a1 + 96) + *(unsigned int *)(a1 + 172));
      uint64_t v35 = *(void *)(a1 + 5888);
      uint64_t v36 = *(unsigned int *)(a1 + 5900);
      *(_DWORD *)(a1 + 5900) = v36 + 1;
      *(unsigned char *)(v35 + v36) = 0;
      uint64_t v37 = *(void *)(a1 + 5888);
      uint64_t v38 = *(unsigned int *)(a1 + 5900);
      *(_DWORD *)(a1 + 5900) = v38 + 1;
      *(unsigned char *)(v37 + v38) = 0;
      uint64_t v39 = *(void *)(a1 + 5888);
      uint64_t v40 = *(unsigned int *)(a1 + 5900);
      *(_DWORD *)(a1 + 5900) = v40 + 1;
      *(unsigned char *)(v39 + v40) = v34;
      ++*(_WORD *)(a1 + 4 * v34 + 212);
      int v21 = *(_DWORD *)(a1 + 5900);
      int v22 = *(_DWORD *)(a1 + 5904);
      --*(_DWORD *)(a1 + 180);
      unsigned int v33 = *(_DWORD *)(a1 + 172) + 1;
LABEL_19:
      *(_DWORD *)(a1 + 172) = v33;
      goto LABEL_21;
    }
    int v10 = *(_DWORD *)(a1 + 172) - *(_DWORD *)(a1 + 176);
    uint64_t v11 = *(void *)(a1 + 5888);
    uint64_t v12 = *(unsigned int *)(a1 + 5900);
    *(_DWORD *)(a1 + 5900) = v12 + 1;
    *(unsigned char *)(v11 + v12) = v10;
    uint64_t v13 = *(void *)(a1 + 5888);
    uint64_t v14 = *(unsigned int *)(a1 + 5900);
    *(_DWORD *)(a1 + 5900) = v14 + 1;
    *(unsigned char *)(v13 + v14) = BYTE1(v10);
    uint64_t v15 = *(void *)(a1 + 5888);
    uint64_t v16 = *(unsigned int *)(a1 + 5900);
    *(_DWORD *)(a1 + 5900) = v16 + 1;
    *(unsigned char *)(v15 + v16) = v9 - 3;
    unsigned __int16 v17 = v10 - 1;
    uint64_t v18 = a1 + 4 * byte_1DD325668[(v9 - 3)];
    ++*(_WORD *)(v18 + 1240);
    unsigned __int16 v19 = (v17 >> 7) + 256;
    if ((v17 & 0xFF00) == 0) {
      unsigned __int16 v19 = v17;
    }
    uint64_t v20 = a1 + 4 * byte_1DD325468[v19];
    ++*(_WORD *)(v20 + 2504);
    int v21 = *(_DWORD *)(a1 + 5900);
    int v22 = *(_DWORD *)(a1 + 5904);
    unsigned int v23 = *(_DWORD *)(a1 + 160);
    unsigned int v24 = *(_DWORD *)(a1 + 180) - v23;
    *(_DWORD *)(a1 + 180) = v24;
    if (v23 <= *(_DWORD *)(a1 + 192) && v24 >= 3)
    {
      *(_DWORD *)(a1 + 160) = v23 - 1;
      uint64_t v25 = *(void *)(a1 + 96);
      int v27 = *(_DWORD *)(a1 + 140);
      int v26 = *(_DWORD *)(a1 + 144);
      uint64_t v29 = *(void *)(a1 + 112);
      uint64_t v28 = *(void *)(a1 + 120);
      int v30 = *(_DWORD *)(a1 + 88);
      unsigned int v31 = *(_DWORD *)(a1 + 128);
      unsigned int v32 = v23 - 2;
      unsigned int v33 = *(_DWORD *)(a1 + 172) + 1;
      do
      {
        *(_DWORD *)(a1 + 172) = v33;
        unsigned int v31 = ((v31 << v26) ^ *(unsigned __int8 *)(v25 + v33 + 2)) & v27;
        *(_DWORD *)(a1 + 128) = v31;
        *(_WORD *)(v29 + 2 * (v30 & v33)) = *(_WORD *)(v28 + 2 * v31);
        *(_WORD *)(v28 + 2 * v31) = v33;
        *(_DWORD *)(a1 + 160) = v32--;
        ++v33;
      }
      while (v32 != -1);
      goto LABEL_19;
    }
    unsigned int v33 = *(_DWORD *)(a1 + 172) + v23;
    *(_DWORD *)(a1 + 172) = v33;
    *(_DWORD *)(a1 + 160) = 0;
    uint64_t v41 = *(void *)(a1 + 96);
    int v42 = *(unsigned __int8 *)(v41 + v33);
    *(_DWORD *)(a1 + 128) = v42;
    *(_DWORD *)(a1 + 128) = ((v42 << *(_DWORD *)(a1 + 144)) ^ *(unsigned __int8 *)(v41 + v33 + 1)) & *(_DWORD *)(a1 + 140);
LABEL_21:
    if (v21 == v22)
    {
      uint64_t v43 = *(void *)(a1 + 152);
      unsigned int v44 = v43 < 0 ? 0 : (const void *)(*(void *)(a1 + 96) + v43);
      sub_1DD2F2EB4(a1, v44, v33 - v43, 0);
      *(void *)(a1 + 152) = *(unsigned int *)(a1 + 172);
      sub_1DD2EEDA0(*(void *)a1);
      if (!*(_DWORD *)(*(void *)a1 + 32)) {
        return 0;
      }
    }
  }
  uint64_t v46 = *(unsigned int *)(a1 + 172);
  if (v46 >= 2) {
    int v47 = 2;
  }
  else {
    int v47 = *(_DWORD *)(a1 + 172);
  }
  *(_DWORD *)(a1 + 5932) = v47;
  if (a2 == 4)
  {
    uint64_t v48 = *(void *)(a1 + 152);
    if (v48 < 0) {
      unsigned int v49 = 0;
    }
    else {
      unsigned int v49 = (const void *)(*(void *)(a1 + 96) + v48);
    }
    sub_1DD2F2EB4(a1, v49, v46 - v48, 1);
    *(void *)(a1 + 152) = *(unsigned int *)(a1 + 172);
    sub_1DD2EEDA0(*(void *)a1);
    if (*(_DWORD *)(*(void *)a1 + 32)) {
      return 3;
    }
    else {
      return 2;
    }
  }
  else
  {
    if (*(_DWORD *)(a1 + 5900))
    {
      uint64_t v50 = *(void *)(a1 + 152);
      BOOL v51 = v50 < 0 ? 0 : (const void *)(*(void *)(a1 + 96) + v50);
      sub_1DD2F2EB4(a1, v51, v46 - v50, 0);
      *(void *)(a1 + 152) = *(unsigned int *)(a1 + 172);
      sub_1DD2EEDA0(*(void *)a1);
      if (!*(_DWORD *)(*(void *)a1 + 32)) {
        return 0;
      }
    }
    return 1;
  }
}

uint64_t sub_1DD2EFC64(uint64_t a1, int a2)
{
  while (*(_DWORD *)(a1 + 180) >= 0x106u)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 160);
    int v6 = *(_DWORD *)(a1 + 176);
LABEL_8:
    unsigned int v8 = *(_DWORD *)(a1 + 172);
    unsigned int v9 = ((*(_DWORD *)(a1 + 128) << *(_DWORD *)(a1 + 144)) ^ *(unsigned __int8 *)(*(void *)(a1 + 96) + v8 + 2)) & *(_DWORD *)(a1 + 140);
    *(_DWORD *)(a1 + 128) = v9;
    uint64_t v10 = *(void *)(a1 + 120);
    unsigned int v11 = *(unsigned __int16 *)(v10 + 2 * v9);
    *(_WORD *)(*(void *)(a1 + 112) + 2 * (*(_DWORD *)(a1 + 88) & v8)) = v11;
    *(_WORD *)(v10 + 2 * v9) = v8;
    *(_DWORD *)(a1 + 184) = v5;
    unsigned int v7 = 2;
    *(_DWORD *)(a1 + 160) = 2;
    *(_DWORD *)(a1 + 164) = v6;
    if (!v11) {
      goto LABEL_17;
    }
    if (v5 < *(_DWORD *)(a1 + 192) && v8 - v11 <= *(_DWORD *)(a1 + 80) - 262)
    {
      unsigned int v7 = sub_1DD2F015C(a1, v11);
      *(_DWORD *)(a1 + 160) = v7;
      if (v7 <= 5)
      {
        if (*(_DWORD *)(a1 + 200) == 1) {
          goto LABEL_15;
        }
        if (v7 == 3)
        {
          if ((*(_DWORD *)(a1 + 172) - *(_DWORD *)(a1 + 176)) <= 0x1000)
          {
            unsigned int v7 = 3;
            goto LABEL_16;
          }
LABEL_15:
          unsigned int v7 = 2;
          *(_DWORD *)(a1 + 160) = 2;
        }
      }
    }
LABEL_16:
    unsigned int v5 = *(_DWORD *)(a1 + 184);
LABEL_17:
    unsigned __int8 v12 = v5 - 3;
    if (v5 < 3 || v7 > v5)
    {
      if (*(_DWORD *)(a1 + 168))
      {
        uint64_t v33 = *(unsigned __int8 *)(*(void *)(a1 + 96) + (*(_DWORD *)(a1 + 172) - 1));
        uint64_t v34 = *(void *)(a1 + 5888);
        uint64_t v35 = *(unsigned int *)(a1 + 5900);
        *(_DWORD *)(a1 + 5900) = v35 + 1;
        *(unsigned char *)(v34 + v35) = 0;
        uint64_t v36 = *(void *)(a1 + 5888);
        uint64_t v37 = *(unsigned int *)(a1 + 5900);
        *(_DWORD *)(a1 + 5900) = v37 + 1;
        *(unsigned char *)(v36 + v37) = 0;
        uint64_t v38 = *(void *)(a1 + 5888);
        uint64_t v39 = *(unsigned int *)(a1 + 5900);
        *(_DWORD *)(a1 + 5900) = v39 + 1;
        *(unsigned char *)(v38 + v39) = v33;
        ++*(_WORD *)(a1 + 4 * v33 + 212);
        if (*(_DWORD *)(a1 + 5900) == *(_DWORD *)(a1 + 5904))
        {
          uint64_t v40 = *(void *)(a1 + 152);
          if (v40 < 0) {
            uint64_t v41 = 0;
          }
          else {
            uint64_t v41 = (const void *)(*(void *)(a1 + 96) + v40);
          }
          sub_1DD2F2EB4(a1, v41, *(unsigned int *)(a1 + 172) - v40, 0);
          *(void *)(a1 + 152) = *(unsigned int *)(a1 + 172);
          sub_1DD2EEDA0(*(void *)a1);
        }
        ++*(_DWORD *)(a1 + 172);
        --*(_DWORD *)(a1 + 180);
        goto LABEL_38;
      }
      int v42 = *(_DWORD *)(a1 + 172) + 1;
      *(_DWORD *)(a1 + 168) = 1;
      *(_DWORD *)(a1 + 172) = v42;
      --*(_DWORD *)(a1 + 180);
    }
    else
    {
      int v13 = *(_DWORD *)(a1 + 172);
      unsigned int v14 = v13 + *(_DWORD *)(a1 + 180) - 3;
      int v15 = v13 + ~*(_DWORD *)(a1 + 164);
      uint64_t v16 = *(void *)(a1 + 5888);
      uint64_t v17 = *(unsigned int *)(a1 + 5900);
      *(_DWORD *)(a1 + 5900) = v17 + 1;
      *(unsigned char *)(v16 + v17) = v15;
      uint64_t v18 = *(void *)(a1 + 5888);
      uint64_t v19 = *(unsigned int *)(a1 + 5900);
      *(_DWORD *)(a1 + 5900) = v19 + 1;
      *(unsigned char *)(v18 + v19) = BYTE1(v15);
      uint64_t v20 = *(void *)(a1 + 5888);
      uint64_t v21 = *(unsigned int *)(a1 + 5900);
      *(_DWORD *)(a1 + 5900) = v21 + 1;
      *(unsigned char *)(v20 + v21) = v12;
      unsigned __int16 v22 = v15 - 1;
      uint64_t v23 = a1 + 4 * byte_1DD325668[v12];
      ++*(_WORD *)(v23 + 1240);
      unsigned __int16 v24 = (v22 >> 7) + 256;
      if ((v22 & 0xFF00) == 0) {
        unsigned __int16 v24 = v22;
      }
      uint64_t v28 = a1 + 4 * byte_1DD325468[v24];
      ++*(_WORD *)(v28 + 2504);
      int v25 = *(_DWORD *)(a1 + 5900);
      int v26 = *(_DWORD *)(a1 + 5904);
      LODWORD(v28) = *(_DWORD *)(a1 + 184);
      *(_DWORD *)(a1 + 180) = *(_DWORD *)(a1 + 180) - v28 + 1;
      *(_DWORD *)(a1 + 184) = v28 - 2;
      int v27 = v28 - 3;
      LODWORD(v28) = *(_DWORD *)(a1 + 172) + 1;
      do
      {
        *(_DWORD *)(a1 + 172) = v28;
        if (v28 <= v14)
        {
          unsigned int v29 = ((*(_DWORD *)(a1 + 128) << *(_DWORD *)(a1 + 144)) ^ *(unsigned __int8 *)(*(void *)(a1 + 96)
                                                                                       + (v28 + 2))) & *(_DWORD *)(a1 + 140);
          *(_DWORD *)(a1 + 128) = v29;
          uint64_t v30 = *(void *)(a1 + 120);
          *(_WORD *)(*(void *)(a1 + 112) + 2 * (*(_DWORD *)(a1 + 88) & v28)) = *(_WORD *)(v30 + 2 * v29);
          *(_WORD *)(v30 + 2 * v29) = v28;
        }
        *(_DWORD *)(a1 + 184) = v27--;
        uint64_t v28 = (v28 + 1);
      }
      while (v27 != -1);
      *(_DWORD *)(a1 + 160) = 2;
      *(_DWORD *)(a1 + 168) = 0;
      *(_DWORD *)(a1 + 172) = v28;
      if (v25 == v26)
      {
        uint64_t v31 = *(void *)(a1 + 152);
        if (v31 < 0) {
          unsigned int v32 = 0;
        }
        else {
          unsigned int v32 = (const void *)(*(void *)(a1 + 96) + v31);
        }
        sub_1DD2F2EB4(a1, v32, v28 - v31, 0);
        *(void *)(a1 + 152) = *(unsigned int *)(a1 + 172);
        sub_1DD2EEDA0(*(void *)a1);
LABEL_38:
        if (!*(_DWORD *)(*(void *)a1 + 32)) {
          return 0;
        }
      }
    }
  }
  sub_1DD2EDF30(a1);
  unsigned int v4 = *(_DWORD *)(a1 + 180);
  if (!a2 && v4 < 0x106) {
    return 0;
  }
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 160);
    int v6 = *(_DWORD *)(a1 + 176);
    if (v4 <= 2)
    {
      *(_DWORD *)(a1 + 184) = v5;
      unsigned int v7 = 2;
      *(_DWORD *)(a1 + 160) = 2;
      *(_DWORD *)(a1 + 164) = v6;
      goto LABEL_17;
    }
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 168))
  {
    uint64_t v43 = *(unsigned __int8 *)(*(void *)(a1 + 96) + (*(_DWORD *)(a1 + 172) - 1));
    uint64_t v44 = *(void *)(a1 + 5888);
    uint64_t v45 = *(unsigned int *)(a1 + 5900);
    *(_DWORD *)(a1 + 5900) = v45 + 1;
    *(unsigned char *)(v44 + v45) = 0;
    uint64_t v46 = *(void *)(a1 + 5888);
    uint64_t v47 = *(unsigned int *)(a1 + 5900);
    *(_DWORD *)(a1 + 5900) = v47 + 1;
    *(unsigned char *)(v46 + v47) = 0;
    uint64_t v48 = *(void *)(a1 + 5888);
    uint64_t v49 = *(unsigned int *)(a1 + 5900);
    *(_DWORD *)(a1 + 5900) = v49 + 1;
    *(unsigned char *)(v48 + v49) = v43;
    ++*(_WORD *)(a1 + 4 * v43 + 212);
    *(_DWORD *)(a1 + 168) = 0;
  }
  uint64_t v50 = *(unsigned int *)(a1 + 172);
  if (v50 >= 2) {
    int v51 = 2;
  }
  else {
    int v51 = *(_DWORD *)(a1 + 172);
  }
  *(_DWORD *)(a1 + 5932) = v51;
  if (a2 != 4)
  {
    if (!*(_DWORD *)(a1 + 5900)) {
      return 1;
    }
    uint64_t v54 = *(void *)(a1 + 152);
    char v55 = v54 < 0 ? 0 : (const void *)(*(void *)(a1 + 96) + v54);
    sub_1DD2F2EB4(a1, v55, v50 - v54, 0);
    *(void *)(a1 + 152) = *(unsigned int *)(a1 + 172);
    sub_1DD2EEDA0(*(void *)a1);
    return *(_DWORD *)(*(void *)a1 + 32) != 0;
  }
  uint64_t v52 = *(void *)(a1 + 152);
  if (v52 < 0) {
    BOOL v53 = 0;
  }
  else {
    BOOL v53 = (const void *)(*(void *)(a1 + 96) + v52);
  }
  sub_1DD2F2EB4(a1, v53, v50 - v52, 1);
  *(void *)(a1 + 152) = *(unsigned int *)(a1 + 172);
  sub_1DD2EEDA0(*(void *)a1);
  if (*(_DWORD *)(*(void *)a1 + 32)) {
    return 3;
  }
  else {
    return 2;
  }
}

uint64_t sub_1DD2F015C(uint64_t a1, unsigned int a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 188);
  uint64_t v3 = *(int *)(a1 + 184);
  uint64_t v4 = *(void *)(a1 + 96);
  uint64_t v5 = *(unsigned int *)(a1 + 172);
  int v6 = (unsigned __int8 *)(v4 + v5);
  unsigned int v7 = *(_DWORD *)(a1 + 80) - 262;
  BOOL v8 = v5 >= v7;
  unsigned int v9 = v5 - v7;
  if (!v8) {
    unsigned int v9 = 0;
  }
  uint64_t v10 = *(void *)(a1 + 112);
  unsigned int v11 = *(_DWORD *)(a1 + 88);
  unsigned int v12 = *(_DWORD *)(a1 + 180);
  int v13 = v6[v3 - 1];
  int v14 = v6[v3];
  unsigned int v15 = *(_DWORD *)(a1 + 208);
  if (v3 >= *(_DWORD *)(a1 + 204)) {
    v2 >>= 2;
  }
  if (v15 >= v12) {
    unsigned int v15 = *(_DWORD *)(a1 + 180);
  }
  while (1)
  {
    uint64_t v16 = (unsigned __int8 *)(v4 + a2);
    if (v16[(int)v3] != v14 || v16[(int)v3 - 1] != v13 || *v16 != *v6 || v16[1] != v6[1]) {
      goto LABEL_32;
    }
    uint64_t v17 = 0;
    while (1)
    {
      uint64_t v18 = &v6[v17];
      if (v6[v17 + 3] != v16[v17 + 3])
      {
        int v24 = v18 + 3;
        goto LABEL_29;
      }
      if (v18[4] != v16[v17 + 4])
      {
        int v24 = v6 + v17 + 4;
        goto LABEL_29;
      }
      uint64_t v19 = &v6[v17];
      if (v6[v17 + 5] != v16[v17 + 5])
      {
        int v24 = v19 + 5;
        goto LABEL_29;
      }
      if (v19[6] != v16[v17 + 6])
      {
        int v24 = v6 + v17 + 6;
        goto LABEL_29;
      }
      uint64_t v20 = &v6[v17];
      if (v6[v17 + 7] != v16[v17 + 7])
      {
        int v24 = v20 + 7;
        goto LABEL_29;
      }
      if (v20[8] != v16[v17 + 8])
      {
        int v24 = v6 + v17 + 8;
        goto LABEL_29;
      }
      uint64_t v21 = &v6[v17];
      unsigned __int16 v22 = &v16[v17];
      if (v6[v17 + 9] != v16[v17 + 9]) {
        break;
      }
      unint64_t v23 = v17 + 2;
      v17 += 8;
      if (v23 > 0xF9 || v21[10] != v22[10])
      {
        int v24 = v6 + v17 + 2;
        goto LABEL_29;
      }
    }
    int v24 = v21 + 9;
LABEL_29:
    int v25 = v24 - (v6 + 258);
    int v26 = v24 - v6;
    if (v26 <= (int)v3) {
      goto LABEL_32;
    }
    *(_DWORD *)(a1 + 176) = a2;
    if (v26 >= (int)v15) {
      break;
    }
    int v13 = v6[v25 + 257];
    int v14 = v6[v26];
    LODWORD(v3) = v26;
LABEL_32:
    a2 = *(unsigned __int16 *)(v10 + 2 * (a2 & v11));
    --v2;
    if (v9 >= a2 || v2 == 0) {
      goto LABEL_37;
    }
  }
  LODWORD(v3) = v26;
LABEL_37:
  if (v3 >= v12) {
    return v12;
  }
  else {
    return v3;
  }
}

size_t sub_1DD2F0358(uint64_t a1, void *__dst, unsigned int a3)
{
  unsigned int v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= a3) {
    size_t v4 = a3;
  }
  else {
    size_t v4 = v3;
  }
  if (v4)
  {
    *(_DWORD *)(a1 + 8) = v3 - v4;
    memcpy(__dst, *(const void **)a1, v4);
    int v7 = *(_DWORD *)(*(void *)(a1 + 56) + 48);
    if (v7 == 2)
    {
      uint64_t v8 = sub_1DD2EDAA4(*(void *)(a1 + 96), (unsigned __int8 *)__dst, v4);
    }
    else
    {
      if (v7 != 1)
      {
LABEL_10:
        *(void *)a1 += v4;
        *(void *)(a1 + 16) += v4;
        return v4;
      }
      uint64_t v8 = sub_1DD2ED768(*(void *)(a1 + 96), (unsigned __int8 *)__dst, v4);
    }
    *(void *)(a1 + 96) = v8;
    goto LABEL_10;
  }
  return v4;
}

double sub_1DD2F0408(void *a1)
{
  if (!sub_1DD2F049C(a1))
  {
    uint64_t v3 = a1[7];
    *(void *)(v3 + 40) = 0;
    a1[2] = 0;
    a1[5] = 0;
    a1[6] = 0;
    int v4 = *(_DWORD *)(v3 + 16);
    if (v4) {
      a1[12] = v4 & 1;
    }
    *(void *)(v3 + 8) = 16180;
    *(void *)(v3 + 20) = 0xFFFFFFFF00000000;
    *(_DWORD *)(v3 + 28) = 0x8000;
    *(void *)(v3 + 144) = v3 + 1368;
    *(void *)(v3 + 104) = v3 + 1368;
    *(void *)(v3 + 112) = v3 + 1368;
    double result = NAN;
    *(void *)(v3 + 48) = 0;
    *(void *)(v3 + 80) = 0;
    *(_DWORD *)(v3 + 88) = 0;
    *(void *)(v3 + 7144) = 0xFFFFFFFF00000001;
  }
  return result;
}

BOOL sub_1DD2F049C(void *a1)
{
  return !a1
      || !a1[8]
      || !a1[9]
      || (uint64_t v1 = a1[7]) == 0
      || *(void **)v1 != a1
      || (*(_DWORD *)(v1 + 8) - 16212) < 0xFFFFFFE0;
}

double sub_1DD2F04E4(void *a1)
{
  if (!sub_1DD2F049C(a1))
  {
    uint64_t v3 = a1[7];
    *(void *)(v3 + 64) = 0;
    *(_DWORD *)(v3 + 60) = 0;
    return sub_1DD2F0408(a1);
  }
  return result;
}

double sub_1DD2F053C(uint64_t a1, unsigned int a2)
{
  if (!sub_1DD2F049C((void *)a1))
  {
    uint64_t v5 = *(void *)(a1 + 56);
    if ((a2 & 0x80000000) != 0)
    {
      if (a2 < 0xFFFFFFF1) {
        return result;
      }
      int v6 = 0;
      a2 = -a2;
    }
    else
    {
      int v6 = (a2 >> 4) + 5;
      if (a2 < 0x30) {
        a2 &= 0xFu;
      }
    }
    if (a2 - 8 < 8 || !a2)
    {
      if (*(void *)(v5 + 72) && *(_DWORD *)(v5 + 56) != a2)
      {
        (*(void (**)(void))(a1 + 72))(*(void *)(a1 + 80));
        *(void *)(v5 + 72) = 0;
      }
      *(_DWORD *)(v5 + 16) = v6;
      *(_DWORD *)(v5 + 56) = a2;
      return sub_1DD2F04E4((void *)a1);
    }
  }
  return result;
}

uint64_t sub_1DD2F0604(void *a1, unsigned int a2, unsigned char *a3, int a4)
{
  uint64_t v4 = 4294967290;
  if (a3 && a4 == 112 && *a3 == 49)
  {
    if (a1)
    {
      a1[6] = 0;
      int v7 = (void *(*)(uint64_t, int, int))a1[8];
      if (!v7)
      {
        int v7 = sub_1DD2F431C;
        a1[8] = sub_1DD2F431C;
        a1[10] = 0;
      }
      if (!a1[9]) {
        a1[9] = sub_1DD2F4324;
      }
      uint64_t v8 = (uint64_t)v7(a1[10], 1, 7160);
      if (v8)
      {
        uint64_t v9 = v8;
        a1[7] = v8;
        *(void *)uint64_t v8 = a1;
        *(void *)(v8 + 72) = 0;
        *(_DWORD *)(v8 + 8) = 16180;
        double v10 = sub_1DD2F053C((uint64_t)a1, a2);
        uint64_t v4 = v11;
        if (v11)
        {
          ((void (*)(void, uint64_t, double))a1[9])(a1[10], v9, v10);
          a1[7] = 0;
        }
      }
      else
      {
        return 4294967292;
      }
    }
    else
    {
      return 4294967294;
    }
  }
  return v4;
}

uint64_t sub_1DD2F06F0(uint64_t a1, int a2)
{
  if (sub_1DD2F049C((void *)a1)) {
    return 4294967294;
  }
  uint64_t v4 = *(unsigned char **)(a1 + 24);
  if (!v4) {
    return 4294967294;
  }
  uint64_t v5 = *(unsigned __int8 **)a1;
  if (!*(void *)a1)
  {
    if (*(_DWORD *)(a1 + 8)) {
      return 4294967294;
    }
  }
  uint64_t v6 = *(void *)(a1 + 56);
  int v7 = *(_DWORD *)(v6 + 8);
  if (v7 == 16191)
  {
    int v7 = 16192;
    *(_DWORD *)(v6 + 8) = 16192;
  }
  unsigned int v232 = 0;
  uint64_t v8 = *(unsigned int *)(a1 + 32);
  unint64_t v9 = *(void *)(v6 + 80);
  double v10 = (_WORD **)(v6 + 144);
  unint64_t v227 = (unsigned int *)(v6 + 120);
  uint64_t v228 = v6 + 1368;
  uint64_t v11 = (unsigned __int16 *)(v6 + 152);
  unsigned int v12 = (_WORD *)(v6 + 792);
  uint64_t v13 = *(unsigned int *)(v6 + 88);
  unsigned int v229 = *(_DWORD *)(a1 + 8);
  unint64_t v14 = v229;
  unsigned int v234 = *(_DWORD *)(a1 + 32);
  while (2)
  {
    int v15 = -3;
    unsigned int v16 = 1;
    switch(v7)
    {
      case 16180:
        int v17 = *(_DWORD *)(v6 + 16);
        if (!v17)
        {
          int v35 = 16192;
          goto LABEL_381;
        }
        if (v13 <= 0xF)
        {
          uint64_t v18 = 0;
          do
          {
            if (!v14) {
              goto LABEL_388;
            }
            unint64_t v14 = (v14 - 1);
            unsigned int v19 = *v5++;
            v9 += (unint64_t)v19 << (v13 + v18);
            v18 += 8;
          }
          while ((unint64_t)v13 + v18 - 8 < 8);
          uint64_t v13 = (v13 + v18);
        }
        if ((v17 & 2) != 0 && v9 == 35615)
        {
          uint64_t v20 = v8;
          if (!*(_DWORD *)(v6 + 56)) {
            *(_DWORD *)(v6 + 56) = 15;
          }
          uint64_t v21 = sub_1DD2EDAA4(0, 0, 0);
          *(void *)(v6 + 32) = v21;
          LOWORD(v235) = -29921;
          uint64_t v22 = sub_1DD2EDAA4(v21, (unsigned __int8 *)&v235, 2u);
          unint64_t v9 = 0;
          uint64_t v13 = 0;
          *(void *)(v6 + 32) = v22;
          *(_DWORD *)(v6 + 8) = 16181;
          goto LABEL_305;
        }
        uint64_t v99 = *(void *)(v6 + 48);
        if (v99) {
          *(_DWORD *)(v99 + 72) = -1;
        }
        if ((v17 & 1) == 0
          || 0xEF7BDEF7BDEF7BDFLL * (((unint64_t)v9 << 8) + (v9 >> 8)) >= 0x842108421084211)
        {
          int v25 = "incorrect header check";
          goto LABEL_380;
        }
        if ((v9 & 0xF) != 8) {
          goto LABEL_379;
        }
        unsigned int v202 = v9 >> 4;
        unsigned int v203 = v202 + 8;
        unsigned int v204 = *(_DWORD *)(v6 + 56);
        if (!v204)
        {
          *(_DWORD *)(v6 + 56) = v203;
          unsigned int v204 = v202 + 8;
        }
        if (v202 > 7 || v203 > v204)
        {
          v9 >>= 4;
          uint64_t v13 = (v13 - 4);
          int v25 = "invalid window size";
          goto LABEL_380;
        }
        *(_DWORD *)(v6 + 24) = 0;
        *(_DWORD *)(v6 + 28) = 256 << v202;
        uint64_t v205 = v8;
        uint64_t v206 = sub_1DD2ED768(0, 0, 0);
        uint64_t v8 = v205;
        uint64_t v11 = (unsigned __int16 *)(v6 + 152);
        double v10 = (_WORD **)(v6 + 144);
        uint64_t v13 = 0;
        *(void *)(v6 + 32) = v206;
        *(void *)(a1 + 96) = v206;
        if ((v9 & 0x2000) != 0) {
          int v207 = 16189;
        }
        else {
          int v207 = 16191;
        }
        *(_DWORD *)(v6 + 8) = v207;
        unint64_t v9 = 0;
        goto LABEL_382;
      case 16181:
        if (v13 > 0xF) {
          goto LABEL_25;
        }
        uint64_t v23 = 0;
        do
        {
          if (!v14)
          {
            LODWORD(v13) = v13 + v23;
            goto LABEL_398;
          }
          unint64_t v14 = (v14 - 1);
          unsigned int v24 = *v5++;
          v9 += (unint64_t)v24 << (v13 + v23);
          v23 += 8;
        }
        while ((unint64_t)v13 + v23 - 8 < 8);
        uint64_t v13 = (v13 + v23);
LABEL_25:
        *(_DWORD *)(v6 + 24) = v9;
        if (v9 != 8)
        {
LABEL_379:
          int v25 = "unknown compression method";
          goto LABEL_380;
        }
        if ((v9 & 0xE000) != 0)
        {
          int v25 = "unknown header flags set";
          goto LABEL_380;
        }
        unsigned int v230 = v8;
        BOOL v101 = *(unsigned int **)(v6 + 48);
        if (v101) {
          *BOOL v101 = (v9 >> 8) & 1;
        }
        unsigned int v26 = v234;
        if ((v9 & 0x200) != 0 && (*(unsigned char *)(v6 + 16) & 4) != 0)
        {
          LOWORD(v235) = v9;
          uint64_t v102 = sub_1DD2EDAA4(*(void *)(v6 + 32), (unsigned __int8 *)&v235, 2u);
          uint64_t v11 = (unsigned __int16 *)(v6 + 152);
          double v10 = (_WORD **)(v6 + 144);
          *(void *)(v6 + 32) = v102;
        }
        LODWORD(v13) = 0;
        unint64_t v9 = 0;
        *(_DWORD *)(v6 + 8) = 16182;
LABEL_174:
        unint64_t v103 = v13;
        while (2)
        {
          if (!v14)
          {
LABEL_389:
            LODWORD(v13) = v103;
            unsigned int v16 = v232;
            unsigned int v234 = v26;
LABEL_396:
            LODWORD(v8) = v230;
            goto LABEL_399;
          }
          unsigned int v104 = *v5++;
          LODWORD(v14) = v14 - 1;
          v9 += (unint64_t)v104 << v103;
          BOOL v133 = v103 >= 0x18;
          v103 += 8;
          if (!v133) {
            continue;
          }
          break;
        }
LABEL_178:
        uint64_t v105 = *(void *)(v6 + 48);
        if (v105) {
          *(void *)(v105 + 8) = v9;
        }
        if ((*(unsigned char *)(v6 + 25) & 2) != 0 && (*(unsigned char *)(v6 + 16) & 4) != 0)
        {
          int v235 = v9;
          uint64_t v106 = sub_1DD2EDAA4(*(void *)(v6 + 32), (unsigned __int8 *)&v235, 4u);
          uint64_t v11 = (unsigned __int16 *)(v6 + 152);
          double v10 = (_WORD **)(v6 + 144);
          *(void *)(v6 + 32) = v106;
        }
        LODWORD(v13) = 0;
        unint64_t v9 = 0;
        *(_DWORD *)(v6 + 8) = 16183;
LABEL_184:
        unint64_t v103 = v13;
        do
        {
          if (!v14) {
            goto LABEL_389;
          }
          unsigned int v107 = *v5++;
          unint64_t v14 = (v14 - 1);
          v9 += (unint64_t)v107 << v103;
          BOOL v133 = v103 >= 8;
          v103 += 8;
        }
        while (!v133);
LABEL_188:
        uint64_t v108 = *(void *)(v6 + 48);
        if (v108)
        {
          *(_DWORD *)(v108 + 16) = v9;
          *(_DWORD *)(v108 + 20) = v9 >> 8;
        }
        if ((*(unsigned char *)(v6 + 25) & 2) != 0 && (*(unsigned char *)(v6 + 16) & 4) != 0)
        {
          LOWORD(v235) = v9;
          uint64_t v109 = sub_1DD2EDAA4(*(void *)(v6 + 32), (unsigned __int8 *)&v235, 2u);
          uint64_t v11 = (unsigned __int16 *)(v6 + 152);
          double v10 = (_WORD **)(v6 + 144);
          *(void *)(v6 + 32) = v109;
        }
        unint64_t v9 = 0;
        LODWORD(v13) = 0;
        uint64_t v28 = 0;
        *(_DWORD *)(v6 + 8) = 16184;
        int v27 = *(_DWORD *)(v6 + 24);
        unsigned int v234 = v26;
        uint64_t v8 = v230;
        if ((v27 & 0x400) != 0)
        {
LABEL_196:
          unint64_t v29 = v13;
          while (v14)
          {
            unsigned int v111 = *v5++;
            unint64_t v14 = (v14 - 1);
            v9 += (unint64_t)v111 << v29;
            BOOL v133 = v29 >= 8;
            v29 += 8;
            if (v133) {
              goto LABEL_200;
            }
          }
LABEL_390:
          LODWORD(v13) = v29;
          goto LABEL_398;
        }
LABEL_194:
        uint64_t v110 = *(void *)(v6 + 48);
        if (v110) {
          *(void *)(v110 + 24) = 0;
        }
LABEL_206:
        *(_DWORD *)(v6 + 8) = 16185;
        uint64_t v13 = v28;
LABEL_207:
        int v115 = *(_DWORD *)(v6 + 24);
        if ((v115 & 0x400) != 0)
        {
          unsigned int v116 = *(_DWORD *)(v6 + 92);
          if (v116 >= v14) {
            unsigned int v117 = v14;
          }
          else {
            unsigned int v117 = *(_DWORD *)(v6 + 92);
          }
          if (v117)
          {
            uint64_t v118 = *(void *)(v6 + 48);
            if (v118)
            {
              uint64_t v119 = *(void *)(v118 + 24);
              if (v119)
              {
                int v121 = *(_DWORD *)(v118 + 32);
                unsigned int v120 = *(_DWORD *)(v118 + 36);
                unsigned int v122 = v121 - v116;
                if (v120 > v122)
                {
                  if (v122 + v117 <= v120) {
                    size_t v123 = v117;
                  }
                  else {
                    size_t v123 = v120 - v122;
                  }
                  uint64_t v124 = v8;
                  uint64_t v223 = v13;
                  memcpy((void *)(v119 + v122), v5, v123);
                  uint64_t v13 = v223;
                  uint64_t v8 = v124;
                  uint64_t v11 = (unsigned __int16 *)(v6 + 152);
                  double v10 = (_WORD **)(v6 + 144);
                  int v115 = *(_DWORD *)(v6 + 24);
                }
              }
            }
            if ((v115 & 0x200) != 0 && (*(unsigned char *)(v6 + 16) & 4) != 0)
            {
              uint64_t v125 = v8;
              uint64_t v224 = v13;
              uint64_t v126 = sub_1DD2EDAA4(*(void *)(v6 + 32), v5, v117);
              uint64_t v13 = v224;
              uint64_t v8 = v125;
              uint64_t v11 = (unsigned __int16 *)(v6 + 152);
              double v10 = (_WORD **)(v6 + 144);
              *(void *)(v6 + 32) = v126;
            }
            unint64_t v14 = v14 - v117;
            v5 += v117;
            unsigned int v116 = *(_DWORD *)(v6 + 92) - v117;
            *(_DWORD *)(v6 + 92) = v116;
          }
          if (v116) {
            goto LABEL_398;
          }
        }
        *(_DWORD *)(v6 + 92) = 0;
        *(_DWORD *)(v6 + 8) = 16186;
LABEL_225:
        if ((*(unsigned char *)(v6 + 25) & 8) == 0)
        {
          uint64_t v127 = *(void *)(v6 + 48);
          if (v127) {
            *(void *)(v127 + 40) = 0;
          }
          goto LABEL_244;
        }
        if (!v14) {
          goto LABEL_398;
        }
        unsigned int v230 = v8;
        unint64_t v128 = 0;
        do
        {
          int v129 = v5[v128];
          uint64_t v130 = *(void *)(v6 + 48);
          if (v130)
          {
            uint64_t v131 = *(void *)(v130 + 40);
            if (v131)
            {
              uint64_t v132 = *(unsigned int *)(v6 + 92);
              if (v132 < *(_DWORD *)(v130 + 48))
              {
                *(_DWORD *)(v6 + 92) = v132 + 1;
                *(unsigned char *)(v131 + v132) = v129;
              }
            }
          }
          ++v128;
          if (v129) {
            BOOL v133 = v128 >= v14;
          }
          else {
            BOOL v133 = 1;
          }
        }
        while (!v133);
        if ((*(unsigned char *)(v6 + 25) & 2) != 0 && (*(unsigned char *)(v6 + 16) & 4) != 0)
        {
          uint64_t v225 = v13;
          uint64_t v134 = sub_1DD2EDAA4(*(void *)(v6 + 32), v5, v128);
          uint64_t v13 = v225;
          uint64_t v11 = (unsigned __int16 *)(v6 + 152);
          double v10 = (_WORD **)(v6 + 144);
          *(void *)(v6 + 32) = v134;
        }
        v5 += v128;
        if (v129) {
          goto LABEL_395;
        }
        unint64_t v14 = v14 - v128;
        uint64_t v8 = v230;
LABEL_244:
        *(_DWORD *)(v6 + 92) = 0;
        *(_DWORD *)(v6 + 8) = 16187;
LABEL_245:
        if ((*(unsigned char *)(v6 + 25) & 0x10) == 0)
        {
          uint64_t v135 = *(void *)(v6 + 48);
          if (v135) {
            *(void *)(v135 + 56) = 0;
          }
          goto LABEL_264;
        }
        if (!v14) {
          goto LABEL_398;
        }
        unsigned int v230 = v8;
        unint64_t v128 = 0;
        do
        {
          int v136 = v5[v128];
          uint64_t v137 = *(void *)(v6 + 48);
          if (v137)
          {
            uint64_t v138 = *(void *)(v137 + 56);
            if (v138)
            {
              uint64_t v139 = *(unsigned int *)(v6 + 92);
              if (v139 < *(_DWORD *)(v137 + 64))
              {
                *(_DWORD *)(v6 + 92) = v139 + 1;
                *(unsigned char *)(v138 + v139) = v136;
              }
            }
          }
          ++v128;
          if (v136) {
            BOOL v140 = v128 >= v14;
          }
          else {
            BOOL v140 = 1;
          }
        }
        while (!v140);
        if ((*(unsigned char *)(v6 + 25) & 2) != 0 && (*(unsigned char *)(v6 + 16) & 4) != 0)
        {
          uint64_t v226 = v13;
          uint64_t v141 = sub_1DD2EDAA4(*(void *)(v6 + 32), v5, v128);
          uint64_t v13 = v226;
          uint64_t v11 = (unsigned __int16 *)(v6 + 152);
          double v10 = (_WORD **)(v6 + 144);
          *(void *)(v6 + 32) = v141;
        }
        v5 += v128;
        if (v136)
        {
LABEL_395:
          LODWORD(v14) = v14 - v128;
          unsigned int v16 = v232;
          goto LABEL_396;
        }
        unint64_t v14 = v14 - v128;
        uint64_t v8 = v230;
LABEL_264:
        *(_DWORD *)(v6 + 8) = 16188;
LABEL_265:
        unsigned int v142 = *(_DWORD *)(v6 + 24);
        if ((v142 & 0x200) == 0)
        {
LABEL_274:
          uint64_t v51 = v13;
          uint64_t v144 = v8;
          uint64_t v145 = *(void *)(v6 + 48);
          if (v145)
          {
            *(_DWORD *)(v145 + 68) = (v142 >> 9) & 1;
            *(_DWORD *)(v145 + 72) = 1;
          }
          uint64_t v146 = sub_1DD2EDAA4(0, 0, 0);
          *(void *)(v6 + 32) = v146;
          *(void *)(a1 + 96) = v146;
          *(_DWORD *)(v6 + 8) = 16191;
          uint64_t v11 = (unsigned __int16 *)(v6 + 152);
          double v10 = (_WORD **)(v6 + 144);
          uint64_t v8 = v144;
          goto LABEL_277;
        }
        if (v13 <= 0xF)
        {
          uint64_t v18 = 0;
          do
          {
            if (!v14) {
              goto LABEL_388;
            }
            unint64_t v14 = (v14 - 1);
            unsigned int v143 = *v5++;
            v9 += (unint64_t)v143 << (v13 + v18);
            v18 += 8;
          }
          while ((unint64_t)v13 + v18 - 8 < 8);
          uint64_t v13 = (v13 + v18);
        }
        if ((*(unsigned char *)(v6 + 16) & 4) == 0 || v9 == *(unsigned __int16 *)(v6 + 32))
        {
          unint64_t v9 = 0;
          uint64_t v13 = 0;
          goto LABEL_274;
        }
        int v25 = "header crc mismatch";
LABEL_380:
        *(void *)(a1 + 48) = v25;
        int v35 = 16209;
LABEL_381:
        *(_DWORD *)(v6 + 8) = v35;
LABEL_382:
        int v7 = *(_DWORD *)(v6 + 8);
        continue;
      case 16182:
        unsigned int v230 = v8;
        unsigned int v26 = v234;
        if (v13 > 0x1F) {
          goto LABEL_178;
        }
        goto LABEL_174;
      case 16183:
        unsigned int v230 = v8;
        unsigned int v26 = v234;
        if (v13 > 0xF) {
          goto LABEL_188;
        }
        goto LABEL_184;
      case 16184:
        int v27 = *(_DWORD *)(v6 + 24);
        if ((v27 & 0x400) == 0)
        {
          uint64_t v28 = v13;
          goto LABEL_194;
        }
        if (v13 <= 0xF) {
          goto LABEL_196;
        }
LABEL_200:
        *(_DWORD *)(v6 + 92) = v9;
        uint64_t v112 = *(void *)(v6 + 48);
        if (v112) {
          *(_DWORD *)(v112 + 32) = v9;
        }
        if ((v27 & 0x200) != 0 && (*(unsigned char *)(v6 + 16) & 4) != 0)
        {
          LOWORD(v235) = v9;
          uint64_t v113 = v8;
          uint64_t v114 = sub_1DD2EDAA4(*(void *)(v6 + 32), (unsigned __int8 *)&v235, 2u);
          uint64_t v8 = v113;
          uint64_t v11 = (unsigned __int16 *)(v6 + 152);
          double v10 = (_WORD **)(v6 + 144);
          unint64_t v9 = 0;
          uint64_t v28 = 0;
          *(void *)(v6 + 32) = v114;
        }
        else
        {
          unint64_t v9 = 0;
          uint64_t v28 = 0;
        }
        goto LABEL_206;
      case 16185:
        goto LABEL_207;
      case 16186:
        goto LABEL_225;
      case 16187:
        goto LABEL_245;
      case 16188:
        goto LABEL_265;
      case 16189:
        if (v13 > 0x1F) {
          goto LABEL_39;
        }
        unint64_t v29 = v13;
        do
        {
          if (!v14) {
            goto LABEL_390;
          }
          unsigned int v30 = *v5++;
          unint64_t v14 = (v14 - 1);
          v9 += (unint64_t)v30 << v29;
          BOOL v133 = v29 >= 0x18;
          v29 += 8;
        }
        while (!v133);
LABEL_39:
        LODWORD(v13) = 0;
        uint64_t v31 = bswap32(v9);
        *(void *)(v6 + 32) = v31;
        *(void *)(a1 + 96) = v31;
        *(_DWORD *)(v6 + 8) = 16190;
        unint64_t v9 = 0;
LABEL_40:
        if (*(_DWORD *)(v6 + 20))
        {
          uint64_t v32 = v8;
          int v33 = v13;
          uint64_t v34 = sub_1DD2ED768(0, 0, 0);
          LODWORD(v13) = v33;
          uint64_t v8 = v32;
          uint64_t v11 = (unsigned __int16 *)(v6 + 152);
          double v10 = (_WORD **)(v6 + 144);
          *(void *)(v6 + 32) = v34;
          *(void *)(a1 + 96) = v34;
          *(_DWORD *)(v6 + 8) = 16191;
LABEL_42:
          if ((a2 - 5) < 2) {
            goto LABEL_398;
          }
LABEL_43:
          if (*(_DWORD *)(v6 + 12))
          {
            v9 >>= v13 & 7;
            uint64_t v13 = v13 & 0xFFFFFFF8;
            int v35 = 16206;
            goto LABEL_381;
          }
          if (v13 < 3)
          {
            if (!v14)
            {
              int v15 = v232;
LABEL_437:
              unsigned int v16 = v15;
              goto LABEL_399;
            }
            unint64_t v14 = (v14 - 1);
            unsigned int v36 = *v5++;
            v9 += (unint64_t)v36 << v13;
            LODWORD(v13) = v13 + 8;
          }
          *(_DWORD *)(v6 + 12) = v9 & 1;
          int v37 = 16193;
          switch((v9 >> 1) & 3)
          {
            case 1u:
              *(void *)(v6 + 104) = &unk_1DD324ADE;
              *(void *)(v6 + 112) = &unk_1DD3252DE;
              *(void *)(v6 + 120) = 0x500000009;
              *(_DWORD *)(v6 + 8) = 16199;
              if (a2 != 6) {
                goto LABEL_158;
              }
              v9 >>= 3;
              LODWORD(v13) = v13 - 3;
              goto LABEL_398;
            case 2u:
              int v37 = 16196;
              break;
            case 3u:
              *(void *)(a1 + 48) = "invalid block type";
              int v37 = 16209;
              break;
            default:
              break;
          }
          *(_DWORD *)(v6 + 8) = v37;
LABEL_158:
          v9 >>= 3;
          uint64_t v13 = (v13 - 3);
          goto LABEL_382;
        }
        *(void *)(a1 + 24) = v4;
        *(_DWORD *)(a1 + 32) = v234;
        *(void *)a1 = v5;
        *(_DWORD *)(a1 + 8) = v14;
        *(void *)(v6 + 80) = v9;
        uint64_t result = 2;
        *(_DWORD *)(v6 + 88) = v13;
        return result;
      case 16190:
        goto LABEL_40;
      case 16191:
        goto LABEL_42;
      case 16192:
        goto LABEL_43;
      case 16193:
        v9 >>= v13 & 7;
        uint64_t v38 = v13 & 0xFFFFFFF8;
        if (v38 <= 0x1F)
        {
          uint64_t v39 = 0;
          while (v14)
          {
            unint64_t v14 = (v14 - 1);
            unsigned int v40 = *v5++;
            v9 += (unint64_t)v40 << ((v13 & 0xF8u) + v39);
            v39 += 8;
            if ((unint64_t)(v38 + v39 - 8) >= 0x18)
            {
              uint64_t v13 = (v38 + v39);
              goto LABEL_101;
            }
          }
          LODWORD(v13) = (v13 & 0xFFFFFFF8) + v39;
          goto LABEL_398;
        }
        uint64_t v13 = v13 & 0xFFFFFFF8;
LABEL_101:
        if (((v9 >> 16) ^ 0xFFFF) != (unsigned __int16)v9)
        {
          int v25 = "invalid stored block lengths";
          goto LABEL_380;
        }
        uint64_t v13 = 0;
        *(_DWORD *)(v6 + 92) = (unsigned __int16)v9;
        *(_DWORD *)(v6 + 8) = 16194;
        unint64_t v9 = 0;
        if (a2 == 6) {
          goto LABEL_398;
        }
LABEL_103:
        *(_DWORD *)(v6 + 8) = 16195;
LABEL_104:
        unsigned int v68 = *(_DWORD *)(v6 + 92);
        if (v68)
        {
          if (v68 >= v14) {
            unsigned int v68 = v14;
          }
          if (v68 >= v234) {
            size_t v69 = v234;
          }
          else {
            size_t v69 = v68;
          }
          if (v69)
          {
            uint64_t v70 = v8;
            uint64_t v71 = v13;
            memcpy(v4, v5, v69);
            uint64_t v13 = v71;
            uint64_t v8 = v70;
            uint64_t v11 = (unsigned __int16 *)(v6 + 152);
            double v10 = (_WORD **)(v6 + 144);
            unint64_t v14 = (v14 - v69);
            v5 += v69;
            v234 -= v69;
            v4 += v69;
            *(_DWORD *)(v6 + 92) -= v69;
            goto LABEL_382;
          }
          goto LABEL_398;
        }
        goto LABEL_368;
      case 16194:
        goto LABEL_103;
      case 16195:
        goto LABEL_104;
      case 16196:
        if (v13 > 0xD) {
          goto LABEL_61;
        }
        uint64_t v18 = 0;
        do
        {
          if (!v14) {
            goto LABEL_388;
          }
          unint64_t v14 = (v14 - 1);
          unsigned int v41 = *v5++;
          v9 += (unint64_t)v41 << (v13 + v18);
          v18 += 8;
        }
        while ((unint64_t)v13 + v18 - 8 < 6);
        LODWORD(v13) = v13 + v18;
LABEL_61:
        unint64_t v42 = v9 & 0x1F;
        unint64_t v43 = (v9 >> 5) & 0x1F;
        *(_DWORD *)(v6 + 132) = (v9 & 0x1F) + 257;
        *(_DWORD *)(v6 + 136) = v43 + 1;
        unint64_t v44 = ((v9 >> 10) & 0xF) + 4;
        *(_DWORD *)(v6 + 128) = v44;
        v9 >>= 14;
        uint64_t v13 = (v13 - 14);
        if (v42 > 0x1D || v43 >= 0x1E)
        {
          int v25 = "too many length or distance symbols";
          goto LABEL_380;
        }
        uint64_t v45 = v12;
        unsigned int v230 = v8;
        unsigned int v46 = v234;
        unint64_t v47 = 0;
        *(_DWORD *)(v6 + 140) = 0;
        *(_DWORD *)(v6 + 8) = 16197;
LABEL_65:
        LODWORD(v48) = v13;
        do
        {
          if (v48 <= 2)
          {
            if (!v14)
            {
              LODWORD(v13) = v48;
              unsigned int v16 = v232;
              unsigned int v234 = v46;
              goto LABEL_396;
            }
            unint64_t v14 = (v14 - 1);
            unsigned int v49 = *v5++;
            v9 += (unint64_t)v49 << v48;
            LODWORD(v48) = v48 + 8;
          }
          uint64_t v50 = word_1DD324AB8[v47];
          *(_DWORD *)(v6 + 140) = v47 + 1;
          *(_WORD *)(v6 + 2 * v50 + 152) = v9 & 7;
          v9 >>= 3;
          uint64_t v48 = (v48 - 3);
          ++v47;
        }
        while (v44 != v47);
        uint64_t v13 = v48;
        unint64_t v47 = v44;
LABEL_71:
        uint64_t v51 = v13;
        if (v47 <= 0x12)
        {
          do
            *(_WORD *)(v6 + 2 * word_1DD324AB8[v47++] + 152) = 0;
          while (v47 != 19);
          *(_DWORD *)(v6 + 140) = 19;
        }
        *(void *)(v6 + 144) = v228;
        *(void *)(v6 + 104) = v228;
        *(_DWORD *)(v6 + 120) = 7;
        unsigned int v52 = sub_1DD2F2248(0, v11, 0x13u, v10, v227, v45);
        unsigned int v234 = v46;
        if (v52)
        {
          unsigned int v232 = v52;
          *(void *)(a1 + 48) = "invalid code lengths set";
          *(_DWORD *)(v6 + 8) = 16209;
          uint64_t v8 = v230;
          uint64_t v11 = (unsigned __int16 *)(v6 + 152);
          double v10 = (_WORD **)(v6 + 144);
          unsigned int v12 = v45;
LABEL_277:
          uint64_t v13 = v51;
          goto LABEL_382;
        }
        unsigned int v53 = 0;
        unsigned int v232 = 0;
        *(_DWORD *)(v6 + 140) = 0;
        *(_DWORD *)(v6 + 8) = 16198;
        uint64_t v8 = v230;
        uint64_t v11 = (unsigned __int16 *)(v6 + 152);
        double v10 = (_WORD **)(v6 + 144);
        unsigned int v12 = v45;
        uint64_t v13 = v51;
LABEL_113:
        unsigned int v72 = *(_DWORD *)(v6 + 132);
        unsigned int v73 = *(_DWORD *)(v6 + 136) + v72;
        if (v53 >= v73)
        {
LABEL_147:
          if (!*(_WORD *)(v6 + 664))
          {
            *(void *)(a1 + 48) = "invalid code -- missing end-of-block";
            *(_DWORD *)(v6 + 8) = 16209;
            goto LABEL_382;
          }
          uint64_t v222 = v13;
          unsigned int v231 = v8;
          *(void *)(v6 + 144) = v228;
          *(void *)(v6 + 104) = v228;
          *(_DWORD *)(v6 + 120) = 9;
          size_t v94 = v10;
          unint64_t v95 = v12;
          BOOL v96 = v11;
          unsigned int v97 = sub_1DD2F2248(1, v11, v72, v10, v227, v95);
          if (v97)
          {
            unsigned int v232 = v97;
            *(void *)(a1 + 48) = "invalid literal/lengths set";
            *(_DWORD *)(v6 + 8) = 16209;
            double v10 = v94;
            uint64_t v11 = v96;
            unsigned int v12 = v95;
LABEL_167:
            uint64_t v8 = v231;
            uint64_t v13 = v222;
            goto LABEL_382;
          }
          *(void *)(v6 + 112) = *(void *)(v6 + 144);
          *(_DWORD *)(v6 + 124) = 6;
          unsigned int v100 = sub_1DD2F2248(2, &v96[*(unsigned int *)(v6 + 132)], *(_DWORD *)(v6 + 136), v94, (unsigned int *)(v6 + 124), v95);
          unsigned int v12 = v95;
          if (v100)
          {
            unsigned int v232 = v100;
            *(void *)(a1 + 48) = "invalid distances set";
            *(_DWORD *)(v6 + 8) = 16209;
            uint64_t v11 = (unsigned __int16 *)(v6 + 152);
            double v10 = (_WORD **)(v6 + 144);
            goto LABEL_167;
          }
          unsigned int v232 = 0;
          *(_DWORD *)(v6 + 8) = 16199;
          uint64_t v11 = (unsigned __int16 *)(v6 + 152);
          double v10 = (_WORD **)(v6 + 144);
          uint64_t v8 = v231;
          LODWORD(v13) = v222;
          if (a2 == 6) {
            goto LABEL_398;
          }
LABEL_300:
          *(_DWORD *)(v6 + 8) = 16200;
LABEL_301:
          if (v14 >= 6 && v234 >= 0x102)
          {
            *(void *)(a1 + 24) = v4;
            *(_DWORD *)(a1 + 32) = v234;
            *(void *)a1 = v5;
            *(_DWORD *)(a1 + 8) = v14;
            *(void *)(v6 + 80) = v9;
            *(_DWORD *)(v6 + 88) = v13;
            uint64_t v20 = v8;
            sub_1DD2F2678((unsigned __int8 **)a1, v8);
            uint64_t v4 = *(unsigned char **)(a1 + 24);
            unsigned int v234 = *(_DWORD *)(a1 + 32);
            uint64_t v5 = *(unsigned __int8 **)a1;
            unint64_t v14 = *(unsigned int *)(a1 + 8);
            unint64_t v9 = *(void *)(v6 + 80);
            uint64_t v13 = *(unsigned int *)(v6 + 88);
            if (*(_DWORD *)(v6 + 8) == 16191) {
              *(_DWORD *)(v6 + 7148) = -1;
            }
LABEL_305:
            uint64_t v11 = (unsigned __int16 *)(v6 + 152);
            double v10 = (_WORD **)(v6 + 144);
            uint64_t v8 = v20;
            goto LABEL_382;
          }
          *(_DWORD *)(v6 + 7148) = 0;
          uint64_t v150 = *(void *)(v6 + 104);
          int v151 = -1 << *(_DWORD *)(v6 + 120);
          uint64_t v152 = (unsigned __int8 *)(v150 + 4 * (v9 & ~v151));
          LODWORD(v153) = v152[1];
          if (v13 < v153)
          {
            uint64_t v154 = 0;
            int v155 = ~v151;
            LODWORD(v156) = v14;
            int v157 = v5;
            do
            {
              if (!v156) {
                goto LABEL_387;
              }
              unint64_t v156 = (v156 - 1);
              unsigned int v158 = *v157++;
              v9 += (unint64_t)v158 << (v13 + v154);
              uint64_t v152 = (unsigned __int8 *)(v150 + 4 * (v155 & v9));
              unint64_t v153 = v152[1];
              v154 += 8;
            }
            while ((unint64_t)v13 + v154 < v153);
            LODWORD(v13) = v13 + v154;
            uint64_t v5 = v157;
            unint64_t v14 = v156;
          }
          int v159 = v153;
          int v160 = *((unsigned __int16 *)v152 + 1);
          int v161 = *v152;
          if ((v161 - 1) > 0xE)
          {
            int v159 = 0;
          }
          else
          {
            int v162 = -1 << (v153 + v161);
            uint64_t v163 = (unsigned __int8 *)(v150 + 4 * (((v9 & ~v162) >> v153) + v160));
            int v164 = v163[1];
            if ((int)v153 + v164 > v13)
            {
              uint64_t v165 = 0;
              int v166 = ~v162;
              LODWORD(v167) = v14;
              uint64_t v168 = v5;
              do
              {
                if (!v167) {
                  goto LABEL_387;
                }
                unsigned int v169 = *v168++;
                unint64_t v167 = (v167 - 1);
                v9 += (unint64_t)v169 << (v13 + v165);
                uint64_t v163 = (unsigned __int8 *)(v150 + 4 * (((v9 & v166) >> v153) + v160));
                int v164 = v163[1];
                v165 += 8;
              }
              while ((unint64_t)v13 + v165 < (v153 + v164));
              LODWORD(v13) = v13 + v165;
              uint64_t v5 = v168;
              unint64_t v14 = v167;
            }
            int v160 = *((unsigned __int16 *)v163 + 1);
            int v161 = *v163;
            v9 >>= v153;
            LODWORD(v13) = v13 - v153;
            LODWORD(v153) = v164;
          }
          v9 >>= v153;
          uint64_t v13 = (v13 - v153);
          *(_DWORD *)(v6 + 7148) = v159 + v153;
          *(_DWORD *)(v6 + 92) = v160;
          if (!v161)
          {
            int v35 = 16205;
            goto LABEL_381;
          }
          if ((v161 & 0x20) != 0)
          {
            *(_DWORD *)(v6 + 7148) = -1;
LABEL_368:
            int v35 = 16191;
            goto LABEL_381;
          }
          if ((v161 & 0x40) != 0)
          {
            int v25 = "invalid literal/length code";
            goto LABEL_380;
          }
          unsigned int v54 = v161 & 0xF;
          *(_DWORD *)(v6 + 100) = v54;
          *(_DWORD *)(v6 + 8) = 16201;
          if ((v161 & 0xF) != 0)
          {
LABEL_78:
            if (v13 < v54)
            {
              unsigned int v55 = v13;
              LODWORD(v56) = v14;
              uint64_t v57 = v5;
              while (v56)
              {
                unint64_t v56 = (v56 - 1);
                unsigned int v58 = *v57++;
                v9 += (unint64_t)v58 << v55;
                v55 += 8;
                if (v55 >= v54) {
                  goto LABEL_154;
                }
              }
              goto LABEL_387;
            }
            uint64_t v57 = v5;
            unint64_t v56 = v14;
            unsigned int v55 = v13;
LABEL_154:
            int v98 = *(_DWORD *)(v6 + 92) + (v9 & ~(-1 << v54));
            *(_DWORD *)(v6 + 92) = v98;
            v9 >>= v54;
            LODWORD(v13) = v55 - v54;
            *(_DWORD *)(v6 + 7148) += v54;
            uint64_t v5 = v57;
            unint64_t v14 = v56;
          }
          else
          {
LABEL_323:
            int v98 = *(_DWORD *)(v6 + 92);
          }
          *(_DWORD *)(v6 + 7152) = v98;
          *(_DWORD *)(v6 + 8) = 16202;
LABEL_325:
          uint64_t v170 = *(void *)(v6 + 112);
          int v171 = -1 << *(_DWORD *)(v6 + 124);
          unint64_t v172 = (unsigned __int8 *)(v170 + 4 * (v9 & ~v171));
          LODWORD(v173) = v172[1];
          if (v13 < v173)
          {
            uint64_t v174 = 0;
            int v175 = ~v171;
            LODWORD(v176) = v14;
            uint64_t v177 = v5;
            while (v176)
            {
              unint64_t v176 = (v176 - 1);
              unsigned int v178 = *v177++;
              v9 += (unint64_t)v178 << (v13 + v174);
              unint64_t v172 = (unsigned __int8 *)(v170 + 4 * (v175 & v9));
              unint64_t v173 = v172[1];
              v174 += 8;
              if ((unint64_t)v13 + v174 >= v173)
              {
                LODWORD(v13) = v13 + v174;
                uint64_t v5 = v177;
                unint64_t v14 = v176;
                goto LABEL_330;
              }
            }
            goto LABEL_387;
          }
LABEL_330:
          int v179 = *((unsigned __int16 *)v172 + 1);
          LODWORD(v180) = *v172;
          if (v180 >= 0x10)
          {
            int v188 = *(_DWORD *)(v6 + 7148);
          }
          else
          {
            int v181 = -1 << (v173 + v180);
            uint64_t v180 = v170 + 4 * (((v9 & ~v181) >> v173) + v179);
            int v182 = *(unsigned __int8 *)(v180 + 1);
            if ((int)v173 + v182 > v13)
            {
              uint64_t v183 = 0;
              int v184 = ~v181;
              LODWORD(v185) = v14;
              uint64_t v186 = v5;
              while (v185)
              {
                unsigned int v187 = *v186++;
                unint64_t v185 = (v185 - 1);
                v9 += (unint64_t)v187 << (v13 + v183);
                uint64_t v180 = v170 + 4 * (((v9 & v184) >> v173) + v179);
                int v182 = *(unsigned __int8 *)(v180 + 1);
                v183 += 8;
                if ((unint64_t)v13 + v183 >= (v173 + v182))
                {
                  LODWORD(v13) = v13 + v183;
                  uint64_t v5 = v186;
                  unint64_t v14 = v185;
                  goto LABEL_336;
                }
              }
              goto LABEL_387;
            }
LABEL_336:
            int v179 = *(unsigned __int16 *)(v180 + 2);
            LOBYTE(v180) = *(unsigned char *)v180;
            v9 >>= v173;
            LODWORD(v13) = v13 - v173;
            int v188 = *(_DWORD *)(v6 + 7148) + v173;
            LODWORD(v173) = v182;
          }
          v9 >>= v173;
          uint64_t v13 = (v13 - v173);
          *(_DWORD *)(v6 + 7148) = v188 + v173;
          if ((v180 & 0x40) != 0)
          {
            int v25 = "invalid distance code";
            goto LABEL_380;
          }
          unsigned int v59 = v180 & 0xF;
          *(_DWORD *)(v6 + 96) = v179;
          *(_DWORD *)(v6 + 100) = v59;
          *(_DWORD *)(v6 + 8) = 16203;
          if ((v180 & 0xF) != 0)
          {
LABEL_340:
            if (v13 < v59)
            {
              unsigned int v189 = v13;
              LODWORD(v190) = v14;
              long long v191 = v5;
              while (v190)
              {
                unint64_t v190 = (v190 - 1);
                unsigned int v192 = *v191++;
                v9 += (unint64_t)v192 << v189;
                v189 += 8;
                if (v189 >= v59) {
                  goto LABEL_347;
                }
              }
LABEL_387:
              LODWORD(v13) = v13 + 8 * v14;
              unsigned int v16 = v232;
              v5 += v14;
              LODWORD(v14) = 0;
              goto LABEL_399;
            }
            long long v191 = v5;
            unint64_t v190 = v14;
            unsigned int v189 = v13;
LABEL_347:
            *(_DWORD *)(v6 + 96) += v9 & ~(-1 << v59);
            v9 >>= v59;
            uint64_t v13 = v189 - v59;
            *(_DWORD *)(v6 + 7148) += v59;
            uint64_t v5 = v191;
            unint64_t v14 = v190;
          }
LABEL_348:
          *(_DWORD *)(v6 + 8) = 16204;
LABEL_349:
          if (v234)
          {
            uint64_t v193 = *(unsigned int *)(v6 + 96);
            if (v193 <= v8 - v234)
            {
              uint64_t v195 = &v4[-v193];
              unsigned int v196 = *(_DWORD *)(v6 + 92);
              unsigned int v197 = v196;
            }
            else
            {
              unsigned int v194 = v193 - (v8 - v234);
              if (v194 > *(_DWORD *)(v6 + 64) && *(_DWORD *)(v6 + 7144))
              {
                int v25 = "invalid distance too far back";
                goto LABEL_380;
              }
              unsigned int v198 = *(_DWORD *)(v6 + 68);
              unsigned int v197 = v194 - v198;
              if (v194 <= v198)
              {
                unsigned int v199 = v198 - v194;
                unsigned int v197 = v194;
              }
              else
              {
                unsigned int v199 = *(_DWORD *)(v6 + 60) - v197;
              }
              uint64_t v195 = (char *)(*(void *)(v6 + 72) + v199);
              unsigned int v196 = *(_DWORD *)(v6 + 92);
              if (v197 >= v196) {
                unsigned int v197 = *(_DWORD *)(v6 + 92);
              }
            }
            if (v197 >= v234) {
              unsigned int v197 = v234;
            }
            *(_DWORD *)(v6 + 92) = v196 - v197;
            unsigned int v200 = v197;
            do
            {
              char v201 = *v195++;
              *v4++ = v201;
              --v200;
            }
            while (v200);
            v234 -= v197;
            if (!*(_DWORD *)(v6 + 92))
            {
LABEL_365:
              int v35 = 16200;
              goto LABEL_381;
            }
            goto LABEL_382;
          }
LABEL_397:
          unsigned int v234 = 0;
          goto LABEL_398;
        }
        uint64_t v74 = *(void *)(v6 + 104);
        int v75 = ~(-1 << *(_DWORD *)(v6 + 120));
        while (1)
        {
          uint64_t v76 = v75 & v9;
          LODWORD(v77) = *(unsigned __int8 *)(v74 + 4 * v76 + 1);
          if (v13 < v77)
          {
            uint64_t v78 = 0;
            LODWORD(v79) = v14;
            uint64_t v80 = v5;
            do
            {
              if (!v79) {
                goto LABEL_387;
              }
              unint64_t v79 = (v79 - 1);
              unsigned int v81 = *v80++;
              v9 += (unint64_t)v81 << (v13 + v78);
              uint64_t v76 = v75 & v9;
              unint64_t v77 = *(unsigned __int8 *)(v74 + 4 * v76 + 1);
              v78 += 8;
            }
            while ((unint64_t)v13 + v78 < v77);
            LODWORD(v13) = v13 + v78;
            uint64_t v5 = v80;
            unint64_t v14 = v79;
          }
          unsigned int v82 = *(unsigned __int16 *)(v74 + 4 * v76 + 2);
          if (v82 > 0xF) {
            break;
          }
          v9 >>= v77;
          uint64_t v13 = (v13 - v77);
          uint64_t v83 = v6 + 2 * v53++;
          *(_DWORD *)(v6 + 140) = v53;
          *(_WORD *)(v83 + 152) = v82;
LABEL_146:
          if (v53 >= v73) {
            goto LABEL_147;
          }
        }
        if (v82 != 16)
        {
          if (v82 == 17)
          {
            unint64_t v84 = (v77 + 3);
            if (v13 < v84)
            {
              uint64_t v85 = 0;
              do
              {
                if (!v14) {
                  goto LABEL_394;
                }
                unsigned int v86 = *v5++;
                unint64_t v14 = (v14 - 1);
                v9 += (unint64_t)v86 << (v13 + v85);
                v85 += 8;
              }
              while ((unint64_t)v13 + v85 < v84);
              LODWORD(v13) = v13 + v85;
            }
            __int16 v87 = 0;
            int v88 = ((v9 >> v77) & 7) + 3;
            unint64_t v9 = v9 >> v77 >> 3;
            uint64_t v13 = (v13 - v77 - 3);
          }
          else
          {
            unint64_t v91 = (v77 + 7);
            if (v13 < v91)
            {
              uint64_t v85 = 0;
              do
              {
                if (!v14) {
                  goto LABEL_394;
                }
                unsigned int v92 = *v5++;
                unint64_t v14 = (v14 - 1);
                v9 += (unint64_t)v92 << (v13 + v85);
                v85 += 8;
              }
              while ((unint64_t)v13 + v85 < v91);
              LODWORD(v13) = v13 + v85;
            }
            __int16 v87 = 0;
            int v88 = ((v9 >> v77) & 0x7F) + 11;
            unint64_t v9 = v9 >> v77 >> 7;
            uint64_t v13 = (v13 - v77 - 7);
          }
LABEL_143:
          if (v88 + v53 > v73) {
            goto LABEL_383;
          }
          do
          {
            uint64_t v93 = v6 + 2 * v53++;
            *(_WORD *)(v93 + 152) = v87;
            --v88;
          }
          while (v88);
          *(_DWORD *)(v6 + 140) = v53;
          goto LABEL_146;
        }
        unint64_t v89 = (v77 + 2);
        if (v13 >= v89) {
          goto LABEL_135;
        }
        uint64_t v85 = 0;
        while (v14)
        {
          unsigned int v90 = *v5++;
          unint64_t v14 = (v14 - 1);
          v9 += (unint64_t)v90 << (v13 + v85);
          v85 += 8;
          if ((unint64_t)v13 + v85 >= v89)
          {
            LODWORD(v13) = v13 + v85;
LABEL_135:
            v9 >>= v77;
            uint64_t v13 = (v13 - v77);
            if (v53)
            {
              __int16 v87 = *(_WORD *)(v6 + 2 * (v53 - 1) + 152);
              int v88 = (v9 & 3) + 3;
              v9 >>= 2;
              uint64_t v13 = (v13 - 2);
              goto LABEL_143;
            }
LABEL_383:
            int v25 = "invalid bit length repeat";
            goto LABEL_380;
          }
        }
LABEL_394:
        LODWORD(v13) = v13 + v85;
LABEL_398:
        unsigned int v16 = v232;
LABEL_399:
        *(void *)(a1 + 24) = v4;
        *(_DWORD *)(a1 + 32) = v234;
        *(void *)a1 = v5;
        *(_DWORD *)(a1 + 8) = v14;
        *(void *)(v6 + 80) = v9;
        *(_DWORD *)(v6 + 88) = v13;
        if (!*(_DWORD *)(v6 + 60))
        {
          if (v8 == v234 || (unsigned int v210 = *(_DWORD *)(v6 + 8), v210 > 0x3F50) || a2 == 4 && v210 > 0x3F4D)
          {
LABEL_409:
            uint64_t v211 = v8 - v234;
            *(void *)(a1 + 16) += v229 - v14;
            *(void *)(a1 + 40) += v211;
            *(void *)(v6 + 40) += v211;
            if ((*(unsigned char *)(v6 + 16) & 4) != 0 && v8 != v234)
            {
              int v212 = v8;
              uint64_t v213 = *(void *)(v6 + 32);
              int64_t v214 = (unsigned __int8 *)(*(void *)(a1 + 24) - v211);
              if (*(_DWORD *)(v6 + 24)) {
                uint64_t v215 = sub_1DD2EDAA4(v213, v214, v211);
              }
              else {
                uint64_t v215 = sub_1DD2ED768(v213, v214, v211);
              }
              *(void *)(v6 + 32) = v215;
              *(void *)(a1 + 96) = v215;
              LODWORD(v8) = v212;
            }
            int v216 = *(_DWORD *)(v6 + 8);
            if (v216 == 16194 || v216 == 16199) {
              int v218 = 256;
            }
            else {
              int v218 = 0;
            }
            *(_DWORD *)(a1 + 88) = *(_DWORD *)(v6 + 88)
                                 + ((*(_DWORD *)(v6 + 12) != 0) << 6)
                                 + ((v216 == 16191) << 7)
                                 + v218;
            if ((v8 == v234 && v229 == v14 || a2 == 4) && v16 == 0) {
              return 4294967291;
            }
            else {
              return v16;
            }
          }
        }
        uint64_t v208 = (uint64_t)v4;
        int v209 = v8;
        if (!sub_1DD2F20C4(a1, v208, v8 - v234))
        {
          LODWORD(v14) = *(_DWORD *)(a1 + 8);
          unsigned int v234 = *(_DWORD *)(a1 + 32);
          LODWORD(v8) = v209;
          goto LABEL_409;
        }
        *(_DWORD *)(v6 + 8) = 16210;
        return 4294967292;
      case 16197:
        uint64_t v45 = v12;
        unsigned int v230 = v8;
        unsigned int v46 = v234;
        unint64_t v44 = *(unsigned int *)(v6 + 128);
        unint64_t v47 = *(unsigned int *)(v6 + 140);
        if (v47 < v44) {
          goto LABEL_65;
        }
        goto LABEL_71;
      case 16198:
        unsigned int v53 = *(_DWORD *)(v6 + 140);
        goto LABEL_113;
      case 16199:
        goto LABEL_300;
      case 16200:
        goto LABEL_301;
      case 16201:
        unsigned int v54 = *(_DWORD *)(v6 + 100);
        if (v54) {
          goto LABEL_78;
        }
        goto LABEL_323;
      case 16202:
        goto LABEL_325;
      case 16203:
        unsigned int v59 = *(_DWORD *)(v6 + 100);
        if (!v59) {
          goto LABEL_348;
        }
        goto LABEL_340;
      case 16204:
        goto LABEL_349;
      case 16205:
        if (!v234) {
          goto LABEL_397;
        }
        *v4++ = *(_DWORD *)(v6 + 92);
        --v234;
        goto LABEL_365;
      case 16206:
        int v60 = *(_DWORD *)(v6 + 16);
        if (!v60) {
          goto LABEL_287;
        }
        if (v13 > 0x1F) {
          goto LABEL_93;
        }
        uint64_t v18 = 0;
        while (v14)
        {
          unint64_t v14 = (v14 - 1);
          unsigned int v61 = *v5++;
          v9 += (unint64_t)v61 << (v13 + v18);
          v18 += 8;
          if ((unint64_t)v13 + v18 - 8 >= 0x18)
          {
            uint64_t v13 = (v13 + v18);
LABEL_93:
            uint64_t v62 = v8 - v234;
            *(void *)(a1 + 40) += v62;
            *(void *)(v6 + 40) += v62;
            int v63 = v60 & 4;
            if ((v60 & 4) != 0 && v8 != v234)
            {
              uint64_t v64 = v13;
              uint64_t v65 = *(void *)(v6 + 32);
              int v66 = &v4[-v62];
              if (*(_DWORD *)(v6 + 24)) {
                uint64_t v67 = sub_1DD2EDAA4(v65, v66, v62);
              }
              else {
                uint64_t v67 = sub_1DD2ED768(v65, v66, v62);
              }
              *(void *)(v6 + 32) = v67;
              *(void *)(a1 + 96) = v67;
              int v60 = *(_DWORD *)(v6 + 16);
              int v63 = v60 & 4;
              uint64_t v11 = (unsigned __int16 *)(v6 + 152);
              double v10 = (_WORD **)(v6 + 144);
              uint64_t v13 = v64;
            }
            if (v63)
            {
              unint64_t v147 = bswap32(v9);
              uint64_t v148 = *(_DWORD *)(v6 + 24) ? v9 : v147;
              if (v148 != *(void *)(v6 + 32))
              {
                *(void *)(a1 + 48) = "incorrect data check";
                *(_DWORD *)(v6 + 8) = 16209;
                uint64_t v8 = v234;
                goto LABEL_382;
              }
            }
            unint64_t v9 = 0;
            uint64_t v13 = 0;
            uint64_t v8 = v234;
LABEL_287:
            *(_DWORD *)(v6 + 8) = 16207;
LABEL_288:
            if (v60 && *(_DWORD *)(v6 + 24))
            {
              if (v13 <= 0x1F)
              {
                uint64_t v18 = 0;
                do
                {
                  if (!v14) {
                    goto LABEL_388;
                  }
                  unint64_t v14 = (v14 - 1);
                  unsigned int v149 = *v5++;
                  v9 += (unint64_t)v149 << (v13 + v18);
                  v18 += 8;
                }
                while ((unint64_t)v13 + v18 - 8 < 0x18);
                uint64_t v13 = (v13 + v18);
              }
              if ((v60 & 4) != 0 && v9 != *(_DWORD *)(v6 + 40))
              {
                int v25 = "incorrect length check";
                goto LABEL_380;
              }
              unint64_t v9 = 0;
              LODWORD(v13) = 0;
            }
            *(_DWORD *)(v6 + 8) = 16208;
            unsigned int v16 = 1;
            goto LABEL_399;
          }
        }
LABEL_388:
        LODWORD(v13) = v13 + v18;
        goto LABEL_398;
      case 16207:
        int v60 = *(_DWORD *)(v6 + 16);
        goto LABEL_288;
      case 16208:
        goto LABEL_399;
      case 16209:
        goto LABEL_437;
      case 16210:
        return 4294967292;
      default:
        return 4294967294;
    }
  }
}

uint64_t sub_1DD2F20C4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  int v7 = *(char **)(v6 + 72);
  if (v7
    || (uint64_t v8 = 1,
        int v7 = (char *)(*(uint64_t (**)(void, void, uint64_t))(a1 + 64))(*(void *)(a1 + 80), (1 << *(_DWORD *)(v6 + 56)), 1), (*(void *)(v6 + 72) = v7) != 0))
  {
    unsigned int v9 = *(_DWORD *)(v6 + 60);
    if (!v9)
    {
      unsigned int v9 = 1 << *(_DWORD *)(v6 + 56);
      *(void *)(v6 + 64) = 0;
      *(_DWORD *)(v6 + 60) = v9;
    }
    if (v9 <= a3)
    {
      memcpy(v7, (const void *)(a2 - v9), v9);
      uint64_t v8 = 0;
      int v14 = *(_DWORD *)(v6 + 60);
      *(_DWORD *)(v6 + 68) = 0;
      goto LABEL_16;
    }
    uint64_t v10 = *(unsigned int *)(v6 + 68);
    unsigned int v11 = v9 - v10;
    if (v9 - v10 >= a3) {
      size_t v12 = a3;
    }
    else {
      size_t v12 = v11;
    }
    memcpy(&v7[v10], (const void *)(a2 - a3), v12);
    if (v11 < a3)
    {
      size_t v13 = a3 - v12;
      memcpy(*(void **)(v6 + 72), (const void *)(a2 - v13), v13);
      uint64_t v8 = 0;
      int v14 = *(_DWORD *)(v6 + 60);
      *(_DWORD *)(v6 + 68) = v13;
LABEL_16:
      *(_DWORD *)(v6 + 64) = v14;
      return v8;
    }
    uint64_t v8 = 0;
    int v15 = *(_DWORD *)(v6 + 68) + v12;
    unsigned int v17 = *(_DWORD *)(v6 + 60);
    unsigned int v16 = *(_DWORD *)(v6 + 64);
    if (v15 == v17) {
      int v15 = 0;
    }
    *(_DWORD *)(v6 + 68) = v15;
    if (v16 < v17)
    {
      uint64_t v8 = 0;
      int v14 = v16 + v12;
      goto LABEL_16;
    }
  }
  return v8;
}

uint64_t sub_1DD2F21EC(uint64_t a1)
{
  if (sub_1DD2F049C((void *)a1)) {
    return 4294967294;
  }
  uint64_t v3 = *(void *)(a1 + 56);
  if (*(void *)(v3 + 72))
  {
    (*(void (**)(void, void))(a1 + 72))(*(void *)(a1 + 80), *(void *)(v3 + 72));
    uint64_t v3 = *(void *)(a1 + 56);
  }
  (*(void (**)(void, uint64_t))(a1 + 72))(*(void *)(a1 + 80), v3);
  uint64_t result = 0;
  *(void *)(a1 + 56) = 0;
  return result;
}

uint64_t sub_1DD2F2248(int a1, unsigned __int16 *a2, unsigned int a3, _WORD **a4, unsigned int *a5, _WORD *a6)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  memset(v58, 0, sizeof(v58));
  if (a3)
  {
    uint64_t v6 = a3;
    int v7 = a2;
    do
    {
      unsigned int v8 = *v7++;
      ++*((_WORD *)v58 + v8);
      --v6;
    }
    while (v6);
  }
  unsigned int v9 = *a5;
  unsigned int v10 = 15;
  while (!*((_WORD *)v58 + v10))
  {
    if (!--v10)
    {
      unsigned int v11 = *a4;
      *a4 += 2;
      *unsigned int v11 = 320;
      v11[1] = 0;
      size_t v12 = *a4;
      *a4 += 2;
      *size_t v12 = 320;
      v12[1] = 0;
      unsigned int v13 = 1;
LABEL_8:
      uint64_t v14 = 0;
      *a5 = v13;
      return v14;
    }
  }
  if (v9 >= v10) {
    unsigned int v9 = v10;
  }
  if (v10 < 2)
  {
    LODWORD(v15) = 1;
  }
  else
  {
    uint64_t v15 = 1;
    while (!*((_WORD *)v58 + v15))
    {
      if (v10 == ++v15)
      {
        LODWORD(v15) = v10;
        break;
      }
    }
  }
  if (v9 <= v15) {
    unsigned int v13 = v15;
  }
  else {
    unsigned int v13 = v9;
  }
  int v16 = 1;
  for (uint64_t i = 2; i != 32; i += 2)
  {
    int v16 = 2 * v16 - *(unsigned __int16 *)((char *)v58 + i);
    if (v16 < 0) {
      return 0xFFFFFFFFLL;
    }
  }
  if (!v16 || (uint64_t v14 = 0xFFFFFFFFLL, a1) && v10 == 1)
  {
    uint64_t v18 = 0;
    int v19 = 0;
    __int16 v56 = 0;
    do
    {
      v19 += *(unsigned __int16 *)((char *)v58 + v18 + 2);
      *(_WORD *)&v57[v18] = v19;
      v18 += 2;
    }
    while (v18 != 28);
    if (a3)
    {
      for (uint64_t j = 0; j != a3; ++j)
      {
        uint64_t v21 = a2[j];
        if (a2[j])
        {
          uint64_t v22 = v55[v21];
          v55[v21] = v22 + 1;
          a6[v22] = j;
        }
      }
    }
    if (a1)
    {
      if (a1 == 1)
      {
        uint64_t v14 = 1;
        if (v13 > 9) {
          return v14;
        }
        BOOL v54 = 0;
        unsigned int v23 = 257;
        unsigned int v24 = &unk_1DD32539C;
        char v25 = 1;
        unsigned int v26 = &unk_1DD32535E;
      }
      else
      {
        unsigned int v23 = 0;
        unsigned int v24 = &unk_1DD32541A;
        unsigned int v26 = &unk_1DD3253DA;
        BOOL v54 = a1 == 2;
        char v25 = 0;
        if (a1 == 2 && v13 > 9) {
          return 1;
        }
      }
    }
    else
    {
      BOOL v54 = 0;
      char v25 = 0;
      unsigned int v23 = 20;
      unsigned int v26 = a6;
      unsigned int v24 = a6;
    }
    int v28 = 0;
    unsigned int v29 = 0;
    unsigned int v30 = 0;
    unsigned int v31 = 1 << v13;
    int v32 = (1 << v13) - 1;
    int v33 = *a4;
    char v34 = v13;
    int v35 = -1;
    while (2)
    {
      unsigned int v36 = 1 << v34;
      do
      {
        unsigned int v37 = (unsigned __int16)a6[v28];
        if (v37 + 1 >= v23)
        {
          if (v37 >= v23)
          {
            char v38 = v24[2 * (v37 - v23)];
            LOWORD(v37) = v26[v37 - v23];
          }
          else
          {
            LOWORD(v37) = 0;
            char v38 = 96;
          }
        }
        else
        {
          char v38 = 0;
        }
        char v39 = v15 - v29;
        int v40 = -1 << (v15 - v29);
        unsigned int v41 = v36;
        do
        {
          unint64_t v42 = &v33[2 * (v30 >> v29) + 2 * v40 + 2 * v41];
          *(unsigned char *)unint64_t v42 = v38;
          *((unsigned char *)v42 + 1) = v39;
          v42[1] = v37;
          v41 += v40;
        }
        while (v41);
        unsigned int v43 = 1 << (v15 - 1);
        do
        {
          unsigned int v44 = v43;
          v43 >>= 1;
        }
        while ((v44 & v30) != 0);
        if (v44) {
          unsigned int v30 = ((v44 - 1) & v30) + v44;
        }
        else {
          unsigned int v30 = 0;
        }
        ++v28;
        __int16 v45 = *((_WORD *)v58 + v15) - 1;
        *((_WORD *)v58 + v15) = v45;
        if (!v45)
        {
          if (v15 == v10)
          {
            if (v30)
            {
              unsigned int v53 = &v33[2 * v30];
              *(unsigned char *)unsigned int v53 = 64;
              *((unsigned char *)v53 + 1) = v39;
              v53[1] = 0;
            }
            *a4 += 2 * v31;
            goto LABEL_8;
          }
          LODWORD(v15) = a2[(unsigned __int16)a6[v28]];
        }
      }
      while (v15 <= v13 || (v30 & v32) == v35);
      if (!v29) {
        unsigned int v29 = v13;
      }
      char v34 = v15 - v29;
      int v46 = 1 << (v15 - v29);
      if (v15 < v10)
      {
        char v34 = v10 - v29;
        unsigned int v47 = v15;
        while (1)
        {
          int v48 = v46 - *((unsigned __int16 *)v58 + v47);
          if (v48 < 1) {
            break;
          }
          int v46 = 2 * v48;
          if (++v47 >= v10) {
            goto LABEL_70;
          }
        }
        char v34 = v47 - v29;
LABEL_70:
        int v46 = 1 << v34;
      }
      v31 += v46;
      if (v31 > 0x354) {
        char v49 = v25;
      }
      else {
        char v49 = 0;
      }
      BOOL v50 = v31 > 0x250 && v54;
      uint64_t v14 = 1;
      if ((v49 & 1) == 0 && !v50)
      {
        v33 += 2 * v36;
        uint64_t v51 = *a4;
        uint64_t v52 = (uint64_t)&(*a4)[2 * (v30 & v32)];
        *(unsigned char *)uint64_t v52 = v34;
        *(unsigned char *)(v52 + 1) = v13;
        *(_WORD *)(v52 + 2) = (v33 - v51) >> 2;
        int v35 = v30 & v32;
        continue;
      }
      break;
    }
  }
  return v14;
}

unsigned __int8 **sub_1DD2F2678(unsigned __int8 **result, int a2)
{
  unsigned int v2 = result[7];
  uint64_t v3 = *result;
  unint64_t v4 = (unint64_t)&(*result)[*((_DWORD *)result + 2) - 5];
  uint64_t v5 = result[3];
  int v6 = *((_DWORD *)result + 8);
  int v7 = v5 - (a2 - v6);
  unsigned int v8 = &v5[v6 - 257];
  int v9 = *((_DWORD *)v2 + 15);
  unsigned int v10 = *((_DWORD *)v2 + 16);
  unsigned int v11 = *((_DWORD *)v2 + 17);
  size_t v12 = (unsigned __int8 *)*((void *)v2 + 9);
  unint64_t v13 = *((void *)v2 + 10);
  unsigned int v14 = *((_DWORD *)v2 + 22);
  uint64_t v15 = *((void *)v2 + 13);
  uint64_t v16 = *((void *)v2 + 14);
  uint64_t v17 = ~(-1 << *((_DWORD *)v2 + 30));
  uint64_t v18 = ~(-1 << *((_DWORD *)v2 + 31));
  int v19 = "invalid distance too far back";
LABEL_2:
  if (v14 <= 0xE)
  {
    unint64_t v20 = ((unint64_t)*v3 << v14) + v13;
    uint64_t v21 = v3[1];
    v3 += 2;
    unint64_t v13 = v20 + (v21 << (v14 + 8));
    v14 += 16;
  }
  for (uint64_t i = v15 + 4 * (v13 & v17); ; uint64_t i = v15
                                       + 4 * *(unsigned __int16 *)(i + 2)
                                       + 4 * (v13 & ~(-1 << v24)))
  {
    int v23 = *(unsigned __int8 *)(i + 1);
    v13 >>= v23;
    v14 -= v23;
    char v24 = *(unsigned char *)i;
    if (!*(unsigned char *)i)
    {
      *v5++ = *(unsigned char *)(i + 2);
LABEL_10:
      if ((unint64_t)v3 >= v4 || v5 >= v8) {
        goto LABEL_67;
      }
      goto LABEL_2;
    }
    if ((*(unsigned char *)i & 0x10) != 0)
    {
      unsigned int v25 = *(unsigned __int16 *)(i + 2);
      unsigned int v26 = v24 & 0xF;
      if (v26)
      {
        if (v14 < v26)
        {
          unsigned int v27 = *v3++;
          v13 += (unint64_t)v27 << v14;
          v14 += 8;
        }
        v25 += v13 & ~(-1 << v26);
        v13 >>= v26;
        v14 -= v26;
      }
      if (v14 <= 0xE)
      {
        unint64_t v28 = ((unint64_t)*v3 << v14) + v13;
        uint64_t v29 = v3[1];
        v3 += 2;
        unint64_t v13 = v28 + (v29 << (v14 + 8));
        v14 += 16;
      }
      for (uint64_t j = v16 + 4 * (v13 & v18);
            ;
            uint64_t j = v16 + 4 * *(unsigned __int16 *)(j + 2) + 4 * (v13 & ~(-1 << v32)))
      {
        int v31 = *(unsigned __int8 *)(j + 1);
        v13 >>= v31;
        v14 -= v31;
        char v32 = *(unsigned char *)j;
        if ((*(unsigned char *)j & 0x10) != 0) {
          break;
        }
        if ((*(unsigned char *)j & 0x40) != 0)
        {
          int v19 = "invalid distance code";
          goto LABEL_65;
        }
      }
      unsigned int v33 = v32 & 0xF;
      if (v14 >= v33)
      {
        unsigned int v34 = v14;
      }
      else
      {
        v13 += (unint64_t)*v3 << v14;
        unsigned int v34 = v14 + 8;
        if (v14 + 8 >= v33)
        {
          ++v3;
        }
        else
        {
          uint64_t v35 = v3[1];
          v3 += 2;
          v13 += v35 << v34;
          unsigned int v34 = v14 + 16;
        }
      }
      unsigned int v36 = (v13 & ~(-1 << v33)) + *(unsigned __int16 *)(j + 2);
      v13 >>= v33;
      unsigned int v14 = v34 - v33;
      unsigned int v37 = v36 - (v5 - v7);
      if (v36 <= (int)v5 - v7)
      {
        uint64_t v42 = 0;
        uint64_t v43 = -(uint64_t)v36;
        uint64_t v44 = (uint64_t)&v5[-v36 + 1];
        unsigned int v45 = v25;
        do
        {
          int v46 = &v5[v42];
          *int v46 = *(unsigned char *)(v44 + v42 - 1);
          v46[1] = *(unsigned char *)(v44 + v42);
          v46[2] = *(unsigned char *)(v44 + v42 + 1);
          v45 -= 3;
          v42 += 3;
        }
        while (v45 > 2);
        unsigned int v47 = &v5[v42];
        if (v25 != v42)
        {
          *unsigned int v47 = v47[v43];
          if (v25 - 1 == v42)
          {
            uint64_t v5 = v47 + 1;
            goto LABEL_10;
          }
          uint64_t v51 = &v5[v42];
          unsigned __int8 v52 = v51[v43 + 1];
          uint64_t v5 = v51 + 2;
LABEL_58:
          v47[1] = v52;
          goto LABEL_10;
        }
        goto LABEL_60;
      }
      if (v37 > v10 && *((_DWORD *)v2 + 1786))
      {
LABEL_65:
        result[6] = (unsigned __int8 *)v19;
        int v54 = 16209;
        goto LABEL_66;
      }
      if (v11)
      {
        if (v37 > v11)
        {
          uint64_t v38 = v11 + v9 - v37;
          unsigned int v39 = v25 - (v37 - v11);
          if (v25 <= v37 - v11)
          {
            unsigned int v41 = &v12[v38];
          }
          else
          {
            do
            {
              *v5++ = v12[v38];
              --v37;
              ++v38;
            }
            while (v11 != v37);
            if (v39 <= v11)
            {
              unsigned int v25 = v39;
              unsigned int v41 = v12;
            }
            else
            {
              uint64_t v40 = 0;
              do
              {
                v5[v40] = v12[v40];
                ++v40;
              }
              while (v11 != v40);
              unsigned int v25 = v39 - v11;
              v5 += v40;
              unsigned int v41 = &v5[-v36];
            }
          }
LABEL_53:
          if (v25 < 3)
          {
            unsigned int v47 = v5;
            unsigned int v53 = v41;
            if (v25) {
              goto LABEL_56;
            }
          }
          else
          {
            do
            {
              *uint64_t v5 = *v41;
              v5[1] = v41[1];
              unsigned int v53 = v41 + 3;
              unsigned int v47 = v5 + 3;
              v5[2] = v41[2];
              v25 -= 3;
              v41 += 3;
              v5 += 3;
            }
            while (v25 > 2);
            if (v25)
            {
LABEL_56:
              *unsigned int v47 = *v53;
              uint64_t v5 = v47 + 1;
              if (v25 == 1) {
                goto LABEL_10;
              }
              unsigned __int8 v52 = v53[1];
              uint64_t v5 = v47 + 2;
              goto LABEL_58;
            }
          }
LABEL_60:
          uint64_t v5 = v47;
          goto LABEL_10;
        }
        unsigned int v41 = &v12[v11 - v37];
        unsigned int v48 = v25 - v37;
        if (v25 <= v37) {
          goto LABEL_53;
        }
        do
        {
          unsigned __int8 v50 = *v41++;
          *v5++ = v50;
          --v37;
        }
        while (v37);
      }
      else
      {
        unsigned int v41 = &v12[v9 - v37];
        unsigned int v48 = v25 - v37;
        if (v25 <= v37) {
          goto LABEL_53;
        }
        do
        {
          unsigned __int8 v49 = *v41++;
          *v5++ = v49;
          --v37;
        }
        while (v37);
      }
      unsigned int v41 = &v5[-v36];
      unsigned int v25 = v48;
      goto LABEL_53;
    }
    if ((*(unsigned char *)i & 0x40) != 0) {
      break;
    }
  }
  if ((*(unsigned char *)i & 0x20) == 0)
  {
    int v19 = "invalid literal/length code";
    goto LABEL_65;
  }
  int v54 = 16191;
LABEL_66:
  *((_DWORD *)v2 + 2) = v54;
LABEL_67:
  unsigned int v55 = &v3[-(v14 >> 3)];
  *uint64_t result = v55;
  result[3] = v5;
  *((_DWORD *)result + 2) = v4 - v55 + 5;
  *((_DWORD *)result + 8) = v8 - v5 + 257;
  *((void *)v2 + 10) = v13 & ~(-1 << (v14 & 7));
  *((_DWORD *)v2 + 22) = v14 & 7;
  return result;
}

double sub_1DD2F2AFC(uint64_t a1)
{
  *(void *)(a1 + 2904) = a1 + 212;
  *(void *)(a1 + 2920) = &off_1E6CBAA80;
  *(void *)(a1 + 2928) = a1 + 2504;
  *(void *)(a1 + 2944) = &off_1E6CBAAA0;
  *(void *)(a1 + 2952) = a1 + 2748;
  *(void *)(a1 + 2968) = &unk_1E6CBAAC0;
  *(_WORD *)(a1 + 5936) = 0;
  *(_DWORD *)(a1 + 5940) = 0;
  return sub_1DD2F2B44(a1);
}

double sub_1DD2F2B44(uint64_t a1)
{
  for (uint64_t i = 212; i != 1356; i += 4)
    *(_WORD *)(a1 + i) = 0;
  for (uint64_t j = 0; j != 120; j += 4)
    *(_WORD *)(a1 + 2504 + j) = 0;
  for (uint64_t k = 0; k != 76; k += 4)
    *(_WORD *)(a1 + 2748 + k) = 0;
  *(_WORD *)(a1 + 1236) = 1;
  *(_DWORD *)(a1 + 5900) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 5912) = 0u;
  *(_DWORD *)(a1 + 5928) = 0;
  return result;
}

uint64_t sub_1DD2F2BA8(uint64_t a1, const void *a2, size_t a3, int a4)
{
  int v7 = *(_DWORD *)(a1 + 5940);
  if (v7 < 14)
  {
    *(_WORD *)(a1 + 5936) |= (_WORD)a4 << v7;
    int v14 = v7 + 3;
  }
  else
  {
    __int16 v8 = *(_WORD *)(a1 + 5936) | (a4 << v7);
    *(_WORD *)(a1 + 5936) = v8;
    uint64_t v9 = *(void *)(a1 + 16);
    uint64_t v10 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v10 + 1;
    *(unsigned char *)(v9 + v10) = v8;
    LOBYTE(v8) = *(unsigned char *)(a1 + 5937);
    uint64_t v11 = *(void *)(a1 + 16);
    uint64_t v12 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v12 + 1;
    *(unsigned char *)(v11 + v12) = v8;
    int v13 = *(_DWORD *)(a1 + 5940);
    *(_WORD *)(a1 + 5936) = (unsigned __int16)a4 >> (16 - v13);
    int v14 = v13 - 13;
  }
  *(_DWORD *)(a1 + 5940) = v14;
  uint64_t result = sub_1DD2F2CEC(a1);
  uint64_t v16 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v17 + 1;
  *(unsigned char *)(v16 + v17) = a3;
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v19 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v19 + 1;
  *(unsigned char *)(v18 + v19) = BYTE1(a3);
  uint64_t v20 = *(void *)(a1 + 16);
  uint64_t v21 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v21 + 1;
  *(unsigned char *)(v20 + v21) = ~(_BYTE)a3;
  uint64_t v22 = *(void *)(a1 + 16);
  uint64_t v23 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v23 + 1;
  *(unsigned char *)(v22 + v23) = (unsigned __int16)~(_WORD)a3 >> 8;
  if (a3) {
    uint64_t result = (uint64_t)memcpy((void *)(*(void *)(a1 + 16) + *(void *)(a1 + 40)), a2, a3);
  }
  *(void *)(a1 + 40) += a3;
  return result;
}

uint64_t sub_1DD2F2CEC(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 5940);
  if (v1 >= 9)
  {
    char v2 = *(unsigned char *)(result + 5936);
    uint64_t v3 = *(void *)(result + 16);
    uint64_t v4 = *(void *)(result + 40);
    *(void *)(result + 40) = v4 + 1;
    *(unsigned char *)(v3 + v4) = v2;
    char v5 = *(unsigned char *)(result + 5937);
LABEL_5:
    uint64_t v6 = *(void *)(result + 16);
    uint64_t v7 = *(void *)(result + 40);
    *(void *)(result + 40) = v7 + 1;
    *(unsigned char *)(v6 + v7) = v5;
    goto LABEL_6;
  }
  if (v1 >= 1)
  {
    char v5 = *(unsigned char *)(result + 5936);
    goto LABEL_5;
  }
LABEL_6:
  *(_WORD *)(result + 5936) = 0;
  *(_DWORD *)(result + 5940) = 0;
  return result;
}

uint64_t sub_1DD2F2D54(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 5940);
  if (v1 == 16)
  {
    int v2 = 0;
    char v3 = *(unsigned char *)(result + 5936);
    uint64_t v4 = *(void *)(result + 40);
    *(void *)(result + 40) = v4 + 1;
    *(unsigned char *)(*(void *)(result + 16) + v4) = v3;
    char v5 = *(unsigned char *)(result + 5937);
    uint64_t v6 = *(void *)(result + 16);
    uint64_t v7 = *(void *)(result + 40);
    *(void *)(result + 40) = v7 + 1;
    *(unsigned char *)(v6 + v7) = v5;
    *(_WORD *)(result + 5936) = 0;
  }
  else
  {
    if (v1 < 8) {
      return result;
    }
    char v8 = *(unsigned char *)(result + 5936);
    uint64_t v9 = *(void *)(result + 16);
    uint64_t v10 = *(void *)(result + 40);
    *(void *)(result + 40) = v10 + 1;
    *(unsigned char *)(v9 + v10) = v8;
    *(_WORD *)(result + 5936) = *(unsigned __int8 *)(result + 5937);
    int v2 = *(_DWORD *)(result + 5940) - 8;
  }
  *(_DWORD *)(result + 5940) = v2;
  return result;
}

uint64_t sub_1DD2F2DE4(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 5940);
  int v2 = *(unsigned __int16 *)(result + 5936);
  unsigned int v3 = v2 | (2 << v1);
  *(_WORD *)(result + 5936) = v2 | (2 << v1);
  if (v1 < 14)
  {
    int v9 = v1 + 3;
  }
  else
  {
    uint64_t v4 = *(void *)(result + 16);
    uint64_t v5 = *(void *)(result + 40);
    *(void *)(result + 40) = v5 + 1;
    *(unsigned char *)(v4 + v5) = v3;
    char v6 = *(unsigned char *)(result + 5937);
    uint64_t v7 = *(void *)(result + 16);
    uint64_t v8 = *(void *)(result + 40);
    *(void *)(result + 40) = v8 + 1;
    *(unsigned char *)(v7 + v8) = v6;
    LODWORD(v7) = *(_DWORD *)(result + 5940);
    unsigned int v3 = 2u >> (16 - v7);
    *(_WORD *)(result + 5936) = v3;
    int v9 = v7 - 13;
  }
  *(_DWORD *)(result + 5940) = v9;
  if (v9 < 10)
  {
    int v15 = v9 + 7;
  }
  else
  {
    uint64_t v10 = *(void *)(result + 16);
    uint64_t v11 = *(void *)(result + 40);
    *(void *)(result + 40) = v11 + 1;
    *(unsigned char *)(v10 + v11) = v3;
    char v12 = *(unsigned char *)(result + 5937);
    uint64_t v13 = *(void *)(result + 16);
    uint64_t v14 = *(void *)(result + 40);
    *(void *)(result + 40) = v14 + 1;
    *(unsigned char *)(v13 + v14) = v12;
    *(_WORD *)(result + 5936) = 0;
    int v15 = *(_DWORD *)(result + 5940) - 9;
  }
  *(_DWORD *)(result + 5940) = v15;
  return sub_1DD2F2D54(result);
}

void sub_1DD2F2EB4(uint64_t a1, const void *a2, size_t a3, int a4)
{
  if (*(int *)(a1 + 196) < 1)
  {
    unsigned int v11 = 0;
    unint64_t v12 = a3 + 5;
    goto LABEL_24;
  }
  if (*(_DWORD *)(*(void *)a1 + 88) == 2)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 4093624447;
    do
    {
      if ((v9 & 1) != 0 && *(_WORD *)(a1 + 212 + v8))
      {
        int v10 = 0;
        goto LABEL_13;
      }
      v9 >>= 1;
      v8 += 4;
    }
    while (v8 != 128);
    if (!*(_WORD *)(a1 + 248) && !*(_WORD *)(a1 + 252) && !*(_WORD *)(a1 + 264))
    {
      uint64_t v73 = 0;
      uint64_t v74 = a1 + 340;
      while (1)
      {
        int v10 = *(unsigned __int16 *)(v74 + v73);
        if (*(_WORD *)(v74 + v73)) {
          break;
        }
        v73 += 4;
        if (v73 == 896) {
          goto LABEL_13;
        }
      }
    }
    int v10 = 1;
LABEL_13:
    *(_DWORD *)(*(void *)a1 + 88) = v10;
  }
  sub_1DD2F3414(a1, a1 + 2904);
  sub_1DD2F3414(a1, a1 + 2928);
  sub_1DD2F3D88((_WORD *)a1, a1 + 212, *(_DWORD *)(a1 + 2912));
  sub_1DD2F3D88((_WORD *)a1, a1 + 2504, *(_DWORD *)(a1 + 2936));
  sub_1DD2F3414(a1, a1 + 2952);
  unsigned int v11 = 0x12u;
  while (!*(_WORD *)(a1 + 4 * byte_1DD325D98[v11] + 2750))
  {
    if (v11-- <= 3)
    {
      unsigned int v11 = 2;
      break;
    }
  }
  uint64_t v14 = *(void *)(a1 + 5912) + 3 * (int)v11;
  *(void *)(a1 + 5912) = v14 + 17;
  unint64_t v15 = v14 + 27;
  unint64_t v12 = (unint64_t)(*(void *)(a1 + 5920) + 10) >> 3;
  if (v12 <= v15 >> 3)
  {
LABEL_24:
    unint64_t v17 = v12;
    if (!a2) {
      goto LABEL_27;
    }
    goto LABEL_25;
  }
  unint64_t v16 = v15 >> 3;
  if (*(_DWORD *)(a1 + 200) == 4) {
    unint64_t v17 = (unint64_t)(*(void *)(a1 + 5920) + 10) >> 3;
  }
  else {
    unint64_t v17 = v16;
  }
  if (!a2) {
    goto LABEL_27;
  }
LABEL_25:
  if (a3 + 4 <= v17)
  {
    sub_1DD2F2BA8(a1, a2, a3, a4);
    goto LABEL_52;
  }
LABEL_27:
  int v18 = *(_DWORD *)(a1 + 5940);
  if (v12 == v17)
  {
    int v19 = a4 + 2;
    if (v18 < 14)
    {
      *(_WORD *)(a1 + 5936) |= v19 << v18;
      int v26 = v18 + 3;
    }
    else
    {
      __int16 v20 = *(_WORD *)(a1 + 5936) | (v19 << v18);
      *(_WORD *)(a1 + 5936) = v20;
      uint64_t v21 = *(void *)(a1 + 16);
      uint64_t v22 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v22 + 1;
      *(unsigned char *)(v21 + v22) = v20;
      LOBYTE(v20) = *(unsigned char *)(a1 + 5937);
      uint64_t v23 = *(void *)(a1 + 16);
      uint64_t v24 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v24 + 1;
      *(unsigned char *)(v23 + v24) = v20;
      int v25 = *(_DWORD *)(a1 + 5940);
      *(_WORD *)(a1 + 5936) = (unsigned __int16)(a4 + 2) >> (16 - v25);
      int v26 = v25 - 13;
    }
    *(_DWORD *)(a1 + 5940) = v26;
    unsigned int v36 = &unk_1DD325768;
    unsigned int v37 = &unk_1DD325BE8;
    uint64_t v38 = a1;
  }
  else
  {
    int v27 = a4 + 4;
    if (v18 < 14)
    {
      int v34 = *(unsigned __int16 *)(a1 + 5936) | (v27 << v18);
      int v35 = v18 + 3;
    }
    else
    {
      __int16 v28 = *(_WORD *)(a1 + 5936) | (v27 << v18);
      *(_WORD *)(a1 + 5936) = v28;
      uint64_t v29 = *(void *)(a1 + 16);
      uint64_t v30 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v30 + 1;
      *(unsigned char *)(v29 + v30) = v28;
      LOBYTE(v28) = *(unsigned char *)(a1 + 5937);
      uint64_t v31 = *(void *)(a1 + 16);
      uint64_t v32 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v32 + 1;
      *(unsigned char *)(v31 + v32) = v28;
      int v33 = *(_DWORD *)(a1 + 5940);
      int v34 = (unsigned __int16)(a4 + 4) >> (16 - v33);
      int v35 = v33 - 13;
    }
    *(_DWORD *)(a1 + 5940) = v35;
    int v39 = *(_DWORD *)(a1 + 2912);
    int v40 = *(_DWORD *)(a1 + 2936);
    int v41 = v39 + 65280;
    if (v35 < 12)
    {
      int v47 = v34 | (v41 << v35);
      int v48 = v35 + 5;
    }
    else
    {
      __int16 v42 = v34 | (v41 << v35);
      *(_WORD *)(a1 + 5936) = v42;
      uint64_t v43 = *(void *)(a1 + 16);
      uint64_t v44 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v44 + 1;
      *(unsigned char *)(v43 + v44) = v42;
      LOBYTE(v42) = *(unsigned char *)(a1 + 5937);
      uint64_t v45 = *(void *)(a1 + 16);
      uint64_t v46 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v46 + 1;
      *(unsigned char *)(v45 + v46) = v42;
      LODWORD(v45) = *(_DWORD *)(a1 + 5940);
      int v47 = (unsigned __int16)(v39 - 256) >> (16 - v45);
      int v48 = v45 - 11;
    }
    *(_DWORD *)(a1 + 5940) = v48;
    if (v48 < 12)
    {
      int v54 = v47 | (v40 << v48);
      int v55 = v48 + 5;
    }
    else
    {
      __int16 v49 = v47 | (v40 << v48);
      *(_WORD *)(a1 + 5936) = v49;
      uint64_t v50 = *(void *)(a1 + 16);
      uint64_t v51 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v51 + 1;
      *(unsigned char *)(v50 + v51) = v49;
      LOBYTE(v49) = *(unsigned char *)(a1 + 5937);
      uint64_t v52 = *(void *)(a1 + 16);
      uint64_t v53 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v53 + 1;
      *(unsigned char *)(v52 + v53) = v49;
      LODWORD(v52) = *(_DWORD *)(a1 + 5940);
      int v54 = (unsigned __int16)v40 >> (16 - v52);
      int v55 = v52 - 11;
    }
    *(_DWORD *)(a1 + 5940) = v55;
    unsigned int v56 = v11 + 65533;
    if (v55 < 13)
    {
      int v62 = v54 | (v56 << v55);
      *(_WORD *)(a1 + 5936) = v62;
      int v63 = v55 + 4;
    }
    else
    {
      __int16 v57 = v54 | (v56 << v55);
      *(_WORD *)(a1 + 5936) = v57;
      uint64_t v58 = *(void *)(a1 + 16);
      uint64_t v59 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v59 + 1;
      *(unsigned char *)(v58 + v59) = v57;
      LOBYTE(v57) = *(unsigned char *)(a1 + 5937);
      uint64_t v60 = *(void *)(a1 + 16);
      uint64_t v61 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v61 + 1;
      *(unsigned char *)(v60 + v61) = v57;
      LODWORD(v60) = *(_DWORD *)(a1 + 5940);
      int v62 = (unsigned __int16)(v11 - 3) >> (16 - v60);
      *(_WORD *)(a1 + 5936) = v62;
      int v63 = v60 - 12;
    }
    *(_DWORD *)(a1 + 5940) = v63;
    if ((v11 & 0x80000000) == 0)
    {
      uint64_t v64 = v11 + 1;
      uint64_t v65 = byte_1DD325D98;
      do
      {
        unsigned int v66 = *v65++;
        unsigned int v67 = *(unsigned __int16 *)(a1 + 4 * v66 + 2750);
        v62 |= v67 << v63;
        *(_WORD *)(a1 + 5936) = v62;
        if (v63 < 14)
        {
          v63 += 3;
        }
        else
        {
          uint64_t v68 = *(void *)(a1 + 16);
          uint64_t v69 = *(void *)(a1 + 40);
          *(void *)(a1 + 40) = v69 + 1;
          *(unsigned char *)(v68 + v69) = v62;
          char v70 = *(unsigned char *)(a1 + 5937);
          uint64_t v71 = *(void *)(a1 + 16);
          uint64_t v72 = *(void *)(a1 + 40);
          *(void *)(a1 + 40) = v72 + 1;
          *(unsigned char *)(v71 + v72) = v70;
          LODWORD(v71) = *(_DWORD *)(a1 + 5940);
          int v62 = v67 >> (16 - v71);
          *(_WORD *)(a1 + 5936) = v62;
          int v63 = v71 - 13;
        }
        *(_DWORD *)(a1 + 5940) = v63;
        --v64;
      }
      while (v64);
    }
    sub_1DD2F3E7C(a1, a1 + 212, v39);
    sub_1DD2F3E7C(a1, a1 + 2504, v40);
    uint64_t v38 = a1;
    unsigned int v36 = (void *)(a1 + 212);
    unsigned int v37 = (void *)(a1 + 2504);
  }
  sub_1DD2F38BC(v38, (uint64_t)v36, (uint64_t)v37);
LABEL_52:
  sub_1DD2F2B44(a1);
  if (a4)
  {
    sub_1DD2F2CEC(a1);
  }
}

uint64_t sub_1DD2F3414(uint64_t a1, uint64_t a2)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(uint64_t **)(a2 + 16);
  uint64_t v6 = *v5;
  uint64_t v7 = *((unsigned int *)v5 + 5);
  uint64_t v8 = (int *)(a1 + 5300);
  *(void *)(a1 + 5300) = 0x23D00000000;
  if ((int)v7 < 1)
  {
    int v13 = 0;
    int v11 = -1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = (_WORD *)(v4 + 2);
    int v11 = -1;
    do
    {
      if (*(v10 - 1))
      {
        uint64_t v12 = *(int *)(a1 + 5300) + 1;
        *(_DWORD *)(a1 + 5300) = v12;
        *(_DWORD *)(a1 + 4 * v12 + 3008) = v9;
        *(unsigned char *)(a1 + 5308 + v9) = 0;
        int v11 = v9;
      }
      else
      {
        *int v10 = 0;
      }
      v10 += 2;
      ++v9;
    }
    while (v7 != v9);
    int v13 = *v8;
    if (*v8 > 1) {
      goto LABEL_20;
    }
  }
  int v14 = v11;
  do
  {
    if (v14 >= 2) {
      int v11 = v14;
    }
    else {
      int v11 = v14 + 1;
    }
    if (v14 < 2) {
      int v15 = v14 + 1;
    }
    else {
      int v15 = 0;
    }
    uint64_t v16 = v13 + 1;
    *(_DWORD *)(a1 + 5300) = v16;
    *(_DWORD *)(a1 + 4 * v16 + 3008) = v15;
    *(_WORD *)(v4 + 4 * v15) = 1;
    *(unsigned char *)(a1 + v15 + 5308) = 0;
    --*(void *)(a1 + 5912);
    if (v6) {
      *(void *)(a1 + 5920) -= *(unsigned __int16 *)(v6 + 4 * v15 + 2);
    }
    int v13 = *v8;
    int v14 = v11;
  }
  while (*v8 < 2);
LABEL_20:
  *(_DWORD *)(a2 + 8) = v11;
  int v17 = v13 >> 1;
  do
  {
    sub_1DD2F3C80(a1, v4, v17);
    BOOL v18 = v17-- != 0;
  }
  while (v17 != 0 && v18);
  int v19 = *(_DWORD *)(a1 + 5300);
  uint64_t v20 = (int)v7;
  uint64_t v21 = 4 * (int)v7;
  do
  {
    uint64_t v22 = *(int *)(a1 + 3012);
    *(_DWORD *)(a1 + 5300) = v19 - 1;
    uint64_t v23 = a1 + 3008;
    *(_DWORD *)(a1 + 3012) = *(_DWORD *)(a1 + 3008 + 4 * v19);
    sub_1DD2F3C80(a1, v4, 1);
    uint64_t v24 = *(int *)(a1 + 3012);
    uint64_t v25 = *(int *)(a1 + 5304) - 1;
    *(_DWORD *)(a1 + 5304) = v25;
    *(_DWORD *)(v23 + 4 * v25) = v22;
    uint64_t v26 = *(int *)(a1 + 5304) - 1;
    *(_DWORD *)(a1 + 5304) = v26;
    *(_DWORD *)(v23 + 4 * v26) = v24;
    int v27 = (_WORD *)(v4 + 4 * v22);
    __int16 v28 = (_WORD *)(v4 + 4 * v24);
    *(_WORD *)(v4 + v21) = *v28 + *v27;
    unsigned int v29 = *(unsigned __int8 *)(a1 + 5308 + v24);
    if (*(unsigned __int8 *)(a1 + 5308 + v22) > v29) {
      LOBYTE(v29) = *(unsigned char *)(a1 + 5308 + v22);
    }
    *(unsigned char *)(a1 + 5308 + v20) = v29 + 1;
    v28[1] = v20;
    v27[1] = v20;
    *(_DWORD *)(a1 + 3012) = v20;
    uint64_t result = sub_1DD2F3C80(a1, v4, 1);
    int v19 = *(_DWORD *)(a1 + 5300);
    v21 += 4;
    ++v20;
  }
  while (v19 > 1);
  int v31 = *(_DWORD *)(a1 + 3012);
  uint64_t v32 = *(int *)(a1 + 5304) - 1;
  *(_DWORD *)(a1 + 5304) = v32;
  *(_DWORD *)(v23 + 4 * v32) = v31;
  uint64_t v33 = *(void *)a2;
  int v34 = *(_DWORD *)(a2 + 8);
  int v35 = *(uint64_t **)(a2 + 16);
  uint64_t v36 = *v35;
  uint64_t v37 = v35[1];
  int v38 = *((_DWORD *)v35 + 4);
  uint64_t v39 = *((int *)v35 + 6);
  *(_OWORD *)(a1 + 2992) = 0u;
  *(_OWORD *)(a1 + 2976) = 0u;
  *(_WORD *)(v33 + 4 * *(int *)(v23 + 4 * *(int *)(a1 + 5304)) + 2) = 0;
  uint64_t v40 = *(int *)(a1 + 5304);
  if ((int)v40 <= 571)
  {
    int v41 = 0;
    do
    {
      uint64_t v42 = *(int *)(a1 + 3012 + 4 * v40);
      uint64_t result = v33 + 4 * v42;
      int v43 = *(unsigned __int16 *)(v33 + 4 * *(unsigned __int16 *)(result + 2) + 2);
      BOOL v44 = (int)v39 <= v43;
      if ((int)v39 > v43) {
        int v45 = v43 + 1;
      }
      else {
        int v45 = v39;
      }
      if (v44) {
        ++v41;
      }
      *(_WORD *)(result + 2) = v45;
      if ((int)v42 <= v34)
      {
        ++*(_WORD *)(a1 + 2 * v45 + 2976);
        int v46 = (int)v42 >= v38 ? *(_DWORD *)(v37 + 4 * ((int)v42 - v38)) : 0;
        uint64_t result = *(unsigned __int16 *)result;
        *(void *)(a1 + 5912) += result * (unint64_t)(v46 + v45);
        if (v36) {
          *(void *)(a1 + 5920) += result
        }
                                  * (unint64_t)(v46 + *(unsigned __int16 *)(v36 + 4 * v42 + 2));
      }
    }
    while (v40++ != 571);
    if (v41)
    {
      do
      {
        int v48 = (_WORD *)(a1 + 2 * v39 + 2976);
        uint64_t v49 = (v39 << 32) + 0x100000000;
        do
        {
          int v51 = (unsigned __int16)*--v48;
          __int16 v50 = v51;
          v49 -= 0x100000000;
        }
        while (!v51);
        *int v48 = v50 - 1;
        *(_WORD *)(a1 + (v49 >> 31) + 2976) += 2;
        --*(_WORD *)(a1 + 2 * v39 + 2976);
        BOOL v52 = __OFSUB__(v41, 2);
        v41 -= 2;
      }
      while (!((v41 < 0) ^ v52 | (v41 == 0)));
      if (v39)
      {
        int v53 = 573;
        do
        {
          int v54 = *(unsigned __int16 *)(a1 + 2 * v39 + 2976);
          if (*(_WORD *)(a1 + 2 * v39 + 2976))
          {
            do
            {
              int v55 = (int *)(a1 + 3004 + 4 * v53);
              do
              {
                uint64_t v57 = *v55--;
                uint64_t v56 = v57;
                --v53;
              }
              while ((int)v57 > v34);
              uint64_t v58 = v33 + 4 * v56;
              unsigned int v61 = *(unsigned __int16 *)(v58 + 2);
              uint64_t v59 = (_WORD *)(v58 + 2);
              uint64_t v60 = v61;
              if (v39 != v61)
              {
                *(void *)(a1 + 5912) += (v39 - v60) * *(unsigned __int16 *)(v33 + 4 * v56);
                *uint64_t v59 = v39;
              }
              --v54;
            }
            while (v54);
          }
          --v39;
        }
        while (v39);
      }
    }
  }
  uint64_t v62 = 0;
  int v63 = 0;
  do
  {
    int v63 = 2 * (v63 + *(unsigned __int16 *)(a1 + 2976 + v62 * 2));
    v71[++v62] = v63;
  }
  while (v62 != 15);
  if ((v11 & 0x80000000) == 0)
  {
    uint64_t v64 = 0;
    do
    {
      uint64_t v65 = v4 + 4 * v64;
      int v66 = *(unsigned __int16 *)(v65 + 2);
      if (*(_WORD *)(v65 + 2))
      {
        int v67 = 0;
        unsigned int v68 = v71[*(unsigned __int16 *)(v65 + 2)];
        v71[v66] = v68 + 1;
        unsigned int v69 = v66 + 1;
        do
        {
          int v70 = v67 | v68 & 1;
          v68 >>= 1;
          int v67 = 2 * v70;
          --v69;
        }
        while (v69 > 1);
        *(_WORD *)(v4 + 4 * v64) = v70;
      }
      ++v64;
    }
    while (v64 != v11 + 1);
  }
  return result;
}

uint64_t sub_1DD2F38BC(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(result + 5900))
  {
    unsigned int v3 = 0;
    while (1)
    {
      uint64_t v4 = *(void *)(result + 5888);
      unsigned int v5 = *(unsigned __int8 *)(v4 + v3) | (*(unsigned __int8 *)(v4 + v3 + 1) << 8);
      uint64_t v6 = *(unsigned __int8 *)(v4 + v3 + 2);
      if (v5) {
        break;
      }
      uint64_t v20 = (unsigned __int16 *)(a2 + 4 * v6);
      int v21 = v20[1];
      int v22 = *(_DWORD *)(result + 5940);
      unsigned int v23 = *v20;
      int v24 = *(unsigned __int16 *)(result + 5936);
      int v25 = v24 | (v23 << v22);
      *(_WORD *)(result + 5936) = v24 | ((_WORD)v23 << v22);
      if (v22 > 16 - v21)
      {
        uint64_t v26 = *(void *)(result + 16);
        uint64_t v27 = *(void *)(result + 40);
        *(void *)(result + 40) = v27 + 1;
        *(unsigned char *)(v26 + v27) = v25;
        LOBYTE(v26) = *(unsigned char *)(result + 5937);
        uint64_t v28 = *(void *)(result + 16);
        uint64_t v29 = *(void *)(result + 40);
        *(void *)(result + 40) = v29 + 1;
        *(unsigned char *)(v28 + v29) = v26;
        LODWORD(v26) = *(_DWORD *)(result + 5940);
        *(_WORD *)(result + 5936) = v23 >> (16 - v26);
        int v30 = v21 + v26;
LABEL_24:
        int v39 = v30 - 16;
        goto LABEL_26;
      }
      int v39 = v22 + v21;
LABEL_26:
      *(_DWORD *)(result + 5940) = v39;
LABEL_27:
      v3 += 3;
      if (v3 >= *(_DWORD *)(result + 5900)) {
        goto LABEL_30;
      }
    }
    uint64_t v7 = byte_1DD325668[v6];
    uint64_t v8 = a2 + 4 * v7;
    int v9 = *(unsigned __int16 *)(v8 + 1030);
    int v10 = *(_DWORD *)(result + 5940);
    unsigned int v11 = *(unsigned __int16 *)(v8 + 1028);
    int v12 = *(unsigned __int16 *)(result + 5936);
    int v13 = v12 | (v11 << v10);
    *(_WORD *)(result + 5936) = v12 | ((_WORD)v11 << v10);
    if (v10 <= 16 - v9)
    {
      int v19 = v10 + v9;
    }
    else
    {
      uint64_t v14 = *(void *)(result + 16);
      uint64_t v15 = *(void *)(result + 40);
      *(void *)(result + 40) = v15 + 1;
      *(unsigned char *)(v14 + v15) = v13;
      char v16 = *(unsigned char *)(result + 5937);
      uint64_t v17 = *(void *)(result + 16);
      uint64_t v18 = *(void *)(result + 40);
      *(void *)(result + 40) = v18 + 1;
      *(unsigned char *)(v17 + v18) = v16;
      LODWORD(v17) = *(_DWORD *)(result + 5940);
      int v13 = v11 >> (16 - v17);
      *(_WORD *)(result + 5936) = v13;
      int v19 = v9 + v17 - 16;
    }
    *(_DWORD *)(result + 5940) = v19;
    if ((unint64_t)(v7 - 28) >= 0xFFFFFFFFFFFFFFECLL)
    {
      int v31 = dword_1DD325C60[v7];
      int v32 = v6 - dword_1DD325DAC[v7];
      if (v19 <= 16 - v31)
      {
        v13 |= v32 << v19;
        *(_WORD *)(result + 5936) = v13;
        v19 += v31;
      }
      else
      {
        unsigned int v33 = (unsigned __int16)v32;
        __int16 v34 = v13 | (v32 << v19);
        *(_WORD *)(result + 5936) = v34;
        uint64_t v35 = *(void *)(result + 16);
        uint64_t v36 = *(void *)(result + 40);
        *(void *)(result + 40) = v36 + 1;
        *(unsigned char *)(v35 + v36) = v34;
        LOBYTE(v34) = *(unsigned char *)(result + 5937);
        uint64_t v37 = *(void *)(result + 16);
        uint64_t v38 = *(void *)(result + 40);
        *(void *)(result + 40) = v38 + 1;
        *(unsigned char *)(v37 + v38) = v34;
        LODWORD(v37) = *(_DWORD *)(result + 5940);
        int v13 = v33 >> (16 - v37);
        *(_WORD *)(result + 5936) = v13;
        int v19 = v31 + v37 - 16;
      }
      *(_DWORD *)(result + 5940) = v19;
    }
    unsigned int v40 = v5 - 1;
    if (v5 >= 0x101) {
      unsigned int v41 = ((v5 - 1) >> 7) + 256;
    }
    else {
      unsigned int v41 = v5 - 1;
    }
    uint64_t v42 = byte_1DD325468[v41];
    int v43 = (unsigned __int16 *)(a3 + 4 * v42);
    int v44 = v43[1];
    unsigned int v45 = *v43;
    int v46 = v13 | (v45 << v19);
    *(_WORD *)(result + 5936) = v46;
    if (v19 <= 16 - v44)
    {
      int v39 = v19 + v44;
    }
    else
    {
      uint64_t v47 = *(void *)(result + 16);
      uint64_t v48 = *(void *)(result + 40);
      *(void *)(result + 40) = v48 + 1;
      *(unsigned char *)(v47 + v48) = v46;
      char v49 = *(unsigned char *)(result + 5937);
      uint64_t v50 = *(void *)(result + 16);
      uint64_t v51 = *(void *)(result + 40);
      *(void *)(result + 40) = v51 + 1;
      *(unsigned char *)(v50 + v51) = v49;
      LODWORD(v50) = *(_DWORD *)(result + 5940);
      int v46 = v45 >> (16 - v50);
      *(_WORD *)(result + 5936) = v46;
      int v39 = v44 + v50 - 16;
    }
    *(_DWORD *)(result + 5940) = v39;
    if (v42 < 4) {
      goto LABEL_27;
    }
    int v52 = dword_1DD325CD4[v42];
    unsigned int v53 = v40 - dword_1DD325E20[v42];
    if (v39 <= 16 - v52)
    {
      *(_WORD *)(result + 5936) = v46 | ((_WORD)v53 << v39);
      v39 += v52;
      goto LABEL_26;
    }
    unsigned int v54 = (unsigned __int16)v53;
    __int16 v55 = v46 | (v53 << v39);
    *(_WORD *)(result + 5936) = v55;
    uint64_t v56 = *(void *)(result + 16);
    uint64_t v57 = *(void *)(result + 40);
    *(void *)(result + 40) = v57 + 1;
    *(unsigned char *)(v56 + v57) = v55;
    LOBYTE(v55) = *(unsigned char *)(result + 5937);
    uint64_t v58 = *(void *)(result + 16);
    uint64_t v59 = *(void *)(result + 40);
    *(void *)(result + 40) = v59 + 1;
    *(unsigned char *)(v58 + v59) = v55;
    int v60 = *(_DWORD *)(result + 5940);
    *(_WORD *)(result + 5936) = v54 >> (16 - v60);
    int v30 = v52 + v60;
    goto LABEL_24;
  }
  int v39 = *(_DWORD *)(result + 5940);
LABEL_30:
  int v61 = *(unsigned __int16 *)(a2 + 1026);
  unsigned int v62 = *(unsigned __int16 *)(a2 + 1024);
  int v63 = *(unsigned __int16 *)(result + 5936);
  int v64 = v63 | (v62 << v39);
  *(_WORD *)(result + 5936) = v63 | ((_WORD)v62 << v39);
  if (v39 <= 16 - v61)
  {
    int v71 = v39 + v61;
  }
  else
  {
    uint64_t v65 = *(void *)(result + 16);
    uint64_t v66 = *(void *)(result + 40);
    *(void *)(result + 40) = v66 + 1;
    *(unsigned char *)(v65 + v66) = v64;
    char v67 = *(unsigned char *)(result + 5937);
    uint64_t v68 = *(void *)(result + 16);
    uint64_t v69 = *(void *)(result + 40);
    *(void *)(result + 40) = v69 + 1;
    *(unsigned char *)(v68 + v69) = v67;
    int v70 = *(_DWORD *)(result + 5940);
    *(_WORD *)(result + 5936) = v62 >> (16 - v70);
    int v71 = v61 + v70 - 16;
  }
  *(_DWORD *)(result + 5940) = v71;
  return result;
}

uint64_t sub_1DD2F3C80(uint64_t result, uint64_t a2, int a3)
{
  int v3 = *(_DWORD *)(result + 4 * a3 + 3008);
  int v4 = 2 * a3;
  int v5 = *(_DWORD *)(result + 5300);
  if (2 * a3 <= v5)
  {
    uint64_t v7 = result + 5308;
    while (1)
    {
      if (v4 >= v5)
      {
        int v6 = v4;
        uint64_t v8 = v4;
      }
      else
      {
        uint64_t v8 = v4;
        uint64_t v9 = *(int *)(result + 3008 + 4 * (v4 | 1));
        unsigned int v10 = *(unsigned __int16 *)(a2 + 4 * v9);
        uint64_t v11 = *(int *)(result + 3008 + 4 * v4);
        unsigned int v12 = *(unsigned __int16 *)(a2 + 4 * v11);
        if (v10 >= v12)
        {
          if (v10 != v12)
          {
            int v6 = v4;
            goto LABEL_11;
          }
          unsigned int v13 = *(unsigned __int8 *)(v7 + v9);
          int v6 = v4;
          if (v13 > *(unsigned __int8 *)(v7 + v11)) {
            goto LABEL_11;
          }
        }
        uint64_t v8 = v4 | 1;
        int v6 = v4 | 1;
      }
LABEL_11:
      unsigned int v14 = *(unsigned __int16 *)(a2 + 4 * v3);
      int v15 = *(_DWORD *)(result + 4 * v8 + 3008);
      unsigned int v16 = *(unsigned __int16 *)(a2 + 4 * v15);
      if (v14 < v16
        || v14 == v16
        && *(unsigned __int8 *)(result + v3 + 5308) <= *(unsigned __int8 *)(result + v15 + 5308))
      {
        break;
      }
      *(_DWORD *)(result + 4 * a3 + 3008) = v15;
      int v4 = 2 * v6;
      int v5 = *(_DWORD *)(result + 5300);
      a3 = v6;
      if (2 * v6 > v5) {
        goto LABEL_15;
      }
    }
  }
  int v6 = a3;
LABEL_15:
  *(_DWORD *)(result + 4 * v6 + 3008) = v3;
  return result;
}

_WORD *sub_1DD2F3D88(_WORD *result, uint64_t a2, int a3)
{
  int v3 = *(unsigned __int16 *)(a2 + 2);
  uint64_t v4 = (a3 + 1);
  *(_WORD *)(a2 + 4 * (int)v4 + 2) = -1;
  if ((a3 & 0x80000000) == 0)
  {
    int v5 = 0;
    if (v3) {
      int v6 = 4;
    }
    else {
      int v6 = 3;
    }
    if (v3) {
      int v7 = 7;
    }
    else {
      int v7 = 138;
    }
    uint64_t v8 = (unsigned __int16 *)(a2 + 6);
    int v9 = -1;
    do
    {
      int v11 = *v8;
      v8 += 2;
      int v10 = v11;
      int v12 = v5 + 1;
      if (v5 + 1 >= v7 || v3 != v10)
      {
        if (v12 >= v6)
        {
          if (v3)
          {
            if (v3 != v9) {
              ++result[2 * v3 + 1374];
            }
            ++result[1406];
          }
          else if (v5 > 9)
          {
            ++result[1410];
          }
          else
          {
            ++result[1408];
          }
        }
        else
        {
          result[2 * v3 + 1374] += v12;
        }
        if (v3 == v10) {
          int v14 = 6;
        }
        else {
          int v14 = 7;
        }
        if (v3 == v10) {
          int v15 = 3;
        }
        else {
          int v15 = 4;
        }
        int v12 = 0;
        if (v10) {
          int v7 = v14;
        }
        else {
          int v7 = 138;
        }
        if (v10) {
          int v6 = v15;
        }
        else {
          int v6 = 3;
        }
        int v9 = v3;
      }
      int v5 = v12;
      int v3 = v10;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_1DD2F3E7C(uint64_t result, uint64_t a2, int a3)
{
  if ((a3 & 0x80000000) == 0)
  {
    uint64_t v3 = 0;
    int v4 = 0;
    unsigned int v5 = *(unsigned __int16 *)(a2 + 2);
    if (*(_WORD *)(a2 + 2)) {
      int v6 = 7;
    }
    else {
      int v6 = 138;
    }
    if (*(_WORD *)(a2 + 2)) {
      int v7 = 4;
    }
    else {
      int v7 = 3;
    }
    int v8 = -1;
    do
    {
      ++v3;
      unsigned int v9 = *(unsigned __int16 *)(a2 + 4 * v3 + 2);
      int v10 = v4 + 1;
      if (v4 + 1 >= v6 || v5 != v9)
      {
        if (v10 >= v7)
        {
          int v23 = *(_DWORD *)(result + 5940);
          if (v5)
          {
            if (v5 != v8)
            {
              uint64_t v24 = result + 4 * v5;
              int v25 = *(unsigned __int16 *)(v24 + 2750);
              unsigned int v26 = *(unsigned __int16 *)(v24 + 2748);
              int v27 = *(unsigned __int16 *)(result + 5936);
              int v28 = v27 | (v26 << v23);
              *(_WORD *)(result + 5936) = v27 | ((_WORD)v26 << v23);
              if (v23 <= 16 - v25)
              {
                v23 += v25;
              }
              else
              {
                uint64_t v29 = *(void *)(result + 16);
                uint64_t v30 = *(void *)(result + 40);
                *(void *)(result + 40) = v30 + 1;
                *(unsigned char *)(v29 + v30) = v28;
                LOBYTE(v29) = *(unsigned char *)(result + 5937);
                uint64_t v31 = *(void *)(result + 16);
                uint64_t v32 = *(void *)(result + 40);
                *(void *)(result + 40) = v32 + 1;
                *(unsigned char *)(v31 + v32) = v29;
                LODWORD(v29) = *(_DWORD *)(result + 5940);
                *(_WORD *)(result + 5936) = v26 >> (16 - v29);
                int v23 = v25 + v29 - 16;
              }
              *(_DWORD *)(result + 5940) = v23;
              int v10 = v4;
            }
            int v52 = *(unsigned __int16 *)(result + 2814);
            unsigned int v53 = *(unsigned __int16 *)(result + 2812);
            int v54 = *(unsigned __int16 *)(result + 5936) | (v53 << v23);
            if (v23 <= 16 - v52)
            {
              int v60 = v23 + v52;
            }
            else
            {
              *(_WORD *)(result + 5936) = v54;
              uint64_t v55 = *(void *)(result + 16);
              uint64_t v56 = *(void *)(result + 40);
              *(void *)(result + 40) = v56 + 1;
              *(unsigned char *)(v55 + v56) = v54;
              char v57 = *(unsigned char *)(result + 5937);
              uint64_t v58 = *(void *)(result + 16);
              uint64_t v59 = *(void *)(result + 40);
              *(void *)(result + 40) = v59 + 1;
              *(unsigned char *)(v58 + v59) = v57;
              LODWORD(v58) = *(_DWORD *)(result + 5940);
              int v54 = v53 >> (16 - v58);
              int v60 = v52 + v58 - 16;
            }
            *(_DWORD *)(result + 5940) = v60;
            int v61 = v10 + 65533;
            if (v60 < 15)
            {
              *(_WORD *)(result + 5936) = v54 | (v61 << v60);
              int v69 = v60 + 2;
            }
            else
            {
              __int16 v62 = v54 | (v61 << v60);
              *(_WORD *)(result + 5936) = v62;
              uint64_t v63 = *(void *)(result + 16);
              uint64_t v64 = *(void *)(result + 40);
              *(void *)(result + 40) = v64 + 1;
              *(unsigned char *)(v63 + v64) = v62;
              LOBYTE(v62) = *(unsigned char *)(result + 5937);
              uint64_t v65 = *(void *)(result + 16);
              uint64_t v66 = *(void *)(result + 40);
              *(void *)(result + 40) = v66 + 1;
              *(unsigned char *)(v65 + v66) = v62;
              unsigned int v67 = (unsigned __int16)v61;
              int v68 = *(_DWORD *)(result + 5940);
              *(_WORD *)(result + 5936) = v67 >> (16 - v68);
              int v69 = v68 - 14;
            }
          }
          else
          {
            int v33 = *(unsigned __int16 *)(result + 5936);
            if (v4 > 9)
            {
              int v43 = *(unsigned __int16 *)(result + 2822);
              unsigned int v44 = *(unsigned __int16 *)(result + 2820);
              int v45 = v33 | (v44 << v23);
              if (v23 <= 16 - v43)
              {
                int v51 = v23 + v43;
              }
              else
              {
                *(_WORD *)(result + 5936) = v45;
                uint64_t v46 = *(void *)(result + 16);
                uint64_t v47 = *(void *)(result + 40);
                *(void *)(result + 40) = v47 + 1;
                *(unsigned char *)(v46 + v47) = v45;
                char v48 = *(unsigned char *)(result + 5937);
                uint64_t v49 = *(void *)(result + 16);
                uint64_t v50 = *(void *)(result + 40);
                *(void *)(result + 40) = v50 + 1;
                *(unsigned char *)(v49 + v50) = v48;
                LODWORD(v49) = *(_DWORD *)(result + 5940);
                int v45 = v44 >> (16 - v49);
                int v51 = v43 + v49 - 16;
              }
              *(_DWORD *)(result + 5940) = v51;
              int v78 = v4 + 65526;
              int v79 = v78 << v51;
              if (v51 < 10)
              {
                *(_WORD *)(result + 5936) = v45 | v79;
                int v69 = v51 + 7;
              }
              else
              {
                __int16 v80 = v45 | v79;
                *(_WORD *)(result + 5936) = v80;
                uint64_t v81 = *(void *)(result + 16);
                uint64_t v82 = *(void *)(result + 40);
                *(void *)(result + 40) = v82 + 1;
                *(unsigned char *)(v81 + v82) = v80;
                LOBYTE(v80) = *(unsigned char *)(result + 5937);
                uint64_t v83 = *(void *)(result + 16);
                uint64_t v84 = *(void *)(result + 40);
                *(void *)(result + 40) = v84 + 1;
                *(unsigned char *)(v83 + v84) = v80;
                int v85 = *(_DWORD *)(result + 5940);
                *(_WORD *)(result + 5936) = (unsigned __int16)v78 >> (16 - v85);
                int v69 = v85 - 9;
              }
            }
            else
            {
              int v34 = *(unsigned __int16 *)(result + 2818);
              unsigned int v35 = *(unsigned __int16 *)(result + 2816);
              int v36 = v33 | (v35 << v23);
              if (v23 <= 16 - v34)
              {
                int v42 = v23 + v34;
              }
              else
              {
                *(_WORD *)(result + 5936) = v36;
                uint64_t v37 = *(void *)(result + 16);
                uint64_t v38 = *(void *)(result + 40);
                *(void *)(result + 40) = v38 + 1;
                *(unsigned char *)(v37 + v38) = v36;
                char v39 = *(unsigned char *)(result + 5937);
                uint64_t v40 = *(void *)(result + 16);
                uint64_t v41 = *(void *)(result + 40);
                *(void *)(result + 40) = v41 + 1;
                *(unsigned char *)(v40 + v41) = v39;
                LODWORD(v40) = *(_DWORD *)(result + 5940);
                int v36 = v35 >> (16 - v40);
                int v42 = v34 + v40 - 16;
              }
              *(_DWORD *)(result + 5940) = v42;
              int v70 = v4 + 65534;
              int v71 = v70 << v42;
              if (v42 < 14)
              {
                *(_WORD *)(result + 5936) = v36 | v71;
                int v69 = v42 + 3;
              }
              else
              {
                __int16 v72 = v36 | v71;
                *(_WORD *)(result + 5936) = v72;
                uint64_t v73 = *(void *)(result + 16);
                uint64_t v74 = *(void *)(result + 40);
                *(void *)(result + 40) = v74 + 1;
                *(unsigned char *)(v73 + v74) = v72;
                LOBYTE(v72) = *(unsigned char *)(result + 5937);
                uint64_t v75 = *(void *)(result + 16);
                uint64_t v76 = *(void *)(result + 40);
                *(void *)(result + 40) = v76 + 1;
                *(unsigned char *)(v75 + v76) = v72;
                int v77 = *(_DWORD *)(result + 5940);
                *(_WORD *)(result + 5936) = (unsigned __int16)v70 >> (16 - v77);
                int v69 = v77 - 13;
              }
            }
          }
          *(_DWORD *)(result + 5940) = v69;
        }
        else
        {
          uint64_t v11 = result + 4 * v5;
          int v12 = (unsigned __int16 *)(v11 + 2748);
          unsigned int v13 = (unsigned __int16 *)(v11 + 2750);
          int v14 = *(_DWORD *)(result + 5940);
          do
          {
            int v15 = *v13;
            unsigned int v16 = *v12;
            int v17 = *(unsigned __int16 *)(result + 5936);
            int v18 = v17 | (v16 << v14);
            *(_WORD *)(result + 5936) = v17 | ((_WORD)v16 << v14);
            if (v14 <= 16 - v15)
            {
              v14 += v15;
            }
            else
            {
              uint64_t v19 = *(void *)(result + 16);
              uint64_t v20 = *(void *)(result + 40);
              *(void *)(result + 40) = v20 + 1;
              *(unsigned char *)(v19 + v20) = v18;
              LOBYTE(v19) = *(unsigned char *)(result + 5937);
              uint64_t v21 = *(void *)(result + 16);
              uint64_t v22 = *(void *)(result + 40);
              *(void *)(result + 40) = v22 + 1;
              *(unsigned char *)(v21 + v22) = v19;
              LODWORD(v19) = *(_DWORD *)(result + 5940);
              *(_WORD *)(result + 5936) = v16 >> (16 - v19);
              int v14 = v15 + v19 - 16;
            }
            *(_DWORD *)(result + 5940) = v14;
            --v10;
          }
          while (v10);
        }
        if (v5 == v9) {
          int v86 = 3;
        }
        else {
          int v86 = 4;
        }
        if (v5 == v9) {
          int v87 = 6;
        }
        else {
          int v87 = 7;
        }
        if (v9) {
          int v7 = v86;
        }
        else {
          int v7 = 3;
        }
        if (v9) {
          int v6 = v87;
        }
        else {
          int v6 = 138;
        }
        int v10 = 0;
        int v8 = v5;
      }
      unsigned int v5 = v9;
      int v4 = v10;
    }
    while (v3 != a3 + 1);
  }
  return result;
}

void *sub_1DD2F431C(uint64_t a1, int a2, int a3)
{
  return malloc((a3 * a2));
}

void sub_1DD2F4324(int a1, void *a2)
{
}

uint64_t sub_1DD2F4334(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1DD2F433C(uint64_t a1, void *a2)
{
  uint64_t v3 = a1 + 8;
  uint64_t result = *(void *)(a1 + 8);
  *a2 = *(void *)(v3 + 8);
  return result;
}

uint64_t sub_1DD2F4348(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16) - a2;
  *(void *)(result + 8) += a2;
  *(void *)(result + 16) = v2;
  return result;
}

uint64_t sub_1DD2F435C(unsigned char *a1, unint64_t a2, void *a3)
{
  if ((uint64_t)a2 >= 1)
  {
    unsigned int v3 = *a1 & 0x7F;
    if ((*a1 & 0x80) == 0)
    {
LABEL_3:
      *a3 = v3;
      return 1;
    }
    if (a2 >= 2)
    {
      int v5 = (char)a1[1];
      unsigned int v3 = *a1 & 0x7F | ((v5 & 0x7F) << 7);
      if ((v5 & 0x80000000) == 0) {
        goto LABEL_3;
      }
      if (a2 >= 3)
      {
        int v6 = (char)a1[2];
        unsigned int v3 = v3 & 0xFFE03FFF | ((v6 & 0x7F) << 14);
        if ((v6 & 0x80000000) == 0) {
          goto LABEL_3;
        }
        if (a2 >= 4)
        {
          int v7 = (char)a1[3];
          unsigned int v3 = v3 & 0xF01FFFFF | ((v7 & 0x7F) << 21);
          if ((v7 & 0x80000000) == 0) {
            goto LABEL_3;
          }
          if (a2 >= 5)
          {
            unsigned int v8 = a1[4];
            if (v8 <= 0xF)
            {
              v3 |= v8 << 28;
              goto LABEL_3;
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1DD2F43E0(void *a1)
{
  uint64_t v2 = (unsigned __int8 *)a1[1];
  unsigned int v3 = (unsigned __int8 *)a1[2];
  if (v2 == v3)
  {
    (*(void (**)(void))(*(void *)*a1 + 32))();
    uint64_t v14 = 0;
    uint64_t v4 = (*(uint64_t (**)(void, uint64_t *))(*(void *)*a1 + 24))(*a1, &v14);
    uint64_t v5 = v14;
    *((_DWORD *)a1 + 6) = v14;
    *((unsigned char *)a1 + 28) = v5 == 0;
    if (!v5) {
      return 0;
    }
    uint64_t v2 = (unsigned __int8 *)v4;
    unsigned int v3 = (unsigned __int8 *)(v4 + v5);
    a1[2] = v3;
  }
  unint64_t v6 = (unint64_t)word_1DD325EE0[*v2] >> 11;
  unint64_t v7 = v6 + 1;
  unsigned int v8 = v3 - v2;
  if ((int)v3 - (int)v2 < (v6 + 1))
  {
    unsigned int v9 = (char *)a1 + 29;
    memmove((char *)a1 + 29, v2, (v3 - v2));
    (*(void (**)(void, void))(*(void *)*a1 + 32))(*a1, *((unsigned int *)a1 + 6));
    *((_DWORD *)a1 + 6) = 0;
    while (1)
    {
      uint64_t v14 = 0;
      int v10 = (const void *)(*(uint64_t (**)(void, uint64_t *))(*(void *)*a1 + 24))(*a1, &v14);
      if (!v14) {
        return 0;
      }
      if (v7 - v8 >= v14) {
        size_t v11 = v14;
      }
      else {
        size_t v11 = v7 - v8;
      }
      memcpy(&v9[v8], v10, v11);
      v8 += v11;
      (*(void (**)(void, size_t))(*(void *)*a1 + 32))(*a1, v11);
      if (v8 >= v7)
      {
        uint64_t v12 = (uint64_t)&v9[v7];
        goto LABEL_14;
      }
    }
  }
  if (v8 > 4)
  {
    a1[1] = v2;
  }
  else
  {
    unsigned int v9 = (char *)a1 + 29;
    memmove((char *)a1 + 29, v2, (v3 - v2));
    (*(void (**)(void, void))(*(void *)*a1 + 32))(*a1, *((unsigned int *)a1 + 6));
    *((_DWORD *)a1 + 6) = 0;
    uint64_t v12 = (uint64_t)a1 + v8 + 29;
LABEL_14:
    a1[1] = v9;
    a1[2] = v12;
  }
  return 1;
}

uint64_t sub_1DD2F4600(void *a1, _DWORD *a2)
{
  *a2 = 0;
  unsigned int v4 = -7;
  while (1)
  {
    uint64_t v9 = 0;
    uint64_t v5 = (char *)(*(uint64_t (**)(void, uint64_t *))(*(void *)*a1 + 24))(*a1, &v9);
    if (!v9) {
      return 0;
    }
    char v6 = *v5;
    (*(void (**)(void, uint64_t))(*(void *)*a1 + 32))(*a1, 1);
    unsigned int v7 = (v6 & 0x7F) << (v4 + 7);
    if (v7 >> (v4 + 7) != (v6 & 0x7F)) {
      return 0;
    }
    *a2 |= v7;
    if ((v6 & 0x80000000) == 0) {
      break;
    }
    v4 += 7;
    if (v4 > 0x18) {
      return 0;
    }
  }
  return 1;
}

BOOL sub_1DD2F46F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[0] = &unk_1F387CCF8;
  v5[1] = a1;
  v5[2] = a2;
  BOOL v3 = sub_1DD2F476C((uint64_t)v5, a3);
  nullsub_8(v5);
  return v3;
}

void sub_1DD2F4754(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nullsub_8(va);
  _Unwind_Resume(a1);
}

BOOL sub_1DD2F476C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a2;
  uint64_t v7 = a2;
  uint64_t v8 = a2;
  memset(&v10[1], 0, 21);
  v10[0] = a1;
  unsigned int v9 = 0;
  BOOL v4 = (sub_1DD2F4600(v10, &v9) & 1) != 0
    && ((*(void (**)(uint64_t))(*(void *)a1 + 16))(a1),
        uint64_t v8 = a2 + v9,
        sub_1DD2F4888(v10, (uint64_t)&v6),
        BYTE4(v10[3]))
    && v7 == v8;
  (*(void (**)(void, void))(*(void *)v10[0] + 32))(v10[0], LODWORD(v10[3]));
  return v4;
}

void sub_1DD2F484C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned int a17)
{
}

void *sub_1DD2F4888(void *result, uint64_t a2)
{
  BOOL v3 = result;
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  long long v28 = xmmword_1DD325ED0;
  int v29 = -1;
  BOOL v4 = (unsigned __int8 *)result[1];
  if ((uint64_t)(result[2] - (void)v4) > 4)
  {
LABEL_4:
    while (1)
    {
      unsigned int v7 = *v4;
      uint64_t v6 = v4 + 1;
      unint64_t v5 = v7;
      if ((v7 & 3) != 0) {
        break;
      }
      size_t v16 = (v5 >> 2) + 1;
      uint64_t v17 = v3[2];
      size_t v18 = v17 - (void)v6;
      uint64_t v19 = *(_OWORD **)(a2 + 8);
      unint64_t v20 = *(void *)(a2 + 16) - (void)v19;
      BOOL v21 = v5 <= 0x3F && v18 >= 0x15;
      if (v21 && v20 >= 0x10)
      {
        *uint64_t v19 = *v6;
        *(void *)(a2 + 8) = (char *)v19 + v16;
        BOOL v4 = (unsigned __int8 *)v6 + v16;
      }
      else
      {
        if (v5 >= 0xF0)
        {
          size_t v16 = ((*((_DWORD *)&v28 + (v5 >> 2) - 59) & *(_DWORD *)v6) + 1);
          uint64_t v6 = (_OWORD *)((char *)v6 + (v5 >> 2) - 59);
          size_t v18 = v17 - (void)v6;
        }
        if (v18 < v16)
        {
          while (1)
          {
            uint64_t v23 = *(void *)(a2 + 8);
            if (*(void *)(a2 + 16) - v23 < v18) {
              return result;
            }
            memcpy(*(void **)(a2 + 8), v6, v18);
            *(void *)(a2 + 8) = v23 + v18;
            (*(void (**)(void, void))(*(void *)*v3 + 32))(*v3, *((unsigned int *)v3 + 6));
            size_t v27 = 0;
            uint64_t result = (void *)(*(uint64_t (**)(void, size_t *))(*(void *)*v3 + 24))(*v3, &v27);
            size_t v24 = v27;
            *((_DWORD *)v3 + 6) = v27;
            if (!v24) {
              return result;
            }
            uint64_t v6 = result;
            v16 -= v18;
            v3[2] = (char *)result + v24;
            size_t v18 = v24;
            if (v24 >= v16)
            {
              uint64_t v19 = *(_OWORD **)(a2 + 8);
              unint64_t v20 = *(void *)(a2 + 16) - (void)v19;
              break;
            }
          }
        }
        if (v20 < v16) {
          return result;
        }
        uint64_t result = memcpy(v19, v6, v16);
        *(void *)(a2 + 8) = (char *)v19 + v16;
        BOOL v4 = (unsigned __int8 *)v6 + v16;
LABEL_11:
        if ((uint64_t)(v3[2] - (void)v4) <= 4)
        {
          v3[1] = v4;
          uint64_t result = (void *)sub_1DD2F43E0(v3);
          if (!result) {
            return result;
          }
          BOOL v4 = (unsigned __int8 *)v3[1];
        }
      }
    }
    unint64_t v8 = word_1DD325EE0[v5];
    unint64_t v9 = (v8 & 0x700) + (*((_DWORD *)&v28 + (v8 >> 11)) & *(_DWORD *)v6);
    int v10 = *(unsigned char **)(a2 + 8);
    if ((unint64_t)&v10[-*(void *)a2] <= v9 - 1) {
      return result;
    }
    size_t v11 = &v10[v8];
    unint64_t v12 = *(void *)(a2 + 16);
    if ((unint64_t)v11 > v12) {
      return result;
    }
    unsigned int v13 = &v10[-v9];
    if (v9 > 7) {
      goto LABEL_8;
    }
    if (v12 - 14 < (unint64_t)v10)
    {
      uint64_t v26 = v8;
      if ((_BYTE)v8)
      {
        do
        {
          *int v10 = v10[-v9];
          ++v10;
          --v26;
        }
        while (v26);
      }
    }
    else
    {
      do
      {
        *(void *)int v10 = *(void *)v13;
        v10 += v9;
        BOOL v21 = v9 >= 4;
        v9 *= 2;
      }
      while (!v21);
      if (v10 < v11)
      {
LABEL_8:
        while ((unint64_t)v10 <= v12 - 16)
        {
          *(void *)int v10 = *(void *)v13;
          *((void *)v10 + 1) = *((void *)v13 + 1);
          v13 += 16;
          v10 += 16;
          if (v10 >= v11) {
            goto LABEL_10;
          }
        }
        if ((unint64_t)v10 <= v12 - 8)
        {
          uint64_t v25 = *(void *)v13;
          v13 += 8;
          *(void *)int v10 = v25;
          v10 += 8;
        }
        if (v10 < v11)
        {
          uint64_t v14 = v11 - v10;
          do
          {
            char v15 = *v13++;
            *v10++ = v15;
            --v14;
          }
          while (v14);
        }
      }
    }
LABEL_10:
    BOOL v4 = (unsigned __int8 *)v6 + (v8 >> 11);
    *(void *)(a2 + 8) = v11;
    goto LABEL_11;
  }
  uint64_t result = (void *)sub_1DD2F43E0(result);
  if (result)
  {
    BOOL v4 = (unsigned __int8 *)v3[1];
    goto LABEL_4;
  }
  return result;
}

void *sub_1DD2F4BE0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EAB1F880, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EAB1F880))
  {
    uint64_t v2 = (pthread_key_t *)operator new(8uLL);
    pthread_key_create(v2, (void (__cdecl *)(void *))sub_1DD2F5350);
    qword_1EAB1F878 = (uint64_t)v2;
    __cxa_guard_release(&qword_1EAB1F880);
  }
  uint64_t v0 = (pthread_key_t *)qword_1EAB1F878;
  return sub_1DD2F4C90(v0);
}

void sub_1DD2F4C68(_Unwind_Exception *a1)
{
  operator delete(v1);
  __cxa_guard_abort(&qword_1EAB1F880);
  _Unwind_Resume(a1);
}

void *sub_1DD2F4C90(pthread_key_t *a1)
{
  uint64_t v2 = pthread_getspecific(*a1);
  if (!v2)
  {
    uint64_t v2 = operator new(0x10uLL);
    *uint64_t v2 = -1;
    v2[1] = 0;
    pthread_setspecific(*a1, v2);
  }
  return v2;
}

void *sub_1DD2F4CF0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    if (*(void *)(a1 + 48) >= (unint64_t)(2 * v6)) {
      unint64_t v7 = 2 * v6;
    }
    else {
      unint64_t v7 = *(void *)(a1 + 48);
    }
  }
  else
  {
    unint64_t v7 = *(void *)(a1 + 40);
  }
  if (a3 >= 0xFFFFFFFFFFFFFFE8)
  {
    sub_1DD2FAF50((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/arena.cc", 116);
    unint64_t v8 = sub_1DD2FAF68(v12, "CHECK failed: (min_bytes) <= (std::numeric_limits<size_t>::max() - kBlockHeaderSize): ");
    sub_1DD2FB0A4((uint64_t)&v11, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_1DD2FB0AC((uint64_t)v12);
  }
  if (v7 <= a3 + 24) {
    unint64_t v9 = a3 + 24;
  }
  else {
    unint64_t v9 = v7;
  }
  uint64_t result = (void *)(*(uint64_t (**)(unint64_t))(a1 + 72))(v9);
  *uint64_t result = a2;
  result[1] = 24;
  result[2] = v9;
  atomic_fetch_add_explicit((atomic_ullong *volatile)(a1 + 16), v9, memory_order_relaxed);
  return result;
}

void sub_1DD2F4DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1DD2FB0AC((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_1DD2F4DE0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (char *)a1[3];
  do
  {
    if (result)
    {
      if ((unint64_t)(2 * *(void *)result) >= 0x40) {
        uint64_t v7 = 64;
      }
      else {
        uint64_t v7 = 2 * *(void *)result;
      }
    }
    else
    {
      uint64_t v7 = 8;
    }
    unint64_t v8 = (16 * (_WORD)v7 + 23) & 0xFF0;
    unint64_t v9 = (char *)a1[5];
    if (a1[6] - (uint64_t)v9 < v8)
    {
      uint64_t result = sub_1DD2F52B8(a1, v8);
      int v10 = (char *)a1[3];
    }
    else
    {
      a1[5] = (uint64_t)&v9[v8];
      int v10 = result;
      uint64_t result = v9;
    }
    *(void *)uint64_t result = v7;
    *((void *)result + 1) = v10;
    a1[3] = (uint64_t)result;
    a1[7] = (uint64_t)(result + 16);
    a1[8] = (uint64_t)&result[16 * v7 + 16];
  }
  while (!(16 * v7));
  *((void *)result + 2) = a2;
  *((void *)result + 3) = a3;
  a1[7] = (uint64_t)(result + 32);
  return result;
}

char *sub_1DD2F4EC0(uint64_t a1, unint64_t a2)
{
  BOOL v4 = sub_1DD2F4BE0();
  unint64_t v5 = v4;
  if (*v4 == *(void *)(a1 + 32))
  {
    explicit = (uint64_t *)v4[1];
    goto LABEL_3;
  }
  explicit = (uint64_t *)atomic_load_explicit((atomic_ullong *volatile)(a1 + 8), memory_order_acquire);
  if (explicit && (void *)explicit[1] == v5)
  {
LABEL_3:
    uint64_t v7 = explicit[5];
    if (explicit[6] - v7 < a2)
    {
      return sub_1DD2F52B8(explicit, a2);
    }
    else
    {
      explicit[5] = v7 + a2;
      return (char *)v7;
    }
  }
  return sub_1DD2F4F78(a1, a2);
}

char *sub_1DD2F4F78(uint64_t a1, unint64_t a2)
{
  BOOL v3 = (uint64_t *)sub_1DD2F514C(a1);
  uint64_t v4 = v3[5];
  if (v3[6] - v4 < a2)
  {
    return sub_1DD2F52B8(v3, a2);
  }
  else
  {
    v3[5] = v4 + a2;
    return (char *)v4;
  }
}

char *sub_1DD2F4FD8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1DD2F4BE0();
  if (*v6 == *(void *)(a1 + 32))
  {
    explicit = (uint64_t *)v6[1];
    goto LABEL_3;
  }
  explicit = (uint64_t *)atomic_load_explicit((atomic_ullong *volatile)(a1 + 8), memory_order_acquire);
  if (explicit && (void *)explicit[1] == v6)
  {
LABEL_3:
    return sub_1DD2F5080(explicit, a2, a3);
  }
  return sub_1DD2F5100(a1, a2, a3);
}

char *sub_1DD2F5080(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = (char *)a1[5];
  if (a1[6] - (uint64_t)v5 < a2) {
    unint64_t v5 = sub_1DD2F52B8(a1, a2);
  }
  else {
    a1[5] = (uint64_t)&v5[a2];
  }
  uint64_t v6 = (char **)a1[7];
  if (v6 == (char **)a1[8])
  {
    sub_1DD2F4DE0(a1, (uint64_t)v5, a3);
  }
  else
  {
    *uint64_t v6 = v5;
    v6[1] = (char *)a3;
    a1[7] = (uint64_t)(v6 + 2);
  }
  return v5;
}

char *sub_1DD2F5100(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = (uint64_t *)sub_1DD2F514C(a1);
  return sub_1DD2F5080(v5, a2, a3);
}

unint64_t sub_1DD2F514C(uint64_t a1)
{
  uint64_t v2 = sub_1DD2F4BE0();
  if (*v2 == *(void *)(a1 + 32)) {
    return v2[1];
  }
  unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)(a1 + 8), memory_order_acquire);
  if (explicit && *(void **)(explicit + 8) == v2) {
    return explicit;
  }
  unint64_t v5 = sub_1DD2F4BE0();
  return sub_1DD2F51C8(a1, (uint64_t)v5);
}

unint64_t sub_1DD2F51C8(uint64_t a1, uint64_t a2)
{
  unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)a1, memory_order_acquire);
  if (explicit)
  {
    while (*(void *)(explicit + 8) != a2)
    {
      unint64_t explicit = *(void *)(explicit + 32);
      if (!explicit) {
        goto LABEL_4;
      }
    }
  }
  else
  {
LABEL_4:
    if (*(void *)(a1 + 40) <= 0x60uLL) {
      unint64_t v5 = 96;
    }
    else {
      unint64_t v5 = *(void *)(a1 + 40);
    }
    uint64_t v6 = (void *)(*(uint64_t (**)(unint64_t))(a1 + 72))(v5);
    *uint64_t v6 = 0;
    v6[1] = 24;
    v6[2] = v5;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a1 + 16), v5, memory_order_relaxed);
    v6[3] = a1;
    unint64_t explicit = (unint64_t)(v6 + 3);
    v6[1] = 96;
    v6[4] = a2;
    v6[5] = v6;
    uint64_t v7 = (char *)v6 + v6[2];
    v6[8] = v6 + 12;
    v6[9] = v7;
    v6[6] = 0;
    v6[10] = 0;
    v6[11] = 0;
    atomic_ullong v8 = *(void *)a1;
    v6[7] = *(void *)a1;
    atomic_ullong v9 = v8;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)a1, (unint64_t *)&v9, (unint64_t)(v6 + 3), memory_order_release, memory_order_relaxed);
    if (v9 != v8)
    {
      atomic_ullong v10 = v9;
      do
      {
        v6[7] = v9;
        atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)a1, (unint64_t *)&v10, explicit, memory_order_release, memory_order_relaxed);
        BOOL v11 = v10 == v9;
        atomic_ullong v9 = v10;
      }
      while (!v11);
    }
  }
  sub_1DD2F4BE0()[1] = explicit;
  uint64_t v12 = *(void *)(a1 + 32);
  *sub_1DD2F4BE0() = v12;
  atomic_store(explicit, (unint64_t *)(a1 + 8));
  return explicit;
}

char *sub_1DD2F52B8(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = (void *)a1[2];
  uint64_t v5 = v4[2];
  atomic_ullong v8 = a1 + 5;
  uint64_t result = (char *)a1[5];
  uint64_t v7 = (char *)v8[1];
  do
  {
    v4[1] = &result[v5 - (void)v7];
    uint64_t v4 = sub_1DD2F4CF0(*a1, (uint64_t)v4, a2);
    a1[2] = (uint64_t)v4;
    uint64_t v5 = v4[2];
    uint64_t result = (char *)v4 + v4[1];
    uint64_t v7 = (char *)v4 + v5;
    a1[5] = (uint64_t)result;
    a1[6] = (uint64_t)v4 + v5;
  }
  while ((char *)v4 + v5 - result < a2);
  a1[5] = (uint64_t)&result[a2];
  return result;
}

uint64_t sub_1DD2F5330(uint64_t result, uint64_t a2, uint64_t a3)
{
  BOOL v3 = *(uint64_t (**)(uint64_t, uint64_t, void))(result + 88);
  if (v3) {
    return v3(a2, a3, *(void *)(result + 112));
  }
  return result;
}

void sub_1DD2F5350(void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

uint64_t *sub_1DD2F535C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  BOOL v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      BOOL v3 = a2;
      goto LABEL_7;
    }
    do
    {
      BOOL v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  uint64_t v6 = (uint64_t **)v3[2];
  uint64_t v7 = *v6;
  if (*v6 == v3)
  {
    *uint64_t v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      uint64_t v7 = 0;
      uint64_t result = (uint64_t *)v2;
    }
    else
    {
      uint64_t v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *BOOL v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 == v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      unsigned int v13 = *(uint64_t **)(v12 + 8);
      uint64_t v14 = *v13;
      *(void *)(v12 + 8) = *v13;
      if (v14) {
        *(void *)(v14 + 16) = v12;
      }
      v13[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
      *unsigned int v13 = v12;
      *(void *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7) {
        uint64_t result = v7;
      }
      uint64_t v7 = *(uint64_t **)(*v7 + 8);
    }
    char v15 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v15 + 24))
    {
      size_t v16 = (uint64_t *)v7[1];
      if (!v16) {
        goto LABEL_56;
      }
LABEL_55:
      if (*((unsigned char *)v16 + 24))
      {
LABEL_56:
        *((unsigned char *)v15 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = v15[1];
        *uint64_t v7 = v22;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        v15[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        size_t v16 = v7;
      }
      else
      {
        char v15 = v7;
      }
      uint64_t v23 = v15[2];
      *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      size_t v24 = *(uint64_t **)(v23 + 8);
      uint64_t v25 = *v24;
      *(void *)(v23 + 8) = *v24;
      if (v25) {
        *(void *)(v25 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      *size_t v24 = v23;
      goto LABEL_72;
    }
    size_t v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_55;
    }
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      uint64_t v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
LABEL_49:
    uint64_t v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    uint64_t v18 = v7[1];
    *(void *)uint64_t v12 = v18;
    if (v18) {
      *(void *)(v18 + 16) = v12;
    }
    v7[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(void *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12) {
      uint64_t result = v7;
    }
    uint64_t v7 = *(uint64_t **)v12;
  }
  uint64_t v19 = (void *)*v7;
  if (*v7 && !*((unsigned char *)v19 + 24)) {
    goto LABEL_68;
  }
  unint64_t v20 = (uint64_t *)v7[1];
  if (!v20 || *((unsigned char *)v20 + 24))
  {
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_68:
    unint64_t v20 = v7;
  }
  else
  {
    *((unsigned char *)v20 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v26 = *v20;
    v7[1] = *v20;
    if (v26) {
      *(void *)(v26 + 16) = v7;
    }
    v20[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
    *unint64_t v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    uint64_t v19 = v7;
  }
  uint64_t v23 = v20[2];
  *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  size_t v24 = *(uint64_t **)v23;
  uint64_t v27 = *(void *)(*(void *)v23 + 8);
  *(void *)uint64_t v23 = v27;
  if (v27) {
    *(void *)(v27 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

uint64_t sub_1DD2F56E0(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void sub_1DD2F5704(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void sub_1DD2F5718()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EAB1F848, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EAB1F848))
  {
    qword_1EAB1F7D8 = 0;
    unk_1EAB1F7E0 = 0;
    qword_1EAB1F7E8 = 0;
    sub_1DD2FB4E0((uint64_t)sub_1DD2F5704, (uint64_t)&qword_1EAB1F7D8);
    __cxa_guard_release(&qword_1EAB1F848);
  }
}

void sub_1DD2F579C(_Unwind_Exception *a1)
{
}

unsigned char *sub_1DD2F57B4(uint64_t a1, uint64_t a2, int a3, unsigned __int8 a4, unsigned char *a5)
{
  v175[0] = a5;
  v175[1] = (unsigned char *)a4;
  if (a3 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = a3;
    while (2)
    {
      uint64_t v10 = (unsigned int *)(a2 + 24 * v8);
      uint64_t v11 = (const void **)(a1 + *v10);
      switch(v10[3])
      {
        case 0u:
          unint64_t v12 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if ((*(_DWORD *)(a1 + ((v12 >> 3) & 0x1FFFFFFC)) >> v12))
          {
            unsigned int v13 = *(_DWORD *)(a2 + 24 * v8 + 4);
            uint64_t v14 = v175[0];
            if (v13 < 0x80) {
              goto LABEL_228;
            }
            do
            {
              *v14++ = v13 | 0x80;
              unsigned int v15 = v13 >> 7;
              unsigned int v16 = v13 >> 14;
              v13 >>= 7;
            }
            while (v16);
            goto LABEL_229;
          }
          goto LABEL_315;
        case 1u:
          unint64_t v17 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if ((*(_DWORD *)(a1 + ((v17 >> 3) & 0x1FFFFFFC)) >> v17))
          {
            unsigned int v18 = *(_DWORD *)(a2 + 24 * v8 + 4);
            uint64_t v19 = v175[0];
            if (v18 < 0x80) {
              goto LABEL_205;
            }
            do
            {
              *v19++ = v18 | 0x80;
              unsigned int v20 = v18 >> 7;
              unsigned int v21 = v18 >> 14;
              v18 >>= 7;
            }
            while (v21);
            goto LABEL_206;
          }
          goto LABEL_315;
        case 2u:
          unint64_t v22 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if ((*(_DWORD *)(a1 + ((v22 >> 3) & 0x1FFFFFFC)) >> v22))
          {
            unsigned int v23 = *(_DWORD *)(a2 + 24 * v8 + 4);
            size_t v24 = v175[0];
            if (v23 < 0x80)
            {
              unsigned int v25 = *(_DWORD *)(a2 + 24 * v8 + 4);
            }
            else
            {
              do
              {
                *v24++ = v23 | 0x80;
                unsigned int v25 = v23 >> 7;
                unsigned int v26 = v23 >> 14;
                v23 >>= 7;
              }
              while (v26);
            }
            *size_t v24 = v25;
            uint64_t v150 = v24 + 1;
            double v151 = *(double *)v11;
            if ((unint64_t)*v11 >= 0x80)
            {
              do
              {
                *v150++ = LOBYTE(v151) | 0x80;
                uint64_t v152 = *(void *)&v151 >> 7;
                uint64_t v153 = *(void *)&v151 >> 14;
                *(void *)&v151 >>= 7;
              }
              while (v153);
              goto LABEL_313;
            }
            goto LABEL_312;
          }
          goto LABEL_315;
        case 3u:
          unint64_t v27 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if ((*(_DWORD *)(a1 + ((v27 >> 3) & 0x1FFFFFFC)) >> v27))
          {
            unsigned int v28 = *(_DWORD *)(a2 + 24 * v8 + 4);
            int v29 = v175[0];
            if (v28 < 0x80)
            {
              unsigned int v30 = *(_DWORD *)(a2 + 24 * v8 + 4);
            }
            else
            {
              do
              {
                *v29++ = v28 | 0x80;
                unsigned int v30 = v28 >> 7;
                unsigned int v31 = v28 >> 14;
                v28 >>= 7;
              }
              while (v31);
            }
            *int v29 = v30;
            uint64_t v150 = v29 + 1;
            double v151 = *(double *)v11;
            if ((unint64_t)*v11 >= 0x80)
            {
              do
              {
                *v150++ = LOBYTE(v151) | 0x80;
                uint64_t v152 = *(void *)&v151 >> 7;
                uint64_t v154 = *(void *)&v151 >> 14;
                *(void *)&v151 >>= 7;
              }
              while (v154);
              goto LABEL_313;
            }
            goto LABEL_312;
          }
          goto LABEL_315;
        case 4u:
          unint64_t v32 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if ((*(_DWORD *)(a1 + ((v32 >> 3) & 0x1FFFFFFC)) >> v32))
          {
            unsigned int v33 = *(_DWORD *)(a2 + 24 * v8 + 4);
            int v34 = v175[0];
            if (v33 < 0x80)
            {
              unsigned int v35 = *(_DWORD *)(a2 + 24 * v8 + 4);
            }
            else
            {
              do
              {
                *v34++ = v33 | 0x80;
                unsigned int v35 = v33 >> 7;
                unsigned int v36 = v33 >> 14;
                v33 >>= 7;
              }
              while (v36);
            }
            *int v34 = v35;
            uint64_t v150 = v34 + 1;
            *(void *)&double v151 = *(int *)v11;
            if (LODWORD(v151) >= 0x80)
            {
              do
              {
                *v150++ = LOBYTE(v151) | 0x80;
                uint64_t v152 = *(void *)&v151 >> 7;
                uint64_t v155 = *(void *)&v151 >> 14;
                *(void *)&v151 >>= 7;
              }
              while (v155);
              goto LABEL_313;
            }
            goto LABEL_312;
          }
          goto LABEL_315;
        case 5u:
          unint64_t v37 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if ((*(_DWORD *)(a1 + ((v37 >> 3) & 0x1FFFFFFC)) >> v37))
          {
            unsigned int v13 = *(_DWORD *)(a2 + 24 * v8 + 4);
            uint64_t v14 = v175[0];
            if (v13 < 0x80) {
              goto LABEL_228;
            }
            do
            {
              *v14++ = v13 | 0x80;
              unsigned int v15 = v13 >> 7;
              unsigned int v38 = v13 >> 14;
              v13 >>= 7;
            }
            while (v38);
            goto LABEL_229;
          }
          goto LABEL_315;
        case 6u:
          unint64_t v39 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if ((*(_DWORD *)(a1 + ((v39 >> 3) & 0x1FFFFFFC)) >> v39))
          {
            unsigned int v18 = *(_DWORD *)(a2 + 24 * v8 + 4);
            uint64_t v19 = v175[0];
            if (v18 < 0x80) {
              goto LABEL_205;
            }
            do
            {
              *v19++ = v18 | 0x80;
              unsigned int v20 = v18 >> 7;
              unsigned int v40 = v18 >> 14;
              v18 >>= 7;
            }
            while (v40);
            goto LABEL_206;
          }
          goto LABEL_315;
        case 7u:
          unint64_t v41 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if ((*(_DWORD *)(a1 + ((v41 >> 3) & 0x1FFFFFFC)) >> v41))
          {
            unsigned int v42 = *(_DWORD *)(a2 + 24 * v8 + 4);
            int v43 = v175[0];
            if (v42 < 0x80) {
              goto LABEL_231;
            }
            do
            {
              *v43++ = v42 | 0x80;
              unsigned int v44 = v42 >> 7;
              unsigned int v45 = v42 >> 14;
              v42 >>= 7;
            }
            while (v45);
            goto LABEL_232;
          }
          goto LABEL_315;
        case 8u:
          unint64_t v46 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if ((*(_DWORD *)(a1 + ((v46 >> 3) & 0x1FFFFFFC)) >> v46))
          {
            unsigned int v47 = *(_DWORD *)(a2 + 24 * v8 + 4);
            char v48 = v175[0];
            if (v47 < 0x80) {
              goto LABEL_241;
            }
            do
            {
              *v48++ = v47 | 0x80;
              unsigned int v49 = v47 >> 7;
              unsigned int v50 = v47 >> 14;
              v47 >>= 7;
            }
            while (v50);
            goto LABEL_242;
          }
          goto LABEL_315;
        case 9u:
          unint64_t v51 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if ((*(_DWORD *)(a1 + ((v51 >> 3) & 0x1FFFFFFC)) >> v51)) {
            goto LABEL_188;
          }
          goto LABEL_315;
        case 0xAu:
          unint64_t v52 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if ((*(_DWORD *)(a1 + ((v52 >> 3) & 0x1FFFFFFC)) >> v52)) {
            goto LABEL_223;
          }
          goto LABEL_315;
        case 0xBu:
          unint64_t v53 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if ((*(_DWORD *)(a1 + ((v53 >> 3) & 0x1FFFFFFC)) >> v53))
          {
            unsigned int v47 = *(_DWORD *)(a2 + 24 * v8 + 4);
            char v48 = v175[0];
            if (v47 < 0x80) {
              goto LABEL_241;
            }
            do
            {
              *v48++ = v47 | 0x80;
              unsigned int v49 = v47 >> 7;
              unsigned int v54 = v47 >> 14;
              v47 >>= 7;
            }
            while (v54);
            goto LABEL_242;
          }
          goto LABEL_315;
        case 0xCu:
          unint64_t v55 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if ((*(_DWORD *)(a1 + ((v55 >> 3) & 0x1FFFFFFC)) >> v55))
          {
            unsigned int v56 = *(_DWORD *)(a2 + 24 * v8 + 4);
            char v57 = v175[0];
            if (v56 < 0x80)
            {
              unsigned int v58 = *(_DWORD *)(a2 + 24 * v8 + 4);
            }
            else
            {
              do
              {
                *v57++ = v56 | 0x80;
                unsigned int v58 = v56 >> 7;
                unsigned int v59 = v56 >> 14;
                v56 >>= 7;
              }
              while (v59);
            }
            *char v57 = v58;
            unint64_t v156 = v57 + 1;
            unsigned int v157 = *(_DWORD *)v11;
            if (*(_DWORD *)v11 >= 0x80u)
            {
              do
              {
                *v156++ = v157 | 0x80;
                unsigned int v158 = v157 >> 7;
                unsigned int v159 = v157 >> 14;
                v157 >>= 7;
              }
              while (v159);
              goto LABEL_307;
            }
            goto LABEL_306;
          }
          goto LABEL_315;
        case 0xDu:
          unint64_t v60 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if ((*(_DWORD *)(a1 + ((v60 >> 3) & 0x1FFFFFFC)) >> v60))
          {
            unsigned int v61 = *(_DWORD *)(a2 + 24 * v8 + 4);
            __int16 v62 = v175[0];
            if (v61 < 0x80)
            {
              unsigned int v63 = *(_DWORD *)(a2 + 24 * v8 + 4);
            }
            else
            {
              do
              {
                *v62++ = v61 | 0x80;
                unsigned int v63 = v61 >> 7;
                unsigned int v64 = v61 >> 14;
                v61 >>= 7;
              }
              while (v64);
            }
            unsigned char *v62 = v63;
            uint64_t v150 = v62 + 1;
            *(void *)&double v151 = *(int *)v11;
            if (LODWORD(v151) >= 0x80)
            {
              do
              {
                *v150++ = LOBYTE(v151) | 0x80;
                uint64_t v152 = *(void *)&v151 >> 7;
                uint64_t v160 = *(void *)&v151 >> 14;
                *(void *)&v151 >>= 7;
              }
              while (v160);
              goto LABEL_313;
            }
            goto LABEL_312;
          }
          goto LABEL_315;
        case 0xEu:
          unint64_t v65 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if ((*(_DWORD *)(a1 + ((v65 >> 3) & 0x1FFFFFFC)) >> v65))
          {
            unsigned int v18 = *(_DWORD *)(a2 + 24 * v8 + 4);
            uint64_t v19 = v175[0];
            if (v18 < 0x80) {
              goto LABEL_205;
            }
            do
            {
              *v19++ = v18 | 0x80;
              unsigned int v20 = v18 >> 7;
              unsigned int v66 = v18 >> 14;
              v18 >>= 7;
            }
            while (v66);
            goto LABEL_206;
          }
          goto LABEL_315;
        case 0xFu:
          unint64_t v67 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if ((*(_DWORD *)(a1 + ((v67 >> 3) & 0x1FFFFFFC)) >> v67))
          {
            unsigned int v13 = *(_DWORD *)(a2 + 24 * v8 + 4);
            uint64_t v14 = v175[0];
            if (v13 < 0x80) {
              goto LABEL_228;
            }
            do
            {
              *v14++ = v13 | 0x80;
              unsigned int v15 = v13 >> 7;
              unsigned int v68 = v13 >> 14;
              v13 >>= 7;
            }
            while (v68);
            goto LABEL_229;
          }
          goto LABEL_315;
        case 0x10u:
          unint64_t v69 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if ((*(_DWORD *)(a1 + ((v69 >> 3) & 0x1FFFFFFC)) >> v69)) {
            goto LABEL_208;
          }
          goto LABEL_315;
        case 0x11u:
          unint64_t v70 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if ((*(_DWORD *)(a1 + ((v70 >> 3) & 0x1FFFFFFC)) >> v70)) {
            goto LABEL_210;
          }
          goto LABEL_315;
        case 0x14u:
          unint64_t v71 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if ((*(_DWORD *)(a1 + ((v71 >> 3) & 0x1FFFFFFC)) >> v71))
          {
            unsigned int v72 = *(_DWORD *)(a2 + 24 * v8 + 4);
            uint64_t v73 = v175[0];
            if (v72 < 0x80) {
              goto LABEL_247;
            }
            do
            {
              *v73++ = v72 | 0x80;
              unsigned int v74 = v72 >> 7;
              unsigned int v75 = v72 >> 14;
              v72 >>= 7;
            }
            while (v75);
            goto LABEL_248;
          }
          goto LABEL_315;
        case 0x15u:
          if (*(double *)v11 != 0.0)
          {
            unsigned int v13 = *(_DWORD *)(a2 + 24 * v8 + 4);
            uint64_t v14 = v175[0];
            if (v13 < 0x80) {
              goto LABEL_228;
            }
            do
            {
              *v14++ = v13 | 0x80;
              unsigned int v15 = v13 >> 7;
              unsigned int v76 = v13 >> 14;
              v13 >>= 7;
            }
            while (v76);
            goto LABEL_229;
          }
          goto LABEL_315;
        case 0x16u:
          if (*(float *)v11 != 0.0)
          {
            unsigned int v18 = *(_DWORD *)(a2 + 24 * v8 + 4);
            uint64_t v19 = v175[0];
            if (v18 < 0x80) {
              goto LABEL_205;
            }
            do
            {
              *v19++ = v18 | 0x80;
              unsigned int v20 = v18 >> 7;
              unsigned int v77 = v18 >> 14;
              v18 >>= 7;
            }
            while (v77);
            goto LABEL_206;
          }
          goto LABEL_315;
        case 0x17u:
          if (*v11)
          {
            unsigned int v78 = *(_DWORD *)(a2 + 24 * v8 + 4);
            int v79 = v175[0];
            if (v78 < 0x80)
            {
              unsigned int v80 = *(_DWORD *)(a2 + 24 * v8 + 4);
            }
            else
            {
              do
              {
                *v79++ = v78 | 0x80;
                unsigned int v80 = v78 >> 7;
                unsigned int v81 = v78 >> 14;
                v78 >>= 7;
              }
              while (v81);
            }
            *int v79 = v80;
            uint64_t v150 = v79 + 1;
            double v151 = *(double *)v11;
            if ((unint64_t)*v11 >= 0x80)
            {
              do
              {
                *v150++ = LOBYTE(v151) | 0x80;
                uint64_t v152 = *(void *)&v151 >> 7;
                uint64_t v161 = *(void *)&v151 >> 14;
                *(void *)&v151 >>= 7;
              }
              while (v161);
              goto LABEL_313;
            }
            goto LABEL_312;
          }
          goto LABEL_315;
        case 0x18u:
          if (*v11)
          {
            unsigned int v82 = *(_DWORD *)(a2 + 24 * v8 + 4);
            uint64_t v83 = v175[0];
            if (v82 < 0x80)
            {
              unsigned int v84 = *(_DWORD *)(a2 + 24 * v8 + 4);
            }
            else
            {
              do
              {
                *v83++ = v82 | 0x80;
                unsigned int v84 = v82 >> 7;
                unsigned int v85 = v82 >> 14;
                v82 >>= 7;
              }
              while (v85);
            }
            *uint64_t v83 = v84;
            uint64_t v150 = v83 + 1;
            double v151 = *(double *)v11;
            if ((unint64_t)*v11 >= 0x80)
            {
              do
              {
                *v150++ = LOBYTE(v151) | 0x80;
                uint64_t v152 = *(void *)&v151 >> 7;
                uint64_t v162 = *(void *)&v151 >> 14;
                *(void *)&v151 >>= 7;
              }
              while (v162);
              goto LABEL_313;
            }
            goto LABEL_312;
          }
          goto LABEL_315;
        case 0x19u:
          if (*(_DWORD *)v11)
          {
            unsigned int v86 = *(_DWORD *)(a2 + 24 * v8 + 4);
            int v87 = v175[0];
            if (v86 < 0x80)
            {
              unsigned int v88 = *(_DWORD *)(a2 + 24 * v8 + 4);
            }
            else
            {
              do
              {
                *v87++ = v86 | 0x80;
                unsigned int v88 = v86 >> 7;
                unsigned int v89 = v86 >> 14;
                v86 >>= 7;
              }
              while (v89);
            }
            unsigned char *v87 = v88;
            uint64_t v150 = v87 + 1;
            *(void *)&double v151 = *(int *)v11;
            if (LODWORD(v151) >= 0x80)
            {
              do
              {
                *v150++ = LOBYTE(v151) | 0x80;
                uint64_t v152 = *(void *)&v151 >> 7;
                uint64_t v163 = *(void *)&v151 >> 14;
                *(void *)&v151 >>= 7;
              }
              while (v163);
              goto LABEL_313;
            }
            goto LABEL_312;
          }
          goto LABEL_315;
        case 0x1Au:
          if (*v11)
          {
            unsigned int v13 = *(_DWORD *)(a2 + 24 * v8 + 4);
            uint64_t v14 = v175[0];
            if (v13 < 0x80) {
              goto LABEL_228;
            }
            do
            {
              *v14++ = v13 | 0x80;
              unsigned int v15 = v13 >> 7;
              unsigned int v90 = v13 >> 14;
              v13 >>= 7;
            }
            while (v90);
            goto LABEL_229;
          }
          goto LABEL_315;
        case 0x1Bu:
          if (*(_DWORD *)v11)
          {
            unsigned int v18 = *(_DWORD *)(a2 + 24 * v8 + 4);
            uint64_t v19 = v175[0];
            if (v18 < 0x80) {
              goto LABEL_205;
            }
            do
            {
              *v19++ = v18 | 0x80;
              unsigned int v20 = v18 >> 7;
              unsigned int v91 = v18 >> 14;
              v18 >>= 7;
            }
            while (v91);
            goto LABEL_206;
          }
          goto LABEL_315;
        case 0x1Cu:
          if (*(unsigned char *)v11)
          {
            unsigned int v42 = *(_DWORD *)(a2 + 24 * v8 + 4);
            int v43 = v175[0];
            if (v42 < 0x80) {
              goto LABEL_231;
            }
            do
            {
              *v43++ = v42 | 0x80;
              unsigned int v44 = v42 >> 7;
              unsigned int v92 = v42 >> 14;
              v42 >>= 7;
            }
            while (v92);
            goto LABEL_232;
          }
          goto LABEL_315;
        case 0x1Du:
          if (*((char *)*v11 + 23) < 0)
          {
            if (*((void *)*v11 + 1))
            {
LABEL_234:
              unsigned int v47 = *(_DWORD *)(a2 + 24 * v8 + 4);
              char v48 = v175[0];
              if (v47 < 0x80) {
                goto LABEL_241;
              }
              do
              {
                *v48++ = v47 | 0x80;
                unsigned int v49 = v47 >> 7;
                unsigned int v146 = v47 >> 14;
                v47 >>= 7;
              }
              while (v146);
              goto LABEL_242;
            }
          }
          else if (*((unsigned char *)*v11 + 23))
          {
            goto LABEL_234;
          }
LABEL_315:
          if (++v8 != v9) {
            continue;
          }
          a5 = v175[0];
          break;
        case 0x1Eu:
          if (!*v11) {
            goto LABEL_315;
          }
          goto LABEL_188;
        case 0x1Fu:
          if (!*v11) {
            goto LABEL_315;
          }
          goto LABEL_223;
        case 0x20u:
          if (*((char *)*v11 + 23) < 0)
          {
            if (!*((void *)*v11 + 1)) {
              goto LABEL_315;
            }
          }
          else if (!*((unsigned char *)*v11 + 23))
          {
            goto LABEL_315;
          }
          unsigned int v47 = *(_DWORD *)(a2 + 24 * v8 + 4);
          char v48 = v175[0];
          if (v47 < 0x80)
          {
LABEL_241:
            LOBYTE(v49) = v47;
          }
          else
          {
            do
            {
              *v48++ = v47 | 0x80;
              unsigned int v49 = v47 >> 7;
              unsigned int v147 = v47 >> 14;
              v47 >>= 7;
            }
            while (v147);
          }
LABEL_242:
          *char v48 = v49;
          uint64_t v148 = v48 + 1;
          v175[0] = v148;
          uint64_t v11 = (const void **)*v11;
          goto LABEL_249;
        case 0x21u:
          if (!*(_DWORD *)v11) {
            goto LABEL_315;
          }
          unsigned int v93 = *(_DWORD *)(a2 + 24 * v8 + 4);
          size_t v94 = v175[0];
          if (v93 < 0x80)
          {
            unsigned int v95 = *(_DWORD *)(a2 + 24 * v8 + 4);
          }
          else
          {
            do
            {
              *v94++ = v93 | 0x80;
              unsigned int v95 = v93 >> 7;
              unsigned int v96 = v93 >> 14;
              v93 >>= 7;
            }
            while (v96);
          }
          *size_t v94 = v95;
          unint64_t v156 = v94 + 1;
          unsigned int v157 = *(_DWORD *)v11;
          if (*(_DWORD *)v11 < 0x80u) {
            goto LABEL_306;
          }
          do
          {
            *v156++ = v157 | 0x80;
            unsigned int v158 = v157 >> 7;
            unsigned int v164 = v157 >> 14;
            v157 >>= 7;
          }
          while (v164);
          goto LABEL_307;
        case 0x22u:
          if (!*(_DWORD *)v11) {
            goto LABEL_315;
          }
          unsigned int v97 = *(_DWORD *)(a2 + 24 * v8 + 4);
          int v98 = v175[0];
          if (v97 < 0x80)
          {
            unsigned int v99 = *(_DWORD *)(a2 + 24 * v8 + 4);
          }
          else
          {
            do
            {
              *v98++ = v97 | 0x80;
              unsigned int v99 = v97 >> 7;
              unsigned int v100 = v97 >> 14;
              v97 >>= 7;
            }
            while (v100);
          }
          *int v98 = v99;
          uint64_t v150 = v98 + 1;
          *(void *)&double v151 = *(int *)v11;
          if (LODWORD(v151) < 0x80) {
            goto LABEL_312;
          }
          do
          {
            *v150++ = LOBYTE(v151) | 0x80;
            uint64_t v152 = *(void *)&v151 >> 7;
            uint64_t v165 = *(void *)&v151 >> 14;
            *(void *)&v151 >>= 7;
          }
          while (v165);
          goto LABEL_313;
        case 0x23u:
          if (!*(_DWORD *)v11) {
            goto LABEL_315;
          }
          unsigned int v18 = *(_DWORD *)(a2 + 24 * v8 + 4);
          uint64_t v19 = v175[0];
          if (v18 < 0x80) {
            goto LABEL_205;
          }
          do
          {
            *v19++ = v18 | 0x80;
            unsigned int v20 = v18 >> 7;
            unsigned int v101 = v18 >> 14;
            v18 >>= 7;
          }
          while (v101);
          goto LABEL_206;
        case 0x24u:
          if (!*v11) {
            goto LABEL_315;
          }
          unsigned int v13 = *(_DWORD *)(a2 + 24 * v8 + 4);
          uint64_t v14 = v175[0];
          if (v13 < 0x80) {
            goto LABEL_228;
          }
          do
          {
            *v14++ = v13 | 0x80;
            unsigned int v15 = v13 >> 7;
            unsigned int v102 = v13 >> 14;
            v13 >>= 7;
          }
          while (v102);
          goto LABEL_229;
        case 0x25u:
          if (!*(_DWORD *)v11) {
            goto LABEL_315;
          }
          goto LABEL_208;
        case 0x26u:
          if (!*v11) {
            goto LABEL_315;
          }
          goto LABEL_210;
        case 0x29u:
          if (*((char *)v11 + 23) < 0)
          {
            if (!v11[1]) {
              goto LABEL_315;
            }
          }
          else if (!*((unsigned char *)v11 + 23))
          {
            goto LABEL_315;
          }
          unsigned int v72 = *(_DWORD *)(a2 + 24 * v8 + 4);
          uint64_t v73 = v175[0];
          if (v72 < 0x80)
          {
LABEL_247:
            LOBYTE(v74) = v72;
          }
          else
          {
            do
            {
              *v73++ = v72 | 0x80;
              unsigned int v74 = v72 >> 7;
              unsigned int v149 = v72 >> 14;
              v72 >>= 7;
            }
            while (v149);
          }
LABEL_248:
          unsigned char *v73 = v74;
          uint64_t v148 = v73 + 1;
          v175[0] = v148;
LABEL_249:
          v175[0] = sub_1DD2F95EC(v11, v148);
          goto LABEL_315;
        case 0x2Au:
        case 0x2Fu:
        case 0x39u:
          sub_1DD2F6E54((int *)v11, a2 + 24 * v8, v175);
          goto LABEL_315;
        case 0x2Bu:
        case 0x30u:
        case 0x38u:
          sub_1DD2F6F80((int *)v11, a2 + 24 * v8, v175);
          goto LABEL_315;
        case 0x2Cu:
        case 0x2Du:
          sub_1DD2F70AC((int *)v11, a2 + 24 * v8, v175);
          goto LABEL_315;
        case 0x2Eu:
        case 0x37u:
          sub_1DD2F7214((int *)v11, a2 + 24 * v8, v175);
          goto LABEL_315;
        case 0x31u:
          sub_1DD2F737C((int *)v11, a2 + 24 * v8, v175);
          goto LABEL_315;
        case 0x32u:
        case 0x35u:
        case 0x3Eu:
          sub_1DD2F74A8((char *)v11, a2 + 24 * v8, v175);
          goto LABEL_315;
        case 0x33u:
          sub_1DD2F7690((uint64_t)v11, a2 + 24 * v8, (uint64_t *)v175);
          goto LABEL_315;
        case 0x34u:
          sub_1DD2F77B8((uint64_t)v11, a2 + 24 * v8, v175);
          goto LABEL_315;
        case 0x36u:
          sub_1DD2F7860((int *)v11, a2 + 24 * v8, v175);
          goto LABEL_315;
        case 0x3Au:
          sub_1DD2F7A3C((int *)v11, a2 + 24 * v8, v175);
          goto LABEL_315;
        case 0x3Bu:
          sub_1DD2F7C28((int *)v11, a2 + 24 * v8, v175);
          goto LABEL_315;
        case 0x3Fu:
        case 0x44u:
        case 0x4Eu:
          sub_1DD2F6ECC((int *)v11, a2 + 24 * v8, v175);
          goto LABEL_315;
        case 0x40u:
        case 0x45u:
        case 0x4Du:
          sub_1DD2F6FF8((int *)v11, a2 + 24 * v8, v175);
          goto LABEL_315;
        case 0x41u:
        case 0x42u:
          sub_1DD2F7144((int *)v11, a2 + 24 * v8, v175);
          goto LABEL_315;
        case 0x43u:
        case 0x4Cu:
          sub_1DD2F72AC((int *)v11, a2 + 24 * v8, v175);
          goto LABEL_315;
        case 0x46u:
          sub_1DD2F73F4((int *)v11, a2 + 24 * v8, v175);
          goto LABEL_315;
        case 0x47u:
        case 0x48u:
        case 0x49u:
        case 0x4Au:
        case 0x53u:
          sub_1DD2F7550((uint64_t)v11, a2 + 24 * v8);
          goto LABEL_315;
        case 0x4Bu:
          sub_1DD2F78F8((int *)v11, a2 + 24 * v8, v175);
          goto LABEL_315;
        case 0x4Fu:
          sub_1DD2F7ADC((int *)v11, a2 + 24 * v8, v175);
          goto LABEL_315;
        case 0x50u:
          sub_1DD2F7CC8((int *)v11, a2 + 24 * v8, v175);
          goto LABEL_315;
        case 0x54u:
          uint64_t v142 = a2 + 24 * v8;
          unsigned int v13 = *(_DWORD *)(v142 + 4);
          if (*(_DWORD *)(a1 + *(unsigned int *)(v142 + 8)) != v13 >> 3) {
            goto LABEL_315;
          }
          uint64_t v14 = v175[0];
          if (v13 < 0x80) {
            goto LABEL_228;
          }
          do
          {
            *v14++ = v13 | 0x80;
            unsigned int v15 = v13 >> 7;
            unsigned int v143 = v13 >> 14;
            v13 >>= 7;
          }
          while (v143);
          goto LABEL_229;
        case 0x55u:
          uint64_t v103 = a2 + 24 * v8;
          unsigned int v18 = *(_DWORD *)(v103 + 4);
          if (*(_DWORD *)(a1 + *(unsigned int *)(v103 + 8)) != v18 >> 3) {
            goto LABEL_315;
          }
          uint64_t v19 = v175[0];
          if (v18 < 0x80) {
            goto LABEL_205;
          }
          do
          {
            *v19++ = v18 | 0x80;
            unsigned int v20 = v18 >> 7;
            unsigned int v104 = v18 >> 14;
            v18 >>= 7;
          }
          while (v104);
          goto LABEL_206;
        case 0x56u:
          uint64_t v105 = a2 + 24 * v8;
          unsigned int v106 = *(_DWORD *)(v105 + 4);
          if (*(_DWORD *)(a1 + *(unsigned int *)(v105 + 8)) != v106 >> 3) {
            goto LABEL_315;
          }
          unsigned int v107 = v175[0];
          if (v106 < 0x80)
          {
            LOBYTE(v108) = v106;
          }
          else
          {
            do
            {
              *v107++ = v106 | 0x80;
              unsigned int v108 = v106 >> 7;
              unsigned int v109 = v106 >> 14;
              v106 >>= 7;
            }
            while (v109);
          }
          *unsigned int v107 = v108;
          uint64_t v150 = v107 + 1;
          double v151 = *(double *)v11;
          if ((unint64_t)*v11 < 0x80) {
            goto LABEL_312;
          }
          do
          {
            *v150++ = LOBYTE(v151) | 0x80;
            uint64_t v152 = *(void *)&v151 >> 7;
            uint64_t v166 = *(void *)&v151 >> 14;
            *(void *)&v151 >>= 7;
          }
          while (v166);
          goto LABEL_313;
        case 0x57u:
          uint64_t v110 = a2 + 24 * v8;
          unsigned int v111 = *(_DWORD *)(v110 + 4);
          if (*(_DWORD *)(a1 + *(unsigned int *)(v110 + 8)) != v111 >> 3) {
            goto LABEL_315;
          }
          uint64_t v112 = v175[0];
          if (v111 < 0x80)
          {
            LOBYTE(v113) = v111;
          }
          else
          {
            do
            {
              *v112++ = v111 | 0x80;
              unsigned int v113 = v111 >> 7;
              unsigned int v114 = v111 >> 14;
              v111 >>= 7;
            }
            while (v114);
          }
          *uint64_t v112 = v113;
          uint64_t v150 = v112 + 1;
          double v151 = *(double *)v11;
          if ((unint64_t)*v11 < 0x80) {
            goto LABEL_312;
          }
          do
          {
            *v150++ = LOBYTE(v151) | 0x80;
            uint64_t v152 = *(void *)&v151 >> 7;
            uint64_t v167 = *(void *)&v151 >> 14;
            *(void *)&v151 >>= 7;
          }
          while (v167);
          goto LABEL_313;
        case 0x58u:
          uint64_t v115 = a2 + 24 * v8;
          unsigned int v116 = *(_DWORD *)(v115 + 4);
          if (*(_DWORD *)(a1 + *(unsigned int *)(v115 + 8)) != v116 >> 3) {
            goto LABEL_315;
          }
          unsigned int v117 = v175[0];
          if (v116 < 0x80)
          {
            LOBYTE(v118) = v116;
          }
          else
          {
            do
            {
              *v117++ = v116 | 0x80;
              unsigned int v118 = v116 >> 7;
              unsigned int v119 = v116 >> 14;
              v116 >>= 7;
            }
            while (v119);
          }
          *unsigned int v117 = v118;
          uint64_t v150 = v117 + 1;
          *(void *)&double v151 = *(int *)v11;
          if (LODWORD(v151) < 0x80) {
            goto LABEL_312;
          }
          do
          {
            *v150++ = LOBYTE(v151) | 0x80;
            uint64_t v152 = *(void *)&v151 >> 7;
            uint64_t v168 = *(void *)&v151 >> 14;
            *(void *)&v151 >>= 7;
          }
          while (v168);
          goto LABEL_313;
        case 0x59u:
          uint64_t v120 = a2 + 24 * v8;
          unsigned int v13 = *(_DWORD *)(v120 + 4);
          if (*(_DWORD *)(a1 + *(unsigned int *)(v120 + 8)) != v13 >> 3) {
            goto LABEL_315;
          }
          uint64_t v14 = v175[0];
          if (v13 < 0x80) {
            goto LABEL_228;
          }
          do
          {
            *v14++ = v13 | 0x80;
            unsigned int v15 = v13 >> 7;
            unsigned int v121 = v13 >> 14;
            v13 >>= 7;
          }
          while (v121);
          goto LABEL_229;
        case 0x5Au:
          uint64_t v122 = a2 + 24 * v8;
          unsigned int v18 = *(_DWORD *)(v122 + 4);
          if (*(_DWORD *)(a1 + *(unsigned int *)(v122 + 8)) != v18 >> 3) {
            goto LABEL_315;
          }
          uint64_t v19 = v175[0];
          if (v18 < 0x80) {
            goto LABEL_205;
          }
          do
          {
            *v19++ = v18 | 0x80;
            unsigned int v20 = v18 >> 7;
            unsigned int v123 = v18 >> 14;
            v18 >>= 7;
          }
          while (v123);
          goto LABEL_206;
        case 0x5Bu:
          uint64_t v124 = a2 + 24 * v8;
          unsigned int v42 = *(_DWORD *)(v124 + 4);
          if (*(_DWORD *)(a1 + *(unsigned int *)(v124 + 8)) != v42 >> 3) {
            goto LABEL_315;
          }
          int v43 = v175[0];
          if (v42 < 0x80)
          {
LABEL_231:
            LOBYTE(v44) = v42;
          }
          else
          {
            do
            {
              *v43++ = v42 | 0x80;
              unsigned int v44 = v42 >> 7;
              unsigned int v125 = v42 >> 14;
              v42 >>= 7;
            }
            while (v125);
          }
LABEL_232:
          *int v43 = v44;
          v43[1] = *(unsigned char *)v11;
          BOOL v140 = v43 + 2;
          goto LABEL_314;
        case 0x5Cu:
          unsigned int v47 = *(_DWORD *)(a2 + 24 * v8 + 4);
          if (*(_DWORD *)(a1 + *(unsigned int *)(a2 + 24 * v8 + 8)) != v47 >> 3) {
            goto LABEL_315;
          }
          char v48 = v175[0];
          if (v47 < 0x80) {
            goto LABEL_241;
          }
          do
          {
            *v48++ = v47 | 0x80;
            unsigned int v49 = v47 >> 7;
            unsigned int v126 = v47 >> 14;
            v47 >>= 7;
          }
          while (v126);
          goto LABEL_242;
        case 0x5Du:
          if (*(_DWORD *)(a1 + *(unsigned int *)(a2 + 24 * v8 + 8)) == *(_DWORD *)(a2 + 24 * v8 + 4) >> 3) {
LABEL_188:
          }
            sub_1DD2F75E8((uint64_t *)v11, a2 + 24 * v8, (uint64_t *)v175);
          goto LABEL_315;
        case 0x5Eu:
          if (*(_DWORD *)(a1 + *(unsigned int *)(a2 + 24 * v8 + 8)) == *(_DWORD *)(a2 + 24 * v8 + 4) >> 3) {
LABEL_223:
          }
            sub_1DD2F7774((uint64_t *)v11, a2 + 24 * v8, v175);
          goto LABEL_315;
        case 0x5Fu:
          unsigned int v47 = *(_DWORD *)(a2 + 24 * v8 + 4);
          if (*(_DWORD *)(a1 + *(unsigned int *)(a2 + 24 * v8 + 8)) != v47 >> 3) {
            goto LABEL_315;
          }
          char v48 = v175[0];
          if (v47 < 0x80) {
            goto LABEL_241;
          }
          do
          {
            *v48++ = v47 | 0x80;
            unsigned int v49 = v47 >> 7;
            unsigned int v127 = v47 >> 14;
            v47 >>= 7;
          }
          while (v127);
          goto LABEL_242;
        case 0x60u:
          uint64_t v128 = a2 + 24 * v8;
          unsigned int v129 = *(_DWORD *)(v128 + 4);
          if (*(_DWORD *)(a1 + *(unsigned int *)(v128 + 8)) != v129 >> 3) {
            goto LABEL_315;
          }
          uint64_t v130 = v175[0];
          if (v129 < 0x80)
          {
            LOBYTE(v131) = v129;
          }
          else
          {
            do
            {
              *v130++ = v129 | 0x80;
              unsigned int v131 = v129 >> 7;
              unsigned int v132 = v129 >> 14;
              v129 >>= 7;
            }
            while (v132);
          }
          *uint64_t v130 = v131;
          unint64_t v156 = v130 + 1;
          unsigned int v157 = *(_DWORD *)v11;
          if (*(_DWORD *)v11 < 0x80u)
          {
LABEL_306:
            LOBYTE(v158) = v157;
          }
          else
          {
            do
            {
              *v156++ = v157 | 0x80;
              unsigned int v158 = v157 >> 7;
              unsigned int v169 = v157 >> 14;
              v157 >>= 7;
            }
            while (v169);
          }
LABEL_307:
          *unint64_t v156 = v158;
          BOOL v140 = v156 + 1;
          goto LABEL_314;
        case 0x61u:
          uint64_t v133 = a2 + 24 * v8;
          unsigned int v134 = *(_DWORD *)(v133 + 4);
          if (*(_DWORD *)(a1 + *(unsigned int *)(v133 + 8)) != v134 >> 3) {
            goto LABEL_315;
          }
          uint64_t v135 = v175[0];
          if (v134 < 0x80)
          {
            LOBYTE(v136) = v134;
          }
          else
          {
            do
            {
              *v135++ = v134 | 0x80;
              unsigned int v136 = v134 >> 7;
              unsigned int v137 = v134 >> 14;
              v134 >>= 7;
            }
            while (v137);
          }
          unsigned char *v135 = v136;
          uint64_t v150 = v135 + 1;
          *(void *)&double v151 = *(int *)v11;
          if (LODWORD(v151) < 0x80)
          {
LABEL_312:
            LOBYTE(v152) = LOBYTE(v151);
          }
          else
          {
            do
            {
              *v150++ = LOBYTE(v151) | 0x80;
              uint64_t v152 = *(void *)&v151 >> 7;
              uint64_t v170 = *(void *)&v151 >> 14;
              *(void *)&v151 >>= 7;
            }
            while (v170);
          }
LABEL_313:
          unsigned char *v150 = v152;
          BOOL v140 = v150 + 1;
          goto LABEL_314;
        case 0x62u:
          uint64_t v138 = a2 + 24 * v8;
          unsigned int v18 = *(_DWORD *)(v138 + 4);
          if (*(_DWORD *)(a1 + *(unsigned int *)(v138 + 8)) != v18 >> 3) {
            goto LABEL_315;
          }
          uint64_t v19 = v175[0];
          if (v18 < 0x80)
          {
LABEL_205:
            LOBYTE(v20) = v18;
          }
          else
          {
            do
            {
              *v19++ = v18 | 0x80;
              unsigned int v20 = v18 >> 7;
              unsigned int v139 = v18 >> 14;
              v18 >>= 7;
            }
            while (v139);
          }
LABEL_206:
          *uint64_t v19 = v20;
          *(_DWORD *)(v19 + 1) = *(_DWORD *)v11;
          BOOL v140 = v19 + 5;
          goto LABEL_314;
        case 0x63u:
          uint64_t v144 = a2 + 24 * v8;
          unsigned int v13 = *(_DWORD *)(v144 + 4);
          if (*(_DWORD *)(a1 + *(unsigned int *)(v144 + 8)) != v13 >> 3) {
            goto LABEL_315;
          }
          uint64_t v14 = v175[0];
          if (v13 < 0x80)
          {
LABEL_228:
            LOBYTE(v15) = v13;
          }
          else
          {
            do
            {
              *v14++ = v13 | 0x80;
              unsigned int v15 = v13 >> 7;
              unsigned int v145 = v13 >> 14;
              v13 >>= 7;
            }
            while (v145);
          }
LABEL_229:
          *uint64_t v14 = v15;
          *(void *)(v14 + 1) = *v11;
          BOOL v140 = v14 + 9;
LABEL_314:
          v175[0] = v140;
          goto LABEL_315;
        case 0x64u:
          if (*(_DWORD *)(a1 + *(unsigned int *)(a2 + 24 * v8 + 8)) == *(_DWORD *)(a2 + 24 * v8 + 4) >> 3) {
LABEL_208:
          }
            sub_1DD2F79C8((int *)v11, a2 + 24 * v8, v175);
          goto LABEL_315;
        case 0x65u:
          if (*(_DWORD *)(a1 + *(unsigned int *)(a2 + 24 * v8 + 8)) == *(_DWORD *)(a2 + 24 * v8 + 4) >> 3) {
LABEL_210:
          }
            sub_1DD2F7BB4((uint64_t *)v11, a2 + 24 * v8, v175);
          goto LABEL_315;
        case 0x68u:
          unsigned int v72 = *(_DWORD *)(a2 + 24 * v8 + 4);
          if (*(_DWORD *)(a1 + *(unsigned int *)(a2 + 24 * v8 + 8)) != v72 >> 3) {
            goto LABEL_315;
          }
          uint64_t v11 = (const void **)*v11;
          uint64_t v73 = v175[0];
          if (v72 < 0x80) {
            goto LABEL_247;
          }
          do
          {
            *v73++ = v72 | 0x80;
            unsigned int v74 = v72 >> 7;
            unsigned int v141 = v72 >> 14;
            v72 >>= 7;
          }
          while (v141);
          goto LABEL_248;
        case 0x69u:
          sub_1DD2F96F0((uint64_t)v174, (uint64_t)v175[0], 0x7FFFFFFF, -1);
          sub_1DD2F9130((uint64_t)v172, (uint64_t)v174);
          unsigned __int8 v173 = a4;
          (*(void (**)(uint64_t, void, void, void, int *))(a2 + 24 * v8 + 16))(a1, *v10, *(unsigned int *)(a2 + 24 * v8 + 4), *(unsigned int *)(a2 + 24 * v8 + 8), v172);
          v175[0] = &v175[0][v172[5] - v172[4]];
          sub_1DD2F92B4(v172);
          goto LABEL_315;
        default:
          sub_1DD2F6DD0(v10[3]);
          goto LABEL_315;
      }
      break;
    }
  }
  return a5;
}

void sub_1DD2F6C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
}

uint64_t sub_1DD2F6DD0(int a1)
{
  sub_1DD2FAF50((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/generated_message_util.cc", 571);
  uint64_t v2 = sub_1DD2FAF68(v6, "Not implemented field number ");
  BOOL v3 = sub_1DD2FB278(v2, a1);
  sub_1DD2FB0A4((uint64_t)&v5, (const char **)&v3->__r_.__value_.__l.__data_);
  return sub_1DD2FB0AC((uint64_t)v6);
}

void sub_1DD2F6E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1DD2FB0AC((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_1DD2F6E54(int *result, uint64_t a2, unsigned char **a3)
{
  if (*result >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *a3;
    do
    {
      unsigned int v5 = *(_DWORD *)(a2 + 4);
      if (v5 < 0x80)
      {
        unsigned int v6 = *(_DWORD *)(a2 + 4);
      }
      else
      {
        do
        {
          *v4++ = v5 | 0x80;
          unsigned int v6 = v5 >> 7;
          unsigned int v7 = v5 >> 14;
          v5 >>= 7;
        }
        while (v7);
      }
      *uint64_t v4 = v6;
      *a3 = v4 + 1;
      *(void *)(v4 + 1) = *(void *)(*((void *)result + 1) + 8 * v3 + 8);
      v4 += 9;
      *a3 = v4;
      ++v3;
    }
    while (v3 < *result);
  }
  return result;
}

int *sub_1DD2F6ECC(int *result, uint64_t a2, unsigned char **a3)
{
  if (*result)
  {
    unsigned int v3 = *(_DWORD *)(a2 + 4);
    uint64_t v4 = *a3;
    if (v3 < 0x80)
    {
      unsigned int v5 = *(_DWORD *)(a2 + 4);
    }
    else
    {
      do
      {
        *v4++ = v3 | 0x80;
        unsigned int v5 = v3 >> 7;
        unsigned int v6 = v3 >> 14;
        v3 >>= 7;
      }
      while (v6);
    }
    *uint64_t v4 = v5;
    unsigned int v7 = v4 + 1;
    unsigned int v8 = result[4];
    if (v8 < 0x80)
    {
      unsigned int v9 = result[4];
    }
    else
    {
      do
      {
        *v7++ = v8 | 0x80;
        unsigned int v9 = v8 >> 7;
        unsigned int v10 = v8 >> 14;
        v8 >>= 7;
      }
      while (v10);
    }
    *unsigned int v7 = v9;
    *a3 = v7 + 1;
    if (*result >= 1)
    {
      uint64_t v11 = v7 + 9;
      uint64_t v12 = 1;
      do
      {
        *((void *)v11 - 1) = *(void *)(*((void *)result + 1) + 8 * v12);
        *a3 = v11;
        v11 += 8;
      }
      while (v12++ < *result);
    }
  }
  return result;
}

int *sub_1DD2F6F80(int *result, uint64_t a2, unsigned char **a3)
{
  if (*result >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *a3;
    do
    {
      unsigned int v5 = *(_DWORD *)(a2 + 4);
      if (v5 < 0x80)
      {
        unsigned int v6 = *(_DWORD *)(a2 + 4);
      }
      else
      {
        do
        {
          *v4++ = v5 | 0x80;
          unsigned int v6 = v5 >> 7;
          unsigned int v7 = v5 >> 14;
          v5 >>= 7;
        }
        while (v7);
      }
      *uint64_t v4 = v6;
      *a3 = v4 + 1;
      *(_DWORD *)(v4 + 1) = *(_DWORD *)(*((void *)result + 1) + 4 * v3 + 8);
      v4 += 5;
      *a3 = v4;
      ++v3;
    }
    while (v3 < *result);
  }
  return result;
}

int *sub_1DD2F6FF8(int *result, uint64_t a2, unsigned char **a3)
{
  if (*result)
  {
    unsigned int v3 = *(_DWORD *)(a2 + 4);
    uint64_t v4 = *a3;
    if (v3 < 0x80)
    {
      unsigned int v5 = *(_DWORD *)(a2 + 4);
    }
    else
    {
      do
      {
        *v4++ = v3 | 0x80;
        unsigned int v5 = v3 >> 7;
        unsigned int v6 = v3 >> 14;
        v3 >>= 7;
      }
      while (v6);
    }
    *uint64_t v4 = v5;
    unsigned int v7 = v4 + 1;
    unsigned int v8 = result[4];
    if (v8 < 0x80)
    {
      unsigned int v9 = result[4];
    }
    else
    {
      do
      {
        *v7++ = v8 | 0x80;
        unsigned int v9 = v8 >> 7;
        unsigned int v10 = v8 >> 14;
        v8 >>= 7;
      }
      while (v10);
    }
    *unsigned int v7 = v9;
    *a3 = v7 + 1;
    if (*result >= 1)
    {
      uint64_t v11 = v7 + 5;
      uint64_t v12 = 2;
      do
      {
        *((_DWORD *)v11 - 1) = *(_DWORD *)(*((void *)result + 1) + 4 * v12);
        *a3 = v11;
        v11 += 4;
        uint64_t v13 = v12++ - 1;
      }
      while (v13 < *result);
    }
  }
  return result;
}

int *sub_1DD2F70AC(int *result, uint64_t a2, unsigned char **a3)
{
  if (*result >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *a3;
    do
    {
      unsigned int v5 = *(_DWORD *)(a2 + 4);
      if (v5 < 0x80)
      {
        unsigned int v6 = *(_DWORD *)(a2 + 4);
      }
      else
      {
        do
        {
          *v4++ = v5 | 0x80;
          unsigned int v6 = v5 >> 7;
          unsigned int v7 = v5 >> 14;
          v5 >>= 7;
        }
        while (v7);
      }
      *uint64_t v4 = v6;
      unsigned int v8 = v4 + 1;
      *a3 = v8;
      unint64_t v9 = *(void *)(*((void *)result + 1) + 8 * v3 + 8);
      if (v9 < 0x80)
      {
        unint64_t v10 = *(void *)(*((void *)result + 1) + 8 * v3 + 8);
      }
      else
      {
        do
        {
          *v8++ = v9 | 0x80;
          unint64_t v10 = v9 >> 7;
          unint64_t v11 = v9 >> 14;
          v9 >>= 7;
        }
        while (v11);
      }
      *unsigned int v8 = v10;
      uint64_t v4 = v8 + 1;
      *a3 = v4;
      ++v3;
    }
    while (v3 < *result);
  }
  return result;
}

int *sub_1DD2F7144(int *result, uint64_t a2, unsigned char **a3)
{
  if (*result)
  {
    unsigned int v3 = *(_DWORD *)(a2 + 4);
    uint64_t v4 = *a3;
    if (v3 < 0x80)
    {
      unsigned int v5 = *(_DWORD *)(a2 + 4);
    }
    else
    {
      do
      {
        *v4++ = v3 | 0x80;
        unsigned int v5 = v3 >> 7;
        unsigned int v6 = v3 >> 14;
        v3 >>= 7;
      }
      while (v6);
    }
    *uint64_t v4 = v5;
    unsigned int v7 = v4 + 1;
    unsigned int v8 = result[4];
    if (v8 < 0x80)
    {
      unsigned int v9 = result[4];
    }
    else
    {
      do
      {
        *v7++ = v8 | 0x80;
        unsigned int v9 = v8 >> 7;
        unsigned int v10 = v8 >> 14;
        v8 >>= 7;
      }
      while (v10);
    }
    *unsigned int v7 = v9;
    unint64_t v11 = v7 + 1;
    *a3 = v11;
    if (*result >= 1)
    {
      uint64_t v12 = 0;
      do
      {
        unint64_t v13 = *(void *)(*((void *)result + 1) + 8 * v12 + 8);
        if (v13 < 0x80)
        {
          unint64_t v14 = *(void *)(*((void *)result + 1) + 8 * v12 + 8);
        }
        else
        {
          do
          {
            *v11++ = v13 | 0x80;
            unint64_t v14 = v13 >> 7;
            unint64_t v15 = v13 >> 14;
            v13 >>= 7;
          }
          while (v15);
        }
        *v11++ = v14;
        *a3 = v11;
        ++v12;
      }
      while (v12 < *result);
    }
  }
  return result;
}

int *sub_1DD2F7214(int *result, uint64_t a2, unsigned char **a3)
{
  if (*result >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *a3;
    do
    {
      unsigned int v5 = *(_DWORD *)(a2 + 4);
      if (v5 < 0x80)
      {
        unsigned int v6 = *(_DWORD *)(a2 + 4);
      }
      else
      {
        do
        {
          *v4++ = v5 | 0x80;
          unsigned int v6 = v5 >> 7;
          unsigned int v7 = v5 >> 14;
          v5 >>= 7;
        }
        while (v7);
      }
      *uint64_t v4 = v6;
      unsigned int v8 = v4 + 1;
      *a3 = v8;
      unint64_t v9 = *(int *)(*((void *)result + 1) + 4 * v3 + 8);
      if (v9 < 0x80)
      {
        LODWORD(v10) = *(_DWORD *)(*((void *)result + 1) + 4 * v3 + 8);
      }
      else
      {
        do
        {
          *v8++ = v9 | 0x80;
          unint64_t v10 = v9 >> 7;
          unint64_t v11 = v9 >> 14;
          v9 >>= 7;
        }
        while (v11);
      }
      *unsigned int v8 = v10;
      uint64_t v4 = v8 + 1;
      *a3 = v4;
      ++v3;
    }
    while (v3 < *result);
  }
  return result;
}

int *sub_1DD2F72AC(int *result, uint64_t a2, unsigned char **a3)
{
  if (*result)
  {
    unsigned int v3 = *(_DWORD *)(a2 + 4);
    uint64_t v4 = *a3;
    if (v3 < 0x80)
    {
      unsigned int v5 = *(_DWORD *)(a2 + 4);
    }
    else
    {
      do
      {
        *v4++ = v3 | 0x80;
        unsigned int v5 = v3 >> 7;
        unsigned int v6 = v3 >> 14;
        v3 >>= 7;
      }
      while (v6);
    }
    *uint64_t v4 = v5;
    unsigned int v7 = v4 + 1;
    unsigned int v8 = result[4];
    if (v8 < 0x80)
    {
      unsigned int v9 = result[4];
    }
    else
    {
      do
      {
        *v7++ = v8 | 0x80;
        unsigned int v9 = v8 >> 7;
        unsigned int v10 = v8 >> 14;
        v8 >>= 7;
      }
      while (v10);
    }
    *unsigned int v7 = v9;
    unint64_t v11 = v7 + 1;
    *a3 = v11;
    if (*result >= 1)
    {
      uint64_t v12 = 0;
      do
      {
        unint64_t v13 = *(int *)(*((void *)result + 1) + 4 * v12 + 8);
        if (v13 < 0x80)
        {
          LODWORD(v14) = *(_DWORD *)(*((void *)result + 1) + 4 * v12 + 8);
        }
        else
        {
          do
          {
            *v11++ = v13 | 0x80;
            unint64_t v14 = v13 >> 7;
            unint64_t v15 = v13 >> 14;
            v13 >>= 7;
          }
          while (v15);
        }
        *v11++ = v14;
        *a3 = v11;
        ++v12;
      }
      while (v12 < *result);
    }
  }
  return result;
}

int *sub_1DD2F737C(int *result, uint64_t a2, unsigned char **a3)
{
  if (*result >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *a3;
    do
    {
      unsigned int v5 = *(_DWORD *)(a2 + 4);
      if (v5 < 0x80)
      {
        unsigned int v6 = *(_DWORD *)(a2 + 4);
      }
      else
      {
        do
        {
          *v4++ = v5 | 0x80;
          unsigned int v6 = v5 >> 7;
          unsigned int v7 = v5 >> 14;
          v5 >>= 7;
        }
        while (v7);
      }
      *uint64_t v4 = v6;
      *a3 = v4 + 1;
      v4[1] = *(unsigned char *)(*((void *)result + 1) + v3 + 8);
      v4 += 2;
      *a3 = v4;
      ++v3;
    }
    while (v3 < *result);
  }
  return result;
}

int *sub_1DD2F73F4(int *result, uint64_t a2, unsigned char **a3)
{
  if (*result)
  {
    unsigned int v3 = *(_DWORD *)(a2 + 4);
    uint64_t v4 = *a3;
    if (v3 < 0x80)
    {
      unsigned int v5 = *(_DWORD *)(a2 + 4);
    }
    else
    {
      do
      {
        *v4++ = v3 | 0x80;
        unsigned int v5 = v3 >> 7;
        unsigned int v6 = v3 >> 14;
        v3 >>= 7;
      }
      while (v6);
    }
    *uint64_t v4 = v5;
    unsigned int v7 = v4 + 1;
    unsigned int v8 = result[4];
    if (v8 < 0x80)
    {
      unsigned int v9 = result[4];
    }
    else
    {
      do
      {
        *v7++ = v8 | 0x80;
        unsigned int v9 = v8 >> 7;
        unsigned int v10 = v8 >> 14;
        v8 >>= 7;
      }
      while (v10);
    }
    *unsigned int v7 = v9;
    *a3 = v7 + 1;
    if (*result >= 1)
    {
      uint64_t v11 = 0;
      do
      {
        v7[v11 + 1] = *(unsigned char *)(*((void *)result + 1) + v11 + 8);
        *a3 = &v7[v11++ + 2];
      }
      while (v11 < *result);
    }
  }
  return result;
}

char *sub_1DD2F74A8(char *result, uint64_t a2, char **a3)
{
  if (*((int *)result + 2) >= 1)
  {
    unsigned int v5 = result;
    uint64_t v6 = 0;
    unsigned int v7 = *a3;
    do
    {
      unsigned int v8 = *(_DWORD *)(a2 + 4);
      if (v8 < 0x80)
      {
        unsigned int v9 = *(_DWORD *)(a2 + 4);
      }
      else
      {
        do
        {
          *v7++ = v8 | 0x80;
          unsigned int v9 = v8 >> 7;
          unsigned int v10 = v8 >> 14;
          v8 >>= 7;
        }
        while (v10);
      }
      *unsigned int v7 = v9;
      uint64_t v11 = v7 + 1;
      *a3 = v11;
      uint64_t v12 = *((void *)v5 + 2);
      if (v12) {
        uint64_t v13 = v12 + 8;
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t result = sub_1DD2F95EC(*(const void ***)(v13 + 8 * v6), v11);
      unsigned int v7 = result;
      *a3 = result;
      ++v6;
    }
    while (v6 < *((int *)v5 + 2));
  }
  return result;
}

uint64_t sub_1DD2F7550(uint64_t a1, uint64_t a2)
{
  sub_1DD2FAF50((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/generated_message_util.cc", 534);
  unsigned int v3 = sub_1DD2FAF68(v9, "Not implemented field number ");
  uint64_t v4 = sub_1DD2FB2F8(v3, *(_DWORD *)(a2 + 4));
  unsigned int v5 = sub_1DD2FAF68(v4, " with type ");
  uint64_t v6 = sub_1DD2FB2F8(v5, *(_DWORD *)(a2 + 12));
  sub_1DD2FB0A4((uint64_t)&v8, (const char **)&v6->__r_.__value_.__l.__data_);
  return sub_1DD2FB0AC((uint64_t)v9);
}

void sub_1DD2F75D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1DD2FB0AC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1DD2F75E8(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v5 = *(_DWORD *)(a2 + 4);
  uint64_t v6 = (unsigned char *)*a3;
  if (v5 < 0x80)
  {
    unsigned int v7 = *(_DWORD *)(a2 + 4);
  }
  else
  {
    do
    {
      *v6++ = v5 | 0x80;
      unsigned int v7 = v5 >> 7;
      unsigned int v8 = v5 >> 14;
      v5 >>= 7;
    }
    while (v8);
  }
  *uint64_t v6 = v7;
  *a3 = (uint64_t)(v6 + 1);
  uint64_t result = sub_1DD2F7F74(*a1, *(void *)(a2 + 16), a3);
  unsigned int v10 = *(_DWORD *)(a2 + 4) + 1;
  uint64_t v11 = (unsigned char *)*a3;
  if (v10 < 0x80)
  {
    int v12 = *(_DWORD *)(a2 + 4) + 1;
  }
  else
  {
    do
    {
      *v11++ = v10 | 0x80;
      int v12 = v10 >> 7;
      unsigned int v13 = v10 >> 14;
      v10 >>= 7;
    }
    while (v13);
  }
  *uint64_t v11 = v12;
  *a3 = (uint64_t)(v11 + 1);
  return result;
}

uint64_t sub_1DD2F7690(uint64_t result, uint64_t a2, uint64_t *a3)
{
  if (*(int *)(result + 8) >= 1)
  {
    uint64_t v5 = result;
    uint64_t v6 = 0;
    unsigned int v7 = (unsigned char *)*a3;
    do
    {
      unsigned int v8 = *(_DWORD *)(a2 + 4);
      if (v8 < 0x80)
      {
        unsigned int v9 = *(_DWORD *)(a2 + 4);
      }
      else
      {
        do
        {
          *v7++ = v8 | 0x80;
          unsigned int v9 = v8 >> 7;
          unsigned int v10 = v8 >> 14;
          v8 >>= 7;
        }
        while (v10);
      }
      *unsigned int v7 = v9;
      *a3 = (uint64_t)(v7 + 1);
      uint64_t v11 = *(void *)(v5 + 16);
      if (v11) {
        uint64_t v12 = v11 + 8;
      }
      else {
        uint64_t v12 = 0;
      }
      uint64_t result = sub_1DD2F7F74(*(void *)(v12 + 8 * v6), *(void *)(a2 + 16), a3);
      unsigned int v13 = *(_DWORD *)(a2 + 4) + 1;
      unint64_t v14 = (unsigned char *)*a3;
      if (v13 < 0x80)
      {
        int v15 = *(_DWORD *)(a2 + 4) + 1;
      }
      else
      {
        do
        {
          *v14++ = v13 | 0x80;
          int v15 = v13 >> 7;
          unsigned int v16 = v13 >> 14;
          v13 >>= 7;
        }
        while (v16);
      }
      *unint64_t v14 = v15;
      unsigned int v7 = v14 + 1;
      *a3 = (uint64_t)v7;
      ++v6;
    }
    while (v6 < *(int *)(v5 + 8));
  }
  return result;
}

uint64_t sub_1DD2F7774(uint64_t *a1, uint64_t a2, void *a3)
{
  unsigned int v3 = *(_DWORD *)(a2 + 4);
  uint64_t v4 = (unsigned char *)*a3;
  if (v3 < 0x80)
  {
    unsigned int v5 = *(_DWORD *)(a2 + 4);
  }
  else
  {
    do
    {
      *v4++ = v3 | 0x80;
      unsigned int v5 = v3 >> 7;
      unsigned int v6 = v3 >> 14;
      v3 >>= 7;
    }
    while (v6);
  }
  *uint64_t v4 = v5;
  *a3 = v4 + 1;
  return sub_1DD2F7FE8(*a1, *(void *)(a2 + 16), (uint64_t)a3);
}

uint64_t sub_1DD2F77B8(uint64_t result, uint64_t a2, void *a3)
{
  if (*(int *)(result + 8) >= 1)
  {
    uint64_t v5 = result;
    uint64_t v6 = 0;
    do
    {
      unsigned int v7 = *(_DWORD *)(a2 + 4);
      unsigned int v8 = (unsigned char *)*a3;
      if (v7 < 0x80)
      {
        unsigned int v9 = *(_DWORD *)(a2 + 4);
      }
      else
      {
        do
        {
          *v8++ = v7 | 0x80;
          unsigned int v9 = v7 >> 7;
          unsigned int v10 = v7 >> 14;
          v7 >>= 7;
        }
        while (v10);
      }
      *unsigned int v8 = v9;
      *a3 = v8 + 1;
      uint64_t v11 = *(void *)(v5 + 16);
      if (v11) {
        uint64_t v12 = v11 + 8;
      }
      else {
        uint64_t v12 = 0;
      }
      uint64_t result = sub_1DD2F7FE8(*(void *)(v12 + 8 * v6++), *(void *)(a2 + 16), (uint64_t)a3);
    }
    while (v6 < *(int *)(v5 + 8));
  }
  return result;
}

int *sub_1DD2F7860(int *result, uint64_t a2, unsigned char **a3)
{
  if (*result >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *a3;
    do
    {
      unsigned int v5 = *(_DWORD *)(a2 + 4);
      if (v5 < 0x80)
      {
        unsigned int v6 = *(_DWORD *)(a2 + 4);
      }
      else
      {
        do
        {
          *v4++ = v5 | 0x80;
          unsigned int v6 = v5 >> 7;
          unsigned int v7 = v5 >> 14;
          v5 >>= 7;
        }
        while (v7);
      }
      *uint64_t v4 = v6;
      unsigned int v8 = v4 + 1;
      *a3 = v8;
      unsigned int v9 = *(_DWORD *)(*((void *)result + 1) + 4 * v3 + 8);
      if (v9 < 0x80)
      {
        unsigned int v10 = *(_DWORD *)(*((void *)result + 1) + 4 * v3 + 8);
      }
      else
      {
        do
        {
          *v8++ = v9 | 0x80;
          unsigned int v10 = v9 >> 7;
          unsigned int v11 = v9 >> 14;
          v9 >>= 7;
        }
        while (v11);
      }
      *unsigned int v8 = v10;
      uint64_t v4 = v8 + 1;
      *a3 = v4;
      ++v3;
    }
    while (v3 < *result);
  }
  return result;
}

int *sub_1DD2F78F8(int *result, uint64_t a2, unsigned char **a3)
{
  if (*result)
  {
    unsigned int v3 = *(_DWORD *)(a2 + 4);
    uint64_t v4 = *a3;
    if (v3 < 0x80)
    {
      unsigned int v5 = *(_DWORD *)(a2 + 4);
    }
    else
    {
      do
      {
        *v4++ = v3 | 0x80;
        unsigned int v5 = v3 >> 7;
        unsigned int v6 = v3 >> 14;
        v3 >>= 7;
      }
      while (v6);
    }
    *uint64_t v4 = v5;
    unsigned int v7 = v4 + 1;
    unsigned int v8 = result[4];
    if (v8 < 0x80)
    {
      unsigned int v9 = result[4];
    }
    else
    {
      do
      {
        *v7++ = v8 | 0x80;
        unsigned int v9 = v8 >> 7;
        unsigned int v10 = v8 >> 14;
        v8 >>= 7;
      }
      while (v10);
    }
    *unsigned int v7 = v9;
    unsigned int v11 = v7 + 1;
    *a3 = v11;
    if (*result >= 1)
    {
      uint64_t v12 = 0;
      do
      {
        unsigned int v13 = *(_DWORD *)(*((void *)result + 1) + 4 * v12 + 8);
        if (v13 < 0x80)
        {
          unsigned int v14 = *(_DWORD *)(*((void *)result + 1) + 4 * v12 + 8);
        }
        else
        {
          do
          {
            *v11++ = v13 | 0x80;
            unsigned int v14 = v13 >> 7;
            unsigned int v15 = v13 >> 14;
            v13 >>= 7;
          }
          while (v15);
        }
        *v11++ = v14;
        *a3 = v11;
        ++v12;
      }
      while (v12 < *result);
    }
  }
  return result;
}

int *sub_1DD2F79C8(int *result, uint64_t a2, unsigned char **a3)
{
  unsigned int v3 = *(_DWORD *)(a2 + 4);
  uint64_t v4 = *a3;
  if (v3 < 0x80)
  {
    unsigned int v5 = *(_DWORD *)(a2 + 4);
  }
  else
  {
    do
    {
      *v4++ = v3 | 0x80;
      unsigned int v5 = v3 >> 7;
      unsigned int v6 = v3 >> 14;
      v3 >>= 7;
    }
    while (v6);
  }
  *uint64_t v4 = v5;
  unsigned int v7 = v4 + 1;
  unsigned int v8 = (2 * *result) ^ (*result >> 31);
  if (v8 < 0x80)
  {
    int v9 = (2 * *result) ^ (*result >> 31);
  }
  else
  {
    do
    {
      *v7++ = v8 | 0x80;
      int v9 = v8 >> 7;
      unsigned int v10 = v8 >> 14;
      v8 >>= 7;
    }
    while (v10);
  }
  *unsigned int v7 = v9;
  *a3 = v7 + 1;
  return result;
}

int *sub_1DD2F7A3C(int *result, uint64_t a2, unsigned char **a3)
{
  if (*result >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *a3;
    do
    {
      unsigned int v5 = *(_DWORD *)(a2 + 4);
      if (v5 < 0x80)
      {
        unsigned int v6 = *(_DWORD *)(a2 + 4);
      }
      else
      {
        do
        {
          *v4++ = v5 | 0x80;
          unsigned int v6 = v5 >> 7;
          unsigned int v7 = v5 >> 14;
          v5 >>= 7;
        }
        while (v7);
      }
      *uint64_t v4 = v6;
      unsigned int v8 = v4 + 1;
      *a3 = v8;
      int v9 = *(_DWORD *)(*((void *)result + 1) + 4 * v3 + 8);
      unsigned int v10 = (2 * v9) ^ (v9 >> 31);
      if (v10 < 0x80)
      {
        LOBYTE(v11) = v10;
      }
      else
      {
        do
        {
          *v8++ = v10 | 0x80;
          unsigned int v11 = v10 >> 7;
          unsigned int v12 = v10 >> 14;
          v10 >>= 7;
        }
        while (v12);
      }
      *unsigned int v8 = v11;
      uint64_t v4 = v8 + 1;
      *a3 = v4;
      ++v3;
    }
    while (v3 < *result);
  }
  return result;
}

int *sub_1DD2F7ADC(int *result, uint64_t a2, unsigned char **a3)
{
  if (*result)
  {
    unsigned int v3 = *(_DWORD *)(a2 + 4);
    uint64_t v4 = *a3;
    if (v3 < 0x80)
    {
      unsigned int v5 = *(_DWORD *)(a2 + 4);
    }
    else
    {
      do
      {
        *v4++ = v3 | 0x80;
        unsigned int v5 = v3 >> 7;
        unsigned int v6 = v3 >> 14;
        v3 >>= 7;
      }
      while (v6);
    }
    *uint64_t v4 = v5;
    unsigned int v7 = v4 + 1;
    unsigned int v8 = result[4];
    if (v8 < 0x80)
    {
      unsigned int v9 = result[4];
    }
    else
    {
      do
      {
        *v7++ = v8 | 0x80;
        unsigned int v9 = v8 >> 7;
        unsigned int v10 = v8 >> 14;
        v8 >>= 7;
      }
      while (v10);
    }
    *unsigned int v7 = v9;
    unsigned int v11 = v7 + 1;
    *a3 = v11;
    if (*result >= 1)
    {
      uint64_t v12 = 0;
      do
      {
        int v13 = *(_DWORD *)(*((void *)result + 1) + 4 * v12 + 8);
        unsigned int v14 = (2 * v13) ^ (v13 >> 31);
        if (v14 < 0x80)
        {
          LOBYTE(v15) = v14;
        }
        else
        {
          do
          {
            *v11++ = v14 | 0x80;
            unsigned int v15 = v14 >> 7;
            unsigned int v16 = v14 >> 14;
            v14 >>= 7;
          }
          while (v16);
        }
        *v11++ = v15;
        *a3 = v11;
        ++v12;
      }
      while (v12 < *result);
    }
  }
  return result;
}

uint64_t *sub_1DD2F7BB4(uint64_t *result, uint64_t a2, unsigned char **a3)
{
  unsigned int v3 = *(_DWORD *)(a2 + 4);
  uint64_t v4 = *a3;
  if (v3 < 0x80)
  {
    unsigned int v5 = *(_DWORD *)(a2 + 4);
  }
  else
  {
    do
    {
      *v4++ = v3 | 0x80;
      unsigned int v5 = v3 >> 7;
      unsigned int v6 = v3 >> 14;
      v3 >>= 7;
    }
    while (v6);
  }
  *uint64_t v4 = v5;
  unsigned int v7 = v4 + 1;
  unint64_t v8 = (2 * *result) ^ (*result >> 63);
  if (v8 < 0x80)
  {
    uint64_t v9 = (2 * *result) ^ (*result >> 63);
  }
  else
  {
    do
    {
      *v7++ = v8 | 0x80;
      uint64_t v9 = v8 >> 7;
      unint64_t v10 = v8 >> 14;
      v8 >>= 7;
    }
    while (v10);
  }
  *unsigned int v7 = v9;
  *a3 = v7 + 1;
  return result;
}

int *sub_1DD2F7C28(int *result, uint64_t a2, unsigned char **a3)
{
  if (*result >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *a3;
    do
    {
      unsigned int v5 = *(_DWORD *)(a2 + 4);
      if (v5 < 0x80)
      {
        unsigned int v6 = *(_DWORD *)(a2 + 4);
      }
      else
      {
        do
        {
          *v4++ = v5 | 0x80;
          unsigned int v6 = v5 >> 7;
          unsigned int v7 = v5 >> 14;
          v5 >>= 7;
        }
        while (v7);
      }
      *uint64_t v4 = v6;
      unint64_t v8 = v4 + 1;
      *a3 = v8;
      uint64_t v9 = *(void *)(*((void *)result + 1) + 8 * v3 + 8);
      unint64_t v10 = (2 * v9) ^ (v9 >> 63);
      if (v10 < 0x80)
      {
        LOBYTE(v11) = v10;
      }
      else
      {
        do
        {
          *v8++ = v10 | 0x80;
          unint64_t v11 = v10 >> 7;
          unint64_t v12 = v10 >> 14;
          v10 >>= 7;
        }
        while (v12);
      }
      *unint64_t v8 = v11;
      uint64_t v4 = v8 + 1;
      *a3 = v4;
      ++v3;
    }
    while (v3 < *result);
  }
  return result;
}

int *sub_1DD2F7CC8(int *result, uint64_t a2, unsigned char **a3)
{
  if (*result)
  {
    unsigned int v3 = *(_DWORD *)(a2 + 4);
    uint64_t v4 = *a3;
    if (v3 < 0x80)
    {
      unsigned int v5 = *(_DWORD *)(a2 + 4);
    }
    else
    {
      do
      {
        *v4++ = v3 | 0x80;
        unsigned int v5 = v3 >> 7;
        unsigned int v6 = v3 >> 14;
        v3 >>= 7;
      }
      while (v6);
    }
    *uint64_t v4 = v5;
    unsigned int v7 = v4 + 1;
    unsigned int v8 = result[4];
    if (v8 < 0x80)
    {
      unsigned int v9 = result[4];
    }
    else
    {
      do
      {
        *v7++ = v8 | 0x80;
        unsigned int v9 = v8 >> 7;
        unsigned int v10 = v8 >> 14;
        v8 >>= 7;
      }
      while (v10);
    }
    *unsigned int v7 = v9;
    unint64_t v11 = v7 + 1;
    *a3 = v11;
    if (*result >= 1)
    {
      uint64_t v12 = 0;
      do
      {
        uint64_t v13 = *(void *)(*((void *)result + 1) + 8 * v12 + 8);
        unint64_t v14 = (2 * v13) ^ (v13 >> 63);
        if (v14 < 0x80)
        {
          LOBYTE(v15) = v14;
        }
        else
        {
          do
          {
            *v11++ = v14 | 0x80;
            unint64_t v15 = v14 >> 7;
            unint64_t v16 = v14 >> 14;
            v14 >>= 7;
          }
          while (v16);
        }
        *v11++ = v15;
        *a3 = v11;
        ++v12;
      }
      while (v12 < *result);
    }
  }
  return result;
}

void sub_1DD2F7DA0(_DWORD *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EAB1F840, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EAB1F840))
  {
    __cxa_atexit((void (*)(void *))std::mutex::~mutex, &stru_1EAB1EB70, &dword_1DD237000);
    __cxa_guard_release(&qword_1EAB1F840);
  }
  pthread_t v2 = pthread_self();
  uint64_t v3 = (uint64_t)v2;
  if (qword_1EAB1F888)
  {
    if (v2 && v2 == (pthread_t)qword_1EAB1F888) {
      goto LABEL_5;
    }
  }
  else if (!v2)
  {
LABEL_5:
    if (*a1 != 1)
    {
      sub_1DD2FAF50((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/generated_message_util.cc", 801);
      uint64_t v4 = sub_1DD2FAF68(v6, "CHECK failed: (scc->visit_status.load(std::memory_order_relaxed)) == (SCCInfoBase::kRunning): ");
      sub_1DD2FB0A4((uint64_t)&v5, (const char **)&v4->__r_.__value_.__l.__data_);
      sub_1DD2FB0AC((uint64_t)v6);
    }
    return;
  }
  sub_1DD2F5718();
  std::mutex::lock(&stru_1EAB1EB70);
  qword_1EAB1F888 = v3;
  sub_1DD2F7EFC(a1);
  qword_1EAB1F888 = 0;
  std::mutex::unlock(&stru_1EAB1EB70);
}

void sub_1DD2F7EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1DD2FB0AC((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_1DD2F7EFC(_DWORD *result)
{
  if (*result == -1)
  {
    int v1 = (uint64_t (**)(void))result;
    *uint64_t result = 1;
    int v2 = result[1];
    if (v2 >= 1)
    {
      for (uint64_t i = 0; i < v2; ++i)
      {
        if (v1[i + 2])
        {
          sub_1DD2F7EFC();
          int v2 = *((_DWORD *)v1 + 1);
        }
      }
    }
    uint64_t result = (_DWORD *)v1[1]();
    atomic_store(0, (unsigned int *)v1);
  }
  return result;
}

uint64_t sub_1DD2F7F74(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (a2) {
    uint64_t result = sub_1DD2F57B4(a1, *(void *)(a2 + 8) + 24, (*(_DWORD *)a2 - 1), *((unsigned __int8 *)a3 + 8), *a3);
  }
  else {
    uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 128))(a1, *((unsigned __int8 *)a3 + 8), *a3);
  }
  *a3 = result;
  return result;
}

uint64_t sub_1DD2F7FE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    char v5 = *(unsigned int **)(a2 + 8);
    unsigned int v6 = *(_DWORD *)(a1 + *v5);
    unsigned int v7 = *(unsigned char **)a3;
    if (v6 < 0x80)
    {
      unsigned int v8 = *(_DWORD *)(a1 + *v5);
    }
    else
    {
      do
      {
        *v7++ = v6 | 0x80;
        unsigned int v8 = v6 >> 7;
        unsigned int v9 = v6 >> 14;
        v6 >>= 7;
      }
      while (v9);
    }
    *unsigned int v7 = v8;
    unint64_t v14 = v7 + 1;
    *(void *)a3 = v14;
    uint64_t result = sub_1DD2F57B4(a1, v5 + 6, (*(_DWORD *)a2 - 1), *(unsigned __int8 *)(a3 + 8), v14);
  }
  else
  {
    unsigned int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    unint64_t v11 = *(unsigned char **)a3;
    if (v10 < 0x80)
    {
      LOBYTE(v12) = v10;
    }
    else
    {
      do
      {
        *v11++ = v10 | 0x80;
        unsigned int v12 = v10 >> 7;
        unsigned int v13 = v10 >> 14;
        v10 >>= 7;
      }
      while (v13);
    }
    *unint64_t v11 = v12;
    *(void *)a3 = v11 + 1;
    uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 128))(a1, *(unsigned __int8 *)(a3 + 8));
  }
  *(void *)a3 = result;
  return result;
}

uint64_t sub_1DD2F80F8(uint64_t (****a1)(void))
{
  return (***a1)();
}

uint64_t sub_1DD2F8108(uint64_t a1)
{
  if (*(void *)(a1 + 16)) {
    sub_1DD2F8140(a1);
  }
  return a1;
}

uint64_t sub_1DD2F8140(uint64_t result)
{
  if (*(_DWORD *)(result + 28) + *(_DWORD *)(result + 44) + *(_DWORD *)(result + 8) - *(_DWORD *)result >= 1)
  {
    uint64_t v1 = result;
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(result + 16) + 24))(*(void *)(result + 16));
    unsigned int v2 = *(_DWORD *)(v1 + 24) - *(_DWORD *)(v1 + 44) + *(void *)v1 - *(_DWORD *)(v1 + 8);
    *(void *)(v1 + 8) = *(void *)v1;
    *(_DWORD *)(v1 + 44) = 0;
    *(void *)(v1 + 24) = v2;
  }
  return result;
}

uint64_t sub_1DD2F81D8(uint64_t a1, int a2)
{
  uint64_t result = *(unsigned int *)(a1 + 40);
  if ((a2 & 0x80000000) == 0)
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(int *)(a1 + 44);
    int v7 = v4 - v6 + *(_DWORD *)a1 - v5;
    if ((v7 ^ 0x7FFFFFFF) >= a2 && (int)result - v7 > a2)
    {
      int v9 = v7 + a2;
      *(_DWORD *)(a1 + 40) = v9;
      uint64_t v10 = v5 + v6;
      *(void *)(a1 + 8) = v10;
      int v11 = *(_DWORD *)(a1 + 48);
      if (v11 >= v9) {
        int v11 = v9;
      }
      BOOL v12 = __OFSUB__(v4, v11);
      int v13 = v4 - v11;
      if ((v13 < 0) ^ v12 | (v13 == 0)) {
        int v13 = 0;
      }
      else {
        *(void *)(a1 + 8) = v10 - v13;
      }
      *(_DWORD *)(a1 + 44) = v13;
    }
  }
  return result;
}

uint64_t sub_1DD2F8250(uint64_t result, int a2)
{
  *(_DWORD *)(result + 40) = a2;
  int v2 = *(_DWORD *)(result + 48);
  uint64_t v3 = *(void *)(result + 8) + *(int *)(result + 44);
  *(void *)(result + 8) = v3;
  if (v2 >= a2) {
    int v4 = a2;
  }
  else {
    int v4 = v2;
  }
  int v5 = *(_DWORD *)(result + 24);
  BOOL v6 = __OFSUB__(v5, v4);
  int v7 = v5 - v4;
  if ((v7 < 0) ^ v6 | (v7 == 0)) {
    int v7 = 0;
  }
  else {
    *(void *)(result + 8) = v3 - v7;
  }
  *(_DWORD *)(result + 44) = v7;
  *(unsigned char *)(result + 36) = 0;
  return result;
}

unint64_t sub_1DD2F8298(uint64_t a1, int a2)
{
  unsigned int v3 = sub_1DD2F81D8(a1, a2);
  uint64_t v4 = (*(_DWORD *)(a1 + 52) - 1);
  *(_DWORD *)(a1 + 52) = v4;
  return v3 | (unint64_t)(v4 << 32);
}

BOOL sub_1DD2F82D0(uint64_t a1, int a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 36);
  *(_DWORD *)(a1 + 40) = a2;
  int v3 = *(_DWORD *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 8) + *(int *)(a1 + 44);
  *(void *)(a1 + 8) = v4;
  if (v3 >= a2) {
    int v5 = a2;
  }
  else {
    int v5 = v3;
  }
  int v6 = *(_DWORD *)(a1 + 24);
  BOOL v7 = __OFSUB__(v6, v5);
  int v8 = v6 - v5;
  if ((v8 < 0) ^ v7 | (v8 == 0)) {
    int v8 = 0;
  }
  else {
    *(void *)(a1 + 8) = v4 - v8;
  }
  *(_DWORD *)(a1 + 44) = v8;
  *(unsigned char *)(a1 + 36) = 0;
  ++*(_DWORD *)(a1 + 52);
  return v2 != 0;
}

uint64_t sub_1DD2F8334(_DWORD *a1)
{
  int v1 = a1[10];
  if (v1 == 0x7FFFFFFF) {
    return 0xFFFFFFFFLL;
  }
  else {
    return (v1 - a1[6] + a1[11] + a1[2] - *a1);
  }
}

uint64_t sub_1DD2F8370(_DWORD *a1)
{
  int v1 = a1[12];
  if (v1 == 0x7FFFFFFF) {
    return 0xFFFFFFFFLL;
  }
  else {
    return (v1 - a1[6] + a1[11] + a1[2] - *a1);
  }
}

uint64_t sub_1DD2F83AC(uint64_t a1)
{
  sub_1DD2FAF50((uint64_t)v7, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/io/coded_stream.cc", 190);
  int v2 = sub_1DD2FAF68(v7, "A protocol message was rejected because it was too big (more than ");
  int v3 = sub_1DD2FB278(v2, *(_DWORD *)(a1 + 48));
  uint64_t v4 = sub_1DD2FAF68(v3, " bytes).  To increase the limit (or to disable these warnings), see CodedInputStream::SetTotalBytesLimit() in google/protobuf/io/coded_stream.h.");
  sub_1DD2FB0A4((uint64_t)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
  return sub_1DD2FB0AC((uint64_t)v7);
}

void sub_1DD2F8424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1DD2FB0AC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1DD2F843C(uint64_t a1, int a2, int a3)
{
  if (*(int *)(a1 + 44) < 1)
  {
    uint64_t v5 = (a2 - a3);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    int v6 = *(_DWORD *)(a1 + 48);
    if (v6 >= *(_DWORD *)(a1 + 40)) {
      int v6 = *(_DWORD *)(a1 + 40);
    }
    int v7 = v6 - *(_DWORD *)(a1 + 24);
    if (v7 >= (int)v5)
    {
      if ((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v5))
      {
        *(_DWORD *)(a1 + 24) += v5;
        return 1;
      }
      else
      {
        int v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
        uint64_t result = 0;
        *(_DWORD *)(a1 + 24) = v8;
      }
    }
    else
    {
      if (v7 >= 1)
      {
        *(_DWORD *)(a1 + 24) = v6;
        (*(void (**)(void))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16));
      }
      return 0;
    }
  }
  else
  {
    uint64_t result = 0;
    *(void *)a1 += a3;
  }
  return result;
}

uint64_t sub_1DD2F8558(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 44);
  if (v2 > 0 || *(int *)(a1 + 28) > 0 || *(_DWORD *)(a1 + 24) == *(_DWORD *)(a1 + 40))
  {
    int v3 = *(_DWORD *)(a1 + 24) - v2;
    int v4 = *(_DWORD *)(a1 + 48);
    if (v3 >= v4 && v4 != *(_DWORD *)(a1 + 40)) {
      sub_1DD2F83AC(a1);
    }
    return 0;
  }
  else
  {
    uint64_t v23 = 0;
    int v22 = 0;
    uint64_t v7 = *(void *)(a1 + 16);
    do
    {
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t *, int *))(*(void *)v7 + 16))(v7, &v23, &v22);
      if (!v5)
      {
        *(void *)a1 = 0;
        *(void *)(a1 + 8) = 0;
        return v5;
      }
      int v8 = v22;
    }
    while (!v22);
    uint64_t v9 = v23 + v22;
    *(void *)a1 = v23;
    *(void *)(a1 + 8) = v9;
    if (v8 < 0)
    {
      sub_1DD2FAF50((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/io/coded_stream.cc", 591);
      uint64_t v10 = sub_1DD2FAF68(v21, "CHECK failed: (buffer_size) >= (0): ");
      sub_1DD2FB0A4((uint64_t)&v20, (const char **)&v10->__r_.__value_.__l.__data_);
      sub_1DD2FB0AC((uint64_t)v21);
      int v8 = v22;
    }
    int v11 = *(_DWORD *)(a1 + 24);
    int v12 = v11 - (v8 ^ 0x7FFFFFFF);
    if (v11 <= (v8 ^ 0x7FFFFFFF))
    {
      int v14 = v8 + v11;
      uint64_t v13 = *(void *)(a1 + 8);
    }
    else
    {
      *(_DWORD *)(a1 + 28) = v12;
      uint64_t v13 = *(void *)(a1 + 8) - v12;
      *(void *)(a1 + 8) = v13;
      int v14 = 0x7FFFFFFF;
    }
    *(_DWORD *)(a1 + 24) = v14;
    int v15 = *(_DWORD *)(a1 + 40);
    uint64_t v16 = v13 + *(int *)(a1 + 44);
    *(void *)(a1 + 8) = v16;
    int v17 = *(_DWORD *)(a1 + 48);
    if (v17 >= v15) {
      int v17 = v15;
    }
    BOOL v18 = __OFSUB__(v14, v17);
    int v19 = v14 - v17;
    if ((v19 < 0) ^ v18 | (v19 == 0)) {
      int v19 = 0;
    }
    else {
      *(void *)(a1 + 8) = v16 - v19;
    }
    *(_DWORD *)(a1 + 44) = v19;
  }
  return v5;
}

void sub_1DD2F86F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1DD2FB0AC((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1DD2F8710(const void **a1, char *__dst, int a3)
{
  while (1)
  {
    int v6 = a3;
    uint64_t v7 = *a1;
    int64_t v8 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    BOOL v9 = __OFSUB__(a3, v8);
    a3 -= v8;
    if ((a3 < 0) ^ v9 | (a3 == 0)) {
      break;
    }
    memcpy(__dst, v7, (int)v8);
    __dst += (int)v8;
    *a1 = (char *)*a1 + (int)v8;
    if ((sub_1DD2F8558((uint64_t)a1) & 1) == 0) {
      return v6 <= (int)v8;
    }
  }
  memcpy(__dst, v7, v6);
  *a1 = (char *)*a1 + v6;
  return v6 <= (int)v8;
}

BOOL sub_1DD2F87A8(uint64_t a1, std::string *this, std::string::size_type __n)
{
  if ((__n & 0x80000000) != 0) {
    return 0;
  }
  int v3 = this;
  if (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1 >= (int)__n)
  {
    size_t v6 = __n;
    std::string::resize(this, __n, 0);
    if (SHIBYTE(v3->__r_.__value_.__r.__words[2]) < 0) {
      int v3 = (std::string *)v3->__r_.__value_.__r.__words[0];
    }
    memcpy(v3, *(const void **)a1, v6);
    *(void *)a1 += v6;
    return 1;
  }
  else
  {
    return sub_1DD2F885C((_DWORD *)a1, this, __n);
  }
}

BOOL sub_1DD2F885C(_DWORD *a1, std::string *this, std::string::size_type __requested_capacity)
{
  int v3 = __requested_capacity;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    if (this->__r_.__value_.__l.__size_)
    {
      *this->__r_.__value_.__l.__data_ = 0;
      this->__r_.__value_.__l.__size_ = 0;
    }
  }
  else if (*((unsigned char *)&this->__r_.__value_.__s + 23))
  {
    this->__r_.__value_.__s.__data_[0] = 0;
    *((unsigned char *)&this->__r_.__value_.__s + 23) = 0;
  }
  int v6 = a1[12];
  if (v6 >= a1[10]) {
    int v6 = a1[10];
  }
  if (v6 != 0x7FFFFFFF)
  {
    int v7 = v6 - a1[6] + a1[11] + a1[2] - *a1;
    BOOL v8 = v7 < (int)__requested_capacity || (int)__requested_capacity < 1;
    if (!v8 && v7 >= 1) {
      std::string::reserve(this, __requested_capacity);
    }
  }
  while (1)
  {
    int v10 = v3;
    int v11 = *(const std::string::value_type **)a1;
    uint64_t v12 = *((void *)a1 + 1) - *(void *)a1;
    BOOL v13 = __OFSUB__(v3, v12);
    v3 -= v12;
    if ((v3 < 0) ^ v13 | (v3 == 0)) {
      break;
    }
    if (v12)
    {
      std::string::append(this, v11, (int)v12);
      int v11 = *(const std::string::value_type **)a1;
    }
    *(void *)a1 = &v11[(int)v12];
    if ((sub_1DD2F8558((uint64_t)a1) & 1) == 0) {
      return v10 <= (int)v12;
    }
  }
  std::string::append(this, v11, v10);
  *(void *)a1 += v10;
  return v10 <= (int)v12;
}

BOOL sub_1DD2F897C(uint64_t a1, _DWORD *a2)
{
  int v3 = *(char **)a1;
  if (((*(_DWORD *)(a1 + 8) - *(void *)a1) & 0xFFFFFFFC) != 0)
  {
    *(void *)a1 = v3 + 4;
  }
  else
  {
    int v3 = __dst;
    BOOL result = sub_1DD2F8710((const void **)a1, __dst, 4);
    if (!result) {
      return result;
    }
  }
  *a2 = *(_DWORD *)v3;
  return 1;
}

BOOL sub_1DD2F89E4(uint64_t a1, void *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  int v3 = *(char **)a1;
  if (((*(_DWORD *)(a1 + 8) - *(void *)a1) & 0xFFFFFFF8) != 0)
  {
    *(void *)a1 = v3 + 8;
  }
  else
  {
    int v3 = v5;
    BOOL result = sub_1DD2F8710((const void **)a1, v5, 8);
    if (!result) {
      return result;
    }
  }
  *a2 = *(void *)v3;
  return 1;
}

unint64_t sub_1DD2F8A78(uint64_t a1)
{
  int v2 = *(char **)a1;
  unint64_t v1 = *(void *)(a1 + 8);
  if ((int)(v1 - *(void *)a1) <= 9 && (v1 <= (unint64_t)v2 || *(char *)(v1 - 1) < 0))
  {
    uint64_t v9 = 0;
    sub_1DD2F908C((char **)a1, &v9);
    return v9;
  }
  else
  {
    int v3 = v2 + 1;
    unsigned int v4 = *v2;
    if (*v2 < 0)
    {
      unsigned int v4 = v4 + (v2[1] << 7) - 128;
      if (v2[1] < 0)
      {
        unsigned int v4 = v4 + (v2[2] << 14) - 0x4000;
        if (v2[2] < 0)
        {
          unsigned int v4 = v4 + (v2[3] << 21) - 0x200000;
          if (v2[3] < 0)
          {
            v4 -= 0x10000000;
            unsigned int v5 = v2[4];
            if (v2[4] < 0)
            {
              unsigned int v5 = v5 + (v2[5] << 7) - 128;
              if (v2[5] < 0)
              {
                unsigned int v5 = v5 + (v2[6] << 14) - 0x4000;
                if (v2[6] < 0)
                {
                  unsigned int v5 = v5 + (v2[7] << 21) - 0x200000;
                  if (v2[7] < 0)
                  {
                    v5 -= 0x10000000;
                    uint64_t v6 = v2[8];
                    if (v2[8] < 0)
                    {
                      if (v2[9] < 0) {
                        return 0;
                      }
                      int v3 = v2 + 10;
                      uint64_t v6 = v6 + (v2[9] << 7) - 128;
                    }
                    else
                    {
                      int v3 = v2 + 9;
                    }
                  }
                  else
                  {
                    uint64_t v6 = 0;
                    int v3 = v2 + 8;
                  }
                }
                else
                {
                  uint64_t v6 = 0;
                  int v3 = v2 + 7;
                }
              }
              else
              {
                uint64_t v6 = 0;
                int v3 = v2 + 6;
              }
            }
            else
            {
              uint64_t v6 = 0;
              int v3 = v2 + 5;
            }
          }
          else
          {
            unsigned int v5 = 0;
            uint64_t v6 = 0;
            int v3 = v2 + 4;
          }
        }
        else
        {
          unsigned int v5 = 0;
          uint64_t v6 = 0;
          int v3 = v2 + 3;
        }
      }
      else
      {
        unsigned int v5 = 0;
        uint64_t v6 = 0;
        int v3 = v2 + 2;
      }
    }
    else
    {
      unsigned int v5 = 0;
      uint64_t v6 = 0;
    }
    unint64_t v7 = v4 | ((unint64_t)v5 << 28) | (v6 << 56);
    *(void *)a1 = v3;
  }
  return v7;
}

uint64_t sub_1DD2F8C30(uint64_t *a1, int a2)
{
  unint64_t v3 = *a1;
  unint64_t v2 = a1[1];
  if ((int)(v2 - *a1) <= 9 && (v2 <= v3 || *(char *)(v2 - 1) < 0))
  {
    uint64_t v6 = sub_1DD2F8A78((uint64_t)a1);
    if ((v7 & 1) == 0) {
      return -1;
    }
  }
  else
  {
    unsigned int v4 = a2 + (*(unsigned __int8 *)(v3 + 1) << 7) - 128;
    if (*(char *)(v3 + 1) < 0)
    {
      unsigned int v4 = v4 + (*(unsigned __int8 *)(v3 + 2) << 14) - 0x4000;
      if (*(char *)(v3 + 2) < 0)
      {
        unsigned int v4 = v4 + (*(unsigned __int8 *)(v3 + 3) << 21) - 0x200000;
        if (*(char *)(v3 + 3) < 0)
        {
          int v8 = *(char *)(v3 + 4);
          unsigned int v4 = v4 + (v8 << 28) - 0x10000000;
          if (v8 < 0)
          {
            uint64_t v9 = 0;
            while (*(char *)(v3 + v9 + 5) < 0)
            {
              ++v9;
              uint64_t v6 = -1;
              if (v9 == 5) {
                return v6;
              }
            }
            uint64_t v5 = v3 + v9 + 6;
          }
          else
          {
            uint64_t v5 = v3 + 5;
          }
        }
        else
        {
          uint64_t v5 = v3 + 4;
        }
      }
      else
      {
        uint64_t v5 = v3 + 3;
      }
    }
    else
    {
      uint64_t v5 = v3 + 2;
    }
    *a1 = v5;
    return v4;
  }
  return v6;
}

uint64_t sub_1DD2F8D1C(unsigned __int8 **a1)
{
  unint64_t v2 = (char *)*a1;
  unint64_t v1 = (unint64_t)a1[1];
  if ((int)(v1 - *a1) > 9 || v1 > (unint64_t)v2 && (*(char *)(v1 - 1) & 0x80000000) == 0)
  {
    unint64_t v3 = (unsigned __int8 *)(v2 + 1);
    unsigned int v4 = *v2;
    if (*v2 < 0)
    {
      unsigned int v4 = v4 + (v2[1] << 7) - 128;
      if (v2[1] < 0)
      {
        unsigned int v4 = v4 + (v2[2] << 14) - 0x4000;
        if (v2[2] < 0)
        {
          unsigned int v4 = v4 + (v2[3] << 21) - 0x200000;
          if (v2[3] < 0)
          {
            v4 -= 0x10000000;
            unsigned int v5 = v2[4];
            if (v2[4] < 0)
            {
              unsigned int v5 = v5 + (v2[5] << 7) - 128;
              if (v2[5] < 0)
              {
                unsigned int v5 = v5 + (v2[6] << 14) - 0x4000;
                if (v2[6] < 0)
                {
                  unsigned int v5 = v5 + (v2[7] << 21) - 0x200000;
                  if (v2[7] < 0)
                  {
                    v5 -= 0x10000000;
                    uint64_t v6 = v2[8];
                    if (v2[8] < 0)
                    {
                      if (v2[9] < 0) {
                        return 0xFFFFFFFFLL;
                      }
                      unint64_t v3 = (unsigned __int8 *)(v2 + 10);
                      uint64_t v6 = v6 + (v2[9] << 7) - 128;
                    }
                    else
                    {
                      unint64_t v3 = (unsigned __int8 *)(v2 + 9);
                    }
                  }
                  else
                  {
                    uint64_t v6 = 0;
                    unint64_t v3 = (unsigned __int8 *)(v2 + 8);
                  }
                }
                else
                {
                  uint64_t v6 = 0;
                  unint64_t v3 = (unsigned __int8 *)(v2 + 7);
                }
              }
              else
              {
                uint64_t v6 = 0;
                unint64_t v3 = (unsigned __int8 *)(v2 + 6);
              }
            }
            else
            {
              uint64_t v6 = 0;
              unint64_t v3 = (unsigned __int8 *)(v2 + 5);
            }
          }
          else
          {
            unsigned int v5 = 0;
            uint64_t v6 = 0;
            unint64_t v3 = (unsigned __int8 *)(v2 + 4);
          }
        }
        else
        {
          unsigned int v5 = 0;
          uint64_t v6 = 0;
          unint64_t v3 = (unsigned __int8 *)(v2 + 3);
        }
      }
      else
      {
        unsigned int v5 = 0;
        uint64_t v6 = 0;
        unint64_t v3 = (unsigned __int8 *)(v2 + 2);
      }
    }
    else
    {
      unsigned int v5 = 0;
      uint64_t v6 = 0;
    }
    unint64_t v10 = v4 | ((unint64_t)v5 << 28);
    if (!((v10 | (v6 << 56)) >> 31))
    {
      *a1 = v3;
      return v10;
    }
    return 0xFFFFFFFFLL;
  }
  unint64_t v7 = sub_1DD2F8A78((uint64_t)a1);
  if ((v7 & 0xFFFFFFFF80000000) != 0 || (v8 & 1) == 0) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v7;
  }
}

unint64_t sub_1DD2F8ECC(uint64_t a1)
{
  unint64_t v2 = *(char **)a1;
  unint64_t v3 = *(void *)(a1 + 8);
  if (*(void *)a1 != v3)
  {
LABEL_4:
    if ((unint64_t)v2 >= v3 || *v2 < 0)
    {
      unint64_t result = sub_1DD2F8A78(a1);
      if ((v5 & 1) == 0) {
        return 0;
      }
    }
    else
    {
      unint64_t result = *v2;
      *(void *)a1 = v2 + 1;
    }
    return result;
  }
  if (sub_1DD2F8558(a1))
  {
    unint64_t v2 = *(char **)a1;
    unint64_t v3 = *(void *)(a1 + 8);
    goto LABEL_4;
  }
  int v6 = *(_DWORD *)(a1 + 48);
  unint64_t result = 0;
  BOOL v7 = *(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 44) < v6 || *(_DWORD *)(a1 + 40) == v6;
  *(unsigned char *)(a1 + 36) = v7;
  return result;
}

unint64_t sub_1DD2F8F70(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  int v4 = v2 - *(void *)a1;
  if (v4 > 9)
  {
LABEL_4:
    if (a2)
    {
      uint64_t v5 = a2 + (*(unsigned __int8 *)(v3 + 1) << 7) - 128;
      if (*(char *)(v3 + 1) < 0)
      {
        uint64_t v5 = v5 + (*(unsigned __int8 *)(v3 + 2) << 14) - 0x4000;
        if (*(char *)(v3 + 2) < 0)
        {
          uint64_t v5 = v5 + (*(unsigned __int8 *)(v3 + 3) << 21) - 0x200000;
          if (*(char *)(v3 + 3) < 0)
          {
            int v10 = *(char *)(v3 + 4);
            uint64_t v5 = (v5 + (v10 << 28) - 0x10000000);
            if (v10 < 0)
            {
              uint64_t v11 = 0;
              while (*(char *)(v3 + v11 + 5) < 0)
              {
                a2 = 0;
                if (++v11 == 5) {
                  return a2;
                }
              }
              uint64_t v6 = v3 + v11 + 6;
            }
            else
            {
              uint64_t v6 = v3 + 5;
            }
          }
          else
          {
            uint64_t v6 = v3 + 4;
          }
        }
        else
        {
          uint64_t v6 = v3 + 3;
        }
      }
      else
      {
        uint64_t v6 = v3 + 2;
      }
      *(void *)a1 = v6;
      return v5;
    }
    else
    {
      *(void *)a1 = v3 + 1;
    }
    return a2;
  }
  if (v4 >= 1)
  {
    if ((*(char *)(v2 - 1) & 0x80000000) == 0) {
      goto LABEL_4;
    }
    return sub_1DD2F8ECC(a1);
  }
  if (v4) {
    return sub_1DD2F8ECC(a1);
  }
  int v8 = *(_DWORD *)(a1 + 44);
  int v9 = *(_DWORD *)(a1 + 24);
  if (v8 <= 0 && v9 != *(_DWORD *)(a1 + 40)) {
    return sub_1DD2F8ECC(a1);
  }
  if (v9 - v8 >= *(_DWORD *)(a1 + 48)) {
    return sub_1DD2F8ECC(a1);
  }
  a2 = 0;
  *(unsigned char *)(a1 + 36) = 1;
  return a2;
}

BOOL sub_1DD2F908C(char **a1, void *a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  while (1)
  {
    BOOL v6 = v4 != 10;
    if (v4 == 10) {
      break;
    }
    while (1)
    {
      BOOL v7 = *a1;
      if (*a1 != a1[1]) {
        break;
      }
      if ((sub_1DD2F8558((uint64_t)a1) & 1) == 0)
      {
        uint64_t v5 = 0;
        BOOL v6 = 0;
        goto LABEL_7;
      }
    }
    char v8 = *v7;
    v5 |= (unint64_t)(*v7 & 0x7F) << (7 * v4);
    *a1 = v7 + 1;
    ++v4;
    if ((v8 & 0x80) == 0) {
      goto LABEL_7;
    }
  }
  uint64_t v5 = 0;
LABEL_7:
  *a2 = v5;
  return v6;
}

uint64_t sub_1DD2F9130(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a2;
  *(_WORD *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 26) = byte_1EAB1F7F0 & 1;
  sub_1DD2F91C8((void *)a1);
  *(unsigned char *)(a1 + 24) = 0;
  return a1;
}

uint64_t sub_1DD2F9178(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a2;
  *(_WORD *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 26) = byte_1EAB1F7F0 & 1;
  if (a3)
  {
    sub_1DD2F91C8((void *)a1);
    *(unsigned char *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_1DD2F91C8(void *a1)
{
  uint64_t v4 = 0;
  uint64_t result = (*(uint64_t (**)(void, uint64_t *, void *))(*(void *)*a1 + 16))(*a1, &v4, a1 + 2);
  if (result)
  {
    uint64_t v3 = v4;
    *((_DWORD *)a1 + 5) += *((_DWORD *)a1 + 4);
  }
  else
  {
    uint64_t v3 = 0;
    *((_DWORD *)a1 + 4) = 0;
    *((unsigned char *)a1 + 24) = 1;
  }
  a1[1] = v3;
  return result;
}

int *sub_1DD2F9250(int *result)
{
  if (result[4] >= 1)
  {
    unint64_t v1 = result;
    uint64_t result = (int *)(*(uint64_t (**)(void))(**(void **)result + 24))(*(void *)result);
    int v2 = v1[5] - v1[4];
    v1[4] = 0;
    v1[5] = v2;
    *((void *)v1 + 1) = 0;
  }
  return result;
}

int *sub_1DD2F92B4(int *a1)
{
  return a1;
}

uint64_t sub_1DD2F92E0(uint64_t a1, char *__src, int a3)
{
  while (1)
  {
    size_t v6 = *(int *)(a1 + 16);
    BOOL v7 = *(void **)(a1 + 8);
    if ((int)v6 >= a3) {
      break;
    }
    memcpy(v7, __src, v6);
    uint64_t v8 = *(int *)(a1 + 16);
    a3 -= v8;
    __src += v8;
    uint64_t result = sub_1DD2F91C8((void *)a1);
    if ((result & 1) == 0) {
      return result;
    }
  }
  uint64_t result = (uint64_t)memcpy(v7, __src, a3);
  *(void *)(a1 + 8) += a3;
  *(_DWORD *)(a1 + 16) -= a3;
  return result;
}

uint64_t sub_1DD2F9368(int *a1, char *__src, uint64_t a3)
{
  if (a1[4] <= (int)a3)
  {
    sub_1DD2F9250(a1);
    a1[5] += a3;
    uint64_t result = (*(uint64_t (**)(void, char *, uint64_t))(**(void **)a1 + 40))(*(void *)a1, __src, a3);
    *((unsigned char *)a1 + 24) |= result ^ 1;
  }
  else
  {
    return sub_1DD2F92E0((uint64_t)a1, __src, a3);
  }
  return result;
}

uint64_t sub_1DD2F9424(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 16) < 4u)
  {
    int __src = a2;
    return sub_1DD2F92E0(result, (char *)&__src, 4);
  }
  else
  {
    **(_DWORD **)(result + 8) = a2;
    *(void *)(result + 8) += 4;
    *(_DWORD *)(result + 16) -= 4;
  }
  return result;
}

uint64_t sub_1DD2F9480(uint64_t result, uint64_t a2)
{
  v2[1] = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(result + 16) < 8u)
  {
    v2[0] = a2;
    return sub_1DD2F92E0(result, (char *)v2, 8);
  }
  else
  {
    **(void **)(result + 8) = a2;
    *(void *)(result + 8) += 8;
    *(_DWORD *)(result + 16) -= 8;
  }
  return result;
}

uint64_t sub_1DD2F9508(uint64_t a1, unsigned int a2)
{
  int v2 = __src;
  if (a2 >= 0x80)
  {
    unsigned int v3 = a2;
    do
    {
      *v2++ = v3 | 0x80;
      a2 = v3 >> 7;
      unsigned int v4 = v3 >> 14;
      v3 >>= 7;
    }
    while (v4);
  }
  *int v2 = a2;
  return sub_1DD2F92E0(a1, __src, v2 - (&vars0 - 5) + 1);
}

uint64_t sub_1DD2F9564(uint64_t a1, unint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v2 = __src;
  if (a2 >= 0x80)
  {
    unint64_t v3 = a2;
    do
    {
      *v2++ = v3 | 0x80;
      a2 = v3 >> 7;
      unint64_t v4 = v3 >> 14;
      v3 >>= 7;
    }
    while (v4);
  }
  *int v2 = a2;
  return sub_1DD2F92E0(a1, __src, v2 - __src + 1);
}

char *sub_1DD2F95EC(const void **a1, unsigned char *a2)
{
  if (*((char *)a1 + 23) >= 0) {
    unsigned int v3 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    unsigned int v3 = *((_DWORD *)a1 + 2);
  }
  if (v3 < 0x80)
  {
    LOBYTE(v4) = v3;
  }
  else
  {
    do
    {
      *a2++ = v3 | 0x80;
      unsigned int v4 = v3 >> 7;
      unsigned int v5 = v3 >> 14;
      v3 >>= 7;
    }
    while (v5);
  }
  *a2 = v4;
  size_t v6 = a2 + 1;
  int v7 = *((char *)a1 + 23);
  if (v7 >= 0) {
    uint64_t v8 = a1;
  }
  else {
    uint64_t v8 = *a1;
  }
  if (v7 >= 0) {
    LODWORD(v9) = *((unsigned __int8 *)a1 + 23);
  }
  else {
    int v9 = a1[1];
  }
  memcpy(v6, v8, (int)v9);
  return &v6[(int)v9];
}

uint64_t sub_1DD2F9674()
{
  sub_1DD2FAF50((uint64_t)v3, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/io/zero_copy_stream.cc", 47);
  uint64_t v0 = sub_1DD2FAF68(v3, "This ZeroCopyOutputStream doesn't support aliasing. Reaching here usually means a ZeroCopyOutputStream implementation bug.");
  sub_1DD2FB0A4((uint64_t)&v2, (const char **)&v0->__r_.__value_.__l.__data_);
  sub_1DD2FB0AC((uint64_t)v3);
  return 0;
}

void sub_1DD2F96D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1DD2FB0AC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1DD2F96F0(uint64_t result, uint64_t a2, int a3, int a4)
{
  *(void *)uint64_t result = &unk_1F387CC68;
  *(void *)(result + 8) = a2;
  if (a4 <= 0) {
    int v4 = a3;
  }
  else {
    int v4 = a4;
  }
  *(_DWORD *)(result + 16) = a3;
  *(_DWORD *)(result + 20) = v4;
  *(void *)(result + 24) = 0;
  return result;
}

BOOL sub_1DD2F9720(uint64_t a1, void *a2, _DWORD *a3)
{
  uint64_t v3 = *(int *)(a1 + 24);
  int v4 = *(_DWORD *)(a1 + 16);
  if ((int)v3 >= v4)
  {
    *(_DWORD *)(a1 + 28) = 0;
  }
  else
  {
    int v5 = v4 - v3;
    if (v4 - (int)v3 >= *(_DWORD *)(a1 + 20)) {
      int v5 = *(_DWORD *)(a1 + 20);
    }
    *(_DWORD *)(a1 + 28) = v5;
    *a2 = *(void *)(a1 + 8) + v3;
    *a3 = v5;
    *(_DWORD *)(a1 + 24) += *(_DWORD *)(a1 + 28);
  }
  return (int)v3 < v4;
}

uint64_t sub_1DD2F9774(uint64_t result, int a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 28);
  if (v4 <= 0)
  {
    sub_1DD2FAF50((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 132);
    int v5 = sub_1DD2FAF68(v10, "CHECK failed: (last_returned_size_) > (0): ");
    size_t v6 = sub_1DD2FAF68(v5, "BackUp() can only be called after a successful Next().");
    sub_1DD2FB0A4((uint64_t)&v9, (const char **)&v6->__r_.__value_.__l.__data_);
    uint64_t result = sub_1DD2FB0AC((uint64_t)v10);
    int v4 = *(_DWORD *)(v3 + 28);
  }
  if (v4 < a2)
  {
    sub_1DD2FAF50((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 134);
    int v7 = sub_1DD2FAF68(v10, "CHECK failed: (count) <= (last_returned_size_): ");
    sub_1DD2FB0A4((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
    uint64_t result = sub_1DD2FB0AC((uint64_t)v10);
  }
  if (a2 < 0)
  {
    sub_1DD2FAF50((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 135);
    uint64_t v8 = sub_1DD2FAF68(v10, "CHECK failed: (count) >= (0): ");
    sub_1DD2FB0A4((uint64_t)&v9, (const char **)&v8->__r_.__value_.__l.__data_);
    uint64_t result = sub_1DD2FB0AC((uint64_t)v10);
  }
  *(void *)(v3 + 24) = (*(_DWORD *)(v3 + 24) - a2);
  return result;
}

void sub_1DD2F9888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1DD2FB0AC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1DD2F98B0(uint64_t a1)
{
  return *(int *)(a1 + 24);
}

void *sub_1DD2F98B8(void *result, uint64_t a2)
{
  *uint64_t result = &unk_1F387CCB0;
  result[1] = a2;
  return result;
}

uint64_t sub_1DD2F98D8(uint64_t a1, void *a2, _DWORD *a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  if (!v6)
  {
    sub_1DD2FAF50((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 151);
    int v7 = sub_1DD2FAF68(v19, "CHECK failed: target_ != NULL: ");
    sub_1DD2FB0A4((uint64_t)&v18, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_1DD2FB0AC((uint64_t)v19);
    uint64_t v6 = *(void *)(a1 + 8);
  }
  if (*(char *)(v6 + 23) < 0)
  {
    uint64_t v10 = *(void *)(v6 + 8);
    uint64_t v8 = (int)v10;
    std::string::size_type v9 = (*(void *)(v6 + 16) & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((int)v10 < v9) {
      goto LABEL_13;
    }
    uint64_t v11 = *(void *)(v6 + 8);
    if ((int)v10 >= 0x40000000)
    {
      sub_1DD2FAF50((uint64_t)v19, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 164);
      uint64_t v12 = sub_1DD2FAF68(v19, "Cannot allocate buffer larger than kint32max for ");
      BOOL v13 = sub_1DD2FAF68(v12, "StringOutputStream.");
      sub_1DD2FB0A4((uint64_t)&v18, (const char **)&v13->__r_.__value_.__l.__data_);
      sub_1DD2FB0AC((uint64_t)v19);
      return 0;
    }
LABEL_10:
    int v15 = 2 * v11;
    if (v15 <= 16) {
      std::string::size_type v9 = 16;
    }
    else {
      std::string::size_type v9 = v15;
    }
    goto LABEL_13;
  }
  uint64_t v8 = *(unsigned __int8 *)(v6 + 23);
  if (*(unsigned __int8 *)(v6 + 23) >= 0x16u)
  {
    LODWORD(v11) = *(unsigned __int8 *)(v6 + 23);
    LODWORD(v10) = v11;
    goto LABEL_10;
  }
  std::string::size_type v9 = 22;
  LODWORD(v10) = *(unsigned __int8 *)(v6 + 23);
LABEL_13:
  std::string::resize((std::string *)v6, v9, 0);
  uint64_t v16 = *(uint64_t ***)(a1 + 8);
  if (*((char *)v16 + 23) < 0) {
    uint64_t v16 = (uint64_t **)*v16;
  }
  *a2 = (char *)v16 + v8;
  uint64_t v17 = *(void *)(a1 + 8);
  if (*(char *)(v17 + 23) < 0) {
    uint64_t v17 = *(void *)(v17 + 8);
  }
  else {
    LODWORD(v17) = *(unsigned __int8 *)(v17 + 23);
  }
  *a3 = v17 - v10;
  return 1;
}

void sub_1DD2F9A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1DD2FB0AC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1DD2F9A74(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    sub_1DD2FAF50((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 182);
    int v4 = sub_1DD2FAF68(v11, "CHECK failed: (count) >= (0): ");
    sub_1DD2FB0A4((uint64_t)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1DD2FB0AC((uint64_t)v11);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (!v5)
  {
    sub_1DD2FAF50((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 183);
    uint64_t v6 = sub_1DD2FAF68(v11, "CHECK failed: target_ != NULL: ");
    sub_1DD2FB0A4((uint64_t)&v10, (const char **)&v6->__r_.__value_.__l.__data_);
    sub_1DD2FB0AC((uint64_t)v11);
    uint64_t v5 = *(void *)(a1 + 8);
  }
  LODWORD(v7) = *(char *)(v5 + 23);
  if ((v7 & 0x80000000) != 0) {
    unint64_t v8 = *(void *)(v5 + 8);
  }
  else {
    unint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  if (v8 < a2)
  {
    sub_1DD2FAF50((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 184);
    std::string::size_type v9 = sub_1DD2FAF68(v11, "CHECK failed: (count) <= (target_->size()): ");
    sub_1DD2FB0A4((uint64_t)&v10, (const char **)&v9->__r_.__value_.__l.__data_);
    sub_1DD2FB0AC((uint64_t)v11);
    uint64_t v5 = *(void *)(a1 + 8);
    LOBYTE(v7) = *(unsigned char *)(v5 + 23);
  }
  if ((v7 & 0x80) != 0) {
    uint64_t v7 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v7 = v7;
  }
  std::string::resize((std::string *)v5, v7 - a2, 0);
}

void sub_1DD2F9BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1DD2FB0AC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1DD2F9BD0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1)
  {
    sub_1DD2FAF50((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 189);
    uint64_t v3 = sub_1DD2FAF68(v6, "CHECK failed: target_ != NULL: ");
    sub_1DD2FB0A4((uint64_t)&v5, (const char **)&v3->__r_.__value_.__l.__data_);
    sub_1DD2FB0AC((uint64_t)v6);
    uint64_t v1 = *(void *)(a1 + 8);
  }
  if (*(char *)(v1 + 23) < 0) {
    return *(void *)(v1 + 8);
  }
  else {
    return *(unsigned __int8 *)(v1 + 23);
  }
}

void sub_1DD2F9C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1DD2FB0AC((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1DD2F9C6C@<X0>(void *a1@<X8>)
{
  return sub_1DD314888(a1, "(cannot determine missing fields for lite message)");
}

uint64_t sub_1DD2F9C7C(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 88))(a1, a2);
  if (result)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1))
    {
      return 1;
    }
    else
    {
      sub_1DD2FAF50((uint64_t)v8, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/message_lite.cc", 121);
      sub_1DD2FA1D4(a1, &__p);
      char v5 = sub_1DD2FAF94(v8, (const std::string::value_type *)&__p);
      sub_1DD2FB0A4((uint64_t)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      sub_1DD2FB0AC((uint64_t)v8);
      return 0;
    }
  }
  return result;
}

void sub_1DD2F9D88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1DD2FB0AC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_1DD2F9DB8(uint64_t a1, uint64_t a2)
{
  v6[0] = 0;
  v6[1] = 0;
  std::string v6[2] = a2;
  memset(&v6[3], 0, 14);
  v6[5] = 0x7FFFFFFFLL;
  int v7 = 0x7FFFFFFF;
  int v8 = dword_1EAB1EC30;
  int v9 = dword_1EAB1EC30;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  sub_1DD2F8558((uint64_t)v6);
  unsigned int v3 = sub_1DD2F9C7C(a1, (uint64_t)v6);
  if (BYTE4(v6[4])) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  sub_1DD2F81D4(v6);
  return v4;
}

void sub_1DD2F9E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_1DD2F9E54(uint64_t a1, uint64_t *a2)
{
  LODWORD(v3) = *((unsigned __int8 *)a2 + 23);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = (uint64_t *)*a2;
  }
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = a2[1];
  }
  v8[0] = v4;
  v8[1] = (char *)v4 + (int)v3;
  std::string v8[2] = 0;
  int v9 = v3;
  uint64_t v10 = 0;
  __int16 v11 = 0;
  int v12 = v3;
  uint64_t v13 = 0x7FFFFFFF00000000;
  int v14 = dword_1EAB1EC30;
  int v15 = dword_1EAB1EC30;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if (!(*(unsigned int (**)(uint64_t, void *))(*(void *)a1 + 88))(a1, v8)) {
    goto LABEL_12;
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1) & 1) == 0)
  {
    sub_1DD2FAF50((uint64_t)v20, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/message_lite.cc", 121);
    sub_1DD2FA1D4(a1, &__p);
    char v6 = sub_1DD2FAF94(v20, (const std::string::value_type *)&__p);
    sub_1DD2FB0A4((uint64_t)&v18, (const char **)&v6->__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_1DD2FB0AC((uint64_t)v20);
LABEL_12:
    BOOL v5 = 0;
    goto LABEL_13;
  }
  BOOL v5 = (_BYTE)v11 != 0;
LABEL_13:
  sub_1DD2F81D4(v8);
  return v5;
}

void sub_1DD2F9FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  sub_1DD2FB0AC(v25 - 64);
  sub_1DD2F81D4(&a9);
  _Unwind_Resume(a1);
}

BOOL sub_1DD2FA004(uint64_t a1, uint64_t a2, int a3)
{
  v7[0] = a2;
  v7[1] = a2 + a3;
  std::string v7[2] = 0;
  int v8 = a3;
  uint64_t v9 = 0;
  __int16 v10 = 0;
  int v11 = a3;
  uint64_t v12 = 0x7FFFFFFF00000000;
  int v13 = dword_1EAB1EC30;
  int v14 = dword_1EAB1EC30;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if (!(*(unsigned int (**)(uint64_t, void *))(*(void *)a1 + 88))(a1, v7))
  {
LABEL_7:
    BOOL v4 = 0;
    goto LABEL_8;
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1) & 1) == 0)
  {
    sub_1DD2FAF50((uint64_t)v19, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/message_lite.cc", 121);
    sub_1DD2FA1D4(a1, &__p);
    BOOL v5 = sub_1DD2FAF94(v19, (const std::string::value_type *)&__p);
    sub_1DD2FB0A4((uint64_t)&v17, (const char **)&v5->__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_1DD2FB0AC((uint64_t)v19);
    goto LABEL_7;
  }
  BOOL v4 = (_BYTE)v10 != 0;
LABEL_8:
  sub_1DD2F81D4(v7);
  return v4;
}

void sub_1DD2FA15C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  sub_1DD2FB0AC(v25 - 64);
  sub_1DD2F81D4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1DD2FA19C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 128))(a1, byte_1EAB1F7F0 & 1, a2);
}

void sub_1DD2FA1D4(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a2, "Can't ");
  std::string::append(a2, "parse");
  std::string::append(a2, " message of type \"");
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 16))(&__p, a1);
  if ((v10 & 0x80u) == 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = (const std::string::value_type *)__p;
  }
  if ((v10 & 0x80u) == 0) {
    std::string::size_type v5 = v10;
  }
  else {
    std::string::size_type v5 = v9;
  }
  std::string::append(a2, p_p, v5);
  if ((char)v10 < 0) {
    operator delete(__p);
  }
  std::string::append(a2, "\" because it is missing required fields: ");
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 72))(&__p, a1);
  if ((v10 & 0x80u) == 0) {
    char v6 = (const std::string::value_type *)&__p;
  }
  else {
    char v6 = (const std::string::value_type *)__p;
  }
  if ((v10 & 0x80u) == 0) {
    std::string::size_type v7 = v10;
  }
  else {
    std::string::size_type v7 = v9;
  }
  std::string::append(a2, v6, v7);
  if ((char)v10 < 0) {
    operator delete(__p);
  }
}

void sub_1DD2FA310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DD2FA350(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
  uint64_t v5 = v4;
  if (v4 >> 31)
  {
    sub_1DD2FAF50((uint64_t)v17, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/message_lite.cc", 239);
    char v6 = sub_1DD2FAF68(v17, "Exceeded maximum protobuf size of 2GB: ");
    std::string::size_type v7 = sub_1DD2FB378(v6, v5);
    sub_1DD2FB0A4((uint64_t)&v16, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_1DD2FB0AC((uint64_t)v17);
    return 0;
  }
  int v8 = *(_DWORD *)(a2 + 16);
  int v9 = v8 - v4;
  if (v8 >= (int)v4)
  {
    uint64_t v10 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = v10 + v4;
    *(_DWORD *)(a2 + 16) = v9;
    if (v10)
    {
      uint64_t v11 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 128))(a1, *(unsigned __int8 *)(a2 + 26), v10)- v10;
      if (v11 == v5) {
        return 1;
      }
      goto LABEL_12;
    }
    int v8 = v9;
  }
  int v12 = *(_DWORD *)(a2 + 20);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 104))(a1, a2);
  if (*(unsigned char *)(a2 + 24)) {
    return 0;
  }
  int v14 = v8 + *(_DWORD *)(a2 + 20) - (v12 + *(_DWORD *)(a2 + 16));
  if (v5 != v14)
  {
    uint64_t v11 = v14;
LABEL_12:
    uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
    sub_1DD2FA51C(v5, v15, v11, a1);
  }
  return 1;
}

void sub_1DD2FA504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1DD2FB0AC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1DD2FA51C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    sub_1DD2FAF50((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/message_lite.cc", 68);
    std::string::size_type v7 = sub_1DD2FAF68(v19, "CHECK failed: (byte_size_before_serialization) == (byte_size_after_serialization): ");
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a4 + 16))(__p, a4);
    int v8 = sub_1DD2FAF94(v7, (const std::string::value_type *)__p);
    int v9 = sub_1DD2FAF68(v8, " was modified concurrently during serialization.");
    sub_1DD2FB0A4((uint64_t)&v16, (const char **)&v9->__r_.__value_.__l.__data_);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
    sub_1DD2FB0AC((uint64_t)v19);
  }
  if (a3 != a1)
  {
    sub_1DD2FAF50((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/message_lite.cc", 71);
    uint64_t v10 = sub_1DD2FAF68(v19, "CHECK failed: (bytes_produced_by_serialization) == (byte_size_before_serialization): ");
    uint64_t v11 = sub_1DD2FAF68(v10, "Byte size calculation and serialization were inconsistent.  This may indicate a bug in protocol buffers or it may be caused by concurrent modification of ");
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a4 + 16))(__p, a4);
    int v12 = sub_1DD2FAF94(v11, (const std::string::value_type *)__p);
    int v13 = sub_1DD2FAF68(v12, ".");
    sub_1DD2FB0A4((uint64_t)&v16, (const char **)&v13->__r_.__value_.__l.__data_);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
    sub_1DD2FB0AC((uint64_t)v19);
  }
  sub_1DD2FAF50((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/message_lite.cc", 75);
  int v14 = sub_1DD2FAF68(v19, "This shouldn't be called if all the sizes are equal.");
  sub_1DD2FB0A4((uint64_t)__p, (const char **)&v14->__r_.__value_.__l.__data_);
  return sub_1DD2FB0AC((uint64_t)v19);
}

void sub_1DD2FA6D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1DD2FB0AC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_1DD2FA720(uint64_t a1, uint64_t a2)
{
  sub_1DD2F9130((uint64_t)v5, a2);
  uint64_t v3 = sub_1DD2FA350(a1, (uint64_t)v5);
  sub_1DD2F92B4(v5);
  return v3;
}

void sub_1DD2FA76C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
}

BOOL sub_1DD2FA780(uint64_t a1, std::string *a2)
{
  char v2 = a2;
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0) {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
  uint64_t v6 = v5;
  unint64_t v7 = v5 >> 31;
  if (v5 >> 31)
  {
    sub_1DD2FAF50((uint64_t)v14, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/message_lite.cc", 289);
    uint64_t v10 = sub_1DD2FAF68(v14, "Exceeded maximum protobuf size of 2GB: ");
    uint64_t v11 = sub_1DD2FB378(v10, v6);
    sub_1DD2FB0A4((uint64_t)&v13, (const char **)&v11->__r_.__value_.__l.__data_);
    sub_1DD2FB0AC((uint64_t)v14);
  }
  else
  {
    std::string::resize(v2, v5 + size, 0);
    if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0) {
      char v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    }
    uint64_t v8 = (*(uint64_t (**)(uint64_t, std::string::size_type))(*(void *)a1 + 112))(a1, (std::string::size_type)v2 + size)- ((void)v2+ size);
    if (v8 != v6)
    {
      uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
      sub_1DD2FA51C(v6, v9, v8, a1);
    }
  }
  return v7 == 0;
}

void sub_1DD2FA8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1DD2FB0AC((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1DD2FA900(uint64_t a1, std::string *a2)
{
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    *a2->__r_.__value_.__l.__data_ = 0;
    a2->__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    a2->__r_.__value_.__s.__data_[0] = 0;
    *((unsigned char *)&a2->__r_.__value_.__s + 23) = 0;
  }
  return sub_1DD2FA780(a1, a2);
}

unsigned char *sub_1DD2FA924(uint64_t a1, unsigned __int8 a2, unsigned char *a3)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 8) + 24;
    int v8 = *(_DWORD *)v6 - 1;
    return sub_1DD2F57B4(a1, v7, v8, a2, a3);
  }
  else
  {
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    sub_1DD2F96F0((uint64_t)v17, (uint64_t)a3, v10, -1);
    sub_1DD2F9130((uint64_t)v14, (uint64_t)v17);
    unsigned __int8 v16 = a2;
    (*(void (**)(uint64_t, int *))(*(void *)a1 + 104))(a1, v14);
    if (v15)
    {
      sub_1DD2FAF50((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/message_lite.cc", 373);
      uint64_t v11 = sub_1DD2FAF68(v13, "CHECK failed: !coded_out.HadError(): ");
      sub_1DD2FB0A4((uint64_t)&v12, (const char **)&v11->__r_.__value_.__l.__data_);
      sub_1DD2FB0AC((uint64_t)v13);
    }
    sub_1DD2F92B4(v14);
    return &a3[v10];
  }
}

void sub_1DD2FAA94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_1DD2FB0AC((uint64_t)va);
  sub_1DD2F92B4((int *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DD2FAAC0(uint64_t a1, int a2)
{
  int v2 = *(_DWORD *)(a1 + 8);
  int v3 = *(_DWORD *)(a1 + 12);
  int v4 = v2 + a2;
  unint64_t v5 = *(unsigned int **)(a1 + 16);
  if (v3 < v2 + a2)
  {
    uint64_t v7 = *(void *)a1;
    int v8 = 2 * v3;
    if (2 * v3 <= v4) {
      int v8 = v4;
    }
    if (v8 <= 4) {
      unsigned int v9 = 4;
    }
    else {
      unsigned int v9 = v8;
    }
    uint64_t v10 = 8 * v9;
    if (v7)
    {
      uint64_t v11 = (v10 + 15) & 0x7FFFFFFF8;
      if (*(void *)(v7 + 112)) {
        sub_1DD2F5330(*(void *)a1, MEMORY[0x1E4FBA380], v11);
      }
      char v12 = (unsigned int *)sub_1DD2F4EC0(v7, v11);
    }
    else
    {
      char v12 = (unsigned int *)operator new(v10 + 8);
    }
    *(void *)(a1 + 16) = v12;
    *(_DWORD *)(a1 + 12) = v9;
    if (v5 && (uint64_t v13 = *v5, (int)v13 >= 1))
    {
      memcpy(v12 + 2, v5 + 2, 8 * v13);
      char v12 = *(unsigned int **)(a1 + 16);
      *char v12 = *v5;
      if (!v7) {
        goto LABEL_17;
      }
    }
    else
    {
      *char v12 = 0;
      if (!v7)
      {
LABEL_17:
        operator delete(v5);
        char v12 = *(unsigned int **)(a1 + 16);
      }
    }
    int v2 = *(_DWORD *)(a1 + 8);
    unint64_t v5 = v12;
  }
  return (uint64_t)&v5[2 * v2 + 2];
}

uint64_t sub_1DD2FABC8(uint64_t result, int a2)
{
  int v2 = *(_DWORD *)(result + 8);
  BOOL v3 = __OFSUB__(a2, v2);
  int v4 = a2 - v2;
  if (!((v4 < 0) ^ v3 | (v4 == 0))) {
    return sub_1DD2FAAC0(result, v4);
  }
  return result;
}

void sub_1DD2FABDC(int a1, int a2, const std::string::value_type *a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (a2 > 3006001)
  {
    LODWORD(v20) = 3;
    unsigned int v21 = "/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/s"
          "rc/google/protobuf/stubs/common.cc";
    int v22 = 68;
    memset(&v23, 0, sizeof(v23));
    std::string::append(&v23, "This program requires version ");
    sub_1DD2FAFD8(a2, &v17);
    if ((v19 & 0x80u) == 0) {
      uint64_t v6 = (const std::string::value_type *)&v17;
    }
    else {
      uint64_t v6 = (const std::string::value_type *)v17;
    }
    if ((v19 & 0x80u) == 0) {
      std::string::size_type v7 = v19;
    }
    else {
      std::string::size_type v7 = v18;
    }
    std::string::append(&v23, v6, v7);
    std::string::append(&v23, " of the Protocol Buffer runtime library, but the installed version is ");
    snprintf(__str, 0x80uLL, "%d.%d.%d", 3, 6, 1);
    char v25 = 0;
    sub_1DD314888(&__p, __str);
    if ((v16 & 0x80u) == 0) {
      p_p = (const std::string::value_type *)&__p;
    }
    else {
      p_p = (const std::string::value_type *)__p;
    }
    if ((v16 & 0x80u) == 0) {
      std::string::size_type v9 = v16;
    }
    else {
      std::string::size_type v9 = v15;
    }
    std::string::append(&v23, p_p, v9);
    std::string::append(&v23, ".  Please update your library.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"");
    std::string::append(&v23, a3);
    std::string::append(&v23, "\".)");
    sub_1DD2FB3F8(&v20);
    if ((char)v16 < 0) {
      operator delete(__p);
    }
    if ((char)v19 < 0) {
      operator delete(v17);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
  }
  if (a1 < 3006001)
  {
    LODWORD(v20) = 3;
    unsigned int v21 = "/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/s"
          "rc/google/protobuf/stubs/common.cc";
    int v22 = 79;
    memset(&v23, 0, sizeof(v23));
    std::string::append(&v23, "This program was compiled against version ");
    sub_1DD2FAFD8(a1, &v17);
    if ((v19 & 0x80u) == 0) {
      uint64_t v10 = (const std::string::value_type *)&v17;
    }
    else {
      uint64_t v10 = (const std::string::value_type *)v17;
    }
    if ((v19 & 0x80u) == 0) {
      std::string::size_type v11 = v19;
    }
    else {
      std::string::size_type v11 = v18;
    }
    std::string::append(&v23, v10, v11);
    std::string::append(&v23, " of the Protocol Buffer runtime library, which is not compatible with the installed version (");
    snprintf(__str, 0x80uLL, "%d.%d.%d", 3, 6, 1);
    char v25 = 0;
    sub_1DD314888(&__p, __str);
    if ((v16 & 0x80u) == 0) {
      char v12 = (const std::string::value_type *)&__p;
    }
    else {
      char v12 = (const std::string::value_type *)__p;
    }
    if ((v16 & 0x80u) == 0) {
      std::string::size_type v13 = v16;
    }
    else {
      std::string::size_type v13 = v15;
    }
    std::string::append(&v23, v12, v13);
    std::string::append(&v23, ").  Contact the program author for an update.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"");
    std::string::append(&v23, a3);
    std::string::append(&v23, "\".)");
    sub_1DD2FB3F8(&v20);
    if ((char)v16 < 0) {
      operator delete(__p);
    }
    if ((char)v19 < 0) {
      operator delete(v17);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1DD2FAEE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DD2FAF50(uint64_t result, int a2, uint64_t a3, int a4)
{
  *(_DWORD *)uint64_t result = a2;
  *(void *)(result + 8) = a3;
  *(_DWORD *)(result + 16) = a4;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 24) = 0;
  return result;
}

std::string *sub_1DD2FAF68(std::string *a1, const std::string::value_type *a2)
{
  return a1;
}

std::string *sub_1DD2FAF94(std::string *a1, const std::string::value_type *a2)
{
  BOOL v3 = a1 + 1;
  std::string::size_type v4 = *((void *)a2 + 1);
  if (a2[23] >= 0)
  {
    std::string::size_type v5 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const std::string::value_type **)a2;
    std::string::size_type v5 = v4;
  }
  std::string::append(v3, a2, v5);
  return a1;
}

void *sub_1DD2FAFD8@<X0>(int a1@<W0>, void *a2@<X8>)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  snprintf(__str, 0x80uLL, "%d.%d.%d", a1 / 1000000, a1 / 1000 % 1000, a1 % 1000);
  char __str[127] = 0;
  return sub_1DD314888(a2, __str);
}

void sub_1DD2FB0A4(uint64_t a1, const char **a2)
{
}

uint64_t sub_1DD2FB0AC(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

uint64_t sub_1DD2FB0E0(uint64_t result, const char *a2, int a3, uint64_t a4)
{
  if ((result & 0x80000000) == 0)
  {
    std::string::size_type v4 = (FILE **)MEMORY[0x1E4F143C8];
    if (*(char *)(a4 + 23) >= 0) {
      uint64_t v5 = (const char *)a4;
    }
    else {
      uint64_t v5 = *(const char **)a4;
    }
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "[libprotobuf %s %s:%d] %s\n", off_1E6CBAB30[result], a2, a3, v5);
    uint64_t v6 = *v4;
    return fflush(v6);
  }
  return result;
}

void sub_1DD2FB160()
{
  if (qword_1EAB1F890)
  {
    std::mutex::~mutex((std::mutex *)qword_1EAB1F890);
    operator delete(v0);
  }
  qword_1EAB1F890 = 0;
}

void sub_1DD2FB194()
{
  uint64_t v0 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v0 = 850045863;
  *(_OWORD *)(v0 + 8) = 0u;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *((void *)v0 + 7) = 0;
  qword_1EAB1F890 = (uint64_t)v0;
  sub_1DD2FB4E0((uint64_t)sub_1DD2FB614, (uint64_t)sub_1DD2FB160);
}

void sub_1DD2FB208()
{
  uint64_t v0 = sub_1DD2FB194;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EAB1F7F8, memory_order_acquire) != -1)
  {
    int v2 = &v0;
    uint64_t v1 = &v2;
    std::__call_once(&qword_1EAB1F7F8, &v1, (void (__cdecl *)(void *))sub_1DD2F80F8);
  }
}

std::string *sub_1DD2FB278(std::string *a1, int a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  snprintf(__str, 0x80uLL, "%d", a2);
  char __str[127] = 0;
  std::string::append(a1 + 1, __str);
  return a1;
}

std::string *sub_1DD2FB2F8(std::string *a1, int a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  snprintf(__str, 0x80uLL, "%u", a2);
  char __str[127] = 0;
  std::string::append(a1 + 1, __str);
  return a1;
}

std::string *sub_1DD2FB378(std::string *a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  snprintf(__str, 0x80uLL, "%lu", a2);
  char __str[127] = 0;
  std::string::append(a1 + 1, __str);
  return a1;
}

void sub_1DD2FB3F8(const char **a1)
{
  if (*(_DWORD *)a1 == 3)
  {
    uint64_t v2 = 3;
  }
  else
  {
    sub_1DD2FB208();
    BOOL v3 = (std::mutex *)qword_1EAB1F890;
    std::mutex::lock((std::mutex *)qword_1EAB1F890);
    int v4 = dword_1EAB1F898;
    std::mutex::unlock(v3);
    if (v4 > 0) {
      goto LABEL_6;
    }
    uint64_t v2 = *(unsigned int *)a1;
  }
  off_1EC8ABF80(v2, a1[1], *((_DWORD *)a1 + 4), (uint64_t)(a1 + 3));
LABEL_6:
  if (*(_DWORD *)a1 == 3)
  {
    exception = __cxa_allocate_exception(0x30uLL);
    sub_1DD2FB4D8(exception, a1[1], *((unsigned int *)a1 + 4), a1 + 3);
    __cxa_throw(exception, (struct type_info *)&unk_1F3878E00, (void (*)(void *))sub_1DD2FB4DC);
  }
}

void sub_1DD2FB4C4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1DD2FB4E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1DD2FB618();
  std::mutex::lock((std::mutex *)(v4 + 24));
  uint64_t v5 = *(void **)(v4 + 8);
  unint64_t v6 = *(void *)(v4 + 16);
  if ((unint64_t)v5 >= v6)
  {
    uint64_t v8 = ((uint64_t)v5 - *(void *)v4) >> 4;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60) {
      sub_1DD251DAC();
    }
    uint64_t v10 = v6 - *(void *)v4;
    if (v10 >> 3 > v9) {
      unint64_t v9 = v10 >> 3;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      char v12 = (char *)sub_1DD27753C(v4 + 16, v11);
    }
    else {
      char v12 = 0;
    }
    std::string::size_type v13 = &v12[16 * v8];
    int v14 = &v12[16 * v11];
    *(void *)std::string::size_type v13 = a1;
    *((void *)v13 + 1) = a2;
    std::string::size_type v7 = v13 + 16;
    unsigned __int8 v16 = *(char **)v4;
    std::string::size_type v15 = *(char **)(v4 + 8);
    if (v15 != *(char **)v4)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v15 - 1);
        v13 -= 16;
        v15 -= 16;
      }
      while (v15 != v16);
      std::string::size_type v15 = *(char **)v4;
    }
    *(void *)uint64_t v4 = v13;
    *(void *)(v4 + 8) = v7;
    *(void *)(v4 + 16) = v14;
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    *uint64_t v5 = a1;
    v5[1] = a2;
    std::string::size_type v7 = v5 + 2;
  }
  *(void *)(v4 + 8) = v7;
  std::mutex::unlock((std::mutex *)(v4 + 24));
}

void sub_1DD2FB600(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DD2FB618()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EAB1EB68, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EAB1EB68))
  {
    uint64_t v1 = operator new(0x58uLL);
    *uint64_t v1 = 0;
    v1[1] = 0;
    v1[2] = 0;
    v1[3] = 850045863;
    *((_OWORD *)v1 + 2) = 0u;
    *((_OWORD *)v1 + 3) = 0u;
    *((_OWORD *)v1 + 4) = 0u;
    v1[10] = 0;
    qword_1EAB1EBB0 = (uint64_t)v1;
    __cxa_guard_release(&qword_1EAB1EB68);
  }
  return qword_1EAB1EBB0;
}

void sub_1DD2FB69C(_Unwind_Exception *a1)
{
}

void sub_1DD2FB6B4(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_1F387CC40;
  if (SHIBYTE(this[5].__vftable) < 0) {
    operator delete(this[3].__vftable);
  }
  std::exception::~exception(this);
}

void sub_1DD2FB714(std::exception *a1)
{
  sub_1DD2FB6B4(a1);
  operator delete(v1);
}

uint64_t sub_1DD2FB73C(uint64_t a1)
{
  uint64_t result = a1 + 24;
  if (*(char *)(a1 + 47) < 0) {
    return *(void *)result;
  }
  return result;
}

uint64_t sub_1DD2FB758(uint64_t a1, uint64_t a2, int a3, long long *a4)
{
  *(void *)a1 = &unk_1F387CC40;
  *(void *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = a3;
  uint64_t v5 = a1 + 24;
  if (*((char *)a4 + 23) < 0)
  {
    sub_1DD24F980((unsigned char *)v5, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v6 = *a4;
    *(void *)(v5 + 16) = *((void *)a4 + 2);
    *(_OWORD *)uint64_t v5 = v6;
  }
  return a1;
}

void sub_1DD2FB7C4(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DD2FB7D8(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

BOOL sub_1DD2FB80C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (a2 < 8) {
    return 0;
  }
  unsigned int v4 = a2;
  BOOL v3 = 0;
  switch(a2 & 7)
  {
    case 0u:
      std::string::size_type v7 = *(char **)a1;
      if (*(void *)a1 >= *(void *)(a1 + 8) || *v7 < 0)
      {
        unint64_t v26 = sub_1DD2F8A78(a1);
        if ((v27 & 1) == 0) {
          return 0;
        }
        unint64_t v8 = v26;
      }
      else
      {
        unint64_t v8 = *v7;
        *(void *)a1 = v7 + 1;
      }
      if (*(int *)(a3 + 16) < 5)
      {
        sub_1DD2F9508(a3, v4);
        int v32 = *(_DWORD *)(a3 + 16);
      }
      else
      {
        uint64_t v28 = *(void *)(a3 + 8);
        if (v4 < 0x80)
        {
          LOBYTE(v30) = v4;
          int v29 = *(unsigned char **)(a3 + 8);
        }
        else
        {
          int v29 = *(unsigned char **)(a3 + 8);
          do
          {
            *v29++ = v4 | 0x80;
            unsigned int v30 = v4 >> 7;
            unsigned int v31 = v4 >> 14;
            v4 >>= 7;
          }
          while (v31);
        }
        *int v29 = v30;
        int v39 = v29 - v28 + 1;
        *(void *)(a3 + 8) += v39;
        int v32 = *(_DWORD *)(a3 + 16) - v39;
        *(_DWORD *)(a3 + 16) = v32;
      }
      if (v32 < 10)
      {
        sub_1DD2F9564(a3, v8);
      }
      else
      {
        uint64_t v40 = *(void *)(a3 + 8);
        if (v8 < 0x80)
        {
          LOBYTE(v42) = v8;
          unint64_t v41 = *(unsigned char **)(a3 + 8);
        }
        else
        {
          unint64_t v41 = *(unsigned char **)(a3 + 8);
          do
          {
            *v41++ = v8 | 0x80;
            unint64_t v42 = v8 >> 7;
            unint64_t v43 = v8 >> 14;
            v8 >>= 7;
          }
          while (v43);
        }
        unsigned char *v41 = v42;
        int v44 = v41 - v40 + 1;
        *(void *)(a3 + 8) += v44;
        *(_DWORD *)(a3 + 16) -= v44;
      }
      goto LABEL_63;
    case 1u:
      __p.__r_.__value_.__r.__words[0] = 0;
      unint64_t v9 = *(std::string::size_type **)a1;
      if ((int)(*(_DWORD *)(a1 + 8) - *(void *)a1) < 8)
      {
        if (!sub_1DD2F89E4(a1, &__p)) {
          return 0;
        }
      }
      else
      {
        __p.__r_.__value_.__r.__words[0] = *v9;
        *(void *)a1 = v9 + 1;
      }
      if (*(int *)(a3 + 16) < 5)
      {
        sub_1DD2F9508(a3, v4);
      }
      else
      {
        uint64_t v10 = *(void *)(a3 + 8);
        if (v4 < 0x80)
        {
          LOBYTE(v12) = v4;
          unint64_t v11 = *(unsigned char **)(a3 + 8);
        }
        else
        {
          unint64_t v11 = *(unsigned char **)(a3 + 8);
          do
          {
            *v11++ = v4 | 0x80;
            unsigned int v12 = v4 >> 7;
            unsigned int v13 = v4 >> 14;
            v4 >>= 7;
          }
          while (v13);
        }
        *unint64_t v11 = v12;
        int v37 = v11 - v10 + 1;
        *(void *)(a3 + 8) += v37;
        *(_DWORD *)(a3 + 16) -= v37;
      }
      sub_1DD2F9480(a3, (uint64_t)__p.__r_.__value_.__l.__data_);
      goto LABEL_63;
    case 2u:
      int v14 = *(char **)a1;
      if (*(void *)a1 >= *(void *)(a1 + 8))
      {
        LODWORD(v15) = 0;
      }
      else
      {
        uint64_t v15 = *v14;
        if ((*v14 & 0x80000000) == 0)
        {
          *(void *)a1 = v14 + 1;
          goto LABEL_69;
        }
      }
      uint64_t v15 = sub_1DD2F8C30((uint64_t *)a1, v15);
      if (v15 < 0) {
        return 0;
      }
LABEL_69:
      if (*(int *)(a3 + 16) < 5)
      {
        sub_1DD2F9508(a3, v4);
        int v50 = *(_DWORD *)(a3 + 16);
      }
      else
      {
        uint64_t v46 = *(void *)(a3 + 8);
        if (v4 < 0x80)
        {
          LOBYTE(v48) = v4;
          unsigned int v47 = *(unsigned char **)(a3 + 8);
        }
        else
        {
          unsigned int v47 = *(unsigned char **)(a3 + 8);
          do
          {
            *v47++ = v4 | 0x80;
            unsigned int v48 = v4 >> 7;
            unsigned int v49 = v4 >> 14;
            v4 >>= 7;
          }
          while (v49);
        }
        *unsigned int v47 = v48;
        int v51 = v47 - v46 + 1;
        *(void *)(a3 + 8) += v51;
        int v50 = *(_DWORD *)(a3 + 16) - v51;
        *(_DWORD *)(a3 + 16) = v50;
      }
      if (v50 < 5)
      {
        sub_1DD2F9508(a3, v15);
      }
      else
      {
        uint64_t v52 = *(void *)(a3 + 8);
        if (v15 < 0x80)
        {
          LOBYTE(v55) = v15;
          unint64_t v53 = *(unsigned char **)(a3 + 8);
        }
        else
        {
          unint64_t v53 = *(unsigned char **)(a3 + 8);
          unsigned int v54 = v15;
          do
          {
            *v53++ = v54 | 0x80;
            unsigned int v55 = v54 >> 7;
            unsigned int v56 = v54 >> 14;
            v54 >>= 7;
          }
          while (v56);
        }
        *unint64_t v53 = v55;
        int v57 = v53 - v52 + 1;
        *(void *)(a3 + 8) += v57;
        *(_DWORD *)(a3 + 16) -= v57;
      }
      memset(&__p, 0, sizeof(__p));
      BOOL v3 = sub_1DD2F87A8(a1, &__p, v15);
      if (v3)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v59 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          int v59 = __p.__r_.__value_.__r.__words[1];
        }
        sub_1DD2F92E0(a3, (char *)p_p, v59);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      return v3;
    case 3u:
      if (*(int *)(a3 + 16) < 5)
      {
        sub_1DD2F9508(a3, a2);
      }
      else
      {
        uint64_t v16 = *(void *)(a3 + 8);
        if (a2 < 0x80)
        {
          LOBYTE(v19) = a2;
          char v17 = *(unsigned char **)(a3 + 8);
        }
        else
        {
          char v17 = *(unsigned char **)(a3 + 8);
          unsigned int v18 = a2;
          do
          {
            *v17++ = v18 | 0x80;
            unsigned int v19 = v18 >> 7;
            unsigned int v20 = v18 >> 14;
            v18 >>= 7;
          }
          while (v20);
        }
        *char v17 = v19;
        int v33 = v17 - v16 + 1;
        *(void *)(a3 + 8) += v33;
        *(_DWORD *)(a3 + 16) -= v33;
      }
      int v34 = *(_DWORD *)(a1 + 52);
      BOOL v35 = __OFSUB__(v34--, 1);
      *(_DWORD *)(a1 + 52) = v34;
      if (v34 < 0 != v35 || !sub_1DD2FBD9C(a1, a3)) {
        return 0;
      }
      int v36 = *(_DWORD *)(a1 + 52);
      if (v36 < *(_DWORD *)(a1 + 56)) {
        *(_DWORD *)(a1 + 52) = v36 + 1;
      }
      return *(_DWORD *)(a1 + 32) == (v4 & 0xFFFFFFF8 | 4);
    case 5u:
      LODWORD(__p.__r_.__value_.__l.__data_) = 0;
      unsigned int v21 = *(std::string::size_type **)a1;
      if ((int)(*(_DWORD *)(a1 + 8) - *(void *)a1) < 4)
      {
        if (!sub_1DD2F897C(a1, &__p)) {
          return 0;
        }
      }
      else
      {
        LODWORD(__p.__r_.__value_.__l.__data_) = *(_DWORD *)v21;
        *(void *)a1 = (char *)v21 + 4;
      }
      if (*(int *)(a3 + 16) < 5)
      {
        sub_1DD2F9508(a3, v4);
      }
      else
      {
        uint64_t v22 = *(void *)(a3 + 8);
        if (v4 < 0x80)
        {
          LOBYTE(v24) = v4;
          std::string v23 = *(unsigned char **)(a3 + 8);
        }
        else
        {
          std::string v23 = *(unsigned char **)(a3 + 8);
          do
          {
            *v23++ = v4 | 0x80;
            unsigned int v24 = v4 >> 7;
            unsigned int v25 = v4 >> 14;
            v4 >>= 7;
          }
          while (v25);
        }
        *std::string v23 = v24;
        int v38 = v23 - v22 + 1;
        *(void *)(a3 + 8) += v38;
        *(_DWORD *)(a3 + 16) -= v38;
      }
      sub_1DD2F9424(a3, (int)__p.__r_.__value_.__l.__data_);
LABEL_63:
      BOOL v3 = 1;
      break;
    default:
      return v3;
  }
  return v3;
}

void sub_1DD2FBD68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DD2FBD9C(uint64_t a1, uint64_t a2)
{
  while (1)
  {
    unsigned int v4 = *(char **)a1;
    if (*(void *)a1 >= *(void *)(a1 + 8))
    {
      uint64_t v5 = 0;
    }
    else
    {
      uint64_t v5 = *v4;
      if ((*v4 & 0x80000000) == 0)
      {
        *(void *)a1 = v4 + 1;
        goto LABEL_6;
      }
    }
    LODWORD(v5) = sub_1DD2F8F70(a1, v5);
LABEL_6:
    *(_DWORD *)(a1 + 32) = v5;
    BOOL v6 = v5 == 0;
    if (!v5) {
      return v6;
    }
    if ((v5 & 7) == 4) {
      break;
    }
    if ((sub_1DD2FB80C(a1) & 1) == 0) {
      return v6;
    }
  }
  if (*(int *)(a2 + 16) < 5)
  {
    sub_1DD2F9508(a2, v5);
  }
  else
  {
    uint64_t v7 = *(void *)(a2 + 8);
    if (v5 < 0x80)
    {
      LOBYTE(v9) = v5;
      unint64_t v8 = *(unsigned char **)(a2 + 8);
    }
    else
    {
      unint64_t v8 = *(unsigned char **)(a2 + 8);
      do
      {
        *v8++ = v5 | 0x80;
        unsigned int v9 = v5 >> 7;
        unsigned int v10 = v5 >> 14;
        LODWORD(v5) = v5 >> 7;
      }
      while (v10);
    }
    *unint64_t v8 = v9;
    int v11 = v8 - v7 + 1;
    *(void *)(a2 + 8) += v11;
    *(_DWORD *)(a2 + 16) -= v11;
  }
  return 1;
}

uint64_t sub_1DD2FBEA4(uint64_t result, signed int a2, uint64_t a3)
{
  unsigned int v5 = 8 * result;
  if (*(int *)(a3 + 16) < 5)
  {
    uint64_t result = sub_1DD2F9508(a3, v5);
    int v10 = *(_DWORD *)(a3 + 16);
  }
  else
  {
    uint64_t v6 = *(void *)(a3 + 8);
    if (v5 < 0x80)
    {
      LOBYTE(v8) = 8 * result;
      uint64_t v7 = *(unsigned char **)(a3 + 8);
    }
    else
    {
      uint64_t v7 = *(unsigned char **)(a3 + 8);
      do
      {
        *v7++ = v5 | 0x80;
        unsigned int v8 = v5 >> 7;
        unsigned int v9 = v5 >> 14;
        v5 >>= 7;
      }
      while (v9);
    }
    *uint64_t v7 = v8;
    int v11 = v7 - v6 + 1;
    *(void *)(a3 + 8) += v11;
    int v10 = *(_DWORD *)(a3 + 16) - v11;
    *(_DWORD *)(a3 + 16) = v10;
  }
  unint64_t v12 = a2;
  if (v10 < 10)
  {
    return sub_1DD2F9564(a3, a2);
  }
  else
  {
    uint64_t v13 = *(void *)(a3 + 8);
    if (a2 < 0x80)
    {
      LOBYTE(v15) = a2;
      int v14 = *(unsigned char **)(a3 + 8);
    }
    else
    {
      int v14 = *(unsigned char **)(a3 + 8);
      do
      {
        *v14++ = v12 | 0x80;
        unint64_t v15 = v12 >> 7;
        unint64_t v16 = v12 >> 14;
        v12 >>= 7;
      }
      while (v16);
    }
    *int v14 = v15;
    int v17 = v14 - v13 + 1;
    *(void *)(a3 + 8) += v17;
    *(_DWORD *)(a3 + 16) -= v17;
  }
  return result;
}

uint64_t sub_1DD2FBFC4(uint64_t result, unsigned int a2, uint64_t a3)
{
  unsigned int v5 = 8 * result;
  if (*(int *)(a3 + 16) < 5)
  {
    uint64_t result = sub_1DD2F9508(a3, v5);
    int v10 = *(_DWORD *)(a3 + 16);
  }
  else
  {
    uint64_t v6 = *(void *)(a3 + 8);
    if (v5 < 0x80)
    {
      LOBYTE(v8) = 8 * result;
      uint64_t v7 = *(unsigned char **)(a3 + 8);
    }
    else
    {
      uint64_t v7 = *(unsigned char **)(a3 + 8);
      do
      {
        *v7++ = v5 | 0x80;
        unsigned int v8 = v5 >> 7;
        unsigned int v9 = v5 >> 14;
        v5 >>= 7;
      }
      while (v9);
    }
    *uint64_t v7 = v8;
    int v11 = v7 - v6 + 1;
    *(void *)(a3 + 8) += v11;
    int v10 = *(_DWORD *)(a3 + 16) - v11;
    *(_DWORD *)(a3 + 16) = v10;
  }
  if (v10 < 5)
  {
    return sub_1DD2F9508(a3, a2);
  }
  else
  {
    uint64_t v12 = *(void *)(a3 + 8);
    if (a2 < 0x80)
    {
      LOBYTE(v14) = a2;
      uint64_t v13 = *(unsigned char **)(a3 + 8);
    }
    else
    {
      uint64_t v13 = *(unsigned char **)(a3 + 8);
      do
      {
        *v13++ = a2 | 0x80;
        unsigned int v14 = a2 >> 7;
        unsigned int v15 = a2 >> 14;
        a2 >>= 7;
      }
      while (v15);
    }
    *uint64_t v13 = v14;
    int v16 = v13 - v12 + 1;
    *(void *)(a3 + 8) += v16;
    *(_DWORD *)(a3 + 16) -= v16;
  }
  return result;
}

uint64_t sub_1DD2FC0E4(uint64_t result, unint64_t a2, uint64_t a3)
{
  unsigned int v5 = 8 * result;
  if (*(int *)(a3 + 16) < 5)
  {
    uint64_t result = sub_1DD2F9508(a3, v5);
    int v10 = *(_DWORD *)(a3 + 16);
  }
  else
  {
    uint64_t v6 = *(void *)(a3 + 8);
    if (v5 < 0x80)
    {
      LOBYTE(v8) = 8 * result;
      uint64_t v7 = *(unsigned char **)(a3 + 8);
    }
    else
    {
      uint64_t v7 = *(unsigned char **)(a3 + 8);
      do
      {
        *v7++ = v5 | 0x80;
        unsigned int v8 = v5 >> 7;
        unsigned int v9 = v5 >> 14;
        v5 >>= 7;
      }
      while (v9);
    }
    *uint64_t v7 = v8;
    int v11 = v7 - v6 + 1;
    *(void *)(a3 + 8) += v11;
    int v10 = *(_DWORD *)(a3 + 16) - v11;
    *(_DWORD *)(a3 + 16) = v10;
  }
  if (v10 < 10)
  {
    return sub_1DD2F9564(a3, a2);
  }
  else
  {
    uint64_t v12 = *(void *)(a3 + 8);
    if (a2 < 0x80)
    {
      LOBYTE(v14) = a2;
      uint64_t v13 = *(unsigned char **)(a3 + 8);
    }
    else
    {
      uint64_t v13 = *(unsigned char **)(a3 + 8);
      do
      {
        *v13++ = a2 | 0x80;
        unint64_t v14 = a2 >> 7;
        unint64_t v15 = a2 >> 14;
        a2 >>= 7;
      }
      while (v15);
    }
    *uint64_t v13 = v14;
    int v16 = v13 - v12 + 1;
    *(void *)(a3 + 8) += v16;
    *(_DWORD *)(a3 + 16) -= v16;
  }
  return result;
}

uint64_t sub_1DD2FC204(uint64_t result, int a2, uint64_t a3)
{
  unsigned int v5 = 8 * result;
  if (*(int *)(a3 + 16) < 5)
  {
    uint64_t result = sub_1DD2F9508(a3, v5);
    int v10 = *(_DWORD *)(a3 + 16);
  }
  else
  {
    uint64_t v6 = *(void *)(a3 + 8);
    if (v5 < 0x80)
    {
      LOBYTE(v8) = 8 * result;
      uint64_t v7 = *(unsigned char **)(a3 + 8);
    }
    else
    {
      uint64_t v7 = *(unsigned char **)(a3 + 8);
      do
      {
        *v7++ = v5 | 0x80;
        unsigned int v8 = v5 >> 7;
        unsigned int v9 = v5 >> 14;
        v5 >>= 7;
      }
      while (v9);
    }
    *uint64_t v7 = v8;
    int v11 = v7 - v6 + 1;
    *(void *)(a3 + 8) += v11;
    int v10 = *(_DWORD *)(a3 + 16) - v11;
    *(_DWORD *)(a3 + 16) = v10;
  }
  unsigned int v12 = (2 * a2) ^ (a2 >> 31);
  if (v10 < 5)
  {
    return sub_1DD2F9508(a3, v12);
  }
  else
  {
    uint64_t v13 = *(void *)(a3 + 8);
    if (v12 < 0x80)
    {
      int v15 = (2 * a2) ^ (a2 >> 31);
      unint64_t v14 = *(unsigned char **)(a3 + 8);
    }
    else
    {
      unint64_t v14 = *(unsigned char **)(a3 + 8);
      do
      {
        *v14++ = v12 | 0x80;
        int v15 = v12 >> 7;
        unsigned int v16 = v12 >> 14;
        v12 >>= 7;
      }
      while (v16);
    }
    *unint64_t v14 = v15;
    int v17 = v14 - v13 + 1;
    *(void *)(a3 + 8) += v17;
    *(_DWORD *)(a3 + 16) -= v17;
  }
  return result;
}

uint64_t sub_1DD2FC328(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned int v5 = 8 * result;
  if (*(int *)(a3 + 16) < 5)
  {
    uint64_t result = sub_1DD2F9508(a3, v5);
    int v10 = *(_DWORD *)(a3 + 16);
  }
  else
  {
    uint64_t v6 = *(void *)(a3 + 8);
    if (v5 < 0x80)
    {
      LOBYTE(v8) = 8 * result;
      uint64_t v7 = *(unsigned char **)(a3 + 8);
    }
    else
    {
      uint64_t v7 = *(unsigned char **)(a3 + 8);
      do
      {
        *v7++ = v5 | 0x80;
        unsigned int v8 = v5 >> 7;
        unsigned int v9 = v5 >> 14;
        v5 >>= 7;
      }
      while (v9);
    }
    *uint64_t v7 = v8;
    int v11 = v7 - v6 + 1;
    *(void *)(a3 + 8) += v11;
    int v10 = *(_DWORD *)(a3 + 16) - v11;
    *(_DWORD *)(a3 + 16) = v10;
  }
  unint64_t v12 = (2 * a2) ^ (a2 >> 63);
  if (v10 < 10)
  {
    return sub_1DD2F9564(a3, v12);
  }
  else
  {
    uint64_t v13 = *(void *)(a3 + 8);
    if (v12 < 0x80)
    {
      uint64_t v15 = (2 * a2) ^ (a2 >> 63);
      unint64_t v14 = *(unsigned char **)(a3 + 8);
    }
    else
    {
      unint64_t v14 = *(unsigned char **)(a3 + 8);
      do
      {
        *v14++ = v12 | 0x80;
        uint64_t v15 = v12 >> 7;
        unint64_t v16 = v12 >> 14;
        v12 >>= 7;
      }
      while (v16);
    }
    *unint64_t v14 = v15;
    int v17 = v14 - v13 + 1;
    *(void *)(a3 + 8) += v17;
    *(_DWORD *)(a3 + 16) -= v17;
  }
  return result;
}

uint64_t sub_1DD2FC44C(int a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5 = (8 * a1) | 1;
  if (*(int *)(a3 + 16) < 5)
  {
    sub_1DD2F9508(a3, v5);
  }
  else
  {
    uint64_t v6 = *(void *)(a3 + 8);
    if (v5 < 0x80)
    {
      LOBYTE(v8) = (8 * a1) | 1;
      uint64_t v7 = *(unsigned char **)(a3 + 8);
    }
    else
    {
      uint64_t v7 = *(unsigned char **)(a3 + 8);
      do
      {
        *v7++ = v5 | 0x80;
        unsigned int v8 = v5 >> 7;
        unsigned int v9 = v5 >> 14;
        v5 >>= 7;
      }
      while (v9);
    }
    *uint64_t v7 = v8;
    int v10 = v7 - v6 + 1;
    *(void *)(a3 + 8) += v10;
    *(_DWORD *)(a3 + 16) -= v10;
  }
  return sub_1DD2F9480(a3, a2);
}

uint64_t sub_1DD2FC500(int a1, uint64_t a2, double a3)
{
  unsigned int v5 = (8 * a1) | 1;
  if (*(int *)(a2 + 16) < 5)
  {
    sub_1DD2F9508(a2, v5);
  }
  else
  {
    uint64_t v6 = *(void *)(a2 + 8);
    if (v5 < 0x80)
    {
      LOBYTE(v8) = (8 * a1) | 1;
      uint64_t v7 = *(unsigned char **)(a2 + 8);
    }
    else
    {
      uint64_t v7 = *(unsigned char **)(a2 + 8);
      do
      {
        *v7++ = v5 | 0x80;
        unsigned int v8 = v5 >> 7;
        unsigned int v9 = v5 >> 14;
        v5 >>= 7;
      }
      while (v9);
    }
    *uint64_t v7 = v8;
    int v10 = v7 - v6 + 1;
    *(void *)(a2 + 8) += v10;
    *(_DWORD *)(a2 + 16) -= v10;
  }
  return sub_1DD2F9480(a2, *(uint64_t *)&a3);
}

uint64_t sub_1DD2FC5BC(uint64_t result, unsigned int a2, uint64_t a3)
{
  unsigned int v5 = 8 * result;
  if (*(int *)(a3 + 16) < 5)
  {
    uint64_t result = sub_1DD2F9508(a3, v5);
    int v10 = *(_DWORD *)(a3 + 16);
  }
  else
  {
    uint64_t v6 = *(void *)(a3 + 8);
    if (v5 < 0x80)
    {
      LOBYTE(v8) = 8 * result;
      uint64_t v7 = *(unsigned char **)(a3 + 8);
    }
    else
    {
      uint64_t v7 = *(unsigned char **)(a3 + 8);
      do
      {
        *v7++ = v5 | 0x80;
        unsigned int v8 = v5 >> 7;
        unsigned int v9 = v5 >> 14;
        v5 >>= 7;
      }
      while (v9);
    }
    *uint64_t v7 = v8;
    int v11 = v7 - v6 + 1;
    *(void *)(a3 + 8) += v11;
    int v10 = *(_DWORD *)(a3 + 16) - v11;
    *(_DWORD *)(a3 + 16) = v10;
  }
  if (v10 < 5)
  {
    return sub_1DD2F9508(a3, a2);
  }
  else
  {
    *(unsigned char *)(*(void *)(a3 + 8))++ = a2;
    --*(_DWORD *)(a3 + 16);
  }
  return result;
}

uint64_t sub_1DD2FC6A4(int a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5 = (8 * a1) | 2;
  if (*(int *)(a3 + 16) < 5)
  {
    sub_1DD2F9508(a3, v5);
  }
  else
  {
    uint64_t v6 = *(void *)(a3 + 8);
    if (v5 < 0x80)
    {
      LOBYTE(v8) = (8 * a1) | 2;
      uint64_t v7 = *(unsigned char **)(a3 + 8);
    }
    else
    {
      uint64_t v7 = *(unsigned char **)(a3 + 8);
      do
      {
        *v7++ = v5 | 0x80;
        unsigned int v8 = v5 >> 7;
        unsigned int v9 = v5 >> 14;
        v5 >>= 7;
      }
      while (v9);
    }
    *uint64_t v7 = v8;
    int v10 = v7 - v6 + 1;
    *(void *)(a3 + 8) += v10;
    *(_DWORD *)(a3 + 16) -= v10;
  }
  int v11 = *(char *)(a2 + 23);
  if (v11 < 0 && *(void *)(a2 + 8) >> 31)
  {
    sub_1DD2FAF50((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/wire_format_lite.cc", 507);
    unint64_t v12 = sub_1DD2FAF68(v24, "CHECK failed: (value.size()) <= (kint32max): ");
    sub_1DD2FB0A4((uint64_t)&v23, (const char **)&v12->__r_.__value_.__l.__data_);
    sub_1DD2FB0AC((uint64_t)v24);
    LOBYTE(v11) = *(unsigned char *)(a2 + 23);
  }
  if ((v11 & 0x80u) == 0) {
    unsigned int v13 = v11;
  }
  else {
    unsigned int v13 = *(_DWORD *)(a2 + 8);
  }
  if (*(int *)(a3 + 16) < 5)
  {
    sub_1DD2F9508(a3, v13);
  }
  else
  {
    uint64_t v14 = *(void *)(a3 + 8);
    if (v13 < 0x80)
    {
      LOBYTE(v16) = v13;
      uint64_t v15 = *(unsigned char **)(a3 + 8);
    }
    else
    {
      uint64_t v15 = *(unsigned char **)(a3 + 8);
      do
      {
        *v15++ = v13 | 0x80;
        unsigned int v16 = v13 >> 7;
        unsigned int v17 = v13 >> 14;
        v13 >>= 7;
      }
      while (v17);
    }
    *uint64_t v15 = v16;
    int v18 = v15 - v14 + 1;
    *(void *)(a3 + 8) += v18;
    *(_DWORD *)(a3 + 16) -= v18;
  }
  int v19 = *(char *)(a2 + 23);
  if (v19 >= 0) {
    unsigned int v20 = (char *)a2;
  }
  else {
    unsigned int v20 = *(char **)a2;
  }
  if (v19 >= 0) {
    int v21 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    int v21 = *(_DWORD *)(a2 + 8);
  }
  return sub_1DD2F92E0(a3, v20, v21);
}

void sub_1DD2FC844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1DD2FB0AC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1DD2FC85C(int a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5 = (8 * a1) | 2;
  if (*(int *)(a3 + 16) < 5)
  {
    sub_1DD2F9508(a3, v5);
  }
  else
  {
    uint64_t v6 = *(void *)(a3 + 8);
    if (v5 < 0x80)
    {
      LOBYTE(v8) = (8 * a1) | 2;
      uint64_t v7 = *(unsigned char **)(a3 + 8);
    }
    else
    {
      uint64_t v7 = *(unsigned char **)(a3 + 8);
      do
      {
        *v7++ = v5 | 0x80;
        unsigned int v8 = v5 >> 7;
        unsigned int v9 = v5 >> 14;
        v5 >>= 7;
      }
      while (v9);
    }
    *uint64_t v7 = v8;
    int v10 = v7 - v6 + 1;
    *(void *)(a3 + 8) += v10;
    *(_DWORD *)(a3 + 16) -= v10;
  }
  int v11 = *(char *)(a2 + 23);
  if (v11 < 0 && *(void *)(a2 + 8) >> 31)
  {
    sub_1DD2FAF50((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/wire_format_lite.cc", 516);
    unint64_t v12 = sub_1DD2FAF68(v24, "CHECK failed: (value.size()) <= (kint32max): ");
    sub_1DD2FB0A4((uint64_t)&v23, (const char **)&v12->__r_.__value_.__l.__data_);
    sub_1DD2FB0AC((uint64_t)v24);
    LOBYTE(v11) = *(unsigned char *)(a2 + 23);
  }
  if ((v11 & 0x80u) == 0) {
    unsigned int v13 = v11;
  }
  else {
    unsigned int v13 = *(_DWORD *)(a2 + 8);
  }
  if (*(int *)(a3 + 16) < 5)
  {
    sub_1DD2F9508(a3, v13);
  }
  else
  {
    uint64_t v14 = *(void *)(a3 + 8);
    if (v13 < 0x80)
    {
      LOBYTE(v16) = v13;
      uint64_t v15 = *(unsigned char **)(a3 + 8);
    }
    else
    {
      uint64_t v15 = *(unsigned char **)(a3 + 8);
      do
      {
        *v15++ = v13 | 0x80;
        unsigned int v16 = v13 >> 7;
        unsigned int v17 = v13 >> 14;
        v13 >>= 7;
      }
      while (v17);
    }
    *uint64_t v15 = v16;
    int v18 = v15 - v14 + 1;
    *(void *)(a3 + 8) += v18;
    *(_DWORD *)(a3 + 16) -= v18;
  }
  int v19 = *(char *)(a2 + 23);
  if (v19 >= 0) {
    unsigned int v20 = (char *)a2;
  }
  else {
    unsigned int v20 = *(char **)a2;
  }
  if (v19 >= 0) {
    uint64_t v21 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v21 = *(unsigned int *)(a2 + 8);
  }
  if (*(unsigned char *)(a3 + 25)) {
    return sub_1DD2F9368((int *)a3, v20, v21);
  }
  else {
    return sub_1DD2F92E0(a3, v20, v21);
  }
}

void sub_1DD2FCA10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1DD2FB0AC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1DD2FCA28(int a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5 = (8 * a1) | 2;
  if (*(int *)(a3 + 16) < 5)
  {
    sub_1DD2F9508(a3, v5);
  }
  else
  {
    uint64_t v6 = *(void *)(a3 + 8);
    if (v5 < 0x80)
    {
      LOBYTE(v8) = (8 * a1) | 2;
      uint64_t v7 = *(unsigned char **)(a3 + 8);
    }
    else
    {
      uint64_t v7 = *(unsigned char **)(a3 + 8);
      do
      {
        *v7++ = v5 | 0x80;
        unsigned int v8 = v5 >> 7;
        unsigned int v9 = v5 >> 14;
        v5 >>= 7;
      }
      while (v9);
    }
    *uint64_t v7 = v8;
    int v10 = v7 - v6 + 1;
    *(void *)(a3 + 8) += v10;
    *(_DWORD *)(a3 + 16) -= v10;
  }
  int v11 = *(char *)(a2 + 23);
  if (v11 < 0 && *(void *)(a2 + 8) >> 31)
  {
    sub_1DD2FAF50((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/wire_format_lite.cc", 523);
    unint64_t v12 = sub_1DD2FAF68(v24, "CHECK failed: (value.size()) <= (kint32max): ");
    sub_1DD2FB0A4((uint64_t)&v23, (const char **)&v12->__r_.__value_.__l.__data_);
    sub_1DD2FB0AC((uint64_t)v24);
    LOBYTE(v11) = *(unsigned char *)(a2 + 23);
  }
  if ((v11 & 0x80u) == 0) {
    unsigned int v13 = v11;
  }
  else {
    unsigned int v13 = *(_DWORD *)(a2 + 8);
  }
  if (*(int *)(a3 + 16) < 5)
  {
    sub_1DD2F9508(a3, v13);
  }
  else
  {
    uint64_t v14 = *(void *)(a3 + 8);
    if (v13 < 0x80)
    {
      LOBYTE(v16) = v13;
      uint64_t v15 = *(unsigned char **)(a3 + 8);
    }
    else
    {
      uint64_t v15 = *(unsigned char **)(a3 + 8);
      do
      {
        *v15++ = v13 | 0x80;
        unsigned int v16 = v13 >> 7;
        unsigned int v17 = v13 >> 14;
        v13 >>= 7;
      }
      while (v17);
    }
    *uint64_t v15 = v16;
    int v18 = v15 - v14 + 1;
    *(void *)(a3 + 8) += v18;
    *(_DWORD *)(a3 + 16) -= v18;
  }
  int v19 = *(char *)(a2 + 23);
  if (v19 >= 0) {
    unsigned int v20 = (char *)a2;
  }
  else {
    unsigned int v20 = *(char **)a2;
  }
  if (v19 >= 0) {
    int v21 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    int v21 = *(_DWORD *)(a2 + 8);
  }
  return sub_1DD2F92E0(a3, v20, v21);
}

void sub_1DD2FCBC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1DD2FB0AC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1DD2FCBE0(int a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5 = (8 * a1) | 2;
  if (*(int *)(a3 + 16) < 5)
  {
    sub_1DD2F9508(a3, v5);
  }
  else
  {
    uint64_t v6 = *(void *)(a3 + 8);
    if (v5 < 0x80)
    {
      LOBYTE(v8) = (8 * a1) | 2;
      uint64_t v7 = *(unsigned char **)(a3 + 8);
    }
    else
    {
      uint64_t v7 = *(unsigned char **)(a3 + 8);
      do
      {
        *v7++ = v5 | 0x80;
        unsigned int v8 = v5 >> 7;
        unsigned int v9 = v5 >> 14;
        v5 >>= 7;
      }
      while (v9);
    }
    *uint64_t v7 = v8;
    int v10 = v7 - v6 + 1;
    *(void *)(a3 + 8) += v10;
    *(_DWORD *)(a3 + 16) -= v10;
  }
  int v11 = *(char *)(a2 + 23);
  if (v11 < 0 && *(void *)(a2 + 8) >> 31)
  {
    sub_1DD2FAF50((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/wire_format_lite.cc", 531);
    unint64_t v12 = sub_1DD2FAF68(v24, "CHECK failed: (value.size()) <= (kint32max): ");
    sub_1DD2FB0A4((uint64_t)&v23, (const char **)&v12->__r_.__value_.__l.__data_);
    sub_1DD2FB0AC((uint64_t)v24);
    LOBYTE(v11) = *(unsigned char *)(a2 + 23);
  }
  if ((v11 & 0x80u) == 0) {
    unsigned int v13 = v11;
  }
  else {
    unsigned int v13 = *(_DWORD *)(a2 + 8);
  }
  if (*(int *)(a3 + 16) < 5)
  {
    sub_1DD2F9508(a3, v13);
  }
  else
  {
    uint64_t v14 = *(void *)(a3 + 8);
    if (v13 < 0x80)
    {
      LOBYTE(v16) = v13;
      uint64_t v15 = *(unsigned char **)(a3 + 8);
    }
    else
    {
      uint64_t v15 = *(unsigned char **)(a3 + 8);
      do
      {
        *v15++ = v13 | 0x80;
        unsigned int v16 = v13 >> 7;
        unsigned int v17 = v13 >> 14;
        v13 >>= 7;
      }
      while (v17);
    }
    *uint64_t v15 = v16;
    int v18 = v15 - v14 + 1;
    *(void *)(a3 + 8) += v18;
    *(_DWORD *)(a3 + 16) -= v18;
  }
  int v19 = *(char *)(a2 + 23);
  if (v19 >= 0) {
    unsigned int v20 = (char *)a2;
  }
  else {
    unsigned int v20 = *(char **)a2;
  }
  if (v19 >= 0) {
    uint64_t v21 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v21 = *(unsigned int *)(a2 + 8);
  }
  if (*(unsigned char *)(a3 + 25)) {
    return sub_1DD2F9368((int *)a3, v20, v21);
  }
  else {
    return sub_1DD2F92E0(a3, v20, v21);
  }
}

void sub_1DD2FCD94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1DD2FB0AC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1DD2FCDAC(int a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5 = (8 * a1) | 2;
  if (*(int *)(a3 + 16) < 5)
  {
    sub_1DD2F9508(a3, v5);
  }
  else
  {
    uint64_t v6 = *(void *)(a3 + 8);
    if (v5 < 0x80)
    {
      LOBYTE(v8) = (8 * a1) | 2;
      uint64_t v7 = *(unsigned char **)(a3 + 8);
    }
    else
    {
      uint64_t v7 = *(unsigned char **)(a3 + 8);
      do
      {
        *v7++ = v5 | 0x80;
        unsigned int v8 = v5 >> 7;
        unsigned int v9 = v5 >> 14;
        v5 >>= 7;
      }
      while (v9);
    }
    *uint64_t v7 = v8;
    int v10 = v7 - v6 + 1;
    *(void *)(a3 + 8) += v10;
    *(_DWORD *)(a3 + 16) -= v10;
  }
  unsigned int v11 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
  unsigned int v12 = v11;
  if (*(int *)(a3 + 16) < 5)
  {
    sub_1DD2F9508(a3, v11);
  }
  else
  {
    uint64_t v13 = *(void *)(a3 + 8);
    if (v11 < 0x80)
    {
      LOBYTE(v15) = v11;
      uint64_t v14 = *(unsigned char **)(a3 + 8);
    }
    else
    {
      uint64_t v14 = *(unsigned char **)(a3 + 8);
      do
      {
        *v14++ = v12 | 0x80;
        unsigned int v15 = v12 >> 7;
        unsigned int v16 = v12 >> 14;
        v12 >>= 7;
      }
      while (v16);
    }
    *uint64_t v14 = v15;
    int v17 = v14 - v13 + 1;
    *(void *)(a3 + 8) += v17;
    *(_DWORD *)(a3 + 16) -= v17;
  }
  int v18 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 104);
  return v18(a2, a3);
}

BOOL sub_1DD2FCF1C(uint64_t *a1, std::string *this)
{
  unsigned int v5 = (char *)*a1;
  unint64_t v4 = a1[1];
  if (*a1 >= v4)
  {
    LODWORD(v6) = 0;
  }
  else
  {
    std::string::size_type v6 = *v5;
    if ((*v5 & 0x80000000) == 0)
    {
      uint64_t v7 = (uint64_t)(v5 + 1);
      *a1 = v7;
      goto LABEL_4;
    }
  }
  uint64_t v10 = sub_1DD2F8C30(a1, v6);
  if ((v10 & 0x8000000080000000) != 0) {
    return 0;
  }
  std::string::size_type v6 = v10;
  uint64_t v7 = *a1;
  unint64_t v4 = a1[1];
LABEL_4:
  if ((int)v6 <= (int)v4 - (int)v7)
  {
    size_t v9 = v6;
    std::string::resize(this, v6, 0);
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      this = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    memcpy(this, (const void *)*a1, v9);
    *a1 += v9;
    return 1;
  }
  else
  {
    return sub_1DD2F885C(a1, this, v6);
  }
}

uint64_t sub_1DD2FD008(unsigned int *a1)
{
  uint64_t v1 = *a1;
  if ((int)v1 < 1) {
    return 0;
  }
  uint64_t result = 0;
  unint64_t v4 = (int *)(*((void *)a1 + 1) + 8);
  do
  {
    int v5 = *v4++;
    result += (9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_1DD2FD058(unsigned int *a1)
{
  uint64_t v1 = *a1;
  if ((int)v1 < 1) {
    return 0;
  }
  uint64_t result = 0;
  unint64_t v4 = (uint64_t *)(*((void *)a1 + 1) + 8);
  do
  {
    uint64_t v5 = *v4++;
    result += (9 * (__clz(v5 | 1) ^ 0x3F) + 73) >> 6;
    --v1;
  }
  while (v1);
  return result;
}

void sub_1DD2FD4F8(_Unwind_Exception *a1)
{
  v1[8] = v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1DD2FD560(void *a1, const char *a2, uint64_t a3)
{
  if (!a1) {
    return 0;
  }
  uint64_t v4 = objc_msgSend_newIdentifier(a1, a2, a3);
  uint64_t v5 = v4;
  unint64_t v6 = a1[3];
  uint64_t v7 = (uint64_t *)a1[2];
  if ((unint64_t)v7 >= v6)
  {
    size_t v9 = (uint64_t *)a1[1];
    uint64_t v10 = v7 - v9;
    if ((unint64_t)(v10 + 1) >> 61) {
      sub_1DD251DAC();
    }
    unint64_t v11 = v6 - (void)v9;
    unint64_t v12 = (uint64_t)(v6 - (void)v9) >> 2;
    if (v12 <= v10 + 1) {
      unint64_t v12 = v10 + 1;
    }
    if (v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      uint64_t v14 = (char *)sub_1DD251DC4((uint64_t)(a1 + 3), v13);
      size_t v9 = (uint64_t *)a1[1];
      uint64_t v7 = (uint64_t *)a1[2];
    }
    else
    {
      uint64_t v14 = 0;
    }
    unsigned int v15 = (uint64_t *)&v14[8 * v10];
    unsigned int v16 = &v14[8 * v13];
    *unsigned int v15 = v5;
    unsigned int v8 = v15 + 1;
    while (v7 != v9)
    {
      uint64_t v17 = *--v7;
      *--unsigned int v15 = v17;
    }
    a1[1] = v15;
    a1[2] = v8;
    a1[3] = v16;
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *uint64_t v7 = v4;
    unsigned int v8 = v7 + 1;
  }
  a1[2] = v8;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[8] - a1[7]) >> 3)) {
    unint64_t v18 = v5 + 1;
  }
  else {
    unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[8] - a1[7]) >> 3);
  }
  sub_1DD2FD6B4(a1 + 7, v18);
  uint64_t v19 = a1[4];
  uint64_t v20 = a1[5];
  uint64_t v21 = a1 + 4;
  uint64_t v22 = v20 - v19;
  if (v5 + 1 > (unint64_t)(v22 >> 1)) {
    unint64_t v23 = v5 + 1;
  }
  else {
    unint64_t v23 = v22 >> 1;
  }
  sub_1DD2FD75C((uint64_t)v21, v23);
  *(unsigned char *)(*v21 + 2 * v5) = 1;
  return v5;
}

void sub_1DD2FD6B4(void *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_1DD2FECE4((uint64_t)a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        uint64_t v10 = *(void **)(v8 - 24);
        v8 -= 24;
        size_t v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void sub_1DD2FD75C(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 2 * a2;
    }
  }
  else
  {
    sub_1DD2FEEF8((char **)a1, a2 - v2);
  }
}

uint64_t sub_1DD2FDA38(void *a1, unint64_t a2, uint64_t a3, char a4)
{
  if (!a1) {
    return 0;
  }
  uint64_t v8 = a1[4];
  if (a2 >= (a1[5] - v8) >> 1 || !*(unsigned char *)(v8 + 2 * a2))
  {
    unint64_t v18 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], (const char *)a2, a3);
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v18, v19, (uint64_t)sel_defineFieldForStruct_withEncoding_optional_, a1, @"CKXSchema.mm", 109, @"Token not found");

    uint64_t v8 = a1[4];
  }
  if (*(unsigned char *)(v8 + 2 * a2 + 1))
  {
    uint64_t v20 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], (const char *)a2, a3);
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v20, v21, (uint64_t)sel_defineFieldForStruct_withEncoding_optional_, a1, @"CKXSchema.mm", 110, @"Can't define field for top-level container struct");
  }
  size_t v9 = objc_msgSend_typeForEncoding_(MEMORY[0x1E4F1A1F0], (const char *)a2, a3);
  uint64_t v11 = objc_msgSend_defineFieldForStruct_(a1, v10, a2);
  uint64_t v12 = a1[10] + 56 * v11;
  *(void *)(v12 + 8) = 0;
  *(void *)(v12 + 16) = a2;
  *(void *)(a1[10] + 56 * v11 + 24) = objc_msgSend_size(v9, v13, v14);
  *(void *)(a1[10] + 56 * v11 + 32) = objc_msgSend_code(v9, v15, v16);
  *(unsigned char *)(a1[10] + 56 * v11 + 40) = a4;

  return v11;
}

void sub_1DD2FDBAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DD2FDBC4(uint64_t result, const char *a2, unint64_t a3)
{
  if (result)
  {
    BOOL v5 = (void *)result;
    uint64_t v6 = *(void *)(result + 32);
    if (a3 >= (*(void *)(result + 40) - v6) >> 1 || !*(unsigned char *)(v6 + 2 * a3))
    {
      uint64_t v8 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], a2, a3);
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v8, v9, (uint64_t)sel_defineStructReferenceToType_forStruct_, v5, @"CKXSchema.mm", 122, @"Token not found");

      uint64_t v6 = v5[4];
    }
    if (*(unsigned char *)(v6 + 2 * a3 + 1))
    {
      uint64_t v10 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], a2, a3);
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v10, v11, (uint64_t)sel_defineStructReferenceToType_forStruct_, v5, @"CKXSchema.mm", 123, @"Can't define struct reference for top-level container struct");
    }
    uint64_t result = objc_msgSend_defineFieldForStruct_(v5, a2, a3);
    uint64_t v7 = (void *)(v5[10] + 56 * result);
    v7[1] = 1;
    std::string v7[2] = a3;
    void v7[3] = a2;
  }
  return result;
}

void sub_1DD2FDCD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DD2FDCE4(uint64_t result, const char *a2, unint64_t a3)
{
  if (result)
  {
    BOOL v5 = (void *)result;
    uint64_t v6 = *(void *)(result + 32);
    if (a3 >= (*(void *)(result + 40) - v6) >> 1 || !*(unsigned char *)(v6 + 2 * a3))
    {
      uint64_t v8 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], a2, a3);
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v8, v9, (uint64_t)sel_defineListReferenceToStructType_forStruct_, v5, @"CKXSchema.mm", 132, @"Token not found");
    }
    uint64_t result = objc_msgSend_defineFieldForStruct_(v5, a2, a3);
    uint64_t v7 = (void *)(v5[10] + 56 * result);
    v7[1] = 2;
    std::string v7[2] = a3;
    void v7[3] = 0;
    *(void *)(v5[10] + 56 * result + 32) = a2;
    *(void *)(v5[10] + 56 * result + 40) = 0;
    *(void *)(v5[10] + 56 * result + 48) = 23;
  }
  return result;
}

void sub_1DD2FDDD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DD2FDDE0(void *a1, const char *a2, unint64_t a3)
{
  if (!a1) {
    return 0;
  }
  if (a2)
  {
    if (a2 != (const char *)3) {
      goto LABEL_4;
    }
    uint64_t v19 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], (const char *)3, a3);
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v19, v23, (uint64_t)sel_defineListReferenceOfType_forStruct_, a1, @"CKXSchema.mm", 145, @"Invalid list type");
  }
  else
  {
    uint64_t v19 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], 0, a3);
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v19, v20, (uint64_t)sel_defineListReferenceOfType_forStruct_, a1, @"CKXSchema.mm", 144, @"Invalid list type");
  }

LABEL_4:
  uint64_t v6 = a1[4];
  if (a3 >= (a1[5] - v6) >> 1 || !*(unsigned char *)(v6 + 2 * a3))
  {
    uint64_t v17 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], a2, a3);
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v17, v18, (uint64_t)sel_defineValueListReferenceWithEncoding_forStruct_, a1, @"CKXSchema.mm", 152, @"Token not found");

    uint64_t v6 = a1[4];
  }
  if (*(unsigned char *)(v6 + 2 * a3 + 1))
  {
    uint64_t v21 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], a2, a3);
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v21, v22, (uint64_t)sel_defineValueListReferenceWithEncoding_forStruct_, a1, @"CKXSchema.mm", 153, @"Can't define non-struct list for top-level container struct");
  }
  uint64_t v7 = objc_msgSend_typeForEncoding_(MEMORY[0x1E4F1A1F0], a2, (uint64_t)"C");
  uint64_t v9 = objc_msgSend_defineFieldForStruct_(a1, v8, a3);
  uint64_t v10 = 56 * v9;
  uint64_t v11 = (void *)(a1[10] + 56 * v9);
  v11[1] = 2;
  std::string v11[2] = a3;
  v11[3] = 3;
  *(void *)(a1[10] + 56 * v9 + 32) = -1;
  *(void *)(a1[10] + 56 * v9 + 40) = objc_msgSend_size(v7, v12, v13);
  *(void *)(a1[10] + v10 + 48) = objc_msgSend_code(v7, v14, v15);

  *(void *)(a1[10] + v10 + 24) = a2;
  return v9;
}

void sub_1DD2FDFF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DD2FE014(uint64_t result, const char *a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)(result + 80);
    if (0x6DB6DB6DB6DB6DB7 * ((*(void *)(result + 88) - v5) >> 3) <= (unint64_t)a2
      || !*(unsigned char *)(v5 + 56 * (void)a2))
    {
      uint64_t v6 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], a2, a3);
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v6, v7, (uint64_t)sel_fieldTypeForField_, v4, @"CKXSchema.mm", 166, @"Token not found");

      uint64_t v5 = *(void *)(v4 + 80);
    }
    return *(void *)(v5 + 56 * (void)a2 + 8);
  }
  return result;
}

void sub_1DD2FE0D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DD2FE0E0(uint64_t result, const char *a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v4 = result;
    if (sub_1DD2FE014(result, a2, a3) != 2)
    {
      uint64_t v7 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v5, v6);
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v7, v8, (uint64_t)sel_listTypeForField_, v4, @"CKXSchema.mm", 172, @"Invalid field type");
    }
    return *(void *)(*(void *)(v4 + 80) + 56 * (void)a2 + 24);
  }
  return result;
}

void sub_1DD2FE170(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DD2FE180(uint64_t result, const char *a2, uint64_t a3)
{
  if (result)
  {
    if (a2)
    {
      uint64_t v4 = result;
      uint64_t v5 = *(void *)(result + 80);
      if (0x6DB6DB6DB6DB6DB7 * ((*(void *)(result + 88) - v5) >> 3) <= (unint64_t)a2
        || !*(unsigned char *)(v5 + 56 * (void)a2))
      {
        uint64_t v9 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], a2, a3);
        objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v9, v10, (uint64_t)sel_valueSizeForField_, v4, @"CKXSchema.mm", 181, @"Token not found");
      }
      uint64_t v6 = sub_1DD2FE014(v4, a2, a3);
      if ((unint64_t)(v6 - 1) >= 2)
      {
        if (!v6)
        {
          uint64_t v8 = *(void *)(v4 + 80) + 56 * (void)a2 + 24;
          return *(void *)v8;
        }
      }
      else if (sub_1DD2FE0E0(v4, a2, v7) == 3)
      {
        uint64_t v8 = *(void *)(v4 + 80) + 56 * (void)a2 + 40;
        return *(void *)v8;
      }
    }
    return 0;
  }
  return result;
}

void sub_1DD2FE290(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DD2FE2A0(uint64_t result, const char *a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)(result + 80);
    if (0x6DB6DB6DB6DB6DB7 * ((*(void *)(result + 88) - v5) >> 3) <= (unint64_t)a2
      || !*(unsigned char *)(v5 + 56 * (void)a2))
    {
      uint64_t v6 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], a2, a3);
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v6, v7, (uint64_t)sel_valueFieldIsOptional_, v4, @"CKXSchema.mm", 245, @"Token not found");
    }
    return !sub_1DD2FE014(v4, a2, a3) && *(unsigned char *)(*(void *)(v4 + 80) + 56 * (void)a2 + 40) != 0;
  }
  return result;
}

void sub_1DD2FE37C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DD2FE38C(uint64_t result, const char *a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v4 = result;
    if (sub_1DD2FE014(result, a2, a3) != 1)
    {
      uint64_t v7 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v5, v6);
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v7, v8, (uint64_t)sel_structForStructReference_, v4, @"CKXSchema.mm", 262, @"Token not found");
    }
    return *(void *)(*(void *)(v4 + 80) + 56 * (void)a2 + 24);
  }
  return result;
}

void sub_1DD2FE41C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DD2FE42C(uint64_t result, const char *a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v4 = result;
    if (sub_1DD2FE0E0(result, a2, a3))
    {
      uint64_t v7 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v5, v6);
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v7, v8, (uint64_t)sel_structForListReference_, v4, @"CKXSchema.mm", 269, @"Invalid list type");
    }
    return *(void *)(*(void *)(v4 + 80) + 56 * (void)a2 + 32);
  }
  return result;
}

void sub_1DD2FE4B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DD2FE4C8(void *a1, unint64_t a2)
{
  if (!a1) {
    return 0;
  }
  unint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 2 * a2;
  while (1)
  {
    uint64_t v7 = a1[4];
    if (a2 < (a1[5] - v7) >> 1 && *(unsigned char *)(v7 + v6)) {
      unint64_t v8 = (uint64_t)(*(void *)(a1[7] + 24 * a2 + 8) - *(void *)(a1[7] + 24 * a2)) >> 3;
    }
    else {
      unint64_t v8 = -1;
    }
    if (v4 >= v8) {
      break;
    }
    uint64_t v9 = (const char *)sub_1DD2FE5EC((uint64_t)a1, v4, a2);
    uint64_t v11 = sub_1DD2FE014((uint64_t)a1, v9, v10);
    if (v11 == 2) {
      BOOL v13 = sub_1DD2FE0E0((uint64_t)a1, v9, v12) == 0;
    }
    else {
      BOOL v13 = v11 == 1;
    }
    if (v13) {
      ++v5;
    }
    ++v4;
  }
  return v5;
}

uint64_t sub_1DD2FE5A8(uint64_t result, unint64_t a2)
{
  if (result)
  {
    uint64_t v2 = *(void *)(result + 32);
    if (a2 < (*(void *)(result + 40) - v2) >> 1 && *(unsigned char *)(v2 + 2 * a2)) {
      return (uint64_t)(*(void *)(*(void *)(result + 56) + 24 * a2 + 8)
    }
                     - *(void *)(*(void *)(result + 56) + 24 * a2)) >> 3;
    else {
      return -1;
    }
  }
  return result;
}

uint64_t sub_1DD2FE5EC(uint64_t result, unint64_t a2, unint64_t a3)
{
  if (result)
  {
    uint64_t v3 = *(void *)(result + 32);
    if (a3 < (*(void *)(result + 40) - v3) >> 1
      && *(unsigned char *)(v3 + 2 * a3)
      && (uint64_t v4 = *(void *)(*(void *)(result + 56) + 24 * a3),
          a2 < (*(void *)(*(void *)(result + 56) + 24 * a3 + 8) - v4) >> 3))
    {
      return *(void *)(v4 + 8 * a2);
    }
    else
    {
      return -1;
    }
  }
  return result;
}

uint64_t sub_1DD2FE638(uint64_t result, const char *a2, unint64_t a3)
{
  if (!result) {
    return result;
  }
  uint64_t v5 = (void *)result;
  unint64_t v6 = 0;
  uint64_t v7 = 2 * a3;
  while (1)
  {
    uint64_t v8 = v5[4];
    if (a3 < (v5[5] - v8) >> 1 && *(unsigned char *)(v8 + v7)) {
      unint64_t v9 = (uint64_t)(*(void *)(v5[7] + 24 * a3 + 8) - *(void *)(v5[7] + 24 * a3)) >> 3;
    }
    else {
      unint64_t v9 = -1;
    }
    if (v6 >= v9)
    {
      BOOL v13 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], a2, a3);
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v13, v14, (uint64_t)sel_referencedStructAtIndex_forStructToken_, v5, @"CKXSchema.mm", 345, @"Index out of bounds");

      return 0x7FFFFFFFFFFFFFFFLL;
    }
    uint64_t v10 = (const char *)sub_1DD2FE5EC((uint64_t)v5, v6, a3);
    uint64_t v12 = sub_1DD2FE014((uint64_t)v5, v10, v11);
    if (v12 == 2) {
      break;
    }
    if (v12 == 1 && !a2)
    {
      return sub_1DD2FE38C((uint64_t)v5, v10, a3);
    }
LABEL_13:
    ++v6;
  }
  if (sub_1DD2FE0E0((uint64_t)v5, v10, a3)) {
    goto LABEL_13;
  }
  return sub_1DD2FE42C((uint64_t)v5, v10, a3);
}

void sub_1DD2FE7B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1DD2FE7C8(BOOL result, const char *a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)(result + 32);
    if ((unint64_t)a2 >= (*(void *)(result + 40) - v5) >> 1 || !*(unsigned char *)(v5 + 2 * (void)a2))
    {
      unint64_t v6 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], a2, a3);
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v6, v7, (uint64_t)sel_structIsTopLevelContainer_, v4, @"CKXSchema.mm", 350, @"Token not found");

      uint64_t v5 = *(void *)(v4 + 32);
    }
    return *(unsigned __int8 *)(v5 + 2 * (void)a2 + 1) != 0;
  }
  return result;
}

void sub_1DD2FE86C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *sub_1DD2FE930(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      std::string v7[2] = 0;
    }
    if (a4 >> 61) {
      sub_1DD251DAC();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = sub_1DD269A74(v7, v11);
    BOOL v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    unint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      unint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    unint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    unint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v12 = &v9[v17];
  return result;
}

void sub_1DD2FEA3C()
{
}

void *sub_1DD2FEA54(uint64_t a1)
{
  if (a1 < 0) {
    sub_1DD251C54();
  }
  return operator new(2 * a1);
}

void *sub_1DD2FEA88(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v14 = a4;
  unint64_t v15 = a4;
  v12[0] = a1;
  v12[1] = &v14;
  std::string v12[2] = &v15;
  char v13 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *uint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      uint64_t v8 = *(const void **)v6;
      uint64_t v7 = *(void *)(v6 + 8);
      int64_t v9 = v7 - *(void *)v6;
      if (v7 != *(void *)v6)
      {
        sub_1DD269A74(v4, v9 >> 3);
        uint64_t v10 = (char *)v4[1];
        memmove(v10, v8, v9);
        v4[1] = &v10[8 * (v9 >> 3)];
        uint64_t v4 = v15;
      }
      v4 += 3;
      unint64_t v15 = v4;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v13 = 1;
  sub_1DD2FEB80((uint64_t)v12);
  return v4;
}

void sub_1DD2FEB5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_1DD2FEB80((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1DD2FEB80(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = **(void **)(a1 + 8);
    uint64_t v3 = **(void **)(a1 + 16);
    if (v3 != v2)
    {
      uint64_t v4 = **(void **)(a1 + 16);
      do
      {
        uint64_t v6 = *(void **)(v4 - 24);
        v4 -= 24;
        uint64_t v5 = v6;
        if (v6)
        {
          *(void *)(v3 - 16) = v5;
          operator delete(v5);
        }
        uint64_t v3 = v4;
      }
      while (v4 != v2);
    }
  }
  return a1;
}

char *sub_1DD2FEBE8(uint64_t a1, uint64_t a2, char *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      if ((char *)v5 != a3) {
        sub_1DD2FE930(a3, *(char **)v5, *(void *)(v5 + 8), (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 3);
      }
      v5 += 24;
      a3 += 24;
    }
    while (v5 != a2);
  }
  return a3;
}

void *sub_1DD2FEC50(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL) {
    sub_1DD251C54();
  }
  return operator new(24 * a1);
}

void *sub_1DD2FEC98(unint64_t a1)
{
  if (a1 >= 0x492492492492493) {
    sub_1DD251C54();
  }
  return operator new(56 * a1);
}

void sub_1DD2FECE4(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = a1 + 16;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v12);
      v6 += v12;
    }
    *(void *)(a1 + 8) = v6;
  }
  else
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *(void *)a1) >> 3);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_1DD2FEA3C();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *(void *)a1) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    uint64_t v25 = v4;
    if (v10) {
      unint64_t v10 = (unint64_t)sub_1DD2FEC50(v10);
    }
    else {
      uint64_t v11 = 0;
    }
    char v13 = (void *)(v10 + 24 * v7);
    unint64_t v14 = v10 + 24 * v11;
    unint64_t v24 = v14;
    size_t v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    uint64_t v16 = (char *)v13 + v15;
    v23.i64[1] = (uint64_t)v13 + v15;
    unint64_t v18 = *(void **)a1;
    size_t v17 = *(void **)(a1 + 8);
    if (v17 == *(void **)a1)
    {
      int64x2_t v20 = vdupq_n_s64((unint64_t)v17);
    }
    else
    {
      do
      {
        *(v13 - 3) = 0;
        *(v13 - 2) = 0;
        v13 -= 3;
        std::string v13[2] = 0;
        long long v19 = *(_OWORD *)(v17 - 3);
        v17 -= 3;
        *(_OWORD *)char v13 = v19;
        std::string v13[2] = v17[2];
        *size_t v17 = 0;
        v17[1] = 0;
        std::string v17[2] = 0;
      }
      while (v17 != v18);
      int64x2_t v20 = *(int64x2_t *)a1;
      uint64_t v16 = (char *)v23.i64[1];
      unint64_t v14 = v24;
    }
    *(void *)a1 = v13;
    *(void *)(a1 + 8) = v16;
    int64x2_t v23 = v20;
    unint64_t v21 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v14;
    unint64_t v24 = v21;
    uint64_t v22 = v20.i64[0];
    sub_1DD2FEE94((uint64_t)&v22);
  }
}

uint64_t sub_1DD2FEE94(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    uint64_t v4 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v4)
    {
      *(void *)(v2 - 16) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1DD2FEEF8(char **a1, unint64_t a2)
{
  uint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  if (a2 <= (v4 - v5) >> 1)
  {
    if (a2)
    {
      bzero(a1[1], 2 * a2);
      v5 += 2 * a2;
    }
    a1[1] = v5;
  }
  else
  {
    uint64_t v6 = v5 - *a1;
    if ((uint64_t)(a2 + (v6 >> 1)) < 0) {
      sub_1DD2FEA3C();
    }
    uint64_t v7 = v6 >> 1;
    unint64_t v8 = v4 - *a1;
    if (v8 <= a2 + (v6 >> 1)) {
      unint64_t v9 = a2 + (v6 >> 1);
    }
    else {
      unint64_t v9 = v8;
    }
    if (v8 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v10 = v9;
    }
    if (v10) {
      uint64_t v10 = (uint64_t)sub_1DD2FEA54(v10);
    }
    else {
      uint64_t v11 = 0;
    }
    size_t v12 = (char *)(v10 + 2 * v7);
    uint64_t v13 = v10 + 2 * v11;
    bzero(v12, 2 * a2);
    unint64_t v14 = &v12[2 * a2];
    uint64_t v16 = *a1;
    size_t v15 = a1[1];
    if (v15 != *a1)
    {
      do
      {
        __int16 v17 = *((_WORD *)v15 - 1);
        v15 -= 2;
        *((_WORD *)v12 - 1) = v17;
        v12 -= 2;
      }
      while (v15 != v16);
      size_t v15 = *a1;
    }
    *a1 = v12;
    a1[1] = v14;
    a1[2] = (char *)v13;
    if (v15)
    {
      operator delete(v15);
    }
  }
}

void sub_1DD2FF1B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD2FF330(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD2FF4F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DD2FF604(uint64_t a1)
{
  *(void *)a1 = &unk_1F38790D8;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }

  return nullsub_1(a1);
}

void sub_1DD2FF670(uint64_t a1)
{
  sub_1DD2FF604(a1);
  JUMPOUT(0x1E01B1F60);
}

uint64_t sub_1DD2FF6A8(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 8), sel_appendBytes_length_, a2);
}

uint64_t sub_1DD2FF6B8(uint64_t a1, const char *a2, uint64_t a3)
{
  return objc_msgSend_length(*(void **)(a1 + 8), a2, a3);
}

uint64_t sub_1DD2FF6C0(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1DD2FF6C8(uint64_t a1)
{
  return a1 + 24;
}

__CFString *CKDSStringForErrorCode(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 5) {
    return @"Unknown Error";
  }
  else {
    return off_1E6CBAB58[a1 - 1];
  }
}

void sub_1DD2FF768(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD2FF930(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD2FFA6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD2FFB9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD2FFC14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD2FFF48(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1DD3003B4(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

id CKXAtomBindingFormatVersionORC()
{
  if (qword_1EAB1F800 != -1) {
    dispatch_once(&qword_1EAB1F800, &unk_1F387CEE0);
  }
  uint64_t v0 = (void *)qword_1EAB1F808;
  return v0;
}

uint64_t sub_1DD3004C8()
{
  qword_1EAB1F808 = objc_opt_new();
  return MEMORY[0x1F41817F8]();
}

id CKXAtomBindingFormatVersionORCv2()
{
  if (qword_1EAB1F810 != -1) {
    dispatch_once(&qword_1EAB1F810, &unk_1F387D020);
  }
  uint64_t v0 = (void *)qword_1EAB1F818;
  return v0;
}

uint64_t sub_1DD300558()
{
  qword_1EAB1F818 = objc_opt_new();
  return MEMORY[0x1F41817F8]();
}

void sub_1DD300690(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD300754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD30083C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD300900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD300A30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD300B0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD300BFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD300CC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD300D90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD300E68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD300F48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD301078(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD30113C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD301224(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD3012E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD3013D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD301494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD30157C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1DD301670(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD301730(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD3017F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD301A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1DD301A4C(uint64_t a1, void *a2)
{
  id v5 = a2;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += objc_msgSend_size(v5, v3, v4);
}

void sub_1DD301AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD301B6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD301C2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD301CEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD301DAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD301E84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD301F5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD30204C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD302110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD3021C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD302378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD3024A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD302570(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD302654(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD302720(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD302938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD302A4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD302B3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD302C2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD302CF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD302DC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD302E9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD302F70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD303140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD303270(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD30333C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD303478(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD303544(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD303680(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD30374C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD303968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD303A90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD303B50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD303C40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD303D0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD303DFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD3040BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD304144(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v6 = objc_msgSend_references(*(void **)(a1 + 32), v4, v5);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  std::string v9[2] = sub_1DD30421C;
  v9[3] = &unk_1E6CBABD8;
  id v7 = v3;
  id v10 = v7;
  objc_msgSend_appendWithProxyBlock_(v6, v8, (uint64_t)v9);
}

void sub_1DD3041F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DD30421C(uint64_t a1, void *a2)
{
  return objc_msgSend_copyFromReadProxy_(a2, (const char *)a2, *(void *)(a1 + 32));
}

void sub_1DD3042D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD304394(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD304454(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD304544(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD304610(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD3046E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD3047B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD304898(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD304964(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD304B24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD304B8C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v6 = objc_msgSend_atoms(*(void **)(a1 + 32), v4, v5);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  std::string v9[2] = sub_1DD304C64;
  v9[3] = &unk_1E6CBAC28;
  id v7 = v3;
  id v10 = v7;
  objc_msgSend_appendWithProxyBlock_(v6, v8, (uint64_t)v9);
}

void sub_1DD304C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DD304C64(uint64_t a1, void *a2)
{
  return objc_msgSend_copyFromReadProxy_(a2, (const char *)a2, *(void *)(a1 + 32));
}

void sub_1DD304D08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD304DB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD304E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD304F48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD30504C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD305120(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD3051E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD3052CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD3053F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD3054B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD3056AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD3058F4(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 64) = 1;
}

void sub_1DD305900(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 64) = 1;
}

void sub_1DD30590C(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 64) = 1;
}

void sub_1DD305918(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 64) = 1;
}

void sub_1DD3059F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD305ABC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD305B5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD305CB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD305D48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD305F14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD3061DC(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 64) = 1;
}

void sub_1DD3061E8(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 64) = 1;
}

void sub_1DD3061F4(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 64) = 1;
}

void sub_1DD306200(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 64) = 1;
}

void sub_1DD30620C(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 64) = 1;
}

void sub_1DD3062F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD3063C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD306464(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD306564(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD3066B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1DD306B0C(void *a1)
{
  return objc_getAssociatedObject(a1, "CKAtomBatchStorage");
}

void sub_1DD306B18(void *a1, uint64_t a2, void *a3)
{
}

id sub_1DD306B28(id a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = objc_alloc(MEMORY[0x1E4F1A150]);
  id v10 = objc_msgSend_vectors(v6, v8, v9);
  size_t v12 = objc_msgSend_initWithVectors_(v7, v11, (uint64_t)v10);

  size_t v15 = objc_msgSend_storage(v6, v13, v14);
  unint64_t v18 = objc_msgSend_fileURL(v15, v16, v17);

  if (v18)
  {
    unint64_t v21 = objc_msgSend_mergeableValueID(v6, v19, v20);
    a1 = (id)objc_msgSend_initWithValueID_metadata_fileURL_(a1, v22, (uint64_t)v21, v12, v18);

    uint64_t v25 = objc_msgSend_storage(v6, v23, v24);
    objc_msgSend_setAtomBatchStorage_(a1, v26, (uint64_t)v25);
  }
  else
  {
    uint64_t v25 = objc_msgSend_dataWithError_(v6, v19, a4);
    if (!v25)
    {
      id v31 = 0;
      goto LABEL_6;
    }
    int v29 = objc_msgSend_mergeableValueID(v6, v27, v28);
    a1 = (id)objc_msgSend_initWithValueID_metadata_data_(a1, v30, (uint64_t)v29, v12, v25);
  }
  id v31 = a1;
LABEL_6:

  return v31;
}

void sub_1DD307024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1DD30704C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1DD30705C(uint64_t a1)
{
}

void sub_1DD307064(uint64_t a1, void *a2)
{
  id v3 = (objc_class *)MEMORY[0x1E4F1A148];
  id v4 = a2;
  id v5 = [v3 alloc];
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  obuint64_t j = *(id *)(v6 + 40);
  unint64_t v8 = objc_msgSend_initWithAtomBatch_error_(v5, v7, (uint64_t)v4, &obj);

  objc_storeStrong((id *)(v6 + 40), obj);
  uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8);
  if (*(unsigned char *)(v10 + 24)) {
    BOOL v11 = v8 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  char v12 = !v11;
  *(unsigned char *)(v10 + 24) = v12;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)) {
    objc_msgSend_addObject_(*(void **)(a1 + 32), v9, (uint64_t)v8);
  }
}

void sub_1DD307764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  _Unwind_Resume(a1);
}

void sub_1DD3079F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

__CFString *CKDSStringForBackingStoreFormatVersion(unsigned int a1, const char *a2)
{
  if (a1 >= 4)
  {
    objc_msgSend_stringWithFormat_(NSString, a2, @"Unknown (%d)", a1);
    uint64_t v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v2 = off_1E6CBACB8[(char)a1];
  }
  return v2;
}

void sub_1DD308CF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD308F24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD309478(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD309848(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD309AC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD309BD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD309EEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD30A018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD30A1C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD30A614(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD30A76C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD30A850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD30A8F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD30A9E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD30AA58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD30AAA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD30AB28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD30AC2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD30AD2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD30AE00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD30AE70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD30AF6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD30B064(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD30B144(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD30B1D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD30B2D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD30B3D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD30B4C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD30B5C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD30B6B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD30B7C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD30B820(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD30B8E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD30B958(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD30B9D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD30BBD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD30BD24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD30BF7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DD30BFC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((unint64_t)objc_msgSend_length(*(void **)(a1 + 32), (const char *)a2, a3) < 3) {
    return 0;
  }
  if (*(_WORD *)a2 != 21071 || *(unsigned char *)(a2 + 2) != 67) {
    return 0;
  }
  *(_WORD *)a3 = 259;
  *(unsigned char *)(a3 + 2) = 4;
  return 1;
}

uint64_t sub_1DD30C02C(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  if ((unint64_t)objc_msgSend_length(*(void **)(a1 + 32), (const char *)a2, (uint64_t)a3) < 5
    || *(_DWORD *)a2 != -1421867861)
  {
    return 0;
  }
  unsigned int v9 = *(unsigned __int8 *)(a2 + 4);
  if (v9 > 2 || (unint64_t)objc_msgSend_length(*(void **)(a1 + 32), v6, v7) < 7)
  {
    char v12 = 0;
    char v11 = 0;
  }
  else
  {
    *(_DWORD *)((char *)v13 + 3) = 0;
    v13[0] = 0;
    objc_msgSend_getBytes_range_(*(void **)(a1 + 32), v10, (uint64_t)v13, 0, 7);
    char v11 = BYTE1(v13[1]);
    char v12 = BYTE2(v13[1]);
  }
  *a3 = v9;
  a3[1] = v11;
  uint64_t result = 1;
  a3[2] = v12;
  return result;
}

uint64_t sub_1DD30C0EC(uint64_t a1, const char *a2, uint64_t a3)
{
  if ((unint64_t)objc_msgSend_length(*(void **)(a1 + 32), a2, a3) < 0xC) {
    return 0;
  }
  if (*(_DWORD *)a2 != 1836020833) {
    return 0;
  }
  uint64_t v8 = 0;
  objc_msgSend_getBytes_range_(*(void **)(a1 + 32), v6, (uint64_t)&v8, 4, 8);
  if (v8 != 1) {
    return 0;
  }
  *(_WORD *)a3 = 257;
  uint64_t result = 1;
  *(unsigned char *)(a3 + 2) = 1;
  return result;
}

void sub_1DD30C2BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD30C4D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DD30C530(uint64_t a1)
{
  *(void *)a1 = &unk_1F3879098;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }

  return nullsub_1(a1);
}

void sub_1DD30C59C(uint64_t a1)
{
  sub_1DD30C530(a1);
  JUMPOUT(0x1E01B1F60);
}

uint64_t sub_1DD30C5D4(uint64_t a1, const char *a2, uint64_t a3)
{
  return objc_msgSend_length(*(void **)(a1 + 8), a2, a3);
}

uint64_t sub_1DD30C5DC(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1DD30C5E4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_getBytes_range_(*(void **)(a1 + 8), a2, (uint64_t)a2, a4, a3);
}

uint64_t sub_1DD30C5F4(uint64_t a1)
{
  return a1 + 24;
}

void sub_1DD30C704(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD30C84C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD30C9A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_1DD30CBE8(uint64_t a1, const char *a2, uint64_t a3)
{
  id v4 = objc_msgSend_storage(*(void **)(a1 + 32), a2, a3);
  uint64_t v7 = objc_msgSend_fileURL(v4, v5, v6);

  if (!v7) {
    operator new();
  }
  uint64_t v10 = objc_msgSend_storage(*(void **)(a1 + 32), v8, v9);
  uint64_t v13 = objc_msgSend_fileURL(v10, v11, v12);
  objc_msgSend_path(v13, v14, v15);
  id v16 = objc_claimAutoreleasedReturnValue();
  long long v19 = (char *)objc_msgSend_UTF8String(v16, v17, v18);
  sub_1DD314888(__p, v19);
  sub_1DD270838((uint64_t)__p, &v30);
  uint64_t v20 = v30;
  uint64_t v30 = 0;
  if (v29 < 0) {
    operator delete(__p[0]);
  }

  sub_1DD27145C(__p);
  uint64_t v27 = v20;
  sub_1DD276224(&v27, (uint64_t)__p, &v30);
  uint64_t v21 = *(void *)(a1 + 32);
  uint64_t v22 = v30;
  uint64_t v30 = 0;
  uint64_t v23 = *(void *)(v21 + 16);
  *(void *)(v21 + 16) = v22;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  uint64_t v24 = v30;
  uint64_t v30 = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  uint64_t v25 = v27;
  uint64_t v27 = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  return sub_1DD271508(__p);
}

void sub_1DD30CDF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  nullsub_1(v16);
  MEMORY[0x1E01B1F60](v16, 0x1093C40C045CC46);
  _Unwind_Resume(a1);
}

void sub_1DD30D070(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DD30D304(uint64_t a1)
{
  v56[1] = *MEMORY[0x1E4F143B8];
  sub_1DD271638(v49);
  id v4 = objc_msgSend_helpers(*(void **)(a1 + 32), v2, v3);
  uint64_t v6 = objc_msgSend_topLevelIndexForStruct_(v4, v5, *(void *)(a1 + 40));

  v56[0] = v6;
  sub_1DD31493C(buf, (uint64_t)v56, 1);
  sub_1DD271734((uint64_t)v49, (uint64_t)buf);
  sub_1DD277088(buf);
  (*(void (**)(void *__return_ptr))(**(void **)(*(void *)(a1 + 32) + 16) + 224))(v56);
  uint64_t v7 = v56[0];
  uint64_t v10 = objc_msgSend_options(*(void **)(a1 + 32), v8, v9);
  uint64_t v13 = objc_msgSend_batchSize(v10, v11, v12);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v7 + 32))(&v48, v7, v13);

  uint64_t v14 = *(void *)(a1 + 40);
  uint64_t v15 = (uint64_t **)(*(void *)(a1 + 32) + 24);
  uint64_t v17 = *v15;
  uint64_t v16 = *(uint64_t **)(*(void *)(a1 + 32) + 32);
  uint64_t v18 = (char *)v16 - (char *)*v15;
  unint64_t v19 = v18 >> 4;
  if (v14 + 1 > (unint64_t)(v18 >> 4)) {
    unint64_t v20 = v14 + 1;
  }
  else {
    unint64_t v20 = v18 >> 4;
  }
  if (v19 < v14 + 1)
  {
    unint64_t v21 = v20 - v19;
    uint64_t v22 = *(void *)(*(void *)(a1 + 32) + 40);
    if (v20 - v19 <= (v22 - (uint64_t)v16) >> 4)
    {
      bzero(*(void **)(*(void *)(a1 + 32) + 32), 16 * v21);
      v15[1] = &v16[2 * v21];
    }
    else
    {
      if (v20 >> 60) {
        sub_1DD251DAC();
      }
      uint64_t v23 = v22 - (void)v17;
      if (v23 >> 3 > v20) {
        unint64_t v20 = v23 >> 3;
      }
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v24 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v24 = v20;
      }
      if (v24 >> 60) {
        sub_1DD251C54();
      }
      uint64_t v25 = (char *)operator new(16 * v24);
      unint64_t v26 = &v25[16 * v19];
      uint64_t v27 = (uint64_t *)&v25[16 * v24];
      bzero(v26, 16 * v21);
      uint64_t v28 = (uint64_t *)&v26[16 * v21];
      if (v16 == v17)
      {
        *uint64_t v15 = (uint64_t *)v26;
        v15[1] = v28;
        v15[2] = v27;
      }
      else
      {
        do
        {
          uint64_t v29 = *(v16 - 2);
          v16 -= 2;
          *uint64_t v16 = 0;
          *((void *)v26 - 2) = v29;
          v26 -= 16;
          uint64_t v30 = v16[1];
          v16[1] = 0;
          *((void *)v26 + 1) = v30;
        }
        while (v16 != v17);
        uint64_t v16 = *v15;
        id v31 = v15[1];
        *uint64_t v15 = (uint64_t *)v26;
        v15[1] = v28;
        v15[2] = v27;
        while (v31 != v16)
        {
          v31 -= 2;
          sub_1DD3149D0(v31);
        }
      }
      if (v16) {
        operator delete(v16);
      }
    }
  }
  uint64_t v32 = v56[0];
  v56[0] = 0;
  uint64_t v33 = v48;
  uint64_t v48 = 0;
  uint64_t v34 = *(void *)(a1 + 40);
  uint64_t v35 = *(void *)(*(void *)(a1 + 32) + 24);
  uint64_t v36 = *(void *)(v35 + 16 * v34);
  *(void *)(v35 + 16 * v34) = v32;
  if (v36) {
    (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
  }
  uint64_t v37 = v35 + 16 * v34;
  uint64_t v38 = *(void *)(v37 + 8);
  *(void *)(v37 + 8) = v33;
  if (v38) {
    (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
  }
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  int v39 = (id)*MEMORY[0x1E4F1A510];
  if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v45 = *(void *)(a1 + 40);
    uint64_t v46 = objc_msgSend_storage(*(void **)(a1 + 32), v40, v41);
    uint64_t v47 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 32) + 16) + 24))(*(void *)(*(void *)(a1 + 32) + 16));
    *(_DWORD *)buf = 134218498;
    uint64_t v51 = v45;
    __int16 v52 = 2112;
    unint64_t v53 = v46;
    __int16 v54 = 2048;
    uint64_t v55 = v47;
    _os_log_debug_impl(&dword_1DD237000, v39, OS_LOG_TYPE_DEBUG, "Created ORC reader for struct %lu with storage %@, rows: %llu", buf, 0x20u);
  }
  uint64_t v42 = v48;
  uint64_t v48 = 0;
  if (v42) {
    (*(void (**)(uint64_t))(*(void *)v42 + 8))(v42);
  }
  uint64_t v43 = v56[0];
  v56[0] = 0;
  if (v43) {
    (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
  }
  return sub_1DD271694((uint64_t)v49);
}

void sub_1DD30D738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  uint64_t v18 = a17;
  a17 = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  sub_1DD271694((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1DD30D99C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}