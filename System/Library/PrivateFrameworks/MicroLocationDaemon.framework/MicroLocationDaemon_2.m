void CLMicroLocationSensorsLogic::updateBtScanPowerMetrics(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  int v7;
  int v8;

  *(void *)(a1 + 736) = *a2;
  v3 = +[ULDefaultsSingleton shared];
  v4 = [v3 defaultsDictionary];

  v5 = [NSString stringWithUTF8String:"ULBleActiveScanRate"];
  v6 = [v4 objectForKey:v5];
  if (v6 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    v7 = [v6 intValue];
  }
  else {
    v7 = [&unk_2704F1C50 intValue];
  }
  v8 = v7;

  *(_DWORD *)(a1 + 744) = v8;
}

void sub_25644135C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double CLMicroLocationSensorsLogic::updateWifiScanPowerMetrics(CLMicroLocationSensorsLogic *this, const ULWiFiScanStrategy *a2)
{
  double result = *((double *)this + 91)
         + (double)CLMicroLocationSensorsDriver::getWiFiScanExpectedDuration((ULWiFiStrategyBuilder **)this + 30, a2)
         / 1000.0;
  *((double *)this + 91) = result;
  return result;
}

void CLMicroLocationSensorsLogic::startRecordingOrLocalizing(unsigned char *a1, const CLMicroLocationProto::RecordingEvent *a2, uint64_t a3, uint64_t *a4, void *a5)
{
  uint64_t v74 = *MEMORY[0x263EF8340];
  v58 = a5;
  CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(a1 + 8), a2);
  a1[152] = a3;
  uint64_t v9 = *a4;
  if (!a1[168]) {
    a1[168] = 1;
  }
  *((void *)a1 + 20) = v9;
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
  }
  v10 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    CLMicroLocationUtils::scanActivityToString(a3, __p);
    if (!a1[168]) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    v11 = __p;
    if (SHIBYTE(v61) < 0) {
      v11 = (void **)__p[0];
    }
    uint64_t v12 = *((void *)a1 + 20);
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v69 = 2082;
    *(void *)&v69[2] = "";
    *(_WORD *)&v69[10] = 2082;
    *(void *)&v69[12] = v11;
    *(_WORD *)&v69[20] = 2050;
    *(void *)&v69[22] = v12;
    _os_log_impl(&dword_25631F000, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"SensorsLogic, started activity\", \"ActivityType\":%{public, location:escape_only}s, \"recOrLocStartTime_s\":\"%{public}.09f\"}", buf, 0x26u);
    if (SHIBYTE(v61) < 0) {
      operator delete(__p[0]);
    }
  }

  a1[153] = 0;
  v13 = +[ULDefaultsSingleton shared];
  v14 = [v13 defaultsDictionary];

  v15 = [NSString stringWithUTF8String:"ULUwbRangeRequestedUpdateRateEnabled"];
  v16 = [v14 objectForKey:v15];
  if (v16 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    int v17 = [v16 BOOLValue];
  }
  else {
    int v17 = [MEMORY[0x263EFFA88] BOOLValue];
  }
  int v18 = v17;

  if (v18 && !(*(unsigned int (**)(unsigned char *))(*(void *)a1 + 168))(a1))
  {
    v19 = +[ULDefaultsSingleton shared];
    v20 = [v19 defaultsDictionary];

    v21 = [NSString stringWithUTF8String:"ULUwbRangeRequestedUpdateDuration"];
    v22 = [v20 objectForKey:v21];
    if (v22 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
      [v22 doubleValue];
    }
    else {
      [&unk_2704F0F60 doubleValue];
    }
    double v24 = v23;

    v25 = +[ULDefaultsSingleton shared];
    v26 = [v25 defaultsDictionary];

    v27 = [NSString stringWithUTF8String:"ULUwbRangeRequestedUpdateRate"];
    v28 = [v26 objectForKey:v27];
    if (v28 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
      int v29 = [v28 integerValue];
    }
    else {
      int v29 = [&unk_2704F1BF0 integerValue];
    }
    int v30 = v29;

    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
    }
    v31 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v69 = 2082;
      *(void *)&v69[2] = "";
      *(_WORD *)&v69[10] = 1026;
      *(_DWORD *)&v69[12] = v30;
      *(_WORD *)&v69[16] = 2050;
      *(double *)&v69[18] = v24;
      _os_log_impl(&dword_25631F000, v31, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationSensorsLogic, uwb, set ranging rate\", \"rate\":%{public}d, \"duration\":\"%{public}f\"}", buf, 0x22u);
    }
    if (CLMicroLocationSensorsDriver::setRangingRate((uint64_t)(a1 + 240)))
    {
      v66[0] = MEMORY[0x263EF8330];
      v66[1] = 3221225472;
      v66[2] = ___ZN27CLMicroLocationSensorsLogic26startRecordingOrLocalizingERKN20CLMicroLocationProto14RecordingEventEN20CLMicroLocationUtils12ScanActivityERKNSt3__16chrono10time_pointIN2cl6chrono19CFAbsoluteTimeClockENS7_8durationIeNS6_5ratioILl1ELl1EEEEEEEP19NSMutableDictionary_block_invoke;
      v66[3] = &__block_descriptor_40_e5_v8__0l;
      v66[4] = a1;
      uint64_t v32 = +[ULTimerFactory timerOnPrimaryQueueWithInterval:0 repeats:v66 block:v24];
      v33 = (void *)*((void *)a1 + 84);
      *((void *)a1 + 84) = v32;
    }
    a1[216] = 1;
  }
  v63 = 0;
  v64 = 0;
  uint64_t v65 = 0;
  v34 = (void *)*((void *)a1 + 87);
  for (i = (std::vector<std::string> *)&v63; v34; v34 = (void *)*v34)
  {
    v35 = (char *)operator new(0x28uLL);
    *(void *)buf = v35;
    *(_OWORD *)v69 = xmmword_256514540;
    *(_OWORD *)v35 = 0u;
    *((_OWORD *)v35 + 1) = 0u;
    *(void *)(v35 + 29) = 0;
    boost::uuids::to_chars<char *>((uint64_t)(v34 + 2), v35);
    std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](&i, (long long *)buf);
    if ((v69[15] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
  v36 = +[ULDefaultsSingleton shared];
  v37 = [v36 defaultsDictionary];

  v38 = [NSString stringWithUTF8String:"ULBleRequestedScanLength"];
  v39 = [v37 objectForKey:v38];
  if (v39 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    [v39 doubleValue];
  }
  else {
    [&unk_2704F0F40 doubleValue];
  }
  double v41 = v40;

  if ([*((id *)a1 + 81) count]) {
    BOOL v42 = a1[179] != 0;
  }
  else {
    BOOL v42 = 0;
  }
  uint64_t v43 = *((void *)a1 + 81);
  memset(&v59, 0, sizeof(v59));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v59, v63, v64, 0xAAAAAAAAAAAAAAABLL * (((char *)v64 - (char *)v63) >> 3));
  CLMicroLocationUtils::BleScanConfiguration::BleScanConfiguration(__p, a3, 0, v42, v43, &v59, v41);
  *(void *)buf = &v59;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  int v44 = a1[656];
  v45 = +[ULDefaultsSingleton shared];
  v46 = [v45 defaultsDictionary];

  v47 = [NSString stringWithUTF8String:"ULBleRequestedScanEnabled"];
  v48 = [v46 objectForKey:v47];
  if (v48 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    int v49 = [v48 BOOLValue];
  }
  else {
    int v49 = [MEMORY[0x263EFFA88] BOOLValue];
  }
  int v50 = v49;

  uint64_t v51 = v50
     && ([*((id *)a1 + 81) count] && a1[179] || v63 != v64)
     && (*(unsigned int (**)(unsigned char *))(*(void *)a1 + 168))(a1) == 0;
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
  }
  v52 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
  {
    if ([*((id *)a1 + 81) count]) {
      int v53 = a1[179];
    }
    else {
      int v53 = 0;
    }
    v55 = v63;
    v54 = v64;
    uint64_t v56 = [*((id *)a1 + 81) count];
    uint64_t v57 = a1[179];
    *(_DWORD *)buf = 68290306;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v69 = 2082;
    *(void *)&v69[2] = "";
    *(_WORD *)&v69[10] = 1026;
    *(_DWORD *)&v69[12] = v51;
    *(_WORD *)&v69[16] = 1026;
    *(_DWORD *)&v69[18] = v53;
    *(_WORD *)&v69[22] = 2050;
    *(void *)&v69[24] = 0xAAAAAAAAAAAAAAABLL * (((char *)v54 - (char *)v55) >> 3);
    __int16 v70 = 2050;
    uint64_t v71 = v56;
    __int16 v72 = 2050;
    uint64_t v73 = v57;
    _os_log_impl(&dword_25631F000, v52, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"SensorsLogic, should request short duration BLE scan\", \"should scan?\":%{public}hhd, \"should scan nearbyInfoV2 ?\":%{public}hhd, \"num of same account ble identifiers\":%{public}lu, \"num of entries in oObkey\":%{public}lu, \"is motion session running?\":%{public}lu}", buf, 0x3Cu);
  }

  if (v51)
  {
    CLMicroLocationSensorsDriver::stopBleRssiSession((CLMicroLocationSensorsDriver *)(a1 + 240));
    *((_WORD *)a1 + 328) = 0;
    [*((id *)a1 + 83) invalidate];
    CLMicroLocationSensorsLogic::pauseBackgroundBleSessionIfNeeded((CLMicroLocationSensorsLogic *)a1, v44 == 1);
    CLMicroLocationSensorsLogic::startBleRssiSession((CLMicroLocationSensorsLogic *)a1, (const CLMicroLocationUtils::BleScanConfiguration *)__p);
  }
  else
  {
    CLMicroLocationSensorsLogic::pauseBackgroundBleSessionIfNeeded((CLMicroLocationSensorsLogic *)a1, v44 == 1);
    a1[657] = 1;
    CLMicroLocationSensorsLogic::onBLEScanRequestTimeout((CLMicroLocationSensorsLogic *)a1);
  }
  CLMicroLocationSensorsLogic::updateTriggerMetrics((id *)a1, v58, v51);
  *(void *)buf = &v62;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);

  *(void *)buf = &v63;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_256441CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  _Unwind_Resume(a1);
}

void ___ZN27CLMicroLocationSensorsLogic26startRecordingOrLocalizingERKN20CLMicroLocationProto14RecordingEventEN20CLMicroLocationUtils12ScanActivityERKNSt3__16chrono10time_pointIN2cl6chrono19CFAbsoluteTimeClockENS7_8durationIeNS6_5ratioILl1ELl1EEEEEEEP19NSMutableDictionary_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
  }
  v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_DEFAULT, "CLMicroLocationSensorsLogic: custom range timer expired", v3, 2u);
  }
  if (*(unsigned char *)(v1 + 216))
  {
    CLMicroLocationSensorsDriver::resetRangingRate((CLMicroLocationSensorsDriver *)(v1 + 240));
    *(unsigned char *)(v1 + 216) = 0;
  }
}

void CLMicroLocationSensorsLogic::pauseBackgroundBleSessionIfNeeded(CLMicroLocationSensorsLogic *this, int a2)
{
  if (a2)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
    }
    v3 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_25631F000, v3, OS_LOG_TYPE_DEFAULT, "setting BLE background-scan session status to paused", v4, 2u);
    }
    *((unsigned char *)this + 656) = 2;
  }
}

void CLMicroLocationSensorsLogic::startBleRssiSession(CLMicroLocationSensorsLogic *this, const CLMicroLocationUtils::BleScanConfiguration *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)a2 + 9))
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
    }
    v4 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_DEFAULT, "Register for BLE background-scan session", buf, 2u);
    }
    *((unsigned char *)this + 656) = 1;
  }
  else
  {
    CLMicroLocationSensorsLogic::updateBtScanPowerMetrics((uint64_t)this, a2);
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
    }
    v5 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_25631F000, v5, OS_LOG_TYPE_DEFAULT, "Register for BLE initiated-scan session", buf, 2u);
    }
    *((unsigned char *)this + 657) = 1;
  }
  CLMicroLocationSensorsDriver::startBleRssiSession((CLMicroLocationSensorsLogic *)((char *)this + 240), a2);
  if (!*((unsigned char *)a2 + 9))
  {
    double v6 = *(double *)a2;
    double v7 = cl::chrono::CFAbsoluteTimeClock::now();
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
    }
    v8 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289794;
      int v13 = 0;
      __int16 v14 = 2082;
      v15 = "";
      __int16 v16 = 2050;
      double v17 = v7;
      __int16 v18 = 2050;
      uint64_t v19 = (int)v6;
      __int16 v20 = 2050;
      double v21 = v6 + v7;
      _os_log_impl(&dword_25631F000, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CBDiscovery, Starting BLE scan timer\", \"now\":\"%{public}.3f\", \"durationInSec\":%{public}lld, \"expected end time\":\"%{public}.3f\"}", buf, 0x30u);
    }
    v11[0] = MEMORY[0x263EF8330];
    v11[1] = 3221225472;
    v11[2] = ___ZN27CLMicroLocationSensorsLogic19startBleRssiSessionERKN20CLMicroLocationUtils20BleScanConfigurationE_block_invoke;
    v11[3] = &__block_descriptor_40_e5_v8__0l;
    v11[4] = this;
    uint64_t v9 = +[ULTimerFactory timerOnPrimaryQueueWithInterval:0 repeats:v11 block:v6];
    v10 = (void *)*((void *)this + 83);
    *((void *)this + 83) = v9;
  }
}

void CLMicroLocationSensorsLogic::onBLEScanRequestTimeout(CLMicroLocationSensorsLogic *this)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 657) != 1)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
    }
    v2 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      int v3 = *((unsigned __int8 *)this + 657);
      int v7 = 68289282;
      int v8 = 0;
      __int16 v9 = 2082;
      v10 = "";
      __int16 v11 = 1026;
      int v12 = v3;
      _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Ble requested scan timeout but the session state is not running\", \"fBleSessionStatusRequested\":%{public}u}", (uint8_t *)&v7, 0x18u);
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
    }
    v4 = logObject_MicroLocation_Default;
    if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
    {
      int v5 = *((unsigned __int8 *)this + 657);
      int v7 = 68289282;
      int v8 = 0;
      __int16 v9 = 2082;
      v10 = "";
      __int16 v11 = 1026;
      int v12 = v5;
      _os_signpost_emit_with_name_impl(&dword_25631F000, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Ble requested scan timeout but the session state is not running", "{\"msg%{public}.0s\":\"Ble requested scan timeout but the session state is not running\", \"fBleSessionStatusRequested\":%{public}u}", (uint8_t *)&v7, 0x18u);
    }
  }
  BOOL v6 = *((unsigned __int8 *)this + 656) == 2;
  CLMicroLocationSensorsDriver::stopBleRssiSession((CLMicroLocationSensorsLogic *)((char *)this + 240));
  *((unsigned char *)this + 656) = 0;
  *((unsigned char *)this + 657) = 0;
  [*((id *)this + 83) invalidate];
  if (v6) {
    CLMicroLocationSensorsLogic::onStartBackgroundSession(this);
  }
  CLMicroLocationSensorsLogic::requestWiFiScan(this);
}

void CLMicroLocationUtils::BleScanConfiguration::~BleScanConfiguration(id *this)
{
  v2 = this + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void CLMicroLocationSensorsLogic::onRecordingOrLocalizationStop(CLMicroLocationSensorsLogic *this)
{
  if (*((unsigned char *)this + 216))
  {
    CLMicroLocationSensorsDriver::resetRangingRate((CLMicroLocationSensorsLogic *)((char *)this + 240));
    *((unsigned char *)this + 216) = 0;
  }
  CLMicroLocationSensorsLogic::getBleMeasurements(this, (uint64_t *)v3);
  CLMicroLocationLogic::onAvailableMeasurements(*((CLMicroLocationProto::Measurement **)this + 28), v3);
  CLMicroLocationSensorsLogic::getUwbMeasurements(this, (uint64_t *)v2);
  CLMicroLocationLogic::onAvailableMeasurements(*((CLMicroLocationProto::Measurement **)this + 28), (CLMicroLocationProto::Measurement **)v2);
  if (*((unsigned char *)this + 168)) {
    *((unsigned char *)this + 168) = 0;
  }
  v4 = v2;
  std::vector<CLMiLoProtobufWrapper::Measurement>::__destroy_vector::operator()[abi:ne180100]((void ***)&v4);
  v2[0] = (void **)v3;
  std::vector<CLMiLoProtobufWrapper::Measurement>::__destroy_vector::operator()[abi:ne180100](v2);
}

void sub_25644251C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  *(void *)(v14 - 24) = v13;
  std::vector<CLMiLoProtobufWrapper::Measurement>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 24));
  a10 = (void **)&a13;
  std::vector<CLMiLoProtobufWrapper::Measurement>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void CLMicroLocationSensorsLogic::getBleMeasurements(CLMicroLocationSensorsLogic *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v123 = *MEMORY[0x263EF8340];
  if (!*((unsigned char *)this + 168))
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
    }
    uint64_t v14 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      _os_log_impl(&dword_25631F000, v14, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLMicroLocationSensorsLogic::getBleMeasurements, fState.fStartTime is nullopt!\"}", buf, 0x12u);
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
    }
    v15 = logObject_MicroLocation_Default;
    if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      _os_signpost_emit_with_name_impl(&dword_25631F000, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLMicroLocationSensorsLogic::getBleMeasurements, fState.fStartTime is nullopt!", "{\"msg%{public}.0s\":\"CLMicroLocationSensorsLogic::getBleMeasurements, fState.fStartTime is nullopt!\"}", buf, 0x12u);
    }
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return;
  }
  double v4 = cl::chrono::CFAbsoluteTimeClock::now();
  if (!*((unsigned char *)this + 168)) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  double v5 = v4;
  double v6 = v4 - *((double *)this + 20);
  double v7 = ULSettings::get<ULSettings::ScanDurationThreshold>();
  double v104 = 0.0;
  p_superclass = &OBJC_METACLASS___CLMicroLocationLoiBridge.superclass;
  __int16 v9 = &OBJC_METACLASS___CLMicroLocationLoiBridge.superclass;
  if (v6 < v7)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
    }
    unint64_t v12 = (unint64_t)(id)logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2050;
      *(double *)&buf[20] = v6;
      _os_log_impl(&dword_25631F000, (os_log_t)v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"BLE Scan duration\", \"duration\":\"%{public}.5f\"}", buf, 0x1Cu);
    }

    if (!*((unsigned char *)this + 168)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    __int16 v16 = +[ULDefaultsSingleton shared];
    double v17 = [v16 defaultsDictionary];

    __int16 v18 = [NSString stringWithUTF8String:"ULBleScanMaximalAgeForValidityFromScanStart"];
    uint64_t v19 = [v17 objectForKey:v18];
    if (v19 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
      [v19 doubleValue];
    }
    else {
      [&unk_2704F1B90 doubleValue];
    }
    double v21 = v20;

    double v13 = *((double *)this + 20) - v21;
  }
  else
  {
    double v10 = v7;
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
    }
    __int16 v11 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2050;
      *(double *)&buf[20] = v6;
      __int16 v120 = 2050;
      double v121 = v10;
      _os_log_impl(&dword_25631F000, v11, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Scan duration is exceeded threshold\", \"duration\":\"%{public}.5f\", \"threshold\":\"%{public}.5f\"}", buf, 0x26u);
    }

    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
    }
    unint64_t v12 = (unint64_t)(id)logObject_MicroLocation_Default;
    if (os_signpost_enabled((os_log_t)v12))
    {
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2050;
      *(double *)&buf[20] = v6;
      __int16 v120 = 2050;
      double v121 = v10;
      _os_signpost_emit_with_name_impl(&dword_25631F000, (os_log_t)v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Scan duration is exceeded threshold", "{\"msg%{public}.0s\":\"Scan duration is exceeded threshold\", \"duration\":\"%{public}.5f\", \"threshold\":\"%{public}.5f\"}", buf, 0x26u);
    }

    double v13 = v5 - v10;
  }
  double v104 = v13;
  char v103 = 0;
  size_t LatestEvents = (size_t)CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::getLatestEvents((uint64_t)this + 512, &v104, &v103, (CLMicroLocationProto::Measurement *)&v101);
  *(_OWORD *)__p = 0u;
  long long v99 = 0u;
  float v100 = 1.0;
  uint64_t v23 = v101;
  uint64_t v24 = v102;
  if (v101 == v102)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    goto LABEL_164;
  }
  do
  {
    if ((*(unsigned char *)(v23 + 72) & 0x40) == 0) {
      goto LABEL_145;
    }
    uint64_t v25 = *(void *)(v23 + 48);
    if (v25)
    {
      double v26 = *(double *)(v25 + 8);
LABEL_37:
      float v28 = *(float *)(v25 + 20);
      goto LABEL_38;
    }
    v27 = (CLMicroLocationProto::Measurement *)CLMicroLocationProto::Measurement::default_instance((CLMicroLocationProto::Measurement *)LatestEvents);
    uint64_t v25 = *(void *)(v23 + 48);
    double v26 = *(double *)(*((void *)v27 + 6) + 8);
    if (v25) {
      goto LABEL_37;
    }
    v68 = (CLMicroLocationProto::Measurement *)CLMicroLocationProto::Measurement::default_instance(v27);
    uint64_t v25 = *(void *)(v23 + 48);
    float v28 = *(float *)(*((void *)v68 + 6) + 20);
    if (!v25) {
      uint64_t v25 = *(void *)(CLMicroLocationProto::Measurement::default_instance(v68) + 48);
    }
LABEL_38:
    size_t LatestEvents = boost::hash<std::string>::operator()((uint64_t)v105, *(char **)(v25 + 48));
    unint64_t v29 = 0xC6A4A7935BD1E995 * *(void *)&v26;
    if (v26 == 0.0) {
      unint64_t v29 = 0;
    }
    uint64_t v30 = 0x35A98F4D286A90B9 * (v29 ^ (v29 >> 47)) + 3864292196u;
    unint64_t v31 = 0xC6A4A7935BD1E995 * LODWORD(v28);
    if (v28 == 0.0) {
      unint64_t v31 = 0;
    }
    unint64_t v32 = (0xC6A4A7935BD1E995 * (v30 ^ (0xC6A4A7935BD1E995 * (v31 ^ (v31 >> 47)))) + 3864292196u) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * LatestEvents) ^ ((0xC6A4A7935BD1E995 * LatestEvents) >> 47)));
    unint64_t v33 = 0xC6A4A7935BD1E995 * v32 + 3864292196u;
    unint64_t v34 = (unint64_t)__p[1];
    if (__p[1])
    {
      uint8x8_t v35 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
      v35.i16[0] = vaddlv_u8(v35);
      unint64_t v36 = v35.u32[0];
      if (v35.u32[0] > 1uLL)
      {
        unint64_t v12 = 0xC6A4A7935BD1E995 * v32 + 3864292196u;
        if ((void *)v33 >= __p[1]) {
          unint64_t v12 = v33 % (unint64_t)__p[1];
        }
      }
      else
      {
        unint64_t v12 = ((unint64_t)__p[1] - 1) & v33;
      }
      v37 = (void *)*((void *)__p[0] + v12);
      if (v37)
      {
        v38 = (void *)*v37;
        if (*v37)
        {
          do
          {
            unint64_t v39 = v38[1];
            if (v39 == v33)
            {
              uint64_t v40 = *(void *)(v38[2] + 48);
              if (!v40)
              {
                size_t LatestEvents = CLMicroLocationProto::Measurement::default_instance((CLMicroLocationProto::Measurement *)LatestEvents);
                uint64_t v40 = *(void *)(LatestEvents + 48);
              }
              double v41 = *(double *)(v40 + 8);
              uint64_t v42 = *(void *)(v23 + 48);
              if (!v42)
              {
                size_t LatestEvents = CLMicroLocationProto::Measurement::default_instance((CLMicroLocationProto::Measurement *)LatestEvents);
                uint64_t v42 = *(void *)(LatestEvents + 48);
              }
              if (v41 == *(double *)(v42 + 8))
              {
                uint64_t v43 = *(void *)(v38[2] + 48);
                if (!v43)
                {
                  size_t LatestEvents = CLMicroLocationProto::Measurement::default_instance((CLMicroLocationProto::Measurement *)LatestEvents);
                  uint64_t v43 = *(void *)(LatestEvents + 48);
                }
                float v44 = *(float *)(v43 + 20);
                uint64_t v45 = *(void *)(v23 + 48);
                if (!v45)
                {
                  size_t LatestEvents = CLMicroLocationProto::Measurement::default_instance((CLMicroLocationProto::Measurement *)LatestEvents);
                  uint64_t v45 = *(void *)(LatestEvents + 48);
                }
                if (v44 == *(float *)(v45 + 20))
                {
                  uint64_t v46 = *(void *)(v38[2] + 48);
                  if (!v46)
                  {
                    size_t LatestEvents = CLMicroLocationProto::Measurement::default_instance((CLMicroLocationProto::Measurement *)LatestEvents);
                    uint64_t v46 = *(void *)(LatestEvents + 48);
                  }
                  v47 = *(unsigned __int8 **)(v46 + 48);
                  uint64_t v48 = *(void *)(v23 + 48);
                  if (!v48)
                  {
                    size_t LatestEvents = CLMicroLocationProto::Measurement::default_instance((CLMicroLocationProto::Measurement *)LatestEvents);
                    uint64_t v48 = *(void *)(LatestEvents + 48);
                  }
                  int v49 = *(unsigned __int8 **)(v48 + 48);
                  uint64_t v50 = v47[23];
                  if ((v50 & 0x80u) == 0) {
                    uint64_t v51 = v47[23];
                  }
                  else {
                    uint64_t v51 = *((void *)v47 + 1);
                  }
                  uint64_t v52 = v49[23];
                  int v53 = (char)v52;
                  if ((v52 & 0x80u) != 0) {
                    uint64_t v52 = *((void *)v49 + 1);
                  }
                  if (v51 == v52)
                  {
                    if (v53 >= 0) {
                      v54 = v49;
                    }
                    else {
                      v54 = *(unsigned __int8 **)v49;
                    }
                    if ((v50 & 0x80) != 0)
                    {
                      size_t LatestEvents = memcmp(*(const void **)v47, v54, *((void *)v47 + 1));
                      if (!LatestEvents) {
                        goto LABEL_145;
                      }
                    }
                    else
                    {
                      if (!v47[23]) {
                        goto LABEL_145;
                      }
                      while (*v47 == *v54)
                      {
                        ++v47;
                        ++v54;
                        if (!--v50) {
                          goto LABEL_145;
                        }
                      }
                    }
                  }
                }
              }
            }
            else
            {
              if (v36 > 1)
              {
                if ((void *)v39 >= __p[1]) {
                  v39 %= (unint64_t)__p[1];
                }
              }
              else
              {
                v39 &= (unint64_t)__p[1] - 1;
              }
              if (v39 != v12) {
                break;
              }
            }
            v38 = (void *)*v38;
          }
          while (v38);
        }
      }
    }
    size_t LatestEvents = (size_t)operator new(0x18uLL);
    size_t v55 = LatestEvents;
    *(void *)size_t LatestEvents = 0;
    *(void *)(LatestEvents + 8) = v33;
    *(void *)(LatestEvents + 16) = v23;
    float v56 = (float)(unint64_t)(*((void *)&v99 + 1) + 1);
    if (!v34 || (float)(v100 * (float)v34) < v56)
    {
      BOOL v57 = (v34 & (v34 - 1)) == 0;
      if (v34 < 3) {
        BOOL v57 = 0;
      }
      unint64_t v58 = (2 * v34) | !v57;
      unint64_t v59 = vcvtps_u32_f32(v56 / v100);
      if (v58 <= v59) {
        size_t v60 = v59;
      }
      else {
        size_t v60 = v58;
      }
      if (v60 == 1)
      {
        size_t v60 = 2;
      }
      else if ((v60 & (v60 - 1)) != 0)
      {
        size_t LatestEvents = std::__next_prime(v60);
        size_t v60 = LatestEvents;
      }
      unint64_t v34 = (unint64_t)__p[1];
      if ((void *)v60 > __p[1]) {
        goto LABEL_99;
      }
      if ((void *)v60 < __p[1])
      {
        size_t LatestEvents = vcvtps_u32_f32((float)*((unint64_t *)&v99 + 1) / v100);
        if (__p[1] < (void *)3
          || (uint8x8_t v66 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v66.i16[0] = vaddlv_u8(v66), v66.u32[0] > 1uLL))
        {
          size_t LatestEvents = std::__next_prime(LatestEvents);
        }
        else
        {
          uint64_t v67 = 1 << -(char)__clz(LatestEvents - 1);
          if (LatestEvents >= 2) {
            size_t LatestEvents = v67;
          }
        }
        if (v60 <= LatestEvents) {
          size_t v60 = LatestEvents;
        }
        if ((void *)v60 >= __p[1])
        {
          unint64_t v34 = (unint64_t)__p[1];
        }
        else
        {
          if (v60)
          {
LABEL_99:
            if (v60 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            id v61 = operator new(8 * v60);
            size_t LatestEvents = (size_t)__p[0];
            __p[0] = v61;
            if (LatestEvents) {
              operator delete((void *)LatestEvents);
            }
            uint64_t v62 = 0;
            __p[1] = (void *)v60;
            do
              *((void *)__p[0] + v62++) = 0;
            while (v60 != v62);
            v63 = (void **)v99;
            if ((void)v99)
            {
              size_t v64 = *(void *)(v99 + 8);
              uint8x8_t v65 = (uint8x8_t)vcnt_s8((int8x8_t)v60);
              v65.i16[0] = vaddlv_u8(v65);
              if (v65.u32[0] > 1uLL)
              {
                if (v64 >= v60) {
                  v64 %= v60;
                }
              }
              else
              {
                v64 &= v60 - 1;
              }
              *((void *)__p[0] + v64) = &v99;
              for (i = *v63; i; size_t v64 = v70)
              {
                size_t v70 = i[1];
                if (v65.u32[0] > 1uLL)
                {
                  if (v70 >= v60) {
                    v70 %= v60;
                  }
                }
                else
                {
                  v70 &= v60 - 1;
                }
                if (v70 != v64)
                {
                  if (!*((void *)__p[0] + v70))
                  {
                    *((void *)__p[0] + v70) = v63;
                    goto LABEL_126;
                  }
                  long long *v63 = (void *)*i;
                  void *i = **((void **)__p[0] + v70);
                  **((void **)__p[0] + v70) = i;
                  i = v63;
                }
                size_t v70 = v64;
LABEL_126:
                v63 = (void **)i;
                i = (void *)*i;
              }
            }
            unint64_t v34 = v60;
            goto LABEL_130;
          }
          size_t LatestEvents = (size_t)__p[0];
          __p[0] = 0;
          if (LatestEvents) {
            operator delete((void *)LatestEvents);
          }
          unint64_t v34 = 0;
          __p[1] = 0;
        }
      }
LABEL_130:
      if ((v34 & (v34 - 1)) != 0)
      {
        if (v33 >= v34) {
          unint64_t v12 = v33 % v34;
        }
        else {
          unint64_t v12 = v33;
        }
      }
      else
      {
        unint64_t v12 = (v34 - 1) & v33;
      }
    }
    uint64_t v71 = __p[0];
    __int16 v72 = (size_t *)*((void *)__p[0] + v12);
    if (v72)
    {
      *(void *)size_t v55 = *v72;
LABEL_143:
      *__int16 v72 = v55;
      goto LABEL_144;
    }
    *(void *)size_t v55 = v99;
    *(void *)&long long v99 = v55;
    v71[v12] = &v99;
    if (*(void *)v55)
    {
      unint64_t v73 = *(void *)(*(void *)v55 + 8);
      if ((v34 & (v34 - 1)) != 0)
      {
        if (v73 >= v34) {
          v73 %= v34;
        }
      }
      else
      {
        v73 &= v34 - 1;
      }
      __int16 v72 = (size_t *)((char *)__p[0] + 8 * v73);
      goto LABEL_143;
    }
LABEL_144:
    ++*((void *)&v99 + 1);
LABEL_145:
    v23 += 80;
  }
  while (v23 != v24);
  uint64_t v74 = (void *)v99;
  v75 = a2;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  __int16 v9 = (__objc2_class **)(&OBJC_METACLASS___CLMicroLocationLoiBridge + 8);
  p_superclass = (__objc2_class **)(&OBJC_METACLASS___CLMicroLocationLoiBridge + 8);
  if (v74)
  {
    v76 = 0;
    do
    {
      v77 = (const CLMicroLocationProto::Measurement *)v74[2];
      if ((unint64_t)v76 >= v75[2])
      {
        v76 = (CLMicroLocationProto::Measurement *)std::vector<CLMiLoProtobufWrapper::Measurement>::__emplace_back_slow_path<CLMicroLocationProto::Measurement const>(v75, v77);
        v75 = a2;
      }
      else
      {
        CLMicroLocationProto::Measurement::Measurement(v76, v77);
        *((_DWORD *)v76 + 20) = 0;
        v76 = (CLMicroLocationProto::Measurement *)((char *)v76 + 88);
        v75 = a2;
        a2[1] = (uint64_t)v76;
      }
      v75[1] = (uint64_t)v76;
      uint64_t v74 = (void *)*v74;
    }
    while (v74);
  }
LABEL_164:
  if (p_superclass[429] != (__objc2_class *)-1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
  }
  v78 = v9[427];
  if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v79 = 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 3);
    *(_DWORD *)buf = 134218240;
    *(void *)&uint8_t buf[4] = 0xCCCCCCCCCCCCCCCDLL * ((v102 - v101) >> 4);
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v79;
    _os_log_impl(&dword_25631F000, v78, OS_LOG_TYPE_DEFAULT, "Read BLE spyscan buffer in Logic!. read %lu measurements (%lu unique)", buf, 0x16u);
  }

  if (p_superclass[429] != (__objc2_class *)-1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
  }
  v80 = v9[427];
  BOOL v81 = os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG);

  if (v81)
  {
    v82 = (const CLMicroLocationProto::Measurement *)*a2;
    v83 = (const CLMicroLocationProto::Measurement *)a2[1];
    if ((const CLMicroLocationProto::Measurement *)*a2 != v83)
    {
      do
      {
        v84 = (CLMicroLocationProto::Measurement *)CLMicroLocationProto::Measurement::Measurement((CLMicroLocationProto::Measurement *)buf, v82);
        uint64_t v85 = v122;
        if (!v122) {
          uint64_t v85 = *(void *)(CLMicroLocationProto::Measurement::default_instance(v84) + 48);
        }
        CLMicroLocationProtobufHelper::uuidFromProtobuf(*(uint64_t ***)(v85 + 48), v117);
        if (onceToken_MicroLocationQE_Default != -1) {
          dispatch_once(&onceToken_MicroLocationQE_Default, &__block_literal_global_454);
        }
        v86 = (id)logObject_MicroLocationQE_Default;
        uint64_t v87 = os_log_type_enabled(v86, OS_LOG_TYPE_DEBUG);
        if (v87)
        {
          uint64_t v88 = v122;
          if (!v122)
          {
            uint64_t v87 = CLMicroLocationProto::Measurement::default_instance((CLMicroLocationProto::Measurement *)v87);
            uint64_t v88 = *(void *)(v87 + 48);
          }
          float v89 = *(float *)(v88 + 20);
          int v90 = v118;
          if (v118)
          {
            v91 = operator new(0x28uLL);
            v96 = v91;
            long long v97 = xmmword_256514540;
            _OWORD *v91 = 0u;
            v91[1] = 0u;
            *(void *)((char *)v91 + 29) = 0;
            uint64_t v87 = (uint64_t)boost::uuids::to_chars<char *>((uint64_t)v117, v91);
            if (v97 >= 0) {
              v92 = (const char *)&v96;
            }
            else {
              v92 = (const char *)v96;
            }
          }
          else
          {
            v92 = "not available";
          }
          uint64_t v93 = v122;
          if (!v122) {
            uint64_t v93 = *(void *)(CLMicroLocationProto::Measurement::default_instance((CLMicroLocationProto::Measurement *)v87)
          }
                            + 48);
          v94 = *(uint64_t **)(v93 + 40);
          if (*((char *)v94 + 23) < 0) {
            v94 = (uint64_t *)*v94;
          }
          *(_DWORD *)v105 = 68290051;
          int v106 = 0;
          __int16 v107 = 2082;
          v108 = "";
          __int16 v109 = 1025;
          int v110 = (int)v89;
          __int16 v111 = 2081;
          v112 = v92;
          __int16 v113 = 2081;
          v114 = v94;
          __int16 v115 = 2050;
          uint64_t v116 = *(void *)&buf[8];
          _os_log_impl(&dword_25631F000, v86, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"BLE cached scan\", \"rssi\":%{private}d, \"uuid\":%{private, location:escape_only}s, \"model\":%{private, location:escape_only}s, \"time_s\":\"%{public}.09f\"}", v105, 0x36u);
          if (v90 && SHIBYTE(v97) < 0) {
            operator delete(v96);
          }
        }

        CLMicroLocationProto::Measurement::~Measurement((CLMicroLocationProto::Measurement *)buf);
        v82 = (const CLMicroLocationProto::Measurement *)((char *)v82 + 88);
      }
      while (v82 != v83);
    }
  }
  if (v103)
  {
    std::string::basic_string[abi:ne180100]<0>(buf, "BLE spyscan buffer overflow");
    CLMicroLocationErrorHandling::reportError((uint64_t *)buf);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)__p);
  *(void *)buf = &v101;
  std::vector<CLMicroLocationProto::Measurement>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_256443324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationSensorsLogic::getUwbMeasurements(CLMicroLocationSensorsLogic *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 168))
  {
    double v4 = cl::chrono::CFAbsoluteTimeClock::now();
    if (!*((unsigned char *)this + 168)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    double v5 = v4;
    double v6 = v4 - *((double *)this + 20);
    double v7 = ULSettings::get<ULSettings::ScanDurationThreshold>();
    double v42 = 0.0;
    unint64_t v36 = a2;
    if (v6 < v7)
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
      }
      uint64_t v14 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2050;
        *(double *)&buf[20] = v6;
        _os_log_impl(&dword_25631F000, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"UWB Scan duration\", \"duration\":\"%{public}.5f\"}", buf, 0x1Cu);
      }
      if (!*((unsigned char *)this + 168)) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      v15 = +[ULDefaultsSingleton shared];
      __int16 v16 = [v15 defaultsDictionary];

      double v17 = [NSString stringWithUTF8String:"ULUwbRangeMaximalAgeForValidityFromScanStart"];
      __int16 v18 = [v16 objectForKey:v17];
      if (v18 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
        [v18 doubleValue];
      }
      else {
        [&unk_2704F0F50 doubleValue];
      }
      double v20 = v19;

      double v11 = *((double *)this + 20) - v20;
    }
    else
    {
      double v8 = v7;
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
      }
      __int16 v9 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2050;
        *(double *)&buf[20] = v6;
        *(_WORD *)&unsigned char buf[28] = 2050;
        *(double *)&buf[30] = v8;
        _os_log_impl(&dword_25631F000, v9, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Scan duration is exceeded threshold\", \"duration\":\"%{public}.5f\", \"threshold\":\"%{public}.5f\"}", buf, 0x26u);
      }
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
      }
      double v10 = logObject_MicroLocation_Default;
      if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
      {
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2050;
        *(double *)&buf[20] = v6;
        *(_WORD *)&unsigned char buf[28] = 2050;
        *(double *)&buf[30] = v8;
        _os_signpost_emit_with_name_impl(&dword_25631F000, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Scan duration is exceeded threshold", "{\"msg%{public}.0s\":\"Scan duration is exceeded threshold\", \"duration\":\"%{public}.5f\", \"threshold\":\"%{public}.5f\"}", buf, 0x26u);
      }
      double v11 = v5 - v8;
    }
    double v42 = v11;
    char v41 = 0;
    CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::getLatestEvents((uint64_t)this + 576, &v42, &v41, (CLMicroLocationProto::Measurement *)&v39);
    if (v41)
    {
      std::string::basic_string[abi:ne180100]<0>(buf, "UWB range buffer overflow");
      CLMicroLocationErrorHandling::reportError((uint64_t *)buf);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
    }
    double v21 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      *(void *)&uint8_t buf[4] = 0xCCCCCCCCCCCCCCCDLL * ((v40 - v39) >> 4);
      _os_log_impl(&dword_25631F000, v21, OS_LOG_TYPE_DEBUG, "uwb cached scan, read %{public}lu measurements", buf, 0xCu);
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
    }
    BOOL v22 = os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG);
    uint64_t v24 = v39;
    uint64_t v23 = v40;
    if (v22)
    {
      if (v40 == v39)
      {
        uint64_t *v36 = 0;
        v36[1] = 0;
        v36[2] = 0;
LABEL_64:
        *(void *)buf = &v39;
        std::vector<CLMicroLocationProto::Measurement>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        return;
      }
      uint64_t v25 = 0;
      unint64_t v26 = 0;
      do
      {
        uint64_t v27 = *(void *)((char *)v24 + v25 + 56);
        if (!v27) {
          uint64_t v27 = *(void *)(CLMicroLocationProto::Measurement::default_instance((CLMicroLocationProto::Measurement *)v22)
        }
                          + 56);
        CLMicroLocationProtobufHelper::uuidFromProtobuf(*(uint64_t ***)(v27 + 32), v44);
        if (onceToken_MicroLocationQE_Default != -1) {
          dispatch_once(&onceToken_MicroLocationQE_Default, &__block_literal_global_454);
        }
        float v28 = (id)logObject_MicroLocationQE_Default;
        unint64_t v29 = (CLMicroLocationProto::Measurement *)os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG);
        if (v29)
        {
          int v30 = v45;
          if (v45)
          {
            unint64_t v31 = operator new(0x28uLL);
            __p = v31;
            long long v38 = xmmword_256514540;
            _OWORD *v31 = 0u;
            v31[1] = 0u;
            *(void *)((char *)v31 + 29) = 0;
            unint64_t v29 = (CLMicroLocationProto::Measurement *)boost::uuids::to_chars<char *>((uint64_t)v44, v31);
            if (v38 >= 0) {
              p_p = (const char *)&__p;
            }
            else {
              p_p = (const char *)__p;
            }
          }
          else
          {
            p_p = "not available";
          }
          uint64_t v33 = *(void *)((char *)v39 + v25 + 56);
          if (!v33) {
            uint64_t v33 = *(void *)(CLMicroLocationProto::Measurement::default_instance(v29) + 56);
          }
          float v34 = *(float *)(v33 + 20);
          CFAbsoluteTime v35 = CFAbsoluteTimeGetCurrent() - *(double *)((char *)v39 + v25 + 8);
          *(_DWORD *)buf = 134218755;
          *(void *)&uint8_t buf[4] = v26;
          *(_WORD *)&buf[12] = 2081;
          *(void *)&buf[14] = p_p;
          *(_WORD *)&buf[22] = 2049;
          *(double *)&buf[24] = v34;
          *(_WORD *)&buf[32] = 2050;
          *(CFAbsoluteTime *)&buf[34] = v35;
          _os_log_impl(&dword_25631F000, v28, OS_LOG_TYPE_DEBUG, "meas index: %zu, deviceId: %{private}s, range: %{private}f, age: %{public}f", buf, 0x2Au);
          if (v30 && SHIBYTE(v38) < 0) {
            operator delete(__p);
          }
        }

        ++v26;
        uint64_t v24 = v39;
        uint64_t v23 = v40;
        v25 += 80;
      }
      while (v26 < 0xCCCCCCCCCCCCCCCDLL * ((v40 - v39) >> 4));
    }
    uint64_t *v36 = 0;
    v36[1] = 0;
    v36[2] = 0;
    uint64_t v43 = v36;
    while (v24 != v23)
    {
      CLMicroLocationProto::Measurement::Measurement((CLMicroLocationProto::Measurement *)buf, v24);
      int v47 = 0;
      std::back_insert_iterator<std::vector<CLMiLoProtobufWrapper::Measurement>>::operator=[abi:ne180100](&v43, (CLMicroLocationProto::Measurement *)buf);
      CLMicroLocationProto::Measurement::~Measurement((CLMicroLocationProto::Measurement *)buf);
      uint64_t v24 = (const CLMicroLocationProto::Measurement *)((char *)v24 + 80);
    }
    goto LABEL_64;
  }
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
  }
  unint64_t v12 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    _os_log_impl(&dword_25631F000, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLMicroLocationSensorsLogic::getUwbMeasurements, fState.fStartTime is nullopt!\"}", buf, 0x12u);
  }
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
  }
  double v13 = logObject_MicroLocation_Default;
  if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    _os_signpost_emit_with_name_impl(&dword_25631F000, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLMicroLocationSensorsLogic::getUwbMeasurements, fState.fStartTime is nullopt!", "{\"msg%{public}.0s\":\"CLMicroLocationSensorsLogic::getUwbMeasurements, fState.fStartTime is nullopt!\"}", buf, 0x12u);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

void sub_256443BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  _Unwind_Resume(a1);
}

double ULSettings::get<ULSettings::ScanDurationThreshold>()
{
  v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  v2 = [NSString stringWithUTF8String:"ULScanDurationThreshold"];
  int v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    [v3 doubleValue];
  }
  else {
    [&unk_2704F1C38 doubleValue];
  }
  double v5 = v4;

  return v5;
}

void sub_256443D54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CLMicroLocationProto::Measurement *CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::getLatestEvents@<X0>(uint64_t a1@<X0>, double *a2@<X1>, unsigned char *a3@<X2>, CLMicroLocationProto::Measurement *a4@<X8>)
{
  *a3 = 0;
  double v7 = *(double **)(a1 + 8);
  double v11 = v10;
  v10[1] = 0;
  double v8 = std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__tree_const_iterator<CLMicroLocationProto::Measurement,std::__tree_node<CLMicroLocationProto::Measurement,void *> *,long>,std::__tree_const_iterator<CLMicroLocationProto::Measurement,std::__tree_node<CLMicroLocationProto::Measurement,void *> *,long>,double,std::__identity,CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::getLatestEvents(double const&,BOOL &)::{lambda(std::_ClassicAlgPolicy const&,double const&)#1}>(v7, (double *)(a1 + 16), a2);
  if (*(double **)(a1 + 8) == v8 && *(unsigned char *)(a1 + 56)) {
    *a3 = 1;
  }
  return std::vector<CLMicroLocationProto::Measurement>::vector<std::__tree_const_iterator<CLMicroLocationProto::Measurement,std::__tree_node<CLMicroLocationProto::Measurement,void *> *,long>,0>(a4, v8, (void *)(a1 + 16));
}

void CLMicroLocationSensorsLogic::onScanActivityCompleted(CLMicroLocationSensorsLogic *this)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  *((unsigned char *)this + 153) = 2;
  if (*((unsigned char *)this + 192) && *((unsigned char *)this + 193))
  {
    unint64_t v2 = CLMicroLocationScanBuffer::numberOfUniqueWifiAccessPoints((CLMicroLocationSensorsLogic *)((char *)this + 472));
    int v3 = +[ULDefaultsSingleton shared];
    double v4 = [v3 defaultsDictionary];

    double v5 = [NSString stringWithUTF8String:"ULMinimumWiFiNumberOfMeasurementsForScanExtension"];
    double v6 = [v4 objectForKey:v5];
    if (!v6) {
      goto LABEL_6;
    }
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t v7 = [v6 unsignedLongValue];
    }
    else {
LABEL_6:
    }
      uint64_t v7 = [&unk_2704F1BA8 unsignedLongValue];
    unint64_t v8 = v7;

    if (v2 >= v8)
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
      }
      __int16 v9 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        v10[0] = 68289282;
        v10[1] = 0;
        __int16 v11 = 2082;
        unint64_t v12 = "";
        __int16 v13 = 2050;
        uint64_t v14 = CLMicroLocationScanBuffer::numberOfUniqueWifiAccessPoints((CLMicroLocationSensorsLogic *)((char *)this + 472));
        _os_log_impl(&dword_25631F000, v9, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received valid scan results, clearing WiFi scan error state\", \"number of APs in scan buffer\":%{public}llu}", (uint8_t *)v10, 0x1Cu);
      }

      *((unsigned char *)this + 192) = 0;
    }
  }
  CLMicroLocationLogic::onScanActivityCompleted(*((NSObject **)this + 28), (void **)this + 1);
  *((_WORD *)this + 96) = 0;
}

void sub_256444010(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationSensorsLogic::extendWifiScanIfAppropriate(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 224);
  unint64_t v4 = CLMicroLocationScanBuffer::numberOfUniqueWifiAccessPoints((CLMicroLocationScanBuffer *)(a1 + 472));
  return CLMicroLocationLogic::requestWifiScanExtension(v3, a2, v4);
}

void CLMicroLocationSensorsLogic::startSpectatingSensors(id *this)
{
  unint64_t v2 = +[ULDefaultsSingleton shared];
  uint64_t v3 = [v2 defaultsDictionary];

  unint64_t v4 = [NSString stringWithUTF8String:"ULScanBleLeechedBeaconsRSSIEnabled"];
  double v5 = [v3 objectForKey:v4];
  if (v5 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    int v6 = [v5 BOOLValue];
  }
  else {
    int v6 = [MEMORY[0x263EFFA88] BOOLValue];
  }
  int v7 = v6;

  if (v7) {
    CLMicroLocationSensorsLogic::startBleSpyscanSessionIfStopped(this);
  }
  else {
    CLMicroLocationSensorsLogic::stopBleSpyscanSessionIfRunning((CLMicroLocationSensorsLogic *)this);
  }
  unint64_t v8 = +[ULDefaultsSingleton shared];
  __int16 v9 = [v8 defaultsDictionary];

  double v10 = [NSString stringWithUTF8String:"ULScanUWBRangeEnabled"];
  __int16 v11 = [v9 objectForKey:v10];
  if (v11 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    int v12 = [v11 BOOLValue];
  }
  else {
    int v12 = [MEMORY[0x263EFFA88] BOOLValue];
  }
  int v13 = v12;

  if (v13)
  {
    CLMicroLocationSensorsLogic::startRangingSessionIfStopped((CLMicroLocationSensorsLogic *)this);
  }
  else
  {
    CLMicroLocationSensorsLogic::stopRangingSessionIfRunning((CLMicroLocationSensorsLogic *)this);
  }
}

void sub_256444258(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationSensorsLogic::startBleSpyscanSessionIfStopped(id *this)
{
  if (*((unsigned char *)this + 177))
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
    }
    uint64_t v1 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_25631F000, v1, OS_LOG_TYPE_DEFAULT, "BLE spyscan session already running", buf, 2u);
    }
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
    }
    uint64_t v3 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_25631F000, v3, OS_LOG_TYPE_DEFAULT, "Start BLE spyscan session", buf, 2u);
    }
    CLMicroLocationSensorsLogic::loadBleIdentitiesFromDb((CLMicroLocationSensorsLogic *)this);
    if ([this[81] count]) {
      BOOL v4 = *((unsigned char *)this + 179) != 0;
    }
    else {
      BOOL v4 = 0;
    }
    id v5 = this[81];
    memset(v6, 0, sizeof(v6));
    CLMicroLocationUtils::BleScanConfiguration::BleScanConfiguration(buf, 0, 1, v4, v5, v6, 0.0);
    double v10 = (void **)v6;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v10);
    CLMicroLocationSensorsLogic::startBleRssiSession((CLMicroLocationSensorsLogic *)this, (const CLMicroLocationUtils::BleScanConfiguration *)buf);
    CLMicroLocationSensorsLogic::State::setBleSpyscanSessionRunning((CLMicroLocationSensorsLogic::State *)(this + 1), 1);
    double v10 = (void **)&v9;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v10);
  }
}

void sub_256444438(_Unwind_Exception *a1)
{
  *(void *)(v2 - 24) = v1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

void CLMicroLocationSensorsLogic::stopBleSpyscanSessionIfRunning(CLMicroLocationSensorsLogic *this)
{
  if (*((unsigned char *)this + 177))
  {
    uint64_t v2 = (CLMicroLocationSensorsLogic *)((char *)this + 8);
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
    }
    uint64_t v3 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_25631F000, v3, OS_LOG_TYPE_DEFAULT, "Stopping BLE spyscan session", buf, 2u);
    }
    CLMicroLocationSensorsDriver::stopBleRssiSession((CLMicroLocationSensorsLogic *)((char *)this + 240));
    *((_WORD *)this + 328) = 0;
    [*((id *)this + 83) invalidate];
    std::__tree<CLMicroLocationProto::Measurement,CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::EventsComparator,std::allocator<CLMicroLocationProto::Measurement>>::destroy((uint64_t)this + 520, *((void **)this + 66));
    *((void *)this + 65) = (char *)this + 528;
    *((void *)this + 67) = 0;
    *((void *)this + 66) = 0;
    CLMicroLocationSensorsLogic::backupBleIdentities(this);
    std::__hash_table<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem::HashItem,CLMicroLocationUtils::BleIdentityItem::PredicateItem,std::allocator<CLMicroLocationUtils::BleIdentityItem>>::clear((uint64_t)this + 680);
    CLMicroLocationSensorsLogic::State::setBleSpyscanSessionRunning(v2, 0);
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
    }
    BOOL v4 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v5 = 0;
      _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_DEFAULT, "BLE spyscan session already stopped", v5, 2u);
    }
  }
}

void CLMicroLocationSensorsLogic::startRangingSessionIfStopped(CLMicroLocationSensorsLogic *this)
{
  if (*((unsigned char *)this + 178))
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
    }
    uint64_t v1 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_25631F000, v1, OS_LOG_TYPE_DEFAULT, "ranging session already running", buf, 2u);
    }
  }
  else
  {
    uint64_t v3 = (CLMicroLocationSensorsLogic *)((char *)this + 8);
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
    }
    BOOL v4 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v5 = 0;
      _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_DEFAULT, "start a ranging session", v5, 2u);
    }
    CLMicroLocationSensorsDriver::startRanging((CLMicroLocationSensorsLogic *)((char *)this + 240));
    CLMicroLocationSensorsLogic::State::setRangingSessionRunning(v3, 1);
  }
}

void CLMicroLocationSensorsLogic::stopRangingSessionIfRunning(CLMicroLocationSensorsLogic *this)
{
  if (*((unsigned char *)this + 178))
  {
    uint64_t v2 = (CLMicroLocationSensorsLogic *)((char *)this + 8);
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
    }
    uint64_t v3 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_25631F000, v3, OS_LOG_TYPE_DEFAULT, "stop a ranging session", buf, 2u);
    }
    CLMicroLocationSensorsDriver::stopRanging((CLMicroLocationSensorsLogic *)((char *)this + 240));
    std::__tree<CLMicroLocationProto::Measurement,CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::EventsComparator,std::allocator<CLMicroLocationProto::Measurement>>::destroy((uint64_t)this + 584, *((void **)this + 74));
    *((void *)this + 73) = (char *)this + 592;
    *((void *)this + 75) = 0;
    *((void *)this + 74) = 0;
    CLMicroLocationSensorsLogic::State::setRangingSessionRunning(v2, 0);
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
    }
    BOOL v4 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v5 = 0;
      _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_DEFAULT, "ranging session already stopped", v5, 2u);
    }
  }
}

void CLMicroLocationSensorsLogic::stopSpectatingSensors(CLMicroLocationSensorsLogic *this)
{
  CLMicroLocationSensorsLogic::stopBleSpyscanSessionIfRunning(this);
  CLMicroLocationSensorsLogic::stopRangingSessionIfRunning(this);
}

void CLMicroLocationSensorsLogic::loadBleIdentitiesFromDb(CLMicroLocationSensorsLogic *this)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  double v2 = cl::chrono::CFAbsoluteTimeClock::now();
  uint64_t v3 = [MEMORY[0x263EFF910] date];
  BOOL v4 = +[ULDefaultsSingleton shared];
  id v5 = [v4 defaultsDictionary];

  int v6 = [NSString stringWithUTF8String:"ULNumberDaysToUseBtIdentities"];
  int v7 = [v5 objectForKey:v6];
  if (v7 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    int v8 = [v7 intValue];
  }
  else {
    int v8 = [&unk_2704F1C68 intValue];
  }
  int v9 = v8;

  CLMicroLocationTimeUtils::getTimeDeltaDaysAgo(v3, (NSDate *)~v9);
  double v11 = v10;
  id v12 = *(id *)(*((void *)this + 29) + 24);
  int v13 = v12;
  if (v12)
  {
    [v12 fetchBtIdentityEntriesBetweenTimes:v11 toTime:v2 + 86400.0];
  }
  else
  {
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
  }

  uint64_t v14 = v28;
  for (uint64_t i = v29; v14 != i; v14 += 72)
  {
    __int16 v16 = (const std::string::value_type **)(v14 + 16);
    if (*(char *)(v14 + 39) < 0)
    {
      std::string::size_type v18 = *(void *)(v14 + 24);
      if (v18)
      {
        std::string::__init_copy_ctor_external((std::string *)v31, *v16, v18);
        goto LABEL_14;
      }
    }
    else if (*(unsigned char *)(v14 + 39))
    {
      long long v17 = *(_OWORD *)v16;
      *(void *)&v31[16] = *(void *)(v14 + 32);
      *(_OWORD *)unint64_t v31 = v17;
LABEL_14:
      char v19 = 1;
      goto LABEL_16;
    }
    char v19 = 0;
    v31[0] = 0;
LABEL_16:
    v31[24] = v19;
    double v20 = (const std::string::value_type **)(v14 + 40);
    if (*(char *)(v14 + 63) < 0)
    {
      std::string::size_type v22 = *(void *)(v14 + 48);
      if (v22)
      {
        std::string::__init_copy_ctor_external(&__p, *v20, v22);
        goto LABEL_21;
      }
    }
    else if (*(unsigned char *)(v14 + 63))
    {
      long long v21 = *(_OWORD *)v20;
      __p.__r_.__value_.__r.__words[2] = *(void *)(v14 + 56);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v21;
LABEL_21:
      char v23 = 1;
      goto LABEL_23;
    }
    char v23 = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
LABEL_23:
    char v27 = v23;
    std::__hash_table<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem::HashItem,CLMicroLocationUtils::BleIdentityItem::PredicateItem,std::allocator<CLMicroLocationUtils::BleIdentityItem>>::__emplace_unique_impl<boost::uuids::uuid const&,std::optional<std::string> &,std::optional<std::string> &,std::nullopt_t const&,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> const&>((void *)this + 85, (_OWORD *)v14, (long long *)v31, (long long *)&__p, (uint64_t)&std::nullopt, (void *)(v14 + 64));
    if (v27 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v31[24] && (v31[23] & 0x80000000) != 0) {
      operator delete(*(void **)v31);
    }
  }
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
  }
  uint64_t v24 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v25 = *((void *)this + 88);
    *(void *)unint64_t v31 = 68289538;
    *(_WORD *)&v31[8] = 2082;
    *(void *)&v31[10] = "";
    *(_WORD *)&v31[18] = 2050;
    *(void *)&v31[20] = 0x8E38E38E38E38E39 * ((v29 - v28) >> 3);
    __int16 v32 = 2050;
    uint64_t v33 = v25;
    _os_log_impl(&dword_25631F000, v24, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"SensorsLogic, loadBleIdentitiesFromDb\", \"num of entries loaded\":%{public}lu, \"Total number of identities in memory\":%{public}lu}", v31, 0x26u);
  }
  *(void *)unint64_t v31 = &v28;
  std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)v31);
}

void sub_256444B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationSensorsLogic::backupBleIdentities(CLMicroLocationSensorsLogic *this)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  unint64_t v9 = 0;
  uint64_t v1 = (uint64_t *)*((void *)this + 87);
  if (v1)
  {
    do
    {
      if (*((unsigned char *)v1 + 56))
      {
        if (*((char *)v1 + 55) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v10, (const std::string::value_type *)v1[4], v1[5]);
        }
        else
        {
          *(_OWORD *)double v10 = *((_OWORD *)v1 + 2);
          *(void *)&v10[16] = v1[6];
        }
      }
      else
      {
        memset(v10, 0, 24);
      }
      if (*((unsigned char *)v1 + 88))
      {
        if (*((char *)v1 + 87) < 0) {
          std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v1[8], v1[9]);
        }
        else {
          std::string __p = *(std::string *)(v1 + 8);
        }
      }
      else
      {
        memset(&__p, 0, sizeof(__p));
      }
      unint64_t v3 = v8;
      if (v8 >= v9)
      {
        uint64_t v4 = std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::__emplace_back_slow_path<boost::uuids::uuid const&,std::string &,std::string &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> const&>(&v7, v1 + 2, (uint64_t)v10, (uint64_t)&__p, (double *)v1 + 16);
      }
      else
      {
        std::allocator<CLMicroLocationBluetoothIdentityTable::Entry>::construct[abi:ne180100]<CLMicroLocationBluetoothIdentityTable::Entry,boost::uuids::uuid const&,std::string &,std::string &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> const&>((uint64_t)&v9, v8, v1 + 2, (uint64_t)v10, (uint64_t)&__p, (double *)v1 + 16);
        uint64_t v4 = v3 + 72;
      }
      unint64_t v8 = v4;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if ((v10[23] & 0x80000000) != 0) {
        operator delete(*(void **)v10);
      }
      uint64_t v1 = (uint64_t *)*v1;
    }
    while (v1);
    if (v8 != v7)
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
      }
      id v5 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
        *(void *)double v10 = 68289282;
        *(_WORD *)&v10[8] = 2082;
        *(void *)&v10[10] = "";
        *(_WORD *)&v10[18] = 2050;
        *(void *)&v10[20] = 0x8E38E38E38E38E39 * ((uint64_t)(v8 - v7) >> 3);
        _os_log_impl(&dword_25631F000, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"SensorsLogic, back up BT identities data to DB\", \"Num Entries\":%{public}lu}", v10, 0x1Cu);
      }
      objc_msgSend(*(id *)(*((void *)this + 29) + 24), "insertEntries:", &v7, *(_OWORD *)&__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__r.__words[2]);
    }
  }
  *(void *)double v10 = &v7;
  std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)v10);
}

void sub_256444E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::string __p = &a15;
  std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void CLMicroLocationSensorsLogic::startOdometryMonitoringIfStopped(id *this)
{
  if (*((unsigned char *)this + 180))
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
    }
    uint64_t v1 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_25631F000, v1, OS_LOG_TYPE_DEFAULT, "odometry monitoring already running", buf, 2u);
    }
  }
  else
  {
    unint64_t v3 = (CLMicroLocationSensorsLogic::State *)(this + 1);
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
    }
    uint64_t v4 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v6 = 0;
      _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_DEFAULT, "start odometry monitoring", v6, 2u);
    }
    CLMicroLocationSensorsDriver::startOdometryBackgroundUpdates(this + 30);
    CLMicroLocationSensorsLogic::State::setOdometryMonitoringRunning(v3, 1);
    id v5 = +[ULHomeSlamAnalytics shared];
    [v5 logEventOdometryStartedAtTimestamp:cl::chrono::CFAbsoluteTimeClock::now()];
  }
}

void sub_256445030(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationSensorsLogic::stopOdometryMonitoringIfRunning(id *this)
{
  if (*((unsigned char *)this + 180))
  {
    double v2 = (CLMicroLocationSensorsLogic::State *)(this + 1);
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
    }
    unint64_t v3 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_25631F000, v3, OS_LOG_TYPE_DEFAULT, "stop odometry monitoring", buf, 2u);
    }
    CLMicroLocationSensorsDriver::stopOdometryBackgroundUpdates(this + 30);
    CLMicroLocationSensorsLogic::State::setOdometryMonitoringRunning(v2, 0);
    uint64_t v4 = +[ULHomeSlamAnalytics shared];
    [v4 logEventOdometryStoppedAtTimestamp:cl::chrono::CFAbsoluteTimeClock::now()];
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
    }
    id v5 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v6 = 0;
      _os_log_impl(&dword_25631F000, v5, OS_LOG_TYPE_DEFAULT, "odometry monitoring already stopped", v6, 2u);
    }
  }
}

void sub_256445180(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationSensorsLogic::startCustomLoiRecordingFence(CLMicroLocationSensorsLogic *this)
{
  return CLMicroLocationSensorsDriver::startCustomLoiRecordingFence((CLMicroLocationSensorsLogic *)((char *)this + 240));
}

uint64_t CLMicroLocationSensorsLogic::teardownCustomLoiRecordingFence(CLMicroLocationSensorsLogic *this)
{
  return CLMicroLocationSensorsDriver::teardownCustomLoiRecordingFence((CLMicroLocationSensorsLogic *)((char *)this + 240));
}

void CLMicroLocationSensorsLogic::stopMotionSM(CLMicroLocationSensorsLogic *this)
{
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
  }
  double v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unint64_t v3 = 0;
    _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_DEFAULT, "stop a motion state-machine", v3, 2u);
  }
  CLMicroLocationSensorsLogic::MotionSM::transitionLogic((unsigned int *)this + 114, 5);
}

void CLMicroLocationSensorsLogic::setFence(CLMicroLocationSensorsLogic *this, int a2)
{
  if (!a2 || !*((_DWORD *)this + 114))
  {
    double v2 = (unsigned int *)((char *)this + 456);
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
    }
    unint64_t v3 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_25631F000, v3, OS_LOG_TYPE_DEFAULT, "start motion state-machine geofence", v4, 2u);
    }
    CLMicroLocationSensorsLogic::MotionSM::transitionLogic(v2, 0);
  }
}

uint64_t CLMicroLocationSensorsLogic::setDeviceIsInCustomLoi(uint64_t this, char a2)
{
  *(unsigned char *)(this + 176) = a2;
  return this;
}

void CLMicroLocationSensorsLogic::startSpectatingMotion(CLMicroLocationSensorsLogic *this)
{
  v10[38] = *MEMORY[0x263EF8340];
  if (!*((unsigned char *)this + 179))
  {
    CLMicroLocationProto::SpectatingMotionUpdate::SpectatingMotionUpdate((uint64_t)v5);
    v7 |= 2u;
    char v6 = 1;
    int v4 = 0;
    boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v4);
    *(void *)&long long v8 = boost::uuids::random_generator_pure::operator()((uint64_t)&v4);
    *((void *)&v8 + 1) = v2;
    double v3 = cl::chrono::CFAbsoluteTimeClock::now();
    CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::SpectatingMotionUpdate>(&v8, v5, (uint64_t)v9, v3);
    (*(void (**)(CLMicroLocationSensorsLogic *, unsigned char *))(*(void *)this + 144))(this, v9);
    CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v10);
    boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v4);
    CLMicroLocationSensorsDriver::startMotionSession((CLMicroLocationSensorsLogic *)((char *)this + 240));
    CLMicroLocationSensorsLogic::State::setMotionSessionState((CLMicroLocationSensorsLogic *)((char *)this + 8), 1);
    CLMicroLocationProto::SpectatingMotionUpdate::~SpectatingMotionUpdate((CLMicroLocationProto::SpectatingMotionUpdate *)v5);
  }
}

void sub_2564453F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, __int16 a12, char a13)
{
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)(v13 + 32));
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&a11);
  CLMicroLocationProto::SpectatingMotionUpdate::~SpectatingMotionUpdate((CLMicroLocationProto::SpectatingMotionUpdate *)&a13);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::SpectatingMotionUpdate>(_OWORD *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  CLMicroLocationProto::ReceivedEvent::ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
  CLMicroLocationProtobufHelper::setSpecificLoggedEvent((CLMicroLocationProtobufHelper *)v9, (CLMicroLocationProto::ReceivedEvent *)a2, v8);
  CLMicroLocationLoggedEventsTable::Entry::Entry(a3, a1, a2[2], (CLMicroLocationProto::ReceivedEvent *)v9, a4);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
}

void sub_2564454AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void CLMicroLocationSensorsLogic::stopSpectatingMotion(CLMicroLocationSensorsLogic *this)
{
  v10[38] = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 179))
  {
    CLMicroLocationProto::SpectatingMotionUpdate::SpectatingMotionUpdate((uint64_t)v5);
    v7 |= 2u;
    char v6 = 0;
    int v4 = 0;
    boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v4);
    *(void *)&long long v8 = boost::uuids::random_generator_pure::operator()((uint64_t)&v4);
    *((void *)&v8 + 1) = v2;
    double v3 = cl::chrono::CFAbsoluteTimeClock::now();
    CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::SpectatingMotionUpdate>(&v8, v5, (uint64_t)v9, v3);
    (*(void (**)(CLMicroLocationSensorsLogic *, unsigned char *))(*(void *)this + 144))(this, v9);
    CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v10);
    boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v4);
    CLMicroLocationSensorsDriver::stopMotionSession((CLMicroLocationSensorsLogic *)((char *)this + 240));
    CLMicroLocationSensorsLogic::State::setMotionSessionState((CLMicroLocationSensorsLogic *)((char *)this + 8), 0);
    CLMicroLocationProto::SpectatingMotionUpdate::~SpectatingMotionUpdate((CLMicroLocationProto::SpectatingMotionUpdate *)v5);
  }
}

void sub_2564455C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, __int16 a12, char a13)
{
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)(v13 + 32));
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&a11);
  CLMicroLocationProto::SpectatingMotionUpdate::~SpectatingMotionUpdate((CLMicroLocationProto::SpectatingMotionUpdate *)&a13);
  _Unwind_Resume(a1);
}

void CLMicroLocationSensorsLogic::onWifiAPs(uint64_t a1, uint64_t a2)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (*(void *)a2 != *(void *)(a2 + 8))
  {
    *(unsigned char *)(a1 + 193) = 1;
    CLMicroLocationScanBuffer::ingestAps(a1 + 472, (int **)a2, v16);
    CLMiLoProtobufWrapper::measurementWrappersFromWiFiRssiWrappers(v16, (uint64_t *)&v14);
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
    }
    BOOL v3 = os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG);
    if (v3)
    {
      id v5 = v14;
      for (i = v15; v5 != i; id v5 = (CLMicroLocationProto::Measurement *)((char *)v5 + 88))
      {
        uint64_t v7 = *((void *)v5 + 2);
        if (!v7) {
          uint64_t v7 = *(void *)(CLMicroLocationProto::Measurement::default_instance((CLMicroLocationProto::Measurement *)v3)
        }
                         + 16);
        v18.var0 = CLMacAddress::newFromUint64(*(CLMacAddress **)(v7 + 24), v4);
        if (onceToken_MicroLocationQE_Default != -1) {
          dispatch_once(&onceToken_MicroLocationQE_Default, &__block_literal_global_454);
        }
        long long v8 = (id)logObject_MicroLocationQE_Default;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          float v9 = *(float *)(v7 + 20);
          CLMacAddress::toPrettyStr(&v18, &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          int v11 = *(_DWORD *)(v7 + 32);
          isInvalidWiFiRssuint64_t i = CLMiLoProtobufWrapper::Measurement::isInvalidWiFiRssi(v5);
          isOffChannelWiFiRssuint64_t i = CLMiLoProtobufWrapper::Measurement::isOffChannelWiFiRssi(v5);
          *(_DWORD *)buf = 68290307;
          *(_DWORD *)&uint8_t buf[4] = 0;
          __int16 v20 = 2082;
          long long v21 = "";
          __int16 v22 = 1025;
          int v23 = (int)v9;
          __int16 v24 = 2081;
          uint64_t v25 = p_p;
          __int16 v26 = 1025;
          int v27 = v11;
          __int16 v28 = 1025;
          int v29 = isInvalidWiFiRssi;
          __int16 v30 = 1025;
          int v31 = isOffChannelWiFiRssi;
          _os_log_impl(&dword_25631F000, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Wifi AP received\", \"rssi\":%{private}d, \"mac\":%{private, location:escape_only}s, \"channel\":%{private}d, \"isRssiInvalid\":%{private}d, \"isRssiOffChannel\":%{private}d}", buf, 0x34u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
      }
    }
    CLMicroLocationLogic::onAvailableMeasurements(*(CLMicroLocationProto::Measurement **)(a1 + 224), &v14);
    *(void *)buf = &v14;
    std::vector<CLMiLoProtobufWrapper::Measurement>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(void *)buf = v16;
    std::vector<CLMiLoProtobufWrapper::WiFiRssi>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
}

void sub_256445864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char *a24)
{
  a24 = &a11;
  std::vector<CLMiLoProtobufWrapper::Measurement>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  a24 = &a14;
  std::vector<CLMiLoProtobufWrapper::WiFiRssi>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  _Unwind_Resume(a1);
}

void CLMicroLocationSensorsLogic::onWifiScanError(CLMicroLocationSensorsLogic *this)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
  }
  uint64_t v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 68289026;
    v3[1] = 0;
    __int16 v4 = 2082;
    id v5 = "";
    _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"sensorLogic, received wifi scan error\"}", (uint8_t *)v3, 0x12u);
  }
  *((unsigned char *)this + 192) = 1;
}

void CLMicroLocationSensorsLogic::onWifiScanErrorBusy(CLMicroLocationSensorsLogic *this)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
  }
  uint64_t v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 68289026;
    v3[1] = 0;
    __int16 v4 = 2082;
    id v5 = "";
    _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"sensorLogic, received wifi scan error busy\"}", (uint8_t *)v3, 0x12u);
  }
  *((unsigned char *)this + 192) = 1;
}

void CLMicroLocationSensorsLogic::onWiFiAssociatedState(CLMicroLocationSensorsLogic *this, ULWiFiAssociatedState *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  BOOL v3 = a2;
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
  }
  __int16 v4 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138412290;
    long long v8 = v3;
    _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_DEFAULT, "sensorLogic, onWiFiAssociatedState: %@", (uint8_t *)&v7, 0xCu);
  }
  id v5 = (void *)*((void *)this + 23);
  *((void *)this + 23) = v3;
  uint64_t v6 = v3;

  CLMicroLocationLogic::onAssociatedState(*((CLMicroLocationLogic **)this + 28), v6);
}

void sub_256445B8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationSensorsLogic::requestWiFiScan(CLMicroLocationSensorsLogic *this)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 168))
  {
    double v2 = *((double *)this + 20);
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
    }
    BOOL v3 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)uint64_t v25 = 2082;
      *(void *)&v25[2] = "";
      _os_log_impl(&dword_25631F000, v3, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLMicroLocationSensorsLogic::requestWiFiScan, fState.fStartTime is nullopt!\"}", buf, 0x12u);
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
    }
    __int16 v4 = logObject_MicroLocation_Default;
    if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)uint64_t v25 = 2082;
      *(void *)&v25[2] = "";
      _os_signpost_emit_with_name_impl(&dword_25631F000, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLMicroLocationSensorsLogic::requestWiFiScan, fState.fStartTime is nullopt!", "{\"msg%{public}.0s\":\"CLMicroLocationSensorsLogic::requestWiFiScan, fState.fStartTime is nullopt!\"}", buf, 0x12u);
    }
    double v5 = cl::chrono::CFAbsoluteTimeClock::now();
    double v2 = v5;
    if (!*((unsigned char *)this + 168)) {
      *((unsigned char *)this + 168) = 1;
    }
    *((double *)this + 20) = v5;
  }
  uint64_t v6 = +[ULDefaultsSingleton shared];
  int v7 = [v6 defaultsDictionary];

  long long v8 = [NSString stringWithUTF8String:"ULMaximumAgeForValidity"];
  uint64_t v9 = [v7 objectForKey:v8];
  if (v9 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    [v9 doubleValue];
  }
  else {
    [&unk_2704F1B90 doubleValue];
  }
  double v11 = v10;

  CLMicroLocationScanBuffer::pruneAps((uint64_t)this + 472, v23, v2, v11);
  *(void *)buf = v23;
  std::vector<CLMiLoProtobufWrapper::WiFiRssi>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  memset(v22, 0, sizeof(v22));
  std::vector<CLMiLoProtobufWrapper::WiFiRssi>::__init_with_size[abi:ne180100]<CLMiLoProtobufWrapper::WiFiRssi*,CLMiLoProtobufWrapper::WiFiRssi*>(v22, *((void *)this + 59), *((void *)this + 60), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)this + 60) - *((void *)this + 59)) >> 3));
  CLMiLoProtobufWrapper::measurementWrappersFromWiFiRssiWrappers(v22, (uint64_t *)v21);
  int v12 = *((unsigned __int8 *)this + 176);
  if (v12 == 1 && *((unsigned char *)this + 152) == 1)
  {
    uint64_t v13 = +[ULDefaultsSingleton shared];
    uint64_t v14 = [v13 defaultsDictionary];

    uint64_t v15 = [NSString stringWithUTF8String:"ULLocalizationScanIterationsInCustomLoi"];
    __int16 v16 = [v14 objectForKey:v15];
    if (v16 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
      unsigned int v17 = [v16 unsignedIntValue];
    }
    else {
      unsigned int v17 = [&unk_2704F1BA8 unsignedIntValue];
    }
    unsigned int v19 = v17;

    uint64_t v18 = v19;
  }
  else
  {
    uint64_t v18 = 1;
  }
  buf[0] = *((unsigned char *)this + 152);
  *(void *)uint64_t v25 = 0;
  v25[8] = v12 == 1;
  *(void *)&v27[4] = v18;
  CLMicroLocationSensorsDriver::requestWifiScan((uint64_t)this + 240, buf);
  *((unsigned char *)this + 153) = 1;
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
  }
  __int16 v20 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)uint64_t v25 = 2082;
    *(void *)&v25[2] = "";
    __int16 v26 = 2050;
    *(void *)int v27 = 0x2E8BA2E8BA2E8BA3 * ((v21[1] - v21[0]) >> 3);
    _os_log_impl(&dword_25631F000, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"SensorsLogic, WiFi scan starts\", \"Num Valid Buffered WiFi APs\":%{public}lu}", buf, 0x1Cu);
  }
  CLMicroLocationLogic::onAvailableMeasurements(*((CLMicroLocationProto::Measurement **)this + 28), v21);
  *(void *)buf = v21;
  std::vector<CLMiLoProtobufWrapper::Measurement>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)buf = v22;
  std::vector<CLMiLoProtobufWrapper::WiFiRssi>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_25644601C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  a19 = (void **)&a10;
  std::vector<CLMiLoProtobufWrapper::Measurement>::__destroy_vector::operator()[abi:ne180100](&a19);
  a19 = (void **)&a13;
  std::vector<CLMiLoProtobufWrapper::WiFiRssi>::__destroy_vector::operator()[abi:ne180100](&a19);
  _Unwind_Resume(a1);
}

void CLMicroLocationSensorsLogic::onOdometryUpdate(CLMicroLocationSensorsLogic *this, Entry a2)
{
  uint64_t v2 = *(void *)a2.var0.var0;
  BOOL v3 = (CLMicroLocationLogic *)*((void *)this + 28);
  long long v5 = *(_OWORD *)*(void *)a2.var0.var0;
  __int16 v4 = *(void **)(*(void *)a2.var0.var0 + 24);
  uint64_t v6 = *(void *)(*(void *)a2.var0.var0 + 16);
  id v7 = v4;
  *(void *)v8.var0.var0 = &v5;
  CLMicroLocationLogic::onOdometryUpdate(v3, v8);
}

void sub_256446124(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationSensorsLogic::onOdometryError(CLMicroLocationSensorsLogic *this, Entry a2)
{
  uint64_t v2 = *(void *)a2.var0.var0;
  BOOL v3 = (CLMicroLocationLogic *)*((void *)this + 28);
  long long v5 = *(_OWORD *)*(void *)a2.var0.var0;
  __int16 v4 = *(void **)(*(void *)a2.var0.var0 + 24);
  uint64_t v6 = *(void *)(*(void *)a2.var0.var0 + 16);
  id v7 = v4;
  *(void *)v8.var0.var0 = &v5;
  CLMicroLocationLogic::onOdometryError(v3, v8);
}

void sub_256446190(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationSensorsLogic::onBleRssiMeasurement(uint64_t a1, CLMicroLocationProto::Measurement *a2, uint64_t a3)
{
  uint64_t v6 = +[ULDefaultsSingleton shared];
  id v7 = [v6 defaultsDictionary];

  Entry v8 = [NSString stringWithUTF8String:"ULBleScanMaximalAgeForValidity"];
  uint64_t v9 = [v7 objectForKey:v8];
  if (v9 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    [v9 doubleValue];
  }
  else {
    [&unk_2704F1B90 doubleValue];
  }
  uint64_t v11 = v10;

  uint64_t v15 = v11;
  CLMicroLocationProtobufHelper::measurementFromSourceData<CLMicroLocationProto::BleLeechedBeacons const&,true>(a3, (CLMicroLocationProto::Measurement *)v13);
  if (v14)
  {
    AnchorDeviceModelAllowedList = (std::locale::__imp **)CLMicroLocationLogic::getAnchorDeviceModelAllowedList(*(CLMicroLocationLogic **)(a1 + 224));
    if (CLMicroLocationsMeasurementFilters::isMeasurementGood(a2, (uint64_t)v13, (double *)&v15, AnchorDeviceModelAllowedList))
    {
      if (!v14) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      std::__tree<CLMicroLocationProto::Measurement,CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::EventsComparator,std::allocator<CLMicroLocationProto::Measurement>>::__emplace_multi<CLMicroLocationProto::Measurement const&>(a1 + 520, (const CLMicroLocationProto::Measurement *)v13);
      CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::truncateBuffer((uint64_t *)(a1 + 512));
    }
    if (v14) {
      CLMicroLocationProto::Measurement::~Measurement((CLMicroLocationProto::Measurement *)v13);
    }
  }
}

void sub_2564462F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256446330(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a19) {
    CLMicroLocationProto::Measurement::~Measurement((CLMicroLocationProto::Measurement *)&a9);
  }
  JUMPOUT(0x256446328);
}

void CLMicroLocationProtobufHelper::measurementFromSourceData<CLMicroLocationProto::BleLeechedBeacons const&,true>(uint64_t a1@<X0>, CLMicroLocationProto::Measurement *a2@<X8>)
{
  CLMicroLocationProto::Measurement::Measurement((CLMicroLocationProto::Measurement *)v7);
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  if (!CLMicroLocationProto::DataType_IsValid((CLMicroLocationProto *)v4)) {
    __assert_rtn("set_datatype", "microlocation.pb.h", 10718, "::CLMicroLocationProto::DataType_IsValid(value)");
  }
  uint64_t v6 = *(void *)(a1 + 8);
  unsigned int v8 = v4;
  v9 |= 3u;
  v7[1] = v6;
  CLMicroLocationProtobufHelper::measurementFromSourceImpl((CLMicroLocationProtobufHelper *)v7, (CLMicroLocationProto::Measurement *)a1, v5);
  CLMicroLocationProto::Measurement::Measurement(a2, (const CLMicroLocationProto::Measurement *)v7);
  *((unsigned char *)a2 + 80) = 1;
  CLMicroLocationProto::Measurement::~Measurement((CLMicroLocationProto::Measurement *)v7);
}

void sub_2564463F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void CLMicroLocationSensorsLogic::onBleIdentityItem(CLMicroLocationSensorsLogic *this, const CLMicroLocationUtils::BleIdentityItem *a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  if (*((void *)this + 88) >= *((void *)this + 90))
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
    }
    uint64_t v15 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      __int16 v16 = (char *)*((void *)this + 88);
      int v19 = 68289283;
      int v20 = 0;
      __int16 v21 = 2082;
      __int16 v22 = "";
      __int16 v23 = 2049;
      __int16 v24 = v16;
      _os_log_impl(&dword_25631F000, v15, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"fSameAccountBleIdentities exceeded max entries\", \"Size\":%{private}lu}", (uint8_t *)&v19, 0x1Cu);
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
    }
    unsigned int v17 = logObject_MicroLocation_Default;
    if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
    {
      uint64_t v18 = (char *)*((void *)this + 88);
      int v19 = 68289283;
      int v20 = 0;
      __int16 v21 = 2082;
      __int16 v22 = "";
      __int16 v23 = 2049;
      __int16 v24 = v18;
      _os_signpost_emit_with_name_impl(&dword_25631F000, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "fSameAccountBleIdentities exceeded max entries", "{\"msg%{public}.0s\":\"fSameAccountBleIdentities exceeded max entries\", \"Size\":%{private}lu}", (uint8_t *)&v19, 0x1Cu);
    }
  }
  else if (*((unsigned char *)a2 + 104))
  {
    unsigned int v4 = (char *)a2 + 80;
    AnchorDeviceModelAllowedList = (std::locale::__imp **)CLMicroLocationLogic::getAnchorDeviceModelAllowedList(*((CLMicroLocationLogic **)this + 28));
    if (CLMicroLocationsMeasurementFilters::isAnchorModelValid((uint64_t)a2 + 80, AnchorDeviceModelAllowedList))
    {
      std::__hash_table<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem::HashItem,CLMicroLocationUtils::BleIdentityItem::PredicateItem,std::allocator<CLMicroLocationUtils::BleIdentityItem>>::__emplace_unique_key_args<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem const&>((uint64_t)this + 680, (uint64_t)a2, (uint64_t)a2);
      if (v6)
      {
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
        }
        id v7 = (id)logObject_MicroLocation_Default;
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
        {
          unsigned int v8 = (char *)operator new(0x28uLL);
          *(void *)(v8 + 29) = 0;
          *(_OWORD *)unsigned int v8 = 0u;
          *((_OWORD *)v8 + 1) = 0u;
          boost::uuids::to_chars<char *>((uint64_t)a2, v8);
          if (!*((unsigned char *)a2 + 104)) {
            std::__throw_bad_optional_access[abi:ne180100]();
          }
          uint64_t v11 = (const char *)*((void *)a2 + 6);
          uint64_t v10 = (char *)a2 + 48;
          int v9 = v11;
          if (v10[23] >= 0) {
            int v9 = v10;
          }
          if (*(v10 - 9) >= 0) {
            int v12 = v10 - 32;
          }
          else {
            int v12 = (const char *)*((void *)v10 - 4);
          }
          if (!*(v10 - 8)) {
            int v12 = "";
          }
          if (!v10[24]) {
            int v9 = "";
          }
          if (v10[55] >= 0) {
            uint64_t v13 = v4;
          }
          else {
            uint64_t v13 = (char *)*((void *)v10 + 4);
          }
          uint64_t v14 = *((void *)v10 + 8);
          int v19 = 68290307;
          int v20 = 0;
          __int16 v21 = 2082;
          __int16 v22 = "";
          __int16 v23 = 2081;
          __int16 v24 = v8;
          __int16 v25 = 2081;
          __int16 v26 = v12;
          __int16 v27 = 2081;
          uint64_t v28 = v9;
          __int16 v29 = 2081;
          __int16 v30 = v13;
          __int16 v31 = 2050;
          uint64_t v32 = v14;
          _os_log_impl(&dword_25631F000, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"buffered a same icloud account BT identity\", \"BT uuid\":%{private, location:escape_only}s, \"Device name\":%{private, location:escape_only}s, \"Stable identifier\":%{private, location:escape_only}s, \"device model\":%{private, location:escape_only}s, \"Time stamp_s\":\"%{public}.09f\"}", (uint8_t *)&v19, 0x44u);
          operator delete(v8);
        }
      }
    }
  }
}

void sub_256446738(_Unwind_Exception *a1)
{
  operator delete(v2);

  _Unwind_Resume(a1);
}

void CLMicroLocationSensorsLogic::onUwbRangeMeasurements(uint64_t *a1, uint64_t *a2, double a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  double v18 = a3;
  CLMicroLocationProtobufHelper::measurementsFromSourceData<CLMicroLocationProto::UwbRange>(a2, (uint64_t)&v16);
  v23[0] = 1.79769313e308;
  *(void *)buf = 0;
  *(void *)int v20 = 0;
  *(void *)&v20[8] = 0;
  CLMicroLocationsMeasurementFilters::filterMeasurements((CLMicroLocationProto::Measurement *)&v18, &v16, v23, (std::locale::__imp **)buf);
  std::string __p = buf;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<CLMicroLocationProto::Measurement const*>,std::__wrap_iter<CLMicroLocationProto::Measurement const*>,std::insert_iterator<std::multiset<CLMicroLocationProto::Measurement,CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::EventsComparator,std::allocator<CLMicroLocationProto::Measurement>>>,0>(v16, v17, (const CLMicroLocationProto::Measurement *)(a1 + 73), (const CLMicroLocationProto::Measurement *)(a1 + 74), (const CLMicroLocationProto::Measurement **)buf);
  unsigned int v4 = CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::truncateBuffer(a1 + 72);
  uint64_t v5 = v16;
  for (uint64_t i = v17; (const CLMicroLocationProto::Measurement *)v5 != i; v5 += 80)
  {
    uint64_t v7 = *(void *)(v5 + 56);
    if (!v7) {
      uint64_t v7 = *(void *)(CLMicroLocationProto::Measurement::default_instance((CLMicroLocationProto::Measurement *)v4) + 56);
    }
    CLMicroLocationProtobufHelper::uuidFromProtobuf(*(uint64_t ***)(v7 + 32), v23);
    if (v24)
    {
      unsigned int v8 = operator new(0x28uLL);
      std::string __p = v8;
      long long v15 = xmmword_256514540;
      _OWORD *v8 = 0u;
      v8[1] = 0u;
      *(void *)((char *)v8 + 29) = 0;
      boost::uuids::to_chars<char *>((uint64_t)v23, v8);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
    }
    if (onceToken_MicroLocationQE_Default != -1) {
      dispatch_once(&onceToken_MicroLocationQE_Default, &__block_literal_global_454);
    }
    int v9 = (id)logObject_MicroLocationQE_Default;
    BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG);
    if (v10)
    {
      uint64_t v11 = *(void *)(v5 + 56);
      if (!v11) {
        uint64_t v11 = *(void *)(CLMicroLocationProto::Measurement::default_instance((CLMicroLocationProto::Measurement *)v10)
      }
                        + 56);
      double v12 = *(float *)(v11 + 20);
      p_p = &__p;
      if (v15 < 0) {
        p_p = __p;
      }
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)int v20 = 2082;
      *(void *)&v20[2] = "";
      *(_WORD *)&v20[10] = 2050;
      *(double *)&v20[12] = v12;
      __int16 v21 = 2081;
      __int16 v22 = p_p;
      _os_log_impl(&dword_25631F000, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Ingested UWB range measurement\", \"range\":\"%{public}.3f\", \"device ID\":%{private, location:escape_only}s}", buf, 0x26u);
    }

    if (SHIBYTE(v15) < 0) {
      operator delete(__p);
    }
  }
  *(void *)buf = &v16;
  std::vector<CLMicroLocationProto::Measurement>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_2564469C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  std::string __p = &a20;
  std::vector<CLMicroLocationProto::Measurement>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::measurementsFromSourceData<CLMicroLocationProto::UwbRange>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  long long v10 = 0uLL;
  unint64_t v11 = 0;
  std::vector<CLMicroLocationProto::Measurement>::reserve((uint64_t *)&v10, (a1[1] - *a1) >> 6);
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  while (v4 != v5)
  {
    CLMicroLocationProtobufHelper::measurementFromSourceData<CLMicroLocationProto::UwbRange const&,true>(v4, (CLMicroLocationProto::Measurement *)v8);
    if (v9)
    {
      uint64_t v6 = *((void *)&v10 + 1);
      if (*((void *)&v10 + 1) >= v11)
      {
        uint64_t v7 = std::vector<CLMicroLocationProto::Measurement>::__push_back_slow_path<CLMicroLocationProto::Measurement const&>((uint64_t *)&v10, (const CLMicroLocationProto::Measurement *)v8);
      }
      else
      {
        CLMicroLocationProto::Measurement::Measurement(*((CLMicroLocationProto::Measurement **)&v10 + 1), (const CLMicroLocationProto::Measurement *)v8);
        uint64_t v7 = v6 + 80;
      }
      *((void *)&v10 + 1) = v7;
      if (v9) {
        CLMicroLocationProto::Measurement::~Measurement((CLMicroLocationProto::Measurement *)v8);
      }
    }
    v4 += 64;
  }
  *(_OWORD *)a2 = v10;
  *(void *)(a2 + 16) = v11;
  unint64_t v11 = 0;
  long long v10 = 0uLL;
  v8[0] = (void **)&v10;
  std::vector<CLMicroLocationProto::Measurement>::__destroy_vector::operator()[abi:ne180100](v8);
}

void sub_256446B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(v10 - 64);
  std::vector<CLMicroLocationProto::Measurement>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void CLMicroLocationSensorsLogic::onMotionMeasurements(uint64_t a1)
{
}

void CLMicroLocationSensorsLogic::onFailureToReceiveGeofenceStatusReports(CLMicroLocationSensorsLogic *this)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v35, "onFailureToReceiveGeofenceStatusReports: ");
  std::string::basic_string[abi:ne180100]<0>(v33, "");
  if (*((_DWORD *)this + 114) == 1)
  {
    MEMORY[0x25A2A6080](v33, "Restarting Geofence. ");
    CLMicroLocationSensorsLogic::MotionSM::transitionLogic((unsigned int *)this + 114, 0);
  }
  else
  {
    MEMORY[0x25A2A6080](v33, "Ignoring failure. ");
  }
  uint64_t v2 = +[ULDefaultsSingleton shared];
  BOOL v3 = [v2 defaultsDictionary];

  uint64_t v4 = [NSString stringWithUTF8String:"ULMaxTimeAllowedWithoutFenceStatusReport"];
  uint64_t v5 = [v3 objectForKey:v4];
  if (v5 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    [v5 doubleValue];
  }
  else {
    [&unk_2704F1C98 doubleValue];
  }
  double v7 = v6;

  unsigned int v8 = +[ULDefaultsSingleton shared];
  char v9 = [v8 defaultsDictionary];

  uint64_t v10 = [NSString stringWithUTF8String:"ULMaxDelayAfterFenceStatusReportTimerFires"];
  unint64_t v11 = [v9 objectForKey:v10];
  if (v11 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    [v11 doubleValue];
  }
  else {
    [&unk_2704F1C08 doubleValue];
  }
  double v13 = v12;

  std::to_string(&v30, v7);
  uint64_t v14 = std::string::insert(&v30, 0, " Running with FenceStatusTimeout: ");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  uint64_t v16 = std::string::append(&v38, "and RaceDelayTimeout: ");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v39.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, v13);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  int v20 = std::string::append(&v39, (const std::string::value_type *)p_p, size);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  int64_t v32 = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)__int16 v31 = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v35, (const void **)v33, (uint64_t)&v39);
  if (v32 >= 0) {
    __int16 v22 = v31;
  }
  else {
    __int16 v22 = (void **)v31[0];
  }
  if (v32 >= 0) {
    std::string::size_type v23 = HIBYTE(v32);
  }
  else {
    std::string::size_type v23 = (std::string::size_type)v31[1];
  }
  char v24 = std::string::append(&v39, (const std::string::value_type *)v22, v23);
  uint64_t v25 = (void *)v24->__r_.__value_.__r.__words[0];
  v38.__r_.__value_.__r.__words[0] = v24->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v38.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v24->__r_.__value_.__r.__words[1] + 7);
  char v26 = HIBYTE(v24->__r_.__value_.__r.__words[2]);
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (v37 < 0) {
    operator delete(v35);
  }
  CFAbsoluteTime v35 = v25;
  *(void *)unint64_t v36 = v38.__r_.__value_.__r.__words[0];
  *(void *)&v36[7] = *(std::string::size_type *)((char *)v38.__r_.__value_.__r.__words + 7);
  char v37 = v26;
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
  }
  __int16 v27 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
  {
    uint64_t v28 = &v35;
    if (v37 < 0) {
      uint64_t v28 = v35;
    }
    LODWORD(v39.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v39.__r_.__value_.__r.__words + 4) = (std::string::size_type)v28;
    _os_log_impl(&dword_25631F000, v27, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v39, 0xCu);
  }
  CLMicroLocationErrorHandling::reportError((uint64_t *)&v35);
  if (SHIBYTE(v32) < 0) {
    operator delete(v31[0]);
  }
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  if (v37 < 0) {
    operator delete(v35);
  }
}

void sub_256446F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  _Unwind_Resume(a1);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  uint64_t result = std::string::basic_string[abi:ne180100](a3, v6 + v5);
  if (*(char *)(result + 23) >= 0) {
    unsigned int v8 = (char *)result;
  }
  else {
    unsigned int v8 = *(char **)result;
  }
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0) {
      char v9 = a1;
    }
    else {
      char v9 = *a1;
    }
    uint64_t result = (uint64_t)memmove(v8, v9, v5);
  }
  uint64_t v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v11 = a2;
    }
    else {
      unint64_t v11 = *a2;
    }
    uint64_t result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

void CLMicroLocationSensorsLogic::onStopMotionMeasurements(uint64_t a1)
{
}

void CLMicroLocationSensorsLogic::onCustomLoiRecordingFenceBreach(CLMiLoCustomLoiRecordingManager ***this)
{
}

uint64_t CLMicroLocationSensorsLogic::onNiSessionStatus(uint64_t result, int a2, double a3)
{
  *(double *)(result + 208) = a3;
  *(_DWORD *)(result + 200) = a2;
  return result;
}

void CLMicroLocationSensorsLogic::reloadWifiChannelHistogram(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 240;
  std::string __p = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  std::vector<CLMicroLocationWiFiChannelHistogram>::__init_with_size[abi:ne180100]<CLMicroLocationWiFiChannelHistogram*,CLMicroLocationWiFiChannelHistogram*>(&__p, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  CLMicroLocationSensorsDriver::setCurrentWifiChannelHistogram(v2, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v4 = __p;
    operator delete(__p);
  }
}

void sub_256447224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL CLMicroLocationSensorsLogic::isNiSessionNotResumedForPeriod(uint64_t a1, uint64_t a2)
{
  return !CLMicroLocationSensorsLogic::State::isNiSessionStateResumedForRequiredPeriod(a1 + 8, (double)a2 / 1000.0);
}

void *CLMicroLocationSensorsLogic::setWifiLink(uint64_t a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 240;
  std::__function::__value_func<ULWiFiScanProvider * ()(objc_object  {objcproto26ULWiFiScanProviderDelegate}*)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  CLMicroLocationSensorsDriver::setWifiLink(v2, (uint64_t)v4);
  return std::__function::__value_func<ULWiFiScanProvider * ()(objc_object  {objcproto26ULWiFiScanProviderDelegate}*)>::~__value_func[abi:ne180100](v4);
}

void sub_2564472E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<ULWiFiScanProvider * ()(objc_object  {objcproto26ULWiFiScanProviderDelegate}*)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationSensorsLogic::setBleLink(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v4 = (CLMicroLocationSensorsDriver *)(a1 + 240);
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v3 + 48))(&v7);
  CLMicroLocationSensorsDriver::setBleLink((uint64_t)v4, &v7);
  uint64_t v5 = v7;
  uint64_t v7 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return CLMicroLocationSensorsDriver::activateBleScannersIfNeeded(v4);
}

void sub_25644739C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    CLMicroLocationSensorsLogic::setBleLink();
  }
  _Unwind_Resume(exception_object);
}

void *CLMicroLocationSensorsLogic::setOdometryLink(uint64_t a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 240;
  std::__function::__value_func<ULOdometryProvider * ()(objc_object  {objcproto26ULOdometryProviderDelegate}*)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  CLMicroLocationSensorsDriver::setOdometryLink(v2, (uint64_t)v4);
  return std::__function::__value_func<ULOdometryProvider * ()(objc_object  {objcproto26ULOdometryProviderDelegate}*)>::~__value_func[abi:ne180100](v4);
}

void sub_256447428(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<ULOdometryProvider * ()(objc_object  {objcproto26ULOdometryProviderDelegate}*)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationSensorsLogic::setUwbLink(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v4 = a1 + 240;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v3 + 48))(&v6);
  CLMicroLocationSensorsDriver::setUwbLink(v4, &v6);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_2564474DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    CLMicroLocationSensorsLogic::setUwbLink();
  }
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationSensorsLogic::setMotionLink(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v4 = a1 + 240;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v3 + 48))(&v6);
  CLMicroLocationSensorsDriver::setMotionLink(v4, &v6);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_256447598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    CLMicroLocationSensorsLogic::setMotionLink();
  }
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationSensorsLogic::setStopMotionLink(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v4 = a1 + 240;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v3 + 48))(&v6);
  CLMicroLocationSensorsDriver::setStopMotionLink(v4, &v6);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_256447654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    CLMicroLocationSensorsLogic::setStopMotionLink();
  }
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationSensorsLogic::setCustomLoiRecordingFenceLink(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v4 = a1 + 240;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v3 + 48))(&v6);
  CLMicroLocationSensorsDriver::setCustomLoiRecordingFenceLink(v4, &v6);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_256447710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    CLMicroLocationSensorsLogic::setCustomLoiRecordingFenceLink();
  }
  _Unwind_Resume(exception_object);
}

void CLMicroLocationSensorsLogic::onDisplayStateChange(uint64_t a1, int a2, void *a3)
{
  if (a2) {
    *(void *)(a1 + 640) = *a3;
  }
  uint64_t v5 = +[ULDefaultsSingleton shared];
  uint64_t v6 = [v5 defaultsDictionary];

  uint64_t v7 = [NSString stringWithUTF8String:"ULOffScreenScanEnabled"];
  unsigned int v8 = [v6 objectForKey:v7];
  if (v8 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    char v9 = [v8 BOOLValue];
  }
  else {
    char v9 = [MEMORY[0x263EFFA80] BOOLValue];
  }
  char v10 = v9;

  if ((v10 & 1) == 0)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
    }
    unint64_t v11 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)double v13 = 0;
      _os_log_impl(&dword_25631F000, v11, OS_LOG_TYPE_DEFAULT, "MotionSM screen state change due to display state change", v13, 2u);
    }
    if (a2) {
      int v12 = 1;
    }
    else {
      int v12 = 2;
    }
    CLMicroLocationSensorsLogic::MotionSM::transitionLogic((unsigned int *)(a1 + 456), v12);
  }
}

void sub_256447890(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationSensorsLogic::onAPWakeStateChange(CLMicroLocationSensorsLogic *this, int a2)
{
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
  }
  uint64_t v4 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_DEFAULT, "MotionSM screen state change due to AP sleep state change", v6, 2u);
  }
  if (a2) {
    int v5 = 1;
  }
  else {
    int v5 = 2;
  }
  CLMicroLocationSensorsLogic::MotionSM::transitionLogic((unsigned int *)this + 114, v5);
}

uint64_t CLMicroLocationSensorsLogic::getExtensionDurationForUwbScanCompletion(CLMicroLocationSensorsLogic *this)
{
  double v2 = cl::chrono::CFAbsoluteTimeClock::now();
  if (*((unsigned char *)this + 178)
    && (double v3 = v2,
        double v4 = v2 - *((double *)this + 80),
        v4 * 1000.0 < (double)ULSettings::get<ULSettings::LocalizingBacklightOnInitialScanDelay>()))
  {
    return (uint64_t)((double)ULSettings::get<ULSettings::LocalizingBacklightOnInitialScanDelay>()
                   + (v3 - *((double *)this + 80)) * -1000.0);
  }
  else
  {
    return 0;
  }
}

uint64_t ULSettings::get<ULSettings::LocalizingBacklightOnInitialScanDelay>()
{
  v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  double v2 = [NSString stringWithUTF8String:"ULLocalizingBacklightOnInitialScanDelay"];
  double v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    int v4 = [v3 intValue];
  }
  else {
    int v4 = [&unk_2704F1C20 intValue];
  }
  uint64_t v5 = v4;

  return v5;
}

void sub_256447AC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationSensorsLogic::updateBleOobKeys(uint64_t a1, void *a2)
{
}

void ___ZN27CLMicroLocationSensorsLogic19startBleRssiSessionERKN20CLMicroLocationUtils20BleScanConfigurationE_block_invoke(uint64_t a1)
{
}

uint64_t CLMicroLocationSensorsLogic::logEvent(CLMicroLocationSensorsLogic *this, const Entry *a2)
{
  return (*(uint64_t (**)(void, const Entry *))(**((void **)this + 28) + 120))(*((void *)this + 28), a2);
}

__n128 CLMicroLocationSensorsLogic::getPowerMetrics@<Q0>(CLMicroLocationSensorsLogic *this@<X0>, __n128 *a2@<X8>)
{
  a2[1].n128_u64[0] = *((void *)this + 93);
  __n128 result = *(__n128 *)((char *)this + 728);
  *a2 = result;
  return result;
}

double CLMicroLocationSensorsLogic::clrPowerMetrics(CLMicroLocationSensorsLogic *this)
{
  *((_DWORD *)this + 186) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 728) = 0u;
  return result;
}

uint64_t CLMicroLocationSensorsLogic::getScanScenario(CLMicroLocationSensorsLogic *this)
{
  return *((unsigned __int8 *)this + 176);
}

void CLMicroLocationSensorsLogic::MotionSM::transitionLogic(unsigned int *a1, int a2)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  unsigned int v8 = (char *)*a1;
  switch((int)v8)
  {
    case 0:
      CLMicroLocationSensorsLogic::MotionSM::transitionLogicIdle((uint64_t)a1, a2);
      char v5 = 0;
      LOBYTE(v4) = 0;
      LOBYTE(v3) = 0;
      BOOL v2 = 0;
      break;
    case 1:
      unsigned int v9 = CLMicroLocationSensorsLogic::MotionSM::transitionLogicGeofence((uint64_t)a1, a2);
      goto LABEL_5;
    case 2:
      unsigned int v9 = CLMicroLocationSensorsLogic::MotionSM::transitionLogicStopDetection((uint64_t)a1, a2);
LABEL_5:
      BOOL v2 = 0;
      char v5 = v9 & 1;
      int v4 = (v9 >> 8) & 1;
      LOBYTE(v3) = (v9 & 0xFFFF0000) != 0;
      break;
    case 3:
      unsigned int v10 = CLMicroLocationSensorsLogic::MotionSM::transitionLogicPendingResumeStopDetection((uint64_t)a1, a2);
      char v5 = v10 & 1;
      int v4 = (v10 >> 8) & 1;
      int v3 = HIWORD(v10) & 1;
      BOOL v2 = (v10 & 0xFF000000) != 0;
      break;
    default:
      break;
  }
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
  }
  unint64_t v11 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    switch(a2)
    {
      case 1:
        char v23 = 8;
        uint64_t v12 = 0x6E4F6E6565726353;
        goto LABEL_13;
      case 2:
        char v23 = 9;
        strcpy((char *)v22, "ScreenOff");
        break;
      case 3:
        char v23 = 10;
        LOWORD(v22[1]) = 29555;
        double v13 = "FenceCross";
        goto LABEL_17;
      case 4:
        char v23 = 10;
        LOWORD(v22[1]) = 28271;
        double v13 = "StopMotion";
LABEL_17:
        v22[0] = *(void **)v13;
        BYTE2(v22[1]) = 0;
        break;
      case 5:
        char v23 = 4;
        strcpy((char *)v22, "Stop");
        break;
      default:
        char v23 = 8;
        uint64_t v12 = 0x65636E6546746553;
LABEL_13:
        v22[0] = (void *)v12;
        LOBYTE(v22[1]) = 0;
        break;
    }
    CLMicroLocationSensorsLogic::MotionSM::stateToStr(v8, (uint64_t)v20);
    int v14 = v21;
    long long v15 = (void **)v20[0];
    CLMicroLocationSensorsLogic::MotionSM::stateToStr((char *)*a1, (uint64_t)__p);
    uint64_t v16 = v20;
    if (v14 < 0) {
      uint64_t v16 = v15;
    }
    if (v19 >= 0) {
      long long v17 = __p;
    }
    else {
      long long v17 = (void **)__p[0];
    }
    *(_DWORD *)buf = 68290818;
    int v25 = 0;
    __int16 v26 = 2082;
    __int16 v27 = "";
    __int16 v28 = 2082;
    __int16 v29 = v22;
    __int16 v30 = 2082;
    __int16 v31 = v16;
    __int16 v32 = 2082;
    uint64_t v33 = v17;
    __int16 v34 = 1026;
    int v35 = v5 & 1;
    __int16 v36 = 1026;
    int v37 = v4 & 1;
    __int16 v38 = 1026;
    int v39 = v3 & 1;
    __int16 v40 = 1026;
    int v41 = v2;
    _os_log_impl(&dword_25631F000, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"MotionSM::transitionLogic\", \"event\":%{public, location:escape_only}s, \"prevState\":%{public, location:escape_only}s, \"currState\":%{public, location:escape_only}s, \"startInMotion\":%{public}hhd, \"ongoingInMotion\":%{public}hhd, \"stopMotion\":%{public}hhd, \"resumeInMotion\":%{public}hhd}", buf, 0x48u);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    if (v21 < 0) {
      operator delete(v20[0]);
    }
    if (v23 < 0) {
      operator delete(v22[0]);
    }
  }

  if (v5) {
    CLMicroLocationLogic::onInMotion(*(void *)(*((void *)a1 + 1) + 224), 0);
  }
  if (v4) {
    CLMicroLocationLogic::onInMotion(*(void *)(*((void *)a1 + 1) + 224), 1u);
  }
  if (v3) {
    CLMicroLocationLogic::onStopMotion(*(CLMicroLocationLogic **)(*((void *)a1 + 1) + 224));
  }
  if (v2) {
    CLMicroLocationLogic::onInMotion(*(void *)(*((void *)a1 + 1) + 224), 2u);
  }
}

void sub_256447F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (v23 < 0) {
    operator delete(v22);
  }
  if (a21 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationSensorsLogic::MotionSM::transitionLogicIdle(uint64_t a1, int a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  switch(a2)
  {
    case 0:
      CLMicroLocationSensorsDriver::setMotionFence((CLMicroLocationSensorsDriver *)(*(void *)(a1 + 8) + 240));
      *(_DWORD *)a1 = 1;
      break;
    case 1:
      *(unsigned char *)(a1 + 4) = 1;
      break;
    case 2:
      *(unsigned char *)(a1 + 4) = 0;
      break;
    case 3:
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
      }
      int v3 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
      {
        int v9 = 68289026;
        int v10 = 0;
        __int16 v11 = 2082;
        uint64_t v12 = "";
        _os_log_impl(&dword_25631F000, v3, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"MotionSM::transitionLogicIdle, shouldn't receive FenceCross at Idle state\"}", (uint8_t *)&v9, 0x12u);
      }
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
      }
      int v4 = logObject_MicroLocation_Default;
      if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
      {
        int v9 = 68289026;
        int v10 = 0;
        __int16 v11 = 2082;
        uint64_t v12 = "";
        char v5 = "MotionSM::transitionLogicIdle, shouldn't receive FenceCross at Idle state";
        uint64_t v6 = "{\"msg%{public}.0s\":\"MotionSM::transitionLogicIdle, shouldn't receive FenceCross at Idle state\"}";
        goto LABEL_21;
      }
      break;
    case 4:
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
      }
      uint64_t v7 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
      {
        int v9 = 68289026;
        int v10 = 0;
        __int16 v11 = 2082;
        uint64_t v12 = "";
        _os_log_impl(&dword_25631F000, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"MotionSM::transitionLogicIdle, shouldn't receive StopMotion at Idle state\"}", (uint8_t *)&v9, 0x12u);
      }
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
      }
      int v4 = logObject_MicroLocation_Default;
      if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
      {
        int v9 = 68289026;
        int v10 = 0;
        __int16 v11 = 2082;
        uint64_t v12 = "";
        char v5 = "MotionSM::transitionLogicIdle, shouldn't receive StopMotion at Idle state";
        uint64_t v6 = "{\"msg%{public}.0s\":\"MotionSM::transitionLogicIdle, shouldn't receive StopMotion at Idle state\"}";
LABEL_21:
        _os_signpost_emit_with_name_impl(&dword_25631F000, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v5, v6, (uint8_t *)&v9, 0x12u);
      }
      break;
    default:
      return 0;
  }
  return 0;
}

uint64_t CLMicroLocationSensorsLogic::MotionSM::transitionLogicGeofence(uint64_t a1, int a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  switch(a2)
  {
    case 0:
      CLMicroLocationSensorsDriver::clearMotionFence((CLMicroLocationSensorsDriver *)(*(void *)(a1 + 8) + 240));
      CLMicroLocationSensorsDriver::setMotionFence((CLMicroLocationSensorsDriver *)(*(void *)(a1 + 8) + 240));
      int v3 = 0;
      int v4 = 0;
      *(_DWORD *)a1 = 1;
      return v3 & 0x10000 | v4;
    case 1:
      int v3 = 0;
      int v4 = 0;
      *(unsigned char *)(a1 + 4) = 1;
      return v3 & 0x10000 | v4;
    case 2:
      int v3 = 0;
      int v4 = 0;
      *(unsigned char *)(a1 + 4) = 0;
      return v3 & 0x10000 | v4;
    case 3:
      if (!*(unsigned char *)(a1 + 4)) {
        goto LABEL_19;
      }
      if (ULSettings::get<ULSettings::MotionStopDetectionModuleEnable>())
      {
        int v3 = 0;
        int v4 = 1;
        int v5 = 2;
        goto LABEL_22;
      }
      if (*(unsigned char *)(a1 + 4)) {
        goto LABEL_21;
      }
LABEL_19:
      if (ULSettings::get<ULSettings::MotionStopDetectionModuleEnable>())
      {
        int v4 = 0;
        int v3 = 0x10000;
        int v5 = 3;
      }
      else
      {
LABEL_21:
        int v5 = 0;
        int v4 = 0;
        int v3 = 0x10000;
      }
LABEL_22:
      CLMicroLocationSensorsLogic::MotionSM::changeState(a1, 1, v5);
      return v3 & 0x10000 | v4;
    case 4:
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
      }
      uint64_t v6 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
      {
        int v9 = 68289026;
        int v10 = 0;
        __int16 v11 = 2082;
        uint64_t v12 = "";
        _os_log_impl(&dword_25631F000, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"MotionSM::transitionLogicGeofence, shouldn't receive StopMotion at Geofence state\"}", (uint8_t *)&v9, 0x12u);
      }
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
      }
      uint64_t v7 = logObject_MicroLocation_Default;
      if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
      {
        int v9 = 68289026;
        int v10 = 0;
        __int16 v11 = 2082;
        uint64_t v12 = "";
        _os_signpost_emit_with_name_impl(&dword_25631F000, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "MotionSM::transitionLogicGeofence, shouldn't receive StopMotion at Geofence state", "{\"msg%{public}.0s\":\"MotionSM::transitionLogicGeofence, shouldn't receive StopMotion at Geofence state\"}", (uint8_t *)&v9, 0x12u);
      }
      goto LABEL_16;
    case 5:
      CLMicroLocationSensorsDriver::clearMotionFence((CLMicroLocationSensorsDriver *)(*(void *)(a1 + 8) + 240));
      int v3 = 0;
      int v4 = 0;
      *(_DWORD *)a1 = 0;
      return v3 & 0x10000 | v4;
    default:
LABEL_16:
      int v3 = 0;
      int v4 = 0;
      return v3 & 0x10000 | v4;
  }
}

uint64_t CLMicroLocationSensorsLogic::MotionSM::transitionLogicStopDetection(uint64_t a1, int a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  switch(a2)
  {
    case 0:
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
      }
      int v3 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
      {
        int v8 = 68289026;
        int v9 = 0;
        __int16 v10 = 2082;
        __int16 v11 = "";
        _os_log_impl(&dword_25631F000, v3, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"MotionSM::transitionLogicStopDetection, shouldn't receive SetFence at StopDetection state\"}", (uint8_t *)&v8, 0x12u);
      }
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
      }
      int v4 = logObject_MicroLocation_Default;
      uint64_t result = os_signpost_enabled((os_log_t)logObject_MicroLocation_Default);
      if (result)
      {
        int v8 = 68289026;
        int v9 = 0;
        __int16 v10 = 2082;
        __int16 v11 = "";
        _os_signpost_emit_with_name_impl(&dword_25631F000, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "MotionSM::transitionLogicStopDetection, shouldn't receive SetFence at StopDetection state", "{\"msg%{public}.0s\":\"MotionSM::transitionLogicStopDetection, shouldn't receive SetFence at StopDetection state\"}", (uint8_t *)&v8, 0x12u);
        goto LABEL_10;
      }
      break;
    case 1:
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
      }
      uint64_t v6 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
      {
        int v8 = 68289026;
        int v9 = 0;
        __int16 v10 = 2082;
        __int16 v11 = "";
        _os_log_impl(&dword_25631F000, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"MotionSM::transitionLogicStopDetection, shouldn't receive ScreenOn at StopDetection state\"}", (uint8_t *)&v8, 0x12u);
      }
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
      }
      uint64_t v7 = logObject_MicroLocation_Default;
      if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
      {
        int v8 = 68289026;
        int v9 = 0;
        __int16 v10 = 2082;
        __int16 v11 = "";
        _os_signpost_emit_with_name_impl(&dword_25631F000, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "MotionSM::transitionLogicStopDetection, shouldn't receive ScreenOn at StopDetection state", "{\"msg%{public}.0s\":\"MotionSM::transitionLogicStopDetection, shouldn't receive ScreenOn at StopDetection state\"}", (uint8_t *)&v8, 0x12u);
      }
      uint64_t result = 0;
      *(unsigned char *)(a1 + 4) = 1;
      break;
    case 2:
      *(unsigned char *)(a1 + 4) = 0;
      CLMicroLocationSensorsDriver::clearStopDetection((CLMicroLocationSensorsDriver *)(*(void *)(a1 + 8) + 240));
      *(_DWORD *)a1 = 3;
      goto LABEL_23;
    case 3:
      uint64_t result = 256;
      break;
    case 4:
      CLMicroLocationSensorsDriver::clearStopDetection((CLMicroLocationSensorsDriver *)(*(void *)(a1 + 8) + 240));
      *(_DWORD *)a1 = 0;
LABEL_23:
      uint64_t result = 0x10000;
      break;
    case 5:
      CLMicroLocationSensorsDriver::clearStopDetection((CLMicroLocationSensorsDriver *)(*(void *)(a1 + 8) + 240));
      uint64_t result = 0;
      *(_DWORD *)a1 = 0;
      break;
    default:
LABEL_10:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t CLMicroLocationSensorsLogic::MotionSM::transitionLogicPendingResumeStopDetection(uint64_t a1, int a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  switch(a2)
  {
    case 0:
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
      }
      int v3 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
      {
        int v11 = 68289026;
        int v12 = 0;
        __int16 v13 = 2082;
        int v14 = "";
        _os_log_impl(&dword_25631F000, v3, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"MotionSM::transitionPendingResumeLogicStopDetection, shouldn't receive SetFence at PendingResumeStopDetection state\"}", (uint8_t *)&v11, 0x12u);
      }
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
      }
      int v4 = logObject_MicroLocation_Default;
      uint64_t result = os_signpost_enabled((os_log_t)logObject_MicroLocation_Default);
      if (result)
      {
        int v11 = 68289026;
        int v12 = 0;
        __int16 v13 = 2082;
        int v14 = "";
        uint64_t v6 = "MotionSM::transitionPendingResumeLogicStopDetection, shouldn't receive SetFence at PendingResumeStopDetection state";
        uint64_t v7 = "{\"msg%{public}.0s\":\"MotionSM::transitionPendingResumeLogicStopDetection, shouldn't receive SetFence at P"
             "endingResumeStopDetection state\"}";
        goto LABEL_35;
      }
      break;
    case 1:
      *(unsigned char *)(a1 + 4) = 1;
      CLMicroLocationSensorsDriver::setStopDetection((CLMicroLocationSensorsDriver *)(*(void *)(a1 + 8) + 240));
      *(_DWORD *)a1 = 2;
      uint64_t result = 0x1000000;
      break;
    case 2:
      *(unsigned char *)(a1 + 4) = 0;
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
      }
      int v8 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
      {
        int v11 = 68289026;
        int v12 = 0;
        __int16 v13 = 2082;
        int v14 = "";
        _os_log_impl(&dword_25631F000, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"MotionSM::transitionPendingResumeLogicStopDetection, shouldn't receive ScreenOff at PendingResumeStopDetection state\"}", (uint8_t *)&v11, 0x12u);
      }
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
      }
      int v4 = logObject_MicroLocation_Default;
      uint64_t result = os_signpost_enabled((os_log_t)logObject_MicroLocation_Default);
      if (result)
      {
        int v11 = 68289026;
        int v12 = 0;
        __int16 v13 = 2082;
        int v14 = "";
        uint64_t v6 = "MotionSM::transitionPendingResumeLogicStopDetection, shouldn't receive ScreenOff at PendingResumeStopDetection state";
        uint64_t v7 = "{\"msg%{public}.0s\":\"MotionSM::transitionPendingResumeLogicStopDetection, shouldn't receive ScreenOff at "
             "PendingResumeStopDetection state\"}";
        goto LABEL_35;
      }
      break;
    case 3:
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
      }
      int v9 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
      {
        int v11 = 68289026;
        int v12 = 0;
        __int16 v13 = 2082;
        int v14 = "";
        _os_log_impl(&dword_25631F000, v9, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"MotionSM::transitionPendingResumeLogicStopDetection, shouldn't receive FenceCross at PendingResumeStopDetection state\"}", (uint8_t *)&v11, 0x12u);
      }
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
      }
      int v4 = logObject_MicroLocation_Default;
      uint64_t result = os_signpost_enabled((os_log_t)logObject_MicroLocation_Default);
      if (result)
      {
        int v11 = 68289026;
        int v12 = 0;
        __int16 v13 = 2082;
        int v14 = "";
        uint64_t v6 = "MotionSM::transitionPendingResumeLogicStopDetection, shouldn't receive FenceCross at PendingResumeStopDetection state";
        uint64_t v7 = "{\"msg%{public}.0s\":\"MotionSM::transitionPendingResumeLogicStopDetection, shouldn't receive FenceCross at"
             " PendingResumeStopDetection state\"}";
        goto LABEL_35;
      }
      break;
    case 4:
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
      }
      __int16 v10 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
      {
        int v11 = 68289026;
        int v12 = 0;
        __int16 v13 = 2082;
        int v14 = "";
        _os_log_impl(&dword_25631F000, v10, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"MotionSM::transitionPendingResumeLogicStopDetection, shouldn't receive StopMotion at PendingResumeStopDetection state\"}", (uint8_t *)&v11, 0x12u);
      }
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
      }
      int v4 = logObject_MicroLocation_Default;
      uint64_t result = os_signpost_enabled((os_log_t)logObject_MicroLocation_Default);
      if (result)
      {
        int v11 = 68289026;
        int v12 = 0;
        __int16 v13 = 2082;
        int v14 = "";
        uint64_t v6 = "MotionSM::transitionPendingResumeLogicStopDetection, shouldn't receive StopMotion at PendingResumeStopDetection state";
        uint64_t v7 = "{\"msg%{public}.0s\":\"MotionSM::transitionPendingResumeLogicStopDetection, shouldn't receive StopMotion at"
             " PendingResumeStopDetection state\"}";
LABEL_35:
        _os_signpost_emit_with_name_impl(&dword_25631F000, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v6, v7, (uint8_t *)&v11, 0x12u);
        goto LABEL_36;
      }
      break;
    case 5:
      uint64_t result = 0;
      *(_DWORD *)a1 = 0;
      break;
    default:
LABEL_36:
      uint64_t result = 0;
      break;
  }
  return result;
}

char *CLMicroLocationSensorsLogic::MotionSM::stateToStr@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  switch((int)result)
  {
    case 1:
      *(unsigned char *)(a2 + 23) = 8;
      strcpy((char *)a2, "Geofence");
      break;
    case 2:
      *(unsigned char *)(a2 + 23) = 13;
      strcpy((char *)a2, "StopDetection");
      break;
    case 3:
      uint64_t result = (char *)operator new(0x20uLL);
      *(void *)a2 = result;
      *(_OWORD *)(a2 + 8) = xmmword_256519FA0;
      strcpy(result, "PendingResumeStopDetection");
      break;
    default:
      *(unsigned char *)(a2 + 23) = 4;
      strcpy((char *)a2, "Idle");
      break;
  }
  return result;
}

uint64_t CLMicroLocationSensorsLogic::MotionSM::changeState(uint64_t result, int a2, int a3)
{
  uint64_t v4 = result;
  if (a2 == 2)
  {
    uint64_t result = CLMicroLocationSensorsDriver::clearStopDetection((CLMicroLocationSensorsDriver *)(*(void *)(result + 8)
                                                                                             + 240));
  }
  else if (a2 == 1)
  {
    uint64_t result = CLMicroLocationSensorsDriver::clearMotionFence((CLMicroLocationSensorsDriver *)(*(void *)(result + 8)
                                                                                           + 240));
  }
  if (a3 == 2)
  {
    uint64_t result = CLMicroLocationSensorsDriver::setStopDetection((CLMicroLocationSensorsDriver *)(*(void *)(v4 + 8) + 240));
  }
  else if (a3 == 1)
  {
    uint64_t result = CLMicroLocationSensorsDriver::setMotionFence((CLMicroLocationSensorsDriver *)(*(void *)(v4 + 8) + 240));
  }
  *(_DWORD *)uint64_t v4 = a3;
  return result;
}

uint64_t ULSettings::get<ULSettings::MotionStopDetectionModuleEnable>()
{
  v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  BOOL v2 = [NSString stringWithUTF8String:"ULMotionStopDetectionModuleEnable"];
  int v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 BOOLValue];
  }
  else {
    uint64_t v4 = [MEMORY[0x263EFFA88] BOOLValue];
  }
  uint64_t v5 = v4;

  return v5;
}

void sub_256448F28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_59()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

void std::__tree<CLMicroLocationProto::Measurement,CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::EventsComparator,std::allocator<CLMicroLocationProto::Measurement>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<CLMicroLocationProto::Measurement,CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::EventsComparator,std::allocator<CLMicroLocationProto::Measurement>>::destroy(a1, *a2);
    std::__tree<CLMicroLocationProto::Measurement,CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::EventsComparator,std::allocator<CLMicroLocationProto::Measurement>>::destroy(a1, a2[1]);
    (*(void (**)(void))a2[4])();
    operator delete(a2);
  }
}

void ___ZL47_CLLogObjectForCategory_MicroLocationQE_Defaultv_block_invoke_1()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocationQE");
  uint64_t v1 = (void *)logObject_MicroLocationQE_Default;
  logObject_MicroLocationQE_Default = (uint64_t)v0;
}

uint64_t std::vector<CLMicroLocationProto::Measurement>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x333333333333334) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRapportMonitor::Item>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 80 * v6;
    std::vector<CLMicroLocationProto::Measurement>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<CLMicroLocationProto::Measurement>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_25644911C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMicroLocationProto::Measurement>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::measurementFromSourceData<CLMicroLocationProto::UwbRange const&,true>(uint64_t a1@<X0>, CLMicroLocationProto::Measurement *a2@<X8>)
{
  CLMicroLocationProto::Measurement::Measurement((CLMicroLocationProto::Measurement *)v7);
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  if (!CLMicroLocationProto::DataType_IsValid((CLMicroLocationProto *)v4)) {
    __assert_rtn("set_datatype", "microlocation.pb.h", 10718, "::CLMicroLocationProto::DataType_IsValid(value)");
  }
  uint64_t v6 = *(void *)(a1 + 8);
  unsigned int v8 = v4;
  v9 |= 3u;
  v7[1] = v6;
  CLMicroLocationProtobufHelper::measurementFromSourceImpl((CLMicroLocationProtobufHelper *)v7, (CLMicroLocationProto::Measurement *)a1, v5);
  CLMicroLocationProto::Measurement::Measurement(a2, (const CLMicroLocationProto::Measurement *)v7);
  *((unsigned char *)a2 + 80) = 1;
  CLMicroLocationProto::Measurement::~Measurement((CLMicroLocationProto::Measurement *)v7);
}

void sub_2564491E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::vector<CLMicroLocationProto::Measurement>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationProto::Measurement>,std::reverse_iterator<CLMicroLocationProto::Measurement*>,std::reverse_iterator<CLMicroLocationProto::Measurement*>,std::reverse_iterator<CLMicroLocationProto::Measurement*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationProto::Measurement>,std::reverse_iterator<CLMicroLocationProto::Measurement*>,std::reverse_iterator<CLMicroLocationProto::Measurement*>,std::reverse_iterator<CLMicroLocationProto::Measurement*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t i = 0;
        a3 + i != a5;
        CLMicroLocationProto::Measurement::Measurement((CLMicroLocationProto::Measurement *)(i + a7), (const CLMicroLocationProto::Measurement *)(i + a3)))
  {
    i -= 80;
  }
  return a6;
}

uint64_t std::__split_buffer<CLMicroLocationProto::Measurement>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    unsigned int v4 = *(void (***)(void))(i - 80);
    *(void *)(a1 + 16) = i - 80;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<CLMicroLocationProto::Measurement>::__push_back_slow_path<CLMicroLocationProto::Measurement const&>(uint64_t *a1, const CLMicroLocationProto::Measurement *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x333333333333333) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x199999999999999) {
    unint64_t v9 = 0x333333333333333;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v17 = a1 + 2;
  if (v9) {
    __int16 v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRapportMonitor::Item>>(v7, v9);
  }
  else {
    __int16 v10 = 0;
  }
  __int16 v13 = v10;
  int v14 = (CLMicroLocationProto::Measurement *)&v10[80 * v4];
  uint64_t v16 = &v10[80 * v9];
  CLMicroLocationProto::Measurement::Measurement(v14, a2);
  uint64_t v15 = (char *)v14 + 80;
  std::vector<CLMicroLocationProto::Measurement>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<CLMicroLocationProto::Measurement>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_256449458(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMicroLocationProto::Measurement>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::CLEventsBuffer(uint64_t a1, uint64_t a2, std::string *__str)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = a1 + 16;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  unint64_t v4 = (void *)(a1 + 32);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  std::string::operator=((std::string *)(a1 + 32), __str);
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
  }
  unint64_t v5 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a1 + 55) < 0) {
      unint64_t v4 = (void *)*v4;
    }
    int v7 = 136315138;
    unint64_t v8 = v4;
    _os_log_impl(&dword_25631F000, v5, OS_LOG_TYPE_DEFAULT, "Initialize EventsBuffer %s", (uint8_t *)&v7, 0xCu);
  }
  return a1;
}

void sub_256449588(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  std::__tree<CLMicroLocationProto::Measurement,CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::EventsComparator,std::allocator<CLMicroLocationProto::Measurement>>::destroy(v3, *v4);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem::HashItem,CLMicroLocationUtils::BleIdentityItem::PredicateItem,std::allocator<CLMicroLocationUtils::BleIdentityItem>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem::HashItem,CLMicroLocationUtils::BleIdentityItem::PredicateItem,std::allocator<CLMicroLocationUtils::BleIdentityItem>>::__deallocate_node(a1, *(void **)(a1 + 16));
  BOOL v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem::HashItem,CLMicroLocationUtils::BleIdentityItem::PredicateItem,std::allocator<CLMicroLocationUtils::BleIdentityItem>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    BOOL v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<CLMicroLocationUtils::BleIdentityItem,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      BOOL v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<CLMicroLocationUtils::BleIdentityItem,0>(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 104) && *(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(unsigned char *)(a1 + 72) && *(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(unsigned char *)(a1 + 40) && *(char *)(a1 + 39) < 0)
  {
    BOOL v2 = *(void **)(a1 + 16);
    operator delete(v2);
  }
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_256449718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::string>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  uint64_t v11 = this;
  int v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
      int v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_256449838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0) {
      operator delete(*(void **)(v1 - 24));
    }
    v1 -= 24;
  }
}

double *std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__tree_const_iterator<CLMicroLocationProto::Measurement,std::__tree_node<CLMicroLocationProto::Measurement,void *> *,long>,std::__tree_const_iterator<CLMicroLocationProto::Measurement,std::__tree_node<CLMicroLocationProto::Measurement,void *> *,long>,double,std::__identity,CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::getLatestEvents(double const&,BOOL &)::{lambda(std::_ClassicAlgPolicy const&,double const&)#1}>(double *a1, double *a2, double *a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    unint64_t v5 = 0;
    uint64_t v6 = a1;
    do
    {
      long long v7 = (double *)*((void *)v6 + 1);
      if (v7)
      {
        do
        {
          unint64_t v8 = v7;
          long long v7 = *(double **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v8 = (double *)*((void *)v6 + 2);
          BOOL v9 = *(void *)v8 == (void)v6;
          uint64_t v6 = v8;
        }
        while (!v9);
      }
      ++v5;
      uint64_t v6 = v8;
    }
    while (v8 != a2);
    do
    {
      unint64_t v10 = v5 >> 1;
      int v14 = v3;
      std::__advance[abi:ne180100]<std::__tree_const_iterator<double,std::__tree_node<double,void *> *,long>>((void **)&v14, v5 >> 1);
      uint64_t v11 = v14;
      if (v14[5] < *a3)
      {
        int v12 = (double *)*((void *)v14 + 1);
        if (v12)
        {
          do
          {
            uint64_t v3 = v12;
            int v12 = *(double **)v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            uint64_t v3 = (double *)*((void *)v11 + 2);
            BOOL v9 = *(void *)v3 == (void)v11;
            uint64_t v11 = v3;
          }
          while (!v9);
        }
        unint64_t v10 = v5 + ~v10;
      }
      unint64_t v5 = v10;
    }
    while (v10);
  }
  return v3;
}

CLMicroLocationProto::Measurement *std::vector<CLMicroLocationProto::Measurement>::vector<std::__tree_const_iterator<CLMicroLocationProto::Measurement,std::__tree_node<CLMicroLocationProto::Measurement,void *> *,long>,0>(CLMicroLocationProto::Measurement *a1, void *a2, void *a3)
{
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  if (a2 == a3)
  {
    unint64_t v4 = 0;
  }
  else
  {
    unint64_t v4 = 0;
    unint64_t v5 = a2;
    do
    {
      uint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          long long v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          long long v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          unint64_t v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      unint64_t v5 = v7;
    }
    while (v7 != a3);
  }
  std::vector<CLMicroLocationProto::Measurement>::__init_with_size[abi:ne180100]<std::__tree_const_iterator<CLMicroLocationProto::Measurement,std::__tree_node<CLMicroLocationProto::Measurement,void *> *,long>,std::__tree_const_iterator<CLMicroLocationProto::Measurement,std::__tree_node<CLMicroLocationProto::Measurement,void *> *,long>>(a1, a2, a3, v4);
  return a1;
}

CLMicroLocationProto::Measurement *std::vector<CLMicroLocationProto::Measurement>::__init_with_size[abi:ne180100]<std::__tree_const_iterator<CLMicroLocationProto::Measurement,std::__tree_node<CLMicroLocationProto::Measurement,void *> *,long>,std::__tree_const_iterator<CLMicroLocationProto::Measurement,std::__tree_node<CLMicroLocationProto::Measurement,void *> *,long>>(CLMicroLocationProto::Measurement *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<CLMicroLocationRapportMonitor::Item>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationProto::Measurement>,std::__tree_const_iterator<CLMicroLocationProto::Measurement,std::__tree_node<CLMicroLocationProto::Measurement,void *> *,long>,std::__tree_const_iterator<CLMicroLocationProto::Measurement,std::__tree_node<CLMicroLocationProto::Measurement,void *> *,long>,CLMicroLocationProto::Measurement*>((int)v6 + 16, a2, a3, *((CLMicroLocationProto::Measurement **)v6 + 1));
    *((void *)v6 + 1) = result;
  }
  return result;
}

void sub_256449AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<CLMicroLocationProto::Measurement>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

CLMicroLocationProto::Measurement *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationProto::Measurement>,std::__tree_const_iterator<CLMicroLocationProto::Measurement,std::__tree_node<CLMicroLocationProto::Measurement,void *> *,long>,std::__tree_const_iterator<CLMicroLocationProto::Measurement,std::__tree_node<CLMicroLocationProto::Measurement,void *> *,long>,CLMicroLocationProto::Measurement*>(int a1, void *a2, void *a3, CLMicroLocationProto::Measurement *this)
{
  if (a2 == a3) {
    return this;
  }
  unint64_t v5 = a2;
  uint64_t v6 = this;
  do
  {
    CLMicroLocationProto::Measurement::Measurement(v6, (const CLMicroLocationProto::Measurement *)(v5 + 4));
    long long v7 = (void *)v5[1];
    if (v7)
    {
      do
      {
        BOOL v8 = v7;
        long long v7 = (void *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        BOOL v8 = (void *)v5[2];
        BOOL v9 = *v8 == (void)v5;
        unint64_t v5 = v8;
      }
      while (!v9);
    }
    uint64_t v6 = (CLMicroLocationProto::Measurement *)((char *)v6 + 80);
    unint64_t v5 = v8;
  }
  while (v8 != a3);
  return v6;
}

void std::vector<CLMicroLocationProto::Measurement>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 80;
      long long v7 = v4 - 80;
      BOOL v8 = v4 - 80;
      do
      {
        BOOL v9 = *(void (***)(char *))v8;
        v8 -= 80;
        (*v9)(v7);
        v6 -= 80;
        BOOL v10 = v7 == v2;
        long long v7 = v8;
      }
      while (!v10);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unint64_t boost::hash<std::string>::operator()(uint64_t a1, char *a2)
{
  uint64_t v2 = a2[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = *(char **)a2;
  }
  unint64_t result = 0;
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *((void *)a2 + 1);
  }
  for (; v2; --v2)
  {
    uint64_t v5 = *v3++;
    unint64_t result = 3864292196u
           - 0x395B586CA42E166BLL
           * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v5) ^ ((0xC6A4A7935BD1E995 * v5) >> 47))) ^ result);
  }
  return result;
}

uint64_t std::vector<CLMiLoProtobufWrapper::Measurement>::__emplace_back_slow_path<CLMicroLocationProto::Measurement const>(uint64_t *a1, const CLMicroLocationProto::Measurement *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2E8BA2E8BA2E8BALL) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x1745D1745D1745DLL) {
    unint64_t v9 = 0x2E8BA2E8BA2E8BALL;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v17 = a1 + 2;
  if (v9) {
    BOOL v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMiLoServiceTable::Entry>>(v7, v9);
  }
  else {
    BOOL v10 = 0;
  }
  __int16 v13 = v10;
  int v14 = (CLMicroLocationProto::Measurement *)&v10[88 * v4];
  uint64_t v15 = v14;
  uint64_t v16 = &v10[88 * v9];
  CLMicroLocationProto::Measurement::Measurement(v14, a2);
  *((_DWORD *)v14 + 20) = 0;
  uint64_t v15 = (CLMicroLocationProto::Measurement *)((char *)v15 + 88);
  std::vector<CLMiLoProtobufWrapper::Measurement>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<CLMiLoProtobufWrapper::Measurement>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_256449DA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMiLoProtobufWrapper::Measurement>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMiLoProtobufWrapper::Measurement>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMiLoProtobufWrapper::Measurement>,std::reverse_iterator<CLMiLoProtobufWrapper::Measurement*>,std::reverse_iterator<CLMiLoProtobufWrapper::Measurement*>,std::reverse_iterator<CLMiLoProtobufWrapper::Measurement*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t **std::back_insert_iterator<std::vector<CLMiLoProtobufWrapper::Measurement>>::operator=[abi:ne180100](uint64_t **a1, CLMicroLocationProto::Measurement *a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = (*a1)[1];
  if (v5 >= (*a1)[2])
  {
    uint64_t v6 = std::vector<CLMiLoProtobufWrapper::Measurement>::__push_back_slow_path<CLMiLoProtobufWrapper::Measurement>(*a1, a2);
  }
  else
  {
    CLMicroLocationProto::Measurement::Measurement((CLMicroLocationProto::Measurement *)(*a1)[1], a2);
    *(_DWORD *)(v5 + 80) = *((_DWORD *)a2 + 20);
    uint64_t v6 = v5 + 88;
    v4[1] = v5 + 88;
  }
  v4[1] = v6;
  return a1;
}

void sub_256449EA4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMiLoProtobufWrapper::Measurement>::__push_back_slow_path<CLMiLoProtobufWrapper::Measurement>(uint64_t *a1, const CLMicroLocationProto::Measurement *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2E8BA2E8BA2E8BALL) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x1745D1745D1745DLL) {
    unint64_t v9 = 0x2E8BA2E8BA2E8BALL;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v17 = a1 + 2;
  if (v9) {
    BOOL v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMiLoServiceTable::Entry>>(v7, v9);
  }
  else {
    BOOL v10 = 0;
  }
  __int16 v13 = v10;
  int v14 = (CLMicroLocationProto::Measurement *)&v10[88 * v4];
  uint64_t v15 = v14;
  uint64_t v16 = &v10[88 * v9];
  CLMicroLocationProto::Measurement::Measurement(v14, a2);
  *((_DWORD *)v14 + 20) = *((_DWORD *)a2 + 20);
  uint64_t v15 = (CLMicroLocationProto::Measurement *)((char *)v15 + 88);
  std::vector<CLMiLoProtobufWrapper::Measurement>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<CLMiLoProtobufWrapper::Measurement>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_256449FC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMiLoProtobufWrapper::Measurement>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::truncateBuffer(uint64_t *result)
{
  unint64_t v1 = result[3];
  uint64_t v2 = v1 - *result;
  if (v1 > *result)
  {
    *((unsigned char *)result + 56) = 1;
    uint64_t v3 = (uint64_t **)(result + 1);
    uint64_t v4 = (uint64_t *)result[1];
    std::__advance[abi:ne180100]<std::__tree_const_iterator<double,std::__tree_node<double,void *> *,long>>(&v4, v2);
    return std::__tree<CLMicroLocationProto::Measurement,CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::EventsComparator,std::allocator<CLMicroLocationProto::Measurement>>::erase(v3, *v3, v4);
  }
  return result;
}

uint64_t *std::__tree<CLMicroLocationProto::Measurement,CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::EventsComparator,std::allocator<CLMicroLocationProto::Measurement>>::__emplace_multi<CLMicroLocationProto::Measurement const&>(uint64_t a1, const CLMicroLocationProto::Measurement *a2)
{
  std::__tree<CLMicroLocationProto::Measurement,CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::EventsComparator,std::allocator<CLMicroLocationProto::Measurement>>::__construct_node<CLMicroLocationProto::Measurement const&>(a1, a2, (uint64_t)v8);
  uint64_t v3 = (uint64_t **)(a1 + 8);
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v3 = (uint64_t **)v4;
        if (*((double *)v8[0] + 5) >= *((double *)v4 + 5)) {
          break;
        }
        uint64_t v4 = (uint64_t *)*v4;
        unint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      uint64_t v4 = (uint64_t *)v4[1];
    }
    while (v4);
    unint64_t v5 = v3 + 1;
  }
  else
  {
    unint64_t v5 = (uint64_t **)(a1 + 8);
  }
LABEL_8:
  std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__insert_node_at((uint64_t **)a1, (uint64_t)v3, v5, v8[0]);
  uint64_t v6 = v8[0];
  v8[0] = 0;
  std::unique_ptr<std::__tree_node<CLMicroLocationProto::Measurement,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<CLMicroLocationProto::Measurement,void *>>>>::reset[abi:ne180100]((uint64_t)v8, 0);
  return v6;
}

uint64_t std::__tree<CLMicroLocationProto::Measurement,CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::EventsComparator,std::allocator<CLMicroLocationProto::Measurement>>::__construct_node<CLMicroLocationProto::Measurement const&>@<X0>(uint64_t a1@<X0>, const CLMicroLocationProto::Measurement *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x70uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = CLMicroLocationProto::Measurement::Measurement((CLMicroLocationProto::Measurement *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_25644A128(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<CLMicroLocationProto::Measurement,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<CLMicroLocationProto::Measurement,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<CLMicroLocationProto::Measurement,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<CLMicroLocationProto::Measurement,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void (****)(void))a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      (*v2[4])();
    }
    operator delete(v2);
  }
}

uint64_t *std::__tree<CLMicroLocationProto::Measurement,CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::EventsComparator,std::allocator<CLMicroLocationProto::Measurement>>::erase(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    do
    {
      uint64_t v6 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__remove_node_pointer(a1, v4);
      (*(void (**)(void))v4[4])();
      operator delete(v4);
      uint64_t v4 = v6;
    }
    while (v6 != a3);
  }
  return a3;
}

void *std::__hash_table<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem::HashItem,CLMicroLocationUtils::BleIdentityItem::PredicateItem,std::allocator<CLMicroLocationUtils::BleIdentityItem>>::__emplace_unique_key_args<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = CLMicroLocationUtils::BleIdentityItem::HashItem::operator()(a1 + 24, a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    __int16 v13 = *(void **)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      int v14 = (void *)*v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v9)
          {
            if (CLMicroLocationUtils::BleIdentityItem::PredicateItem::operator()(a1 + 32, (uint64_t)(v14 + 2), a2)) {
              return v14;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10) {
                v15 %= v10;
              }
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3) {
              break;
            }
          }
          int v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
  std::__hash_table<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem::HashItem,CLMicroLocationUtils::BleIdentityItem::PredicateItem,std::allocator<CLMicroLocationUtils::BleIdentityItem>>::__construct_node_hash<CLMicroLocationUtils::BleIdentityItem const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  __int16 v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  int v14 = (void *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<CLMicroLocationUtils::BleIdentityItem,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationUtils::BleIdentityItem,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return v14;
}

void sub_25644A4AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<CLMicroLocationUtils::BleIdentityItem,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationUtils::BleIdentityItem,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem::HashItem,CLMicroLocationUtils::BleIdentityItem::PredicateItem,std::allocator<CLMicroLocationUtils::BleIdentityItem>>::__construct_node_hash<CLMicroLocationUtils::BleIdentityItem const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x88uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  uint64_t result = std::allocator<std::__hash_node<CLMicroLocationUtils::BleIdentityItem,void *>>::construct[abi:ne180100]<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem const&>(v7, (uint64_t)(v8 + 2), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_25644A524(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<CLMicroLocationUtils::BleIdentityItem,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationUtils::BleIdentityItem,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::allocator<std::__hash_node<CLMicroLocationUtils::BleIdentityItem,void *>>::construct[abi:ne180100]<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a2 = *(_OWORD *)a3;
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)(a2 + 16), (long long *)(a3 + 16));
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)(a2 + 48), (long long *)(a3 + 48));
  uint64_t result = std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)(a2 + 80), (long long *)(a3 + 80));
  *(void *)(a2 + 112) = *(void *)(a3 + 112);
  return result;
}

void sub_25644A5A4(_Unwind_Exception *exception_object)
{
  if (v1[72] && v1[71] < 0) {
    operator delete(*v3);
  }
  if (v1[40])
  {
    if (v1[39] < 0) {
      operator delete(*v2);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__hash_node<CLMicroLocationUtils::BleIdentityItem,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationUtils::BleIdentityItem,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<CLMicroLocationUtils::BleIdentityItem,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<CLMicroLocationProto::Measurement const*>,std::__wrap_iter<CLMicroLocationProto::Measurement const*>,std::insert_iterator<std::multiset<CLMicroLocationProto::Measurement,CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::EventsComparator,std::allocator<CLMicroLocationProto::Measurement>>>,0>@<X0>(uint64_t result@<X0>, const CLMicroLocationProto::Measurement *a2@<X1>, const CLMicroLocationProto::Measurement *a3@<X2>, const CLMicroLocationProto::Measurement *a4@<X3>, const CLMicroLocationProto::Measurement **a5@<X8>)
{
  uint64_t v5 = (const CLMicroLocationProto::Measurement *)result;
  unint64_t v8 = a3;
  unint64_t v9 = a4;
  if ((const CLMicroLocationProto::Measurement *)result != a2)
  {
    do
    {
      uint64_t result = std::insert_iterator<std::multiset<CLMicroLocationProto::Measurement,CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::EventsComparator,std::allocator<CLMicroLocationProto::Measurement>>>::operator=[abi:ne180100]((uint64_t)&v8, v5);
      uint64_t v5 = (const CLMicroLocationProto::Measurement *)((char *)v5 + 80);
    }
    while (v5 != a2);
    a3 = v8;
    a4 = v9;
    uint64_t v5 = a2;
  }
  *a5 = v5;
  a5[1] = a3;
  a5[2] = a4;
  return result;
}

uint64_t std::insert_iterator<std::multiset<CLMicroLocationProto::Measurement,CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::EventsComparator,std::allocator<CLMicroLocationProto::Measurement>>>::operator=[abi:ne180100](uint64_t a1, const CLMicroLocationProto::Measurement *a2)
{
  unint64_t v3 = std::__tree<CLMicroLocationProto::Measurement,CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::EventsComparator,std::allocator<CLMicroLocationProto::Measurement>>::__emplace_hint_multi<CLMicroLocationProto::Measurement const&>(*(uint64_t ***)a1, *(double **)(a1 + 8), a2);
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      uint64_t v5 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      uint64_t v5 = (uint64_t *)v3[2];
      BOOL v6 = *v5 == (void)v3;
      unint64_t v3 = v5;
    }
    while (!v6);
  }
  *(void *)(a1 + 8) = v5;
  return a1;
}

uint64_t *std::__tree<CLMicroLocationProto::Measurement,CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::EventsComparator,std::allocator<CLMicroLocationProto::Measurement>>::__emplace_hint_multi<CLMicroLocationProto::Measurement const&>(uint64_t **a1, double *a2, const CLMicroLocationProto::Measurement *a3)
{
  std::__tree<CLMicroLocationProto::Measurement,CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::EventsComparator,std::allocator<CLMicroLocationProto::Measurement>>::__construct_node<CLMicroLocationProto::Measurement const&>((uint64_t)a1, a3, (uint64_t)v9);
  leaf = std::__tree<CLMicroLocationProto::Measurement,CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::EventsComparator,std::allocator<CLMicroLocationProto::Measurement>>::__find_leaf(a1, a2, &v8, (uint64_t)(v9[0] + 4));
  std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__insert_node_at(a1, (uint64_t)v8, (uint64_t **)leaf, v9[0]);
  BOOL v6 = v9[0];
  v9[0] = 0;
  std::unique_ptr<std::__tree_node<CLMicroLocationProto::Measurement,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<CLMicroLocationProto::Measurement,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  return v6;
}

void sub_25644A78C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<CLMicroLocationProto::Measurement,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<CLMicroLocationProto::Measurement,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

double *std::__tree<CLMicroLocationProto::Measurement,CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::EventsComparator,std::allocator<CLMicroLocationProto::Measurement>>::__find_leaf(void *a1, double *a2, double **a3, uint64_t a4)
{
  uint64_t v4 = (double *)(a1 + 1);
  if (a1 + 1 != (void *)a2)
  {
    double v5 = *(double *)(a4 + 8);
    if (a2[5] < v5)
    {
      while (1)
      {
        uint64_t v6 = *(void *)v4;
        a2 = v4;
        if (!*(void *)v4) {
          break;
        }
        while (1)
        {
          uint64_t v4 = (double *)v6;
          if (*(double *)(v6 + 40) >= v5) {
            break;
          }
          uint64_t v6 = *(void *)(v6 + 8);
          if (!v6) {
            goto LABEL_19;
          }
        }
      }
LABEL_20:
      *a3 = v4;
      return a2;
    }
  }
  double v7 = *a2;
  if ((double *)*a1 == a2)
  {
    unint64_t v9 = a2;
  }
  else
  {
    if (v7 == 0.0)
    {
      unint64_t v10 = a2;
      do
      {
        unint64_t v9 = (double *)*((void *)v10 + 2);
        BOOL v11 = *(void *)v9 == (void)v10;
        unint64_t v10 = v9;
      }
      while (v11);
    }
    else
    {
      double v8 = *a2;
      do
      {
        unint64_t v9 = *(double **)&v8;
        double v8 = *(double *)(*(void *)&v8 + 8);
      }
      while (v8 != 0.0);
    }
    double v12 = *(double *)(a4 + 8);
    if (v12 < v9[5])
    {
      while (1)
      {
        uint64_t v13 = *(void *)v4;
        a2 = v4;
        if (!*(void *)v4) {
          goto LABEL_20;
        }
        while (1)
        {
          uint64_t v4 = (double *)v13;
          if (v12 < *(double *)(v13 + 40)) {
            break;
          }
          uint64_t v13 = *(void *)(v13 + 8);
          if (!v13)
          {
LABEL_19:
            a2 = v4 + 1;
            goto LABEL_20;
          }
        }
      }
    }
  }
  if (v7 == 0.0)
  {
    *a3 = a2;
  }
  else
  {
    *a3 = v9;
    return v9 + 1;
  }
  return a2;
}

void *std::vector<CLMiLoProtobufWrapper::WiFiRssi>::__init_with_size[abi:ne180100]<CLMiLoProtobufWrapper::WiFiRssi*,CLMiLoProtobufWrapper::WiFiRssi*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<CLMiLoProtobufWrapper::WiFiRssi>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMiLoProtobufWrapper::WiFiRssi>,CLMiLoProtobufWrapper::WiFiRssi*,CLMiLoProtobufWrapper::WiFiRssi*,CLMiLoProtobufWrapper::WiFiRssi*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_25644A8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<CLMiLoProtobufWrapper::WiFiRssi>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<CLMiLoProtobufWrapper::WiFiRssi>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMiLoProtobufWrapper::WiFiRssi>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[56 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMiLoProtobufWrapper::WiFiRssi>,CLMiLoProtobufWrapper::WiFiRssi*,CLMiLoProtobufWrapper::WiFiRssi*,CLMiLoProtobufWrapper::WiFiRssi*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      *(_DWORD *)(CLMicroLocationProto::WiFiRssi::WiFiRssi((CLMicroLocationProto::WiFiRssi *)(a4 + v7), (const CLMicroLocationProto::WiFiRssi *)(a2 + v7))+ 48) = *(_DWORD *)(a2 + v7 + 48);
      v7 += 56;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_25644A9E0(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 56;
    do
    {
      CLMicroLocationProto::WiFiRssi::~WiFiRssi((CLMicroLocationProto::WiFiRssi *)(v4 + v2));
      v2 -= 56;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::__emplace_back_slow_path<boost::uuids::uuid const&,std::string &,std::string &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> const&>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, double *a5)
{
  unint64_t v6 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x38E38E38E38E38ELL) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  if (0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3) > v7) {
    unint64_t v7 = 0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3);
  }
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 3) >= 0x1C71C71C71C71C7) {
    unint64_t v12 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v12 = v7;
  }
  unint64_t v20 = a1 + 2;
  if (v12) {
    uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationAssociatedStateTable::Entry>>((uint64_t)(a1 + 2), v12);
  }
  else {
    uint64_t v13 = 0;
  }
  float v16 = v13;
  float v17 = &v13[72 * v6];
  unint64_t v19 = &v13[72 * v12];
  std::allocator<CLMicroLocationBluetoothIdentityTable::Entry>::construct[abi:ne180100]<CLMicroLocationBluetoothIdentityTable::Entry,boost::uuids::uuid const&,std::string &,std::string &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> const&>((uint64_t)(a1 + 2), (uint64_t)v17, a2, a3, a4, a5);
  BOOL v18 = v17 + 72;
  std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::__swap_out_circular_buffer(a1, &v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<CLMicroLocationBluetoothIdentityTable::Entry>::~__split_buffer(&v16);
  return v14;
}

void sub_25644AB40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMicroLocationBluetoothIdentityTable::Entry>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<CLMicroLocationBluetoothIdentityTable::Entry>::construct[abi:ne180100]<CLMicroLocationBluetoothIdentityTable::Entry,boost::uuids::uuid const&,std::string &,std::string &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> const&>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, double *a6)
{
  uint64_t v9 = *a3;
  uint64_t v10 = a3[1];
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v12 = *(std::string *)a4;
  }
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string __p = *(std::string *)a5;
  }
  CLMicroLocationBluetoothIdentityTable::Entry::Entry(a2, v9, v10, &v12, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
}

void sub_25644AC24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem::HashItem,CLMicroLocationUtils::BleIdentityItem::PredicateItem,std::allocator<CLMicroLocationUtils::BleIdentityItem>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem::HashItem,CLMicroLocationUtils::BleIdentityItem::PredicateItem,std::allocator<CLMicroLocationUtils::BleIdentityItem>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void *std::__hash_table<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem::HashItem,CLMicroLocationUtils::BleIdentityItem::PredicateItem,std::allocator<CLMicroLocationUtils::BleIdentityItem>>::__emplace_unique_impl<boost::uuids::uuid const&,std::optional<std::string> &,std::optional<std::string> &,std::nullopt_t const&,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> const&>(void *a1, _OWORD *a2, long long *a3, long long *a4, uint64_t a5, void *a6)
{
  std::__hash_table<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem::HashItem,CLMicroLocationUtils::BleIdentityItem::PredicateItem,std::allocator<CLMicroLocationUtils::BleIdentityItem>>::__construct_node<boost::uuids::uuid const&,std::optional<std::string> &,std::optional<std::string> &,std::nullopt_t const&,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> const&>((uint64_t)a1, a2, a3, a4, a5, a6, (uint64_t)v10);
  inserted = std::__hash_table<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem::HashItem,CLMicroLocationUtils::BleIdentityItem::PredicateItem,std::allocator<CLMicroLocationUtils::BleIdentityItem>>::__node_insert_unique(a1, v10[0]);
  if (v8) {
    v10[0] = 0;
  }
  std::unique_ptr<std::__hash_node<CLMicroLocationUtils::BleIdentityItem,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationUtils::BleIdentityItem,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  return inserted;
}

void sub_25644AD10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<CLMicroLocationUtils::BleIdentityItem,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationUtils::BleIdentityItem,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem::HashItem,CLMicroLocationUtils::BleIdentityItem::PredicateItem,std::allocator<CLMicroLocationUtils::BleIdentityItem>>::__construct_node<boost::uuids::uuid const&,std::optional<std::string> &,std::optional<std::string> &,std::nullopt_t const&,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> const&>@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, long long *a3@<X2>, long long *a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14 = a1 + 16;
  unint64_t v15 = operator new(0x88uLL);
  *(void *)a7 = v15;
  *(void *)(a7 + 8) = v14;
  *(unsigned char *)(a7 + 16) = 0;
  void *v15 = 0;
  v15[1] = 0;
  std::allocator<std::__hash_node<CLMicroLocationUtils::BleIdentityItem,void *>>::construct[abi:ne180100]<CLMicroLocationUtils::BleIdentityItem,boost::uuids::uuid const&,std::optional<std::string> &,std::optional<std::string> &,std::nullopt_t const&,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> const&>(v14, (uint64_t)(v15 + 2), a2, a3, a4, a5, a6);
  *(unsigned char *)(a7 + 16) = 1;
  unint64_t result = CLMicroLocationUtils::BleIdentityItem::HashItem::operator()(a1 + 24, (uint64_t)(v15 + 2));
  v15[1] = result;
  return result;
}

void sub_25644ADD8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<CLMicroLocationUtils::BleIdentityItem,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationUtils::BleIdentityItem,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::__hash_table<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem::HashItem,CLMicroLocationUtils::BleIdentityItem::PredicateItem,std::allocator<CLMicroLocationUtils::BleIdentityItem>>::__node_insert_unique(void *a1, void *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = (uint64_t)(a2 + 2);
  unint64_t v5 = CLMicroLocationUtils::BleIdentityItem::HashItem::operator()((uint64_t)(a1 + 3), (uint64_t)(a2 + 2));
  v2[1] = v5;
  unint64_t v6 = std::__hash_table<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem::HashItem,CLMicroLocationUtils::BleIdentityItem::PredicateItem,std::allocator<CLMicroLocationUtils::BleIdentityItem>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)a1, v5, v4);
  if (v6) {
    return v6;
  }
  std::__hash_table<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem::HashItem,CLMicroLocationUtils::BleIdentityItem::PredicateItem,std::allocator<CLMicroLocationUtils::BleIdentityItem>>::__node_insert_unique_perform[abi:ne180100](a1, v2);
  return v2;
}

void std::allocator<std::__hash_node<CLMicroLocationUtils::BleIdentityItem,void *>>::construct[abi:ne180100]<CLMicroLocationUtils::BleIdentityItem,boost::uuids::uuid const&,std::optional<std::string> &,std::optional<std::string> &,std::nullopt_t const&,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> const&>(uint64_t a1, uint64_t a2, _OWORD *a3, long long *a4, long long *a5, uint64_t a6, void *a7)
{
  LOBYTE(__p) = 0;
  char v9 = 0;
  CLMicroLocationUtils::BleIdentityItem::BleIdentityItem(a2, a3, a4, a5, &__p, a7);
  if (v9)
  {
    if (v8 < 0) {
      operator delete((void *)__p);
    }
  }
}

void sub_25644AEC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationUtils::BleIdentityItem::BleIdentityItem(uint64_t a1, _OWORD *a2, long long *a3, long long *a4, long long *a5, void *a6)
{
  *(_OWORD *)a1 = *a2;
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 16), a3);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 48), a4);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 80), a5);
  *(void *)(a1 + 112) = *a6;
  return a1;
}

void sub_25644AF68(_Unwind_Exception *exception_object)
{
  if (v1[72] && v1[71] < 0) {
    operator delete(*v3);
  }
  if (v1[40])
  {
    if (v1[39] < 0) {
      operator delete(*v2);
    }
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem::HashItem,CLMicroLocationUtils::BleIdentityItem::PredicateItem,std::allocator<CLMicroLocationUtils::BleIdentityItem>>::__node_insert_unique_prepare[abi:ne180100](uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
    v7.i16[0] = vaddlv_u8(v7);
    unint64_t v8 = v7.u32[0];
    if (v7.u32[0] > 1uLL) {
      uint64_t v9 = v4 <= a2 ? a2 % v4 : a2;
    }
    else {
      uint64_t v9 = (v4 - 1) & a2;
    }
    uint64_t v10 = *(void **)(*(void *)a1 + 8 * v9);
    if (v10)
    {
      BOOL v11 = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == a2)
          {
            if (CLMicroLocationUtils::BleIdentityItem::PredicateItem::operator()(a1 + 32, (uint64_t)(v11 + 2), a3)) {
              return v11;
            }
          }
          else
          {
            if (v8 > 1)
            {
              if (v12 >= v4) {
                v12 %= v4;
              }
            }
            else
            {
              v12 &= v4 - 1;
            }
            if (v12 != v9) {
              break;
            }
          }
          BOOL v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v4 || (float)(v14 * (float)v4) < v13)
  {
    BOOL v15 = 1;
    if (v4 >= 3) {
      BOOL v15 = (v4 & (v4 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v4);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v18);
  }
  return 0;
}

void *std::__hash_table<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem::HashItem,CLMicroLocationUtils::BleIdentityItem::PredicateItem,std::allocator<CLMicroLocationUtils::BleIdentityItem>>::__node_insert_unique_perform[abi:ne180100](void *result, void *a2)
{
  int8x8_t v2 = (int8x8_t)result[1];
  unint64_t v3 = a2[1];
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    if (v3 >= *(void *)&v2) {
      v3 %= *(void *)&v2;
    }
  }
  else
  {
    v3 &= *(void *)&v2 - 1;
  }
  unint64_t v5 = *(void **)(*result + 8 * v3);
  if (v5)
  {
    *a2 = *v5;
LABEL_13:
    void *v5 = a2;
    goto LABEL_14;
  }
  *a2 = result[2];
  result[2] = a2;
  *(void *)(*result + 8 * v3) = result + 2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v2) {
        v6 %= *(void *)&v2;
      }
    }
    else
    {
      v6 &= *(void *)&v2 - 1;
    }
    unint64_t v5 = (void *)(*result + 8 * v6);
    goto LABEL_13;
  }
LABEL_14:
  ++result[3];
  return result;
}

double CLMicroLocationTriggerManager::CLMicroLocationTriggerManager(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2704E0578;
  *(_WORD *)(a1 + 8) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 1065353216;
  *(_WORD *)(a1 + 151) = 0;
  *(_WORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 102) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 185) = 0;
  *(void *)(a1 + 192) = a2;
  return result;
}

void *CLMicroLocationTriggerManager::setupCustomLoiRecordingManager(void *this, CLMiLoCustomLoiRecordingManager *a2)
{
  if (a2)
  {
    this[25] = a2;
  }
  else
  {
    CLMicroLocationTriggerManager::setupCustomLoiRecordingManager();
    return _CLLogObjectForCategory_MicroLocation_Default();
  }
  return this;
}

uint64_t CLMicroLocationTriggerManager::requestLocalization(uint64_t a1, const CLMicroLocationProto::RecordingEvent *a2, int a3, int a4, CLMicroLocationProto *a5)
{
  *(void *)((char *)&v69[39] + 2) = *MEMORY[0x263EF8340];
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_74);
  }
  uint64_t v10 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    buf = (void *)68289794;
    __int16 v65 = 2082;
    uint8x8_t v66 = "";
    __int16 v67 = 1026;
    *(_DWORD *)v68 = a3;
    *(_WORD *)&v68[4] = 1026;
    *(_DWORD *)&v68[6] = a4;
    LOWORD(v69[0]) = 2050;
    *(void *)((char *)v69 + 2) = a5;
    _os_log_impl(&dword_25631F000, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationTriggerManager: requestLocalization\", \"isForce\":%{public}hhd, \"isInMotionTrigger\":%{public}hhd, \"TriggerReason\":%{public}lu}", (uint8_t *)&buf, 0x28u);
  }
  if (*(unsigned char *)(a1 + 133))
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_74);
    }
    BOOL v11 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      buf = (void *)68289026;
      __int16 v65 = 2082;
      uint8x8_t v66 = "";
      _os_log_impl(&dword_25631F000, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationTriggerManager: requestLocalization -- denying localization  because we are running recording session\"}", (uint8_t *)&buf, 0x12u);
    }
    return 5;
  }
  int shouldReject = CLMicroLocationTriggerManager::shouldReject((CLMicroLocationTriggerManager *)a1, a2);
  char v15 = shouldReject;
  if (shouldReject) {
    unsigned int v16 = 5;
  }
  else {
    unsigned int v16 = 0;
  }
  unsigned int v61 = v16;
  double EventReceivedTS = CLMicroLocationProtobufHelper::getEventReceivedTS(a2, v14);
  BOOL isMotionRequest = CLMicroLocationTriggerManager::isMotionRequest(a2, v17);
  BOOL v19 = CLMicroLocationTriggerManager::isMotionRequest(a2, v18);
  int v20 = ULSettings::get<ULSettings::OffScreenScanEnabled>();
  uint64_t v21 = **(void **)(a1 + 192);
  if (v20) {
    char v55 = (*(uint64_t (**)(void))(v21 + 112))();
  }
  else {
    char v55 = (*(uint64_t (**)(void))(v21 + 104))();
  }
  float v56 = [MEMORY[0x263EFF9A0] dictionary];
  if (v15)
  {
    unsigned int v16 = 5;
    goto LABEL_32;
  }
  if (*(unsigned char *)(a1 + 132))
  {
    (*(void (**)(void, const CLMicroLocationProto::RecordingEvent *))(**(void **)(a1 + 192) + 32))(*(void *)(a1 + 192), a2);
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_74);
    }
    __int16 v22 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_25631F000, v22, OS_LOG_TYPE_DEFAULT, "CLMicroLocationTriggerManager: Got localization trigger while waiting for rescheduled localization timer", (uint8_t *)&buf, 2u);
    }
LABEL_30:
    unsigned int v16 = 1;
LABEL_31:
    unsigned int v61 = v16;
    goto LABEL_32;
  }
  int v23 = *(unsigned __int8 *)(a1 + 8);
  if (v23 == 1)
  {
    uint64_t v24 = v19 & (a4 ^ 1u);
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_74);
    }
    int v25 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_25631F000, v25, OS_LOG_TYPE_DEFAULT, "CLMicroLocationTriggerManager: Got localization trigger while localizing - AcceptedOngoing", (uint8_t *)&buf, 2u);
    }
    (*(void (**)(void, const CLMicroLocationProto::RecordingEvent *, uint64_t))(**(void **)(a1 + 192)
                                                                                          + 24))(*(void *)(a1 + 192), a2, v24);
    goto LABEL_30;
  }
  if (*(_DWORD *)(a1 + 104) == 1)
  {
    __int16 v34 = *(uint64_t **)(a1 + 32);
    if (v34)
    {
      while (*((_DWORD *)v34 + 8) != 1)
      {
        __int16 v34 = (uint64_t *)*v34;
        if (!v34) {
          goto LABEL_55;
        }
      }
      if (ULSettings::get<ULSettings::PedestrianFenceEnabled>() && !a3)
      {
        int v35 = _CLLogObjectForCategory_MicroLocation_Default();
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf) = 0;
          _os_log_impl(&dword_25631F000, v35, OS_LOG_TYPE_DEFAULT, "CLMicroLocationTriggerManager: Got unforced localization trigger in low latency - ReturnCache", (uint8_t *)&buf, 2u);
        }

        unsigned int v16 = 4;
        goto LABEL_31;
      }
      int v23 = *(unsigned __int8 *)(a1 + 8);
    }
  }
LABEL_55:
  if (v23 == 2) {
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 192) + 40))(*(void *)(a1 + 192), 2);
  }
  double v36 = *(double *)(a1 + 112);
  int v37 = +[ULDefaultsSingleton shared];
  __int16 v38 = [v37 defaultsDictionary];

  int v39 = [NSString stringWithUTF8String:"ULMinDurationBetweenTriggers"];
  __int16 v40 = [v38 objectForKey:v39];
  if (v40 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    [v40 doubleValue];
  }
  else {
    [&unk_2704F1CC8 doubleValue];
  }
  double v42 = v41;

  if (EventReceivedTS - v36 < v42)
  {
    if (EventReceivedTS < *(double *)(a1 + 112))
    {
      uint64_t v43 = _CLLogObjectForCategory_MicroLocation_Default();
      if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
      {
        uint64_t v44 = *(void *)(a1 + 112);
        buf = (void *)68289538;
        __int16 v65 = 2082;
        uint8x8_t v66 = "";
        __int16 v67 = 2050;
        *(double *)v68 = EventReceivedTS;
        *(_WORD *)&v68[8] = 2050;
        v69[0] = v44;
        _os_log_impl(&dword_25631F000, v43, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"fLastTrigger is in the past\", \"triggerTS\":\"%{public}.3f\", \"fLastTriggerTS\":\"%{public}.3f\"}", (uint8_t *)&buf, 0x26u);
      }

      unsigned __int8 v45 = _CLLogObjectForCategory_MicroLocation_Default();
      if (os_signpost_enabled(v45))
      {
        uint64_t v46 = *(void *)(a1 + 112);
        buf = (void *)68289538;
        __int16 v65 = 2082;
        uint8x8_t v66 = "";
        __int16 v67 = 2050;
        *(double *)v68 = EventReceivedTS;
        *(_WORD *)&v68[8] = 2050;
        v69[0] = v46;
        _os_signpost_emit_with_name_impl(&dword_25631F000, v45, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "fLastTrigger is in the past", "{\"msg%{public}.0s\":\"fLastTrigger is in the past\", \"triggerTS\":\"%{public}.3f\", \"fLastTriggerTS\":\"%{public}.3f\"}", (uint8_t *)&buf, 0x26u);
      }

      *(double *)(a1 + 112) = EventReceivedTS;
    }
    int v47 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v48 = *(void *)(a1 + 112);
      buf = (void *)68289538;
      __int16 v65 = 2082;
      uint8x8_t v66 = "";
      __int16 v67 = 2050;
      *(double *)v68 = EventReceivedTS;
      *(_WORD *)&v68[8] = 2050;
      v69[0] = v48;
      _os_log_impl(&dword_25631F000, v47, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationTriggerManager: Reschedule trigger\", \"triggerTS\":\"%{public}.3f\", \"fLastTriggerTS\":\"%{public}.3f\"}", (uint8_t *)&buf, 0x26u);
    }

    std::vector<CLMicroLocationProto::RecordingEvent>::emplace_back<CLMicroLocationProto::RecordingEvent const&>((uint64_t *)(a1 + 80), a2);
    unsigned int v61 = 3;
    double v49 = ULSettings::get<ULSettings::LocalizationRescheduleDelay>();
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 192) + 88))(*(void *)(a1 + 192), (uint64_t)((v49 - (EventReceivedTS - *(double *)(a1 + 112))) * 1000.0));
    *(unsigned char *)(a1 + 132) = 1;
    if (!*(unsigned char *)(a1 + 185)) {
      CLMicroLocationTriggerManager::setRescheduledTriggerLocalizationUUID((CLMicroLocationTriggerManager *)a1, a2);
    }
    unsigned int v16 = 3;
    goto LABEL_32;
  }
  if ((v55 & 1) == 0)
  {
    std::vector<CLMicroLocationProto::RecordingEvent>::emplace_back<CLMicroLocationProto::RecordingEvent const&>((uint64_t *)(a1 + 80), a2);
    int v50 = ULSettings::get<ULSettings::OffScreenScanEnabled>();
    uint64_t v51 = _CLLogObjectForCategory_MicroLocation_Default();
    BOOL v52 = os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT);
    if (v50)
    {
      if (v52)
      {
        buf = (void *)68289026;
        __int16 v65 = 2082;
        uint8x8_t v66 = "";
        int v53 = "{\"msg%{public}.0s\":\"CLMicroLocationTriggerManager: AP is about to sleep, Wait for AP wake up\"}";
LABEL_80:
        _os_log_impl(&dword_25631F000, v51, OS_LOG_TYPE_DEFAULT, v53, (uint8_t *)&buf, 0x12u);
      }
    }
    else if (v52)
    {
      buf = (void *)68289026;
      __int16 v65 = 2082;
      uint8x8_t v66 = "";
      int v53 = "{\"msg%{public}.0s\":\"CLMicroLocationTriggerManager: Wait For Display On\"}";
      goto LABEL_80;
    }

    unsigned int v16 = 2;
    goto LABEL_31;
  }
  CLMicroLocationTriggerManager::startTrigger(a1, a2, 1, &EventReceivedTS, v56, isMotionRequest & a4);
LABEL_32:
  CLMicroLocationTriggerManager::createTriggerEvent(a1, (uint64_t)a2, 0, a5, v16, (uint64_t)v58);
  uint64_t v26 = *(void *)(a1 + 192);
  int v57 = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v57);
  __p[0] = (void *)boost::uuids::random_generator_pure::operator()((uint64_t)&v57);
  __p[1] = v27;
  double v28 = cl::chrono::CFAbsoluteTimeClock::now();
  CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::TriggerEvent>(__p, v58, (uint64_t)&buf, v28);
  (*(void (**)(uint64_t, void **))(*(void *)v26 + 120))(v26, &buf);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)((char *)v69 + 2));
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v57);
  int v57 = 0;
  CLMicroLocationProtobufHelper::convertRequestTypeToString(&v57, &buf);
  uint64_t v29 = v59;
  CLMicroLocationProtobufHelper::convertRequestStatusToString((int *)&v61, __p);
  uint64_t v30 = (*(uint64_t (**)(void))(**(void **)(a1 + 192) + 104))(*(void *)(a1 + 192));
  if (*(_DWORD *)(a1 + 104) == 1 && (__int16 v31 = *(uint64_t **)(a1 + 32)) != 0)
  {
    while (*((_DWORD *)v31 + 8) != 1)
    {
      __int16 v31 = (uint64_t *)*v31;
      if (!v31) {
        goto LABEL_36;
      }
    }
    uint64_t v32 = ULSettings::get<ULSettings::PedestrianFenceEnabled>();
  }
  else
  {
LABEL_36:
    uint64_t v32 = 0;
  }
  CLMicroLocationCoreAnalyticsPublishHelper::sendCommonTriggerEvent((uint64_t)a2, (uint64_t)&buf, v29, (uint64_t)__p, v30, v32, v56);
  if (v63 < 0) {
    operator delete(__p[0]);
  }
  if ((v68[3] & 0x80000000) != 0) {
    operator delete(buf);
  }
  uint64_t v12 = v61;
  CLMicroLocationProto::TriggerEvent::~TriggerEvent((CLMicroLocationProto::TriggerEvent *)v58);

  return v12;
}

void sub_25644BC70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, int a12, char a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  _Unwind_Resume(a1);
}

BOOL CLMicroLocationTriggerManager::isMotionRequest(CLMicroLocationTriggerManager *this, const CLMicroLocationProto::RecordingEvent *a2)
{
  if ((*((unsigned char *)this + 140) & 4) == 0) {
    return 0;
  }
  uint64_t v2 = *((void *)this + 2);
  if (!v2) {
    uint64_t v2 = *(void *)(CLMicroLocationProto::RecordingEvent::default_instance(this) + 16);
  }
  unint64_t v3 = *(uint64_t **)(v2 + 16);
  int v4 = *((char *)v3 + 23);
  if (v4 < 0)
  {
    if (v3[1] != 20) {
      return 0;
    }
    unint64_t v3 = (uint64_t *)*v3;
  }
  else if (v4 != 20)
  {
    return 0;
  }
  unint64_t v5 = (uint64_t *)*v3;
  uint64_t v6 = v3[1];
  int v7 = *((_DWORD *)v3 + 4);
  return v5 == (uint64_t *)0x6C616E7265746E49 && v6 == 0x6F4D746E65696C43 && v7 == 1852795252;
}

void sub_25644BE9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::PedestrianFenceEnabled>()
{
  os_log_t v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  uint64_t v2 = [NSString stringWithUTF8String:"ULPedestrianFenceEnabled"];
  unint64_t v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 BOOLValue];
  }
  else {
    uint64_t v4 = [MEMORY[0x263EFFA88] BOOLValue];
  }
  uint64_t v5 = v4;

  return v5;
}

void sub_25644BF9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMicroLocationProto::RecordingEvent>::emplace_back<CLMicroLocationProto::RecordingEvent const&>(uint64_t *a1, const CLMicroLocationProto::RecordingEvent *a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t v4 = std::vector<CLMicroLocationProto::RecordingEvent>::__emplace_back_slow_path<CLMicroLocationProto::RecordingEvent const&>(a1, a2);
  }
  else
  {
    CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)a1[1], a2);
    uint64_t v4 = v3 + 144;
    a1[1] = v3 + 144;
  }
  a1[1] = v4;
  return v4 - 144;
}

void sub_25644C028(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

double ULSettings::get<ULSettings::LocalizationRescheduleDelay>()
{
  os_log_t v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  uint64_t v2 = [NSString stringWithUTF8String:"ULLocalizationRescheduleDelay"];
  unint64_t v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    [v3 doubleValue];
  }
  else {
    [&unk_2704F1CB0 doubleValue];
  }
  double v5 = v4;

  return v5;
}

void sub_25644C0FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unsigned char *CLMicroLocationTriggerManager::expectRescheduledTrigger(unsigned char *this, const CLMicroLocationProto::RecordingEvent *a2, int a3)
{
  double v5 = this;
  this[132] = 1;
  if (this[185])
  {
    if (!a3) {
      return this;
    }
  }
  else
  {
    this = (unsigned char *)CLMicroLocationTriggerManager::setRescheduledTriggerLocalizationUUID((CLMicroLocationTriggerManager *)this, a2);
    if (!a3) {
      return this;
    }
  }
  unint64_t v6 = *((void *)v5 + 11);
  if (v6 >= *((void *)v5 + 12))
  {
    this = (unsigned char *)std::vector<CLMicroLocationProto::RecordingEvent>::__emplace_back_slow_path<CLMicroLocationProto::RecordingEvent const&>((uint64_t *)v5 + 10, a2);
  }
  else
  {
    CLMicroLocationProto::RecordingEvent::RecordingEvent(*((CLMicroLocationProto::RecordingEvent **)v5 + 11), a2);
    this = (unsigned char *)(v6 + 144);
    *((void *)v5 + 11) = v6 + 144;
  }
  *((void *)v5 + 11) = this;
  return this;
}

void sub_25644C1C4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 88) = v2;
  _Unwind_Resume(a1);
}

void CLMicroLocationTriggerManager::startTrigger(uint64_t a1, const CLMicroLocationProto::RecordingEvent *a2, uint64_t a3, void *a4, void *a5, int a6)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  id v11 = a5;
  CLMicroLocationProtobufHelper::getTriggerUuidFromEvent((uint64_t)a2, v37);
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_74);
  }
  uint64_t v12 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = v38;
    if (v38)
    {
      float v14 = operator new(0x28uLL);
      uint64_t v29 = v14;
      long long v30 = xmmword_256514540;
      _OWORD *v14 = 0u;
      v14[1] = 0u;
      *(void *)((char *)v14 + 29) = 0;
      boost::uuids::to_chars<char *>((uint64_t)v37, v14);
      if (v30 >= 0) {
        char v15 = (const char *)&v29;
      }
      else {
        char v15 = (const char *)v29;
      }
    }
    else
    {
      char v15 = "";
    }
    CLMicroLocationUtils::scanActivityToString(a3, &__p);
    if (SHIBYTE(v28) >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)uint64_t v32 = 2082;
    *(void *)&v32[2] = "";
    *(_WORD *)&v32[10] = 2082;
    *(void *)&v32[12] = v15;
    __int16 v33 = 2082;
    __int16 v34 = p_p;
    __int16 v35 = 1026;
    int v36 = a6;
    _os_log_impl(&dword_25631F000, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationTriggerManager::startTrigger\", \"TriggerUUID\":%{public, location:escape_only}s, \"ScanActivity\":%{public, location:escape_only}s, \"isInMotionTrigger\":%{public}hhd}", buf, 0x2Cu);
    if (SHIBYTE(v28) < 0) {
      operator delete(__p);
    }
    if (v13 && SHIBYTE(v30) < 0) {
      operator delete(v29);
    }
  }

  *(unsigned char *)(a1 + 8) = a3;
  *(void *)(a1 + 112) = *a4;
  if (a3 == 1) {
    *(void *)(a1 + 120) = *a4;
  }
  *(_WORD *)(a1 + 187) = a6 | 0x100;
  CLMicroLocationTriggerManager::setCurrentLocalizationUUID((CLMicroLocationTriggerManager *)a1, a2);
  CLMicroLocationProtobufHelper::getTriggerUuidFromEvent((uint64_t)a2, buf);
  LODWORD(__p) = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&__p);
  uint64_t v17 = boost::uuids::random_generator_pure::operator()((uint64_t)&__p);
  int v20 = *(void **)buf;
  uint64_t v19 = *(void *)v32;
  if (!v32[8])
  {
    uint64_t v19 = v18;
    int v20 = (void *)v17;
  }
  int v21 = *(unsigned __int8 *)(a1 + 168);
  *(void *)(a1 + 152) = v20;
  *(void *)(a1 + 160) = v19;
  if (!v21) {
    *(unsigned char *)(a1 + 168) = 1;
  }
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&__p);
  (*(void (**)(void, const CLMicroLocationProto::RecordingEvent *, uint64_t, void *, id))(**(void **)(a1 + 192) + 16))(*(void *)(a1 + 192), a2, a3, a4, v11);
  if (*(unsigned char *)(a1 + 8) == 1 && *(unsigned char *)(a1 + 186))
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_74);
    }
    __int16 v22 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)uint64_t v32 = 2082;
      *(void *)&v32[2] = "";
      _os_log_impl(&dword_25631F000, v22, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationTriggerManager::startTrigger, setting medium confidence due to motion\"}", buf, 0x12u);
    }
    uint64_t v23 = *(void *)(a1 + 192);
    uint64_t v24 = operator new(4uLL);
    *(void *)buf = v24;
    *uint64_t v24 = 2;
    *(void *)uint64_t v32 = v24 + 1;
    *(void *)&v32[8] = v24 + 1;
    int v25 = operator new(4uLL);
    long long __p = v25;
    _DWORD *v25 = 1;
    __int16 v27 = v25 + 1;
    double v28 = v25 + 1;
    (*(void (**)(uint64_t, uint8_t *, void **))(*(void *)v23 + 96))(v23, buf, &__p);
    if (__p)
    {
      __int16 v27 = __p;
      operator delete(__p);
    }
    if (*(void *)buf)
    {
      *(void *)uint64_t v32 = *(void *)buf;
      operator delete(*(void **)buf);
    }
  }
}

void sub_25644C590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }

  _Unwind_Resume(a1);
}

void CLMicroLocationTriggerManager::createTriggerEvent(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, CLMicroLocationProto *a4@<X3>, unsigned int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  unsigned int v34 = a5;
  unsigned int v35 = a3;
  CLMicroLocationProto::TriggerEvent::TriggerEvent(a6);
  uint64_t v10 = (CLMicroLocationProto::RecordingEvent *)std::string::basic_string[abi:ne180100]<0>(&__str, "");
  int v11 = *(_DWORD *)(a2 + 140);
  if ((v11 & 4) != 0)
  {
    uint64_t v12 = *(void *)(a2 + 16);
    if (!v12)
    {
      uint64_t v10 = (CLMicroLocationProto::RecordingEvent *)CLMicroLocationProto::RecordingEvent::default_instance(v10);
      uint64_t v12 = *((void *)v10 + 2);
    }
    if ((*(unsigned char *)(v12 + 44) & 4) != 0)
    {
      uint64_t v14 = *(void *)(a2 + 16);
      if (!v14) {
        uint64_t v14 = *(void *)(CLMicroLocationProto::RecordingEvent::default_instance(v10) + 16);
      }
      goto LABEL_15;
    }
    int v11 = *(_DWORD *)(a2 + 140);
  }
  if ((v11 & 0x400) == 0) {
    goto LABEL_10;
  }
  uint64_t v13 = *(void *)(a2 + 88);
  if (!v13)
  {
    uint64_t v10 = (CLMicroLocationProto::RecordingEvent *)CLMicroLocationProto::RecordingEvent::default_instance(v10);
    uint64_t v13 = *((void *)v10 + 11);
  }
  if ((*(unsigned char *)(v13 + 44) & 4) == 0)
  {
LABEL_10:
    MEMORY[0x25A2A6080](&__str, "");
    goto LABEL_16;
  }
  uint64_t v14 = *(void *)(a2 + 88);
  if (!v14) {
    uint64_t v14 = *(void *)(CLMicroLocationProto::RecordingEvent::default_instance(v10) + 88);
  }
LABEL_15:
  std::string::operator=(&__str, *(const std::string **)(v14 + 16));
LABEL_16:
  *(_DWORD *)(a6 + 84) |= 0x10u;
  char v15 = *(std::string **)(a6 + 32);
  unsigned int v16 = (std::string *)MEMORY[0x263F8C740];
  if (v15 == (std::string *)MEMORY[0x263F8C740]) {
    operator new();
  }
  std::string::operator=(v15, &__str);
  unsigned int v17 = v35;
  if (!CLMicroLocationProto::TriggerRequestType_IsValid((CLMicroLocationProto *)v35))
  {
    uint64_t v26 = "::CLMicroLocationProto::TriggerRequestType_IsValid(value)";
    int v27 = 21189;
    double v28 = "set_requesttype";
    goto LABEL_49;
  }
  *(_DWORD *)(a6 + 84) |= 0x100u;
  *(_DWORD *)(a6 + 56) = v17;
  if (!CLMicroLocationProto::TriggerReason_IsValid(a4))
  {
    uint64_t v26 = "::CLMicroLocationProto::TriggerReason_IsValid(value)";
    int v27 = 21235;
    double v28 = "set_reason";
LABEL_49:
    __assert_rtn(v28, "microlocation.pb.h", v27, v26);
  }
  *(_DWORD *)(a6 + 84) |= 0x400u;
  *(_DWORD *)(a6 + 72) = a4;
  CLMicroLocationProtobufHelper::convertRequestTypeToString(&v35, &v36);
  *(_DWORD *)(a6 + 84) |= 8u;
  uint64_t v18 = *(std::string **)(a6 + 16);
  if (v18 == v16) {
    operator new();
  }
  std::string::operator=(v18, &v36);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  CLMicroLocationProtobufHelper::getTriggerUuidFromEvent(a2, v37);
  if (v37[16])
  {
    memset(&__p, 0, sizeof(__p));
    if ((boost::conversion::detail::try_lexical_convert<std::string,boost::uuids::uuid>((uint64_t)v37, &__p) & 1) == 0)
    {
      std::bad_cast::bad_cast((std::bad_cast *)&v36);
      v36.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_2704DAAD0;
      boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v36);
    }
    *(_DWORD *)(a6 + 84) |= 0x40u;
    uint64_t v19 = *(std::string **)(a6 + 48);
    if (v19 == v16) {
      operator new();
    }
    std::string::operator=(v19, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  char v20 = (*(uint64_t (**)(void))(**(void **)(a1 + 192) + 104))(*(void *)(a1 + 192));
  *(_DWORD *)(a6 + 84) |= 4u;
  *(unsigned char *)(a6 + 28) = v20;
  unsigned int v21 = v34;
  if (!CLMicroLocationProto::TriggerReason_IsValid((CLMicroLocationProto *)v34))
  {
    uint64_t v29 = "::CLMicroLocationProto::TriggerRequestStatus_IsValid(value)";
    int v30 = 21212;
    __int16 v31 = "set_requeststatus";
    goto LABEL_52;
  }
  *(_DWORD *)(a6 + 84) |= 0x200u;
  *(_DWORD *)(a6 + 60) = v21;
  CLMicroLocationProtobufHelper::convertRequestStatusToString((int *)&v34, &v36);
  *(_DWORD *)(a6 + 84) |= 0x20u;
  __int16 v22 = *(std::string **)(a6 + 40);
  if (v22 == v16) {
    operator new();
  }
  std::string::operator=(v22, &v36);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  char v23 = *(unsigned char *)(a1 + 132);
  *(_DWORD *)(a6 + 84) |= 0x80u;
  *(unsigned char *)(a6 + 29) = v23;
  if (*(unsigned char *)(a1 + 168))
  {
    memset(&__p, 0, sizeof(__p));
    if ((boost::conversion::detail::try_lexical_convert<std::string,boost::uuids::uuid>(a1 + 152, &__p) & 1) == 0)
    {
      std::bad_cast::bad_cast((std::bad_cast *)&v36);
      v36.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_2704DAAD0;
      boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v36);
    }
    *(_DWORD *)(a6 + 84) |= 0x800u;
    uint64_t v24 = *(std::string **)(a6 + 64);
    if (v24 == v16) {
      operator new();
    }
    std::string::operator=(v24, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if ((*(unsigned char *)(a2 + 142) & 2) != 0)
  {
    int v25 = (CLMicroLocationProto *)*(unsigned int *)(a2 + 124);
    if (CLMicroLocationProto::MotionState_IsValid(v25))
    {
      *(_DWORD *)(a6 + 84) |= 0x1000u;
      *(_DWORD *)(a6 + 76) = v25;
      goto LABEL_44;
    }
    uint64_t v29 = "::CLMicroLocationProto::MotionState_IsValid(value)";
    int v30 = 21328;
    __int16 v31 = "set_motionstate";
LABEL_52:
    __assert_rtn(v31, "microlocation.pb.h", v30, v29);
  }
LABEL_44:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_25644CB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::exception a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  std::exception::~exception(&a22);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  CLMicroLocationProto::TriggerEvent::~TriggerEvent(v27);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::TriggerEvent>(_OWORD *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  CLMicroLocationProto::ReceivedEvent::ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
  CLMicroLocationProtobufHelper::setSpecificLoggedEvent((CLMicroLocationProtobufHelper *)v9, (CLMicroLocationProto::ReceivedEvent *)a2, v8);
  CLMicroLocationLoggedEventsTable::Entry::Entry(a3, a1, a2[6], (CLMicroLocationProto::ReceivedEvent *)v9, a4);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
}

void sub_25644CC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t CLMicroLocationTriggerManager::requestRecording(CLMicroLocationTriggerManager *this, const CLMicroLocationProto::RecordingEvent *a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_74);
  }
  double v4 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_DEFAULT, "CLMicroLocationTriggerManager: requestRecording", (uint8_t *)&buf, 2u);
  }
  unsigned int v28 = 0;
  if (CLMicroLocationTriggerManager::shouldReject(this, a2)) {
    unsigned int v5 = 5;
  }
  else {
    unsigned int v5 = 0;
  }
  unsigned int v28 = v5;
  unint64_t v6 = [MEMORY[0x263EFF9A0] dictionary];
  unint64_t v8 = v6;
  if (v28 == 5) {
    goto LABEL_12;
  }
  int v9 = *((unsigned __int8 *)this + 8);
  if (v9 == 1) {
    goto LABEL_34;
  }
  if (v9 == 2)
  {
    unint64_t v6 = (void *)(*(uint64_t (**)(void, const CLMicroLocationProto::RecordingEvent *, void))(**((void **)this + 24) + 24))(*((void *)this + 24), a2, 0);
    unsigned int v28 = 1;
    goto LABEL_12;
  }
  if (*((unsigned char *)this + 186))
  {
LABEL_34:
    unint64_t v18 = *((void *)this + 8);
    if (v18 >= *((void *)this + 9))
    {
      uint64_t v19 = std::vector<CLMicroLocationProto::RecordingEvent>::__emplace_back_slow_path<CLMicroLocationProto::RecordingEvent const&>((uint64_t *)this + 7, a2);
    }
    else
    {
      CLMicroLocationProto::RecordingEvent::RecordingEvent(*((CLMicroLocationProto::RecordingEvent **)this + 8), a2);
      uint64_t v19 = v18 + 144;
      *((void *)this + 8) = v18 + 144;
    }
    *((void *)this + 8) = v19;
    unsigned int v14 = 2;
    unsigned int v28 = 2;
    goto LABEL_38;
  }
  buf.__r_.__value_.__r.__words[0] = CLMicroLocationProtobufHelper::getEventReceivedTS(a2, v7);
  CLMicroLocationTriggerManager::startTrigger((uint64_t)this, a2, 2, &buf, v8, 0);
  if ((*((unsigned char *)a2 + 141) & 4) == 0) {
    goto LABEL_16;
  }
LABEL_12:
  uint64_t v10 = *((void *)a2 + 11);
  if (!v10)
  {
    unint64_t v6 = (void *)CLMicroLocationProto::RecordingEvent::default_instance((CLMicroLocationProto::RecordingEvent *)v6);
    uint64_t v10 = v6[11];
  }
  if ((*(unsigned char *)(v10 + 44) & 4) != 0)
  {
    uint64_t v15 = *((void *)a2 + 11);
    if (!v15) {
      uint64_t v15 = *(void *)(CLMicroLocationProto::RecordingEvent::default_instance((CLMicroLocationProto::RecordingEvent *)v6)
    }
                      + 88);
    unsigned int v16 = *(long long **)(v15 + 16);
    if (*((char *)v16 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)v16, *((void *)v16 + 1));
    }
    else
    {
      long long v17 = *v16;
      buf.__r_.__value_.__r.__words[2] = *((void *)v16 + 2);
      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v17;
    }
  }
  else
  {
LABEL_16:
    std::string::basic_string[abi:ne180100]<0>(&buf, "");
  }
  int v27 = 1;
  CLMicroLocationProtobufHelper::convertRequestTypeToString(&v27, __p);
  CLMicroLocationProtobufHelper::convertRequestStatusToString((int *)&v28, &v31);
  uint64_t v11 = (*(uint64_t (**)(void))(**((void **)this + 24) + 104))(*((void *)this + 24));
  if (*((_DWORD *)this + 26) == 1 && (uint64_t v12 = (uint64_t *)*((void *)this + 4)) != 0)
  {
    while (*((_DWORD *)v12 + 8) != 1)
    {
      uint64_t v12 = (uint64_t *)*v12;
      if (!v12) {
        goto LABEL_21;
      }
    }
    uint64_t v13 = ULSettings::get<ULSettings::PedestrianFenceEnabled>();
  }
  else
  {
LABEL_21:
    uint64_t v13 = 0;
  }
  CLMicroLocationCoreAnalyticsPublishHelper::sendCommonTriggerEvent((uint64_t)a2, (uint64_t)__p, (uint64_t)&buf, (uint64_t)&v31, v11, v13, v8);
  if (v32 < 0) {
    operator delete((void *)v31);
  }
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  unsigned int v14 = v28;
LABEL_38:
  CLMicroLocationTriggerManager::createTriggerEvent((uint64_t)this, (uint64_t)a2, 1u, 0, v14, (uint64_t)__p);
  uint64_t v20 = *((void *)this + 24);
  int v27 = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v27);
  *(void *)&long long v31 = boost::uuids::random_generator_pure::operator()((uint64_t)&v27);
  *((void *)&v31 + 1) = v21;
  double v22 = cl::chrono::CFAbsoluteTimeClock::now();
  CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::TriggerEvent>(&v31, (int *)__p, (uint64_t)&buf, v22);
  (*(void (**)(uint64_t, std::string *))(*(void *)v20 + 120))(v20, &buf);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)&v30);
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v27);
  uint64_t v23 = v28;
  CLMicroLocationProto::TriggerEvent::~TriggerEvent((CLMicroLocationProto::TriggerEvent *)__p);

  return v23;
}

void sub_25644D008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationTriggerManager::requestMotion(CLMicroLocationTriggerManager *this, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)this + 26) == 1)
  {
    double v4 = (uint64_t *)*((void *)this + 4);
    if (v4)
    {
      while (*((_DWORD *)v4 + 8) != 1)
      {
        double v4 = (uint64_t *)*v4;
        if (!v4) {
          goto LABEL_5;
        }
      }
      goto LABEL_6;
    }
  }
LABEL_5:
  if (ULSettings::get<ULSettings::PedestrianFenceWhenSpectatingEnabled>())
  {
LABEL_6:
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_74);
    }
    unsigned int v5 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 68289282;
      int v16 = 0;
      __int16 v17 = 2082;
      unint64_t v18 = "";
      __int16 v19 = 1026;
      LODWORD(p_p) = a2;
      _os_log_impl(&dword_25631F000, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationTriggerManager::requestMotion - setting fence\", \"onlyIfNotRunning\":%{public}hhd}", buf, 0x18u);
    }
    (*(void (**)(void, uint64_t))(**((void **)this + 24) + 48))(*((void *)this + 24), a2);
    return 1;
  }
  if (*((_DWORD *)this + 26))
  {
    __int16 v13 = 31075;
    std::string __p = *(void **)"LowLatency";
    uint64_t v7 = 10;
    char v8 = 10;
  }
  else
  {
    qmemcpy(&__p, "Legacy", 6);
    uint64_t v7 = 6;
    char v8 = 6;
  }
  *((unsigned char *)&__p + v7) = 0;
  char v14 = v8;
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_74);
  }
  int v9 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    for (uint64_t i = (uint64_t *)*((void *)this + 4); i; uint64_t i = (uint64_t *)*i)
    {
      if (*((_DWORD *)i + 8) == 1) {
        break;
      }
    }
    int v11 = ULSettings::get<ULSettings::PedestrianFenceWhenSpectatingEnabled>();
    *(_DWORD *)std::string buf = 68289794;
    int v16 = 0;
    __int16 v17 = 2082;
    unint64_t v18 = "";
    __int16 v19 = 2082;
    p_p = &__p;
    __int16 v21 = 1026;
    BOOL v22 = i != 0;
    __int16 v23 = 1026;
    int v24 = v11;
    _os_log_impl(&dword_25631F000, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationTriggerManager::requestMotion, denied requestMotion\", \"Mode\":%{public, location:escape_only}s, \"isLowLatencyPolicyAvailable\":%{public}hhd, \"PedestrianFenceWhenSpectatingEnabled\":%{public}hhd}", buf, 0x28u);
  }

  *((unsigned char *)this + 186) = 0;
  if (v14 < 0) {
    operator delete(__p);
  }
  return 0;
}

void sub_25644D34C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_25644D438(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationTriggerManager::onInMotion(CLMicroLocationTriggerManager *this)
{
  *((unsigned char *)this + 186) = 1;
  if (*((unsigned char *)this + 8) == 1)
  {
    uint64_t v1 = *((void *)this + 24);
    uint64_t v2 = operator new(4uLL);
    uint64_t v7 = v2;
    _DWORD *v2 = 2;
    char v8 = v2 + 1;
    int v9 = v2 + 1;
    unint64_t v3 = operator new(4uLL);
    std::string __p = v3;
    _DWORD *v3 = 1;
    unsigned int v5 = v3 + 1;
    unint64_t v6 = v3 + 1;
    (*(void (**)(uint64_t, void **, void **))(*(void *)v1 + 96))(v1, &v7, &__p);
    if (__p)
    {
      unsigned int v5 = __p;
      operator delete(__p);
    }
    if (v7)
    {
      char v8 = v7;
      operator delete(v7);
    }
  }
}

void sub_25644D530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationTriggerManager::onStopMotion(uint64_t this)
{
  *(unsigned char *)(this + 186) = 0;
  return this;
}

uint64_t CLMicroLocationTriggerManager::stopTrigger(uint64_t a1, int a2, CLMicroLocationProto *a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v3 = *(unsigned __int8 *)(a1 + 8);
  if (!*(unsigned char *)(a1 + 8)) {
    return 0;
  }
  int v7 = ULSettings::get<ULSettings::OffScreenScanEnabled>();
  uint64_t v8 = **(void **)(a1 + 192);
  if (v7) {
    int v9 = (*(uint64_t (**)(void))(v8 + 112))();
  }
  else {
    int v9 = (*(uint64_t (**)(void))(v8 + 104))();
  }
  if (v3 == 1)
  {
    int v11 = *(_DWORD *)(a1 + 104) == 1 ? v9 : 0;
    if (v11 == 1 && !*(unsigned char *)(a1 + 186)) {
      (*(void (**)(void, void))(**(void **)(a1 + 192) + 48))(*(void *)(a1 + 192), 0);
    }
  }
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_74);
  }
  uint64_t v12 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = a3;
    _os_log_impl(&dword_25631F000, v12, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLMicroLocationTriggerManager: stopTrigger\", \"Reason\":%{public}d}", buf, 0x18u);
  }
  *(_OWORD *)std::string buf = *(_OWORD *)(a1 + 56);
  *(void *)&uint8_t buf[16] = *(void *)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = 0;
  std::vector<CLMicroLocationProto::RecordingEvent>::__vdeallocate((void **)(a1 + 56));
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  memset(v14, 0, sizeof(v14));
  uint64_t v15 = v14;
  std::vector<CLMicroLocationProto::RecordingEvent>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  CLMicroLocationTriggerManager::resetInternalState(a1);
  if (*(unsigned char *)(a1 + 151)) {
    *(unsigned char *)(a1 + 151) = 0;
  }
  if (*(unsigned char *)(a1 + 168)) {
    *(unsigned char *)(a1 + 168) = 0;
  }
  if (v3 == 2 && *(unsigned char *)(a1 + 133)) {
    (*(void (**)(void))(**(void **)(a1 + 200) + 24))(*(void *)(a1 + 200));
  }
  if (a2) {
    uint64_t v10 = CLMicroLocationTriggerManager::handleQueuedRecordingsIfNoRescheduledLocalization(a1, (const CLMicroLocationProto::RecordingEvent **)buf, a3);
  }
  else {
    uint64_t v10 = 0;
  }
  v14[0] = (void **)buf;
  std::vector<CLMicroLocationProto::RecordingEvent>::__destroy_vector::operator()[abi:ne180100](v14);
  return v10;
}

void sub_25644D7F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  a9 = (void **)&a13;
  std::vector<CLMicroLocationProto::RecordingEvent>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationTriggerManager::resetInternalState(uint64_t this)
{
  uint64_t v1 = this;
  *(unsigned char *)(this + 8) = 0;
  int v3 = *(uint64_t (****)(void))(this + 56);
  uint64_t v2 = *(uint64_t (****)(void))(this + 64);
  if (v2 != v3)
  {
    double v4 = v2 - 18;
    unsigned int v5 = v2 - 18;
    unint64_t v6 = v2 - 18;
    do
    {
      int v7 = *v6;
      v6 -= 18;
      this = (*v7)(v5);
      v4 -= 18;
      BOOL v8 = v5 == v3;
      unsigned int v5 = v6;
    }
    while (!v8);
  }
  *(void *)(v1 + 64) = v3;
  if (*(unsigned char *)(v1 + 188)) {
    *(unsigned char *)(v1 + 188) = 0;
  }
  return this;
}

uint64_t CLMicroLocationTriggerManager::handleQueuedRecordingsIfNoRescheduledLocalization(uint64_t a1, const CLMicroLocationProto::RecordingEvent **a2, CLMicroLocationProto *a3)
{
  v22[38] = *MEMORY[0x263EF8340];
  int v3 = *a2;
  double v4 = a2[1];
  if (*a2 != v4)
  {
    if (!*(unsigned char *)(a1 + 9)) {
      return 0;
    }
    if (*(unsigned char *)(a1 + 132) || *(unsigned char *)(a1 + 186))
    {
      uint64_t v6 = a1 + 56;
      if ((const CLMicroLocationProto::RecordingEvent **)(a1 + 56) != a2) {
        std::vector<CLMicroLocationProto::RecordingEvent>::__assign_with_size[abi:ne180100]<CLMicroLocationProto::RecordingEvent*,CLMicroLocationProto::RecordingEvent*>(v6, *a2, v4, 0x8E38E38E38E38E39 * ((v4 - v3) >> 4));
      }
      return 0;
    }
    char v9 = 1;
    do
    {
      if (v9)
      {
        CFAbsoluteTime v19 = cl::chrono::CFAbsoluteTimeClock::now();
        CLMicroLocationTriggerManager::startTrigger(a1, v3, 2, &v19, 0, 0);
        CLMicroLocationTriggerManager::createTriggerEvent(a1, (uint64_t)v3, 1u, a3, 0, (uint64_t)v18);
        uint64_t v10 = *(void *)(a1 + 192);
        int v17 = 0;
        boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v17);
        *(void *)&long long v20 = boost::uuids::random_generator_pure::operator()((uint64_t)&v17);
        *((void *)&v20 + 1) = v11;
        double v12 = cl::chrono::CFAbsoluteTimeClock::now();
        CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::TriggerEvent>(&v20, v18, (uint64_t)v21, v12);
        (*(void (**)(uint64_t, unsigned char *))(*(void *)v10 + 120))(v10, v21);
        CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v22);
        __int16 v13 = (boost::uuids::detail::random_provider_base *)&v17;
      }
      else
      {
        (*(void (**)(void, const CLMicroLocationProto::RecordingEvent *, void))(**(void **)(a1 + 192)
                                                                                             + 24))(*(void *)(a1 + 192), v3, 0);
        CLMicroLocationTriggerManager::createTriggerEvent(a1, (uint64_t)v3, 1u, a3, 1u, (uint64_t)v18);
        uint64_t v14 = *(void *)(a1 + 192);
        LODWORD(v19) = 0;
        boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v19);
        *(void *)&long long v20 = boost::uuids::random_generator_pure::operator()((uint64_t)&v19);
        *((void *)&v20 + 1) = v15;
        double v16 = cl::chrono::CFAbsoluteTimeClock::now();
        CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::TriggerEvent>(&v20, v18, (uint64_t)v21, v16);
        (*(void (**)(uint64_t, unsigned char *))(*(void *)v14 + 120))(v14, v21);
        CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v22);
        __int16 v13 = (boost::uuids::detail::random_provider_base *)&v19;
      }
      boost::uuids::detail::random_provider_base::destroy(v13);
      CLMicroLocationProto::TriggerEvent::~TriggerEvent((CLMicroLocationProto::TriggerEvent *)v18);
      char v9 = 0;
      int v3 = (const CLMicroLocationProto::RecordingEvent *)((char *)v3 + 144);
    }
    while (v3 != v4);
  }
  return 1;
}

void sub_25644DB10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CLMicroLocationProto::TriggerEvent::~TriggerEvent((CLMicroLocationProto::TriggerEvent *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationTriggerManager::setSpectatingEnabled(CLMicroLocationTriggerManager *this, int a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_74);
  }
  double v4 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v5 = "No";
    v13[0] = 68289282;
    v13[1] = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    if (a2) {
      unsigned int v5 = "Yes";
    }
    __int16 v16 = 2082;
    int v17 = v5;
    _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationTriggerManager: setSpectatingEnabled\", \"spectatingEnabled\":%{public, location:escape_only}s}", (uint8_t *)v13, 0x1Cu);
  }
  *((unsigned char *)this + 9) = a2;
  if (a2)
  {
    CLMicroLocationTriggerManager::startMotionIfNecessary((uint64_t)this);
  }
  else
  {
    CLMicroLocationTriggerManager::stopMotionIfNecessary((uint64_t)this);
    CLMicroLocationTriggerManager::resetInternalState((uint64_t)this);
    *((unsigned char *)this + 132) = 0;
    if (*((unsigned char *)this + 185)) {
      *((unsigned char *)this + 185) = 0;
    }
    int v7 = (void (***)(void))*((void *)this + 10);
    uint64_t v6 = (void (***)(void))*((void *)this + 11);
    if (v6 != v7)
    {
      BOOL v8 = v6 - 18;
      char v9 = v6 - 18;
      uint64_t v10 = v6 - 18;
      do
      {
        uint64_t v11 = *v10;
        v10 -= 18;
        (*v11)(v9);
        v8 -= 18;
        BOOL v12 = v9 == v7;
        char v9 = v10;
      }
      while (!v12);
    }
    *((void *)this + 11) = v7;
    if (*((unsigned char *)this + 133)) {
      CLMiLoCustomLoiRecordingManager::stopRecordingSession(*((CLMiLoCustomLoiRecordingManager **)this + 25));
    }
  }
}

uint64_t CLMicroLocationTriggerManager::stopMotionIfNecessary(uint64_t this)
{
  if (*(_DWORD *)(this + 104) == 1)
  {
    uint64_t v1 = this;
    (*(void (**)(void))(**(void **)(this + 192) + 64))(*(void *)(this + 192));
    this = (*(uint64_t (**)(void))(**(void **)(v1 + 192) + 80))(*(void *)(v1 + 192));
    *(_DWORD *)(v1 + 104) = 0;
  }
  return this;
}

uint64_t CLMicroLocationTriggerManager::startMotionIfNecessary(uint64_t this)
{
  if (!*(_DWORD *)(this + 104))
  {
    uint64_t v1 = this;
    uint64_t v2 = *(uint64_t **)(this + 32);
    if (v2)
    {
      while (*((_DWORD *)v2 + 8) != 1)
      {
        uint64_t v2 = (uint64_t *)*v2;
        if (!v2) {
          return this;
        }
      }
      this = ULSettings::get<ULSettings::PedestrianFenceEnabled>();
      if (this)
      {
        *(_DWORD *)(v1 + 104) = 1;
        (*(void (**)(void))(**(void **)(v1 + 192) + 56))(*(void *)(v1 + 192));
        int v3 = *(uint64_t (**)(void))(**(void **)(v1 + 192) + 72);
        return v3();
      }
    }
  }
  return this;
}

BOOL CLMicroLocationTriggerManager::isCurrentTriggerMotionTrigger(CLMicroLocationTriggerManager *this)
{
  return *((unsigned char *)this + 188) && *((unsigned char *)this + 187) != 0;
}

uint64_t CLMicroLocationTriggerManager::isCurrentlyInMotion(CLMicroLocationTriggerManager *this)
{
  return *((unsigned __int8 *)this + 186);
}

uint64_t CLMicroLocationTriggerManager::addPolicy(uint64_t a1, void *a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 16;
  if (std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::find<boost::uuids::uuid>((void *)(a1 + 16), a2))
  {
    return 0;
  }
  BOOL v8 = a2;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, &v8)+ 8) = *a3;
  if (*(unsigned char *)(a1 + 133)) {
    return 0;
  }
  CLMicroLocationTriggerManager::startMotionIfNecessary(a1);
  return 1;
}

BOOL CLMicroLocationTriggerManager::removePolicy(CLMicroLocationTriggerManager *this, uuid *a2)
{
  double v4 = (void *)((char *)this + 16);
  unsigned int v5 = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::find<boost::uuids::uuid>((void *)this + 2, a2);
  if (v5)
  {
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::__erase_unique<boost::uuids::uuid>(v4, a2);
    if (*((_DWORD *)this + 26) == 1)
    {
      uint64_t v6 = (uint64_t *)*((void *)this + 4);
      if (v6)
      {
        while (*((_DWORD *)v6 + 8) != 1)
        {
          uint64_t v6 = (uint64_t *)*v6;
          if (!v6) {
            goto LABEL_6;
          }
        }
      }
      else
      {
LABEL_6:
        if ((ULSettings::get<ULSettings::PedestrianFenceWhenSpectatingEnabled>() & 1) == 0)
        {
          *((_DWORD *)this + 26) = 0;
          if (onceToken_MicroLocation_Default != -1) {
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_74);
          }
          int v7 = logObject_MicroLocation_Default;
          if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)char v9 = 0;
            _os_log_impl(&dword_25631F000, v7, OS_LOG_TYPE_DEBUG, "Stopping motion based triggers", v9, 2u);
          }
          (*(void (**)(void))(**((void **)this + 24) + 64))(*((void *)this + 24));
          (*(void (**)(void))(**((void **)this + 24) + 80))(*((void *)this + 24));
        }
      }
    }
    if (!*((void *)this + 5) && *((unsigned char *)this + 8)) {
      (*(void (**)(void))(**((void **)this + 24) + 40))(*((void *)this + 24));
    }
  }
  return v5 != 0;
}

BOOL CLMicroLocationTriggerManager::isLowLatencyMode(CLMicroLocationTriggerManager *this)
{
  return *((_DWORD *)this + 26) == 1;
}

uint64_t CLMicroLocationTriggerManager::setMacAcPower(uint64_t this, char a2)
{
  *(unsigned char *)(this + 108) = a2;
  return this;
}

uint64_t CLMicroLocationTriggerManager::setMacExternalDisplay(uint64_t this, char a2)
{
  *(unsigned char *)(this + 109) = a2;
  return this;
}

uint64_t CLMicroLocationTriggerManager::setRescheduledTriggerLocalizationUUID(CLMicroLocationTriggerManager *this, const CLMicroLocationProto::RecordingEvent *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  CLMicroLocationProtobufHelper::getTriggerUuidFromEvent((uint64_t)a2, v11);
  if (!v12)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_74);
    }
    int v3 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&dword_25631F000, v3, OS_LOG_TYPE_ERROR, "Localization trigger does not have a valid trigger UUID", v10, 2u);
    }
  }
  *(_DWORD *)uint64_t v10 = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)v10);
  uint64_t v4 = boost::uuids::random_generator_pure::operator()((uint64_t)v10);
  uint64_t v7 = v11[0];
  uint64_t v6 = v11[1];
  if (!v12)
  {
    uint64_t v6 = v5;
    uint64_t v7 = v4;
  }
  int v8 = *((unsigned __int8 *)this + 185);
  *(void *)((char *)this + 169) = v7;
  *(void *)((char *)this + 177) = v6;
  if (!v8) {
    *((unsigned char *)this + 185) = 1;
  }
  return boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)v10);
}

void sub_25644E1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t CLMicroLocationTriggerManager::enumerateClientIdToTriggerType(uint64_t a1)
{
  unint64_t v1 = *(unsigned __int8 *)(a1 + 23);
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a1 + 23))
    {
      uint64_t v2 = (unsigned char *)a1;
      unint64_t v3 = *(unsigned __int8 *)(a1 + 23);
      goto LABEL_6;
    }
    return 255;
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return 255;
  }
  uint64_t v2 = *(unsigned char **)a1;
LABEL_6:
  if (v3 >= 0x2D) {
    unint64_t v3 = 45;
  }
  uint64_t v4 = &v2[v3];
  uint64_t v5 = v2;
  uint64_t v6 = v4;
  do
  {
    if (*v5 == 109)
    {
      uint64_t v7 = 1u;
      while (v7 != 45)
      {
        if (&v5[v7] == v4) {
          goto LABEL_18;
        }
        int v8 = v5[v7];
        int v9 = aMiloInternalLe[v7++];
        if (v8 != v9) {
          goto LABEL_10;
        }
      }
      uint64_t v6 = v5;
    }
LABEL_10:
    ++v5;
  }
  while (v5 != v4);
LABEL_18:
  if (v6 != v4 && v6 == v2) {
    return 0;
  }
  if ((v1 & 0x80u) == 0) {
    uint64_t v11 = (unsigned char *)a1;
  }
  else {
    uint64_t v11 = *(unsigned char **)a1;
  }
  if ((v1 & 0x80u) != 0) {
    unint64_t v1 = *(void *)(a1 + 8);
  }
  uint64_t v12 = 20;
  if (v1 < 0x14) {
    uint64_t v12 = v1;
  }
  if (v12)
  {
    uint64_t v13 = &v11[v12];
    __int16 v14 = v11;
    uint64_t v15 = v13;
    do
    {
      if (*v14 == 73)
      {
        uint64_t v16 = 1u;
        while (v16 != 20)
        {
          if (&v14[v16] == v13) {
            goto LABEL_40;
          }
          int v17 = v14[v16];
          int v18 = kMotionInternalClientBundleId[v16++];
          if (v17 != v18) {
            goto LABEL_32;
          }
        }
        uint64_t v15 = v14;
      }
LABEL_32:
      ++v14;
    }
    while (v14 != v13);
LABEL_40:
    if (v15 != v13 && v15 == v11) {
      return 1;
    }
  }
  uint64_t v19 = 17;
  if (v1 < 0x11) {
    uint64_t v19 = v1;
  }
  if (v19)
  {
    long long v20 = &v11[v19];
    __int16 v21 = v11;
    BOOL v22 = v20;
    do
    {
      if (*v21 == 73)
      {
        uint64_t v23 = 1u;
        while (v23 != 17)
        {
          if (&v21[v23] == v20) {
            goto LABEL_56;
          }
          int v24 = v21[v23];
          int v25 = kMacInternalClientBundleId[v23++];
          if (v24 != v25) {
            goto LABEL_48;
          }
        }
        BOOL v22 = v21;
      }
LABEL_48:
      ++v21;
    }
    while (v21 != v20);
LABEL_56:
    if (v22 != v20 && v22 == v11) {
      return 2;
    }
  }
  uint64_t v26 = 19;
  if (v1 < 0x13) {
    uint64_t v26 = v1;
  }
  if (v26)
  {
    int v27 = &v11[v26];
    unsigned int v28 = v11;
    uint64_t v29 = v27;
    do
    {
      if (*v28 == 73)
      {
        uint64_t v30 = 1u;
        while (v30 != 19)
        {
          if (&v28[v30] == v27) {
            goto LABEL_71;
          }
          int v31 = v28[v30];
          int v32 = kLogicInternalClientBundleId[v30++];
          if (v31 != v32) {
            goto LABEL_63;
          }
        }
        uint64_t v29 = v28;
      }
LABEL_63:
      ++v28;
    }
    while (v28 != v27);
LABEL_71:
    if (v29 != v27 && v29 == v11) {
      return 3;
    }
  }
  uint64_t v33 = 30;
  if (v1 < 0x1E) {
    uint64_t v33 = v1;
  }
  if (v33)
  {
    unsigned int v34 = &v11[v33];
    unsigned int v35 = v11;
    std::string v36 = v34;
    do
    {
      if (*v35 == 73)
      {
        uint64_t v37 = 1u;
        while (v37 != 30)
        {
          if (&v35[v37] == v34) {
            goto LABEL_87;
          }
          int v38 = v35[v37];
          int v39 = kScreenOnFallBackInternalClientBundleId[v37++];
          if (v38 != v39) {
            goto LABEL_79;
          }
        }
        std::string v36 = v35;
      }
LABEL_79:
      ++v35;
    }
    while (v35 != v34);
LABEL_87:
    if (v36 != v34 && v36 == v11) {
      return 2;
    }
  }
  uint64_t v40 = 26;
  if (v1 < 0x1A) {
    uint64_t v40 = v1;
  }
  if (!v40) {
    goto LABEL_105;
  }
  double v41 = &v11[v40];
  double v42 = v11;
  uint64_t v43 = v41;
  do
  {
    if (*v42 == 73)
    {
      uint64_t v44 = 1u;
      while (v44 != 26)
      {
        if (&v42[v44] == v41) {
          goto LABEL_102;
        }
        int v45 = v42[v44];
        int v46 = kScreenUnlockInternalClientBundleId[v44++];
        if (v45 != v46) {
          goto LABEL_94;
        }
      }
      uint64_t v43 = v42;
    }
LABEL_94:
    ++v42;
  }
  while (v42 != v41);
LABEL_102:
  if (v43 != v41 && v43 == v11) {
    return 2;
  }
LABEL_105:
  uint64_t v47 = 10;
  if (v1 < 0xA) {
    uint64_t v47 = v1;
  }
  uint64_t v48 = &v11[v47];
  if (v47)
  {
    double v49 = v11;
    int v50 = &v11[v47];
    do
    {
      if (*v49 == 102)
      {
        uint64_t v51 = 1u;
        while (v51 != 10)
        {
          if (&v49[v51] == v48) {
            goto LABEL_119;
          }
          int v52 = v49[v51];
          int v53 = aFocusMode[v51++];
          if (v52 != v53) {
            goto LABEL_110;
          }
        }
        int v50 = v49;
      }
LABEL_110:
      ++v49;
    }
    while (v49 != v48);
  }
  else
  {
    int v50 = v11;
  }
LABEL_119:
  if (v50 != v11 || v50 == v48) {
    return 4;
  }
  else {
    return 0;
  }
}

void CLMicroLocationTriggerManager::startRecording(CLMicroLocationTriggerManager *this)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  v2.n128_f64[0] = CLMicroLocationProto::RecordingRequest::RecordingRequest((CLMicroLocationProto::RecordingRequest *)v22);
  v26 |= 4u;
  uint64_t v3 = MEMORY[0x263F8C740];
  if (v24 == MEMORY[0x263F8C740]) {
    operator new();
  }
  MEMORY[0x25A2A6080](v2);
  if (!CLMicroLocationProto::RecordingRequestType_IsValid((CLMicroLocationProto *)1)) {
    __assert_rtn("set_recordingrequesttype", "microlocation.pb.h", 13554, "::CLMicroLocationProto::RecordingRequestType_IsValid(value)");
  }
  v26 |= 2u;
  int v23 = 1;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  v19[0] = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)v19);
  uint64_t v34 = boost::uuids::random_generator_pure::operator()((uint64_t)v19);
  uint64_t v35 = v4;
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)v19);
  v26 |= 8u;
  if (v25 == v3) {
    operator new();
  }
  MEMORY[0x25A2A6090]();
  double v5 = cl::chrono::CFAbsoluteTimeClock::now();
  CLMicroLocationProtobufHelper::createRecordingEvent<CLMicroLocationProto::RecordingRequest>((CLMicroLocationProto::RecordingEvent *)v22, 0, 0, 0, (CLMicroLocationProto *)3, (uint64_t)v19, v5);
  if (*((unsigned char *)this + 133))
  {
    if ((*(unsigned int (**)(void))(**((void **)this + 24) + 168))(*((void *)this + 24)))
    {
      uint64_t v6 = (*(void (**)(void))(**((void **)this + 24) + 176))(*((void *)this + 24));
      v21 |= 0x10000u;
      uint64_t v7 = v20;
      if (!v20) {
        operator new();
      }
      uint64_t v8 = [v6 RSSI];
      *(_DWORD *)(v7 + 24) |= 2u;
      *(float *)(v7 + 16) = (float)v8;
      id v9 = [v6 BSSID];
      uint64_t v10 = std::string::basic_string[abi:ne180100]<0>(buf, (char *)[v9 UTF8String]);
      v18.var0 = CLMacAddress::newFromCLStr(v10);
      if (SBYTE3(v31) < 0) {
        operator delete(*(void **)buf);
      }

      v21 |= 0x10000u;
      uint64_t v11 = v20;
      if (!v20) {
        operator new();
      }
      unint64_t v12 = CLMacAddress::toUint64(&v18);
      *(_DWORD *)(v11 + 24) |= 1u;
      *(void *)(v11 + 8) = v12;
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_74);
      }
      uint64_t v13 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        id v14 = [v6 BSSID];
        uint64_t v15 = [v14 UTF8String];
        uint64_t v16 = [v6 RSSI];
        *(void *)std::string buf = 68289539;
        __int16 v28 = 2082;
        uint64_t v29 = "";
        __int16 v30 = 2081;
        uint64_t v31 = v15;
        __int16 v32 = 2050;
        double v33 = (float)v16;
        _os_log_impl(&dword_25631F000, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationTriggerManager, set associated AP for a recording event\", \"MAC Address\":%{private, location:escape_only}s, \"Rssi\":\"%{public}f\"}", buf, 0x26u);
      }
    }
    else
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_74);
      }
      int v17 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
        *(void *)std::string buf = 68289026;
        __int16 v28 = 2082;
        uint64_t v29 = "";
        _os_log_impl(&dword_25631F000, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationTriggerManager, set associated AP for a recording event failed, not associated\"}", buf, 0x12u);
      }
    }
  }
  CLMicroLocationTriggerManager::requestRecording(this, (const CLMicroLocationProto::RecordingEvent *)v19);
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v19);
  CLMicroLocationProto::RecordingRequest::~RecordingRequest((CLMicroLocationProto::RecordingRequest *)v22);
}

void sub_25644EA64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  MEMORY[0x25A2A6340](v30, 0x1081C40DCAC275BLL);

  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)&a11);
  CLMicroLocationProto::RecordingRequest::~RecordingRequest((CLMicroLocationProto::RecordingRequest *)&a29);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationTriggerManager::setRecordingFence(CLMicroLocationTriggerManager *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 24) + 144))();
}

uint64_t CLMicroLocationTriggerManager::clearRecordingFence(CLMicroLocationTriggerManager *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 24) + 152))();
}

uint64_t CLMicroLocationTriggerManager::exitCustomLoiRecordingSession(CLMicroLocationTriggerManager *this)
{
  *((unsigned char *)this + 133) = 0;
  (*(void (**)(void))(**((void **)this + 24) + 136))(*((void *)this + 24));
  (*(void (**)(void))(**((void **)this + 24) + 160))(*((void *)this + 24));
  CLMicroLocationTriggerManager::startMotionIfNecessary((uint64_t)this);
  if (*((unsigned char *)this + 134)) {
    CLMicroLocationTriggerManager::handleDisplayOn(this);
  }
  return *((unsigned __int8 *)this + 133);
}

uint64_t CLMicroLocationTriggerManager::setCurrentLocalizationUUID(CLMicroLocationTriggerManager *this, const CLMicroLocationProto::RecordingEvent *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  CLMicroLocationProtobufHelper::getTriggerUuidFromEvent((uint64_t)a2, v11);
  if (!v12)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_74);
    }
    uint64_t v3 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&dword_25631F000, v3, OS_LOG_TYPE_ERROR, "Localization trigger does not have a valid trigger UUID", v10, 2u);
    }
  }
  *(_DWORD *)uint64_t v10 = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)v10);
  uint64_t v4 = boost::uuids::random_generator_pure::operator()((uint64_t)v10);
  uint64_t v7 = v11[0];
  uint64_t v6 = v11[1];
  if (!v12)
  {
    uint64_t v6 = v5;
    uint64_t v7 = v4;
  }
  int v8 = *((unsigned __int8 *)this + 151);
  *(void *)((char *)this + 135) = v7;
  *(void *)((char *)this + 143) = v6;
  if (!v8) {
    *((unsigned char *)this + 151) = 1;
  }
  return boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)v10);
}

void sub_25644ED20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t CLMicroLocationTriggerManager::startCustomLoiRecordingSession(CLMicroLocationTriggerManager *this)
{
  *((unsigned char *)this + 133) = 1;
  CLMicroLocationTriggerManager::stopMotionIfNecessary((uint64_t)this);
  if (*((unsigned char *)this + 8) == 1) {
    (*(void (**)(void, uint64_t))(**((void **)this + 24) + 40))(*((void *)this + 24), 1);
  }
  (*(void (**)(void))(**((void **)this + 24) + 128))(*((void *)this + 24));
  (*(void (**)(void))(**((void **)this + 25) + 16))(*((void *)this + 25));
  CLMiLoCustomLoiRecordingManager::deviceScreenState(*((CLMiLoCustomLoiRecordingManager **)this + 25), *((unsigned char *)this + 134));
  return *((unsigned __int8 *)this + 133);
}

uint64_t CLMicroLocationTriggerManager::handleQueuedLocalizations(uint64_t a1, void *a2, int a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (*a2 != a2[1])
  {
    if (!*(unsigned char *)(a1 + 9)) {
      return 0;
    }
    uint64_t v20 = a2;
    int v21 = a3;
    uint64_t v22 = a1;
    int v5 = *(unsigned __int8 *)(a1 + 8);
    if (*(unsigned char *)(a1 + 8))
    {
      if (v5 != 2)
      {
        if (v5 == 1)
        {
          if (onceToken_MicroLocation_Default != -1) {
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_74);
          }
          uint64_t v6 = logObject_MicroLocation_Default;
          if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 68289026;
            int v24 = 0;
            __int16 v25 = 2082;
            int v26 = "";
            _os_log_impl(&dword_25631F000, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"handeling rescheduled localizations while localizing, shouldn't happen\"}", buf, 0x12u);
          }
          uint64_t v8 = *a2;
          uint64_t v7 = a2[1];
          while (v8 != v7)
          {
            (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 192) + 24))(*(void *)(a1 + 192), v8, 0);
            v8 += 144;
          }
        }
        return 1;
      }
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_74);
      }
      uint64_t v10 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 68289026;
        int v24 = 0;
        __int16 v25 = 2082;
        int v26 = "";
        _os_log_impl(&dword_25631F000, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"handeling rescheduled localizations while recording, shouldn't happen\"}", buf, 0x12u);
      }
      char v12 = *(void (****)(void))(a1 + 56);
      uint64_t v11 = *(void (****)(void))(a1 + 64);
      if (v11 != v12)
      {
        uint64_t v13 = v11 - 18;
        id v14 = v11 - 18;
        uint64_t v15 = v11 - 18;
        do
        {
          uint64_t v16 = *v15;
          v15 -= 18;
          (*v16)(v14);
          v13 -= 18;
          BOOL v17 = v14 == v12;
          id v14 = v15;
        }
        while (!v17);
      }
      unsigned int v19 = *(unsigned __int8 *)(a1 + 8);
      uint64_t v18 = a1 + 8;
      *(void *)(v18 + 56) = v12;
      (*(void (**)(void, void))(**(void **)(v18 + 184) + 40))(*(void *)(v18 + 184), v19);
      *(unsigned char *)uint64_t v18 = 0;
    }
    CLMicroLocationTriggerManager::handleQueuedLocalizations(std::vector<CLMicroLocationProto::RecordingEvent> &,CLMicroLocationProto::TriggerReason)::$_0::operator()((uint64_t)&v20);
  }
  return 1;
}

void CLMicroLocationTriggerManager::handleQueuedLocalizations(std::vector<CLMicroLocationProto::RecordingEvent> &,CLMicroLocationProto::TriggerReason)::$_0::operator()(uint64_t a1)
{
  v13[38] = *MEMORY[0x263EF8340];
  unint64_t v1 = **(const CLMicroLocationProto::RecordingEvent ***)a1;
  __n128 v2 = *(const CLMicroLocationProto::RecordingEvent **)(*(void *)a1 + 8);
  if (v1 != v2)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    char v5 = 1;
    do
    {
      if (v5)
      {
        v12[0] = cl::chrono::CFAbsoluteTimeClock::now();
        CLMicroLocationTriggerManager::startTrigger(v4, v1, 1, v12, 0, 0);
        CLMicroLocationTriggerManager::createTriggerEvent(v4, (uint64_t)v1, 0, (CLMicroLocationProto *)*(unsigned int *)(a1 + 8), 0, (uint64_t)v10);
      }
      else
      {
        (*(void (**)(void, const CLMicroLocationProto::RecordingEvent *, void))(**(void **)(v4 + 192)
                                                                                             + 24))(*(void *)(v4 + 192), v1, 0);
        CLMicroLocationTriggerManager::createTriggerEvent(v4, (uint64_t)v1, 0, (CLMicroLocationProto *)*(unsigned int *)(a1 + 8), 1u, (uint64_t)v10);
      }
      uint64_t v6 = *(void *)(v4 + 192);
      int v9 = 0;
      boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v9);
      *(void *)&long long v11 = boost::uuids::random_generator_pure::operator()((uint64_t)&v9);
      *((void *)&v11 + 1) = v7;
      double v8 = cl::chrono::CFAbsoluteTimeClock::now();
      CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::TriggerEvent>(&v11, v10, (uint64_t)v12, v8);
      (*(void (**)(uint64_t, void *))(*(void *)v6 + 120))(v6, v12);
      CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v13);
      boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v9);
      CLMicroLocationProto::TriggerEvent::~TriggerEvent((CLMicroLocationProto::TriggerEvent *)v10);
      char v5 = 0;
      unint64_t v1 = (const CLMicroLocationProto::RecordingEvent *)((char *)v1 + 144);
    }
    while (v1 != v2);
  }
}

void sub_25644F294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, __int16 a12, char a13, char a14)
{
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent(v14);
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&a11);
  CLMicroLocationProto::TriggerEvent::~TriggerEvent((CLMicroLocationProto::TriggerEvent *)&a13);
  _Unwind_Resume(a1);
}

void CLMicroLocationTriggerManager::triggerFallbackLocalizationEvent(CLMicroLocationTriggerManager *this, const CLMicroLocationProto::RecordingEvent *a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v4 = +[ULDefaultsSingleton shared];
  char v5 = [v4 defaultsDictionary];

  uint64_t v6 = [NSString stringWithUTF8String:"ULEnableInternalFallbackLocalization"];
  uint64_t v7 = [v5 objectForKey:v6];
  if (v7 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    int v8 = [v7 BOOLValue];
  }
  else {
    int v8 = [MEMORY[0x263EFFA88] BOOLValue];
  }
  int v9 = v8;

  if (v9 && *((_DWORD *)this + 26) == 1)
  {
    uint64_t v10 = +[ULDefaultsSingleton shared];
    long long v11 = [v10 defaultsDictionary];

    char v12 = [NSString stringWithUTF8String:"ULMaxDurationBetweenLocalizationTriggers"];
    uint64_t v13 = [v11 objectForKey:v12];
    if (v13 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
      [v13 doubleValue];
    }
    else {
      [&unk_2704F1CE0 doubleValue];
    }
    double v15 = v14;

    double EventReceivedTS = CLMicroLocationProtobufHelper::getEventReceivedTS(a2, v16);
    double v18 = *((double *)this + 15);
    if (EventReceivedTS >= v18)
    {
      if (EventReceivedTS - v18 < v15) {
        return;
      }
    }
    else
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_74);
      }
      unsigned int v19 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
      {
        double v20 = *((double *)this + 15);
        int v25 = 68289538;
        int v26 = 0;
        __int16 v27 = 2082;
        __int16 v28 = "";
        __int16 v29 = 2050;
        double v30 = EventReceivedTS;
        __int16 v31 = 2050;
        double v32 = v20;
        _os_log_impl(&dword_25631F000, v19, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"triggerFallbackLocalizationEvent: fLastTrigger is in the past\", \"triggerTS\":\"%{public}.3f\", \"fLastLocalizationTriggerTS\":\"%{public}.3f\"}", (uint8_t *)&v25, 0x26u);
      }
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_74);
      }
      int v21 = logObject_MicroLocation_Default;
      if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
      {
        double v22 = *((double *)this + 15);
        int v25 = 68289538;
        int v26 = 0;
        __int16 v27 = 2082;
        __int16 v28 = "";
        __int16 v29 = 2050;
        double v30 = EventReceivedTS;
        __int16 v31 = 2050;
        double v32 = v22;
        _os_signpost_emit_with_name_impl(&dword_25631F000, v21, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "triggerFallbackLocalizationEvent: fLastTrigger is in the past", "{\"msg%{public}.0s\":\"triggerFallbackLocalizationEvent: fLastTrigger is in the past\", \"triggerTS\":\"%{public}.3f\", \"fLastLocalizationTriggerTS\":\"%{public}.3f\"}", (uint8_t *)&v25, 0x26u);
      }
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_74);
    }
    int v23 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      double v24 = EventReceivedTS - *((double *)this + 15);
      int v25 = 68289538;
      int v26 = 0;
      __int16 v27 = 2082;
      __int16 v28 = "";
      __int16 v29 = 2050;
      double v30 = v15;
      __int16 v31 = 2050;
      double v32 = v24;
      _os_log_impl(&dword_25631F000, v23, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"triggerFallbackLocalizationEvent: requesting localization on screen on because we haven't localized for more than \", \"Max time between localizations\":\"%{public}f\", \"Time since last_s\":\"%{public}.09f\"}", (uint8_t *)&v25, 0x26u);
    }
    CLMicroLocationTriggerManager::requestLocalization((uint64_t)this, a2, 1, 0, 0);
  }
}

void sub_25644F6B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25644F70C()
{
}

uint64_t CLMicroLocationTriggerManager::triggerScreenUnlockLocalizationIfNeeded(CLMicroLocationTriggerManager *this, const CLMicroLocationProto::RecordingEvent *a2)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v4 = +[ULDefaultsSingleton shared];
  char v5 = [v4 defaultsDictionary];

  uint64_t v6 = [NSString stringWithUTF8String:"ULEnableScreenUnlockLocalization"];
  uint64_t v7 = [v5 objectForKey:v6];
  if (v7 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    int v8 = [v7 BOOLValue];
  }
  else {
    int v8 = [MEMORY[0x263EFFA88] BOOLValue];
  }
  int v9 = v8;

  if (!v9 || !*((unsigned char *)this + 9) || *((_DWORD *)this + 26) != 1) {
    return 5;
  }
  uint64_t v10 = +[ULDefaultsSingleton shared];
  long long v11 = [v10 defaultsDictionary];

  char v12 = [NSString stringWithUTF8String:"ULMinDurationForScreenUnlockSinceLastLocalization"];
  uint64_t v13 = [v11 objectForKey:v12];
  if (v13 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    [v13 doubleValue];
  }
  else {
    [&unk_2704F1CB0 doubleValue];
  }
  double v15 = v14;

  double EventReceivedTS = CLMicroLocationProtobufHelper::getEventReceivedTS(a2, v16);
  double v18 = *((double *)this + 15);
  if (EventReceivedTS < v18)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_74);
    }
    unsigned int v19 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      double v20 = *((double *)this + 15);
      int v28 = 68289538;
      int v29 = 0;
      __int16 v30 = 2082;
      __int16 v31 = "";
      __int16 v32 = 2050;
      double v33 = EventReceivedTS;
      __int16 v34 = 2050;
      double v35 = v20;
      _os_log_impl(&dword_25631F000, v19, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"triggerScreenUnlockLocalizationIfNeeded, fLastTrigger is in the past\", \"triggerTS\":\"%{public}.3f\", \"fLastLocalizationTriggerTS\":\"%{public}.3f\"}", (uint8_t *)&v28, 0x26u);
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_74);
    }
    int v21 = logObject_MicroLocation_Default;
    if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
    {
      double v22 = *((double *)this + 15);
      int v28 = 68289538;
      int v29 = 0;
      __int16 v30 = 2082;
      __int16 v31 = "";
      __int16 v32 = 2050;
      double v33 = EventReceivedTS;
      __int16 v34 = 2050;
      double v35 = v22;
      _os_signpost_emit_with_name_impl(&dword_25631F000, v21, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "triggerScreenUnlockLocalizationIfNeeded, fLastTrigger is in the past", "{\"msg%{public}.0s\":\"triggerScreenUnlockLocalizationIfNeeded, fLastTrigger is in the past\", \"triggerTS\":\"%{public}.3f\", \"fLastLocalizationTriggerTS\":\"%{public}.3f\"}", (uint8_t *)&v28, 0x26u);
    }
    goto LABEL_22;
  }
  if (EventReceivedTS - v18 < v15)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_74);
    }
    int v26 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO))
    {
      double v27 = EventReceivedTS - *((double *)this + 15);
      int v28 = 68289282;
      int v29 = 0;
      __int16 v30 = 2082;
      __int16 v31 = "";
      __int16 v32 = 2050;
      double v33 = v27;
      _os_log_impl(&dword_25631F000, v26, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"triggerScreenUnlockLocalizationIfNeeded, will not localize because too close to last localization\", \"Time since last_s\":\"%{public}.09f\"}", (uint8_t *)&v28, 0x1Cu);
    }
    return 5;
  }
LABEL_22:
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_74);
  }
  int v23 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    double v24 = EventReceivedTS - *((double *)this + 15);
    int v28 = 68289538;
    int v29 = 0;
    __int16 v30 = 2082;
    __int16 v31 = "";
    __int16 v32 = 2050;
    double v33 = v15;
    __int16 v34 = 2050;
    double v35 = v24;
    _os_log_impl(&dword_25631F000, v23, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"triggerScreenUnlockLocalizationIfNeeded, requesting localization on screen unlock\", \"Minimum duration since last localization\":\"%{public}f\", \"Time since last_s\":\"%{public}.09f\"}", (uint8_t *)&v28, 0x26u);
  }
  return CLMicroLocationTriggerManager::requestLocalization((uint64_t)this, a2, 1, 0, 0);
}

void sub_25644FBA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25644FBF8()
{
}

void CLMicroLocationTriggerManager::onDisplayState(CLMicroLocationTriggerManager *this, char a2)
{
  *((unsigned char *)this + 134) = a2;
  if (*((unsigned char *)this + 133))
  {
    uint64_t v3 = (CLMiLoCustomLoiRecordingManager *)*((void *)this + 25);
    CLMiLoCustomLoiRecordingManager::deviceScreenState(v3, a2);
  }
  else if ((ULSettings::get<ULSettings::OffScreenScanEnabled>() & 1) == 0 && *((unsigned char *)this + 134))
  {
    CLMicroLocationTriggerManager::handleDisplayOn(this);
  }
}

uint64_t CLMicroLocationTriggerManager::handleDisplayOn(CLMicroLocationTriggerManager *this)
{
  if (!*((unsigned char *)this + 132)) {
    CLMicroLocationTriggerManager::onDelayedLocalizationTrigger((uint64_t)this, 1);
  }
  return CLMicroLocationTriggerManager::requestMotion(this, 1);
}

CLMicroLocationTriggerManager *CLMicroLocationTriggerManager::onAPWakeState(CLMicroLocationTriggerManager *this, int a2)
{
  if (a2) {
    return (CLMicroLocationTriggerManager *)CLMicroLocationTriggerManager::handleDisplayOn(this);
  }
  return this;
}

void CLMicroLocationTriggerManager::onDeviceStaticState(CLMiLoCustomLoiRecordingManager **this, char a2)
{
  if (*((unsigned char *)this + 133)) {
    CLMiLoCustomLoiRecordingManager::deviceStaticState(this[25], a2);
  }
}

void CLMicroLocationTriggerManager::onDelayedLocalizationTrigger(uint64_t a1, int a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  *(unsigned char *)(a1 + 132) = 0;
  if (*(unsigned char *)(a1 + 185)) {
    *(unsigned char *)(a1 + 185) = 0;
  }
  int v4 = ULSettings::get<ULSettings::OffScreenScanEnabled>();
  uint64_t v5 = **(void **)(a1 + 192);
  if (!v4)
  {
    if (((*(uint64_t (**)(void))(v5 + 104))() & 1) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    *(_OWORD *)std::string buf = *(_OWORD *)(a1 + 80);
    *(void *)&uint8_t buf[16] = *(void *)(a1 + 96);
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 80) = 0;
    std::vector<CLMicroLocationProto::RecordingEvent>::__vdeallocate((void **)(a1 + 80));
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 96) = 0;
    memset(v7, 0, sizeof(v7));
    int v8 = v7;
    std::vector<CLMicroLocationProto::RecordingEvent>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
    CLMicroLocationTriggerManager::handleQueuedLocalizations(a1, buf, a2);
    v7[0] = (void **)buf;
    std::vector<CLMicroLocationProto::RecordingEvent>::__destroy_vector::operator()[abi:ne180100](v7);
    return;
  }
  if ((*(uint64_t (**)(void))(v5 + 112))()) {
    goto LABEL_10;
  }
LABEL_5:
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_74);
  }
  uint64_t v6 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    _os_log_impl(&dword_25631F000, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationTriggerManager: get delayed trigger timeout, awaiting display on\"}", buf, 0x12u);
  }
}

void sub_25644FEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

__n128 CLMicroLocationTriggerManager::getCurrentLocalizationUUID@<Q0>(CLMicroLocationTriggerManager *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *(__n128 *)((char *)this + 135);
  *a2 = result;
  a2[1].n128_u8[0] = *((unsigned char *)this + 151);
  return result;
}

__n128 CLMicroLocationTriggerManager::getRescheduledLocalizationUUID@<Q0>(CLMicroLocationTriggerManager *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *(__n128 *)((char *)this + 169);
  *a2 = result;
  a2[1].n128_u8[0] = *((unsigned char *)this + 185);
  return result;
}

BOOL CLMicroLocationTriggerManager::isMacInternalTrigger(CLMicroLocationTriggerManager *this, const CLMicroLocationProto::RecordingEvent *a2)
{
  if ((*((unsigned char *)this + 141) & 4) == 0) {
    return 0;
  }
  uint64_t v2 = *((void *)this + 11);
  if (!v2) {
    uint64_t v2 = *(void *)(CLMicroLocationProto::RecordingEvent::default_instance(this) + 88);
  }
  uint64_t v3 = *(uint64_t **)(v2 + 16);
  int v4 = *((char *)v3 + 23);
  if (v4 < 0)
  {
    if (v3[1] != 17) {
      return 0;
    }
    uint64_t v3 = (uint64_t *)*v3;
  }
  else if (v4 != 17)
  {
    return 0;
  }
  uint64_t v5 = (uint64_t *)*v3;
  uint64_t v6 = v3[1];
  int v7 = *((unsigned __int8 *)v3 + 16);
  return v5 == (uint64_t *)0x6C616E7265746E49 && v6 == 0x614D746E65696C43 && v7 == 99;
}

uint64_t CLMicroLocationTriggerManager::shouldReject(CLMicroLocationTriggerManager *this, const CLMicroLocationProto::RecordingEvent *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 132)) {
    int v3 = (*((_DWORD *)a2 + 35) >> 10) & 1;
  }
  else {
    int v3 = 0;
  }
  BOOL v4 = CLMicroLocationTriggerManager::isMacInternalTrigger(a2, a2) && *((unsigned char *)this + 109) != 0;
  if (*((unsigned char *)this + 9)) {
    uint64_t v5 = v3 | v4;
  }
  else {
    uint64_t v5 = 1;
  }
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_74);
  }
  uint64_t v6 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *((unsigned __int8 *)this + 9);
    v9[0] = 68290050;
    v9[1] = 0;
    __int16 v10 = 2082;
    long long v11 = "";
    __int16 v12 = 1026;
    int v13 = v7;
    __int16 v14 = 1026;
    int v15 = v3;
    __int16 v16 = 1026;
    BOOL v17 = v4;
    __int16 v18 = 1026;
    int v19 = v5;
    _os_log_impl(&dword_25631F000, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationTriggerManager: shouldReject\", \"spectating\":%{public}hhd, \"isRecordingRequestDuringWaitForRescheduledTrigger\":%{public}hhd, \"macTriggerThrottle\":%{public}hhd, \"result\":%{public}hhd}", (uint8_t *)v9, 0x2Au);
  }
  return v5;
}

std::string *CLMicroLocationTriggerManager::getClientTypeStr@<X0>(const CLMicroLocationProto::RecordingEvent *a1@<X1>, std::string *a2@<X8>)
{
  __n128 result = (std::string *)std::string::basic_string[abi:ne180100]<0>(a2, "");
  int v6 = *((_DWORD *)a1 + 35);
  if ((v6 & 4) != 0)
  {
    std::string::size_type v7 = *((void *)a1 + 2);
    if (!v7)
    {
      __n128 result = (std::string *)CLMicroLocationProto::RecordingEvent::default_instance((CLMicroLocationProto::RecordingEvent *)result);
      std::string::size_type v7 = result->__r_.__value_.__r.__words[2];
    }
    if ((*(unsigned char *)(v7 + 44) & 4) != 0)
    {
      uint64_t v9 = *((void *)a1 + 2);
      if (!v9) {
        uint64_t v9 = *(void *)(CLMicroLocationProto::RecordingEvent::default_instance((CLMicroLocationProto::RecordingEvent *)result)
      }
                       + 16);
      return std::string::operator=(a2, *(const std::string **)(v9 + 16));
    }
    int v6 = *((_DWORD *)a1 + 35);
  }
  if ((v6 & 0x400) != 0)
  {
    std::string::size_type v8 = *((void *)a1 + 11);
    if (!v8)
    {
      __n128 result = (std::string *)CLMicroLocationProto::RecordingEvent::default_instance((CLMicroLocationProto::RecordingEvent *)result);
      std::string::size_type v8 = result[3].__r_.__value_.__r.__words[2];
    }
    if ((*(unsigned char *)(v8 + 44) & 4) != 0)
    {
      uint64_t v9 = *((void *)a1 + 11);
      if (!v9) {
        uint64_t v9 = *(void *)(CLMicroLocationProto::RecordingEvent::default_instance((CLMicroLocationProto::RecordingEvent *)result)
      }
                       + 88);
      return std::string::operator=(a2, *(const std::string **)(v9 + 16));
    }
  }
  return result;
}

void sub_256450180(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_60()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

uint64_t std::vector<CLMicroLocationProto::RecordingEvent>::__emplace_back_slow_path<CLMicroLocationProto::RecordingEvent const&>(uint64_t *a1, const CLMicroLocationProto::RecordingEvent *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x1C71C71C71C71C7) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xE38E38E38E38E3) {
    unint64_t v9 = 0x1C71C71C71C71C7;
  }
  else {
    unint64_t v9 = v5;
  }
  BOOL v17 = a1 + 2;
  if (v9) {
    __int16 v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationProto::RecordingEvent>>(v7, v9);
  }
  else {
    __int16 v10 = 0;
  }
  int v13 = v10;
  __int16 v14 = (CLMicroLocationProto::RecordingEvent *)&v10[144 * v4];
  __int16 v16 = &v10[144 * v9];
  CLMicroLocationProto::RecordingEvent::RecordingEvent(v14, a2);
  int v15 = (char *)v14 + 144;
  std::vector<CLMicroLocationProto::RecordingEvent>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<CLMicroLocationProto::RecordingEvent>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_256450374(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMicroLocationProto::RecordingEvent>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMicroLocationProto::RecordingEvent>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationProto::RecordingEvent>,std::reverse_iterator<CLMicroLocationProto::RecordingEvent*>,std::reverse_iterator<CLMicroLocationProto::RecordingEvent*>,std::reverse_iterator<CLMicroLocationProto::RecordingEvent*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationProto::RecordingEvent>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1C71C71C71C71C8) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(144 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationProto::RecordingEvent>,std::reverse_iterator<CLMicroLocationProto::RecordingEvent*>,std::reverse_iterator<CLMicroLocationProto::RecordingEvent*>,std::reverse_iterator<CLMicroLocationProto::RecordingEvent*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t i = 0;
        a3 + i != a5;
        CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)(i + a7), (const CLMicroLocationProto::RecordingEvent *)(i + a3)))
  {
    i -= 144;
  }
  return a6;
}

uint64_t std::__split_buffer<CLMicroLocationProto::RecordingEvent>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = *(void (***)(void))(i - 144);
    *(void *)(a1 + 16) = i - 144;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<CLMicroLocationProto::RecordingEvent>::__vdeallocate(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    unint64_t v4 = *a1;
    if (v3 != v1)
    {
      uint64_t v5 = v3 - 144;
      uint64_t v6 = v3 - 144;
      uint64_t v7 = v3 - 144;
      do
      {
        uint64_t v8 = *(void (***)(char *))v7;
        v7 -= 144;
        (*v8)(v6);
        v5 -= 144;
        BOOL v9 = v6 == v1;
        uint64_t v6 = v7;
      }
      while (!v9);
      unint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void *std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>(uint64_t a1, void *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  do
    v8 ^= (v8 << 6) + (v8 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v7++);
  while (v7 != 16);
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      __int16 v12 = *v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == *a2 && v12[3] == a2[1]) {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4) {
              break;
            }
          }
          __int16 v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  __int16 v12 = operator new(0x28uLL);
  *__int16 v12 = 0;
  v12[1] = v8;
  *((_OWORD *)v12 + 1) = **a4;
  *((_DWORD *)v12 + 8) = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  double v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *__int16 v12 = *v22;
LABEL_44:
    void *v22 = v12;
    goto LABEL_45;
  }
  *__int16 v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*v12)
  {
    unint64_t v23 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    double v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_25645082C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::__erase_unique<boost::uuids::uuid>(void *a1, void *a2)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::find<boost::uuids::uuid>(a1, a2);
  if (result)
  {
    std::__hash_table<boost::uuids::uuid,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,std::allocator<boost::uuids::uuid>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::vector<CLMicroLocationProto::RecordingEvent>::__assign_with_size[abi:ne180100]<CLMicroLocationProto::RecordingEvent*,CLMicroLocationProto::RecordingEvent*>(uint64_t a1, CLMicroLocationProto::RecordingEvent *a2, CLMicroLocationProto::RecordingEvent *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = *(CLMicroLocationProto::RecordingEvent **)a1;
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) < a4)
  {
    std::vector<CLMicroLocationProto::RecordingEvent>::__vdeallocate((void **)a1);
    if (a4 > 0x1C71C71C71C71C7) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x1C71C71C71C71C72 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v11 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<CLMicroLocationProto::RecordingEvent>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationProto::RecordingEvent>,CLMicroLocationProto::RecordingEvent*,CLMicroLocationProto::RecordingEvent*,CLMicroLocationProto::RecordingEvent*>(v8, (uint64_t)a2, (uint64_t)a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4) < a4)
  {
    unint64_t v13 = (CLMicroLocationProto::RecordingEvent *)((char *)a2 + 16 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,CLMicroLocationProto::RecordingEvent *,CLMicroLocationProto::RecordingEvent *,CLMicroLocationProto::RecordingEvent *,0>(a2, v13, v9);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationProto::RecordingEvent>,CLMicroLocationProto::RecordingEvent*,CLMicroLocationProto::RecordingEvent*,CLMicroLocationProto::RecordingEvent*>(v8, (uint64_t)v13, (uint64_t)a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = result;
    return result;
  }
  uint64_t result = (uint64_t)std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,CLMicroLocationProto::RecordingEvent *,CLMicroLocationProto::RecordingEvent *,CLMicroLocationProto::RecordingEvent *,0>(a2, a3, v9);
  float v15 = v14;
  float v16 = *(uint64_t (****)(void))(a1 + 8);
  if (v16 != v14)
  {
    BOOL v17 = v16 - 18;
    unint64_t v18 = v16 - 18;
    unint64_t v19 = v16 - 18;
    do
    {
      size_t v20 = *v19;
      v19 -= 18;
      uint64_t result = (*v20)(v18);
      v17 -= 18;
      BOOL v21 = v18 == v15;
      unint64_t v18 = v19;
    }
    while (!v21);
  }
  *(void *)(a1 + 8) = v15;
  return result;
}

void sub_256450A28(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_256450A30(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *std::vector<CLMicroLocationProto::RecordingEvent>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x1C71C71C71C71C8) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationProto::RecordingEvent>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[144 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationProto::RecordingEvent>,CLMicroLocationProto::RecordingEvent*,CLMicroLocationProto::RecordingEvent*,CLMicroLocationProto::RecordingEvent*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)(a4 + v7), (const CLMicroLocationProto::RecordingEvent *)(a2 + v7));
      v7 += 144;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_256450AFC(_Unwind_Exception *exception_object)
{
  if (v3) {
    std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationProto::RecordingEvent>,CLMicroLocationProto::RecordingEvent*,CLMicroLocationProto::RecordingEvent*,CLMicroLocationProto::RecordingEvent*>(v2, v1);
  }
  _Unwind_Resume(exception_object);
}

CLMicroLocationProto::RecordingEvent *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,CLMicroLocationProto::RecordingEvent *,CLMicroLocationProto::RecordingEvent *,CLMicroLocationProto::RecordingEvent *,0>(CLMicroLocationProto::RecordingEvent *a1, CLMicroLocationProto::RecordingEvent *a2, CLMicroLocationProto::RecordingEvent *this)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      CLMicroLocationProto::RecordingEvent::CopyFrom(this, v4);
      uint64_t v4 = (const CLMicroLocationProto::RecordingEvent *)((char *)v4 + 144);
      this = (CLMicroLocationProto::RecordingEvent *)((char *)this + 144);
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t CLMicroLocationScanBuffer::CLMicroLocationScanBuffer(uint64_t result, double a2)
{
  *(_OWORD *)uint64_t result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(double *)(result + 32) = a2;
  return result;
}

void CLMicroLocationScanBuffer::ingestAps(uint64_t a1@<X0>, int **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 == v6)
  {
    double v24 = 0;
    uint64_t v25 = 0;
  }
  else
  {
    double v24 = 0;
    uint64_t v25 = 0;
    do
    {
      CLMicroLocationProto::WiFiRssi::WiFiRssi((CLMicroLocationProto::WiFiRssi *)v39, (const CLMicroLocationProto::WiFiRssi *)v5);
      double v7 = *(double *)&v40[4];
      if (*(double *)&v40[4] >= *(double *)(a1 + 24))
      {
        unint64_t v9 = *(const CLMicroLocationProto::WiFiRssi **)a1;
        uint64_t v8 = *(const CLMicroLocationProto::WiFiRssi **)(a1 + 8);
        while (v9 != v8)
        {
          CLMicroLocationProto::WiFiRssi::WiFiRssi((CLMicroLocationProto::WiFiRssi *)v28, v9);
          if (v31 == v41)
          {
            double v10 = v29 - v7;
            if (v29 - v7 < 0.0) {
              double v10 = -(v29 - v7);
            }
            if (v10 < *(double *)(a1 + 32))
            {
              if (v32 == v42[0] && v30 == *(float *)&v40[16] && *((_DWORD *)v9 + 12) == v5[12])
              {
                double v24 = (CLMacAddress *)((char *)v24 + 1);
                CLMicroLocationProto::WiFiRssi::~WiFiRssi((CLMicroLocationProto::WiFiRssi *)v28);
                goto LABEL_30;
              }
              if (onceToken_MicroLocation_Default != -1) {
                dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
              }
              unint64_t v11 = (id)logObject_MicroLocation_Default;
              if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
              {
                v26.var0 = CLMacAddress::newFromUint64(v41, v12);
                CLMacAddress::toCLStr(&v26, &__p);
                p_p = &__p;
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)std::string buf = 68289282;
                int v34 = 0;
                __int16 v35 = 2082;
                uint64_t v36 = "";
                __int16 v37 = 2082;
                int v38 = p_p;
                _os_log_impl(&dword_25631F000, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning AP matches timestamp and mac in buffer, but values are not same\", \"mac address\":%{public, location:escape_only}s}", buf, 0x1Cu);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
              }
            }
          }
          CLMicroLocationProto::WiFiRssi::~WiFiRssi((CLMicroLocationProto::WiFiRssi *)v28);
          unint64_t v9 = (const CLMicroLocationProto::WiFiRssi *)((char *)v9 + 56);
        }
        __int16 v14 = v5 + 12;
        unint64_t v15 = a3[1];
        if (v15 >= a3[2])
        {
          uint64_t v17 = std::vector<CLMiLoProtobufWrapper::WiFiRssi>::__emplace_back_slow_path<CLMicroLocationProto::WiFiRssi &,unsigned int const&>(a3, (const CLMicroLocationProto::WiFiRssi *)v39, v5 + 12);
        }
        else
        {
          int v16 = *v14;
          CLMicroLocationProto::WiFiRssi::WiFiRssi((CLMicroLocationProto::WiFiRssi *)a3[1], (const CLMicroLocationProto::WiFiRssi *)v39);
          *(_DWORD *)(v15 + 48) = v16;
          uint64_t v17 = v15 + 56;
          a3[1] = v15 + 56;
        }
        a3[1] = v17;
        unint64_t v18 = *(void *)(a1 + 8);
        if (v18 >= *(void *)(a1 + 16))
        {
          uint64_t v20 = std::vector<CLMiLoProtobufWrapper::WiFiRssi>::__emplace_back_slow_path<CLMicroLocationProto::WiFiRssi &,unsigned int const&>((uint64_t *)a1, (const CLMicroLocationProto::WiFiRssi *)v39, v5 + 12);
        }
        else
        {
          int v19 = *v14;
          CLMicroLocationProto::WiFiRssi::WiFiRssi(*(CLMicroLocationProto::WiFiRssi **)(a1 + 8), (const CLMicroLocationProto::WiFiRssi *)v39);
          *(_DWORD *)(v18 + 48) = v19;
          uint64_t v20 = v18 + 56;
          *(void *)(a1 + 8) = v18 + 56;
        }
        *(void *)(a1 + 8) = v20;
      }
      else
      {
        ++v25;
      }
LABEL_30:
      CLMicroLocationProto::WiFiRssi::~WiFiRssi((CLMicroLocationProto::WiFiRssi *)v39);
      v5 += 14;
    }
    while (v5 != v6);
  }
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
  }
  BOOL v21 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v22 = 0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 3);
    uint64_t v23 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
    *(_DWORD *)int v39 = 134349824;
    *(void *)uint64_t v40 = v22;
    *(_WORD *)&v40[8] = 2050;
    *(void *)&v40[10] = v25;
    *(_WORD *)&v40[18] = 2050;
    double v41 = v24;
    LOWORD(v42[0]) = 2050;
    *(void *)((char *)v42 + 2) = v23;
    _os_log_impl(&dword_25631F000, v21, OS_LOG_TYPE_DEFAULT, "Ingested %{public}ld new AP measurements, too old %{public}ld, dupe %{public}ld, buffer size %{public}ld", v39, 0x2Au);
  }
}

void sub_256450F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **a27)
{
  *(void *)(v27 + 8) = v28;
  CLMicroLocationProto::WiFiRssi::~WiFiRssi((CLMicroLocationProto::WiFiRssi *)&a27);
  std::vector<CLMiLoProtobufWrapper::WiFiRssi>::__destroy_vector::operator()[abi:ne180100](&a27);
  _Unwind_Resume(a1);
}

void CLMicroLocationScanBuffer::pruneAps(uint64_t a1@<X0>, uint64_t *a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  *(double *)(a1 + 24) = a3 - a4;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  std::vector<CLMiLoProtobufWrapper::WiFiRssi>::reserve(a2, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3));
  uint64_t v6 = *(CLMicroLocationProto::WiFiRssi **)a1;
  double v7 = *(CLMicroLocationProto::WiFiRssi **)(a1 + 8);
  if (*(CLMicroLocationProto::WiFiRssi **)a1 == v7)
  {
    double v7 = *(CLMicroLocationProto::WiFiRssi **)a1;
  }
  else
  {
    double v8 = *(double *)(a1 + 24);
    while (*((double *)v6 + 1) >= v8)
    {
      uint64_t v6 = (CLMicroLocationProto::WiFiRssi *)((char *)v6 + 56);
      if (v6 == v7)
      {
        uint64_t v6 = *(CLMicroLocationProto::WiFiRssi **)(a1 + 8);
        goto LABEL_13;
      }
    }
    if (v6 != v7)
    {
      unint64_t v9 = (CLMicroLocationProto::WiFiRssi *)((char *)v6 + 56);
      if ((CLMicroLocationProto::WiFiRssi *)((char *)v6 + 56) != v7)
      {
        do
        {
          if (*((double *)v9 + 1) >= v8)
          {
            CLMicroLocationProto::WiFiRssi::CopyFrom(v6, v9);
            *((_DWORD *)v6 + 12) = *((_DWORD *)v9 + 12);
            uint64_t v6 = (CLMicroLocationProto::WiFiRssi *)((char *)v6 + 56);
          }
          unint64_t v9 = (CLMicroLocationProto::WiFiRssi *)((char *)v9 + 56);
        }
        while (v9 != v7);
        double v7 = *(CLMicroLocationProto::WiFiRssi **)(a1 + 8);
      }
    }
  }
LABEL_13:
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<CLMiLoProtobufWrapper::WiFiRssi *>,std::__wrap_iter<CLMiLoProtobufWrapper::WiFiRssi *>,std::back_insert_iterator<std::vector<CLMiLoProtobufWrapper::WiFiRssi>>,0>(v6, v7, a2);
  std::vector<CLMiLoProtobufWrapper::WiFiRssi>::erase(a1, v6, *(CLMicroLocationProto::WiFiRssi **)(a1 + 8));
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
  }
  double v10 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3);
    uint64_t v12 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
    int v13 = 134349312;
    uint64_t v14 = v11;
    __int16 v15 = 2050;
    uint64_t v16 = v12;
    _os_log_impl(&dword_25631F000, v10, OS_LOG_TYPE_DEFAULT, "Pruned %{public}ld AP measurements, buffer size %{public}ld", (uint8_t *)&v13, 0x16u);
  }
}

void sub_256451180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t CLMicroLocationScanBuffer::numberOfUniqueWifiAccessPoints(CLMicroLocationScanBuffer *this)
{
  double v7 = 0;
  uint64_t v8 = 0;
  uint64_t v6 = (uint64_t *)&v7;
  uint64_t v1 = *(void *)this;
  uint64_t v2 = *((void *)this + 1);
  if (*(void *)this == v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
  }
  else
  {
    do
    {
      uint64_t v9 = *(void *)(v1 + 24);
      std::__tree<unsigned long long>::__emplace_unique_key_args<unsigned long long,unsigned long long>(&v6, (unint64_t *)&v9, &v9);
      v1 += 56;
    }
    while (v1 != v2);
    uint64_t v3 = v7;
    uint64_t v4 = v8;
  }
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&v6, v3);
  return v4;
}

void sub_256451224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_61()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

uint64_t std::vector<CLMiLoProtobufWrapper::WiFiRssi>::__emplace_back_slow_path<CLMicroLocationProto::WiFiRssi &,unsigned int const&>(uint64_t *a1, const CLMicroLocationProto::WiFiRssi *a2, int *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x492492492492492) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v4) >> 3);
  if (2 * v10 > v6) {
    unint64_t v6 = 2 * v10;
  }
  if (v10 >= 0x249249249249249) {
    unint64_t v11 = 0x492492492492492;
  }
  else {
    unint64_t v11 = v6;
  }
  uint64_t v20 = a1 + 2;
  if (v11) {
    uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMiLoProtobufWrapper::WiFiRssi>>(v9, v11);
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v16 = v12;
  uint64_t v17 = (CLMicroLocationProto::WiFiRssi *)&v12[56 * v5];
  unint64_t v18 = v17;
  int v19 = &v12[56 * v11];
  int v13 = *a3;
  CLMicroLocationProto::WiFiRssi::WiFiRssi(v17, a2);
  *((_DWORD *)v17 + 12) = v13;
  unint64_t v18 = (CLMicroLocationProto::WiFiRssi *)((char *)v18 + 56);
  std::vector<CLMiLoProtobufWrapper::WiFiRssi>::__swap_out_circular_buffer(a1, &v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<CLMiLoProtobufWrapper::WiFiRssi>::~__split_buffer((uint64_t)&v16);
  return v14;
}

void sub_2564513A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMiLoProtobufWrapper::WiFiRssi>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

CLMicroLocationProto::WiFiRssi *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<CLMiLoProtobufWrapper::WiFiRssi *>,std::__wrap_iter<CLMiLoProtobufWrapper::WiFiRssi *>,std::back_insert_iterator<std::vector<CLMiLoProtobufWrapper::WiFiRssi>>,0>(CLMicroLocationProto::WiFiRssi *a1, CLMicroLocationProto::WiFiRssi *a2, uint64_t *a3)
{
  uint64_t v3 = a1;
  unint64_t v6 = a3;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v4 = a2;
  do
  {
    std::back_insert_iterator<std::vector<CLMiLoProtobufWrapper::WiFiRssi>>::operator=[abi:ne180100](&v6, v3);
    uint64_t v3 = (CLMicroLocationProto::WiFiRssi *)((char *)v3 + 56);
  }
  while (v3 != v4);
  return v4;
}

uint64_t **std::back_insert_iterator<std::vector<CLMiLoProtobufWrapper::WiFiRssi>>::operator=[abi:ne180100](uint64_t **a1, CLMicroLocationProto::WiFiRssi *a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = (*a1)[1];
  if (v5 >= (*a1)[2])
  {
    uint64_t v6 = std::vector<CLMiLoProtobufWrapper::WiFiRssi>::__push_back_slow_path<CLMiLoProtobufWrapper::WiFiRssi const&>(*a1, a2);
  }
  else
  {
    CLMicroLocationProto::WiFiRssi::WiFiRssi((CLMicroLocationProto::WiFiRssi *)(*a1)[1], a2);
    *(_DWORD *)(v5 + 48) = *((_DWORD *)a2 + 12);
    uint64_t v6 = v5 + 56;
    v4[1] = v5 + 56;
  }
  v4[1] = v6;
  return a1;
}

void sub_256451490(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMiLoProtobufWrapper::WiFiRssi>::__push_back_slow_path<CLMiLoProtobufWrapper::WiFiRssi const&>(uint64_t *a1, const CLMicroLocationProto::WiFiRssi *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x249249249249249) {
    unint64_t v9 = 0x492492492492492;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMiLoProtobufWrapper::WiFiRssi>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  int v13 = v10;
  uint64_t v14 = (CLMicroLocationProto::WiFiRssi *)&v10[56 * v4];
  __int16 v15 = v14;
  uint64_t v16 = &v10[56 * v9];
  CLMicroLocationProto::WiFiRssi::WiFiRssi(v14, a2);
  *((_DWORD *)v14 + 12) = *((_DWORD *)a2 + 12);
  __int16 v15 = (CLMicroLocationProto::WiFiRssi *)((char *)v15 + 56);
  std::vector<CLMiLoProtobufWrapper::WiFiRssi>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<CLMiLoProtobufWrapper::WiFiRssi>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_2564515B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMiLoProtobufWrapper::WiFiRssi>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<unsigned long long>::__emplace_unique_key_args<unsigned long long,unsigned long long>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 1;
  unint64_t v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        unint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      unint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v8 = a1 + 1;
LABEL_10:
    unint64_t v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

__n128 CLMiLoService::ServiceDescriptor::ServiceDescriptor(__n128 *a1, __n128 *a2, unint64_t a3, unint64_t a4)
{
  __n128 result = *a2;
  *a1 = *a2;
  a1[1].n128_u64[0] = a3;
  a1[1].n128_u64[1] = a4;
  return result;
}

uint64_t CLMiLoService::ServiceDescriptor::ServiceDescriptor(uint64_t this)
{
  *(void *)(this + 24) = 0;
  return this;
}

void *CLMiLoService::settingsString@<X0>(CLMiLoService *this@<X0>, void *a2@<X8>)
{
  unint64_t v2 = *((void *)this + 3) - 1;
  if (v2 >= 4)
  {
    CLMiLoService::settingsString();
    return _CLLogObjectForCategory_MicroLocation_Default();
  }
  else
  {
    uint64_t v3 = off_2653F9D18[v2];
    return std::string::basic_string[abi:ne180100]<0>(a2, v3);
  }
}

uint64_t CLMiLoService::CLMiLoService(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, long long *a7, long long *a8, uint64_t a9)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  if (*((char *)a7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)a7, *((void *)a7 + 1));
  }
  else
  {
    long long v11 = *a7;
    *(void *)(a1 + 56) = *((void *)a7 + 2);
    *(_OWORD *)(a1 + 40) = v11;
  }
  uint64_t v12 = (std::string *)(a1 + 64);
  if (*((char *)a8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a8, *((void *)a8 + 1));
  }
  else
  {
    long long v13 = *a8;
    *(void *)(a1 + 80) = *((void *)a8 + 2);
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
  }
  *(unsigned char *)(a1 + 296) = 0;
  *(unsigned char *)(a1 + 368) = 0;
  *(unsigned char *)(a1 + 440) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(unsigned char *)(a1 + 352) = 0;
  *(unsigned char *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(void *)(a1 + 448) = a9;
  *(_WORD *)(a1 + 456) = 0;
  *(unsigned char *)(a1 + 458) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 1;
  return a1;
}

void sub_256451814(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

unint64_t CLMiLoService::uint64ToLocationTypesBitset(unint64_t this)
{
  if (HIDWORD(this))
  {
    uint64_t v1 = CLMiLoService::uint64ToLocationTypesBitset();
    return CLMiLoService::CLMiLoService(v1);
  }
  return this;
}

uint64_t CLMiLoService::CLMiLoService(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(a3 + 8);
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)a3;
  unint64_t v11 = *(void *)(a3 + 56);
  CLMiLoService::uint64ToLocationTypesBitset(v11);
  if (*(char *)(a3 + 55) < 0) {
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)(a3 + 32), *(void *)(a3 + 40));
  }
  else {
    std::string v14 = *(std::string *)(a3 + 32);
  }
  if (*(char *)(a3 + 87) < 0) {
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)(a3 + 64), *(void *)(a3 + 72));
  }
  else {
    std::string v13 = *(std::string *)(a3 + 64);
  }
  CLMiLoService::CLMiLoService(a1, a2, v9, v8, v10, v11, (long long *)&v14, (long long *)&v13, a4);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_256451950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CLMiLoService::uuid(CLMiLoService *this)
{
  return *((void *)this + 1);
}

uint64_t CLMiLoService::clientId(CLMiLoService *this)
{
  return (uint64_t)this + 40;
}

uint64_t CLMiLoService::userId(CLMiLoService *this)
{
  return (uint64_t)this + 64;
}

void CLMiLoService::modelClientIdentifierStringForServiceTypeAndClientId(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  if (a1 == 1)
  {
    std::string::basic_string[abi:ne180100]<0>(a3, "kMiLoClientIdentifierUnsupervisedShared");
  }
  else if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  }
}

void CLMiLoService::modelClientIdentifierString(CLMiLoService *this@<X0>, std::string *a2@<X8>)
{
}

uint64_t CLMiLoService::serviceType(CLMiLoService *this)
{
  return *((void *)this + 3);
}

uint64_t CLMiLoService::locationTypes(CLMiLoService *this)
{
  return *((void *)this + 4);
}

uint64_t CLMiLoService::isLocationTypeEnabled(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x20) {
    std::__throw_out_of_range[abi:ne180100]("bitset test argument out of range");
  }
  return (*(void *)(a1 + 32) >> a2) & 1;
}

uint64_t CLMiLoService::enableInLocationType(uint64_t result, unint64_t a2)
{
  if (a2 >= 0x20) {
    std::__throw_out_of_range[abi:ne180100]("bitset set argument out of range");
  }
  *(void *)(result + 32) |= 1 << a2;
  return result;
}

uint64_t CLMiLoService::disableInLocationType(uint64_t result, unint64_t a2)
{
  if (a2 >= 0x20) {
    std::__throw_out_of_range[abi:ne180100]("bitset set argument out of range");
  }
  *(void *)(result + 32) &= ~(1 << a2);
  return result;
}

void CLMiLoService::sendCachedResults(CLMiLoService *this, const uuid *a2)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 296))
  {
    uint64_t v4 = (void *)((char *)this + 40);
    int v5 = (*(uint64_t (**)(void))(**(void **)this + 96))();
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
    }
    uint64_t v6 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v7 = operator new(0x28uLL);
      std::string __p = v7;
      long long v25 = xmmword_256514540;
      *unint64_t v7 = 0u;
      v7[1] = 0u;
      *(void *)((char *)v7 + 29) = 0;
      boost::uuids::to_chars<char *>((uint64_t)this + 8, v7);
      if (v25 >= 0) {
        p_p = (char *)&__p;
      }
      else {
        p_p = (char *)__p;
      }
      if (*((char *)this + 63) < 0) {
        uint64_t v4 = (void *)*v4;
      }
      if (!*((unsigned char *)this + 296)) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      uint64_t v9 = (char *)operator new(0x28uLL);
      *(void *)(v9 + 29) = 0;
      *(_OWORD *)uint64_t v9 = 0u;
      *((_OWORD *)v9 + 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)this + 280, v9);
      uint64_t v10 = (char *)operator new(0x28uLL);
      *(void *)(v10 + 29) = 0;
      *(_OWORD *)uint64_t v10 = 0u;
      *((_OWORD *)v10 + 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)a2, v10);
      *(_DWORD *)std::string buf = 68290306;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      __int16 v27 = 2082;
      uint64_t v28 = p_p;
      __int16 v29 = 2082;
      float v30 = v4;
      __int16 v31 = 2082;
      int v32 = v9;
      __int16 v33 = 2082;
      int v34 = v10;
      __int16 v35 = 1026;
      int v36 = v5;
      _os_log_impl(&dword_25631F000, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoService sending cached results to client: \", \"ServiceId\":%{public, location:escape_only}s, \"ClientId\":%{public, location:escape_only}s, \"Cached LocalizationId\":%{public, location:escape_only}s, \"RequestId\":%{public, location:escape_only}s, \"Succeeded to save trigger\":%{public}hhd}", buf, 0x40u);
      operator delete(v10);
      operator delete(v9);
      if (SHIBYTE(v25) < 0) {
        operator delete(__p);
      }
    }

    uint64_t v11 = *(void *)this;
    *(uuid *)std::string buf = *a2;
    uint8_t buf[16] = 1;
    if (!*((unsigned char *)this + 296)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    (*(void (**)(uint64_t, char *, unsigned char *, char *))(*(void *)v11 + 32))(v11, (char *)this + 8, buf, (char *)this + 112);
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
    }
    uint64_t v12 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      std::string v13 = operator new(0x28uLL);
      std::string __p = v13;
      long long v25 = xmmword_256514540;
      _OWORD *v13 = 0u;
      v13[1] = 0u;
      *(void *)((char *)v13 + 29) = 0;
      boost::uuids::to_chars<char *>((uint64_t)this + 8, v13);
      if (v25 >= 0) {
        std::string v14 = (char *)&__p;
      }
      else {
        std::string v14 = (char *)__p;
      }
      __int16 v15 = (void *)((char *)this + 40);
      if (*((char *)this + 63) < 0) {
        __int16 v15 = (void *)*v15;
      }
      uint64_t v16 = operator new(0x28uLL);
      uint64_t v22 = v16;
      long long v23 = xmmword_256514540;
      _OWORD *v16 = 0u;
      v16[1] = 0u;
      *(void *)((char *)v16 + 29) = 0;
      boost::uuids::to_chars<char *>((uint64_t)a2, v16);
      uint64_t v17 = (char *)&v22;
      if (v23 < 0) {
        uint64_t v17 = (char *)v22;
      }
      *(_DWORD *)std::string buf = 68289794;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      __int16 v27 = 2082;
      uint64_t v28 = v14;
      __int16 v29 = 2082;
      float v30 = v15;
      __int16 v31 = 2082;
      int v32 = v17;
      _os_log_impl(&dword_25631F000, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLMiLoService tried to send cached results to client but no cache available:\", \"ServiceId\":%{public, location:escape_only}s, \"ClientId\":%{public, location:escape_only}s, \"RequestId\":%{public, location:escape_only}s}", buf, 0x30u);
      if (SHIBYTE(v23) < 0) {
        operator delete(v22);
      }
      if (SHIBYTE(v25) < 0) {
        operator delete(__p);
      }
    }

    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
    }
    unint64_t v18 = (id)logObject_MicroLocation_Default;
    if (os_signpost_enabled(v18))
    {
      int v19 = (char *)operator new(0x28uLL);
      *(void *)(v19 + 29) = 0;
      *(_OWORD *)int v19 = 0u;
      *((_OWORD *)v19 + 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)this + 8, v19);
      uint64_t v20 = (void *)((char *)this + 40);
      if (*((char *)this + 63) < 0) {
        uint64_t v20 = (void *)*v20;
      }
      BOOL v21 = (char *)operator new(0x28uLL);
      *(void *)(v21 + 29) = 0;
      *(_OWORD *)BOOL v21 = 0u;
      *((_OWORD *)v21 + 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)a2, v21);
      *(_DWORD *)std::string buf = 68289794;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      __int16 v27 = 2082;
      uint64_t v28 = v19;
      __int16 v29 = 2082;
      float v30 = v20;
      __int16 v31 = 2082;
      int v32 = v21;
      _os_signpost_emit_with_name_impl(&dword_25631F000, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLMiLoService tried to send cached results to client but no cache available:", "{\"msg%{public}.0s\":\"CLMiLoService tried to send cached results to client but no cache available:\", \"ServiceId\":%{public, location:escape_only}s, \"ClientId\":%{public, location:escape_only}s, \"RequestId\":%{public, location:escape_only}s}", buf, 0x30u);
      operator delete(v21);
      operator delete(v19);
    }
  }
}

void sub_256451FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  operator delete(v19);
  operator delete(v21);

  _Unwind_Resume(a1);
}

void CLMiLoService::ingestLocalizationResults(int64x2_t *this, CLMicroLocationResultToPublish *a2, unsigned __int8 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  *(void *)&long long v63 = a4;
  *((void *)&v63 + 1) = a5;
  if (!this[5].i64[1])
  {
    uint64_t v7 = a3;
    if (a3
      && (!this[28].i8[9]
       || !this[28].i8[8]
       || (ULSettings::get<ULSettings::ForcePredictionForLowLatencyServiceEnabled>() & 1) == 0))
    {
      CLMicroLocationResultToPublish::CLMicroLocationResultToPublish((CLMicroLocationResultToPublish *)v42, a2);
      long long v8 = v63;
      CLMicroLocationResultToPublish::CLMicroLocationResultToPublish((CLMicroLocationResultToPublish *)buf, (const CLMicroLocationResultToPublish *)v42);
      long long v62 = v8;
      std::optional<CachedPrediction>::operator=[abi:ne180100]<CachedPrediction,void>((uint64_t)this[7].i64, (uint64_t)buf);
      if (__p)
      {
        unsigned int v61 = __p;
        operator delete(__p);
      }
      if (v59[40]) {
        std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::~__hash_table((uint64_t)v59);
      }
      if (v58 && v57 < 0) {
        operator delete(v56);
      }
      if (*(void *)buf)
      {
        *(void *)&uint8_t buf[8] = *(void *)buf;
        operator delete(*(void **)buf);
      }
      if (v46)
      {
        uint64_t v47 = v46;
        operator delete(v46);
      }
      if (v45[40]) {
        std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::~__hash_table((uint64_t)v45);
      }
      if (v44 && v43 < 0) {
        operator delete(v42[7]);
      }
      if (v42[0])
      {
        v42[1] = v42[0];
        operator delete(v42[0]);
      }
    }
    __int16 v35 = this + 22;
    if (this[23].i8[0]
      && (this[22].i64[0] == (void)v63 ? (BOOL v9 = this[22].i64[1] == *((void *)&v63 + 1)) : (BOOL v9 = 0), v9))
    {
      this[23].i8[0] = 0;
      if (v7)
      {
        while (this[21].i64[1])
        {
          long long v48 = *(_OWORD *)(*(void *)(this[19].i64[1] + 8 * (this[21].i64[0] / 0x78uLL))
                          + 34 * (this[21].i64[0] % 0x78uLL));
          if (onceToken_MicroLocation_Default != -1) {
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
          }
          __int16 v27 = (id)logObject_MicroLocation_Default;
          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v28 = operator new(0x28uLL);
            uint64_t v40 = v28;
            long long v41 = xmmword_256514540;
            _OWORD *v28 = 0u;
            v28[1] = 0u;
            *(void *)((char *)v28 + 29) = 0;
            boost::uuids::to_chars<char *>((uint64_t)&this->i64[1], v28);
            if (v41 >= 0) {
              __int16 v29 = (char *)&v40;
            }
            else {
              __int16 v29 = (char *)v40;
            }
            float v30 = operator new(0x28uLL);
            int v38 = v30;
            long long v39 = xmmword_256514540;
            *float v30 = 0u;
            v30[1] = 0u;
            *(void *)((char *)v30 + 29) = 0;
            boost::uuids::to_chars<char *>((uint64_t)&v63, v30);
            if (v39 >= 0) {
              __int16 v31 = (char *)&v38;
            }
            else {
              __int16 v31 = (char *)v38;
            }
            int v32 = operator new(0x28uLL);
            int v36 = v32;
            long long v37 = xmmword_256514540;
            *int v32 = 0u;
            v32[1] = 0u;
            *(void *)((char *)v32 + 29) = 0;
            boost::uuids::to_chars<char *>((uint64_t)&v48, v32);
            __int16 v33 = (char *)&v36;
            if (v37 < 0) {
              __int16 v33 = (char *)v36;
            }
            *(_DWORD *)std::string buf = 68289794;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)&uint8_t buf[8] = 2082;
            *(void *)&buf[10] = "";
            __int16 v50 = 2082;
            uint64_t v51 = v29;
            __int16 v52 = 2082;
            int v53 = v31;
            __int16 v54 = 2082;
            char v55 = v33;
            _os_log_impl(&dword_25631F000, v27, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoService received localization results, sending results to client: \", \"ServiceId\":%{public, location:escape_only}s, \"LocalizationId\":%{public, location:escape_only}s, \"RequestId\":%{public, location:escape_only}s}", buf, 0x30u);
            if (SHIBYTE(v37) < 0) {
              operator delete(v36);
            }
            if (SHIBYTE(v39) < 0) {
              operator delete(v38);
            }
            if (SHIBYTE(v41) < 0) {
              operator delete(v40);
            }
          }

          uint64_t v34 = this->i64[0];
          *(_OWORD *)std::string buf = v48;
          uint8_t buf[16] = 1;
          (*(void (**)(uint64_t, __int8 *, unsigned char *, CLMicroLocationResultToPublish *))(*(void *)v34 + 32))(v34, &this->i8[8], buf, a2);
          this[21] = vaddq_s64(this[21], (int64x2_t)xmmword_256516360);
          std::deque<CLMiLoService::OutstandingRequest>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)this[19].i64, 1);
        }
      }
      else
      {
        CLMiLoService::releaseOutstandingPredictionRequests(this, 3);
      }
    }
    else if (v7 && this[28].i8[9])
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
      }
      uint64_t v10 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = operator new(0x28uLL);
        uint64_t v40 = v11;
        long long v41 = xmmword_256514540;
        *uint64_t v11 = 0u;
        v11[1] = 0u;
        *(void *)((char *)v11 + 29) = 0;
        boost::uuids::to_chars<char *>((uint64_t)&this->i64[1], v11);
        if (v41 >= 0) {
          uint64_t v12 = (char *)&v40;
        }
        else {
          uint64_t v12 = (char *)v40;
        }
        std::string v13 = operator new(0x28uLL);
        int v38 = v13;
        long long v39 = xmmword_256514540;
        _OWORD *v13 = 0u;
        v13[1] = 0u;
        *(void *)((char *)v13 + 29) = 0;
        boost::uuids::to_chars<char *>((uint64_t)&v63, v13);
        std::string v14 = (char *)&v38;
        if (v39 < 0) {
          std::string v14 = (char *)v38;
        }
        *(_DWORD *)std::string buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        __int16 v50 = 2082;
        uint64_t v51 = v12;
        __int16 v52 = 2082;
        int v53 = v14;
        _os_log_impl(&dword_25631F000, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoService received localization results, reporting to client with service updating params\", \"ServiceId\":%{public, location:escape_only}s, \"LocalizationId\":%{public, location:escape_only}s}", buf, 0x26u);
        if (SHIBYTE(v39) < 0) {
          operator delete(v38);
        }
        if (SHIBYTE(v41) < 0) {
          operator delete(v40);
        }
      }

      uint64_t v15 = this->i64[0];
      *(_OWORD *)std::string buf = v63;
      uint8_t buf[16] = 1;
      (*(void (**)(uint64_t, __int8 *, unsigned char *, CLMicroLocationResultToPublish *))(*(void *)v15 + 32))(v15, &this->i8[8], buf, a2);
    }
    if (this[23].i8[0])
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
      }
      uint64_t v16 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        uint64_t v17 = operator new(0x28uLL);
        uint64_t v40 = v17;
        long long v41 = xmmword_256514540;
        *uint64_t v17 = 0u;
        v17[1] = 0u;
        *(void *)((char *)v17 + 29) = 0;
        boost::uuids::to_chars<char *>((uint64_t)&this->i64[1], v17);
        if (v41 >= 0) {
          unint64_t v18 = (char *)&v40;
        }
        else {
          unint64_t v18 = (char *)v40;
        }
        if (!this[23].i8[0]) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        int v19 = operator new(0x28uLL);
        int v38 = v19;
        long long v39 = xmmword_256514540;
        _OWORD *v19 = 0u;
        v19[1] = 0u;
        *(void *)((char *)v19 + 29) = 0;
        boost::uuids::to_chars<char *>((uint64_t)v35, v19);
        if (v39 >= 0) {
          uint64_t v20 = (char *)&v38;
        }
        else {
          uint64_t v20 = (char *)v38;
        }
        BOOL v21 = operator new(0x28uLL);
        int v36 = v21;
        long long v37 = xmmword_256514540;
        _OWORD *v21 = 0u;
        v21[1] = 0u;
        *(void *)((char *)v21 + 29) = 0;
        boost::uuids::to_chars<char *>((uint64_t)&v63, v21);
        uint64_t v22 = (char *)&v36;
        if (v37 < 0) {
          uint64_t v22 = (char *)v36;
        }
        *(_DWORD *)std::string buf = 68289794;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        __int16 v50 = 2082;
        uint64_t v51 = v18;
        __int16 v52 = 2082;
        int v53 = v20;
        __int16 v54 = 2082;
        char v55 = v22;
        _os_log_impl(&dword_25631F000, v16, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLMiLoService received localization results with unexpected / unmatching ID\", \"ServiceId\":%{public, location:escape_only}s, \"Expected localization ID\":%{public, location:escape_only}s, \"Received trigger ID\":%{public, location:escape_only}s}", buf, 0x30u);
        if (SHIBYTE(v37) < 0) {
          operator delete(v36);
        }
        if (SHIBYTE(v39) < 0) {
          operator delete(v38);
        }
        if (SHIBYTE(v41) < 0) {
          operator delete(v40);
        }
      }

      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
      }
      long long v23 = (id)logObject_MicroLocation_Default;
      if (os_signpost_enabled(v23))
      {
        double v24 = (char *)operator new(0x28uLL);
        *(void *)(v24 + 29) = 0;
        *(_OWORD *)double v24 = 0u;
        *((_OWORD *)v24 + 1) = 0u;
        boost::uuids::to_chars<char *>((uint64_t)&this->i64[1], v24);
        if (!this[23].i8[0]) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        long long v25 = (char *)operator new(0x28uLL);
        *(void *)(v25 + 29) = 0;
        *(_OWORD *)long long v25 = 0u;
        *((_OWORD *)v25 + 1) = 0u;
        boost::uuids::to_chars<char *>((uint64_t)v35, v25);
        CLMacAddress v26 = (char *)operator new(0x28uLL);
        *(void *)(v26 + 29) = 0;
        *(_OWORD *)CLMacAddress v26 = 0u;
        *((_OWORD *)v26 + 1) = 0u;
        boost::uuids::to_chars<char *>((uint64_t)&v63, v26);
        *(_DWORD *)std::string buf = 68289794;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        __int16 v50 = 2082;
        uint64_t v51 = v24;
        __int16 v52 = 2082;
        int v53 = v25;
        __int16 v54 = 2082;
        char v55 = v26;
        _os_signpost_emit_with_name_impl(&dword_25631F000, v23, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLMiLoService received localization results with unexpected / unmatching ID", "{\"msg%{public}.0s\":\"CLMiLoService received localization results with unexpected / unmatching ID\", \"ServiceId\":%{public, location:escape_only}s, \"Expected localization ID\":%{public, location:escape_only}s, \"Received trigger ID\":%{public, location:escape_only}s}", buf, 0x30u);
        operator delete(v26);
        operator delete(v25);
        operator delete(v24);
      }

      if (this[23].i8[0]) {
        this[23].i8[0] = 0;
      }
      CLMiLoService::releaseOutstandingPredictionRequests(this, 3);
    }
    CLMiLoService::applyRecentChangesToModel((CLMiLoService *)this);
  }
}

void sub_2564529A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  operator delete(v56);
  if (a31 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::ForcePredictionForLowLatencyServiceEnabled>()
{
  os_log_t v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  unint64_t v2 = [NSString stringWithUTF8String:"ULForcePredictionForLowLatencyServiceEnabled"];
  uint64_t v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 BOOLValue];
  }
  else {
    uint64_t v4 = [MEMORY[0x263EFFA88] BOOLValue];
  }
  uint64_t v5 = v4;

  return v5;
}

void sub_256452BDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::optional<CachedPrediction>::operator=[abi:ne180100]<CachedPrediction,void>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 184))
  {
    std::vector<CLMicroLocationResultInternal>::__move_assign(a1, (__n128 *)a2);
    long long v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 33);
    *(_OWORD *)(a1 + 24) = v4;
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1 + 56, (__n128 *)(a2 + 56));
    std::__optional_storage_base<std::unordered_map<std::string,AnchorValueStatistics>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::unordered_map<std::string,AnchorValueStatistics>,false>>(a1 + 88, a2 + 88);
    *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
    std::vector<CLMicroLocationResultInternal>::__move_assign(a1 + 144, (__n128 *)(a2 + 144));
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  }
  else
  {
    std::__construct_at[abi:ne180100]<CachedPrediction,CachedPrediction,CachedPrediction*>(a1, a2);
    *(unsigned char *)(a1 + 184) = 1;
  }
  return a1;
}

void CLMiLoService::releaseOutstandingPredictionRequests(int64x2_t *a1, int a2)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v4 = 29;
  if (!a2) {
    uint64_t v4 = -1;
  }
  uint64_t v19 = v4;
  if (a1[21].i64[1])
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
    }
    uint64_t v5 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = (char *)operator new(0x28uLL);
      *(void *)std::string __p = v6;
      *(_OWORD *)&__p[8] = xmmword_256514540;
      *(_OWORD *)uint64_t v6 = 0u;
      *((_OWORD *)v6 + 1) = 0u;
      *(void *)(v6 + 29) = 0;
      boost::uuids::to_chars<char *>((uint64_t)&a1->i64[1], v6);
      uint64_t v7 = __p;
      if (__p[23] < 0) {
        uint64_t v7 = *(unsigned char **)__p;
      }
      BOOL v8 = a1[21].i64[1] != 0;
      *(_DWORD *)std::string buf = 68289794;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)uint64_t v34 = 2082;
      *(void *)&v34[2] = "";
      __int16 v35 = 2082;
      int v36 = v7;
      __int16 v37 = 1026;
      BOOL v38 = v8;
      __int16 v39 = 1026;
      BOOL v40 = a2 == 0;
      _os_log_impl(&dword_25631F000, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoService releasing prediction requsts: \", \"ServiceId\":%{public, location:escape_only}s, \"NumRequests\":%{public}hhd, \"Success\":%{public}hhd}", buf, 0x28u);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
  }
  if ((CLMicroLocationUtils::stopReasonToConfidenceReason(a2) & 0xFF00000000) != 0)
  {
    uint64_t v9 = CLMicroLocationUtils::stopReasonToConfidenceReason(a2);
    int v10 = v9;
    if ((v9 & 0xFF00000000) == 0) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    uint64_t v11 = operator new(4uLL);
    *uint64_t v11 = v10;
    uint64_t v12 = (uint64_t)(v11 + 1);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v11 = 0;
  }
  while (a1[21].i64[1])
  {
    unint64_t v13 = a1[21].u64[0];
    uint64_t v14 = *(void *)(a1[19].i64[1] + 8 * (v13 / 0x78));
    unint64_t v15 = v13 % 0x78;
    uint64_t v16 = (uuid *)(v14 + 34 * v15);
    if (!a2)
    {
      uint64_t v17 = (const uuid *)(v14 + 34 * v15);
      if (v17[2].var0[0]) {
        CLMiLoService::addNewTruthLabelToModelIfAppropriate((CLMiLoService *)a1, v16, v17 + 1);
      }
    }
    (*(void (**)(uint64_t, uint64_t *, uuid *, uint64_t))(*(void *)a1->i64[0] + 40))(a1->i64[0], &a1->i64[1], v16, v19);
    __int16 v29 = 0;
    uint64_t v30 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    long long v26 = 0uLL;
    LOBYTE(v23) = 0;
    char v25 = 0;
    __p[0] = 0;
    char v32 = 0;
    BOOL v21 = 0;
    uint64_t v22 = 0;
    uint64_t v20 = 0;
    std::vector<CLMicroLocationProto::ConfidenceReason>::__init_with_size[abi:ne180100]<CLMicroLocationProto::ConfidenceReason*,CLMicroLocationProto::ConfidenceReason*>(&v20, v11, v12, (v12 - (uint64_t)v11) >> 2);
    CLMicroLocationResultToPublish::CLMicroLocationResultToPublish((uint64_t)buf, (uint64_t)&v28, &v26, 0, &v23, (uint64_t)__p, 0, (uint64_t)&v20);
    if (v20)
    {
      BOOL v21 = v20;
      operator delete(v20);
    }
    if (v32) {
      std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::~__hash_table((uint64_t)__p);
    }
    if (v25 && v24 < 0) {
      operator delete((void *)v23);
    }
    if (v28)
    {
      __int16 v29 = v28;
      operator delete(v28);
    }
    uint64_t v18 = a1->i64[0];
    *(uuid *)std::string __p = *v16;
    __p[16] = 1;
    (*(void (**)(uint64_t, uint64_t *, unsigned char *, uint8_t *))(*(void *)v18 + 32))(v18, &a1->i64[1], __p, buf);
    a1[21] = vaddq_s64(a1[21], (int64x2_t)xmmword_256516360);
    std::deque<CLMiLoService::OutstandingRequest>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1[19].i64, 1);
    if (v45)
    {
      int v46 = v45;
      operator delete(v45);
    }
    if (v44[40]) {
      std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::~__hash_table((uint64_t)v44);
    }
    if (v43 && v42 < 0) {
      operator delete(v41);
    }
    if (*(void *)buf)
    {
      *(void *)uint64_t v34 = *(void *)buf;
      operator delete(*(void **)buf);
    }
  }
  if (v11) {
    operator delete(v11);
  }
}

void sub_2564530BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,int a34,__int16 a35,char a36,char a37)
{
  operator delete(v38);

  _Unwind_Resume(a1);
}

void CLMiLoService::applyRecentChangesToModel(CLMiLoService *this)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  unint64_t v1 = *((void *)this + 3);
  if (v1 >= 4)
  {
    if (v1 == 4)
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
      }
      uint64_t v6 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = (char *)operator new(0x28uLL);
        *(void *)(v7 + 29) = 0;
        *(_OWORD *)uint64_t v7 = 0u;
        *((_OWORD *)v7 + 1) = 0u;
        boost::uuids::to_chars<char *>((uint64_t)this + 8, v7);
        int v10 = 68289283;
        int v11 = 0;
        __int16 v12 = 2082;
        unint64_t v13 = "";
        __int16 v14 = 2081;
        unint64_t v15 = v7;
        _os_log_impl(&dword_25631F000, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"applying model with recent changes\", \"ServiceUUID\":%{private, location:escape_only}s}", (uint8_t *)&v10, 0x1Cu);
        operator delete(v7);
      }

      uint64_t v8 = *((void *)this + 12);
      if (v8)
      {
        if (*(unsigned char *)(v8 + 192))
        {
          CLMiLoService::applyRecentLabelsToLSL(this);
        }
        else if (*(unsigned char *)(v8 + 288))
        {
          CLMiLoService::applyRecentLabelsToBlueAtlasModel(this);
        }
        else
        {
          uint64_t v9 = _CLLogObjectForCategory_MicroLocation_Default();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            LOWORD(v10) = 0;
            _os_log_impl(&dword_25631F000, v9, OS_LOG_TYPE_ERROR, "applyRecentChangesToModel, model has no LSL or Blue Atlas data", (uint8_t *)&v10, 2u);
          }
        }
      }
    }
    else if (v1 == 5)
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
      }
      uint64_t v3 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_FAULT))
      {
        int v10 = 68289026;
        int v11 = 0;
        __int16 v12 = 2082;
        unint64_t v13 = "";
        _os_log_impl(&dword_25631F000, v3, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"applyRecentChangesToModel, received invalid serviceType = ULServiceTypeMax\"}", (uint8_t *)&v10, 0x12u);
      }
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
      }
      uint64_t v4 = logObject_MicroLocation_Default;
      if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
      {
        int v10 = 68289026;
        int v11 = 0;
        __int16 v12 = 2082;
        unint64_t v13 = "";
        _os_signpost_emit_with_name_impl(&dword_25631F000, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "applyRecentChangesToModel, received invalid serviceType = ULServiceTypeMax", "{\"msg%{public}.0s\":\"applyRecentChangesToModel, received invalid serviceType = ULServiceTypeMax\"}", (uint8_t *)&v10, 0x12u);
      }
    }
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
    }
    unint64_t v2 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
    {
      int v10 = 68289282;
      int v11 = 0;
      __int16 v12 = 2082;
      unint64_t v13 = "";
      __int16 v14 = 2050;
      unint64_t v15 = (char *)v1;
      _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"applying model with recent changes is not applicable\", \"Service Type\":%{public}lu}", (uint8_t *)&v10, 0x1Cu);
    }
  }
}

void sub_2564534B0(_Unwind_Exception *a1)
{
  operator delete(v2);

  _Unwind_Resume(a1);
}

void CLMiLoService::invalidateCachedPrediction(CLMiLoService *this)
{
}

void CLMiLoService::notifyInvalidConfidence(uint64_t *a1, int a2)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (!a1[11] && *((unsigned char *)a1 + 457))
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
    }
    uint64_t v4 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = operator new(0x28uLL);
      std::string __p = v5;
      long long v22 = xmmword_256514540;
      _OWORD *v5 = 0u;
      v5[1] = 0u;
      *(void *)((char *)v5 + 29) = 0;
      boost::uuids::to_chars<char *>((uint64_t)(a1 + 1), v5);
      p_p = __p;
      if (v22 >= 0) {
        p_p = &__p;
      }
      uint64_t v7 = a1 + 5;
      if (*((char *)a1 + 63) < 0) {
        uint64_t v7 = (void *)*v7;
      }
      *(_DWORD *)std::string buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)char v25 = 2082;
      *(void *)&v25[2] = "";
      __int16 v26 = 2082;
      uint64_t v27 = p_p;
      __int16 v28 = 2082;
      __int16 v29 = v7;
      _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoService sending invalid confidence empty results to client: \", \"ServiceId\":%{public, location:escape_only}s, \"ClientId\":%{public, location:escape_only}s}", buf, 0x26u);
      if (SHIBYTE(v22) < 0) {
        operator delete(__p);
      }
    }

    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    long long v16 = 0uLL;
    LOBYTE(v13) = 0;
    char v15 = 0;
    LOBYTE(__p) = 0;
    char v23 = 0;
    uint64_t v8 = operator new(4uLL);
    int v10 = v8;
    _DWORD *v8 = a2;
    int v11 = v8 + 1;
    __int16 v12 = v8 + 1;
    CLMicroLocationResultToPublish::CLMicroLocationResultToPublish((uint64_t)buf, (uint64_t)&v18, &v16, 0, &v13, (uint64_t)&__p, 0, (uint64_t)&v10);
    if (v10)
    {
      int v11 = v10;
      operator delete(v10);
    }
    if (v23) {
      std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::~__hash_table((uint64_t)&__p);
    }
    if (v15 && v14 < 0) {
      operator delete((void *)v13);
    }
    if (v18)
    {
      uint64_t v19 = v18;
      operator delete(v18);
    }
    uint64_t v9 = *a1;
    std::string __p = 0;
    *(void *)&long long v22 = 0;
    BYTE8(v22) = 1;
    (*(void (**)(uint64_t, uint64_t *, void **, uint8_t *))(*(void *)v9 + 32))(v9, a1 + 1, &__p, buf);
    if (v34)
    {
      __int16 v35 = v34;
      operator delete(v34);
    }
    if (v33[40]) {
      std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::~__hash_table((uint64_t)v33);
    }
    if (v32 && v31 < 0) {
      operator delete(v30);
    }
    if (*(void *)buf)
    {
      *(void *)char v25 = *(void *)buf;
      operator delete(*(void **)buf);
    }
  }
}

void sub_256453790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  operator delete(v30);

  _Unwind_Resume(a1);
}

void CLMiLoService::sendInitialBlueAtlasPrediction(CLMiLoService *this)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  if (*((void *)this + 11)) {
    return;
  }
  long long v45 = 0uLL;
  *(_DWORD *)std::string buf = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)buf);
  *(void *)&long long v45 = boost::uuids::random_generator_pure::operator()((uint64_t)buf);
  *((void *)&v45 + 1) = v2;
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)buf);
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
  }
  uint64_t v3 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = (char *)operator new(0x28uLL);
    *(void *)std::string __p = v4;
    *(_OWORD *)&__p[8] = xmmword_256514540;
    *(_OWORD *)uint64_t v4 = 0u;
    *((_OWORD *)v4 + 1) = 0u;
    *(void *)(v4 + 29) = 0;
    boost::uuids::to_chars<char *>((uint64_t)this + 8, v4);
    if (__p[23] >= 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = *(unsigned char **)__p;
    }
    uint64_t v6 = (void *)((char *)this + 40);
    if (*((char *)this + 63) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    uint64_t v7 = (char *)operator new(0x28uLL);
    *(void *)char v44 = v7;
    *(_OWORD *)&v44[8] = xmmword_256514540;
    *(_OWORD *)uint64_t v7 = 0u;
    *((_OWORD *)v7 + 1) = 0u;
    *(void *)(v7 + 29) = 0;
    boost::uuids::to_chars<char *>((uint64_t)&v45, v7);
    uint64_t v8 = v44;
    if (v44[23] < 0) {
      uint64_t v8 = *(unsigned char **)v44;
    }
    *(_DWORD *)std::string buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)char v31 = 2082;
    *(void *)&v31[2] = "";
    __int16 v32 = 2082;
    __int16 v33 = v5;
    __int16 v34 = 2082;
    __int16 v35 = v6;
    __int16 v36 = 2082;
    __int16 v37 = v8;
    _os_log_impl(&dword_25631F000, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoService sending initial empty prediction to BlueAtlas client: \", \"ServiceId\":%{public, location:escape_only}s, \"ClientId\":%{public, location:escape_only}s, \"Trigger UUID\":%{public, location:escape_only}s}", buf, 0x30u);
    if ((v44[23] & 0x80000000) != 0) {
      operator delete(*(void **)v44);
    }
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }

  __int16 v26 = 0;
  uint64_t v27 = 0;
  uint64_t v24 = 0;
  char v25 = 0;
  long long v23 = 0uLL;
  LOBYTE(v20) = 0;
  char v22 = 0;
  __p[0] = 0;
  char v29 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v17 = 0;
  CLMicroLocationResultToPublish::CLMicroLocationResultToPublish((uint64_t)buf, (uint64_t)&v25, &v23, 0, &v20, (uint64_t)__p, 1, (uint64_t)&v17);
  if (v17)
  {
    uint64_t v18 = v17;
    operator delete(v17);
  }
  if (v29) {
    std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::~__hash_table((uint64_t)__p);
  }
  if (v22 && v21 < 0) {
    operator delete((void *)v20);
  }
  if (v25)
  {
    __int16 v26 = v25;
    operator delete(v25);
  }
  uint64_t v9 = *(void *)this;
  *(_OWORD *)char v44 = *(_OWORD *)((char *)this + 8);
  CLMicroLocationClientUtils::getClientIdAndServiceUuid((const void **)this + 5, (uint64_t)v44, (std::string *)__p);
  char v10 = (*(uint64_t (**)(uint64_t, unsigned char *, long long *))(*(void *)v9 + 104))(v9, __p, &v45);
  char v11 = v10;
  if ((__p[23] & 0x80000000) == 0)
  {
    if (v10) {
      goto LABEL_38;
    }
LABEL_29:
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
    }
    __int16 v12 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      long long v13 = (char *)operator new(0x28uLL);
      *(void *)(v13 + 29) = 0;
      *(_OWORD *)long long v13 = 0u;
      *((_OWORD *)v13 + 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)&v45, v13);
      *(void *)std::string __p = 68289282;
      *(_WORD *)&__p[8] = 2082;
      *(void *)&__p[10] = "";
      *(_WORD *)&__p[18] = 2082;
      *(void *)&__p[20] = v13;
      _os_log_impl(&dword_25631F000, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLMiLoService failed to add trigger for future labeling: \", \"Trigger UUID\":%{public, location:escape_only}s}", __p, 0x1Cu);
      operator delete(v13);
    }

    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
    }
    char v14 = (id)logObject_MicroLocation_Default;
    if (os_signpost_enabled(v14))
    {
      char v15 = (char *)operator new(0x28uLL);
      *(void *)(v15 + 29) = 0;
      *(_OWORD *)char v15 = 0u;
      *((_OWORD *)v15 + 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)&v45, v15);
      *(void *)std::string __p = 68289282;
      *(_WORD *)&__p[8] = 2082;
      *(void *)&__p[10] = "";
      *(_WORD *)&__p[18] = 2082;
      *(void *)&__p[20] = v15;
      _os_signpost_emit_with_name_impl(&dword_25631F000, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLMiLoService failed to add trigger for future labeling: ", "{\"msg%{public}.0s\":\"CLMiLoService failed to add trigger for future labeling: \", \"Trigger UUID\":%{public, location:escape_only}s}", __p, 0x1Cu);
      operator delete(v15);
    }

    goto LABEL_38;
  }
  operator delete(*(void **)__p);
  if ((v11 & 1) == 0) {
    goto LABEL_29;
  }
LABEL_38:
  uint64_t v16 = *(void *)this;
  *(_OWORD *)std::string __p = v45;
  __p[16] = 1;
  (*(void (**)(uint64_t, char *, unsigned char *, uint8_t *))(*(void *)v16 + 32))(v16, (char *)this + 8, __p, buf);
  if (v42)
  {
    char v43 = v42;
    operator delete(v42);
  }
  if (v41[40]) {
    std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::~__hash_table((uint64_t)v41);
  }
  if (v40 && v39 < 0) {
    operator delete(v38);
  }
  if (*(void *)buf)
  {
    *(void *)char v31 = *(void *)buf;
    operator delete(*(void **)buf);
  }
}

void sub_256453CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  operator delete(v35);

  CLMicroLocationResultToPublish::~CLMicroLocationResultToPublish((CLMicroLocationResultToPublish *)&a34);
  _Unwind_Resume(a1);
}

void CLMiLoService::getClientIdAndServiceUuid(CLMiLoService *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  long long v2 = *(_OWORD *)((char *)this + 8);
  CLMicroLocationClientUtils::getClientIdAndServiceUuid((const void **)this + 5, (uint64_t)&v2, a2);
}

uint64_t CLMiLoService::getModelPtr@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 104);
  *a2 = *(void *)(this + 96);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t CLMiLoService::getModel(CLMiLoService *this)
{
  return *((void *)this + 12);
}

void CLMiLoService::updateModel(uint64_t a1, uint64_t *a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (*a2)
  {
    uint64_t v3 = a2;
    uint64_t v2 = a1;
    if (onceToken_MicroLocation_Default == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    CLMiLoService::updateModel();
    __break(1u);
  }
  dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
LABEL_3:
  uint64_t v4 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (char *)operator new(0x28uLL);
    *(void *)(v5 + 29) = 0;
    *(_OWORD *)uint64_t v5 = 0u;
    *((_OWORD *)v5 + 1) = 0u;
    boost::uuids::to_chars<char *>(v2 + 8, v5);
    uint64_t v6 = *v3;
    uint64_t v7 = (char *)operator new(0x28uLL);
    *(void *)(v7 + 29) = 0;
    *(_OWORD *)uint64_t v7 = 0u;
    *((_OWORD *)v7 + 1) = 0u;
    boost::uuids::to_chars<char *>(v6 + 448, v7);
    v11[0] = 68289538;
    v11[1] = 0;
    __int16 v12 = 2082;
    long long v13 = "";
    __int16 v14 = 2082;
    char v15 = v5;
    __int16 v16 = 2082;
    uint64_t v17 = v7;
    _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Model updated: \", \"ServiceId\":%{public, location:escape_only}s, \"ModelId\":%{public, location:escape_only}s}", (uint8_t *)v11, 0x26u);
    operator delete(v7);
    operator delete(v5);
  }

  uint64_t v9 = *v3;
  uint64_t v8 = v3[1];
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  char v10 = *(std::__shared_weak_count **)(v2 + 104);
  *(void *)(v2 + 96) = v9;
  *(void *)(v2 + 104) = v8;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  CLMiLoService::applyRecentChangesToModel((CLMiLoService *)v2);
  CLMiLoService::loadAnchorValueStatistics((void *)v2);
  CLMiLoService::updateState((int64x2_t *)v2);
  if (*(unsigned char *)(v2 + 457)) {
    CLMiLoService::updateServiceUpdatingParametersIfAppropriate((CLMiLoService *)v2, *(unsigned __int8 *)(v2 + 456));
  }
}

void sub_256454000(_Unwind_Exception *a1)
{
  operator delete(v3);
  operator delete(v2);

  _Unwind_Resume(a1);
}

void *CLMiLoService::loadAnchorValueStatistics(void *this)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v1 = this[12];
  if (v1)
  {
    uint64_t v2 = this;
    uint64_t v3 = v1 + 448;
    uint64_t v4 = (CLMicroLocationProto::Configuration *)(*(void *(**)(void *__return_ptr))(*(void *)*this
                                                                                                + 136))(v17);
    if (v20)
    {
      if ((v19 & 0x10) == 0)
      {
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
        }
        uint64_t v5 = logObject_MicroLocation_Default;
        if (!os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR)) {
          return (void *)std::__optional_destruct_base<CLMicroLocationConfigurationTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v17);
        }
        LOWORD(v11) = 0;
        goto LABEL_20;
      }
      uint64_t v8 = v18;
      if (!v18)
      {
        uint64_t v4 = (CLMicroLocationProto::Configuration *)CLMicroLocationProto::Configuration::default_instance(v4);
        uint64_t v8 = *((void *)v4 + 4);
      }
      if ((*(unsigned char *)(v8 + 32) & 2) == 0)
      {
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
        }
        uint64_t v5 = logObject_MicroLocation_Default;
        if (!os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR)) {
          return (void *)std::__optional_destruct_base<CLMicroLocationConfigurationTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v17);
        }
        LOWORD(v11) = 0;
LABEL_20:
        _os_log_impl(&dword_25631F000, v5, OS_LOG_TYPE_ERROR, "ClusterAnchorValueStatistics has no data", (uint8_t *)&v11, 2u);
        return (void *)std::__optional_destruct_base<CLMicroLocationConfigurationTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v17);
      }
      uint64_t v9 = *(CLMicroLocationProto::ClusterAnchorValueStatisticsVector **)(v8 + 8);
      if (!v9) {
        uint64_t v9 = *(CLMicroLocationProto::ClusterAnchorValueStatisticsVector **)(CLMicroLocationProto::AnchorValueStatisticsConfiguration::default_instance(v4)
      }
                                                                          + 8);
      std::optional<CLMicroLocationAnchorValueStatisticsMap>::emplace[abi:ne180100]<CLMicroLocationProto::ClusterAnchorValueStatisticsVector const&,void>((CLMicroLocationAnchorValueStatisticsMap *)(v2[12] + 600), v9);
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
      }
      uint64_t v6 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        char v10 = (char *)operator new(0x28uLL);
        *(void *)(v10 + 29) = 0;
        *(_OWORD *)char v10 = 0u;
        *((_OWORD *)v10 + 1) = 0u;
        boost::uuids::to_chars<char *>(v3, v10);
        int v11 = 68289282;
        int v12 = 0;
        __int16 v13 = 2082;
        __int16 v14 = "";
        __int16 v15 = 2082;
        __int16 v16 = v10;
        _os_log_impl(&dword_25631F000, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"ClusterAnchorValueStatistics loaded for model\", \"ModelUUID\":%{public, location:escape_only}s}", (uint8_t *)&v11, 0x1Cu);
        operator delete(v10);
      }
    }
    else
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
      }
      uint64_t v6 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = (char *)operator new(0x28uLL);
        *(void *)(v7 + 29) = 0;
        *(_OWORD *)uint64_t v7 = 0u;
        *((_OWORD *)v7 + 1) = 0u;
        boost::uuids::to_chars<char *>(v3, v7);
        int v11 = 68289282;
        int v12 = 0;
        __int16 v13 = 2082;
        __int16 v14 = "";
        __int16 v15 = 2082;
        __int16 v16 = v7;
        _os_log_impl(&dword_25631F000, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"no AnchorValueStatistics for model\", \"ModelUUID\":%{public, location:escape_only}s}", (uint8_t *)&v11, 0x1Cu);
        operator delete(v7);
      }
    }

    return (void *)std::__optional_destruct_base<CLMicroLocationConfigurationTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v17);
  }
  return this;
}

void sub_256454370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  operator delete(v14);

  std::__optional_destruct_base<CLMicroLocationConfigurationTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void CLMiLoService::updateState(int64x2_t *this)
{
  uint64_t v3 = this[5].i64[1];
  uint64_t v2 = (CLMicroLocationModel *)this[6].i64[0];
  if (v2 && CLMicroLocationModel::isValid(v2) && *(unsigned char *)this[28].i64[0])
  {
    this[5].i64[1] = 0;
    if (v3)
    {
      CLMiLoService::didStateChangeToRunning((uint64_t)this, v3);
    }
  }
  else
  {
    this[5].i64[1] = 1;
    if (v3 != 1)
    {
      CLMiLoService::didStateChangeToSuspended(this, v3);
    }
  }
}

void CLMiLoService::updateServiceUpdatingParametersIfAppropriate(CLMiLoService *this, int a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 457))
  {
    if (a2 && !*((void *)this + 11))
    {
      uint64_t v6 = (char *)this + 8;
      (*(void (**)(void, char *))(**(void **)this + 144))(*(void *)this, (char *)this + 8);
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
      }
      uint64_t v3 = (id)logObject_MicroLocation_Default;
      if (!os_log_type_enabled(v3, OS_LOG_TYPE_INFO)) {
        goto LABEL_9;
      }
      uint64_t v4 = (char *)operator new(0x28uLL);
      *(void *)(v4 + 29) = 0;
      *(_OWORD *)uint64_t v4 = 0u;
      *((_OWORD *)v4 + 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)v6, v4);
      int v7 = 68289283;
      int v8 = 0;
      __int16 v9 = 2082;
      char v10 = "";
      __int16 v11 = 2081;
      int v12 = v4;
      uint64_t v5 = "{\"msg%{public}.0s\":\"Enabling Low Latency updates for Service:\", \"ServiceId\":%{private, location:escape_only}s}";
    }
    else
    {
      uint64_t v2 = (char *)this + 8;
      (*(void (**)(void, char *))(**(void **)this + 152))(*(void *)this, (char *)this + 8);
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
      }
      uint64_t v3 = (id)logObject_MicroLocation_Default;
      if (!os_log_type_enabled(v3, OS_LOG_TYPE_INFO)) {
        goto LABEL_9;
      }
      uint64_t v4 = (char *)operator new(0x28uLL);
      *(void *)(v4 + 29) = 0;
      *(_OWORD *)uint64_t v4 = 0u;
      *((_OWORD *)v4 + 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)v2, v4);
      int v7 = 68289283;
      int v8 = 0;
      __int16 v9 = 2082;
      char v10 = "";
      __int16 v11 = 2081;
      int v12 = v4;
      uint64_t v5 = "{\"msg%{public}.0s\":\"Enabling Legacy updates for Service:\", \"ServiceId\":%{private, location:escape_only}s}";
    }
    _os_log_impl(&dword_25631F000, v3, OS_LOG_TYPE_INFO, v5, (uint8_t *)&v7, 0x1Cu);
    operator delete(v4);
LABEL_9:
  }
}

void sub_2564546A0(_Unwind_Exception *a1)
{
  operator delete(v2);

  _Unwind_Resume(a1);
}

void CLMiLoService::releaseModel(int64x2_t *this)
{
  uint64_t v2 = (std::__shared_weak_count *)this[6].i64[1];
  this[6].i64[0] = 0;
  this[6].i64[1] = 0;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  CLMiLoService::updateState(this);
  if (this[28].i8[9])
  {
    CLMiLoService::updateServiceUpdatingParametersIfAppropriate((CLMiLoService *)this, 0);
  }
}

void CLMiLoService::applyRecentLabelsToLSL(CLMiLoService *this)
{
  uint64_t v126 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 12);
  if (!v1)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
    }
    uint64_t v47 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      *(void *)std::string buf = 68289026;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      _os_log_impl(&dword_25631F000, v47, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"applyRecentLabelsToLSL, no current model\"}", buf, 0x12u);
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
    }
    long long v48 = logObject_MicroLocation_Default;
    if (!os_signpost_enabled((os_log_t)logObject_MicroLocation_Default)) {
      return;
    }
    *(void *)std::string buf = 68289026;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    double v49 = "applyRecentLabelsToLSL, no current model";
    __int16 v50 = "{\"msg%{public}.0s\":\"applyRecentLabelsToLSL, no current model\"}";
LABEL_99:
    _os_signpost_emit_with_name_impl(&dword_25631F000, v48, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v49, v50, buf, 0x12u);
    return;
  }
  if (!*(unsigned char *)(v1 + 192))
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
    }
    uint64_t v51 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      *(void *)std::string buf = 68289026;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      _os_log_impl(&dword_25631F000, v51, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"applyRecentLabelsToLSL, model has no location similarity list\"}", buf, 0x12u);
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
    }
    long long v48 = logObject_MicroLocation_Default;
    if (!os_signpost_enabled((os_log_t)logObject_MicroLocation_Default)) {
      return;
    }
    *(void *)std::string buf = 68289026;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    double v49 = "applyRecentLabelsToLSL, model has no location similarity list";
    __int16 v50 = "{\"msg%{public}.0s\":\"applyRecentLabelsToLSL, model has no location similarity list\"}";
    goto LABEL_99;
  }
  uint64_t v2 = 176;
  if (!*(unsigned char *)(v1 + 184)) {
    uint64_t v2 = 592;
  }
  double v3 = *(double *)(v1 + v2);
  uint64_t v4 = *(void *)this;
  *(_OWORD *)std::string buf = *(_OWORD *)((char *)this + 8);
  (*(void (**)(uint64_t *__return_ptr, double))(*(void *)v4 + 128))(&v113, v3);
  if (v113 == v114)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
    }
    __int16 v67 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)std::string buf = 68289026;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      _os_log_impl(&dword_25631F000, v67, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"applyRecentLabelsToLSL, no label entries for model\"}", buf, 0x12u);
    }
  }
  else
  {
    double v5 = cl::chrono::CFAbsoluteTimeClock::now();
    uint64_t v6 = *((void *)this + 12);
    if (!*(unsigned char *)(v6 + 184)) {
      *(unsigned char *)(v6 + 184) = 1;
    }
    *(double *)(v6 + 176) = v5;
    uint64_t v100 = *((void *)this + 12);
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
    }
    int v7 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = (uint64_t)(*(void *)(v100 + 104) - *(void *)(v100 + 96)) >> 4;
      *(void *)std::string buf = 68289282;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      __int16 v117 = 2050;
      uint64_t v118 = v8;
      _os_log_impl(&dword_25631F000, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"applyRecentLabelsToLSL, number of LSL items\", \"before update\":%{public}lu}", buf, 0x1Cu);
    }

    int v110 = 0;
    __int16 v111 = 0;
    v112 = 0;
    __int16 v107 = 0;
    v108 = 0;
    __int16 v109 = 0;
    uint64_t v9 = v113;
    uint64_t v10 = v114;
    if (v113 != v114)
    {
      do
      {
        int v12 = *(void **)(v100 + 96);
        __int16 v11 = *(void **)(v100 + 104);
        uint64_t v13 = (void *)(v9 + 40);
        if (v12 != v11)
        {
          while (*v12 != *v13 || v12[1] != *(void *)(v9 + 48))
          {
            v12 += 2;
            if (v12 == v11)
            {
              int v12 = *(void **)(v100 + 104);
              break;
            }
          }
        }
        if (v12 == v11)
        {
          char v25 = v111;
          if (v111 >= v112)
          {
            uint64_t v27 = (v111 - (unsigned char *)v110) >> 4;
            unint64_t v28 = v27 + 1;
            if ((unint64_t)(v27 + 1) >> 60) {
              goto LABEL_184;
            }
            uint64_t v29 = v112 - (unsigned char *)v110;
            if ((v112 - (unsigned char *)v110) >> 3 > v28) {
              unint64_t v28 = v29 >> 3;
            }
            if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v30 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v30 = v28;
            }
            if (v30) {
              char v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::uuids::uuid>>((uint64_t)&v112, v30);
            }
            else {
              char v31 = 0;
            }
            __int16 v32 = &v31[16 * v27];
            *(_OWORD *)__int16 v32 = *(_OWORD *)v13;
            __int16 v34 = (char *)v110;
            __int16 v33 = v111;
            __int16 v35 = v32;
            if (v111 != v110)
            {
              do
              {
                *((_OWORD *)v35 - 1) = *((_OWORD *)v33 - 1);
                v35 -= 16;
                v33 -= 16;
              }
              while (v33 != v34);
              __int16 v33 = (char *)v110;
            }
            __int16 v26 = v32 + 16;
            int v110 = v35;
            __int16 v111 = v32 + 16;
            v112 = &v31[16 * v30];
            if (v33) {
              operator delete(v33);
            }
          }
          else
          {
            *(_OWORD *)__int16 v111 = *(_OWORD *)v13;
            __int16 v26 = v25 + 16;
          }
          __int16 v111 = v26;
          __int16 v36 = v108;
          if (v108 >= v109)
          {
            uint64_t v38 = (v108 - (unsigned char *)v107) >> 4;
            unint64_t v39 = v38 + 1;
            if ((unint64_t)(v38 + 1) >> 60) {
LABEL_184:
            }
              std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
            uint64_t v40 = v109 - (unsigned char *)v107;
            if ((v109 - (unsigned char *)v107) >> 3 > v39) {
              unint64_t v39 = v40 >> 3;
            }
            if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v41 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v41 = v39;
            }
            if (v41) {
              char v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::uuids::uuid>>((uint64_t)&v109, v41);
            }
            else {
              char v42 = 0;
            }
            char v43 = &v42[16 * v38];
            *(_OWORD *)char v43 = *(_OWORD *)v9;
            long long v45 = (char *)v107;
            char v44 = v108;
            uint64_t v46 = v43;
            if (v108 != v107)
            {
              do
              {
                *((_OWORD *)v46 - 1) = *((_OWORD *)v44 - 1);
                v46 -= 16;
                v44 -= 16;
              }
              while (v44 != v45);
              char v44 = (char *)v107;
            }
            __int16 v37 = v43 + 16;
            __int16 v107 = v46;
            v108 = v43 + 16;
            __int16 v109 = &v42[16 * v41];
            if (v44) {
              operator delete(v44);
            }
          }
          else
          {
            *(_OWORD *)v108 = *(_OWORD *)v9;
            __int16 v37 = v36 + 16;
          }
          v108 = v37;
        }
        else
        {
          if (onceToken_MicroLocation_Default != -1) {
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
          }
          __int16 v15 = (id)logObject_MicroLocation_Default;
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            __int16 v16 = (char *)operator new(0x28uLL);
            *(void *)v125 = v16;
            *(_OWORD *)&v125[8] = xmmword_256514540;
            *(_OWORD *)__int16 v16 = 0u;
            *((_OWORD *)v16 + 1) = 0u;
            *(void *)(v16 + 29) = 0;
            boost::uuids::to_chars<char *>(v9 + 40, v16);
            if (v125[23] >= 0) {
              uint64_t v17 = v125;
            }
            else {
              uint64_t v17 = *(unsigned char **)v125;
            }
            uint64_t v18 = operator new(0x28uLL);
            std::string __p = v18;
            long long v106 = xmmword_256514540;
            *uint64_t v18 = 0u;
            v18[1] = 0u;
            *(void *)((char *)v18 + 29) = 0;
            boost::uuids::to_chars<char *>(v9, v18);
            if (v106 >= 0) {
              p_p = (char *)&__p;
            }
            else {
              p_p = (char *)__p;
            }
            *(void *)std::string buf = 68289538;
            *(_WORD *)&uint8_t buf[8] = 2082;
            *(void *)&buf[10] = "";
            __int16 v117 = 2082;
            uint64_t v118 = (uint64_t)v17;
            __int16 v119 = 2082;
            __int16 v120 = p_p;
            _os_log_impl(&dword_25631F000, v15, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLMiLoService::applyRecentLabelsToLSL, tried to apply a label which is already in the LSL\", \"LabelUUID\":%{public, location:escape_only}s, \"TriggerUUID\":%{public, location:escape_only}s}", buf, 0x26u);
            if (SHIBYTE(v106) < 0) {
              operator delete(__p);
            }
            if ((v125[23] & 0x80000000) != 0) {
              operator delete(*(void **)v125);
            }
          }

          if (onceToken_MicroLocation_Default != -1) {
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
          }
          char v20 = (id)logObject_MicroLocation_Default;
          if (os_signpost_enabled(v20))
          {
            uint64_t v21 = (char *)operator new(0x28uLL);
            *(void *)v125 = v21;
            *(_OWORD *)&v125[8] = xmmword_256514540;
            *(_OWORD *)uint64_t v21 = 0u;
            *((_OWORD *)v21 + 1) = 0u;
            *(void *)(v21 + 29) = 0;
            boost::uuids::to_chars<char *>(v9 + 40, v21);
            if (v125[23] >= 0) {
              char v22 = v125;
            }
            else {
              char v22 = *(unsigned char **)v125;
            }
            long long v23 = operator new(0x28uLL);
            std::string __p = v23;
            long long v106 = xmmword_256514540;
            *long long v23 = 0u;
            v23[1] = 0u;
            *(void *)((char *)v23 + 29) = 0;
            boost::uuids::to_chars<char *>(v9, v23);
            if (v106 >= 0) {
              uint64_t v24 = (char *)&__p;
            }
            else {
              uint64_t v24 = (char *)__p;
            }
            *(void *)std::string buf = 68289538;
            *(_WORD *)&uint8_t buf[8] = 2082;
            *(void *)&buf[10] = "";
            __int16 v117 = 2082;
            uint64_t v118 = (uint64_t)v22;
            __int16 v119 = 2082;
            __int16 v120 = v24;
            _os_signpost_emit_with_name_impl(&dword_25631F000, v20, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLMiLoService::applyRecentLabelsToLSL, tried to apply a label which is already in the LSL", "{\"msg%{public}.0s\":\"CLMiLoService::applyRecentLabelsToLSL, tried to apply a label which is already in the LSL\", \"LabelUUID\":%{public, location:escape_only}s, \"TriggerUUID\":%{public, location:escape_only}s}", buf, 0x26u);
            if (SHIBYTE(v106) < 0) {
              operator delete(__p);
            }
            if ((v125[23] & 0x80000000) != 0) {
              operator delete(*(void **)v125);
            }
          }
        }
        v9 += 64;
      }
      while (v9 != v10);
      uint64_t v9 = v113;
      for (uint64_t i = v114; i != v9; i -= 64)
      {
        if (*(char *)(i - 25) < 0) {
          operator delete(*(void **)(i - 48));
        }
      }
    }
    uint64_t v114 = v9;
    std::vector<CLMicroLocationRecordingLabelsTable::Entry>::shrink_to_fit(&v113);
    if (v111 == v110)
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
      }
      v94 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
      {
        v95 = (void *)((char *)this + 40);
        if (*((char *)this + 63) < 0) {
          v95 = (void *)*v95;
        }
        *(_OWORD *)v125 = *(_OWORD *)((char *)this + 8);
        v96 = (char *)operator new(0x28uLL);
        *(void *)(v96 + 29) = 0;
        *(_OWORD *)v96 = 0u;
        *((_OWORD *)v96 + 1) = 0u;
        boost::uuids::to_chars<char *>((uint64_t)v125, v96);
        *(void *)std::string buf = 68289539;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        __int16 v117 = 2081;
        uint64_t v118 = (uint64_t)v95;
        __int16 v119 = 2081;
        __int16 v120 = v96;
        _os_log_impl(&dword_25631F000, v94, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"applyRecentLabelsToLSL, no labels from database to apply to LSL\", \"ClientID\":%{private, location:escape_only}s, \"ClientUUID\":%{private, location:escape_only}s}", buf, 0x26u);
        operator delete(v96);
      }
    }
    else
    {
      (*(void (**)(unsigned char *__return_ptr))(**(void **)this + 120))(v125);
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
      }
      int v53 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v54 = (char *)this + 40;
        if (*((char *)this + 63) < 0) {
          __int16 v54 = *(char **)v54;
        }
        float v56 = v110;
        char v55 = v111;
        *(_OWORD *)__int16 v115 = *(_OWORD *)((char *)this + 8);
        char v57 = operator new(0x28uLL);
        std::string __p = v57;
        long long v106 = xmmword_256514540;
        *char v57 = 0u;
        v57[1] = 0u;
        *(void *)((char *)v57 + 29) = 0;
        boost::uuids::to_chars<char *>((uint64_t)v115, v57);
        if (v106 >= 0) {
          char v58 = &__p;
        }
        else {
          char v58 = __p;
        }
        uint64_t v59 = *((void *)this + 12);
        size_t v60 = operator new(0x28uLL);
        char v103 = v60;
        long long v104 = xmmword_256514540;
        *size_t v60 = 0u;
        v60[1] = 0u;
        *(void *)((char *)v60 + 29) = 0;
        boost::uuids::to_chars<char *>(v59 + 448, v60);
        unsigned int v61 = &v103;
        if (v104 < 0) {
          unsigned int v61 = v103;
        }
        *(_DWORD *)std::string buf = 68290051;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        __int16 v117 = 2050;
        uint64_t v118 = (v55 - v56) >> 4;
        __int16 v119 = 2081;
        __int16 v120 = v54;
        __int16 v121 = 2081;
        uint64_t v122 = v58;
        __int16 v123 = 2081;
        v124 = v61;
        _os_log_impl(&dword_25631F000, v53, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"applyRecentLabelsToLSL, found labels from database to apply to LSL\", \"NumLabels\":%{public}lu, \"ClientID\":%{private, location:escape_only}s, \"ClientUUID\":%{private, location:escape_only}s, \"ModelUUID\":%{private, location:escape_only}s}", buf, 0x3Au);
        if (SHIBYTE(v104) < 0) {
          operator delete(v103);
        }
        if (SHIBYTE(v106) < 0) {
          operator delete(__p);
        }
      }

      std::string __p = 0;
      long long v106 = 0uLL;
      char v103 = 0;
      long long v104 = 0uLL;
      long long v62 = +[ULDefaultsSingleton shared];
      long long v63 = [v62 defaultsDictionary];

      uint64_t v64 = [NSString stringWithUTF8String:"ULSimilarityListMaxNumberOfItems"];
      __int16 v65 = [v63 objectForKey:v64];
      if (v65 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
        unsigned int v66 = [v65 intValue];
      }
      else {
        unsigned int v66 = [&unk_2704F1CF8 intValue];
      }
      unsigned int v68 = v66;

      v69 = (char *)v110;
      if (v111 != v110)
      {
        uint64_t v70 = 0;
        unsigned int v71 = 0;
        unsigned int v72 = 0;
        do
        {
          unint64_t v73 = (char *)v107 + 16 * v70;
          uint64_t v74 = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::find<boost::uuids::uuid>(v125, v73);
          if (onceToken_MicroLocation_Default != -1) {
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
          }
          v75 = &v69[16 * v70];
          v76 = (id)logObject_MicroLocation_Default;
          if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
          {
            v77 = (char *)operator new(0x28uLL);
            *(void *)__int16 v115 = v77;
            *(_OWORD *)&v115[8] = xmmword_256514540;
            *(_OWORD *)v77 = 0u;
            *((_OWORD *)v77 + 1) = 0u;
            *(void *)(v77 + 29) = 0;
            boost::uuids::to_chars<char *>((uint64_t)v75, v77);
            if (v115[23] >= 0) {
              v78 = v115;
            }
            else {
              v78 = *(unsigned char **)v115;
            }
            uint64_t v79 = operator new(0x28uLL);
            uint64_t v101 = v79;
            long long v102 = xmmword_256514540;
            *uint64_t v79 = 0u;
            v79[1] = 0u;
            *(void *)((char *)v79 + 29) = 0;
            boost::uuids::to_chars<char *>((uint64_t)v73, v79);
            v80 = (char *)&v101;
            if (v102 < 0) {
              v80 = (char *)v101;
            }
            *(void *)std::string buf = 68289795;
            *(_WORD *)&uint8_t buf[8] = 2082;
            *(void *)&buf[10] = "";
            __int16 v117 = 2081;
            uint64_t v118 = (uint64_t)v78;
            __int16 v119 = 2081;
            __int16 v120 = v80;
            __int16 v121 = 1026;
            LODWORD(v122) = v74 != 0;
            _os_log_impl(&dword_25631F000, v76, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"applyRecentLabelsToLSL, per label info\", \"LabelUUID\":%{private, location:escape_only}s, \"TriggerUUID\":%{private, location:escape_only}s, \"validFingerprint\":%{public}hhd}", buf, 0x2Cu);
            if (SHIBYTE(v102) < 0) {
              operator delete(v101);
            }
            if ((v115[23] & 0x80000000) != 0) {
              operator delete(*(void **)v115);
            }
          }

          if (v74)
          {
            uint64_t v81 = v106;
            if ((unint64_t)v106 >= *((void *)&v106 + 1))
            {
              uint64_t v82 = std::vector<CLMicroLocationFingerprint>::__push_back_slow_path<CLMicroLocationFingerprint const&>((uint64_t *)&__p, (uint64_t)(v74 + 4));
            }
            else
            {
              std::allocator<CLMicroLocationFingerprint>::construct[abi:ne180100]<CLMicroLocationFingerprint,CLMicroLocationFingerprint const&>((uint64_t)&v106 + 8, v106, (uint64_t)(v74 + 4));
              uint64_t v82 = v81 + 192;
            }
            *(void *)&long long v106 = v82;
            uint64_t v83 = v104;
            if ((unint64_t)v104 >= *((void *)&v104 + 1))
            {
              uint64_t v85 = (uint64_t)(v104 - (void)v103) >> 4;
              unint64_t v86 = v85 + 1;
              if ((unint64_t)(v85 + 1) >> 60) {
                std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v87 = *((void *)&v104 + 1) - (void)v103;
              if ((uint64_t)(*((void *)&v104 + 1) - (void)v103) >> 3 > v86) {
                unint64_t v86 = v87 >> 3;
              }
              if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v88 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v88 = v86;
              }
              if (v88) {
                float v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::uuids::uuid>>((uint64_t)&v104 + 8, v88);
              }
              else {
                float v89 = 0;
              }
              int v90 = &v89[16 * v85];
              *(_OWORD *)int v90 = *(_OWORD *)v75;
              v92 = (char *)v103;
              v91 = (char *)v104;
              uint64_t v93 = v90;
              if ((void *)v104 != v103)
              {
                do
                {
                  *((_OWORD *)v93 - 1) = *((_OWORD *)v91 - 1);
                  v93 -= 16;
                  v91 -= 16;
                }
                while (v91 != v92);
                v91 = (char *)v103;
              }
              v84 = v90 + 16;
              char v103 = v93;
              *(void *)&long long v104 = v90 + 16;
              *((void *)&v104 + 1) = &v89[16 * v88];
              if (v91) {
                operator delete(v91);
              }
            }
            else
            {
              *(_OWORD *)long long v104 = *(_OWORD *)v75;
              v84 = (_OWORD *)(v83 + 16);
            }
            *(void *)&long long v104 = v84;
            ++v71;
          }
          if (v71 >= v68) {
            break;
          }
          v69 = (char *)v110;
          uint64_t v70 = ++v72;
        }
        while (v72 < (unint64_t)((v111 - (unsigned char *)v110) >> 4));
      }
      CLMicroLocationModel::SimilarityListData::appendNewEvents(*((void *)this + 12) + 72, *((void *)this + 12), (uint64_t *)&__p, (uint64_t *)&v103);
      if (v103)
      {
        *(void *)&long long v104 = v103;
        operator delete(v103);
      }
      *(void *)std::string buf = &__p;
      std::vector<CLMicroLocationFingerprint>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>>>::~__hash_table((uint64_t)v125);
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
    }
    long long v97 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v98 = (uint64_t)(*(void *)(v100 + 104) - *(void *)(v100 + 96)) >> 4;
      *(void *)std::string buf = 68289282;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      __int16 v117 = 2050;
      uint64_t v118 = v98;
      _os_log_impl(&dword_25631F000, v97, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"applyRecentLabelsToLSL, number of LSL items\", \"after update\":%{public}lu}", buf, 0x1Cu);
    }

    if (v107)
    {
      v108 = (char *)v107;
      operator delete(v107);
    }
    if (v110)
    {
      __int16 v111 = (char *)v110;
      operator delete(v110);
    }
  }
  *(void *)std::string buf = &v113;
  std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_256455844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  operator delete(v46);

  if (__p) {
    operator delete(__p);
  }
  if (a34) {
    operator delete(a34);
  }
  *(void *)(v47 - 208) = &a37;
  std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)(v47 - 208));
  _Unwind_Resume(a1);
}

void CLMiLoService::applyRecentLabelsToBlueAtlasModel(CLMiLoService *this)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 12);
  if (v1)
  {
    if (*(unsigned char *)(v1 + 288))
    {
      uint64_t v3 = 248;
      if (!*(unsigned char *)(v1 + 256)) {
        uint64_t v3 = 592;
      }
      double v4 = *(double *)(v1 + v3);
      uint64_t v5 = *(void *)this;
      *(_OWORD *)std::string buf = *(_OWORD *)((char *)this + 8);
      (*(void (**)(uint64_t *__return_ptr, double))(*(void *)v5 + 128))(&v54, v4);
      if (v54 == v55)
      {
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
        }
        uint64_t v48 = logObject_MicroLocation_Default;
        if (!os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_92;
        }
        *(_DWORD *)std::string buf = 68289026;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        char v44 = "{\"msg%{public}.0s\":\"applyRecentLabelsToBlueAtlasModel, no label entries for model\"}";
        long long v45 = v48;
        uint32_t v46 = 18;
      }
      else
      {
        double v6 = cl::chrono::CFAbsoluteTimeClock::now();
        uint64_t v7 = *((void *)this + 12);
        if (!*(unsigned char *)(v7 + 256)) {
          *(unsigned char *)(v7 + 256) = 1;
        }
        *(double *)(v7 + 248) = v6;
        uint64_t v8 = (void *)*((void *)this + 12);
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
        }
        uint64_t v9 = logObject_MicroLocation_Default;
        if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v10 = (uint64_t)(v8[26] - v8[25]) >> 4;
          *(_DWORD *)std::string buf = 68289282;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = "";
          __int16 v57 = 2050;
          uint64_t v58 = v10;
          _os_log_impl(&dword_25631F000, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"applyRecentLabelsToBlueAtlasModel, number of labels\", \"before update\":%{public}lu}", buf, 0x1Cu);
        }
        uint64_t v11 = v54;
        uint64_t v12 = v55;
        if (v54 != v55)
        {
          double v49 = v8 + 27;
          do
          {
            uint64_t v13 = (void *)v8[25];
            __int16 v14 = (_OWORD *)v8[26];
            __int16 v15 = (void *)(v11 + 40);
            __int16 v16 = v13;
            if (v13 != (void *)v14)
            {
              while (*v16 != *v15 || v16[1] != *(void *)(v11 + 48))
              {
                v16 += 2;
                if (v16 == (void *)v14)
                {
                  __int16 v16 = (void *)v8[26];
                  break;
                }
              }
            }
            if (v16 == (void *)v14)
            {
              if ((unint64_t)v14 >= *v49)
              {
                uint64_t v29 = ((char *)v14 - (char *)v13) >> 4;
                unint64_t v30 = v29 + 1;
                if ((unint64_t)(v29 + 1) >> 60) {
                  std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v31 = *v49 - (void)v13;
                if (v31 >> 3 > v30) {
                  unint64_t v30 = v31 >> 3;
                }
                if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v32 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v32 = v30;
                }
                if (v32) {
                  __int16 v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::uuids::uuid>>((uint64_t)v49, v32);
                }
                else {
                  __int16 v33 = 0;
                }
                __int16 v34 = &v33[16 * v29];
                *(_OWORD *)__int16 v34 = *(_OWORD *)v15;
                __int16 v36 = (char *)v8[25];
                __int16 v35 = (char *)v8[26];
                __int16 v37 = v34;
                if (v35 != v36)
                {
                  do
                  {
                    *((_OWORD *)v37 - 1) = *((_OWORD *)v35 - 1);
                    v37 -= 16;
                    v35 -= 16;
                  }
                  while (v35 != v36);
                  __int16 v35 = (char *)v8[25];
                }
                unint64_t v28 = v34 + 16;
                v8[25] = v37;
                v8[26] = v34 + 16;
                v8[27] = &v33[16 * v32];
                if (v35) {
                  operator delete(v35);
                }
              }
              else
              {
                _OWORD *v14 = *(_OWORD *)v15;
                unint64_t v28 = v14 + 1;
              }
              v8[26] = v28;
            }
            else
            {
              if (onceToken_MicroLocation_Default != -1) {
                dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
              }
              uint64_t v18 = (id)logObject_MicroLocation_Default;
              if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
              {
                char v19 = operator new(0x28uLL);
                __int16 v52 = v19;
                long long v53 = xmmword_256514540;
                _OWORD *v19 = 0u;
                v19[1] = 0u;
                *(void *)((char *)v19 + 29) = 0;
                boost::uuids::to_chars<char *>(v11 + 40, v19);
                if (v53 >= 0) {
                  char v20 = &v52;
                }
                else {
                  char v20 = v52;
                }
                uint64_t v21 = operator new(0x28uLL);
                std::string __p = v21;
                long long v51 = xmmword_256514540;
                _OWORD *v21 = 0u;
                v21[1] = 0u;
                *(void *)((char *)v21 + 29) = 0;
                boost::uuids::to_chars<char *>(v11, v21);
                p_p = &__p;
                if (v51 < 0) {
                  p_p = __p;
                }
                *(_DWORD *)std::string buf = 68289538;
                *(_DWORD *)&uint8_t buf[4] = 0;
                *(_WORD *)&uint8_t buf[8] = 2082;
                *(void *)&buf[10] = "";
                __int16 v57 = 2082;
                uint64_t v58 = (uint64_t)v20;
                __int16 v59 = 2082;
                size_t v60 = p_p;
                _os_log_impl(&dword_25631F000, v18, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"applyRecentLabelsToBlueAtlasModel, tried to apply a label which is already in the LSL\", \"LabelUUID\":%{public, location:escape_only}s, \"TriggerUUID\":%{public, location:escape_only}s}", buf, 0x26u);
                if (SHIBYTE(v51) < 0) {
                  operator delete(__p);
                }
                if (SHIBYTE(v53) < 0) {
                  operator delete(v52);
                }
              }

              if (onceToken_MicroLocation_Default != -1) {
                dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
              }
              long long v23 = (id)logObject_MicroLocation_Default;
              if (os_signpost_enabled(v23))
              {
                uint64_t v24 = operator new(0x28uLL);
                __int16 v52 = v24;
                long long v53 = xmmword_256514540;
                *uint64_t v24 = 0u;
                v24[1] = 0u;
                *(void *)((char *)v24 + 29) = 0;
                boost::uuids::to_chars<char *>(v11 + 40, v24);
                if (v53 >= 0) {
                  char v25 = &v52;
                }
                else {
                  char v25 = v52;
                }
                __int16 v26 = operator new(0x28uLL);
                std::string __p = v26;
                long long v51 = xmmword_256514540;
                _OWORD *v26 = 0u;
                v26[1] = 0u;
                *(void *)((char *)v26 + 29) = 0;
                boost::uuids::to_chars<char *>(v11, v26);
                uint64_t v27 = &__p;
                if (v51 < 0) {
                  uint64_t v27 = __p;
                }
                *(_DWORD *)std::string buf = 68289538;
                *(_DWORD *)&uint8_t buf[4] = 0;
                *(_WORD *)&uint8_t buf[8] = 2082;
                *(void *)&buf[10] = "";
                __int16 v57 = 2082;
                uint64_t v58 = (uint64_t)v25;
                __int16 v59 = 2082;
                size_t v60 = v27;
                _os_signpost_emit_with_name_impl(&dword_25631F000, v23, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "applyRecentLabelsToBlueAtlasModel, tried to apply a label which is already in the LSL", "{\"msg%{public}.0s\":\"applyRecentLabelsToBlueAtlasModel, tried to apply a label which is already in the LSL\", \"LabelUUID\":%{public, location:escape_only}s, \"TriggerUUID\":%{public, location:escape_only}s}", buf, 0x26u);
                if (SHIBYTE(v51) < 0) {
                  operator delete(__p);
                }
                if (SHIBYTE(v53) < 0) {
                  operator delete(v52);
                }
              }
            }
            v11 += 64;
          }
          while (v11 != v12);
        }
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
        }
        uint64_t v42 = logObject_MicroLocation_Default;
        if (!os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_92;
        }
        uint64_t v43 = (uint64_t)(v8[26] - v8[25]) >> 4;
        *(_DWORD *)std::string buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        __int16 v57 = 2050;
        uint64_t v58 = v43;
        char v44 = "{\"msg%{public}.0s\":\"applyRecentLabelsToBlueAtlasModel, number of labels\", \"after update\":%{public}lu}";
        long long v45 = v42;
        uint32_t v46 = 28;
      }
      _os_log_impl(&dword_25631F000, v45, OS_LOG_TYPE_DEFAULT, v44, buf, v46);
LABEL_92:
      *(void *)std::string buf = &v54;
      std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      return;
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
    }
    uint64_t v47 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      _os_log_impl(&dword_25631F000, v47, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"applyRecentLabelsToBlueAtlasModel, model has no Blue Atlas data\"}", buf, 0x12u);
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
    }
    unint64_t v39 = logObject_MicroLocation_Default;
    if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
    {
      *(_DWORD *)std::string buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      uint64_t v40 = "applyRecentLabelsToBlueAtlasModel, model has no Blue Atlas data";
      unint64_t v41 = "{\"msg%{public}.0s\":\"applyRecentLabelsToBlueAtlasModel, model has no Blue Atlas data\"}";
      goto LABEL_86;
    }
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
    }
    uint64_t v38 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      _os_log_impl(&dword_25631F000, v38, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"applyRecentLabelsToBlueAtlasModel, no current model\"}", buf, 0x12u);
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
    }
    unint64_t v39 = logObject_MicroLocation_Default;
    if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
    {
      *(_DWORD *)std::string buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      uint64_t v40 = "applyRecentLabelsToBlueAtlasModel, no current model";
      unint64_t v41 = "{\"msg%{public}.0s\":\"applyRecentLabelsToBlueAtlasModel, no current model\"}";
LABEL_86:
      _os_signpost_emit_with_name_impl(&dword_25631F000, v39, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v40, v41, buf, 0x12u);
    }
  }
}

void sub_2564562F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,char *a28)
{
  a28 = &a25;
  std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  _Unwind_Resume(a1);
}

uint64_t CLMiLoService::internalToExternalServiceQuality(int a1, int a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
  }
  double v4 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    v10[0] = 68289538;
    v10[1] = 0;
    __int16 v11 = 2082;
    uint64_t v12 = "";
    __int16 v13 = 1026;
    int v14 = a1;
    __int16 v15 = 1026;
    int v16 = a2;
    _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"internalToExternalServiceQuality\", \"qualityLevel\":%{public}d, \"candidateQualityLevel\":%{public}d}", (uint8_t *)v10, 0x1Eu);
  }
  if (a1 == 3)
  {
    uint64_t v5 = 29;
    if (a2 != 3) {
      uint64_t v5 = 30;
    }
    BOOL v6 = a2 == 1;
    uint64_t v7 = 28;
    goto LABEL_13;
  }
  if (a1 == 1)
  {
    uint64_t v5 = 9;
    if (a2 != 3) {
      uint64_t v5 = 10;
    }
    BOOL v6 = a2 == 1;
    uint64_t v7 = 8;
LABEL_13:
    if (v6) {
      return v7;
    }
    else {
      return v5;
    }
  }
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
  }
  uint64_t v9 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v10[0]) = 0;
    _os_log_impl(&dword_25631F000, v9, OS_LOG_TYPE_ERROR, "Service Quality is invalid", (uint8_t *)v10, 2u);
  }
  return 0;
}

CLMicroLocationAnchorValueStatisticsMap *std::optional<CLMicroLocationAnchorValueStatisticsMap>::emplace[abi:ne180100]<CLMicroLocationProto::ClusterAnchorValueStatisticsVector const&,void>(CLMicroLocationAnchorValueStatisticsMap *a1, CLMicroLocationProto::ClusterAnchorValueStatisticsVector *a2)
{
  if (*((unsigned char *)a1 + 40))
  {
    a1 = (CLMicroLocationAnchorValueStatisticsMap *)std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>>>::~__hash_table((uint64_t)a1);
    *((unsigned char *)a1 + 40) = 0;
  }
  __n128 result = CLMicroLocationAnchorValueStatisticsMap::CLMicroLocationAnchorValueStatisticsMap(a1, a2);
  *((unsigned char *)result + 40) = 1;
  return result;
}

uint64_t CLMiLoService::modelTypeByServiceAndLocationType(uint64_t a1, uint64_t a2)
{
  if ((unint64_t)(a1 - 2) < 2) {
    return 1;
  }
  if (a1 == 1) {
    return 0;
  }
  if (a1 == 4)
  {
    if (a2 == 2) {
      return 3;
    }
    else {
      return 2;
    }
  }
  else
  {
    uint64_t v3 = CLMiLoService::modelTypeByServiceAndLocationType();
    return CLMiLoService::generationAlgorithmByServiceAndLocationType(v3);
  }
}

uint64_t CLMiLoService::generationAlgorithmByServiceAndLocationType(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 - 1;
  uint64_t result = 4;
  switch(v2)
  {
    case 0:
      int v4 = ULSettings::get<ULSettings::LearnerAlgorithm>();
      if (v4 == 1) {
        return 2;
      }
      if (!v4) {
        return 1;
      }
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
      }
      uint64_t v5 = logObject_MicroLocation_Default;
      if (!os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR)) {
        return 1;
      }
      __int16 v11 = 0;
      BOOL v6 = (uint8_t *)&v11;
      goto LABEL_27;
    case 1:
      return result;
    case 2:
      return 3;
    case 3:
      if (a2 == 2) {
        return 5;
      }
      int v9 = ULSettings::get<ULSettings::LearnerAlgorithm>();
      if (v9 == 1) {
        return 2;
      }
      if (v9)
      {
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
        }
        uint64_t v5 = logObject_MicroLocation_Default;
        if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)std::string buf = 0;
          BOOL v6 = buf;
LABEL_27:
          _os_log_impl(&dword_25631F000, v5, OS_LOG_TYPE_ERROR, "Get generation algorithm: Unknown learner type", v6, 2u);
        }
      }
      return 1;
    default:
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
      }
      uint64_t v7 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v10 = 0;
        _os_log_impl(&dword_25631F000, v7, OS_LOG_TYPE_ERROR, "Get generation algorithm: Unknown service type", v10, 2u);
      }
      int v8 = ULSettings::get<ULSettings::LearnerAlgorithm>();
      if (v8 == 1) {
        return 2;
      }
      if (!v8) {
        return 1;
      }
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
      }
      uint64_t v5 = logObject_MicroLocation_Default;
      if (!os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR)) {
        return 1;
      }
      __int16 v13 = 0;
      BOOL v6 = (uint8_t *)&v13;
      goto LABEL_27;
  }
}

uint64_t ULSettings::get<ULSettings::LearnerAlgorithm>()
{
  os_log_t v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  uint64_t v2 = [NSString stringWithUTF8String:"ULLearnerAlgorithm"];
  uint64_t v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 unsignedIntValue];
  }
  else {
    uint64_t v4 = [&unk_2704F1D10 unsignedIntValue];
  }
  uint64_t v5 = v4;

  return v5;
}

void sub_2564568DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL CLMiLoService::doAllowObservation(CLMiLoService *this)
{
  return *((void *)this + 12) && **((unsigned char **)this + 56) != 0;
}

void CLMiLoService::didStateChangeToRunning(uint64_t a1, int a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
  }
  uint64_t v4 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (char *)operator new(0x28uLL);
    *(void *)(v5 + 29) = 0;
    *(_OWORD *)uint64_t v5 = 0u;
    *((_OWORD *)v5 + 1) = 0u;
    boost::uuids::to_chars<char *>(a1 + 8, v5);
    v6[0] = 68289538;
    v6[1] = 0;
    __int16 v7 = 2082;
    int v8 = "";
    __int16 v9 = 2082;
    uint64_t v10 = v5;
    __int16 v11 = 1026;
    int v12 = a2;
    _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoService state changed to running: \", \"ServiceId\":%{public, location:escape_only}s, \"Previous state\":%{public}u}", (uint8_t *)v6, 0x22u);
    operator delete(v5);
  }

  *(void *)(a1 + 88) = 0;
}

void sub_256456A70(_Unwind_Exception *a1)
{
  operator delete(v2);

  _Unwind_Resume(a1);
}

void CLMiLoService::didStateChangeToSuspended(int64x2_t *a1, int a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
  }
  uint64_t v4 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (char *)operator new(0x28uLL);
    *(void *)(v5 + 29) = 0;
    *(_OWORD *)uint64_t v5 = 0u;
    *((_OWORD *)v5 + 1) = 0u;
    boost::uuids::to_chars<char *>((uint64_t)&a1->i64[1], v5);
    int v6 = a1[23].u8[0];
    v7[0] = 68289794;
    v7[1] = 0;
    __int16 v8 = 2082;
    __int16 v9 = "";
    __int16 v10 = 2082;
    __int16 v11 = v5;
    __int16 v12 = 1026;
    int v13 = a2;
    __int16 v14 = 1026;
    int v15 = v6;
    _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoService state changed to suspended: \", \"ServiceId\":%{public, location:escape_only}s, \"Previous state\":%{public}u, \"localization interrupted?\":%{public}hhd}", (uint8_t *)v7, 0x28u);
    operator delete(v5);
  }

  if (a1[23].i8[0]) {
    a1[23].i8[0] = 0;
  }
  CLMiLoService::releaseAllOutstandingRequestsAsFailed(a1);
}

void sub_256456BE8(_Unwind_Exception *a1)
{
  operator delete(v2);

  _Unwind_Resume(a1);
}

void CLMiLoService::releaseAllOutstandingRequestsAsFailed(int64x2_t *this)
{
  CLMiLoService::releaseOutstandingPredictionRequests(this, 1);
  v5[0] = 0;
  v5[1] = 0;
  memset(v3, 0, sizeof(v3));
  uint64_t v4 = (uint64_t *)v5;
  int v6 = 2;
  int v2 = 2;
  std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__emplace_unique_key_args<CLMicroLocationRecordingCompletionMetaInformation::RecordingError,CLMicroLocationRecordingCompletionMetaInformation::RecordingError>(&v4, &v2, &v2);
  CLMiLoService::releaseOutstandingObservationRequests(this, (uint64_t)v3);
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&v4, v5[0]);
}

void sub_256456C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy(v14, a14);
  _Unwind_Resume(a1);
}

void CLMiLoService::addNewTruthLabelToModelIfAppropriate(CLMiLoService *this, uuid *a2, const uuid *a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  unint64_t v4 = *((void *)this + 3);
  if (v4 >= 4)
  {
    if (v4 == 4)
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
      }
      __int16 v11 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v12 = (char *)operator new(0x28uLL);
        *(void *)(v12 + 29) = 0;
        *(_OWORD *)__int16 v12 = 0u;
        *((_OWORD *)v12 + 1) = 0u;
        boost::uuids::to_chars<char *>((uint64_t)a2, v12);
        int v13 = (char *)operator new(0x28uLL);
        *(void *)(v13 + 29) = 0;
        *(_OWORD *)int v13 = 0u;
        *((_OWORD *)v13 + 1) = 0u;
        boost::uuids::to_chars<char *>((uint64_t)a3, v13);
        int v16 = 68289538;
        int v17 = 0;
        __int16 v18 = 2082;
        char v19 = "";
        __int16 v20 = 2082;
        uint64_t v21 = v12;
        __int16 v22 = 2082;
        long long v23 = v13;
        _os_log_impl(&dword_25631F000, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"adding a label to the LSL out of learning flow\", \"Trigger UUID\":%{public, location:escape_only}s, \"Label UUID\":%{public, location:escape_only}s}", (uint8_t *)&v16, 0x26u);
        operator delete(v13);
        operator delete(v12);
      }

      uint64_t v14 = *((void *)this + 12);
      if (v14)
      {
        if (*(unsigned char *)(v14 + 192))
        {
          CLMiLoService::addNewTruthLabelToLSL(this, a2, a3);
        }
        else if (*(unsigned char *)(v14 + 288))
        {
          CLMiLoService::addNewTruthLabelToBlueAtlasModel(this, a3);
        }
        else
        {
          int v15 = _CLLogObjectForCategory_MicroLocation_Default();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            LOWORD(v16) = 0;
            _os_log_impl(&dword_25631F000, v15, OS_LOG_TYPE_ERROR, "addNewTruthLabelToModelIfAppropriate: model has no LSL or Blue Atlas data", (uint8_t *)&v16, 2u);
          }
        }
      }
    }
    else if (v4 == 5)
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
      }
      __int16 v7 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
      {
        int v16 = 68289026;
        int v17 = 0;
        __int16 v18 = 2082;
        char v19 = "";
        _os_log_impl(&dword_25631F000, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"should not call addNewTruthLabelToModelIfAppropriate with ULServiceTypeMax\"}", (uint8_t *)&v16, 0x12u);
      }
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
      }
      __int16 v8 = logObject_MicroLocation_Default;
      if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
      {
        int v16 = 68289026;
        int v17 = 0;
        __int16 v18 = 2082;
        char v19 = "";
        _os_signpost_emit_with_name_impl(&dword_25631F000, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "should not call addNewTruthLabelToModelIfAppropriate with ULServiceTypeMax", "{\"msg%{public}.0s\":\"should not call addNewTruthLabelToModelIfAppropriate with ULServiceTypeMax\"}", (uint8_t *)&v16, 0x12u);
      }
    }
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
    }
    uint64_t v5 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
    {
      int v6 = (char *)*((unsigned int *)this + 6);
      int v16 = 68289282;
      int v17 = 0;
      __int16 v18 = 2082;
      char v19 = "";
      __int16 v20 = 2050;
      uint64_t v21 = v6;
      _os_log_impl(&dword_25631F000, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"not adding new truth label out of learning flow\", \"ServiceType\":%{public}lu}", (uint8_t *)&v16, 0x1Cu);
    }
  }
}

void sub_25645705C(_Unwind_Exception *a1)
{
  operator delete(v3);
  operator delete(v2);

  _Unwind_Resume(a1);
}

void CLMiLoService::releaseOutstandingObservationRequests(void *a1, uint64_t a2)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  int v2 = *(_DWORD *)(a2 + 48);
  uint64_t v3 = 12;
  if (!v2) {
    uint64_t v3 = -1;
  }
  uint64_t v22 = v3;
  if (a1[52])
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
    }
    int v6 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v7 = operator new(0x28uLL);
      std::string __p = v7;
      long long v24 = xmmword_256514540;
      *__int16 v7 = 0u;
      v7[1] = 0u;
      *(void *)((char *)v7 + 29) = 0;
      boost::uuids::to_chars<char *>((uint64_t)(a1 + 1), v7);
      p_p = &__p;
      if (v24 < 0) {
        p_p = __p;
      }
      BOOL v9 = a1[52] != 0;
      *(_DWORD *)std::string buf = 68289794;
      int v26 = 0;
      __int16 v27 = 2082;
      unint64_t v28 = "";
      __int16 v29 = 2082;
      unint64_t v30 = p_p;
      __int16 v31 = 1026;
      BOOL v32 = v9;
      __int16 v33 = 1026;
      BOOL v34 = v2 == 0;
      _os_log_impl(&dword_25631F000, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoService releasing observation requsts: \", \"ServiceId\":%{public, location:escape_only}s, \"NumRequests\":%{public}hhd, \"Success\":%{public}hhd}", buf, 0x28u);
      if (SHIBYTE(v24) < 0) {
        operator delete(__p);
      }
    }

    while (a1[52])
    {
      unint64_t v10 = a1[51];
      uint64_t v11 = *(void *)(a1[48] + 8 * (v10 / 0x78));
      unint64_t v12 = v10 % 0x78;
      int v13 = (uuid *)(v11 + 34 * (v10 % 0x78));
      if (!v2)
      {
        uint64_t v14 = (const uuid *)(v11 + 34 * v12);
        if (v14[2].var0[0]) {
          CLMiLoService::addNewTruthLabelToModelIfAppropriate((CLMiLoService *)a1, v13, v14 + 1);
        }
      }
      if (*(unsigned char *)(v11 + 34 * v12 + 33))
      {
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
        }
        int v15 = (id)logObject_MicroLocation_Default;
        if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_30;
        }
        int v16 = operator new(0x28uLL);
        std::string __p = v16;
        long long v24 = xmmword_256514540;
        _OWORD *v16 = 0u;
        v16[1] = 0u;
        *(void *)((char *)v16 + 29) = 0;
        boost::uuids::to_chars<char *>((uint64_t)v13, v16);
        int v17 = &__p;
        if (v24 < 0) {
          int v17 = __p;
        }
        *(_DWORD *)std::string buf = 68289282;
        int v26 = 0;
        __int16 v27 = 2082;
        unint64_t v28 = "";
        __int16 v29 = 2082;
        unint64_t v30 = v17;
        __int16 v18 = v15;
        char v19 = "{\"msg%{public}.0s\":\"Response to client was not sent since the observation request is internal \", \"Req"
              "uestId\":%{public, location:escape_only}s}";
      }
      else
      {
        (*(void (**)(void, void *, uuid *, uint64_t))(*(void *)*a1 + 40))(*a1, a1 + 1, v13, v22);
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
        }
        int v15 = (id)logObject_MicroLocation_Default;
        if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_30;
        }
        __int16 v20 = operator new(0x28uLL);
        std::string __p = v20;
        long long v24 = xmmword_256514540;
        _OWORD *v20 = 0u;
        v20[1] = 0u;
        *(void *)((char *)v20 + 29) = 0;
        boost::uuids::to_chars<char *>((uint64_t)v13, v20);
        uint64_t v21 = &__p;
        if (v24 < 0) {
          uint64_t v21 = __p;
        }
        *(_DWORD *)std::string buf = 68289282;
        int v26 = 0;
        __int16 v27 = 2082;
        unint64_t v28 = "";
        __int16 v29 = 2082;
        unint64_t v30 = v21;
        __int16 v18 = v15;
        char v19 = "{\"msg%{public}.0s\":\"CLMiLoService sent response to client with: \", \"RequestId\":%{public, location:escape_only}s}";
      }
      _os_log_impl(&dword_25631F000, v18, OS_LOG_TYPE_DEFAULT, v19, buf, 0x1Cu);
      if (SHIBYTE(v24) < 0) {
        operator delete(__p);
      }
LABEL_30:

      (*(void (**)(void, void *, uuid *, uint64_t))(*(void *)*a1 + 48))(*a1, a1 + 1, v13, a2);
      *(int64x2_t *)(a1 + 51) = vaddq_s64(*(int64x2_t *)(a1 + 51), (int64x2_t)xmmword_256516360);
      std::deque<CLMiLoService::OutstandingRequest>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)(a1 + 47), 1);
    }
  }
}

void sub_256457518(_Unwind_Exception *a1)
{
  operator delete(v2);

  _Unwind_Resume(a1);
}

uint64_t CLMiLoService::predictionRequest(uint64_t *a1, const uuid *a2, uint64_t a3, int a4)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  BOOL v7 = (a4 & 1) != 0 || *((unsigned char *)a1 + 296) == 0;
  if (ULSettings::get<ULSettings::ForcePredictionForLowLatencyServiceEnabled>())
  {
    int v8 = *((unsigned __int8 *)a1 + 457);
    if (*((unsigned char *)a1 + 457)) {
      int v8 = *((unsigned __int8 *)a1 + 456);
    }
    BOOL v7 = (v8 | v7) != 0;
  }
  if (a1[11]) {
    goto LABEL_27;
  }
  if (*((unsigned char *)a1 + 368))
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
    }
    BOOL v9 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      if (*((unsigned char *)a1 + 368))
      {
        unint64_t v10 = (char *)operator new(0x28uLL);
        *(void *)std::string __p = v10;
        *(_OWORD *)&__p[8] = xmmword_256514540;
        *(_OWORD *)unint64_t v10 = 0u;
        *((_OWORD *)v10 + 1) = 0u;
        *(void *)(v10 + 29) = 0;
        boost::uuids::to_chars<char *>((uint64_t)(a1 + 44), v10);
        uint64_t v11 = __p;
        if (__p[23] < 0) {
          uint64_t v11 = *(const char **)__p;
        }
        *(void *)long long v24 = 68289282;
        *(_WORD *)&v24[8] = 2082;
        *(void *)&v24[10] = "";
        __int16 v25 = 2082;
        int v26 = v11;
        _os_log_impl(&dword_25631F000, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoService reject prediction request because other request in progress\", \"LocalizationId\":%{public, location:escape_only}s}", v24, 0x1Cu);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
      else
      {
        *(void *)long long v24 = 68289282;
        *(_WORD *)&v24[8] = 2082;
        *(void *)&v24[10] = "";
        __int16 v25 = 2082;
        int v26 = "None";
        _os_log_impl(&dword_25631F000, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoService reject prediction request because other request in progress\", \"LocalizationId\":%{public, location:escape_only}s}", v24, 0x1Cu);
      }
    }

    goto LABEL_27;
  }
  uint64_t v12 = *a1;
  v24[0] = 0;
  v24[16] = 0;
  (*(void (**)(unsigned char *__return_ptr))(*(void *)v12 + 16))(__p);
  if (__p[17])
  {
    CLMiLoService::sendCachedResults((CLMiLoService *)a1, a2);
LABEL_24:
    uint64_t v14 = 1;
    goto LABEL_28;
  }
  if (__p[16])
  {
    int v13 = *((unsigned __int8 *)a1 + 368);
    *((_OWORD *)a1 + 22) = *(_OWORD *)__p;
    if (!v13) {
      *((unsigned char *)a1 + 368) = 1;
    }
    *(uuid *)long long v24 = *a2;
    v24[16] = 0;
    WORD1(v28) = 0;
    std::deque<CLMiLoService::OutstandingRequest>::push_back(a1 + 38, (uint64_t)v24);
    goto LABEL_24;
  }
LABEL_27:
  uint64_t v14 = 0;
LABEL_28:
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
  }
  int v15 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = (char *)operator new(0x28uLL);
    *(void *)(v16 + 29) = 0;
    *(_OWORD *)int v16 = 0u;
    *((_OWORD *)v16 + 1) = 0u;
    boost::uuids::to_chars<char *>((uint64_t)(a1 + 1), v16);
    int v17 = (char *)operator new(0x28uLL);
    *(void *)(v17 + 29) = 0;
    *(_OWORD *)int v17 = 0u;
    *((_OWORD *)v17 + 1) = 0u;
    boost::uuids::to_chars<char *>((uint64_t)a2, v17);
    int v18 = *((unsigned __int8 *)a1 + 368);
    if (*((unsigned char *)a1 + 368))
    {
      char v19 = (char *)operator new(0x28uLL);
      *(void *)(v19 + 29) = 0;
      *(_OWORD *)char v19 = 0u;
      *((_OWORD *)v19 + 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)(a1 + 44), v19);
    }
    else
    {
      char v19 = "None";
    }
    int v20 = *((_DWORD *)a1 + 22);
    int v21 = *((unsigned __int8 *)a1 + 457);
    if (*((unsigned char *)a1 + 457)) {
      int v21 = *((unsigned __int8 *)a1 + 456);
    }
    int v22 = *((unsigned __int8 *)a1 + 296);
    *(void *)long long v24 = 68291330;
    *(_WORD *)&v24[8] = 2082;
    *(void *)&v24[10] = "";
    __int16 v25 = 2082;
    int v26 = v16;
    __int16 v27 = 2082;
    unint64_t v28 = v17;
    __int16 v29 = 2082;
    unint64_t v30 = v19;
    __int16 v31 = 1026;
    int v32 = v20;
    __int16 v33 = 1026;
    BOOL v34 = v7;
    __int16 v35 = 1026;
    int v36 = a4;
    __int16 v37 = 1026;
    int v38 = v21;
    __int16 v39 = 1026;
    int v40 = v22;
    __int16 v41 = 1026;
    int v42 = v14;
    _os_log_impl(&dword_25631F000, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoService received prediction request: \", \"ServiceId\":%{public, location:escape_only}s, \"RequestId\":%{public, location:escape_only}s, \"LocalizationId\":%{public, location:escape_only}s, \"State\":%{public}u, \"force verdict\":%{public}hhd, \"isForcedRequest\":%{public}hhd, \"Is low latency\":%{public}hhd, \"Has valid cache\":%{public}hhd, \"Success\":%{public}hhd}", v24, 0x54u);
    if (v18) {
      operator delete(v19);
    }
    operator delete(v17);
    operator delete(v16);
  }

  return v14;
}

void sub_2564579C8(_Unwind_Exception *a1)
{
  operator delete(v2);

  _Unwind_Resume(a1);
}

uint64_t CLMiLoService::observationRequest(uint64_t *a1, _OWORD *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (!a1[12] || !*(unsigned char *)a1[56])
  {
    uint64_t v12 = 0;
    goto LABEL_9;
  }
  unint64_t v10 = (const void *)*a1;
  long long v28 = *(_OWORD *)(a1 + 1);
  CLMicroLocationClientUtils::getClientIdAndServiceUuid((const void **)a1 + 5, (uint64_t)&v28, (std::string *)__p);
  uint64_t v11 = (*(uint64_t (**)(const void *, unsigned char *, _OWORD *, uint64_t, uint64_t))(*(void *)v10 + 24))(v10, __p, a2, a3, a4);
  uint64_t v12 = v11;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (!v12) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (v11)
  {
LABEL_8:
    long long v13 = *(_OWORD *)a3;
    *(_OWORD *)std::string __p = *a2;
    *(_OWORD *)&__p[16] = v13;
    __p[32] = *(unsigned char *)(a3 + 16);
    __p[33] = a5;
    std::deque<CLMiLoService::OutstandingRequest>::push_back(a1 + 47, (uint64_t)__p);
    uint64_t v12 = 1;
  }
LABEL_9:
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
  }
  uint64_t v14 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = (char *)operator new(0x28uLL);
    *(void *)(v15 + 29) = 0;
    *(_OWORD *)int v15 = 0u;
    *((_OWORD *)v15 + 1) = 0u;
    boost::uuids::to_chars<char *>((uint64_t)(a1 + 1), v15);
    int v16 = (char *)operator new(0x28uLL);
    *(void *)(v16 + 29) = 0;
    *(_OWORD *)int v16 = 0u;
    *((_OWORD *)v16 + 1) = 0u;
    boost::uuids::to_chars<char *>((uint64_t)a2, v16);
    if (*(unsigned char *)(a3 + 16))
    {
      int v17 = (char *)operator new(0x28uLL);
      *(void *)(v17 + 29) = 0;
      *(_OWORD *)int v17 = 0u;
      *((_OWORD *)v17 + 1) = 0u;
      boost::uuids::to_chars<char *>(a3, v17);
      uint64_t v18 = a1[11];
      *(void *)std::string __p = 68290306;
      *(_WORD *)&__p[8] = 2082;
      *(void *)&__p[10] = "";
      *(_WORD *)&__p[18] = 2082;
      *(void *)&__p[20] = v15;
      *(_WORD *)&unsigned char __p[28] = 2082;
      *(void *)&__p[30] = v16;
      __int16 v22 = 2082;
      long long v23 = v17;
      __int16 v24 = 1026;
      int v25 = v18;
      __int16 v26 = 1026;
      int v27 = v12;
      _os_log_impl(&dword_25631F000, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoService received observation request: \", \"ServiceId\":%{public, location:escape_only}s, \"RequestId\":%{public, location:escape_only}s, \"PlaceId\":%{public, location:escape_only}s, \"State\":%{public}u, \"Success\":%{public}hhd}", __p, 0x3Cu);
      operator delete(v17);
    }
    else
    {
      uint64_t v19 = a1[11];
      *(void *)std::string __p = 68290306;
      *(_WORD *)&__p[8] = 2082;
      *(void *)&__p[10] = "";
      *(_WORD *)&__p[18] = 2082;
      *(void *)&__p[20] = v15;
      *(_WORD *)&unsigned char __p[28] = 2082;
      *(void *)&__p[30] = v16;
      __int16 v22 = 2082;
      long long v23 = "None";
      __int16 v24 = 1026;
      int v25 = v19;
      __int16 v26 = 1026;
      int v27 = v12;
      _os_log_impl(&dword_25631F000, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoService received observation request: \", \"ServiceId\":%{public, location:escape_only}s, \"RequestId\":%{public, location:escape_only}s, \"PlaceId\":%{public, location:escape_only}s, \"State\":%{public}u, \"Success\":%{public}hhd}", __p, 0x3Cu);
    }
    operator delete(v16);
    operator delete(v15);
  }

  return v12;
}

void sub_256457D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  operator delete(v16);
  operator delete(v17);
  operator delete(v15);

  _Unwind_Resume(a1);
}

void CLMiLoService::didRecordingStop(void *a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
  }
  unint64_t v4 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (char *)operator new(0x28uLL);
    *(void *)(v5 + 29) = 0;
    *(_OWORD *)uint64_t v5 = 0u;
    *((_OWORD *)v5 + 1) = 0u;
    boost::uuids::to_chars<char *>((uint64_t)(a1 + 1), v5);
    BOOL v6 = *(_DWORD *)(a2 + 48) == 0;
    v7[0] = 68289538;
    v7[1] = 0;
    __int16 v8 = 2082;
    BOOL v9 = "";
    __int16 v10 = 2082;
    uint64_t v11 = v5;
    __int16 v12 = 1026;
    BOOL v13 = v6;
    _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoService received recording stop: \", \"ServiceId\":%{public, location:escape_only}s, \"Success\":%{public}hhd}", (uint8_t *)v7, 0x22u);
    operator delete(v5);
  }

  CLMiLoService::releaseOutstandingObservationRequests(a1, a2);
}

void sub_256457EEC(_Unwind_Exception *a1)
{
  operator delete(v2);

  _Unwind_Resume(a1);
}

uint64_t CLMiLoService::getCurrentStatus@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  v258[19] = *MEMORY[0x263EF8340];
  a3[1] = 0;
  QualityIndicator = (char *)(a3 + 1);
  a3[2] = 0;
  a3[3] = 0;
  a3[7] = 0;
  *((unsigned char *)a3 + 64) = 0;
  *((unsigned char *)a3 + 68) = 0;
  *((_OWORD *)a3 + 5) = 0u;
  BOOL v7 = (char *)(a3 + 10);
  *((unsigned char *)a3 + 152) = 0;
  *((_OWORD *)a3 + 6) = 0u;
  *((_OWORD *)a3 + 7) = 0u;
  *((unsigned char *)a3 + 128) = 0;
  *((_OWORD *)a3 + 10) = 0u;
  *((_OWORD *)a3 + 11) = 0u;
  a3[24] = 0;
  *a3 = *(void *)(a1 + 88);
  if (!*(unsigned char *)(a2 + 24)) {
    goto LABEL_11;
  }
  if (*(void *)a2 >= 0x20uLL) {
    std::__throw_out_of_range[abi:ne180100]("bitset test argument out of range");
  }
  if (((*(void *)(a1 + 32) >> *(void *)a2) & 1) == 0)
  {
LABEL_11:
    uint64_t v14 = operator new(8uLL);
    void *v14 = 0;
    a3[2] = (uint64_t)(v14 + 1);
    a3[3] = (uint64_t)(v14 + 1);
LABEL_12:
    a3[1] = (uint64_t)v14;
    goto LABEL_13;
  }
  __int16 v8 = *(void **)(a1 + 96);
  if (!v8)
  {
    int v25 = *(unsigned __int8 *)(a1 + 458);
    uint64_t v14 = operator new(8uLL);
    void *v14 = 4 * (v25 != 0);
    a3[2] = (uint64_t)(v14 + 1);
    a3[3] = (uint64_t)(v14 + 1);
    goto LABEL_12;
  }
  CLMicroLocationModel::getPredictionClasses(v8, (void **)buf);
  BOOL v9 = (void *)a3[13];
  if (v9)
  {
    a3[14] = (uint64_t)v9;
    operator delete(v9);
    a3[13] = 0;
    a3[14] = 0;
    a3[15] = 0;
  }
  *(_OWORD *)(a3 + 13) = *(_OWORD *)buf;
  a3[15] = *(void *)&buf[16];
  __int16 v10 = *(CLMicroLocationModel **)(a1 + 96);
  if (!v10 || !CLMicroLocationModel::isValid(v10))
  {
    unint64_t v11 = a3[3];
    __int16 v12 = (void *)a3[2];
    if ((unint64_t)v12 >= v11)
    {
      __int16 v26 = *(void **)QualityIndicator;
      uint64_t v27 = ((uint64_t)v12 - *(void *)QualityIndicator) >> 3;
      unint64_t v28 = v27 + 1;
      if ((unint64_t)(v27 + 1) >> 61) {
        std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v29 = v11 - (void)v26;
      if (v29 >> 2 > v28) {
        unint64_t v28 = v29 >> 2;
      }
      if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v30 = v28;
      }
      if (v30)
      {
        __int16 v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>((uint64_t)(a3 + 3), v30);
        __int16 v26 = (void *)a3[1];
        __int16 v12 = (void *)a3[2];
      }
      else
      {
        __int16 v31 = 0;
      }
      long long v63 = &v31[8 * v27];
      uint64_t v64 = &v31[8 * v30];
      *(void *)long long v63 = 1;
      BOOL v13 = v63 + 8;
      while (v12 != v26)
      {
        uint64_t v65 = *--v12;
        *((void *)v63 - 1) = v65;
        v63 -= 8;
      }
      a3[1] = (uint64_t)v63;
      a3[2] = (uint64_t)v13;
      a3[3] = (uint64_t)v64;
      if (v26) {
        operator delete(v26);
      }
    }
    else
    {
      *__int16 v12 = 1;
      BOOL v13 = v12 + 1;
    }
    a3[2] = (uint64_t)v13;
  }
LABEL_13:
  if (!**(unsigned char **)(a1 + 448))
  {
    int v16 = a3 + 3;
    unint64_t v15 = a3[3];
    int v17 = (void *)a3[2];
    if ((unint64_t)v17 >= v15)
    {
      uint64_t v19 = *(void **)QualityIndicator;
      uint64_t v20 = ((uint64_t)v17 - *(void *)QualityIndicator) >> 3;
      unint64_t v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 61) {
        std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v22 = v15 - (void)v19;
      if (v22 >> 2 > v21) {
        unint64_t v21 = v22 >> 2;
      }
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v21;
      }
      if (v23)
      {
        __int16 v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>((uint64_t)(a3 + 3), v23);
        uint64_t v19 = (void *)a3[1];
        int v17 = (void *)a3[2];
      }
      else
      {
        __int16 v24 = 0;
      }
      int v32 = &v24[8 * v20];
      __int16 v33 = &v24[8 * v23];
      *(void *)int v32 = 4;
      uint64_t v18 = v32 + 8;
      while (v17 != v19)
      {
        uint64_t v34 = *--v17;
        *((void *)v32 - 1) = v34;
        v32 -= 8;
      }
      a3[1] = (uint64_t)v32;
      a3[2] = (uint64_t)v18;
      a3[3] = (uint64_t)v33;
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      *int v17 = 4;
      uint64_t v18 = v17 + 1;
    }
    a3[2] = (uint64_t)v18;
    __int16 v35 = *(unsigned char **)(a1 + 448);
    if (v35[1])
    {
      if ((unint64_t)v18 >= *v16)
      {
        __int16 v37 = *(void **)QualityIndicator;
        uint64_t v38 = ((uint64_t)v18 - *(void *)QualityIndicator) >> 3;
        unint64_t v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 61) {
          std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v40 = *v16 - (void)v37;
        if (v40 >> 2 > v39) {
          unint64_t v39 = v40 >> 2;
        }
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v41 = v39;
        }
        if (v41)
        {
          int v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>((uint64_t)(a3 + 3), v41);
          __int16 v37 = (void *)a3[1];
          uint64_t v18 = (void *)a3[2];
        }
        else
        {
          int v42 = 0;
        }
        uint64_t v43 = &v42[8 * v38];
        uint64_t v44 = &v42[8 * v41];
        *(void *)uint64_t v43 = 2;
        int v36 = v43 + 8;
        while (v18 != v37)
        {
          uint64_t v45 = *--v18;
          *((void *)v43 - 1) = v45;
          v43 -= 8;
        }
        a3[1] = (uint64_t)v43;
        a3[2] = (uint64_t)v36;
        a3[3] = (uint64_t)v44;
        if (v37) {
          operator delete(v37);
        }
      }
      else
      {
        *uint64_t v18 = 2;
        int v36 = v18 + 1;
      }
      a3[2] = (uint64_t)v36;
      __int16 v35 = *(unsigned char **)(a1 + 448);
      uint64_t v18 = v36;
    }
    if (v35[2])
    {
      if ((unint64_t)v18 >= *v16)
      {
        uint64_t v47 = *(void **)QualityIndicator;
        uint64_t v48 = ((uint64_t)v18 - *(void *)QualityIndicator) >> 3;
        unint64_t v49 = v48 + 1;
        if ((unint64_t)(v48 + 1) >> 61) {
          std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v50 = *v16 - (void)v47;
        if (v50 >> 2 > v49) {
          unint64_t v49 = v50 >> 2;
        }
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v51 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v51 = v49;
        }
        if (v51)
        {
          __int16 v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>((uint64_t)(a3 + 3), v51);
          uint64_t v47 = (void *)a3[1];
          uint64_t v18 = (void *)a3[2];
        }
        else
        {
          __int16 v52 = 0;
        }
        long long v53 = &v52[8 * v48];
        uint64_t v54 = &v52[8 * v51];
        *(void *)long long v53 = 3;
        uint32_t v46 = v53 + 8;
        while (v18 != v47)
        {
          uint64_t v55 = *--v18;
          *((void *)v53 - 1) = v55;
          v53 -= 8;
        }
        a3[1] = (uint64_t)v53;
        a3[2] = (uint64_t)v46;
        a3[3] = (uint64_t)v54;
        if (v47) {
          operator delete(v47);
        }
      }
      else
      {
        *uint64_t v18 = 3;
        uint32_t v46 = v18 + 1;
      }
      a3[2] = (uint64_t)v46;
      __int16 v35 = *(unsigned char **)(a1 + 448);
      uint64_t v18 = v46;
    }
    if (!v35[3])
    {
      if ((unint64_t)v18 >= *v16)
      {
        __int16 v57 = *(void **)QualityIndicator;
        uint64_t v58 = ((uint64_t)v18 - *(void *)QualityIndicator) >> 3;
        unint64_t v59 = v58 + 1;
        if ((unint64_t)(v58 + 1) >> 61) {
          std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v60 = *v16 - (void)v57;
        if (v60 >> 2 > v59) {
          unint64_t v59 = v60 >> 2;
        }
        if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v61 = v59;
        }
        if (v61)
        {
          long long v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>((uint64_t)(a3 + 3), v61);
          __int16 v57 = (void *)a3[1];
          uint64_t v18 = (void *)a3[2];
        }
        else
        {
          long long v62 = 0;
        }
        unsigned int v66 = &v62[8 * v58];
        __int16 v67 = &v62[8 * v61];
        *(void *)unsigned int v66 = 5;
        float v56 = v66 + 8;
        while (v18 != v57)
        {
          uint64_t v68 = *--v18;
          *((void *)v66 - 1) = v68;
          v66 -= 8;
        }
        a3[1] = (uint64_t)v66;
        a3[2] = (uint64_t)v56;
        a3[3] = (uint64_t)v67;
        if (v57) {
          operator delete(v57);
        }
      }
      else
      {
        *uint64_t v18 = 5;
        float v56 = v18 + 1;
      }
      a3[2] = (uint64_t)v56;
      __int16 v35 = *(unsigned char **)(a1 + 448);
      uint64_t v18 = v56;
    }
    if (!v35[4])
    {
      if ((unint64_t)v18 >= *v16)
      {
        uint64_t v70 = *(void **)QualityIndicator;
        uint64_t v71 = ((uint64_t)v18 - *(void *)QualityIndicator) >> 3;
        unint64_t v72 = v71 + 1;
        if ((unint64_t)(v71 + 1) >> 61) {
          std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v73 = *v16 - (void)v70;
        if (v73 >> 2 > v72) {
          unint64_t v72 = v73 >> 2;
        }
        if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v74 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v74 = v72;
        }
        if (v74)
        {
          v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>((uint64_t)(a3 + 3), v74);
          uint64_t v70 = (void *)a3[1];
          uint64_t v18 = (void *)a3[2];
        }
        else
        {
          v75 = 0;
        }
        v76 = &v75[8 * v71];
        v77 = &v75[8 * v74];
        *(void *)v76 = 6;
        v69 = v76 + 8;
        while (v18 != v70)
        {
          uint64_t v78 = *--v18;
          *((void *)v76 - 1) = v78;
          v76 -= 8;
        }
        a3[1] = (uint64_t)v76;
        a3[2] = (uint64_t)v69;
        a3[3] = (uint64_t)v77;
        if (v70) {
          operator delete(v70);
        }
      }
      else
      {
        *uint64_t v18 = 6;
        v69 = v18 + 1;
      }
      a3[2] = (uint64_t)v69;
      __int16 v35 = *(unsigned char **)(a1 + 448);
      uint64_t v18 = v69;
    }
    if (!v35[5])
    {
      if ((unint64_t)v18 >= *v16)
      {
        v80 = *(void **)QualityIndicator;
        uint64_t v81 = ((uint64_t)v18 - *(void *)QualityIndicator) >> 3;
        unint64_t v82 = v81 + 1;
        if ((unint64_t)(v81 + 1) >> 61) {
          std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v83 = *v16 - (void)v80;
        if (v83 >> 2 > v82) {
          unint64_t v82 = v83 >> 2;
        }
        if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v84 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v84 = v82;
        }
        if (v84)
        {
          uint64_t v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>((uint64_t)(a3 + 3), v84);
          v80 = (void *)a3[1];
          uint64_t v18 = (void *)a3[2];
        }
        else
        {
          uint64_t v85 = 0;
        }
        unint64_t v86 = &v85[8 * v81];
        uint64_t v87 = &v85[8 * v84];
        *(void *)unint64_t v86 = 8;
        uint64_t v79 = v86 + 8;
        while (v18 != v80)
        {
          uint64_t v88 = *--v18;
          *((void *)v86 - 1) = v88;
          v86 -= 8;
        }
        a3[1] = (uint64_t)v86;
        a3[2] = (uint64_t)v79;
        a3[3] = (uint64_t)v87;
        if (v80) {
          operator delete(v80);
        }
      }
      else
      {
        *uint64_t v18 = 8;
        uint64_t v79 = v18 + 1;
      }
      a3[2] = (uint64_t)v79;
      __int16 v35 = *(unsigned char **)(a1 + 448);
      uint64_t v18 = v79;
    }
    if (!v35[6])
    {
      if ((unint64_t)v18 >= *v16)
      {
        int v90 = *(void **)QualityIndicator;
        uint64_t v91 = ((uint64_t)v18 - *(void *)QualityIndicator) >> 3;
        unint64_t v92 = v91 + 1;
        if ((unint64_t)(v91 + 1) >> 61) {
          std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v93 = *v16 - (void)v90;
        if (v93 >> 2 > v92) {
          unint64_t v92 = v93 >> 2;
        }
        if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v94 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v94 = v92;
        }
        if (v94)
        {
          v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>((uint64_t)(a3 + 3), v94);
          int v90 = (void *)a3[1];
          uint64_t v18 = (void *)a3[2];
        }
        else
        {
          v95 = 0;
        }
        v96 = &v95[8 * v91];
        long long v97 = &v95[8 * v94];
        *(void *)v96 = 7;
        float v89 = v96 + 8;
        while (v18 != v90)
        {
          uint64_t v98 = *--v18;
          *((void *)v96 - 1) = v98;
          v96 -= 8;
        }
        a3[1] = (uint64_t)v96;
        a3[2] = (uint64_t)v89;
        a3[3] = (uint64_t)v97;
        if (v90) {
          operator delete(v90);
        }
      }
      else
      {
        *uint64_t v18 = 7;
        float v89 = v18 + 1;
      }
      a3[2] = (uint64_t)v89;
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
    }
    QualityIndicator = (char *)(id)logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)QualityIndicator, OS_LOG_TYPE_DEFAULT))
    {
      long long v99 = operator new(0x28uLL);
      std::string __p = v99;
      long long v188 = xmmword_256514540;
      *long long v99 = 0u;
      v99[1] = 0u;
      *(void *)((char *)v99 + 29) = 0;
      boost::uuids::to_chars<char *>(a1 + 8, v99);
      p_p = &__p;
      if (v188 < 0) {
        p_p = __p;
      }
      uint64_t v101 = *a3;
      long long v102 = *(unsigned __int8 **)(a1 + 448);
      int v103 = *v102;
      int v104 = v102[1];
      int v105 = v102[2];
      int v106 = v102[3];
      int v107 = v102[4];
      int v108 = v102[5];
      LODWORD(v102) = v102[6];
      *(_DWORD *)std::string buf = 68292098;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2082;
      *(void *)&buf[20] = p_p;
      *(_WORD *)&unsigned char buf[28] = 1026;
      *(_DWORD *)&buf[30] = v101;
      *(_WORD *)&buf[34] = 1026;
      *(_DWORD *)&buf[36] = v103;
      __int16 v240 = 1026;
      int v241 = v104;
      __int16 v242 = 1026;
      int v243 = v105;
      __int16 v244 = 1026;
      int v245 = v106;
      __int16 v246 = 1026;
      int v247 = v107;
      __int16 v248 = 1026;
      int v249 = v108;
      __int16 v250 = 1026;
      int v251 = v106;
      __int16 v252 = 1026;
      int v253 = v107;
      __int16 v254 = 1026;
      int v255 = v108;
      LOWORD(v256) = 1026;
      *(_DWORD *)((char *)&v256 + 2) = v102;
      _os_log_impl(&dword_25631F000, (os_log_t)QualityIndicator, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoService send status to client, MiLo Unavailable: \", \"ServiceId\":%{public, location:escape_only}s, \"State\":%{public}u, \"isMiLoEnabled\":%{public}hhd, \"isLowPowerMode\":%{public}hhd, \"isAirplaneMode\":%{public}hhd, \"isLocationServicesEnabled\":%{public}hhd, \"isSignificantLocationsEnabled\":%{public}hhd, \"isPlatformSupported\":%{public}hhd, \"isLocationServicesEnabled\":%{public}hhd, \"isSignificantLocationsEnabled\":%{public}hhd, \"isPlatformSupported\":%{public}hhd, \"isBuddyComplete\":%{public}hhd}", buf, 0x5Eu);
      if (SHIBYTE(v188) < 0) {
        operator delete(__p);
      }
    }
  }
  if (*a3)
  {
    if (*a3 == 1 && a3[1] == a3[2])
    {
      __int16 v109 = _CLLogObjectForCategory_MicroLocation_Default();
      if (os_log_type_enabled(v109, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)std::string buf = 68289539;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&unsigned char buf[18] = 2082;
        *(void *)&buf[20] = "assert";
        *(_WORD *)&unsigned char buf[28] = 2081;
        *(void *)&buf[30] = "status.state != ULServiceState::ULServiceStateSuspended || !status.suspendReasons.empty()";
        _os_log_impl(&dword_25631F000, v109, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"If run state is suspended then suspend reason cannot be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }

      int v110 = _CLLogObjectForCategory_MicroLocation_Default();
      if (os_signpost_enabled(v110))
      {
        *(_DWORD *)std::string buf = 68289539;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&unsigned char buf[18] = 2082;
        *(void *)&buf[20] = "assert";
        *(_WORD *)&unsigned char buf[28] = 2081;
        *(void *)&buf[30] = "status.state != ULServiceState::ULServiceStateSuspended || !status.suspendReasons.empty()";
        _os_signpost_emit_with_name_impl(&dword_25631F000, v110, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "If run state is suspended then suspend reason cannot be empty", "{\"msg%{public}.0s\":\"If run state is suspended then suspend reason cannot be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }

      __int16 v111 = _CLLogObjectForCategory_MicroLocation_Default();
      if (os_log_type_enabled(v111, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 68289539;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&unsigned char buf[18] = 2082;
        *(void *)&buf[20] = "assert";
        *(_WORD *)&unsigned char buf[28] = 2081;
        *(void *)&buf[30] = "status.state != ULServiceState::ULServiceStateSuspended || !status.suspendReasons.empty()";
        _os_log_impl(&dword_25631F000, v111, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"If run state is suspended then suspend reason cannot be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }
LABEL_259:

      uint64_t result = abort_report_np();
      __break(1u);
      return result;
    }
  }
  else if (a3[1] != a3[2])
  {
    v175 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v175, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&unsigned char buf[28] = 2081;
      *(void *)&buf[30] = "status.state != ULServiceState::ULServiceStateRunning || status.suspendReasons.empty()";
      _os_log_impl(&dword_25631F000, v175, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"If run state is running then suspend reason must be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }

    v176 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_signpost_enabled(v176))
    {
      *(_DWORD *)std::string buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&unsigned char buf[28] = 2081;
      *(void *)&buf[30] = "status.state != ULServiceState::ULServiceStateRunning || status.suspendReasons.empty()";
      _os_signpost_emit_with_name_impl(&dword_25631F000, v176, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "If run state is running then suspend reason must be empty", "{\"msg%{public}.0s\":\"If run state is running then suspend reason must be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }

    __int16 v111 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v111, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&unsigned char buf[28] = 2081;
      *(void *)&buf[30] = "status.state != ULServiceState::ULServiceStateRunning || status.suspendReasons.empty()";
      _os_log_impl(&dword_25631F000, v111, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"If run state is running then suspend reason must be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    goto LABEL_259;
  }
  long long v112 = *(_OWORD *)(a1 + 24);
  *((_OWORD *)a3 + 2) = *(_OWORD *)(a1 + 8);
  *((_OWORD *)a3 + 3) = v112;
  a3[9] = 0;
  std::vector<CLMicroLocationWiFiChannelHistogram>::__assign_with_size[abi:ne180100]<CLMicroLocationWiFiChannelHistogram const*,CLMicroLocationWiFiChannelHistogram const*>(v7, 0, 0, 0);
  uint64_t v113 = *(CLMicroLocationModel **)(a1 + 96);
  if (v113)
  {
    QualityIndicator = (char *)CLMicroLocationModel::getQualityIndicator(v113);
    int CandidateQualityIndicator = CLMicroLocationModel::getCandidateQualityIndicator(*(CLMicroLocationModel **)(a1 + 96));
    unint64_t v115 = CLMiLoService::internalToExternalServiceQuality((int)QualityIndicator, CandidateQualityIndicator);
    a3[9] = v115;
    if (v115 <= 0xA)
    {
      unint64_t v116 = a3[12];
      __int16 v117 = (void *)a3[11];
      if ((unint64_t)v117 >= v116)
      {
        uint64_t v118 = *(void **)v7;
        uint64_t v119 = ((uint64_t)v117 - *(void *)v7) >> 3;
        unint64_t v120 = v119 + 1;
        if ((unint64_t)(v119 + 1) >> 61) {
          std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v121 = v116 - (void)v118;
        if (v121 >> 2 > v120) {
          unint64_t v120 = v121 >> 2;
        }
        if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v122 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v122 = v120;
        }
        if (v122)
        {
          __int16 v123 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>((uint64_t)(a3 + 12), v122);
          uint64_t v118 = (void *)a3[10];
          __int16 v117 = (void *)a3[11];
        }
        else
        {
          __int16 v123 = 0;
        }
        v124 = &v123[8 * v119];
        v125 = &v123[8 * v122];
        *(void *)v124 = 3;
        QualityIndicator = v124 + 8;
        while (v117 != v118)
        {
          uint64_t v126 = *--v117;
          *((void *)v124 - 1) = v126;
          v124 -= 8;
        }
        a3[10] = (uint64_t)v124;
        a3[11] = (uint64_t)QualityIndicator;
        a3[12] = (uint64_t)v125;
        if (v118) {
          operator delete(v118);
        }
      }
      else
      {
        *__int16 v117 = 3;
        QualityIndicator = (char *)(v117 + 1);
      }
      a3[11] = (uint64_t)QualityIndicator;
      CandidateQualityReasons = (void *)CLMicroLocationModel::getCandidateQualityReasons(*(CLMicroLocationModel **)(a1 + 96));
      if (CandidateQualityReasons[1] != *CandidateQualityReasons)
      {
        uint64_t v128 = CLMicroLocationModel::getCandidateQualityReasons(*(CLMicroLocationModel **)(a1 + 96));
        QualityIndicator = *(char **)v128;
        v129 = *(char **)(v128 + 8);
        *(void *)std::string buf = v7;
        while (QualityIndicator != v129)
        {
          uint64_t v130 = (*(_DWORD *)QualityIndicator - 1);
          if (v130 < 8) {
            v131 = (void *)(v130 + 1);
          }
          else {
            v131 = 0;
          }
          std::string __p = v131;
          std::back_insert_iterator<std::vector<ULServiceQualityReasonEnum>>::operator=[abi:ne180100]((uint64_t *)buf, &__p);
          QualityIndicator += 4;
        }
      }
    }
    *((_DWORD *)a3 + 40) = CLMicroLocationModel::numClusters(*(CLMicroLocationModel **)(a1 + 96));
    v132 = *(CLMicroLocationModel **)(a1 + 96);
    *((_DWORD *)a3 + 42) = *((_DWORD *)v132 + 75);
    *((_DWORD *)a3 + 45) = CLMicroLocationModel::numRecordingsBeforePruning(v132);
    uint64_t v133 = *(void *)(a1 + 96);
    *((_DWORD *)a3 + 46) = (*(void *)(v133 + 336) - *(void *)(v133 + 328)) >> 5;
    *(uint64_t *)((char *)a3 + 188) = *(void *)(v133 + 312);
    *((_DWORD *)a3 + 49) = *(_DWORD *)(v133 + 320);
    *((_DWORD *)a3 + 41) = *(_DWORD *)(v133 + 296);
    *(uint64_t *)((char *)a3 + 172) = *(void *)(v133 + 304);
  }
  *((_OWORD *)a3 + 8) = *(_OWORD *)a2;
  *(_OWORD *)((char *)a3 + 137) = *(_OWORD *)(a2 + 9);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
  uint64_t v134 = a3[1];
  for (uint64_t i = a3[2]; v134 != i; v134 += 8)
  {
    ULServiceSuspendReasonToString();
    QualityIndicator = (char *) objc_claimAutoreleasedReturnValue();
    v136 = (const char *)[QualityIndicator UTF8String];
    size_t v137 = strlen(v136);
    v138 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf[16], (uint64_t)v136, v137);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v138, (uint64_t)" ", 1);
  }
  std::stringbuf::str();
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
  uint64_t v139 = a3[10];
  uint64_t v140 = a3[11];
  if (v139 != v140)
  {
    QualityIndicator = " ";
    do
    {
      v141 = ULServiceQualityReasonToString();
      v142 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v142, (uint64_t)" ", 1);

      v139 += 8;
    }
    while (v139 != v140);
  }
  std::stringbuf::str();
  if (*((unsigned char *)a3 + 152))
  {
    QualityIndicator = (char *)operator new(0x28uLL);
    v183 = QualityIndicator;
    long long v184 = xmmword_256514540;
    *(_OWORD *)QualityIndicator = 0u;
    *((_OWORD *)QualityIndicator + 1) = 0u;
    *(void *)(QualityIndicator + 29) = 0;
    boost::uuids::to_chars<char *>((uint64_t)(a3 + 17), QualityIndicator);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v183, "None");
  }
  int v143 = *((unsigned __int8 *)a3 + 152);
  if (*((unsigned char *)a3 + 152))
  {
    ULLocationTypeToString();
    QualityIndicator = (char *) objc_claimAutoreleasedReturnValue();
    v144 = (char *)[QualityIndicator UTF8String];
  }
  else
  {
    v144 = "None";
  }
  std::string::basic_string[abi:ne180100]<0>(v181, v144);
  if (v143) {

  }
  if (*(unsigned char *)(a1 + 457))
  {
    if (*(unsigned char *)(a1 + 456)) {
      v145 = "low latency";
    }
    else {
      v145 = "not low latency";
    }
  }
  else
  {
    v145 = "stopped";
  }
  std::string::basic_string[abi:ne180100]<0>(v179, v145);
  if (onceToken_MicroLocationQE_Default != -1) {
    dispatch_once(&onceToken_MicroLocationQE_Default, &__block_literal_global_426);
  }
  v146 = (id)logObject_MicroLocationQE_Default;
  if (os_log_type_enabled(v146, OS_LOG_TYPE_DEFAULT))
  {
    v147 = operator new(0x28uLL);
    v177 = v147;
    long long v178 = xmmword_256514540;
    _OWORD *v147 = 0u;
    v147[1] = 0u;
    *(void *)((char *)v147 + 29) = 0;
    boost::uuids::to_chars<char *>(a1 + 8, v147);
    if (v178 >= 0) {
      v148 = &v177;
    }
    else {
      v148 = v177;
    }
    v149 = (void *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      v149 = (void *)*v149;
    }
    int v150 = *(_DWORD *)(a1 + 24);
    ULServiceStateToString();
    id v151 = objc_claimAutoreleasedReturnValue();
    uint64_t v152 = [v151 UTF8String];
    if (v194 >= 0) {
      v153 = &v193;
    }
    else {
      v153 = v193;
    }
    ULServiceQualityToString();
    id v154 = objc_claimAutoreleasedReturnValue();
    uint64_t v155 = [v154 UTF8String];
    v156 = &v185;
    if (v186 < 0) {
      v156 = v185;
    }
    v157 = &v183;
    if (v184 < 0) {
      v157 = v183;
    }
    v158 = v181;
    if (v182 < 0) {
      v158 = (void **)v181[0];
    }
    v159 = v179;
    if (v180 < 0) {
      v159 = (void **)v179[0];
    }
    int v160 = *((_DWORD *)a3 + 40);
    int v161 = *((_DWORD *)a3 + 41);
    int v162 = *((_DWORD *)a3 + 42);
    int v163 = *((_DWORD *)a3 + 43);
    int v164 = *((_DWORD *)a3 + 44);
    int v165 = *((_DWORD *)a3 + 45);
    int v166 = *((_DWORD *)a3 + 46);
    int v167 = *((_DWORD *)a3 + 47);
    int v168 = *((_DWORD *)a3 + 48);
    int v169 = *((_DWORD *)a3 + 49);
    *(_DWORD *)v195 = 68294147;
    int v196 = 0;
    __int16 v197 = 2082;
    v198 = "";
    __int16 v199 = 2082;
    v200 = v148;
    __int16 v201 = 2082;
    v202 = v149;
    __int16 v203 = 1026;
    int v204 = v150;
    __int16 v205 = 2082;
    uint64_t v206 = v152;
    __int16 v207 = 2082;
    v208 = v153;
    __int16 v209 = 2082;
    uint64_t v210 = v155;
    __int16 v211 = 2082;
    v212 = v156;
    __int16 v213 = 2081;
    v214 = v157;
    __int16 v215 = 2081;
    v216 = v158;
    __int16 v217 = 2082;
    v218 = v159;
    __int16 v219 = 1026;
    int v220 = v160;
    __int16 v221 = 1026;
    int v222 = v161;
    __int16 v223 = 1026;
    int v224 = v162;
    __int16 v225 = 1026;
    int v226 = v164;
    __int16 v227 = 1026;
    int v228 = v163;
    __int16 v229 = 1026;
    int v230 = v165;
    __int16 v231 = 1026;
    int v232 = v166;
    __int16 v233 = 1026;
    int v234 = v167;
    __int16 v235 = 1026;
    int v236 = v168;
    __int16 v237 = 1026;
    int v238 = v169;
    _os_log_impl(&dword_25631F000, v146, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoService send status to client: \", \"ServiceId\":%{public, location:escape_only}s, \"ClientId\":%{public, location:escape_only}s, \"Service Type\":%{public}u, \"State\":%{public, location:escape_only}s, \"Suspend Reasons\":%{public, location:escape_only}s, \"Quality\":%{public, location:escape_only}s, \"Quality Reasons\":%{public, location:escape_only}s, \"Current LOI ID\":%{private, location:escape_only}s, \"Current LOI Type\":%{private, location:escape_only}s, \"Updates Status:\":%{public, location:escape_only}s, \"Number of clusters learned in model\":%{public}u, \"Number of Recording triggers at current LOI\":%{public}u, \"Number of Input Valid Fingerprints\":%{public}u, \"Number of Input Valid Fingerprints Labeled\":%{public}u, \"Number of Input Valid Fingerprints Unlabeled\":%{public}u, \"Number of Fingerprints Before Pruning\":%{public}u, \"Number of Fingerprints After Pruning\":%{public}u, \"Number of WiFi Access Points\":%{public}u, \"Number of Ble Sources\":%{public}u, \"Number of Uwb Sources\":%{public}u}", v195, 0xAEu);

    if (SHIBYTE(v178) < 0) {
      operator delete(v177);
    }
  }

  if (v180 < 0) {
    operator delete(v179[0]);
  }
  if (v182 < 0) {
    operator delete(v181[0]);
  }
  if (SHIBYTE(v184) < 0) {
    operator delete(v183);
  }
  if (v186 < 0) {
    operator delete(v185);
  }
  std::string __p = (void *)*MEMORY[0x263F8C2B8];
  v170 = __p;
  uint64_t v171 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  v172 = *(void **)(MEMORY[0x263F8C2B8] + 64);
  *(void **)((char *)&__p + *((void *)__p - 3)) = v172;
  uint64_t v173 = v171;
  *((void *)&v188 + 1) = v171;
  uint64_t v189 = MEMORY[0x263F8C318] + 16;
  if (v191 < 0) {
    operator delete(v190);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x25A2A6280](&v192);
  if (v194 < 0) {
    operator delete(v193);
  }
  *(void *)std::string buf = v170;
  *(void *)&buf[*(v170 - 3)] = v172;
  *(void *)&uint8_t buf[16] = v173;
  *(void *)&unsigned char buf[24] = MEMORY[0x263F8C318] + 16;
  if (v257 < 0) {
    operator delete(v256);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x25A2A6280](v258);
}

void sub_2564593DC(_Unwind_Exception *a1)
{
  CLMiLoService::ServiceStatus::~ServiceStatus(v1);
  _Unwind_Resume(a1);
}

void CLMiLoService::ServiceStatus::~ServiceStatus(CLMiLoService::ServiceStatus *this)
{
  int v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    *((void *)this + 14) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 10);
  if (v3)
  {
    *((void *)this + 11) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 2) = v4;
    operator delete(v4);
  }
}

void CLMiLoService::sendStatus(void *a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  CLMiLoService::getCurrentStatus((uint64_t)a1, a2, &v3);
  (*(void (**)(void, uint64_t *))(*(void *)*a1 + 72))(*a1, &v3);
  if (__p)
  {
    BOOL v9 = __p;
    operator delete(__p);
  }
  if (v6)
  {
    BOOL v7 = v6;
    operator delete(v6);
  }
  if (v4)
  {
    uint64_t v5 = v4;
    operator delete(v4);
  }
}

void sub_25645967C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t CLMiLoService::labelObservation(CLMiLoService *this, uuid *a2, const uuid *a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  if ((unint64_t)(*((void *)this + 3) - 2) <= 2 && *((void *)this + 12) && **((unsigned char **)this + 56))
  {
    BOOL v6 = *(const void **)this;
    long long v32 = *(_OWORD *)((char *)this + 8);
    CLMicroLocationClientUtils::getClientIdAndServiceUuid((const void **)this + 5, (uint64_t)&v32, (std::string *)&__p);
    int v7 = (*(uint64_t (**)(const void *, void **, void, void, void, void))(*(void *)v6 + 80))(v6, &__p, *(void *)a2->var0, *(void *)&a2->var0[8], *(void *)a3->var0, *(void *)&a3->var0[8]);
    int v8 = v7;
    if (SBYTE3(v23) < 0)
    {
      operator delete(__p);
      if (v8) {
        goto LABEL_6;
      }
    }
    else if (v7)
    {
LABEL_6:
      CLMiLoService::addNewTruthLabelToModelIfAppropriate(this, a2, a3);
      LODWORD(__p) = 0;
      boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&__p);
      *(void *)&long long v32 = boost::uuids::random_generator_pure::operator()((uint64_t)&__p);
      *((void *)&v32 + 1) = v9;
      boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&__p);
      LOBYTE(__p) = 0;
      BYTE6(v21) = 0;
      CFAbsoluteTime v18 = cl::chrono::CFAbsoluteTimeClock::now();
      CLMiLoService::observationRequest((uint64_t *)this, &v32, (uint64_t)&__p, (uint64_t)&v18, 1);
      int v10 = 1;
      goto LABEL_9;
    }
  }
  int v10 = 0;
LABEL_9:
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
  }
  unint64_t v11 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v12 = (char *)operator new(0x28uLL);
    *(void *)(v12 + 29) = 0;
    *(_OWORD *)__int16 v12 = 0u;
    *((_OWORD *)v12 + 1) = 0u;
    boost::uuids::to_chars<char *>((uint64_t)this + 8, v12);
    BOOL v13 = (char *)operator new(0x28uLL);
    *(void *)(v13 + 29) = 0;
    *(_OWORD *)BOOL v13 = 0u;
    *((_OWORD *)v13 + 1) = 0u;
    boost::uuids::to_chars<char *>((uint64_t)a2, v13);
    uint64_t v14 = (char *)operator new(0x28uLL);
    *(void *)(v14 + 29) = 0;
    *(_OWORD *)uint64_t v14 = 0u;
    *((_OWORD *)v14 + 1) = 0u;
    boost::uuids::to_chars<char *>((uint64_t)a3, v14);
    uint64_t v15 = *((void *)this + 11);
    std::string __p = (void *)68290306;
    __int16 v20 = 2082;
    unint64_t v21 = "";
    __int16 v22 = 2082;
    unint64_t v23 = v12;
    __int16 v24 = 2082;
    int v25 = v13;
    __int16 v26 = 2082;
    uint64_t v27 = v14;
    __int16 v28 = 1026;
    int v29 = v15;
    __int16 v30 = 1026;
    int v31 = v10;
    _os_log_impl(&dword_25631F000, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoService label observation request: \", \"ServiceId\":%{public, location:escape_only}s, \"RequestId\":%{public, location:escape_only}s, \"PlaceId\":%{public, location:escape_only}s, \"State\":%{public}u, \"Success\":%{public}hhd}", (uint8_t *)&__p, 0x3Cu);
    operator delete(v14);
    operator delete(v13);
    operator delete(v12);
  }
  if (v10) {
    uint64_t v16 = -1;
  }
  else {
    uint64_t v16 = 13;
  }

  return (*(uint64_t (**)(void, char *, uuid *, uint64_t))(**(void **)this + 40))(*(void *)this, (char *)this + 8, a2, v16);
}

void sub_256459984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

void CLMiLoService::addNewTruthLabelToLSL(CLMiLoService *this, uuid *a2, const uuid *a3)
{
  v57[1] = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 368))
  {
    if (*((void *)this + 44) == *(void *)a2->var0 && *((void *)this + 45) == *(void *)&a2->var0[8])
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
      }
      int v7 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        int v8 = operator new(0x28uLL);
        std::string __p = v8;
        long long v39 = xmmword_256514540;
        _OWORD *v8 = 0u;
        v8[1] = 0u;
        *(void *)((char *)v8 + 29) = 0;
        boost::uuids::to_chars<char *>((uint64_t)a2, v8);
        p_p = &__p;
        if (v39 < 0) {
          p_p = __p;
        }
        *(_DWORD *)std::string buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)uint64_t v45 = 2082;
        *(void *)&v45[2] = "";
        *(_WORD *)&v45[10] = 2082;
        *(void *)&v45[12] = p_p;
        _os_log_impl(&dword_25631F000, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Attempting to apply truth label for a currently running localization\", \"TriggerUUID\":%{public, location:escape_only}s}", buf, 0x1Cu);
        if (SHIBYTE(v39) < 0) {
          operator delete(__p);
        }
      }
    }
  }
  uint64_t v10 = *((void *)this + 12);
  if (v10)
  {
    if (*(unsigned char *)(v10 + 192))
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
      }
      unint64_t v11 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v12 = operator new(0x28uLL);
        std::string __p = v12;
        long long v39 = xmmword_256514540;
        *__int16 v12 = 0u;
        v12[1] = 0u;
        *(void *)((char *)v12 + 29) = 0;
        boost::uuids::to_chars<char *>((uint64_t)this + 8, v12);
        if (v39 >= 0) {
          BOOL v13 = &__p;
        }
        else {
          BOOL v13 = __p;
        }
        uint64_t v14 = operator new(0x28uLL);
        int v42 = v14;
        long long v43 = xmmword_256514540;
        _OWORD *v14 = 0u;
        v14[1] = 0u;
        *(void *)((char *)v14 + 29) = 0;
        boost::uuids::to_chars<char *>((uint64_t)a2, v14);
        if (v43 >= 0) {
          uint64_t v15 = (char *)&v42;
        }
        else {
          uint64_t v15 = (char *)v42;
        }
        uint64_t v16 = operator new(0x28uLL);
        uint64_t v40 = v16;
        long long v41 = xmmword_256514540;
        _OWORD *v16 = 0u;
        v16[1] = 0u;
        *(void *)((char *)v16 + 29) = 0;
        boost::uuids::to_chars<char *>((uint64_t)a3, v16);
        int v17 = &v40;
        if (v41 < 0) {
          int v17 = v40;
        }
        *(_DWORD *)std::string buf = 68289795;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)uint64_t v45 = 2082;
        *(void *)&v45[2] = "";
        *(_WORD *)&v45[10] = 2081;
        *(void *)&v45[12] = v13;
        __int16 v46 = 2082;
        uint64_t v47 = v15;
        __int16 v48 = 2082;
        *(void *)&long long v49 = v17;
        _os_log_impl(&dword_25631F000, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"service is appending an event to similarity list\", \"ServiceUUID\":%{private, location:escape_only}s, \"TriggerUUID\":%{public, location:escape_only}s, \"LabelUUID\":%{public, location:escape_only}s}", buf, 0x30u);
        if (SHIBYTE(v41) < 0) {
          operator delete(v40);
        }
        if (SHIBYTE(v43) < 0) {
          operator delete(v42);
        }
        if (SHIBYTE(v39) < 0) {
          operator delete(__p);
        }
      }

      uint64_t v18 = *(void *)this;
      uint64_t v19 = (uuid *)operator new(0x10uLL);
      *(void *)std::string buf = v19;
      *(void *)&v45[8] = v19 + 1;
      uuid *v19 = *a2;
      *(void *)uint64_t v45 = v19 + 1;
      (*(void (**)(void **__return_ptr, uint64_t, uint8_t *))(*(void *)v18 + 120))(&__p, v18, buf);
      if (*(void *)buf)
      {
        *(void *)uint64_t v45 = *(void *)buf;
        operator delete(*(void **)buf);
      }
      __int16 v20 = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::find<boost::uuids::uuid>(&__p, a2);
      unint64_t v21 = v20;
      if (v20)
      {
        uint64_t v22 = *((void *)this + 12);
        std::unordered_set<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::unordered_set((uint64_t)buf, (uint64_t)(v20 + 4));
        long long v49 = *(_OWORD *)(v21 + 9);
        uint64_t v50 = v21[11];
        std::unordered_set<CLMicroLocationProto::DataType>::unordered_set((uint64_t)v51, (uint64_t)(v21 + 12));
        std::unordered_map<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>::unordered_map((uint64_t)v52, (uint64_t)(v21 + 17));
        *(_OWORD *)&v52[40] = *((_OWORD *)v21 + 11);
        int v53 = *((_DWORD *)v21 + 48);
        uint64_t v55 = 0;
        uint64_t v56 = 0;
        uint64_t v54 = 0;
        std::vector<CLMicroLocationProto::ConfidenceReason>::__init_with_size[abi:ne180100]<CLMicroLocationProto::ConfidenceReason*,CLMicroLocationProto::ConfidenceReason*>(&v54, (const void *)v21[25], v21[26], (uint64_t)(v21[26] - v21[25]) >> 2);
        int v42 = 0;
        long long v43 = 0uLL;
        uint64_t v40 = &v42;
        LOBYTE(v41) = 0;
        int v42 = operator new(0xC0uLL);
        *(void *)&long long v43 = v42;
        *((void *)&v43 + 1) = (char *)v42 + 192;
        *(void *)&long long v43 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationFingerprint>,CLMicroLocationFingerprint const*,CLMicroLocationFingerprint const*,CLMicroLocationFingerprint*>((uint64_t)&v43 + 8, (uint64_t)buf, (uint64_t)v57, (uint64_t)v42);
        unint64_t v23 = (uuid *)operator new(0x10uLL);
        *(void *)&long long v41 = v23 + 1;
        *((void *)&v41 + 1) = v23 + 1;
        *unint64_t v23 = *a3;
        uint64_t v40 = v23;
        CLMicroLocationModel::SimilarityListData::appendNewEvents(v22 + 72, v22, (uint64_t *)&v42, (uint64_t *)&v40);
        if (v40)
        {
          *(void *)&long long v41 = v40;
          operator delete(v40);
        }
        uint64_t v40 = &v42;
        std::vector<CLMicroLocationFingerprint>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
        if (v54)
        {
          uint64_t v55 = v54;
          operator delete(v54);
        }
        std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v52);
        std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v51);
        std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table((uint64_t)buf);
      }
      else
      {
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
        }
        uint64_t v34 = (id)logObject_MicroLocation_Default;
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v35 = (char *)operator new(0x28uLL);
          *(void *)(v35 + 29) = 0;
          *(_OWORD *)__int16 v35 = 0u;
          *((_OWORD *)v35 + 1) = 0u;
          boost::uuids::to_chars<char *>((uint64_t)this + 8, v35);
          int v36 = (char *)operator new(0x28uLL);
          *(void *)(v36 + 29) = 0;
          *(_OWORD *)int v36 = 0u;
          *((_OWORD *)v36 + 1) = 0u;
          boost::uuids::to_chars<char *>((uint64_t)a2, v36);
          __int16 v37 = (char *)operator new(0x28uLL);
          *(void *)(v37 + 29) = 0;
          *(_OWORD *)__int16 v37 = 0u;
          *((_OWORD *)v37 + 1) = 0u;
          boost::uuids::to_chars<char *>((uint64_t)a3, v37);
          *(_DWORD *)std::string buf = 68289795;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)uint64_t v45 = 2082;
          *(void *)&v45[2] = "";
          *(_WORD *)&v45[10] = 2081;
          *(void *)&v45[12] = v35;
          __int16 v46 = 2082;
          uint64_t v47 = v36;
          __int16 v48 = 2082;
          *(void *)&long long v49 = v37;
          _os_log_impl(&dword_25631F000, v34, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"event not appended to similarity list, fingerprint not created!\", \"ServiceUUID\":%{private, location:escape_only}s, \"TriggerUUID\":%{public, location:escape_only}s, \"LabelUUID\":%{public, location:escape_only}s}", buf, 0x30u);
          operator delete(v37);
          operator delete(v36);
          operator delete(v35);
        }
      }
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>>>::~__hash_table((uint64_t)&__p);
    }
    else
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
      }
      __int16 v26 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        uint64_t v27 = (char *)operator new(0x28uLL);
        *(void *)(v27 + 29) = 0;
        *(_OWORD *)uint64_t v27 = 0u;
        *((_OWORD *)v27 + 1) = 0u;
        boost::uuids::to_chars<char *>((uint64_t)this + 8, v27);
        uint64_t v28 = *((void *)this + 12);
        int v29 = (char *)operator new(0x28uLL);
        *(void *)(v29 + 29) = 0;
        *(_OWORD *)int v29 = 0u;
        *((_OWORD *)v29 + 1) = 0u;
        boost::uuids::to_chars<char *>(v28 + 448, v29);
        *(_DWORD *)std::string buf = 68289539;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)uint64_t v45 = 2082;
        *(void *)&v45[2] = "";
        *(_WORD *)&v45[10] = 2081;
        *(void *)&v45[12] = v27;
        __int16 v46 = 2081;
        uint64_t v47 = v29;
        _os_log_impl(&dword_25631F000, v26, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"when appending event to similarity list, model has no similarity list!\", \"ServiceUUID\":%{private, location:escape_only}s, \"ModelUUID\":%{private, location:escape_only}s}", buf, 0x26u);
        operator delete(v29);
        operator delete(v27);
      }

      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
      }
      __int16 v30 = (id)logObject_MicroLocation_Default;
      if (os_signpost_enabled(v30))
      {
        int v31 = (char *)operator new(0x28uLL);
        *(void *)(v31 + 29) = 0;
        *(_OWORD *)int v31 = 0u;
        *((_OWORD *)v31 + 1) = 0u;
        boost::uuids::to_chars<char *>((uint64_t)this + 8, v31);
        uint64_t v32 = *((void *)this + 12);
        uint64_t v33 = (char *)operator new(0x28uLL);
        *(void *)(v33 + 29) = 0;
        *(_OWORD *)uint64_t v33 = 0u;
        *((_OWORD *)v33 + 1) = 0u;
        boost::uuids::to_chars<char *>(v32 + 448, v33);
        *(_DWORD *)std::string buf = 68289539;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)uint64_t v45 = 2082;
        *(void *)&v45[2] = "";
        *(_WORD *)&v45[10] = 2081;
        *(void *)&v45[12] = v31;
        __int16 v46 = 2081;
        uint64_t v47 = v33;
        _os_signpost_emit_with_name_impl(&dword_25631F000, v30, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "when appending event to similarity list, model has no similarity list!", "{\"msg%{public}.0s\":\"when appending event to similarity list, model has no similarity list!\", \"ServiceUUID\":%{private, location:escape_only}s, \"ModelUUID\":%{private, location:escape_only}s}", buf, 0x26u);
        operator delete(v33);
        operator delete(v31);
      }
    }
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
    }
    __int16 v24 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)uint64_t v45 = 2082;
      *(void *)&v45[2] = "";
      _os_log_impl(&dword_25631F000, v24, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"when appending event to similarity list, service has no current model!\"}", buf, 0x12u);
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
    }
    int v25 = logObject_MicroLocation_Default;
    if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
    {
      *(_DWORD *)std::string buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)uint64_t v45 = 2082;
      *(void *)&v45[2] = "";
      _os_signpost_emit_with_name_impl(&dword_25631F000, v25, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "when appending event to similarity list, service has no current model!", "{\"msg%{public}.0s\":\"when appending event to similarity list, service has no current model!\"}", buf, 0x12u);
    }
  }
}

void sub_25645A348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30)
{
  operator delete(v30);
  operator delete(v33);
  operator delete(v32);

  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>>>::~__hash_table((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void CLMiLoService::addNewTruthLabelToBlueAtlasModel(CLMiLoService *this, const uuid *a2)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 12);
  if (v2)
  {
    if (*(unsigned char *)(v2 + 288))
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
      }
      uint64_t v5 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v6 = (char *)operator new(0x28uLL);
        *(void *)(v6 + 29) = 0;
        *(_OWORD *)BOOL v6 = 0u;
        *((_OWORD *)v6 + 1) = 0u;
        boost::uuids::to_chars<char *>((uint64_t)this + 8, v6);
        int v7 = (char *)operator new(0x28uLL);
        *(void *)(v7 + 29) = 0;
        *(_OWORD *)int v7 = 0u;
        *((_OWORD *)v7 + 1) = 0u;
        boost::uuids::to_chars<char *>((uint64_t)a2, v7);
        int v32 = 68289539;
        int v33 = 0;
        __int16 v34 = 2082;
        __int16 v35 = "";
        __int16 v36 = 2081;
        __int16 v37 = v6;
        __int16 v38 = 2082;
        long long v39 = v7;
        _os_log_impl(&dword_25631F000, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"service is appending a label to Blue Atlas model\", \"ServiceUUID\":%{private, location:escape_only}s, \"LabelUUID\":%{public, location:escape_only}s}", (uint8_t *)&v32, 0x26u);
        operator delete(v7);
        operator delete(v6);
      }

      uint64_t v8 = *((void *)this + 12);
      if (!*(unsigned char *)(v8 + 288)) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      unint64_t v9 = *(void *)(v8 + 216);
      uint64_t v10 = *(uuid **)(v8 + 208);
      if ((unint64_t)v10 >= v9)
      {
        uint64_t v22 = *(void *)(v8 + 200);
        uint64_t v23 = ((uint64_t)v10 - v22) >> 4;
        unint64_t v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 60) {
          std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v25 = v9 - v22;
        if (v25 >> 3 > v24) {
          unint64_t v24 = v25 >> 3;
        }
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v26 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v26 = v24;
        }
        if (v26) {
          uint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::uuids::uuid>>(v8 + 216, v26);
        }
        else {
          uint64_t v27 = 0;
        }
        uint64_t v28 = (uuid *)&v27[16 * v23];
        int v29 = &v27[16 * v26];
        uuid *v28 = *a2;
        unint64_t v11 = v28 + 1;
        int v31 = *(uuid **)(v8 + 200);
        __int16 v30 = *(uuid **)(v8 + 208);
        if (v30 != v31)
        {
          do
          {
            v28[-1] = v30[-1];
            --v28;
            --v30;
          }
          while (v30 != v31);
          __int16 v30 = *(uuid **)(v8 + 200);
        }
        *(void *)(v8 + 200) = v28;
        *(void *)(v8 + 208) = v11;
        *(void *)(v8 + 216) = v29;
        if (v30) {
          operator delete(v30);
        }
      }
      else
      {
        uuid *v10 = *a2;
        unint64_t v11 = v10 + 1;
      }
      *(void *)(v8 + 208) = v11;
    }
    else
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
      }
      uint64_t v14 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        uint64_t v15 = (char *)operator new(0x28uLL);
        *(void *)(v15 + 29) = 0;
        *(_OWORD *)uint64_t v15 = 0u;
        *((_OWORD *)v15 + 1) = 0u;
        boost::uuids::to_chars<char *>((uint64_t)this + 8, v15);
        uint64_t v16 = *((void *)this + 12);
        int v17 = (char *)operator new(0x28uLL);
        *(void *)(v17 + 29) = 0;
        *(_OWORD *)int v17 = 0u;
        *((_OWORD *)v17 + 1) = 0u;
        boost::uuids::to_chars<char *>(v16 + 448, v17);
        int v32 = 68289539;
        int v33 = 0;
        __int16 v34 = 2082;
        __int16 v35 = "";
        __int16 v36 = 2081;
        __int16 v37 = v15;
        __int16 v38 = 2081;
        long long v39 = v17;
        _os_log_impl(&dword_25631F000, v14, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"when appending label to Blue Atlas model, model has no Blue Atlas data\", \"ServiceUUID\":%{private, location:escape_only}s, \"ModelUUID\":%{private, location:escape_only}s}", (uint8_t *)&v32, 0x26u);
        operator delete(v17);
        operator delete(v15);
      }

      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
      }
      uint64_t v18 = (id)logObject_MicroLocation_Default;
      if (os_signpost_enabled(v18))
      {
        uint64_t v19 = (char *)operator new(0x28uLL);
        *(void *)(v19 + 29) = 0;
        *(_OWORD *)uint64_t v19 = 0u;
        *((_OWORD *)v19 + 1) = 0u;
        boost::uuids::to_chars<char *>((uint64_t)this + 8, v19);
        uint64_t v20 = *((void *)this + 12);
        unint64_t v21 = (char *)operator new(0x28uLL);
        *(void *)(v21 + 29) = 0;
        *(_OWORD *)unint64_t v21 = 0u;
        *((_OWORD *)v21 + 1) = 0u;
        boost::uuids::to_chars<char *>(v20 + 448, v21);
        int v32 = 68289539;
        int v33 = 0;
        __int16 v34 = 2082;
        __int16 v35 = "";
        __int16 v36 = 2081;
        __int16 v37 = v19;
        __int16 v38 = 2081;
        long long v39 = v21;
        _os_signpost_emit_with_name_impl(&dword_25631F000, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "when appending label to Blue Atlas model, model has no Blue Atlas data", "{\"msg%{public}.0s\":\"when appending label to Blue Atlas model, model has no Blue Atlas data\", \"ServiceUUID\":%{private, location:escape_only}s, \"ModelUUID\":%{private, location:escape_only}s}", (uint8_t *)&v32, 0x26u);
        operator delete(v21);
        operator delete(v19);
      }
    }
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
    }
    __int16 v12 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      int v32 = 68289026;
      int v33 = 0;
      __int16 v34 = 2082;
      __int16 v35 = "";
      _os_log_impl(&dword_25631F000, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"when appending label to Blue Atlas model, service has no current model!\"}", (uint8_t *)&v32, 0x12u);
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
    }
    BOOL v13 = logObject_MicroLocation_Default;
    if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
    {
      int v32 = 68289026;
      int v33 = 0;
      __int16 v34 = 2082;
      __int16 v35 = "";
      _os_signpost_emit_with_name_impl(&dword_25631F000, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "when appending label to Blue Atlas model, service has no current model!", "{\"msg%{public}.0s\":\"when appending label to Blue Atlas model, service has no current model!\"}", (uint8_t *)&v32, 0x12u);
    }
  }
}

void sub_25645AA9C(_Unwind_Exception *a1)
{
  operator delete(v3);
  operator delete(v2);

  _Unwind_Resume(a1);
}

void CLMiLoService::labelObservationsBetweenDates(CLMiLoService *this, const uuid *a2, const uuid *a3, NSDate *a4, NSDate *a5)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  unint64_t v9 = a4;
  uint64_t v10 = a5;
  uint64_t v11 = *((void *)this + 3);
  if ((unint64_t)(v11 - 2) > 2
    || !*((void *)this + 12)
    || ((v11 & 0xFFFFFFFFFFFFFFFELL) == 2 ? (BOOL v12 = **((unsigned char **)this + 56) == 0) : (BOOL v12 = 1), v12))
  {
    int v13 = 0;
    uint64_t v14 = 14;
  }
  else
  {
    uint64_t v21 = *(void *)this;
    long long v39 = *(_OWORD *)((char *)this + 8);
    CLMicroLocationClientUtils::getClientIdAndServiceUuid((const void **)this + 5, (uint64_t)&v39, (std::string *)buf);
    int v13 = (*(uint64_t (**)(uint64_t, uint8_t *, const uuid *, NSDate *, NSDate *))(*(void *)v21 + 88))(v21, buf, a3, v9, v10);
    if (SBYTE3(v28) < 0) {
      operator delete(*(void **)buf);
    }
    if (v13) {
      uint64_t v14 = -1;
    }
    else {
      uint64_t v14 = 14;
    }
  }
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
  }
  uint64_t v15 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v22 = v10;
    uint64_t v23 = v9;
    uint64_t v16 = (char *)operator new(0x28uLL);
    *(void *)(v16 + 29) = 0;
    *(_OWORD *)uint64_t v16 = 0u;
    *((_OWORD *)v16 + 1) = 0u;
    boost::uuids::to_chars<char *>((uint64_t)this + 8, v16);
    uint64_t v17 = *((unsigned int *)this + 6);
    uint64_t v18 = (char *)operator new(0x28uLL);
    *(void *)(v18 + 29) = 0;
    *(_OWORD *)uint64_t v18 = 0u;
    *((_OWORD *)v18 + 1) = 0u;
    boost::uuids::to_chars<char *>((uint64_t)a2, v18);
    uint64_t v19 = (char *)operator new(0x28uLL);
    *(void *)(v19 + 29) = 0;
    *(_OWORD *)uint64_t v19 = 0u;
    *((_OWORD *)v19 + 1) = 0u;
    boost::uuids::to_chars<char *>((uint64_t)a3, v19);
    uint64_t v20 = *((void *)this + 11);
    *(_DWORD *)std::string buf = 68290562;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v25 = 2082;
    unint64_t v26 = "";
    __int16 v27 = 2082;
    uint64_t v28 = v16;
    __int16 v29 = 2050;
    uint64_t v30 = v17;
    __int16 v31 = 2082;
    int v32 = v18;
    __int16 v33 = 2082;
    __int16 v34 = v19;
    __int16 v35 = 1026;
    int v36 = v20;
    __int16 v37 = 1026;
    int v38 = v13;
    _os_log_impl(&dword_25631F000, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoService label observation request Between dates: \", \"ServiceId\":%{public, location:escape_only}s, \"ServiceType\":%{public}lu, \"RequestId\":%{public, location:escape_only}s, \"PlaceId\":%{public, location:escape_only}s, \"State\":%{public}u, \"Success\":%{public}hhd}", buf, 0x46u);
    operator delete(v19);
    operator delete(v18);
    operator delete(v16);
    uint64_t v10 = v22;
    unint64_t v9 = v23;
  }

  (*(void (**)(void, char *, const uuid *, uint64_t))(**(void **)this + 40))(*(void *)this, (char *)this + 8, a2, v14);
}

void sub_25645AE10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void CLMiLoService::startUpdating(CLMiLoService *this, int a2)
{
  if (!*((unsigned char *)this + 457)) {
    *((unsigned char *)this + 457) = 1;
  }
  *((unsigned char *)this + 456) = a2;
  CLMiLoService::updateServiceUpdatingParametersIfAppropriate(this, a2);
}

void CLMiLoService::stopUpdating(CLMiLoService *this)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v2 = (char *)this + 8;
  (*(void (**)(void, char *))(**(void **)this + 152))(*(void *)this, (char *)this + 8);
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
  }
  uint64_t v3 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    unint64_t v4 = (char *)operator new(0x28uLL);
    *(void *)(v4 + 29) = 0;
    *(_OWORD *)unint64_t v4 = 0u;
    *((_OWORD *)v4 + 1) = 0u;
    boost::uuids::to_chars<char *>((uint64_t)v2, v4);
    v5[0] = 68289283;
    v5[1] = 0;
    __int16 v6 = 2082;
    int v7 = "";
    __int16 v8 = 2081;
    unint64_t v9 = v4;
    _os_log_impl(&dword_25631F000, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Disabling Low Latency updates if exist for Service:\", \"ServiceId\":%{private, location:escape_only}s}", (uint8_t *)v5, 0x1Cu);
    operator delete(v4);
  }

  if (*((unsigned char *)this + 457)) {
    *((unsigned char *)this + 457) = 0;
  }
}

void sub_25645B008(_Unwind_Exception *a1)
{
  operator delete(v2);

  _Unwind_Resume(a1);
}

uint64_t CLMiLoService::locationTypesBitsetFromVector(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void **)(a1 + 8);
  if (*(void **)a1 == v2) {
    return 0;
  }
  uint64_t result = 0;
  do
  {
    if (*v1 >= 0x20uLL) {
      std::__throw_out_of_range[abi:ne180100]("bitset set argument out of range");
    }
    result |= 1 << *v1++;
  }
  while (v1 != v2);
  return result;
}

BOOL CLMiLoService::requestMicroLocationLearning(CLMiLoService *this, const uuid *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 440))
  {
    (*(void (**)(void, char *, const uuid *, uint64_t))(**(void **)this + 40))(*(void *)this, (char *)this + 8, a2, 31);
    return 0;
  }
  else
  {
    unint64_t v5 = *((void *)this + 11);
    BOOL v4 = v5 < 2;
    if (v5 <= 1)
    {
      *(uuid *)((char *)this + 424) = *a2;
      *((unsigned char *)this + 440) = 1;
      (*(void (**)(void))(**(void **)this + 112))();
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
    }
    __int16 v6 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = (char *)operator new(0x28uLL);
      *(void *)(v7 + 29) = 0;
      *(_OWORD *)int v7 = 0u;
      *((_OWORD *)v7 + 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)a2, v7);
      uint64_t v8 = *((void *)this + 11);
      v10[0] = 68290050;
      v10[1] = 0;
      __int16 v11 = 2082;
      BOOL v12 = "";
      __int16 v13 = 2082;
      uint64_t v14 = v7;
      __int16 v15 = 1026;
      BOOL v16 = v5 < 2;
      __int16 v17 = 1026;
      int v18 = v8;
      __int16 v19 = 2050;
      uint64_t v20 = -1;
      _os_log_impl(&dword_25631F000, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoService::requestMicroLocationLearning\", \"RequestId\":%{public, location:escape_only}s, \"Will Start\":%{public}hhd, \"State\":%{public}u, \"Error Code\":%{public}ld}", (uint8_t *)v10, 0x32u);
      operator delete(v7);
    }
  }
  return v4;
}

void sub_25645B284(_Unwind_Exception *a1)
{
  operator delete(v2);

  _Unwind_Resume(a1);
}

void CLMiLoService::onLearningBegin(int64x2_t *a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  CLMiLoService::updateState(a1);
  if (a1[28].i8[10])
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
    }
    BOOL v4 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      v5[0] = 68289026;
      v5[1] = 0;
      __int16 v6 = 2082;
      int v7 = "";
      _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning, fIsLearning is already set before start learning, possibly last learning got cancelled\"}", (uint8_t *)v5, 0x12u);
    }
  }
  a1[28].i8[10] = 1;
  CLMiLoService::sendStatus(a1, a2);
}

unsigned char *CLMiLoService::onLearningCompleted(unsigned char *this)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  this[458] = 0;
  if (this[440])
  {
    uint64_t v1 = this;
    uint64_t v2 = (uint64_t)(this + 424);
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
    }
    uint64_t v3 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      if (!v1[440]) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      BOOL v4 = (char *)operator new(0x28uLL);
      *(void *)(v4 + 29) = 0;
      *(_OWORD *)BOOL v4 = 0u;
      *((_OWORD *)v4 + 1) = 0u;
      boost::uuids::to_chars<char *>(v2, v4);
      v5[0] = 68289538;
      v5[1] = 0;
      __int16 v6 = 2082;
      int v7 = "";
      __int16 v8 = 2082;
      unint64_t v9 = v4;
      __int16 v10 = 2050;
      uint64_t v11 = -1;
      _os_log_impl(&dword_25631F000, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoService::onLearningCompleted send completion to client\", \"RequestId\":%{public, location:escape_only}s, \"Error Code\":%{public}ld}", (uint8_t *)v5, 0x26u);
      operator delete(v4);
    }

    if (!v1[440]) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    this = (unsigned char *)(*(uint64_t (**)(void, unsigned char *, uint64_t, uint64_t))(**(void **)v1 + 40))(*(void *)v1, v1 + 8, v2, -1);
    if (v1[440]) {
      v1[440] = 0;
    }
  }
  return this;
}

void sub_25645B554(_Unwind_Exception *a1)
{
  operator delete(v2);

  _Unwind_Resume(a1);
}

void CLMiLoService::onLocalizationStart(CLMiLoService *this, uuid a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uuid v8 = a2;
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
  }
  uint64_t v3 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    std::string __p = (void *)68289026;
    LOWORD(v7) = 2082;
    *(void *)((char *)&v7 + 2) = "";
    _os_log_impl(&dword_25631F000, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoService::onLocalizationStart send event to client\"}", (uint8_t *)&__p, 0x12u);
  }
  uint64_t v4 = *(void *)this;
  unint64_t v5 = operator new(0x28uLL);
  std::string __p = v5;
  long long v7 = xmmword_256514540;
  _OWORD *v5 = 0u;
  v5[1] = 0u;
  *(void *)((char *)v5 + 29) = 0;
  boost::uuids::to_chars<char *>((uint64_t)&v8, v5);
  (*(void (**)(uint64_t, char *, void, void **))(*(void *)v4 + 64))(v4, (char *)this + 8, 0, &__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
}

void sub_25645B6E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<CLMicroLocationRecordingLabelsTable::Entry>::shrink_to_fit(uint64_t *a1)
{
  uint64_t v3 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = (v5 - *a1) >> 6;
  if (v6 < (v3 - *a1) >> 6)
  {
    uint64_t v13 = result;
    if (v5 == v4)
    {
      long long v7 = 0;
      uint64_t v8 = 0;
    }
    else
    {
      long long v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRecordingLabelsTable::Entry>>(result, v6);
    }
    uint64_t v9 = v7;
    __int16 v10 = &v7[64 * v6];
    uint64_t v11 = v10;
    uint64_t v12 = &v7[64 * v8];
    std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__swap_out_circular_buffer(a1, &v9);
    return std::__split_buffer<CLMicroLocationRecordingLabelsTable::Entry>::~__split_buffer((uint64_t)&v9);
  }
  return result;
}

void sub_25645B798(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_62()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

void ___ZL47_CLLogObjectForCategory_MicroLocationQE_Defaultv_block_invoke_2()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocationQE");
  uint64_t v1 = (void *)logObject_MicroLocationQE_Default;
  logObject_MicroLocationQE_Default = (uint64_t)v0;
}

__n128 std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(uint64_t a1, __n128 *a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(unsigned char *)(a1 + 24))
    {
      if (*(char *)(a1 + 23) < 0) {
        operator delete(*(void **)a1);
      }
      __n128 result = *a2;
      *(void *)(a1 + 16) = a2[1].n128_u64[0];
      *(__n128 *)a1 = result;
      a2[1].n128_u8[7] = 0;
      a2->n128_u8[0] = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    __n128 result = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    *(__n128 *)a1 = result;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    a2->n128_u64[0] = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return result;
}

uint64_t std::deque<CLMiLoService::OutstandingRequest>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x78) {
    a2 = 1;
  }
  if (v2 < 0xF0) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 120;
  }
  return v4 ^ 1u;
}

void std::__optional_destruct_base<CachedPrediction,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 184))
  {
    unint64_t v2 = *(void **)(a1 + 144);
    if (v2)
    {
      *(void *)(a1 + 152) = v2;
      operator delete(v2);
    }
    if (*(unsigned char *)(a1 + 128)) {
      std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::~__hash_table(a1 + 88);
    }
    if (*(unsigned char *)(a1 + 80) && *(char *)(a1 + 79) < 0) {
      operator delete(*(void **)(a1 + 56));
    }
    uint64_t v3 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v3;
      operator delete(v3);
    }
    *(unsigned char *)(a1 + 184) = 0;
  }
}

__n128 std::deque<CLMiLoService::OutstandingRequest>::push_back(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 120 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<CLMiLoService::OutstandingRequest>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x78)) + 34 * (v7 % 0x78);
  __n128 result = *(__n128 *)a2;
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_WORD *)(v8 + 32) = *(_WORD *)(a2 + 32);
  *(__n128 *)unint64_t v8 = result;
  *(_OWORD *)(v8 + 16) = v10;
  ++a1[5];
  return result;
}

void std::deque<CLMiLoService::OutstandingRequest>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x78;
  unint64_t v4 = v2 - 120;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int16 v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>(v5, v33);
      __int16 v35 = &v34[8 * (v33 >> 2)];
      __int16 v37 = &v34[8 * v36];
      int v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        long long v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)long long v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    __int16 v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      std::__split_buffer<CLMiLoServiceManager::OutstandingEnableCustomLoiRequest *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    std::__split_buffer<CLMiLoServiceManager::OutstandingEnableCustomLoiRequest *>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int16 v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      __int16 v37 = &v34[8 * v47];
      __int16 v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      long long v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  int v53 = operator new(0xFF0uLL);
  std::__split_buffer<CLMiLoServiceManager::OutstandingEnableCustomLoiRequest *>::push_back(&v54, &v53);
  __int16 v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<CLMiLoServiceManager::OutstandingEnableCustomLoiRequest *>::push_front((uint64_t)&v54, v27);
  }
  __int16 v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_25645BD38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::back_insert_iterator<std::vector<ULServiceQualityReasonEnum>>::operator=[abi:ne180100](uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(void **)(*a1 + 8);
  uint64_t v6 = (void *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    unint64_t v8 = *(void **)v4;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v4) >> 3;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = *v6 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>((uint64_t)v6, v12);
      unint64_t v8 = *(void **)v4;
      uint64_t v5 = *(void **)(v4 + 8);
    }
    else
    {
      uint64_t v13 = 0;
    }
    BOOL v14 = &v13[8 * v9];
    uint64_t v15 = &v13[8 * v12];
    *(void *)BOOL v14 = *a2;
    unint64_t v7 = v14 + 8;
    while (v5 != v8)
    {
      uint64_t v16 = *--v5;
      *((void *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(void *)uint64_t v4 = v14;
    *(void *)(v4 + 8) = v7;
    *(void *)(v4 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    void *v5 = *a2;
    unint64_t v7 = v5 + 1;
  }
  *(void *)(v4 + 8) = v7;
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    unint64_t v2 = a2;
    do
    {
      BOOL v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<boost::uuids::uuid const,CLMicroLocationFingerprint>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<boost::uuids::uuid const,CLMicroLocationFingerprint>,0>(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 184);
  if (v2)
  {
    *(void *)(a1 + 192) = v2;
    operator delete(v2);
  }
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(a1 + 120);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(a1 + 80);
  return std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table(a1 + 16);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationFingerprint>,CLMicroLocationFingerprint const*,CLMicroLocationFingerprint const*,CLMicroLocationFingerprint*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  _DWORD v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::allocator<CLMicroLocationFingerprint>::construct[abi:ne180100]<CLMicroLocationFingerprint,CLMicroLocationFingerprint const&>(a1, v4, v6);
      v6 += 192;
      uint64_t v4 = v12 + 192;
      v12 += 192;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationFingerprint>,CLMicroLocationFingerprint*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_25645BFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void OUTLINED_FUNCTION_4_2(void *a1, int a2, int a3, int a4, const char *a5, const char *a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  _os_signpost_emit_with_name_impl(a1, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, a5, a6, &buf, 0x2Cu);
}

void OUTLINED_FUNCTION_7_0(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  _os_log_impl(a1, v13, OS_LOG_TYPE_INFO, a4, &buf, 0x2Cu);
}

void OUTLINED_FUNCTION_8_0(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  _os_log_impl(a1, v13, OS_LOG_TYPE_FAULT, a4, &buf, 0x2Cu);
}

void ULDBUtils::fetchEntries<CLMicroLocationLoggedEventsTable,ULLoggedEventMO>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  uint64_t v23 = 0;
  uint64_t v24 = &v23;
  uint64_t v25 = 0x4812000000;
  uint64_t v26 = __Block_byref_object_copy__13;
  __int16 v27 = __Block_byref_object_dispose__13;
  uint64_t v28 = &unk_25654E519;
  memset(v29, 0, sizeof(v29));
  uint64_t v12 = [v9 managedObjectContext];
  v17[0] = MEMORY[0x263EF8330];
  v17[1] = 3221225472;
  v17[2] = ___ZN9ULDBUtils12fetchEntriesI32CLMicroLocationLoggedEventsTable15ULLoggedEventMOEENSt3__16vectorINT_5EntryENS3_9allocatorIS6_EEEEP7ULStoreP7NSArrayIP11NSPredicateEPSC_IP16NSSortDescriptorEm_block_invoke;
  v17[3] = &unk_2653F90E0;
  id v13 = v10;
  id v18 = v13;
  id v14 = v11;
  id v19 = v14;
  uint64_t v22 = a4;
  id v15 = v9;
  id v20 = v15;
  uint64_t v21 = &v23;
  [v12 performBlockAndWait:v17];

  uint64_t v16 = v24;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  std::vector<CLMicroLocationLoggedEventsTable::Entry>::__init_with_size[abi:ne180100]<CLMicroLocationLoggedEventsTable::Entry*,CLMicroLocationLoggedEventsTable::Entry*>(a5, v16[6], v16[7], 0xCF3CF3CF3CF3CF3DLL * ((v16[7] - v16[6]) >> 4));

  _Block_object_dispose(&v23, 8);
  long long v30 = (void **)v29;
  std::vector<CLMicroLocationLoggedEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v30);
}

void sub_25645C22C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, void *a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);

  _Block_object_dispose(va, 8);
  *(void *)(v14 - 96) = v13;
  std::vector<CLMicroLocationLoggedEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 96));

  _Unwind_Resume(a1);
}

void ULDBUtils::fetchAllWithLimit<CLMicroLocationLoggedEventsTable,ULLoggedEventMO>(void *a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  v10[1] = *MEMORY[0x263EF8340];
  id v5 = a1;
  uint64_t v6 = (void *)MEMORY[0x263F08B30];
  unint64_t v7 = [(id)objc_opt_class() defaultSortProperty];
  unint64_t v8 = [v6 sortDescriptorWithKey:v7 ascending:0];

  v10[0] = v8;
  id v9 = [MEMORY[0x263EFF8C0] arrayWithObjects:v10 count:1];
  ULDBUtils::fetchEntries<CLMicroLocationLoggedEventsTable,ULLoggedEventMO>(v5, 0, v9, a2, a3);
}

void sub_25645C390(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25645C678(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25645C7DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, uint64_t a11, char a12)
{
  std::string __p = &a12;
  std::vector<CLMicroLocationLoggedEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_25645C8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<CLMicroLocationLoggedEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_63()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

__n128 __Block_byref_object_copy__13(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__13(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  std::vector<CLMicroLocationLoggedEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void ___ZN9ULDBUtils12fetchEntriesI32CLMicroLocationLoggedEventsTable15ULLoggedEventMOEENSt3__16vectorINT_5EntryENS3_9allocatorIS6_EEEEP7ULStoreP7NSArrayIP11NSPredicateEPSC_IP16NSSortDescriptorEm_block_invoke(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 48);
  BOOL v3 = (objc_class *)objc_opt_class();
  uint64_t v4 = NSStringFromClass(v3);
  id v5 = [v2 fetchManagedObjectsWithEntityName:v4 byAndPredicates:*(void *)(a1 + 32) sortDescriptors:*(void *)(a1 + 40) andLimit:*(void *)(a1 + 64)];

  ULDBUtils::convertManagedObjectsToEntries<CLMicroLocationLoggedEventsTable,ULLoggedEventMO>(v5, (uint64_t *)&v8);
  uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8);
  std::vector<CLMicroLocationLoggedEventsTable::Entry>::__vdeallocate((void **)(v6 + 48));
  *(_OWORD *)(v6 + 48) = v8;
  *(void *)(v6 + 64) = v9;
  uint64_t v9 = 0;
  long long v8 = 0uLL;
  id v10 = (void **)&v8;
  std::vector<CLMicroLocationLoggedEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v10);
  unint64_t v7 = [*(id *)(a1 + 48) managedObjectContext];
  [v7 reset];
}

void sub_25645CA1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ULDBUtils::convertManagedObjectsToEntries<CLMicroLocationLoggedEventsTable,ULLoggedEventMO>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  id v3 = a1;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  std::vector<CLMicroLocationLoggedEventsTable::Entry>::reserve(a2, [v3 count]);
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id obj = v3;
  uint64_t v4 = [obj countByEnumeratingWithState:&v24 objects:v37 count:16];
  if (!v4)
  {

    goto LABEL_32;
  }
  char v5 = 0;
  uint64_t v6 = *(void *)v25;
  do
  {
    uint64_t v7 = 0;
    do
    {
      if (*(void *)v25 != v6) {
        objc_enumerationMutation(obj);
      }
      id v8 = *(id *)(*((void *)&v24 + 1) + 8 * v7);
      uint64_t v9 = v8;
      if (v8)
      {
        [v8 convertToEntry];
        if ((_BYTE)v36)
        {
          id v10 = (long long *)a2[1];
          if ((unint64_t)v10 >= a2[2])
          {
            uint64_t v12 = std::vector<CLMicroLocationLoggedEventsTable::Entry>::__push_back_slow_path<CLMicroLocationLoggedEventsTable::Entry>(a2, v34);
          }
          else
          {
            long long v11 = v34[0];
            *(long long *)((char *)v10 + 12) = *(long long *)((char *)v34 + 12);
            long long *v10 = v11;
            CLMicroLocationProto::ReceivedEvent::ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)(v10 + 2), (const CLMicroLocationProto::ReceivedEvent *)v35);
            uint64_t v12 = (uint64_t)(v10 + 21);
            a2[1] = (uint64_t)(v10 + 21);
          }
          char v19 = 0;
          a2[1] = v12;
          goto LABEL_22;
        }
      }
      else
      {
        uint64_t v36 = 0;
        memset(v35, 0, sizeof(v35));
        memset(v34, 0, sizeof(v34));
      }
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_77);
      }
      uint64_t v13 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        uint64_t v14 = [v9 entity];
        id v15 = [v14 name];
        *(_DWORD *)std::string buf = 68289283;
        int v29 = 0;
        __int16 v30 = 2082;
        long long v31 = "";
        __int16 v32 = 2113;
        unint64_t v33 = v15;
        _os_log_impl(&dword_25631F000, v13, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to convert MO to entry\", \"MO\":%{private, location:escape_only}@}", buf, 0x1Cu);
      }
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_77);
      }
      uint64_t v16 = (id)logObject_MicroLocation_Default;
      if (os_signpost_enabled(v16))
      {
        uint64_t v17 = [v9 entity];
        id v18 = [v17 name];
        *(_DWORD *)std::string buf = 68289283;
        int v29 = 0;
        __int16 v30 = 2082;
        long long v31 = "";
        __int16 v32 = 2113;
        unint64_t v33 = v18;
        _os_signpost_emit_with_name_impl(&dword_25631F000, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to convert MO to entry", "{\"msg%{public}.0s\":\"Failed to convert MO to entry\", \"MO\":%{private, location:escape_only}@}", buf, 0x1Cu);
      }
      char v19 = 1;
      char v5 = 1;
LABEL_22:
      if ((_BYTE)v36) {
        CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v35);
      }

      if (v19) {
        goto LABEL_27;
      }
      ++v7;
    }
    while (v4 != v7);
    uint64_t v4 = [obj countByEnumeratingWithState:&v24 objects:v37 count:16];
  }
  while (v4);
LABEL_27:

  if (v5)
  {
    uint64_t v21 = *a2;
    uint64_t v20 = a2[1];
    if (v20 != *a2)
    {
      do
      {
        uint64_t v22 = v20 - 336;
        CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)(v20 - 304));
        uint64_t v20 = v22;
      }
      while (v22 != v21);
    }
    a2[1] = v21;
  }
LABEL_32:
}

void sub_25645CE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **a27)
{
  std::vector<CLMicroLocationLoggedEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100](&a27);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMicroLocationLoggedEventsTable::Entry>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xCF3CF3CF3CF3CF3DLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0xC30C30C30C30C4) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationLoggedEventsTable::Entry>>(result, a2);
    v7[1] = v7[0] + v5;
    _DWORD v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 336 * v6;
    std::vector<CLMicroLocationLoggedEventsTable::Entry>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<CLMicroLocationLoggedEventsTable::Entry>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_25645CF5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMicroLocationLoggedEventsTable::Entry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMicroLocationLoggedEventsTable::Entry>::__push_back_slow_path<CLMicroLocationLoggedEventsTable::Entry>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCF3CF3CF3CF3CF3DLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xC30C30C30C30C3) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCF3CF3CF3CF3CF3DLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x61861861861861) {
    unint64_t v9 = 0xC30C30C30C30C3;
  }
  else {
    unint64_t v9 = v5;
  }
  id v18 = a1 + 2;
  if (v9) {
    id v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationLoggedEventsTable::Entry>>(v7, v9);
  }
  else {
    id v10 = 0;
  }
  long long v11 = &v10[336 * v4];
  v15[0] = v10;
  v15[1] = v11;
  uint64_t v16 = v11;
  uint64_t v17 = &v10[336 * v9];
  long long v12 = *a2;
  *(_OWORD *)(v11 + 12) = *(long long *)((char *)a2 + 12);
  *(_OWORD *)long long v11 = v12;
  CLMicroLocationProto::ReceivedEvent::ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)(v11 + 32), (const CLMicroLocationProto::ReceivedEvent *)(a2 + 2));
  v16 += 336;
  std::vector<CLMicroLocationLoggedEventsTable::Entry>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<CLMicroLocationLoggedEventsTable::Entry>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_25645D08C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMicroLocationLoggedEventsTable::Entry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<CLMicroLocationLoggedEventsTable::Entry>::__vdeallocate(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    unint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        unint64_t v5 = v3 - 336;
        CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)(v3 - 304));
        uint64_t v3 = v5;
      }
      while (v5 != v1);
      unint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_25645D498(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25645D550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  id v10 = v9;

  a9.super_class = (Class)CLMicroLocationLoiBridge;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_25645D820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_25645D914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  long long v12 = v11;

  _Unwind_Resume(a1);
}

void sub_25645D9D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v13 = v12;

  _Unwind_Resume(a1);
}

void sub_25645DD98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_25645DF9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25645E128(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25645E278(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25645E384(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v2 - 40));

  _Unwind_Resume(a1);
}

void sub_25645E444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_25645E5F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25645E694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_25645E780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_25645E9D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25645EA58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25645EBD0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);

  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_25645EC8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_25645EF7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_25645F054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_25645F290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_25645F360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_25645F47C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25645F62C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25645F9A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25645FB4C(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v3 - 40));

  _Unwind_Resume(a1);
}

void sub_25645FBE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_25645FF68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

double ULSettings::get<ULSettings::CustomLoiGeofenceRadius>()
{
  os_log_t v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  uint64_t v2 = [NSString stringWithUTF8String:"ULCustomLoiGeofenceRadius"];
  uint64_t v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    [v3 doubleValue];
  }
  else {
    [&unk_2704F0F70 doubleValue];
  }
  double v5 = v4;

  return v5;
}

void sub_2564600D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564602D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_25646038C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_256460720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  _Unwind_Resume(a1);
}

void sub_256460818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_25646096C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256460A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_256460B6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256460CC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256460F28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  _Unwind_Resume(a1);
}

void sub_256460FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_64()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

void sub_2564613F4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__14(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__14(uint64_t a1)
{
}

void sub_2564623D8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_256462A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__15(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__15(uint64_t a1)
{
}

void sub_256462D00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ULDBUtils::insertEntries<CLMicroLocationBluetoothIdentityTable,ULBluetoothIdentityMO>(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2020000000;
  char v15 = 0;
  double v4 = [v3 managedObjectContext];
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 3221225472;
  v8[2] = ___ZN9ULDBUtils13insertEntriesI37CLMicroLocationBluetoothIdentityTable21ULBluetoothIdentityMOEEbP7ULStoreRKNSt3__16vectorINT_5EntryENS5_9allocatorIS8_EEEE_block_invoke;
  v8[3] = &unk_2653F90B8;
  uint64_t v11 = a2;
  id v5 = v3;
  id v9 = v5;
  id v10 = &v12;
  [v4 performBlockAndWait:v8];

  uint64_t v6 = *((unsigned __int8 *)v13 + 24);
  _Block_object_dispose(&v12, 8);

  return v6;
}

void sub_256462E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ULDBUtils::fetchEntries<CLMicroLocationBluetoothIdentityTable,ULBluetoothIdentityMO>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  uint64_t v23 = 0;
  long long v24 = &v23;
  uint64_t v25 = 0x4812000000;
  long long v26 = __Block_byref_object_copy__16;
  long long v27 = __Block_byref_object_dispose__16;
  uint64_t v28 = &unk_25654E519;
  memset(v29, 0, sizeof(v29));
  uint64_t v12 = [v9 managedObjectContext];
  v17[0] = MEMORY[0x263EF8330];
  v17[1] = 3221225472;
  v17[2] = ___ZN9ULDBUtils12fetchEntriesI37CLMicroLocationBluetoothIdentityTable21ULBluetoothIdentityMOEENSt3__16vectorINT_5EntryENS3_9allocatorIS6_EEEEP7ULStoreP7NSArrayIP11NSPredicateEPSC_IP16NSSortDescriptorEm_block_invoke;
  v17[3] = &unk_2653F90E0;
  id v13 = v10;
  id v18 = v13;
  id v14 = v11;
  id v19 = v14;
  uint64_t v22 = a4;
  id v15 = v9;
  id v20 = v15;
  uint64_t v21 = &v23;
  [v12 performBlockAndWait:v17];

  uint64_t v16 = v24;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::__init_with_size[abi:ne180100]<CLMicroLocationBluetoothIdentityTable::Entry*,CLMicroLocationBluetoothIdentityTable::Entry*>(a5, v16[6], v16[7], 0x8E38E38E38E38E39 * ((v16[7] - v16[6]) >> 3));

  _Block_object_dispose(&v23, 8);
  __int16 v30 = (void **)v29;
  std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v30);
}

void sub_256463038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, void *a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);

  _Block_object_dispose(va, 8);
  *(void *)(v14 - 96) = v13;
  std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 96));

  _Unwind_Resume(a1);
}

void ULDBUtils::fetchAllWithLimit<CLMicroLocationBluetoothIdentityTable,ULBluetoothIdentityMO>(void *a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  v10[1] = *MEMORY[0x263EF8340];
  id v5 = a1;
  uint64_t v6 = (void *)MEMORY[0x263F08B30];
  uint64_t v7 = [(id)objc_opt_class() defaultSortProperty];
  unint64_t v8 = [v6 sortDescriptorWithKey:v7 ascending:0];

  v10[0] = v8;
  id v9 = [MEMORY[0x263EFF8C0] arrayWithObjects:v10 count:1];
  ULDBUtils::fetchEntries<CLMicroLocationBluetoothIdentityTable,ULBluetoothIdentityMO>(v5, 0, v9, a2, a3);
}

void sub_25646319C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256463418(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN9ULDBUtils13insertEntriesI37CLMicroLocationBluetoothIdentityTable21ULBluetoothIdentityMOEEbP7ULStoreRKNSt3__16vectorINT_5EntryENS5_9allocatorIS8_EEEE_block_invoke(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(a1 + 48);
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  if (*v2 == v4)
  {
LABEL_4:
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [*(id *)(a1 + 32) commitChangesToStore];
    uint64_t v7 = *(void **)(a1 + 32);
    [v7 deleteOldestRecordsIfFull];
  }
  else
  {
    while (1)
    {
      id v5 = [*(id *)(a1 + 32) managedObjectContext];
      uint64_t v6 = +[ULBluetoothIdentityMO createFromEntry:v3 inManagedObjectContext:v5];

      if (!v6) {
        break;
      }

      v3 += 72;
      if (v3 == v4) {
        goto LABEL_4;
      }
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_82);
    }
    unint64_t v8 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      id v9 = +[ULBluetoothIdentityMO entity];
      id v10 = [v9 name];
      int v15 = 68289283;
      int v16 = 0;
      __int16 v17 = 2082;
      id v18 = "";
      __int16 v19 = 2113;
      id v20 = v10;
      _os_log_impl(&dword_25631F000, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to create entry from MO\", \"MO\":%{private, location:escape_only}@}", (uint8_t *)&v15, 0x1Cu);
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_82);
    }
    id v11 = (id)logObject_MicroLocation_Default;
    if (os_signpost_enabled(v11))
    {
      uint64_t v12 = +[ULBluetoothIdentityMO entity];
      uint64_t v13 = [v12 name];
      int v15 = 68289283;
      int v16 = 0;
      __int16 v17 = 2082;
      id v18 = "";
      __int16 v19 = 2113;
      id v20 = v13;
      _os_signpost_emit_with_name_impl(&dword_25631F000, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to create entry from MO", "{\"msg%{public}.0s\":\"Failed to create entry from MO\", \"MO\":%{private, location:escape_only}@}", (uint8_t *)&v15, 0x1Cu);
    }
    uint64_t v14 = [*(id *)(a1 + 32) managedObjectContext];
    [v14 reset];
  }
}

void sub_256463768(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_65()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

__n128 __Block_byref_object_copy__16(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__16(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void ___ZN9ULDBUtils12fetchEntriesI37CLMicroLocationBluetoothIdentityTable21ULBluetoothIdentityMOEENSt3__16vectorINT_5EntryENS3_9allocatorIS6_EEEEP7ULStoreP7NSArrayIP11NSPredicateEPSC_IP16NSSortDescriptorEm_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  uint64_t v3 = (objc_class *)objc_opt_class();
  uint64_t v4 = NSStringFromClass(v3);
  id v5 = [v2 fetchManagedObjectsWithEntityName:v4 byAndPredicates:*(void *)(a1 + 32) sortDescriptors:*(void *)(a1 + 40) andLimit:*(void *)(a1 + 64)];

  ULDBUtils::convertManagedObjectsToEntries<CLMicroLocationBluetoothIdentityTable,ULBluetoothIdentityMO>(v5, (uint64_t *)&v8);
  uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8);
  std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::__vdeallocate((void **)(v6 + 48));
  *(_OWORD *)(v6 + 48) = v8;
  *(void *)(v6 + 64) = v9;
  uint64_t v9 = 0;
  long long v8 = 0uLL;
  id v10 = (void **)&v8;
  std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v10);
  uint64_t v7 = [*(id *)(a1 + 48) managedObjectContext];
  [v7 reset];
}

void sub_25646391C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ULDBUtils::convertManagedObjectsToEntries<CLMicroLocationBluetoothIdentityTable,ULBluetoothIdentityMO>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  id v3 = a1;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::reserve(a2, [v3 count]);
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v4 = v3;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v18 objects:v30 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v19;
    while (2)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v19 != v6) {
          objc_enumerationMutation(v4);
        }
        id v8 = *(id *)(*((void *)&v18 + 1) + 8 * i);
        uint64_t v9 = v8;
        if (!v8)
        {
          long long v29 = 0u;
          memset(v28, 0, sizeof(v28));
LABEL_13:
          if (onceToken_MicroLocation_Default != -1) {
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_82);
          }
          id v10 = (id)logObject_MicroLocation_Default;
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            id v11 = [v9 entity];
            uint64_t v12 = [v11 name];
            *(_DWORD *)std::string buf = 68289283;
            int v23 = 0;
            __int16 v24 = 2082;
            uint64_t v25 = "";
            __int16 v26 = 2113;
            long long v27 = v12;
            _os_log_impl(&dword_25631F000, v10, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to convert MO to entry\", \"MO\":%{private, location:escape_only}@}", buf, 0x1Cu);
          }
          if (onceToken_MicroLocation_Default != -1) {
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_82);
          }
          uint64_t v13 = (id)logObject_MicroLocation_Default;
          if (os_signpost_enabled(v13))
          {
            uint64_t v14 = [v9 entity];
            int v15 = [v14 name];
            *(_DWORD *)std::string buf = 68289283;
            int v23 = 0;
            __int16 v24 = 2082;
            uint64_t v25 = "";
            __int16 v26 = 2113;
            long long v27 = v15;
            _os_signpost_emit_with_name_impl(&dword_25631F000, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to convert MO to entry", "{\"msg%{public}.0s\":\"Failed to convert MO to entry\", \"MO\":%{private, location:escape_only}@}", buf, 0x1Cu);
          }
          std::__optional_destruct_base<CLMicroLocationBluetoothIdentityTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v28);

          uint64_t v17 = *a2;
          uint64_t v16 = a2[1];
          if (v16 != *a2)
          {
            do
            {
              v16 -= 72;
              std::allocator<CLMicroLocationRapportMonitor::Item>::destroy[abi:ne180100]((uint64_t)(a2 + 2), v16);
            }
            while (v16 != v17);
          }
          a2[1] = v17;
          goto LABEL_24;
        }
        objc_msgSend(v8, "convertToEntry", (void)v18);
        if (!BYTE8(v29)) {
          goto LABEL_13;
        }
        std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::push_back[abi:ne180100](a2, (uint64_t)v28);
        std::__optional_destruct_base<CLMicroLocationBluetoothIdentityTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v28);
      }
      uint64_t v5 = [v4 countByEnumeratingWithState:&v18 objects:v30 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }

LABEL_24:
}

void sub_256463C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  long long v18 = v16;

  std::__optional_destruct_base<CLMicroLocationBluetoothIdentityTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)va);

  _Unwind_Resume(a1);
}

void **std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  __n128 result = (void **)(a1 + 2);
  if (0x8E38E38E38E38E39 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x38E38E38E38E38FLL) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationAssociatedStateTable::Entry>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    _DWORD v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 72 * v6;
    std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<CLMicroLocationBluetoothIdentityTable::Entry>::~__split_buffer(v7);
  }
  return result;
}

void sub_256463DB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMicroLocationBluetoothIdentityTable::Entry>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void **std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  __n128 result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = (unint64_t)*(result - 1);
  if (v7 >= v6)
  {
    unint64_t v11 = 0x8E38E38E38E38E39 * ((uint64_t)(v7 - *a1) >> 3);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x38E38E38E38E38ELL) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x1C71C71C71C71C7) {
      unint64_t v14 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v14 = v12;
    }
    v20[4] = result;
    int v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationAssociatedStateTable::Entry>>((uint64_t)result, v14);
    uint64_t v16 = &v15[72 * v11];
    v20[0] = v15;
    v20[1] = v16;
    v20[3] = &v15[72 * v17];
    *(_OWORD *)uint64_t v16 = *(_OWORD *)a2;
    uint64_t v18 = *(void *)(a2 + 32);
    *((_OWORD *)v16 + 1) = *(_OWORD *)(a2 + 16);
    *((void *)v16 + 4) = v18;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 16) = 0;
    long long v19 = *(_OWORD *)(a2 + 40);
    *((void *)v16 + 7) = *(void *)(a2 + 56);
    *(_OWORD *)(v16 + 40) = v19;
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 56) = 0;
    *((void *)v16 + 8) = *(void *)(a2 + 64);
    v20[2] = v16 + 72;
    std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::__swap_out_circular_buffer(a1, v20);
    uint64_t v10 = a1[1];
    __n128 result = std::__split_buffer<CLMicroLocationBluetoothIdentityTable::Entry>::~__split_buffer(v20);
  }
  else
  {
    *(_OWORD *)unint64_t v7 = *(_OWORD *)a2;
    long long v8 = *(_OWORD *)(a2 + 16);
    *(void *)(v7 + 32) = *(void *)(a2 + 32);
    *(_OWORD *)(v7 + 16) = v8;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 16) = 0;
    long long v9 = *(_OWORD *)(a2 + 40);
    *(void *)(v7 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(v7 + 40) = v9;
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 56) = 0;
    *(void *)(a2 + 40) = 0;
    *(void *)(v7 + 64) = *(void *)(a2 + 64);
    uint64_t v10 = v7 + 72;
    a1[1] = v7 + 72;
  }
  a1[1] = v10;
  return result;
}

void sub_256463F4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMicroLocationBluetoothIdentityTable::Entry>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<CLMicroLocationBluetoothIdentityTable::Entry,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72))
  {
    if (*(char *)(a1 + 63) < 0) {
      operator delete(*(void **)(a1 + 40));
    }
    if (*(char *)(a1 + 39) < 0) {
      operator delete(*(void **)(a1 + 16));
    }
  }
  return a1;
}

void std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 72;
        std::allocator<CLMicroLocationRapportMonitor::Item>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void *std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::__init_with_size[abi:ne180100]<CLMicroLocationBluetoothIdentityTable::Entry*,CLMicroLocationBluetoothIdentityTable::Entry*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::__vallocate[abi:ne180100](result, a4);
    __n128 result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationBluetoothIdentityTable::Entry>,CLMicroLocationBluetoothIdentityTable::Entry*,CLMicroLocationBluetoothIdentityTable::Entry*,CLMicroLocationBluetoothIdentityTable::Entry*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_256464084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationAssociatedStateTable::Entry>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[72 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationBluetoothIdentityTable::Entry>,CLMicroLocationBluetoothIdentityTable::Entry*,CLMicroLocationBluetoothIdentityTable::Entry*,CLMicroLocationBluetoothIdentityTable::Entry*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  _DWORD v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::allocator<CLMicroLocationBluetoothIdentityTable::Entry>::construct[abi:ne180100]<CLMicroLocationBluetoothIdentityTable::Entry,CLMicroLocationBluetoothIdentityTable::Entry&>(a1, v4, v6);
      v6 += 72;
      uint64_t v4 = v12 + 72;
      v12 += 72;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationBluetoothIdentityTable::Entry>,CLMicroLocationBluetoothIdentityTable::Entry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_256464194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::allocator<CLMicroLocationBluetoothIdentityTable::Entry>::construct[abi:ne180100]<CLMicroLocationBluetoothIdentityTable::Entry,CLMicroLocationBluetoothIdentityTable::Entry&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a2 = *(_OWORD *)a3;
  unint64_t v5 = (std::string *)(a2 + 16);
  if (*(char *)(a3 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 16), *(void *)(a3 + 24));
  }
  else
  {
    long long v6 = *(_OWORD *)(a3 + 16);
    *(void *)(a2 + 32) = *(void *)(a3 + 32);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  unint64_t v7 = (std::string *)(a2 + 40);
  if (*(char *)(a3 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a3 + 40), *(void *)(a3 + 48));
  }
  else
  {
    long long v8 = *(_OWORD *)(a3 + 40);
    *(void *)(a2 + 56) = *(void *)(a3 + 56);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  *(void *)(a2 + 64) = *(void *)(a3 + 64);
}

void sub_256464240(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationBluetoothIdentityTable::Entry>,CLMicroLocationBluetoothIdentityTable::Entry*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationBluetoothIdentityTable::Entry>,CLMicroLocationBluetoothIdentityTable::Entry*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationBluetoothIdentityTable::Entry>,CLMicroLocationBluetoothIdentityTable::Entry*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 72;
      std::allocator<CLMicroLocationRapportMonitor::Item>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CLMicroLocationBluetoothIdentityTable::Entry *&,CLMicroLocationBluetoothIdentityTable::Entry *&>(long long **a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  long long v14 = **a1;
  uint64_t v4 = *((void *)*a1 + 2);
  *(void *)unint64_t v13 = *((void *)*a1 + 3);
  *(void *)&v13[7] = *(void *)((char *)*a1 + 31);
  char v5 = *((unsigned char *)*a1 + 39);
  *((void *)v2 + 3) = 0;
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 2) = 0;
  unint64_t v7 = (void **)v2 + 5;
  uint64_t v6 = *((void *)v2 + 5);
  *(void *)uint64_t v12 = *((void *)v2 + 6);
  *(void *)&v12[7] = *(void *)((char *)v2 + 55);
  char v8 = *((unsigned char *)v2 + 63);
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 6) = 0;
  *((void *)v2 + 7) = 0;
  uint64_t v9 = *((void *)v2 + 8);
  long long *v2 = *(_OWORD *)v3;
  long long v10 = *(_OWORD *)(v3 + 16);
  *((void *)v2 + 4) = *(void *)(v3 + 32);
  v2[1] = v10;
  *(unsigned char *)(v3 + 39) = 0;
  *(unsigned char *)(v3 + 16) = 0;
  if (*((char *)v2 + 63) < 0) {
    operator delete(*v7);
  }
  long long v11 = *(_OWORD *)(v3 + 40);
  *((void *)v2 + 7) = *(void *)(v3 + 56);
  *(_OWORD *)unint64_t v7 = v11;
  *(unsigned char *)(v3 + 63) = 0;
  *(unsigned char *)(v3 + 40) = 0;
  *((void *)v2 + 8) = *(void *)(v3 + 64);
  *(_OWORD *)uint64_t v3 = v14;
  if (*(char *)(v3 + 39) < 0) {
    operator delete(*(void **)(v3 + 16));
  }
  *(void *)(v3 + 16) = v4;
  *(void *)(v3 + 24) = *(void *)v13;
  *(void *)(v3 + 31) = *(void *)&v13[7];
  *(unsigned char *)(v3 + 39) = v5;
  if (*(char *)(v3 + 63) < 0) {
    operator delete(*(void **)(v3 + 40));
  }
  *(void *)(v3 + 40) = v6;
  *(void *)(v3 + 48) = *(void *)v12;
  *(void *)(v3 + 55) = *(void *)&v12[7];
  *(unsigned char *)(v3 + 63) = v8;
  *(void *)(v3 + 64) = v9;
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[ULBluetoothIdentityStore fetchBtIdentityEntriesBetweenTimes:toTime:]::$_0 &,CLMicroLocationBluetoothIdentityTable::Entry *>(double *a1, double *a2, uint64_t a3)
{
  uint64_t v9 = a1;
  uint64_t v7 = a3;
  char v8 = a2;
  double v3 = a2[8];
  double v4 = *(double *)(a3 + 64);
  if (v3 < a1[8])
  {
    char v5 = &v9;
    if (v4 >= v3)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CLMicroLocationBluetoothIdentityTable::Entry *&,CLMicroLocationBluetoothIdentityTable::Entry *&>((long long **)&v9, (uint64_t *)&v8);
      if (*(double *)(v7 + 64) >= v8[8]) {
        return;
      }
      char v5 = &v8;
    }
    uint64_t v6 = &v7;
    goto LABEL_9;
  }
  if (v4 < v3)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CLMicroLocationBluetoothIdentityTable::Entry *&,CLMicroLocationBluetoothIdentityTable::Entry *&>((long long **)&v8, &v7);
    if (v8[8] < v9[8])
    {
      char v5 = &v9;
      uint64_t v6 = (uint64_t *)&v8;
LABEL_9:
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CLMicroLocationBluetoothIdentityTable::Entry *&,CLMicroLocationBluetoothIdentityTable::Entry *&>((long long **)v5, v6);
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,-[ULBluetoothIdentityStore fetchBtIdentityEntriesBetweenTimes:toTime:]::$_0 &,CLMicroLocationBluetoothIdentityTable::Entry *>(uint64_t a1, uint64_t a2)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v28 = a1;
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0x8E38E38E38E38E39 * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v27 = a2 - 72;
      if (*(double *)(a2 - 8) < *(double *)(a1 + 64))
      {
        uint64_t v6 = (long long **)&v28;
        uint64_t v7 = &v27;
        goto LABEL_4;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[ULBluetoothIdentityStore fetchBtIdentityEntriesBetweenTimes:toTime:]::$_0 &,CLMicroLocationBluetoothIdentityTable::Entry *>((double *)a1, (double *)(a1 + 72), a2 - 72);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,[(ULBluetoothIdentityStore *)a1 fetchBtIdentityEntriesBetweenTimes:a1 + 144 toTime:a2 - 72];
      return 1;
    case 5uLL:
      *(void *)&long long v33 = a1 + 72;
      *(void *)__int16 v32 = a1 + 144;
      __int16 v30 = (double *)(a1 + 216);
      *(void *)&v31[0] = a1;
      uint64_t v29 = a2 - 72;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,[(ULBluetoothIdentityStore *)a1 fetchBtIdentityEntriesBetweenTimes:a1 + 144 toTime:a1 + 216];
      if (*(double *)(a2 - 8) < *(double *)(a1 + 280))
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CLMicroLocationBluetoothIdentityTable::Entry *&,CLMicroLocationBluetoothIdentityTable::Entry *&>((long long **)&v30, &v29);
        if (v30[8] < *(double *)(a1 + 208))
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CLMicroLocationBluetoothIdentityTable::Entry *&,CLMicroLocationBluetoothIdentityTable::Entry *&>((long long **)v32, (uint64_t *)&v30);
          if (*(double *)(*(void *)v32 + 64) < *(double *)(a1 + 136))
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CLMicroLocationBluetoothIdentityTable::Entry *&,CLMicroLocationBluetoothIdentityTable::Entry *&>((long long **)&v33, (uint64_t *)v32);
            if (*(double *)(v33 + 64) < *(double *)(a1 + 64))
            {
              uint64_t v6 = (long long **)v31;
              uint64_t v7 = (uint64_t *)&v33;
LABEL_4:
              std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CLMicroLocationBluetoothIdentityTable::Entry *&,CLMicroLocationBluetoothIdentityTable::Entry *&>(v6, v7);
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v8 = a1 + 144;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[ULBluetoothIdentityStore fetchBtIdentityEntriesBetweenTimes:toTime:]::$_0 &,CLMicroLocationBluetoothIdentityTable::Entry *>((double *)a1, (double *)(a1 + 72), a1 + 144);
      uint64_t v9 = a1 + 216;
      if (a1 + 216 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    double v12 = *(double *)(v9 + 64);
    if (v12 < *(double *)(v8 + 64))
    {
      long long v33 = *(_OWORD *)v9;
      uint64_t v13 = *(void *)(v9 + 16);
      *(void *)__int16 v32 = *(void *)(v9 + 24);
      *(void *)&v32[7] = *(void *)(v9 + 31);
      char v14 = *(unsigned char *)(v9 + 39);
      *(void *)(v9 + 16) = 0;
      *(void *)(v9 + 24) = 0;
      char v15 = *(unsigned char *)(v9 + 40);
      v31[0] = *(_OWORD *)(v9 + 41);
      *(void *)((char *)v31 + 14) = *(void *)(v9 + 55);
      char v25 = *(unsigned char *)(v9 + 63);
      char v26 = v15;
      *(void *)(v9 + 32) = 0;
      *(void *)(v9 + 40) = 0;
      uint64_t v16 = v10;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      while (1)
      {
        uint64_t v17 = v16;
        uint64_t v18 = a1 + v16;
        *(_OWORD *)(a1 + v16 + 216) = *(_OWORD *)(a1 + v16 + 144);
        uint64_t v19 = a1 + v16 + 232;
        if (*(char *)(a1 + v16 + 255) < 0) {
          operator delete(*(void **)v19);
        }
        *(_OWORD *)uint64_t v19 = *(_OWORD *)(v18 + 160);
        *(void *)(v19 + 16) = *(void *)(v18 + 176);
        *(unsigned char *)(v18 + 183) = 0;
        *(unsigned char *)(v18 + 160) = 0;
        uint64_t v20 = v18 + 256;
        if (*(char *)(v18 + 279) < 0) {
          operator delete(*(void **)v20);
        }
        uint64_t v21 = a1 + v17;
        *(_OWORD *)uint64_t v20 = *(_OWORD *)(a1 + v17 + 184);
        uint64_t v22 = *(void *)(a1 + v17 + 208);
        *(void *)(v20 + 16) = *(void *)(a1 + v17 + 200);
        *(unsigned char *)(v21 + 207) = 0;
        *(unsigned char *)(v21 + 184) = 0;
        *(void *)(v21 + 280) = v22;
        if (v17 == -144) {
          break;
        }
        uint64_t v16 = v17 - 72;
        if (v12 >= *(double *)(v21 + 136))
        {
          uint64_t v23 = a1 + v16 + 216;
          goto LABEL_17;
        }
      }
      uint64_t v23 = a1;
LABEL_17:
      *(_OWORD *)uint64_t v23 = v33;
      if (*(char *)(v23 + 39) < 0) {
        operator delete(*(void **)(v21 + 160));
      }
      *(void *)(v21 + 160) = v13;
      uint64_t v24 = a1 + v17;
      *(void *)(v24 + 168) = *(void *)v32;
      *(void *)(v24 + 175) = *(void *)&v32[7];
      *(unsigned char *)(v21 + 183) = v14;
      if (*(char *)(v23 + 63) < 0) {
        operator delete(*(void **)(v21 + 184));
      }
      *(unsigned char *)(v21 + 184) = v26;
      *(_OWORD *)(v24 + 185) = v31[0];
      *(void *)(v24 + 199) = *(void *)((char *)v31 + 14);
      *(unsigned char *)(v21 + 207) = v25;
      *(double *)(v23 + 64) = v12;
      if (++v11 == 8) {
        return v9 + 72 == a2;
      }
    }
    uint64_t v8 = v9;
    v10 += 72;
    v9 += 72;
    if (v9 == a2) {
      return 1;
    }
  }
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[ULBluetoothIdentityStore fetchBtIdentityEntriesBetweenTimes:toTime:]::$_0 &,CLMicroLocationBluetoothIdentityTable::Entry *>(uint64_t a1, double *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = a2;
  int v11 = (long long *)a1;
  uint64_t v8 = a4;
  uint64_t v9 = (double *)a3;
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[ULBluetoothIdentityStore fetchBtIdentityEntriesBetweenTimes:toTime:]::$_0 &,CLMicroLocationBluetoothIdentityTable::Entry *>((double *)a1, a2, a3);
  if (*(double *)(a4 + 64) < *(double *)(a3 + 64))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CLMicroLocationBluetoothIdentityTable::Entry *&,CLMicroLocationBluetoothIdentityTable::Entry *&>((long long **)&v9, &v8);
    if (v9[8] < a2[8])
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CLMicroLocationBluetoothIdentityTable::Entry *&,CLMicroLocationBluetoothIdentityTable::Entry *&>((long long **)&v10, (uint64_t *)&v9);
      if (v10[8] < *(double *)(a1 + 64)) {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CLMicroLocationBluetoothIdentityTable::Entry *&,CLMicroLocationBluetoothIdentityTable::Entry *&>(&v11, (uint64_t *)&v10);
      }
    }
  }
}

void ULDatabase::ULDatabase(ULDatabase *this)
{
  this->var0 = (void **)&unk_2704E0720;
  this->id var18 = 0;
  *(_OWORD *)&this->var1 = 0u;
  *(_OWORD *)&this->var3 = 0u;
  *(_OWORD *)&this->var5 = 0u;
  *(_OWORD *)&this->var7 = 0u;
  *(_OWORD *)&this->var9 = 0u;
  *(_OWORD *)&this->var11 = 0u;
  *(_OWORD *)&this->var13 = 0u;
  *(_OWORD *)&this->var15 = 0u;
  this->var17 = 1;
  uint64_t v2 = [MEMORY[0x263EFF980] array];
  id var18 = this->var18;
  this->id var18 = v2;
}

void sub_256465A30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ULDatabase::~ULDatabase(ULDatabase *this)
{
  this->var0 = (void **)&unk_2704E0720;
  id var1 = this->var1;
  if (var1)
  {
    [var1 disconnectFromStore];
    id v3 = this->var1;
    this->id var1 = 0;
  }
}

{
  uint64_t vars8;

  ULDatabase::~ULDatabase(this);
  JUMPOUT(0x25A2A6340);
}

void ULDatabase::initDataStores(ULDatabase *this)
{
  uint64_t v2 = [(ULStore *)[ULAssociatedStateStore alloc] initWithDb:this];
  id var2 = this->var2;
  this->id var2 = v2;

  uint64_t v4 = [(ULStore *)[ULBluetoothIdentityStore alloc] initWithDb:this];
  id var3 = this->var3;
  this->id var3 = v4;

  uint64_t v6 = [(ULStore *)[ULConfigurationStore alloc] initWithDb:this];
  id var4 = this->var4;
  this->id var4 = v6;

  uint64_t v8 = [(ULStore *)[ULLabelStore alloc] initWithDb:this];
  id var5 = this->var5;
  this->id var5 = v8;

  uint64_t v10 = [(ULStore *)[ULLoggedEventStore alloc] initWithDb:this];
  id var6 = this->var6;
  this->id var6 = v10;

  double v12 = [(ULStore *)[ULLoiStore alloc] initWithDb:this];
  id var7 = this->var7;
  this->id var7 = v12;

  char v14 = [(ULStore *)[ULMeasurementStore alloc] initWithDb:this];
  id var8 = this->var8;
  this->id var8 = v14;

  uint64_t v16 = [(ULStore *)[ULModelStore alloc] initWithDb:this];
  id var9 = this->var9;
  this->id var9 = v16;

  uint64_t v18 = [(ULStore *)[ULRapportStore alloc] initWithDb:this];
  id var10 = this->var10;
  this->id var10 = v18;

  uint64_t v20 = [(ULStore *)[ULRecordingEventStore alloc] initWithDb:this];
  id var11 = this->var11;
  this->id var11 = v20;

  uint64_t v22 = [(ULStore *)[ULServiceStore alloc] initWithDb:this];
  id var12 = this->var12;
  this->id var12 = v22;

  uint64_t v24 = [(ULStore *)[ULCustomLoiStore alloc] initWithDb:this];
  id var13 = this->var13;
  this->id var13 = v24;

  char v26 = [(ULStore *)[ULMigrationStore alloc] initWithDb:this];
  id var14 = this->var14;
  this->id var14 = v26;

  uint64_t v28 = [(ULStore *)[ULOdometryStore alloc] initWithDb:this];
  id var15 = this->var15;
  this->id var15 = v28;

  __int16 v30 = [(ULStore *)[ULHomeSlamAnalyticEventStore alloc] initWithDb:this];
  id var16 = this->var16;
  this->id var16 = v30;
}

uint64_t ULDatabase::dropTables(ULDatabase *this)
{
  *((void *)&v27 + 1) = *MEMORY[0x263EF8340];
  if ([this->var1 isStoreConnected])
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_83);
    }
    uint64_t v2 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_DEBUG, "dropping MiLo database tables", buf, 2u);
    }
    int v3 = [this->var8 deleteAllRecords];
    int v4 = [this->var11 deleteAllRecords];
    int v5 = [this->var9 deleteAllRecords];
    int v20 = [this->var4 deleteAllRecords];
    int v19 = [this->var10 deleteAllRecords];
    int v6 = [this->var5 deleteAllRecords];
    int v7 = [this->var6 deleteAllRecords];
    int v8 = [this->var15 deleteAllRecords];
    int v9 = [this->var16 deleteAllRecords];
    std::string::basic_string[abi:ne180100]<0>(buf, "milo-internal-legacy-client-name-unsupervised");
    std::string::basic_string[abi:ne180100]<0>(v26, "focus-mode");
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    v23[0] = 0;
    v23[1] = &v21;
    char v24 = 0;
    uint64_t v21 = (std::string *)operator new(0x30uLL);
    uint64_t v22 = v21;
    v23[0] = v21 + 2;
    uint64_t v10 = 0;
    int v11 = v3 & v4 & v5 & v20 & v19 & v6 & v7 & v8 & v9;
    uint64_t v22 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v23, (long long *)buf, &v27, v21);
    do
    {
      if (SHIBYTE(v26[v10 + 2]) < 0) {
        operator delete(*(void **)&buf[v10 * 8 + 24]);
      }
      v10 -= 3;
    }
    while (v10 != -6);
    int v12 = [this->var12 deleteAllServicesWithExceptions:&v21];
    int v13 = [this->var2 deleteAllRecords];
    int v14 = [this->var3 deleteAllRecords];
    int v15 = [this->var7 deleteAllRecords];
    uint64_t v16 = v11 & v12 & v13 & v14 & v15 & [this->var13 deleteAllRecords];
    *(void *)std::string buf = &v21;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_83);
    }
    uint64_t v17 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_25631F000, v17, OS_LOG_TYPE_DEBUG, "#Warning Attempt to drop tables without a backing database", buf, 2u);
    }
    return 0;
  }
  return v16;
}

void sub_2564660C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a13);
  uint64_t v27 = 0;
  while (1)
  {
    if (*(&a26 + v27) < 0) {
      operator delete(*(void **)((char *)&a21 + v27));
    }
    v27 -= 24;
    if (v27 == -48) {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t ULDatabase::isDatabaseConnected(ULDatabase *this)
{
  return [this->var1 isStoreConnected];
}

uint64_t ULDatabase::deleteDataOlderThan(id *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  if ([a1[1] isStoreConnected])
  {
    double v8 = cl::chrono::CFAbsoluteTimeClock::now();
    double v9 = (double)a2;
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_83);
    }
    double v10 = v8 + (double)a2 * -60.0;
    double v11 = v8 + 30.0;
    int v12 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      int v31 = 134217984;
      double v32 = v9 / 1440.0;
      _os_log_impl(&dword_25631F000, v12, OS_LOG_TYPE_DEFAULT, "Deleting microlocation data older than %.3Lf days", (uint8_t *)&v31, 0xCu);
    }
    int v13 = [a1[8] deleteRecordsOlderThan:v10 orNewerThan:v11];
    int v14 = [a1[11] deleteRecordsOlderThan:v10 orNewerThan:v11];
    int v15 = [a1[9] deleteRecordsOlderThan:v10 orNewerThan:v11];
    int v16 = [a1[4] deleteRecordsOlderThan:v10 orNewerThan:v11];
    int v17 = [a1[10] deleteRecordsOlderThan:v10 orNewerThan:v11];
    int v18 = v13 & v14 & v15 & v16 & v17 & [a1[5] deleteRecordsOlderThan:v10 orNewerThan:v11];
    if (a4)
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_83);
      }
      int v19 = logObject_MicroLocation_Default;
      double v20 = (double)a3;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
        int v31 = 134217984;
        double v32 = v20 / 1440.0;
        _os_log_impl(&dword_25631F000, v19, OS_LOG_TYPE_DEFAULT, "Deleting similarity list labels older than %.3Lf days", (uint8_t *)&v31, 0xCu);
      }
      v18 &= [a1[5] deleteSimilarityListLabelsOlderThan:v8 + v20 * -60.0 orNewerThan:v11];
    }
    int v21 = [a1[6] deleteRecordsOlderThan:v10 orNewerThan:v11];
    int v22 = [a1[12] deleteRecordsOlderThan:v10 orNewerThan:v11];
    int v23 = [a1[2] deleteRecordsOlderThan:v10 orNewerThan:v11];
    int v24 = [a1[7] deleteRecordsOlderThan:v10 orNewerThan:v11];
    int v25 = [a1[3] deleteRecordsOlderThan:v10 orNewerThan:v11];
    int v26 = [a1[13] deleteRecordsOlderThan:v10 orNewerThan:v11];
    int v27 = [a1[15] deleteRecordsOlderThan:v10 orNewerThan:v11];
    return v18 & v21 & v22 & v23 & v24 & v25 & v26 & v27 & [a1[16] deleteRecordsOlderThan:v10 orNewerThan:v11];
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_83);
    }
    uint64_t v29 = logObject_MicroLocation_Default;
    BOOL v30 = os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (v30)
    {
      LOWORD(v31) = 0;
      _os_log_impl(&dword_25631F000, v29, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to deleteDataOlderThan without a backing database", (uint8_t *)&v31, 2u);
      return 0;
    }
  }
  return result;
}

uint64_t ULDatabase::initDb(ULDatabase *this)
{
  if (!this->var1)
  {
    uint64_t v2 = objc_alloc_init(ULPersistenceManager);
    id var1 = this->var1;
    this->id var1 = v2;
  }
  return ULDatabase::connectToStore(this);
}

uint64_t ULDatabase::connectToStore(ULDatabase *this)
{
  uint64_t v2 = [this->var1 connectToStore];
  if (v2)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_83);
    }
    int v3 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_25631F000, v3, OS_LOG_TYPE_DEFAULT, "Successfully connected to store", buf, 2u);
    }
    ULDatabase::initDataStores(this);
    ULDatabase::notifyClientsOnDatabaseValid(this);
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_83);
    }
    int v4 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int v6 = 0;
      _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_ERROR, "Failed to connect to store", v6, 2u);
    }
  }
  return v2;
}

uint64_t ULDatabase::notifyClientsOnDatabaseValid(ULDatabase *this)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t result = (*((uint64_t (**)(ULDatabase *))this->var0 + 2))(this);
  if (result)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_83);
    }
    int v3 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_25631F000, v3, OS_LOG_TYPE_DEFAULT, "Sending database valid notification to registered modules", buf, 2u);
    }
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    id v4 = this->var18;
    uint64_t v5 = [v4 countByEnumeratingWithState:&v8 objects:v13 count:16];
    if (v5)
    {
      uint64_t v6 = *(void *)v9;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v9 != v6) {
            objc_enumerationMutation(v4);
          }
          (*(void (**)(void))(*(void *)(*((void *)&v8 + 1) + 8 * i) + 16))(*(void *)(*((void *)&v8 + 1) + 8 * i));
        }
        uint64_t v5 = [v4 countByEnumeratingWithState:&v8 objects:v13 count:16];
      }
      while (v5);
    }

    return objc_msgSend(this->var18, "removeAllObjects", (void)v8);
  }
  return result;
}

void sub_2564667F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ULDatabase::initWithModelsDirectoryAndStoresDirectory(ULDatabase *this, NSURL *a2, NSURL *a3, uint64_t a4)
{
  int v7 = a2;
  long long v8 = a3;
  long long v9 = [[ULPersistenceManager alloc] initWithModelsDirectory:v7 storesDirectory:v8 useWal:a4];
  id var1 = this->var1;
  this->id var1 = v9;

  uint64_t v11 = ULDatabase::connectToStore(this);
  return v11;
}

void sub_256466898(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ULDatabase::destroyStore(ULDatabase *this)
{
  return [this->var1 destroyStore];
}

uint64_t ULDatabase::freeDatabaseSpace(ULDatabase *this)
{
  if ([this->var1 isStoreConnected])
  {
    int v2 = [this->var8 deleteOldestRecordsIfFull];
    int v3 = [this->var11 deleteOldestRecordsIfFull];
    id var9 = this->var9;
    uint64_t v5 = +[ULDefaultsSingleton shared];
    uint64_t v6 = [v5 defaultsDictionary];

    int v7 = [NSString stringWithUTF8String:"ULNumModelsToKeepForNonLSL"];
    int v33 = v2;
    long long v8 = [v6 objectForKey:v7];
    if (v8 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
      uint64_t v9 = [v8 unsignedIntValue];
    }
    else {
      uint64_t v9 = [&unk_2704F1E00 unsignedIntValue];
    }
    uint64_t v13 = v9;

    uint64_t v14 = +[ULDefaultsSingleton shared];
    int v15 = [v14 defaultsDictionary];

    int v16 = [NSString stringWithUTF8String:"ULNumLSLModelsToKeep"];
    int v17 = [v15 objectForKey:v16];
    if (v17 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
      uint64_t v18 = [v17 unsignedIntValue];
    }
    else {
      uint64_t v18 = [&unk_2704F1DE8 unsignedIntValue];
    }
    uint64_t v19 = v18;

    int v20 = [var9 deleteUnneededModelsWithNumNonLslsModeltoKeep:v13 numLSLModelsToKeep:v19];
    int v21 = v33 & v3 & v20 & [this->var9 deleteOldestRecordsIfFull];
    int v22 = [this->var4 deleteOldestRecordsIfFull];
    int v23 = v22 & [this->var10 deleteOldestRecordsIfFull];
    int v24 = v21 & v23 & [this->var5 deleteOldestRecordsIfFull];
    int v25 = [this->var6 deleteOldestRecordsIfFull];
    int v26 = v25 & [this->var2 deleteOldestRecordsIfFull];
    int v27 = v26 & [this->var12 deleteOldestsServicesPerClientAboveMaxCount];
    int v28 = v24 & v27 & [this->var3 deleteOldestRecordsIfFull];
    int v29 = [this->var15 deleteOldestRecordsIfFull];
    int v30 = v29 & [this->var16 deleteOldestRecordsIfFull];
    int v31 = v30 & [this->var9 deleteAllModelsOfDeletedServices];
    int v32 = v31 & [this->var5 deleteAllLabelsOfDeletedServices];
    return v28 & v32 & [this->var13 deleteAllCustomLoiOfDeletedServices];
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_83);
    }
    long long v10 = logObject_MicroLocation_Default;
    BOOL v11 = os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (v11)
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_25631F000, v10, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to freeDatabaseSpace() without a backing database", buf, 2u);
      return 0;
    }
  }
  return result;
}

void sub_256466B98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ULDatabase::isMainDatabase(ULDatabase *this)
{
  return [this->var1 isMainDatabase];
}

id ULDatabase::exportDatabase(ULDatabase *this)
{
  v83[1] = *MEMORY[0x263EF8340];
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_83);
  }
  int v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_DEFAULT, "Exporting milo database", buf, 2u);
  }
  if ([this->var1 isStoreConnected])
  {
    unint64_t v59 = [MEMORY[0x263F08850] userLibraryDirectoryPath];
    long long v63 = [MEMORY[0x263F08850] defaultManager];
    uint64_t v3 = [v59 stringByAppendingPathComponent:@"/Logs/milod/miloexport"];
    uint64_t v82 = *MEMORY[0x263F08078];
    v83[0] = &unk_2704F1DA0;
    __int16 v57 = (void *)v3;
    long long v62 = [NSDictionary dictionaryWithObjects:v83 forKeys:&v82 count:1];
    if ([v63 fileExistsAtPath:v3 isDirectory:0])
    {
      id v4 = 0;
    }
    else
    {
      id v75 = 0;
      char v7 = [v63 createDirectoryAtPath:v3 withIntermediateDirectories:1 attributes:v62 error:&v75];
      id v8 = v75;
      id v9 = v8;
      if ((v7 & 1) == 0)
      {
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_83);
        }
        unint64_t v51 = logObject_MicroLocation_Default;
        if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 138412290;
          id v78 = v9;
          _os_log_impl(&dword_25631F000, v51, OS_LOG_TYPE_ERROR, "failed to create directory for export with error: %@", buf, 0xCu);
        }
        id v6 = 0;
LABEL_62:

        goto LABEL_63;
      }
      id v4 = v8;
      uint64_t v3 = (uint64_t)v57;
    }
    long long v10 = NSURL;
    BOOL v11 = NSString;
    int v12 = +[ULPersistenceManager defaultLocalStoreFilename];
    uint64_t v13 = [v11 stringWithFormat:@"%@/%@", v3, v12];
    uint64_t v60 = [v10 fileURLWithPath:v13 isDirectory:0];

    uint64_t v14 = NSURL;
    int v15 = [v60 path];
    int v16 = [v15 stringByAppendingString:@"-wal"];
    uint64_t v56 = [v14 fileURLWithPath:v16 isDirectory:0];

    int v17 = NSURL;
    uint64_t v18 = [v60 path];
    uint64_t v19 = [v18 stringByAppendingString:@"-shm"];
    uint64_t v58 = [v17 fileURLWithPath:v19 isDirectory:0];

    objc_msgSend(MEMORY[0x263EFF8C0], "arrayWithObjects:", v60, v56, v58, 0);
    long long v74 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v71 = 0u;
    id obj = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v20 = [obj countByEnumeratingWithState:&v71 objects:v81 count:16];
    if (v20)
    {
      uint64_t v21 = *(void *)v72;
      while (2)
      {
        for (uint64_t i = 0; i != v20; ++i)
        {
          if (*(void *)v72 != v21) {
            objc_enumerationMutation(obj);
          }
          int v23 = *(void **)(*((void *)&v71 + 1) + 8 * i);
          int v24 = [v23 path];
          int v25 = [v63 fileExistsAtPath:v24];

          if (v25)
          {
            int v26 = [v23 path];
            id v70 = v4;
            char v27 = [v63 removeItemAtPath:v26 error:&v70];
            id v9 = v70;

            if ((v27 & 1) == 0)
            {
              if (onceToken_MicroLocation_Default != -1) {
                dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_83);
              }
              uint64_t v49 = logObject_MicroLocation_Default;
              if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)std::string buf = 138412546;
                id v78 = v23;
                __int16 v79 = 2112;
                id v80 = v9;
                _os_log_impl(&dword_25631F000, v49, OS_LOG_TYPE_ERROR, "failed to remove existing exported file: %@ with error: %@", buf, 0x16u);
              }
              id v6 = 0;
              uint64_t v50 = obj;
              goto LABEL_61;
            }
            id v4 = v9;
          }
        }
        uint64_t v20 = [obj countByEnumeratingWithState:&v71 objects:v81 count:16];
        if (v20) {
          continue;
        }
        break;
      }
    }

    int v28 = [this->var1 persistenceStore];
    long long v54 = [v28 storeDescription];

    id v29 = objc_alloc(MEMORY[0x263EFF320]);
    int v30 = [this->var1 managedObjectModel];
    long long v55 = (void *)[v29 initWithManagedObjectModel:v30];

    int v31 = [v54 options];
    int v32 = [v54 URL];
    int v33 = [v54 options];
    uint64_t v34 = [v54 type];
    id v69 = v4;
    char v35 = [v55 replacePersistentStoreAtURL:v60 destinationOptions:v31 withPersistentStoreFromURL:v32 sourceOptions:v33 storeType:v34 error:&v69];
    id v9 = v69;

    if (v35)
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_83);
      }
      uint64_t v36 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v37 = [v60 path];
        *(_DWORD *)std::string buf = 138412290;
        id v78 = v37;
        _os_log_impl(&dword_25631F000, v36, OS_LOG_TYPE_DEFAULT, "Successfully exported milo database to: %@", buf, 0xCu);
      }
      id v6 = objc_alloc_init(MEMORY[0x263EFF980]);
      long long v67 = 0u;
      long long v68 = 0u;
      long long v65 = 0u;
      long long v66 = 0u;
      id v38 = obj;
      uint64_t v39 = [v38 countByEnumeratingWithState:&v65 objects:v76 count:16];
      if (v39)
      {
        uint64_t v40 = *(void *)v66;
        do
        {
          uint64_t v41 = 0;
          do
          {
            if (*(void *)v66 != v40) {
              objc_enumerationMutation(v38);
            }
            uint64_t v42 = *(void **)(*((void *)&v65 + 1) + 8 * v41);
            long long v43 = [v42 path];
            int v44 = [v63 fileExistsAtPath:v43];

            if (v44)
            {
              uint64_t v45 = [v42 path];
              id v64 = v9;
              char v46 = [v63 setAttributes:v62 ofItemAtPath:v45 error:&v64];
              id v47 = v64;

              id v9 = v47;
              if ((v46 & 1) == 0)
              {
                if (onceToken_MicroLocation_Default != -1) {
                  dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_83);
                }
                __int16 v48 = logObject_MicroLocation_Default;
                if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)std::string buf = 138412546;
                  id v78 = v42;
                  __int16 v79 = 2112;
                  id v80 = v47;
                  _os_log_impl(&dword_25631F000, v48, OS_LOG_TYPE_ERROR, "failed to change access attributes for URL: %@ with error: %@", buf, 0x16u);
                }
              }
              [v6 addObject:v42];
            }
            ++v41;
          }
          while (v39 != v41);
          uint64_t v39 = [v38 countByEnumeratingWithState:&v65 objects:v76 count:16];
        }
        while (v39);
      }
    }
    else
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_83);
      }
      uint64_t v52 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 138412290;
        id v78 = v9;
        _os_log_impl(&dword_25631F000, v52, OS_LOG_TYPE_ERROR, "failed to export database with error: %@", buf, 0xCu);
      }
      id v6 = 0;
    }

    uint64_t v50 = v54;
LABEL_61:

    goto LABEL_62;
  }
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_83);
  }
  uint64_t v5 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_25631F000, v5, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to exportDatabase() while not connected to database", buf, 2u);
  }
  id v6 = 0;
LABEL_63:
  return v6;
}

void sub_256467524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,void *a21,void *a22,void *a23)
{
  _Unwind_Resume(a1);
}

void ULDatabase::migrationStatusAsString(unsigned int a1@<W0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (a1 >= 5)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_83);
    }
    int v2 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_ERROR, "migrationStatus value not handled in conversion to string", v3, 2u);
    }
  }
  else
  {
    MEMORY[0x25A2A6080](a2, off_2653F9F40[a1]);
  }
}

void sub_2564677A4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ULDatabase::checkMigrationStatus(ULDatabase *this)
{
  int v2 = +[ULDefaultsSingleton shared];
  uint64_t v3 = [v2 defaultsDictionary];

  id v4 = [NSString stringWithUTF8String:"ULEnableLocationdDataMigration"];
  uint64_t v5 = [v3 objectForKey:v4];
  if (v5 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    char v6 = [v5 BOOLValue];
  }
  else {
    char v6 = [MEMORY[0x263EFFA88] BOOLValue];
  }
  char v7 = v6;

  if ((v7 & 1) == 0)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_83);
    }
    BOOL v11 = logObject_MicroLocation_Default;
    uint64_t v12 = 0;
    if (!os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT)) {
      return v12;
    }
    LOWORD(__p) = 0;
    uint64_t v13 = "Migration from locationd disabled in settings";
LABEL_28:
    _os_log_impl(&dword_25631F000, v11, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&__p, 2u);
    return 0;
  }
  if ([MEMORY[0x263F55810] isMac]
    && ([MEMORY[0x263F55810] isMacBook] & 1) == 0)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_83);
    }
    BOOL v11 = logObject_MicroLocation_Default;
    uint64_t v12 = 0;
    if (!os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT)) {
      return v12;
    }
    LOWORD(__p) = 0;
    uint64_t v13 = "Migration is disabled on stationary Macs";
    goto LABEL_28;
  }
  if ([this->var1 isStoreConnected])
  {
    id var14 = this->var14;
    if (var14)
    {
      [var14 fetchAllRecordsWithLimit:0];
      id v9 = __p;
      if (__p == v25)
      {
        uint64_t v12 = 2;
        id v9 = v25;
      }
      else
      {
        long long v10 = __p;
        while (v10[2] != 2)
        {
          v10 += 4;
          if (v10 == v25) {
            goto LABEL_34;
          }
        }
        if (v10 != v25)
        {
          uint64_t v12 = 4;
          goto LABEL_52;
        }
LABEL_34:
        int v16 = __p;
        while (v16[2] != 1)
        {
          v16 += 4;
          if (v16 == v25) {
            goto LABEL_40;
          }
        }
        if (v16 != v25)
        {
          uint64_t v12 = 3;
          goto LABEL_52;
        }
LABEL_40:
        unint64_t v17 = 0;
        do
        {
          if (v9[2] == 3) {
            ++v17;
          }
          v9 += 4;
        }
        while (v9 != v25);
        uint64_t v18 = +[ULDefaultsSingleton shared];
        uint64_t v19 = [v18 defaultsDictionary];

        uint64_t v20 = [NSString stringWithUTF8String:"ULDataMigrationMaxAttempts"];
        uint64_t v21 = [v19 objectForKey:v20];
        if (v21 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
          unsigned int v22 = [v21 unsignedIntValue];
        }
        else {
          unsigned int v22 = [&unk_2704F1DB8 unsignedIntValue];
        }
        unsigned int v23 = v22;

        if (v17 < v23) {
          uint64_t v12 = 2;
        }
        else {
          uint64_t v12 = 3;
        }
        id v9 = __p;
      }
LABEL_52:
      if (v9)
      {
        int v25 = v9;
        operator delete(v9);
      }
    }
    else
    {
      return 2;
    }
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_83);
    }
    uint64_t v14 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p) = 0;
      _os_log_impl(&dword_25631F000, v14, OS_LOG_TYPE_DEFAULT, "failed to check migration status: local milo database is not connected", (uint8_t *)&__p, 2u);
    }
    return 1;
  }
  return v12;
}

void sub_256467B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ULDatabase::registerDatabaseValidCallback(void *a1, void *a2)
{
  uint64_t v5 = a2;
  if ((*(unsigned int (**)(void *))(*a1 + 16))(a1))
  {
    v5[2]();
  }
  else
  {
    uint64_t v3 = (void *)a1[18];
    id v4 = (void *)MEMORY[0x25A2A6A70](v5);
    [v3 addObject:v4];
  }
}

void sub_256467CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_66()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  id v4 = this;
  BOOL v11 = this;
  uint64_t v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  _DWORD v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    char v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        id v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      char v6 = (long long *)((char *)v6 + 24);
      uint64_t v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_256467DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_256467E08()
{
  return 0;
}

void sub_256468080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void CLSqliteStatement::~CLSqliteStatement(CLSqliteDatabase **this)
{
  *this = (CLSqliteDatabase *)&unk_2704E0798;
  CLSqliteDatabase::unlock(this[1]);
}

{
  uint64_t vars8;

  CLSqliteStatement::~CLSqliteStatement(this);
  JUMPOUT(0x25A2A6340);
}

uint64_t CLSqliteStatement::getStatement(CLSqliteStatement *this)
{
  return *((void *)this + 2);
}

void CLSqliteFinalizingStatement::CLSqliteFinalizingStatement(CLSqliteFinalizingStatement *this, CLSqliteDatabase *a2, sqlite3_stmt *a3)
{
  *(void *)this = &unk_2704E0798;
  *((void *)this + 1) = a2;
  *((void *)this + 2) = a3;
  CLSqliteDatabase::lock(a2);
  *(void *)this = &unk_2704E07B8;
}

void CLSqliteFinalizingStatement::~CLSqliteFinalizingStatement(CLSqliteFinalizingStatement *this)
{
  *(void *)this = &unk_2704E07B8;
  int v2 = sqlite3_finalize(*((sqlite3_stmt **)this + 2));
  *((void *)this + 2) = 0;
  if (v2)
  {
    CLSqliteDatabase::displaySqlResult(*((CLSqliteDatabase **)this + 1), "sqlite3_finalize()", v2, 0);
    CLSqliteDatabase::handleSqlError(*((CLSqliteDatabase **)this + 1), v2);
  }
  CLSqliteStatement::~CLSqliteStatement((CLSqliteDatabase **)this);
}

{
  uint64_t vars8;

  CLSqliteFinalizingStatement::~CLSqliteFinalizingStatement(this);
  JUMPOUT(0x25A2A6340);
}

void sub_256468A1C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v5);
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v6 - 88));
  _Unwind_Resume(a1);
}

std::string *CLMicroLocationAssociatedStateTable::Entry::Entry(std::string *this, long long *a2, _OWORD *a3, std::string::size_type *a4, std::string::value_type a5, std::string::size_type *a6, int a7, int a8)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v15 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v15;
  }
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = *a3;
  this[1].__r_.__value_.__r.__words[2] = *a4;
  this[2].__r_.__value_.__s.__data_[0] = a5;
  this[2].__r_.__value_.__l.__size_ = *a6;
  LODWORD(this[2].__r_.__value_.__r.__words[2]) = a7;
  HIDWORD(this[2].__r_.__value_.__r.__words[2]) = a8;
  return this;
}

uint64_t CLMiLoServiceTable::Entry::Entry(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, long long *a5, uint64_t a6, long long *a7, double a8)
{
  *(void *)a1 = a4;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(double *)(a1 + 24) = a8;
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v11 = *a5;
    *(void *)(a1 + 48) = *((void *)a5 + 2);
    *(_OWORD *)(a1 + 32) = v11;
  }
  *(void *)(a1 + 56) = a6;
  uint64_t v12 = (std::string *)(a1 + 64);
  if (*((char *)a7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a7, *((void *)a7 + 1));
  }
  else
  {
    long long v13 = *a7;
    *(void *)(a1 + 80) = *((void *)a7 + 2);
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
  }
  return a1;
}

void sub_256469644(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void *CLMicroLocationMotionBridge::CLMicroLocationMotionBridge(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  *a1 = &unk_2704E0820;
  a1[1] = a2;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  uint64_t v6 = (CLMicroLocationMotionBridge *)v5;
  a1[6] = v6;
  float FenceRadius = CLMicroLocationMotionBridge::getFenceRadius(v6);
  v27[0] = MEMORY[0x263EF8330];
  v27[1] = 3221225472;
  v27[2] = ___ZN27CLMicroLocationMotionBridgeC2ERN27CLMicroLocationMotionClient21IMotionClientDelegateEPU28objcproto17OS_dispatch_queue8NSObject_block_invoke;
  v27[3] = &unk_2653F9F70;
  id v29 = a1;
  id v8 = v6;
  int v28 = v8;
  id v9 = (void *)MEMORY[0x25A2A6A70](v27);
  v24[0] = MEMORY[0x263EF8330];
  v24[1] = 3221225472;
  v24[2] = ___ZN27CLMicroLocationMotionBridgeC2ERN27CLMicroLocationMotionClient21IMotionClientDelegateEPU28objcproto17OS_dispatch_queue8NSObject_block_invoke_2;
  v24[3] = &unk_2653F9F98;
  int v26 = a1;
  char v10 = v8;
  int v25 = v10;
  long long v11 = (void *)MEMORY[0x25A2A6A70](v24);
  v20[0] = MEMORY[0x263EF8330];
  v20[1] = 3221225472;
  v20[2] = ___ZN27CLMicroLocationMotionBridgeC2ERN27CLMicroLocationMotionClient21IMotionClientDelegateEPU28objcproto17OS_dispatch_queue8NSObject_block_invoke_3;
  v20[3] = &unk_2653F9FC0;
  unsigned int v23 = a1;
  uint64_t v12 = v10;
  uint64_t v21 = v12;
  unsigned int v22 = @"ULMiLoPDRFence";
  long long v13 = (void *)MEMORY[0x25A2A6A70](v20);
  uint64_t v14 = [ULCMPDRFenceProvider alloc];
  *(float *)&double v15 = FenceRadius;
  int v16 = [NSNumber numberWithFloat:v15];
  uint64_t v17 = [(ULCMPDRFenceProvider *)v14 initWithFenceIdentifier:@"ULMiLoPDRFence" queue:v12 radiusInMeters:v16 callback:v9 statusCallback:v13 errorCallback:v11];
  uint64_t v18 = (void *)a1[2];
  a1[2] = v17;

  return a1;
}

void sub_25646989C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  _Unwind_Resume(a1);
}

float CLMicroLocationMotionBridge::getFenceRadius(CLMicroLocationMotionBridge *this)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v1 = +[ULDefaultsSingleton shared];
  int v2 = [v1 defaultsDictionary];

  uint64_t v3 = [NSString stringWithUTF8String:"ULPedestrianFenceRadiusInMeters"];
  id v4 = [v2 objectForKey:v3];
  if (v4 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    [v4 floatValue];
  }
  else {
    [&unk_2704F0FA0 floatValue];
  }
  float v6 = v5;

  if ([MEMORY[0x263F55810] isIpad])
  {
    long long v7 = +[ULDefaultsSingleton shared];
    id v8 = [v7 defaultsDictionary];

    id v9 = [NSString stringWithUTF8String:"ULPedestrianFenceRadiusForIpadInMeters"];
    char v10 = [v8 objectForKey:v9];
    if (v10 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
      [v10 floatValue];
    }
    else {
      [&unk_2704F0FA0 floatValue];
    }
    float v6 = v11;
  }
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_410);
  }
  uint64_t v12 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    v14[0] = 68289282;
    v14[1] = 0;
    __int16 v15 = 2082;
    int v16 = "";
    __int16 v17 = 2050;
    double v18 = v6;
    _os_log_impl(&dword_25631F000, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Motion Bridge, getFenceRadius\", \"fence size in m\":\"%{public}.2f\"}", (uint8_t *)v14, 0x1Cu);
  }
  return v6;
}

void sub_256469B50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256469BA4()
{
}

void ___ZN27CLMicroLocationMotionBridgeC2ERN27CLMicroLocationMotionClient21IMotionClientDelegateEPU28objcproto17OS_dispatch_queue8NSObject_block_invoke(uint64_t a1, void *a2, void *a3)
{
  v20[38] = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 40);
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
  [v5 timeIntervalSinceReferenceDate];
  double v9 = v8;
  CLMicroLocationMotionBridge::stopAllStatusTimers((id *)v7);
  uint64_t v10 = *(void *)(v7 + 8);
  id v11 = v6;
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v11 UTF8String]);
  (*(void (**)(uint64_t, void **, double))(*(void *)v10 + 16))(v10, __p, v9);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  CLMicroLocationProto::MotionEvent::MotionEvent((CLMicroLocationProto::MotionEvent *)v15);
  if (!CLMicroLocationProto::MotionEvent_Status_IsValid((CLMicroLocationProto *)4)) {
    __assert_rtn("set_status", "microlocation.pb.h", 18149, "::CLMicroLocationProto::MotionEvent_Status_IsValid(value)");
  }
  v16 |= 4u;
  v15[5] = 4;
  uint64_t v12 = *(void *)(v7 + 8);
  int v14 = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v14);
  *(void *)&long long v17 = boost::uuids::random_generator_pure::operator()((uint64_t)&v14);
  *((void *)&v17 + 1) = v13;
  CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::MotionEvent>(&v17, v15, (uint64_t)__p, v9);
  (*(void (**)(uint64_t, void **))(*(void *)v12 + 32))(v12, __p);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v20);
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v14);
  CLMicroLocationProto::MotionEvent::~MotionEvent((CLMicroLocationProto::MotionEvent *)v15);
}

void sub_256469D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, char a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)(v28 + 32));
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&a10);
  CLMicroLocationProto::MotionEvent::~MotionEvent((CLMicroLocationProto::MotionEvent *)&a12);

  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationMotionBridge::stopAllStatusTimers(id *this)
{
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_410);
  }
  int v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_DEFAULT, "stopAllStatusTimers", v4, 2u);
  }
  [this[3] invalidate];
  return [this[4] invalidate];
}

void ___ZN27CLMicroLocationMotionBridgeC2ERN27CLMicroLocationMotionClient21IMotionClientDelegateEPU28objcproto17OS_dispatch_queue8NSObject_block_invoke_2(uint64_t a1, void *a2, void *a3, void *a4)
{
  v25[38] = *MEMORY[0x263EF8340];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = *(void *)(a1 + 40);
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
  CLMicroLocationProto::MotionEvent::MotionEvent((CLMicroLocationProto::MotionEvent *)v20);
  if (!CLMicroLocationProto::MotionEvent_Status_IsValid((CLMicroLocationProto *)0xA)) {
    __assert_rtn("set_status", "microlocation.pb.h", 18149, "::CLMicroLocationProto::MotionEvent_Status_IsValid(value)");
  }
  v21 |= 4u;
  v20[5] = 10;
  int v11 = [v7 code];
  v21 |= 0x20u;
  v20[9] = v11;
  uint64_t v12 = *(void *)(v10 + 8);
  int v19 = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v19);
  *(void *)&long long v22 = boost::uuids::random_generator_pure::operator()((uint64_t)&v19);
  *((void *)&v22 + 1) = v13;
  double v14 = cl::chrono::CFAbsoluteTimeClock::now();
  CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::MotionEvent>(&v22, v20, (uint64_t)__p, v14);
  (*(void (**)(uint64_t, void **))(*(void *)v12 + 32))(v12, __p);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v25);
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v19);
  [v8 timeIntervalSinceReferenceDate];
  double v16 = v15;
  uint64_t v17 = *(void *)(v10 + 8);
  id v18 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v18 UTF8String]);
  (*(void (**)(uint64_t, void **, double))(*(void *)v17 + 16))(v17, __p, v16);
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  CLMicroLocationProto::MotionEvent::~MotionEvent((CLMicroLocationProto::MotionEvent *)v20);
}

void sub_25646A07C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, char a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  CLMicroLocationProto::MotionEvent::~MotionEvent((CLMicroLocationProto::MotionEvent *)&a12);

  _Unwind_Resume(a1);
}

void ___ZN27CLMicroLocationMotionBridgeC2ERN27CLMicroLocationMotionClient21IMotionClientDelegateEPU28objcproto17OS_dispatch_queue8NSObject_block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = *(id **)(a1 + 48);
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
  id v5 = [v3 objectForKey:*(void *)(a1 + 40)];

  if (v5)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_410);
    }
    id v6 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 68289282;
      int v10 = 0;
      __int16 v11 = 2082;
      uint64_t v12 = "";
      __int16 v13 = 2114;
      id v14 = v3;
      _os_log_impl(&dword_25631F000, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Received status report for active fence\", \"Status report\":%{public, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
    }
    CLMicroLocationMotionBridge::stopAllStatusTimersAndStartFenceStatusTimer(v4);
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_410);
    }
    id v7 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      int v9 = 68289282;
      int v10 = 0;
      __int16 v11 = 2082;
      uint64_t v12 = "";
      __int16 v13 = 2114;
      id v14 = v3;
      _os_log_impl(&dword_25631F000, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Did not receive status report for active fence\", \"Status report\":%{public, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_410);
    }
    id v8 = logObject_MicroLocation_Default;
    if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
    {
      int v9 = 68289282;
      int v10 = 0;
      __int16 v11 = 2082;
      uint64_t v12 = "";
      __int16 v13 = 2114;
      id v14 = v3;
      _os_signpost_emit_with_name_impl(&dword_25631F000, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Did not receive status report for active fence", "{\"msg%{public}.0s\":\"Did not receive status report for active fence\", \"Status report\":%{public, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
    }
  }
}

void sub_25646A348(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationMotionBridge::stopAllStatusTimersAndStartFenceStatusTimer(id *this)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  CLMicroLocationMotionBridge::stopAllStatusTimers(this);
  int v2 = +[ULDefaultsSingleton shared];
  id v3 = [v2 defaultsDictionary];

  id v4 = [NSString stringWithUTF8String:"ULMaxTimeAllowedWithoutFenceStatusReport"];
  id v5 = [v3 objectForKey:v4];
  if (v5 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    [v5 doubleValue];
  }
  else {
    [&unk_2704F1E48 doubleValue];
  }
  double v7 = v6;

  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_410);
  }
  id v8 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 68289282;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    __int16 v16 = 2050;
    double v17 = v7;
    _os_log_impl(&dword_25631F000, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"stopAllStatusTimersAndStartFenceStatusTimer: setting fence status timer to fire in the future\", \"Delay to next fire\":\"%{public}f\"}", buf, 0x1Cu);
  }
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 3221225472;
  _DWORD v11[2] = ___ZN27CLMicroLocationMotionBridge43stopAllStatusTimersAndStartFenceStatusTimerEv_block_invoke;
  v11[3] = &__block_descriptor_40_e5_v8__0l;
  v11[4] = this;
  uint64_t v9 = +[ULTimerFactory timerOnPrimaryQueueWithInterval:0 repeats:v11 block:v7];
  id v10 = this[3];
  this[3] = (id)v9;
}

void sub_25646A568(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationMotionBridge::~CLMicroLocationMotionBridge(id *this)
{
  *this = &unk_2704E0820;
  [this[3] invalidate];
  id v2 = this[3];
  this[3] = 0;

  [this[4] invalidate];
  id v3 = this[4];
  this[4] = 0;
}

{
  uint64_t vars8;

  CLMicroLocationMotionBridge::~CLMicroLocationMotionBridge(this);
  JUMPOUT(0x25A2A6340);
}

void ___ZN27CLMicroLocationMotionBridge43stopAllStatusTimersAndStartFenceStatusTimerEv_block_invoke(uint64_t a1)
{
}

void CLMicroLocationMotionBridge::handleFenceStatusTimerFire(id *this)
{
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_410);
  }
  id v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v3 = 0;
    _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_DEFAULT, "handleFenceStatusTimerFire", v3, 2u);
  }
  CLMicroLocationMotionBridge::stopAllStatusTimersAndStartRaceDelayTimer(this);
}

void CLMicroLocationMotionBridge::stopAllStatusTimersAndStartRaceDelayTimer(id *this)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  CLMicroLocationMotionBridge::stopAllStatusTimers(this);
  id v2 = +[ULDefaultsSingleton shared];
  id v3 = [v2 defaultsDictionary];

  id v4 = [NSString stringWithUTF8String:"ULMaxDelayAfterFenceStatusReportTimerFires"];
  id v5 = [v3 objectForKey:v4];
  if (v5 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    [v5 doubleValue];
  }
  else {
    [&unk_2704F1E18 doubleValue];
  }
  double v7 = v6;

  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_410);
  }
  id v8 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 68289282;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    __int16 v16 = 2050;
    double v17 = v7;
    _os_log_impl(&dword_25631F000, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"stopAllStatusTimersAndStartRaceDelayTimer: setting race delay timer to fire in the future\", \"Delay to next fire\":\"%{public}f\"}", buf, 0x1Cu);
  }
  [this[4] invalidate];
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 3221225472;
  _DWORD v11[2] = ___ZN27CLMicroLocationMotionBridge41stopAllStatusTimersAndStartRaceDelayTimerEv_block_invoke;
  v11[3] = &__block_descriptor_40_e5_v8__0l;
  v11[4] = this;
  uint64_t v9 = +[ULTimerFactory timerOnPrimaryQueueWithInterval:0 repeats:v11 block:v7];
  id v10 = this[4];
  this[4] = (id)v9;
}

void sub_25646A92C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN27CLMicroLocationMotionBridge41stopAllStatusTimersAndStartRaceDelayTimerEv_block_invoke(uint64_t a1)
{
  return CLMicroLocationMotionBridge::handleRaceDelayTimerFire(*(id **)(a1 + 32));
}

uint64_t CLMicroLocationMotionBridge::handleRaceDelayTimerFire(id *this)
{
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_410);
  }
  id v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_DEFAULT, "handleRaceDelayTimerFire", v4, 2u);
  }
  CLMicroLocationMotionBridge::stopAllStatusTimers(this);
  return (*(uint64_t (**)(id))(*(void *)this[1] + 24))(this[1]);
}

void CLMicroLocationMotionBridge::setMotionFence(CLMicroLocationMotionBridge *this)
{
  v10[38] = *MEMORY[0x263EF8340];
  CLMicroLocationProto::MotionEvent::MotionEvent((CLMicroLocationProto::MotionEvent *)v6);
  if (!CLMicroLocationProto::MotionEvent_Status_IsValid((CLMicroLocationProto *)8)) {
    __assert_rtn("set_status", "microlocation.pb.h", 18149, "::CLMicroLocationProto::MotionEvent_Status_IsValid(value)");
  }
  v7 |= 4u;
  v6[5] = 8;
  uint64_t v2 = *((void *)this + 1);
  int v5 = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v5);
  *(void *)&long long v8 = boost::uuids::random_generator_pure::operator()((uint64_t)&v5);
  *((void *)&v8 + 1) = v3;
  double v4 = cl::chrono::CFAbsoluteTimeClock::now();
  CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::MotionEvent>(&v8, v6, (uint64_t)v9, v4);
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v2 + 32))(v2, v9);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v10);
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v5);
  [*((id *)this + 2) setFence];
  CLMicroLocationMotionBridge::stopAllStatusTimersAndStartFenceStatusTimer((id *)this);
  CLMicroLocationProto::MotionEvent::~MotionEvent((CLMicroLocationProto::MotionEvent *)v6);
}

void sub_25646AB68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10, __int16 a11, char a12)
{
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)(v12 + 32));
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&a10);
  CLMicroLocationProto::MotionEvent::~MotionEvent((CLMicroLocationProto::MotionEvent *)&a12);
  _Unwind_Resume(a1);
}

void CLMicroLocationMotionBridge::clearMotionFence(CLMicroLocationMotionBridge *this)
{
  v10[38] = *MEMORY[0x263EF8340];
  CLMicroLocationProto::MotionEvent::MotionEvent((CLMicroLocationProto::MotionEvent *)v6);
  if (!CLMicroLocationProto::MotionEvent_Status_IsValid((CLMicroLocationProto *)9)) {
    __assert_rtn("set_status", "microlocation.pb.h", 18149, "::CLMicroLocationProto::MotionEvent_Status_IsValid(value)");
  }
  v7 |= 4u;
  v6[5] = 9;
  uint64_t v2 = *((void *)this + 1);
  int v5 = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v5);
  *(void *)&long long v8 = boost::uuids::random_generator_pure::operator()((uint64_t)&v5);
  *((void *)&v8 + 1) = v3;
  double v4 = cl::chrono::CFAbsoluteTimeClock::now();
  CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::MotionEvent>(&v8, v6, (uint64_t)v9, v4);
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v2 + 32))(v2, v9);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v10);
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v5);
  [*((id *)this + 2) clearFence];
  CLMicroLocationMotionBridge::stopAllStatusTimers((id *)this);
  CLMicroLocationProto::MotionEvent::~MotionEvent((CLMicroLocationProto::MotionEvent *)v6);
}

void sub_25646ACD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10, __int16 a11, char a12)
{
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)(v12 + 32));
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&a10);
  CLMicroLocationProto::MotionEvent::~MotionEvent((CLMicroLocationProto::MotionEvent *)&a12);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationMotionBridge::startMotionSession(id *this)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_410);
  }
  uint64_t v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    __int16 v5 = 2082;
    double v6 = "";
    _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationMotionBridge::startMotionSession\"}", (uint8_t *)v4, 0x12u);
  }
  return [this[2] startSession];
}

uint64_t CLMicroLocationMotionBridge::stopMotionSession(id *this)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_410);
  }
  uint64_t v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    __int16 v5 = 2082;
    double v6 = "";
    _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationMotionBridge::stopMotionSession\"}", (uint8_t *)v4, 0x12u);
  }
  return [this[2] endSession];
}

uint64_t CLMicroLocationStopMotionDetectionBridge::CLMicroLocationStopMotionDetectionBridge(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v90 = *MEMORY[0x263EF8340];
  id v5 = a3;
  *(void *)a1 = &unk_2704E0860;
  *(void *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v66 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(unsigned char *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 128) = 0;
  id v60 = v5;
  uint64_t v61 = a1;
  *(void *)(a1 + 136) = v60;
  double v6 = +[ULDefaultsSingleton shared];
  uint64_t v7 = [v6 defaultsDictionary];

  long long v8 = [NSString stringWithUTF8String:"ULMotionStopDetectionModuleEnable"];
  uint64_t v9 = [v7 objectForKey:v8];
  if (v9 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    int v10 = [v9 BOOLValue];
  }
  else {
    int v10 = [MEMORY[0x263EFFA88] BOOLValue];
  }
  int v11 = v10;

  if (v11)
  {
    uint64_t v57 = a1 + 64;
    uint64_t v12 = +[ULDefaultsSingleton shared];
    int v13 = [v12 defaultsDictionary];

    __int16 v14 = [NSString stringWithUTF8String:"ULMotionStopDetectionModuleRadiuses"];
    uint64_t v15 = [v13 objectForKey:v14];
    if (v15 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
      ULSettings::convert<NSArray<NSNumber *> * {__strong},std::vector<double>>(v15, (uint64_t)buf);
    }
    else {
      ULSettings::convert<std::initializer_list<double>,std::vector<double>>((uint64_t *)&_ZGRN10ULSettings14SettingsTraitsINS_33MotionStopDetectionModuleRadiusesEE12defaultValueE_, 2uLL, (uint64_t)buf);
    }
    int64x2_t v59 = *(int64x2_t *)buf;

    double v17 = +[ULDefaultsSingleton shared];
    uint64_t v18 = [v17 defaultsDictionary];

    int v19 = [NSString stringWithUTF8String:"ULMotionStopDetectionModuleOngoingTimerTimeout"];
    uint64_t v20 = [v18 objectForKey:v19];
    if (v20 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
      [v20 doubleValue];
    }
    else {
      [&unk_2704F0F80 doubleValue];
    }
    uint64_t v22 = v21;

    unsigned int v23 = +[ULDefaultsSingleton shared];
    char v24 = [v23 defaultsDictionary];

    int v25 = [NSString stringWithUTF8String:"ULMotionStopDetectionModuleTimeouts"];
    int v26 = [v24 objectForKey:v25];
    if (v26 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
      ULSettings::convert<NSArray<NSNumber *> * {__strong},std::vector<double>>(v26, (uint64_t)buf);
    }
    else {
      ULSettings::convert<std::initializer_list<double>,std::vector<double>>((uint64_t *)&_ZGRN10ULSettings14SettingsTraitsINS_33MotionStopDetectionModuleTimeoutsEE12defaultValueE_, 2uLL, (uint64_t)buf);
    }
    int64x2_t v64 = *(int64x2_t *)buf;

    char v27 = (void *)v59.i64[0];
    if ([MEMORY[0x263F55810] isIpad])
    {
      uint64_t v28 = +[ULDefaultsSingleton shared];
      id v29 = [v28 defaultsDictionary];

      int v30 = [NSString stringWithUTF8String:"ULMotionStopDetectionModuleIpadRadii"];
      int v31 = [v29 objectForKey:v30];
      if (v31 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
        ULSettings::convert<NSArray<NSNumber *> * {__strong},std::vector<double>>(v31, (uint64_t)buf);
      }
      else {
        ULSettings::convert<std::initializer_list<double>,std::vector<double>>((uint64_t *)&_ZGRN10ULSettings14SettingsTraitsINS_34MotionStopDetectionModuleIpadRadiiEE12defaultValueE_, 2uLL, (uint64_t)buf);
      }
      int64x2_t v59 = *(int64x2_t *)buf;

      if (v27) {
        operator delete(v27);
      }
      int v32 = +[ULDefaultsSingleton shared];
      int v33 = [v32 defaultsDictionary];

      uint64_t v34 = [NSString stringWithUTF8String:"ULMotionStopDetectionModuleIpadOngoingTimerTimeout"];
      char v35 = [v33 objectForKey:v34];
      if (v35 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
        [v35 doubleValue];
      }
      else {
        [&unk_2704F0F90 doubleValue];
      }
      uint64_t v22 = v36;

      __int16 v37 = +[ULDefaultsSingleton shared];
      id v38 = [v37 defaultsDictionary];

      uint64_t v39 = [NSString stringWithUTF8String:"ULMotionStopDetectionModuleIpadTimeouts"];
      uint64_t v40 = [v38 objectForKey:v39];
      if (v40 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
        ULSettings::convert<NSArray<NSNumber *> * {__strong},std::vector<double>>(v40, (uint64_t)buf);
      }
      else {
        ULSettings::convert<std::initializer_list<double>,std::vector<double>>((uint64_t *)&_ZGRN10ULSettings14SettingsTraitsINS_37MotionStopDetectionModuleIpadTimeoutsEE12defaultValueE_, 2uLL, (uint64_t)buf);
      }
      int64x2_t v58 = *(int64x2_t *)buf;

      if (v64.i64[0]) {
        operator delete((void *)v64.i64[0]);
      }
    }
    else
    {
      int64x2_t v58 = v64;
    }
    v78[0] = MEMORY[0x263EF8330];
    v78[1] = 3221225472;
    v78[2] = ___ZN40CLMicroLocationStopMotionDetectionBridgeC2ERN31CLMicroLocationStopMotionClient19IStopMotionDelegateEPU28objcproto17OS_dispatch_queue8NSObject_block_invoke;
    v78[3] = &unk_2653F9F70;
    uint64_t v80 = v61;
    id v41 = v60;
    id v79 = v41;
    long long v62 = (void *)MEMORY[0x25A2A6A70](v78);
    v75[0] = MEMORY[0x263EF8330];
    v75[1] = 3221225472;
    v75[2] = ___ZN40CLMicroLocationStopMotionDetectionBridgeC2ERN31CLMicroLocationStopMotionClient19IStopMotionDelegateEPU28objcproto17OS_dispatch_queue8NSObject_block_invoke_2;
    v75[3] = &unk_2653F9F98;
    uint64_t v77 = v61;
    id v42 = v41;
    id v76 = v42;
    long long v63 = (void *)MEMORY[0x25A2A6A70](v75);
    v73[0] = MEMORY[0x263EF8330];
    v73[1] = 3221225472;
    v73[2] = ___ZN40CLMicroLocationStopMotionDetectionBridgeC2ERN31CLMicroLocationStopMotionClient19IStopMotionDelegateEPU28objcproto17OS_dispatch_queue8NSObject_block_invoke_3;
    v73[3] = &unk_2653F9FE8;
    id v43 = v42;
    id v74 = v43;
    long long v65 = (void *)MEMORY[0x25A2A6A70](v73);
    int64x2_t v44 = vshrq_n_s64(vsubq_s64(vzip2q_s64(v59, v58), vzip1q_s64(v59, v58)), 3uLL);
    uint64_t v45 = v44.i64[1];
    uint64_t v46 = v44.i64[0];
    if (v44.i64[0] == v44.i64[1])
    {
      if ((vmovn_s64(vceqq_s64(vdupq_laneq_s64(v59, 1), v59)).u8[0] & 1) == 0)
      {
        if (v44.i64[0] <= 1uLL) {
          uint64_t v47 = 1;
        }
        else {
          uint64_t v47 = v44.i64[0];
        }
        __int16 v48 = (void *)v58.i64[0];
        uint64_t v49 = (void *)v59.i64[0];
        do
        {
          *(void *)std::string buf = *v49;
          *(void *)&uint8_t buf[8] = *v48;
          uint8_t buf[16] = 0;
          BYTE4(v87) = 0;
          CLMicroLocationStopMotionDetectionBridge::Config::toStr((CLMicroLocationStopMotionDetectionBridge::Config *)buf, &__p);
          uint64_t v50 = [ULCMPDRFenceProvider alloc];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          uint64_t v52 = [NSString stringWithUTF8String:p_p];
          int v53 = [NSNumber numberWithDouble:*(double *)buf];
          long long v71 = [(ULCMPDRFenceProvider *)v50 initWithFenceIdentifier:v52 queue:v43 radiusInMeters:v53 callback:v62 statusCallback:v65 errorCallback:v63];

          *(void *)&long long v81 = buf;
          *((void *)&v81 + 1) = &v71;
          uint64_t v82 = &__p;
          std::__hash_table<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<CLMicroLocationStopMotionDetectionBridge::Config &,ULCMPDRFenceProvider * {__strong}&>>(v66, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&v82, &v81);

          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (BYTE4(v87) && SBYTE3(v87) < 0) {
            operator delete(*(void **)&buf[16]);
          }
          ++v49;
          ++v48;
          --v47;
        }
        while (v47);
      }
      *(void *)&long long v67 = nan("");
      *((void *)&v67 + 1) = v22;
      std::string::basic_string[abi:ne180100]<0>(&v68, "ongoingTimer");
      char v70 = 1;
      CLMicroLocationStopMotionDetectionBridge::Element::Element((uint64_t)buf, &v67, 0);
      std::optional<CLMicroLocationStopMotionDetectionBridge::Element>::operator=[abi:ne180100]<CLMicroLocationStopMotionDetectionBridge::Element,void>(v57, (uint64_t)buf);

      if (BYTE4(v87) && SBYTE3(v87) < 0) {
        operator delete(*(void **)&buf[16]);
      }
      if (v70 && v69 < 0) {
        operator delete(v68);
      }
    }
    else
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_410);
      }
      long long v54 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
      {
        *(void *)std::string buf = 68289794;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&unsigned char buf[18] = 1026;
        *(_DWORD *)&buf[20] = 1;
        __int16 v84 = 2050;
        uint64_t v85 = v46;
        __int16 v86 = 2050;
        uint64_t v87 = v45;
        _os_log_impl(&dword_25631F000, v54, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLMicroLocationStopMotionDetectionBridge CTOR, wrong configuration, object did not initialize\", \"Stop detection enabled\":%{public}hhd, \"Num Radiuses\":%{public}lu, \"Num Timeouts\":%{public}lu}", buf, 0x2Cu);
      }
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_410);
      }
      long long v55 = logObject_MicroLocation_Default;
      if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
      {
        *(void *)std::string buf = 68289794;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&unsigned char buf[18] = 1026;
        *(_DWORD *)&buf[20] = 1;
        __int16 v84 = 2050;
        uint64_t v85 = v46;
        __int16 v86 = 2050;
        uint64_t v87 = v45;
        _os_signpost_emit_with_name_impl(&dword_25631F000, v55, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLMicroLocationStopMotionDetectionBridge CTOR, wrong configuration, object did not initialize", "{\"msg%{public}.0s\":\"CLMicroLocationStopMotionDetectionBridge CTOR, wrong configuration, object did not initialize\", \"Stop detection enabled\":%{public}hhd, \"Num Radiuses\":%{public}lu, \"Num Timeouts\":%{public}lu}", buf, 0x2Cu);
      }
    }

    if (v58.i64[0]) {
      operator delete((void *)v58.i64[0]);
    }
    if (v59.i64[0]) {
      operator delete((void *)v59.i64[0]);
    }
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_410);
    }
    __int16 v16 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)std::string buf = 68289282;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 1026;
      *(_DWORD *)&buf[20] = 0;
      _os_log_impl(&dword_25631F000, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationStopMotionDetectionBridge CTOR, setting is off so object did not initialize\", \"Stop detection enabled\":%{public}hhd}", buf, 0x18u);
    }
  }

  return v61;
}

void sub_25646B9C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10, long long a11, long long a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, long long a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  if ((void)a17) {
    operator delete((void *)a17);
  }
  if (v51) {
    operator delete(v51);
  }

  std::__optional_destruct_base<CLMicroLocationStopMotionDetectionBridge::Element,false>::~__optional_destruct_base[abi:ne180100](a10);
  std::__hash_table<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>>>::~__hash_table(a19);

  _Unwind_Resume(a1);
}

void sub_25646BBF8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (*(unsigned char *)(v35 - 152))
  {
    if (*(char *)(v35 - 153) < 0) {
      JUMPOUT(0x25646BC50);
    }
  }
  JUMPOUT(0x25646BC54);
}

void ___ZN40CLMicroLocationStopMotionDetectionBridgeC2ERN31CLMicroLocationStopMotionClient19IStopMotionDelegateEPU28objcproto17OS_dispatch_queue8NSObject_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 40);
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
  [v5 timeIntervalSinceReferenceDate];
  double v9 = v8;
  id v10 = v6;
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)[v10 UTF8String]);
  CLMicroLocationStopMotionDetectionBridge::onMotionMeasurements(v7, &__p, v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_25646BD38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void CLMicroLocationStopMotionDetectionBridge::onMotionMeasurements(uint64_t a1, std::string *a2, double a3)
{
  v27[39] = *MEMORY[0x263EF8340];
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_410);
  }
  id v6 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = (std::string *)a2->__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 2082;
    *(void *)&buf[20] = v7;
    _os_log_impl(&dword_25631F000, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"StopMotionDetectionBridge::onMotionMeasurements\", \"fenceId\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  double v8 = std::__hash_table<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>>>::find<std::string>((void *)(a1 + 24), (unsigned __int8 *)a2);
  double v9 = v8;
  if (v8)
  {
    [*((id *)v8 + 11) setFence];
    [*((id *)v9 + 12) invalidate];
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)buf, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)std::string buf = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      *(void *)&uint8_t buf[16] = *((void *)&a2->__r_.__value_.__l + 2);
    }
    double v14 = *((double *)v9 + 6);
    v23[0] = MEMORY[0x263EF8330];
    v23[1] = 3321888768;
    void v23[2] = ___ZN40CLMicroLocationStopMotionDetectionBridge20onMotionMeasurementsENSt3__16chrono10time_pointIN2cl6chrono19CFAbsoluteTimeClockENS1_8durationIeNS0_5ratioILl1ELl1EEEEEEERKNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
    uint64_t v23[3] = &__block_descriptor_64_ea8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE_e5_v8__0l;
    v23[4] = a1;
    if ((buf[23] & 0x80000000) != 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)buf, *(std::string::size_type *)&buf[8]);
    }
    else {
      std::string __p = *(std::string *)buf;
    }
    uint64_t v15 = +[ULTimerFactory timerOnPrimaryQueueWithInterval:0 repeats:v23 block:v14];
    __int16 v16 = (void *)*((void *)v9 + 12);
    *((void *)v9 + 12) = v15;

    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_410);
    }
    id v10 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v11 = a2;
      }
      else {
        int v11 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2082;
      *(void *)&buf[20] = v11;
      _os_log_impl(&dword_25631F000, v10, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"onMotionMeasurements, couldn't find StopMotionDetection element\", \"fenceIdStr\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_410);
    }
    uint64_t v12 = logObject_MicroLocation_Default;
    if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
    {
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v13 = a2;
      }
      else {
        int v13 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2082;
      *(void *)&buf[20] = v13;
      _os_signpost_emit_with_name_impl(&dword_25631F000, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "onMotionMeasurements, couldn't find StopMotionDetection element", "{\"msg%{public}.0s\":\"onMotionMeasurements, couldn't find StopMotionDetection element\", \"fenceIdStr\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
  }
  CLMicroLocationProto::MotionEvent::MotionEvent((CLMicroLocationProto::MotionEvent *)v20);
  if (!CLMicroLocationProto::MotionEvent_Status_IsValid((CLMicroLocationProto *)5)) {
    __assert_rtn("set_status", "microlocation.pb.h", 18149, "::CLMicroLocationProto::MotionEvent_Status_IsValid(value)");
  }
  v20[5] = 5;
  v22 |= 0xCu;
  if (v21 == (std::string *)MEMORY[0x263F8C740]) {
    operator new();
  }
  std::string::operator=(v21, a2);
  uint64_t v17 = *(void *)(a1 + 8);
  int v19 = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v19);
  *(void *)&long long v25 = boost::uuids::random_generator_pure::operator()((uint64_t)&v19);
  *((void *)&v25 + 1) = v18;
  CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::MotionEvent>(&v25, v20, (uint64_t)buf, a3);
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v17 + 32))(v17, buf);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v27);
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v19);
  CLMicroLocationProto::MotionEvent::~MotionEvent((CLMicroLocationProto::MotionEvent *)v20);
}

void sub_25646C1DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0) {
    operator delete(*v38);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN40CLMicroLocationStopMotionDetectionBridgeC2ERN31CLMicroLocationStopMotionClient19IStopMotionDelegateEPU28objcproto17OS_dispatch_queue8NSObject_block_invoke_2(uint64_t a1, void *a2, void *a3, void *a4)
{
  v23[38] = *MEMORY[0x263EF8340];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = *(void *)(a1 + 40);
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
  CLMicroLocationProto::MotionEvent::MotionEvent((CLMicroLocationProto::MotionEvent *)v19);
  if (!CLMicroLocationProto::MotionEvent_Status_IsValid((CLMicroLocationProto *)0xA)) {
    __assert_rtn("set_status", "microlocation.pb.h", 18149, "::CLMicroLocationProto::MotionEvent_Status_IsValid(value)");
  }
  v20 |= 4u;
  v19[5] = 10;
  int v11 = [v7 code];
  v20 |= 0x20u;
  v19[9] = v11;
  uint64_t v12 = *(void *)(v10 + 8);
  int v18 = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v18);
  *(void *)&long long v21 = boost::uuids::random_generator_pure::operator()((uint64_t)&v18);
  *((void *)&v21 + 1) = v13;
  double v14 = cl::chrono::CFAbsoluteTimeClock::now();
  CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::MotionEvent>(&v21, v19, (uint64_t)&__p, v14);
  (*(void (**)(uint64_t, std::string *))(*(void *)v12 + 32))(v12, &__p);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v23);
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v18);
  [v8 timeIntervalSinceReferenceDate];
  double v16 = v15;
  id v17 = v9;
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)[v17 UTF8String]);
  CLMicroLocationStopMotionDetectionBridge::onMotionMeasurements(v10, &__p, v16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  CLMicroLocationProto::MotionEvent::~MotionEvent((CLMicroLocationProto::MotionEvent *)v19);
}

void sub_25646C418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, char a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  CLMicroLocationProto::MotionEvent::~MotionEvent((CLMicroLocationProto::MotionEvent *)&a12);

  _Unwind_Resume(a1);
}

void ___ZN40CLMicroLocationStopMotionDetectionBridgeC2ERN31CLMicroLocationStopMotionClient19IStopMotionDelegateEPU28objcproto17OS_dispatch_queue8NSObject_block_invoke_3(uint64_t a1)
{
}

void CLMicroLocationStopMotionDetectionBridge::Config::toStr(CLMicroLocationStopMotionDetectionBridge::Config *this@<X0>, std::string *a2@<X8>)
{
  if (*((unsigned char *)this + 40))
  {
    if (*((char *)this + 39) < 0)
    {
      id v6 = (const std::string::value_type *)*((void *)this + 2);
      std::string::size_type v7 = *((void *)this + 3);
      std::string::__init_copy_ctor_external(a2, v6, v7);
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 1);
      a2->__r_.__value_.__r.__words[2] = *((void *)this + 4);
    }
  }
  else
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v8);
    uint64_t v2 = v9[0];
    *(_DWORD *)((char *)&v9[1] + *(void *)(v9[0] - 24)) = *(_DWORD *)((unsigned char *)&v9[1] + *(void *)(v9[0] - 24)) & 0xFFFFFEFB | 4;
    *(void *)((char *)&v9[2] + *(void *)(v2 - 24)) = 2;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"MiLoStopMotionDetectionFence:radius:", 36);
    uint64_t v3 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m:timeout:", 10);
    double v4 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"sec", 3);
    std::stringbuf::str();
    v8[0] = *MEMORY[0x263F8C2B8];
    uint64_t v5 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
    v9[0] = v5;
    v9[1] = MEMORY[0x263F8C318] + 16;
    if (v10 < 0) {
      operator delete((void *)v9[9]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x25A2A6280](&v11);
  }
}

void sub_25646C700(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::optional<CLMicroLocationStopMotionDetectionBridge::Element>::operator=[abi:ne180100]<CLMicroLocationStopMotionDetectionBridge::Element,void>(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 64);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v5 = a1 + 16;
  if (v4)
  {
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v5, (__n128 *)(a2 + 16));
    uint64_t v6 = *(void *)(a2 + 48);
    *(void *)(a2 + 48) = 0;
    std::string::size_type v7 = *(void **)(a1 + 48);
    *(void *)(a1 + 48) = v6;

    uint64_t v8 = *(void *)(a2 + 56);
    *(void *)(a2 + 56) = 0;
    id v9 = *(void **)(a1 + 56);
    *(void *)(a1 + 56) = v8;
  }
  else
  {
    *(unsigned char *)(a1 + 16) = 0;
    *(unsigned char *)(a1 + 40) = 0;
    if (*(unsigned char *)(a2 + 40))
    {
      long long v10 = *(_OWORD *)(a2 + 16);
      *(void *)(v5 + 16) = *(void *)(a2 + 32);
      *(_OWORD *)uint64_t v5 = v10;
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 16) = 0;
      *(unsigned char *)(a1 + 40) = 1;
    }
    long long v11 = *(_OWORD *)(a2 + 48);
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 56) = 0;
    *(_OWORD *)(a1 + 48) = v11;
    *(unsigned char *)(a1 + 64) = 1;
  }
  return a1;
}

void CLMicroLocationStopMotionDetectionBridge::Element::~Element(id *this)
{
  if (*((unsigned char *)this + 40))
  {
    if (*((char *)this + 39) < 0) {
      operator delete(this[2]);
    }
  }
}

void CLMicroLocationStopMotionDetectionBridge::~CLMicroLocationStopMotionDetectionBridge(CLMicroLocationStopMotionDetectionBridge *this)
{
  *(void *)this = &unk_2704E0860;
  for (uint64_t i = (uint64_t **)*((void *)this + 5); i; uint64_t i = (uint64_t **)*i)
  {
    uint64_t v3 = i[11];
    i[11] = 0;

    [i[12] invalidate];
    int v4 = i[12];
    i[12] = 0;
  }
  if (*((unsigned char *)this + 128))
  {
    [*((id *)this + 15) invalidate];
    uint64_t v5 = (void *)*((void *)this + 15);
    *((void *)this + 15) = 0;
  }
  std::__optional_destruct_base<CLMicroLocationStopMotionDetectionBridge::Element,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 64);
  std::__hash_table<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>>>::~__hash_table((uint64_t)this + 24);
}

{
  uint64_t vars8;

  CLMicroLocationStopMotionDetectionBridge::~CLMicroLocationStopMotionDetectionBridge(this);
  JUMPOUT(0x25A2A6340);
}

uint64_t CLMicroLocationStopMotionDetectionBridge::setToIdle(uint64_t this, __n128 a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(this + 16))
  {
    uint64_t v2 = this;
    uint64_t v3 = *(uint64_t **)(this + 40);
    if (v3)
    {
      a2.n128_u64[0] = 68289282;
      __n128 v8 = a2;
      do
      {
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_410);
        }
        int v4 = logObject_MicroLocation_Default;
        if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v5 = (std::string *)(v3 + 2);
          if (*((char *)v3 + 39) < 0) {
            uint64_t v5 = (std::string *)v5->__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)std::string buf = v8.n128_u32[0];
          int v11 = 0;
          __int16 v12 = 2082;
          uint64_t v13 = "";
          __int16 v14 = 2082;
          double v15 = v5;
          _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"setting stopDetection element to Idle (clear fence and timer)\", \"Element ID\":%{public, location:escape_only}s}", buf, 0x1Cu);
        }
        objc_msgSend((id)v3[11], "clearFence", *(_OWORD *)&v8);
        this = [(id)v3[12] invalidate];
        uint64_t v3 = (uint64_t *)*v3;
      }
      while (v3);
    }
    if (*(unsigned char *)(v2 + 128))
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_410);
      }
      uint64_t v6 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        CLMicroLocationStopMotionDetectionBridge::Config::toStr((CLMicroLocationStopMotionDetectionBridge::Config *)(v2 + 64), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string buf = 68289282;
        int v11 = 0;
        __int16 v12 = 2082;
        uint64_t v13 = "";
        __int16 v14 = 2082;
        double v15 = p_p;
        _os_log_impl(&dword_25631F000, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"setting stopDetection ongoing timer to Idle (clear fence)\", \"Element ID\":%{public, location:escape_only}s}", buf, 0x1Cu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }

      this = [*(id *)(v2 + 120) invalidate];
    }
    *(unsigned char *)(v2 + 16) = 0;
  }
  return this;
}

void sub_25646CB40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationStopMotionDetectionBridge::startStopDetection(CLMicroLocationStopMotionDetectionBridge *this, __n128 a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  *((unsigned char *)this + 16) = 1;
  uint64_t v3 = (uint64_t *)*((void *)this + 5);
  if (v3)
  {
    a2.n128_u64[0] = 68289282;
    __n128 v10 = a2;
    do
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_410);
      }
      int v4 = v3 + 2;
      uint64_t v5 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = v3 + 2;
        if (*((char *)v3 + 39) < 0) {
          uint64_t v6 = (uint64_t *)*v4;
        }
        *(_DWORD *)std::string buf = v10.n128_u32[0];
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&unsigned char buf[18] = 2082;
        *(void *)&buf[20] = v6;
        _os_log_impl(&dword_25631F000, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"starting stopDetection in element (set fence and timer)\", \"Element ID\":%{public, location:escape_only}s}", buf, 0x1Cu);
      }
      if (*((char *)v3 + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v3[2], v3[3]);
      }
      else
      {
        *(_OWORD *)std::string buf = *(_OWORD *)v4;
        *(void *)&uint8_t buf[16] = v3[4];
      }
      objc_msgSend((id)v3[11], "setFence", *(_OWORD *)&v10, v11, v12, v13, v14, v15);
      [(id)v3[12] invalidate];
      double v7 = *((double *)v3 + 6);
      uint64_t v11 = MEMORY[0x263EF8330];
      uint64_t v12 = 3321888768;
      uint64_t v13 = ___ZN40CLMicroLocationStopMotionDetectionBridge18startStopDetectionEv_block_invoke;
      __int16 v14 = &__block_descriptor_64_ea8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE_e5_v8__0l;
      double v15 = this;
      if ((buf[23] & 0x80000000) != 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)buf, *(std::string::size_type *)&buf[8]);
      }
      else {
        std::string __p = *(std::string *)buf;
      }
      uint64_t v8 = +[ULTimerFactory timerOnPrimaryQueueWithInterval:0 repeats:&v11 block:v7];
      id v9 = (void *)v3[12];
      v3[12] = v8;

      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      uint64_t v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
  CLMicroLocationStopMotionDetectionBridge::setOngoingTimer((id *)this);
}

void sub_25646CDA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN40CLMicroLocationStopMotionDetectionBridge18startStopDetectionEv_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  double v3 = cl::chrono::CFAbsoluteTimeClock::now();
  CLMicroLocationStopMotionDetectionBridge::onTimerTimeout(v2, (const std::string *)(a1 + 40), v3);
}

void CLMicroLocationStopMotionDetectionBridge::onTimerTimeout(void *a1, const std::string *a2, double a3)
{
  v21[39] = *MEMORY[0x263EF8340];
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_410);
  }
  uint64_t v6 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      double v7 = a2;
    }
    else {
      double v7 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 68289282;
    int v16 = 0;
    __int16 v17 = 2082;
    uint64_t v18 = "";
    __int16 v19 = 2082;
    int v20 = v7;
    _os_log_impl(&dword_25631F000, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"StopMotionDetectionBridge::onTimerTimeout\", \"fenceIdStr\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  (*(void (**)(void *))(*a1 + 16))(a1);
  CLMicroLocationProto::MotionEvent::MotionEvent((CLMicroLocationProto::MotionEvent *)v11);
  if (!CLMicroLocationProto::MotionEvent_Status_IsValid((CLMicroLocationProto *)6)) {
    __assert_rtn("set_status", "microlocation.pb.h", 18149, "::CLMicroLocationProto::MotionEvent_Status_IsValid(value)");
  }
  void v11[5] = 6;
  v13 |= 0xCu;
  if (v12 == (std::string *)MEMORY[0x263F8C740]) {
    operator new();
  }
  std::string::operator=(v12, a2);
  uint64_t v8 = a1[1];
  int v10 = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v10);
  *(void *)&long long v14 = boost::uuids::random_generator_pure::operator()((uint64_t)&v10);
  *((void *)&v14 + 1) = v9;
  CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::MotionEvent>(&v14, v11, (uint64_t)buf, a3);
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v8 + 32))(v8, buf);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v21);
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v10);
  (*(void (**)(void, double))(*(void *)a1[1] + 16))(a1[1], a3);
  CLMicroLocationProto::MotionEvent::~MotionEvent((CLMicroLocationProto::MotionEvent *)v11);
}

void sub_25646D080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, __int16 a12, char a13)
{
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)(v13 + 32));
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&a11);
  CLMicroLocationProto::MotionEvent::~MotionEvent((CLMicroLocationProto::MotionEvent *)&a13);
  _Unwind_Resume(a1);
}

void __copy_helper_block_ea8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v3 = *(_OWORD *)(a2 + 40);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a2 + 56);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_ea8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
}

void CLMicroLocationStopMotionDetectionBridge::setOngoingTimer(id *this)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 128))
  {
    CLMicroLocationStopMotionDetectionBridge::Config::toStr((CLMicroLocationStopMotionDetectionBridge::Config *)(this + 8), &__p);
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_410);
    }
    uint64_t v2 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 68289282;
      int v10 = 0;
      __int16 v11 = 2082;
      uint64_t v12 = "";
      __int16 v13 = 2082;
      long long v14 = p_p;
      _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"setting ongoing timer\", \"Element ID\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    [this[15] invalidate];
    double v4 = *((double *)this + 9);
    v7[0] = MEMORY[0x263EF8330];
    v7[1] = 3221225472;
    _DWORD v7[2] = ___ZN40CLMicroLocationStopMotionDetectionBridge15setOngoingTimerEv_block_invoke;
    v7[3] = &__block_descriptor_40_e5_v8__0l;
    v7[4] = this;
    uint64_t v5 = +[ULTimerFactory timerOnPrimaryQueueWithInterval:0 repeats:v7 block:v4];
    id v6 = this[15];
    this[15] = (id)v5;

    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_25646D298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationStopMotionDetectionBridge::startMotionSession(uint64_t this, __n128 a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(this + 40);
  if (v2)
  {
    a2.n128_u64[0] = 68289282;
    __n128 v5 = a2;
    do
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_410);
      }
      long long v3 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
        double v4 = v2 + 2;
        if (*((char *)v2 + 39) < 0) {
          double v4 = (void *)*v4;
        }
        *(_DWORD *)std::string buf = v5.n128_u32[0];
        int v7 = 0;
        __int16 v8 = 2082;
        uint64_t v9 = "";
        __int16 v10 = 2082;
        __int16 v11 = v4;
        _os_log_impl(&dword_25631F000, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"starting session for stopDetection element\", \"Element ID\":%{public, location:escape_only}s}", buf, 0x1Cu);
      }
      this = objc_msgSend((id)v2[11], "startSession", *(_OWORD *)&v5);
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  return this;
}

uint64_t CLMicroLocationStopMotionDetectionBridge::stopMotionSession(uint64_t this, __n128 a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(this + 40);
  if (v2)
  {
    a2.n128_u64[0] = 68289282;
    __n128 v5 = a2;
    do
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_410);
      }
      long long v3 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
        double v4 = v2 + 2;
        if (*((char *)v2 + 39) < 0) {
          double v4 = (void *)*v4;
        }
        *(_DWORD *)std::string buf = v5.n128_u32[0];
        int v7 = 0;
        __int16 v8 = 2082;
        uint64_t v9 = "";
        __int16 v10 = 2082;
        __int16 v11 = v4;
        _os_log_impl(&dword_25631F000, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"stopping session for stopDetection element\", \"Element ID\":%{public, location:escape_only}s}", buf, 0x1Cu);
      }
      this = objc_msgSend((id)v2[11], "endSession", *(_OWORD *)&v5);
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  return this;
}

void ___ZN40CLMicroLocationStopMotionDetectionBridge15setOngoingTimerEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(CLMicroLocationStopMotionDetectionBridge **)(a1 + 32);
  double v2 = cl::chrono::CFAbsoluteTimeClock::now();
  CLMicroLocationStopMotionDetectionBridge::ongoingTimerTimeout(v1, v2);
}

void CLMicroLocationStopMotionDetectionBridge::ongoingTimerTimeout(CLMicroLocationStopMotionDetectionBridge *a1, double a2)
{
  v15[39] = *MEMORY[0x263EF8340];
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_410);
  }
  double v4 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 68289026;
    int v12 = 0;
    __int16 v13 = 2082;
    long long v14 = "";
    _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"StopMotionDetectionBridge::ongoingTimerTimeout\"}", buf, 0x12u);
  }
  CLMicroLocationProto::MotionEvent::MotionEvent((CLMicroLocationProto::MotionEvent *)v8);
  if (!CLMicroLocationProto::MotionEvent_Status_IsValid((CLMicroLocationProto *)7)) {
    __assert_rtn("set_status", "microlocation.pb.h", 18149, "::CLMicroLocationProto::MotionEvent_Status_IsValid(value)");
  }
  v9 |= 4u;
  v8[5] = 7;
  uint64_t v5 = *((void *)a1 + 1);
  int v7 = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v7);
  *(void *)&long long v10 = boost::uuids::random_generator_pure::operator()((uint64_t)&v7);
  *((void *)&v10 + 1) = v6;
  CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::MotionEvent>(&v10, v8, (uint64_t)buf, a2);
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v5 + 32))(v5, buf);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v15);
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v7);
  (*(void (**)(void, double))(**((void **)a1 + 1) + 24))(*((void *)a1 + 1), a2);
  CLMicroLocationStopMotionDetectionBridge::setOngoingTimer(a1);
  CLMicroLocationProto::MotionEvent::~MotionEvent((CLMicroLocationProto::MotionEvent *)v8);
}

void sub_25646D764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, __int16 a12, char a13)
{
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)(v13 + 32));
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&a11);
  CLMicroLocationProto::MotionEvent::~MotionEvent((CLMicroLocationProto::MotionEvent *)&a13);
  _Unwind_Resume(a1);
}

void ___ZN40CLMicroLocationStopMotionDetectionBridge20onMotionMeasurementsENSt3__16chrono10time_pointIN2cl6chrono19CFAbsoluteTimeClockENS1_8durationIeNS0_5ratioILl1ELl1EEEEEEERKNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  double v2 = *(void **)(a1 + 32);
  double v3 = cl::chrono::CFAbsoluteTimeClock::now();
  CLMicroLocationStopMotionDetectionBridge::onTimerTimeout(v2, (const std::string *)(a1 + 40), v3);
}

void *CLMicroLocationCustomLoiRecordingBridge::CLMicroLocationCustomLoiRecordingBridge(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  *a1 = &unk_2704E08D0;
  a1[1] = a2;
  a1[2] = 0;
  id v6 = v5;
  a1[3] = v6;
  int v7 = +[ULDefaultsSingleton shared];
  __int16 v8 = [v7 defaultsDictionary];

  int v9 = [NSString stringWithUTF8String:"ULCustomLoiRecordingFenceRadiusInMeters"];
  long long v10 = [v8 objectForKey:v9];
  if (v10 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    [v10 floatValue];
  }
  else {
    [&unk_2704F1E30 floatValue];
  }
  int v12 = v11;

  v29[0] = MEMORY[0x263EF8330];
  v29[1] = 3221225472;
  v29[2] = ___ZN39CLMicroLocationCustomLoiRecordingBridgeC2ERN45CLMicroLocationCustomLoiRecordingMotionClient32ICustomLoiRecordingFenceDelegateEPU28objcproto17OS_dispatch_queue8NSObject_block_invoke;
  void v29[3] = &unk_2653F9F70;
  int v31 = a1;
  id v13 = v6;
  id v30 = v13;
  long long v14 = (void *)MEMORY[0x25A2A6A70](v29);
  uint64_t v23 = MEMORY[0x263EF8330];
  uint64_t v24 = 3221225472;
  long long v25 = ___ZN39CLMicroLocationCustomLoiRecordingBridgeC2ERN45CLMicroLocationCustomLoiRecordingMotionClient32ICustomLoiRecordingFenceDelegateEPU28objcproto17OS_dispatch_queue8NSObject_block_invoke_2;
  int v26 = &unk_2653F9F98;
  uint64_t v28 = a1;
  id v15 = v13;
  id v27 = v15;
  int v16 = (void *)MEMORY[0x25A2A6A70](&v23);
  __int16 v17 = [ULCMPDRFenceProvider alloc];
  LODWORD(v18) = v12;
  __int16 v19 = objc_msgSend(NSNumber, "numberWithFloat:", v18, v23, v24, v25, v26);
  uint64_t v20 = [(ULCMPDRFenceProvider *)v17 initWithFenceIdentifier:@"ULCustomLoiRecordingFence" queue:v15 radiusInMeters:v19 callback:v14 statusCallback:&__block_literal_global_86 errorCallback:v16];
  long long v21 = (void *)a1[2];
  a1[2] = v20;

  return a1;
}

void sub_25646DA30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN39CLMicroLocationCustomLoiRecordingBridgeC2ERN45CLMicroLocationCustomLoiRecordingMotionClient32ICustomLoiRecordingFenceDelegateEPU28objcproto17OS_dispatch_queue8NSObject_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 40);
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
  [v7 timeIntervalSinceReferenceDate];
  (*(void (**)(void))(**(void **)(v6 + 8) + 16))(*(void *)(v6 + 8));
}

void sub_25646DB4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN39CLMicroLocationCustomLoiRecordingBridgeC2ERN45CLMicroLocationCustomLoiRecordingMotionClient32ICustomLoiRecordingFenceDelegateEPU28objcproto17OS_dispatch_queue8NSObject_block_invoke_2(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v10 = a2;
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = *(void *)(a1 + 40);
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
  [v7 timeIntervalSinceReferenceDate];
  (*(void (**)(void))(**(void **)(v9 + 8) + 16))(*(void *)(v9 + 8));
}

void sub_25646DC10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationCustomLoiRecordingBridge::~CLMicroLocationCustomLoiRecordingBridge(id *this)
{
}

{
  uint64_t vars8;

  JUMPOUT(0x25A2A6340);
}

uint64_t CLMicroLocationCustomLoiRecordingBridge::startCustomLoiRecordingFence(id *this)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_410);
  }
  double v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    __int16 v5 = 2082;
    uint64_t v6 = "";
    _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationCustomLoiRecordingBridge::startCustomLoiRecordingFence\"}", (uint8_t *)v4, 0x12u);
  }
  [this[2] startSession];
  return [this[2] setFence];
}

uint64_t CLMicroLocationCustomLoiRecordingBridge::teardownCustomLoiRecordingFence(id *this)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_410);
  }
  double v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    __int16 v5 = 2082;
    uint64_t v6 = "";
    _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationCustomLoiRecordingBridge::teardownCustomLoiRecordingFence\"}", (uint8_t *)v4, 0x12u);
  }
  [this[2] clearFence];
  return [this[2] endSession];
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_67()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

void sub_25646E0C0(_Unwind_Exception *a1)
{
  __int16 v5 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v5;
    operator delete(v5);
  }

  _Unwind_Resume(a1);
}

void sub_25646E230(_Unwind_Exception *exception_object)
{
  double v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationStopMotionDetectionBridge::Element::Element(uint64_t a1, _OWORD *a2, void *a3)
{
  id v5 = a3;
  *(_OWORD *)a1 = *a2;
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 16), a2 + 1);
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = 0;
  return a1;
}

void sub_25646E2A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<CLMicroLocationStopMotionDetectionBridge::Element,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {

    if (*(unsigned char *)(a1 + 40))
    {
      if (*(char *)(a1 + 39) < 0) {
        operator delete(*(void **)(a1 + 16));
      }
    }
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      double v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,CLMicroLocationStopMotionDetectionBridge::Element>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,CLMicroLocationStopMotionDetectionBridge::Element>,0>(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64) && *(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<CLMicroLocationStopMotionDetectionBridge::Config &,ULCMPDRFenceProvider * {__strong}&>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4, long long *a5)
{
  id v10 = (void *)(a1 + 24);
  unint64_t v11 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v12 = v11;
  unint64_t v13 = *(void *)(a1 + 8);
  if (v13)
  {
    uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    unint64_t v15 = v14.u32[0];
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v5 = v11;
      if (v11 >= v13) {
        unint64_t v5 = v11 % v13;
      }
    }
    else
    {
      unint64_t v5 = (v13 - 1) & v11;
    }
    int v16 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v5);
    if (v16)
    {
      for (uint64_t i = *v16; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v18 = *((void *)i + 1);
        if (v18 == v12)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v15 > 1)
          {
            if (v18 >= v13) {
              v18 %= v13;
            }
          }
          else
          {
            v18 &= v13 - 1;
          }
          if (v18 != v5) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<CLMicroLocationStopMotionDetectionBridge::Config &,ULCMPDRFenceProvider * {__strong}&>>(a1, v12, a4, a5, (uint64_t)v28);
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v13 || (float)(v20 * (float)v13) < v19)
  {
    BOOL v21 = 1;
    if (v13 >= 3) {
      BOOL v21 = (v13 & (v13 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v13);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v24);
    unint64_t v13 = *(void *)(a1 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13) {
        unint64_t v5 = v12 % v13;
      }
      else {
        unint64_t v5 = v12;
      }
    }
    else
    {
      unint64_t v5 = (v13 - 1) & v12;
    }
  }
  long long v25 = *(void **)(*(void *)a1 + 8 * v5);
  if (v25)
  {
    *(void *)v28[0] = *v25;
    void *v25 = v28[0];
  }
  else
  {
    *(void *)v28[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v28[0];
    *(void *)(*(void *)a1 + 8 * v5) = a1 + 16;
    if (*(void *)v28[0])
    {
      unint64_t v26 = *(void *)(*(void *)v28[0] + 8);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v26 >= v13) {
          v26 %= v13;
        }
      }
      else
      {
        v26 &= v13 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v26) = v28[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v28[0];
  v28[0] = 0;
  ++*v10;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,void *>>>>::reset[abi:ne180100]((uint64_t)v28, 0);
  return i;
}

void sub_25646E67C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<CLMicroLocationStopMotionDetectionBridge::Config &,ULCMPDRFenceProvider * {__strong}&>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, long long *a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  id v10 = (char *)operator new(0x68uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *(void *)id v10 = 0;
  *((void *)v10 + 1) = a2;
  unint64_t v13 = *a3;
  long long v12 = *a4;
  uint64_t result = std::pair<std::string const,CLMicroLocationStopMotionDetectionBridge::Element>::pair[abi:ne180100]<std::string const&,CLMicroLocationStopMotionDetectionBridge::Config &,ULCMPDRFenceProvider * {__strong}&,0ul,0ul,1ul>((std::string *)(v10 + 16), &v13, (long long **)&v12);
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_25646E714(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,CLMicroLocationStopMotionDetectionBridge::Element>::pair[abi:ne180100]<std::string const&,CLMicroLocationStopMotionDetectionBridge::Config &,ULCMPDRFenceProvider * {__strong}&,0ul,0ul,1ul>(std::string *this, long long **a2, long long **a3)
{
  unint64_t v5 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)v5, *((void *)v5 + 1));
  }
  else
  {
    long long v6 = *v5;
    this->__r_.__value_.__r.__words[2] = *((void *)v5 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v6;
  }
  uint64_t v7 = *a3;
  long long v9 = **a3;
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&__p, v7 + 1);
  CLMicroLocationStopMotionDetectionBridge::Element::Element((uint64_t)&this[1], &v9, *(void **)a3[1]);
  if (v11 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_25646E7D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a17 && a16 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,CLMicroLocationStopMotionDetectionBridge::Element>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  id v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  char v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v13 == v6)
      {
        if (std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      char v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t CLMicroLocationLegacyThrottle::getParameters(CLMicroLocationLegacyThrottle *this, const CLMicroLocationProto::RecordingEvent *a2)
{
  uint64_t v2 = 0;
  uint64_t v4 = 0;
  switch(*((_DWORD *)a2 + 18))
  {
    case 1:
      if ((*((unsigned char *)a2 + 140) & 4) == 0) {
        goto LABEL_2;
      }
      uint64_t v5 = *((void *)a2 + 2);
      if (!v5)
      {
        this = (CLMicroLocationLegacyThrottle *)CLMicroLocationProto::RecordingEvent::default_instance(this);
        uint64_t v5 = *((void *)this + 2);
      }
      if ((*(unsigned char *)(v5 + 44) & 2) == 0) {
        goto LABEL_2;
      }
      uint64_t v6 = *((void *)a2 + 2);
      if (!v6) {
        uint64_t v6 = *(void *)(CLMicroLocationProto::RecordingEvent::default_instance(this) + 16);
      }
      uint64_t v4 = 0;
      if (*(_DWORD *)(v6 + 12) == 3) {
        uint64_t v2 = 1;
      }
      else {
        uint64_t v2 = 2;
      }
      break;
    case 2:
      uint64_t v2 = 0;
      uint64_t v4 = 0x300000000;
      break;
    case 3:
    case 6:
    case 8:
    case 0xB:
      return v4 | v2;
    case 4:
      uint64_t v4 = 0;
      uint64_t v2 = 3;
      break;
    case 5:
    case 0xC:
LABEL_2:
      uint64_t v4 = 0;
      uint64_t v2 = 2;
      break;
    case 7:
      uint64_t v2 = 0;
      uint64_t v4 = 0x100000000;
      break;
    case 9:
      uint64_t v7 = *((void *)a2 + 7);
      if (v7)
      {
        uint64_t v2 = 2 * *(unsigned __int8 *)(v7 + 68);
      }
      else
      {
        char v11 = (CLMicroLocationProto::RecordingEvent *)CLMicroLocationProto::RecordingEvent::default_instance(this);
        uint64_t v7 = *((void *)a2 + 7);
        uint64_t v2 = 2 * *(unsigned __int8 *)(*((void *)v11 + 7) + 68);
        if (!v7) {
          uint64_t v7 = *(void *)(CLMicroLocationProto::RecordingEvent::default_instance(v11) + 56);
        }
      }
      int v12 = *(unsigned __int8 *)(v7 + 69);
      goto LABEL_31;
    case 0xA:
      uint64_t v8 = *((void *)a2 + 8);
      if (v8)
      {
        uint64_t v2 = 2 * *(unsigned __int8 *)(v8 + 52);
      }
      else
      {
        unint64_t v13 = (CLMicroLocationProto::RecordingEvent *)CLMicroLocationProto::RecordingEvent::default_instance(this);
        uint64_t v8 = *((void *)a2 + 8);
        uint64_t v2 = 2 * *(unsigned __int8 *)(*((void *)v13 + 8) + 52);
        if (!v8) {
          uint64_t v8 = *(void *)(CLMicroLocationProto::RecordingEvent::default_instance(v13) + 64);
        }
      }
      int v12 = *(unsigned __int8 *)(v8 + 53);
LABEL_31:
      BOOL v10 = v12 == 0;
      uint64_t v4 = 0x300000000;
      if (v10) {
        uint64_t v4 = 0;
      }
      break;
    case 0xD:
      uint64_t v9 = *((void *)a2 + 11);
      if (!v9) {
        uint64_t v9 = *(void *)(CLMicroLocationProto::RecordingEvent::default_instance(this) + 88);
      }
      uint64_t v2 = 0;
      BOOL v10 = *(_DWORD *)(v9 + 12) == 2;
      uint64_t v4 = 0x300000000;
      if (v10) {
        uint64_t v4 = 0x200000000;
      }
      break;
    default:
      uint64_t v4 = 0;
      break;
  }
  return v4 | v2;
}

uint64_t CLMicroLocationLegacyThrottle::isThrottle(double a1, double a2, uint64_t a3, int a4, uint64_t a5, char a6)
{
  uint64_t result = 0;
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (a4 == 3 && a6)
  {
    double v8 = a1 - *(double *)&a5;
    if (a1 - *(double *)&a5 >= a2)
    {
      return 0;
    }
    else
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_87);
      }
      uint64_t v9 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v10 = [NSNumber numberWithDouble:v8];
        char v11 = [NSNumber numberWithDouble:a2];
        int v12 = 138412546;
        unint64_t v13 = v10;
        __int16 v14 = 2112;
        unint64_t v15 = v11;
        _os_log_impl(&dword_25631F000, v9, OS_LOG_TYPE_DEFAULT, "Request throttled, time since last allowed timestamp(sec): %@, throttle duration(sec): %@", (uint8_t *)&v12, 0x16u);
      }
      return 1;
    }
  }
  return result;
}

void sub_25646EC74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationLegacyThrottle::setLocalizationTime(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*(unsigned char *)(result + 8)) {
    *(unsigned char *)(result + 8) = 1;
  }
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t CLMicroLocationLegacyThrottle::setRecordingTime(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*(unsigned char *)(result + 24)) {
    *(unsigned char *)(result + 24) = 1;
  }
  *(void *)(result + 16) = v2;
  return result;
}

uint64_t CLMicroLocationLegacyThrottle::getLocalizationTime(CLMicroLocationLegacyThrottle *this)
{
  return *(void *)this;
}

uint64_t CLMicroLocationLegacyThrottle::getRecordingTime(CLMicroLocationLegacyThrottle *this)
{
  return *((void *)this + 2);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_68()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

void sub_25646F48C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ULDBUtils::insertEntries<CLMiLoCustomLoiTable,ULCustomLoiMO>(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v12 = 0;
  unint64_t v13 = &v12;
  uint64_t v14 = 0x2020000000;
  char v15 = 0;
  uint64_t v4 = [v3 managedObjectContext];
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 3221225472;
  void v8[2] = ___ZN9ULDBUtils13insertEntriesI20CLMiLoCustomLoiTable13ULCustomLoiMOEEbP7ULStoreRKNSt3__16vectorINT_5EntryENS5_9allocatorIS8_EEEE_block_invoke;
  v8[3] = &unk_2653F90B8;
  uint64_t v11 = a2;
  id v5 = v3;
  id v9 = v5;
  BOOL v10 = &v12;
  [v4 performBlockAndWait:v8];

  uint64_t v6 = *((unsigned __int8 *)v13 + 24);
  _Block_object_dispose(&v12, 8);

  return v6;
}

void sub_25646F5CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ULDBUtils::fetchEntries<CLMiLoCustomLoiTable,ULCustomLoiMO>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  uint64_t v23 = 0;
  size_t v24 = &v23;
  uint64_t v25 = 0x4812000000;
  unint64_t v26 = __Block_byref_object_copy__17;
  id v27 = __Block_byref_object_dispose__17;
  uint64_t v28 = &unk_25654E519;
  id v30 = 0;
  uint64_t v31 = 0;
  std::string __p = 0;
  uint64_t v12 = [v9 managedObjectContext];
  v17[0] = MEMORY[0x263EF8330];
  v17[1] = 3221225472;
  v17[2] = ___ZN9ULDBUtils12fetchEntriesI20CLMiLoCustomLoiTable13ULCustomLoiMOEENSt3__16vectorINT_5EntryENS3_9allocatorIS6_EEEEP7ULStoreP7NSArrayIP11NSPredicateEPSC_IP16NSSortDescriptorEm_block_invoke;
  v17[3] = &unk_2653F90E0;
  id v13 = v10;
  id v18 = v13;
  id v14 = v11;
  id v19 = v14;
  uint64_t v22 = a4;
  id v15 = v9;
  id v20 = v15;
  BOOL v21 = &v23;
  [v12 performBlockAndWait:v17];

  uint64_t v16 = v24;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  std::vector<CLMiLoCustomLoiTable::Entry>::__init_with_size[abi:ne180100]<CLMiLoCustomLoiTable::Entry*,CLMiLoCustomLoiTable::Entry*>(a5, (const void *)v16[6], v16[7], 0xCCCCCCCCCCCCCCCDLL * ((v16[7] - v16[6]) >> 3));

  _Block_object_dispose(&v23, 8);
  if (__p)
  {
    id v30 = __p;
    operator delete(__p);
  }
}

void sub_25646F7BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  _Block_object_dispose(&a18, 8);
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void ULDBUtils::fetchAllWithLimit<CLMiLoCustomLoiTable,ULCustomLoiMO>(void *a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  v10[1] = *MEMORY[0x263EF8340];
  id v5 = a1;
  uint64_t v6 = (void *)MEMORY[0x263F08B30];
  uint64_t v7 = [(id)objc_opt_class() defaultSortProperty];
  double v8 = [v6 sortDescriptorWithKey:v7 ascending:0];

  v10[0] = v8;
  id v9 = [MEMORY[0x263EFF8C0] arrayWithObjects:v10 count:1];
  ULDBUtils::fetchEntries<CLMiLoCustomLoiTable,ULCustomLoiMO>(v5, 0, v9, a2, a3);
}

void sub_25646F924(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25646FAB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25646FCC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_25646FE04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_25646FF6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_2564700C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564701C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256470350(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564704FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_69()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

void ___ZN9ULDBUtils13insertEntriesI20CLMiLoCustomLoiTable13ULCustomLoiMOEEbP7ULStoreRKNSt3__16vectorINT_5EntryENS5_9allocatorIS8_EEEE_block_invoke(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(a1 + 48);
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  if (*v2 == v4)
  {
LABEL_4:
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [*(id *)(a1 + 32) commitChangesToStore];
    uint64_t v7 = *(void **)(a1 + 32);
    [v7 deleteOldestRecordsIfFull];
  }
  else
  {
    while (1)
    {
      id v5 = [*(id *)(a1 + 32) managedObjectContext];
      uint64_t v6 = +[ULCustomLoiMO createFromEntry:v3 inManagedObjectContext:v5];

      if (!v6) {
        break;
      }

      v3 += 40;
      if (v3 == v4) {
        goto LABEL_4;
      }
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_89);
    }
    double v8 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      id v9 = +[ULCustomLoiMO entity];
      id v10 = [v9 name];
      int v15 = 68289283;
      int v16 = 0;
      __int16 v17 = 2082;
      id v18 = "";
      __int16 v19 = 2113;
      id v20 = v10;
      _os_log_impl(&dword_25631F000, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to create entry from MO\", \"MO\":%{private, location:escape_only}@}", (uint8_t *)&v15, 0x1Cu);
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_89);
    }
    id v11 = (id)logObject_MicroLocation_Default;
    if (os_signpost_enabled(v11))
    {
      uint64_t v12 = +[ULCustomLoiMO entity];
      id v13 = [v12 name];
      int v15 = 68289283;
      int v16 = 0;
      __int16 v17 = 2082;
      id v18 = "";
      __int16 v19 = 2113;
      id v20 = v13;
      _os_signpost_emit_with_name_impl(&dword_25631F000, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to create entry from MO", "{\"msg%{public}.0s\":\"Failed to create entry from MO\", \"MO\":%{private, location:escape_only}@}", (uint8_t *)&v15, 0x1Cu);
    }
    id v14 = [*(id *)(a1 + 32) managedObjectContext];
    [v14 reset];
  }
}

void sub_256470830(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__17(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__17(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void ___ZN9ULDBUtils12fetchEntriesI20CLMiLoCustomLoiTable13ULCustomLoiMOEENSt3__16vectorINT_5EntryENS3_9allocatorIS6_EEEEP7ULStoreP7NSArrayIP11NSPredicateEPSC_IP16NSSortDescriptorEm_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  uint64_t v3 = (objc_class *)objc_opt_class();
  uint64_t v4 = NSStringFromClass(v3);
  id v5 = [v2 fetchManagedObjectsWithEntityName:v4 byAndPredicates:*(void *)(a1 + 32) sortDescriptors:*(void *)(a1 + 40) andLimit:*(void *)(a1 + 64)];

  ULDBUtils::convertManagedObjectsToEntries<CLMiLoCustomLoiTable,ULCustomLoiMO>(v5, (uint64_t)&v9);
  uint64_t v6 = *(void **)(*(void *)(a1 + 56) + 8);
  uint64_t v7 = (void *)v6[6];
  if (v7)
  {
    v6[7] = v7;
    operator delete(v7);
    v6[6] = 0;
    v6[7] = 0;
    v6[8] = 0;
  }
  *((_OWORD *)v6 + 3) = v9;
  v6[8] = v10;
  double v8 = [*(id *)(a1 + 48) managedObjectContext];
  [v8 reset];
}

void sub_256470988(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ULDBUtils::convertManagedObjectsToEntries<CLMiLoCustomLoiTable,ULCustomLoiMO>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  id v3 = a1;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  std::vector<CLMiLoCustomLoiTable::Entry>::reserve((void **)a2, [v3 count]);
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  id obj = v3;
  uint64_t v4 = [obj countByEnumeratingWithState:&v35 objects:v48 count:16];
  if (v4)
  {
    id v33 = v3;
    uint64_t v5 = *(void *)v36;
    while (2)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v36 != v5) {
          objc_enumerationMutation(obj);
        }
        id v7 = *(id *)(*((void *)&v35 + 1) + 8 * i);
        double v8 = v7;
        if (!v7)
        {
          long long v46 = 0u;
          long long v47 = 0u;
          long long v45 = 0u;
LABEL_32:
          if (onceToken_MicroLocation_Default != -1) {
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_89);
          }
          id v27 = (id)logObject_MicroLocation_Default;
          if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
          {
            uint64_t v28 = [v8 entity];
            id v29 = [v28 name];
            *(_DWORD *)std::string buf = 68289283;
            int v40 = 0;
            __int16 v41 = 2082;
            id v42 = "";
            __int16 v43 = 2113;
            int64x2_t v44 = v29;
            _os_log_impl(&dword_25631F000, v27, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to convert MO to entry\", \"MO\":%{private, location:escape_only}@}", buf, 0x1Cu);
          }
          if (onceToken_MicroLocation_Default != -1) {
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_89);
          }
          id v30 = (id)logObject_MicroLocation_Default;
          if (os_signpost_enabled(v30))
          {
            uint64_t v31 = [v8 entity];
            int v32 = [v31 name];
            *(_DWORD *)std::string buf = 68289283;
            int v40 = 0;
            __int16 v41 = 2082;
            id v42 = "";
            __int16 v43 = 2113;
            int64x2_t v44 = v32;
            _os_signpost_emit_with_name_impl(&dword_25631F000, v30, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to convert MO to entry", "{\"msg%{public}.0s\":\"Failed to convert MO to entry\", \"MO\":%{private, location:escape_only}@}", buf, 0x1Cu);
          }
          *(void *)(a2 + 8) = *(void *)a2;
          goto LABEL_41;
        }
        objc_msgSend(v7, "convertToEntry", v33);
        if (!BYTE8(v47)) {
          goto LABEL_32;
        }
        uint64_t v10 = *(_OWORD **)(a2 + 8);
        unint64_t v9 = *(void *)(a2 + 16);
        if ((unint64_t)v10 >= v9)
        {
          id v13 = *(_OWORD **)a2;
          unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v10 - *(void *)a2) >> 3);
          unint64_t v15 = v14 + 1;
          if (v14 + 1 > 0x666666666666666) {
            std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v9 - (void)v13) >> 3);
          if (2 * v16 > v15) {
            unint64_t v15 = 2 * v16;
          }
          if (v16 >= 0x333333333333333) {
            unint64_t v17 = 0x666666666666666;
          }
          else {
            unint64_t v17 = v15;
          }
          if (v17)
          {
            id v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMiLoCustomLoiTable::Entry>>(a2 + 16, v17);
            id v13 = *(_OWORD **)a2;
            uint64_t v10 = *(_OWORD **)(a2 + 8);
          }
          else
          {
            id v18 = 0;
          }
          __int16 v19 = &v18[40 * v14];
          long long v20 = v45;
          long long v21 = v46;
          *((void *)v19 + 4) = v47;
          *(_OWORD *)__int16 v19 = v20;
          *((_OWORD *)v19 + 1) = v21;
          if (v10 == v13)
          {
            uint64_t v25 = &v18[40 * v14];
          }
          else
          {
            uint64_t v22 = &v18[40 * v14];
            do
            {
              long long v23 = *(_OWORD *)((char *)v10 - 40);
              long long v24 = *(_OWORD *)((char *)v10 - 24);
              uint64_t v25 = v22 - 40;
              *((void *)v22 - 1) = *((void *)v10 - 1);
              *(_OWORD *)(v22 - 24) = v24;
              *(_OWORD *)(v22 - 40) = v23;
              uint64_t v10 = (_OWORD *)((char *)v10 - 40);
              v22 -= 40;
            }
            while (v10 != v13);
          }
          unint64_t v26 = v19 + 40;
          *(void *)a2 = v25;
          *(void *)(a2 + 8) = v19 + 40;
          *(void *)(a2 + 16) = &v18[40 * v17];
          if (v13) {
            operator delete(v13);
          }
          *(void *)(a2 + 8) = v26;
        }
        else
        {
          long long v12 = v45;
          long long v11 = v46;
          *((void *)v10 + 4) = v47;
          _OWORD *v10 = v12;
          v10[1] = v11;
          *(void *)(a2 + 8) = (char *)v10 + 40;
        }
      }
      uint64_t v4 = [obj countByEnumeratingWithState:&v35 objects:v48 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }

LABEL_41:
}

void sub_256470DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  long long v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
  }

  _Unwind_Resume(a1);
}

void std::vector<CLMiLoCustomLoiTable::Entry>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - (unsigned char *)*a1) >> 3) < a2)
  {
    if (a2 >= 0x666666666666667) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = ((unsigned char *)a1[1] - (unsigned char *)*a1) / 40;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMiLoCustomLoiTable::Entry>>(v3, a2);
    id v7 = &v6[40 * v5];
    unint64_t v9 = &v6[40 * v8];
    long long v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    long long v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *(_OWORD *)(v10 - 40);
        long long v14 = *(_OWORD *)(v10 - 24);
        *((void *)v12 - 1) = *((void *)v10 - 1);
        *(_OWORD *)(v12 - 24) = v14;
        *(_OWORD *)(v12 - 40) = v13;
        v12 -= 40;
        v10 -= 40;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void *std::vector<CLMiLoCustomLoiTable::Entry>::__init_with_size[abi:ne180100]<CLMiLoCustomLoiTable::Entry*,CLMiLoCustomLoiTable::Entry*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = std::vector<CLMiLoCustomLoiTable::Entry>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_256470FC0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<CLMiLoCustomLoiTable::Entry>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMiLoCustomLoiTable::Entry>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

void *CLMicroLocationBLERssiBridge::CLMicroLocationBLERssiBridge(void *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  *a1 = &unk_2704E0A38;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = v5;
  a1[4] = a3;
  return a1;
}

void CLMicroLocationBLERssiBridge::~CLMicroLocationBLERssiBridge(id *this)
{
  *this = &unk_2704E0A38;
  [this[1] invalidate];
  id v2 = this[1];
  this[1] = 0;

  if (this[2] && ULSettings::get<ULSettings::BleNonLeechingScannerEnabled>())
  {
    [this[2] invalidate];
    id v3 = this[2];
    this[2] = 0;
  }
}

{
  uint64_t vars8;

  CLMicroLocationBLERssiBridge::~CLMicroLocationBLERssiBridge(this);
  JUMPOUT(0x25A2A6340);
}

uint64_t ULSettings::get<ULSettings::BleNonLeechingScannerEnabled>()
{
  os_log_t v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  id v2 = [NSString stringWithUTF8String:"ULBleNonLeechingScannerEnabled"];
  id v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 BOOLValue];
  }
  else {
    uint64_t v4 = [MEMORY[0x263EFFA88] BOOLValue];
  }
  uint64_t v5 = v4;

  return v5;
}

void sub_2564711EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationBLERssiBridge::startBleRssiSession(id *this, const CLMicroLocationUtils::BleScanConfiguration *a2)
{
  (*((void (**)(id *))*this + 4))(this);
  CLMicroLocationBLERssiBridge::startDiscovery(this, a2);
}

void CLMicroLocationBLERssiBridge::startDiscovery(id *this, const CLMicroLocationUtils::BleScanConfiguration *a2)
{
  CLMicroLocationBLERssiBridge::startLeechingScanner(this, a2);
  if (this[2] && ULSettings::get<ULSettings::BleNonLeechingScannerEnabled>())
  {
    if (*((unsigned char *)a2 + 10)) {
      goto LABEL_9;
    }
    uint64_t v4 = +[ULDefaultsSingleton shared];
    uint64_t v5 = [v4 defaultsDictionary];

    uint64_t v6 = [NSString stringWithUTF8String:"ULBleForceScanNearbyInfoV2"];
    uint64_t v7 = [v5 objectForKey:v6];
    if (!v7) {
      goto LABEL_7;
    }
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      int v8 = [v7 BOOLValue];
    }
    else {
LABEL_7:
    }
      int v8 = [MEMORY[0x263EFFA80] BOOLValue];
    int v9 = v8;

    if (v9)
    {
LABEL_9:
      CLMicroLocationBLERssiBridge::startNonLeechingScanner(this, a2);
    }
  }
}

void sub_2564713E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationBLERssiBridge::stopBleRssiSession(id *this)
{
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_407);
  }
  id v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_DEFAULT, "Unregister all BLE scan sessions", v4, 2u);
  }
  return CLMicroLocationBLERssiBridge::stopDiscovery(this);
}

uint64_t CLMicroLocationBLERssiBridge::stopDiscovery(id *this)
{
  [this[1] removeAllDiscoveryTypes];
  [this[1] setDiscoveryFlags:0];
  [this[1] setDeviceFilter:0];
  uint64_t result = ULSettings::get<ULSettings::BleNonLeechingScannerEnabled>();
  if (result)
  {
    [this[2] removeAllDiscoveryTypes];
    [this[2] setDiscoveryFlags:0];
    [this[2] setDeviceFilter:0];
    id v3 = this[2];
    return [v3 setOobKeys:0];
  }
  return result;
}

void CLMicroLocationBLERssiBridge::onBleBeaconReceived(uint64_t a1, void *a2)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  id v3 = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 24));
  __int16 v4 = [v3 deviceFlags];
  char v5 = [v3 nearbyInfoV2DecryptedFlags];
  if ((v4 & 0x180) != 0 || (v5 & 4) != 0)
  {
    int v6 = [v3 discoveryFlags];
    unsigned __int8 v7 = [v3 deviceFlags];
    unint64_t v8 = [v3 deviceFlags];
    if (onceToken_MicroLocationQE_Default != -1) {
      dispatch_once(&onceToken_MicroLocationQE_Default, &__block_literal_global_411);
    }
    uint64_t v9 = *(void *)&v6 & 0x80040;
    unint64_t v10 = v7 & 0x80;
    long long v11 = (id)logObject_MicroLocationQE_Default;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      id v31 = [v3 idsDeviceID];
      uint64_t v12 = [v31 UTF8String];
      [v3 identifier];
      uint64_t v30 = a1;
      id v13 = objc_claimAutoreleasedReturnValue();
      uint64_t v14 = [v13 UTF8String];
      id v15 = [v3 model];
      uint64_t v16 = [v15 UTF8String];
      [v3 bleAdvertisementTimestamp];
      *(_DWORD *)std::string buf = 68291075;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2081;
      *(void *)&buf[20] = v12;
      __int16 v47 = 2081;
      uint64_t v48 = v14;
      __int16 v49 = 2081;
      uint64_t v50 = v16;
      unint64_t v10 = v7 & 0x80;
      LOWORD(v51) = 1025;
      *(_DWORD *)((char *)&v51 + 2) = v9 != 0;
      HIWORD(v51) = 1025;
      int v52 = v10 >> 7;
      __int16 v53 = 1025;
      int v54 = (v8 >> 15) & 1;
      __int16 v55 = 2050;
      uint64_t v56 = v17;
      __int16 v57 = 1026;
      *(_DWORD *)int64x2_t v58 = [v3 rssi];
      _os_log_impl(&dword_25631F000, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Ble Beacon Received\", \"IDS ID\":%{private, location:escape_only}s, \"BT identifier\":%{private, location:escape_only}s, \"Model\":%{private, location:escape_only}s, \"is device nearbyInfo or nearbyAction type?\":%{private}hhd, \"is device same account?\":%{private}hhd, \"is device cloud paired?\":%{private}hhd, \"AdvertisementTimestamp\":\"%{public}.3f\", \"RSSI\":%{public}d}", buf, 0x52u);

      a1 = v30;
    }

    CFAbsoluteTime v45 = cl::chrono::CFAbsoluteTimeClock::now();
    id v18 = v3;
    id v44 = v18;
    CLMicroLocationProtobufHelper::protobufFromNative(&v44, (CLMicroLocationProto::BleLeechedBeacons *)v42);
    if (v43) {
      (*(void (**)(void, CFAbsoluteTime *, unsigned char *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v45, v42);
    }
    __int16 v19 = objc_msgSend(v18, "identifier", v30);
    if (v19) {
      BOOL v20 = v9 == 0;
    }
    else {
      BOOL v20 = 1;
    }
    char v22 = v20 || v10 == 0;

    if (!(v22 & 1 | ((v8 & 0x8000) == 0)))
    {
      id v23 = [v18 identifier];
      std::string::basic_string[abi:ne180100]<0>(buf, (char *)[v23 UTF8String]);
      CLMicroLocationProtobufHelper::uuidFromStdString((uint64_t)buf, (uint64_t)&v61);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }

      if (v62)
      {
        long long v24 = [v18 name];
        if (v24)
        {
          id v25 = [v18 name];
          std::string::basic_string[abi:ne180100]<0>(buf, (char *)[v25 UTF8String]);
          *(_OWORD *)uint64_t v39 = *(_OWORD *)buf;
          uint64_t v40 = *(void *)&buf[16];
          memset(buf, 0, 24);
          char v41 = 1;
        }
        else
        {
          LOBYTE(v39[0]) = 0;
          char v41 = 0;
        }

        unint64_t v26 = [v18 stableIdentifier];
        if (v26)
        {
          id v27 = [v18 stableIdentifier];
          std::string::basic_string[abi:ne180100]<0>(buf, (char *)[v27 UTF8String]);
          *(_OWORD *)long long v36 = *(_OWORD *)buf;
          uint64_t v37 = *(void *)&buf[16];
          memset(buf, 0, 24);
          char v38 = 1;
        }
        else
        {
          LOBYTE(v36[0]) = 0;
          char v38 = 0;
        }

        uint64_t v28 = [v18 model];
        if (v28)
        {
          id v29 = [v18 model];
          std::string::basic_string[abi:ne180100]<0>(buf, (char *)[v29 UTF8String]);
          *(_OWORD *)id v33 = *(_OWORD *)buf;
          uint64_t v34 = *(void *)&buf[16];
          memset(buf, 0, 24);
          char v35 = 1;
        }
        else
        {
          LOBYTE(v33[0]) = 0;
          char v35 = 0;
        }

        CFAbsoluteTime v32 = cl::chrono::CFAbsoluteTimeClock::now();
        CLMicroLocationUtils::BleIdentityItem::BleIdentityItem((uint64_t)buf, &v61, (long long *)v39, (long long *)v36, (long long *)v33, &v32);
        (*(void (**)(void, unsigned char *))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), buf);
        if (v60 && v59 < 0) {
          operator delete(*(void **)&v58[2]);
        }
        if (BYTE4(v56) && SBYTE3(v56) < 0) {
          operator delete(v51);
        }
        if ((_BYTE)v50 && SHIBYTE(v49) < 0) {
          operator delete(*(void **)&buf[16]);
        }
        if (v35 && SHIBYTE(v34) < 0) {
          operator delete(v33[0]);
        }
        if (v38 && SHIBYTE(v37) < 0) {
          operator delete(v36[0]);
        }
        if (v41 && SHIBYTE(v40) < 0) {
          operator delete(v39[0]);
        }
      }
    }
    if (v43) {
      CLMicroLocationProto::BleLeechedBeacons::~BleLeechedBeacons((CLMicroLocationProto::BleLeechedBeacons *)v42);
    }
  }
}

void sub_256471AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,void *a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a26 && a25 < 0) {
    operator delete(__p);
  }
  if (a33 && a32 < 0) {
    operator delete(a27);
  }
  if (a46) {
    CLMicroLocationProto::BleLeechedBeacons::~BleLeechedBeacons((CLMicroLocationProto::BleLeechedBeacons *)&a35);
  }

  _Unwind_Resume(a1);
}

void CLMicroLocationUtils::BleIdentityItem::~BleIdentityItem(void **this)
{
  if (*((unsigned char *)this + 104) && *((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
  if (*((unsigned char *)this + 72) && *((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((unsigned char *)this + 40))
  {
    if (*((char *)this + 39) < 0) {
      operator delete(this[2]);
    }
  }
}

void CLMicroLocationBLERssiBridge::startLeechingScanner(id *this, const CLMicroLocationUtils::BleScanConfiguration *a2)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)a2 + 9) || *((void *)a2 + 3) != *((void *)a2 + 4)) {
    goto LABEL_8;
  }
  __int16 v4 = +[ULDefaultsSingleton shared];
  char v5 = [v4 defaultsDictionary];

  int v6 = [NSString stringWithUTF8String:"ULBleForceRequestedType15Type16ScanWhenDeviceFilterIsEmpty"];
  unsigned __int8 v7 = [v5 objectForKey:v6];
  if (!v7) {
    goto LABEL_6;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    char v8 = [v7 BOOLValue];
  }
  else {
LABEL_6:
  }
    char v8 = [MEMORY[0x263EFFA80] BOOLValue];
  char v9 = v8;

  if (v9)
  {
LABEL_8:
    [this[1] setDiscoveryFlags:524352];
    [this[1] setLabel:@"CLMiLoLeeching"];
    int v10 = *((unsigned __int8 *)a2 + 9);
    uint64_t v11 = [this[1] discoveryFlags];
    id v12 = this[1];
    if (v10)
    {
      [v12 setDiscoveryFlags:v11 | 0x100200000000];
      id v13 = this[1];
      [v13 setUseCase:524291];
    }
    else
    {
      [v12 setDiscoveryFlags:v11 | 0x1000000000];
      if (ULSettings::get<ULSettings::OffScreenScanEnabled>()) {
        objc_msgSend(this[1], "setDiscoveryFlags:", objc_msgSend(this[1], "discoveryFlags") | 0x2000000);
      }
      [this[1] setUseCase:524290];
      uint64_t v14 = +[ULDefaultsSingleton shared];
      id v15 = [v14 defaultsDictionary];

      uint64_t v16 = [NSString stringWithUTF8String:"ULBleType15andType16DeviceFilterIsSet"];
      uint64_t v17 = [v15 objectForKey:v16];
      if (v17 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
        int v18 = [v17 BOOLValue];
      }
      else {
        int v18 = [MEMORY[0x263EFFA88] BOOLValue];
      }
      int v19 = v18;

      if (v19)
      {
        if (*((void *)a2 + 3) == *((void *)a2 + 4))
        {
          if (onceToken_MicroLocation_Default != -1) {
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_407);
          }
          id v27 = logObject_MicroLocation_Default;
          if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
          {
            int v29 = 68289026;
            int v30 = 0;
            __int16 v31 = 2082;
            CFAbsoluteTime v32 = "";
            _os_log_impl(&dword_25631F000, v27, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"scanner type 15, 16 deviceFilter is empty for initiated scan\"}", (uint8_t *)&v29, 0x12u);
          }
          if (onceToken_MicroLocation_Default != -1) {
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_407);
          }
          uint64_t v28 = logObject_MicroLocation_Default;
          if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
          {
            int v29 = 68289026;
            int v30 = 0;
            __int16 v31 = 2082;
            CFAbsoluteTime v32 = "";
            _os_signpost_emit_with_name_impl(&dword_25631F000, v28, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "scanner type 15, 16 deviceFilter is empty for initiated scan", "{\"msg%{public}.0s\":\"scanner type 15, 16 deviceFilter is empty for initiated scan\"}", (uint8_t *)&v29, 0x12u);
          }
        }
        else
        {
          BOOL v20 = [MEMORY[0x263EFF980] array];
          long long v21 = (uint64_t *)*((void *)a2 + 3);
          char v22 = (uint64_t *)*((void *)a2 + 4);
          while (v21 != v22)
          {
            id v23 = v21;
            if (*((char *)v21 + 23) < 0) {
              id v23 = (uint64_t *)*v21;
            }
            long long v24 = [NSString stringWithUTF8String:v23];
            [v20 addObject:v24];

            v21 += 3;
          }
          if (onceToken_MicroLocation_Default != -1) {
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_407);
          }
          id v25 = logObject_MicroLocation_Default;
          if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
          {
            int v29 = 68289282;
            int v30 = 0;
            __int16 v31 = 2082;
            CFAbsoluteTime v32 = "";
            __int16 v33 = 2114;
            uint64_t v34 = v20;
            _os_log_impl(&dword_25631F000, v25, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"scanner type 15, 16 deviceFilter is\", \"deviceFilter\":%{public, location:escape_only}@}", (uint8_t *)&v29, 0x1Cu);
          }
          [this[1] setDeviceFilter:v20];
        }
      }
      if (ULSettings::get<ULSettings::BleScanFlagRssiIsSet>()) {
        objc_msgSend(this[1], "setDiscoveryFlags:", objc_msgSend(this[1], "discoveryFlags") | 0x200000000);
      }
      [this[1] setBleScanRate:ULSettings::get<ULSettings::BleActiveScanRate>()];
    }
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_407);
    }
    unint64_t v26 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      int v29 = 68289026;
      int v30 = 0;
      __int16 v31 = 2082;
      CFAbsoluteTime v32 = "";
      _os_log_impl(&dword_25631F000, v26, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"will not conduct nearbyAction, nearbyInfo requested scan because device filter is empty\"}", (uint8_t *)&v29, 0x12u);
    }
  }
}

void sub_256472218(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationBLERssiBridge::startNonLeechingScanner(id *this, const CLMicroLocationUtils::BleScanConfiguration *a2)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  [this[2] setDiscoveryFlags:0];
  uint64_t v37 = a2;
  if (!*((unsigned char *)a2 + 9)) {
    goto LABEL_58;
  }
  id v3 = +[ULDefaultsSingleton shared];
  __int16 v4 = [v3 defaultsDictionary];

  char v5 = [NSString stringWithUTF8String:"ULBleNonLeechingBackgroundScanEnabled"];
  int v6 = [v4 objectForKey:v5];
  if (!v6) {
    goto LABEL_5;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    char v7 = [v6 BOOLValue];
  }
  else {
LABEL_5:
  }
    char v7 = [MEMORY[0x263EFFA80] BOOLValue];
  char v8 = v7;

  if ((v8 & 1) == 0)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_407);
    }
    uint64_t v34 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t buf = 68289026;
      __int16 v47 = 2082;
      uint64_t v48 = "";
      _os_log_impl(&dword_25631F000, v34, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"BleNonLeechingBackgroundScanEnabled is disabled\"}", (uint8_t *)&buf, 0x12u);
    }
    [this[2] removeAllDiscoveryTypes];
    [this[2] setDeviceFilter:0];
    return [this[2] setOobKeys:0];
  }
  else
  {
LABEL_58:
    if (ULSettings::get<ULSettings::BleScanFlagRssiIsSet>()) {
      objc_msgSend(this[2], "setDiscoveryFlags:", objc_msgSend(this[2], "discoveryFlags") | 0x200000000);
    }
    [this[2] addDiscoveryType:19];
    char v9 = +[ULDefaultsSingleton shared];
    int v10 = [v9 defaultsDictionary];

    uint64_t v11 = [NSString stringWithUTF8String:"ULBleType22DeviceFilterIsSet"];
    id v12 = [v10 objectForKey:v11];
    if (v12 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
      int v13 = [v12 BOOLValue];
    }
    else {
      int v13 = [MEMORY[0x263EFFA88] BOOLValue];
    }
    int v14 = v13;

    if (v14)
    {
      uint64_t v40 = [MEMORY[0x263EFF980] array];
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      id obj = *((id *)v37 + 2);
      uint64_t v15 = [obj countByEnumeratingWithState:&v41 objects:v45 count:16];
      if (v15)
      {
        uint64_t v16 = *(void *)v42;
        do
        {
          uint64_t v17 = 0;
          do
          {
            if (*(void *)v42 != v16) {
              objc_enumerationMutation(obj);
            }
            id v18 = [*(id *)(*((void *)&v41 + 1) + 8 * v17) btAddressData];
            if ([v18 length] == 7)
            {
              int v19 = (unsigned char *)[v18 bytes];
              id v20 = [NSString alloc];
              long long v21 = "Random";
              if ((*v19 & 1) == 0) {
                long long v21 = "Public";
              }
              char v22 = objc_msgSend(v20, "initWithFormat:", @"%s %02X:%02X:%02X:%02X:%02X:%02X", v21, v19[1], v19[2], v19[3], v19[4], v19[5], v19[6]);
              if (onceToken_MicroLocation_Default != -1) {
                dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_407);
              }
              id v23 = (id)logObject_MicroLocation_Default;
              if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v24 = [v22 UTF8String];
                uint64_t buf = 68289282;
                __int16 v47 = 2082;
                uint64_t v48 = "";
                __int16 v49 = 2082;
                uint64_t v50 = v24;
                _os_log_impl(&dword_25631F000, v23, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"_nsDataToBTAddressString\", \"address\":%{public, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
              }
            }
            else
            {
              if (onceToken_MicroLocation_Default != -1) {
                dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_407);
              }
              id v25 = logObject_MicroLocation_Default;
              if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
              {
                uint64_t buf = 68289282;
                __int16 v47 = 2082;
                uint64_t v48 = "";
                __int16 v49 = 2114;
                uint64_t v50 = (uint64_t)v18;
                _os_log_impl(&dword_25631F000, v25, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Invalid Address data\", \"address\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
                if (onceToken_MicroLocation_Default != -1) {
                  dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_407);
                }
              }
              unint64_t v26 = logObject_MicroLocation_Default;
              if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
              {
                uint64_t buf = 68289282;
                __int16 v47 = 2082;
                uint64_t v48 = "";
                __int16 v49 = 2114;
                uint64_t v50 = (uint64_t)v18;
                _os_signpost_emit_with_name_impl(&dword_25631F000, v26, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Invalid Address data", "{\"msg%{public}.0s\":\"Invalid Address data\", \"address\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
              }
              char v22 = 0;
            }

            [v40 addObject:v22];
            ++v17;
          }
          while (v15 != v17);
          uint64_t v15 = [obj countByEnumeratingWithState:&v41 objects:v45 count:16];
        }
        while (v15);
      }

      [this[2] setOobKeys:*((void *)v37 + 2)];
      [this[2] setDeviceFilter:v40];
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_407);
      }
      id v27 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t buf = 68289282;
        __int16 v47 = 2082;
        uint64_t v48 = "";
        __int16 v49 = 2114;
        uint64_t v50 = (uint64_t)v40;
        _os_log_impl(&dword_25631F000, v27, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"scanner type 22 deviceFilter is\", \"deviceFilter\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
      }
    }
    [this[2] setLabel:@"CLMiLoNonLeeching"];
    if (*((unsigned char *)v37 + 9))
    {
      id v28 = this[2];
      int v29 = +[ULDefaultsSingleton shared];
      int v30 = [v29 defaultsDictionary];

      __int16 v31 = [NSString stringWithUTF8String:"ULBleBackgroundScanRate"];
      CFAbsoluteTime v32 = [v30 objectForKey:v31];
      if (v32 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
        uint64_t v33 = [v32 intValue];
      }
      else {
        uint64_t v33 = [&unk_2704F1EA8 intValue];
      }
      uint64_t v36 = v33;

      return [v28 setBleScanRate:v36];
    }
    else
    {
      if (ULSettings::get<ULSettings::OffScreenScanEnabled>()) {
        objc_msgSend(this[2], "setDiscoveryFlags:", objc_msgSend(this[2], "discoveryFlags") | 0x2000000);
      }
      return [this[2] setBleScanRate:ULSettings::get<ULSettings::BleActiveScanRate>()];
    }
  }
}

void sub_256472A50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationBLERssiBridge::activateDiscoveriesIfNeeded(uint64_t this)
{
  uint64_t v1 = this;
  if (!*(void *)(this + 8))
  {
    id v2 = objc_alloc_init(MEMORY[0x263EFEF30]);
    id v3 = *(void **)(v1 + 8);
    *(void *)(v1 + 8) = v2;

    [*(id *)(v1 + 8) setDispatchQueue:*(void *)(v1 + 24)];
    [*(id *)(v1 + 8) setDiscoveryFlags:0];
    v11[0] = MEMORY[0x263EF8330];
    v11[1] = 3221225472;
    _DWORD v11[2] = ___ZN28CLMicroLocationBLERssiBridge27activateDiscoveriesIfNeededEv_block_invoke;
    v11[3] = &__block_descriptor_40_e18_v16__0__CBDevice_8l;
    v11[4] = v1;
    [*(id *)(v1 + 8) setDeviceFoundHandler:v11];
    [*(id *)(v1 + 8) setDeviceLostHandler:&__block_literal_global_90];
    __int16 v4 = *(void **)(v1 + 8);
    v10[0] = MEMORY[0x263EF8330];
    v10[1] = 3221225472;
    void v10[2] = ___ZN28CLMicroLocationBLERssiBridge27activateDiscoveriesIfNeededEv_block_invoke_6;
    v10[3] = &__block_descriptor_40_e17_v16__0__NSError_8l;
    v10[4] = v1;
    this = [v4 activateWithCompletion:v10];
  }
  if (!*(void *)(v1 + 16))
  {
    this = ULSettings::get<ULSettings::BleNonLeechingScannerEnabled>();
    if (this)
    {
      id v5 = objc_alloc_init(MEMORY[0x263EFEF30]);
      int v6 = *(void **)(v1 + 16);
      *(void *)(v1 + 16) = v5;

      [*(id *)(v1 + 16) setDispatchQueue:*(void *)(v1 + 24)];
      [*(id *)(v1 + 16) setDiscoveryFlags:0];
      [*(id *)(v1 + 16) setUseCase:524290];
      v9[0] = MEMORY[0x263EF8330];
      v9[1] = 3221225472;
      _DWORD v9[2] = ___ZN28CLMicroLocationBLERssiBridge27activateDiscoveriesIfNeededEv_block_invoke_15;
      void v9[3] = &__block_descriptor_40_e18_v16__0__CBDevice_8l;
      v9[4] = v1;
      [*(id *)(v1 + 16) setDeviceFoundHandler:v9];
      [*(id *)(v1 + 16) setDeviceLostHandler:&__block_literal_global_18];
      char v7 = *(void **)(v1 + 16);
      v8[0] = MEMORY[0x263EF8330];
      v8[1] = 3221225472;
      void v8[2] = ___ZN28CLMicroLocationBLERssiBridge27activateDiscoveriesIfNeededEv_block_invoke_19;
      v8[3] = &__block_descriptor_40_e17_v16__0__NSError_8l;
      void v8[4] = v1;
      return [v7 activateWithCompletion:v8];
    }
  }
  return this;
}

void ___ZN28CLMicroLocationBLERssiBridge27activateDiscoveriesIfNeededEv_block_invoke(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v3 = *(void *)(a1 + 32);
  if (*(void *)(v3 + 8)) {
    CLMicroLocationBLERssiBridge::onBleBeaconReceived(v3, v4);
  }
}

void sub_256472DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN28CLMicroLocationBLERssiBridge27activateDiscoveriesIfNeededEv_block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  id v2 = a2;
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_407);
  }
  uint64_t v3 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
  {
    v4[0] = 68289282;
    v4[1] = 0;
    __int16 v5 = 2082;
    int v6 = "";
    __int16 v7 = 2114;
    id v8 = v2;
    _os_log_impl(&dword_25631F000, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Device lost\", \"device:\":%{public, location:escape_only}@}", (uint8_t *)v4, 0x1Cu);
  }
}

void ___ZN28CLMicroLocationBLERssiBridge27activateDiscoveriesIfNeededEv_block_invoke_6(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    [*(id *)(v4 + 8) invalidate];
    __int16 v5 = *(void **)(v4 + 8);
    *(void *)(v4 + 8) = 0;

    int v6 = [NSString stringWithFormat:@"%@ %@", @"CBDiscovery activation error:", v3];
    CLMicroLocationErrorHandling::reportError(v6, v7);
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_407);
    }
    id v8 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v10 = 0;
      __int16 v11 = 2082;
      id v12 = "";
      _os_log_impl(&dword_25631F000, v8, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CBDiscovery leeching supported activated successfully\"}", buf, 0x12u);
    }
  }
}

void sub_256472FF8(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

void ___ZN28CLMicroLocationBLERssiBridge27activateDiscoveriesIfNeededEv_block_invoke_15(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v3 = *(void *)(a1 + 32);
  if (*(void *)(v3 + 16)) {
    CLMicroLocationBLERssiBridge::onBleBeaconReceived(v3, v4);
  }
}

void sub_25647307C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN28CLMicroLocationBLERssiBridge27activateDiscoveriesIfNeededEv_block_invoke_2_16(uint64_t a1, void *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  id v2 = a2;
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_407);
  }
  uint64_t v3 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
  {
    v4[0] = 68289282;
    v4[1] = 0;
    __int16 v5 = 2082;
    int v6 = "";
    __int16 v7 = 2114;
    id v8 = v2;
    _os_log_impl(&dword_25631F000, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Device lost\", \"device:\":%{public, location:escape_only}@}", (uint8_t *)v4, 0x1Cu);
  }
}

void ___ZN28CLMicroLocationBLERssiBridge27activateDiscoveriesIfNeededEv_block_invoke_19(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    [*(id *)(v4 + 16) invalidate];
    __int16 v5 = *(void **)(v4 + 16);
    *(void *)(v4 + 16) = 0;

    int v6 = [NSString stringWithFormat:@"%@ %@", @"CBDiscovery activation error:", v3];
    CLMicroLocationErrorHandling::reportError(v6, v7);
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_407);
    }
    id v8 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v10 = 0;
      __int16 v11 = 2082;
      id v12 = "";
      _os_log_impl(&dword_25631F000, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CBDiscovery leeching not supported activated successfully\"}", buf, 0x12u);
    }
  }
}

void sub_2564732BC(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

void sub_2564733AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::BleScanFlagRssiIsSet>()
{
  os_log_t v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  id v2 = [NSString stringWithUTF8String:"ULBleScanFlagRssiIsSet"];
  id v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 BOOLValue];
  }
  else {
    uint64_t v4 = [MEMORY[0x263EFFA88] BOOLValue];
  }
  uint64_t v5 = v4;

  return v5;
}

void sub_2564734AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::BleActiveScanRate>()
{
  os_log_t v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  id v2 = [NSString stringWithUTF8String:"ULBleActiveScanRate"];
  id v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 intValue];
  }
  else {
    uint64_t v4 = [&unk_2704F1E90 intValue];
  }
  uint64_t v5 = v4;

  return v5;
}

void sub_2564735AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_70()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

void ___ZL47_CLLogObjectForCategory_MicroLocationQE_Defaultv_block_invoke_3()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocationQE");
  uint64_t v1 = (void *)logObject_MicroLocationQE_Default;
  logObject_MicroLocationQE_Default = (uint64_t)v0;
}

void CLMicroLocationClientUtils::getClientIdAndServiceUuid(const void **a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v6 = (size_t)a1[1];
  }
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v6 + 2);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    if (*((char *)a1 + 23) >= 0) {
      id v8 = a1;
    }
    else {
      id v8 = *a1;
    }
    memmove(p_p, v8, v6);
  }
  strcpy((char *)p_p + v6, "--");
  uint64_t v9 = (char *)operator new(0x28uLL);
  *(void *)(v9 + 29) = 0;
  *(_OWORD *)uint64_t v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  boost::uuids::to_chars<char *>(a2, v9);
  int v10 = std::string::append(&__p, v9, 0x24uLL);
  *a3 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  operator delete(v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_25647377C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  operator delete(v14);
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void CLMicroLocationClientUtils::getBoostServiceUuidFromClientIdAndServiceUuid(const std::string *a1@<X0>, unsigned char *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v17, "--");
  std::string::size_type size = (char *)HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((char)size >= 0) {
    std::string::size_type v5 = (std::string::size_type)a1;
  }
  else {
    std::string::size_type v5 = a1->__r_.__value_.__r.__words[0];
  }
  if ((v18 & 0x80u) == 0) {
    size_t v6 = v17;
  }
  else {
    size_t v6 = (void **)v17[0];
  }
  if ((v18 & 0x80u) == 0) {
    int64_t v7 = v18;
  }
  else {
    int64_t v7 = (int64_t)v17[1];
  }
  if (v7)
  {
    if ((char)size < 0) {
      std::string::size_type size = (char *)a1->__r_.__value_.__l.__size_;
    }
    if ((uint64_t)size >= v7)
    {
      uint64_t v9 = &size[v5];
      int v10 = *(char *)v6;
      __int16 v11 = (void *)v5;
      do
      {
        id v12 = &size[-v7];
        if (v12 == (char *)-1) {
          break;
        }
        uint64_t v13 = (char *)memchr(v11, v10, (size_t)(v12 + 1));
        if (!v13) {
          break;
        }
        int v14 = v13;
        if (!memcmp(v13, v6, v7))
        {
          if (v14 != v9)
          {
            int64_t v8 = (int64_t)&v14[-v5];
            if (&v14[-v5] != (char *)-1) {
              goto LABEL_16;
            }
          }
          break;
        }
        __int16 v11 = v14 + 1;
        std::string::size_type size = (char *)(v9 - (v14 + 1));
      }
      while ((uint64_t)size >= v7);
    }
    *a2 = 0;
    a2[16] = 0;
  }
  else
  {
    int64_t v8 = 0;
LABEL_16:
    std::string::basic_string(&v15, a1, v8 + v7, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v19);
    std::string __p = v15;
    CLMicroLocationProtobufHelper::uuidFromStdString((uint64_t)&__p, (uint64_t)a2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if ((char)v18 < 0) {
    operator delete(v17[0]);
  }
}

void sub_256473914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

id CLMicroLocationClientUtils::getNSServiceUUIDFromClientIdAndServiceUUID(CLMicroLocationClientUtils *this, NSString *a2)
{
  id v2 = this;
  id v3 = [NSString stringWithUTF8String:"--"];
  uint64_t v4 = [(CLMicroLocationClientUtils *)v2 componentsSeparatedByString:v3];

  if ((unint64_t)[v4 count] < 2)
  {
    int64_t v7 = 0;
  }
  else
  {
    id v5 = objc_alloc(MEMORY[0x263F08C38]);
    size_t v6 = [v4 lastObject];
    int64_t v7 = (void *)[v5 initWithUUIDString:v6];
  }
  return v7;
}

void sub_256473A10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationClientUtils::getClientIdFromClientIdAndServiceUuid(const std::string *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = __p;
  std::string::basic_string[abi:ne180100]<0>(__p, "--");
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::size_type size = (char *)HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((char)size >= 0) {
    std::string::size_type v6 = (std::string::size_type)a1;
  }
  else {
    std::string::size_type v6 = a1->__r_.__value_.__r.__words[0];
  }
  if ((v17 & 0x80u) == 0)
  {
    int64_t v7 = v17;
  }
  else
  {
    uint64_t v4 = (void **)__p[0];
    int64_t v7 = (int64_t)__p[1];
  }
  if (v7)
  {
    if ((char)size < 0) {
      std::string::size_type size = (char *)a1->__r_.__value_.__l.__size_;
    }
    if ((uint64_t)size >= v7)
    {
      uint64_t v9 = &size[v6];
      int v10 = *(char *)v4;
      __int16 v11 = (void *)v6;
      do
      {
        id v12 = &size[-v7];
        if (v12 == (char *)-1) {
          break;
        }
        uint64_t v13 = (char *)memchr(v11, v10, (size_t)(v12 + 1));
        if (!v13) {
          break;
        }
        int v14 = v13;
        if (!memcmp(v13, v4, v7))
        {
          if (v14 != v9)
          {
            std::string::size_type v8 = (std::string::size_type)&v14[-v6];
            if (&v14[-v6] != (char *)-1) {
              goto LABEL_13;
            }
          }
          break;
        }
        __int16 v11 = v14 + 1;
        std::string::size_type size = (char *)(v9 - (v14 + 1));
      }
      while ((uint64_t)size >= v7);
    }
    std::string::operator=(a2, a1);
  }
  else
  {
    std::string::size_type v8 = 0;
LABEL_13:
    std::string::basic_string(&v15, a1, 0, v8, (std::allocator<char> *)&v18);
    *a2 = v15;
  }
  if ((char)v17 < 0) {
    operator delete(__p[0]);
  }
}

void sub_256473B9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CLMicroLocationClientUtils::requireFingerprintsForTriggerUuids(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  id v4 = *(id *)(a1 + 88);
  id v5 = v4;
  if (v4)
  {
    [v4 fetchRecordingEventsFromTriggerUUIDs:a2];
  }
  else
  {
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
  }

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_91);
  }
  std::string::size_type v6 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = (uint64_t)(a2[1] - *a2) >> 4;
    *(_DWORD *)uint64_t buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 2050;
    *(void *)&buf[20] = v7;
    *(_WORD *)&unsigned char buf[28] = 2050;
    *(void *)&buf[30] = 0xEF7BDEF7BDEF7BDFLL * ((v36 - v35) >> 3);
    _os_log_impl(&dword_25631F000, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationClientUtils, requireFingerprintsForTriggerUuids, recording entries found for trigger uuids\", \"NumTriggerUUID\":%{public}lu, \"NumEntries\":%{public}lu}", buf, 0x26u);
  }
  uint64_t v8 = v36;
  if (v35 != v36)
  {
    uint64_t v9 = v35 + 224;
    *((void *)&v10 + 1) = 0x8000000000000028;
    *(void *)&long long v10 = 68289282;
    long long v29 = v10;
    do
    {
      if (*(unsigned char *)(v9 + 16))
      {
        v51[0] = &unk_2704DD9E0;
        v51[1] = CLMicroLocationFingerprintConfiguration::getRecordingConfigurationFromSettings;
        v51[3] = v51;
        char v52 = 1;
        if (*(_DWORD *)(v9 - 152) == 1) {
          std::optional<std::function<CLMicroLocationFingerprintConfiguration ()(void)>>::operator=[abi:ne180100]<CLMicroLocationFingerprintConfiguration (&)(void),void>((uint64_t)v51, (uint64_t)CLMicroLocationFingerprintConfiguration::getLocalizingConfigurationFromSettings);
        }
        __int16 v11 = +[ULDefaultsSingleton shared];
        id v12 = [v11 defaultsDictionary];

        uint64_t v13 = [NSString stringWithUTF8String:"ULFingerprintDataSource"];
        int v14 = [v12 objectForKey:v13];
        if (v14 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
          unsigned int v15 = [v14 unsignedIntValue];
        }
        else {
          unsigned int v15 = [&unk_2704F1ED8 unsignedIntValue];
        }
        unsigned int v16 = v15;

        v50[0] = &off_2704E0B38;
        v50[3] = v50;
        if (!v52) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        std::__function::__value_func<CLMicroLocationFingerprintConfiguration ()(void)>::__value_func[abi:ne180100]((uint64_t)v49, (uint64_t)v51);
        long long v17 = *(_OWORD *)(v9 - 224);
        *(void *)&uint8_t buf[16] = *(void *)(v9 - 208);
        *(_OWORD *)uint64_t buf = v17;
        if (*(char *)(v9 - 177) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&buf[24], *(const std::string::value_type **)(v9 - 200), *(void *)(v9 - 192));
        }
        else
        {
          long long v18 = *(_OWORD *)(v9 - 200);
          uint64_t v41 = *(void *)(v9 - 184);
          *(_OWORD *)&unsigned char buf[24] = v18;
        }
        long long v20 = *(_OWORD *)(v9 - 176);
        *(_OWORD *)((char *)v42 + 12) = *(_OWORD *)(v9 - 164);
        v42[0] = v20;
        CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)v43, (const CLMicroLocationProto::RecordingEvent *)(v9 - 144));
        long long v21 = *(_OWORD *)v9;
        char v48 = *(unsigned char *)(v9 + 16);
        long long v47 = v21;
        long long v32 = 0uLL;
        __int16 v31 = 0;
        char v38 = &v31;
        char v39 = 0;
        __int16 v31 = operator new(0xF8uLL);
        *(void *)&long long v32 = v31;
        *((void *)&v32 + 1) = (char *)v31 + 248;
        *(void *)&long long v32 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationRecordingEventsTable::Entry>,CLMicroLocationRecordingEventsTable::Entry const*,CLMicroLocationRecordingEventsTable::Entry const*,CLMicroLocationRecordingEventsTable::Entry*>((uint64_t)&v32 + 8, (long long *)buf, v49, (uint64_t)v31);
        CLMicroLocationFingerprintDataSources::create(v16);
        CLMicroLocationFingerprintVector::CLMicroLocationFingerprintVector(&v34, &v33);
        uint64_t v22 = v33;
        uint64_t v33 = 0;
        if (v22) {
          (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
        }
        char v38 = &v31;
        std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v38);
        CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v43);
        if (SHIBYTE(v41) < 0) {
          operator delete(*(void **)&buf[24]);
        }
        std::__function::__value_func<CLMicroLocationFingerprintConfiguration ()(void)>::~__value_func[abi:ne180100](v49);
        std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v50);
        if (CLMicroLocationFingerprintVector::size((CLMicroLocationFingerprintVector *)&v34) == 1)
        {
          __int16 v31 = (void *)CLMicroLocationFingerprintVector::begin((CLMicroLocationFingerprintVector *)&v34);
          *(void *)&long long v32 = v23;
          uint64_t v24 = CLMicroLocationFingerprintVector::Iterator::operator*(&v31);
          std::pair<boost::uuids::uuid const,CLMicroLocationFingerprint>::pair[abi:ne180100]<true,0>((uint64_t)buf, (_OWORD *)v9, v24);
          std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>>>::__emplace_unique_key_args<boost::uuids::uuid,std::pair<boost::uuids::uuid const,CLMicroLocationFingerprint>>(a3, buf, (uint64_t)buf);
          if (v45)
          {
            long long v46 = v45;
            operator delete(v45);
          }
          std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&v44);
          std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v43);
          std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table((uint64_t)&buf[16]);
        }
        else
        {
          if (onceToken_MicroLocation_Default != -1) {
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_91);
          }
          id v25 = (id)logObject_MicroLocation_Default;
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            unint64_t v26 = operator new(0x28uLL);
            __int16 v31 = v26;
            long long v32 = xmmword_256514540;
            _OWORD *v26 = 0u;
            v26[1] = 0u;
            *(void *)((char *)v26 + 29) = 0;
            boost::uuids::to_chars<char *>(v9, v26);
            id v27 = &v31;
            if (v32 < 0) {
              id v27 = v31;
            }
            *(_DWORD *)uint64_t buf = v29;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)&uint8_t buf[8] = 2082;
            *(void *)&buf[10] = "";
            *(_WORD *)&unsigned char buf[18] = 2082;
            *(void *)&buf[20] = v27;
            _os_log_impl(&dword_25631F000, v25, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationClientUtils, requireFingerprintsForTriggerUuids, no fingerprint created for TriggerUUID\", \"TriggerUUID\":%{public, location:escape_only}s}", buf, 0x1Cu);
            if (SHIBYTE(v32) < 0) {
              operator delete(v31);
            }
          }
        }
        uint64_t v28 = v34;
        uint64_t v34 = 0;
        if (v28) {
          (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
        }
        if (v52) {
          std::__function::__value_func<CLMicroLocationFingerprintConfiguration ()(void)>::~__value_func[abi:ne180100](v51);
        }
      }
      else
      {
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_91);
        }
        char v19 = logObject_MicroLocation_Default;
        if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl(&dword_25631F000, v19, OS_LOG_TYPE_ERROR, "Error: recording entry does not have trigger UUID", buf, 2u);
        }
      }
      v9 += 248;
    }
    while (v9 - 224 != v8);
  }
  *(void *)uint64_t buf = &v35;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_25647425C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  _Unwind_Resume(a1);
}

uint64_t std::optional<std::function<CLMicroLocationFingerprintConfiguration ()(void)>>::operator=[abi:ne180100]<CLMicroLocationFingerprintConfiguration (&)(void),void>(uint64_t a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 32))
  {
    v4[0] = &unk_2704DD9E0;
    v4[1] = a2;
    v4[3] = v4;
    std::__function::__value_func<CLMicroLocationFingerprintConfiguration ()(void)>::swap[abi:ne180100](v4, (void *)a1);
    std::__function::__value_func<CLMicroLocationFingerprintConfiguration ()(void)>::~__value_func[abi:ne180100](v4);
  }
  else
  {
    *(void *)a1 = &unk_2704DD9E0;
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 24) = a1;
    *(unsigned char *)(a1 + 32) = 1;
  }
  return a1;
}

uint64_t std::pair<boost::uuids::uuid const,CLMicroLocationFingerprint>::~pair(uint64_t a1)
{
  id v2 = *(void **)(a1 + 184);
  if (v2)
  {
    *(void *)(a1 + 192) = v2;
    operator delete(v2);
  }
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(a1 + 120);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(a1 + 80);
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table(a1 + 16);
  return a1;
}

void CLMicroLocationClientUtils::requireServiceLabelEntries(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>, double a5@<D0>)
{
  double v19 = a5;
  if (*(unsigned char *)(a3 + 24))
  {
    uint64_t v9 = +[ULDefaultsSingleton shared];
    long long v10 = [v9 defaultsDictionary];

    __int16 v11 = [NSString stringWithUTF8String:"ULDatabaseSelectionLimit"];
    id v12 = [v10 objectForKey:v11];
    if (v12 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
      uint64_t v13 = [v12 unsignedIntValue];
    }
    else {
      uint64_t v13 = [&unk_2704F1EC0 unsignedIntValue];
    }
    uint64_t v14 = v13;

    id v15 = *(id *)(a1 + 40);
    unsigned int v16 = v15;
    if (!*(unsigned char *)(a3 + 24)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    if (v15)
    {
      [v15 fetchRecordingLabelsForServiceUuid:a2 atLoiGroupID:a3 + 8 fromTime:&v19 limit:v14];
    }
    else
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
    }
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_91);
    }
    long long v17 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long v18 = 0;
      _os_log_impl(&dword_25631F000, v17, OS_LOG_TYPE_ERROR, "CLMicroLocationClientUtils, requireServiceLabelEntries, cannot load label entries for unknown LOI", v18, 2u);
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
}

void sub_256474698(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_71()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

uint64_t std::pair<boost::uuids::uuid const,CLMicroLocationFingerprint>::pair[abi:ne180100]<true,0>(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  *(_OWORD *)a1 = *a2;
  std::unordered_set<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::unordered_set(a1 + 16, a3);
  long long v5 = *(_OWORD *)(a3 + 40);
  *(void *)(a1 + 72) = *(void *)(a3 + 56);
  *(_OWORD *)(a1 + 56) = v5;
  std::unordered_set<CLMicroLocationProto::DataType>::unordered_set(a1 + 80, a3 + 64);
  std::unordered_map<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>::unordered_map(a1 + 120, a3 + 104);
  long long v6 = *(_OWORD *)(a3 + 144);
  int v7 = *(_DWORD *)(a3 + 160);
  *(void *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 176) = v7;
  *(_OWORD *)(a1 + 160) = v6;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  std::vector<CLMicroLocationProto::ConfidenceReason>::__init_with_size[abi:ne180100]<CLMicroLocationProto::ConfidenceReason*,CLMicroLocationProto::ConfidenceReason*>((void *)(a1 + 184), *(const void **)(a3 + 168), *(void *)(a3 + 176), (uint64_t)(*(void *)(a3 + 176) - *(void *)(a3 + 168)) >> 2);
  return a1;
}

void sub_2564747C8(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(v2);
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<CLMicroLocationFingerprintConfiguration ()(void)>::swap[abi:ne180100](void *result, void *a2)
{
  void v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    id v4 = (void *)result[3];
    long long v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        void v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      void v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_256474A5C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::__function::__func<CLMicroLocationClientUtils::requireFingerprintsForTriggerUuids(ULDatabase &,std::vector<boost::uuids::uuid> const&)::$_0,std::allocator<CLMicroLocationClientUtils::requireFingerprintsForTriggerUuids(ULDatabase &,std::vector<boost::uuids::uuid> const&)::$_0>,BOOL ()(void)>::~__func()
{
}

void *std::__function::__func<CLMicroLocationClientUtils::requireFingerprintsForTriggerUuids(ULDatabase &,std::vector<boost::uuids::uuid> const&)::$_0,std::allocator<CLMicroLocationClientUtils::requireFingerprintsForTriggerUuids(ULDatabase &,std::vector<boost::uuids::uuid> const&)::$_0>,BOOL ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_2704E0B38;
  return result;
}

void std::__function::__func<CLMicroLocationClientUtils::requireFingerprintsForTriggerUuids(ULDatabase &,std::vector<boost::uuids::uuid> const&)::$_0,std::allocator<CLMicroLocationClientUtils::requireFingerprintsForTriggerUuids(ULDatabase &,std::vector<boost::uuids::uuid> const&)::$_0>,BOOL ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &off_2704E0B38;
}

uint64_t std::__function::__func<CLMicroLocationClientUtils::requireFingerprintsForTriggerUuids(ULDatabase &,std::vector<boost::uuids::uuid> const&)::$_0,std::allocator<CLMicroLocationClientUtils::requireFingerprintsForTriggerUuids(ULDatabase &,std::vector<boost::uuids::uuid> const&)::$_0>,BOOL ()(void)>::operator()()
{
  return 0;
}

uint64_t std::__function::__func<CLMicroLocationClientUtils::requireFingerprintsForTriggerUuids(ULDatabase &,std::vector<boost::uuids::uuid> const&)::$_0,std::allocator<CLMicroLocationClientUtils::requireFingerprintsForTriggerUuids(ULDatabase &,std::vector<boost::uuids::uuid> const&)::$_0>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationClientUtils::requireFingerprintsForTriggerUuids(ULDatabase &,std::vector<boost::uuids::uuid> const&)::$_0,std::allocator<CLMicroLocationClientUtils::requireFingerprintsForTriggerUuids(ULDatabase &,std::vector<boost::uuids::uuid> const&)::$_0>,BOOL ()(void)>::target_type()
{
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationRecordingEventsTable::Entry>,CLMicroLocationRecordingEventsTable::Entry const*,CLMicroLocationRecordingEventsTable::Entry const*,CLMicroLocationRecordingEventsTable::Entry*>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  _DWORD v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    long long v6 = a2;
    do
    {
      std::allocator<CLMicroLocationRecordingEventsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry,CLMicroLocationRecordingEventsTable::Entry const&>(a1, v4, v6);
      long long v6 = (long long *)((char *)v6 + 248);
      uint64_t v4 = v12 + 248;
      v12 += 248;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationRecordingEventsTable::Entry>,CLMicroLocationRecordingEventsTable::Entry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_256474BCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>>>::__emplace_unique_key_args<boost::uuids::uuid,std::pair<boost::uuids::uuid const,CLMicroLocationFingerprint>>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  do
    v7 ^= (v7 << 6) + (v7 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v6++);
  while (v6 != 16);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
    char v10 = *(void **)(*(void *)a1 + 8 * v3);
    if (v10)
    {
      uint64_t v11 = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == *a2 && v11[3] == a2[1]) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v3) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v14 = a1 + 16;
  id v15 = operator new(0xE0uLL);
  v25[0] = v15;
  v25[1] = a1 + 16;
  void *v15 = 0;
  v15[1] = v7;
  std::pair<boost::uuids::uuid const,CLMicroLocationFingerprint>::pair[abi:ne180100]((uint64_t)(v15 + 2), a3);
  char v26 = 1;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    BOOL v18 = 1;
    if (v8 >= 3) {
      BOOL v18 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v8);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v21);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
  }
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = v14;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v23 >= v8) {
          v23 %= v8;
        }
      }
      else
      {
        v23 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t v11 = (void *)v25[0];
  v25[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return v11;
}

void sub_256474E58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::pair<boost::uuids::uuid const,CLMicroLocationFingerprint>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__hash_table(a1 + 16, (uint64_t *)(a2 + 16));
  long long v4 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v4;
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__hash_table(a1 + 80, (uint64_t *)(a2 + 80));
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__hash_table(a1 + 120, (uint64_t *)(a2 + 120));
  long long v5 = *(_OWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = v5;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a2 + 184) = 0;
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<boost::uuids::uuid const,CLMicroLocationFingerprint>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

id ULDBUtils::NSStringArrayFromBoostUUIDs(uint64_t *a1)
{
  uint64_t v2 = [MEMORY[0x263EFF980] arrayWithCapacity:(a1[1] - *a1) >> 4];
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      long long v5 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDBytes:v3];
      uint64_t v6 = [v5 UUIDString];
      [v2 addObject:v6];

      v3 += 16;
    }
    while (v3 != v4);
  }
  return v2;
}

void sub_256475008(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ULDBUtils::boostUUIDsFromNSStringArray(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  v26[0] = 0;
  v26[1] = 0;
  id v27 = 0;
  id v19 = a1;
  std::vector<boost::uuids::uuid>::reserve(v26, [v19 count]);
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v3 = v19;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v22 objects:v30 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v23;
    while (2)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v23 != v5) {
          objc_enumerationMutation(v3);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)[*(id *)(*((void *)&v22 + 1) + 8 * i) UTF8String]);
        CLMicroLocationProtobufHelper::uuidFromStdString((uint64_t)__p, (uint64_t)&v28);
        if (v21 < 0) {
          operator delete(__p[0]);
        }
        if (!v29)
        {
          if (onceToken_MicroLocation_Default != -1) {
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_92);
          }
          BOOL v18 = logObject_MicroLocation_Default;
          if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
          {
            LOWORD(__p[0]) = 0;
            _os_log_impl(&dword_25631F000, v18, OS_LOG_TYPE_ERROR, "Failed to convert NSUUID to boost UUID", (uint8_t *)__p, 2u);
          }
          *a2 = 0;
          a2[1] = 0;
          a2[2] = 0;

          if (v26[0])
          {
            v26[1] = v26[0];
            operator delete(v26[0]);
          }
          goto LABEL_35;
        }
        unint64_t v7 = (char *)v26[1];
        if (v26[1] >= v27)
        {
          int64_t v8 = ((char *)v26[1] - (char *)v26[0]) >> 4;
          unint64_t v9 = v8 + 1;
          if ((unint64_t)(v8 + 1) >> 60) {
            std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v10 = v27 - (char *)v26[0];
          if ((v27 - (char *)v26[0]) >> 3 > v9) {
            unint64_t v9 = v10 >> 3;
          }
          if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v11 = v9;
          }
          if (v11) {
            unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::uuids::uuid>>((uint64_t)&v27, v11);
          }
          else {
            unint64_t v12 = 0;
          }
          uint64_t v13 = &v12[16 * v8];
          *(_OWORD *)uint64_t v13 = v28;
          id v15 = (char *)v26[0];
          uint64_t v14 = (char *)v26[1];
          float v16 = v13;
          if (v26[1] != v26[0])
          {
            do
            {
              *((_OWORD *)v16 - 1) = *((_OWORD *)v14 - 1);
              v16 -= 16;
              v14 -= 16;
            }
            while (v14 != v15);
            uint64_t v14 = (char *)v26[0];
          }
          float v17 = v13 + 16;
          v26[0] = v16;
          v26[1] = v13 + 16;
          id v27 = &v12[16 * v11];
          if (v14) {
            operator delete(v14);
          }
          v26[1] = v17;
        }
        else
        {
          *(_OWORD *)v26[1] = v28;
          v26[1] = v7 + 16;
        }
      }
      uint64_t v4 = [v3 countByEnumeratingWithState:&v22 objects:v30 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }

  *(_OWORD *)a2 = *(_OWORD *)v26;
  a2[2] = v27;
LABEL_35:
}

void sub_256475300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

id ULDBUtils::eventTypesToNSArray(unsigned int **a1)
{
  uint64_t v2 = [MEMORY[0x263EFF980] array];
  id v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      uint64_t v5 = [NSNumber numberWithUnsignedInt:*v3];
      [v2 addObject:v5];

      ++v3;
    }
    while (v3 != v4);
  }
  return v2;
}

void sub_2564753FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id ULDBUtils::getPropertyAsArray(ULDBUtils *this, NSArray *a2, NSString *a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v4 = this;
  uint64_t v5 = a2;
  uint64_t v6 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", -[ULDBUtils count](v4, "count"));
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  unint64_t v7 = v4;
  uint64_t v8 = [(ULDBUtils *)v7 countByEnumeratingWithState:&v17 objects:v23 count:16];
  if (v8)
  {
    uint64_t v9 = *(void *)v18;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v18 != v9) {
          objc_enumerationMutation(v7);
        }
        unint64_t v11 = *(void **)(*((void *)&v17 + 1) + 8 * v10);
        unint64_t v12 = [v11 objectForKeyedSubscript:v5];
        BOOL v13 = v12 == 0;

        if (v13)
        {
          if (onceToken_MicroLocation_Default != -1) {
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_92);
          }
          uint64_t v14 = (id)logObject_MicroLocation_Default;
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          {
            uint64_t v15 = [(NSArray *)v5 UTF8String];
            *(_DWORD *)uint64_t buf = 136315138;
            uint64_t v22 = v15;
            _os_log_impl(&dword_25631F000, v14, OS_LOG_TYPE_ERROR, "got nil value in dict array for property %s", buf, 0xCu);
          }
        }
        else
        {
          uint64_t v14 = [v11 objectForKeyedSubscript:v5];
          [v6 addObject:v14];
        }

        ++v10;
      }
      while (v8 != v10);
      uint64_t v8 = [(ULDBUtils *)v7 countByEnumeratingWithState:&v17 objects:v23 count:16];
    }
    while (v8);
  }

  return v6;
}

void sub_25647563C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_72()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

void sub_256475794(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ULDBUtils::insertEntries<CLMicroLocationRapportTable,ULRapportMO>(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v12 = 0;
  BOOL v13 = &v12;
  uint64_t v14 = 0x2020000000;
  char v15 = 0;
  uint64_t v4 = [v3 managedObjectContext];
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 3221225472;
  void v8[2] = ___ZN9ULDBUtils13insertEntriesI27CLMicroLocationRapportTable11ULRapportMOEEbP7ULStoreRKNSt3__16vectorINT_5EntryENS5_9allocatorIS8_EEEE_block_invoke;
  v8[3] = &unk_2653F90B8;
  uint64_t v11 = a2;
  id v5 = v3;
  id v9 = v5;
  uint64_t v10 = &v12;
  [v4 performBlockAndWait:v8];

  uint64_t v6 = *((unsigned __int8 *)v13 + 24);
  _Block_object_dispose(&v12, 8);

  return v6;
}

void sub_2564758D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ULDBUtils::fetchEntries<CLMicroLocationRapportTable,ULRapportMO>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, __n128 *a5@<X8>)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  uint64_t v23 = 0;
  uint64_t v24 = &v23;
  uint64_t v25 = 0x4812000000;
  char v26 = __Block_byref_object_copy__18;
  id v27 = __Block_byref_object_dispose__18;
  long long v28 = &unk_25654E519;
  memset(v29, 0, sizeof(v29));
  uint64_t v12 = [v9 managedObjectContext];
  v17[0] = MEMORY[0x263EF8330];
  v17[1] = 3221225472;
  v17[2] = ___ZN9ULDBUtils12fetchEntriesI27CLMicroLocationRapportTable11ULRapportMOEENSt3__16vectorINT_5EntryENS3_9allocatorIS6_EEEEP7ULStoreP7NSArrayIP11NSPredicateEPSC_IP16NSSortDescriptorEm_block_invoke;
  v17[3] = &unk_2653F90E0;
  id v13 = v10;
  id v18 = v13;
  id v14 = v11;
  id v19 = v14;
  uint64_t v22 = a4;
  id v15 = v9;
  id v20 = v15;
  char v21 = &v23;
  [v12 performBlockAndWait:v17];

  float v16 = v24;
  a5->n128_u64[1] = 0;
  a5[1].n128_u64[0] = 0;
  a5->n128_u64[0] = 0;
  std::vector<CLMicroLocationRapportTable::Entry>::__init_with_size[abi:ne180100]<CLMicroLocationRapportTable::Entry*,CLMicroLocationRapportTable::Entry*>(a5, v16[6], v16[7], 0xCCCCCCCCCCCCCCCDLL * ((v16[7] - v16[6]) >> 4));

  _Block_object_dispose(&v23, 8);
  int v30 = (void **)v29;
  std::vector<CLMicroLocationRapportTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v30);
}

void sub_256475AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, void *a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);

  _Block_object_dispose(va, 8);
  *(void *)(v14 - 96) = v13;
  std::vector<CLMicroLocationRapportTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 96));

  _Unwind_Resume(a1);
}

void ULDBUtils::fetchAllWithLimit<CLMicroLocationRapportTable,ULRapportMO>(void *a1@<X0>, unsigned int a2@<W1>, __n128 *a3@<X8>)
{
  v10[1] = *MEMORY[0x263EF8340];
  id v5 = a1;
  uint64_t v6 = (void *)MEMORY[0x263F08B30];
  unint64_t v7 = [(id)objc_opt_class() defaultSortProperty];
  uint64_t v8 = [v6 sortDescriptorWithKey:v7 ascending:0];

  v10[0] = v8;
  id v9 = [MEMORY[0x263EFF8C0] arrayWithObjects:v10 count:1];
  ULDBUtils::fetchEntries<CLMicroLocationRapportTable,ULRapportMO>(v5, 0, v9, a2, a3);
}

void sub_256475C28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256475F58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN9ULDBUtils13insertEntriesI27CLMicroLocationRapportTable11ULRapportMOEEbP7ULStoreRKNSt3__16vectorINT_5EntryENS5_9allocatorIS8_EEEE_block_invoke(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(a1 + 48);
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  if (*v2 == v4)
  {
LABEL_4:
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [*(id *)(a1 + 32) commitChangesToStore];
    unint64_t v7 = *(void **)(a1 + 32);
    [v7 deleteOldestRecordsIfFull];
  }
  else
  {
    while (1)
    {
      id v5 = [*(id *)(a1 + 32) managedObjectContext];
      uint64_t v6 = +[ULRapportMO createFromEntry:v3 inManagedObjectContext:v5];

      if (!v6) {
        break;
      }

      v3 += 80;
      if (v3 == v4) {
        goto LABEL_4;
      }
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_93);
    }
    uint64_t v8 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      id v9 = +[ULRapportMO entity];
      id v10 = [v9 name];
      int v15 = 68289283;
      int v16 = 0;
      __int16 v17 = 2082;
      id v18 = "";
      __int16 v19 = 2113;
      id v20 = v10;
      _os_log_impl(&dword_25631F000, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to create entry from MO\", \"MO\":%{private, location:escape_only}@}", (uint8_t *)&v15, 0x1Cu);
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_93);
    }
    id v11 = (id)logObject_MicroLocation_Default;
    if (os_signpost_enabled(v11))
    {
      uint64_t v12 = +[ULRapportMO entity];
      uint64_t v13 = [v12 name];
      int v15 = 68289283;
      int v16 = 0;
      __int16 v17 = 2082;
      id v18 = "";
      __int16 v19 = 2113;
      id v20 = v13;
      _os_signpost_emit_with_name_impl(&dword_25631F000, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to create entry from MO", "{\"msg%{public}.0s\":\"Failed to create entry from MO\", \"MO\":%{private, location:escape_only}@}", (uint8_t *)&v15, 0x1Cu);
    }
    uint64_t v14 = [*(id *)(a1 + 32) managedObjectContext];
    [v14 reset];
  }
}

void sub_2564762D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_73()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

__n128 __Block_byref_object_copy__18(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__18(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  std::vector<CLMicroLocationRapportTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void ___ZN9ULDBUtils12fetchEntriesI27CLMicroLocationRapportTable11ULRapportMOEENSt3__16vectorINT_5EntryENS3_9allocatorIS6_EEEEP7ULStoreP7NSArrayIP11NSPredicateEPSC_IP16NSSortDescriptorEm_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  uint64_t v3 = (objc_class *)objc_opt_class();
  uint64_t v4 = NSStringFromClass(v3);
  id v5 = [v2 fetchManagedObjectsWithEntityName:v4 byAndPredicates:*(void *)(a1 + 32) sortDescriptors:*(void *)(a1 + 40) andLimit:*(void *)(a1 + 64)];

  ULDBUtils::convertManagedObjectsToEntries<CLMicroLocationRapportTable,ULRapportMO>(v5, (uint64_t *)&v8);
  uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8);
  std::vector<CLMicroLocationRapportTable::Entry>::__vdeallocate((void **)(v6 + 48));
  *(_OWORD *)(v6 + 48) = v8;
  *(void *)(v6 + 64) = v9;
  uint64_t v9 = 0;
  long long v8 = 0uLL;
  id v10 = (void **)&v8;
  std::vector<CLMicroLocationRapportTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v10);
  unint64_t v7 = [*(id *)(a1 + 48) managedObjectContext];
  [v7 reset];
}

void sub_256476484(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ULDBUtils::convertManagedObjectsToEntries<CLMicroLocationRapportTable,ULRapportMO>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  id v3 = a1;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  std::vector<CLMicroLocationRapportTable::Entry>::reserve(a2, [v3 count]);
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v4 = v3;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v20 objects:v32 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v21;
    while (2)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v21 != v6) {
          objc_enumerationMutation(v4);
        }
        id v8 = *(id *)(*((void *)&v20 + 1) + 8 * i);
        uint64_t v9 = v8;
        if (!v8)
        {
          uint64_t v31 = 0;
          memset(v30, 0, sizeof(v30));
LABEL_16:
          if (onceToken_MicroLocation_Default != -1) {
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_93);
          }
          uint64_t v12 = (id)logObject_MicroLocation_Default;
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            uint64_t v13 = [v9 entity];
            uint64_t v14 = [v13 name];
            *(_DWORD *)uint64_t buf = 68289283;
            int v25 = 0;
            __int16 v26 = 2082;
            id v27 = "";
            __int16 v28 = 2113;
            char v29 = v14;
            _os_log_impl(&dword_25631F000, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to convert MO to entry\", \"MO\":%{private, location:escape_only}@}", buf, 0x1Cu);
          }
          if (onceToken_MicroLocation_Default != -1) {
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_93);
          }
          int v15 = (id)logObject_MicroLocation_Default;
          if (os_signpost_enabled(v15))
          {
            int v16 = [v9 entity];
            __int16 v17 = [v16 name];
            *(_DWORD *)uint64_t buf = 68289283;
            int v25 = 0;
            __int16 v26 = 2082;
            id v27 = "";
            __int16 v28 = 2113;
            char v29 = v17;
            _os_signpost_emit_with_name_impl(&dword_25631F000, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to convert MO to entry", "{\"msg%{public}.0s\":\"Failed to convert MO to entry\", \"MO\":%{private, location:escape_only}@}", buf, 0x1Cu);
          }
          std::__optional_destruct_base<CLMicroLocationRapportTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v30);

          uint64_t v19 = *a2;
          for (uint64_t j = a2[1];
                j != v19;
                std::allocator<CLMicroLocationRapportTable::Entry>::destroy[abi:ne180100]((uint64_t)(a2 + 2), j))
          {
            j -= 80;
          }
          a2[1] = v19;
          goto LABEL_28;
        }
        objc_msgSend(v8, "convertToEntry", (void)v20);
        if (!(_BYTE)v31) {
          goto LABEL_16;
        }
        unint64_t v10 = a2[1];
        if (v10 >= a2[2])
        {
          uint64_t v11 = std::vector<CLMicroLocationRapportTable::Entry>::__push_back_slow_path<CLMicroLocationRapportTable::Entry>(a2, (uint64_t)v30);
        }
        else
        {
          std::allocator<CLMicroLocationRapportTable::Entry>::construct[abi:ne180100]<CLMicroLocationRapportTable::Entry,CLMicroLocationRapportTable::Entry>((uint64_t)(a2 + 2), a2[1], (uint64_t)v30);
          uint64_t v11 = v10 + 80;
          a2[1] = v10 + 80;
        }
        a2[1] = v11;
        std::__optional_destruct_base<CLMicroLocationRapportTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v30);
      }
      uint64_t v5 = [v4 countByEnumeratingWithState:&v20 objects:v32 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }

LABEL_28:
}

void sub_256476810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);

  std::__optional_destruct_base<CLMicroLocationRapportTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  std::vector<CLMicroLocationRapportTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)va);

  _Unwind_Resume(a1);
}

void **std::vector<CLMicroLocationRapportTable::Entry>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  __n128 result = (void **)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x333333333333334) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRapportMonitor::Item>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    _DWORD v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 80 * v6;
    std::vector<CLMicroLocationRapportTable::Entry>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<CLMicroLocationRapportTable::Entry>::~__split_buffer(v7);
  }
  return result;
}

void sub_256476940(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMicroLocationRapportTable::Entry>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMicroLocationRapportTable::Entry>::__push_back_slow_path<CLMicroLocationRapportTable::Entry>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999) {
    unint64_t v6 = 0x333333333333333;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v14 = a1 + 2;
  if (v6) {
    unint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRapportMonitor::Item>>((uint64_t)(a1 + 2), v6);
  }
  else {
    unint64_t v7 = 0;
  }
  unint64_t v10 = v7;
  uint64_t v11 = &v7[80 * v3];
  uint64_t v13 = &v7[80 * v6];
  std::allocator<CLMicroLocationRapportTable::Entry>::construct[abi:ne180100]<CLMicroLocationRapportTable::Entry,CLMicroLocationRapportTable::Entry>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  uint64_t v12 = v11 + 80;
  std::vector<CLMicroLocationRapportTable::Entry>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<CLMicroLocationRapportTable::Entry>::~__split_buffer(&v10);
  return v8;
}

void sub_256476A50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMicroLocationRapportTable::Entry>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

__n128 std::allocator<CLMicroLocationRapportTable::Entry>::construct[abi:ne180100]<CLMicroLocationRapportTable::Entry,CLMicroLocationRapportTable::Entry>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = *(void *)a3;
  long long v5 = *(_OWORD *)(a3 + 8);
  *(void *)(a2 + 24) = *(void *)(a3 + 24);
  *(_OWORD *)(a2 + 8) = v5;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 8) = 0;
  CLMicroLocationProto::RapportDevice::RapportDevice((CLMicroLocationProto::RapportDevice *)(a2 + 32), (const CLMicroLocationProto::RapportDevice *)(a3 + 32));
  __n128 result = *(__n128 *)(a3 + 64);
  *(__n128 *)(a2 + 64) = result;
  return result;
}

void sub_256476AC8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<CLMicroLocationRapportTable::Entry,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 80))
  {
    CLMicroLocationProto::RapportDevice::~RapportDevice((CLMicroLocationProto::RapportDevice *)(a1 + 32));
    if (*(char *)(a1 + 31) < 0) {
      operator delete(*(void **)(a1 + 8));
    }
  }
  return a1;
}

void std::vector<CLMicroLocationRapportTable::Entry>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    unint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 80;
        std::allocator<CLMicroLocationRapportTable::Entry>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      unint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

__n128 *std::vector<CLMicroLocationRapportTable::Entry>::__init_with_size[abi:ne180100]<CLMicroLocationRapportTable::Entry*,CLMicroLocationRapportTable::Entry*>(__n128 *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    std::vector<CLMicroLocationRapportMonitor::Item>::__vallocate[abi:ne180100](result, a4);
    __n128 result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationRapportTable::Entry>,CLMicroLocationRapportTable::Entry*,CLMicroLocationRapportTable::Entry*,CLMicroLocationRapportTable::Entry*>((uint64_t)&v6[1], a2, a3, (__n128 *)v6->n128_u64[1]);
    v6->n128_u64[1] = (unint64_t)result;
  }
  return result;
}

void sub_256476C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<CLMicroLocationRapportTable::Entry>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

__n128 *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationRapportTable::Entry>,CLMicroLocationRapportTable::Entry*,CLMicroLocationRapportTable::Entry*,CLMicroLocationRapportTable::Entry*>(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  unint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  _DWORD v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::allocator<CLMicroLocationRapportTable::Entry>::construct[abi:ne180100]<CLMicroLocationRapportTable::Entry,CLMicroLocationRapportTable::Entry&>(a1, v4, v6);
      v6 += 80;
      unint64_t v4 = v12 + 5;
      v12 += 5;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationRapportTable::Entry>,CLMicroLocationRapportTable::Entry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_256476CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

__n128 std::allocator<CLMicroLocationRapportTable::Entry>::construct[abi:ne180100]<CLMicroLocationRapportTable::Entry,CLMicroLocationRapportTable::Entry&>(uint64_t a1, __n128 *a2, uint64_t a3)
{
  a2->n128_u64[0] = *(void *)a3;
  long long v5 = (std::string *)&a2->n128_i8[8];
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)(a3 + 8);
    a2[1].n128_u64[1] = *(void *)(a3 + 24);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  CLMicroLocationProto::RapportDevice::RapportDevice((CLMicroLocationProto::RapportDevice *)&a2[2], (const CLMicroLocationProto::RapportDevice *)(a3 + 32));
  __n128 result = *(__n128 *)(a3 + 64);
  a2[4] = result;
  return result;
}

void sub_256476D44(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationRapportTable::Entry>,CLMicroLocationRapportTable::Entry*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationRapportTable::Entry>,CLMicroLocationRapportTable::Entry*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationRapportTable::Entry>,CLMicroLocationRapportTable::Entry*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 80;
      std::allocator<CLMicroLocationRapportTable::Entry>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

void *CLMicroLocationProtobufHelper::convertRequestTypeToString@<X0>(_DWORD *a1@<X0>, void *a2@<X8>)
{
  if (*a1) {
    uint64_t v2 = "recording";
  }
  else {
    uint64_t v2 = "localization";
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

void *CLMicroLocationProtobufHelper::convertRequestStatusToString@<X0>(int *a1@<X0>, void *a2@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a2, off_2653FA088[*a1]);
}

void *CLMicroLocationProtobufHelper::convertChangedLoiReasonToMessage@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a2, off_2653FA0B8[a1 - 1]);
}

uint64_t CLMicroLocationProtobufHelper::uuidFromStdString@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = (unsigned __int8 *)a1;
  }
  else {
    uint64_t v4 = *(unsigned __int8 **)a1;
  }
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a1 + 8);
  }
  uint64_t result = boost::uuids::string_generator::operator()<std::__wrap_iter<char const*>>((boost::uuids::string_generator *)&v7, v4, &v4[v3]);
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v6;
  *(unsigned char *)(a2 + 16) = 1;
  return result;
}

uint64_t **CLMicroLocationProtobufHelper::uuidFromProtobuf@<X0>(uint64_t **result@<X0>, unsigned char *a2@<X8>)
{
  int v2 = *((char *)result + 23);
  if (v2 < 0)
  {
    if (result[1] != (uint64_t *)16)
    {
LABEL_7:
      char v3 = 0;
      *a2 = 0;
      goto LABEL_8;
    }
    uint64_t result = (uint64_t **)*result;
  }
  else if (v2 != 16)
  {
    goto LABEL_7;
  }
  *(_OWORD *)a2 = *(_OWORD *)result;
  char v3 = 1;
LABEL_8:
  a2[16] = v3;
  return result;
}

void CLMicroLocationProtobufHelper::boostUuidFromNSUUID(CLMicroLocationProtobufHelper *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v4 = this;
  uint64_t v5 = v4;
  if (v4)
  {
    long long v6 = 0uLL;
    [(CLMicroLocationProtobufHelper *)v4 getUUIDBytes:&v6];
    *(_OWORD *)a2 = v6;
    *(unsigned char *)(a2 + 16) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
}

void sub_256476F8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::protobufFromNative(id *a1@<X0>, CLMicroLocationProto::BleLeechedBeacons *a2@<X8>)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  CLMicroLocationProto::BleLeechedBeacons::BleLeechedBeacons((uint64_t)v18);
  if (!*a1
    || ([*a1 idsDeviceID],
        uint64_t v4 = objc_claimAutoreleasedReturnValue(),
        BOOL v5 = v4 == 0,
        v4,
        v5))
  {
LABEL_16:
    *(unsigned char *)a2 = 0;
    *((unsigned char *)a2 + 72) = 0;
    goto LABEL_21;
  }
  [*a1 bleAdvertisementTimestamp];
  v25 |= 2u;
  uint64_t v19 = v6;
  int v7 = [*a1 bleRSSI];
  v25 |= 4u;
  float v20 = (float)v7;
  int v8 = [*a1 bleChannel];
  v25 |= 0x10u;
  int v24 = v8;
  uint64_t v9 = [*a1 discoveryFlags];
  v25 |= 0x20u;
  uint64_t v21 = v9;
  id v10 = [*a1 idsDeviceID];
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v10 UTF8String]);
  CLMicroLocationProtobufHelper::uuidFromStdString((uint64_t)__p, (uint64_t)v26);
  if (v17 < 0) {
    operator delete(__p[0]);
  }

  if (!v26[16])
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_94);
    }
    int v15 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl(&dword_25631F000, v15, OS_LOG_TYPE_ERROR, "Invalid CBDevice IDS UUID", (uint8_t *)__p, 2u);
    }
    goto LABEL_16;
  }
  v25 |= 0x80u;
  uint64_t v11 = MEMORY[0x263F8C740];
  if (v23 == MEMORY[0x263F8C740]) {
    operator new();
  }
  MEMORY[0x25A2A6090]();
  uint64_t v12 = [*a1 model];
  BOOL v13 = v12 == 0;

  if (v13)
  {
    v25 |= 0x40u;
    if (v22 == v11) {
      operator new();
    }
    MEMORY[0x25A2A6080]();
  }
  else
  {
    id v14 = [*a1 model];
    [v14 UTF8String];
    v25 |= 0x40u;
    if (v22 == v11) {
      operator new();
    }
    MEMORY[0x25A2A6080]();
  }
  CLMicroLocationProto::BleLeechedBeacons::BleLeechedBeacons(a2, (const CLMicroLocationProto::BleLeechedBeacons *)v18);
  *((unsigned char *)a2 + 72) = 1;
LABEL_21:
  CLMicroLocationProto::BleLeechedBeacons::~BleLeechedBeacons((CLMicroLocationProto::BleLeechedBeacons *)v18);
}

void sub_256477288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  CLMicroLocationProto::BleLeechedBeacons::~BleLeechedBeacons((CLMicroLocationProto::BleLeechedBeacons *)&a15);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::protobufFromNative(CLMicroLocationProtobufHelper *this@<X0>, CLMicroLocationProto::UwbRange *a2@<X8>)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 68) == 1)
  {
    CLMicroLocationProto::UwbRange::UwbRange((uint64_t)v14);
    uint64_t v15 = *(void *)this;
    int v5 = *((_DWORD *)this + 2);
    v21 |= 6u;
    int v16 = v5;
    if (*((char *)this + 55) < 0) {
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 4), *((void *)this + 5));
    }
    else {
      std::string __p = *(std::string *)((char *)this + 32);
    }
    CLMicroLocationProtobufHelper::uuidFromStdString((uint64_t)&__p, (uint64_t)v22);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v22[16])
    {
      v21 |= 0x10u;
      if (v18 == MEMORY[0x263F8C740]) {
        operator new();
      }
      MEMORY[0x25A2A6090]();
      v21 |= 8u;
      uint64_t v6 = v17;
      if (!v17) {
        operator new();
      }
      int v7 = *((_DWORD *)this + 4);
      v17[6] |= 1u;
      _DWORD v6[2] = v7;
      v21 |= 8u;
      int v8 = *((_DWORD *)this + 5);
      v6[6] |= 2u;
      void v6[3] = v8;
      v21 |= 8u;
      int v9 = *((_DWORD *)this + 6);
      v6[6] |= 4u;
      void v6[4] = v9;
      int v10 = *((unsigned __int8 *)this + 56);
      if (!CLMicroLocationProto::RecordingRequestType_IsValid((CLMicroLocationProto *)*((unsigned __int8 *)this + 56))) {
        __assert_rtn("set_devicetype", "microlocation.pb.h", 10112, "::CLMicroLocationProto::UwbRange_DeviceType_IsValid(value)");
      }
      int v19 = v10;
      v21 |= 0xE0u;
      uint64_t v20 = *(void *)((char *)this + 60);
      CLMicroLocationProto::UwbRange::UwbRange(a2, (const CLMicroLocationProto::UwbRange *)v14);
      char v11 = 1;
    }
    else
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_94);
      }
      uint64_t v12 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_25631F000, v12, OS_LOG_TYPE_ERROR, "Invalid UwbRange IDS UUID", (uint8_t *)&__p, 2u);
      }
      char v11 = 0;
      *(unsigned char *)a2 = 0;
    }
    *((unsigned char *)a2 + 64) = v11;
    CLMicroLocationProto::UwbRange::~UwbRange((CLMicroLocationProto::UwbRange *)v14);
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *((unsigned char *)a2 + 64) = 0;
  }
}

void sub_256477580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  MEMORY[0x25A2A6340](v16, 0x1081C40DCAC275BLL);
  CLMicroLocationProto::UwbRange::~UwbRange((CLMicroLocationProto::UwbRange *)&a16);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::measurementFromSourceImpl(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::Measurement *a2, const CLMicroLocationProto::WiFiRssi *a3)
{
  *((_DWORD *)this + 18) |= 4u;
  char v3 = (CLMicroLocationProto::WiFiRssi *)*((void *)this + 2);
  if (!v3) {
    operator new();
  }
  CLMicroLocationProto::WiFiRssi::CopyFrom(v3, a2);
}

void sub_256477654(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x1081C408C76C282);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::measurementFromSourceImpl(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::Measurement *a2, const CLMicroLocationProto::BleLeechedBeacons *a3)
{
  *((_DWORD *)this + 18) |= 0x40u;
  char v3 = (CLMicroLocationProto::BleLeechedBeacons *)*((void *)this + 6);
  if (!v3) {
    operator new();
  }
  CLMicroLocationProto::BleLeechedBeacons::CopyFrom(v3, a2);
}

void sub_2564776F4(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x10A1C40B0912749);
  _Unwind_Resume(a1);
}

float CLMicroLocationProtobufHelper::measurementFromSourceImpl(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::Measurement *a2, const CLMicroLocationProto::UwbRange *a3)
{
  *((_DWORD *)this + 18) |= 0x80u;
  char v3 = (CLMicroLocationProto::UwbRange *)*((void *)this + 7);
  if (!v3) {
    operator new();
  }
  return CLMicroLocationProto::UwbRange::CopyFrom(v3, a2);
}

void sub_256477794(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x10A1C4088FE0471);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificRecordingEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::RecordingEvent *a2, const CLMicroLocationProto::BatteryChargerConnected *a3)
{
  *((_DWORD *)this + 35) |= 0x20u;
  char v3 = (CLMicroLocationProto::BatteryChargerConnected *)*((void *)this + 5);
  if (!v3) {
    operator new();
  }
  CLMicroLocationProto::BatteryChargerConnected::CopyFrom(v3, a2);
}

void sub_256477834(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x1081C40A085CBA5);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificRecordingEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::RecordingEvent *a2, const CLMicroLocationProto::ReceivedEventAction *a3)
{
  *((_DWORD *)this + 35) |= 4u;
  char v3 = (CLMicroLocationProto::ReceivedEventAction *)*((void *)this + 2);
  if (!v3) {
    operator new();
  }
  CLMicroLocationProto::ReceivedEventAction::CopyFrom(v3, a2);
}

void sub_2564778D4(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x10A1C40D3419C06);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificRecordingEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::RecordingEvent *a2, const CLMicroLocationProto::ForcedRecording *a3)
{
  *((_DWORD *)this + 35) |= 0x40u;
  char v3 = (CLMicroLocationProto::ForcedRecording *)*((void *)this + 6);
  if (!v3) {
    operator new();
  }
  CLMicroLocationProto::ForcedRecording::CopyFrom(v3, a2);
}

void sub_256477974(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x1081C40A085CBA5);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificRecordingEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::RecordingEvent *a2, const CLMicroLocationProto::HomeKitAccessory *a3)
{
  *((_DWORD *)this + 35) |= 0x80u;
  char v3 = (CLMicroLocationProto::HomeKitAccessory *)*((void *)this + 7);
  if (!v3) {
    operator new();
  }
  CLMicroLocationProto::HomeKitAccessory::CopyFrom(v3, a2);
}

void sub_256477A14(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x10A1C406EC470D0);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificRecordingEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::RecordingEvent *a2, const CLMicroLocationProto::HomeKitScene *a3)
{
  *((_DWORD *)this + 35) |= 0x100u;
  char v3 = (CLMicroLocationProto::HomeKitScene *)*((void *)this + 8);
  if (!v3) {
    operator new();
  }
  CLMicroLocationProto::HomeKitScene::CopyFrom(v3, a2);
}

void sub_256477AB4(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x10A1C40E994B4B5);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificConfiguration(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::Configuration *a2, const CLMicroLocationProto::WifiHistogram *a3)
{
  *((_DWORD *)this + 12) |= 4u;
  char v3 = (CLMicroLocationProto::WifiHistogram *)*((void *)this + 2);
  if (!v3) {
    operator new();
  }
  CLMicroLocationProto::WifiHistogram::CopyFrom(v3, a2);
}

void sub_256477B54(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x1081C40845F3030);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificConfiguration(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::Configuration *a2, const CLMicroLocationProto::AnchorAppearanceConfiguration *a3)
{
  *((_DWORD *)this + 12) |= 8u;
  char v3 = (CLMicroLocationProto::AnchorAppearanceConfiguration *)*((void *)this + 3);
  if (!v3) {
    operator new();
  }
  CLMicroLocationProto::AnchorAppearanceConfiguration::CopyFrom(v3, a2);
}

void sub_256477BF4(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x10A1C40F536243ELL);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificConfiguration(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::Configuration *a2, const CLMicroLocationProto::AnchorValueStatisticsConfiguration *a3)
{
  *((_DWORD *)this + 12) |= 0x10u;
  char v3 = (CLMicroLocationProto::AnchorValueStatisticsConfiguration *)*((void *)this + 4);
  if (!v3) {
    operator new();
  }
  CLMicroLocationProto::AnchorValueStatisticsConfiguration::CopyFrom(v3, a2);
}

void sub_256477C94(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x10A1C40BEA49330);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificRecordingEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::RecordingEvent *a2, const CLMicroLocationProto::BacklightOn *a3)
{
  *((_DWORD *)this + 35) |= 0x10u;
  char v3 = (CLMicroLocationProto::BacklightOn *)*((void *)this + 4);
  if (!v3) {
    operator new();
  }
  CLMicroLocationProto::BacklightOn::CopyFrom(v3, a2);
}

void sub_256477D34(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x10A1C40F536243ELL);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificRecordingEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::RecordingEvent *a2, const CLMicroLocationProto::RecordingRequest *a3)
{
  *((_DWORD *)this + 35) |= 0x400u;
  char v3 = (CLMicroLocationProto::RecordingRequest *)*((void *)this + 11);
  if (!v3) {
    operator new();
  }
  CLMicroLocationProto::RecordingRequest::CopyFrom(v3, a2);
}

void sub_256477DD4(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x10A1C40D3419C06);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificRecordingEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::RecordingEvent *a2, const CLMicroLocationProto::TruthLabelDonation *a3)
{
  *((_DWORD *)this + 35) |= 0x1000u;
  char v3 = (CLMicroLocationProto::TruthLabelDonation *)*((void *)this + 12);
  if (!v3) {
    operator new();
  }
  CLMicroLocationProto::TruthLabelDonation::CopyFrom(v3, a2);
}

void sub_256477E74(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x10A1C406601F8D4);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::BatteryChargerConnected *a3)
{
  *((_DWORD *)this + 73) |= 8u;
  char v3 = (CLMicroLocationProto::BatteryChargerConnected *)*((void *)this + 4);
  if (!v3) {
    operator new();
  }
  CLMicroLocationProto::BatteryChargerConnected::CopyFrom(v3, a2);
}

void sub_256477F14(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x1081C40A085CBA5);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::ReceivedEventAction *a3)
{
  *((_DWORD *)this + 73) |= 1u;
  char v3 = (CLMicroLocationProto::ReceivedEventAction *)*((void *)this + 1);
  if (!v3) {
    operator new();
  }
  CLMicroLocationProto::ReceivedEventAction::CopyFrom(v3, a2);
}

void sub_256477FB4(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x10A1C40D3419C06);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::ForcedRecording *a3)
{
  *((_DWORD *)this + 73) |= 0x10u;
  char v3 = (CLMicroLocationProto::ForcedRecording *)*((void *)this + 5);
  if (!v3) {
    operator new();
  }
  CLMicroLocationProto::ForcedRecording::CopyFrom(v3, a2);
}

void sub_256478054(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x1081C40A085CBA5);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::HomeKitAccessory *a3)
{
  *((_DWORD *)this + 73) |= 0x20u;
  char v3 = (CLMicroLocationProto::HomeKitAccessory *)*((void *)this + 6);
  if (!v3) {
    operator new();
  }
  CLMicroLocationProto::HomeKitAccessory::CopyFrom(v3, a2);
}

void sub_2564780F4(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x10A1C406EC470D0);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::HomeKitScene *a3)
{
  *((_DWORD *)this + 73) |= 0x40u;
  char v3 = (CLMicroLocationProto::HomeKitScene *)*((void *)this + 7);
  if (!v3) {
    operator new();
  }
  CLMicroLocationProto::HomeKitScene::CopyFrom(v3, a2);
}

void sub_256478194(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x10A1C40E994B4B5);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::BacklightOn *a3)
{
  *((_DWORD *)this + 73) |= 4u;
  char v3 = (CLMicroLocationProto::BacklightOn *)*((void *)this + 3);
  if (!v3) {
    operator new();
  }
  CLMicroLocationProto::BacklightOn::CopyFrom(v3, a2);
}

void sub_256478234(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x10A1C40F536243ELL);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::RecordingRequest *a3)
{
  *((_DWORD *)this + 73) |= 0x100u;
  char v3 = (CLMicroLocationProto::RecordingRequest *)*((void *)this + 9);
  if (!v3) {
    operator new();
  }
  CLMicroLocationProto::RecordingRequest::CopyFrom(v3, a2);
}

void sub_2564782D4(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x10A1C40D3419C06);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::LearnModel *a3)
{
  *((_DWORD *)this + 73) |= 0x400u;
  char v3 = (CLMicroLocationProto::LearnModel *)*((void *)this + 11);
  if (!v3) {
    operator new();
  }
  CLMicroLocationProto::LearnModel::CopyFrom(v3, a2);
}

void sub_256478374(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x1081C40A085CBA5);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::LearnCompleted *a3)
{
  *((_DWORD *)this + 73) |= 0x800u;
  char v3 = (CLMicroLocationProto::LearnCompleted *)*((void *)this + 12);
  if (!v3) {
    operator new();
  }
  CLMicroLocationProto::LearnCompleted::CopyFrom(v3, a2);
}

void sub_256478414(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x1081C40A085CBA5);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::SensorsScanComplete *a3)
{
  *((_DWORD *)this + 73) |= 0x1000u;
  char v3 = (CLMicroLocationProto::SensorsScanComplete *)*((void *)this + 13);
  if (!v3) {
    operator new();
  }
  CLMicroLocationProto::SensorsScanComplete::CopyFrom(v3, a2);
}

void sub_2564784B4(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x1081C40A085CBA5);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::StartSpectating *a3)
{
  *((_DWORD *)this + 73) |= 0x2000u;
  char v3 = (CLMicroLocationProto::StartSpectating *)*((void *)this + 14);
  if (!v3) {
    operator new();
  }
  CLMicroLocationProto::StartSpectating::CopyFrom(v3, a2);
}

void sub_256478554(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x1081C40A085CBA5);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::StopSpectating *a3)
{
  *((_DWORD *)this + 73) |= 0x4000u;
  char v3 = (CLMicroLocationProto::StopSpectating *)*((void *)this + 15);
  if (!v3) {
    operator new();
  }
  CLMicroLocationProto::StopSpectating::CopyFrom(v3, a2);
}

void sub_2564785F4(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x1081C40A085CBA5);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::ServiceDelete *a3)
{
  *((_DWORD *)this + 73) |= 0x10000u;
  char v3 = (CLMicroLocationProto::ServiceDelete *)*((void *)this + 17);
  if (!v3) {
    operator new();
  }
  CLMicroLocationProto::ServiceDelete::CopyFrom(v3, a2);
}

void sub_256478694(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x10A1C40BEA49330);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::ServiceConnect *a3)
{
  *((_DWORD *)this + 73) |= 0x20000u;
  char v3 = (CLMicroLocationProto::ServiceConnect *)*((void *)this + 18);
  if (!v3) {
    operator new();
  }
  CLMicroLocationProto::ServiceConnect::CopyFrom(v3, a2);
}

void sub_256478734(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x10A1C40BEA49330);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::ServiceDisconnect *a3)
{
  *((_DWORD *)this + 73) |= 0x40000u;
  char v3 = (CLMicroLocationProto::ServiceDisconnect *)*((void *)this + 19);
  if (!v3) {
    operator new();
  }
  CLMicroLocationProto::ServiceDisconnect::CopyFrom(v3, a2);
}

void sub_2564787D4(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x10A1C40BEA49330);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::ServiceStartUpdating *a3)
{
  *((_DWORD *)this + 73) |= 0x80000u;
  char v3 = (CLMicroLocationProto::ServiceStartUpdating *)*((void *)this + 20);
  if (!v3) {
    operator new();
  }
  CLMicroLocationProto::ServiceStartUpdating::CopyFrom(v3, a2);
}

void sub_256478874(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x10A1C40A5BE3A87);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::ServiceStopUpdating *a3)
{
  *((_DWORD *)this + 73) |= 0x100000u;
  char v3 = (CLMicroLocationProto::ServiceStopUpdating *)*((void *)this + 21);
  if (!v3) {
    operator new();
  }
  CLMicroLocationProto::ServiceStopUpdating::CopyFrom(v3, a2);
}

void sub_256478914(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x10A1C40BEA49330);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::RequestObservation *a3)
{
  *((_DWORD *)this + 73) |= 0x200000u;
  char v3 = (CLMicroLocationProto::RequestObservation *)*((void *)this + 22);
  if (!v3) {
    operator new();
  }
  CLMicroLocationProto::RequestObservation::CopyFrom(v3, a2);
}

void sub_2564789B4(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x10A1C40082A98A3);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::RequestPrediction *a3)
{
  *((_DWORD *)this + 73) |= 0x400000u;
  char v3 = (CLMicroLocationProto::RequestPrediction *)*((void *)this + 23);
  if (!v3) {
    operator new();
  }
  CLMicroLocationProto::RequestPrediction::CopyFrom(v3, a2);
}

void sub_256478A54(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x10A1C406601F8D4);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::MiloInit *a3)
{
  *((_DWORD *)this + 73) |= 0x800000u;
  char v3 = (CLMicroLocationProto::MiloInit *)*((void *)this + 24);
  if (!v3) {
    operator new();
  }
  CLMicroLocationProto::MiloInit::CopyFrom(v3, a2);
}

void sub_256478AF4(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x10A1C40F536243ELL);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::MotionEvent *a3)
{
  *((_DWORD *)this + 73) |= 0x1000000u;
  char v3 = (CLMicroLocationProto::MotionEvent *)*((void *)this + 25);
  if (!v3) {
    operator new();
  }
  CLMicroLocationProto::MotionEvent::CopyFrom(v3, a2);
}

void sub_256478B94(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x10A1C40FBBAD689);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::LegacyThrottle *a3)
{
  *((_DWORD *)this + 73) |= 0x2000000u;
  char v3 = (CLMicroLocationProto::LegacyThrottle *)*((void *)this + 26);
  if (!v3) {
    operator new();
  }
  CLMicroLocationProto::LegacyThrottle::CopyFrom(v3, a2);
}

void sub_256478C34(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x10A1C40F536243ELL);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::RetrievedLoi *a3)
{
  *((_DWORD *)this + 73) |= 0x4000000u;
  char v3 = (CLMicroLocationProto::RetrievedLoi *)*((void *)this + 27);
  if (!v3) {
    operator new();
  }
  CLMicroLocationProto::RetrievedLoi::CopyFrom(v3, a2);
}

void sub_256478CD4(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x10A1C40A8383B57);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::TriggerEvent *a3)
{
  *((_DWORD *)this + 73) |= 0x8000000u;
  char v3 = (CLMicroLocationProto::TriggerEvent *)*((void *)this + 28);
  if (!v3) {
    operator new();
  }
  CLMicroLocationProto::TriggerEvent::CopyFrom(v3, a2);
}

void sub_256478D74(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x10A1C40640848C1);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::LegacyClientStatusUpdate *a3)
{
  *((_DWORD *)this + 73) |= 0x10000000u;
  char v3 = (CLMicroLocationProto::LegacyClientStatusUpdate *)*((void *)this + 29);
  if (!v3) {
    operator new();
  }
  CLMicroLocationProto::LegacyClientStatusUpdate::CopyFrom(v3, a2);
}

void sub_256478E14(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x1081C40DCAC275BLL);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::SpectatingMotionUpdate *a3)
{
  *((_DWORD *)this + 73) |= 0x20000000u;
  char v3 = (CLMicroLocationProto::SpectatingMotionUpdate *)*((void *)this + 30);
  if (!v3) {
    operator new();
  }
  CLMicroLocationProto::SpectatingMotionUpdate::CopyFrom(v3, a2);
}

void sub_256478EB4(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x1081C40AEC5023ALL);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::EnabledStateUpdate *a3)
{
  *((_DWORD *)this + 73) |= 0x40000000u;
  char v3 = (CLMicroLocationProto::EnabledStateUpdate *)*((void *)this + 31);
  if (!v3) {
    operator new();
  }
  CLMicroLocationProto::EnabledStateUpdate::CopyFrom(v3, a2);
}

void sub_256478F54(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x1081C40DCAC275BLL);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::ScreenStateUpdate *a3)
{
  *((_DWORD *)this + 73) |= 0x80000000;
  char v3 = (CLMicroLocationProto::ScreenStateUpdate *)*((void *)this + 32);
  if (!v3) {
    operator new();
  }
  CLMicroLocationProto::ScreenStateUpdate::CopyFrom(v3, a2);
}

void sub_256478FF4(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x1081C40AEC5023ALL);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::CloudBackupExport *a3)
{
  *((_DWORD *)this + 74) |= 1u;
  char v3 = (CLMicroLocationProto::CloudBackupExport *)*((void *)this + 33);
  if (!v3) {
    operator new();
  }
  CLMicroLocationProto::CloudBackupExport::CopyFrom(v3, a2);
}

void sub_256479094(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x1081C40A085CBA5);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::CloudBackupImport *a3)
{
  *((_DWORD *)this + 74) |= 2u;
  char v3 = (CLMicroLocationProto::CloudBackupImport *)*((void *)this + 34);
  if (!v3) {
    operator new();
  }
  CLMicroLocationProto::CloudBackupImport::CopyFrom(v3, a2);
}

void sub_256479134(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x1081C40A085CBA5);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::DataMigration *a3)
{
  *((_DWORD *)this + 74) |= 4u;
  char v3 = (CLMicroLocationProto::DataMigration *)*((void *)this + 35);
  if (!v3) {
    operator new();
  }
  CLMicroLocationProto::DataMigration::CopyFrom(v3, a2);
}

void sub_2564791D4(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x1081C40A085CBA5);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::getClientRecordingRequest(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  id v6 = a2;
  CLMicroLocationProto::RecordingRequest::RecordingRequest((CLMicroLocationProto::RecordingRequest *)a3);
  int v7 = (std::string *)MEMORY[0x263F8C740];
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v22 = (const char *)a1;
    if (*(char *)(a1 + 23) < 0) {
      uint64_t v22 = *(const char **)a1;
    }
    *(_DWORD *)(a3 + 44) |= 4u;
    int v8 = *(std::string **)(a3 + 16);
    if (v8 == v7) {
      operator new();
    }
    std::string::operator=(v8, (const std::string *)a1);
    if (v6) {
      goto LABEL_7;
    }
LABEL_15:
    id v14 = 0;
    uint64_t v15 = 0;
    uint64_t v11 = 1;
    goto LABEL_22;
  }
  uint64_t v22 = "";
  if (!v6) {
    goto LABEL_15;
  }
LABEL_7:
  int v9 = [v6 objectForKey:@"private.MicroLocation.forced.recordingRequest"];
  int v10 = [v9 BOOLValue];

  if (v10) {
    uint64_t v11 = 2;
  }
  else {
    uint64_t v11 = 1;
  }
  uint64_t v12 = [v6 objectForKey:@"private.MicroLocation.truthtag.identifier"];

  if (v12)
  {
    BOOL v13 = [v6 objectForKeyedSubscript:@"private.MicroLocation.truthtag.identifier"];
    *(void *)uint64_t buf = 0;
    *(void *)int v24 = 0;
    [v13 getUUIDBytes:buf];
    *(_DWORD *)(a3 + 44) |= 0x10u;
    if (*(std::string **)(a3 + 32) == v7) {
      operator new();
    }
    MEMORY[0x25A2A6090]();
    id v14 = v13;
  }
  else
  {
    id v14 = 0;
  }
  uint64_t v16 = [v6 objectForKey:@"private.MicroLocation.recordingTriggerUUID"];
  BOOL v17 = v16 == 0;

  if (v17)
  {
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = [v6 objectForKeyedSubscript:@"private.MicroLocation.recordingTriggerUUID"];
    *(void *)uint64_t buf = 0;
    *(void *)int v24 = 0;
    [v15 getUUIDBytes:buf];
    *(_DWORD *)(a3 + 44) |= 8u;
    if (*(std::string **)(a3 + 24) == v7) {
      operator new();
    }
    MEMORY[0x25A2A6090]();
  }
LABEL_22:
  if (!CLMicroLocationProto::RecordingRequestType_IsValid((CLMicroLocationProto *)v11)) {
    __assert_rtn("set_recordingrequesttype", "microlocation.pb.h", 13554, "::CLMicroLocationProto::RecordingRequestType_IsValid(value)");
  }
  *(_DWORD *)(a3 + 44) |= 2u;
  *(_DWORD *)(a3 + 12) = v11;
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_94);
  }
  uint64_t v18 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    if (v11 == 2) {
      int v19 = "YES";
    }
    else {
      int v19 = "NO";
    }
    if (v14)
    {
      int v7 = [v14 UUIDString];
      uint64_t v20 = (const char *)unk_2705032F8(v7, "UTF8String");
    }
    else
    {
      uint64_t v20 = "";
    }
    if (v15)
    {
      id v3 = [v15 UUIDString];
      int v21 = (const char *)[v3 UTF8String];
    }
    else
    {
      int v21 = "";
    }
    *(_DWORD *)uint64_t buf = 68290051;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)int v24 = 2082;
    *(void *)&v24[2] = "";
    __int16 v25 = 2082;
    __int16 v26 = v22;
    __int16 v27 = 2082;
    __int16 v28 = v19;
    __int16 v29 = 2081;
    int v30 = v20;
    __int16 v31 = 2082;
    long long v32 = v21;
    _os_log_impl(&dword_25631F000, v18, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"client request, recording scan\", \"client\":%{public, location:escape_only}s, \"forced?\":%{public, location:escape_only}s, \"truth label\":%{private, location:escape_only}s, \"recording trigger UUID\":%{public, location:escape_only}s}", buf, 0x3Au);
    if (v15) {

    }
    if (v14) {
  }
    }
}

void sub_256479610(_Unwind_Exception *a1)
{
  if (v3) {
  CLMicroLocationProto::RecordingRequest::~RecordingRequest(v2);
  }

  _Unwind_Resume(a1);
}

id CLMicroLocationProtobufHelper::createRecordingRequestDictionary(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v15[2] = *MEMORY[0x263EF8340];
  v15[0] = a2;
  v15[1] = a3;
  id v6 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDBytes:v15];
  if (*(unsigned char *)(a4 + 16))
  {
    id v7 = objc_alloc(MEMORY[0x263F08C38]);
    if (!*(unsigned char *)(a4 + 16)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    int v8 = (void *)[v7 initWithUUIDBytes:a4];
    id v9 = objc_alloc(NSDictionary);
    if (a1) {
      uint64_t v10 = MEMORY[0x263EFFA88];
    }
    else {
      uint64_t v10 = MEMORY[0x263EFFA80];
    }
    uint64_t v11 = objc_msgSend(v9, "initWithObjectsAndKeys:", v10, @"private.MicroLocation.forced.recordingRequest", v6, @"private.MicroLocation.recordingTriggerUUID", v8, @"private.MicroLocation.truthtag.identifier", 0);
  }
  else
  {
    id v12 = objc_alloc(NSDictionary);
    if (a1) {
      uint64_t v13 = MEMORY[0x263EFFA88];
    }
    else {
      uint64_t v13 = MEMORY[0x263EFFA80];
    }
    uint64_t v11 = objc_msgSend(v12, "initWithObjectsAndKeys:", v13, @"private.MicroLocation.forced.recordingRequest", v6, @"private.MicroLocation.recordingTriggerUUID", 0);
  }

  return v11;
}

void sub_256479828(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationProtobufHelper::getTriggerUuidFromEvent@<X0>(uint64_t this@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = this;
  int v5 = *(_DWORD *)(this + 140);
  if ((v5 & 4) != 0)
  {
    uint64_t v6 = *(void *)(this + 16);
    if (!v6)
    {
      this = CLMicroLocationProto::RecordingEvent::default_instance((CLMicroLocationProto::RecordingEvent *)this);
      uint64_t v6 = *(void *)(this + 16);
    }
    if ((*(unsigned char *)(v6 + 44) & 8) != 0)
    {
      uint64_t v8 = *(void *)(v3 + 16);
      if (!v8)
      {
        this = CLMicroLocationProto::RecordingEvent::default_instance((CLMicroLocationProto::RecordingEvent *)this);
        uint64_t v8 = *(void *)(this + 16);
      }
      goto LABEL_14;
    }
    int v5 = *(_DWORD *)(v3 + 140);
  }
  if ((v5 & 0x400) == 0) {
    goto LABEL_20;
  }
  uint64_t v7 = *(void *)(v3 + 88);
  if (!v7)
  {
    this = CLMicroLocationProto::RecordingEvent::default_instance((CLMicroLocationProto::RecordingEvent *)this);
    uint64_t v7 = *(void *)(this + 88);
  }
  if ((*(unsigned char *)(v7 + 44) & 8) == 0) {
    goto LABEL_20;
  }
  uint64_t v8 = *(void *)(v3 + 88);
  if (!v8)
  {
    this = CLMicroLocationProto::RecordingEvent::default_instance((CLMicroLocationProto::RecordingEvent *)this);
    uint64_t v8 = *(void *)(this + 88);
  }
LABEL_14:
  id v9 = *(uint64_t ***)(v8 + 24);
  int v10 = *((char *)v9 + 23);
  if (v10 < 0)
  {
    if (v9[1] != (uint64_t *)16)
    {
LABEL_20:
      char v11 = 0;
      *a2 = 0;
      goto LABEL_21;
    }
    id v9 = (uint64_t **)*v9;
  }
  else if (v10 != 16)
  {
    goto LABEL_20;
  }
  *(_OWORD *)a2 = *(_OWORD *)v9;
  char v11 = 1;
LABEL_21:
  a2[16] = v11;
  return this;
}

CFAbsoluteTime CLMicroLocationProtobufHelper::getEventReceivedTS(CLMicroLocationProtobufHelper *this, const CLMicroLocationProto::RecordingEvent *a2)
{
  if ((*((unsigned char *)this + 140) & 2) != 0) {
    return *((double *)this + 1);
  }
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_94);
  }
  int v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_ERROR, "Event Received without Timestamp!", v4, 2u);
  }
  return cl::chrono::CFAbsoluteTimeClock::now();
}

void CLMicroLocationProtobufHelper::measurementFromSourceData<CLMicroLocationProto::WiFiRssi &,true>(uint64_t a1@<X0>, CLMicroLocationProto::Measurement *a2@<X8>)
{
  CLMicroLocationProto::Measurement::Measurement((CLMicroLocationProto::Measurement *)v7);
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  if (!CLMicroLocationProto::DataType_IsValid((CLMicroLocationProto *)v4)) {
    __assert_rtn("set_datatype", "microlocation.pb.h", 10718, "::CLMicroLocationProto::DataType_IsValid(value)");
  }
  uint64_t v6 = *(void *)(a1 + 8);
  unsigned int v8 = v4;
  v9 |= 3u;
  v7[1] = v6;
  CLMicroLocationProtobufHelper::measurementFromSourceImpl((CLMicroLocationProtobufHelper *)v7, (CLMicroLocationProto::Measurement *)a1, v5);
  CLMicroLocationProto::Measurement::Measurement(a2, (const CLMicroLocationProto::Measurement *)v7);
  *((unsigned char *)a2 + 80) = 1;
  CLMicroLocationProto::Measurement::~Measurement((CLMicroLocationProto::Measurement *)v7);
}

void sub_256479A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double CLMicroLocationProtobufHelper::getMeasurementValue(CLMicroLocationProtobufHelper *this, const CLMicroLocationProto::Measurement *a2)
{
  switch(*((_DWORD *)this + 16))
  {
    case 1:
      uint64_t v2 = *((void *)this + 2);
      if (!v2) {
        uint64_t v2 = *(void *)(CLMicroLocationProto::Measurement::default_instance(this) + 16);
      }
      goto LABEL_14;
    case 2:
      uint64_t v2 = *((void *)this + 3);
      if (!v2) {
        uint64_t v2 = *(void *)(CLMicroLocationProto::Measurement::default_instance(this) + 24);
      }
      goto LABEL_14;
    case 3:
      uint64_t v2 = *((void *)this + 4);
      if (!v2) {
        uint64_t v2 = *(void *)(CLMicroLocationProto::Measurement::default_instance(this) + 32);
      }
      goto LABEL_14;
    case 4:
      uint64_t v2 = *((void *)this + 5);
      if (!v2) {
        uint64_t v2 = *(void *)(CLMicroLocationProto::Measurement::default_instance(this) + 40);
      }
      goto LABEL_14;
    case 5:
      uint64_t v2 = *((void *)this + 6);
      if (!v2) {
        uint64_t v2 = *(void *)(CLMicroLocationProto::Measurement::default_instance(this) + 48);
      }
      goto LABEL_14;
    case 6:
      uint64_t v2 = *((void *)this + 7);
      if (!v2) {
        uint64_t v2 = *(void *)(CLMicroLocationProto::Measurement::default_instance(this) + 56);
      }
LABEL_14:
      double result = *(float *)(v2 + 20);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t *CLMicroLocationProtobufHelper::convertToHumanReadableString@<X0>(CLMacAddress *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  v5.var0 = CLMacAddress::newFromUint64(this, a2);
  return CLMacAddress::str(a3, &v5);
}

unsigned char *CLMicroLocationProtobufHelper::convertToHumanReadableString@<X0>(CLMicroLocationProtobufHelper *this@<X0>, uint64_t a2@<X8>)
{
  CLMacAddress v5 = (char *)operator new(0x28uLL);
  *(void *)a2 = v5;
  *(_OWORD *)(a2 + 8) = xmmword_256514540;
  *(_OWORD *)CLMacAddress v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  *(void *)(v5 + 29) = 0;
  return boost::uuids::to_chars<char *>((uint64_t)this, v5);
}

void sub_256479BF8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *CLMicroLocationProtobufHelper::ModelTypeToDomain@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a2, off_2653FA118[a1]);
}

void *CLMicroLocationProtobufHelper::modelTypeToString@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a2, off_2653FA138[a1]);
}

__CFString *CLMicroLocationProtobufHelper::getRecordingTriggerString(CLMicroLocationProtobufHelper *this, const CLMicroLocationProto::RecordingEvent *a2)
{
  int v2 = *((_DWORD *)this + 18);
  double result = @"receivedEventAction";
  switch(v2)
  {
    case 1:
      return result;
    case 2:
      double result = @"appLaunch";
      break;
    case 3:
    case 6:
    case 8:
    case 11:
      goto LABEL_6;
    case 4:
      double result = @"backlightOn";
      break;
    case 5:
      double result = @"batteryChargerConnected";
      break;
    case 7:
      double result = @"forcedRecording";
      break;
    case 9:
      double result = @"homekitAccessory";
      break;
    case 10:
      double result = @"homekitScene";
      break;
    case 12:
      double result = @"nowPlaying";
      break;
    case 13:
      double result = @"recordingRequest";
      break;
    case 14:
      double result = @"truthLabelDonation";
      break;
    default:
      if (v2 == 42)
      {
        double result = @"RequestObservation";
      }
      else if (v2 == 43)
      {
        double result = @"RequestPrediction";
      }
      else
      {
LABEL_6:
        double result = @"triggerInvalid";
      }
      break;
  }
  return result;
}

void *CLMicroLocationProtobufHelper::serviceQualityReasonToString@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a2, off_2653FA158[a1]);
}

uint64_t CLMiLoProtobufWrapper::Measurement::isInvalidWiFiRssi(CLMiLoProtobufWrapper::Measurement *this)
{
  if (*((_DWORD *)this + 16) == 1) {
    return (*((unsigned __int8 *)this + 81) >> 4) & 1;
  }
  else {
    return 0;
  }
}

uint64_t CLMiLoProtobufWrapper::Measurement::isOffChannelWiFiRssi(CLMiLoProtobufWrapper::Measurement *this)
{
  if (*((_DWORD *)this + 16) == 1) {
    return *((unsigned __int8 *)this + 81) >> 7;
  }
  else {
    return 0;
  }
}

void CLMiLoProtobufWrapper::measurementWrappersFromWiFiRssiWrappers(void *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<CLMiLoProtobufWrapper::Measurement>::reserve(a2, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[1] - *a1) >> 3));
  unsigned int v4 = (int *)a1[1];
  if ((int *)*a1 != v4)
  {
    CLMacAddress v5 = (int *)(*a1 + 48);
    do
    {
      CLMicroLocationProtobufHelper::measurementFromSourceData<CLMicroLocationProto::WiFiRssi &,true>((uint64_t)(v5 - 12), (CLMicroLocationProto::Measurement *)v9);
      if (v10)
      {
        unint64_t v6 = a2[1];
        if (v6 >= a2[2])
        {
          uint64_t v7 = std::vector<CLMiLoProtobufWrapper::Measurement>::__emplace_back_slow_path<CLMicroLocationProto::Measurement,unsigned int &>(a2, (CLMicroLocationProto::Measurement *)v9, v5);
        }
        else
        {
          CLMiLoProtobufWrapper::Measurement::Measurement((CLMicroLocationProto::Measurement *)a2[1], (CLMicroLocationProto::Measurement *)v9, *v5);
          uint64_t v7 = v6 + 88;
          a2[1] = v6 + 88;
        }
        a2[1] = v7;
        if (v10) {
          CLMicroLocationProto::Measurement::~Measurement((CLMicroLocationProto::Measurement *)v9);
        }
      }
      unsigned int v8 = v5 + 2;
      v5 += 14;
    }
    while (v8 != v4);
  }
}

void sub_256479E7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<CLMiLoProtobufWrapper::Measurement>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMiLoProtobufWrapper::Measurement>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0x2E8BA2E8BA2E8BA3 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x2E8BA2E8BA2E8BBLL) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<CLMiLoServiceTable::Entry>>(result, a2);
    v7[1] = v7[0] + v5;
    _DWORD v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 88 * v6;
    std::vector<CLMiLoProtobufWrapper::Measurement>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<CLMiLoProtobufWrapper::Measurement>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_256479F68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMiLoProtobufWrapper::Measurement>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_74()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

uint64_t std::vector<CLMiLoProtobufWrapper::Measurement>::__emplace_back_slow_path<CLMicroLocationProto::Measurement,unsigned int &>(uint64_t *a1, CLMicroLocationProto::Measurement *a2, int *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x2E8BA2E8BA2E8BALL) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v4) >> 3);
  if (2 * v10 > v6) {
    unint64_t v6 = 2 * v10;
  }
  if (v10 >= 0x1745D1745D1745DLL) {
    unint64_t v11 = 0x2E8BA2E8BA2E8BALL;
  }
  else {
    unint64_t v11 = v6;
  }
  int v19 = a1 + 2;
  if (v11) {
    id v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMiLoServiceTable::Entry>>(v9, v11);
  }
  else {
    id v12 = 0;
  }
  uint64_t v15 = v12;
  uint64_t v16 = (CLMicroLocationProto::Measurement *)&v12[88 * v5];
  BOOL v17 = v16;
  uint64_t v18 = &v12[88 * v11];
  CLMiLoProtobufWrapper::Measurement::Measurement(v16, a2, *a3);
  BOOL v17 = (CLMicroLocationProto::Measurement *)((char *)v16 + 88);
  std::vector<CLMiLoProtobufWrapper::Measurement>::__swap_out_circular_buffer(a1, &v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<CLMiLoProtobufWrapper::Measurement>::~__split_buffer((uint64_t)&v15);
  return v13;
}

void sub_25647A0D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMiLoProtobufWrapper::Measurement>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

CLMicroLocationProto::Measurement *CLMiLoProtobufWrapper::Measurement::Measurement(CLMicroLocationProto::Measurement *a1, CLMicroLocationProto::Measurement *a2, int a3)
{
  CLMicroLocationProto::Measurement::Measurement(a1);
  *((_DWORD *)v6 + 20) = a3;
  CLMicroLocationProto::Measurement::Swap(v6, a2);
  return a1;
}

void sub_25647A12C(_Unwind_Exception *a1)
{
  CLMicroLocationProto::Measurement::~Measurement(v1);
  _Unwind_Resume(a1);
}

void CLMicroLocationLegacyEventRecordingRequest::handleEvent(uint64_t a1@<X1>, void *a2@<X2>, double *a3@<X3>, char *a4@<X8>)
{
  id v7 = a2;
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v11 = *(std::string *)a1;
  }
  char v12 = 1;
  CLMicroLocationProtobufHelper::getClientRecordingRequest((uint64_t)&v11, v7, (uint64_t)v13);
  if (v12 && SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  CLMicroLocationProtobufHelper::createRecordingEvent<CLMicroLocationProto::RecordingRequest>((CLMicroLocationProto::RecordingEvent *)v13, 0, 0, 0, (CLMicroLocationProto *)3, (uint64_t)v8, *a3);
  char v9 = 1;
  CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)v10, (const CLMicroLocationProto::RecordingEvent *)v8);
  *a4 = v9;
  CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)(a4 + 8), (const CLMicroLocationProto::RecordingEvent *)v10);
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v10);
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v8);
  CLMicroLocationProto::RecordingRequest::~RecordingRequest((CLMicroLocationProto::RecordingRequest *)v13);
}

void sub_25647A24C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25647A28C()
{
  if (*(unsigned char *)(v0 - 104))
  {
    if (*(char *)(v0 - 105) < 0) {
      operator delete(*(void **)(v0 - 128));
    }
  }
  JUMPOUT(0x25647A280);
}

uint64_t sub_25647A2F0()
{
  return 0;
}

void sub_25647A568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_25647AE68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationModelTable::Entry::Entry(uint64_t a1, uint64_t a2, uint64_t a3, CLMicroLocationProto::Model *a4, uint64_t a5, long long *a6, uint64_t a7, uint64_t a8, double a9)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a9;
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a4 + 13);
  CLMicroLocationProto::Model::Model((CLMicroLocationProto::Model *)(a1 + 32));
  *(unsigned char *)(a1 + 240) = 0;
  *(unsigned char *)(a1 + 264) = 0;
  long long v15 = *a6;
  *(unsigned char *)(a1 + 288) = *((unsigned char *)a6 + 16);
  *(_OWORD *)(a1 + 272) = v15;
  *(void *)(a1 + 289) = a7;
  *(void *)(a1 + 297) = a8;
  CLMicroLocationProto::Model::Swap(v16, a4);
  if (!*(unsigned char *)(a5 + 24)) {
    goto LABEL_4;
  }
  if (*(char *)(a5 + 23) < 0)
  {
    if (*(void *)(a5 + 8)) {
      goto LABEL_4;
    }
  }
  else if (*(unsigned char *)(a5 + 23))
  {
LABEL_4:
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>((std::string *)(a1 + 240), (const std::string *)a5);
    return a1;
  }
  if (*(unsigned char *)(a1 + 264))
  {
    if (*(char *)(a1 + 263) < 0) {
      operator delete(*(void **)(a1 + 240));
    }
    *(unsigned char *)(a1 + 264) = 0;
  }
  return a1;
}

void sub_25647DCE4(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v1 + 264))
  {
    if (*(char *)(v1 + 263) < 0) {
      operator delete(*v3);
    }
  }
  CLMicroLocationProto::Model::~Model(v2);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationModelTable::Entry::Entry(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = (CLMicroLocationProto::Model *)(a2 + 32);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 84);
  uint64_t v5 = (CLMicroLocationProto::Model *)(a1 + 32);
  CLMicroLocationProto::Model::Model((CLMicroLocationProto::Model *)(a1 + 32));
  *(unsigned char *)(a1 + 240) = 0;
  *(unsigned char *)(a1 + 264) = 0;
  if (*(unsigned char *)(a2 + 264))
  {
    long long v6 = *(_OWORD *)(a2 + 240);
    *(void *)(a1 + 256) = *(void *)(a2 + 256);
    *(_OWORD *)(a1 + 240) = v6;
    *(void *)(a2 + 248) = 0;
    *(void *)(a2 + 256) = 0;
    *(void *)(a2 + 240) = 0;
    *(unsigned char *)(a1 + 264) = 1;
  }
  long long v7 = *(_OWORD *)(a2 + 272);
  *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = v7;
  *(_OWORD *)(a1 + 289) = *(_OWORD *)(a2 + 289);
  CLMicroLocationProto::Model::Swap(v5, v4);
  return a1;
}

void sub_25647DDD4(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v2 + 264))
  {
    if (*(char *)(v2 + 263) < 0) {
      operator delete(*v3);
    }
  }
  CLMicroLocationProto::Model::~Model(v1);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationModelTable::Entry::operator=(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 84);
  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1 + 240, (__n128 *)(a2 + 240));
  long long v4 = *(_OWORD *)(a2 + 272);
  *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = v4;
  *(_OWORD *)(a1 + 289) = *(_OWORD *)(a2 + 289);
  CLMicroLocationProto::Model::Swap((CLMicroLocationProto::Model *)(a1 + 32), (CLMicroLocationProto::Model *)(a2 + 32));
  return a1;
}

void std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>(std::string *this, const std::string *a2)
{
  if (this[1].__r_.__value_.__s.__data_[0] == a2[1].__r_.__value_.__s.__data_[0])
  {
    if (this[1].__r_.__value_.__s.__data_[0])
    {
      std::string::operator=(this, a2);
    }
  }
  else if (this[1].__r_.__value_.__s.__data_[0])
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      operator delete(this->__r_.__value_.__l.__data_);
    }
    this[1].__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(this, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
}

void *CLMicroLocationAnalytics::CLMicroLocationAnalytics(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  *a1 = a2;
  a1[1] = a3;
  v7[0] = &unk_2704E0C88;
  v7[1] = a1;
  v7[3] = v7;
  v8[0] = &unk_2704E0D08;
  v8[1] = a1;
  v8[3] = v8;
  v9[0] = &unk_2704E0D88;
  v9[1] = a1;
  void v9[3] = v9;
  v10[0] = &unk_2704E0E08;
  v10[1] = a1;
  v10[3] = v10;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  long long v4 = (char *)operator new(0x80uLL);
  a1[4] = v4 + 128;
  a1[2] = v4;
  a1[3] = v4;
  a1[3] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::function<void ()(std::function<BOOL ()(void)>)>>,std::function<void ()(std::function<BOOL ()(void)>)> const*,std::function<void ()(std::function<BOOL ()(void)>)> const*,std::function<void ()(std::function<BOOL ()(void)>)>*>((uint64_t)(a1 + 4), (uint64_t)v7, (uint64_t)&v11, (uint64_t)v4);
  for (uint64_t i = 12; i != -4; i -= 4)
    std::__function::__value_func<void ()(std::function<BOOL ()(void)>)>::~__value_func[abi:ne180100](&v7[i]);
  return a1;
}

void sub_25647E078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 24) = v14;
  std::vector<std::function<void ()(std::function<BOOL ()(void)>)>>::__destroy_vector::operator()[abi:ne180100](&a10);
  for (uint64_t i = 96; i != -32; i -= 32)
    std::__function::__value_func<void ()(std::function<BOOL ()(void)>)>::~__value_func[abi:ne180100](&a12 + i);
  _Unwind_Resume(a1);
}

void *CLMicroLocationAnalytics::executeWorkItems(void *result, uint64_t a2)
{
  void v6[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = result[2];
  for (uint64_t i = result[3]; v2 != i; v2 += 32)
  {
    std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
    uint64_t v5 = *(void *)(v2 + 24);
    if (!v5) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, void *))(*(void *)v5 + 48))(v5, v6);
    uint64_t result = std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v6);
  }
  return result;
}

void sub_25647E17C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void CLMicroLocationAnalytics::analyzeAssociationState(uint64_t a1, uint64_t a2)
{
  void v17[4] = *MEMORY[0x263EF8340];
  if (ULSettings::get<ULSettings::AnalyticsSendEventEnabled>())
  {
    std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v17, a2);
    CLMicroLocationAnalytics::analyzeAssociationStateInternal(a1, (uint64_t)v17, (uint64_t)&v10);
    std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v17);
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
    }
    long long v4 = logObject_MicroLocation_Default;
    BOOL v5 = os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT);
    long long v6 = v10;
    long long v7 = v11;
    if (v5)
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v13 = 2082;
      uint64_t v14 = "";
      __int16 v15 = 2050;
      uint64_t v16 = v11 - v10;
      _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"sending CoreAnalytics com.apple.MicroLocation.AssociatedState\", \"num events\":%{public}lu}", buf, 0x1Cu);
    }
    for (; v6 != v7; ++v6)
    {
      id v9 = *v6;
      AnalyticsSendEvent();
    }
    *(void *)uint64_t buf = &v10;
    std::vector<NSMutableDictionary * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
    }
    unsigned int v8 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v13 = 2082;
      uint64_t v14 = "";
      _os_log_impl(&dword_25631F000, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"not analyzing associated state, since sending to core-analytics is disabled\"}", buf, 0x12u);
    }
  }
}

void sub_25647E3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_25647E4A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationAnalytics::analyzeAssociationStateInternal(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v82 = *MEMORY[0x263EF8340];
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
  }
  BOOL v5 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)uint64_t buf = 68289026;
    *(_WORD *)id v78 = 2082;
    *(void *)&v78[2] = "";
    _os_log_impl(&dword_25631F000, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"analyzing associated state\"}", buf, 0x12u);
  }
  id v6 = *(id *)(*(void *)(a1 + 8) + 16);
  long long v7 = v6;
  if (v6)
  {
    [v6 getAllDistinctAssociatedStateLoiIds];
  }
  else
  {
    long long v73 = 0;
    id v74 = 0;
    uint64_t v75 = 0;
  }

  if (v73 == v74)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
    }
    unsigned int v8 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)uint64_t buf = 68289026;
      *(_WORD *)id v78 = 2082;
      *(void *)&v78[2] = "";
      _os_log_impl(&dword_25631F000, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"analyzeAssociationState, no LOI IDs found\"}", buf, 0x12u);
    }
  }
  id v9 = +[ULDefaultsSingleton shared];
  unint64_t v10 = [v9 defaultsDictionary];

  uint64_t v11 = [NSString stringWithUTF8String:"ULNumberDaysToAnalyzeAssociationState"];
  uint64_t v12 = [v10 objectForKey:v11];
  if (v12 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    int v13 = [v12 intValue];
  }
  else {
    int v13 = [&unk_2704F1F80 intValue];
  }
  int v14 = v13;

  __int16 v15 = [MEMORY[0x263EFF910] date];
  long long v71 = 0uLL;
  uint64_t v72 = 0;
  v70[0] = 0;
  v70[1] = 0;
  char v69 = v70;
  ULSettings::get<ULSettings::AssociatedStateCALoiTypes>((std::vector<std::string> *)buf);
  BOOL v17 = *(const void ***)buf;
  uint64_t v16 = *(const void ***)v78;
  while (v17 != v16)
  {
    LOBYTE(v67) = 0;
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::string const&,BOOL>((uint64_t **)&v69, v17, (uint64_t)v17, (char *)&v67);
    v17 += 3;
  }
  long long v67 = buf;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
  v68[0] = 0;
  v68[1] = 0;
  long long v67 = (uint8_t *)v68;
  ULSettings::get<ULSettings::AssociatedStateCALoiTypes>((std::vector<std::string> *)buf);
  int v19 = *(const void ***)buf;
  uint64_t v18 = *(const void ***)v78;
  while (v19 != v18)
  {
    LOBYTE(v64) = 0;
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::string const&,BOOL>((uint64_t **)&v67, v19, (uint64_t)v19, (char *)&v64);
    v19 += 3;
  }
  int64x2_t v64 = buf;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
  uint64_t v20 = v73;
  uint64_t v51 = v74;
  if (v73 == v74)
  {
LABEL_76:
    long long v65 = 0;
    uint64_t v66 = 0;
    int64x2_t v64 = (unsigned __int8 *)&v65;
    *(_DWORD *)uint64_t buf = 2;
    std::__tree<std::__value_type<int,std::map<std::string,BOOL>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,BOOL>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,BOOL>>>>::__emplace_unique_key_args<int,int,std::map<std::string,BOOL>&>((uint64_t)&v64, (int *)buf, buf, (const void ***)&v69);
    *(_DWORD *)uint64_t buf = 5;
    std::__tree<std::__value_type<int,std::map<std::string,BOOL>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,BOOL>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,BOOL>>>>::__emplace_unique_key_args<int,int,std::map<std::string,BOOL>&>((uint64_t)&v64, (int *)buf, buf, (const void ***)&v67);
    uint64_t v41 = v64;
    if (v64 != (unsigned __int8 *)&v65)
    {
      do
      {
        std::string::basic_string[abi:ne180100]<0>(buf, "");
        uint64_t v79 = 0;
        uint64_t v80 = 0;
        *(void *)&v78[16] = 0;
        long long v42 = (unsigned __int8 *)*((void *)v41 + 5);
        if (v42 != v41 + 48)
        {
          do
          {
            if (!v42[56])
            {
              std::string::operator=((std::string *)buf, (const std::string *)(v42 + 32));
              uint64_t v43 = *((unsigned int *)v41 + 8);
              uint64_t v44 = std::string::basic_string[abi:ne180100]<0>(v52, "");
              CLMicroLocationAnalytics::createMetricDicts((uint64_t)v44, (uint64_t *)buf, v43, (uint64_t *)v52);
              long long v61 = (unsigned __int8 *)objc_claimAutoreleasedReturnValue();
              if (v53 < 0) {
                operator delete(v52[0]);
              }
              std::vector<NSMutableDictionary * {__strong}>::push_back[abi:ne180100]((char **)&v71, (id *)&v61);
            }
            CFAbsoluteTime v45 = (unsigned __int8 *)*((void *)v42 + 1);
            if (v45)
            {
              do
              {
                long long v46 = v45;
                CFAbsoluteTime v45 = *(unsigned __int8 **)v45;
              }
              while (v45);
            }
            else
            {
              do
              {
                long long v46 = (unsigned __int8 *)*((void *)v42 + 2);
                BOOL v31 = *(void *)v46 == (void)v42;
                long long v42 = v46;
              }
              while (!v31);
            }
            long long v42 = v46;
          }
          while (v46 != v41 + 48);
        }
        if ((v78[15] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        long long v47 = (unsigned __int8 *)*((void *)v41 + 1);
        if (v47)
        {
          do
          {
            char v48 = v47;
            long long v47 = *(unsigned __int8 **)v47;
          }
          while (v47);
        }
        else
        {
          do
          {
            char v48 = (unsigned __int8 *)*((void *)v41 + 2);
            BOOL v31 = *(void *)v48 == (void)v41;
            uint64_t v41 = v48;
          }
          while (!v31);
        }
        uint64_t v41 = v48;
      }
      while (v48 != (unsigned __int8 *)&v65);
    }
    *(_OWORD *)a3 = v71;
    *(void *)(a3 + 16) = v72;
    uint64_t v72 = 0;
    long long v71 = 0uLL;
    std::__tree<std::__value_type<int,std::map<std::string,BOOL>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,BOOL>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,BOOL>>>>::destroy((uint64_t)&v64, v65);
  }
  else
  {
    while (1)
    {
      int64x2_t v64 = 0;
      long long v65 = 0;
      uint64_t v66 = 0;
      long long v61 = 0;
      char v62 = 0;
      uint64_t v63 = 0;
      if (v14 >= 1) {
        break;
      }
      id v76 = (unsigned __int8 **)v20;
LABEL_63:
      if (v62 != v61)
      {
        CLMicroLocationAnalytics::analyzeAssociationStateInternal(std::function<BOOL ()(void)>)::$_2::operator()((uint64_t)&v76, &v61, (uint64_t **)&v67, (uint64_t)buf);
        if (v81)
        {
          char v38 = operator new(0x28uLL);
          uint64_t v56 = v38;
          long long v57 = xmmword_256514540;
          _OWORD *v38 = 0u;
          v38[1] = 0u;
          *(void *)((char *)v38 + 29) = 0;
          boost::uuids::to_chars<char *>((uint64_t)v20, v38);
          if (v57 >= 0) {
            char v39 = (char *)&v56;
          }
          else {
            char v39 = (char *)v56;
          }
          uint64_t v40 = std::string::basic_string[abi:ne180100]<0>(v54, v39);
          CLMicroLocationAnalytics::createMetricDicts((uint64_t)v40, (uint64_t *)buf, 5, (uint64_t *)v54);
          id v60 = (id)objc_claimAutoreleasedReturnValue();
          if (v55 < 0) {
            operator delete(v54[0]);
          }
          if (SHIBYTE(v57) < 0) {
            operator delete(v56);
          }
          std::vector<NSMutableDictionary * {__strong}>::push_back[abi:ne180100]((char **)&v71, &v60);

          if (v81 && (v78[15] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
      }
      *(void *)uint64_t buf = &v61;
      std::vector<CLMicroLocationAssociatedStateTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      *(void *)uint64_t buf = &v64;
      std::vector<CLMicroLocationAssociatedStateTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      v20 += 2;
      if (v20 == v51) {
        goto LABEL_76;
      }
    }
    int v21 = 0;
    while (1)
    {
      uint64_t v22 = *(void *)(a2 + 24);
      if (!v22) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)v22 + 48))(v22)) {
        break;
      }
      CLMicroLocationTimeUtils::getTimeDeltaDaysAgo(v15, (NSDate *)~v21);
      double v24 = v23;
      CLMicroLocationTimeUtils::getTimeDeltaDaysAgo(v15, (NSDate *)-v21);
      double v26 = v25;
      id v27 = *(id *)(*(void *)(a1 + 8) + 16);
      __int16 v28 = v27;
      if (v27)
      {
        [v27 fetchAllAssociatedStateBetweenTimes:v20 toTime:v24 atLoiGroupId:v26];
      }
      else
      {
        *(void *)uint64_t buf = 0;
        *(void *)id v78 = 0;
        *(void *)&v78[8] = 0;
      }

      int v30 = *(const void ***)buf;
      __int16 v29 = *(const void ***)v78;
      if (*(void *)buf != *(void *)v78)
      {
        id v76 = &v64;
        do
        {
          if (*((unsigned char *)v30 + 48)) {
            BOOL v31 = *((_DWORD *)v30 + 16) == 2;
          }
          else {
            BOOL v31 = 0;
          }
          if (v31) {
            std::back_insert_iterator<std::vector<CLMicroLocationAssociatedStateTable::Entry>>::operator=[abi:ne180100]((uint64_t **)&v76, (long long *)v30);
          }
          v30 += 9;
        }
        while (v30 != v29);
        uint64_t v33 = *(const void ***)buf;
        long long v32 = *(const void ***)v78;
        id v76 = &v61;
        while (v33 != v32)
        {
          if (*((unsigned char *)v33 + 48)) {
            BOOL v34 = *((_DWORD *)v33 + 16) == 5;
          }
          else {
            BOOL v34 = 0;
          }
          if (v34) {
            std::back_insert_iterator<std::vector<CLMicroLocationAssociatedStateTable::Entry>>::operator=[abi:ne180100]((uint64_t **)&v76, (long long *)v33);
          }
          v33 += 9;
        }
      }
      uint64_t v56 = buf;
      std::vector<CLMicroLocationAssociatedStateTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
      if (++v21 == v14)
      {
        id v76 = (unsigned __int8 **)v20;
        if (v65 != v64)
        {
          CLMicroLocationAnalytics::analyzeAssociationStateInternal(std::function<BOOL ()(void)>)::$_2::operator()((uint64_t)&v76, &v64, (uint64_t **)&v69, (uint64_t)buf);
          if (v81)
          {
            uint64_t v35 = operator new(0x28uLL);
            uint64_t v56 = v35;
            long long v57 = xmmword_256514540;
            _OWORD *v35 = 0u;
            v35[1] = 0u;
            *(void *)((char *)v35 + 29) = 0;
            boost::uuids::to_chars<char *>((uint64_t)v20, v35);
            if (v57 >= 0) {
              uint64_t v36 = (char *)&v56;
            }
            else {
              uint64_t v36 = (char *)v56;
            }
            uint64_t v37 = std::string::basic_string[abi:ne180100]<0>(__p, v36);
            CLMicroLocationAnalytics::createMetricDicts((uint64_t)v37, (uint64_t *)buf, 2, (uint64_t *)__p);
            id v60 = (id)objc_claimAutoreleasedReturnValue();
            if (v59 < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(v57) < 0) {
              operator delete(v56);
            }
            std::vector<NSMutableDictionary * {__strong}>::push_back[abi:ne180100]((char **)&v71, &v60);

            if (v81 && (v78[15] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
          }
        }
        goto LABEL_63;
      }
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
    }
    __int16 v49 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)uint64_t buf = 68289282;
      *(_WORD *)id v78 = 2082;
      *(void *)&v78[2] = "";
      *(_WORD *)&v78[10] = 2082;
      *(void *)&v78[12] = "MicroLocationAnalytics";
      _os_log_impl(&dword_25631F000, v49, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"analyzeAssociationState cancelled\", \"Activity\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)uint64_t buf = &v61;
    std::vector<CLMicroLocationAssociatedStateTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(void *)uint64_t buf = &v64;
    std::vector<CLMicroLocationAssociatedStateTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
  std::__tree<std::string>::destroy((uint64_t)&v67, v68[0]);
  std::__tree<std::string>::destroy((uint64_t)&v69, v70[0]);
  *(void *)uint64_t buf = &v71;
  std::vector<NSMutableDictionary * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);

  if (v73)
  {
    id v74 = v73;
    operator delete(v73);
  }
}

void sub_25647EDF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char *a46,uint64_t a47,char *a48,char *a49,uint64_t a50,char a51)
{
  if (*(unsigned char *)(v52 - 128) && *(char *)(v52 - 153) < 0) {
    operator delete(*(void **)(v52 - 176));
  }
  *(void *)(v52 - 176) = &a39;
  std::vector<CLMicroLocationAssociatedStateTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)(v52 - 176));
  *(void *)(v52 - 176) = &a42;
  std::vector<CLMicroLocationAssociatedStateTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)(v52 - 176));
  std::__tree<std::string>::destroy((uint64_t)&a45, a46);
  std::__tree<std::string>::destroy((uint64_t)&a48, a49);
  a48 = &a51;
  std::vector<NSMutableDictionary * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&a48);

  int v54 = *(void **)(v52 - 208);
  if (v54)
  {
    *(void *)(v52 - 200) = v54;
    operator delete(v54);
  }
  _Unwind_Resume(a1);
}

void ULSettings::get<ULSettings::AssociatedStateCALoiTypes>(std::vector<std::string> *a1@<X8>)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v1 = +[ULDefaultsSingleton shared];
  __int16 v29 = [v1 defaultsDictionary];

  id v27 = [NSString stringWithUTF8String:"ULAssociatedStateCALoiTypes"];
  __int16 v28 = objc_msgSend(v29, "objectForKey:");
  if (v28 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    memset(&v30, 0, sizeof(v30));
    id v25 = v28;
    std::vector<std::string>::reserve(&v30, [v25 count]);
    long long v34 = 0u;
    long long v35 = 0u;
    *(_OWORD *)long long v32 = 0u;
    long long v33 = 0u;
    id v2 = v25;
    uint64_t v3 = [v2 countByEnumeratingWithState:v32 objects:&v37 count:16];
    if (v3)
    {
      uint64_t v4 = *(void *)v33;
      do
      {
        for (uint64_t i = 0; i != v3; ++i)
        {
          if (*(void *)v33 != v4) {
            objc_enumerationMutation(v2);
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, (char *)[*((id *)v32[1] + i) UTF8String]);
          std::vector<std::string>::pointer end = v30.__end_;
          if (v30.__end_ >= v30.__end_cap_.__value_)
          {
            unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v30.__end_ - (char *)v30.__begin_) >> 3);
            unint64_t v9 = v8 + 1;
            if (v8 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * (((char *)v30.__end_cap_.__value_ - (char *)v30.__begin_) >> 3) > v9) {
              unint64_t v9 = 0x5555555555555556 * (((char *)v30.__end_cap_.__value_ - (char *)v30.__begin_) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v30.__end_cap_.__value_ - (char *)v30.__begin_) >> 3) >= 0x555555555555555) {
              unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v10 = v9;
            }
            __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v30.__end_cap_;
            if (v10) {
              uint64_t v11 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v30.__end_cap_, v10);
            }
            else {
              uint64_t v11 = 0;
            }
            uint64_t v12 = v11 + v8;
            __v.__first_ = v11;
            __v.__begin_ = v12;
            __v.__end_cap_.__value_ = &v11[v10];
            long long v13 = *(_OWORD *)&__p.__begin_;
            v12->__r_.__value_.__r.__words[2] = (std::string::size_type)__p.__end_cap_.__value_;
            *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
            memset(&__p, 0, sizeof(__p));
            __v.__end_ = v12 + 1;
            std::vector<std::string>::__swap_out_circular_buffer(&v30, &__v);
            int v14 = v30.__end_;
            std::__split_buffer<std::string>::~__split_buffer(&__v);
            v30.__end_ = v14;
            if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
              operator delete(__p.__begin_);
            }
          }
          else
          {
            long long v7 = *(_OWORD *)&__p.__begin_;
            v30.__end_->__r_.__value_.__r.__words[2] = (std::string::size_type)__p.__end_cap_.__value_;
            *(_OWORD *)&end->__r_.__value_.__l.__data_ = v7;
            v30.__end_ = end + 1;
          }
        }
        uint64_t v3 = [v2 countByEnumeratingWithState:v32 objects:&v37 count:16];
      }
      while (v3);
    }

    *a1 = v30;
    memset(&v30, 0, sizeof(v30));
    v37.__first_ = (std::__split_buffer<std::string>::pointer)&v30;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  }
  else
  {
    memset(&__v, 0, 24);
    memset(&__p, 0, sizeof(__p));
    std::vector<std::string>::reserve(&__p, 8uLL);
    for (uint64_t j = 0; j != 8; ++j)
    {
      std::string::basic_string[abi:ne180100]<0>(v32, _ZGRN10ULSettings14SettingsTraitsINS_25AssociatedStateCALoiTypesEE12defaultValueE_[j]);
      std::vector<std::string>::pointer v16 = __p.__end_;
      if (__p.__end_ >= __p.__end_cap_.__value_)
      {
        unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
        unint64_t v19 = v18 + 1;
        if (v18 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v19) {
          unint64_t v19 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555) {
          unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v20 = v19;
        }
        v37.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
        if (v20) {
          int v21 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v20);
        }
        else {
          int v21 = 0;
        }
        uint64_t v22 = v21 + v18;
        v37.__first_ = v21;
        v37.__begin_ = v22;
        v37.__end_cap_.__value_ = &v21[v20];
        long long v23 = *(_OWORD *)v32;
        v22->__r_.__value_.__r.__words[2] = v33;
        *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
        v32[1] = 0;
        *(void *)&long long v33 = 0;
        v32[0] = 0;
        v37.__end_ = v22 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&__p, &v37);
        double v24 = __p.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&v37);
        __p.__end_ = v24;
        if (SBYTE7(v33) < 0) {
          operator delete(v32[0]);
        }
      }
      else
      {
        long long v17 = *(_OWORD *)v32;
        __p.__end_->__r_.__value_.__r.__words[2] = v33;
        *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
        __p.__end_ = v16 + 1;
      }
    }
    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)&__v);
    *(_OWORD *)&__v.__first_ = *(_OWORD *)&__p.__begin_;
    __v.__end_ = __p.__end_cap_.__value_;
    memset(&__p, 0, sizeof(__p));
    v37.__first_ = (std::__split_buffer<std::string>::pointer)&__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
    *(_OWORD *)&a1->__begin_ = *(_OWORD *)&__v.__first_;
    a1->__end_cap_.__value_ = __v.__end_;
    memset(&__v, 0, 24);
    v37.__first_ = (std::__split_buffer<std::string>::pointer)&__v;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  }
}

void sub_25647F4D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void **p_p,uint64_t a23,uint64_t a24,uint64_t a25,std::__split_buffer<std::string> *__pa,uint64_t a27,std::__split_buffer<std::string> *a28)
{
  p_p = &__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);

  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationAnalytics::analyzeAssociationStateInternal(std::function<BOOL ()(void)>)::$_2::operator()@<X0>(uint64_t result@<X0>, unsigned __int8 **a2@<X1>, uint64_t **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  BOOL v5 = *a2;
  id v6 = a2[1];
  if (v6 == *a2)
  {
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 48) = 0;
  }
  else
  {
    unint64_t v8 = (uint64_t *)result;
    long long v30 = 0u;
    long long v31 = 0u;
    int v32 = 1065353216;
    long long v27 = 0u;
    long long v28 = 0u;
    int v29 = 1065353216;
    long long v24 = 0u;
    long long v25 = 0u;
    int v26 = 1065353216;
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v30, v5, (uint64_t)v5);
      unint64_t v9 = (CLMacAddress *)(v5 + 56);
      __p.__r_.__value_.__r.__words[0] = CLMacAddress::toUint64(v9);
      buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      unint64_t v10 = (uint64_t **)std::__hash_table<std::__hash_value_type<unsigned long long,std::set<int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::set<int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::set<int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::set<int>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>((uint64_t)&v24, (unint64_t *)&__p, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
      unint64_t v9 = (CLMacAddress *)((char *)v9 + 12);
      std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__emplace_unique_key_args<CLMicroLocationRecordingCompletionMetaInformation::RecordingError,CLMicroLocationRecordingCompletionMetaInformation::RecordingError>(v10 + 3, (int *)v9, v9);
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)&v27, (int *)v9, v9);
      BOOL v5 = (unsigned __int8 *)&v9->var0 + 4;
    }
    while (v5 != v6);
    if (*((void *)&v31 + 1) <= 1uLL)
    {
      if (*(char *)(v31 + 39) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v31 + 16), *(void *)(v31 + 24));
      }
      else {
        std::string __p = *(std::string *)(v31 + 16);
      }
      buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      *((unsigned char *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)buf)+ 56) = 1;
      unint64_t v19 = (void *)v25;
      if ((void)v25)
      {
        uint64_t v20 = 0;
        do
        {
          if (v19[5] > 1uLL) {
            ++v20;
          }
          unint64_t v19 = (void *)*v19;
        }
        while (v19);
      }
      else
      {
        uint64_t v20 = 0;
      }
      std::string::size_type v21 = *((void *)&v25 + 1);
      std::string::size_type v22 = *((void *)&v28 + 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(buf, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        buf[0] = __p;
      }
      buf[1].__r_.__value_.__r.__words[0] = v21;
      buf[1].__r_.__value_.__l.__size_ = v22;
      *(std::string *)a4 = buf[0];
      *(void *)(a4 + 40) = v20;
      *(_OWORD *)(a4 + 24) = *(_OWORD *)&buf[1].__r_.__value_.__l.__data_;
      *(unsigned char *)(a4 + 48) = 1;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
      }
      uint64_t v11 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        uint64_t v12 = *v8;
        long long v13 = (char *)operator new(0x28uLL);
        *(void *)(v13 + 29) = 0;
        *(_OWORD *)long long v13 = 0u;
        *((_OWORD *)v13 + 1) = 0u;
        boost::uuids::to_chars<char *>(v12, v13);
        boost::algorithm::join<std::unordered_set<std::string>,char [2]>((uint64_t)&v30, ",", (uint64_t)&__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        buf[0].__r_.__value_.__r.__words[0] = 68289538;
        LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2082;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v13;
        WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2082;
        *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)p_p;
        _os_log_impl(&dword_25631F000, v11, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"analyzeAssociationState, loiGroupId without unique rtLoiType\", \"LoiGroupId\":%{public, location:escape_only}s, \"LoiTypes\":%{public, location:escape_only}s}", (uint8_t *)buf, 0x26u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        operator delete(v13);
      }

      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
      }
      __int16 v15 = (id)logObject_MicroLocation_Default;
      if (os_signpost_enabled(v15))
      {
        uint64_t v16 = *v8;
        long long v17 = (char *)operator new(0x28uLL);
        *(void *)(v17 + 29) = 0;
        *(_OWORD *)long long v17 = 0u;
        *((_OWORD *)v17 + 1) = 0u;
        boost::uuids::to_chars<char *>(v16, v17);
        boost::algorithm::join<std::unordered_set<std::string>,char [2]>((uint64_t)&v30, ",", (uint64_t)&__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v18 = &__p;
        }
        else {
          unint64_t v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        buf[0].__r_.__value_.__r.__words[0] = 68289538;
        LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2082;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v17;
        WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2082;
        *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)v18;
        _os_signpost_emit_with_name_impl(&dword_25631F000, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "analyzeAssociationState, loiGroupId without unique rtLoiType", "{\"msg%{public}.0s\":\"analyzeAssociationState, loiGroupId without unique rtLoiType\", \"LoiGroupId\":%{public, location:escape_only}s, \"LoiTypes\":%{public, location:escape_only}s}", (uint8_t *)buf, 0x26u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        operator delete(v17);
      }

      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 48) = 0;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,std::set<int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::set<int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::set<int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::set<int>>>>::~__hash_table((uint64_t)&v24);
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&v27);
    return std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::~__hash_table((uint64_t)&v30);
  }
  return result;
}

void sub_25647FA3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,std::set<int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::set<int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::set<int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::set<int>>>>::~__hash_table((uint64_t)&a16);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::~__hash_table((uint64_t)&a28);
  _Unwind_Resume(a1);
}

id CLMicroLocationAnalytics::createMetricDicts(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  id v7 = objc_alloc_init(MEMORY[0x263EFF9A0]);
  unint64_t v8 = [NSNumber numberWithInt:a3];
  [v7 setObject:v8 forKeyedSubscript:@"Band"];

  if (*((char *)a2 + 23) >= 0) {
    unint64_t v9 = a2;
  }
  else {
    unint64_t v9 = (uint64_t *)*a2;
  }
  unint64_t v10 = [NSString stringWithUTF8String:v9];
  [v7 setObject:v10 forKeyedSubscript:@"rtLoiType"];

  uint64_t v11 = [NSNumber numberWithUnsignedLong:a2[3]];
  [v7 setObject:v11 forKeyedSubscript:@"NumberOfMacAddresses"];

  uint64_t v12 = [NSNumber numberWithUnsignedLong:a2[4]];
  [v7 setObject:v12 forKeyedSubscript:@"NumberOfChannels"];

  long long v13 = [NSNumber numberWithUnsignedLong:a2[5]];
  [v7 setObject:v13 forKeyedSubscript:@"NumberOfMacAddressAppearingOnMultipleChannels"];

  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
  }
  int v14 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a4 + 23) < 0) {
      a4 = (uint64_t *)*a4;
    }
    if (*((char *)a2 + 23) >= 0) {
      __int16 v15 = a2;
    }
    else {
      __int16 v15 = (uint64_t *)*a2;
    }
    uint64_t v16 = a2[3];
    uint64_t v17 = a2[4];
    uint64_t v18 = a2[5];
    v20[0] = 68290563;
    v20[1] = 0;
    __int16 v21 = 2082;
    std::string::size_type v22 = "";
    __int16 v23 = 2081;
    long long v24 = a4;
    __int16 v25 = 2082;
    int v26 = v15;
    __int16 v27 = 1026;
    int v28 = a3;
    __int16 v29 = 2050;
    uint64_t v30 = v16;
    __int16 v31 = 2050;
    uint64_t v32 = v17;
    __int16 v33 = 2050;
    uint64_t v34 = v18;
    _os_log_impl(&dword_25631F000, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationAnalytics, analyzeAssociationState\", \"rtGroupLoiId\":%{private, location:escape_only}s, \"rtLoiType\":%{public, location:escape_only}s, \"Band\":%{public}d, \"numberOfMacAddresses\":%{public}llu, \"NumberOfChannels\":%{public}llu, \"NumberOfMacAddressAppearingOnMultipleChannels\":%{public}llu}", (uint8_t *)v20, 0x4Au);
  }
  return v7;
}

void sub_25647FD38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id std::vector<NSMutableDictionary * {__strong}>::push_back[abi:ne180100](char **a1, id *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  id v7 = *(char **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = (v7 - *a1) >> 3;
    if ((unint64_t)(v10 + 1) >> 61) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - (void)*a1;
    uint64_t v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v25 = v4;
    if (v13) {
      int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>(v4, v13);
    }
    else {
      int v14 = 0;
    }
    __int16 v15 = &v14[8 * v10];
    uint64_t v16 = &v14[8 * v13];
    long long v24 = v16;
    *(void *)__int16 v15 = *a2;
    unint64_t v9 = v15 + 8;
    v23.i64[1] = (uint64_t)(v15 + 8);
    uint64_t v18 = *a1;
    uint64_t v17 = a1[1];
    if (v17 == *a1)
    {
      int64x2_t v20 = vdupq_n_s64((unint64_t)v17);
    }
    else
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *(void *)uint64_t v17 = 0;
        *((void *)v15 - 1) = v19;
        v15 -= 8;
      }
      while (v17 != v18);
      int64x2_t v20 = *(int64x2_t *)a1;
      unint64_t v9 = (char *)v23.i64[1];
      uint64_t v16 = v24;
    }
    *a1 = v15;
    a1[1] = v9;
    int64x2_t v23 = v20;
    __int16 v21 = a1[2];
    a1[2] = v16;
    long long v24 = v21;
    uint64_t v22 = v20.i64[0];
    id result = (id)std::__split_buffer<NSMutableDictionary * {__strong}>::~__split_buffer((uint64_t)&v22);
  }
  else
  {
    id result = *a2;
    *(void *)id v7 = result;
    unint64_t v9 = v7 + 8;
  }
  a1[1] = v9;
  return result;
}

void CLMicroLocationAnalytics::analyzeLocationOfInterestUsage(CLMicroLocationAnalytics *a1, uint64_t a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
  }
  uint64_t v4 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)CFAbsoluteTime v45 = 2082;
    *(void *)&v45[2] = "";
    _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"analyzing LOI usage\"}", buf, 0x12u);
  }
  if (ULSettings::get<ULSettings::AnalyticsSendEventEnabled>())
  {
    uint64_t v5 = *(void *)(a2 + 24);
    if (!v5) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 48))(v5))
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
      }
      uint64_t v6 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)CFAbsoluteTime v45 = 2082;
        *(void *)&v45[2] = "";
        *(_WORD *)&v45[10] = 2082;
        *(void *)&v45[12] = "MicroLocationAnalytics";
        id v7 = "{\"msg%{public}.0s\":\"LOI usage analytics canceled\", \"Activity\":%{public, location:escape_only}s}";
        unint64_t v8 = v6;
        uint32_t v9 = 28;
LABEL_16:
        _os_log_impl(&dword_25631F000, v8, OS_LOG_TYPE_DEFAULT, v7, buf, v9);
      }
    }
    else
    {
      uint64_t v38 = CLMicroLocationAnalytics::createLoiVisitsEvent(a1);
      if (v38)
      {
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
        }
        uint64_t v11 = (id)logObject_MicroLocation_Default;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v12 = [@"com.apple.MicroLocation.Visit" UTF8String];
          *(_DWORD *)uint64_t buf = 68289282;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)CFAbsoluteTime v45 = 2082;
          *(void *)&v45[2] = "";
          *(_WORD *)&v45[10] = 2082;
          *(void *)&v45[12] = v12;
          _os_log_impl(&dword_25631F000, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Sending analytics event.\", \"Event name\":%{public, location:escape_only}s}", buf, 0x1Cu);
        }

        AnalyticsSendEvent();
      }
      int64x2_t v42 = 0uLL;
      v43[0] = 0;
      id v13 = *(id *)(*((void *)a1 + 1) + 56);
      int v14 = v13;
      if (v13)
      {
        [v13 fetchAllDistinctLoiGroups];
      }
      else
      {
        uint64_t v39 = 0;
        uint64_t v40 = 0;
        uint64_t v41 = 0;
      }

      uint64_t v15 = v39;
      uint64_t v16 = v40;
      if (v39 == v40)
      {
LABEL_48:
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
        }
        uint64_t v34 = (id)logObject_MicroLocation_Default;
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v35 = [@"com.apple.MicroLocation.Location" UTF8String];
          *(_DWORD *)uint64_t buf = 68289538;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)CFAbsoluteTime v45 = 2082;
          *(void *)&v45[2] = "";
          *(_WORD *)&v45[10] = 2082;
          *(void *)&v45[12] = v35;
          *(_WORD *)&unsigned char v45[20] = 2050;
          *(void *)&v45[22] = (v42.i64[1] - v42.i64[0]) >> 3;
          _os_log_impl(&dword_25631F000, v34, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Sending analytics events.\", \"Event name\":%{public, location:escape_only}s, \"Number of events\":%{public}lu}", buf, 0x26u);
        }

        for (uint64_t i = v42.i64[0]; i != v42.i64[1]; i += 8)
          AnalyticsSendEvent();
      }
      else
      {
        while (1)
        {
          uint64_t v17 = *(void *)(a2 + 24);
          if (!v17) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          if ((*(unsigned int (**)(uint64_t))(*(void *)v17 + 48))(v17)) {
            break;
          }
          uint64_t v18 = CLMicroLocationAnalytics::createLoiInformationEvent(a1, (const uuid *)(v15 + 24));
          if (v18)
          {
            id v19 = v18;
            int64x2_t v20 = v19;
            uint64_t v21 = v42.i64[1];
            if (v42.i64[1] >= v43[0])
            {
              uint64_t v23 = (v42.i64[1] - v42.i64[0]) >> 3;
              if ((unint64_t)(v23 + 1) >> 61) {
                std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v24 = (v43[0] - v42.i64[0]) >> 2;
              if (v24 <= v23 + 1) {
                unint64_t v24 = v23 + 1;
              }
              if (v43[0] - v42.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL) {
                unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v25 = v24;
              }
              *(void *)&v45[24] = v43;
              if (v25) {
                int v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>((uint64_t)v43, v25);
              }
              else {
                int v26 = 0;
              }
              __int16 v27 = &v26[8 * v23];
              int v28 = &v26[8 * v25];
              *(void *)&v45[16] = v28;
              *(void *)__int16 v27 = v20;
              uint64_t v22 = v27 + 8;
              *(void *)&v45[8] = v27 + 8;
              __int16 v29 = (void *)v42.i64[1];
              uint64_t v30 = (void *)v42.i64[0];
              if (v42.i64[1] == v42.i64[0])
              {
                int64x2_t v32 = vdupq_n_s64(v42.u64[1]);
              }
              else
              {
                do
                {
                  uint64_t v31 = *--v29;
                  *__int16 v29 = 0;
                  *((void *)v27 - 1) = v31;
                  v27 -= 8;
                }
                while (v29 != v30);
                int64x2_t v32 = v42;
                uint64_t v22 = *(void **)&v45[8];
                int v28 = *(char **)&v45[16];
              }
              v42.i64[0] = (uint64_t)v27;
              v42.i64[1] = (uint64_t)v22;
              *(int64x2_t *)CFAbsoluteTime v45 = v32;
              uint64_t v33 = v43[0];
              v43[0] = v28;
              *(void *)&v45[16] = v33;
              *(void *)uint64_t buf = v32.i64[0];
              std::__split_buffer<NSMutableDictionary * {__strong}>::~__split_buffer((uint64_t)buf);
            }
            else
            {
              *(void *)v42.i64[1] = v19;
              uint64_t v22 = (void *)(v21 + 8);
            }
            v42.i64[1] = (uint64_t)v22;
          }
          v15 += 64;
          if (v15 == v16) {
            goto LABEL_48;
          }
        }
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
        }
        std::__split_buffer<std::string> v37 = logObject_MicroLocation_Default;
        if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t buf = 68289282;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)CFAbsoluteTime v45 = 2082;
          *(void *)&v45[2] = "";
          *(_WORD *)&v45[10] = 2082;
          *(void *)&v45[12] = "MicroLocationAnalytics";
          _os_log_impl(&dword_25631F000, v37, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"LOI usage analytics canceled\", \"Activity\":%{public, location:escape_only}s}", buf, 0x1Cu);
        }
      }
      *(void *)uint64_t buf = &v39;
      std::vector<CLMiLoLoiTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      *(void *)uint64_t buf = &v42;
      std::vector<NSMutableDictionary * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    }
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
    }
    uint64_t v10 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)CFAbsoluteTime v45 = 2082;
      *(void *)&v45[2] = "";
      id v7 = "{\"msg%{public}.0s\":\"not analyzing Locations of Interest usage, since sending to core-analytics is disabled\"}";
      unint64_t v8 = v10;
      uint32_t v9 = 18;
      goto LABEL_16;
    }
  }
}

void sub_2564804C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

id CLMicroLocationAnalytics::createLoiVisitsEvent(CLMicroLocationAnalytics *this)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
  }
  id v2 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 2082;
    *(void *)&buf[20] = [@"com.apple.MicroLocation.Visit" UTF8String];
    _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Creating analytics event.\", \"Event name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }

  id v3 = *(id *)(*((void *)this + 1) + 56);
  uint64_t v4 = v3;
  if (v3)
  {
    [v3 fetchAllDistinctLoiGroups];
  }
  else
  {
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
  }

  uint64_t v5 = v38;
  uint64_t v6 = v39;
  if (v38 == v39)
  {
    BOOL v8 = 0;
    uint64_t v10 = (uint64_t)v38;
  }
  else
  {
    id v7 = v38 + 4;
    do
    {
      BOOL v8 = *(long long *)((char *)v7 - 40) == 0;
      BOOL v9 = *(long long *)((char *)v7 - 40) == 0 || v7 == v39;
      v7 += 4;
    }
    while (!v9);
    uint64_t v10 = (uint64_t)v38;
    while (*(_OWORD *)(v10 + 24) != 0)
    {
      v10 += 64;
      if ((long long *)v10 == v39)
      {
        uint64_t v5 = v39;
        uint64_t v10 = (uint64_t)v39;
        goto LABEL_29;
      }
    }
    if ((long long *)v10 == v39 || (uint64_t v11 = v10 + 64, (long long *)(v10 + 64) == v39))
    {
      uint64_t v5 = v39;
    }
    else
    {
      do
      {
        *(void *)uint64_t buf = 0;
        *(void *)&uint8_t buf[8] = 0;
        if (*(_OWORD *)(v11 + 24) != 0)
        {
          long long v12 = *(_OWORD *)v11;
          long long v13 = *(_OWORD *)(v11 + 16);
          *(void *)(v10 + 32) = *(void *)(v11 + 32);
          *(_OWORD *)uint64_t v10 = v12;
          *(_OWORD *)(v10 + 16) = v13;
          int v14 = (void **)(v10 + 40);
          if (*(char *)(v10 + 63) < 0) {
            operator delete(*v14);
          }
          long long v15 = *(_OWORD *)(v11 + 40);
          *(void *)(v10 + 56) = *(void *)(v11 + 56);
          *(_OWORD *)int v14 = v15;
          *(unsigned char *)(v11 + 63) = 0;
          *(unsigned char *)(v11 + 40) = 0;
          v10 += 64;
        }
        v11 += 64;
      }
      while ((long long *)v11 != v6);
      uint64_t v5 = v39;
    }
  }
LABEL_29:
  std::vector<CLMiLoLoiTable::Entry>::erase((uint64_t)&v38, v10, v5);
  memset(buf, 0, sizeof(buf));
  int v43 = 1065353216;
  uint64_t v17 = v38;
  uint64_t v16 = v39;
  if (v38 == v39)
  {
    id v19 = v38;
  }
  else
  {
    do
    {
      __p[0] = (char *)v17 + 40;
      uint64_t v18 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)buf, (unsigned __int8 *)v17 + 40, (uint64_t)&std::piecewise_construct, (long long **)__p);
      ++*((void *)v18 + 5);
      v17 += 4;
    }
    while (v17 != v16);
    uint64_t v17 = v38;
    id v19 = v39;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "home");
  uint64_t v41 = __p;
  uint64_t v20 = *((void *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)buf, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v41)+ 5);
  if (v37 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "work");
  uint64_t v41 = __p;
  uint64_t v21 = *((void *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)buf, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v41)+ 5);
  if (v37 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "airplay");
  uint64_t v41 = __p;
  uint64_t v22 = *((void *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)buf, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v41)+ 5);
  if (v37 < 0) {
    operator delete(__p[0]);
  }
  id v23 = *(id *)(*((void *)this + 1) + 56);
  int v24 = [v23 count];
  int v25 = [*(id *)(*((void *)this + 1) + 56) countDistinctLoiGroups];

  int v26 = [MEMORY[0x263EFF9A0] dictionary];
  uint64_t v27 = ((char *)v19 - (char *)v17) >> 6;
  int v28 = [NSNumber numberWithUnsignedLong:v27];
  [v26 setObject:v28 forKeyedSubscript:@"loiCount"];

  __int16 v29 = [NSNumber numberWithUnsignedLong:v20];
  [v26 setObject:v29 forKeyedSubscript:@"loiHomeCount"];

  uint64_t v30 = [NSNumber numberWithUnsignedLong:v21];
  [v26 setObject:v30 forKeyedSubscript:@"loiWorkCount"];

  uint64_t v31 = [NSNumber numberWithUnsignedLong:v22];
  [v26 setObject:v31 forKeyedSubscript:@"loiAirplayCount"];

  int64x2_t v32 = [NSNumber numberWithUnsignedLong:v27 - v20];
  [v26 setObject:v32 forKeyedSubscript:@"loiNotHomeCount"];

  uint64_t v33 = [NSNumber numberWithBool:v8];
  [v26 setObject:v33 forKeyedSubscript:@"hasLegacy"];

  uint64_t v34 = [NSNumber numberWithUnsignedInt:(v24 - v25)];
  [v26 setObject:v34 forKeyedSubscript:@"deduplicatedLoiCount"];

  std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::~__hash_table((uint64_t)buf);
  *(void *)uint64_t buf = &v38;
  std::vector<CLMiLoLoiTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  return v26;
}

void sub_256480A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  _Unwind_Resume(a1);
}

id CLMicroLocationAnalytics::createLoiInformationEvent(CLMicroLocationAnalytics *this, const uuid *a2)
{
  uint64_t v93 = *MEMORY[0x263EF8340];
  memset(&v54, 0, sizeof(v54));
  if ((boost::conversion::detail::try_lexical_convert<std::string,boost::uuids::uuid>((uint64_t)a2, &v54) & 1) == 0)
  {
    std::bad_cast::bad_cast(buf);
    buf[0].__vftable = (std::bad_cast_vtbl *)&unk_2704DAAD0;
    boost::throw_exception<boost::bad_lexical_cast>((uint64_t)buf);
  }
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
  }
  uint64_t v4 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (std::bad_cast_vtbl *)[@"com.apple.MicroLocation.Location" UTF8String];
    uint64_t v6 = (std::bad_cast_vtbl *)&v54;
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v6 = (std::bad_cast_vtbl *)v54.__r_.__value_.__r.__words[0];
    }
    buf[0].__vftable = (std::bad_cast_vtbl *)68289538;
    LOWORD(buf[1].__vftable) = 2082;
    *(std::bad_cast_vtbl **)((char *)&buf[1].__vftable + 2) = (std::bad_cast_vtbl *)"";
    WORD1(buf[2].__vftable) = 2082;
    *(std::bad_cast_vtbl **)((char *)&buf[2].__vftable + 4) = v5;
    WORD2(buf[3].__vftable) = 2082;
    *(std::bad_cast_vtbl **)((char *)&buf[3].__vftable + 6) = v6;
    _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Creating analytics event.\", \"Event name\":%{public, location:escape_only}s, \"LOI Group ID\":%{public, location:escape_only}s}", (uint8_t *)buf, 0x26u);
  }

  id v7 = *(id *)(*((void *)this + 1) + 56);
  BOOL v8 = v7;
  if (v7)
  {
    [v7 fetchLoiIdEntriesInLoiGroupId:a2];
  }
  else
  {
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
  }

  uint64_t v10 = v51;
  BOOL v9 = v52;
  if (v52 == v51)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
    }
    uint64_t v18 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      memset(&v50, 0, sizeof(v50));
      if ((boost::conversion::detail::try_lexical_convert<std::string,boost::uuids::uuid>((uint64_t)a2, &v50) & 1) == 0)
      {
        std::bad_cast::bad_cast((std::bad_cast *)__p);
        __p[0] = &unk_2704DAAD0;
        boost::throw_exception<boost::bad_lexical_cast>((uint64_t)__p);
      }
      id v19 = (std::bad_cast_vtbl *)&v50;
      if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        id v19 = (std::bad_cast_vtbl *)v50.__r_.__value_.__r.__words[0];
      }
      buf[0].__vftable = (std::bad_cast_vtbl *)68289282;
      LOWORD(buf[1].__vftable) = 2082;
      *(std::bad_cast_vtbl **)((char *)&buf[1].__vftable + 2) = (std::bad_cast_vtbl *)"";
      WORD1(buf[2].__vftable) = 2082;
      *(std::bad_cast_vtbl **)((char *)&buf[2].__vftable + 4) = v19;
      _os_log_impl(&dword_25631F000, v18, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"No LOI entries for specified LOI Group ID\", \"LOIGroupId\":%{public, location:escape_only}s}", (uint8_t *)buf, 0x1Cu);
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v50.__r_.__value_.__l.__data_);
      }
    }

    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
    }
    uint64_t v20 = (id)logObject_MicroLocation_Default;
    if (os_signpost_enabled(v20))
    {
      memset(&v50, 0, sizeof(v50));
      if ((boost::conversion::detail::try_lexical_convert<std::string,boost::uuids::uuid>((uint64_t)a2, &v50) & 1) == 0)
      {
        std::bad_cast::bad_cast((std::bad_cast *)__p);
        __p[0] = &unk_2704DAAD0;
        boost::throw_exception<boost::bad_lexical_cast>((uint64_t)__p);
      }
      uint64_t v21 = (std::bad_cast_vtbl *)&v50;
      if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v21 = (std::bad_cast_vtbl *)v50.__r_.__value_.__r.__words[0];
      }
      buf[0].__vftable = (std::bad_cast_vtbl *)68289282;
      LOWORD(buf[1].__vftable) = 2082;
      *(std::bad_cast_vtbl **)((char *)&buf[1].__vftable + 2) = (std::bad_cast_vtbl *)"";
      WORD1(buf[2].__vftable) = 2082;
      *(std::bad_cast_vtbl **)((char *)&buf[2].__vftable + 4) = v21;
      _os_signpost_emit_with_name_impl(&dword_25631F000, v20, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "No LOI entries for specified LOI Group ID", "{\"msg%{public}.0s\":\"No LOI entries for specified LOI Group ID\", \"LOIGroupId\":%{public, location:escape_only}s}", (uint8_t *)buf, 0x1Cu);
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v50.__r_.__value_.__l.__data_);
      }
    }

    uint64_t v22 = 0;
  }
  else
  {
    memset(&v50, 0, sizeof(v50));
    long long v47 = &v50;
    do
    {
      __p[0] = 0;
      __p[1] = 0;
      *(void *)&long long v78 = 0;
      if ((boost::conversion::detail::try_lexical_convert<std::string,boost::uuids::uuid>((uint64_t)(v10 + 1), (std::string *)__p) & 1) == 0)
      {
        std::bad_cast::bad_cast(buf);
        buf[0].__vftable = (std::bad_cast_vtbl *)&unk_2704DAAD0;
        boost::throw_exception<boost::bad_lexical_cast>((uint64_t)buf);
      }
      std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100]((std::vector<std::string> **)&v47, (long long *)__p);
      if (SBYTE7(v78) < 0) {
        operator delete(__p[0]);
      }
      v10 += 8;
    }
    while (v10 != v9);
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
    }
    uint64_t v11 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      int v12 = SHIBYTE(v54.__r_.__value_.__r.__words[2]);
      std::string::size_type v13 = v54.__r_.__value_.__r.__words[0];
      boost::algorithm::join<std::vector<std::string>,char [2]>(",", (uint64_t *)&v50, (uint64_t)__p);
      int v14 = (std::bad_cast_vtbl *)&v54;
      if (v12 < 0) {
        int v14 = (std::bad_cast_vtbl *)v13;
      }
      if ((SBYTE7(v78) & 0x80u) == 0) {
        long long v15 = (std::bad_cast_vtbl *)__p;
      }
      else {
        long long v15 = (std::bad_cast_vtbl *)__p[0];
      }
      buf[0].__vftable = (std::bad_cast_vtbl *)68289538;
      LOWORD(buf[1].__vftable) = 2082;
      *(std::bad_cast_vtbl **)((char *)&buf[1].__vftable + 2) = (std::bad_cast_vtbl *)"";
      WORD1(buf[2].__vftable) = 2082;
      *(std::bad_cast_vtbl **)((char *)&buf[2].__vftable + 4) = v14;
      WORD2(buf[3].__vftable) = 2082;
      *(std::bad_cast_vtbl **)((char *)&buf[3].__vftable + 6) = v15;
      _os_log_impl(&dword_25631F000, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"LOIs for LOI Group Id\", \"LOI Group ID\":%{public, location:escape_only}s, \"LOI IDs\":%{public, location:escape_only}s}", (uint8_t *)buf, 0x26u);
      if (SBYTE7(v78) < 0) {
        operator delete(__p[0]);
      }
    }

    id v16 = *(id *)(*((void *)this + 1) + 88);
    uint64_t v17 = v16;
    if (v16)
    {
      objc_msgSend(v16, "fetchMostRecentRecordingForLoiGroupId:", a2, v47);
    }
    else
    {
      long long v91 = 0u;
      long long v92 = 0u;
      long long v89 = 0u;
      long long v90 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v83 = 0u;
      long long v84 = 0u;
      long long v81 = 0u;
      long long v82 = 0u;
      long long v79 = 0u;
      long long v80 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v78 = 0u;
    }

    if (BYTE8(v92)) {
      double v23 = *(double *)&v78;
    }
    else {
      double v23 = -1.79769313e308;
    }
    long long v47 = 0;
    char v48 = 0;
    uint64_t v49 = 0;
    int v24 = v51;
    int v25 = v52;
    uint64_t v56 = &v47;
    if (v51 == v52)
    {
      int v26 = 0;
    }
    else
    {
      do
      {
        uint64_t v55 = *v24;
        std::back_insert_iterator<std::vector<ULServiceQualityReasonEnum>>::operator=[abi:ne180100]((uint64_t *)&v56, &v55);
        v24 += 8;
      }
      while (v24 != v25);
      int v26 = (double *)v47;
      uint64_t v27 = (double *)((char *)v47 + 8);
      if (v47 != v48 && v27 != (double *)v48)
      {
        double v29 = *(double *)v47;
        uint64_t v30 = (double *)((char *)v47 + 8);
        do
        {
          double v31 = *v30++;
          double v32 = v31;
          if (v29 < v31)
          {
            double v29 = v32;
            int v26 = v27;
          }
          uint64_t v27 = v30;
        }
        while (v30 != (double *)v48);
      }
    }
    double v33 = cl::chrono::CFAbsoluteTimeClock::now();
    id v34 = *(id *)(*((void *)this + 1) + 72);
    uint64_t v35 = v34;
    long long v57 = (__int128)*a2;
    char v58 = 1;
    if (v34)
    {
      [v34 fetchMostRecentModelOfModelType:0 atLoiGroupId:&v57];
    }
    else
    {
      long long v75 = 0u;
      long long v76 = 0u;
      long long v73 = 0u;
      long long v74 = 0u;
      long long v71 = 0u;
      long long v72 = 0u;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v65 = 0u;
      long long v66 = 0u;
      long long v63 = 0u;
      long long v64 = 0u;
      long long v61 = 0u;
      long long v62 = 0u;
      long long v60 = 0u;
      memset(buf, 0, sizeof(buf));
    }

    uint64_t v22 = [MEMORY[0x263EFF9A0] dictionary];
    if (a2->var0[0])
    {
      BOOL v36 = 0;
    }
    else
    {
      unint64_t v37 = 0;
      do
      {
        unint64_t v38 = v37;
        if (v37 == 15) {
          break;
        }
        ++v37;
      }
      while (!a2->var0[v38 + 1]);
      BOOL v36 = v38 > 0xE;
    }
    uint64_t v39 = objc_msgSend(NSNumber, "numberWithBool:", v36, v47);
    [v22 setObject:v39 forKeyedSubscript:@"isLoiLegacy"];

    uint64_t v40 = [NSNumber numberWithUnsignedLong:(((char *)v52 - (char *)v51) >> 6) - 1];
    [v22 setObject:v40 forKeyedSubscript:@"deduplicatedLoiCount"];

    if (v26 != (double *)v48)
    {
      uint64_t v41 = [NSNumber numberWithDouble:v33 - *v26];
      [v22 setObject:v41 forKeyedSubscript:@"lastSeenAge"];
    }
    int64x2_t v42 = [NSNumber numberWithBool:BYTE8(v92)];
    [v22 setObject:v42 forKeyedSubscript:@"hasRecordings"];

    if (BYTE8(v92))
    {
      int v43 = [NSNumber numberWithDouble:v33 - v23];
      [v22 setObject:v43 forKeyedSubscript:@"lastRecordingAge"];
    }
    uint64_t v44 = [NSNumber numberWithBool:BYTE8(v76)];
    [v22 setObject:v44 forKeyedSubscript:@"isModelExists"];

    if (BYTE8(v76))
    {
      CFAbsoluteTime v45 = [NSNumber numberWithBool:BYTE8(v65)];
      [v22 setObject:v45 forKeyedSubscript:@"isModelStable"];
    }
    std::__optional_destruct_base<CLMicroLocationModelTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
    if (v47)
    {
      char v48 = (char *)v47;
      operator delete(v47);
    }
    std::__optional_destruct_base<CLMicroLocationRecordingEventsTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
    buf[0].__vftable = (std::bad_cast_vtbl *)&v50;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
  buf[0].__vftable = (std::bad_cast_vtbl *)&v51;
  std::vector<CLMiLoLoiTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  return v22;
}

void sub_256481454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::exception a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::exception::~exception(&a72);
  if (a17 < 0) {
    operator delete(__p);
  }

  a33.__vftable = (std::exception_vtbl *)&a18;
  std::vector<CLMiLoLoiTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void CLMicroLocationAnalytics::analyzeTriggerTypes(CLMicroLocationAnalytics *a1, uint64_t a2)
{
  void v20[4] = *MEMORY[0x263EF8340];
  if (ULSettings::get<ULSettings::AnalyticsSendEventEnabled>())
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
    }
    uint64_t v4 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 68289026;
      int v13 = 0;
      __int16 v14 = 2082;
      long long v15 = "";
      _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"analyzing daily trigger usage\"}", (uint8_t *)&v12, 0x12u);
    }
    std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v20, a2);
    uint64_t v5 = CLMicroLocationAnalytics::analyzeTriggerTypesInternal(a1, (uint64_t)v20);
    std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v20);
    if (v5)
    {
      uint64_t v6 = *(void *)(a2 + 24);
      if (!v6) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v6 + 48))(v6))
      {
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
        }
        uint64_t v10 = (id)logObject_MicroLocation_Default;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v11 = [@"com.apple.microlocation.triggers.daily" UTF8String];
          int v12 = 68289539;
          int v13 = 0;
          __int16 v14 = 2082;
          long long v15 = "";
          __int16 v16 = 2082;
          uint64_t v17 = v11;
          __int16 v18 = 2113;
          id v19 = v5;
          _os_log_impl(&dword_25631F000, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Sending analytics event\", \"Event name\":%{public, location:escape_only}s, \"event\":%{private, location:escape_only}@}", (uint8_t *)&v12, 0x26u);
        }

        AnalyticsSendEvent();
        goto LABEL_27;
      }
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
      }
      id v7 = logObject_MicroLocation_Default;
      if (!os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
LABEL_27:

        return;
      }
      int v12 = 68289026;
      int v13 = 0;
      __int16 v14 = 2082;
      long long v15 = "";
      BOOL v8 = "{\"msg%{public}.0s\":\"Trigger types analytics canceled\"}";
    }
    else
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
      }
      id v7 = logObject_MicroLocation_Default;
      if (!os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_27;
      }
      int v12 = 68289026;
      int v13 = 0;
      __int16 v14 = 2082;
      long long v15 = "";
      BOOL v8 = "{\"msg%{public}.0s\":\"daily trigger analytics event was not created.\"}";
    }
    _os_log_impl(&dword_25631F000, v7, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v12, 0x12u);
    goto LABEL_27;
  }
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
  }
  BOOL v9 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    long long v15 = "";
    _os_log_impl(&dword_25631F000, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"not analyzing trigger types, since sending to core-analytics is disabled\"}", (uint8_t *)&v12, 0x12u);
  }
}

void sub_25648197C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NSMutableDictionary *CLMicroLocationAnalytics::analyzeTriggerTypesInternal(CLMicroLocationAnalytics *a1, uint64_t a2)
{
  v80[2] = *MEMORY[0x263EF8340];
  char v59 = [MEMORY[0x263EFF910] date];
  CLMicroLocationTimeUtils::getTimeDeltaDaysAgo(v59, (NSDate *)0xFFFFFFFFLL);
  double v5 = v4;
  CLMicroLocationTimeUtils::getTimeDeltaDaysAgo(v59, 0);
  double v7 = v6;
  (*(void (**)(void))(**(void **)a1 + 16))();
  uint64_t v8 = *(void *)(a2 + 24);
  if (!v8) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 48))(v8))
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
    }
    BOOL v9 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      LOWORD(v78) = 2082;
      *(void *)((char *)&v78 + 2) = "";
      _os_log_impl(&dword_25631F000, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Trigger types analytics canceled\"}", buf, 0x12u);
    }
    uint64_t v10 = 0;
    goto LABEL_51;
  }
  id v11 = *(id *)(*((void *)a1 + 1) + 48);
  int v12 = operator new(4uLL);
  *int v12 = 48;
  *(void *)&long long v78 = v12 + 1;
  *((void *)&v78 + 1) = v12 + 1;
  *(void *)uint64_t buf = v12;
  if (v11)
  {
    objc_msgSend(v11, "fetchLoggedEventsForTypes:fromTime:toTime:limit:", buf, *(void *)&v5, 1, *(void *)&v7, 1, 0);
    int v12 = *(_DWORD **)buf;
    if (!*(void *)buf) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v64 = 0;
    uint64_t v65 = 0;
    uint64_t v66 = 0;
  }
  *(void *)&long long v78 = v12;
  operator delete(v12);
LABEL_13:

  uint64_t v61 = 0;
  long long v62 = 0;
  unint64_t v63 = 0;
  uint64_t v15 = v64;
  uint64_t v14 = v65;
  if (v64 != v65)
  {
    __int16 v16 = 0;
    do
    {
      if (*(_DWORD *)(v15 + 24) == 48 && (*(unsigned char *)(v15 + 327) & 8) != 0)
      {
        uint64_t v17 = *(const CLMicroLocationProto::TriggerEvent **)(v15 + 256);
        if (!v17)
        {
          uint64_t v17 = *(const CLMicroLocationProto::TriggerEvent **)(CLMicroLocationProto::ReceivedEvent::default_instance(v13)
                                                             + 224);
          __int16 v16 = v62;
        }
        if ((unint64_t)v16 >= v63)
        {
          int v13 = (CLMicroLocationProto::ReceivedEvent *)std::vector<CLMicroLocationProto::TriggerEvent>::__push_back_slow_path<CLMicroLocationProto::TriggerEvent const&>(&v61, v17);
          __int16 v16 = v13;
        }
        else
        {
          int v13 = (CLMicroLocationProto::ReceivedEvent *)CLMicroLocationProto::TriggerEvent::TriggerEvent(v16, v17);
          __int16 v16 = (CLMicroLocationProto::TriggerEvent *)((char *)v16 + 88);
        }
        long long v62 = v16;
        uint64_t v14 = v65;
      }
      v15 += 336;
    }
    while (v15 != v14);
  }
  CLMicroLocationTriggerCounters::CLMicroLocationTriggerCounters(buf, &v61);
  unint64_t LegacyLocalizationsCount = CLMicroLocationTriggerCounters::getLegacyLocalizationsCount((CLMicroLocationTriggerCounters *)buf);
  unint64_t MotionLocalizationsCount = CLMicroLocationTriggerCounters::getMotionLocalizationsCount((CLMicroLocationTriggerCounters *)buf);
  unint64_t NewLocalizationsCount = CLMicroLocationTriggerCounters::getNewLocalizationsCount((CLMicroLocationTriggerCounters *)buf);
  unint64_t LocalizationsCausedByWithType = CLMicroLocationTriggerCounters::getLocalizationsCausedByWithType((uint64_t)buf, 1u, 1);
  unint64_t v55 = CLMicroLocationTriggerCounters::getLocalizationsCausedByWithType((uint64_t)buf, 0, 1);
  uint64_t LocalizationsCausedByWithTypeMotionState = CLMicroLocationTriggerCounters::getLocalizationsCausedByWithTypeMotionState((uint64_t)buf, 0, 1, 0);
  uint64_t v20 = CLMicroLocationTriggerCounters::getLocalizationsCausedByWithTypeMotionState((uint64_t)buf, 0, 1, 1);
  uint64_t v21 = CLMicroLocationTriggerCounters::getLocalizationsCausedByWithTypeMotionState((uint64_t)buf, 0, 1, 3);
  uint64_t v22 = CLMicroLocationTriggerCounters::getLocalizationsCausedByWithType((uint64_t)buf, 0, 2);
  uint64_t RecordingsCountWithType = CLMicroLocationTriggerCounters::getRecordingsCountWithType((uint64_t)buf, 2u);
  uint64_t v10 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x263EFF9A0]);
  int v24 = [NSNumber numberWithUnsignedLong:CLMicroLocationTriggerCounters::getRecordingsCount((CLMicroLocationTriggerCounters *)buf)];
  [(NSMutableDictionary *)v10 setObject:v24 forKeyedSubscript:@"TotalRecordings"];

  int v25 = [NSNumber numberWithUnsignedLong:CLMicroLocationTriggerCounters::getLocalizationCount((CLMicroLocationTriggerCounters *)buf)];
  [(NSMutableDictionary *)v10 setObject:v25 forKeyedSubscript:@"TotalLocalizations"];

  int v26 = [NSNumber numberWithUnsignedLong:LegacyLocalizationsCount];
  [(NSMutableDictionary *)v10 setObject:v26 forKeyedSubscript:@"TotalLegacyLocalizations"];

  uint64_t v27 = [NSNumber numberWithUnsignedLong:CLMicroLocationTriggerCounters::getCachedLegacyLocalizationsCount((CLMicroLocationTriggerCounters *)buf)];
  [(NSMutableDictionary *)v10 setObject:v27 forKeyedSubscript:@"TotalCachedLegacyLocalizations"];

  int v28 = [NSNumber numberWithUnsignedLong:CLMicroLocationTriggerCounters::getNonCachedLegacyLocalizationsCount((CLMicroLocationTriggerCounters *)buf)];
  [(NSMutableDictionary *)v10 setObject:v28 forKeyedSubscript:@"TotalNonCachedLegacyLocalizations"];

  double v29 = [NSNumber numberWithUnsignedLong:MotionLocalizationsCount];
  [(NSMutableDictionary *)v10 setObject:v29 forKeyedSubscript:@"TotalMotionLocalizations"];

  uint64_t v30 = [NSNumber numberWithUnsignedLong:v55];
  [(NSMutableDictionary *)v10 setObject:v30 forKeyedSubscript:@"TotalMotionLocalizationsWhileDisplayOn"];

  double v31 = [NSNumber numberWithUnsignedLong:LocalizationsCausedByWithTypeMotionState];
  [(NSMutableDictionary *)v10 setObject:v31 forKeyedSubscript:@"TotalStartMotionLocalizationsWhileDisplayOn"];

  double v32 = [NSNumber numberWithUnsignedLong:v20];
  [(NSMutableDictionary *)v10 setObject:v32 forKeyedSubscript:@"TotalInMotionLocalizationsWhileDisplayOn"];

  double v33 = [NSNumber numberWithUnsignedLong:v21];
  [(NSMutableDictionary *)v10 setObject:v33 forKeyedSubscript:@"TotalStopMotionLocalizationsWhileDisplayOn"];

  id v34 = [NSNumber numberWithUnsignedLong:RecordingsCountWithType];
  [(NSMutableDictionary *)v10 setObject:v34 forKeyedSubscript:@"TotalRecordingSystemTriggers"];

  uint64_t v35 = [NSNumber numberWithUnsignedLong:v22];
  [(NSMutableDictionary *)v10 setObject:v35 forKeyedSubscript:@"TotalLocalizationSystemTriggers"];

  BOOL v36 = [NSNumber numberWithUnsignedLong:LocalizationsCausedByWithType];
  [(NSMutableDictionary *)v10 setObject:v36 forKeyedSubscript:@"TotalMotionLocalizationsWhenDisplayTurnedOn"];

  unint64_t v37 = objc_msgSend(NSNumber, "numberWithUnsignedLong:", CLMicroLocationTriggerCounters::getLocalizationsCausedByWithType((uint64_t)buf, 2u, 1));
  [(NSMutableDictionary *)v10 setObject:v37 forKeyedSubscript:@"TotalMotionLocalizationsWhenRescheduled"];

  unint64_t v38 = [NSNumber numberWithUnsignedLong:NewLocalizationsCount];
  [(NSMutableDictionary *)v10 setObject:v38 forKeyedSubscript:@"TotalNewLocalizations"];

  uint64_t v39 = objc_msgSend(NSNumber, "numberWithUnsignedLong:", CLMicroLocationTriggerCounters::getLocalizationsCausedBy((uint64_t)buf, 1u));
  [(NSMutableDictionary *)v10 setObject:v39 forKeyedSubscript:@"TotalLocalizationsWhenDisplayTurnedOn"];

  uint64_t v40 = objc_msgSend(NSNumber, "numberWithUnsignedLong:", CLMicroLocationTriggerCounters::getLocalizationsCausedBy((uint64_t)buf, 2u));
  [(NSMutableDictionary *)v10 setObject:v40 forKeyedSubscript:@"TotalLocalizationsWhenRescheduled"];

  CLMicroLocationAnalytics::addSpectatingDurationMetrics(a1, v10, v5, v7);
  CLMicroLocationAnalytics::addMotionSpectatingDurationMetrics(a1, v10, v5, v7);
  uint64_t v41 = +[ULDefaultsSingleton shared];
  int64x2_t v42 = [v41 defaultsDictionary];

  int v43 = [NSString stringWithUTF8String:"ULAnalyticsTriggerCountThreshold"];
  uint64_t v44 = [v42 objectForKey:v43];
  if (v44 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    unsigned int v45 = [v44 unsignedIntValue];
  }
  else {
    unsigned int v45 = objc_msgSend(&unk_2704F1F50, "unsignedIntValue", v55);
  }
  unsigned int v46 = v45;

  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
  }
  long long v47 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long v67 = 68290050;
    __int16 v68 = 2082;
    *(_DWORD *)&v67[4] = 0;
    *(void *)long long v69 = "";
    *(_WORD *)&v69[8] = 1026;
    unsigned int v70 = v46;
    __int16 v71 = 2050;
    unint64_t v72 = LegacyLocalizationsCount;
    __int16 v73 = 2050;
    unint64_t v74 = MotionLocalizationsCount;
    __int16 v75 = 2050;
    unint64_t v76 = NewLocalizationsCount;
    _os_log_impl(&dword_25631F000, v47, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Adding ratios to trigger analytics if appropriate\", \"TriggerThreshold\":%{public}d, \"TotalLegacyLocalizations\":%{public}lu, \"TotalMotionLocalizations\":%{public}lu, \"TotalNewLocalizations\":%{public}lu}", v67, 0x36u);
  }
  if (LegacyLocalizationsCount)
  {
    if (MotionLocalizationsCount >= v46 && LegacyLocalizationsCount >= v46)
    {
      *(float *)&double v48 = (float)MotionLocalizationsCount / (float)LegacyLocalizationsCount;
      uint64_t v49 = [NSNumber numberWithFloat:v48];
      [(NSMutableDictionary *)v10 setObject:v49 forKeyedSubscript:@"MotionLocalizationAndLegacyLocalizationsRatio"];
    }
    if (NewLocalizationsCount >= v46 && LegacyLocalizationsCount >= v46)
    {
      *(float *)&double v48 = (float)NewLocalizationsCount / (float)LegacyLocalizationsCount;
      std::string v50 = [NSNumber numberWithFloat:v48];
      [(NSMutableDictionary *)v10 setObject:v50 forKeyedSubscript:@"NewLocalizationAndLegacyLocalizationsRatio"];
    }
  }
  if (LocalizationsCausedByWithType && v55 >= v46 && LocalizationsCausedByWithType >= v46)
  {
    *(float *)&double v48 = (float)v55 / (float)LocalizationsCausedByWithType;
    uint64_t v51 = [NSNumber numberWithFloat:v48];
    [(NSMutableDictionary *)v10 setObject:v51 forKeyedSubscript:@"MotionWhileDisplayOnAndWhenDisplayTurnedOnRatio"];
  }
  double v60 = v7;
  CLMicroLocationAnalytics::getLegacyClientStatusUpdate((uint64_t)a1, &v60, (CLMicroLocationProto::LegacyClientStatusUpdate *)v67);
  if (BYTE6(v72))
  {
    uint64_t v52 = [NSNumber numberWithBool:*(_DWORD *)&v69[2] == 1];
    [(NSMutableDictionary *)v10 setObject:v52 forKeyedSubscript:@"isLowObservationLegacyClient"];

    if (!BYTE6(v72)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    uint64_t v53 = [NSNumber numberWithUnsignedInt:*(unsigned int *)&v69[6]];
    [(NSMutableDictionary *)v10 setObject:v53 forKeyedSubscript:@"ModelQuality"];
  }
  if (BYTE6(v72)) {
    CLMicroLocationProto::LegacyClientStatusUpdate::~LegacyClientStatusUpdate((CLMicroLocationProto::LegacyClientStatusUpdate *)v67);
  }
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)v80);
  *(void *)long long v67 = &v79;
  std::vector<CLMicroLocationProto::TriggerEvent>::__destroy_vector::operator()[abi:ne180100]((void ***)v67);
  if (*(void *)buf)
  {
    *(void *)&long long v78 = *(void *)buf;
    operator delete(*(void **)buf);
  }
  *(void *)uint64_t buf = &v61;
  std::vector<CLMicroLocationProto::TriggerEvent>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)uint64_t buf = &v64;
  std::vector<CLMicroLocationLoggedEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
LABEL_51:

  return v10;
}

void sub_2564823F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char *__p,uint64_t a30)
{
  CLMicroLocationTriggerCounters::~CLMicroLocationTriggerCounters((CLMicroLocationTriggerCounters *)&__p);
  std::string __p = &a15;
  std::vector<CLMicroLocationProto::TriggerEvent>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string __p = &a18;
  std::vector<CLMicroLocationLoggedEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationAnalytics::getMiLoSpectatingDuration(uint64_t a1, double *a2, double *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  double v5 = *a3;
  double v6 = *a2;
  if (*a3 >= *a2)
  {
    id v14 = *(id *)(*(void *)(a1 + 8) + 48);
    uint64_t v15 = v14;
    if (v14)
    {
      [v14 fetchMostRecentLoggedEventForTypes:a4 BeforeTime:v6];
    }
    else
    {
      uint64_t v35 = 0;
      long long v33 = 0u;
      memset(v34, 0, sizeof(v34));
      *(_OWORD *)uint64_t buf = 0u;
    }

    if ((_BYTE)v35)
    {
      uint64_t v16 = *(void *)(a5 + 24);
      if (!v16) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      int v17 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)v16 + 48))(v16, buf);
      char v18 = v17;
      if (v17) {
        double v19 = *a2;
      }
      else {
        double v19 = 0.0;
      }
    }
    else
    {
      char v18 = 0;
      double v19 = 0.0;
    }
    id v20 = *(id *)(*(void *)(a1 + 8) + 48);
    uint64_t v21 = v20;
    if (v20)
    {
      objc_msgSend(v20, "fetchLoggedEventsForTypes:fromTime:toTime:limit:", a4, *(void *)&v6, 1, *(void *)&v5, 1, 0);
    }
    else
    {
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
    }

    if (v29 == v28)
    {
      double v23 = 0.0;
    }
    else
    {
      uint64_t v22 = v29 - 336;
      double v23 = 0.0;
      do
      {
        uint64_t v24 = *(void *)(a5 + 24);
        if (!v24) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v24 + 48))(v24, v22))
        {
          if (!v18)
          {
            double v19 = *(double *)(v22 + 16);
            char v18 = 1;
          }
        }
        else if (v18)
        {
          char v18 = 0;
          double v23 = v23 + *(double *)(v22 + 16) - v19;
        }
        else
        {
          char v18 = 0;
        }
        BOOL v25 = v22 == v28;
        v22 -= 336;
      }
      while (!v25);
    }
    double v26 = *a3 - v19;
    if (!v18) {
      double v26 = -0.0;
    }
    uint64_t v8 = (uint64_t)(v23 + v26);
    double v31 = (void **)&v28;
    std::vector<CLMicroLocationLoggedEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v31);
    if ((_BYTE)v35) {
      CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v34);
    }
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
    }
    double v7 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_25631F000, v7, OS_LOG_TYPE_ERROR, "got start time bigger than end time while calculating milo spectating duration", buf, 2u);
    }
    return 0;
  }
  return v8;
}

void sub_256482910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  if (a55) {
    CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)&a17);
  }
  _Unwind_Resume(a1);
}

void CLMicroLocationAnalytics::addPerHoursFields(uint64_t a1, void *a2, void *a3, void *a4, double *a5)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  uint64_t v27 = v9;
  if (*a5 <= 0.0)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
    }
    double v26 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_25631F000, v26, OS_LOG_TYPE_ERROR, "Tried to add count per hour fields with duration equals 0.", buf, 2u);
    }
  }
  else
  {
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    id v11 = v9;
    uint64_t v12 = [v11 countByEnumeratingWithState:&v28 objects:v36 count:16];
    if (v12)
    {
      uint64_t v13 = *(void *)v29;
      do
      {
        uint64_t v14 = 0;
        do
        {
          if (*(void *)v29 != v13) {
            objc_enumerationMutation(v11);
          }
          uint64_t v15 = *(void **)(*((void *)&v28 + 1) + 8 * v14);
          uint64_t v16 = [v8 objectForKey:v15];
          int v17 = v16;
          if (v16)
          {
            [v16 doubleValue];
            double v19 = v18;
            double v20 = *a5;
            uint64_t v21 = [v15 stringByAppendingString:v10];
            double v22 = v19 / v20;
            *(float *)&double v22 = v19 / v20;
            double v23 = [NSNumber numberWithFloat:v22];
            [v8 setObject:v23 forKeyedSubscript:v21];
          }
          else
          {
            if (onceToken_MicroLocation_Default != -1) {
              dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
            }
            uint64_t v21 = (id)logObject_MicroLocation_Default;
            if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
            {
              uint64_t v24 = [v15 UTF8String];
              uint64_t v25 = [@"com.apple.microlocation.triggers.daily" UTF8String];
              *(_DWORD *)uint64_t buf = 136315394;
              uint64_t v33 = v24;
              __int16 v34 = 2080;
              uint64_t v35 = v25;
              _os_log_impl(&dword_25631F000, v21, OS_LOG_TYPE_ERROR, "no value found for key %s in %s CA event. Skipping it.", buf, 0x16u);
            }
          }

          ++v14;
        }
        while (v12 != v14);
        uint64_t v12 = [v11 countByEnumeratingWithState:&v28 objects:v36 count:16];
      }
      while (v12);
    }
  }
}

void sub_256482C3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationAnalytics::getLegacyClientStatusUpdate(uint64_t a1@<X0>, double *a2@<X1>, CLMicroLocationProto::LegacyClientStatusUpdate *a3@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  double v4 = *a2;
  id v5 = *(id *)(*(void *)(a1 + 8) + 48);
  double v6 = operator new(4uLL);
  *double v6 = 49;
  *(void *)&uint8_t buf[8] = v6 + 1;
  *(void *)&uint8_t buf[16] = v6 + 1;
  *(void *)uint64_t buf = v6;
  if (v5)
  {
    objc_msgSend(v5, "fetchLoggedEventsForTypes:fromTime:toTime:limit:", buf, v4 + -172800.0, 1, *(void *)&v4, 1, 0);
    double v6 = *(_DWORD **)buf;
    if (!*(void *)buf) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
  }
  *(void *)&uint8_t buf[8] = v6;
  operator delete(v6);
LABEL_6:

  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
  }
  double v7 = logObject_MicroLocation_Default;
  uint64_t v8 = os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG);
  if (v8)
  {
    *(_DWORD *)uint64_t buf = 134217984;
    *(void *)&uint8_t buf[4] = 0xCF3CF3CF3CF3CF3DLL * ((v18 - v17) >> 4);
    _os_log_impl(&dword_25631F000, v7, OS_LOG_TYPE_DEBUG, "Selected %lu Legacy status updates", buf, 0xCu);
  }
  for (uint64_t i = v17; i != v18; i += 336)
  {
    uint64_t v10 = *(void *)(i + 264);
    if (!v10)
    {
      uint64_t v8 = CLMicroLocationProto::ReceivedEvent::default_instance((CLMicroLocationProto::ReceivedEvent *)v8);
      uint64_t v10 = *(void *)(v8 + 232);
    }
    int v11 = *(_DWORD *)(v10 + 12);
    if (v11 != 255)
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
      }
      uint64_t v14 = logObject_MicroLocation_Default;
      BOOL v15 = os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT);
      if (v15)
      {
        *(_DWORD *)uint64_t buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&unsigned char buf[18] = 1026;
        *(_DWORD *)&buf[20] = v11 != 0;
        _os_log_impl(&dword_25631F000, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"legacy client low number of observation status found\", \"number of observation status\":%{public}hhd}", buf, 0x18u);
      }
      uint64_t v16 = *(const CLMicroLocationProto::LegacyClientStatusUpdate **)(i + 264);
      if (!v16) {
        uint64_t v16 = *(const CLMicroLocationProto::LegacyClientStatusUpdate **)(CLMicroLocationProto::ReceivedEvent::default_instance((CLMicroLocationProto::ReceivedEvent *)v15)
      }
                                                                       + 232);
      CLMicroLocationProto::LegacyClientStatusUpdate::LegacyClientStatusUpdate(a3, v16);
      char v13 = 1;
      goto LABEL_28;
    }
  }
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
  }
  uint64_t v12 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl(&dword_25631F000, v12, OS_LOG_TYPE_DEFAULT, "Could not determine legacy client low number of observation status.", buf, 2u);
  }
  char v13 = 0;
  *(unsigned char *)a3 = 0;
LABEL_28:
  *((unsigned char *)a3 + 32) = v13;
  *(void *)uint64_t buf = &v17;
  std::vector<CLMicroLocationLoggedEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_256482F88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *__p, uint64_t a14)
{
  std::string __p = &a10;
  std::vector<CLMicroLocationLoggedEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void CLMicroLocationAnalytics::addSpectatingDurationMetrics(CLMicroLocationAnalytics *this, NSMutableDictionary *a2, double a3, double a4)
{
  v36[4] = *MEMORY[0x263EF8340];
  double v7 = a2;
  v36[0] = &unk_2704E0E88;
  v36[3] = v36;
  *(double *)&v29.__r_.__value_.__l.__data_ = a3;
  *(double *)&v28.__r_.__value_.__l.__data_ = a4;
  uint64_t v8 = operator new(0xCuLL);
  *(void *)long long v31 = v8 + 3;
  *(void *)&v31[8] = v8 + 3;
  *(void *)uint64_t v8 = 0x220000002CLL;
  void v8[2] = 35;
  std::string __p = v8;
  uint64_t MiLoSpectatingDuration = CLMicroLocationAnalytics::getMiLoSpectatingDuration((uint64_t)this, (double *)&v29, (double *)&v28, (uint64_t)&__p, (uint64_t)v36);
  if (*(double *)&__p != 0.0)
  {
    *(void *)long long v31 = __p;
    operator delete(__p);
  }
  uint64_t v10 = +[ULDefaultsSingleton shared];
  int v11 = [v10 defaultsDictionary];

  uint64_t v12 = [NSString stringWithUTF8String:"ULAnalyticsTriggerMinimumSpectatingDuration"];
  char v13 = [v11 objectForKey:v12];
  if (v13 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    int v14 = [v13 intValue];
  }
  else {
    int v14 = [&unk_2704F1F20 intValue];
  }
  int v15 = v14;

  double v16 = (double)MiLoSpectatingDuration / 3600.0;
  if (v16 >= (double)v15)
  {
    uint64_t v17 = [(NSMutableDictionary *)v7 allKeys];
    *(double *)&std::string __p = (double)MiLoSpectatingDuration / 3600.0;
    CLMicroLocationAnalytics::addPerHoursFields((uint64_t)v17, v7, v17, @"PerHour", (double *)&__p);
  }
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
  }
  uint64_t v18 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    std::to_string(&v29, a3);
    int v19 = SHIBYTE(v29.__r_.__value_.__r.__words[2]);
    std::string::size_type v20 = v29.__r_.__value_.__r.__words[0];
    std::to_string(&v28, a4);
    uint64_t v21 = &v29;
    if (v19 < 0) {
      uint64_t v21 = (std::string *)v20;
    }
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      double v22 = &v28;
    }
    else {
      double v22 = (std::string *)v28.__r_.__value_.__r.__words[0];
    }
    float v23 = v16;
    std::string __p = (void *)68289795;
    *(_WORD *)long long v31 = 2082;
    *(void *)&_OWORD v31[2] = "";
    *(_WORD *)&unsigned char v31[10] = 2082;
    *(void *)&v31[12] = v21;
    __int16 v32 = 2082;
    uint64_t v33 = v22;
    __int16 v34 = 2049;
    double v35 = v23;
    _os_log_impl(&dword_25631F000, v18, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Calculated microLocation spectating duration\", \"startTime\":%{public, location:escape_only}s, \"stopTime\":%{public, location:escape_only}s, \"duration (hours)\":\"%{private}5f\"}", (uint8_t *)&__p, 0x30u);
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    float v23 = v16;
  }

  *(float *)&double v24 = v23;
  uint64_t v25 = [NSNumber numberWithFloat:v24];
  [(NSMutableDictionary *)v7 setObject:v25 forKeyedSubscript:@"Duration"];

  LODWORD(v26) = vcvtmd_s64_f64(v16);
  uint64_t v27 = [NSNumber numberWithInt:v26];
  [(NSMutableDictionary *)v7 setObject:v27 forKeyedSubscript:@"DurationBounded"];

  std::__function::__value_func<BOOL ()(CLMicroLocationLoggedEventsTable::Entry const&)>::~__value_func[abi:ne180100](v36);
}

void sub_256483348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  std::__function::__value_func<BOOL ()(CLMicroLocationLoggedEventsTable::Entry const&)>::~__value_func[abi:ne180100](&a25);
  _Unwind_Resume(a1);
}

void CLMicroLocationAnalytics::addMotionSpectatingDurationMetrics(CLMicroLocationAnalytics *this, NSMutableDictionary *a2, double a3, double a4)
{
  void v29[4] = *MEMORY[0x263EF8340];
  double v7 = a2;
  v29[0] = &unk_2704E0F18;
  void v29[3] = v29;
  *(double *)&v22.__r_.__value_.__l.__data_ = a3;
  *(double *)&v21.__r_.__value_.__l.__data_ = a4;
  uint64_t v8 = operator new(8uLL);
  std::string __p = v8;
  void *v8 = 0x320000002CLL;
  *(void *)double v24 = v8 + 1;
  *(void *)&v24[8] = v8 + 1;
  uint64_t MiLoSpectatingDuration = CLMicroLocationAnalytics::getMiLoSpectatingDuration((uint64_t)this, (double *)&v22, (double *)&v21, (uint64_t)&__p, (uint64_t)v29);
  if (__p)
  {
    *(void *)double v24 = __p;
    operator delete(__p);
  }
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
  }
  double v10 = (double)MiLoSpectatingDuration / 3600.0;
  int v11 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    std::to_string(&v22, a3);
    int v12 = SHIBYTE(v22.__r_.__value_.__r.__words[2]);
    std::string::size_type v13 = v22.__r_.__value_.__r.__words[0];
    std::to_string(&v21, a4);
    int v14 = &v22;
    if (v12 < 0) {
      int v14 = (std::string *)v13;
    }
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v15 = &v21;
    }
    else {
      int v15 = (std::string *)v21.__r_.__value_.__r.__words[0];
    }
    float v16 = v10;
    std::string __p = (void *)68289795;
    *(_WORD *)double v24 = 2082;
    *(void *)&v24[2] = "";
    *(_WORD *)&unsigned char v24[10] = 2082;
    *(void *)&v24[12] = v14;
    __int16 v25 = 2082;
    uint64_t v26 = v15;
    __int16 v27 = 2049;
    double v28 = v16;
    _os_log_impl(&dword_25631F000, v11, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Calculated microLocation motion spectating duration\", \"startTime\":%{public, location:escape_only}s, \"stopTime\":%{public, location:escape_only}s, \"duration (hours)\":\"%{private}5f\"}", (uint8_t *)&__p, 0x30u);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    float v16 = v10;
  }

  *(float *)&double v17 = v16;
  uint64_t v18 = [NSNumber numberWithFloat:v17];
  [(NSMutableDictionary *)v7 setObject:v18 forKeyedSubscript:@"MotionDuration"];

  LODWORD(v19) = vcvtmd_s64_f64(v10);
  std::string::size_type v20 = [NSNumber numberWithInt:v19];
  [(NSMutableDictionary *)v7 setObject:v20 forKeyedSubscript:@"MotionDurationBounded"];

  std::__function::__value_func<BOOL ()(CLMicroLocationLoggedEventsTable::Entry const&)>::~__value_func[abi:ne180100](v29);
}

void sub_256483694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  std::__function::__value_func<BOOL ()(CLMicroLocationLoggedEventsTable::Entry const&)>::~__value_func[abi:ne180100](&a25);
  _Unwind_Resume(a1);
}

void CLMicroLocationTriggerCounters::~CLMicroLocationTriggerCounters(CLMicroLocationTriggerCounters *this)
{
  boost::uuids::detail::random_provider_base::destroy((CLMicroLocationTriggerCounters *)((char *)this + 48));
  id v3 = (void **)((char *)this + 24);
  std::vector<CLMicroLocationProto::TriggerEvent>::__destroy_vector::operator()[abi:ne180100](&v3);
  id v2 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v2;
    operator delete(v2);
  }
}

uint64_t CLMicroLocationAnalytics::generateWiFiChannelHistogramForBlueAtlas@<X0>(CLMicroLocationAnalytics *this@<X0>, uuid a2@<0:X1, 8:X2>, uint64_t a3@<X8>)
{
  double v4 = *(id **)&a2.var0[8];
  uint64_t v107 = *MEMORY[0x263EF8340];
  *(void *)&long long v106 = this;
  *((void *)&v106 + 1) = *(void *)a2.var0;
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
  }
  double v6 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    double v7 = operator new(0x28uLL);
    __p[0] = v7;
    *(_OWORD *)&__p[1] = xmmword_256514540;
    *double v7 = 0u;
    v7[1] = 0u;
    *(void *)((char *)v7 + 29) = 0;
    boost::uuids::to_chars<char *>((uint64_t)&v106, v7);
    uint64_t v8 = __p;
    if (SHIBYTE(__p[2]) < 0) {
      uint64_t v8 = (void **)__p[0];
    }
    *(_DWORD *)uint64_t buf = 68289282;
    int v87 = 0;
    __int16 v88 = 2082;
    long long v89 = "";
    __int16 v90 = 2082;
    long long v91 = v8;
    _os_log_impl(&dword_25631F000, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"analyzing WiFi channels for custom LOI\", \"LoiGroupId\":%{public, location:escape_only}s}", buf, 0x1Cu);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
  }

  memset(v75, 0, sizeof(v75));
  int v76 = 1065353216;
  id v9 = v4[9];
  double v10 = v9;
  long long v101 = v106;
  char v102 = 1;
  if (v9)
  {
    [v9 fetchMostRecentModelOfModelType:3 atLoiGroupId:&v101];
  }
  else
  {
    long long v105 = 0u;
    memset(v104, 0, sizeof(v104));
    memset(__p, 0, sizeof(__p));
  }

  if (BYTE8(v105))
  {
    CLMicroLocationModel::fromProtobuf(v104, (const CLMicroLocationProto::Model *)v75, (uint64_t)buf);
    if (v94)
    {
      v74[0] = 0;
      v74[1] = 0;
      __int16 v73 = (uint64_t *)v74;
      int v11 = (CLMacAddress *)v93[3];
      int v12 = (CLMacAddress *)v93[4];
      while (v11 != v12)
      {
        v83[0] = (CLMacAddress)v11->var0;
        unint64_t v57 = CLMacAddress::toUint64(v83);
        std::__tree<unsigned long long>::__emplace_unique_key_args<unsigned long long,unsigned long long>(&v73, &v57, (uint64_t *)&v57);
        ++v11;
      }
      uint64_t v70 = 0;
      __int16 v71 = 0;
      unint64_t v72 = 0;
      ULSettings::getRecordingEventsForModelType((char **)v69);
      id v13 = v4[11];
      int v14 = v13;
      *(_OWORD *)&v83[0].var0 = v106;
      LOBYTE(v83[2].var0) = 1;
      if (v13)
      {
        [v13 fetchRecordingEventTriggersForLearningMeasurements:v69 atLoiGroupId:v83];
      }
      else
      {
        uint64_t v66 = 0;
        long long v67 = 0;
        uint64_t v68 = 0;
      }

      uint64_t v19 = v66;
      std::string::size_type v20 = v67;
      if (v66 != v67)
      {
        while (1)
        {
          id v21 = v4[8];
          v84[0] = *v19;
          var0 = operator new(0x10uLL);
          v83[1].var0 = (unint64_t)(var0 + 1);
          v83[2].var0 = (unint64_t)(var0 + 1);
          _OWORD *var0 = v84[0];
          v83[0].var0 = (unint64_t)var0;
          if (!v21) {
            break;
          }
          [v21 fetchMeasurementsForRecordingUUIDs:v83];
          var0 = (_OWORD *)v83[0].var0;
          if (v83[0].var0) {
            goto LABEL_34;
          }
LABEL_35:

          uint64_t v24 = v57;
          uint64_t v25 = v58;
          while (v24 != v25)
          {
            if (*(_DWORD *)(v24 + 96) == 1)
            {
              uint64_t v26 = *(const CLMicroLocationProto::WiFiRssi **)(v24 + 48);
              if (!v26) {
                uint64_t v26 = *(const CLMicroLocationProto::WiFiRssi **)(CLMicroLocationProto::Measurement::default_instance(v23)
              }
                                                               + 16);
              CLMicroLocationProto::WiFiRssi::WiFiRssi((CLMicroLocationProto::WiFiRssi *)v83, v26);
              __int16 v27 = v74[0];
              if (v74[0])
              {
                double v28 = v74;
                do
                {
                  std::string v29 = v27;
                  long long v30 = v28;
                  unint64_t v31 = v27[4];
                  __int16 v32 = v27 + 1;
                  if (v31 >= v83[3].var0)
                  {
                    __int16 v32 = v29;
                    double v28 = (void **)v29;
                  }
                  __int16 v27 = (void *)*v32;
                }
                while (v27);
                if (v28 != v74)
                {
                  if (v31 < v83[3].var0) {
                    std::string v29 = v30;
                  }
                  if (v83[3].var0 >= v29[4])
                  {
                    uint64_t v33 = v71;
                    if ((unint64_t)v71 >= v72)
                    {
                      __int16 v34 = (CLMicroLocationProto::WiFiRssi *)std::vector<CLMicroLocationProto::WiFiRssi>::__push_back_slow_path<CLMicroLocationProto::WiFiRssi const&>(&v70, (const CLMicroLocationProto::WiFiRssi *)v83);
                    }
                    else
                    {
                      CLMicroLocationProto::WiFiRssi::WiFiRssi(v71, (const CLMicroLocationProto::WiFiRssi *)v83);
                      __int16 v34 = (CLMicroLocationProto::WiFiRssi *)((char *)v33 + 48);
                    }
                    __int16 v71 = v34;
                  }
                }
              }
              CLMicroLocationProto::WiFiRssi::~WiFiRssi((CLMicroLocationProto::WiFiRssi *)v83);
            }
            v24 += 120;
          }
          v83[0].var0 = (unint64_t)&v57;
          std::vector<CLMicroLocationMeasurementTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)v83);
          uint64_t v19 = (_OWORD *)((char *)v19 + 248);
          if (v19 == v20) {
            goto LABEL_56;
          }
        }
        unint64_t v57 = 0;
        uint64_t v58 = 0;
        uint64_t v59 = 0;
LABEL_34:
        v83[1].var0 = (unint64_t)var0;
        operator delete(var0);
        goto LABEL_35;
      }
LABEL_56:
      memset(v84, 0, sizeof(v84));
      int v85 = 1065353216;
      CLMicroLocationWiFiChannelHistogramAnalyzer::update(v84, &v70);
      uint64_t v63 = 0;
      unint64_t v64 = 0;
      unint64_t v65 = 0;
      if (CLMicroLocationWiFiChannelHistogramAnalyzer::isEmpty((CLMicroLocationWiFiChannelHistogramAnalyzer *)v84))
      {
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
        }
        double v35 = (id)logObject_MicroLocation_Default;
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v36 = (char *)operator new(0x28uLL);
          *(void *)(v36 + 29) = 0;
          *(_OWORD *)uint64_t v36 = 0u;
          *((_OWORD *)v36 + 1) = 0u;
          boost::uuids::to_chars<char *>((uint64_t)&v106, v36);
          v83[0].var0 = 68289282;
          LOWORD(v83[1].var0) = 2082;
          *(unint64_t *)((char *)&v83[1].var0 + 2) = (unint64_t)"";
          WORD1(v83[2].var0) = 2082;
          *(unint64_t *)((char *)&v83[2].var0 + 4) = (unint64_t)v36;
          _os_log_impl(&dword_25631F000, v35, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Wifi Channel Histogram was not generated for custom LOI, no measurements to analyze\", \"LoiGroupId\":%{public, location:escape_only}s}", (uint8_t *)v83, 0x1Cu);
          operator delete(v36);
        }

        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 24) = 0;
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(v83, "custom");
        CLMicroLocationWiFiChannelHistogramAnalyzer::getHistogram((uint64_t)v84, (unsigned __int8 *)v83, (uint64_t *)&v61);
        if (SHIBYTE(v83[2].var0) < 0) {
          operator delete((void *)v83[0].var0);
        }
        CLMicroLocationProto::WifiHistogram::WifiHistogram((uint64_t)&v57);
        uint64_t v37 = (int *)v61;
        unint64_t v38 = v62;
        if (v61 != v62)
        {
          int v39 = v59;
          do
          {
            int v40 = HIDWORD(v59);
            if (v39 >= SHIDWORD(v59))
            {
              if (HIDWORD(v59) == v60)
              {
                wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)&v58);
                int v40 = HIDWORD(v59);
              }
              HIDWORD(v59) = v40 + 1;
              wireless_diagnostics::google::protobuf::internal::GenericTypeHandler<CLMicroLocationProto::ChannelAndCount>::New();
            }
            LODWORD(v59) = v39 + 1;
            uint64_t v41 = *(void *)(v58 + 8 * v39++);
            int v42 = *v37;
            int v43 = *(_DWORD *)(v41 + 24);
            *(_DWORD *)(v41 + 24) = v43 | 1;
            *(_DWORD *)(v41 + 16) = v42;
            uint64_t v44 = v37[1];
            *(_DWORD *)(v41 + 24) = v43 | 3;
            *(void *)(v41 + 8) = v44;
            v37 += 2;
          }
          while (v37 != v38);
        }
        double v45 = cl::chrono::CFAbsoluteTimeClock::now();
        CLMicroLocationProtobufHelper::createConfiguration<CLMicroLocationProto::WifiHistogram>((CLMicroLocationProto::Configuration *)&v57, (uint64_t)v83, v45);
        unint64_t v46 = v64;
        if (v64 >= v65)
        {
          uint64_t v47 = std::vector<CLMicroLocationConfigurationTable::Entry>::__emplace_back_slow_path<char const* const&,CLMicroLocationProto::Configuration &,boost::uuids::uuid const&>(&v63, CLMicroLocationLOITypeCustom, (uint64_t)v83, &v106);
        }
        else
        {
          std::allocator<CLMicroLocationConfigurationTable::Entry>::construct[abi:ne180100]<CLMicroLocationConfigurationTable::Entry,char const* const&,CLMicroLocationProto::Configuration &,boost::uuids::uuid const&>((uint64_t)&v65, v64, CLMicroLocationLOITypeCustom, (uint64_t)v83, &v106);
          uint64_t v47 = v46 + 112;
        }
        unint64_t v64 = v47;
        if ([v4[4] insertEntries:&v63])
        {
          if (onceToken_MicroLocation_Default != -1) {
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
          }
          double v48 = (id)logObject_MicroLocation_Default;
          if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
          {
            uint64_t v49 = operator new(0x28uLL);
            unint64_t v55 = v49;
            long long v56 = xmmword_256514540;
            *uint64_t v49 = 0u;
            v49[1] = 0u;
            *(void *)((char *)v49 + 29) = 0;
            boost::uuids::to_chars<char *>((uint64_t)&v106, v49);
            std::string v50 = &v55;
            if (v56 < 0) {
              std::string v50 = v55;
            }
            *(_DWORD *)uint64_t v77 = 68289282;
            int v78 = 0;
            __int16 v79 = 2082;
            long long v80 = "";
            __int16 v81 = 2082;
            *(void *)long long v82 = v50;
            _os_log_impl(&dword_25631F000, v48, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Wifi Channel Histogram generated successfully for custom LOI\", \"LoiGroupId\":%{public, location:escape_only}s}", v77, 0x1Cu);
            if (SHIBYTE(v56) < 0) {
              operator delete(v55);
            }
          }

          *(void *)a3 = 0;
          *(void *)(a3 + 8) = 0;
          *(void *)(a3 + 16) = 0;
          std::vector<CLMicroLocationWiFiChannelHistogram>::__init_with_size[abi:ne180100]<CLMicroLocationWiFiChannelHistogram*,CLMicroLocationWiFiChannelHistogram*>((void *)a3, v61, (uint64_t)v62, ((char *)v62 - (unsigned char *)v61) >> 3);
          char v51 = 1;
        }
        else
        {
          if (onceToken_MicroLocation_Default != -1) {
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
          }
          uint64_t v52 = (id)logObject_MicroLocation_Default;
          if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v53 = (char *)operator new(0x28uLL);
            *(void *)(v53 + 29) = 0;
            *(_OWORD *)uint64_t v53 = 0u;
            *((_OWORD *)v53 + 1) = 0u;
            boost::uuids::to_chars<char *>((uint64_t)&v106, v53);
            *(_DWORD *)uint64_t v77 = 68289538;
            int v78 = 0;
            __int16 v79 = 2082;
            long long v80 = "";
            __int16 v81 = 1026;
            *(_DWORD *)long long v82 = 0;
            *(_WORD *)&v82[4] = 2082;
            *(void *)&v82[6] = v53;
            _os_log_impl(&dword_25631F000, v52, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning Wifi Channel Histogram was not generated properly for custom LOI, failed to insert to DB\", \"Inserted\":%{public}hhd, \"LoiGroupId\":%{public, location:escape_only}s}", v77, 0x22u);
            operator delete(v53);
          }

          char v51 = 0;
          *(unsigned char *)a3 = 0;
        }
        *(unsigned char *)(a3 + 24) = v51;
        CLMicroLocationProto::Configuration::~Configuration((CLMicroLocationProto::Configuration *)v83);
        CLMicroLocationProto::WifiHistogram::~WifiHistogram((CLMicroLocationProto::WifiHistogram *)&v57);
        if (v61)
        {
          long long v62 = (int *)v61;
          operator delete(v61);
        }
      }
      v83[0].var0 = (unint64_t)&v63;
      std::vector<CLMicroLocationConfigurationTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)v83);
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v84);
      v83[0].var0 = (unint64_t)&v66;
      std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)v83);
      if (v69[0])
      {
        v69[1] = v69[0];
        operator delete(v69[0]);
      }
      v83[0].var0 = (unint64_t)&v70;
      std::vector<CLMicroLocationProto::WiFiRssi>::__destroy_vector::operator()[abi:ne180100]((void ***)v83);
      std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&v73, v74[0]);
    }
    else
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
      }
      double v17 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v18 = (char *)operator new(0x28uLL);
        *(void *)(v18 + 29) = 0;
        *(_OWORD *)uint64_t v18 = 0u;
        *((_OWORD *)v18 + 1) = 0u;
        boost::uuids::to_chars<char *>((uint64_t)&v106, v18);
        v83[0].var0 = 68289282;
        LOWORD(v83[1].var0) = 2082;
        *(unint64_t *)((char *)&v83[1].var0 + 2) = (unint64_t)"";
        WORD1(v83[2].var0) = 2082;
        *(unint64_t *)((char *)&v83[2].var0 + 4) = (unint64_t)v18;
        _os_log_impl(&dword_25631F000, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning Wifi Channel Histogram was not generated properly for custom LOI, model doesn't contain BlueAtlas data\", \"LoiGroupId\":%{public, location:escape_only}s}", (uint8_t *)v83, 0x1Cu);
        operator delete(v18);
      }

      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 24) = 0;
    }
    if (v100 < 0) {
      operator delete(v99);
    }
    if (v97)
    {
      uint64_t v98 = v97;
      operator delete(v97);
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::~__hash_table((uint64_t)&v96);
    v83[0].var0 = (unint64_t)&v95;
    std::vector<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>::__destroy_vector::operator()[abi:ne180100]((void ***)v83);
    std::__optional_destruct_base<CLMicroLocationModel::BlueAtlasData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v93);
    std::__optional_destruct_base<CLMicroLocationModel::SimilarityListData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v92);
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&v89 + 6);
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
    }
    int v15 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      float v16 = (char *)operator new(0x28uLL);
      *(void *)(v16 + 29) = 0;
      *(_OWORD *)float v16 = 0u;
      *((_OWORD *)v16 + 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)&v106, v16);
      *(_DWORD *)uint64_t buf = 68289282;
      int v87 = 0;
      __int16 v88 = 2082;
      long long v89 = "";
      __int16 v90 = 2082;
      long long v91 = (void **)v16;
      _os_log_impl(&dword_25631F000, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning Wifi Channel Histogram was not generated properly for custom LOI, no Blue Atlas model found for LOI\", \"LoiGroupId\":%{public, location:escape_only}s}", buf, 0x1Cu);
      operator delete(v16);
    }

    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 24) = 0;
  }
  std::__optional_destruct_base<CLMicroLocationModelTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
  return std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>>>::~__hash_table((uint64_t)v75);
}

void sub_256484214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  operator delete(v64);

  CLMicroLocationProto::Configuration::~Configuration((CLMicroLocationProto::Configuration *)&a49);
  CLMicroLocationProto::WifiHistogram::~WifiHistogram((CLMicroLocationProto::WifiHistogram *)&a13);
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  a49 = &a22;
  std::vector<CLMicroLocationConfigurationTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&a49);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&a57);
  a49 = &a25;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&a49);
  if (a28)
  {
    a29 = (uint64_t)a28;
    operator delete(a28);
  }
  a49 = &a31;
  std::vector<CLMicroLocationProto::WiFiRssi>::__destroy_vector::operator()[abi:ne180100]((void ***)&a49);
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&a34, (void *)a35);
  CLMicroLocationModel::~CLMicroLocationModel(&a63);
  std::__optional_destruct_base<CLMicroLocationModelTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&STACK[0x390]);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>>>::~__hash_table((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createConfiguration<CLMicroLocationProto::WifiHistogram>(CLMicroLocationProto::Configuration *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  CLMicroLocationProto::Configuration::Configuration((CLMicroLocationProto::Configuration *)a2);
  unsigned int v6 = *((_DWORD *)a1 + 8);
  if (!CLMicroLocationProto::ConfigurationType_IsValid((CLMicroLocationProto *)v6)) {
    __assert_rtn("set_type", "microlocation.pb.h", 22117, "::CLMicroLocationProto::ConfigurationType_IsValid(value)");
  }
  int v8 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 40) = v6;
  *(_DWORD *)(a2 + 48) = v8 | 3;
  *(double *)(a2 + 8) = a3;
  CLMicroLocationProtobufHelper::setSpecificConfiguration((CLMicroLocationProtobufHelper *)a2, a1, v7);
}

void sub_2564844C8(_Unwind_Exception *a1)
{
  CLMicroLocationProto::Configuration::~Configuration(v1);
  _Unwind_Resume(a1);
}

void CLMicroLocationAnalytics::analyzeModelLoiTypes(uint64_t a1, uint64_t a2)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a2 + 24);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 48))(v3))
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
    }
    double v4 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v36 = 2082;
      uint64_t v37 = "";
      __int16 v38 = 2082;
      *(void *)int v39 = "MicroLocationAnalytics";
      _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"analyzeModelLoiTypes cancelled\", \"Activity\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
  }
  else
  {
    id v5 = [MEMORY[0x263EFF910] date];
    unsigned int v6 = +[ULDefaultsSingleton shared];
    double v7 = [v6 defaultsDictionary];

    int v8 = [NSString stringWithUTF8String:"ULNumberDaysToAnalyzeWiFiChannels"];
    id v9 = [v7 objectForKey:v8];
    if (v9 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
      int v10 = [v9 intValue];
    }
    else {
      int v10 = [&unk_2704F1F38 intValue];
    }
    int v11 = v10;

    CLMicroLocationTimeUtils::getTimeDeltaDaysAgo(v5, (NSDate *)-v11);
    double v13 = v12;
    int v14 = +[ULDefaultsSingleton shared];
    int v15 = [v14 defaultsDictionary];

    float v16 = [NSString stringWithUTF8String:"ULDatabaseSelectionLimit"];
    double v17 = [v15 objectForKey:v16];
    if (v17 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
      unsigned int v18 = [v17 unsignedIntValue];
    }
    else {
      unsigned int v18 = [&unk_2704F1F68 unsignedIntValue];
    }
    unsigned int v19 = v18;

    id v20 = *(id *)(*(void *)(a1 + 8) + 88);
    id v21 = v20;
    if (v20)
    {
      [v20 selectAllRecordingLOITypesFromTime:v19 andLimit:v13];
    }
    else
    {
      long long v30 = 0;
      unint64_t v31 = 0;
      uint64_t v32 = 0;
    }

    std::string v22 = std::__find_impl[abi:ne180100]<std::string *,std::string *,char const*,std::__identity>(v30, v31, (const char **)CLMicroLocationLOITypeHome);
    float v23 = std::__find_impl[abi:ne180100]<std::string *,std::string *,char const*,std::__identity>(v30, v31, (const char **)CLMicroLocationLOITypeWork);
    uint64_t v24 = std::__find_impl[abi:ne180100]<std::string *,std::string *,char const*,std::__identity>(v30, v31, (const char **)CLMicroLocationLOITypeAirPlay);
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
    }
    uint64_t v25 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289795;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v36 = 2082;
      uint64_t v37 = "";
      __int16 v38 = 1025;
      *(_DWORD *)int v39 = v22 != v31;
      *(_WORD *)&uint8_t v39[4] = 1025;
      *(_DWORD *)&v39[6] = v23 != v31;
      __int16 v40 = 1025;
      BOOL v41 = v24 != v31;
      _os_log_impl(&dword_25631F000, v25, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Sending Model LOI Types event\", \"foundHome\":%{private}hhd, \"foundWork\":%{private}hhd, \"foundAirPlay\":%{private}hhd}", buf, 0x24u);
    }
    if (ULSettings::get<ULSettings::AnalyticsSendEventEnabled>())
    {
      v33[0] = @"foundHome";
      uint64_t v26 = [NSNumber numberWithBool:v22 != v31];
      v34[0] = v26;
      v33[1] = @"foundWork";
      __int16 v27 = [NSNumber numberWithBool:v23 != v31];
      v34[1] = v27;
      v33[2] = @"foundAirPlay";
      double v28 = [NSNumber numberWithBool:v24 != v31];
      long long v34[2] = v28;
      std::string v29 = [NSDictionary dictionaryWithObjects:v34 forKeys:v33 count:3];
      AnalyticsSendEvent();
    }
    *(void *)uint64_t buf = &v30;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
}

void sub_256484994(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_75()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

uint64_t boost::algorithm::join<std::unordered_set<std::string>,char [2]>@<X0>(uint64_t result@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(uint64_t ***)(result + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  if (v3)
  {
    int v6 = *((char *)v3 + 39);
    double v7 = v6 >= 0 ? (std::string::value_type *)(v3 + 2) : (std::string::value_type *)v3[2];
    std::string::size_type v8 = v6 >= 0 ? *((unsigned __int8 *)v3 + 39) : (std::string::size_type)v3[3];
    id result = std::string::__insert_with_size<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>((std::string *)a3, a3, v7, &v7[v8], v8);
    for (uint64_t i = *v3; i; uint64_t i = (uint64_t *)*i)
    {
      uint64_t v10 = *(unsigned __int8 *)(a3 + 23);
      if ((v10 & 0x80u) == 0) {
        uint64_t v11 = a3;
      }
      else {
        uint64_t v11 = *(void *)a3;
      }
      if ((v10 & 0x80u) != 0) {
        uint64_t v10 = *(void *)(a3 + 8);
      }
      uint64_t v12 = v11 + v10;
      size_t v13 = strlen(a2);
      std::string::__insert_with_size<char const*,char const*>((std::string *)a3, v12, a2, &a2[v13], v13);
      uint64_t v14 = *(unsigned __int8 *)(a3 + 23);
      if ((v14 & 0x80u) == 0) {
        uint64_t v15 = a3;
      }
      else {
        uint64_t v15 = *(void *)a3;
      }
      if ((v14 & 0x80u) != 0) {
        uint64_t v14 = *(void *)(a3 + 8);
      }
      int v16 = *((char *)i + 39);
      if (v16 >= 0) {
        double v17 = (std::string::value_type *)(i + 2);
      }
      else {
        double v17 = (std::string::value_type *)i[2];
      }
      if (v16 >= 0) {
        std::string::size_type v18 = *((unsigned __int8 *)i + 39);
      }
      else {
        std::string::size_type v18 = i[3];
      }
      id result = std::string::__insert_with_size<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>((std::string *)a3, v15 + v14, v17, &v17[v18], v18);
    }
  }
  return result;
}

void sub_256484B9C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  double v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    size_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  std::string v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_256484E1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,AnchorValueStatistics>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x28uLL);
  *(void *)(a4 + 8) = v7;
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v9->__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
  }
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_256484EC8(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,AnchorValueStatistics>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,std::set<int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::set<int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::set<int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::set<int>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  size_t v13 = (void *)(a1 + 16);
  uint64_t i = operator new(0x30uLL);
  void *i = 0;
  i[1] = v7;
  uint64_t v14 = **a4;
  i[5] = 0;
  i[4] = 0;
  i[2] = v14;
  i[3] = i + 4;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v21 = *(void *)a1;
  std::string v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    void *i = *v22;
LABEL_38:
    void *v22 = i;
    goto LABEL_39;
  }
  void *i = *v13;
  void *v13 = i;
  *(void *)(v21 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8) {
        v23 %= v8;
      }
    }
    else
    {
      v23 &= v8 - 1;
    }
    std::string v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_256485120(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::set<int>>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::set<int>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)(a2 + 3), a2[4]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

void *std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint8x8_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          unint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  unint64_t v10 = operator new(0x18uLL);
  void *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  unint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    void *v10 = *v19;
LABEL_38:
    void *v19 = v10;
    goto LABEL_39;
  }
  void *v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    unint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_2564853A0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  unint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::__map_value_compare<std::string,std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  id result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  unint64_t v7 = (std::string *)(v6 + 32);
  uint8x8_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[56] = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_2564854D8(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::set<int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::set<int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::set<int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::set<int>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,std::set<int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::set<int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::set<int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::set<int>>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::set<int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::set<int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::set<int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::set<int>>>>::__deallocate_node(uint64_t a1, void **a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = *v2;
      std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)(v2 + 3), v2[4]);
      operator delete(v2);
      uint64_t v2 = (void **)v3;
    }
    while (v3);
  }
}

uint64_t std::__optional_destruct_base<CLMicroLocationRecordingEventsTable::Entry,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 248))
  {
    CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)(a1 + 80));
    if (*(char *)(a1 + 47) < 0) {
      operator delete(*(void **)(a1 + 24));
    }
  }
  return a1;
}

void wireless_diagnostics::google::protobuf::internal::GenericTypeHandler<CLMicroLocationProto::ChannelAndCount>::New()
{
}

void sub_2564855FC(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x1081C40DCAC275BLL);
  _Unwind_Resume(a1);
}

void std::__function::__func<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_0,std::allocator<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_0>,void ()(std::function<BOOL ()(void)>)>::~__func()
{
}

void *std::__function::__func<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_0,std::allocator<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_0>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t a1)
{
  id result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *id result = &unk_2704E0C88;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_0,std::allocator<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_0>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_2704E0C88;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_0,std::allocator<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_0>,void ()(std::function<BOOL ()(void)>)>::operator()(uint64_t a1, uint64_t a2)
{
  void v6[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v5, a2);
  uint64_t v3 = *(void *)(a1 + 8);
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v6, (uint64_t)v5);
  CLMicroLocationAnalytics::analyzeAssociationState(v3, (uint64_t)v6);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v6);
  return std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v5);
}

void sub_256485734(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_0,std::allocator<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_0>,void ()(std::function<BOOL ()(void)>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_0,std::allocator<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_0>,void ()(std::function<BOOL ()(void)>)>::target_type()
{
}

void std::__function::__func<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_1,std::allocator<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_1>,void ()(std::function<BOOL ()(void)>)>::~__func()
{
}

void *std::__function::__func<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_1,std::allocator<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_1>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t a1)
{
  id result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *id result = &unk_2704E0D08;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_1,std::allocator<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_1>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_2704E0D08;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_1,std::allocator<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_1>,void ()(std::function<BOOL ()(void)>)>::operator()(uint64_t a1, uint64_t a2)
{
  void v6[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v5, a2);
  uint64_t v3 = *(CLMicroLocationAnalytics **)(a1 + 8);
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v6, (uint64_t)v5);
  CLMicroLocationAnalytics::analyzeLocationOfInterestUsage(v3, (uint64_t)v6);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v6);
  return std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v5);
}

void sub_2564858B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_1,std::allocator<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_1>,void ()(std::function<BOOL ()(void)>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_1,std::allocator<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_1>,void ()(std::function<BOOL ()(void)>)>::target_type()
{
}

void std::__function::__func<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_2,std::allocator<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_2>,void ()(std::function<BOOL ()(void)>)>::~__func()
{
}

void *std::__function::__func<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_2,std::allocator<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_2>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t a1)
{
  id result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *id result = &unk_2704E0D88;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_2,std::allocator<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_2>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_2704E0D88;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_2,std::allocator<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_2>,void ()(std::function<BOOL ()(void)>)>::operator()(uint64_t a1, uint64_t a2)
{
  void v6[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v5, a2);
  uint64_t v3 = *(CLMicroLocationAnalytics **)(a1 + 8);
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v6, (uint64_t)v5);
  CLMicroLocationAnalytics::analyzeTriggerTypes(v3, (uint64_t)v6);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v6);
  return std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v5);
}

void sub_256485A3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_2,std::allocator<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_2>,void ()(std::function<BOOL ()(void)>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_2,std::allocator<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_2>,void ()(std::function<BOOL ()(void)>)>::target_type()
{
}

void std::__function::__func<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_3,std::allocator<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_3>,void ()(std::function<BOOL ()(void)>)>::~__func()
{
}

void *std::__function::__func<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_3,std::allocator<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_3>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t a1)
{
  id result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *id result = &unk_2704E0E08;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_3,std::allocator<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_3>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_2704E0E08;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_3,std::allocator<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_3>,void ()(std::function<BOOL ()(void)>)>::operator()(uint64_t a1, uint64_t a2)
{
  void v6[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v5, a2);
  uint64_t v3 = *(void *)(a1 + 8);
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v6, (uint64_t)v5);
  CLMicroLocationAnalytics::analyzeModelLoiTypes(v3, (uint64_t)v6);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v6);
  return std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v5);
}

void sub_256485BC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_3,std::allocator<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_3>,void ()(std::function<BOOL ()(void)>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_3,std::allocator<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_3>,void ()(std::function<BOOL ()(void)>)>::target_type()
{
}

void std::vector<NSMutableDictionary * {__strong}>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (void *)*((void *)v4 - 1);
        v4 -= 8;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::string const&,BOOL>(uint64_t **a1, const void **a2, uint64_t a3, char *a4)
{
  uint64_t v7 = (uint64_t **)std::__tree<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::__map_value_compare<std::string,std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>>>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  id result = *v7;
  if (!*v7)
  {
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__construct_node<std::string const&,BOOL>((uint64_t)a1, a3, a4, (uint64_t)&v9);
    std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__insert_node_at(a1, v10, v7, v9);
    return v9;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__construct_node<std::string const&,BOOL>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  uint8x8_t v8 = (char *)operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  long long v9 = (std::string *)(v8 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((void *)v8 + 6) = *(void *)(a2 + 16);
  }
  v8[56] = *a3;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_256485DC8(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t **std::back_insert_iterator<std::vector<CLMicroLocationAssociatedStateTable::Entry>>::operator=[abi:ne180100](uint64_t **a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v5 = (*a1)[1];
  unint64_t v4 = (*a1)[2];
  uint64_t v6 = *a1;
  if (v5 >= v4)
  {
    uint64_t v7 = std::vector<CLMicroLocationAssociatedStateTable::Entry>::__push_back_slow_path<CLMicroLocationAssociatedStateTable::Entry const&>(v6, a2);
  }
  else
  {
    std::vector<CLMicroLocationAssociatedStateTable::Entry>::__construct_one_at_end[abi:ne180100]<CLMicroLocationAssociatedStateTable::Entry const&>((uint64_t)v6, a2);
    uint64_t v7 = v5 + 72;
  }
  v3[1] = v7;
  return a1;
}

__n128 std::vector<CLMicroLocationAssociatedStateTable::Entry>::__construct_one_at_end[abi:ne180100]<CLMicroLocationAssociatedStateTable::Entry const&>(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *(void *)(v4 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v4 = v5;
  }
  __n128 result = *(__n128 *)((char *)a2 + 24);
  long long v7 = *(long long *)((char *)a2 + 40);
  *(_OWORD *)(v4 + 56) = *(long long *)((char *)a2 + 56);
  *(_OWORD *)(v4 + 40) = v7;
  *(__n128 *)(v4 + 24) = result;
  *(void *)(a1 + 8) = v4 + 72;
  return result;
}

void sub_256485EB0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMicroLocationAssociatedStateTable::Entry>::__push_back_slow_path<CLMicroLocationAssociatedStateTable::Entry const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x38E38E38E38E38ELL) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x1C71C71C71C71C7) {
    unint64_t v9 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v21 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationAssociatedStateTable::Entry>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v11 = (std::string *)&v10[72 * v4];
  v18[0] = v10;
  v18[1] = v11;
  unint64_t v19 = v11;
  unint64_t v20 = &v10[72 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    unint64_t v11 = v19;
  }
  else
  {
    long long v12 = *a2;
    v11->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  float v13 = &v10[72 * v4];
  long long v14 = *(long long *)((char *)a2 + 56);
  long long v15 = *(long long *)((char *)a2 + 24);
  *(_OWORD *)(v13 + 40) = *(long long *)((char *)a2 + 40);
  *(_OWORD *)(v13 + 24) = v15;
  *(_OWORD *)(v13 + 56) = v14;
  unint64_t v19 = v11 + 3;
  std::vector<CLMicroLocationAssociatedStateTable::Entry>::__swap_out_circular_buffer(a1, v18);
  uint64_t v16 = a1[1];
  std::__split_buffer<CLMicroLocationAssociatedStateTable::Entry>::~__split_buffer((uint64_t)v18);
  return v16;
}

void sub_256486000(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMicroLocationAssociatedStateTable::Entry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<NSMutableDictionary * {__strong}>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__tree<std::__value_type<int,std::map<std::string,BOOL>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,BOOL>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,BOOL>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<int,std::map<std::string,BOOL>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,BOOL>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,BOOL>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<int,std::map<std::string,BOOL>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,BOOL>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,BOOL>>>>::destroy(a1, a2[1]);
    std::__tree<std::string>::destroy((uint64_t)(a2 + 5), (char *)a2[6]);
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<int,std::map<std::string,BOOL>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,BOOL>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,BOOL>>>>::__emplace_unique_key_args<int,int,std::map<std::string,BOOL>&>(uint64_t a1, int *a2, _DWORD *a3, const void ***a4)
{
  uint64_t v6 = (uint64_t **)(a1 + 8);
  unint64_t v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    int v7 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v8 = (uint64_t **)v5;
        int v9 = *((_DWORD *)v5 + 8);
        if (v7 >= v9) {
          break;
        }
        unint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      unint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v8 = (uint64_t **)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<int,std::map<std::string,BOOL>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,BOOL>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,BOOL>>>>::__construct_node<int,std::map<std::string,BOOL>&>(a1, a3, a4, (uint64_t)&v11);
    std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__insert_node_at((uint64_t **)a1, (uint64_t)v8, v6, v11);
    return v11;
  }
  return (uint64_t *)v8;
}

uint64_t *std::__tree<std::__value_type<int,std::map<std::string,BOOL>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,BOOL>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,BOOL>>>>::__construct_node<int,std::map<std::string,BOOL>&>@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, const void ***a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  unint64_t v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *((_DWORD *)v8 + 8) = *a2;
  __n128 result = std::map<std::string,BOOL>::map[abi:ne180100]((uint64_t *)v8 + 5, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_2564861F4(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,std::map<std::string,BOOL>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,BOOL>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,BOOL>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,BOOL>,std::__tree_node<std::__value_type<std::string,BOOL>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_256486250(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,BOOL>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,BOOL>,std::__tree_node<std::__value_type<std::string,BOOL>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    unint64_t v4 = a2;
    unint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      __n128 result = std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,BOOL> const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      uint64_t v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          unint64_t v8 = (const void ***)v7;
          uint64_t v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          unint64_t v4 = (const void **)v8;
        }
        while (!v9);
      }
      unint64_t v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,BOOL> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  __n128 result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__construct_node<std::pair<std::string const,BOOL> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

const void **std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__find_equal<std::string>(void *a1, uint64_t *a2, const void ***a3, uint64_t *a4, const void **a5)
{
  uint64_t v9 = (const void **)(a1 + 1);
  if (a1 + 1 != a2 && !std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, (const void **)a2 + 4))
  {
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (const void **)a2 + 4, a5))
    {
      *a3 = (const void **)a2;
      *a4 = (uint64_t)a2;
      return (const void **)a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      long long v14 = (const void **)a2[1];
      do
      {
        long long v15 = v14;
        long long v14 = (const void **)*v14;
      }
      while (v14);
    }
    else
    {
      uint64_t v18 = (const void **)a2;
      do
      {
        long long v15 = (const void **)v18[2];
        BOOL v17 = *v15 == v18;
        uint64_t v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, v15 + 4)) {
        goto LABEL_28;
      }
      uint64_t v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (const void **)a2;
    }
    return (const void **)a4;
  }
  if ((uint64_t *)*a1 == a2)
  {
    long long v12 = (const void **)a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = (const void **)a2;
      return (const void **)a2;
    }
  }
  unint64_t v11 = (const void **)*a2;
  if (*a2)
  {
    do
    {
      long long v12 = v11;
      unint64_t v11 = (const void **)v11[1];
    }
    while (v11);
  }
  else
  {
    uint64_t v16 = a2;
    do
    {
      long long v12 = (const void **)v16[2];
      BOOL v17 = *v12 == v16;
      uint64_t v16 = (uint64_t *)v12;
    }
    while (v17);
  }
  if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v12 + 4, a5)) {
    goto LABEL_16;
  }
LABEL_28:
  return (const void **)std::__tree<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::__map_value_compare<std::string,std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
}

void std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__construct_node<std::pair<std::string const,BOOL> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((void *)v6 + 6) = *(void *)(a2 + 16);
  }
  v6[56] = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_2564865B0(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,std::map<std::string,BOOL>>,void *>>>::operator()[abi:ne180100](uint64_t a1, char **a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    std::__tree<std::string>::destroy((uint64_t)(a2 + 5), a2[6]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    long long v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *unint64_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_25648689C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,AnchorValueStatistics>,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    void v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  void v8[5] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_256486950(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,AnchorValueStatistics>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    long long v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(void **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, (unsigned __int8 *)i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  float v17 = (void *)(a1 + 16);
  uint64_t i = operator new(0x30uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v10;
  float v18 = *a4;
  long long v19 = **a4;
  *((void *)i + 4) = *((void *)*a4 + 2);
  *((_OWORD *)i + 1) = v19;
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = 0;
  *(void *)float v18 = 0;
  *((void *)i + 5) = 0;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v26 = *(void *)a1;
  __int16 v27 = *(void **)(*(void *)a1 + 8 * v4);
  if (v27)
  {
    *(void *)uint64_t i = *v27;
LABEL_38:
    void *v27 = i;
    goto LABEL_39;
  }
  *(void *)uint64_t i = *v17;
  *float v17 = i;
  *(void *)(v26 + 8 * v4) = v17;
  if (*(void *)i)
  {
    unint64_t v28 = *(void *)(*(void *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11) {
        v28 %= v11;
      }
    }
    else
    {
      v28 &= v11 - 1;
    }
    __int16 v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*v8;
  return i;
}

void sub_256486BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,AnchorValueStatistics>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__function::__func<CLMicroLocationAnalytics::addSpectatingDurationMetrics(NSMutableDictionary *,double,double)::$_0,std::allocator<CLMicroLocationAnalytics::addSpectatingDurationMetrics(NSMutableDictionary *,double,double)::$_0>,BOOL ()(CLMicroLocationLoggedEventsTable::Entry const&)>::~__func()
{
}

void *std::__function::__func<CLMicroLocationAnalytics::addSpectatingDurationMetrics(NSMutableDictionary *,double,double)::$_0,std::allocator<CLMicroLocationAnalytics::addSpectatingDurationMetrics(NSMutableDictionary *,double,double)::$_0>,BOOL ()(CLMicroLocationLoggedEventsTable::Entry const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_2704E0E88;
  return result;
}

void std::__function::__func<CLMicroLocationAnalytics::addSpectatingDurationMetrics(NSMutableDictionary *,double,double)::$_0,std::allocator<CLMicroLocationAnalytics::addSpectatingDurationMetrics(NSMutableDictionary *,double,double)::$_0>,BOOL ()(CLMicroLocationLoggedEventsTable::Entry const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_2704E0E88;
}

BOOL std::__function::__func<CLMicroLocationAnalytics::addSpectatingDurationMetrics(NSMutableDictionary *,double,double)::$_0,std::allocator<CLMicroLocationAnalytics::addSpectatingDurationMetrics(NSMutableDictionary *,double,double)::$_0>,BOOL ()(CLMicroLocationLoggedEventsTable::Entry const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  int v2 = *(_DWORD *)(a2 + 24);
  if (v2 == 34) {
    return 1;
  }
  if (v2 == 44 || v2 == 35) {
    return 0;
  }
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
  }
  unint64_t v4 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
  {
    uint64_t v5 = *(unsigned int *)(a2 + 24);
    int v9 = 68289282;
    int v10 = 0;
    __int16 v11 = 2082;
    uint8x8_t v12 = "";
    __int16 v13 = 2050;
    uint64_t v14 = v5;
    _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"got unexpected event type to indicate start/stop spectating\", \"event type\":%{public}lu}", (uint8_t *)&v9, 0x1Cu);
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
    }
  }
  uint64_t v6 = logObject_MicroLocation_Default;
  BOOL result = os_signpost_enabled((os_log_t)logObject_MicroLocation_Default);
  if (result)
  {
    uint64_t v8 = *(unsigned int *)(a2 + 24);
    int v9 = 68289282;
    int v10 = 0;
    __int16 v11 = 2082;
    uint8x8_t v12 = "";
    __int16 v13 = 2050;
    uint64_t v14 = v8;
    _os_signpost_emit_with_name_impl(&dword_25631F000, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "got unexpected event type to indicate start/stop spectating", "{\"msg%{public}.0s\":\"got unexpected event type to indicate start/stop spectating\", \"event type\":%{public}lu}", (uint8_t *)&v9, 0x1Cu);
    return 0;
  }
  return result;
}

uint64_t std::__function::__func<CLMicroLocationAnalytics::addSpectatingDurationMetrics(NSMutableDictionary *,double,double)::$_0,std::allocator<CLMicroLocationAnalytics::addSpectatingDurationMetrics(NSMutableDictionary *,double,double)::$_0>,BOOL ()(CLMicroLocationLoggedEventsTable::Entry const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationAnalytics::addSpectatingDurationMetrics(NSMutableDictionary *,double,double)::$_0,std::allocator<CLMicroLocationAnalytics::addSpectatingDurationMetrics(NSMutableDictionary *,double,double)::$_0>,BOOL ()(CLMicroLocationLoggedEventsTable::Entry const&)>::target_type()
{
}

void *std::__function::__value_func<BOOL ()(CLMicroLocationLoggedEventsTable::Entry const&)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<CLMicroLocationAnalytics::addMotionSpectatingDurationMetrics(NSMutableDictionary *,double,double)::$_0,std::allocator<CLMicroLocationAnalytics::addMotionSpectatingDurationMetrics(NSMutableDictionary *,double,double)::$_0>,BOOL ()(CLMicroLocationLoggedEventsTable::Entry const&)>::~__func()
{
}

void *std::__function::__func<CLMicroLocationAnalytics::addMotionSpectatingDurationMetrics(NSMutableDictionary *,double,double)::$_0,std::allocator<CLMicroLocationAnalytics::addMotionSpectatingDurationMetrics(NSMutableDictionary *,double,double)::$_0>,BOOL ()(CLMicroLocationLoggedEventsTable::Entry const&)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_2704E0F18;
  return result;
}

void std::__function::__func<CLMicroLocationAnalytics::addMotionSpectatingDurationMetrics(NSMutableDictionary *,double,double)::$_0,std::allocator<CLMicroLocationAnalytics::addMotionSpectatingDurationMetrics(NSMutableDictionary *,double,double)::$_0>,BOOL ()(CLMicroLocationLoggedEventsTable::Entry const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_2704E0F18;
}

BOOL std::__function::__func<CLMicroLocationAnalytics::addMotionSpectatingDurationMetrics(NSMutableDictionary *,double,double)::$_0,std::allocator<CLMicroLocationAnalytics::addMotionSpectatingDurationMetrics(NSMutableDictionary *,double,double)::$_0>,BOOL ()(CLMicroLocationLoggedEventsTable::Entry const&)>::operator()(CLMicroLocationProto::ReceivedEvent *a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  int v2 = *(_DWORD *)(a2 + 24);
  if (v2 == 44) {
    return 0;
  }
  if (v2 == 50)
  {
    if ((*(unsigned char *)(a2 + 327) & 0x20) != 0)
    {
      uint64_t v4 = *(void *)(a2 + 272);
      if (!v4) {
        uint64_t v4 = *(void *)(CLMicroLocationProto::ReceivedEvent::default_instance(a1) + 240);
      }
      if (*(unsigned char *)(v4 + 12)) {
        return 1;
      }
    }
    return 0;
  }
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
  }
  uint64_t v6 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
  {
    uint64_t v7 = *(unsigned int *)(a2 + 24);
    int v10 = 68289282;
    int v11 = 0;
    __int16 v12 = 2082;
    __int16 v13 = "";
    __int16 v14 = 2050;
    uint64_t v15 = v7;
    _os_log_impl(&dword_25631F000, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"got unexpected event type to indicate start/stop motion spectating\", \"event type\":%{public}lu}", (uint8_t *)&v10, 0x1Cu);
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
    }
  }
  uint64_t v8 = logObject_MicroLocation_Default;
  BOOL result = os_signpost_enabled((os_log_t)logObject_MicroLocation_Default);
  if (result)
  {
    uint64_t v9 = *(unsigned int *)(a2 + 24);
    int v10 = 68289282;
    int v11 = 0;
    __int16 v12 = 2082;
    __int16 v13 = "";
    __int16 v14 = 2050;
    uint64_t v15 = v9;
    _os_signpost_emit_with_name_impl(&dword_25631F000, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "got unexpected event type to indicate start/stop motion spectating", "{\"msg%{public}.0s\":\"got unexpected event type to indicate start/stop motion spectating\", \"event type\":%{public}lu}", (uint8_t *)&v10, 0x1Cu);
    return 0;
  }
  return result;
}

uint64_t std::__function::__func<CLMicroLocationAnalytics::addMotionSpectatingDurationMetrics(NSMutableDictionary *,double,double)::$_0,std::allocator<CLMicroLocationAnalytics::addMotionSpectatingDurationMetrics(NSMutableDictionary *,double,double)::$_0>,BOOL ()(CLMicroLocationLoggedEventsTable::Entry const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationAnalytics::addMotionSpectatingDurationMetrics(NSMutableDictionary *,double,double)::$_0,std::allocator<CLMicroLocationAnalytics::addMotionSpectatingDurationMetrics(NSMutableDictionary *,double,double)::$_0>,BOOL ()(CLMicroLocationLoggedEventsTable::Entry const&)>::target_type()
{
}

void std::vector<CLMicroLocationProto::TriggerEvent>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 88;
      uint64_t v7 = v4 - 88;
      uint64_t v8 = v4 - 88;
      do
      {
        uint64_t v9 = *(void (***)(char *))v8;
        v8 -= 88;
        (*v9)(v7);
        v6 -= 88;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<CLMicroLocationProto::TriggerEvent>::__push_back_slow_path<CLMicroLocationProto::TriggerEvent const&>(uint64_t *a1, const CLMicroLocationProto::TriggerEvent *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2E8BA2E8BA2E8BALL) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x1745D1745D1745DLL) {
    unint64_t v9 = 0x2E8BA2E8BA2E8BALL;
  }
  else {
    unint64_t v9 = v5;
  }
  float v17 = a1 + 2;
  if (v9) {
    BOOL v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMiLoServiceTable::Entry>>(v7, v9);
  }
  else {
    BOOL v10 = 0;
  }
  __int16 v13 = v10;
  __int16 v14 = (CLMicroLocationProto::TriggerEvent *)&v10[88 * v4];
  uint64_t v16 = &v10[88 * v9];
  CLMicroLocationProto::TriggerEvent::TriggerEvent(v14, a2);
  uint64_t v15 = (char *)v14 + 88;
  std::vector<CLMicroLocationProto::TriggerEvent>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<CLMicroLocationProto::TriggerEvent>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_25648735C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMicroLocationProto::TriggerEvent>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMicroLocationProto::TriggerEvent>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationProto::TriggerEvent>,std::reverse_iterator<CLMicroLocationProto::TriggerEvent*>,std::reverse_iterator<CLMicroLocationProto::TriggerEvent*>,std::reverse_iterator<CLMicroLocationProto::TriggerEvent*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationProto::TriggerEvent>,std::reverse_iterator<CLMicroLocationProto::TriggerEvent*>,std::reverse_iterator<CLMicroLocationProto::TriggerEvent*>,std::reverse_iterator<CLMicroLocationProto::TriggerEvent*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t i = 0;
        a3 + i != a5;
        CLMicroLocationProto::TriggerEvent::TriggerEvent((CLMicroLocationProto::TriggerEvent *)(i + a7), (const CLMicroLocationProto::TriggerEvent *)(i + a3)))
  {
    i -= 88;
  }
  return a6;
}

uint64_t std::__split_buffer<CLMicroLocationProto::TriggerEvent>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void (***)(void))(i - 88);
    *(void *)(a1 + 16) = i - 88;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<CLMicroLocationProto::WiFiRssi>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 48;
      uint64_t v7 = v4 - 48;
      uint64_t v8 = v4 - 48;
      do
      {
        unint64_t v9 = *(void (***)(char *))v8;
        v8 -= 48;
        (*v9)(v7);
        v6 -= 48;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<CLMicroLocationProto::WiFiRssi>::__push_back_slow_path<CLMicroLocationProto::WiFiRssi const&>(uint64_t *a1, const CLMicroLocationProto::WiFiRssi *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  float v17 = a1 + 2;
  if (v9) {
    BOOL v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationClientUtils::ClientIdentitiesAndLocationTypes>>(v7, v9);
  }
  else {
    BOOL v10 = 0;
  }
  __int16 v13 = v10;
  __int16 v14 = (CLMicroLocationProto::WiFiRssi *)&v10[48 * v4];
  uint64_t v16 = &v10[48 * v9];
  CLMicroLocationProto::WiFiRssi::WiFiRssi(v14, a2);
  uint64_t v15 = (char *)v14 + 48;
  std::vector<CLMicroLocationProto::WiFiRssi>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<CLMicroLocationProto::WiFiRssi>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_256487694(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMicroLocationProto::WiFiRssi>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMicroLocationProto::WiFiRssi>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationProto::WiFiRssi>,std::reverse_iterator<CLMicroLocationProto::WiFiRssi*>,std::reverse_iterator<CLMicroLocationProto::WiFiRssi*>,std::reverse_iterator<CLMicroLocationProto::WiFiRssi*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationProto::WiFiRssi>,std::reverse_iterator<CLMicroLocationProto::WiFiRssi*>,std::reverse_iterator<CLMicroLocationProto::WiFiRssi*>,std::reverse_iterator<CLMicroLocationProto::WiFiRssi*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t i = 0;
        a3 + i != a5;
        CLMicroLocationProto::WiFiRssi::WiFiRssi((CLMicroLocationProto::WiFiRssi *)(i + a7), (const CLMicroLocationProto::WiFiRssi *)(i + a3)))
  {
    i -= 48;
  }
  return a6;
}

uint64_t std::__split_buffer<CLMicroLocationProto::WiFiRssi>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = *(void (***)(void))(i - 48);
    *(void *)(a1 + 16) = i - 48;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<CLMicroLocationConfigurationTable::Entry>::__emplace_back_slow_path<char const* const&,CLMicroLocationProto::Configuration &,boost::uuids::uuid const&>(uint64_t *a1, char **a2, uint64_t a3, void *a4)
{
  uint64_t v5 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x249249249249249) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 4);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 4)) >= 0x124924924924924) {
    unint64_t v10 = 0x249249249249249;
  }
  else {
    unint64_t v10 = v6;
  }
  float v18 = a1 + 2;
  if (v10) {
    uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationConfigurationTable::Entry>>((uint64_t)(a1 + 2), v10);
  }
  else {
    uint64_t v11 = 0;
  }
  __int16 v14 = v11;
  uint64_t v15 = &v11[112 * v5];
  float v17 = &v11[112 * v10];
  std::allocator<CLMicroLocationConfigurationTable::Entry>::construct[abi:ne180100]<CLMicroLocationConfigurationTable::Entry,char const* const&,CLMicroLocationProto::Configuration &,boost::uuids::uuid const&>((uint64_t)(a1 + 2), (uint64_t)v15, a2, a3, a4);
  uint64_t v16 = v15 + 112;
  std::vector<CLMicroLocationConfigurationTable::Entry>::__swap_out_circular_buffer(a1, &v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<CLMicroLocationConfigurationTable::Entry>::~__split_buffer(&v14);
  return v12;
}

void sub_256487944(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMicroLocationConfigurationTable::Entry>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<CLMicroLocationConfigurationTable::Entry>::construct[abi:ne180100]<CLMicroLocationConfigurationTable::Entry,char const* const&,CLMicroLocationProto::Configuration &,boost::uuids::uuid const&>(uint64_t a1, uint64_t a2, char **a3, uint64_t a4, void *a5)
{
  std::string::basic_string[abi:ne180100]<0>(__p, *a3);
  CLMicroLocationConfigurationTable::Entry::Entry(a2, __p, a4, *a5, a5[1]);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2564879C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__find_impl[abi:ne180100]<std::string *,std::string *,char const*,std::__identity>(unsigned __int8 *a1, unsigned __int8 *a2, const char **a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    uint64_t v5 = *a3;
    size_t v6 = strlen(*a3);
    while (1)
    {
      if ((char)v3[23] < 0)
      {
        if (v6 == *((void *)v3 + 1))
        {
          if (v6 == -1) {
LABEL_14:
          }
            std::string::__throw_out_of_range[abi:ne180100]();
          uint64_t v7 = *(unsigned __int8 **)v3;
LABEL_10:
          if (!memcmp(v7, v5, v6)) {
            return v3;
          }
        }
      }
      else if (v6 == v3[23])
      {
        uint64_t v7 = v3;
        if (v6 == -1) {
          goto LABEL_14;
        }
        goto LABEL_10;
      }
      v3 += 24;
      if (v3 == a2) {
        return a2;
      }
    }
  }
  return v3;
}

void CLMicroLocationFingerprintConfiguration::getCustomLoiRecordingConfigurationFromSettings(uint64_t *a1@<X8>)
{
  CLMicroLocationFingerprintConfiguration::getRecordingConfigurationFromSettings((uint64_t)a1);
  uint64_t v3 = +[ULDefaultsSingleton shared];
  unint64_t v4 = [v3 defaultsDictionary];

  uint64_t v5 = [NSString stringWithUTF8String:"ULMinimumTotalNumberOfMeasurementsForFingerprintInCustomLoi"];
  size_t v6 = [v4 objectForKey:v5];
  if (v6 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v7 = [v6 unsignedLongValue];
  }
  else {
    uint64_t v7 = [&unk_2704F1F98 unsignedLongValue];
  }
  uint64_t v8 = v7;

  *a1 = v8;
}

void sub_256487B64(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(v1 + 16);
  _Unwind_Resume(a1);
}

char *CLMicroLocationFingerprintConfiguration::getRecordingConfigurationFromSettings@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = ULSettings::get<ULSettings::MinimumTotalNumberOfMeasurementsForFingerprint>();
  *(unsigned char *)(a1 + 8) = ULSettings::get<ULSettings::ProcessOffChannelRssiAP>();
  char v3 = ULSettings::get<ULSettings::ProcessInvalidRssiAP>();
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v4 = a1 + 16;
  *(unsigned char *)(v4 - 7) = v3;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_DWORD *)(v4 + 32) = 1065353216;
  char v5 = ULSettings::get<ULSettings::MeasurementProcessingWifiRssiEnable>();
  size_t v6 = +[ULDefaultsSingleton shared];
  uint64_t v7 = [v6 defaultsDictionary];

  uint64_t v8 = [NSString stringWithUTF8String:"ULMinimumWiFiDurationForFingerprintRecording"];
  char v9 = [v7 objectForKey:v8];
  if (v9 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    [v9 doubleValue];
  }
  else {
    [&unk_2704F0FB0 doubleValue];
  }
  uint64_t v11 = v10;

  uint64_t v12 = +[ULDefaultsSingleton shared];
  __int16 v13 = [v12 defaultsDictionary];

  __int16 v14 = [NSString stringWithUTF8String:"ULMinimumWiFiNumberOfMeasurementsForFingerprintRecording"];
  uint64_t v15 = [v13 objectForKey:v14];
  if (v15 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v16 = [v15 unsignedLongValue];
  }
  else {
    uint64_t v16 = [&unk_2704F1F98 unsignedLongValue];
  }
  uint64_t v51 = v16;

  uint64_t v17 = ULSettings::get<ULSettings::MaximumNumberOfWifiRssiMeasurementsForFingerprint>();
  char v50 = ULSettings::get<ULSettings::MeasurementProcessingBleLeechEnable>();
  float v18 = +[ULDefaultsSingleton shared];
  long long v19 = [v18 defaultsDictionary];

  float v20 = [NSString stringWithUTF8String:"ULMinimumBleDurationForFingerprintRecording"];
  float v21 = [v19 objectForKey:v20];
  if (v21 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    [v21 doubleValue];
  }
  else {
    [&unk_2704F1FE0 doubleValue];
  }
  uint64_t v23 = v22;

  unint64_t v24 = +[ULDefaultsSingleton shared];
  size_t v25 = [v24 defaultsDictionary];

  uint64_t v26 = [NSString stringWithUTF8String:"ULMinimumBleNumberOfMeasurementsForFingerprintRecording"];
  __int16 v27 = [v25 objectForKey:v26];
  if (v27 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v28 = [v27 unsignedLongValue];
  }
  else {
    uint64_t v28 = [&unk_2704F1FE0 unsignedLongValue];
  }
  uint64_t v29 = v28;

  uint64_t v30 = ULSettings::get<ULSettings::MaximumNumberOfBleRssiMeasurementsForFingerprint>();
  char v31 = v5;
  uint64_t v32 = (ULHomeNearbyRangingSupport *)ULSettings::get<ULSettings::MeasurementProcessingUwbRangeEnable>();
  if (v32) {
    char isUwbRangingSupportedOnDevice = ULHomeNearbyRangingSupport::isUwbRangingSupportedOnDevice(v32);
  }
  else {
    char isUwbRangingSupportedOnDevice = 0;
  }
  __int16 v34 = +[ULDefaultsSingleton shared];
  double v35 = [v34 defaultsDictionary];

  __int16 v36 = [NSString stringWithUTF8String:"ULMinimumUwbRangeDurationForFingerprintRecording"];
  uint64_t v37 = [v35 objectForKey:v36];
  if (v37 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    [v37 doubleValue];
  }
  else {
    [&unk_2704F1FE0 doubleValue];
  }
  uint64_t v39 = v38;

  __int16 v40 = +[ULDefaultsSingleton shared];
  BOOL v41 = [v40 defaultsDictionary];

  uint64_t v42 = [NSString stringWithUTF8String:"ULMinimumUwbNumberOfMeasurementsForFingerprintRecording"];
  int v43 = [v41 objectForKey:v42];
  if (v43 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v44 = [v43 unsignedLongValue];
  }
  else {
    uint64_t v44 = [&unk_2704F1FE0 unsignedLongValue];
  }
  uint64_t v45 = v44;

  uint64_t v46 = ULSettings::get<ULSettings::MaximumNumberOfUwbRangeMeasurementsForFingerprint>();
  unsigned int v52 = 1;
  long long v56 = &v52;
  uint64_t v47 = std::__hash_table<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>,std::__unordered_map_hasher<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,true>,std::__unordered_map_equal<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>,std::equal_to<CLMicroLocationProto::DataType>,std::hash<CLMicroLocationProto::DataType>,true>,std::allocator<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>>>::__emplace_unique_key_args<CLMicroLocationProto::DataType,std::piecewise_construct_t const&,std::tuple<CLMicroLocationProto::DataType&&>,std::tuple<>>(v4, &v52, (uint64_t)&std::piecewise_construct, &v56);
  v47[24] = v31;
  *(_DWORD *)(v47 + 25) = *(_DWORD *)v55;
  *((_DWORD *)v47 + 7) = *(_DWORD *)&v55[3];
  *((void *)v47 + 4) = v11;
  *((void *)v47 + 5) = v51;
  *((void *)v47 + 6) = v17;
  unsigned int v52 = 5;
  long long v56 = &v52;
  double v48 = std::__hash_table<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>,std::__unordered_map_hasher<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,true>,std::__unordered_map_equal<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>,std::equal_to<CLMicroLocationProto::DataType>,std::hash<CLMicroLocationProto::DataType>,true>,std::allocator<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>>>::__emplace_unique_key_args<CLMicroLocationProto::DataType,std::piecewise_construct_t const&,std::tuple<CLMicroLocationProto::DataType&&>,std::tuple<>>(v4, &v52, (uint64_t)&std::piecewise_construct, &v56);
  v48[24] = v50;
  *(_DWORD *)(v48 + 25) = *(_DWORD *)v54;
  *((_DWORD *)v48 + 7) = *(_DWORD *)&v54[3];
  *((void *)v48 + 4) = v23;
  *((void *)v48 + 5) = v29;
  *((void *)v48 + 6) = v30;
  unsigned int v52 = 6;
  long long v56 = &v52;
  uint64_t result = std::__hash_table<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>,std::__unordered_map_hasher<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,true>,std::__unordered_map_equal<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>,std::equal_to<CLMicroLocationProto::DataType>,std::hash<CLMicroLocationProto::DataType>,true>,std::allocator<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>>>::__emplace_unique_key_args<CLMicroLocationProto::DataType,std::piecewise_construct_t const&,std::tuple<CLMicroLocationProto::DataType&&>,std::tuple<>>(v4, &v52, (uint64_t)&std::piecewise_construct, &v56);
  result[24] = isUwbRangingSupportedOnDevice;
  *(_DWORD *)(result + 25) = *(_DWORD *)v53;
  *((_DWORD *)result + 7) = *(_DWORD *)&v53[3];
  *((void *)result + 4) = v39;
  *((void *)result + 5) = v45;
  *((void *)result + 6) = v46;
  return result;
}

void sub_2564880F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object)
{
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(v11);
  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::MinimumTotalNumberOfMeasurementsForFingerprint>()
{
  os_log_t v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  int v2 = [NSString stringWithUTF8String:"ULMinimumTotalNumberOfMeasurementsForFingerprint"];
  char v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 unsignedLongValue];
  }
  else {
    uint64_t v4 = [&unk_2704F1FB0 unsignedLongValue];
  }
  uint64_t v5 = v4;

  return v5;
}

void sub_25648831C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::ProcessOffChannelRssiAP>()
{
  os_log_t v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  int v2 = [NSString stringWithUTF8String:"ULProcessOffChannelRssiAP"];
  char v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 BOOLValue];
  }
  else {
    uint64_t v4 = [MEMORY[0x263EFFA80] BOOLValue];
  }
  uint64_t v5 = v4;

  return v5;
}

void sub_25648841C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::ProcessInvalidRssiAP>()
{
  os_log_t v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  int v2 = [NSString stringWithUTF8String:"ULProcessInvalidRssiAP"];
  char v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 BOOLValue];
  }
  else {
    uint64_t v4 = [MEMORY[0x263EFFA88] BOOLValue];
  }
  uint64_t v5 = v4;

  return v5;
}

void sub_25648851C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25648861C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::MaximumNumberOfWifiRssiMeasurementsForFingerprint>()
{
  os_log_t v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  int v2 = [NSString stringWithUTF8String:"ULMaximumNumberOfWifiRssiMeasurementsForFingerprint"];
  char v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 unsignedLongValue];
  }
  else {
    uint64_t v4 = [&unk_2704F1FC8 unsignedLongValue];
  }
  uint64_t v5 = v4;

  return v5;
}

void sub_25648871C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25648881C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::MaximumNumberOfBleRssiMeasurementsForFingerprint>()
{
  os_log_t v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  int v2 = [NSString stringWithUTF8String:"ULMaximumNumberOfBleRssiMeasurementsForFingerprint"];
  char v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 unsignedLongValue];
  }
  else {
    uint64_t v4 = [&unk_2704F1FC8 unsignedLongValue];
  }
  uint64_t v5 = v4;

  return v5;
}

void sub_25648891C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256488A1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::MaximumNumberOfUwbRangeMeasurementsForFingerprint>()
{
  os_log_t v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  int v2 = [NSString stringWithUTF8String:"ULMaximumNumberOfUwbRangeMeasurementsForFingerprint"];
  char v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 unsignedLongValue];
  }
  else {
    uint64_t v4 = [&unk_2704F1FC8 unsignedLongValue];
  }
  uint64_t v5 = v4;

  return v5;
}

void sub_256488B1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *CLMicroLocationFingerprintConfiguration::getLocalizingConfigurationFromSettings@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = ULSettings::get<ULSettings::MinimumTotalNumberOfMeasurementsForFingerprint>();
  *(unsigned char *)(a1 + 8) = ULSettings::get<ULSettings::ProcessOffChannelRssiAP>();
  char v3 = ULSettings::get<ULSettings::ProcessInvalidRssiAP>();
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v4 = a1 + 16;
  *(unsigned char *)(v4 - 7) = v3;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_DWORD *)(v4 + 32) = 1065353216;
  char v5 = ULSettings::get<ULSettings::MeasurementProcessingWifiRssiEnable>();
  size_t v6 = +[ULDefaultsSingleton shared];
  uint64_t v7 = [v6 defaultsDictionary];

  uint64_t v8 = [NSString stringWithUTF8String:"ULMinimumWiFiDurationForFingerprintLocalizing"];
  char v9 = [v7 objectForKey:v8];
  if (v9 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    [v9 doubleValue];
  }
  else {
    [&unk_2704F0FB0 doubleValue];
  }
  uint64_t v11 = v10;

  uint64_t v12 = +[ULDefaultsSingleton shared];
  __int16 v13 = [v12 defaultsDictionary];

  __int16 v14 = [NSString stringWithUTF8String:"ULMinimumWiFiNumberOfMeasurementsForFingerprintLocalizing"];
  uint64_t v15 = [v13 objectForKey:v14];
  if (v15 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v16 = [v15 unsignedLongValue];
  }
  else {
    uint64_t v16 = [&unk_2704F1F98 unsignedLongValue];
  }
  uint64_t v51 = v16;

  uint64_t v17 = ULSettings::get<ULSettings::MaximumNumberOfWifiRssiMeasurementsForFingerprint>();
  char v50 = ULSettings::get<ULSettings::MeasurementProcessingBleLeechEnable>();
  float v18 = +[ULDefaultsSingleton shared];
  long long v19 = [v18 defaultsDictionary];

  float v20 = [NSString stringWithUTF8String:"ULMinimumBleDurationForFingerprintLocalizing"];
  float v21 = [v19 objectForKey:v20];
  if (v21 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    [v21 doubleValue];
  }
  else {
    [&unk_2704F1FE0 doubleValue];
  }
  uint64_t v23 = v22;

  unint64_t v24 = +[ULDefaultsSingleton shared];
  size_t v25 = [v24 defaultsDictionary];

  uint64_t v26 = [NSString stringWithUTF8String:"ULMinimumBleNumberOfMeasurementsForFingerprintLocalizing"];
  __int16 v27 = [v25 objectForKey:v26];
  if (v27 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v28 = [v27 unsignedLongValue];
  }
  else {
    uint64_t v28 = [&unk_2704F1FE0 unsignedLongValue];
  }
  uint64_t v29 = v28;

  uint64_t v30 = ULSettings::get<ULSettings::MaximumNumberOfBleRssiMeasurementsForFingerprint>();
  char v31 = v5;
  uint64_t v32 = (ULHomeNearbyRangingSupport *)ULSettings::get<ULSettings::MeasurementProcessingUwbRangeEnable>();
  if (v32) {
    char isUwbRangingSupportedOnDevice = ULHomeNearbyRangingSupport::isUwbRangingSupportedOnDevice(v32);
  }
  else {
    char isUwbRangingSupportedOnDevice = 0;
  }
  __int16 v34 = +[ULDefaultsSingleton shared];
  double v35 = [v34 defaultsDictionary];

  __int16 v36 = [NSString stringWithUTF8String:"ULMinimumUwbRangeDurationForFingerprintLocalizing"];
  uint64_t v37 = [v35 objectForKey:v36];
  if (v37 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    [v37 doubleValue];
  }
  else {
    [&unk_2704F1FE0 doubleValue];
  }
  uint64_t v39 = v38;

  __int16 v40 = +[ULDefaultsSingleton shared];
  BOOL v41 = [v40 defaultsDictionary];

  uint64_t v42 = [NSString stringWithUTF8String:"ULMinimumUwbNumberOfMeasurementsForFingerprintLocalizing"];
  int v43 = [v41 objectForKey:v42];
  if (v43 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v44 = [v43 unsignedLongValue];
  }
  else {
    uint64_t v44 = [&unk_2704F1FE0 unsignedLongValue];
  }
  uint64_t v45 = v44;

  uint64_t v46 = ULSettings::get<ULSettings::MaximumNumberOfUwbRangeMeasurementsForFingerprint>();
  unsigned int v52 = 1;
  long long v56 = &v52;
  uint64_t v47 = std::__hash_table<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>,std::__unordered_map_hasher<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,true>,std::__unordered_map_equal<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>,std::equal_to<CLMicroLocationProto::DataType>,std::hash<CLMicroLocationProto::DataType>,true>,std::allocator<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>>>::__emplace_unique_key_args<CLMicroLocationProto::DataType,std::piecewise_construct_t const&,std::tuple<CLMicroLocationProto::DataType&&>,std::tuple<>>(v4, &v52, (uint64_t)&std::piecewise_construct, &v56);
  v47[24] = v31;
  *(_DWORD *)(v47 + 25) = *(_DWORD *)v55;
  *((_DWORD *)v47 + 7) = *(_DWORD *)&v55[3];
  *((void *)v47 + 4) = v11;
  *((void *)v47 + 5) = v51;
  *((void *)v47 + 6) = v17;
  unsigned int v52 = 5;
  long long v56 = &v52;
  double v48 = std::__hash_table<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>,std::__unordered_map_hasher<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,true>,std::__unordered_map_equal<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>,std::equal_to<CLMicroLocationProto::DataType>,std::hash<CLMicroLocationProto::DataType>,true>,std::allocator<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>>>::__emplace_unique_key_args<CLMicroLocationProto::DataType,std::piecewise_construct_t const&,std::tuple<CLMicroLocationProto::DataType&&>,std::tuple<>>(v4, &v52, (uint64_t)&std::piecewise_construct, &v56);
  v48[24] = v50;
  *(_DWORD *)(v48 + 25) = *(_DWORD *)v54;
  *((_DWORD *)v48 + 7) = *(_DWORD *)&v54[3];
  *((void *)v48 + 4) = v23;
  *((void *)v48 + 5) = v29;
  *((void *)v48 + 6) = v30;
  unsigned int v52 = 6;
  long long v56 = &v52;
  uint64_t result = std::__hash_table<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>,std::__unordered_map_hasher<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,true>,std::__unordered_map_equal<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>,std::equal_to<CLMicroLocationProto::DataType>,std::hash<CLMicroLocationProto::DataType>,true>,std::allocator<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>>>::__emplace_unique_key_args<CLMicroLocationProto::DataType,std::piecewise_construct_t const&,std::tuple<CLMicroLocationProto::DataType&&>,std::tuple<>>(v4, &v52, (uint64_t)&std::piecewise_construct, &v56);
  result[24] = isUwbRangingSupportedOnDevice;
  *(_DWORD *)(result + 25) = *(_DWORD *)v53;
  *((_DWORD *)result + 7) = *(_DWORD *)&v53[3];
  *((void *)result + 4) = v39;
  *((void *)result + 5) = v45;
  *((void *)result + 6) = v46;
  return result;
}

void sub_256489098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object)
{
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(v11);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationFingerprint::Measurement::HashMeasurement::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  uint64_t v4 = &v5;
  uint64_t v2 = *(unsigned int *)(a2 + 40);
  if (v2 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  size_t v6 = &v4;
  ((void (*)(uint64_t ***, uint64_t))off_2704E0F88[v2])(&v6, a2 + 16);
  return v5;
}

uint64_t CLMicroLocationFingerprint::Measurement::PredicateMeasurement::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a2 + 8) == *(_DWORD *)(a3 + 8)) {
    return std::operator==[abi:ne180100]<unsigned long long,boost::uuids::uuid,std::string>(a2 + 16, a3 + 16);
  }
  else {
    return 0;
  }
}

uint64_t std::operator==[abi:ne180100]<unsigned long long,boost::uuids::uuid,std::string>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  int v5 = *(_DWORD *)(a2 + 24);
  BOOL v6 = v5 == v4;
  BOOL v9 = v5 == -1;
  BOOL v7 = v5 == -1;
  if (v9) {
    BOOL v6 = 0;
  }
  if (v4 == -1) {
    uint64_t result = v7;
  }
  else {
    uint64_t result = v6;
  }
  BOOL v9 = v4 == -1 || !v6;
  if (!v9)
  {
    uint64_t v11 = &v10;
    return ((uint64_t (*)(char **, uint64_t))off_2704E0FA0[v4])(&v11, a1);
  }
  return result;
}

void *CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(CLMicroLocationFingerprint::Measurement *this)
{
  void v10[4] = *MEMORY[0x263EF8340];
  v7[0] = &unk_2704E1030;
  v7[3] = v7;
  v6[0] = &unk_2704E10C0;
  void v6[3] = v6;
  v5[0] = &unk_2704E1150;
  int v5[3] = v5;
  CLMicroLocationUtils::DeviceIdVisitor<std::string>::DeviceIdVisitor((uint64_t)v8, (uint64_t)v7, (uint64_t)v6, (uint64_t)v5);
  std::__function::__value_func<std::string ()(std::string const&)>::~__value_func[abi:ne180100](v5);
  std::__function::__value_func<std::string ()(boost::uuids::uuid const&)>::~__value_func[abi:ne180100](v6);
  std::__function::__value_func<std::string ()(unsigned long long const&)>::~__value_func[abi:ne180100](v7);
  uint64_t v2 = *((unsigned int *)this + 10);
  if (v2 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint64_t v4 = v8;
  ((void (*)(void **, char *))off_2704E0FB8[v2])(&v4, (char *)this + 16);
  std::__function::__value_func<std::string ()(std::string const&)>::~__value_func[abi:ne180100](v10);
  std::__function::__value_func<std::string ()(boost::uuids::uuid const&)>::~__value_func[abi:ne180100](v9);
  return std::__function::__value_func<std::string ()(unsigned long long const&)>::~__value_func[abi:ne180100](v8);
}

void sub_256489430(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  std::__function::__value_func<std::string ()(std::string const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<std::string ()(boost::uuids::uuid const&)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  std::__function::__value_func<std::string ()(unsigned long long const&)>::~__value_func[abi:ne180100](va2);
  _Unwind_Resume(a1);
}

void *CLMicroLocationUtils::DeviceIdVisitor<std::string>::~DeviceIdVisitor(void *a1)
{
  std::__function::__value_func<std::string ()(std::string const&)>::~__value_func[abi:ne180100](a1 + 8);
  std::__function::__value_func<std::string ()(boost::uuids::uuid const&)>::~__value_func[abi:ne180100](a1 + 4);
  return std::__function::__value_func<std::string ()(unsigned long long const&)>::~__value_func[abi:ne180100](a1);
}

void *CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement@<X0>(CLMicroLocationFingerprint::Measurement *this@<X0>, uint64_t a2@<X8>)
{
  v16[4] = *MEMORY[0x263EF8340];
  CLMicroLocationProto::FingerprintMeasurement::FingerprintMeasurement((void *)a2);
  unsigned int v5 = *((_DWORD *)this + 2);
  if (!CLMicroLocationProto::DataType_IsValid((CLMicroLocationProto *)v5)) {
    __assert_rtn("set_datatype", "microlocation.pb.h", 11137, "::CLMicroLocationProto::DataType_IsValid(value)");
  }
  int v6 = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 16) = v5;
  *(void *)(a2 + 8) = *(void *)this;
  *(_DWORD *)(a2 + 20) = *((_DWORD *)this + 3);
  *(_DWORD *)(a2 + 36) = v6 | 0xF;
  uint64_t v7 = *(void *)(a2 + 24);
  if (!v7) {
    operator new();
  }
  v13[0] = &unk_2704E11E0;
  v13[1] = v7;
  v13[3] = v13;
  v12[0] = &unk_2704E1270;
  v12[1] = v7;
  v12[3] = v12;
  v11[0] = &unk_2704E1300;
  v11[1] = v7;
  v11[3] = v11;
  CLMicroLocationUtils::DeviceIdVisitor<void>::DeviceIdVisitor((uint64_t)v14, (uint64_t)v13, (uint64_t)v12, (uint64_t)v11);
  std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<void ()(boost::uuids::uuid const&)>::~__value_func[abi:ne180100](v12);
  std::__function::__value_func<void ()(unsigned long long const&)>::~__value_func[abi:ne180100](v13);
  uint64_t v8 = *((unsigned int *)this + 10);
  if (v8 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint64_t v10 = v14;
  ((void (*)(void **, char *))off_2704E0FD0[v8])(&v10, (char *)this + 16);
  std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100](v16);
  std::__function::__value_func<void ()(boost::uuids::uuid const&)>::~__value_func[abi:ne180100](v15);
  return std::__function::__value_func<void ()(unsigned long long const&)>::~__value_func[abi:ne180100](v14);
}

void sub_256489674(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v2, 0x10A1C4000609EC7);
  CLMicroLocationProto::FingerprintMeasurement::~FingerprintMeasurement(v1);
  _Unwind_Resume(a1);
}

void *CLMicroLocationUtils::DeviceIdVisitor<void>::~DeviceIdVisitor(void *a1)
{
  std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100](a1 + 8);
  std::__function::__value_func<void ()(boost::uuids::uuid const&)>::~__value_func[abi:ne180100](a1 + 4);
  return std::__function::__value_func<void ()(unsigned long long const&)>::~__value_func[abi:ne180100](a1);
}

uint64_t CLMicroLocationFingerprint::Measurement::fromProtobuf@<X0>(CLMicroLocationFingerprint::Measurement *this@<X0>, const CLMicroLocationProto::Measurement *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  int v5 = *((_DWORD *)this + 16);
  uint64_t v6 = *((void *)this + 1);
  double MeasurementValue = CLMicroLocationProtobufHelper::getMeasurementValue(this, a2);
  v22.__r_.__value_.__r.__words[0] = 0;
  int v23 = 0;
  switch(v5)
  {
    case 1:
      uint64_t v9 = *((void *)this + 2);
      if (!v9) {
        uint64_t v9 = *(void *)(CLMicroLocationProto::Measurement::default_instance(v7) + 16);
      }
      *(void *)&long long v24 = *(void *)(v9 + 24);
      std::variant<unsigned long long,boost::uuids::uuid,std::string>::operator=[abi:ne180100]<unsigned long long,0,unsigned long long,0ul,0>((uint64_t)&v22, &v24);
      break;
    case 2:
      uint64_t v10 = *((void *)this + 3);
      if (!v10) {
        uint64_t v10 = *(void *)(CLMicroLocationProto::Measurement::default_instance(v7) + 24);
      }
      goto LABEL_19;
    case 3:
      uint64_t v10 = *((void *)this + 4);
      if (!v10) {
        uint64_t v10 = *(void *)(CLMicroLocationProto::Measurement::default_instance(v7) + 32);
      }
      goto LABEL_19;
    case 4:
      uint64_t v10 = *((void *)this + 5);
      if (!v10) {
        uint64_t v10 = *(void *)(CLMicroLocationProto::Measurement::default_instance(v7) + 40);
      }
      goto LABEL_19;
    case 5:
      uint64_t v11 = *((void *)this + 6);
      if (!v11)
      {
        uint64_t v7 = (CLMicroLocationProto::Measurement *)CLMicroLocationProto::Measurement::default_instance(v7);
        uint64_t v11 = *((void *)v7 + 6);
      }
      if ((*(unsigned char *)(v11 + 64) & 0x80) != 0)
      {
        uint64_t v16 = *((void *)this + 6);
        if (!v16) {
          uint64_t v16 = *(void *)(CLMicroLocationProto::Measurement::default_instance(v7) + 48);
        }
        uint64_t v17 = CLMicroLocationProtobufHelper::uuidFromProtobuf(*(uint64_t ***)(v16 + 48), &v24);
        if (v25)
        {
LABEL_29:
          std::variant<unsigned long long,boost::uuids::uuid,std::string>::operator=[abi:ne180100]<boost::uuids::uuid&,0,boost::uuids::uuid,1ul,0>((uint64_t)&v22, &v24);
        }
        else
        {
          uint64_t v20 = *((void *)this + 6);
          if (!v20) {
            uint64_t v20 = *(void *)(CLMicroLocationProto::Measurement::default_instance((CLMicroLocationProto::Measurement *)v17)
          }
                            + 48);
          std::__variant_detail::__assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__assign_alt[abi:ne180100]<2ul,std::string,std::string const&>((uint64_t)&v22, &v22, *(std::string **)(v20 + 48));
        }
      }
      else
      {
        uint64_t v12 = *((void *)this + 6);
        if (!v12)
        {
          uint64_t v7 = (CLMicroLocationProto::Measurement *)CLMicroLocationProto::Measurement::default_instance(v7);
          uint64_t v12 = *((void *)v7 + 6);
        }
        if ((*(unsigned char *)(v12 + 64) & 8) != 0)
        {
          uint64_t v10 = *((void *)this + 6);
          if (!v10) {
            uint64_t v10 = *(void *)(CLMicroLocationProto::Measurement::default_instance(v7) + 48);
          }
LABEL_19:
          std::__variant_detail::__assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__assign_alt[abi:ne180100]<2ul,std::string,std::string const&>((uint64_t)&v22, &v22, *(std::string **)(v10 + 24));
        }
      }
      break;
    case 6:
      uint64_t v13 = *((void *)this + 7);
      if (!v13) {
        uint64_t v13 = *(void *)(CLMicroLocationProto::Measurement::default_instance(v7) + 56);
      }
      __int16 v14 = CLMicroLocationProtobufHelper::uuidFromProtobuf(*(uint64_t ***)(v13 + 32), &v24);
      if (v25) {
        goto LABEL_29;
      }
      uint64_t v15 = *((void *)this + 7);
      if (!v15) {
        uint64_t v15 = *(void *)(CLMicroLocationProto::Measurement::default_instance((CLMicroLocationProto::Measurement *)v14)
      }
                        + 56);
      std::__variant_detail::__assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__assign_alt[abi:ne180100]<2ul,std::string,std::string const&>((uint64_t)&v22, &v22, *(std::string **)(v15 + 32));
      break;
    default:
      break;
  }
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v21, (uint64_t)&v22);
  float v18 = MeasurementValue;
  *(void *)a3 = v6;
  *(_DWORD *)(a3 + 8) = v5;
  *(float *)(a3 + 12) = v18;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::__move_constructor(a3 + 16, (uint64_t)v21);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v21);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v22);
}

void sub_256489958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::variant<unsigned long long,boost::uuids::uuid,std::string>::operator=[abi:ne180100]<unsigned long long,0,unsigned long long,0ul,0>(uint64_t a1, void *a2)
{
  if (*(_DWORD *)(a1 + 24)) {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__emplace[abi:ne180100]<0ul,unsigned long long>(a1, a2);
  }
  else {
    *(void *)a1 = *a2;
  }
  return a1;
}

uint64_t std::variant<unsigned long long,boost::uuids::uuid,std::string>::operator=[abi:ne180100]<boost::uuids::uuid&,0,boost::uuids::uuid,1ul,0>(uint64_t a1, _OWORD *a2)
{
  if (*(_DWORD *)(a1 + 24) == 1) {
    *(_OWORD *)a1 = *a2;
  }
  else {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__emplace[abi:ne180100]<1ul,boost::uuids::uuid&>(a1, a2);
  }
  return a1;
}

uint64_t CLMicroLocationFingerprint::Measurement::fromProtobuf@<X0>(CLMicroLocationFingerprint::Measurement *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = this;
  uint64_t v20 = *MEMORY[0x263EF8340];
  int v5 = *((_DWORD *)this + 4);
  uint64_t v6 = *((void *)this + 1);
  int v7 = *((_DWORD *)this + 5);
  v17.__r_.__value_.__r.__words[0] = 0;
  int v18 = 0;
  uint64_t v8 = *((void *)this + 3);
  if (!v8)
  {
    this = (CLMicroLocationFingerprint::Measurement *)CLMicroLocationProto::FingerprintMeasurement::default_instance(this);
    uint64_t v8 = *((void *)this + 3);
  }
  if (*(unsigned char *)(v8 + 28))
  {
    uint64_t v11 = *((void *)v3 + 3);
    if (!v11) {
      uint64_t v11 = *(void *)(CLMicroLocationProto::FingerprintMeasurement::default_instance(this) + 24);
    }
    *(void *)uint64_t buf = *(void *)(v11 + 8);
    std::variant<unsigned long long,boost::uuids::uuid,std::string>::operator=[abi:ne180100]<unsigned long long,0,unsigned long long,0ul,0>((uint64_t)&v17, buf);
  }
  else
  {
    uint64_t v9 = *((void *)v3 + 3);
    if (!v9)
    {
      this = (CLMicroLocationFingerprint::Measurement *)CLMicroLocationProto::FingerprintMeasurement::default_instance(this);
      uint64_t v9 = *((void *)this + 3);
    }
    if ((*(unsigned char *)(v9 + 28) & 2) != 0)
    {
      uint64_t v12 = *((void *)v3 + 3);
      if (!v12) {
        uint64_t v12 = *(void *)(CLMicroLocationProto::FingerprintMeasurement::default_instance(this) + 24);
      }
      uint64_t v13 = CLMicroLocationProtobufHelper::uuidFromProtobuf(*(uint64_t ***)(v12 + 16), buf);
      if (buf[16])
      {
        std::variant<unsigned long long,boost::uuids::uuid,std::string>::operator=[abi:ne180100]<boost::uuids::uuid&,0,boost::uuids::uuid,1ul,0>((uint64_t)&v17, buf);
      }
      else
      {
        uint64_t v14 = *((void *)v3 + 3);
        if (!v14) {
          uint64_t v14 = *(void *)(CLMicroLocationProto::FingerprintMeasurement::default_instance((CLMicroLocationProto::FingerprintMeasurement *)v13)
        }
                          + 24);
        std::__variant_detail::__assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__assign_alt[abi:ne180100]<2ul,std::string,std::string const&>((uint64_t)&v17, &v17, *(std::string **)(v14 + 16));
      }
    }
    else
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_98);
      }
      uint64_t v10 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl(&dword_25631F000, v10, OS_LOG_TYPE_ERROR, "Unknown device id", buf, 2u);
      }
      std::__variant_detail::__assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__assign_alt[abi:ne180100]<2ul,std::string,char const(&)[8]>((uint64_t)&v17, (uint64_t)&v17, (uint64_t)"Unknown");
    }
  }
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v16, (uint64_t)&v17);
  *(void *)a2 = v6;
  *(_DWORD *)(a2 + 8) = v5;
  *(_DWORD *)(a2 + 12) = v7;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::__move_constructor(a2 + 16, (uint64_t)v16);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v16);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v17);
}

void sub_256489BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationFingerprint::CLMicroLocationFingerprint(uint64_t a1, uint64_t *a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 96) = 1065353216;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 1065353216;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  int v12 = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v12);
  *(void *)(a1 + 40) = boost::uuids::random_generator_pure::operator()((uint64_t)&v12);
  *(void *)(a1 + 48) = v4;
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v12);
  *(_OWORD *)(a1 + 144) = xmmword_25651AA80;
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  if (v6 != v5)
  {
    double v7 = 1.79769313e308;
    double v8 = 2.22507386e-308;
    do
    {
      uint64_t v9 = *(uint64_t **)(v6 + 16);
      if (v9)
      {
        do
        {
          std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__emplace_unique_key_args<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement const&>(a1, (uint64_t)(v9 + 2), (_OWORD *)v9 + 1);
          uint64_t v9 = (uint64_t *)*v9;
        }
        while (v9);
        double v7 = *(double *)(a1 + 144);
        double v8 = *(double *)(a1 + 152);
      }
      if (*(double *)(v6 + 144) < v7) {
        double v7 = *(double *)(v6 + 144);
      }
      *(double *)(a1 + 144) = v7;
      if (v8 < *(double *)(v6 + 152)) {
        double v8 = *(double *)(v6 + 152);
      }
      *(double *)(a1 + 152) = v8;
      v6 += 192;
    }
    while (v6 != v5);
  }
  for (uint64_t i = (void *)(a1 + 16);
        ;
        CLMicroLocationFingerprint::updatePerMeasurementFields((CLMicroLocationFingerprint *)a1, (const CLMicroLocationFingerprint::Measurement *)(i + 2)))
  {
    uint64_t i = (void *)*i;
    if (!i) {
      break;
    }
  }
  return a1;
}

void sub_256489DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&a11);
  uint64_t v15 = *v13;
  if (*v13)
  {
    *(void *)(v11 + 176) = v15;
    operator delete(v15);
  }
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(v12);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(v11 + 64);
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table(v11);
  _Unwind_Resume(a1);
}

uint64_t *CLMicroLocationFingerprint::updatePerMeasurementFields(CLMicroLocationFingerprint *this, const CLMicroLocationFingerprint::Measurement *a2)
{
  uint64_t v4 = (unsigned int *)((char *)a2 + 8);
  std::__hash_table<CLMicroLocationProto::DataType,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,std::allocator<CLMicroLocationProto::DataType>>::__emplace_unique_key_args<CLMicroLocationProto::DataType,CLMicroLocationProto::DataType const&>((uint64_t)this + 64, v4, v4);
  uint64_t v5 = (void *)((char *)this + 104);
  if (std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v5, v4))
  {
    uint64_t result = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v5, v4);
    double v7 = *(double *)a2;
    double v8 = *((double *)result + 3);
    if (*(double *)a2 < v8) {
      double v8 = *(double *)a2;
    }
    if (*((double *)result + 4) >= *(double *)a2) {
      double v7 = *((double *)result + 4);
    }
    *((double *)result + 3) = v8;
    *((double *)result + 4) = v7;
  }
  else
  {
    *(void *)&long long v9 = *(void *)a2;
    *((void *)&v9 + 1) = v9;
    return (uint64_t *)std::__hash_table<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,std::__unordered_map_hasher<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,true>,std::__unordered_map_equal<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,std::equal_to<CLMicroLocationProto::DataType>,std::hash<CLMicroLocationProto::DataType>,true>,std::allocator<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>>>::__emplace_unique_key_args<CLMicroLocationProto::DataType,CLMicroLocationProto::DataType const&,CLMicroLocationFingerprint::StartAndEndTimestamps>((uint64_t)v5, v4, v4, &v9);
  }
  return result;
}

void CLMicroLocationFingerprint::CLMicroLocationFingerprint(CLMicroLocationFingerprint *this, const CLMicroLocationProto::Fingerprint *a2)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  uint64_t v4 = (void *)((char *)this + 56);
  *(_OWORD *)((char *)this + 72) = 0u;
  *((void *)this + 11) = 0;
  *((_DWORD *)this + 24) = 1065353216;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_DWORD *)this + 34) = 1065353216;
  *((void *)this + 18) = 0;
  uint64_t v5 = (_OWORD *)((char *)this + 144);
  *((void *)this + 21) = 0;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 19) = 0;
  *((_DWORD *)this + 40) = 0;
  uint64_t v6 = (uint64_t *)*((void *)a2 + 7);
  int v7 = *((char *)v6 + 23);
  if ((v7 & 0x80000000) == 0)
  {
    if (v7 != 16) {
      goto LABEL_7;
    }
LABEL_6:
    *(_OWORD *)((char *)this + 40) = *(_OWORD *)v6;
    goto LABEL_11;
  }
  if (v6[1] == 16)
  {
    uint64_t v6 = (uint64_t *)*v6;
    goto LABEL_6;
  }
LABEL_7:
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_98);
  }
  double v8 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v16) = 0;
    _os_log_impl(&dword_25631F000, v8, OS_LOG_TYPE_DEFAULT, "#Warning The protobuf fingerprint does not have a valid recording uuid", (uint8_t *)&v16, 2u);
  }
LABEL_11:
  _OWORD *v5 = *(_OWORD *)((char *)a2 + 40);
  uint64_t v9 = *((unsigned int *)a2 + 4);
  if ((int)v9 < 1)
  {
    uint64_t v12 = *((int *)a2 + 20);
    if (v12)
    {
      uint64_t v13 = (CLMicroLocationFingerprint::Measurement **)*((void *)a2 + 9);
      uint64_t v14 = 8 * v12;
      do
      {
        CLMicroLocationFingerprint::Measurement::fromProtobuf(*v13, (uint64_t)&v16);
        std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__emplace_unique_key_args<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement>((uint64_t)this, (uint64_t)&v16, &v16);
        std::__variant_detail::__dtor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v17);
        ++v13;
        v14 -= 8;
      }
      while (v14);
    }
  }
  else
  {
    uint64_t v10 = (CLMicroLocationFingerprint::Measurement **)*((void *)a2 + 1);
    uint64_t v11 = 8 * v9;
    do
    {
      CLMicroLocationFingerprint::Measurement::fromProtobuf(*v10, a2, (uint64_t)&v16);
      std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__emplace_unique_key_args<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement>((uint64_t)this, (uint64_t)&v16, &v16);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v17);
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  for (uint64_t i = (void *)((char *)this + 16);
        ;
        CLMicroLocationFingerprint::updatePerMeasurementFields(this, (const CLMicroLocationFingerprint::Measurement *)(i + 2)))
  {
    uint64_t i = (void *)*i;
    if (!i) {
      break;
    }
  }
  if (*((unsigned char *)a2 + 96)) {
    *v4 |= 0x20uLL;
  }
  if (*((unsigned char *)a2 + 97)) {
    *v4 |= 0x40uLL;
  }
}

void sub_25648A0BC(_Unwind_Exception *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::~__dtor(v3);
  uint64_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 176) = v6;
    operator delete(v6);
  }
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(v1 + 64);
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void CLMicroLocationFingerprint::removeExceedingMeasurements(void *a1, unint64_t a2, int a3)
{
  uint64_t v3 = (uint64_t *)a1[2];
  if (v3)
  {
    unint64_t v7 = 0;
    do
    {
      if (*((_DWORD *)v3 + 6) == a3) {
        ++v7;
      }
      uint64_t v3 = (uint64_t *)*v3;
    }
    while (v3);
    if (v7 > a2)
    {
      std::string __p = 0;
      std::string v22 = 0;
      v23[0] = 0;
      std::vector<float>::reserve(&__p, v7);
      for (uint64_t i = (uint64_t *)a1[2]; i; uint64_t i = (uint64_t *)*i)
      {
        if (*((_DWORD *)i + 6) == a3)
        {
          uint64_t v9 = v22;
          if ((unint64_t)v22 >= v23[0])
          {
            uint64_t v11 = (char *)__p;
            uint64_t v12 = (v22 - (unsigned char *)__p) >> 2;
            unint64_t v13 = v12 + 1;
            if ((unint64_t)(v12 + 1) >> 62) {
              std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v14 = v23[0] - (void)__p;
            if ((uint64_t)(v23[0] - (void)__p) >> 1 > v13) {
              unint64_t v13 = v14 >> 1;
            }
            if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v15 = v13;
            }
            if (v15)
            {
              long long v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationProto::ConfidenceReason>>((uint64_t)v23, v15);
              uint64_t v11 = (char *)__p;
              uint64_t v9 = v22;
            }
            else
            {
              long long v16 = 0;
            }
            std::string v17 = &v16[4 * v12];
            *(_DWORD *)std::string v17 = *((_DWORD *)i + 7);
            uint64_t v10 = v17 + 4;
            while (v9 != v11)
            {
              int v18 = *((_DWORD *)v9 - 1);
              v9 -= 4;
              *((_DWORD *)v17 - 1) = v18;
              v17 -= 4;
            }
            std::string __p = v17;
            std::string v22 = v10;
            v23[0] = &v16[4 * v15];
            if (v11) {
              operator delete(v11);
            }
          }
          else
          {
            *(_DWORD *)std::string v22 = *((_DWORD *)i + 7);
            uint64_t v10 = v9 + 4;
          }
          std::string v22 = v10;
        }
      }
      if (((a3 - 2) & 0xFFFFFFFB) != 0) {
        CLMicroLocationFingerprint::removeExceedingRssiMeasurements(a1, (float **)&__p, a2, a3);
      }
      else {
        CLMicroLocationFingerprint::removeExceedingRangeMeasurements(a1, &__p, a2, a3);
      }
      long long v19 = (uint64_t *)a1[2];
      if (!v19) {
        goto LABEL_36;
      }
      unint64_t v20 = 0;
      do
      {
        if (*((_DWORD *)v19 + 6) == a3) {
          ++v20;
        }
        long long v19 = (uint64_t *)*v19;
      }
      while (v19);
      if (v20 > a2)
      {
        CLMicroLocationFingerprint::removeExceedingMeasurements();

        abort_report_np();
        __break(1u);
      }
      else
      {
LABEL_36:
        if (__p)
        {
          std::string v22 = (char *)__p;
          operator delete(__p);
        }
      }
    }
  }
}

void sub_25648A31C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<float>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 2)
  {
    if (a2 >> 62) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationProto::ConfidenceReason>>(v3, a2);
    unint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v9 = &v6[4 * v8];
    uint64_t v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v11 != *a1)
    {
      uint64_t v12 = v7;
      do
      {
        int v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void CLMicroLocationFingerprint::removeExceedingRssiMeasurements(void *a1, float **a2, uint64_t a3, int a4)
{
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  unint64_t v10 = 126 - 2 * __clz(v9 - v8);
  if (v9 == v8) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = v10;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::greater<float> &,float *,false>(v8, v9, (uint64_t)v15, v11, 1);
  uint64_t v12 = (uint64_t *)a1[2];
  if (v12)
  {
    float v13 = (*a2)[a3];
    do
    {
      while (*((_DWORD *)v12 + 6) != a4 || *((float *)v12 + 7) > v13)
      {
        uint64_t v12 = (uint64_t *)*v12;
        if (!v12) {
          return;
        }
      }
      uint64_t v14 = (uint64_t *)*v12;
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::remove(a1, v12, (uint64_t)v15);
      std::unique_ptr<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>>>>::reset[abi:ne180100]((uint64_t)v15, 0);
      uint64_t v12 = v14;
    }
    while (v14);
  }
}

void CLMicroLocationFingerprint::removeExceedingRangeMeasurements(void *a1, void *a2, uint64_t a3, int a4)
{
  std::__sort<std::__less<float,float> &,float *>();
  uint64_t v8 = (uint64_t *)a1[2];
  if (v8)
  {
    float v9 = *(float *)(*a2 + 4 * a3);
    do
    {
      while (*((_DWORD *)v8 + 6) != a4 || *((float *)v8 + 7) < v9)
      {
        uint64_t v8 = (uint64_t *)*v8;
        if (!v8) {
          return;
        }
      }
      unint64_t v10 = (uint64_t *)*v8;
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::remove(a1, v8, (uint64_t)v11);
      std::unique_ptr<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
      uint64_t v8 = v10;
    }
    while (v10);
  }
}

uint64_t CLMicroLocationFingerprint::CLMicroLocationFingerprint(uint64_t a1, CLMiLoProtobufWrapper::Measurement **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a5;
  uint64_t v71 = *MEMORY[0x263EF8340];
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 56) = 0u;
  unint64_t v57 = (void *)(a1 + 56);
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 1065353216;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 1065353216;
  *(void *)(a1 + 168) = 0;
  uint64_t v58 = (void **)(a1 + 168);
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  long long v59 = 0u;
  long long v60 = 0u;
  int v61 = 1065353216;
  float v9 = *a2;
  unint64_t v10 = a2[1];
  if (*a2 == v10) {
    goto LABEL_22;
  }
  do
  {
    int v11 = CLMiLoProtobufWrapper::Measurement::isInvalidWiFiRssi(v9) ^ 1;
    if (*(unsigned char *)(a3 + 9)) {
      int v12 = 1;
    }
    else {
      int v12 = v11;
    }
    isOffChannelWiFiRssuint64_t i = (CLMicroLocationProto::Measurement *)CLMiLoProtobufWrapper::Measurement::isOffChannelWiFiRssi(v9);
    if (*(unsigned char *)(a3 + 8)) {
      int v15 = 1;
    }
    else {
      int v15 = isOffChannelWiFiRssi ^ 1;
    }
    if (v12 & v15)
    {
      CLMicroLocationFingerprint::Measurement::fromProtobuf(v9, v14, (uint64_t)buf);
      std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__emplace_multi<CLMicroLocationFingerprint::Measurement>(&v59, buf);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&buf[16]);
    }
    else
    {
      uint64_t v16 = *((void *)v9 + 2);
      if (!v16) {
        uint64_t v16 = *(void *)(CLMicroLocationProto::Measurement::default_instance(isOffChannelWiFiRssi) + 16);
      }
      v63.var0 = CLMacAddress::newFromUint64(*(CLMacAddress **)(v16 + 24), (unint64_t)v14);
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_98);
      }
      std::string v17 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        CLMacAddress::toPrettyStr(&v63, &__p);
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)uint64_t buf = 68289794;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        __int16 v65 = 2082;
        uint64_t v66 = p_p;
        __int16 v67 = 1026;
        int v68 = v12;
        __int16 v69 = 1026;
        int v70 = v15;
        _os_log_impl(&dword_25631F000, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"shouldProcess, ignore a measurement\", \"macAddress\":%{public, location:escape_only}s, \"shouldProcessPerInvalidRssiFlag\":%{public}hhd, \"shouldProcessPerOffChannelRssiFlag\":%{public}hhd}", buf, 0x28u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
    float v9 = (CLMiLoProtobufWrapper::Measurement *)((char *)v9 + 88);
  }
  while (v9 != v10);
  uint64_t v5 = a5;
  if (!*((void *)&v60 + 1))
  {
LABEL_22:
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_98);
    }
    long long v19 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_25631F000, v19, OS_LOG_TYPE_DEFAULT, "#warning, this fingerprint does not have any measurements, all measurements might have been filtered out", buf, 2u);
    }
  }
  if (*(unsigned char *)(v5 + 16))
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)v5;
  }
  else
  {
    *(_DWORD *)uint64_t buf = 0;
    boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)buf);
    *(void *)(a1 + 40) = boost::uuids::random_generator_pure::operator()((uint64_t)buf);
    *(void *)(a1 + 48) = v20;
    boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)buf);
  }
  float v21 = (uint64_t *)v60;
  if ((void)v60)
  {
    double v22 = 2.22507386e-308;
    double v23 = 1.79769313e308;
    do
    {
      long long v24 = std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__equal_range_multi<CLMicroLocationFingerprint::Measurement>(&v59, (uint64_t)(v21 + 2));
      uint64_t v26 = v25;
      *(_DWORD *)uint64_t buf = *((_DWORD *)v21 + 6);
      __int16 v27 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>((void *)(a3 + 16), (unsigned int *)buf);
      uint64_t v28 = v27 + 3;
      if (!v27) {
        uint64_t v28 = &CLMicroLocationFingerprintConfiguration::getConfigurationForType(CLMicroLocationProto::DataType)const::sourceDisabledConfiguration;
      }
      if (*v28) {
        BOOL v29 = v24 == v26;
      }
      else {
        BOOL v29 = 1;
      }
      if (!v29)
      {
        double v30 = 0.0;
        double v31 = 0.0;
        do
        {
          double v32 = *((double *)v24 + 2);
          CLMicroLocationFingerprint::updatePerMeasurementFields((CLMicroLocationFingerprint *)a1, (const CLMicroLocationFingerprint::Measurement *)(v24 + 2));
          if (v32 > v22) {
            double v22 = v32;
          }
          if (v32 < v23) {
            double v23 = v32;
          }
          double v31 = v31 + 1.0;
          double v30 = v30 + *((float *)v24 + 7);
          long long v24 = (uint64_t *)*v24;
        }
        while (v24 != v26);
        if (v31 > 0.0)
        {
          *(_OWORD *)uint64_t buf = *((_OWORD *)v21 + 1);
          std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)&buf[16], (uint64_t)(v21 + 4));
          float v33 = v30 / v31;
          *(float *)&buf[12] = v33;
          std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__emplace_unique_key_args<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement const&>(a1, (uint64_t)buf, buf);
          std::__variant_detail::__dtor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&buf[16]);
        }
      }
      float v21 = v26;
    }
    while (v26);
  }
  else
  {
    double v23 = 1.79769313e308;
    double v22 = 2.22507386e-308;
  }
  *(double *)(a1 + 144) = v23;
  *(double *)(a1 + 152) = v22;
  for (uint64_t i = a1 + 80; ; CLMicroLocationFingerprint::removeExceedingMeasurements((void *)a1, v36[3], *(_DWORD *)(i + 16)))
  {
    uint64_t i = *(void *)i;
    if (!i) {
      break;
    }
    *(_DWORD *)uint64_t buf = *(_DWORD *)(i + 16);
    double v35 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>((void *)(a3 + 16), (unsigned int *)buf);
    __int16 v36 = v35 + 3;
    if (!v35) {
      __int16 v36 = &CLMicroLocationFingerprintConfiguration::getConfigurationForType(CLMicroLocationProto::DataType)const::sourceDisabledConfiguration;
    }
  }
  if (*(unsigned char *)(a4 + 144))
  {
    if (*(unsigned char *)(a4 + 77))
    {
      uint64_t v37 = *(uint64_t **)(a1 + 16);
      if (!v37) {
        goto LABEL_61;
      }
      uint64_t v38 = 0;
      do
      {
        if (*((_DWORD *)v37 + 6) == 5) {
          ++v38;
        }
        uint64_t v37 = (uint64_t *)*v37;
      }
      while (v37);
      if (!v38) {
LABEL_61:
      }
        *v57 |= 0x20uLL;
    }
    if (*(unsigned char *)(a4 + 76))
    {
      uint64_t v39 = *(uint64_t **)(a1 + 16);
      if (!v39) {
        goto LABEL_69;
      }
      uint64_t v40 = 0;
      do
      {
        if (*((_DWORD *)v39 + 6) == 6) {
          ++v40;
        }
        uint64_t v39 = (uint64_t *)*v39;
      }
      while (v39);
      if (!v40) {
LABEL_69:
      }
        *v57 |= 0x40uLL;
    }
    *(_DWORD *)(a1 + 160) = *(_DWORD *)(a4 + 120);
    LODWORD(v41) = *(_DWORD *)(a4 + 112);
    if ((int)v41 >= 1)
    {
      uint64_t v42 = 0;
      do
      {
        if (v42 >= (int)v41)
        {
          wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
          wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
          wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
          wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)buf);
        }
        int v43 = *(_DWORD *)(*(void *)(a4 + 104) + 4 * v42);
        uint64_t v45 = *(char **)(a1 + 176);
        unint64_t v44 = *(void *)(a1 + 184);
        if ((unint64_t)v45 >= v44)
        {
          uint64_t v47 = (char *)*v58;
          uint64_t v48 = (v45 - (unsigned char *)*v58) >> 2;
          unint64_t v49 = v48 + 1;
          if ((unint64_t)(v48 + 1) >> 62) {
            std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v50 = v44 - (void)v47;
          if (v50 >> 1 > v49) {
            unint64_t v49 = v50 >> 1;
          }
          if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v51 = v49;
          }
          if (v51)
          {
            unsigned int v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationProto::ConfidenceReason>>(a1 + 184, v51);
            uint64_t v47 = *(char **)(a1 + 168);
            uint64_t v45 = *(char **)(a1 + 176);
          }
          else
          {
            unsigned int v52 = 0;
          }
          uint64_t v53 = &v52[4 * v48];
          *(_DWORD *)uint64_t v53 = v43;
          uint64_t v46 = v53 + 4;
          while (v45 != v47)
          {
            int v54 = *((_DWORD *)v45 - 1);
            v45 -= 4;
            *((_DWORD *)v53 - 1) = v54;
            v53 -= 4;
          }
          *(void *)(a1 + 168) = v53;
          *(void *)(a1 + 176) = v46;
          *(void *)(a1 + 184) = &v52[4 * v51];
          if (v47) {
            operator delete(v47);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v45 = v43;
          uint64_t v46 = v45 + 4;
        }
        *(void *)(a1 + 176) = v46;
        ++v42;
        uint64_t v41 = *(int *)(a4 + 112);
      }
      while (v42 < v41);
    }
  }
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table((uint64_t)&v59);
  return a1;
}

void sub_25648AB98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&a27);
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table((uint64_t)&a17);
  BOOL v29 = *a16;
  if (*a16)
  {
    *(void *)(v27 + 176) = v29;
    operator delete(v29);
  }
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(a10);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(v27 + 64);
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table(v27);
  _Unwind_Resume(a1);
}

void CLMicroLocationFingerprint::create(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X3>, unsigned char *a5@<X8>)
{
  memset(v12, 0, sizeof(v12));
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  int v15 = v12;
  while (v9 != v10)
  {
    int v11 = *(_DWORD *)(v9 + 112);
    CLMicroLocationProto::Measurement::Measurement((CLMicroLocationProto::Measurement *)v13, (const CLMicroLocationProto::Measurement *)(v9 + 32));
    int v14 = v11;
    std::back_insert_iterator<std::vector<CLMiLoProtobufWrapper::Measurement>>::operator=[abi:ne180100](&v15, (CLMicroLocationProto::Measurement *)v13);
    CLMicroLocationProto::Measurement::~Measurement((CLMicroLocationProto::Measurement *)v13);
    v9 += 120;
  }
  CLMicroLocationFingerprint::create((uint64_t)v12, a2, a3, a4, a5);
  v13[0] = (void **)v12;
  std::vector<CLMiLoProtobufWrapper::Measurement>::__destroy_vector::operator()[abi:ne180100](v13);
}

void sub_25648AD14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v9 - 72) = &a9;
  std::vector<CLMiLoProtobufWrapper::Measurement>::__destroy_vector::operator()[abi:ne180100]((void ***)(v9 - 72));
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationFingerprint::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X3>, unsigned char *a5@<X8>)
{
  uint64_t v103 = *MEMORY[0x263EF8340];
  *a5 = 0;
  a5[192] = 0;
  if (*(void *)result == *(void *)(result + 8)) {
    return result;
  }
  CLMicroLocationFingerprint::CLMicroLocationFingerprint((uint64_t)v69, (CLMiLoProtobufWrapper::Measurement **)result, (uint64_t)a4, a2, a3);
  *(_DWORD *)uint64_t buf = 1;
  uint64_t v6 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(a4 + 2, (unsigned int *)buf);
  if (v6) {
    unint64_t v7 = (double *)(v6 + 3);
  }
  else {
    unint64_t v7 = (double *)&CLMicroLocationFingerprintConfiguration::getConfigurationForType(CLMicroLocationProto::DataType)const::sourceDisabledConfiguration;
  }
  *(_DWORD *)uint64_t buf = 5;
  uint64_t v8 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(a4 + 2, (unsigned int *)buf);
  if (v8) {
    uint64_t v9 = (double *)(v8 + 3);
  }
  else {
    uint64_t v9 = (double *)&CLMicroLocationFingerprintConfiguration::getConfigurationForType(CLMicroLocationProto::DataType)const::sourceDisabledConfiguration;
  }
  *(_DWORD *)uint64_t buf = 6;
  uint64_t v10 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(a4 + 2, (unsigned int *)buf);
  if (v10) {
    int v11 = (double *)(v10 + 3);
  }
  else {
    int v11 = (double *)&CLMicroLocationFingerprintConfiguration::getConfigurationForType(CLMicroLocationProto::DataType)const::sourceDisabledConfiguration;
  }
  *(_DWORD *)uint64_t buf = 1;
  int v12 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v73, (unsigned int *)buf);
  if (v12) {
    double v13 = *((double *)v12 + 4) - *((double *)v12 + 3);
  }
  else {
    double v13 = 0.0;
  }
  *(_DWORD *)uint64_t buf = 5;
  int v14 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v73, (unsigned int *)buf);
  if (v14) {
    double v15 = *((double *)v14 + 4) - *((double *)v14 + 3);
  }
  else {
    double v15 = 0.0;
  }
  *(_DWORD *)uint64_t buf = 6;
  uint64_t v16 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v73, (unsigned int *)buf);
  if (v16) {
    double v17 = *((double *)v16 + 4) - *((double *)v16 + 3);
  }
  else {
    double v17 = 0.0;
  }
  if (*(unsigned char *)v7) {
    BOOL v18 = v13 >= v7[1];
  }
  else {
    BOOL v18 = 1;
  }
  if (*(unsigned char *)v9) {
    BOOL v19 = v15 >= v9[1];
  }
  else {
    BOOL v19 = 1;
  }
  if (!*(unsigned char *)v11)
  {
    BOOL v20 = 1;
    if (v18) {
      goto LABEL_28;
    }
LABEL_30:
    int v21 = 0;
    goto LABEL_31;
  }
  BOOL v20 = v17 >= v11[1];
  if (!v18) {
    goto LABEL_30;
  }
LABEL_28:
  int v21 = v19 && v20;
LABEL_31:
  uint64_t v66 = a4 + 2;
  double v22 = v70;
  if (v70)
  {
    unint64_t v23 = 0;
    long long v24 = v70;
    do
    {
      if (*((_DWORD *)v24 + 6) == 1) {
        ++v23;
      }
      long long v24 = (uint64_t *)*v24;
    }
    while (v24);
    unint64_t v25 = 0;
    uint64_t v26 = v70;
    do
    {
      if (*((_DWORD *)v26 + 6) == 5) {
        ++v25;
      }
      uint64_t v26 = (uint64_t *)*v26;
    }
    while (v26);
    uint64_t v27 = 0;
    do
    {
      if (*((_DWORD *)v22 + 6) == 6) {
        uint64_t v27 = (_OWORD *)((char *)v27 + 1);
      }
      double v22 = (uint64_t *)*v22;
    }
    while (v22);
  }
  else
  {
    unint64_t v25 = 0;
    unint64_t v23 = 0;
    uint64_t v27 = 0;
  }
  if (*(unsigned char *)v7) {
    BOOL v28 = v23 >= *((void *)v7 + 2);
  }
  else {
    BOOL v28 = 1;
  }
  int v29 = v28;
  if (v29 == 1)
  {
    if (*(unsigned char *)v9) {
      BOOL v30 = v25 >= *((void *)v9 + 2);
    }
    else {
      BOOL v30 = 1;
    }
    int v31 = v30;
    if (*(unsigned char *)v11) {
      BOOL v32 = (unint64_t)v27 >= *((void *)v11 + 2);
    }
    else {
      BOOL v32 = 1;
    }
    if (!v32) {
      int v31 = 0;
    }
  }
  else
  {
    int v31 = 0;
  }
  unint64_t v33 = v71;
  unint64_t v34 = *a4;
  if (*a4 > v71) {
    int v31 = 0;
  }
  if (v21) {
    int v35 = v31;
  }
  else {
    int v35 = 0;
  }
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_98);
  }
  __int16 v36 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68291842;
    int v78 = 0;
    __int16 v79 = 2082;
    long long v80 = "";
    __int16 v81 = 2050;
    unint64_t v82 = v23;
    __int16 v83 = 2050;
    unint64_t v84 = v25;
    __int16 v85 = 2050;
    long long v86 = v27;
    __int16 v87 = 2050;
    unint64_t v88 = v33;
    __int16 v89 = 2050;
    double v90 = v13;
    __int16 v91 = 1026;
    int v92 = v29;
    __int16 v93 = 1026;
    BOOL v94 = v34 <= v33;
    __int16 v95 = 1026;
    int v96 = v21;
    __int16 v97 = 1026;
    int v98 = v35;
    __int16 v99 = 2050;
    double v100 = v15;
    __int16 v101 = 2050;
    double v102 = v17;
    _os_log_impl(&dword_25631F000, v36, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Fingerprint creation\", \"NumWiFiMeasurements\":%{public}lu, \"NumBLEMeasurements\":%{public}lu, \"NumUWBMeasurements\":%{public}lu, \"number of total measurements\":%{public}lu, \"WiFi RSSI duration_s\":\"%{public}.09f\", \"enough WiFi measurements\":%{public}hhd, \"enough total measurements\":%{public}hhd, \"isDurationValid\":%{public}hhd, \"isFingerprintValid\":%{public}hhd, \"BLE Duration_s\":\"%{public}.09f\", \"UWB Duration_s\":\"%{public}.09f\"}", buf, 0x70u);
  }
  if (v35)
  {
    *(_DWORD *)uint64_t buf = 5;
    uint64_t v37 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v66, (unsigned int *)buf);
    *(_DWORD *)uint64_t buf = 6;
    uint64_t v38 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v66, (unsigned int *)buf);
    unint64_t v39 = 0;
    uint64_t v40 = (unsigned __int8 *)(v37 + 3);
    if (!v37) {
      uint64_t v40 = (unsigned __int8 *)&CLMicroLocationFingerprintConfiguration::getConfigurationForType(CLMicroLocationProto::DataType)const::sourceDisabledConfiguration;
    }
    uint64_t v41 = v38 + 3;
    if (!v38) {
      uint64_t v41 = &CLMicroLocationFingerprintConfiguration::getConfigurationForType(CLMicroLocationProto::DataType)const::sourceDisabledConfiguration;
    }
    int v42 = *v40;
    int v43 = v70;
    if (v42 && v70)
    {
      unint64_t v39 = 0;
      unint64_t v44 = v70;
      do
      {
        if (*((_DWORD *)v44 + 6) == 5) {
          ++v39;
        }
        unint64_t v44 = (uint64_t *)*v44;
      }
      while (v44);
    }
    unint64_t v45 = 0;
    if (*v41) {
      BOOL v46 = v70 == 0;
    }
    else {
      BOOL v46 = 1;
    }
    if (!v46)
    {
      do
      {
        if (*((_DWORD *)v43 + 6) == 6) {
          ++v45;
        }
        int v43 = (uint64_t *)*v43;
      }
      while (v43);
    }
    uint64_t v47 = +[ULDefaultsSingleton shared];
    uint64_t v48 = [v47 defaultsDictionary];

    unint64_t v49 = [NSString stringWithUTF8String:"ULHighConfidenceBleSourceNumThreshold"];
    uint64_t v50 = [v48 objectForKey:v49];
    if (v50 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
      uint64_t v51 = [v50 unsignedLongValue];
    }
    else {
      uint64_t v51 = [&unk_2704F1F98 unsignedLongValue];
    }
    unint64_t v52 = v51;

    if (v39 < v52)
    {
      uint64_t v53 = +[ULDefaultsSingleton shared];
      int v54 = [v53 defaultsDictionary];

      unint64_t v55 = [NSString stringWithUTF8String:"ULHighConfidenceUwbSourceNumThreshold"];
      long long v56 = [v54 objectForKey:v55];
      if (!v56) {
        goto LABEL_101;
      }
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        uint64_t v57 = [v56 unsignedLongValue];
      }
      else {
LABEL_101:
      }
        uint64_t v57 = [&unk_2704F1F98 unsignedLongValue];
      unint64_t v58 = v57;

      if (v45 < v58)
      {
        if (v74 >= 2) {
          int v59 = 2;
        }
        else {
          int v59 = v74;
        }
        int v74 = v59;
        long long v60 = (char *)operator new(4uLL);
        *(_DWORD *)long long v60 = 2;
        std::vector<CLMicroLocationProto::ConfidenceReason>::__insert_with_size[abi:ne180100]<std::__wrap_iter<CLMicroLocationProto::ConfidenceReason const*>,std::__wrap_iter<CLMicroLocationProto::ConfidenceReason const*>>((uint64_t)&v75, (uint64_t)__dst, v60, v60 + 4, 1);
        operator delete(v60);
        if (*(unsigned char *)(a3 + 16))
        {
          p_p = operator new(0x28uLL);
          std::string __p = p_p;
          long long v68 = xmmword_256514540;
          _OWORD *p_p = 0u;
          p_p[1] = 0u;
          *(void *)((char *)p_p + 29) = 0;
          boost::uuids::to_chars<char *>(a3, p_p);
          char v62 = 0x80;
        }
        else
        {
          char v62 = 0;
          std::string __p = 0;
          long long v68 = 0uLL;
          p_p = &__p;
        }
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_98);
        }
        CLMacAddress v63 = logObject_MicroLocation_Default;
        if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t buf = 68290050;
          int v78 = 0;
          __int16 v79 = 2082;
          long long v80 = "";
          __int16 v81 = 2050;
          unint64_t v82 = v39;
          __int16 v83 = 2050;
          unint64_t v84 = v45;
          __int16 v85 = 2082;
          long long v86 = p_p;
          __int16 v87 = 1026;
          LODWORD(v88) = v59;
          _os_log_impl(&dword_25631F000, v63, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"setting fingerprint confidence due to number of RF sources\", \"number of Ble measurements\":%{public}lu, \"number of Uwb measurements\":%{public}lu, \"Recording UUID\":%{public, location:escape_only}s, \"confidence level\":%{public}d}", buf, 0x36u);
          char v62 = HIBYTE(v68);
        }
        if (v62 < 0) {
          operator delete(__p);
        }
      }
    }
    std::optional<CLMicroLocationFingerprint>::operator=[abi:ne180100]<CLMicroLocationFingerprint&,void>((uint64_t)a5, (uint64_t)v69);
  }
  if (v75)
  {
    __dst = v75;
    operator delete(v75);
  }
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v73);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&v72);
  return std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table((uint64_t)v69);
}

void sub_25648B480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  operator delete(v17);
  CLMicroLocationFingerprint::~CLMicroLocationFingerprint((CLMicroLocationFingerprint *)&a17);
  std::__optional_destruct_base<CLMicroLocationFingerprint,false>::~__optional_destruct_base[abi:ne180100](a11);
  _Unwind_Resume(a1);
}

uint64_t std::optional<CLMicroLocationFingerprint>::operator=[abi:ne180100]<CLMicroLocationFingerprint&,void>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 192))
  {
    if (a1 != a2)
    {
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
      std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *> *>>((void *)a1, *(uint64_t **)(a2 + 16), 0);
      long long v4 = *(_OWORD *)(a2 + 40);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(_OWORD *)(a1 + 40) = v4;
      *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
      std::__hash_table<CLMicroLocationProto::DataType,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,std::allocator<CLMicroLocationProto::DataType>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<CLMicroLocationProto::DataType,void *> *>>((void *)(a1 + 64), *(unsigned int **)(a2 + 80), 0);
      *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
      std::__hash_table<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,std::__unordered_map_hasher<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,true>,std::__unordered_map_equal<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,std::equal_to<CLMicroLocationProto::DataType>,std::hash<CLMicroLocationProto::DataType>,true>,std::allocator<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,void *> *>>((void *)(a1 + 104), *(uint64_t **)(a2 + 120), 0);
      long long v5 = *(_OWORD *)(a2 + 144);
      *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 144) = v5;
      std::vector<CLMicroLocationProto::ConfidenceLevel>::__assign_with_size[abi:ne180100]<CLMicroLocationProto::ConfidenceLevel*,CLMicroLocationProto::ConfidenceLevel*>((char *)(a1 + 168), *(char **)(a2 + 168), *(void *)(a2 + 176), (uint64_t)(*(void *)(a2 + 176) - *(void *)(a2 + 168)) >> 2);
    }
  }
  else
  {
    std::__construct_at[abi:ne180100]<CLMicroLocationFingerprint,CLMicroLocationFingerprint&,CLMicroLocationFingerprint*>(a1, a2);
    *(unsigned char *)(a1 + 192) = 1;
  }
  return a1;
}

void CLMicroLocationFingerprint::toProtobuf(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  CLMicroLocationProto::Fingerprint::Fingerprint(a3);
  for (uint64_t i = *(void **)(a1 + 16); i; uint64_t i = (void *)*i)
  {
    CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement((CLMicroLocationFingerprint::Measurement *)(i + 2), (uint64_t)__p);
    int v7 = *(_DWORD *)(a3 + 84);
    uint64_t v8 = *(int *)(a3 + 80);
    if ((int)v8 >= v7)
    {
      if (v7 == *(_DWORD *)(a3 + 88))
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a3 + 72));
        int v7 = *(_DWORD *)(a3 + 84);
      }
      *(_DWORD *)(a3 + 84) = v7 + 1;
      wireless_diagnostics::google::protobuf::internal::GenericTypeHandler<CLMicroLocationProto::FingerprintMeasurement>::New();
    }
    uint64_t v9 = *(void *)(a3 + 72);
    *(_DWORD *)(a3 + 80) = v8 + 1;
    CLMicroLocationProto::FingerprintMeasurement::CopyFrom(*(CLMicroLocationProto::FingerprintMeasurement **)(v9 + 8 * v8), (const CLMicroLocationProto::FingerprintMeasurement *)__p);
    CLMicroLocationProto::FingerprintMeasurement::~FingerprintMeasurement((CLMicroLocationProto::FingerprintMeasurement *)__p);
  }
  uint64_t v10 = (std::string *)MEMORY[0x263F8C740];
  if (*(unsigned char *)(a2 + 16))
  {
    *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 16;
    *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    __p[0].__r_.__value_.__s.__data_[16] = 0;
    *(_DWORD *)(a3 + 104) |= 0x20u;
    int v11 = *(std::string **)(a3 + 64);
    if (v11 == v10) {
      operator new();
    }
    std::string::operator=(v11, __p);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
  }
  int v12 = *(_DWORD *)(a3 + 104);
  *(_OWORD *)(a3 + 40) = *(_OWORD *)(a1 + 144);
  *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 16;
  *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 40);
  __p[0].__r_.__value_.__s.__data_[16] = 0;
  *(_DWORD *)(a3 + 104) = v12 | 0x1C;
  double v13 = *(std::string **)(a3 + 56);
  if (v13 == v10) {
    operator new();
  }
  std::string::operator=(v13, __p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  char v14 = *(unsigned char *)(a1 + 56);
  int v15 = *(_DWORD *)(a3 + 104);
  *(unsigned char *)(a3 + 96) = (v14 & 0x20) != 0;
  *(_DWORD *)(a3 + 104) = v15 | 0x180;
  *(unsigned char *)(a3 + 97) = (v14 & 0x40) != 0;
}

void sub_25648B7DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  CLMicroLocationProto::Fingerprint::~Fingerprint(v14);
  _Unwind_Resume(a1);
}

void CLMicroLocationFingerprint::removeMeasurementsFromSourcesOtherThan(void *a1, int a2, uint64_t *a3)
{
  uint64_t v3 = (uint64_t *)a1[2];
  if (v3)
  {
    do
    {
      while (1)
      {
        if (*((_DWORD *)v3 + 6) == a2)
        {
          uint64_t v7 = *a3;
          uint64_t v8 = a3[1];
          if (*a3 == v8)
          {
            uint64_t v9 = *a3;
          }
          else
          {
            while ((std::operator==[abi:ne180100]<unsigned long long,boost::uuids::uuid,std::string>(v7, (uint64_t)(v3 + 4)) & 1) == 0)
            {
              v7 += 32;
              if (v7 == v8)
              {
                uint64_t v7 = v8;
                break;
              }
            }
            uint64_t v9 = v7;
            uint64_t v7 = a3[1];
          }
          if (v9 == v7) {
            break;
          }
        }
        uint64_t v3 = (uint64_t *)*v3;
        if (!v3) {
          return;
        }
      }
      uint64_t v10 = (uint64_t *)*v3;
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::remove(a1, v3, (uint64_t)v11);
      std::unique_ptr<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
      uint64_t v3 = v10;
    }
    while (v10);
  }
}

void ***std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<CLMicroLocationFingerprint::Measurement::HashMeasurement::operator()(CLMicroLocationFingerprint::Measurement const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long long,boost::uuids::uuid,std::string> const&>(void ***result, void *a2)
{
  ***uint64_t result = 0xC6A4A7935BD1E995
            * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * *a2) ^ ((0xC6A4A7935BD1E995 * *a2) >> 47))) ^ ***result)
            + 3864292196u;
  return result;
}

void ***std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<CLMicroLocationFingerprint::Measurement::HashMeasurement::operator()(CLMicroLocationFingerprint::Measurement const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long long,boost::uuids::uuid,std::string> const&>(void ***result, uint64_t a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = 0;
  do
    v3 ^= (v3 << 6) + (v3 >> 2) + 2654435769u + *(unsigned __int8 *)(a2 + v2++);
  while (v2 != 16);
  ***uint64_t result = 0xC6A4A7935BD1E995
            * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v3) ^ ((0xC6A4A7935BD1E995 * v3) >> 47))) ^ ***result)
            + 3864292196u;
  return result;
}

unint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<CLMicroLocationFingerprint::Measurement::HashMeasurement::operator()(CLMicroLocationFingerprint::Measurement const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long long,boost::uuids::uuid,std::string> const&>(uint64_t ***a1, char *a2)
{
  uint64_t v2 = **a1;
  uint64_t v3 = *v2;
  unint64_t result = boost::hash<std::string>::operator()((uint64_t)&v5, a2);
  uint64_t *v2 = 0xC6A4A7935BD1E995
      * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * result) ^ ((0xC6A4A7935BD1E995 * result) >> 47))) ^ v3)
      + 3864292196u;
  return result;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long long,boost::uuids::uuid,std::string> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long long,boost::uuids::uuid,std::string> const>(uint64_t a1, void *a2, void *a3)
{
  return *a2 == *a3;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long long,boost::uuids::uuid,std::string> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long long,boost::uuids::uuid,std::string> const>(uint64_t a1, void *a2, void *a3)
{
  return *a2 == *a3 && a2[1] == a3[1];
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul,2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long long,boost::uuids::uuid,std::string> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long long,boost::uuids::uuid,std::string> const>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  return std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v4, a2, a3);
}

uint64_t std::__variant_detail::__visitation::__variant::__value_visitor<CLMicroLocationUtils::DeviceIdVisitor<std::string> &>::operator()[abi:ne180100]<std::__variant_detail::__alt<0ul,unsigned long long> const&>(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)a1 + 24);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);
  return v2();
}

uint64_t std::__variant_detail::__visitation::__variant::__value_visitor<CLMicroLocationUtils::DeviceIdVisitor<std::string> &>::operator()[abi:ne180100]<std::__variant_detail::__alt<1ul,boost::uuids::uuid> const&>(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)a1 + 56);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);
  return v2();
}

uint64_t std::__variant_detail::__visitation::__variant::__value_visitor<CLMicroLocationUtils::DeviceIdVisitor<std::string> &>::operator()[abi:ne180100]<std::__variant_detail::__alt<2ul,std::string> const&>(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)a1 + 88);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);
  return v2();
}

uint64_t std::__variant_detail::__visitation::__variant::__value_visitor<CLMicroLocationUtils::DeviceIdVisitor<void> &>::operator()[abi:ne180100]<std::__variant_detail::__alt<0ul,unsigned long long> const&>(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)a1 + 24);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);
  return v2();
}

uint64_t std::__variant_detail::__visitation::__variant::__value_visitor<CLMicroLocationUtils::DeviceIdVisitor<void> &>::operator()[abi:ne180100]<std::__variant_detail::__alt<1ul,boost::uuids::uuid> const&>(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)a1 + 56);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);
  return v2();
}

uint64_t std::__variant_detail::__visitation::__variant::__value_visitor<CLMicroLocationUtils::DeviceIdVisitor<void> &>::operator()[abi:ne180100]<std::__variant_detail::__alt<2ul,std::string> const&>(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)a1 + 88);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);
  return v2();
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_76()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

void wireless_diagnostics::google::protobuf::internal::GenericTypeHandler<CLMicroLocationProto::FingerprintMeasurement>::New()
{
}

void sub_25648BCF8(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x10A1C40E1D8D1C5);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>,std::__unordered_map_hasher<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,true>,std::__unordered_map_equal<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>,std::equal_to<CLMicroLocationProto::DataType>,std::hash<CLMicroLocationProto::DataType>,true>,std::allocator<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>>>::__emplace_unique_key_args<CLMicroLocationProto::DataType,std::piecewise_construct_t const&,std::tuple<CLMicroLocationProto::DataType&&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      int v11 = (char *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = *((void *)v11 + 1);
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          int v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
  int v11 = (char *)operator new(0x38uLL);
  *(void *)int v11 = 0;
  *((void *)v11 + 1) = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  BOOL v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *(void *)int v11 = *v20;
LABEL_38:
    void *v20 = v11;
    goto LABEL_39;
  }
  *(void *)int v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*(void *)v11)
  {
    unint64_t v21 = *(void *)(*(void *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    BOOL v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_25648BF38(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_0,std::allocator<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_0>,std::string ()(unsigned long long const&)>::~__func()
{
}

void *std::__function::__func<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_0,std::allocator<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_0>,std::string ()(unsigned long long const&)>::__clone()
{
  unint64_t result = operator new(0x10uLL);
  *unint64_t result = &unk_2704E1030;
  return result;
}

void std::__function::__func<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_0,std::allocator<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_0>,std::string ()(unsigned long long const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_2704E1030;
}

uint64_t *std::__function::__func<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_0,std::allocator<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_0>,std::string ()(unsigned long long const&)>::operator()@<X0>(CLMacAddress **a1@<X1>, uint64_t *a2@<X8>)
{
  return CLMicroLocationProtobufHelper::convertToHumanReadableString(*a1, (unint64_t)a1, a2);
}

uint64_t std::__function::__func<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_0,std::allocator<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_0>,std::string ()(unsigned long long const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_0,std::allocator<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_0>,std::string ()(unsigned long long const&)>::target_type()
{
}

void *std::__function::__value_func<std::string ()(unsigned long long const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_1,std::allocator<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_1>,std::string ()(boost::uuids::uuid const&)>::~__func()
{
}

void *std::__function::__func<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_1,std::allocator<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_1>,std::string ()(boost::uuids::uuid const&)>::__clone()
{
  unint64_t result = operator new(0x10uLL);
  *unint64_t result = &unk_2704E10C0;
  return result;
}

void std::__function::__func<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_1,std::allocator<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_1>,std::string ()(boost::uuids::uuid const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_2704E10C0;
}

unsigned char *std::__function::__func<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_1,std::allocator<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_1>,std::string ()(boost::uuids::uuid const&)>::operator()@<X0>(CLMicroLocationProtobufHelper *this@<X1>, uint64_t a2@<X8>)
{
  return CLMicroLocationProtobufHelper::convertToHumanReadableString(this, a2);
}

uint64_t std::__function::__func<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_1,std::allocator<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_1>,std::string ()(boost::uuids::uuid const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_1,std::allocator<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_1>,std::string ()(boost::uuids::uuid const&)>::target_type()
{
}

void *std::__function::__value_func<std::string ()(boost::uuids::uuid const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_2,std::allocator<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_2>,std::string ()(std::string const&)>::~__func()
{
}

void *std::__function::__func<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_2,std::allocator<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_2>,std::string ()(std::string const&)>::__clone()
{
  unint64_t result = operator new(0x10uLL);
  *unint64_t result = &unk_2704E1150;
  return result;
}

void std::__function::__func<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_2,std::allocator<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_2>,std::string ()(std::string const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_2704E1150;
}

void std::__function::__func<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_2,std::allocator<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_2>,std::string ()(std::string const&)>::operator()(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
}

uint64_t std::__function::__func<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_2,std::allocator<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_2>,std::string ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_2,std::allocator<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_2>,std::string ()(std::string const&)>::target_type()
{
}

void *std::__function::__value_func<std::string ()(std::string const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t CLMicroLocationUtils::DeviceIdVisitor<std::string>::DeviceIdVisitor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = std::__function::__value_func<std::string ()(unsigned long long const&)>::__value_func[abi:ne180100](a1, a2);
  std::__function::__value_func<std::string ()(boost::uuids::uuid const&)>::__value_func[abi:ne180100](v7 + 32, a3);
  std::__function::__value_func<std::string ()(std::string const&)>::__value_func[abi:ne180100](a1 + 64, a4);
  return a1;
}

void sub_25648C3B4(_Unwind_Exception *a1)
{
  std::__function::__value_func<std::string ()(boost::uuids::uuid const&)>::~__value_func[abi:ne180100](v2);
  std::__function::__value_func<std::string ()(unsigned long long const&)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<std::string ()(unsigned long long const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<std::string ()(boost::uuids::uuid const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<std::string ()(std::string const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void std::__function::__func<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_0,std::allocator<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_0>,void ()(unsigned long long const&)>::~__func()
{
}

void *std::__function::__func<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_0,std::allocator<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_0>,void ()(unsigned long long const&)>::__clone(uint64_t a1)
{
  unint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *unint64_t result = &unk_2704E11E0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_0,std::allocator<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_0>,void ()(unsigned long long const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_2704E11E0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_0,std::allocator<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_0>,void ()(unsigned long long const&)>::operator()(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v2 + 28) |= 1u;
  *(void *)(v2 + 8) = v3;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_0,std::allocator<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_0>,void ()(unsigned long long const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_0,std::allocator<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_0>,void ()(unsigned long long const&)>::target_type()
{
}

void *std::__function::__value_func<void ()(unsigned long long const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_1,std::allocator<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_1>,void ()(boost::uuids::uuid const&)>::~__func()
{
}

void *std::__function::__func<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_1,std::allocator<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_1>,void ()(boost::uuids::uuid const&)>::__clone(uint64_t a1)
{
  unint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *unint64_t result = &unk_2704E1270;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_1,std::allocator<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_1>,void ()(boost::uuids::uuid const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_2704E1270;
  a2[1] = v2;
  return result;
}

void std::__function::__func<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_1,std::allocator<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_1>,void ()(boost::uuids::uuid const&)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(_DWORD *)(v1 + 28) |= 2u;
  if (*(void *)(v1 + 16) == MEMORY[0x263F8C740]) {
    operator new();
  }
  JUMPOUT(0x25A2A6090);
}

uint64_t std::__function::__func<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_1,std::allocator<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_1>,void ()(boost::uuids::uuid const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_1,std::allocator<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_1>,void ()(boost::uuids::uuid const&)>::target_type()
{
}

void *std::__function::__value_func<void ()(boost::uuids::uuid const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_2,std::allocator<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_2>,void ()(std::string const&)>::~__func()
{
}

void *std::__function::__func<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_2,std::allocator<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_2>,void ()(std::string const&)>::__clone(uint64_t a1)
{
  unint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *unint64_t result = &unk_2704E1300;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_2,std::allocator<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_2>,void ()(std::string const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_2704E1300;
  a2[1] = v2;
  return result;
}

std::string *std::__function::__func<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_2,std::allocator<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_2>,void ()(std::string const&)>::operator()(uint64_t a1, std::string *__str)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(_DWORD *)(v2 + 28) |= 2u;
  uint64_t v3 = *(std::string **)(v2 + 16);
  if (v3 == (std::string *)MEMORY[0x263F8C740]) {
    operator new();
  }
  return std::string::operator=(v3, __str);
}

uint64_t std::__function::__func<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_2,std::allocator<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_2>,void ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_2,std::allocator<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_2>,void ()(std::string const&)>::target_type()
{
}

void *std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t CLMicroLocationUtils::DeviceIdVisitor<void>::DeviceIdVisitor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = std::__function::__value_func<void ()(unsigned long long const&)>::__value_func[abi:ne180100](a1, a2);
  std::__function::__value_func<void ()(boost::uuids::uuid const&)>::__value_func[abi:ne180100](v7 + 32, a3);
  std::__function::__value_func<void ()(std::string const&)>::__value_func[abi:ne180100](a1 + 64, a4);
  return a1;
}

void sub_25648CB20(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(boost::uuids::uuid const&)>::~__value_func[abi:ne180100](v2);
  std::__function::__value_func<void ()(unsigned long long const&)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(unsigned long long const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(boost::uuids::uuid const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(std::string const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__assign_alt[abi:ne180100]<2ul,std::string,std::string const&>(uint64_t a1, std::string *this, std::string *__str)
{
  if (*(_DWORD *)(a1 + 24) == 2)
  {
    std::string::operator=(this, __str);
  }
  else
  {
    v3[0] = a1;
    v3[1] = (uint64_t)__str;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__assign_alt[abi:ne180100]<2ul,std::string,std::string const&>(std::__variant_detail::__alt<2ul,std::string> &,std::string const&)::{unnamed type#1}::operator()[abi:ne180100](v3);
  }
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__assign_alt[abi:ne180100]<2ul,std::string,std::string const&>(std::__variant_detail::__alt<2ul,std::string> &,std::string const&)::{unnamed type#1}::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  if (*(char *)(v1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v1, *(void *)(v1 + 8));
  }
  else
  {
    long long v3 = *(_OWORD *)v1;
    __p.__r_.__value_.__r.__words[2] = *(void *)(v1 + 16);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v3;
  }
  std::__variant_detail::__assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__emplace[abi:ne180100]<2ul,std::string>(v2, (long long *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_25648CDD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__emplace[abi:ne180100]<2ul,std::string>(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_2704E0FE8[v4])(&v7, a1);
  }
  *(_DWORD *)(a1 + 24) = -1;
  long long v5 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a1 + 24) = 2;
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__emplace[abi:ne180100]<0ul,unsigned long long>(uint64_t a1, void *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_2704E0FE8[v4])(&v6, a1);
  }
  *(void *)a1 = *a2;
  *(_DWORD *)(a1 + 24) = 0;
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__emplace[abi:ne180100]<1ul,boost::uuids::uuid&>(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_2704E0FE8[v4])(&v6, a1);
  }
  *(_DWORD *)(a1 + 24) = -1;
  *(_OWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 24) = 1;
  return a1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__assign_alt[abi:ne180100]<2ul,std::string,char const(&)[8]>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 24) == 2)
  {
    JUMPOUT(0x25A2A6080);
  }
  v3[0] = a1;
  v3[1] = a3;
  std::__variant_detail::__assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__assign_alt[abi:ne180100]<2ul,std::string,char const(&)[8]>(std::__variant_detail::__alt<2ul,std::string> &,char const(&)[8] &&)::{unnamed type#1}::operator()[abi:ne180100]((uint64_t)v3);
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__assign_alt[abi:ne180100]<2ul,std::string,char const(&)[8]>(std::__variant_detail::__alt<2ul,std::string> &,char const(&)[8] &&)::{unnamed type#1}::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  std::string::basic_string[abi:ne180100]<0>(__p, *(char **)(a1 + 8));
  std::__variant_detail::__assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__emplace[abi:ne180100]<2ul,std::string>(v1, (long long *)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_25648CFE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__emplace_unique_key_args<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  unint64_t v7 = CLMicroLocationFingerprint::Measurement::HashMeasurement::operator()(a1, a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    unint64_t v12 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == v8)
        {
          if (*((_DWORD *)i + 6) == *(_DWORD *)(a2 + 8)
            && (std::operator==[abi:ne180100]<unsigned long long,boost::uuids::uuid,std::string>((uint64_t)(i + 4), a2 + 16) & 1) != 0)
          {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  BOOL v15 = operator new(0x40uLL);
  v25[0] = v15;
  v25[1] = a1 + 16;
  void *v15 = 0;
  v15[1] = v8;
  *((_OWORD *)v15 + 1) = *a3;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v15 + 4), (uint64_t)(a3 + 1));
  char v26 = 1;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  double v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v23 >= v9) {
          v23 %= v9;
        }
      }
      else
      {
        v23 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (uint64_t *)v25[0];
  v25[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_25648D27C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

float *std::__introsort<std::_ClassicAlgPolicy,std::greater<float> &,float *,false>(float *result, float *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint8x8_t v10 = result;
LABEL_2:
  unint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint8x8_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = a2 - v11;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          float v22 = *(a2 - 1);
          float v23 = *v11;
          if (v22 > *v11)
          {
            *unint64_t v11 = v22;
            *(a2 - 1) = v23;
          }
          break;
        case 3uLL:
          float v24 = v11[1];
          float v25 = *(a2 - 1);
          if (v24 <= v25) {
            int v26 = *((_DWORD *)a2 - 1);
          }
          else {
            int v26 = *((_DWORD *)v11 + 1);
          }
          if (v24 > v25) {
            float v24 = *(a2 - 1);
          }
          *(a2 - 1) = v24;
          *((_DWORD *)v11 + 1) = v26;
          float v27 = *(a2 - 1);
          if (v27 <= *v11) {
            float v28 = *v11;
          }
          else {
            float v28 = *(a2 - 1);
          }
          if (v27 > *v11) {
            float v27 = *v11;
          }
          *(a2 - 1) = v27;
          int v30 = *(_DWORD *)v11;
          float v29 = v11[1];
          if (v28 <= v29)
          {
            int v30 = *((_DWORD *)v11 + 1);
            float v29 = v28;
          }
          *(_DWORD *)unint64_t v11 = v30;
          v11[1] = v29;
          break;
        case 4uLL:
          float v32 = v11[1];
          float v31 = v11[2];
          if (*v11 <= v31) {
            int v33 = *((_DWORD *)v11 + 2);
          }
          else {
            int v33 = *(_DWORD *)v11;
          }
          if (*v11 <= v31) {
            float v31 = *v11;
          }
          _DWORD v11[2] = v31;
          *(_DWORD *)unint64_t v11 = v33;
          float v34 = *(a2 - 1);
          if (v32 <= v34) {
            float v35 = *(a2 - 1);
          }
          else {
            float v35 = v32;
          }
          if (v32 <= v34) {
            float v34 = v32;
          }
          *(a2 - 1) = v34;
          float v36 = *v11;
          if (*v11 <= v35) {
            float v37 = v35;
          }
          else {
            float v37 = *v11;
          }
          if (*v11 > v35) {
            float v36 = v35;
          }
          *unint64_t v11 = v37;
          v11[1] = v36;
          float v38 = v11[2];
          float v39 = *(a2 - 1);
          if (v38 <= v39) {
            float v40 = *(a2 - 1);
          }
          else {
            float v40 = v11[2];
          }
          if (v38 > v39) {
            float v38 = *(a2 - 1);
          }
          *(a2 - 1) = v38;
          float v41 = v11[1];
          if (v41 <= v40) {
            float v42 = v40;
          }
          else {
            float v42 = v11[1];
          }
          if (v41 > v40) {
            float v41 = v40;
          }
          v11[1] = v42;
          _DWORD v11[2] = v41;
          break;
        case 5uLL:
          int v43 = *(_DWORD *)v11;
          float v44 = v11[1];
          if (*v11 <= v44) {
            int v45 = *((_DWORD *)v11 + 1);
          }
          else {
            int v45 = *(_DWORD *)v11;
          }
          if (*v11 > v44) {
            int v43 = *((_DWORD *)v11 + 1);
          }
          *(_DWORD *)unint64_t v11 = v45;
          *((_DWORD *)v11 + 1) = v43;
          float v46 = v11[3];
          float v47 = *(a2 - 1);
          if (v46 <= v47) {
            int v48 = *((_DWORD *)a2 - 1);
          }
          else {
            int v48 = *((_DWORD *)v11 + 3);
          }
          if (v46 > v47) {
            float v46 = *(a2 - 1);
          }
          *(a2 - 1) = v46;
          *((_DWORD *)v11 + 3) = v48;
          float v49 = *(a2 - 1);
          float v50 = v11[2];
          if (v49 <= v50) {
            float v51 = v11[2];
          }
          else {
            float v51 = *(a2 - 1);
          }
          if (v49 > v50) {
            float v49 = v11[2];
          }
          *(a2 - 1) = v49;
          int v53 = *((_DWORD *)v11 + 2);
          float v52 = v11[3];
          float v54 = v11[1];
          if (v51 <= v52)
          {
            int v53 = *((_DWORD *)v11 + 3);
            float v52 = v51;
          }
          *((_DWORD *)v11 + 2) = v53;
          v11[3] = v52;
          float v55 = *(a2 - 1);
          if (v54 <= v55) {
            float v56 = *(a2 - 1);
          }
          else {
            float v56 = v54;
          }
          if (v54 <= v55) {
            float v55 = v54;
          }
          *(a2 - 1) = v55;
          int v57 = *(_DWORD *)v11;
          float v59 = v11[2];
          float v58 = v11[3];
          if (v58 <= *v11) {
            float v60 = *v11;
          }
          else {
            float v60 = v11[3];
          }
          if (v58 > *v11) {
            float v58 = *v11;
          }
          if (v60 <= v59)
          {
            int v57 = *((_DWORD *)v11 + 2);
            float v59 = v60;
          }
          if (v58 <= v56) {
            float v61 = v56;
          }
          else {
            float v61 = v58;
          }
          if (v58 > v56) {
            float v58 = v56;
          }
          if (v61 <= v59) {
            float v56 = v59;
          }
          *(_DWORD *)unint64_t v11 = v57;
          v11[1] = v56;
          if (v61 <= v59) {
            float v62 = v61;
          }
          else {
            float v62 = v59;
          }
          _DWORD v11[2] = v62;
          v11[3] = v58;
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 95) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *,float *>(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    float v17 = &v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x201)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(v11, &v11[v15 >> 1], a2 - 1);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(v11 + 1, v17 - 1, a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(v11 + 2, &v11[v16 + 1], a2 - 3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(v17 - 1, v17, &v11[v16 + 1]);
      float v18 = *v11;
      *unint64_t v11 = *v17;
      *float v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(&v11[v15 >> 1], v11, a2 - 1);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (*(v11 - 1) <= *v11)
    {
      unint64_t result = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,float *,std::greater<float> &>(v11, a2);
      unint64_t v11 = result;
      goto LABEL_19;
    }
LABEL_14:
    unint64_t v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,float *,std::greater<float> &>(v11, a2);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(v11, v19);
    unint64_t v11 = v19 + 1;
    unint64_t result = (float *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(v19 + 1, a2);
    if (result)
    {
      a4 = -v13;
      a2 = v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      unint64_t result = (float *)std::__introsort<std::_ClassicAlgPolicy,std::greater<float> &,float *,false>(v10, v19, a3, -v13, a5 & 1);
      unint64_t v11 = v19 + 1;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  CLMacAddress v63 = v11 + 1;
  BOOL v65 = v11 == a2 || v63 == a2;
  if (a5)
  {
    if (!v65)
    {
      uint64_t v66 = 0;
      __int16 v67 = v11;
      do
      {
        float v69 = *v67;
        float v68 = v67[1];
        __int16 v67 = v63;
        if (v68 > v69)
        {
          uint64_t v70 = v66;
          while (1)
          {
            *(float *)((char *)v11 + v70 + 4) = v69;
            if (!v70) {
              break;
            }
            float v69 = *(float *)((char *)v11 + v70 - 4);
            v70 -= 4;
            if (v68 <= v69)
            {
              unint64_t v71 = (float *)((char *)v11 + v70 + 4);
              goto LABEL_119;
            }
          }
          unint64_t v71 = v11;
LABEL_119:
          *unint64_t v71 = v68;
        }
        CLMacAddress v63 = v67 + 1;
        v66 += 4;
      }
      while (v67 + 1 != a2);
    }
  }
  else if (!v65)
  {
    do
    {
      float v73 = *v10;
      float v72 = v10[1];
      uint8x8_t v10 = v63;
      if (v72 > v73)
      {
        int v74 = v63;
        do
        {
          *int v74 = v73;
          float v73 = *(v74 - 2);
          --v74;
        }
        while (v72 > v73);
        *int v74 = v72;
      }
      ++v63;
    }
    while (v10 + 1 != a2);
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(float *a1, float *a2, float *a3)
{
  float v3 = *a2;
  float v4 = *a1;
  float v5 = *a3;
  if (*a2 > *a1)
  {
    if (v5 > v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 <= v4) {
      return 1;
    }
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 > v3)
  {
    *a2 = v5;
    *a3 = v3;
    float v6 = *a1;
    if (*a2 <= *a1) {
      return 1;
    }
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

float *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,float *,std::greater<float> &>(float *a1, float *a2)
{
  float v2 = *a1;
  if (*a1 <= *(a2 - 1))
  {
    float v5 = a1 + 1;
    do
    {
      float v3 = v5;
      if (v5 >= a2) {
        break;
      }
      ++v5;
    }
    while (v2 <= *v3);
  }
  else
  {
    float v3 = a1;
    do
    {
      float v4 = v3[1];
      ++v3;
    }
    while (v2 <= v4);
  }
  if (v3 < a2)
  {
    do
      float v6 = *--a2;
    while (v2 > v6);
  }
  if (v3 < a2)
  {
    float v7 = *v3;
    float v8 = *a2;
    do
    {
      float *v3 = v8;
      *a2 = v7;
      do
      {
        float v9 = v3[1];
        ++v3;
        float v7 = v9;
      }
      while (v2 <= v9);
      do
      {
        float v10 = *--a2;
        float v8 = v10;
      }
      while (v2 > v10);
    }
    while (v3 < a2);
  }
  if (v3 - 1 != a1) {
    *a1 = *(v3 - 1);
  }
  *(v3 - 1) = v2;
  return v3;
}

float *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,float *,std::greater<float> &>(float *a1, float *a2)
{
  uint64_t v2 = 0;
  float v3 = *a1;
  do
    float v4 = a1[++v2];
  while (v4 > v3);
  float v5 = &a1[v2];
  float v6 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v5 >= a2) {
        break;
      }
      float v8 = *--a2;
    }
    while (v8 <= v3);
  }
  else
  {
    do
      float v7 = *--a2;
    while (v7 <= v3);
  }
  if (v5 < a2)
  {
    float v9 = *a2;
    float v10 = &a1[v2];
    unint64_t v11 = a2;
    do
    {
      float *v10 = v9;
      *unint64_t v11 = v4;
      do
      {
        float v12 = v10[1];
        ++v10;
        float v4 = v12;
      }
      while (v12 > v3);
      do
      {
        float v13 = *--v11;
        float v9 = v13;
      }
      while (v13 <= v3);
    }
    while (v10 < v11);
    float v6 = v10 - 1;
  }
  if (v6 != a1) {
    *a1 = *v6;
  }
  *float v6 = v3;
  return v6;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(float *a1, float *a2)
{
  BOOL v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      float v3 = *(a2 - 1);
      float v4 = *a1;
      if (v3 > *a1)
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }
      break;
    case 3:
      float v20 = a1[1];
      float v21 = *(a2 - 1);
      if (v20 <= v21) {
        int v22 = *((_DWORD *)a2 - 1);
      }
      else {
        int v22 = *((_DWORD *)a1 + 1);
      }
      if (v20 > v21) {
        float v20 = *(a2 - 1);
      }
      *(a2 - 1) = v20;
      *((_DWORD *)a1 + 1) = v22;
      float v23 = *(a2 - 1);
      if (v23 <= *a1) {
        float v24 = *a1;
      }
      else {
        float v24 = *(a2 - 1);
      }
      if (v23 > *a1) {
        float v23 = *a1;
      }
      *(a2 - 1) = v23;
      float v26 = *a1;
      float v25 = a1[1];
      if (v24 <= v25)
      {
        float v26 = a1[1];
        float v25 = v24;
      }
      *a1 = v26;
      a1[1] = v25;
      break;
    case 4:
      float v48 = a1[1];
      float v47 = a1[2];
      if (*a1 <= v47) {
        float v49 = a1[2];
      }
      else {
        float v49 = *a1;
      }
      if (*a1 <= v47) {
        float v47 = *a1;
      }
      a1[2] = v47;
      *a1 = v49;
      float v50 = *(a2 - 1);
      if (v48 <= v50) {
        float v51 = *(a2 - 1);
      }
      else {
        float v51 = v48;
      }
      if (v48 <= v50) {
        float v50 = v48;
      }
      *(a2 - 1) = v50;
      float v52 = *a1;
      if (*a1 <= v51) {
        float v53 = v51;
      }
      else {
        float v53 = *a1;
      }
      if (*a1 > v51) {
        float v52 = v51;
      }
      *a1 = v53;
      a1[1] = v52;
      float v54 = a1[2];
      float v55 = *(a2 - 1);
      if (v54 <= v55) {
        float v56 = *(a2 - 1);
      }
      else {
        float v56 = a1[2];
      }
      if (v54 > v55) {
        float v54 = *(a2 - 1);
      }
      *(a2 - 1) = v54;
      float v57 = a1[1];
      if (v57 <= v56) {
        float v58 = v56;
      }
      else {
        float v58 = a1[1];
      }
      if (v57 > v56) {
        float v57 = v56;
      }
      a1[1] = v58;
      a1[2] = v57;
      break;
    case 5:
      float v27 = *a1;
      float v28 = a1[1];
      if (*a1 <= v28) {
        float v29 = a1[1];
      }
      else {
        float v29 = *a1;
      }
      if (*a1 > v28) {
        float v27 = a1[1];
      }
      *a1 = v29;
      a1[1] = v27;
      float v30 = a1[3];
      float v31 = *(a2 - 1);
      if (v30 <= v31) {
        int v32 = *((_DWORD *)a2 - 1);
      }
      else {
        int v32 = *((_DWORD *)a1 + 3);
      }
      if (v30 > v31) {
        float v30 = *(a2 - 1);
      }
      *(a2 - 1) = v30;
      *((_DWORD *)a1 + 3) = v32;
      float v33 = *(a2 - 1);
      float v34 = a1[2];
      if (v33 <= v34) {
        float v35 = a1[2];
      }
      else {
        float v35 = *(a2 - 1);
      }
      if (v33 > v34) {
        float v33 = a1[2];
      }
      *(a2 - 1) = v33;
      int v37 = *((_DWORD *)a1 + 2);
      float v36 = a1[3];
      float v38 = a1[1];
      if (v35 <= v36)
      {
        int v37 = *((_DWORD *)a1 + 3);
        float v36 = v35;
      }
      *((_DWORD *)a1 + 2) = v37;
      a1[3] = v36;
      float v39 = *(a2 - 1);
      if (v38 <= v39) {
        float v40 = *(a2 - 1);
      }
      else {
        float v40 = v38;
      }
      if (v38 <= v39) {
        float v39 = v38;
      }
      *(a2 - 1) = v39;
      float v41 = *a1;
      float v43 = a1[2];
      float v42 = a1[3];
      if (v42 <= *a1) {
        float v44 = *a1;
      }
      else {
        float v44 = a1[3];
      }
      if (v42 > *a1) {
        float v42 = *a1;
      }
      if (v44 <= v43)
      {
        float v41 = a1[2];
        float v43 = v44;
      }
      if (v42 <= v40) {
        float v45 = v40;
      }
      else {
        float v45 = v42;
      }
      if (v42 > v40) {
        float v42 = v40;
      }
      if (v45 <= v43) {
        float v40 = v43;
      }
      *a1 = v41;
      a1[1] = v40;
      if (v45 <= v43) {
        float v46 = v45;
      }
      else {
        float v46 = v43;
      }
      a1[2] = v46;
      a1[3] = v42;
      break;
    default:
      float v5 = a1 + 2;
      float v6 = a1[2];
      float v8 = *a1;
      float v7 = a1[1];
      if (v7 <= v6) {
        float v9 = a1[2];
      }
      else {
        float v9 = a1[1];
      }
      if (v7 <= v6) {
        float v6 = a1[1];
      }
      if (v6 <= v8) {
        float v10 = *a1;
      }
      else {
        float v10 = v6;
      }
      if (v6 > v8) {
        float v6 = *a1;
      }
      float *v5 = v6;
      if (v10 <= v9) {
        float v11 = v9;
      }
      else {
        float v11 = v8;
      }
      if (v10 > v9) {
        float v10 = v9;
      }
      *a1 = v11;
      a1[1] = v10;
      float v12 = a1 + 3;
      if (a1 + 3 == a2)
      {
LABEL_29:
        BOOL v2 = 1;
      }
      else
      {
        int v13 = 0;
        uint64_t v14 = 12;
        while (1)
        {
          float v15 = *v12;
          float v16 = *v5;
          if (*v12 > *v5)
          {
            uint64_t v17 = v14;
            while (1)
            {
              *(float *)((char *)a1 + v17) = v16;
              uint64_t v18 = v17 - 4;
              if (v17 == 4) {
                break;
              }
              float v16 = *(float *)((char *)a1 + v17 - 8);
              v17 -= 4;
              if (v15 <= v16)
              {
                unint64_t v19 = (float *)((char *)a1 + v18);
                goto LABEL_27;
              }
            }
            unint64_t v19 = a1;
LABEL_27:
            float *v19 = v15;
            if (++v13 == 8) {
              break;
            }
          }
          float v5 = v12;
          v14 += 4;
          if (++v12 == a2) {
            goto LABEL_29;
          }
        }
        BOOL v2 = v12 + 1 == a2;
      }
      break;
  }
  return v2;
}

float *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *,float *>(float *a1, float *a2, float *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    float v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      float v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    int v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = v6;
      do
      {
        float v15 = *v14;
        if (*v14 > *a1)
        {
          float *v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      int v13 = a3;
    }
    if (v8 >= 5)
    {
      uint64_t v16 = (unint64_t)v8 >> 2;
      do
      {
        uint64_t v17 = 0;
        float v18 = *a1;
        unint64_t v19 = a1;
        do
        {
          float v20 = v19;
          v19 += v17 + 1;
          uint64_t v21 = 2 * v17;
          uint64_t v17 = (2 * v17) | 1;
          uint64_t v22 = v21 + 2;
          if (v22 < v16 && *v19 > v19[1])
          {
            ++v19;
            uint64_t v17 = v22;
          }
          float *v20 = *v19;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if (v19 != --v6)
        {
          float *v19 = *v6;
          *float v6 = v18;
          uint64_t v23 = (char *)v19 - (char *)a1 + 4;
          if (v23 < 5) {
            continue;
          }
          unint64_t v24 = (((unint64_t)v23 >> 2) - 2) >> 1;
          float v25 = &a1[v24];
          float v26 = *v25;
          float v18 = *v19;
          if (*v25 <= *v19) {
            continue;
          }
          do
          {
            float *v19 = v26;
            unint64_t v19 = v25;
            if (!v24) {
              break;
            }
            unint64_t v24 = (v24 - 1) >> 1;
            float v25 = &a1[v24];
            float v26 = *v25;
          }
          while (*v25 > v18);
        }
        float *v19 = v18;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(uint64_t result, uint64_t a2, uint64_t a3, float *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 2)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = (v4 >> 1) + 1;
      uint64_t v8 = (float *)(result + 4 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3 && *v8 > v8[1])
      {
        ++v8;
        uint64_t v7 = v9;
      }
      float v10 = *v8;
      float v11 = *a4;
      if (*v8 <= *a4)
      {
        do
        {
          *a4 = v10;
          a4 = v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v12 = 2 * v7;
          uint64_t v7 = (2 * v7) | 1;
          uint64_t v8 = (float *)(result + 4 * v7);
          uint64_t v13 = v12 + 2;
          if (v13 < a3 && *v8 > v8[1])
          {
            ++v8;
            uint64_t v7 = v13;
          }
          float v10 = *v8;
        }
        while (*v8 <= v11);
        *a4 = v11;
      }
    }
  }
  return result;
}

char *std::__hash_table<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,std::__unordered_map_hasher<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,true>,std::__unordered_map_equal<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,std::equal_to<CLMicroLocationProto::DataType>,std::hash<CLMicroLocationProto::DataType>,true>,std::allocator<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>>>::__emplace_unique_key_args<CLMicroLocationProto::DataType,CLMicroLocationProto::DataType const&,CLMicroLocationFingerprint::StartAndEndTimestamps>(uint64_t a1, unsigned int *a2, _DWORD *a3, _OWORD *a4)
{
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v9 <= v8) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    float v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      uint64_t v12 = (char *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = *((void *)v12 + 1);
          if (v13 == v8)
          {
            if (*((_DWORD *)v12 + 4) == v8) {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4) {
              break;
            }
          }
          uint64_t v12 = *(char **)v12;
        }
        while (v12);
      }
    }
  }
  uint64_t v12 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v12 = 0;
  *((void *)v12 + 1) = v8;
  *((_DWORD *)v12 + 4) = *a3;
  *(_OWORD *)(v12 + 24) = *a4;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)uint64_t v12 = *v21;
LABEL_38:
    void *v21 = v12;
    goto LABEL_39;
  }
  *(void *)uint64_t v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v20 + 8 * v4) = a1 + 16;
  if (*(void *)v12)
  {
    unint64_t v22 = *(void *)(*(void *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_25648E084(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__emplace_multi<CLMicroLocationFingerprint::Measurement>(void *a1, _OWORD *a2)
{
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__construct_node<CLMicroLocationFingerprint::Measurement>((uint64_t)a1, a2, (uint64_t)v5);
  inserted = std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__node_insert_multi(a1, v5[0]);
  v5[0] = 0;
  std::unique_ptr<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>>>>::reset[abi:ne180100]((uint64_t)v5, 0);
  return inserted;
}

void sub_25648E0EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__construct_node<CLMicroLocationFingerprint::Measurement>@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  uint64_t v6 = operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *uint64_t v6 = 0;
  v6[1] = 0;
  *((_OWORD *)v6 + 1) = *a2;
  uint64_t v7 = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v6 + 4), (uint64_t)(a2 + 1));
  *(unsigned char *)(a3 + 16) = 1;
  uint64_t result = CLMicroLocationFingerprint::Measurement::HashMeasurement::operator()(v7, (uint64_t)(v6 + 2));
  v6[1] = result;
  return result;
}

void sub_25648E174(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__node_insert_multi(void *a1, void *a2)
{
  uint64_t v4 = (uint64_t)(a2 + 2);
  unint64_t v5 = CLMicroLocationFingerprint::Measurement::HashMeasurement::operator()((uint64_t)a1, (uint64_t)(a2 + 2));
  a2[1] = v5;
  inserted = std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__node_insert_multi_perform(a1, a2, inserted);
  return a2;
}

void *std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    BOOL v9 = 1;
    if (v6 >= 3) {
      BOOL v9 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v10 = v9 | (2 * v6);
    unint64_t v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11) {
      size_t v12 = v11;
    }
    else {
      size_t v12 = v10;
    }
    std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__rehash<false>(a1, v12);
    unint64_t v6 = *(void *)(a1 + 8);
  }
  uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v13.i16[0] = vaddlv_u8(v13);
  unint64_t v14 = v13.u32[0];
  if (v13.u32[0] > 1uLL)
  {
    unint64_t v15 = a2;
    if (v6 <= a2) {
      unint64_t v15 = a2 % v6;
    }
  }
  else
  {
    unint64_t v15 = (v6 - 1) & a2;
  }
  BOOL v16 = *(void **)(*(void *)a1 + 8 * v15);
  if (v16)
  {
    unint64_t v17 = (void *)*v16;
    if (*v16)
    {
      int v18 = 0;
      do
      {
        unint64_t v19 = v17[1];
        if (v14 > 1)
        {
          unint64_t v20 = v17[1];
          if (v19 >= v6) {
            unint64_t v20 = v19 % v6;
          }
        }
        else
        {
          unint64_t v20 = v19 & (v6 - 1);
        }
        if (v20 != v15) {
          break;
        }
        int v21 = v19 == a2 && *((_DWORD *)v17 + 6) == *(_DWORD *)(a3 + 8)
            ? std::operator==[abi:ne180100]<unsigned long long,boost::uuids::uuid,std::string>((uint64_t)(v17 + 4), a3 + 16): 0;
        if (v18 & (v21 ^ 1)) {
          break;
        }
        v18 |= v21;
        BOOL v16 = (void *)*v16;
        unint64_t v17 = (void *)*v16;
      }
      while (*v16);
    }
  }
  return v16;
}

void std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__rehash<false>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__do_rehash<false>(a1, prime);
    }
  }
}

void std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(uint64_t **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      unint64_t v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      for (uint64_t i = *v7; *v7; uint64_t i = *v7)
      {
        unint64_t v13 = *(void *)(i + 8);
        if (v10 > 1)
        {
          if (v13 >= a2) {
            v13 %= a2;
          }
        }
        else
        {
          v13 &= a2 - 1;
        }
        if (v13 == v8)
        {
          uint64_t v7 = (uint64_t *)i;
        }
        else if (*(void *)(*(void *)a1 + 8 * v13))
        {
          unint64_t v14 = *(void **)i;
          if (*(void *)i)
          {
            unint64_t v15 = (void *)i;
            while (*(_DWORD *)(i + 24) == *((_DWORD *)v14 + 6))
            {
              int v16 = std::operator==[abi:ne180100]<unsigned long long,boost::uuids::uuid,std::string>(i + 32, (uint64_t)(v14 + 4));
              unint64_t v17 = (void *)*v15;
              if (!v16)
              {
                unint64_t v14 = (void *)*v15;
                break;
              }
              unint64_t v14 = (void *)*v17;
              unint64_t v15 = (void *)*v15;
              if (!*v17) {
                goto LABEL_33;
              }
            }
            unint64_t v17 = v15;
          }
          else
          {
            unint64_t v17 = (void *)i;
          }
LABEL_33:
          *uint64_t v7 = (uint64_t)v14;
          *unint64_t v17 = **(void **)(*(void *)a1 + 8 * v13);
          **(void **)(*(void *)a1 + 8 * v13) = i;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v13) = v7;
          uint64_t v7 = (uint64_t *)i;
          unint64_t v8 = v13;
        }
      }
    }
  }
  else
  {
    unint64_t v11 = *(void **)a1;
    *(void *)a1 = 0;
    if (v11) {
      operator delete(v11);
    }
    *(void *)(a1 + 8) = 0;
  }
}

uint64_t *std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__equal_range_multi<CLMicroLocationFingerprint::Measurement>(void *a1, uint64_t a2)
{
  float v3 = std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::find<CLMicroLocationFingerprint::Measurement>(a1, a2);
  int8x8_t v4 = v3;
  if (v3)
  {
    unint64_t v5 = v3;
    do
      unint64_t v5 = (uint64_t *)*v5;
    while (v5
         && *((_DWORD *)v5 + 6) == *(_DWORD *)(a2 + 8)
         && (std::operator==[abi:ne180100]<unsigned long long,boost::uuids::uuid,std::string>((uint64_t)(v5 + 4), a2 + 16) & 1) != 0);
  }
  return v4;
}

uint64_t *std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::find<CLMicroLocationFingerprint::Measurement>(void *a1, uint64_t a2)
{
  unint64_t v4 = CLMicroLocationFingerprint::Measurement::HashMeasurement::operator()((uint64_t)a1, a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  unint64_t v10 = *(uint64_t ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  for (uint64_t i = *v10; i; uint64_t i = (uint64_t *)*i)
  {
    unint64_t v12 = i[1];
    if (v12 == v6)
    {
      if (*((_DWORD *)i + 6) == *(_DWORD *)(a2 + 8)
        && (std::operator==[abi:ne180100]<unsigned long long,boost::uuids::uuid,std::string>((uint64_t)(i + 4), a2 + 16) & 1) != 0)
      {
        return i;
      }
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(void *)&v5) {
          v12 %= *(void *)&v5;
        }
      }
      else
      {
        v12 &= *(void *)&v5 - 1;
      }
      if (v12 != v9) {
        return 0;
      }
    }
  }
  return i;
}

void std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *> *>>(void *a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v4 = a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    unint64_t v8 = (void *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      unint64_t v10 = v8;
    }
    else
    {
      do
      {
        *((_OWORD *)v8 + 1) = *((_OWORD *)v4 + 1);
        std::__variant_detail::__assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__generic_assign[abi:ne180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1> const&>((uint64_t)(v8 + 4), (uint64_t)(v4 + 4));
        unint64_t v10 = (void *)*v8;
        std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__node_insert_multi(a1, v8);
        unint64_t v4 = (uint64_t *)*v4;
        if (v10) {
          BOOL v11 = v4 == a3;
        }
        else {
          BOOL v11 = 1;
        }
        unint64_t v8 = v10;
      }
      while (!v11);
    }
    std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__deallocate_node((uint64_t)a1, v10);
  }
  while (v4 != a3)
  {
    std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__emplace_multi<CLMicroLocationFingerprint::Measurement const&>(a1, (_OWORD *)v4 + 1);
    unint64_t v4 = (uint64_t *)*v4;
  }
}

void sub_25648E878(void *a1)
{
  __cxa_begin_catch(a1);
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_25648E894(_Unwind_Exception *a1)
{
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__generic_assign[abi:ne180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 24);
  uint64_t v4 = *(unsigned int *)(a2 + 24);
  if (v3 == -1)
  {
    if (v4 == -1) {
      return result;
    }
  }
  else if (v4 == -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_2704E0FE8[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 24) = -1;
    return result;
  }
  uint64_t v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_2704E1380[v4])(&v5, result, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJyN5boost5uuids4uuidENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISH_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRNS0_6__baseILSL_1EJySA_SG_EEERKSX_EEEDcSP_DpT0_(uint64_t *a1, void *a2, void *a3)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 24)) {
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__emplace[abi:ne180100]<0ul,unsigned long long const&>(result, a3);
  }
  *a2 = *a3;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJyN5boost5uuids4uuidENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISH_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRNS0_6__baseILSL_1EJySA_SG_EEERKSX_EEEDcSP_DpT0_(uint64_t *a1, _OWORD *a2, _OWORD *a3)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 24) != 1) {
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__emplace[abi:ne180100]<1ul,boost::uuids::uuid const&>(result, a3);
  }
  *a2 = *a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJyN5boost5uuids4uuidENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISH_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRNS0_6__baseILSL_1EJySA_SG_EEERKSX_EEEDcSP_DpT0_(uint64_t *a1, std::string *a2, std::string *a3)
{
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__emplace[abi:ne180100]<0ul,unsigned long long const&>(uint64_t a1, void *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_2704E0FE8[v4])(&v6, a1);
  }
  *(void *)a1 = *a2;
  *(_DWORD *)(a1 + 24) = 0;
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__emplace[abi:ne180100]<1ul,boost::uuids::uuid const&>(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_2704E0FE8[v4])(&v6, a1);
  }
  *(_DWORD *)(a1 + 24) = -1;
  *(_OWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 24) = 1;
  return a1;
}

void *std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__emplace_multi<CLMicroLocationFingerprint::Measurement const&>(void *a1, _OWORD *a2)
{
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__construct_node<CLMicroLocationFingerprint::Measurement const&>((uint64_t)a1, a2, (uint64_t)v5);
  inserted = std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__node_insert_multi(a1, v5[0]);
  v5[0] = 0;
  std::unique_ptr<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>>>>::reset[abi:ne180100]((uint64_t)v5, 0);
  return inserted;
}

void sub_25648EAAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__construct_node<CLMicroLocationFingerprint::Measurement const&>@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  char v6 = operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  *char v6 = 0;
  v6[1] = 0;
  *((_OWORD *)v6 + 1) = *a2;
  uint64_t v7 = std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)(v6 + 4), (uint64_t)(a2 + 1));
  *(unsigned char *)(a3 + 16) = 1;
  uint64_t result = CLMicroLocationFingerprint::Measurement::HashMeasurement::operator()(v7, (uint64_t)(v6 + 2));
  v6[1] = result;
  return result;
}

void sub_25648EB34(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<CLMicroLocationProto::DataType,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,std::allocator<CLMicroLocationProto::DataType>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<CLMicroLocationProto::DataType,void *> *>>(void *a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_9;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  unint64_t v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != (unsigned int *)a3)
    {
      unint64_t v9 = a2[4];
      *((_DWORD *)v8 + 4) = v9;
      unint64_t v10 = (uint64_t *)*v8;
      v8[1] = v9;
      inserted = (void *)std::__hash_table<CLMicroLocationProto::DataType,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,std::allocator<CLMicroLocationProto::DataType>>::__node_insert_multi_prepare((uint64_t)a1, v9, (_DWORD *)v8 + 4);
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__node_insert_multi_perform(a1, v8, inserted);
      a2 = *(unsigned int **)a2;
      unint64_t v8 = v10;
      if (!v10) {
        goto LABEL_9;
      }
    }
    do
    {
      unint64_t v12 = (uint64_t *)*v8;
      operator delete(v8);
      unint64_t v8 = v12;
    }
    while (v12);
  }
  else
  {
LABEL_9:
    while (a2 != (unsigned int *)a3)
    {
      std::__hash_table<CLMicroLocationProto::DataType,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,std::allocator<CLMicroLocationProto::DataType>>::__emplace_multi<CLMicroLocationProto::DataType const&>(a1, a2 + 4);
      a2 = *(unsigned int **)a2;
    }
  }
}

void sub_25648EC24(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_25648EC44(_Unwind_Exception *a1)
{
}

uint64_t std::__hash_table<CLMicroLocationProto::DataType,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,std::allocator<CLMicroLocationProto::DataType>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    uint64_t v9 = 2 * v6;
    BOOL v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    size_t v11 = v10 | v9;
    unint64_t v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v11;
    }
    std::__hash_table<CLMicroLocationProto::DataType,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,std::allocator<CLMicroLocationProto::DataType>>::__rehash<false>(a1, v13);
    unint64_t v6 = *(void *)(a1 + 8);
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v15 = a2;
    if (v6 <= a2) {
      unint64_t v15 = a2 % v6;
    }
  }
  else
  {
    unint64_t v15 = (v6 - 1) & a2;
  }
  uint64_t v16 = *(void *)(*(void *)a1 + 8 * v15);
  if (!v16) {
    return 0;
  }
  int v17 = 0;
  do
  {
    uint64_t result = v16;
    uint64_t v16 = *(void *)v16;
    if (!v16) {
      break;
    }
    unint64_t v19 = *(void *)(v16 + 8);
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v20 = *(void *)(v16 + 8);
      if (v19 >= v6) {
        unint64_t v20 = v19 % v6;
      }
    }
    else
    {
      unint64_t v20 = v19 & (v6 - 1);
    }
    if (v20 != v15) {
      break;
    }
    BOOL v21 = v19 == a2 && *(_DWORD *)(v16 + 16) == *a3;
    int v22 = v17 & !v21;
    v17 |= v21;
  }
  while (v22 != 1);
  return result;
}

void std::__hash_table<CLMicroLocationProto::DataType,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,std::allocator<CLMicroLocationProto::DataType>>::__rehash<false>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<CLMicroLocationProto::DataType,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,std::allocator<CLMicroLocationProto::DataType>>::__do_rehash<false>(a1, prime);
    }
  }
}

void std::__hash_table<CLMicroLocationProto::DataType,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,std::allocator<CLMicroLocationProto::DataType>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(uint64_t ***)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = (unint64_t)v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      for (uint64_t i = *v7; *v7; uint64_t i = *v7)
      {
        unint64_t v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2) {
            v12 %= a2;
          }
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          uint64_t v7 = (uint64_t **)i;
        }
        else
        {
          size_t v13 = i;
          if (*(void *)(*(void *)a1 + 8 * v12))
          {
            do
            {
              uint8x8_t v14 = v13;
              size_t v13 = (uint64_t *)*v13;
            }
            while (v13 && *((_DWORD *)i + 4) == *((_DWORD *)v13 + 4));
            *uint64_t v7 = v13;
            void *v14 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = i;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v12) = v7;
            uint64_t v7 = (uint64_t **)i;
            unint64_t v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    BOOL v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

_DWORD *std::__hash_table<CLMicroLocationProto::DataType,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,std::allocator<CLMicroLocationProto::DataType>>::__emplace_multi<CLMicroLocationProto::DataType const&>(void *a1, unsigned int *a2)
{
  int8x8_t v4 = operator new(0x18uLL);
  unint64_t v5 = *a2;
  v4[4] = v5;
  *(void *)int8x8_t v4 = 0;
  *((void *)v4 + 1) = v5;
  inserted = (void *)std::__hash_table<CLMicroLocationProto::DataType,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,std::allocator<CLMicroLocationProto::DataType>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4 + 4);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__node_insert_multi_perform(a1, v4, inserted);
  return v4;
}

void sub_25648F078(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,std::__unordered_map_hasher<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,true>,std::__unordered_map_equal<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,std::equal_to<CLMicroLocationProto::DataType>,std::hash<CLMicroLocationProto::DataType>,true>,std::allocator<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,void *> *>>(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_9;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  unint64_t v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      unint64_t v9 = *((unsigned int *)a2 + 4);
      *((_DWORD *)v8 + 4) = v9;
      *(_OWORD *)(v8 + 3) = *(_OWORD *)(a2 + 3);
      BOOL v10 = (uint64_t *)*v8;
      v8[1] = v9;
      inserted = (void *)std::__hash_table<CLMicroLocationProto::DataType,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,std::allocator<CLMicroLocationProto::DataType>>::__node_insert_multi_prepare((uint64_t)a1, v9, (_DWORD *)v8 + 4);
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__node_insert_multi_perform(a1, v8, inserted);
      a2 = (uint64_t *)*a2;
      unint64_t v8 = v10;
      if (!v10) {
        goto LABEL_9;
      }
    }
    do
    {
      unint64_t v12 = (uint64_t *)*v8;
      operator delete(v8);
      unint64_t v8 = v12;
    }
    while (v12);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      std::__hash_table<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,std::__unordered_map_hasher<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,true>,std::__unordered_map_equal<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,std::equal_to<CLMicroLocationProto::DataType>,std::hash<CLMicroLocationProto::DataType>,true>,std::allocator<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>>>::__emplace_multi<std::pair<CLMicroLocationProto::DataType const,CLMicroLocationFingerprint::StartAndEndTimestamps> const&>(a1, (uint64_t)(a2 + 2));
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_25648F16C(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_25648F18C(_Unwind_Exception *a1)
{
}

unsigned int *std::__hash_table<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,std::__unordered_map_hasher<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,true>,std::__unordered_map_equal<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,std::equal_to<CLMicroLocationProto::DataType>,std::hash<CLMicroLocationProto::DataType>,true>,std::allocator<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>>>::__emplace_multi<std::pair<CLMicroLocationProto::DataType const,CLMicroLocationFingerprint::StartAndEndTimestamps> const&>(void *a1, uint64_t a2)
{
  int8x8_t v4 = (unsigned int *)operator new(0x28uLL);
  *((_OWORD *)v4 + 1) = *(_OWORD *)a2;
  *((void *)v4 + 4) = *(void *)(a2 + 16);
  unint64_t v5 = v4[4];
  *(void *)int8x8_t v4 = 0;
  *((void *)v4 + 1) = v5;
  inserted = (void *)std::__hash_table<CLMicroLocationProto::DataType,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,std::allocator<CLMicroLocationProto::DataType>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4 + 4);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__node_insert_multi_perform(a1, v4, inserted);
  return v4;
}

void sub_25648F210(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::AdaptiveAnchorsNumDaysToKeepEnabled>()
{
  os_log_t v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  uint64_t v2 = [NSString stringWithUTF8String:"ULAdaptiveAnchorsNumDaysToKeepEnabled"];
  uint64_t v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 unsignedIntValue];
  }
  else {
    uint64_t v4 = [&unk_2704F1FF8 unsignedIntValue];
  }
  uint64_t v5 = v4;

  return v5;
}

void sub_25648F2E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::AdaptiveAnchorsNumValidDaysForPurging>()
{
  os_log_t v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  uint64_t v2 = [NSString stringWithUTF8String:"ULAdaptiveAnchorsNumValidDaysForPurging"];
  uint64_t v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 unsignedIntValue];
  }
  else {
    uint64_t v4 = [&unk_2704F2028 unsignedIntValue];
  }
  uint64_t v5 = v4;

  return v5;
}

void sub_25648F3E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::AdaptiveAnchorsMaxEntriesInAppearanceMap>()
{
  os_log_t v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  uint64_t v2 = [NSString stringWithUTF8String:"ULAdaptiveAnchorsMaxEntriesInAppearanceMap"];
  uint64_t v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 unsignedLongValue];
  }
  else {
    uint64_t v4 = [&unk_2704F2010 unsignedLongValue];
  }
  uint64_t v5 = v4;

  return v5;
}

void sub_25648F4E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationAnchorAppearanceMap::CLMicroLocationAnchorAppearanceMap(CLMicroLocationAnchorAppearanceMap *this)
{
  int v2 = ULSettings::get<ULSettings::AdaptiveAnchorsNumDaysToKeepEnabled>();
  int valid = ULSettings::get<ULSettings::AdaptiveAnchorsNumValidDaysForPurging>();
  uint64_t v4 = ULSettings::get<ULSettings::AdaptiveAnchorsMaxEntriesInAppearanceMap>();
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  *((_DWORD *)this + 10) = v2;
  *((_DWORD *)this + 11) = valid;
  *((void *)this + 6) = v4;
}

void CLMicroLocationAnchorAppearanceMap::CLMicroLocationAnchorAppearanceMap(CLMicroLocationAnchorAppearanceMap *this, const CLMicroLocationProto::anchorAppearancesVector *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  CLMicroLocationAnchorAppearanceMap::CLMicroLocationAnchorAppearanceMap(this);
  uint64_t v4 = *((int *)a2 + 4);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)*((void *)a2 + 1);
    for (uint64_t i = 8 * v4; i; i -= 8)
    {
      uint64_t v7 = *v5;
      unint64_t v8 = *(uint64_t ***)(*v5 + 24);
      int v9 = *((char *)v8 + 23);
      if (v9 < 0)
      {
        if (v8[1] != (uint64_t *)16)
        {
LABEL_9:
          if (onceToken_MicroLocation_Default != -1) {
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_99);
          }
          unint64_t v12 = logObject_MicroLocation_Default;
          if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v13[0]) = 0;
            _os_log_impl(&dword_25631F000, v12, OS_LOG_TYPE_DEFAULT, "#Warning The protobuf Anchor Appearance struct does not have a valid device ID", (uint8_t *)v13, 2u);
          }
          goto LABEL_13;
        }
        unint64_t v8 = (uint64_t **)*v8;
      }
      else if (v9 != 16)
      {
        goto LABEL_9;
      }
      long long v15 = *(_OWORD *)v8;
      int v10 = *(_DWORD *)(v7 + 32);
      long long v11 = *(_OWORD *)(v7 + 8);
      v13[0] = v15;
      v13[1] = v11;
      int v14 = v10;
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__emplace_unique_key_args<boost::uuids::uuid,std::pair<boost::uuids::uuid const,CLMicroLocationAnchorAppearance>>((uint64_t)this, v13, (uint64_t)v13);
LABEL_13:
      ++v5;
    }
  }
}

void sub_25648F6EC(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void CLMicroLocationAnchorAppearanceMap::toProtobuf(CLMicroLocationAnchorAppearanceMap *this@<X0>, int *a2@<X8>)
{
  CLMicroLocationProto::anchorAppearancesVector::anchorAppearancesVector((uint64_t)a2);
  uint64_t v4 = (uint64_t *)*((void *)this + 2);
  if (v4)
  {
    uint64_t v5 = MEMORY[0x263F8C740];
    do
    {
      int v6 = a2[5];
      uint64_t v7 = a2[4];
      if ((int)v7 >= v6)
      {
        if (v6 == a2[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 2));
          int v6 = a2[5];
        }
        a2[5] = v6 + 1;
        wireless_diagnostics::google::protobuf::internal::GenericTypeHandler<CLMicroLocationProto::AnchorAppearance>::New();
      }
      uint64_t v8 = *((void *)a2 + 1);
      a2[4] = v7 + 1;
      uint64_t v9 = *(void *)(v8 + 8 * v7);
      if (v9)
      {
        CLMicroLocationProto::AnchorAppearance::AnchorAppearance((uint64_t)v12);
        long long v13 = *((_OWORD *)v4 + 2);
        int v10 = *((_DWORD *)v4 + 12);
        v15 |= 7u;
        int v14 = v10;
        CLMicroLocationProto::AnchorAppearance::CopyFrom((CLMicroLocationProto::AnchorAppearance *)v9, (const CLMicroLocationProto::AnchorAppearance *)v12);
        CLMicroLocationProto::AnchorAppearance::~AnchorAppearance((CLMicroLocationProto::AnchorAppearance *)v12);
        *(_DWORD *)(v9 + 40) |= 8u;
        if (*(void *)(v9 + 24) == v5) {
          operator new();
        }
        MEMORY[0x25A2A6090]();
      }
      else
      {
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_99);
        }
        long long v11 = logObject_MicroLocation_Default;
        if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)unint64_t v12 = 0;
          _os_log_impl(&dword_25631F000, v11, OS_LOG_TYPE_ERROR, "Got nullptr from CLMicroLocationProto add_anchorappearances", v12, 2u);
        }
      }
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
}

void sub_25648F8D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CLMicroLocationProto::AnchorAppearance::~AnchorAppearance((CLMicroLocationProto::AnchorAppearance *)&a9);
  CLMicroLocationProto::anchorAppearancesVector::~anchorAppearancesVector(v9);
  _Unwind_Resume(a1);
}

double *CLMicroLocationAnchorAppearanceMap::updateSeenAnchor(void *a1, void *a2, double a3, double a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t result = (double *)std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::find<boost::uuids::uuid>(a1, a2);
  if (result)
  {
    result[5] = a4;
    *((_DWORD *)result + 12) = 0;
  }
  else
  {
    long long v9 = *(_OWORD *)a2;
    double v10 = a3;
    double v11 = a4;
    int v12 = 0;
    return (double *)std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__emplace_unique_key_args<boost::uuids::uuid,std::pair<boost::uuids::uuid const,CLMicroLocationAnchorAppearance>>((uint64_t)a1, &v9, (uint64_t)&v9);
  }
  return result;
}

void CLMicroLocationAnchorAppearanceMap::updateSeenAnchors(uint64_t a1, void *a2, int a3, double a4, double a5)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  uint64_t v9 = *(void *)(a1 + 24);
  if (a3)
  {
    for (uint64_t i = *(void **)(a1 + 16); i; uint64_t i = (void *)*i)
    {
      if (!std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::find<boost::uuids::uuid>(a2, i + 2))
      {
        std::string __p = i + 2;
        double v11 = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>(a1, i + 2, (uint64_t)&std::piecewise_construct, (long long **)&__p);
        ++*((_DWORD *)v11 + 12);
      }
    }
  }
  for (uint64_t j = (void *)a2[2]; j; uint64_t j = (void *)*j)
    CLMicroLocationAnchorAppearanceMap::updateSeenAnchor((void *)a1, j + 2, a4, a5);
  uint64_t v13 = *(void *)(a1 + 16);
  unint64_t v14 = *(void *)(a1 + 24);
  unint64_t v15 = v14;
  if (v13)
  {
    do
    {
      if (*(_DWORD *)(v13 + 48) >= *(_DWORD *)(a1 + 44)) {
        uint64_t v13 = std::__hash_table<boost::uuids::uuid,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,std::allocator<boost::uuids::uuid>>::erase((void *)a1, (uint64_t *)v13);
      }
      else {
        uint64_t v13 = *(void *)v13;
      }
    }
    while (v13);
    unint64_t v15 = *(void *)(a1 + 24);
  }
  unint64_t v16 = *(void *)(a1 + 48);
  uint64_t v17 = v15 - v16;
  if (v15 > v16 && v16 != 0)
  {
    std::string __p = 0;
    *(void *)float v41 = 0;
    *(void *)&v41[8] = 0;
    std::vector<unsigned long>::reserve(&__p, v15);
    unint64_t v19 = *(void **)(a1 + 16);
    if (v19)
    {
      unint64_t v20 = *(char **)v41;
      do
      {
        if ((unint64_t)v20 >= *(void *)&v41[8])
        {
          int v22 = (char *)__p;
          uint64_t v23 = (v20 - (unsigned char *)__p) >> 3;
          unint64_t v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 61) {
            std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v25 = *(void *)&v41[8] - (void)__p;
          if ((uint64_t)(*(void *)&v41[8] - (void)__p) >> 2 > v24) {
            unint64_t v24 = v25 >> 2;
          }
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v26 = v24;
          }
          if (v26)
          {
            float v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>((uint64_t)&v41[8], v26);
            int v22 = (char *)__p;
            unint64_t v20 = *(char **)v41;
          }
          else
          {
            float v27 = 0;
          }
          float v28 = &v27[8 * v23];
          *(void *)float v28 = v19[5];
          BOOL v21 = v28 + 8;
          while (v20 != v22)
          {
            uint64_t v29 = *((void *)v20 - 1);
            v20 -= 8;
            *((void *)v28 - 1) = v29;
            v28 -= 8;
          }
          std::string __p = v28;
          *(void *)float v41 = v21;
          *(void *)&v41[8] = &v27[8 * v26];
          if (v22) {
            operator delete(v22);
          }
        }
        else
        {
          *(void *)unint64_t v20 = v19[5];
          BOOL v21 = v20 + 8;
        }
        *(void *)float v41 = v21;
        unint64_t v19 = (void *)*v19;
        unint64_t v20 = v21;
      }
      while (v19);
    }
    else
    {
      BOOL v21 = *(char **)v41;
    }
    unint64_t v30 = 126 - 2 * __clz((v21 - (unsigned char *)__p) >> 3);
    if (v21 == __p) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = v30;
    }
    std::__introsort<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*,false>((uint64_t)__p, (double *)v21, (uint64_t)&v39, v31, 1);
    int v32 = __p;
    uint64_t v33 = *(void *)(a1 + 16);
    if (!v33 || !v17) {
      goto LABEL_54;
    }
    double v34 = *((double *)__p + *(void *)(a1 + 48) - 1);
    do
    {
      if (v34 < *(double *)(v33 + 40))
      {
        uint64_t v33 = *(void *)v33;
      }
      else
      {
        uint64_t v33 = std::__hash_table<boost::uuids::uuid,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,std::allocator<boost::uuids::uuid>>::erase((void *)a1, (uint64_t *)v33);
        --v17;
      }
      if (v33) {
        BOOL v35 = v17 == 0;
      }
      else {
        BOOL v35 = 1;
      }
    }
    while (!v35);
    int v32 = __p;
    if (__p)
    {
LABEL_54:
      *(void *)float v41 = v32;
      operator delete(v32);
    }
  }
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_99);
  }
  float v36 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v37 = a2[3];
    uint64_t v38 = *(void *)(a1 + 24);
    std::string __p = (void *)68290307;
    *(_WORD *)float v41 = 2082;
    *(void *)&v41[2] = "";
    *(_WORD *)&v41[10] = 2049;
    *(void *)&v41[12] = v9;
    __int16 v42 = 2049;
    uint64_t v43 = v37;
    __int16 v44 = 2049;
    unint64_t v45 = v14;
    __int16 v46 = 2049;
    unint64_t v47 = v15;
    __int16 v48 = 2049;
    uint64_t v49 = v38;
    _os_log_impl(&dword_25631F000, v36, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"updateSeenAnchors\", \"Anchors map initial size\":%{private}lu, \"Received daily IDS ID set size\":%{private}lu, \"Size with new anchors\":%{private}lu, \"Size after purging\":%{private}lu, \"Size after max entries limit\":%{private}lu}", (uint8_t *)&__p, 0x44u);
  }
}

void sub_25648FD2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationAnchorAppearanceMap::isAnchorValid(uint64_t a1, uint64_t a2, double *a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if ((*(_DWORD *)(a2 + 8) - 5) > 1) {
    return 1;
  }
  if (*(_DWORD *)(a2 + 40) != 1) {
    return 0;
  }
  long long v9 = *(_OWORD *)(a2 + 16);
  uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::find<boost::uuids::uuid>((void *)a1, &v9);
  if (!result) {
    return result;
  }
  if ((double v7 = *(double *)(result + 32), *(double *)a2 >= v7)
    && ((double v8 = *(double *)(result + 40), v8 >= *(double *)a2) || *(_DWORD *)(result + 48) < *(_DWORD *)(a1 + 40))
    && *a3 >= v7
    && (v8 >= *a3 || *(_DWORD *)(result + 48) < *(_DWORD *)(a1 + 40)))
  {
    return 1;
  }
  else
  {
    return 0;
  }
}

BOOL CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationAnchorAppearanceMap *this, const CLMicroLocationFingerprint::Measurement *a2)
{
  v16[4] = *MEMORY[0x263EF8340];
  v13[0] = &unk_2704E13E0;
  v13[3] = v13;
  v12[0] = &unk_2704E1470;
  void v12[3] = v12;
  v11[0] = &unk_2704E1500;
  v11[3] = v11;
  CLMicroLocationUtils::DeviceIdVisitor<boost::uuids::uuid>::DeviceIdVisitor((uint64_t)v14, (uint64_t)v13, (uint64_t)v12, (uint64_t)v11);
  std::__function::__value_func<boost::uuids::uuid ()(std::string const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<boost::uuids::uuid ()(boost::uuids::uuid const&)>::~__value_func[abi:ne180100](v12);
  std::__function::__value_func<boost::uuids::uuid ()(unsigned long long const&)>::~__value_func[abi:ne180100](v13);
  uint64_t v4 = *((unsigned int *)a2 + 10);
  if (v4 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  long long v9 = v14;
  v10[0] = ((uint64_t (*)(void **, char *))off_2704E13B8[v4])(&v9, (char *)a2 + 16);
  v10[1] = v5;
  int v6 = (double *)std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::find<boost::uuids::uuid>(this, v10);
  BOOL v7 = v6 && *(double *)a2 >= v6[4] && (v6[5] >= *(double *)a2 || *((_DWORD *)v6 + 12) < *((_DWORD *)this + 10));
  std::__function::__value_func<boost::uuids::uuid ()(std::string const&)>::~__value_func[abi:ne180100](v16);
  std::__function::__value_func<boost::uuids::uuid ()(boost::uuids::uuid const&)>::~__value_func[abi:ne180100](v15);
  std::__function::__value_func<boost::uuids::uuid ()(unsigned long long const&)>::~__value_func[abi:ne180100](v14);
  return v7;
}

void sub_25648FFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  CLMicroLocationUtils::DeviceIdVisitor<boost::uuids::uuid>::~DeviceIdVisitor((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *CLMicroLocationUtils::DeviceIdVisitor<boost::uuids::uuid>::~DeviceIdVisitor(void *a1)
{
  std::__function::__value_func<boost::uuids::uuid ()(std::string const&)>::~__value_func[abi:ne180100](a1 + 8);
  std::__function::__value_func<boost::uuids::uuid ()(boost::uuids::uuid const&)>::~__value_func[abi:ne180100](a1 + 4);
  return std::__function::__value_func<boost::uuids::uuid ()(unsigned long long const&)>::~__value_func[abi:ne180100](a1);
}

CLMicroLocationProto::Measurement *CLMicroLocationAnchorAppearanceMap::updateAnchorIdSetFromMeasurements(CLMicroLocationProto::Measurement *result, uint64_t *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v4 = (uint64_t)result;
    do
    {
      int v5 = *(_DWORD *)(v2 + 104);
      if ((v5 & 0x40) != 0)
      {
        uint64_t v8 = *(void *)(v2 + 80);
        if (!v8)
        {
          uint64_t result = (CLMicroLocationProto::Measurement *)CLMicroLocationProto::Measurement::default_instance(result);
          uint64_t v8 = *((void *)result + 6);
        }
        if ((*(unsigned char *)(v8 + 64) & 0x80) == 0) {
          goto LABEL_15;
        }
        BOOL v7 = *(uint64_t ***)(v8 + 48);
      }
      else
      {
        if ((v5 & 0x80) == 0) {
          goto LABEL_15;
        }
        uint64_t v6 = *(void *)(v2 + 88);
        if (!v6)
        {
          uint64_t result = (CLMicroLocationProto::Measurement *)CLMicroLocationProto::Measurement::default_instance(result);
          uint64_t v6 = *((void *)result + 7);
        }
        if ((*(unsigned char *)(v6 + 56) & 0x10) == 0) {
          goto LABEL_15;
        }
        BOOL v7 = *(uint64_t ***)(v6 + 32);
      }
      uint64_t result = (CLMicroLocationProto::Measurement *)CLMicroLocationProtobufHelper::uuidFromProtobuf(v7, &v9);
      if (v10) {
        uint64_t result = (CLMicroLocationProto::Measurement *)std::__hash_table<boost::uuids::uuid,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,std::allocator<boost::uuids::uuid>>::__emplace_unique_key_args<boost::uuids::uuid,boost::uuids::uuid const&>(v4, &v9, &v9);
      }
LABEL_15:
      v2 += 120;
    }
    while (v2 != v3);
  }
  return result;
}

void CLMicroLocationAnchorValueStatisticsMap::CLMicroLocationAnchorValueStatisticsMap(CLMicroLocationAnchorValueStatisticsMap *this, const CLMicroLocationProto::ClusterAnchorValueStatisticsVector *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  uint64_t v3 = *((int *)a2 + 4);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)*((void *)a2 + 1);
    int v5 = &v4[v3];
    do
    {
      uint64_t v6 = *v4;
      CLMicroLocationProtobufHelper::uuidFromProtobuf(*(uint64_t ***)(*v4 + 32), &v18);
      if (v19)
      {
        memset(buf, 0, sizeof(buf));
        int v17 = 1065353216;
        uint64_t v7 = *(int *)(v6 + 16);
        if (v7)
        {
          uint64_t v8 = *(uint64_t **)(v6 + 8);
          uint64_t v9 = 8 * v7;
          do
          {
            uint64_t v10 = *v8;
            uint64_t v11 = *(long long **)(*v8 + 24);
            if (*((char *)v11 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)v11, *((void *)v11 + 1));
            }
            else
            {
              long long v12 = *v11;
              v15.__r_.__value_.__r.__words[2] = *((void *)v11 + 2);
              *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v12;
            }
            __n128 v14 = 0uLL;
            __n128 v14 = *(__n128 *)(v10 + 8);
            std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::__emplace_unique_key_args<std::string,std::string&,AnchorValueStatistics>((uint64_t)buf, (unsigned __int8 *)&v15, (uint64_t)&v15, &v14);
            if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v15.__r_.__value_.__l.__data_);
            }
            ++v8;
            v9 -= 8;
          }
          while (v9);
        }
        std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>>>::__emplace_unique_key_args<boost::uuids::uuid,boost::uuids::uuid&,std::unordered_map<std::string,AnchorValueStatistics>>((uint64_t)this, &v18, &v18, (uint64_t *)buf);
        std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::~__hash_table((uint64_t)buf);
      }
      else
      {
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_99);
        }
        uint64_t v13 = logObject_MicroLocation_Default;
        if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t buf = 68289026;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = "";
          _os_log_impl(&dword_25631F000, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, the protobuf ClusterAnchorValueStatistics struct doesn not have a valid cluster UUID\"}", buf, 0x12u);
        }
      }
      ++v4;
    }
    while (v4 != v5);
  }
}

void sub_256490338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::~__hash_table((uint64_t)&a20);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>>>::~__hash_table(v20);
  _Unwind_Resume(a1);
}

void CLMicroLocationAnchorValueStatisticsMap::CLMicroLocationAnchorValueStatisticsMap(CLMicroLocationAnchorValueStatisticsMap *this, const CLMicroLocationModel *a2, const CLMicroLocationFingerprintPool *a3)
{
  uint64_t v110 = *MEMORY[0x263EF8340];
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  if (CLMicroLocationModel::isValid(a2))
  {
    long long v97 = 0u;
    long long v98 = 0u;
    int v99 = 1065353216;
    __int16 v81 = a2;
    int v5 = (void *)*((void *)a2 + 46);
    if (v5)
    {
      uint64_t v6 = 0;
      do
      {
        long long v94 = 0uLL;
        *(void *)&long long v95 = 0;
        uint64_t v8 = (uuid *)v5[4];
        uint64_t v7 = (uuid *)v5[5];
        while (v8 != v7)
        {
          CLMicroLocationFingerprintPool::at(a3, v8, buf);
          if (v109)
          {
            uint64_t v9 = *((void *)&v94 + 1);
            if (*((void *)&v94 + 1) >= (unint64_t)v95)
            {
              uint64_t v10 = std::vector<CLMicroLocationFingerprint>::__push_back_slow_path<CLMicroLocationFingerprint const&>((uint64_t *)&v94, (uint64_t)buf);
            }
            else
            {
              std::allocator<CLMicroLocationFingerprint>::construct[abi:ne180100]<CLMicroLocationFingerprint,CLMicroLocationFingerprint const&>((uint64_t)&v95, *((uint64_t *)&v94 + 1), (uint64_t)buf);
              uint64_t v10 = v9 + 192;
            }
            *((void *)&v94 + 1) = v10;
            ++v6;
          }
          std::__optional_destruct_base<CLMicroLocationFingerprint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
          ++v8;
        }
        *(void *)&v92[0] = v5 + 2;
        uint64_t v11 = (long long *)(std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>((uint64_t)&v97, v5 + 2, (uint64_t)&std::piecewise_construct, (_OWORD **)v92)+ 4);
        if (v11 != &v94) {
          std::vector<CLMicroLocationFingerprint>::__assign_with_size[abi:ne180100]<CLMicroLocationFingerprint*,CLMicroLocationFingerprint*>((uint64_t)v11, v94, *((uint64_t *)&v94 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v94 + 1) - v94) >> 6));
        }
        *(void *)uint64_t buf = &v94;
        std::vector<CLMicroLocationFingerprint>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        int v5 = (void *)*v5;
      }
      while (v5);
    }
    else
    {
      uint64_t v6 = 0;
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_99);
    }
    uint64_t v13 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *((void *)v81 + 47);
      *(_DWORD *)uint64_t buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v101 = 2082;
      double v102 = "";
      __int16 v103 = 2050;
      *(void *)int v104 = v14;
      *(_WORD *)&v104[8] = 2050;
      *(void *)&v104[10] = v6;
      _os_log_impl(&dword_25631F000, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationAnchorValueStatisticsMap, start analysis\", \"Num Clusters\":%{public}lu, \"Num Found Fingerprints\":%{public}lu}", buf, 0x26u);
    }
    long long v94 = 0u;
    long long v95 = 0u;
    int v96 = 1065353216;
    memset(v92, 0, sizeof(v92));
    int v93 = 1065353216;
    long long v89 = 0u;
    long long v90 = 0u;
    int v91 = 1065353216;
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_99);
    }
    std::string v15 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = *((void *)v81 + 5);
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v101 = 2082;
      double v102 = "";
      __int16 v103 = 2050;
      *(void *)int v104 = v16;
      _os_log_impl(&dword_25631F000, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationAnchorValueStatisticsMap, anchorAppearanceMap\", \"Size\":%{public}lu}", buf, 0x1Cu);
    }
    int v17 = (void *)v98;
    if ((void)v98)
    {
      do
      {
        uint64_t v19 = v17[4];
        uint64_t v18 = v17[5];
        __int16 v79 = v17;
        uint64_t v80 = v18;
        while (v19 != v18)
        {
          for (uint64_t i = *(uint64_t **)(v19 + 16); i; uint64_t i = (uint64_t *)*i)
          {
            BOOL isMeasurementFromValidNonWiFiAnchor = CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor((const CLMicroLocationModel *)((char *)v81 + 16), (const CLMicroLocationFingerprint::Measurement *)(i + 2));
            if (isMeasurementFromValidNonWiFiAnchor) {
              std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__emplace_unique_key_args<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement const&>((uint64_t)&v89, (uint64_t)(i + 2), (_OWORD *)i + 1);
            }
            if (onceToken_MicroLocation_Default != -1) {
              dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_99);
            }
            int v22 = (id)logObject_MicroLocation_Default;
            if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
            {
              CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId((CLMicroLocationFingerprint::Measurement *)(i + 2));
              uint64_t v23 = __p;
              if (v88 < 0) {
                uint64_t v23 = (void **)__p[0];
              }
              uint64_t v24 = *((unsigned int *)i + 6);
              double v25 = *((float *)i + 7);
              *(_DWORD *)uint64_t buf = 68290050;
              *(_DWORD *)&uint8_t buf[4] = 0;
              __int16 v101 = 2082;
              double v102 = "";
              __int16 v103 = 1026;
              *(_DWORD *)int v104 = isMeasurementFromValidNonWiFiAnchor;
              *(_WORD *)&v104[4] = 2082;
              *(void *)&v104[6] = v23;
              *(_WORD *)&v104[14] = 2050;
              *(void *)&v104[16] = v24;
              __int16 v105 = 2050;
              double v106 = v25;
              _os_log_impl(&dword_25631F000, v22, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"measurement\", \"Inserted to set\":%{public}hhd, \"DeviceId\":%{public, location:escape_only}s, \"DataType\":%{public}lu, \"Measured Value\":\"%{public}.3f\"}", buf, 0x36u);
              if (v88 < 0) {
                operator delete(__p[0]);
              }
            }
          }
          v19 += 192;
          uint64_t v18 = v80;
        }
        int v17 = (void *)*v79;
      }
      while (*v79);
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_99);
    }
    unint64_t v26 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v101 = 2082;
      double v102 = "";
      __int16 v103 = 2050;
      *(void *)int v104 = *((void *)&v90 + 1);
      _os_log_impl(&dword_25631F000, v26, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationAnchorValueStatisticsMap, measurement set\", \"Size\":%{public}lu}", buf, 0x1Cu);
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_99);
    }
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
    {
      for (uint64_t j = (uint64_t *)v90; j; uint64_t j = (uint64_t *)*j)
      {
        int v28 = *((_DWORD *)j + 6);
        CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId((CLMicroLocationFingerprint::Measurement *)(j + 2));
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_99);
        }
        uint64_t v29 = logObject_MicroLocation_Default;
        if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
        {
          unint64_t v30 = __p;
          if (v88 < 0) {
            unint64_t v30 = (void **)__p[0];
          }
          *(_DWORD *)uint64_t buf = 68289539;
          *(_DWORD *)&uint8_t buf[4] = 0;
          __int16 v101 = 2082;
          double v102 = "";
          __int16 v103 = 1026;
          *(_DWORD *)int v104 = v28;
          *(_WORD *)&v104[4] = 2081;
          *(void *)&v104[6] = v30;
          _os_log_impl(&dword_25631F000, v29, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"unique valid anchor\", \"dataType\":%{public}d, \"deviceId\":%{private, location:escape_only}s}", buf, 0x22u);
        }
        if (v88 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    double v31 = ULSettings::get<ULSettings::ClusterAnchorValueStatisticsBleRssiSentinelValue>();
    double v32 = ULSettings::get<ULSettings::ClusterAnchorValueStatisticsUwbRangeSentinelValue>();
    uint64_t v33 = (void *)v98;
    if ((void)v98)
    {
      double v34 = v32;
      while (1)
      {
        BOOL v35 = (void *)v33[4];
        uint64_t v77 = v33;
        int v78 = (void *)v33[5];
        if (v35 != v78) {
          break;
        }
LABEL_128:
        uint64_t v33 = (void *)*v77;
        if (!*v77) {
          goto LABEL_129;
        }
      }
      float v36 = (CLMicroLocationProtobufHelper *)(v33 + 2);
      while (1)
      {
        uint64_t v37 = (uint64_t *)v90;
        if ((void)v90) {
          break;
        }
LABEL_127:
        v35 += 24;
        if (v35 == v78) {
          goto LABEL_128;
        }
      }
      unint64_t v82 = (CLMicroLocationProtobufHelper *)(v35 + 5);
      while (1)
      {
        int v38 = *((_DWORD *)v37 + 6);
        CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId((CLMicroLocationFingerprint::Measurement *)(v37 + 2));
        char v39 = (float *)std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::find<CLMicroLocationFingerprint::Measurement>(v35, (uint64_t)(v37 + 2));
        float v40 = v39;
        if (!v39)
        {
          if (v38 == 5)
          {
            *(void *)uint64_t buf = v36;
            BOOL v65 = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>((uint64_t)&v94, v36, (uint64_t)&std::piecewise_construct, (_OWORD **)buf);
            *(void *)uint64_t buf = __p;
            uint64_t v66 = std::__hash_table<std::__hash_value_type<std::string,std::pair<double,int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<double,int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<double,int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<double,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v65 + 4), (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)buf);
            *((double *)v66 + 5) = v31 + *((double *)v66 + 5);
            *(void *)uint64_t buf = v36;
            __int16 v67 = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>((uint64_t)&v94, v36, (uint64_t)&std::piecewise_construct, (_OWORD **)buf);
            *(void *)uint64_t buf = __p;
            uint64_t v49 = std::__hash_table<std::__hash_value_type<std::string,std::pair<double,int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<double,int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<double,int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<double,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v67 + 4), (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)buf);
LABEL_97:
            ++*((_DWORD *)v49 + 12);
          }
          else
          {
            if (v38 == 6)
            {
              *(void *)uint64_t buf = v36;
              __int16 v46 = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>((uint64_t)v92, v36, (uint64_t)&std::piecewise_construct, (_OWORD **)buf);
              *(void *)uint64_t buf = __p;
              unint64_t v47 = std::__hash_table<std::__hash_value_type<std::string,std::pair<double,int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<double,int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<double,int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<double,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v46 + 4), (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)buf);
              *((double *)v47 + 5) = v34 + *((double *)v47 + 5);
              *(void *)uint64_t buf = v36;
              __int16 v48 = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>((uint64_t)v92, v36, (uint64_t)&std::piecewise_construct, (_OWORD **)buf);
              *(void *)uint64_t buf = __p;
              uint64_t v49 = std::__hash_table<std::__hash_value_type<std::string,std::pair<double,int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<double,int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<double,int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<double,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v48 + 4), (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)buf);
              goto LABEL_97;
            }
            if (onceToken_MicroLocation_Default != -1) {
              dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_99);
            }
            float v68 = logObject_MicroLocation_Default;
            if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)uint64_t buf = 68289282;
              *(_DWORD *)&uint8_t buf[4] = 0;
              __int16 v101 = 2082;
              double v102 = "";
              __int16 v103 = 1026;
              *(_DWORD *)int v104 = v38;
              _os_log_impl(&dword_25631F000, v68, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"calculatePerClusterPerAnchorValueStatistics (sentinel), received unhandled data type\", \"data type\":%{public}d}", buf, 0x18u);
            }
            if (onceToken_MicroLocation_Default != -1) {
              dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_99);
            }
            float v69 = logObject_MicroLocation_Default;
            if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
            {
              *(_DWORD *)uint64_t buf = 68289282;
              *(_DWORD *)&uint8_t buf[4] = 0;
              __int16 v101 = 2082;
              double v102 = "";
              __int16 v103 = 1026;
              *(_DWORD *)int v104 = v38;
              _os_signpost_emit_with_name_impl(&dword_25631F000, v69, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "calculatePerClusterPerAnchorValueStatistics (sentinel), received unhandled data type", "{\"msg%{public}.0s\":\"calculatePerClusterPerAnchorValueStatistics (sentinel), received unhandled data type\", \"data type\":%{public}d}", buf, 0x18u);
            }
          }
          if (onceToken_MicroLocation_Default != -1) {
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_99);
          }
          float v56 = (id)logObject_MicroLocation_Default;
          if (!os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_124;
          }
          CLMicroLocationProtobufHelper::convertToHumanReadableString(v36, (uint64_t)v85);
          int v70 = v86;
          unint64_t v71 = (void **)v85[0];
          CLMicroLocationProtobufHelper::convertToHumanReadableString(v82, (uint64_t)v83);
          float v72 = v85;
          if (v70 < 0) {
            float v72 = v71;
          }
          float v73 = v83;
          if (v84 < 0) {
            float v73 = (void **)v83[0];
          }
          if (v88 >= 0) {
            int v74 = __p;
          }
          else {
            int v74 = (void **)__p[0];
          }
          if (v38 == 5) {
            double v75 = v31;
          }
          else {
            double v75 = v34;
          }
          *(_DWORD *)uint64_t buf = 68290307;
          *(_DWORD *)&uint8_t buf[4] = 0;
          __int16 v101 = 2082;
          double v102 = "";
          __int16 v103 = 2081;
          *(void *)int v104 = v72;
          *(_WORD *)&v104[8] = 2082;
          *(void *)&v104[10] = v73;
          *(_WORD *)&v104[18] = 1026;
          *(_DWORD *)&v104[20] = v38;
          __int16 v105 = 2081;
          double v106 = *(double *)&v74;
          __int16 v107 = 2049;
          double v108 = v75;
          CLMacAddress v63 = v56;
          unint64_t v64 = "{\"msg%{public}.0s\":\"anchor statistics\", \"clusterId\":%{private, location:escape_only}s, \"fingerpri"
                "nt UUID\":%{public, location:escape_only}s, \"dataType\":%{public}d, \"deviceId\":%{private, location:es"
                "cape_only}s, \"sentinel value\":\"%{private}f\"}";
          goto LABEL_120;
        }
        if (v38 == 6)
        {
          float v50 = v39[7];
          *(void *)uint64_t buf = v36;
          float v51 = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>((uint64_t)v92, v36, (uint64_t)&std::piecewise_construct, (_OWORD **)buf);
          *(void *)uint64_t buf = __p;
          float v52 = std::__hash_table<std::__hash_value_type<std::string,std::pair<double,int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<double,int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<double,int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<double,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v51 + 4), (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)buf);
          *((double *)v52 + 5) = *((double *)v52 + 5) + v50;
          *(void *)uint64_t buf = v36;
          float v53 = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>((uint64_t)v92, v36, (uint64_t)&std::piecewise_construct, (_OWORD **)buf);
          *(void *)uint64_t buf = __p;
          unint64_t v45 = std::__hash_table<std::__hash_value_type<std::string,std::pair<double,int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<double,int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<double,int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<double,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v53 + 4), (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)buf);
        }
        else
        {
          if (v38 != 5)
          {
            if (onceToken_MicroLocation_Default != -1) {
              dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_99);
            }
            float v54 = logObject_MicroLocation_Default;
            if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)uint64_t buf = 68289282;
              *(_DWORD *)&uint8_t buf[4] = 0;
              __int16 v101 = 2082;
              double v102 = "";
              __int16 v103 = 1026;
              *(_DWORD *)int v104 = v38;
              _os_log_impl(&dword_25631F000, v54, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"calculatePerClusterPerAnchorValueStatistics, received unhandled data type\", \"data type\":%{public}d}", buf, 0x18u);
            }
            if (onceToken_MicroLocation_Default != -1) {
              dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_99);
            }
            float v55 = logObject_MicroLocation_Default;
            if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
            {
              *(_DWORD *)uint64_t buf = 68289282;
              *(_DWORD *)&uint8_t buf[4] = 0;
              __int16 v101 = 2082;
              double v102 = "";
              __int16 v103 = 1026;
              *(_DWORD *)int v104 = v38;
              _os_signpost_emit_with_name_impl(&dword_25631F000, v55, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "calculatePerClusterPerAnchorValueStatistics, received unhandled data type", "{\"msg%{public}.0s\":\"calculatePerClusterPerAnchorValueStatistics, received unhandled data type\", \"data type\":%{public}d}", buf, 0x18u);
            }
            goto LABEL_85;
          }
          float v41 = v39[7];
          *(void *)uint64_t buf = v36;
          __int16 v42 = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>((uint64_t)&v94, v36, (uint64_t)&std::piecewise_construct, (_OWORD **)buf);
          *(void *)uint64_t buf = __p;
          uint64_t v43 = std::__hash_table<std::__hash_value_type<std::string,std::pair<double,int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<double,int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<double,int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<double,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v42 + 4), (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)buf);
          *((double *)v43 + 5) = *((double *)v43 + 5) + v41;
          *(void *)uint64_t buf = v36;
          __int16 v44 = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>((uint64_t)&v94, v36, (uint64_t)&std::piecewise_construct, (_OWORD **)buf);
          *(void *)uint64_t buf = __p;
          unint64_t v45 = std::__hash_table<std::__hash_value_type<std::string,std::pair<double,int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<double,int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<double,int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<double,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v44 + 4), (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)buf);
        }
        ++*((_DWORD *)v45 + 12);
LABEL_85:
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_99);
        }
        float v56 = (id)logObject_MicroLocation_Default;
        if (!os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_124;
        }
        CLMicroLocationProtobufHelper::convertToHumanReadableString(v36, (uint64_t)v85);
        int v57 = v86;
        float v58 = (void **)v85[0];
        CLMicroLocationProtobufHelper::convertToHumanReadableString(v82, (uint64_t)v83);
        float v59 = v85;
        if (v57 < 0) {
          float v59 = v58;
        }
        float v60 = v83;
        if (v84 < 0) {
          float v60 = (void **)v83[0];
        }
        if (v88 >= 0) {
          float v61 = __p;
        }
        else {
          float v61 = (void **)__p[0];
        }
        double v62 = v40[7];
        *(_DWORD *)uint64_t buf = 68290307;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v101 = 2082;
        double v102 = "";
        __int16 v103 = 2081;
        *(void *)int v104 = v59;
        *(_WORD *)&v104[8] = 2082;
        *(void *)&v104[10] = v60;
        *(_WORD *)&v104[18] = 1026;
        *(_DWORD *)&v104[20] = v38;
        __int16 v105 = 2081;
        double v106 = *(double *)&v61;
        __int16 v107 = 2049;
        double v108 = v62;
        CLMacAddress v63 = v56;
        unint64_t v64 = "{\"msg%{public}.0s\":\"anchor statistics\", \"clusterId\":%{private, location:escape_only}s, \"fingerprint"
              " UUID\":%{public, location:escape_only}s, \"dataType\":%{public}d, \"deviceId\":%{private, location:escape"
              "_only}s, \"measured value\":\"%{private}f\"}";
LABEL_120:
        _os_log_impl(&dword_25631F000, v63, OS_LOG_TYPE_DEBUG, v64, buf, 0x40u);
        if (v84 < 0) {
          operator delete(v83[0]);
        }
        if (v86 < 0) {
          operator delete(v85[0]);
        }
LABEL_124:

        if (v88 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v37 = (uint64_t *)*v37;
        if (!v37) {
          goto LABEL_127;
        }
      }
    }
LABEL_129:
    CLMicroLocationAnchorValueStatisticsMap::updateInternalMapWithSumCountOfMeasuredValue((uint64_t)this, (uint64_t)&v94, 5);
    CLMicroLocationAnchorValueStatisticsMap::updateInternalMapWithSumCountOfMeasuredValue((uint64_t)this, (uint64_t)v92, 6);
    std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table((uint64_t)&v89);
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>>>::~__hash_table((uint64_t)v92);
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>>>::~__hash_table((uint64_t)&v94);
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>>>::~__hash_table((uint64_t)&v97);
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_99);
    }
    long long v12 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v101 = 2082;
      double v102 = "";
      _os_log_impl(&dword_25631F000, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"most recent model is not valid, will not calculate per cluster per anchor statistics\"}", buf, 0x12u);
    }
  }
}

void sub_256491278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
}

double ULSettings::get<ULSettings::ClusterAnchorValueStatisticsBleRssiSentinelValue>()
{
  os_log_t v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  uint64_t v2 = [NSString stringWithUTF8String:"ULClusterAnchorValueStatisticsBleRssiSentinelValue"];
  uint64_t v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    [v3 doubleValue];
  }
  else {
    [&unk_2704F0FC0 doubleValue];
  }
  double v5 = v4;

  return v5;
}

void sub_25649143C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double ULSettings::get<ULSettings::ClusterAnchorValueStatisticsUwbRangeSentinelValue>()
{
  os_log_t v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  uint64_t v2 = [NSString stringWithUTF8String:"ULClusterAnchorValueStatisticsUwbRangeSentinelValue"];
  uint64_t v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    [v3 doubleValue];
  }
  else {
    [&unk_2704F0FD0 doubleValue];
  }
  double v5 = v4;

  return v5;
}

void sub_256491544(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationAnchorValueStatisticsMap::updateInternalMapWithSumCountOfMeasuredValue(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
  {
    for (uint64_t j = (uint64_t *)i[6]; j; uint64_t j = (uint64_t *)*j)
    {
      double v7 = *((double *)j + 5);
      int v8 = *((_DWORD *)j + 12);
      if (a3 == 6)
      {
        *(void *)uint64_t buf = i + 2;
        uint64_t v13 = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>(a1, i + 2, (uint64_t)&std::piecewise_construct, (_OWORD **)buf);
        *(void *)uint64_t buf = j + 2;
        *((double *)std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v13 + 4), (unsigned __int8 *)j + 16, (uint64_t)&std::piecewise_construct, (long long **)buf)+ 6) = v7 / (double)v8;
        *(void *)uint64_t buf = i + 2;
        uint64_t v14 = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>(a1, i + 2, (uint64_t)&std::piecewise_construct, (_OWORD **)buf);
        *(void *)uint64_t buf = j + 2;
        if (fabs(*((double *)std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v14 + 4), (unsigned __int8 *)j + 16, (uint64_t)&std::piecewise_construct, (long long **)buf)+ 5)) < 2.22044605e-16)
        {
          double v15 = ULSettings::get<ULSettings::ClusterAnchorValueStatisticsBleRssiSentinelValue>();
          *(void *)uint64_t buf = i + 2;
          uint64_t v16 = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>(a1, i + 2, (uint64_t)&std::piecewise_construct, (_OWORD **)buf);
          *(void *)uint64_t buf = j + 2;
          *((double *)std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v16 + 4), (unsigned __int8 *)j + 16, (uint64_t)&std::piecewise_construct, (long long **)buf)+ 5) = v15;
        }
      }
      else if (a3 == 5)
      {
        *(void *)uint64_t buf = i + 2;
        uint64_t v9 = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>(a1, i + 2, (uint64_t)&std::piecewise_construct, (_OWORD **)buf);
        *(void *)uint64_t buf = j + 2;
        *((double *)std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v9 + 4), (unsigned __int8 *)j + 16, (uint64_t)&std::piecewise_construct, (long long **)buf)+ 5) = v7 / (double)v8;
        *(void *)uint64_t buf = i + 2;
        uint64_t v10 = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>(a1, i + 2, (uint64_t)&std::piecewise_construct, (_OWORD **)buf);
        *(void *)uint64_t buf = j + 2;
        if (fabs(*((double *)std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v10 + 4), (unsigned __int8 *)j + 16, (uint64_t)&std::piecewise_construct, (long long **)buf)+ 6)) < 2.22044605e-16)
        {
          double v11 = ULSettings::get<ULSettings::ClusterAnchorValueStatisticsUwbRangeSentinelValue>();
          *(void *)uint64_t buf = i + 2;
          long long v12 = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>(a1, i + 2, (uint64_t)&std::piecewise_construct, (_OWORD **)buf);
          *(void *)uint64_t buf = j + 2;
          *((double *)std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v12 + 4), (unsigned __int8 *)j + 16, (uint64_t)&std::piecewise_construct, (long long **)buf)+ 6) = v11;
        }
      }
      else
      {
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_99);
        }
        int v17 = logObject_MicroLocation_Default;
        if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t buf = 68289282;
          *(_DWORD *)&uint8_t buf[4] = 0;
          __int16 v20 = 2082;
          BOOL v21 = "";
          __int16 v22 = 1026;
          int v23 = a3;
          _os_log_impl(&dword_25631F000, v17, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"calculatePerClusterPerAnchorValueStatistics, received unhandled data type\", \"data type\":%{public}d}", buf, 0x18u);
        }
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_99);
        }
        uint64_t v18 = logObject_MicroLocation_Default;
        if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
        {
          *(_DWORD *)uint64_t buf = 68289282;
          *(_DWORD *)&uint8_t buf[4] = 0;
          __int16 v20 = 2082;
          BOOL v21 = "";
          __int16 v22 = 1026;
          int v23 = a3;
          _os_signpost_emit_with_name_impl(&dword_25631F000, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "calculatePerClusterPerAnchorValueStatistics, received unhandled data type", "{\"msg%{public}.0s\":\"calculatePerClusterPerAnchorValueStatistics, received unhandled data type\", \"data type\":%{public}d}", buf, 0x18u);
        }
      }
    }
  }
}

void CLMicroLocationAnchorValueStatisticsMap::toProtobuf(CLMicroLocationAnchorValueStatisticsMap *this@<X0>, int *a2@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  CLMicroLocationProto::ClusterAnchorValueStatisticsVector::ClusterAnchorValueStatisticsVector((uint64_t)a2);
  double v4 = (void *)*((void *)this + 2);
  if (v4)
  {
    double v5 = (std::string *)MEMORY[0x263F8C740];
    do
    {
      int v6 = a2[5];
      uint64_t v7 = a2[4];
      if ((int)v7 >= v6)
      {
        if (v6 == a2[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 2));
          int v6 = a2[5];
        }
        a2[5] = v6 + 1;
        wireless_diagnostics::google::protobuf::internal::GenericTypeHandler<CLMicroLocationProto::ClusterAnchorValueStatistics>::New();
      }
      uint64_t v8 = *((void *)a2 + 1);
      a2[4] = v7 + 1;
      uint64_t v9 = *(void *)(v8 + 8 * v7);
      if (v9)
      {
        *(_DWORD *)(v9 + 44) |= 2u;
        if (*(std::string **)(v9 + 32) == v5) {
          operator new();
        }
        MEMORY[0x25A2A6090]();
        for (uint64_t i = (uint64_t *)v4[6]; i; uint64_t i = (uint64_t *)*i)
        {
          int v11 = *(_DWORD *)(v9 + 20);
          uint64_t v12 = *(int *)(v9 + 16);
          if ((int)v12 >= v11)
          {
            if (v11 == *(_DWORD *)(v9 + 24))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v9 + 8));
              int v11 = *(_DWORD *)(v9 + 20);
            }
            *(_DWORD *)(v9 + 20) = v11 + 1;
            wireless_diagnostics::google::protobuf::internal::GenericTypeHandler<CLMicroLocationProto::AnchorValueStatistics>::New();
          }
          uint64_t v13 = *(void *)(v9 + 8);
          *(_DWORD *)(v9 + 16) = v12 + 1;
          uint64_t v14 = *(void *)(v13 + 8 * v12);
          if (v14)
          {
            *(_DWORD *)(v14 + 36) |= 4u;
            double v15 = *(std::string **)(v14 + 24);
            if (v15 == v5) {
              operator new();
            }
            std::string::operator=(v15, (const std::string *)(i + 2));
            *(_DWORD *)(v14 + 36) |= 3u;
            *(_OWORD *)(v14 + 8) = *(_OWORD *)(i + 5);
          }
          else
          {
            if (onceToken_MicroLocation_Default != -1) {
              dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_99);
            }
            uint64_t v16 = logObject_MicroLocation_Default;
            if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)uint64_t buf = 68289026;
              int v21 = 0;
              __int16 v22 = 2082;
              int v23 = "";
              _os_log_impl(&dword_25631F000, v16, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"got nullptr from CLMicroLocationProto add_anchorvaluestatistics\"}", buf, 0x12u);
            }
            if (onceToken_MicroLocation_Default != -1) {
              dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_99);
            }
            int v17 = logObject_MicroLocation_Default;
            if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
            {
              *(_DWORD *)uint64_t buf = 68289026;
              int v21 = 0;
              __int16 v22 = 2082;
              int v23 = "";
              _os_signpost_emit_with_name_impl(&dword_25631F000, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "got nullptr from CLMicroLocationProto add_anchorvaluestatistics", "{\"msg%{public}.0s\":\"got nullptr from CLMicroLocationProto add_anchorvaluestatistics\"}", buf, 0x12u);
            }
          }
        }
      }
      else
      {
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_99);
        }
        uint64_t v18 = logObject_MicroLocation_Default;
        if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t buf = 68289026;
          int v21 = 0;
          __int16 v22 = 2082;
          int v23 = "";
          _os_log_impl(&dword_25631F000, v18, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"got nullptr from CLMicroLocationProto add_clusteranchorvaluestatisticsvector\"}", buf, 0x12u);
        }
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_99);
        }
        uint64_t v19 = logObject_MicroLocation_Default;
        if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
        {
          *(_DWORD *)uint64_t buf = 68289026;
          int v21 = 0;
          __int16 v22 = 2082;
          int v23 = "";
          _os_signpost_emit_with_name_impl(&dword_25631F000, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "got nullptr from CLMicroLocationProto add_clusteranchorvaluestatisticsvector", "{\"msg%{public}.0s\":\"got nullptr from CLMicroLocationProto add_clusteranchorvaluestatisticsvector\"}", buf, 0x12u);
        }
      }
      double v4 = (void *)*v4;
    }
    while (v4);
  }
}

void sub_256491D8C(_Unwind_Exception *a1)
{
  CLMicroLocationProto::ClusterAnchorValueStatisticsVector::~ClusterAnchorValueStatisticsVector(v1);
  _Unwind_Resume(a1);
}

void CLMicroLocationAnchorValueStatisticsMap::toConfigurationEntry(CLMicroLocationAnchorValueStatisticsMap *this@<X0>, uint64_t a2@<X8>)
{
  v5.n128_f64[0] = CLMicroLocationProto::AnchorValueStatisticsConfiguration::AnchorValueStatisticsConfiguration((CLMicroLocationProto::AnchorValueStatisticsConfiguration *)v11);
  v14 |= 4u;
  if (v13 == MEMORY[0x263F8C740]) {
    operator new();
  }
  MEMORY[0x25A2A6090](v5);
  v14 |= 2u;
  int v6 = v12;
  if (!v12) {
    operator new();
  }
  CLMicroLocationAnchorValueStatisticsMap::toProtobuf(this, v10);
  CLMicroLocationProto::ClusterAnchorValueStatisticsVector::CopyFrom(v6, (const CLMicroLocationProto::ClusterAnchorValueStatisticsVector *)v10);
  CLMicroLocationProto::ClusterAnchorValueStatisticsVector::~ClusterAnchorValueStatisticsVector((CLMicroLocationProto::ClusterAnchorValueStatisticsVector *)v10);
  double v7 = cl::chrono::CFAbsoluteTimeClock::now();
  CLMicroLocationProtobufHelper::createConfiguration<CLMicroLocationProto::AnchorValueStatisticsConfiguration>((CLMicroLocationProto::Configuration *)v11, (uint64_t)v10, v7);
  std::string::basic_string[abi:ne180100]<0>(__p, "home");
  CLMicroLocationConfigurationTable::Entry::Entry(a2, __p, v10, 0, 0);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  CLMicroLocationProto::Configuration::~Configuration((CLMicroLocationProto::Configuration *)v10);
  CLMicroLocationProto::AnchorValueStatisticsConfiguration::~AnchorValueStatisticsConfiguration((CLMicroLocationProto::AnchorValueStatisticsConfiguration *)v11);
}

void sub_256491EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  MEMORY[0x25A2A6340](v16, 0x1081C4054B19868);
  CLMicroLocationProto::AnchorValueStatisticsConfiguration::~AnchorValueStatisticsConfiguration((CLMicroLocationProto::AnchorValueStatisticsConfiguration *)(v17 - 72));
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createConfiguration<CLMicroLocationProto::AnchorValueStatisticsConfiguration>(CLMicroLocationProto::Configuration *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  CLMicroLocationProto::Configuration::Configuration((CLMicroLocationProto::Configuration *)a2);
  unsigned int v6 = *((_DWORD *)a1 + 6);
  if (!CLMicroLocationProto::ConfigurationType_IsValid((CLMicroLocationProto *)v6)) {
    __assert_rtn("set_type", "microlocation.pb.h", 22117, "::CLMicroLocationProto::ConfigurationType_IsValid(value)");
  }
  int v8 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 40) = v6;
  *(_DWORD *)(a2 + 48) = v8 | 3;
  *(double *)(a2 + 8) = a3;
  CLMicroLocationProtobufHelper::setSpecificConfiguration((CLMicroLocationProtobufHelper *)a2, a1, v7);
}

void sub_256491FF8(_Unwind_Exception *a1)
{
  CLMicroLocationProto::Configuration::~Configuration(v1);
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_77()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

void wireless_diagnostics::google::protobuf::internal::GenericTypeHandler<CLMicroLocationProto::AnchorAppearance>::New()
{
}

void sub_256492090(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x10A1C4052215422);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__variant::__value_visitor<CLMicroLocationUtils::DeviceIdVisitor<boost::uuids::uuid> &>::operator()[abi:ne180100]<std::__variant_detail::__alt<0ul,unsigned long long> const&>(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)a1 + 24);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);
  return v2();
}

uint64_t std::__variant_detail::__visitation::__variant::__value_visitor<CLMicroLocationUtils::DeviceIdVisitor<boost::uuids::uuid> &>::operator()[abi:ne180100]<std::__variant_detail::__alt<1ul,boost::uuids::uuid> const&>(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)a1 + 56);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);
  return v2();
}

uint64_t std::__variant_detail::__visitation::__variant::__value_visitor<CLMicroLocationUtils::DeviceIdVisitor<boost::uuids::uuid> &>::operator()[abi:ne180100]<std::__variant_detail::__alt<2ul,std::string> const&>(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)a1 + 88);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);
  return v2();
}

void wireless_diagnostics::google::protobuf::internal::GenericTypeHandler<CLMicroLocationProto::ClusterAnchorValueStatistics>::New()
{
}

void sub_2564921FC(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x10A1C404586787ALL);
  _Unwind_Resume(a1);
}

void wireless_diagnostics::google::protobuf::internal::GenericTypeHandler<CLMicroLocationProto::AnchorValueStatistics>::New()
{
}

void sub_256492260(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x10A1C40E1D8D1C5);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__emplace_unique_key_args<boost::uuids::uuid,std::pair<boost::uuids::uuid const,CLMicroLocationAnchorAppearance>>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  do
    v7 ^= (v7 << 6) + (v7 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v6++);
  while (v6 != 16);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v10)
    {
      int v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == *a2 && v11[3] == a2[1]) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v3) {
              break;
            }
          }
          int v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  int v11 = operator new(0x38uLL);
  *int v11 = 0;
  v11[1] = v7;
  long long v14 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v11 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v11 + 2) = v14;
  int v11[6] = *(void *)(a3 + 32);
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
  }
  uint64_t v21 = *(void *)a1;
  __int16 v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *int v11 = *v22;
LABEL_44:
    void *v22 = v11;
    goto LABEL_45;
  }
  *int v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v21 + 8 * v3) = a1 + 16;
  if (*v11)
  {
    unint64_t v23 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8) {
        v23 %= v8;
      }
    }
    else
    {
      v23 &= v8 - 1;
    }
    __int16 v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_2564924CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>(uint64_t a1, void *a2, uint64_t a3, long long **a4)
{
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  do
    v8 ^= (v8 << 6) + (v8 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v7++);
  while (v7 != 16);
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    int v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      unint64_t v12 = *v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == *a2 && v12[3] == a2[1]) {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4) {
              break;
            }
          }
          unint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  unint64_t v12 = operator new(0x38uLL);
  *unint64_t v12 = 0;
  v12[1] = v8;
  long long v15 = **a4;
  v12[6] = 0;
  *((_OWORD *)v12 + 1) = v15;
  *((_OWORD *)v12 + 2) = xmmword_25651B2C0;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v22 = *(void *)a1;
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *unint64_t v12 = *v23;
LABEL_44:
    *unint64_t v23 = v12;
    goto LABEL_45;
  }
  *unint64_t v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v22 + 8 * v4) = a1 + 16;
  if (*v12)
  {
    unint64_t v24 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9) {
        v24 %= v9;
      }
    }
    else
    {
      v24 &= v9 - 1;
    }
    unint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_256492730(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*,false>(uint64_t result, double *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint8x8_t v10 = (double *)result;
LABEL_2:
  int v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint8x8_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = a2 - v11;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          double v22 = *v11;
          double v23 = *(a2 - 1);
          if (*v11 < v23)
          {
            *int v11 = v23;
            *(a2 - 1) = v22;
          }
          break;
        case 3uLL:
          uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*>(v11, v11 + 1, a2 - 1);
          break;
        case 4uLL:
          uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*>(v11, v11 + 1, v11 + 2, a2 - 1);
          break;
        case 5uLL:
          uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*>(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 191) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*>(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    float v17 = &v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*>(v11, &v11[v15 >> 1], a2 - 1);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*>(v11 + 1, v17 - 1, a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*>(v11 + 2, &v11[v16 + 1], a2 - 3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*>(v17 - 1, v17, &v11[v16 + 1]);
      double v18 = *v11;
      *int v11 = *v17;
      *float v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*>(&v11[v15 >> 1], v11, a2 - 1);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (*v11 >= *(v11 - 1))
    {
      uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> *,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &>(v11, a2);
      int v11 = (double *)result;
      goto LABEL_19;
    }
LABEL_14:
    unint64_t v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> *,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &>(v11, a2);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*>(v11, v19);
    int v11 = v19 + 1;
    uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*>(v19 + 1, a2);
    if (result)
    {
      a4 = -v13;
      a2 = v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      uint64_t result = std::__introsort<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*,false>(v10, v19, a3, -v13, a5 & 1);
      int v11 = v19 + 1;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  unint64_t v24 = v11 + 1;
  BOOL v26 = v11 == a2 || v24 == a2;
  if (a5)
  {
    if (!v26)
    {
      uint64_t v27 = 0;
      int v28 = v11;
      do
      {
        double v30 = *v28;
        double v29 = v28[1];
        int v28 = v24;
        if (v30 < v29)
        {
          uint64_t v31 = v27;
          while (1)
          {
            *(double *)((char *)v11 + v31 + 8) = v30;
            if (!v31) {
              break;
            }
            double v30 = *(double *)((char *)v11 + v31 - 8);
            v31 -= 8;
            if (v30 >= v29)
            {
              double v32 = (double *)((char *)v11 + v31 + 8);
              goto LABEL_50;
            }
          }
          double v32 = v11;
LABEL_50:
          *double v32 = v29;
        }
        unint64_t v24 = v28 + 1;
        v27 += 8;
      }
      while (v28 + 1 != a2);
    }
  }
  else if (!v26)
  {
    do
    {
      double v34 = *v10;
      double v33 = v10[1];
      uint8x8_t v10 = v24;
      if (v34 < v33)
      {
        BOOL v35 = v24;
        do
        {
          double *v35 = v34;
          double v34 = *(v35 - 2);
          --v35;
        }
        while (v34 < v33);
        double *v35 = v33;
      }
      ++v24;
    }
    while (v10 + 1 != a2);
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*>(double *a1, double *a2, double *a3)
{
  double v3 = *a1;
  double v4 = *a2;
  double v5 = *a3;
  if (*a1 < *a2)
  {
    if (v4 < v5)
    {
      *a1 = v5;
      *a3 = v3;
      return 1;
    }
    *a1 = v4;
    *a2 = v3;
    if (v3 >= *a3) {
      return 1;
    }
    *a2 = *a3;
    *a3 = v3;
    return 2;
  }
  if (v4 < v5)
  {
    *a2 = v5;
    *a3 = v4;
    double v6 = *a1;
    if (*a1 >= *a2) {
      return 1;
    }
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

double *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> *,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &>(double *a1, double *a2)
{
  double v2 = *a1;
  double v3 = *a1;
  if (*(a2 - 1) >= *a1)
  {
    double v6 = a1 + 1;
    do
    {
      double v4 = v6;
      if (v6 >= a2) {
        break;
      }
      ++v6;
    }
    while (*v4 >= v3);
  }
  else
  {
    double v4 = a1;
    do
    {
      double v5 = v4[1];
      ++v4;
    }
    while (v5 >= v3);
  }
  if (v4 < a2)
  {
    do
      double v7 = *--a2;
    while (v7 < v3);
  }
  if (v4 < a2)
  {
    double v8 = *v4;
    double v9 = *a2;
    do
    {
      double *v4 = v9;
      *a2 = v8;
      do
      {
        double v10 = v4[1];
        ++v4;
        double v8 = v10;
      }
      while (v10 >= v3);
      do
      {
        double v11 = *--a2;
        double v12 = v11;
      }
      while (v11 < v3);
      double v9 = v12;
    }
    while (v4 < a2);
  }
  if (v4 - 1 != a1) {
    *a1 = *(v4 - 1);
  }
  *(v4 - 1) = v2;
  return v4;
}

double *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> *,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &>(double *a1, double *a2)
{
  uint64_t v2 = 0;
  double v3 = *a1;
  double v4 = *a1;
  do
    double v5 = a1[++v2];
  while (v5 > v4);
  double v6 = &a1[v2];
  double v7 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v6 >= a2) {
        break;
      }
      double v9 = *--a2;
    }
    while (v9 <= v4);
  }
  else
  {
    do
      double v8 = *--a2;
    while (v8 <= v4);
  }
  if (v6 < a2)
  {
    double v10 = *a2;
    double v11 = &a1[v2];
    double v12 = a2;
    do
    {
      *double v11 = v10;
      *double v12 = v5;
      do
      {
        double v13 = v11[1];
        ++v11;
        double v5 = v13;
      }
      while (v13 > v4);
      do
      {
        double v14 = *--v12;
        double v15 = v14;
      }
      while (v14 <= v4);
      double v10 = v15;
    }
    while (v11 < v12);
    double v7 = v11 - 1;
  }
  if (v7 != a1) {
    *a1 = *v7;
  }
  *double v7 = v3;
  return v7;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*>(double *a1, double *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      double v6 = *a1;
      double v7 = *(a2 - 1);
      if (*a1 < v7)
      {
        *a1 = v7;
        *(a2 - 1) = v6;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      double v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*>(a1, a1 + 1, a1 + 2);
      double v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    double v12 = *v8;
    double v13 = *v9;
    if (*v8 < *v9)
    {
      uint64_t v14 = v11;
      while (1)
      {
        *(double *)((char *)a1 + v14) = v12;
        uint64_t v15 = v14 - 8;
        if (v14 == 8) {
          break;
        }
        double v12 = *(double *)((char *)a1 + v14 - 16);
        v14 -= 8;
        if (v12 >= v13)
        {
          unint64_t v16 = (double *)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      unint64_t v16 = a1;
LABEL_12:
      double *v16 = v13;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    double v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*>(double *a1, double *a2, double *a3, double *a4)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*>(a1, a2, a3);
  double v9 = *a3;
  if (*a3 < *a4)
  {
    *a3 = *a4;
    *a4 = v9;
    double v10 = *a2;
    if (*a2 < *a3)
    {
      *a2 = *a3;
      *a3 = v10;
      double v11 = *a1;
      if (*a1 < *a2)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*>(double *a1, double *a2, double *a3, double *a4, double *a5)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*>(a1, a2, a3, a4);
  double v11 = *a4;
  if (*a4 < *a5)
  {
    *a4 = *a5;
    *a5 = v11;
    double v12 = *a3;
    if (*a3 < *a4)
    {
      *a3 = *a4;
      *a4 = v12;
      double v13 = *a2;
      if (*a2 < *a3)
      {
        *a2 = *a3;
        *a3 = v13;
        double v14 = *a1;
        if (*a1 < *a2)
        {
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

double *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*>(double *a1, double *a2, double *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    double v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      double v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    double v13 = v6;
    if (v6 != a3)
    {
      double v14 = v6;
      do
      {
        double v15 = *v14;
        if (*a1 < *v14)
        {
          double *v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      double v13 = a3;
    }
    if (v8 >= 9)
    {
      uint64_t v16 = (unint64_t)v8 >> 3;
      do
      {
        uint64_t v17 = 0;
        double v18 = *a1;
        unint64_t v19 = a1;
        do
        {
          char v20 = v19;
          v19 += v17 + 1;
          uint64_t v21 = 2 * v17;
          uint64_t v17 = (2 * v17) | 1;
          uint64_t v22 = v21 + 2;
          if (v22 < v16 && v19[1] < *v19)
          {
            ++v19;
            uint64_t v17 = v22;
          }
          double *v20 = *v19;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if (v19 != --v6)
        {
          double *v19 = *v6;
          *double v6 = v18;
          uint64_t v23 = (char *)v19 - (char *)a1 + 8;
          if (v23 < 9) {
            continue;
          }
          unint64_t v24 = (((unint64_t)v23 >> 3) - 2) >> 1;
          double v25 = &a1[v24];
          double v18 = *v19;
          double v26 = *v25;
          if (*v19 >= *v25) {
            continue;
          }
          do
          {
            double *v19 = v26;
            unint64_t v19 = v25;
            if (!v24) {
              break;
            }
            unint64_t v24 = (v24 - 1) >> 1;
            double v25 = &a1[v24];
            double v26 = *v25;
          }
          while (*v25 > v18);
        }
        double *v19 = v18;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*>(uint64_t result, uint64_t a2, uint64_t a3, double *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = (v4 >> 2) + 1;
      uint64_t v8 = (double *)(result + 8 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3 && v8[1] < *v8)
      {
        ++v8;
        uint64_t v7 = v9;
      }
      double v10 = *a4;
      double v11 = *v8;
      if (*a4 >= *v8)
      {
        do
        {
          *a4 = v11;
          a4 = v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v12 = 2 * v7;
          uint64_t v7 = (2 * v7) | 1;
          uint64_t v8 = (double *)(result + 8 * v7);
          uint64_t v13 = v12 + 2;
          if (v13 < a3 && v8[1] < *v8)
          {
            ++v8;
            uint64_t v7 = v13;
          }
          double v11 = *v8;
        }
        while (*v8 <= v10);
        *a4 = v10;
      }
    }
  }
  return result;
}

void std::__function::__func<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_0,std::allocator<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_0>,boost::uuids::uuid ()(unsigned long long const&)>::~__func()
{
}

void *std::__function::__func<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_0,std::allocator<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_0>,boost::uuids::uuid ()(unsigned long long const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_2704E13E0;
  return result;
}

void std::__function::__func<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_0,std::allocator<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_0>,boost::uuids::uuid ()(unsigned long long const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_2704E13E0;
}

uint64_t std::__function::__func<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_0,std::allocator<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_0>,boost::uuids::uuid ()(unsigned long long const&)>::operator()()
{
  return 0;
}

uint64_t std::__function::__func<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_0,std::allocator<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_0>,boost::uuids::uuid ()(unsigned long long const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_0,std::allocator<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_0>,boost::uuids::uuid ()(unsigned long long const&)>::target_type()
{
}

void *std::__function::__value_func<boost::uuids::uuid ()(unsigned long long const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_1,std::allocator<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_1>,boost::uuids::uuid ()(boost::uuids::uuid const&)>::~__func()
{
}

void *std::__function::__func<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_1,std::allocator<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_1>,boost::uuids::uuid ()(boost::uuids::uuid const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_2704E1470;
  return result;
}

void std::__function::__func<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_1,std::allocator<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_1>,boost::uuids::uuid ()(boost::uuids::uuid const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_2704E1470;
}

uint64_t std::__function::__func<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_1,std::allocator<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_1>,boost::uuids::uuid ()(boost::uuids::uuid const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(void *)a2;
}

uint64_t std::__function::__func<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_1,std::allocator<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_1>,boost::uuids::uuid ()(boost::uuids::uuid const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_1,std::allocator<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_1>,boost::uuids::uuid ()(boost::uuids::uuid const&)>::target_type()
{
}

void *std::__function::__value_func<boost::uuids::uuid ()(boost::uuids::uuid const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_2,std::allocator<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_2>,boost::uuids::uuid ()(std::string const&)>::~__func()
{
}

void *std::__function::__func<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_2,std::allocator<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_2>,boost::uuids::uuid ()(std::string const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_2704E1500;
  return result;
}

void std::__function::__func<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_2,std::allocator<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_2>,boost::uuids::uuid ()(std::string const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_2704E1500;
}

uint64_t std::__function::__func<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_2,std::allocator<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_2>,boost::uuids::uuid ()(std::string const&)>::operator()()
{
  return 0;
}

uint64_t std::__function::__func<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_2,std::allocator<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_2>,boost::uuids::uuid ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_2,std::allocator<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_2>,boost::uuids::uuid ()(std::string const&)>::target_type()
{
}

void *std::__function::__value_func<boost::uuids::uuid ()(std::string const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t CLMicroLocationUtils::DeviceIdVisitor<boost::uuids::uuid>::DeviceIdVisitor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = std::__function::__value_func<boost::uuids::uuid ()(unsigned long long const&)>::__value_func[abi:ne180100](a1, a2);
  std::__function::__value_func<boost::uuids::uuid ()(boost::uuids::uuid const&)>::__value_func[abi:ne180100](v7 + 32, a3);
  std::__function::__value_func<boost::uuids::uuid ()(std::string const&)>::__value_func[abi:ne180100](a1 + 64, a4);
  return a1;
}

void sub_2564936D4(_Unwind_Exception *a1)
{
  std::__function::__value_func<boost::uuids::uuid ()(boost::uuids::uuid const&)>::~__value_func[abi:ne180100](v2);
  std::__function::__value_func<boost::uuids::uuid ()(unsigned long long const&)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<boost::uuids::uuid ()(unsigned long long const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<boost::uuids::uuid ()(boost::uuids::uuid const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<boost::uuids::uuid ()(std::string const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::__emplace_unique_key_args<std::string,std::string&,AnchorValueStatistics>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __n128 *a4)
{
  uint64_t v9 = (void *)(a1 + 24);
  unint64_t v10 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    double v15 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      for (uint64_t i = *v15; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v11)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12) {
              v17 %= v12;
            }
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::__construct_node_hash<std::string&,AnchorValueStatistics>(a1, v11, a3, a4, (uint64_t)v27);
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    BOOL v20 = 1;
    if (v12 >= 3) {
      BOOL v20 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v12);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v23);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
      else {
        unint64_t v4 = v11;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
  }
  unint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)v27[0] = *v24;
    *unint64_t v24 = v27[0];
  }
  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v25 = *(void *)(*(void *)v27[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v25 >= v12) {
          v25 %= v12;
        }
      }
      else
      {
        v25 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v25) = v27[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v27[0];
  ++*v9;
  return i;
}

void sub_256493B24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,AnchorValueStatistics>,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::__construct_node_hash<std::string&,AnchorValueStatistics>@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unint64_t v10 = (char *)operator new(0x38uLL);
  *(void *)(a5 + 8) = v9;
  *(void *)a5 = v10;
  *(unsigned char *)(a5 + 16) = 0;
  *(void *)unint64_t v10 = 0;
  *((void *)v10 + 1) = a2;
  unint64_t v11 = (std::string *)(v10 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v10 + 4) = *(void *)(a3 + 16);
  }
  __n128 result = *a4;
  *(__n128 *)(v10 + 40) = *a4;
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_256493BE4(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,AnchorValueStatistics>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>>>::__emplace_unique_key_args<boost::uuids::uuid,boost::uuids::uuid&,std::unordered_map<std::string,AnchorValueStatistics>>(uint64_t a1, void *a2, _OWORD *a3, uint64_t *a4)
{
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  do
    v9 ^= (v9 << 6) + (v9 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v8++);
  while (v8 != 16);
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
    unint64_t v12 = *(void **)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      uint8x8_t v13 = (void *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == *a2 && v13[3] == a2[1]) {
              return v13;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10) {
                v14 %= v10;
              }
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4) {
              break;
            }
          }
          uint8x8_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  uint64_t v16 = a1 + 16;
  unint64_t v17 = operator new(0x48uLL);
  v27[0] = v17;
  v27[1] = a1 + 16;
  *unint64_t v17 = 0;
  v17[1] = v9;
  *((_OWORD *)v17 + 1) = *a3;
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__hash_table((uint64_t)(v17 + 4), a4);
  char v28 = 1;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    BOOL v20 = 1;
    if (v10 >= 3) {
      BOOL v20 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v10);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v23);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  unint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)v27[0] = *v24;
    *unint64_t v24 = v27[0];
  }
  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v4) = v16;
    if (*(void *)v27[0])
    {
      unint64_t v25 = *(void *)(*(void *)v27[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v25 >= v10) {
          v25 %= v10;
        }
      }
      else
      {
        v25 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v25) = v27[0];
    }
  }
  uint8x8_t v13 = (void *)v27[0];
  v27[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,void *>>>>::reset[abi:ne180100]((uint64_t)v27, 0);
  return v13;
}

void sub_256493E90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>>>::__deallocate_node(a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>>>::__deallocate_node(uint64_t a1, char *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = *(char **)v2;
      unint64_t v4 = (void **)(v2 + 32);
      std::vector<CLMicroLocationFingerprint>::__destroy_vector::operator()[abi:ne180100](&v4);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void *std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>(uint64_t a1, void *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  do
    v8 ^= (v8 << 6) + (v8 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v7++);
  while (v7 != 16);
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    uint8x8_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2 && i[3] == a2[1]) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
        }
      }
    }
  }
  double v15 = (void *)(a1 + 16);
  uint64_t i = operator new(0x38uLL);
  void *i = 0;
  i[1] = v8;
  *((_OWORD *)i + 1) = **a4;
  i[5] = 0;
  i[6] = 0;
  i[4] = 0;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v22 = *(void *)a1;
  size_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    void *i = *v23;
LABEL_44:
    *size_t v23 = i;
    goto LABEL_45;
  }
  void *i = *v15;
  void *v15 = i;
  *(void *)(v22 + 8 * v4) = v15;
  if (*i)
  {
    unint64_t v24 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9) {
        v24 %= v9;
      }
    }
    else
    {
      v24 &= v9 - 1;
    }
    size_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_2564941A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = __p + 4;
    std::vector<CLMicroLocationFingerprint>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (__p) {
    operator delete(__p);
  }
}

uint64_t std::vector<CLMicroLocationFingerprint>::__assign_with_size[abi:ne180100]<CLMicroLocationFingerprint*,CLMicroLocationFingerprint*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = *(void **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 6) < a4)
  {
    std::vector<CLMicroLocationFingerprint>::__vdeallocate((void **)a1);
    if (a4 > 0x155555555555555) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 6);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 6) >= 0xAAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x155555555555555;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<CLMicroLocationFingerprint>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationFingerprint>,CLMicroLocationFingerprint*,CLMicroLocationFingerprint*,CLMicroLocationFingerprint*>(v8, a2, a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 6) < a4)
  {
    uint64_t v13 = a2 + ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 6 << 6);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CLMicroLocationFingerprint *,CLMicroLocationFingerprint *,CLMicroLocationFingerprint *>((uint64_t)&v17, a2, v13, (uint64_t)v9);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationFingerprint>,CLMicroLocationFingerprint*,CLMicroLocationFingerprint*,CLMicroLocationFingerprint*>(v8, v13, a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = result;
    return result;
  }
  uint64_t result = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CLMicroLocationFingerprint *,CLMicroLocationFingerprint *,CLMicroLocationFingerprint *>((uint64_t)&v18, a2, a3, (uint64_t)v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 192;
      uint64_t result = std::allocator<CLMicroLocationFingerprint>::destroy[abi:ne180100](v8, v16);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
  return result;
}

void sub_256494384(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_25649438C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<CLMicroLocationFingerprint>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    unint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 192;
        std::allocator<CLMicroLocationFingerprint>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      unint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CLMicroLocationFingerprint *,CLMicroLocationFingerprint *,CLMicroLocationFingerprint *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  uint64_t v7 = 0;
  do
  {
    if (a2 != a4)
    {
      uint64_t v8 = a4 + v7;
      *(_DWORD *)(a4 + v7 + 32) = *(_DWORD *)(a2 + v7 + 32);
      std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *> *>>((void *)(a4 + v7), *(uint64_t **)(a2 + v7 + 16), 0);
      long long v9 = *(_OWORD *)(a2 + v7 + 40);
      *(void *)(v8 + 56) = *(void *)(a2 + v7 + 56);
      *(_OWORD *)(v8 + 40) = v9;
      *(_DWORD *)(v8 + 96) = *(_DWORD *)(a2 + v7 + 96);
      std::__hash_table<CLMicroLocationProto::DataType,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,std::allocator<CLMicroLocationProto::DataType>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<CLMicroLocationProto::DataType,void *> *>>((void *)(a4 + v7 + 64), *(unsigned int **)(a2 + v7 + 80), 0);
      *(_DWORD *)(v8 + 136) = *(_DWORD *)(a2 + v7 + 136);
      std::__hash_table<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,std::__unordered_map_hasher<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,true>,std::__unordered_map_equal<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,std::equal_to<CLMicroLocationProto::DataType>,std::hash<CLMicroLocationProto::DataType>,true>,std::allocator<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,void *> *>>((void *)(a4 + v7 + 104), *(uint64_t **)(a2 + v7 + 120), 0);
      long long v10 = *(_OWORD *)(a2 + v7 + 144);
      *(_DWORD *)(v8 + 160) = *(_DWORD *)(a2 + v7 + 160);
      *(_OWORD *)(v8 + 144) = v10;
      std::vector<CLMicroLocationProto::ConfidenceLevel>::__assign_with_size[abi:ne180100]<CLMicroLocationProto::ConfidenceLevel*,CLMicroLocationProto::ConfidenceLevel*>((char *)(a4 + v7 + 168), *(char **)(a2 + v7 + 168), *(void *)(a2 + v7 + 176), (uint64_t)(*(void *)(a2 + v7 + 176) - *(void *)(a2 + v7 + 168)) >> 2);
    }
    v7 += 192;
  }
  while (a2 + v7 != v6);
  return v6;
}

void *std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>(uint64_t a1, void *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  do
    v8 ^= (v8 << 6) + (v8 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v7++);
  while (v7 != 16);
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    unint64_t v11 = *(void **)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      unint64_t v12 = (void *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == *a2 && v12[3] == a2[1]) {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4) {
              break;
            }
          }
          unint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  uint64_t v15 = a1 + 16;
  uint64_t v16 = operator new(0x48uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  void *v16 = 0;
  v16[1] = v8;
  *((_OWORD *)v16 + 1) = **a4;
  *((_OWORD *)v16 + 2) = 0u;
  *((_OWORD *)v16 + 3) = 0u;
  *((_DWORD *)v16 + 16) = 1065353216;
  char v27 = 1;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v22);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  size_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *size_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = v15;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v24 >= v9) {
          v24 %= v9;
        }
      }
      else
      {
        v24 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  unint64_t v12 = (void *)v26[0];
  v26[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return v12;
}

void sub_256494784(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::pair<double,int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<double,int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<double,int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<double,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::pair<double,int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<double,int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<double,int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<double,int>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  size_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *size_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_256494A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,AnchorValueStatistics>,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,std::pair<double,int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<double,int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<double,int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<double,int>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  unint64_t v9 = (std::string *)(v8 + 16);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    *((void *)v8 + 4) = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  *((void *)v8 + 5) = 0;
  *((_DWORD *)v8 + 12) = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_256494AC8(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,AnchorValueStatistics>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>(uint64_t a1, void *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  do
    v8 ^= (v8 << 6) + (v8 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v7++);
  while (v7 != 16);
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    long long v11 = *(void **)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      uint8x8_t v12 = (void *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == *a2 && v12[3] == a2[1]) {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4) {
              break;
            }
          }
          uint8x8_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  uint64_t v15 = a1 + 16;
  unint64_t v16 = operator new(0x48uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  void *v16 = 0;
  v16[1] = v8;
  *((_OWORD *)v16 + 1) = **a4;
  *((_OWORD *)v16 + 2) = 0u;
  *((_OWORD *)v16 + 3) = 0u;
  *((_DWORD *)v16 + 16) = 1065353216;
  char v27 = 1;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v22);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  size_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *size_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = v15;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v24 >= v9) {
          v24 %= v9;
        }
      }
      else
      {
        v24 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint8x8_t v12 = (void *)v26[0];
  v26[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return v12;
}

void sub_256494D70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  size_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *size_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_256494FFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,AnchorValueStatistics>,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    void v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  void v8[5] = 0;
  v8[6] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_2564950B0(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,AnchorValueStatistics>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void sub_2564951E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256495538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  _Unwind_Resume(exception_object);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_78()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

id ULSettings::getFingerprintDistanceFunctionParamsForType(int a1)
{
  id v3 = (id)MEMORY[0x263EFFA78];
  switch(a1)
  {
    case 0:
    case 1:
      goto LABEL_16;
    case 2:
      unint64_t v4 = +[ULDefaultsSingleton shared];
      int64_t v5 = [v4 defaultsDictionary];

      uint64_t v6 = [NSString stringWithUTF8String:"ULCombinedEuclideanJaccardParams"];
      uint64_t v7 = [v5 objectForKey:v6];
      if (v7)
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          goto LABEL_13;
        }
      }
      id v3 = &unk_2704F2560;
      break;
    case 3:
      unint64_t v8 = +[ULDefaultsSingleton shared];
      int64_t v5 = [v8 defaultsDictionary];

      uint64_t v6 = [NSString stringWithUTF8String:"ULTanimotoBaseParams"];
      uint64_t v7 = [v5 objectForKey:v6];
      if (!v7) {
        break;
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        break;
      }
      goto LABEL_13;
    case 4:
      unint64_t v9 = +[ULDefaultsSingleton shared];
      int64_t v5 = [v9 defaultsDictionary];

      uint64_t v6 = [NSString stringWithUTF8String:"ULWeightedEuclideanJaccardParams"];
      uint64_t v7 = [v5 objectForKey:v6];
      if (v7)
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          goto LABEL_13;
        }
      }
      id v3 = &unk_2704F2678;
      break;
    case 5:
      unint64_t v10 = +[ULDefaultsSingleton shared];
      int64_t v5 = [v10 defaultsDictionary];

      uint64_t v6 = [NSString stringWithUTF8String:"ULWeightedEuclideanJaccardTwoSidedParams"];
      uint64_t v7 = [v5 objectForKey:v6];
      if (v7 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      {
LABEL_13:
        id v3 = v7;
        uint64_t v7 = v3;
      }
      else
      {
        id v3 = &unk_2704F2790;
      }
      break;
    default:
      FingerprintDistanceFunctionParamsForType = (_Unwind_Exception *)ULSettings::getFingerprintDistanceFunctionParamsForType();

      _Unwind_Resume(FingerprintDistanceFunctionParamsForType);
      return result;
  }

LABEL_16:
  return v3;
}

void ULSettings::getSupportedRecordingEvents(void *a1@<X0>, char **a2@<X8>)
{
  unint64_t v4 = 0;
  uint64_t v5 = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v6 = a2 + 2;
  do
  {
    if ((*a1 >> v5))
    {
      if ((unint64_t)v4 >= *v6)
      {
        unint64_t v8 = *a2;
        uint64_t v9 = (v4 - *a2) >> 2;
        unint64_t v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) >> 62) {
          std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v11 = *v6 - (void)v8;
        if (v11 >> 1 > v10) {
          unint64_t v10 = v11 >> 1;
        }
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v10;
        }
        if (v12)
        {
          unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationProto::ConfidenceReason>>((uint64_t)v6, v12);
          unint64_t v8 = *a2;
          unint64_t v4 = a2[1];
        }
        else
        {
          unint64_t v13 = 0;
        }
        uint64_t v14 = &v13[4 * v9];
        *(_DWORD *)uint64_t v14 = v5;
        uint64_t v7 = v14 + 4;
        while (v4 != v8)
        {
          int v15 = *((_DWORD *)v4 - 1);
          v4 -= 4;
          *((_DWORD *)v14 - 1) = v15;
          v14 -= 4;
        }
        *a2 = v14;
        a2[1] = v7;
        a2[2] = &v13[4 * v12];
        if (v8) {
          operator delete(v8);
        }
      }
      else
      {
        *(_DWORD *)unint64_t v4 = v5;
        uint64_t v7 = v4 + 4;
      }
      a2[1] = v7;
      unint64_t v4 = v7;
    }
    ++v5;
  }
  while (v5 != 56);
}

void sub_256495A80(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void ULSettings::getRecordingEventsForModelType(char **a1@<X8>)
{
  uint64_t v1 = 14004;
  ULSettings::getSupportedRecordingEvents(&v1, a1);
}

void ULSettings::refresh(ULSettings *this)
{
  id v1 = +[ULDefaultsSingleton shared];
  [v1 refresh];
}

void sub_256495B1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_79()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  id v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

void sub_256495C38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ULDBUtils::insertEntries<CLMicroLocationRecordingEventsTable,ULRecordingEventMO>(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v12 = 0;
  unint64_t v13 = &v12;
  uint64_t v14 = 0x2020000000;
  char v15 = 0;
  unint64_t v4 = [v3 managedObjectContext];
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 3221225472;
  void v8[2] = ___ZN9ULDBUtils13insertEntriesI35CLMicroLocationRecordingEventsTable18ULRecordingEventMOEEbP7ULStoreRKNSt3__16vectorINT_5EntryENS5_9allocatorIS8_EEEE_block_invoke;
  v8[3] = &unk_2653F90B8;
  uint64_t v11 = a2;
  id v5 = v3;
  id v9 = v5;
  unint64_t v10 = &v12;
  [v4 performBlockAndWait:v8];

  uint64_t v6 = *((unsigned __int8 *)v13 + 24);
  _Block_object_dispose(&v12, 8);

  return v6;
}

void sub_256495D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ULDBUtils::fetchEntries<CLMicroLocationRecordingEventsTable,ULRecordingEventMO>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  uint64_t v23 = 0;
  unint64_t v24 = &v23;
  uint64_t v25 = 0x4812000000;
  double v26 = __Block_byref_object_copy__19;
  char v27 = __Block_byref_object_dispose__19;
  char v28 = &unk_25654E519;
  memset(v29, 0, sizeof(v29));
  uint64_t v12 = [v9 managedObjectContext];
  v17[0] = MEMORY[0x263EF8330];
  v17[1] = 3221225472;
  v17[2] = ___ZN9ULDBUtils12fetchEntriesI35CLMicroLocationRecordingEventsTable18ULRecordingEventMOEENSt3__16vectorINT_5EntryENS3_9allocatorIS6_EEEEP7ULStoreP7NSArrayIP11NSPredicateEPSC_IP16NSSortDescriptorEm_block_invoke;
  v17[3] = &unk_2653F90E0;
  id v13 = v10;
  id v18 = v13;
  id v14 = v11;
  id v19 = v14;
  uint64_t v22 = a4;
  id v15 = v9;
  id v20 = v15;
  unint64_t v21 = &v23;
  [v12 performBlockAndWait:v17];

  unint64_t v16 = v24;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__init_with_size[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry*,CLMicroLocationRecordingEventsTable::Entry*>(a5, (long long *)v16[6], (long long *)v16[7], 0xEF7BDEF7BDEF7BDFLL * ((v16[7] - v16[6]) >> 3));

  _Block_object_dispose(&v23, 8);
  double v30 = (void **)v29;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v30);
}

void sub_256495F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, void *a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);

  _Block_object_dispose(va, 8);
  *(void *)(v14 - 96) = v13;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 96));

  _Unwind_Resume(a1);
}

void ULDBUtils::fetchAllWithLimit<CLMicroLocationRecordingEventsTable,ULRecordingEventMO>(void *a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  v10[1] = *MEMORY[0x263EF8340];
  id v5 = a1;
  uint64_t v6 = (void *)MEMORY[0x263F08B30];
  uint64_t v7 = [(id)objc_opt_class() defaultSortProperty];
  unint64_t v8 = [v6 sortDescriptorWithKey:v7 ascending:0];

  v10[0] = v8;
  id v9 = [MEMORY[0x263EFF8C0] arrayWithObjects:v10 count:1];
  ULDBUtils::fetchEntries<CLMicroLocationRecordingEventsTable,ULRecordingEventMO>(v5, 0, v9, a2, a3);
}

void sub_2564960D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256496260(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25649644C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256496558(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256496750(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256496B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);

  _Block_object_dispose(va, 8);
  *(void *)(v19 - 144) = a4;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 144));

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__19(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__19(uint64_t a1)
{
  id v1 = (void **)(a1 + 48);
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void sub_256496DD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ULDBUtils::convertManagedObjectsToEntries<CLMicroLocationRecordingEventsTable,ULRecordingEventMO>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  id v3 = a1;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::reserve(a2, [v3 count]);
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v4 = v3;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v20 objects:v32 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v21;
    while (2)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v21 != v6) {
          objc_enumerationMutation(v4);
        }
        id v8 = *(id *)(*((void *)&v20 + 1) + 8 * i);
        id v9 = v8;
        if (!v8)
        {
          long long v31 = 0u;
          memset(v30, 0, sizeof(v30));
LABEL_16:
          if (onceToken_MicroLocation_Default != -1) {
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_102);
          }
          uint64_t v12 = (id)logObject_MicroLocation_Default;
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            uint64_t v13 = [v9 entity];
            uint64_t v14 = [v13 name];
            *(_DWORD *)uint64_t buf = 68289283;
            int v25 = 0;
            __int16 v26 = 2082;
            char v27 = "";
            __int16 v28 = 2113;
            double v29 = v14;
            _os_log_impl(&dword_25631F000, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to convert MO to entry\", \"MO\":%{private, location:escape_only}@}", buf, 0x1Cu);
          }
          if (onceToken_MicroLocation_Default != -1) {
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_102);
          }
          id v15 = (id)logObject_MicroLocation_Default;
          if (os_signpost_enabled(v15))
          {
            unint64_t v16 = [v9 entity];
            float v17 = [v16 name];
            *(_DWORD *)uint64_t buf = 68289283;
            int v25 = 0;
            __int16 v26 = 2082;
            char v27 = "";
            __int16 v28 = 2113;
            double v29 = v17;
            _os_signpost_emit_with_name_impl(&dword_25631F000, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to convert MO to entry", "{\"msg%{public}.0s\":\"Failed to convert MO to entry\", \"MO\":%{private, location:escape_only}@}", buf, 0x1Cu);
          }
          std::__optional_destruct_base<CLMicroLocationRecordingEventsTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v30);

          uint64_t v19 = *a2;
          for (uint64_t j = a2[1];
                j != v19;
                std::allocator<CLMicroLocationRecordingEventsTable::Entry>::destroy[abi:ne180100]((uint64_t)(a2 + 2), j))
          {
            j -= 248;
          }
          a2[1] = v19;
          goto LABEL_28;
        }
        objc_msgSend(v8, "convertToEntry", (void)v20);
        if (!BYTE8(v31)) {
          goto LABEL_16;
        }
        unint64_t v10 = a2[1];
        if (v10 >= a2[2])
        {
          uint64_t v11 = std::vector<CLMicroLocationRecordingEventsTable::Entry>::__push_back_slow_path<CLMicroLocationRecordingEventsTable::Entry>(a2, v30);
        }
        else
        {
          std::allocator<CLMicroLocationRecordingEventsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry,CLMicroLocationRecordingEventsTable::Entry>((uint64_t)(a2 + 2), a2[1], v30);
          uint64_t v11 = v10 + 248;
          a2[1] = v10 + 248;
        }
        a2[1] = v11;
        std::__optional_destruct_base<CLMicroLocationRecordingEventsTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v30);
      }
      uint64_t v5 = [v4 countByEnumeratingWithState:&v20 objects:v32 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }

LABEL_28:
}

void sub_25649719C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);

  std::__optional_destruct_base<CLMicroLocationRecordingEventsTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)va);

  _Unwind_Resume(a1);
}

void sub_2564973E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256497628(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256497824(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256497A9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256497D78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256497FAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256498130(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256498278(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256498414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a11;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100](&a14);

  _Unwind_Resume(a1);
}

void sub_25649856C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256498878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *__p, uint64_t a5, int a6, __int16 a7, char a8, char a9, uint64_t a10, void *a11, void *__pa, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__split_buffer<std::string> *a19)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(a1);
}

void sub_256498A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id a19, id a20)
{
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v23);

  _Block_object_dispose(&a10, 8);
  _Unwind_Resume(a1);
}

void sub_256498BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_256498EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id a23,id a24,id a25)
{
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v27);

  _Block_object_dispose(&a14, 8);
  _Unwind_Resume(a1);
}

void sub_256499060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_256499194(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_80()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  id v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

void ___ZN9ULDBUtils13insertEntriesI35CLMicroLocationRecordingEventsTable18ULRecordingEventMOEEbP7ULStoreRKNSt3__16vectorINT_5EntryENS5_9allocatorIS8_EEEE_block_invoke(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(a1 + 48);
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  if (*v2 == v4)
  {
LABEL_4:
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [*(id *)(a1 + 32) commitChangesToStore];
    uint64_t v7 = *(void **)(a1 + 32);
    [v7 deleteOldestRecordsIfFull];
  }
  else
  {
    while (1)
    {
      uint64_t v5 = [*(id *)(a1 + 32) managedObjectContext];
      uint64_t v6 = +[ULRecordingEventMO createFromEntry:v3 inManagedObjectContext:v5];

      if (!v6) {
        break;
      }

      v3 += 248;
      if (v3 == v4) {
        goto LABEL_4;
      }
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_102);
    }
    id v8 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      id v9 = +[ULRecordingEventMO entity];
      unint64_t v10 = [v9 name];
      int v15 = 68289283;
      int v16 = 0;
      __int16 v17 = 2082;
      id v18 = "";
      __int16 v19 = 2113;
      long long v20 = v10;
      _os_log_impl(&dword_25631F000, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to create entry from MO\", \"MO\":%{private, location:escape_only}@}", (uint8_t *)&v15, 0x1Cu);
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_102);
    }
    uint64_t v11 = (id)logObject_MicroLocation_Default;
    if (os_signpost_enabled(v11))
    {
      uint64_t v12 = +[ULRecordingEventMO entity];
      uint64_t v13 = [v12 name];
      int v15 = 68289283;
      int v16 = 0;
      __int16 v17 = 2082;
      id v18 = "";
      __int16 v19 = 2113;
      long long v20 = v13;
      _os_signpost_emit_with_name_impl(&dword_25631F000, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to create entry from MO", "{\"msg%{public}.0s\":\"Failed to create entry from MO\", \"MO\":%{private, location:escape_only}@}", (uint8_t *)&v15, 0x1Cu);
    }
    uint64_t v14 = [*(id *)(a1 + 32) managedObjectContext];
    [v14 reset];
  }
}

void sub_2564994DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN9ULDBUtils12fetchEntriesI35CLMicroLocationRecordingEventsTable18ULRecordingEventMOEENSt3__16vectorINT_5EntryENS3_9allocatorIS6_EEEEP7ULStoreP7NSArrayIP11NSPredicateEPSC_IP16NSSortDescriptorEm_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  uint64_t v3 = (objc_class *)objc_opt_class();
  uint64_t v4 = NSStringFromClass(v3);
  uint64_t v5 = [v2 fetchManagedObjectsWithEntityName:v4 byAndPredicates:*(void *)(a1 + 32) sortDescriptors:*(void *)(a1 + 40) andLimit:*(void *)(a1 + 64)];

  ULDBUtils::convertManagedObjectsToEntries<CLMicroLocationRecordingEventsTable,ULRecordingEventMO>(v5, (uint64_t *)&v8);
  uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8);
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__vdeallocate((void **)(v6 + 48));
  *(_OWORD *)(v6 + 48) = v8;
  *(void *)(v6 + 64) = v9;
  uint64_t v9 = 0;
  long long v8 = 0uLL;
  unint64_t v10 = (void **)&v8;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v10);
  uint64_t v7 = [*(id *)(a1 + 48) managedObjectContext];
  [v7 reset];
}

void sub_2564995FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void **std::vector<CLMicroLocationRecordingEventsTable::Entry>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  __n128 result = (void **)(a1 + 2);
  if (0xEF7BDEF7BDEF7BDFLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x108421084210843) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRecordingEventsTable::Entry>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    _DWORD v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 248 * v6;
    std::vector<CLMicroLocationRecordingEventsTable::Entry>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<CLMicroLocationRecordingEventsTable::Entry>::~__split_buffer(v7);
  }
  return result;
}

void sub_2564996D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMicroLocationRecordingEventsTable::Entry>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMicroLocationRecordingEventsTable::Entry>::__push_back_slow_path<CLMicroLocationRecordingEventsTable::Entry>(uint64_t *a1, long long *a2)
{
  unint64_t v3 = 0xEF7BDEF7BDEF7BDFLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x108421084210842) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  if (0xDEF7BDEF7BDEF7BELL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xDEF7BDEF7BDEF7BELL * ((a1[2] - *a1) >> 3);
  }
  if (0xEF7BDEF7BDEF7BDFLL * ((a1[2] - *a1) >> 3) >= 0x84210842108421) {
    unint64_t v6 = 0x108421084210842;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRecordingEventsTable::Entry>>((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  unint64_t v10 = v7;
  uint64_t v11 = &v7[248 * v3];
  uint64_t v13 = &v7[248 * v6];
  std::allocator<CLMicroLocationRecordingEventsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry,CLMicroLocationRecordingEventsTable::Entry>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  uint64_t v12 = v11 + 248;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<CLMicroLocationRecordingEventsTable::Entry>::~__split_buffer(&v10);
  return v8;
}

void sub_2564997FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMicroLocationRecordingEventsTable::Entry>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *std::vector<CLMicroLocationRecordingEventsTable::Entry>::__init_with_size[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry*,CLMicroLocationRecordingEventsTable::Entry*>(void *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    std::vector<CLMicroLocationRecordingEventsTable::Entry>::__vallocate[abi:ne180100](result, a4);
    __n128 result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationRecordingEventsTable::Entry>,CLMicroLocationRecordingEventsTable::Entry*,CLMicroLocationRecordingEventsTable::Entry*,CLMicroLocationRecordingEventsTable::Entry*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_256499878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<CLMicroLocationRecordingEventsTable::Entry>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x108421084210843) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRecordingEventsTable::Entry>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[248 * v4];
  return result;
}

void sub_25649B08C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, CLMicroLocationProto::RecordingEvent *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, CLMicroLocationProto::RecordingEvent *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,CLMicroLocationProto::RecordingEvent *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *__p,uint64_t a61,int a62,__int16 a63)
{
  if (a65 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,-[ULRecordingEventStore fetchRecordingEventTriggersForLearningMeasurements:atLoiGroupId:]::$_0 &,CLMicroLocationRecordingEventsTable::Entry *>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(0xEF7BDEF7BDEF7BDFLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      unint64_t v6 = bswap64(*(a2 - 31));
      unint64_t v7 = bswap64(*a1);
      if (v6 != v7 || (unint64_t v6 = bswap64(*(a2 - 30)), v7 = bswap64(a1[1]), v6 != v7))
      {
        int v28 = v6 < v7 ? -1 : 1;
        if (v28 < 0)
        {
          std::swap[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry>((long long *)a1, (long long *)(a2 - 31));
          return 1;
        }
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::semiSupervisedLearnWrapper(CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,std::vector<CLMicroLocationProto::EventType> const&,CLMicroLocationProto::Model_GenerationAlgorithm,NSMutableDictionary *,std::function<BOOL ()(void)>,CLMicroLocationFingerprintPool &,std::string const&,boost::uuids::uuid const&)::$_2 &,CLMicroLocationRecordingEventsTable::Entry *>(a1, a1 + 31, a2 - 31);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::semiSupervisedLearnWrapper(CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,std::vector<CLMicroLocationProto::EventType> const&,CLMicroLocationProto::Model_GenerationAlgorithm,NSMutableDictionary *,std::function<BOOL ()(void)>,CLMicroLocationFingerprintPool &,std::string const&,boost::uuids::uuid const&)::$_2 &,CLMicroLocationRecordingEventsTable::Entry *>(a1, a1 + 31, a1 + 62, a2 - 31);
      return 1;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::semiSupervisedLearnWrapper(CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,std::vector<CLMicroLocationProto::EventType> const&,CLMicroLocationProto::Model_GenerationAlgorithm,NSMutableDictionary *,std::function<BOOL ()(void)>,CLMicroLocationFingerprintPool &,std::string const&,boost::uuids::uuid const&)::$_2 &,CLMicroLocationRecordingEventsTable::Entry *,0>(a1, a1 + 31, a1 + 62, a1 + 93, a2 - 31);
      return 1;
    default:
      uint64_t v8 = a1 + 62;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::semiSupervisedLearnWrapper(CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,std::vector<CLMicroLocationProto::EventType> const&,CLMicroLocationProto::Model_GenerationAlgorithm,NSMutableDictionary *,std::function<BOOL ()(void)>,CLMicroLocationFingerprintPool &,std::string const&,boost::uuids::uuid const&)::$_2 &,CLMicroLocationRecordingEventsTable::Entry *>(a1, a1 + 31, a1 + 62);
      uint64_t v9 = a1 + 93;
      if (a1 + 93 == v2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      uint64_t v12 = &v34;
      uint64_t v13 = (CLMicroLocationProto::RecordingEvent *)&v35;
      double v29 = v2;
      break;
  }
  while (1)
  {
    unint64_t v14 = bswap64(*v9);
    unint64_t v15 = bswap64(*v8);
    if (v14 != v15 || (unint64_t v14 = bswap64(v9[1]), v15 = bswap64(v8[1]), v14 != v15))
    {
      int v16 = v14 < v15 ? -1 : 1;
      if (v16 < 0)
      {
        long long v30 = *(_OWORD *)v9;
        unint64_t v31 = v9[2];
        long long __p = *(_OWORD *)(v9 + 3);
        unint64_t v33 = v9[5];
        void v9[3] = 0;
        void v9[4] = 0;
        void v9[5] = 0;
        *(_OWORD *)uint64_t v12 = *((_OWORD *)v9 + 3);
        __int16 v17 = v12;
        *(_OWORD *)((char *)v12 + 12) = *(_OWORD *)((char *)v9 + 60);
        id v18 = v13;
        CLMicroLocationProto::RecordingEvent::RecordingEvent(v13, (const CLMicroLocationProto::RecordingEvent *)(v9 + 10));
        long long v36 = *((_OWORD *)v9 + 14);
        char v37 = *((unsigned char *)v9 + 240);
        uint64_t v19 = v10;
        while (1)
        {
          long long v20 = (char *)a1 + v19;
          *(_OWORD *)((char *)a1 + v19 + 744) = *(_OWORD *)((char *)a1 + v19 + 496);
          *(unint64_t *)((char *)a1 + v19 + 760) = *(unint64_t *)((char *)a1 + v19 + 512);
          uint64_t v21 = (void **)((char *)a1 + v19 + 768);
          if (*((char *)a1 + v19 + 791) < 0) {
            operator delete(*v21);
          }
          *(unint64_t *)((char *)a1 + v19 + 784) = *((void *)v20 + 67);
          *(_OWORD *)uint64_t v21 = *(_OWORD *)(v20 + 520);
          v20[543] = 0;
          v20[520] = 0;
          *(_OWORD *)(v20 + 792) = *((_OWORD *)v20 + 34);
          *(_OWORD *)(v20 + 804) = *(_OWORD *)(v20 + 556);
          CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(v20 + 824), (const CLMicroLocationProto::RecordingEvent *)(v20 + 576));
          long long v22 = (char *)a1 + v19;
          *(_OWORD *)((char *)a1 + v19 + 968) = *(_OWORD *)((char *)a1 + v19 + 720);
          *((unsigned char *)a1 + v19 + 984) = *((unsigned char *)a1 + v19 + 736);
          if (v19 == -496) {
            break;
          }
          unint64_t v23 = bswap64(v30);
          unint64_t v24 = bswap64(*((void *)v22 + 31));
          if (v23 == v24
            && (unint64_t v23 = bswap64(*((unint64_t *)&v30 + 1)), v24 = bswap64(*((void *)v22 + 32)), v23 == v24))
          {
            int v25 = 0;
          }
          else if (v23 < v24)
          {
            int v25 = -1;
          }
          else
          {
            int v25 = 1;
          }
          v19 -= 248;
          if ((v25 & 0x80000000) == 0)
          {
            uint64_t v26 = (uint64_t)a1 + v19 + 744;
            goto LABEL_26;
          }
        }
        uint64_t v26 = (uint64_t)a1;
LABEL_26:
        *(_OWORD *)uint64_t v26 = v30;
        *(void *)(v26 + 16) = v31;
        char v27 = (void **)(v22 + 520);
        if (*(char *)(v26 + 47) < 0) {
          operator delete(*v27);
        }
        *(_OWORD *)char v27 = __p;
        *((void *)v22 + 67) = v33;
        uint64_t v12 = v17;
        *((_OWORD *)v22 + 34) = *(_OWORD *)v17;
        *(_OWORD *)(v22 + 556) = *(_OWORD *)((char *)v17 + 12);
        uint64_t v13 = v18;
        CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(v22 + 576), v18);
        *((_OWORD *)v22 + 45) = v36;
        v22[736] = v37;
        CLMicroLocationProto::RecordingEvent::~RecordingEvent(v18);
        uint64_t v2 = v29;
        if (++v11 == 8) {
          return v9 + 31 == v29;
        }
      }
    }
    uint64_t v8 = v9;
    v10 += 248;
    v9 += 31;
    if (v9 == v2) {
      return 1;
    }
  }
}

void sub_25649B58C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
}

void CLMicroLocationSingleClusterNullSpaceAlgorithm::localize(CLMicroLocationModel *this@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, CLMicroLocationLocalizationSettings *a4@<X4>, char **a5@<X8>)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  if (!CLMicroLocationModel::isValid(this))
  {
    CLMicroLocationSingleClusterNullSpaceAlgorithm::localize();
LABEL_50:
    __break(1u);
    return;
  }
  if (!*(unsigned char *)(a3 + 32))
  {
    CLMicroLocationSingleClusterNullSpaceAlgorithm::localize();
    goto LABEL_50;
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  *((_DWORD *)a5 + 6) = 3;
  *((unsigned char *)a5 + 80) = 0;
  a5[5] = 0;
  a5[6] = 0;
  a5[4] = 0;
  *((unsigned char *)a5 + 56) = 0;
  v58[0] = 0;
  v58[1] = 0;
  int v57 = (uint64_t *)v58;
  int v11 = (void *)*((void *)this + 41);
  uint64_t v10 = (void *)*((void *)this + 42);
  while (v11 != v10)
  {
    uint64_t v12 = *(void *)(a3 + 24);
    if (!v12) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    v59[0] = (*(double (**)(uint64_t, void, uint64_t))(*(void *)v12 + 48))(v12, *v11, a2);
    std::__tree<double>::__emplace_multi<double>(&v57, v59);
    v11 += 4;
  }
  double MinPercentileForReducerFunction = CLMicroLocationLocalizationSettings::getMinPercentileForReducerFunction(a4);
  double MaxPercentileForReducerFunction = CLMicroLocationLocalizationSettings::getMaxPercentileForReducerFunction(a4);
  unint64_t v15 = +[ULDefaultsSingleton shared];
  int v16 = [v15 defaultsDictionary];

  __int16 v17 = [NSString stringWithUTF8String:"ULNullSpaceDistanceReductionFunction"];
  id v18 = [v16 objectForKey:v17];
  if (v18 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v19 = [v18 unsignedIntValue];
  }
  else {
    uint64_t v19 = [&unk_2704F20E8 unsignedIntValue];
  }
  uint64_t v20 = v19;

  ((void (*)(double *__return_ptr, uint64_t, void, double, double))CLMicroLocationAlgorithms::createReducerFunction<std::multiset<double>,double>)(v59, v20, 0, MinPercentileForReducerFunction, MaxPercentileForReducerFunction);
  CLMicroLocationLocalizationSettings::getKernelFuncSettings((id *)a4);
  uint64_t v21 = (CLMicroLocationAlgorithms *)objc_claimAutoreleasedReturnValue();
  CLMicroLocationAlgorithms::createKernelFunction(v21, &v56);

  std::multiset<double>::multiset[abi:ne180100]((uint64_t)v55, (uint64_t)&v57);
  if (!v60) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  double v22 = (*(double (**)(uint64_t, void **))(*(void *)v60 + 48))(v60, v55);
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)v55, v55[1]);
  double v23 = (*(double (**)(uint64_t, double))(*(void *)v56 + 24))(v56, v22);
  if (v23 >= 0.999) {
    double v24 = 1.0;
  }
  else {
    double v24 = v23;
  }
  int v25 = *(_DWORD *)(a2 + 160);
  double v26 = 1.0 - v24;
  char v27 = a5[2];
  int v28 = a5[1];
  if (v28 >= v27)
  {
    uint64_t v30 = (v28 - *a5) >> 5;
    unint64_t v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 59) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v32 = v27 - *a5;
    if (v32 >> 4 > v31) {
      unint64_t v31 = v32 >> 4;
    }
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v33 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v33 = v31;
    }
    uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationResultInternal>>((uint64_t)(a5 + 2), v33);
    uint64_t v35 = &v34[32 * v30];
    char v37 = &v34[32 * v36];
    *(void *)uint64_t v35 = 0;
    *((void *)v35 + 1) = 0;
    *((double *)v35 + 2) = v26;
    *((_DWORD *)v35 + 6) = v25;
    double v29 = v35 + 32;
    char v39 = *a5;
    uint64_t v38 = a5[1];
    if (v38 != *a5)
    {
      do
      {
        long long v40 = *((_OWORD *)v38 - 2);
        *(_OWORD *)(v35 - 20) = *(_OWORD *)(v38 - 20);
        *((_OWORD *)v35 - 2) = v40;
        v35 -= 32;
        v38 -= 32;
      }
      while (v38 != v39);
      uint64_t v38 = *a5;
    }
    *a5 = v35;
    a5[1] = v29;
    a5[2] = v37;
    if (v38) {
      operator delete(v38);
    }
  }
  else
  {
    *(void *)int v28 = 0;
    *((void *)v28 + 1) = 0;
    *((double *)v28 + 2) = v26;
    double v29 = v28 + 32;
    *((_DWORD *)v28 + 6) = v25;
  }
  a5[1] = v29;
  float v41 = a5[2];
  if (v29 >= v41)
  {
    uint64_t v43 = (v29 - *a5) >> 5;
    if ((unint64_t)(v43 + 1) >> 59) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v44 = v41 - *a5;
    uint64_t v45 = v44 >> 4;
    if (v44 >> 4 <= (unint64_t)(v43 + 1)) {
      uint64_t v45 = v43 + 1;
    }
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v46 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v46 = v45;
    }
    unint64_t v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationResultInternal>>((uint64_t)(a5 + 2), v46);
    __int16 v48 = (double *)&v47[32 * v43];
    float v50 = &v47[32 * v49];
    *(_OWORD *)__int16 v48 = xmmword_25651B7C0;
    v48[2] = v24;
    *((_DWORD *)v48 + 6) = v25;
    __int16 v42 = (char *)(v48 + 4);
    float v52 = *a5;
    float v51 = a5[1];
    if (v51 != *a5)
    {
      do
      {
        long long v53 = *((_OWORD *)v51 - 2);
        *(_OWORD *)((char *)v48 - 20) = *(_OWORD *)(v51 - 20);
        *((_OWORD *)v48 - 2) = v53;
        v48 -= 4;
        v51 -= 32;
      }
      while (v51 != v52);
      float v51 = *a5;
    }
    *a5 = (char *)v48;
    a5[1] = v42;
    a5[2] = v50;
    if (v51) {
      operator delete(v51);
    }
  }
  else
  {
    *(_OWORD *)double v29 = xmmword_25651B7C0;
    *((double *)v29 + 2) = v24;
    *((_DWORD *)v29 + 6) = v25;
    __int16 v42 = v29 + 32;
  }
  a5[1] = v42;
  uint64_t v54 = v56;
  uint64_t v56 = 0;
  if (v54) {
    (*(void (**)(uint64_t))(*(void *)v54 + 8))(v54);
  }
  std::__function::__value_func<double ()(std::multiset<double>)>::~__value_func[abi:ne180100](v59);
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&v57, v58[0]);
}

void sub_25649BBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *a14)
{
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&a13, a14);
  CLMicroLocationAlgorithms::LocalizerResults::~LocalizerResults(v14);
  _Unwind_Resume(a1);
}

void CLMicroLocationSingleClusterNullSpaceAlgorithm::~CLMicroLocationSingleClusterNullSpaceAlgorithm(CLMicroLocationSingleClusterNullSpaceAlgorithm *this)
{
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_81()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  id v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

void *CLMicroLocationTriggerCounters::CLMicroLocationTriggerCounters(void *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = operator new(0xCuLL);
  a1[1] = v4 + 3;
  a1[2] = v4 + 3;
  *(void *)uint64_t v4 = 0x100000000;
  _DWORD v4[2] = 4;
  *a1 = v4;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<CLMicroLocationProto::TriggerEvent>::__init_with_size[abi:ne180100]<CLMicroLocationProto::TriggerEvent*,CLMicroLocationProto::TriggerEvent*>(a1 + 3, *a2, a2[1], 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 3));
  *((_DWORD *)a1 + 12) = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)(a1 + 6));
  return a1;
}

void sub_25649BE00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<CLMicroLocationProto::TriggerEvent>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  uint64_t v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

BOOL CLMicroLocationTriggerCounters::isLocalization(CLMicroLocationTriggerCounters *this, const CLMicroLocationProto::TriggerEvent *a2)
{
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x200) == 0) {
    return 0;
  }
  uint64_t v5 = *(_DWORD **)this;
  uint64_t v4 = (_DWORD *)*((void *)this + 1);
  if (*(_DWORD **)this != v4)
  {
    while (*v5 != *((_DWORD *)a2 + 15))
    {
      if (++v5 == v4)
      {
        uint64_t v5 = (_DWORD *)*((void *)this + 1);
        break;
      }
    }
  }
  BOOL result = 0;
  if ((v2 & 0x100) != 0 && v5 != v4) {
    return *((_DWORD *)a2 + 14) == 0;
  }
  return result;
}

uint64_t CLMicroLocationTriggerCounters::getRecordingsCount(CLMicroLocationTriggerCounters *this)
{
  v3[4] = *MEMORY[0x263EF8340];
  v3[0] = &unk_2704E1688;
  v3[1] = this;
  void v3[3] = v3;
  uint64_t v1 = CLMicroLocationTriggerCounters::countUniqueRequestsIf((uint64_t)this, (uint64_t)v3);
  std::__function::__value_func<BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::~__value_func[abi:ne180100](v3);
  return v1;
}

void sub_25649BF1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationTriggerCounters::countUniqueRequestsIf(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v18 = 0;
  uint64_t v19 = 0;
  __int16 v17 = (uint64_t *)&v18;
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v2 == v3)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v5 = a1 + 48;
    do
    {
      uint64_t v6 = *(void *)(a2 + 24);
      if (!v6) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v6 + 48))(v6, v2))
      {
        if ((*(unsigned char *)(v2 + 85) & 8) != 0)
        {
          uint64_t v9 = *(void *)(v2 + 64);
          int v10 = *(char *)(v9 + 23);
          if (v10 >= 0) {
            int v11 = *(unsigned __int8 **)(v2 + 64);
          }
          else {
            int v11 = *(unsigned __int8 **)v9;
          }
          if (v10 >= 0) {
            uint64_t v12 = *(unsigned __int8 *)(v9 + 23);
          }
          else {
            uint64_t v12 = *(void *)(v9 + 8);
          }
          uint64_t v7 = boost::uuids::string_generator::operator()<std::__wrap_iter<char const*>>((boost::uuids::string_generator *)&v16, v11, &v11[v12]);
        }
        else
        {
          uint64_t v7 = boost::uuids::random_generator_pure::operator()(v5);
        }
        *(void *)&long long v20 = v7;
        *((void *)&v20 + 1) = v8;
        std::__tree<boost::uuids::uuid>::__emplace_unique_key_args<boost::uuids::uuid,boost::uuids::uuid>(&v17, (unint64_t *)&v20, &v20);
      }
      v2 += 88;
    }
    while (v2 != v3);
    uint64_t v13 = v18;
    uint64_t v14 = v19;
  }
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&v17, v13);
  return v14;
}

void sub_25649C060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, void *a12)
{
}

uint64_t CLMicroLocationTriggerCounters::getRecordingsCountWithType(uint64_t a1, unsigned int a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  v4[0] = &unk_2704E1718;
  v4[1] = a1;
  _DWORD v4[2] = a2;
  v4[3] = v4;
  uint64_t v2 = CLMicroLocationTriggerCounters::countUniqueRequestsIf(a1, (uint64_t)v4);
  std::__function::__value_func<BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::~__value_func[abi:ne180100](v4);
  return v2;
}

void sub_25649C110(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationTriggerCounters::getLocalizationCount(CLMicroLocationTriggerCounters *this)
{
  v3[4] = *MEMORY[0x263EF8340];
  v3[0] = &unk_2704E1798;
  v3[1] = this;
  void v3[3] = v3;
  uint64_t v1 = CLMicroLocationTriggerCounters::countUniqueRequestsIf((uint64_t)this, (uint64_t)v3);
  std::__function::__value_func<BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::~__value_func[abi:ne180100](v3);
  return v1;
}

void sub_25649C1B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationTriggerCounters::getLegacyLocalizationsCount(CLMicroLocationTriggerCounters *this)
{
  v3[4] = *MEMORY[0x263EF8340];
  v3[0] = &unk_2704E1818;
  v3[1] = this;
  void v3[3] = v3;
  uint64_t v1 = CLMicroLocationTriggerCounters::countUniqueRequestsIf((uint64_t)this, (uint64_t)v3);
  std::__function::__value_func<BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::~__value_func[abi:ne180100](v3);
  return v1;
}

void sub_25649C250(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationTriggerCounters::getCachedLegacyLocalizationsCount(CLMicroLocationTriggerCounters *this)
{
  v3[4] = *MEMORY[0x263EF8340];
  v3[0] = &unk_2704E1898;
  v3[1] = this;
  void v3[3] = v3;
  uint64_t v1 = CLMicroLocationTriggerCounters::countUniqueRequestsIf((uint64_t)this, (uint64_t)v3);
  std::__function::__value_func<BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::~__value_func[abi:ne180100](v3);
  return v1;
}

void sub_25649C2F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationTriggerCounters::getNonCachedLegacyLocalizationsCount(CLMicroLocationTriggerCounters *this)
{
  v3[4] = *MEMORY[0x263EF8340];
  v3[0] = &unk_2704E1918;
  v3[1] = this;
  void v3[3] = v3;
  uint64_t v1 = CLMicroLocationTriggerCounters::countUniqueRequestsIf((uint64_t)this, (uint64_t)v3);
  std::__function::__value_func<BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::~__value_func[abi:ne180100](v3);
  return v1;
}

void sub_25649C390(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationTriggerCounters::getNewLocalizationsCount(CLMicroLocationTriggerCounters *this)
{
  v3[4] = *MEMORY[0x263EF8340];
  v3[0] = &unk_2704E1998;
  v3[1] = this;
  void v3[3] = v3;
  uint64_t v1 = CLMicroLocationTriggerCounters::countUniqueRequestsIf((uint64_t)this, (uint64_t)v3);
  std::__function::__value_func<BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::~__value_func[abi:ne180100](v3);
  return v1;
}

void sub_25649C430(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationTriggerCounters::getMotionLocalizationsCount(CLMicroLocationTriggerCounters *this)
{
  v3[4] = *MEMORY[0x263EF8340];
  v3[0] = &unk_2704E1A18;
  v3[1] = this;
  void v3[3] = v3;
  uint64_t v1 = CLMicroLocationTriggerCounters::countUniqueRequestsIf((uint64_t)this, (uint64_t)v3);
  std::__function::__value_func<BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::~__value_func[abi:ne180100](v3);
  return v1;
}

void sub_25649C4D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationTriggerCounters::getLocalizationsCausedBy(uint64_t a1, unsigned int a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  v4[0] = &unk_2704E1A98;
  v4[1] = a1;
  _DWORD v4[2] = a2;
  v4[3] = v4;
  uint64_t v2 = CLMicroLocationTriggerCounters::countUniqueRequestsIf(a1, (uint64_t)v4);
  std::__function::__value_func<BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::~__value_func[abi:ne180100](v4);
  return v2;
}

void sub_25649C574(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationTriggerCounters::getLocalizationsCausedByWithType(uint64_t a1, unsigned int a2, uint64_t a3)
{
  void v5[4] = *MEMORY[0x263EF8340];
  v5[0] = &unk_2704E1B18;
  v5[1] = a1;
  _DWORD v5[2] = a2 | (unint64_t)(a3 << 32);
  int v5[3] = v5;
  uint64_t v3 = CLMicroLocationTriggerCounters::countUniqueRequestsIf(a1, (uint64_t)v5);
  std::__function::__value_func<BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::~__value_func[abi:ne180100](v5);
  return v3;
}

void sub_25649C61C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationTriggerCounters::getLocalizationsCausedByWithTypeMotionState(uint64_t a1, int a2, int a3, int a4)
{
  void v11[4] = *MEMORY[0x263EF8340];
  uint64_t v8 = operator new(0x20uLL);
  void *v8 = &unk_2704E1B98;
  v8[1] = a1;
  *((_DWORD *)v8 + 4) = a2;
  *((_DWORD *)v8 + 5) = a3;
  *((_DWORD *)v8 + 6) = a4;
  v11[3] = v8;
  uint64_t v9 = CLMicroLocationTriggerCounters::countUniqueRequestsIf(a1, (uint64_t)v11);
  std::__function::__value_func<BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::~__value_func[abi:ne180100](v11);
  return v9;
}

void sub_25649C6E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::vector<CLMicroLocationProto::TriggerEvent>::__init_with_size[abi:ne180100]<CLMicroLocationProto::TriggerEvent*,CLMicroLocationProto::TriggerEvent*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<CLMiLoServiceTable::Entry>::__vallocate[abi:ne180100](result, a4);
    BOOL result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationProto::TriggerEvent>,CLMicroLocationProto::TriggerEvent*,CLMicroLocationProto::TriggerEvent*,CLMicroLocationProto::TriggerEvent*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_25649C760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<CLMicroLocationProto::TriggerEvent>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationProto::TriggerEvent>,CLMicroLocationProto::TriggerEvent*,CLMicroLocationProto::TriggerEvent*,CLMicroLocationProto::TriggerEvent*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      CLMicroLocationProto::TriggerEvent::TriggerEvent((CLMicroLocationProto::TriggerEvent *)(a4 + v7), (const CLMicroLocationProto::TriggerEvent *)(a2 + v7));
      v7 += 88;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_25649C7EC(_Unwind_Exception *exception_object)
{
  if (v3) {
    std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationProto::TriggerEvent>,CLMicroLocationProto::TriggerEvent*,CLMicroLocationProto::TriggerEvent*,CLMicroLocationProto::TriggerEvent*>(v2, v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<CLMicroLocationTriggerCounters::getRecordingsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getRecordingsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::~__func()
{
}

void *std::__function::__func<CLMicroLocationTriggerCounters::getRecordingsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getRecordingsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_2704E1688;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationTriggerCounters::getRecordingsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getRecordingsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_2704E1688;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<CLMicroLocationTriggerCounters::getRecordingsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getRecordingsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::operator()(uint64_t a1, _DWORD *a2)
{
  int v2 = a2[21];
  if ((v2 & 0x200) == 0) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v6 = *(_DWORD **)v4;
  uint64_t v5 = *(_DWORD **)(v4 + 8);
  if (v6 != v5)
  {
    while (*v6 != a2[15])
    {
      if (++v6 == v5)
      {
        uint64_t v6 = v5;
        break;
      }
    }
  }
  BOOL result = 0;
  if ((v2 & 0x100) != 0 && v6 != v5) {
    return a2[14] == 1;
  }
  return result;
}

uint64_t std::__function::__func<CLMicroLocationTriggerCounters::getRecordingsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getRecordingsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationTriggerCounters::getRecordingsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getRecordingsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::target_type()
{
}

void *std::__function::__value_func<BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<CLMicroLocationTriggerCounters::getRecordingsCountWithType(CLMicroLocationTriggerManager::MiLoTriggerType)::$_0,std::allocator<CLMicroLocationTriggerCounters::getRecordingsCountWithType(CLMicroLocationTriggerManager::MiLoTriggerType)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::~__func()
{
}

__n128 std::__function::__func<CLMicroLocationTriggerCounters::getRecordingsCountWithType(CLMicroLocationTriggerManager::MiLoTriggerType)::$_0,std::allocator<CLMicroLocationTriggerCounters::getRecordingsCountWithType(CLMicroLocationTriggerManager::MiLoTriggerType)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::__clone(uint64_t a1)
{
  int v2 = (char *)operator new(0x18uLL);
  *(void *)int v2 = &unk_2704E1718;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<CLMicroLocationTriggerCounters::getRecordingsCountWithType(CLMicroLocationTriggerManager::MiLoTriggerType)::$_0,std::allocator<CLMicroLocationTriggerCounters::getRecordingsCountWithType(CLMicroLocationTriggerManager::MiLoTriggerType)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_2704E1718;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<CLMicroLocationTriggerCounters::getRecordingsCountWithType(CLMicroLocationTriggerManager::MiLoTriggerType)::$_0,std::allocator<CLMicroLocationTriggerCounters::getRecordingsCountWithType(CLMicroLocationTriggerManager::MiLoTriggerType)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::operator()(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x200) == 0) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v7 = *(_DWORD **)v5;
  uint64_t v6 = *(_DWORD **)(v5 + 8);
  if (v7 != v6)
  {
    while (*v7 != *(_DWORD *)(a2 + 60))
    {
      if (++v7 == v6)
      {
        uint64_t v7 = v6;
        break;
      }
    }
  }
  BOOL result = 0;
  if ((v2 & 0x100) != 0 && v7 != v6 && *(_DWORD *)(a2 + 56) == 1) {
    return CLMicroLocationTriggerManager::enumerateClientIdToTriggerType(*(void *)(a2 + 32)) == *(_DWORD *)(a1 + 16);
  }
  return result;
}

uint64_t std::__function::__func<CLMicroLocationTriggerCounters::getRecordingsCountWithType(CLMicroLocationTriggerManager::MiLoTriggerType)::$_0,std::allocator<CLMicroLocationTriggerCounters::getRecordingsCountWithType(CLMicroLocationTriggerManager::MiLoTriggerType)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationTriggerCounters::getRecordingsCountWithType(CLMicroLocationTriggerManager::MiLoTriggerType)::$_0,std::allocator<CLMicroLocationTriggerCounters::getRecordingsCountWithType(CLMicroLocationTriggerManager::MiLoTriggerType)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::target_type()
{
}

void std::__function::__func<CLMicroLocationTriggerCounters::getLocalizationCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLocalizationCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::~__func()
{
}

void *std::__function::__func<CLMicroLocationTriggerCounters::getLocalizationCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLocalizationCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_2704E1798;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationTriggerCounters::getLocalizationCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLocalizationCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_2704E1798;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationTriggerCounters::getLocalizationCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLocalizationCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::operator()(uint64_t a1, const CLMicroLocationProto::TriggerEvent *a2)
{
  LODWORD(result) = CLMicroLocationTriggerCounters::isLocalization(*(CLMicroLocationTriggerCounters **)(a1 + 8), a2);
  if (*((_DWORD *)a2 + 15)) {
    return 0;
  }
  else {
    return result;
  }
}

uint64_t std::__function::__func<CLMicroLocationTriggerCounters::getLocalizationCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLocalizationCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationTriggerCounters::getLocalizationCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLocalizationCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::target_type()
{
}

void std::__function::__func<CLMicroLocationTriggerCounters::getLegacyLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLegacyLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::~__func()
{
}

void *std::__function::__func<CLMicroLocationTriggerCounters::getLegacyLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLegacyLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_2704E1818;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationTriggerCounters::getLegacyLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLegacyLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_2704E1818;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<CLMicroLocationTriggerCounters::getLegacyLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLegacyLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::operator()(uint64_t a1, uint64_t a2)
{
  BOOL result = CLMicroLocationTriggerCounters::isLocalization(*(CLMicroLocationTriggerCounters **)(a1 + 8), (const CLMicroLocationProto::TriggerEvent *)a2);
  if (result) {
    return (*(unsigned char *)(a2 + 84) & 0x10) != 0
  }
        && CLMicroLocationTriggerManager::enumerateClientIdToTriggerType(*(void *)(a2 + 32)) == 0;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationTriggerCounters::getLegacyLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLegacyLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationTriggerCounters::getLegacyLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLegacyLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::target_type()
{
}

void std::__function::__func<CLMicroLocationTriggerCounters::getCachedLegacyLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getCachedLegacyLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::~__func()
{
}

void *std::__function::__func<CLMicroLocationTriggerCounters::getCachedLegacyLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getCachedLegacyLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_2704E1898;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationTriggerCounters::getCachedLegacyLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getCachedLegacyLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_2704E1898;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<CLMicroLocationTriggerCounters::getCachedLegacyLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getCachedLegacyLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::operator()(uint64_t a1, uint64_t a2)
{
  BOOL result = CLMicroLocationTriggerCounters::isLocalization(*(CLMicroLocationTriggerCounters **)(a1 + 8), (const CLMicroLocationProto::TriggerEvent *)a2);
  if (result) {
    return (*(unsigned char *)(a2 + 84) & 0x10) != 0
  }
        && !CLMicroLocationTriggerManager::enumerateClientIdToTriggerType(*(void *)(a2 + 32))
        && *(_DWORD *)(a2 + 60) == 4;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationTriggerCounters::getCachedLegacyLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getCachedLegacyLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationTriggerCounters::getCachedLegacyLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getCachedLegacyLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::target_type()
{
}

void std::__function::__func<CLMicroLocationTriggerCounters::getNonCachedLegacyLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getNonCachedLegacyLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::~__func()
{
}

void *std::__function::__func<CLMicroLocationTriggerCounters::getNonCachedLegacyLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getNonCachedLegacyLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_2704E1918;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationTriggerCounters::getNonCachedLegacyLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getNonCachedLegacyLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_2704E1918;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<CLMicroLocationTriggerCounters::getNonCachedLegacyLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getNonCachedLegacyLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::operator()(uint64_t a1, uint64_t a2)
{
  BOOL result = CLMicroLocationTriggerCounters::isLocalization(*(CLMicroLocationTriggerCounters **)(a1 + 8), (const CLMicroLocationProto::TriggerEvent *)a2);
  if (result) {
    return (*(unsigned char *)(a2 + 84) & 0x10) != 0
  }
        && !CLMicroLocationTriggerManager::enumerateClientIdToTriggerType(*(void *)(a2 + 32))
        && *(_DWORD *)(a2 + 60) != 4;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationTriggerCounters::getNonCachedLegacyLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getNonCachedLegacyLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationTriggerCounters::getNonCachedLegacyLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getNonCachedLegacyLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::target_type()
{
}

void std::__function::__func<CLMicroLocationTriggerCounters::getNewLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getNewLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::~__func()
{
}

void *std::__function::__func<CLMicroLocationTriggerCounters::getNewLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getNewLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_2704E1998;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationTriggerCounters::getNewLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getNewLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_2704E1998;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationTriggerCounters::getNewLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getNewLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t result = CLMicroLocationTriggerCounters::isLocalization(*(CLMicroLocationTriggerCounters **)(a1 + 8), (const CLMicroLocationProto::TriggerEvent *)a2);
  if (result)
  {
    if ((*(unsigned char *)(a2 + 84) & 0x10) != 0)
    {
      uint64_t result = CLMicroLocationTriggerManager::enumerateClientIdToTriggerType(*(void *)(a2 + 32));
      if (result) {
        return *(_DWORD *)(a2 + 60) == 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t std::__function::__func<CLMicroLocationTriggerCounters::getNewLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getNewLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationTriggerCounters::getNewLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getNewLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::target_type()
{
}

void std::__function::__func<CLMicroLocationTriggerCounters::getMotionLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getMotionLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::~__func()
{
}

void *std::__function::__func<CLMicroLocationTriggerCounters::getMotionLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getMotionLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_2704E1A18;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationTriggerCounters::getMotionLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getMotionLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_2704E1A18;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<CLMicroLocationTriggerCounters::getMotionLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getMotionLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::operator()(uint64_t a1, uint64_t a2)
{
  BOOL result = CLMicroLocationTriggerCounters::isLocalization(*(CLMicroLocationTriggerCounters **)(a1 + 8), (const CLMicroLocationProto::TriggerEvent *)a2);
  if (result) {
    return (*(unsigned char *)(a2 + 84) & 0x10) != 0
  }
        && CLMicroLocationTriggerManager::enumerateClientIdToTriggerType(*(void *)(a2 + 32)) == 1;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationTriggerCounters::getMotionLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getMotionLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationTriggerCounters::getMotionLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getMotionLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::target_type()
{
}

void std::__function::__func<CLMicroLocationTriggerCounters::getLocalizationsCausedBy(CLMicroLocationProto::TriggerReason)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLocalizationsCausedBy(CLMicroLocationProto::TriggerReason)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::~__func()
{
}

__n128 std::__function::__func<CLMicroLocationTriggerCounters::getLocalizationsCausedBy(CLMicroLocationProto::TriggerReason)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLocalizationsCausedBy(CLMicroLocationProto::TriggerReason)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_2704E1A98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<CLMicroLocationTriggerCounters::getLocalizationsCausedBy(CLMicroLocationProto::TriggerReason)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLocalizationsCausedBy(CLMicroLocationProto::TriggerReason)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_2704E1A98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<CLMicroLocationTriggerCounters::getLocalizationsCausedBy(CLMicroLocationProto::TriggerReason)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLocalizationsCausedBy(CLMicroLocationProto::TriggerReason)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::operator()(uint64_t a1, uint64_t a2)
{
  BOOL result = CLMicroLocationTriggerCounters::isLocalization(*(CLMicroLocationTriggerCounters **)(a1 + 8), (const CLMicroLocationProto::TriggerEvent *)a2);
  if (result) {
    return (*(unsigned char *)(a2 + 85) & 4) != 0 && *(_DWORD *)(a2 + 72) == *(_DWORD *)(a1 + 16);
  }
  return result;
}

uint64_t std::__function::__func<CLMicroLocationTriggerCounters::getLocalizationsCausedBy(CLMicroLocationProto::TriggerReason)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLocalizationsCausedBy(CLMicroLocationProto::TriggerReason)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationTriggerCounters::getLocalizationsCausedBy(CLMicroLocationProto::TriggerReason)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLocalizationsCausedBy(CLMicroLocationProto::TriggerReason)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::target_type()
{
}

void std::__function::__func<CLMicroLocationTriggerCounters::getLocalizationsCausedByWithType(CLMicroLocationProto::TriggerReason,CLMicroLocationTriggerManager::MiLoTriggerType)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLocalizationsCausedByWithType(CLMicroLocationProto::TriggerReason,CLMicroLocationTriggerManager::MiLoTriggerType)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::~__func()
{
}

__n128 std::__function::__func<CLMicroLocationTriggerCounters::getLocalizationsCausedByWithType(CLMicroLocationProto::TriggerReason,CLMicroLocationTriggerManager::MiLoTriggerType)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLocalizationsCausedByWithType(CLMicroLocationProto::TriggerReason,CLMicroLocationTriggerManager::MiLoTriggerType)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_2704E1B18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<CLMicroLocationTriggerCounters::getLocalizationsCausedByWithType(CLMicroLocationProto::TriggerReason,CLMicroLocationTriggerManager::MiLoTriggerType)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLocalizationsCausedByWithType(CLMicroLocationProto::TriggerReason,CLMicroLocationTriggerManager::MiLoTriggerType)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_2704E1B18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<CLMicroLocationTriggerCounters::getLocalizationsCausedByWithType(CLMicroLocationProto::TriggerReason,CLMicroLocationTriggerManager::MiLoTriggerType)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLocalizationsCausedByWithType(CLMicroLocationProto::TriggerReason,CLMicroLocationTriggerManager::MiLoTriggerType)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::operator()(uint64_t a1, uint64_t a2)
{
  BOOL result = CLMicroLocationTriggerCounters::isLocalization(*(CLMicroLocationTriggerCounters **)(a1 + 8), (const CLMicroLocationProto::TriggerEvent *)a2);
  if (result)
  {
    int v5 = *(_DWORD *)(a2 + 84);
    if ((v5 & 0x400) != 0)
    {
      BOOL result = 0;
      if ((v5 & 0x10) != 0 && *(_DWORD *)(a2 + 72) == *(_DWORD *)(a1 + 16)) {
        return CLMicroLocationTriggerManager::enumerateClientIdToTriggerType(*(void *)(a2 + 32)) == *(_DWORD *)(a1 + 20);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t std::__function::__func<CLMicroLocationTriggerCounters::getLocalizationsCausedByWithType(CLMicroLocationProto::TriggerReason,CLMicroLocationTriggerManager::MiLoTriggerType)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLocalizationsCausedByWithType(CLMicroLocationProto::TriggerReason,CLMicroLocationTriggerManager::MiLoTriggerType)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationTriggerCounters::getLocalizationsCausedByWithType(CLMicroLocationProto::TriggerReason,CLMicroLocationTriggerManager::MiLoTriggerType)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLocalizationsCausedByWithType(CLMicroLocationProto::TriggerReason,CLMicroLocationTriggerManager::MiLoTriggerType)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::target_type()
{
}

void std::__function::__func<CLMicroLocationTriggerCounters::getLocalizationsCausedByWithTypeMotionState(CLMicroLocationProto::TriggerReason,CLMicroLocationTriggerManager::MiLoTriggerType,CLMicroLocationProto::MotionState)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLocalizationsCausedByWithTypeMotionState(CLMicroLocationProto::TriggerReason,CLMicroLocationTriggerManager::MiLoTriggerType,CLMicroLocationProto::MotionState)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::~__func()
{
}

__n128 std::__function::__func<CLMicroLocationTriggerCounters::getLocalizationsCausedByWithTypeMotionState(CLMicroLocationProto::TriggerReason,CLMicroLocationTriggerManager::MiLoTriggerType,CLMicroLocationProto::MotionState)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLocalizationsCausedByWithTypeMotionState(CLMicroLocationProto::TriggerReason,CLMicroLocationTriggerManager::MiLoTriggerType,CLMicroLocationProto::MotionState)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_2704E1B98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<CLMicroLocationTriggerCounters::getLocalizationsCausedByWithTypeMotionState(CLMicroLocationProto::TriggerReason,CLMicroLocationTriggerManager::MiLoTriggerType,CLMicroLocationProto::MotionState)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLocalizationsCausedByWithTypeMotionState(CLMicroLocationProto::TriggerReason,CLMicroLocationTriggerManager::MiLoTriggerType,CLMicroLocationProto::MotionState)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_2704E1B98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<CLMicroLocationTriggerCounters::getLocalizationsCausedByWithTypeMotionState(CLMicroLocationProto::TriggerReason,CLMicroLocationTriggerManager::MiLoTriggerType,CLMicroLocationProto::MotionState)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLocalizationsCausedByWithTypeMotionState(CLMicroLocationProto::TriggerReason,CLMicroLocationTriggerManager::MiLoTriggerType,CLMicroLocationProto::MotionState)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::operator()(uint64_t a1, uint64_t a2)
{
  BOOL result = CLMicroLocationTriggerCounters::isLocalization(*(CLMicroLocationTriggerCounters **)(a1 + 8), (const CLMicroLocationProto::TriggerEvent *)a2);
  if (result)
  {
    int v5 = *(_DWORD *)(a2 + 84);
    if ((v5 & 0x400) != 0
      && ((~v5 & 0x1010) == 0 ? (BOOL v6 = *(_DWORD *)(a2 + 72) == *(_DWORD *)(a1 + 16)) : (BOOL v6 = 0),
          v6 && *(_DWORD *)(a2 + 76) == *(_DWORD *)(a1 + 24)))
    {
      return CLMicroLocationTriggerManager::enumerateClientIdToTriggerType(*(void *)(a2 + 32)) == *(_DWORD *)(a1 + 20);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t std::__function::__func<CLMicroLocationTriggerCounters::getLocalizationsCausedByWithTypeMotionState(CLMicroLocationProto::TriggerReason,CLMicroLocationTriggerManager::MiLoTriggerType,CLMicroLocationProto::MotionState)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLocalizationsCausedByWithTypeMotionState(CLMicroLocationProto::TriggerReason,CLMicroLocationTriggerManager::MiLoTriggerType,CLMicroLocationProto::MotionState)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationTriggerCounters::getLocalizationsCausedByWithTypeMotionState(CLMicroLocationProto::TriggerReason,CLMicroLocationTriggerManager::MiLoTriggerType,CLMicroLocationProto::MotionState)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLocalizationsCausedByWithTypeMotionState(CLMicroLocationProto::TriggerReason,CLMicroLocationTriggerManager::MiLoTriggerType,CLMicroLocationProto::MotionState)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::target_type()
{
}

char *std::__tree<boost::uuids::uuid>::__emplace_unique_key_args<boost::uuids::uuid,boost::uuids::uuid>(uint64_t **a1, unint64_t *a2, _OWORD *a3)
{
  int v5 = (void **)std::__tree<boost::uuids::uuid>::__find_equal<boost::uuids::uuid>((uint64_t)a1, &v9, a2);
  BOOL v6 = (char *)*v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    BOOL v6 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v6 + 25) = *a3;
    std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

void CLMicroLocationLegacyEventBatteryState::handleEvent(char a1@<W1>, double *a2@<X2>, unsigned char *a3@<X8>)
{
  double v5 = *a2;
  CLMicroLocationProto::BatteryChargerConnected::BatteryChargerConnected((CLMicroLocationProto::BatteryChargerConnected *)v6);
  CLMicroLocationProtobufHelper::createRecordingEvent<CLMicroLocationProto::BatteryChargerConnected>((CLMicroLocationProto::RecordingEvent *)v6, 0, 0, 0, (CLMicroLocationProto *)3, (uint64_t)v7, v5);
  char v8 = a1;
  CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)v9, (const CLMicroLocationProto::RecordingEvent *)v7);
  *a3 = v8;
  CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)(a3 + 8), (const CLMicroLocationProto::RecordingEvent *)v9);
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v9);
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v7);
  CLMicroLocationProto::BatteryChargerConnected::~BatteryChargerConnected((CLMicroLocationProto::BatteryChargerConnected *)v6);
}

void sub_25649D724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  CLMicroLocationProto::RecordingEvent::~RecordingEvent(v12);
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)&a12);
  CLMicroLocationProto::BatteryChargerConnected::~BatteryChargerConnected((CLMicroLocationProto::BatteryChargerConnected *)&a9);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createRecordingEvent<CLMicroLocationProto::BatteryChargerConnected>(CLMicroLocationProto::RecordingEvent *a1@<X0>, CLMicroLocationProto *a2@<X1>, char a3@<W2>, char a4@<W3>, CLMicroLocationProto *a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)a6);
  unsigned int v14 = *((_DWORD *)a1 + 2);
  if (!CLMicroLocationProto::EventType_IsValid((CLMicroLocationProto *)v14))
  {
    __int16 v17 = "::CLMicroLocationProto::EventType_IsValid(value)";
    int v18 = 20192;
    uint64_t v19 = "set_eventtype";
    goto LABEL_10;
  }
  int v15 = *(_DWORD *)(a6 + 140);
  *(_DWORD *)(a6 + 72) = v14;
  *(double *)(a6 + 8) = a7;
  *(unsigned char *)(a6 + 77) = a3;
  *(_DWORD *)(a6 + 140) = v15 | 0x2803;
  *(unsigned char *)(a6 + 76) = a4;
  if (!CLMicroLocationProto::ConfidenceLevel_IsValid(a5))
  {
    __int16 v17 = "::CLMicroLocationProto::ConfidenceLevel_IsValid(value)";
    int v18 = 20701;
    uint64_t v19 = "set_confidencelevel";
    goto LABEL_10;
  }
  *(_DWORD *)(a6 + 140) |= 0x4000u;
  *(_DWORD *)(a6 + 120) = a5;
  if (((unint64_t)a2 & 0xFF00000000) != 0)
  {
    if (CLMicroLocationProto::MotionState_IsValid(a2))
    {
      *(_DWORD *)(a6 + 140) |= 0x20000u;
      *(_DWORD *)(a6 + 124) = a2;
      goto LABEL_6;
    }
    __int16 v17 = "::CLMicroLocationProto::MotionState_IsValid(value)";
    int v18 = 20793;
    uint64_t v19 = "set_motionstate";
LABEL_10:
    __assert_rtn(v19, "microlocation.pb.h", v18, v17);
  }
LABEL_6:
  CLMicroLocationProtobufHelper::setSpecificRecordingEvent((CLMicroLocationProtobufHelper *)a6, a1, v16);
}

void sub_25649D888(_Unwind_Exception *a1)
{
  CLMicroLocationProto::RecordingEvent::~RecordingEvent(v1);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationQualityEstimationAlgorithms::evaluateQualityWithNumFingerprints(CLMicroLocationQualityEstimationAlgorithms *this, const CLMicroLocationFingerprintVector *a2)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  if (CLMicroLocationFingerprintVector::size(this))
  {
    unint64_t v3 = 0;
    while (2)
    {
      uint64_t v4 = CLMicroLocationFingerprintVector::operator[](this, v3) + 16;
      while (1)
      {
        uint64_t v4 = *(void *)v4;
        if (!v4) {
          break;
        }
        if (*(_DWORD *)(v4 + 24) == 5)
        {
          char v8 = +[ULDefaultsSingleton shared];
          uint64_t v9 = [v8 defaultsDictionary];

          uint64_t v10 = [NSString stringWithUTF8String:"ULModelQualityNumFingerprintsWiFiBleThreshold"];
          uint64_t v11 = [v9 objectForKey:v10];
          BOOL v6 = (void *)v11;
          if (v11 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
            unsigned int v12 = [v6 unsignedIntValue];
          }
          else {
            unsigned int v12 = [&unk_2704F21A8 unsignedIntValue];
          }
          unsigned int v13 = v12;
          int v14 = 1;
          goto LABEL_18;
        }
      }
      if (++v3 < CLMicroLocationFingerprintVector::size(this)) {
        continue;
      }
      break;
    }
  }
  double v5 = +[ULDefaultsSingleton shared];
  uint64_t v9 = [v5 defaultsDictionary];

  uint64_t v10 = [NSString stringWithUTF8String:"ULModelQualityNumFingerprintsWiFiOnlyThreshold"];
  BOOL v6 = [v9 objectForKey:v10];
  if (v6 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    unsigned int v7 = [v6 unsignedIntValue];
  }
  else {
    unsigned int v7 = [&unk_2704F2190 unsignedIntValue];
  }
  unsigned int v13 = v7;
  int v14 = 0;
LABEL_18:

  *(void *)float v41 = 0;
  *(void *)&v41[8] = 0;
  *(void *)uint64_t buf = v41;
  int v15 = +[ULDefaultsSingleton shared];
  char v16 = [v15 defaultsDictionary];

  __int16 v17 = [NSString stringWithUTF8String:"ULModelQualitySecondsPerDay"];
  int v18 = [v16 objectForKey:v17];
  if (v18 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    int v19 = [v18 intValue];
  }
  else {
    int v19 = [&unk_2704F2100 intValue];
  }
  int v20 = v19;

  unint64_t v21 = 0;
  unint64_t v22 = v13;
  while (v21 < CLMicroLocationFingerprintVector::size(this))
  {
    unint64_t v39 = vcvtmd_u64_f64(*(double *)(CLMicroLocationFingerprintVector::operator[](this, v21) + 144) / (double)v20);
    std::__tree<unsigned long long>::__emplace_unique_key_args<unsigned long long,unsigned long long>((uint64_t **)buf, &v39, (uint64_t *)&v39);
    ++v21;
  }
  unint64_t v23 = *(void *)&v41[8];
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)buf, *(void **)v41);
  double v24 = +[ULDefaultsSingleton shared];
  int v25 = [v24 defaultsDictionary];

  double v26 = [NSString stringWithUTF8String:"ULModelQualityDaysInLOIForRelaxation"];
  char v27 = [v25 objectForKey:v26];
  if (v27 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    unsigned int v28 = [v27 unsignedIntValue];
  }
  else {
    unsigned int v28 = [&unk_2704F2130 unsignedIntValue];
  }
  unsigned int v29 = v28;

  if (v23 >= v29)
  {
    uint64_t v30 = +[ULDefaultsSingleton shared];
    unint64_t v31 = [v30 defaultsDictionary];

    uint64_t v32 = [NSString stringWithUTF8String:"ULModelQualityNumFingerprintsRelaxationAfterTimeInLOI"];
    unint64_t v33 = [v31 objectForKey:v32];
    if (v33 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
      unsigned int v34 = [v33 unsignedIntValue];
    }
    else {
      unsigned int v34 = [&unk_2704F2148 unsignedIntValue];
    }
    unsigned int v35 = v34;

    v22 -= v35;
  }
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_104);
  }
  uint64_t v36 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v37 = CLMicroLocationFingerprintVector::size(this);
    *(_DWORD *)uint64_t buf = 68290050;
    *(_WORD *)float v41 = 2082;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(void *)&v41[2] = "";
    *(_WORD *)&v41[10] = 2050;
    *(void *)&v41[12] = v37;
    __int16 v42 = 2050;
    unint64_t v43 = v23;
    __int16 v44 = 1026;
    int v45 = v14;
    __int16 v46 = 2050;
    unint64_t v47 = v22;
    _os_log_impl(&dword_25631F000, v36, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"evaluateQualityWithNumFingerprints\", \"Num fingerprints (unpruned)\":%{public}lu, \"Number of days with recordings\":%{public}lu, \"Has BLE\":%{public}hhd, \"Threshold\":%{public}lu}", buf, 0x36u);
  }

  if (CLMicroLocationFingerprintVector::size(this) < v22) {
    return 1;
  }
  else {
    return 3;
  }
}

void sub_25649DD98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationQualityEstimationAlgorithms::evaluateQualityTreeBased(CLMicroLocationQualityEstimationAlgorithms *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v123 = *MEMORY[0x263EF8340];
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  int v92 = (void **)(a2 + 8);
  std::vector<CLMicroLocationProto::ConfidenceLevel>::__assign_with_size[abi:ne180100]<CLMicroLocationProto::ConfidenceLevel*,CLMicroLocationProto::ConfidenceLevel*>((char *)(a2 + 8), 0, 0, 0);
  uint64_t v4 = +[ULDefaultsSingleton shared];
  double v5 = [v4 defaultsDictionary];

  BOOL v6 = [NSString stringWithUTF8String:"ULAdaptiveSensorsEnable"];
  unsigned int v7 = [v5 objectForKey:v6];
  if (v7 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    char v8 = [v7 BOOLValue];
  }
  else {
    char v8 = [MEMORY[0x263EFFA88] BOOLValue];
  }
  char v9 = v8;

  v106[0] = &stru_2704E2F50;
  v106[1] = (id)CLMicroLocationUtils::createEnabledTechnologies((CLMicroLocationUtils *)1, 1, 1);
  char v107 = v9;
  uint64_t v103 = 0;
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  CLMicroLocationClusterRFDistance::evaluateRFClusterDistances((uint64_t)v106, (uint64_t)this, (float *)&v103);
  if (CLMicroLocationModel::numClusters(this) == 1)
  {
    HIDWORD(v104) = 0;
    LODWORD(v105) = 0;
  }
  long long v100 = 0u;
  long long v101 = 0u;
  int v102 = 1065353216;
  long long v98 = 0;
  unint64_t v99 = 0;
  uint64_t v96 = 0;
  long long v97 = &v98;
  long long v94 = &v95;
  long long v95 = 0;
  uint64_t v11 = *((void *)this + 41);
  uint64_t v10 = *((void *)this + 42);
  unint64_t v12 = (v10 - v11) >> 5;
  if (v10 == v11)
  {
    unsigned int v23 = 0;
    *(_DWORD *)(a2 + 32) = 0;
    int v20 = (int *)(a2 + 32);
    *(_DWORD *)(a2 + 36) = 0;
    unint64_t v21 = (int *)(a2 + 36);
    *(_DWORD *)(a2 + 40) = 0;
    unint64_t v22 = (int *)(a2 + 40);
  }
  else
  {
    do
    {
      for (uint64_t i = *(uint64_t **)(*(void *)v11 + 16); i; uint64_t i = (uint64_t *)*i)
      {
        int v14 = *((_DWORD *)i + 6);
        if (v14 == 6)
        {
          char v16 = (uint64_t **)&v94;
        }
        else
        {
          if (v14 != 5)
          {
            if (v14 == 1)
            {
              *(void *)uint64_t buf = i + 4;
              int v15 = std::__hash_table<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::__unordered_map_hasher<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::hash<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,std::equal_to<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,true>,std::__unordered_map_equal<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::equal_to<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,std::hash<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,true>,std::allocator<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>>>::__emplace_unique_key_args<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::piecewise_construct_t const&,std::tuple<std::variant<unsigned long long,boost::uuids::uuid,std::string> const&>,std::tuple<>>((uint64_t)&v100, (uint64_t)(i + 4), (uint64_t)&std::piecewise_construct, (uint64_t *)buf);
              ++*((_DWORD *)v15 + 12);
            }
            continue;
          }
          char v16 = (uint64_t **)&v97;
        }
        std::__tree<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::__emplace_unique_key_args<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::variant<unsigned long long,boost::uuids::uuid,std::string> const&>(v16, (uint64_t)(i + 4), (uint64_t)(i + 4));
      }
      v11 += 32;
    }
    while (v11 != v10);
    int v17 = v99;
    int v18 = v96;
    int v19 = (uint64_t **)v101;
    *(_DWORD *)(a2 + 32) = DWORD2(v101);
    int v20 = (int *)(a2 + 32);
    *(_DWORD *)(a2 + 36) = v17;
    unint64_t v21 = (int *)(a2 + 36);
    *(_DWORD *)(a2 + 40) = v18;
    unint64_t v22 = (int *)(a2 + 40);
    if (v19)
    {
      long long v90 = (int *)(a2 + 40);
      int v91 = (int *)(a2 + 36);
      unsigned int v23 = 0;
      do
      {
        unint64_t v24 = *((int *)v19 + 12);
        int v25 = +[ULDefaultsSingleton shared];
        double v26 = [v25 defaultsDictionary];

        char v27 = [NSString stringWithUTF8String:"ULRobustWiFiMinARDecisionTreeFeatureThreshold"];
        unsigned int v28 = [v26 objectForKey:v27];
        if (v28 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
          [v28 doubleValue];
        }
        else {
          [&unk_2704F10A0 doubleValue];
        }
        double v30 = v29;

        if (v30 < (float)(v24 / v12)) {
          ++v23;
        }
        int v19 = (uint64_t **)*v19;
      }
      while (v19);
      unint64_t v22 = v90;
      unint64_t v21 = v91;
    }
    else
    {
      unsigned int v23 = 0;
    }
  }
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_104);
  }
  unint64_t v31 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    int v32 = *v20;
    int v33 = *v21;
    int v34 = *v22;
    *(_DWORD *)uint64_t buf = 68290562;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v109 = 2082;
    uint64_t v110 = "";
    __int16 v111 = 2050;
    unint64_t v112 = v12;
    __int16 v113 = 2050;
    uint64_t v114 = v23;
    __int16 v115 = 1026;
    int v116 = v32;
    __int16 v117 = 1026;
    int v118 = v33;
    __int16 v119 = 1026;
    int v120 = v34;
    __int16 v121 = 2050;
    double v122 = *(float *)&v105;
    _os_log_impl(&dword_25631F000, v31, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"evaluateQualityTreeBased\", \"Num fingerprints (post-pruning)\":%{public}lu, \"NumRobustWifiSources\":%{public}lu, \"NumWiFiSources\":%{public}u, \"NumBLESources\":%{public}u, \"NumUWBSources\":%{public}u, \"maxClusterRfDistance\":\"%{public}f\"}", buf, 0x42u);
  }
  unsigned int v35 = +[ULDefaultsSingleton shared];
  uint64_t v36 = [v35 defaultsDictionary];

  uint64_t v37 = [NSString stringWithUTF8String:"ULNumMinFingerprintsPostPruningTreeBasedThreshold"];
  uint64_t v38 = [v36 objectForKey:v37];
  if (v38 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    unsigned int v39 = [v38 unsignedIntValue];
  }
  else {
    unsigned int v39 = [&unk_2704F2160 unsignedIntValue];
  }
  unsigned int v40 = v39;

  if (v12 < v40)
  {
    unint64_t v41 = *(void *)(a2 + 24);
    __int16 v42 = *(int **)(a2 + 16);
    if ((unint64_t)v42 < v41)
    {
      int v43 = 5;
LABEL_59:
      *__int16 v42 = v43;
      CLMacAddress v63 = v42 + 1;
LABEL_100:
      unint64_t v82 = (int *)a2;
      *(void *)(a2 + 16) = v63;
      int v81 = 1;
      goto LABEL_101;
    }
    uint64_t v56 = (int *)*v92;
    uint64_t v57 = ((char *)v42 - (unsigned char *)*v92) >> 2;
    unint64_t v58 = v57 + 1;
    if ((unint64_t)(v57 + 1) >> 62) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v59 = v41 - (void)v56;
    if (v59 >> 1 > v58) {
      unint64_t v58 = v59 >> 1;
    }
    if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v60 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v60 = v58;
    }
    if (v60)
    {
      uint64_t v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationProto::ConfidenceReason>>(a2 + 24, v60);
      uint64_t v56 = *(int **)(a2 + 8);
      __int16 v42 = *(int **)(a2 + 16);
    }
    else
    {
      uint64_t v61 = 0;
    }
    int v76 = &v61[4 * v57];
    uint64_t v77 = &v61[4 * v60];
    *(_DWORD *)int v76 = 5;
    CLMacAddress v63 = v76 + 4;
    while (v42 != v56)
    {
      int v78 = *--v42;
      *((_DWORD *)v76 - 1) = v78;
      v76 -= 4;
    }
    goto LABEL_98;
  }
  float v44 = *(float *)&v105;
  int v45 = +[ULDefaultsSingleton shared];
  __int16 v46 = [v45 defaultsDictionary];

  unint64_t v47 = [NSString stringWithUTF8String:"ULMaxClusterRFDistanceDecisionTreeNodeThreshold"];
  uint64_t v48 = [v46 objectForKey:v47];
  if (v48 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    [v48 doubleValue];
  }
  else {
    [&unk_2704F10B0 doubleValue];
  }
  double v50 = v49;

  if (v50 >= v44)
  {
    unint64_t v62 = *(void *)(a2 + 24);
    __int16 v42 = *(int **)(a2 + 16);
    if ((unint64_t)v42 < v62)
    {
      int v43 = 6;
      goto LABEL_59;
    }
    uint64_t v56 = (int *)*v92;
    uint64_t v71 = ((char *)v42 - (unsigned char *)*v92) >> 2;
    unint64_t v72 = v71 + 1;
    if ((unint64_t)(v71 + 1) >> 62) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v73 = v62 - (void)v56;
    if (v73 >> 1 > v72) {
      unint64_t v72 = v73 >> 1;
    }
    if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v74 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v74 = v72;
    }
    if (v74)
    {
      double v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationProto::ConfidenceReason>>(a2 + 24, v74);
      uint64_t v56 = *(int **)(a2 + 8);
      __int16 v42 = *(int **)(a2 + 16);
    }
    else
    {
      double v75 = 0;
    }
    int v76 = &v75[4 * v71];
    uint64_t v77 = &v75[4 * v74];
    *(_DWORD *)int v76 = 6;
    CLMacAddress v63 = v76 + 4;
    while (v42 != v56)
    {
      int v83 = *--v42;
      *((_DWORD *)v76 - 1) = v83;
      v76 -= 4;
    }
LABEL_98:
    *(void *)(a2 + 8) = v76;
    *(void *)(a2 + 16) = v63;
    *(void *)(a2 + 24) = v77;
    if (v56) {
      operator delete(v56);
    }
    goto LABEL_100;
  }
  float v51 = +[ULDefaultsSingleton shared];
  float v52 = [v51 defaultsDictionary];

  long long v53 = [NSString stringWithUTF8String:"ULNumRobustWifiSourcesDecisionTreeNodeThreshold"];
  uint64_t v54 = [v52 objectForKey:v53];
  if (v54 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    int v55 = [v54 unsignedIntValue];
  }
  else {
    int v55 = [&unk_2704F2178 unsignedIntValue];
  }
  int v64 = v55;

  if ((int)v23 < v64)
  {
    unint64_t v65 = v99;
    uint64_t v66 = +[ULDefaultsSingleton shared];
    __int16 v67 = [v66 defaultsDictionary];

    float v68 = [NSString stringWithUTF8String:"ULNumBLESourcesDecisionTreeNodeThreshold"];
    float v69 = [v67 objectForKey:v68];
    if (!v69) {
      goto LABEL_77;
    }
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      unsigned int v70 = [v69 unsignedIntValue];
    }
    else {
LABEL_77:
    }
      unsigned int v70 = [&unk_2704F2118 unsignedIntValue];
    unsigned int v79 = v70;

    if (v65 < v79)
    {
      unint64_t v80 = *(void *)(a2 + 24);
      __int16 v42 = *(int **)(a2 + 16);
      if ((unint64_t)v42 < v80)
      {
        int v43 = 7;
        goto LABEL_59;
      }
      uint64_t v56 = (int *)*v92;
      uint64_t v84 = ((char *)v42 - (unsigned char *)*v92) >> 2;
      unint64_t v85 = v84 + 1;
      if ((unint64_t)(v84 + 1) >> 62) {
        std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v86 = v80 - (void)v56;
      if (v86 >> 1 > v85) {
        unint64_t v85 = v86 >> 1;
      }
      if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v87 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v87 = v85;
      }
      if (v87)
      {
        char v88 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationProto::ConfidenceReason>>(a2 + 24, v87);
        uint64_t v56 = *(int **)(a2 + 8);
        __int16 v42 = *(int **)(a2 + 16);
      }
      else
      {
        char v88 = 0;
      }
      int v76 = &v88[4 * v84];
      uint64_t v77 = &v88[4 * v87];
      *(_DWORD *)int v76 = 7;
      CLMacAddress v63 = v76 + 4;
      while (v42 != v56)
      {
        int v89 = *--v42;
        *((_DWORD *)v76 - 1) = v89;
        v76 -= 4;
      }
      goto LABEL_98;
    }
  }
  int v81 = 3;
  unint64_t v82 = (int *)a2;
LABEL_101:
  int *v82 = v81;
  std::__tree<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::destroy((uint64_t)&v94, v95);
  std::__tree<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::destroy((uint64_t)&v97, v98);
  std::__hash_table<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::__unordered_map_hasher<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::hash<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,std::equal_to<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,true>,std::__unordered_map_equal<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::equal_to<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,std::hash<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,true>,std::allocator<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>>>::~__hash_table((uint64_t)&v100);
}

void sub_25649E814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, char a13, void *a14, uint64_t a15, char a16, void *a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id a27)
{
  std::__tree<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::destroy((uint64_t)&a13, a14);
  std::__tree<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::destroy((uint64_t)&a16, a17);
  std::__hash_table<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::__unordered_map_hasher<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::hash<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,std::equal_to<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,true>,std::__unordered_map_equal<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::equal_to<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,std::hash<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,true>,std::allocator<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>>>::~__hash_table((uint64_t)&a19);

  unint64_t v31 = *a11;
  if (*a11)
  {
    *(void *)(a12 + 16) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_82()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

uint64_t std::__hash_table<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::__unordered_map_hasher<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::hash<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,std::equal_to<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,true>,std::__unordered_map_equal<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::equal_to<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,std::hash<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,true>,std::allocator<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::__unordered_map_hasher<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::hash<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,std::equal_to<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,true>,std::__unordered_map_equal<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::equal_to<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,std::hash<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,true>,std::allocator<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::__unordered_map_hasher<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::hash<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,std::equal_to<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,true>,std::__unordered_map_equal<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::equal_to<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,std::hash<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,true>,std::allocator<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__variant_detail::__dtor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__tree<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::destroy(a1, *a2);
    std::__tree<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::destroy(a1, a2[1]);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void *std::__hash_table<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::__unordered_map_hasher<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::hash<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,std::equal_to<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,true>,std::__unordered_map_equal<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::equal_to<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,std::hash<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,true>,std::allocator<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>>>::__emplace_unique_key_args<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::piecewise_construct_t const&,std::tuple<std::variant<unsigned long long,boost::uuids::uuid,std::string> const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  char v8 = (void *)(a1 + 24);
  unint64_t v9 = std::hash<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::operator()[abi:ne180100](a1 + 24, a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    int v14 = *(void **)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      double v26 = a4;
      int v15 = (void *)*v14;
      if (*v14)
      {
        do
        {
          unint64_t v16 = v15[1];
          if (v16 == v10)
          {
            if (std::operator==[abi:ne180100]<unsigned long long,boost::uuids::uuid,std::string>((uint64_t)(v15 + 2), a2))return v15; {
          }
            }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11) {
                v16 %= v11;
              }
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4) {
              break;
            }
          }
          int v15 = (void *)*v15;
        }
        while (v15);
      }
      a4 = v26;
    }
  }
  std::__hash_table<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::__unordered_map_hasher<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::hash<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,std::equal_to<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,true>,std::__unordered_map_equal<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::equal_to<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,std::hash<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,true>,std::allocator<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::variant<unsigned long long,boost::uuids::uuid,std::string> const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v27);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  unsigned int v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v27[0] = *v23;
    *unsigned int v23 = v27[0];
  }
  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v24 = *(void *)(*(void *)v27[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v27[0];
    }
  }
  int v15 = (void *)v27[0];
  v27[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,void *>>>>::reset[abi:ne180100]((uint64_t)v27, 0);
  return v15;
}

void sub_25649ED8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::__unordered_map_hasher<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::hash<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,std::equal_to<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,true>,std::__unordered_map_equal<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::equal_to<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,std::hash<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,true>,std::allocator<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::variant<unsigned long long,boost::uuids::uuid,std::string> const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  char v8 = operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  uint64_t result = std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)(v8 + 2), *a3);
  *((_DWORD *)v8 + 12) = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_25649EE0C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unint64_t std::hash<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 24);
  if (v2 == -1)
  {
    uint64_t v4 = 299792458;
LABEL_5:
    uint64_t v5 = -1;
    goto LABEL_6;
  }
  uint64_t v4 = ((uint64_t (*)(char *))off_2704E1C28[v2])(&v9);
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  if (v5 == -1) {
    goto LABEL_5;
  }
LABEL_6:
  unint64_t v6 = 0x9DDFEA08EB382D69 * (v4 ^ __ROR8__(v5 + 16, 16));
  unint64_t v7 = __ROR8__(v5 + 16, 16) ^ (v6 >> 47);
  return (0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v7 ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ v6)) >> 47))) ^ v5;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNKS_4hashINS_7variantIJyN5boost5uuids4uuidENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEEclB8ne180100ERKSH_EUlRKT_E_JRKNS0_6__baseILNS0_6_TraitE1EJySA_SG_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(void *)a2;
}

unint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNKS_4hashINS_7variantIJyN5boost5uuids4uuidENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEEclB8ne180100ERKSH_EUlRKT_E_JRKNS0_6__baseILNS0_6_TraitE1EJySA_SG_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  unint64_t result = 0;
  do
    result ^= (result << 6) + (result >> 2) + 2654435769u + *(unsigned __int8 *)(a2 + v2++);
  while (v2 != 16);
  return result;
}

unint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8ne180100IOZNKS_4hashINS_7variantIJyN5boost5uuids4uuidENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEEclB8ne180100ERKSH_EUlRKT_E_JRKNS0_6__baseILNS0_6_TraitE1EJySA_SG_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  return std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v3, a2);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__variant_detail::__dtor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::__emplace_unique_key_args<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::variant<unsigned long long,boost::uuids::uuid,std::string> const&>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t **)std::__tree<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::__find_equal<std::variant<unsigned long long,boost::uuids::uuid,std::string>>((uint64_t)a1, &v10, a2);
  unint64_t v6 = *v5;
  if (!*v5)
  {
    unint64_t v7 = v5;
    std::__tree<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::__construct_node<std::variant<unsigned long long,boost::uuids::uuid,std::string> const&>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__insert_node_at(a1, v10, v7, v9[0]);
    unint64_t v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

void *std::__tree<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::__find_equal<std::variant<unsigned long long,boost::uuids::uuid,std::string>>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        unint64_t v7 = v4;
        uint64_t v8 = (uint64_t)(v4 + 4);
        if (!std::operator<[abi:ne180100]<unsigned long long,boost::uuids::uuid,std::string>(a3, (uint64_t)(v4 + 4)))break; {
        uint64_t v4 = (void *)*v7;
        }
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!std::operator<[abi:ne180100]<unsigned long long,boost::uuids::uuid,std::string>(v8, a3)) {
        break;
      }
      uint64_t v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    unint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t std::__tree<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::__construct_node<std::variant<unsigned long long,boost::uuids::uuid,std::string> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v6 + 32, a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_25649F0F8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::operator<[abi:ne180100]<unsigned long long,boost::uuids::uuid,std::string>(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 24);
  if (v2 == -1) {
    return 0;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 24);
  if (v3 == -1 || v3 < v2) {
    return 1;
  }
  if (v3 > v2) {
    return 0;
  }
  unint64_t v6 = &v5;
  return ((uint64_t (*)(char **, uint64_t, uint64_t))off_2704E1C40[v3])(&v6, a1, a2);
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::less<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long long,boost::uuids::uuid,std::string> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long long,boost::uuids::uuid,std::string> const>(uint64_t a1, void *a2, void *a3)
{
  return *a2 < *a3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::less<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long long,boost::uuids::uuid,std::string> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long long,boost::uuids::uuid,std::string> const>(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = bswap64(*a2);
  unint64_t v4 = bswap64(*a3);
  if (v3 == v4 && (unint64_t v3 = bswap64(a2[1]), v4 = bswap64(a3[1]), v3 == v4))
  {
    unsigned int v5 = 0;
  }
  else if (v3 < v4)
  {
    unsigned int v5 = -1;
  }
  else
  {
    unsigned int v5 = 1;
  }
  return v5 >> 31;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<2ul,2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::less<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long long,boost::uuids::uuid,std::string> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long long,boost::uuids::uuid,std::string> const>(uint64_t a1, const void **a2, const void **a3)
{
  return std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v4, a2, a3);
}

void sub_25649F31C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25649F428(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25649F78C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_83()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

void CLMicroLocationSemiSupervisedAlgorithm::learnSelfTrainingSemiSupervisedModel(void *a1@<X1>, uint64_t a2@<X3>, uint64_t *a3@<X4>, long long **a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, unsigned char *a7@<X8>, uint64_t a8, CLMicroLocationFingerprintPool *a9, uint64_t a10, uint64_t a11)
{
  uint64_t v195 = *MEMORY[0x263EF8340];
  v188[0] = a10;
  v188[1] = a11;
  v136 = a1;
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_106);
  }
  uint8x8_t v12 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a8 + 23) >= 0) {
      unint64_t v13 = a8;
    }
    else {
      unint64_t v13 = *(void *)a8;
    }
    unint64_t v14 = 0xEF7BDEF7BDEF7BDFLL * (((char *)a4[1] - (char *)*a4) >> 3);
    unint64_t v15 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 3);
    *(_DWORD *)uint64_t buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v166 = 2082;
    int v167 = "";
    __int16 v168 = 2082;
    unint64_t v169 = v13;
    __int16 v170 = 2050;
    unint64_t v171 = v14;
    __int16 v172 = 2050;
    unint64_t v173 = v15;
    _os_log_impl(&dword_25631F000, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Learning semi-supervised model with SelfTraining generation algorithm\", \"Client\":%{public, location:escape_only}s, \"Number of labeled recording triggers\":%{public}lu, \"Number of unlabeled recording triggers\":%{public}lu}", buf, 0x30u);
  }

  double v16 = cl::chrono::CFAbsoluteTimeClock::now();
  float v17 = +[ULDefaultsSingleton shared];
  float v18 = [v17 defaultsDictionary];

  BOOL v19 = [NSString stringWithUTF8String:"ULSemiSupervisedMaxNumIterations"];
  unint64_t v20 = [v18 objectForKey:v19];
  if (v20 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    int v21 = [v20 intValue];
  }
  else {
    int v21 = [&unk_2704F2208 intValue];
  }
  int v22 = v21;

  unsigned int v23 = +[ULDefaultsSingleton shared];
  unint64_t v24 = [v23 defaultsDictionary];

  int v25 = [NSString stringWithUTF8String:"ULSemiSupervisedStopProbabilityThreshold"];
  double v26 = [v24 objectForKey:v25];
  if (v26 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    [v26 doubleValue];
  }
  else {
    [&unk_2704F10C0 doubleValue];
  }
  double v28 = v27;

  double v29 = +[ULDefaultsSingleton shared];
  double v30 = [v29 defaultsDictionary];

  unint64_t v31 = [NSString stringWithUTF8String:"ULSemiSupervisedNumSelfLearningSamplesPerIteration"];
  int v32 = [v30 objectForKey:v31];
  if (v32 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    int v134 = [v32 intValue];
  }
  else {
    int v134 = [&unk_2704F21C0 intValue];
  }

  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)v158);
  *a7 = 0;
  a7[312] = 0;
  v187[0] = &unk_2704DD9E0;
  v187[1] = CLMicroLocationFingerprintConfiguration::getRecordingConfigurationFromSettings;
  v187[3] = v187;
  unsigned int v33 = ULSettings::get<ULSettings::FingerprintDataSource>();
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v186, a2);
  std::__function::__value_func<CLMicroLocationFingerprintConfiguration ()(void)>::__value_func[abi:ne180100]((uint64_t)v185, (uint64_t)v187);
  CLMicroLocationFingerprintDataSources::create(v33);
  CLMicroLocationFingerprintVector::CLMicroLocationFingerprintVector(&v157, &v156);
  uint64_t v34 = v156;
  uint64_t v156 = 0;
  if (v34) {
    (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
  }
  std::__function::__value_func<CLMicroLocationFingerprintConfiguration ()(void)>::~__value_func[abi:ne180100](v185);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v186);
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_106);
  }
  unsigned int v35 = (id)logObject_MicroLocation_Default;
  int v36 = v22;
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v38 = *a4;
    uint64_t v37 = a4[1];
    uint64_t v39 = CLMicroLocationFingerprintVector::size((CLMicroLocationFingerprintVector *)&v157);
    *(_DWORD *)uint64_t buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v166 = 2082;
    int v167 = "";
    __int16 v168 = 2050;
    unint64_t v169 = 0xEF7BDEF7BDEF7BDFLL * (((char *)v37 - (char *)v38) >> 3);
    __int16 v170 = 2050;
    unint64_t v171 = v39;
    _os_log_impl(&dword_25631F000, v35, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"learnSemiSupervisedModel, labeledFingerprintVector\", \"numTriggers\":%{public}lu, \"numFPs\":%{public}lu}", buf, 0x26u);
    int v22 = v36;
  }

  if (!CLMicroLocationFingerprintVector::size((CLMicroLocationFingerprintVector *)&v157))
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_106);
    }
    __int16 v42 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a8 + 23) >= 0) {
        uint64_t v43 = a8;
      }
      else {
        uint64_t v43 = *(void *)a8;
      }
      *(_DWORD *)uint64_t buf = 68289283;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v166 = 2082;
      int v167 = "";
      __int16 v168 = 2081;
      unint64_t v169 = v43;
      _os_log_impl(&dword_25631F000, v42, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"learnSemiSupervisedModel, Must have valid labeled fingerprints\", \"ClientId\":%{private, location:escape_only}s}", buf, 0x1Cu);
    }
    if (v136) {
      [(CLMicroLocationCoreAnalyticsPublishHelper *)v136 setObject:MEMORY[0x263EFFA80] forKeyedSubscript:@"cancelled"];
    }
    goto LABEL_226;
  }
  uint64_t v40 = *(void *)(a2 + 24);
  if (!v40) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v40 + 48))(v40))
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_106);
    }
    unint64_t v41 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v166 = 2082;
      int v167 = "";
      _os_log_impl(&dword_25631F000, v41, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Learning semi-supervised model cancelled\"}", buf, 0x12u);
    }
LABEL_226:
    uint64_t v132 = v157;
    uint64_t v157 = 0;
    if (v132) {
      (*(void (**)(uint64_t))(*(void *)v132 + 8))(v132);
    }
    std::__function::__value_func<CLMicroLocationFingerprintConfiguration ()(void)>::~__value_func[abi:ne180100](v187);
    goto LABEL_229;
  }
  CLMicroLocationModel::CLMicroLocationModel((CLMicroLocationModel *)buf);
  *(void *)uint64_t buf = 0x100000003;
  if ((const char **)((char *)&v167 + 6) != (const char **)a6)
  {
    int v174 = *(_DWORD *)(a6 + 32);
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,void *> *>>((const char **)((char *)&v167 + 6), *(uint64_t **)(a6 + 16), 0);
  }
  long long v175 = *(_OWORD *)(a6 + 40);
  memset(v154, 0, sizeof(v154));
  int v155 = 1065353216;
  *(void *)v159 = CLMicroLocationFingerprintVector::begin((CLMicroLocationFingerprintVector *)&v157);
  *(void *)&long long v160 = v44;
  uint64_t v146 = CLMicroLocationFingerprintVector::end((CLMicroLocationFingerprintVector *)&v157);
  v147 = v45;
  while (1)
  {
    isa = (CLMicroLocationSemiSupervisedAlgorithm *)CLMicroLocationFingerprintVector::Iterator::operator!=(v159, &v146);
    if ((isa & 1) == 0) {
      break;
    }
    uint64_t v47 = CLMicroLocationFingerprintVector::Iterator::operator*(v159);
    uint64_t v48 = v47;
    double v50 = *a4;
    double v49 = a4[1];
    if (*a4 == v49) {
      goto LABEL_72;
    }
    float v51 = (void *)(v47 + 40);
    while (1)
    {
      long long v52 = *v50;
      *(void *)&v189[16] = *((void *)v50 + 2);
      *(_OWORD *)uint64_t v189 = v52;
      if (*((char *)v50 + 47) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v189[24], *((const std::string::value_type **)v50 + 3), *((void *)v50 + 4));
      }
      else
      {
        long long v53 = *(long long *)((char *)v50 + 24);
        uint64_t v190 = *((void *)v50 + 5);
        *(_OWORD *)&v189[24] = v53;
      }
      long long v54 = v50[3];
      *(_OWORD *)&v191[12] = *(long long *)((char *)v50 + 60);
      *(_OWORD *)char v191 = v54;
      CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)v192, (const CLMicroLocationProto::RecordingEvent *)(v50 + 5));
      long long v55 = v50[14];
      char v194 = *((unsigned char *)v50 + 240);
      long long v193 = v55;
      BOOL v57 = *(void *)v189 != *v51 || *(void *)&v189[8] != *(void *)(v48 + 48);
      CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v192);
      if (SHIBYTE(v190) < 0) {
        operator delete(*(void **)&v189[24]);
      }
      if (!v57) {
        break;
      }
      double v50 = (long long *)((char *)v50 + 248);
      if (v50 == v49)
      {
        int v22 = v36;
        double v50 = v49;
        goto LABEL_63;
      }
    }
    int v22 = v36;
LABEL_63:
    if (v50 == a4[1])
    {
LABEL_72:
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_106);
      }
      uint64_t v61 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
      {
        unint64_t v62 = operator new(0x28uLL);
        id v151 = v62;
        long long v152 = xmmword_256514540;
        *unint64_t v62 = 0u;
        v62[1] = 0u;
        *(void *)((char *)v62 + 29) = 0;
        boost::uuids::to_chars<char *>(v48 + 40, v62);
        CLMacAddress v63 = &v151;
        if (v152 < 0) {
          CLMacAddress v63 = v151;
        }
        *(_DWORD *)uint64_t v189 = 68289282;
        *(_DWORD *)&v189[4] = 0;
        *(_WORD *)&v189[8] = 2082;
        *(void *)&v189[10] = "";
        *(_WORD *)&v189[18] = 2082;
        *(void *)&v189[20] = v63;
        _os_log_impl(&dword_25631F000, v61, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"learnSemiSupervisedModel, labeled fingerprint, trigger not found\", \"Recording UUID\":%{public, location:escape_only}s}", v189, 0x1Cu);
        if (SHIBYTE(v152) < 0) {
          operator delete(v151);
        }
      }

      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_106);
      }
      int v64 = (id)logObject_MicroLocation_Default;
      if (os_signpost_enabled(v64))
      {
        unint64_t v65 = operator new(0x28uLL);
        id v151 = v65;
        long long v152 = xmmword_256514540;
        *unint64_t v65 = 0u;
        v65[1] = 0u;
        *(void *)((char *)v65 + 29) = 0;
        boost::uuids::to_chars<char *>(v48 + 40, v65);
        uint64_t v66 = &v151;
        if (v152 < 0) {
          uint64_t v66 = v151;
        }
        *(_DWORD *)uint64_t v189 = 68289282;
        *(_DWORD *)&v189[4] = 0;
        *(_WORD *)&v189[8] = 2082;
        *(void *)&v189[10] = "";
        *(_WORD *)&v189[18] = 2082;
        *(void *)&v189[20] = v66;
        __int16 v67 = v64;
        float v68 = "learnSemiSupervisedModel, labeled fingerprint, trigger not found";
        float v69 = "{\"msg%{public}.0s\":\"learnSemiSupervisedModel, labeled fingerprint, trigger not found\", \"Recording UUI"
              "D\":%{public, location:escape_only}s}";
LABEL_109:
        _os_signpost_emit_with_name_impl(&dword_25631F000, v67, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v68, v69, v189, 0x1Cu);
LABEL_110:
        if (SHIBYTE(v152) < 0) {
          operator delete(v151);
        }
      }
    }
    else
    {
      uint64_t v58 = *a3;
      uint64_t v59 = a3[1];
      if (*a3 != v59)
      {
        while (1)
        {
          if (*((unsigned char *)v50 + 240))
          {
            if (*(void *)v58 == *((void *)v50 + 28) && *(void *)(v58 + 8) == *((void *)v50 + 29)) {
              break;
            }
          }
          v58 += 64;
          if (v58 == v59) {
            goto LABEL_96;
          }
        }
      }
      if (v58 == v59)
      {
LABEL_96:
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_106);
        }
        double v75 = (id)logObject_MicroLocation_Default;
        if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
        {
          int v76 = operator new(0x28uLL);
          id v151 = v76;
          long long v152 = xmmword_256514540;
          _OWORD *v76 = 0u;
          v76[1] = 0u;
          *(void *)((char *)v76 + 29) = 0;
          boost::uuids::to_chars<char *>((uint64_t)(v50 + 14), v76);
          uint64_t v77 = &v151;
          if (v152 < 0) {
            uint64_t v77 = v151;
          }
          *(_DWORD *)uint64_t v189 = 68289282;
          *(_DWORD *)&v189[4] = 0;
          *(_WORD *)&v189[8] = 2082;
          *(void *)&v189[10] = "";
          *(_WORD *)&v189[18] = 2082;
          *(void *)&v189[20] = v77;
          _os_log_impl(&dword_25631F000, v75, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"learnSemiSupervisedModel, labeled fingerprint, label not found\", \"Trigger UUID\":%{public, location:escape_only}s}", v189, 0x1Cu);
          if (SHIBYTE(v152) < 0) {
            operator delete(v151);
          }
        }

        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_106);
        }
        int v64 = (id)logObject_MicroLocation_Default;
        if (os_signpost_enabled(v64))
        {
          int v78 = operator new(0x28uLL);
          id v151 = v78;
          long long v152 = xmmword_256514540;
          _OWORD *v78 = 0u;
          v78[1] = 0u;
          *(void *)((char *)v78 + 29) = 0;
          boost::uuids::to_chars<char *>((uint64_t)(v50 + 14), v78);
          unsigned int v79 = &v151;
          if (v152 < 0) {
            unsigned int v79 = v151;
          }
          *(_DWORD *)uint64_t v189 = 68289282;
          *(_DWORD *)&v189[4] = 0;
          *(_WORD *)&v189[8] = 2082;
          *(void *)&v189[10] = "";
          *(_WORD *)&v189[18] = 2082;
          *(void *)&v189[20] = v79;
          __int16 v67 = v64;
          float v68 = "learnSemiSupervisedModel, labeled fingerprint, label not found";
          float v69 = "{\"msg%{public}.0s\":\"learnSemiSupervisedModel, labeled fingerprint, label not found\", \"Trigger UUID\""
                ":%{public, location:escape_only}s}";
          goto LABEL_109;
        }
      }
      else
      {
        unsigned int v70 = (uuid *)(v58 + 40);
        CLMicroLocationModel::addFingerprint((CLMicroLocationModel *)buf, (const CLMicroLocationFingerprint *)v48, (const uuid *)(v58 + 40), a9);
        CLMicroLocationModel::addRecording((CLMicroLocationModel *)buf, v70, (const uuid *)(v48 + 40));
        std::__hash_table<boost::uuids::uuid,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,std::allocator<boost::uuids::uuid>>::__emplace_unique_key_args<boost::uuids::uuid,boost::uuids::uuid const&>((uint64_t)v154, (void *)(v48 + 40), (_OWORD *)(v48 + 40));
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_106);
        }
        int v64 = (id)logObject_MicroLocation_Default;
        if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v71 = operator new(0x28uLL);
          id v151 = v71;
          long long v152 = xmmword_256514540;
          *uint64_t v71 = 0u;
          v71[1] = 0u;
          *(void *)((char *)v71 + 29) = 0;
          boost::uuids::to_chars<char *>((uint64_t)v51, v71);
          if (v152 >= 0) {
            unint64_t v72 = &v151;
          }
          else {
            unint64_t v72 = v151;
          }
          uint64_t v73 = (char *)operator new(0x28uLL);
          *(void *)int v161 = v73;
          long long v162 = xmmword_256514540;
          *(_OWORD *)uint64_t v73 = 0u;
          *((_OWORD *)v73 + 1) = 0u;
          *(void *)(v73 + 29) = 0;
          boost::uuids::to_chars<char *>((uint64_t)v70, v73);
          unint64_t v74 = v161;
          if (v162 < 0) {
            unint64_t v74 = *(uint8_t **)v161;
          }
          *(_DWORD *)uint64_t v189 = 68289538;
          *(_DWORD *)&v189[4] = 0;
          *(_WORD *)&v189[8] = 2082;
          *(void *)&v189[10] = "";
          *(_WORD *)&v189[18] = 2082;
          *(void *)&v189[20] = v72;
          *(_WORD *)&v189[28] = 2082;
          *(void *)&v189[30] = v74;
          _os_log_impl(&dword_25631F000, v64, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"learnSemiSupervisedModel, labeled fingeprint assigned to cluster\", \"Recording UUID\":%{public, location:escape_only}s, \"Cluster UUID\":%{public, location:escape_only}s}", v189, 0x26u);
          if (SHIBYTE(v162) < 0) {
            operator delete(*(void **)v161);
          }
          goto LABEL_110;
        }
      }
    }

    CLMicroLocationFingerprintVector::Iterator::operator++((uint64_t)v159);
  }
  LOBYTE(v151) = 0;
  char v153 = 0;
  if (!v22)
  {
LABEL_202:
    for (uint64_t i = v180; i; uint64_t i = (void *)*i)
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_106);
      }
      uint64_t v126 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v126, OS_LOG_TYPE_DEBUG))
      {
        v127 = (char *)operator new(0x28uLL);
        *(void *)int v161 = v127;
        long long v162 = xmmword_256514540;
        *(_OWORD *)v127 = 0u;
        *((_OWORD *)v127 + 1) = 0u;
        *(void *)(v127 + 29) = 0;
        boost::uuids::to_chars<char *>((uint64_t)(i + 2), v127);
        uint64_t v128 = v162 >= 0 ? v161 : *(uint8_t **)v161;
        uint64_t v129 = (uint64_t)(i[5] - i[4]) >> 4;
        *(_DWORD *)uint64_t v189 = 68289538;
        *(_DWORD *)&v189[4] = 0;
        *(_WORD *)&v189[8] = 2082;
        *(void *)&v189[10] = "";
        *(_WORD *)&v189[18] = 2082;
        *(void *)&v189[20] = v128;
        *(_WORD *)&v189[28] = 2050;
        *(void *)&v189[30] = v129;
        _os_log_impl(&dword_25631F000, v126, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Pre-Pruning Model\", \"ClusterId\":%{public, location:escape_only}s, \"numFPs\":%{public}lu}", v189, 0x26u);
        if (SHIBYTE(v162) < 0) {
          operator delete(*(void **)v161);
        }
      }
    }
    CLMicroLocationSemiSupervisedAlgorithm::pruneNonRepresentativeFingerprints(isa, (CLMicroLocationModel *)buf, a9);
    CLMicroLocationSemiSupervisedAlgorithm::convertModelToProtobufAndLogModel((uint64_t **)buf, (void **)a8, (uint64_t)v189);
    CLMicroLocationCoreAnalyticsPublishHelper::updateLearnEventSummary(v136, (CLMicroLocationModel *)buf, (const CLMicroLocationModel *)v189, v16);
    if (CLMicroLocationModel::isValid((CLMicroLocationModel *)buf))
    {
      *(void *)int v161 = boost::uuids::random_generator_pure::operator()((uint64_t)v158);
      *(void *)&long long v162 = v130;
      *(void *)v159 = cl::chrono::CFAbsoluteTimeClock::now();
      std::__optional_destruct_base<CLMicroLocationModelTable::Entry,false>::reset[abi:ne180100]((uint64_t)a7);
      std::__construct_at[abi:ne180100]<CLMicroLocationModelTable::Entry,boost::uuids::uuid,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>,CLMicroLocationProto::Model,std::string const&,boost::uuids::uuid const&,boost::uuids::uuid&,CLMicroLocationModelTable::Entry*>((uint64_t)a7, (uint64_t *)v161, (double *)v159, (uint64_t)v189, a8, (long long *)(a8 + 24), v188);
      a7[312] = 1;
    }
    else
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_106);
      }
      v131 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v131, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int v161 = 68289026;
        *(_DWORD *)&v161[4] = 0;
        LOWORD(v162) = 2082;
        *(void *)((char *)&v162 + 2) = "";
        _os_log_impl(&dword_25631F000, v131, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"learnSemiSupervisedModel, invalid semi-supervised model, not created\"}", v161, 0x12u);
      }
    }
    CLMicroLocationProto::Model::~Model((CLMicroLocationProto::Model *)v189);
    if (v153) {
      CLMicroLocationProto::AssociatedAccessPointInfo::~AssociatedAccessPointInfo((CLMicroLocationProto::AssociatedAccessPointInfo *)&v151);
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v154);
    if (v184 < 0) {
      operator delete(v183);
    }
    if (v181)
    {
      char v182 = v181;
      operator delete(v181);
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::~__hash_table((uint64_t)v179);
    *(void *)uint64_t v189 = v178;
    std::vector<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>::__destroy_vector::operator()[abi:ne180100]((void ***)v189);
    std::__optional_destruct_base<CLMicroLocationModel::BlueAtlasData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v177);
    std::__optional_destruct_base<CLMicroLocationModel::SimilarityListData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v176);
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&v167 + 6);
    goto LABEL_226;
  }
  char v138 = 0;
  uint64_t v80 = 0;
  uint64_t v141 = v22;
  int v81 = &dword_25631F000;
  while (1)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_106);
    }
    unint64_t v82 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t v189 = 68289282;
      *(_DWORD *)&v189[4] = 0;
      *(_WORD *)&v189[8] = 2082;
      *(void *)&v189[10] = "";
      *(_WORD *)&v189[18] = 2050;
      *(void *)&v189[20] = v80;
      _os_log_impl(v81, v82, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"learnSemiSupervisedModel, started iteration of self learning\", \"iteration number\":%{public}lu}", v189, 0x1Cu);
    }

    uint64_t v83 = *(void *)a5;
    uint64_t v84 = *(void *)(a5 + 8);
    if (*(void *)a5 != v84)
    {
      while (!std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::find<boost::uuids::uuid>(v154, (void *)v83))
      {
        v83 += 248;
        if (v83 == v84)
        {
          uint64_t v83 = v84;
          goto LABEL_131;
        }
      }
      if (v83 != v84)
      {
        for (uint64_t j = v83 + 248; j != v84; j += 248)
        {
          if (!std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::find<boost::uuids::uuid>(v154, (void *)j))
          {
            uint64_t v86 = v81;
            long long v87 = *(_OWORD *)j;
            *(void *)(v83 + 16) = *(void *)(j + 16);
            *(_OWORD *)uint64_t v83 = v87;
            char v88 = (void **)(v83 + 24);
            if (*(char *)(v83 + 47) < 0) {
              operator delete(*v88);
            }
            long long v89 = *(_OWORD *)(j + 24);
            *(void *)(v83 + 40) = *(void *)(j + 40);
            *(_OWORD *)char v88 = v89;
            *(unsigned char *)(j + 47) = 0;
            *(unsigned char *)(j + 24) = 0;
            long long v90 = *(_OWORD *)(j + 48);
            *(_OWORD *)(v83 + 60) = *(_OWORD *)(j + 60);
            *(_OWORD *)(v83 + 48) = v90;
            CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(v83 + 80), (const CLMicroLocationProto::RecordingEvent *)(j + 80));
            long long v91 = *(_OWORD *)(j + 224);
            *(unsigned char *)(v83 + 240) = *(unsigned char *)(j + 240);
            *(_OWORD *)(v83 + 224) = v91;
            v83 += 248;
            int v81 = v86;
          }
        }
      }
    }
LABEL_131:
    std::vector<CLMicroLocationRecordingEventsTable::Entry>::erase(a5, v83, *(long long **)(a5 + 8));
    unsigned int v92 = ULSettings::get<ULSettings::FingerprintDataSource>();
    std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v164, a2);
    std::__function::__value_func<CLMicroLocationFingerprintConfiguration ()(void)>::__value_func[abi:ne180100]((uint64_t)v163, (uint64_t)v187);
    CLMicroLocationFingerprintDataSources::create(v92);
    CLMicroLocationFingerprintVector::CLMicroLocationFingerprintVector(&v150, &v149);
    uint64_t v93 = v149;
    uint64_t v149 = 0;
    if (v93) {
      (*(void (**)(uint64_t))(*(void *)v93 + 8))(v93);
    }
    std::__function::__value_func<CLMicroLocationFingerprintConfiguration ()(void)>::~__value_func[abi:ne180100](v163);
    std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v164);
    if (!v80)
    {
      CLMicroLocationCoreAnalyticsPublishHelper::updateModelRfCharacteristics(v136, (CLMicroLocationFingerprintVector *)&v150, (CLMicroLocationFingerprintVector *)&v157, 1u, v16);
      CLMicroLocationCoreAnalyticsPublishHelper::updateSemiSupervisedLabeledAndUnlabeledFingerprints(v136, &v150, (const CLMicroLocationFingerprintVector *)&v157, v94);
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_106);
    }
    long long v95 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v95, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v96 = CLMicroLocationFingerprintVector::size((CLMicroLocationFingerprintVector *)&v150);
      *(_DWORD *)uint64_t v189 = 68289538;
      *(_DWORD *)&v189[4] = 0;
      *(_WORD *)&v189[8] = 2082;
      *(void *)&v189[10] = "";
      *(_WORD *)&v189[18] = 2050;
      *(void *)&v189[20] = v80;
      *(_WORD *)&v189[28] = 2050;
      *(void *)&v189[30] = v96;
      _os_log_impl(v81, v95, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"learnSemiSupervisedModel, unLabeledFingerprintVector\", \"iteration\":%{public}lu, \"numFPs\":%{public}lu}", v189, 0x26u);
    }

    uint64_t v97 = *(void *)(a2 + 24);
    if (!v97) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    if ((*(uint64_t (**)(uint64_t))(*(void *)v97 + 48))(v97))
    {
      int v98 = 1;
      char v138 = 1;
    }
    else if (CLMicroLocationFingerprintVector::size((CLMicroLocationFingerprintVector *)&v150))
    {
      uint64_t v146 = 0;
      v147 = 0;
      uint64_t v148 = 0;
      v145[0] = CLMicroLocationFingerprintVector::begin((CLMicroLocationFingerprintVector *)&v150);
      v145[1] = v99;
      v144[0] = CLMicroLocationFingerprintVector::end((CLMicroLocationFingerprintVector *)&v150);
      v144[1] = v100;
      while (CLMicroLocationFingerprintVector::Iterator::operator!=(v145, v144))
      {
        uint64_t v101 = CLMicroLocationFingerprintVector::Iterator::operator*(v145);
        int v102 = *(void **)a5;
        uint64_t v103 = *(void **)(a5 + 8);
        uint64_t v104 = (void *)(v101 + 40);
        if (*(void **)a5 != v103)
        {
          while (*v102 != *v104 || v102[1] != *(void *)(v101 + 48))
          {
            v102 += 31;
            if (v102 == v103) {
              goto LABEL_154;
            }
          }
        }
        if (v102 != v103)
        {
          CLMicroLocationProtobufHelper::ModelTypeToDomain(*(int *)&buf[4], v143);
          CLMicroLocationLocalizationSettings::CLMicroLocationLocalizationSettings((uint64_t)v161, v143, 3u);
          CLMicroLocationLocalizer::localize((uint64_t)&v151, (uint64_t)buf);
        }
LABEL_154:
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_106);
        }
        double v106 = (id)logObject_MicroLocation_Default;
        if (os_log_type_enabled(v106, OS_LOG_TYPE_ERROR))
        {
          char v107 = (char *)operator new(0x28uLL);
          *(void *)int v161 = v107;
          long long v162 = xmmword_256514540;
          *(_OWORD *)char v107 = 0u;
          *((_OWORD *)v107 + 1) = 0u;
          *(void *)(v107 + 29) = 0;
          boost::uuids::to_chars<char *>((uint64_t)v104, v107);
          double v108 = v161;
          if (v162 < 0) {
            double v108 = *(uint8_t **)v161;
          }
          *(_DWORD *)uint64_t v189 = 68289282;
          *(_DWORD *)&v189[4] = 0;
          *(_WORD *)&v189[8] = 2082;
          *(void *)&v189[10] = "";
          *(_WORD *)&v189[18] = 2082;
          *(void *)&v189[20] = v108;
          _os_log_impl(v81, v106, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"didn't find recording event matching to fingerprint\", \"RecordingUUID\":%{public, location:escape_only}s}", v189, 0x1Cu);
          if (SHIBYTE(v162) < 0) {
            operator delete(*(void **)v161);
          }
        }

        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_106);
        }
        __int16 v109 = (id)logObject_MicroLocation_Default;
        if (os_signpost_enabled(v109))
        {
          uint64_t v110 = (char *)operator new(0x28uLL);
          *(void *)int v161 = v110;
          long long v162 = xmmword_256514540;
          *(_OWORD *)uint64_t v110 = 0u;
          *((_OWORD *)v110 + 1) = 0u;
          *(void *)(v110 + 29) = 0;
          boost::uuids::to_chars<char *>((uint64_t)v104, v110);
          __int16 v111 = v161;
          if (v162 < 0) {
            __int16 v111 = *(uint8_t **)v161;
          }
          *(_DWORD *)uint64_t v189 = 68289282;
          *(_DWORD *)&v189[4] = 0;
          *(_WORD *)&v189[8] = 2082;
          *(void *)&v189[10] = "";
          *(_WORD *)&v189[18] = 2082;
          *(void *)&v189[20] = v111;
          _os_signpost_emit_with_name_impl(v81, v109, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "didn't find recording event matching to fingerprint", "{\"msg%{public}.0s\":\"didn't find recording event matching to fingerprint\", \"RecordingUUID\":%{public, location:escape_only}s}", v189, 0x1Cu);
          if (SHIBYTE(v162) < 0) {
            operator delete(*(void **)v161);
          }
        }

        CLMicroLocationFingerprintVector::Iterator::operator++((uint64_t)v145);
      }
      unint64_t v112 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v147[-v146] >> 5));
      if (v147 == (char *)v146) {
        uint64_t v113 = 0;
      }
      else {
        uint64_t v113 = v112;
      }
      std::__introsort<std::_ClassicAlgPolicy,CLMicroLocationSemiSupervisedAlgorithm::learnSelfTrainingSemiSupervisedModel(NSMutableDictionary *,ULDatabase &,std::function<BOOL ()(void)>,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,CLMicroLocationAnchorAppearanceMap const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationFingerprintPool &,boost::uuids::uuid)::$_5 &,std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal> *,false>(v146, v147, v113, 1);
      uint64_t v114 = v147;
      double v115 = 0.0;
      if ((char *)v146 != v147 && v134 >= 1)
      {
        int v116 = (char *)(v146 + 224);
        double v117 = 0.0;
        unsigned int v118 = v134;
        while (1)
        {
          CLMicroLocationModel::addFingerprint((CLMicroLocationModel *)buf, (const CLMicroLocationFingerprint *)(v116 - 224), (const uuid *)v116 - 2, a9);
          CLMicroLocationModel::addRecording((CLMicroLocationModel *)buf, (uuid *)v116 - 2, (const uuid *)(v116 - 184));
          std::__hash_table<boost::uuids::uuid,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,std::allocator<boost::uuids::uuid>>::__emplace_unique_key_args<boost::uuids::uuid,boost::uuids::uuid const&>((uint64_t)v154, (void *)v116 - 23, v116 - 184);
          if (onceToken_MicroLocation_Default != -1) {
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_106);
          }
          __int16 v119 = (id)logObject_MicroLocation_Default;
          if (os_log_type_enabled(v119, OS_LOG_TYPE_DEBUG))
          {
            int v120 = (char *)operator new(0x28uLL);
            *(void *)int v161 = v120;
            long long v162 = xmmword_256514540;
            *(_OWORD *)int v120 = 0u;
            *((_OWORD *)v120 + 1) = 0u;
            *(void *)(v120 + 29) = 0;
            boost::uuids::to_chars<char *>((uint64_t)(v116 - 184), v120);
            if (v162 >= 0) {
              __int16 v121 = v161;
            }
            else {
              __int16 v121 = *(uint8_t **)v161;
            }
            double v122 = (char *)operator new(0x28uLL);
            *(void *)v159 = v122;
            long long v160 = xmmword_256514540;
            *(_OWORD *)double v122 = 0u;
            *((_OWORD *)v122 + 1) = 0u;
            *(void *)(v122 + 29) = 0;
            boost::uuids::to_chars<char *>((uint64_t)(v116 - 32), v122);
            uint64_t v123 = v159;
            if (v160 < 0) {
              uint64_t v123 = *(uint8_t **)v159;
            }
            *(_DWORD *)uint64_t v189 = 68289538;
            *(_DWORD *)&v189[4] = 0;
            *(_WORD *)&v189[8] = 2082;
            *(void *)&v189[10] = "";
            *(_WORD *)&v189[18] = 2082;
            *(void *)&v189[20] = v121;
            *(_WORD *)&v189[28] = 2082;
            *(void *)&v189[30] = v123;
            _os_log_impl(v81, v119, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"learnSemiSupervisedModel, unlabeled fingeprint assigned to cluster\", \"Recording UUID\":%{public, location:escape_only}s, \"Cluster UUID\":%{public, location:escape_only}s}", v189, 0x26u);
            if (SHIBYTE(v160) < 0) {
              operator delete(*(void **)v159);
            }
            if (SHIBYTE(v162) < 0) {
              operator delete(*(void **)v161);
            }
          }

          double v115 = *((double *)v116 - 2);
          if (v117 != 0.0 && v115 > v117) {
            break;
          }
          if (v116 != v114)
          {
            v116 += 224;
            double v117 = v115;
            if (v118-- >= 2) {
              continue;
            }
          }
          goto LABEL_191;
        }
        CLMicroLocationSemiSupervisedAlgorithm::learnSelfTrainingSemiSupervisedModel((NSObject **)v189);

        abort_report_np();
        __break(1u);
        return;
      }
LABEL_191:
      int v98 = v115 >= v28 ? 0 : 18;
      *(void *)uint64_t v189 = &v146;
      std::vector<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>>::__destroy_vector::operator()[abi:ne180100]((void ***)v189);
    }
    else
    {
      int v98 = 18;
    }
    isa = v150.super.super.isa;
    v150.super.super.isa = 0;
    if (isa) {
      isa = (CLMicroLocationSemiSupervisedAlgorithm *)(*(uint64_t (**)(CLMicroLocationSemiSupervisedAlgorithm *))(*(void *)isa + 8))(isa);
    }
    if (v98) {
      break;
    }
    if (++v80 == v141) {
      goto LABEL_202;
    }
  }
  if (v98 == 18) {
    goto LABEL_202;
  }
  if (v153) {
    CLMicroLocationProto::AssociatedAccessPointInfo::~AssociatedAccessPointInfo((CLMicroLocationProto::AssociatedAccessPointInfo *)&v151);
  }
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v154);
  if (v184 < 0) {
    operator delete(v183);
  }
  if (v181)
  {
    char v182 = v181;
    operator delete(v181);
  }
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::~__hash_table((uint64_t)v179);
  *(void *)uint64_t v189 = v178;
  std::vector<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>::__destroy_vector::operator()[abi:ne180100]((void ***)v189);
  std::__optional_destruct_base<CLMicroLocationModel::BlueAtlasData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v177);
  std::__optional_destruct_base<CLMicroLocationModel::SimilarityListData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v176);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&v167 + 6);
  uint64_t v133 = v157;
  uint64_t v157 = 0;
  if (v133) {
    (*(void (**)(uint64_t))(*(void *)v133 + 8))(v133);
  }
  std::__function::__value_func<CLMicroLocationFingerprintConfiguration ()(void)>::~__value_func[abi:ne180100](v187);
  if ((v138 & 1) == 0) {
    std::__optional_destruct_base<CLMicroLocationModelTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)a7);
  }
LABEL_229:
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)v158);
}

void sub_2564A1578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,uint64_t a48,uint64_t a49,char a50,int a51,__int16 a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,int a59,char a60)
{
  CLMicroLocationProto::Model::~Model((CLMicroLocationProto::Model *)&STACK[0x450]);
  if (a50) {
    CLMicroLocationProto::AssociatedAccessPointInfo::~AssociatedAccessPointInfo((CLMicroLocationProto::AssociatedAccessPointInfo *)&__p);
  }
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&a52);
  CLMicroLocationModel::~CLMicroLocationModel((void **)&STACK[0x220]);
  uint64_t v61 = a58;
  a58 = 0;
  if (v61) {
    (*(void (**)(uint64_t))(*(void *)v61 + 8))(v61);
  }
  std::__function::__value_func<CLMicroLocationFingerprintConfiguration ()(void)>::~__value_func[abi:ne180100](&STACK[0x420]);
  std::__optional_destruct_base<CLMicroLocationModelTable::Entry,false>::~__optional_destruct_base[abi:ne180100](a16);
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&a60);

  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::FingerprintDataSource>()
{
  os_log_t v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  unsigned int v2 = [NSString stringWithUTF8String:"ULFingerprintDataSource"];
  unint64_t v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 unsignedIntValue];
  }
  else {
    uint64_t v4 = [&unk_2704F21F0 unsignedIntValue];
  }
  uint64_t v5 = v4;

  return v5;
}

void sub_2564A1B00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationSemiSupervisedAlgorithm::pruneNonRepresentativeFingerprints(CLMicroLocationSemiSupervisedAlgorithm *this, CLMicroLocationModel *a2, CLMicroLocationFingerprintPool *a3)
{
  v66[4] = *MEMORY[0x263EF8340];
  int v4 = ULSettings::get<ULSettings::FingerprintDistanceFunctionType>();
  uint64_t v40 = ULSettings::getFingerprintDistanceFunctionParamsForType(v4);
  if (ULSettings::get<ULSettings::AdaptiveAnchorsEnable>())
  {
    std::unordered_map<boost::uuids::uuid,CLMicroLocationAnchorAppearance>::unordered_map((uint64_t)v55, (uint64_t)a2 + 16);
    long long v57 = *(_OWORD *)((char *)a2 + 56);
    char v5 = 1;
  }
  else
  {
    char v5 = 0;
    LOBYTE(v55[0]) = 0;
  }
  char v58 = v5;
  CLMicroLocationAlgorithms::createLearnFingerprintDistanceFunction(v4, v40, (uint64_t)v55, v66);
  if (v58) {
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v55);
  }
  unint64_t v6 = +[ULDefaultsSingleton shared];
  unint64_t v7 = [v6 defaultsDictionary];

  uint64_t v8 = [NSString stringWithUTF8String:"ULLinkageFunction"];
  char v9 = [v7 objectForKey:v8];
  if (v9 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    unsigned int v10 = [v9 unsignedIntValue];
  }
  else {
    unsigned int v10 = [&unk_2704F21F0 unsignedIntValue];
  }
  unsigned int v11 = v10;

  CLMicroLocationAlgorithms::createLinkageFunction(v11, v65);
  uint8x8_t v12 = +[ULDefaultsSingleton shared];
  unint64_t v13 = [v12 defaultsDictionary];

  unint64_t v14 = [NSString stringWithUTF8String:"ULPruneDistanceThresholdSemiSupervised"];
  unint64_t v15 = [v13 objectForKey:v14];
  if (v15 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    [v15 doubleValue];
  }
  else {
    [&unk_2704F10D0 doubleValue];
  }
  double v17 = v16;

  long long v52 = 0;
  unint64_t v53 = 0;
  unint64_t v54 = 0;
  memset(v55, 0, sizeof(v55));
  int v56 = 1065353216;
  uint64_t v18 = *((void *)a2 + 41);
  for (uint64_t i = *((void *)a2 + 42); v18 != i; v18 += 32)
  {
    v50[0] = (_OWORD *)(v18 + 16);
    unint64_t v20 = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>((uint64_t)v55, (void *)(v18 + 16), (uint64_t)&std::piecewise_construct, v50);
    unint64_t v21 = v20[5];
    if (v21 >= v20[6])
    {
      uint64_t v22 = std::vector<CLMicroLocationFingerprint>::__push_back_slow_path<CLMicroLocationFingerprint const&>(v20 + 4, *(void *)v18);
    }
    else
    {
      std::allocator<CLMicroLocationFingerprint>::construct[abi:ne180100]<CLMicroLocationFingerprint,CLMicroLocationFingerprint const&>((uint64_t)(v20 + 6), v21, *(void *)v18);
      uint64_t v22 = v21 + 192;
      void v20[5] = v21 + 192;
    }
    void v20[5] = v22;
  }
  CLMicroLocationModel::getIdentifiers(a2, (uint64_t)v50);
  for (uint64_t j = v51; j; uint64_t j = (void *)*j)
  {
    *(void *)uint64_t buf = j + 2;
    unint64_t v24 = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>((uint64_t)v55, j + 2, (uint64_t)&std::piecewise_construct, (_OWORD **)buf);
    std::__function::__value_func<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::__value_func[abi:ne180100]((uint64_t)v64, (uint64_t)v66);
    int v25 = v24 + 4;
    CLDistanceMatrixTemplate<CLSymmetricMatrixStorage<float>>::CLDistanceMatrixTemplate<std::vector<CLMicroLocationFingerprint>,std::function<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>>((unint64_t *)buf, v25, (uint64_t)v64);
    std::__function::__value_func<float ()(CLDistanceMatrixTemplate<CLSymmetricMatrixStorage<float>> const&,std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>)>::__value_func[abi:ne180100]((uint64_t)v63, (uint64_t)v65);
    CLHierarchicalClustering::CLHierarchicalClustering(v49, buf, v63);
    std::__function::__value_func<float ()(CLDistanceMatrixTemplate<CLSymmetricMatrixStorage<float>> const&,std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>)>::~__value_func[abi:ne180100](v63);
    if (*(void *)__p)
    {
      *(void *)&__p[8] = *(void *)__p;
      operator delete(*(void **)__p);
    }
    std::__function::__value_func<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::~__value_func[abi:ne180100](v64);
    __int16 v46 = 0;
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    unint64_t ClusterLabels = CLHierarchicalClustering::getClusterLabels((uint64_t *)v49, &v46, 0, v17, 0.0);
    *(void *)uint64_t buf = 0;
    std::vector<unsigned long>::vector(&v44, ClusterLabels, buf);
    double v27 = v46;
    double v28 = v44;
    if (v47 != v46)
    {
      uint64_t v29 = 0;
      unint64_t v30 = (v47 - (unsigned char *)v46) >> 3;
      if (v30 <= 1) {
        unint64_t v30 = 1;
      }
      do
      {
        v28[v27[v29]] = v29;
        ++v29;
      }
      while (v30 != v29);
    }
    unint64_t v31 = v45;
    if (v28 != v45)
    {
      unint64_t v32 = v53;
      do
      {
        uint64_t v33 = *v25 + 192 * *v28;
        if (v32 >= v54)
        {
          unint64_t v32 = std::vector<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>>::__emplace_back_slow_path<CLMicroLocationFingerprint&,boost::uuids::uuid const&>((uint64_t *)&v52, v33, (_OWORD *)j + 1);
        }
        else
        {
          std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>::pair[abi:ne180100]<CLMicroLocationFingerprint&,boost::uuids::uuid const&,0>(v32, v33, (_OWORD *)j + 1);
          v32 += 208;
        }
        unint64_t v53 = v32;
        ++v28;
      }
      while (v28 != v31);
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_106);
    }
    uint64_t v34 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v35 = operator new(0x28uLL);
      __int16 v42 = v35;
      long long v43 = xmmword_256514540;
      _OWORD *v35 = 0u;
      v35[1] = 0u;
      *(void *)((char *)v35 + 29) = 0;
      boost::uuids::to_chars<char *>((uint64_t)(j + 2), v35);
      int v36 = &v42;
      if (v43 < 0) {
        int v36 = v42;
      }
      *(_DWORD *)uint64_t buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)long long __p = 2082;
      *(void *)&std::string __p[2] = "";
      *(_WORD *)&__p[10] = 2082;
      *(void *)&__p[12] = v36;
      __int16 v61 = 2050;
      unint64_t v62 = ClusterLabels;
      _os_log_impl(&dword_25631F000, v34, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Post-Pruning Model\", \"ClusterId\":%{public, location:escape_only}s, \"numFPs\":%{public}lu}", buf, 0x26u);
      if (SHIBYTE(v43) < 0) {
        operator delete(v42);
      }
    }

    if (v44)
    {
      int v45 = v44;
      operator delete(v44);
    }
    if (v46)
    {
      uint64_t v47 = v46;
      operator delete(v46);
    }
    if (v49[0])
    {
      v49[1] = v49[0];
      operator delete(v49[0]);
    }
  }
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v50);
  std::vector<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>::__clear[abi:ne180100]((uint64_t *)a2 + 41);
  uint64_t v37 = v52;
  uint64_t v38 = (const uuid *)v53;
  while (v37 != v38)
  {
    uint64_t v39 = v37 + 12;
    CLMicroLocationModel::addFingerprint(a2, (const CLMicroLocationFingerprint *)v37, v37 + 12, a3);
    uint64_t v37 = v39 + 1;
  }
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>>>::~__hash_table((uint64_t)v55);
  *(void *)&v55[0] = &v52;
  std::vector<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>>::__destroy_vector::operator()[abi:ne180100]((void ***)v55);
  std::__function::__value_func<float ()(CLDistanceMatrixTemplate<CLSymmetricMatrixStorage<float>> const&,std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>)>::~__value_func[abi:ne180100](v65);
  std::__function::__value_func<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::~__value_func[abi:ne180100](v66);
}

void sub_2564A210C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,void *a46,uint64_t a47)
{
  std::__function::__value_func<float ()(CLDistanceMatrixTemplate<CLSymmetricMatrixStorage<float>> const&,std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>)>::~__value_func[abi:ne180100]((void *)(v50 - 184));
  std::__function::__value_func<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::~__value_func[abi:ne180100]((void *)(v50 - 152));

  _Unwind_Resume(a1);
}

void CLMicroLocationSemiSupervisedAlgorithm::convertModelToProtobufAndLogModel(uint64_t **this@<X2>, void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  CLMicroLocationModel::toProtobuf((CLMicroLocationModel *)this, a3);
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_106);
  }
  char v5 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v6 = (void *)*(unsigned int *)this;
    int v7 = *((char *)a2 + 23);
    uint64_t v8 = (void **)*a2;
    unsigned int v10 = this[41];
    char v9 = this[42];
    uint64_t v11 = CLMicroLocationModel::numClusters((CLMicroLocationModel *)this);
    int v12 = *((_DWORD *)this + 1);
    if (v7 >= 0) {
      unint64_t v13 = a2;
    }
    else {
      unint64_t v13 = v8;
    }
    *(_DWORD *)uint64_t buf = 68290307;
    int v34 = 0;
    __int16 v35 = 2082;
    int v36 = "";
    __int16 v37 = 2050;
    uint64_t v38 = v6;
    __int16 v39 = 2081;
    uint64_t v40 = v13;
    __int16 v41 = 2049;
    uint64_t v42 = ((char *)v9 - (char *)v10) >> 5;
    __int16 v43 = 2049;
    *(void *)uint64_t v44 = v11;
    *(_WORD *)&v44[8] = 1025;
    v45[0] = v12;
    _os_log_impl(&dword_25631F000, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Semi-supervised model\", \"GenerationAlgorithm\":%{public}lu, \"Client\":%{private, location:escape_only}s, \"size\":%{private}lu, \"numClusters\":%{private}lu, \"type\":%{private}d}", buf, 0x40u);
  }

  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_106);
  }
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v15 = this[41];
    for (uint64_t i = this[42]; v15 != i; v15 += 4)
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_106);
      }
      double v16 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v17 = *v15;
        uint64_t v18 = operator new(0x28uLL);
        unint64_t v30 = v18;
        long long v31 = xmmword_256514540;
        *uint64_t v18 = 0u;
        v18[1] = 0u;
        *(void *)((char *)v18 + 29) = 0;
        boost::uuids::to_chars<char *>(v17 + 40, v18);
        if (v31 >= 0) {
          BOOL v19 = &v30;
        }
        else {
          BOOL v19 = v30;
        }
        unint64_t v20 = operator new(0x28uLL);
        long long __p = v20;
        long long v29 = xmmword_256514540;
        _OWORD *v20 = 0u;
        v20[1] = 0u;
        *(void *)((char *)v20 + 29) = 0;
        boost::uuids::to_chars<char *>((uint64_t)(v15 + 2), v20);
        if (v29 >= 0) {
          p_p = &__p;
        }
        else {
          p_p = (void **)__p;
        }
        uint64_t v22 = *v15;
        uint64_t v23 = *(void *)(*v15 + 24);
        unsigned int v32 = 1;
        unint64_t v24 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>((void *)(v22 + 104), &v32);
        if (v24) {
          double v25 = *((double *)v24 + 4) - *((double *)v24 + 3);
        }
        else {
          double v25 = 0.0;
        }
        double v26 = *(double *)(*v15 + 152);
        int v27 = (int)*(double *)(*v15 + 144);
        *(_DWORD *)uint64_t buf = 68290563;
        int v34 = 0;
        __int16 v35 = 2082;
        int v36 = "";
        __int16 v37 = 2081;
        uint64_t v38 = v19;
        __int16 v39 = 2081;
        uint64_t v40 = p_p;
        __int16 v41 = 2049;
        uint64_t v42 = v23;
        __int16 v43 = 1025;
        *(_DWORD *)uint64_t v44 = (int)v25;
        *(_WORD *)&v44[4] = 1025;
        *(_DWORD *)&v44[6] = v27;
        LOWORD(v45[0]) = 1025;
        *(_DWORD *)((char *)v45 + 2) = (int)v26;
        _os_log_impl(&dword_25631F000, v16, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"modelFingerprint\", \"recordingUUID\":%{private, location:escape_only}s, \"clusterUUID\":%{private, location:escape_only}s, \"size\":%{private}lu, \"duration\":%{private}d, \"start\":%{private}d, \"end\":%{private}d}", buf, 0x42u);
        if (SHIBYTE(v29) < 0) {
          operator delete(__p);
        }
        if (SHIBYTE(v31) < 0) {
          operator delete(v30);
        }
      }
    }
  }
}

void sub_2564A2658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CLMicroLocationProto::Model *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  CLMicroLocationProto::Model::~Model(a10);
  _Unwind_Resume(a1);
}

void CLMicroLocationSemiSupervisedAlgorithm::learnBinaryRoiSemiSupervisedModel(void *a1@<X1>, uint64_t a2@<X3>, void *a3@<X4>, void *a4@<X5>, long long **a5@<X6>, uint64_t a6@<X7>, unsigned char *a7@<X8>, uint64_t a8, CLMicroLocationFingerprintPool *a9, uint64_t a10, uint64_t a11)
{
  v159[2] = *MEMORY[0x263EF8340];
  v159[0] = a10;
  v159[1] = a11;
  uint64_t v103 = a1;
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_106);
  }
  unint64_t v15 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a8 + 23) >= 0) {
      double v16 = (void *)a8;
    }
    else {
      double v16 = *(void **)a8;
    }
    uint64_t v17 = operator new(0x28uLL);
    long long __p = v17;
    *(_OWORD *)v125 = xmmword_256514540;
    *uint64_t v17 = 0u;
    v17[1] = 0u;
    *(void *)((char *)v17 + 29) = 0;
    boost::uuids::to_chars<char *>(a8 + 24, v17);
    p_p = &__p;
    if (v125[15] < 0) {
      p_p = __p;
    }
    unint64_t v19 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(a4[1] - *a4) >> 3);
    unint64_t v20 = 0xEF7BDEF7BDEF7BDFLL * (((char *)a5[1] - (char *)*a5) >> 3);
    *(_DWORD *)uint64_t buf = 68290050;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v138 = 2082;
    uint64_t v139 = "";
    __int16 v140 = 2082;
    unint64_t v141 = (unint64_t)v16;
    __int16 v142 = 2082;
    uint64_t v143 = (uint64_t)p_p;
    __int16 v144 = 2050;
    unint64_t v145 = v19;
    LOWORD(v146[0]) = 2050;
    *(void *)((char *)v146 + 2) = v20;
    _os_log_impl(&dword_25631F000, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Learning semi-supervised model with BinaryRoi generation algorithm\", \"Client\":%{public, location:escape_only}s, \"Service UUID\":%{public, location:escape_only}s, \"Number of labeled recording triggers\":%{public}lu, \"Number of unlabeled recording triggers\":%{public}lu}", buf, 0x3Au);
    if ((v125[15] & 0x80000000) != 0) {
      operator delete(__p);
    }
  }

  double v21 = cl::chrono::CFAbsoluteTimeClock::now();
  *a7 = 0;
  a7[312] = 0;
  v158[0] = &unk_2704DD9E0;
  v158[1] = CLMicroLocationFingerprintConfiguration::getRecordingConfigurationFromSettings;
  v158[3] = v158;
  memset(v122, 0, sizeof(v122));
  int v123 = 1065353216;
  memset(v120, 0, sizeof(v120));
  int v121 = 1065353216;
  uint64_t v22 = (void *)a3[1];
  if ((void *)*a3 != v22)
  {
    uint64_t v23 = (void *)(*a3 + 40);
    do
    {
      std::__hash_table<boost::uuids::uuid,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,std::allocator<boost::uuids::uuid>>::__emplace_unique_key_args<boost::uuids::uuid,boost::uuids::uuid const&>((uint64_t)v122, v23, v23);
      *(void *)uint64_t buf = v23 - 5;
      *((_OWORD *)std::__hash_table<std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>((uint64_t)v120, v23 - 5, (uint64_t)&std::piecewise_construct, (_OWORD **)buf)+ 2) = *(_OWORD *)v23;
      unint64_t v24 = v23 + 3;
      v23 += 8;
    }
    while (v24 != v22);
  }
  memset(v118, 0, sizeof(v118));
  int v119 = 1065353216;
  memset(v116, 0, sizeof(v116));
  int v117 = 1065353216;
  uint64_t v25 = *a4;
  uint64_t v26 = a4[1];
  if (*a4 != v26)
  {
    do
    {
      std::__hash_table<boost::uuids::uuid,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,std::allocator<boost::uuids::uuid>>::__emplace_unique_key_args<boost::uuids::uuid,boost::uuids::uuid const&>((uint64_t)v118, (void *)v25, (_OWORD *)v25);
      if (*(unsigned char *)(v25 + 240))
      {
        *(void *)uint64_t buf = v25;
        *((_OWORD *)std::__hash_table<std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>((uint64_t)v116, (void *)v25, (uint64_t)&std::piecewise_construct, (_OWORD **)buf)+ 2) = *(_OWORD *)(v25 + 224);
      }
      v25 += 248;
    }
    while (v25 != v26);
  }
  uint64_t v113 = 0;
  uint64_t v114 = 0;
  uint64_t v115 = 0;
  int v27 = *a5;
  double v28 = a5[1];
  long long __p = &v113;
  while (v27 != v28)
  {
    if (!std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::find<boost::uuids::uuid>(v118, v27))std::back_insert_iterator<std::vector<CLMicroLocationRecordingEventsTable::Entry>>::operator=[abi:ne180100]((uint64_t **)&__p, v27); {
    int v27 = (long long *)((char *)v27 + 248);
    }
  }
  unsigned int v29 = ULSettings::get<ULSettings::FingerprintDataSource>();
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v157, a2);
  std::__function::__value_func<CLMicroLocationFingerprintConfiguration ()(void)>::__value_func[abi:ne180100]((uint64_t)v156, (uint64_t)v158);
  CLMicroLocationFingerprintDataSources::create(v29);
  CLMicroLocationFingerprintVector::CLMicroLocationFingerprintVector(&v112, &v111);
  uint64_t v30 = v111;
  uint64_t v111 = 0;
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }
  std::__function::__value_func<CLMicroLocationFingerprintConfiguration ()(void)>::~__value_func[abi:ne180100](v156);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v157);
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_106);
  }
  long long v31 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
  {
    int v34 = a4;
    uint64_t v32 = *a4;
    uint64_t v33 = v34[1];
    uint64_t v35 = CLMicroLocationFingerprintVector::size((CLMicroLocationFingerprintVector *)&v112);
    *(_DWORD *)uint64_t buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v138 = 2082;
    uint64_t v139 = "";
    __int16 v140 = 2050;
    unint64_t v141 = 0xEF7BDEF7BDEF7BDFLL * ((v33 - v32) >> 3);
    __int16 v142 = 2050;
    uint64_t v143 = v35;
    _os_log_impl(&dword_25631F000, v31, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"learnBinaryModel, labeledFingerprintVector\", \"numTriggers\":%{public}lu, \"numFPs\":%{public}lu}", buf, 0x26u);
  }

  if (CLMicroLocationFingerprintVector::size((CLMicroLocationFingerprintVector *)&v112))
  {
    uint64_t v36 = *(void *)(a2 + 24);
    if (!v36) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v36 + 48))(v36))
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_106);
      }
      uint64_t v37 = logObject_MicroLocation_Default;
      if (!os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_168;
      }
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v138 = 2082;
      uint64_t v139 = "";
      uint64_t v38 = "{\"msg%{public}.0s\":\"Learning binary model cancelled\"}";
      __int16 v39 = v37;
      uint32_t v40 = 18;
LABEL_43:
      _os_log_impl(&dword_25631F000, v39, OS_LOG_TYPE_DEFAULT, v38, buf, v40);
      goto LABEL_168;
    }
    CLMicroLocationModel::CLMicroLocationModel((CLMicroLocationModel *)buf);
    *(void *)uint64_t buf = 0x100000004;
    if ((const char **)((char *)&v139 + 6) != (const char **)a6)
    {
      LODWORD(v146[0]) = *(_DWORD *)(a6 + 32);
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,void *> *>>((const char **)((char *)&v139 + 6), *(uint64_t **)(a6 + 16), 0);
    }
    *(_OWORD *)&v146[1] = *(_OWORD *)(a6 + 40);
    uint64_t v105 = (void *)CLMicroLocationFingerprintVector::begin((CLMicroLocationFingerprintVector *)&v112);
    *(void *)&long long v106 = v43;
    uint64_t v109 = CLMicroLocationFingerprintVector::end((CLMicroLocationFingerprintVector *)&v112);
    uint64_t v110 = v44;
    while (1)
    {
      if (!CLMicroLocationFingerprintVector::Iterator::operator!=(&v105, &v109))
      {
        unsigned int v72 = ULSettings::get<ULSettings::FingerprintDataSource>();
        std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v133, a2);
        std::__function::__value_func<CLMicroLocationFingerprintConfiguration ()(void)>::__value_func[abi:ne180100]((uint64_t)v132, (uint64_t)v158);
        CLMicroLocationFingerprintDataSources::create(v72);
        CLMicroLocationFingerprintVector::CLMicroLocationFingerprintVector(&v108, &v107);
        uint64_t v73 = v107;
        uint64_t v107 = 0;
        if (v73) {
          (*(void (**)(uint64_t))(*(void *)v73 + 8))(v73);
        }
        std::__function::__value_func<CLMicroLocationFingerprintConfiguration ()(void)>::~__value_func[abi:ne180100](v132);
        std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v133);
        if (CLMicroLocationFingerprintVector::size((CLMicroLocationFingerprintVector *)&v108))
        {
          if (onceToken_MicroLocation_Default != -1) {
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_106);
          }
          unint64_t v74 = (id)logObject_MicroLocation_Default;
          if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v76 = v113;
            uint64_t v75 = v114;
            uint64_t v77 = CLMicroLocationFingerprintVector::size((CLMicroLocationFingerprintVector *)&v108);
            long long __p = (void *)68289538;
            *(_WORD *)v125 = 2082;
            *(void *)&v125[2] = "";
            *(_WORD *)&v125[10] = 2050;
            *(void *)&v125[12] = 0xEF7BDEF7BDEF7BDFLL * ((v75 - v76) >> 3);
            __int16 v126 = 2050;
            uint64_t v127 = v77;
            _os_log_impl(&dword_25631F000, v74, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"learnBinaryModel, unlabeledFingerprintVector\", \"numTriggers\":%{public}lu, \"numFPs\":%{public}lu}", (uint8_t *)&__p, 0x26u);
          }

          CLMicroLocationCoreAnalyticsPublishHelper::updateModelRfCharacteristics(v103, (CLMicroLocationFingerprintVector *)&v108, (CLMicroLocationFingerprintVector *)&v112, 1u, v21);
          CLMicroLocationCoreAnalyticsPublishHelper::updateSemiSupervisedLabeledAndUnlabeledFingerprints(v103, &v108, (const CLMicroLocationFingerprintVector *)&v112, v78);
          int v79 = ULSettings::get<ULSettings::FingerprintDistanceFunctionType>();
          uint64_t v80 = ULSettings::getFingerprintDistanceFunctionParamsForType(v79);
          if (ULSettings::get<ULSettings::AdaptiveAnchorsEnable>())
          {
            std::unordered_map<boost::uuids::uuid,CLMicroLocationAnchorAppearance>::unordered_map((uint64_t)&__p, (uint64_t)&v139 + 6);
            long long v128 = *(_OWORD *)&v146[1];
            char v81 = 1;
          }
          else
          {
            char v81 = 0;
            LOBYTE(__p) = 0;
          }
          char v129 = v81;
          CLMicroLocationAlgorithms::createLearnFingerprintDistanceFunction(v79, v80, (uint64_t)&__p, &v130);
          if (v129) {
            std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&__p);
          }
          uint64_t v109 = CLMicroLocationFingerprintVector::begin((CLMicroLocationFingerprintVector *)&v108);
          uint64_t v110 = v84;
          *(void *)v136.var0 = CLMicroLocationFingerprintVector::end((CLMicroLocationFingerprintVector *)&v108);
          *(void *)&v136.var0[8] = v85;
          while (CLMicroLocationFingerprintVector::Iterator::operator!=(&v109, &v136))
          {
            uint64_t v86 = CLMicroLocationFingerprintVector::Iterator::operator*(&v109);
            CLMicroLocationModel::addFingerprint((CLMicroLocationModel *)buf, (const CLMicroLocationFingerprint *)v86, &CL::kNegMicroLocation, a9);
            CLMicroLocationModel::addRecording((CLMicroLocationModel *)buf, &CL::kNegMicroLocation, (const uuid *)(v86 + 40));
            if (onceToken_MicroLocation_Default != -1) {
              dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_106);
            }
            long long v87 = (id)logObject_MicroLocation_Default;
            if (os_log_type_enabled(v87, OS_LOG_TYPE_DEBUG))
            {
              char v88 = (char *)operator new(0x28uLL);
              *(void *)int v134 = v88;
              long long v135 = xmmword_256514540;
              *(_OWORD *)char v88 = 0u;
              *((_OWORD *)v88 + 1) = 0u;
              *(void *)(v88 + 29) = 0;
              boost::uuids::to_chars<char *>(v86 + 40, v88);
              if (v135 >= 0) {
                long long v89 = v134;
              }
              else {
                long long v89 = *(uint8_t **)v134;
              }
              long long v90 = operator new(0x28uLL);
              uint64_t v105 = v90;
              long long v106 = xmmword_256514540;
              *long long v90 = 0u;
              v90[1] = 0u;
              *(void *)((char *)v90 + 29) = 0;
              boost::uuids::to_chars<char *>((uint64_t)&CL::kNegMicroLocation, v90);
              if (v106 >= 0) {
                long long v91 = &v105;
              }
              else {
                long long v91 = v105;
              }
              long long __p = (void *)68289538;
              *(_WORD *)v125 = 2082;
              *(void *)&v125[2] = "";
              *(_WORD *)&v125[10] = 2082;
              *(void *)&v125[12] = v89;
              __int16 v126 = 2082;
              uint64_t v127 = (uint64_t)v91;
              _os_log_impl(&dword_25631F000, v87, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"learnBinaryModel, fingeprint assigned to NotROI\", \"Recording UUID\":%{public, location:escape_only}s, \"Cluster UUID\":%{public, location:escape_only}s}", (uint8_t *)&__p, 0x26u);
              if (SHIBYTE(v106) < 0) {
                operator delete(v105);
              }
              if (SHIBYTE(v135) < 0) {
                operator delete(*(void **)v134);
              }
            }

            CLMicroLocationFingerprintVector::Iterator::operator++((uint64_t)&v109);
          }
          if (onceToken_MicroLocation_Default != -1) {
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_106);
          }
          BOOL v92 = os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG);
          if (v92)
          {
            for (uint64_t i = v151; i; uint64_t i = (void *)*i)
            {
              if (onceToken_MicroLocation_Default != -1) {
                dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_106);
              }
              long long v94 = (id)logObject_MicroLocation_Default;
              if (os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG))
              {
                long long v95 = (char *)operator new(0x28uLL);
                *(void *)int v134 = v95;
                long long v135 = xmmword_256514540;
                *(_OWORD *)long long v95 = 0u;
                *((_OWORD *)v95 + 1) = 0u;
                *(void *)(v95 + 29) = 0;
                boost::uuids::to_chars<char *>((uint64_t)(i + 2), v95);
                uint64_t v96 = v135 >= 0 ? v134 : *(uint8_t **)v134;
                uint64_t v97 = (uint64_t)(i[5] - i[4]) >> 4;
                long long __p = (void *)68289538;
                *(_WORD *)v125 = 2082;
                *(void *)&v125[2] = "";
                *(_WORD *)&v125[10] = 2082;
                *(void *)&v125[12] = v96;
                __int16 v126 = 2050;
                uint64_t v127 = v97;
                _os_log_impl(&dword_25631F000, v94, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Pre-Pruning Model\", \"ClusterId\":%{public, location:escape_only}s, \"numFPs\":%{public}lu}", (uint8_t *)&__p, 0x26u);
                if (SHIBYTE(v135) < 0) {
                  operator delete(*(void **)v134);
                }
              }
            }
          }
          CLMicroLocationSemiSupervisedAlgorithm::pruneNonRepresentativeFingerprints((CLMicroLocationSemiSupervisedAlgorithm *)v92, (CLMicroLocationModel *)buf, a9);
          CLMicroLocationSemiSupervisedAlgorithm::convertModelToProtobufAndLogModel((uint64_t **)buf, (void **)a8, (uint64_t)&__p);
          CLMicroLocationCoreAnalyticsPublishHelper::updateLearnEventSummary(v103, (CLMicroLocationModel *)buf, (const CLMicroLocationModel *)&__p, v21);
          if (CLMicroLocationModel::isValid((CLMicroLocationModel *)buf))
          {
            LODWORD(v109) = 0;
            boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v109);
            *(void *)int v134 = boost::uuids::random_generator_pure::operator()((uint64_t)&v109);
            *(void *)&long long v135 = v98;
            uint64_t v105 = COERCE_VOID_(cl::chrono::CFAbsoluteTimeClock::now());
            std::__optional_destruct_base<CLMicroLocationModelTable::Entry,false>::reset[abi:ne180100]((uint64_t)a7);
            std::__construct_at[abi:ne180100]<CLMicroLocationModelTable::Entry,boost::uuids::uuid,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>,CLMicroLocationProto::Model,std::string const&,boost::uuids::uuid const&,boost::uuids::uuid&,CLMicroLocationModelTable::Entry*>((uint64_t)a7, (uint64_t *)v134, (double *)&v105, (uint64_t)&__p, a8, (long long *)(a8 + 24), v159);
            a7[312] = 1;
            boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v109);
          }
          else
          {
            if (onceToken_MicroLocation_Default != -1) {
              dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_106);
            }
            uint64_t v99 = logObject_MicroLocation_Default;
            if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)int v134 = 68289026;
              *(_DWORD *)&v134[4] = 0;
              LOWORD(v135) = 2082;
              *(void *)((char *)&v135 + 2) = "";
              _os_log_impl(&dword_25631F000, v99, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"learnBinaryModel, invalid binary model, not created\"}", v134, 0x12u);
            }
          }
          CLMicroLocationProto::Model::~Model((CLMicroLocationProto::Model *)&__p);
          std::__function::__value_func<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::~__value_func[abi:ne180100](&v130);
        }
        else
        {
          if (onceToken_MicroLocation_Default != -1) {
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_106);
          }
          unint64_t v82 = logObject_MicroLocation_Default;
          if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
          {
            if (*(char *)(a8 + 23) >= 0) {
              uint64_t v83 = (void *)a8;
            }
            else {
              uint64_t v83 = *(void **)a8;
            }
            long long __p = (void *)68289283;
            *(_WORD *)v125 = 2082;
            *(void *)&v125[2] = "";
            *(_WORD *)&v125[10] = 2081;
            *(void *)&v125[12] = v83;
            _os_log_impl(&dword_25631F000, v82, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"learnBinaryModel, Must have valid unlabeled fingerprints to create a Non-ROI cluster\", \"ClientId\":%{private, location:escape_only}s}", (uint8_t *)&__p, 0x1Cu);
          }
        }
        Class isa = v108.super.super.isa;
        v108.super.super.Class isa = 0;
        if (isa) {
          (*(void (**)(Class))(*(void *)isa + 8))(isa);
        }
        if (v155 < 0) {
          operator delete(v154);
        }
        if (v152)
        {
          char v153 = v152;
          operator delete(v152);
        }
        std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::~__hash_table((uint64_t)&v150);
        long long __p = &v149;
        std::vector<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        std::__optional_destruct_base<CLMicroLocationModel::BlueAtlasData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v148);
        std::__optional_destruct_base<CLMicroLocationModel::SimilarityListData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v147);
        std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&v139 + 6);
        goto LABEL_168;
      }
      int v45 = (void *)CLMicroLocationFingerprintVector::Iterator::operator*(&v105);
      uint64_t v46 = (const uuid *)(v45 + 5);
      uint64_t v47 = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::find<boost::uuids::uuid>(v116, v45 + 5);
      uint64_t v48 = v47;
      if (!v47) {
        break;
      }
      uint64_t v49 = (uint64_t)(v47 + 4);
      uint64_t v50 = (uuid *)std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::find<boost::uuids::uuid>(v120, v47 + 4);
      if (v50)
      {
        uuid v136 = v50[2];
        CLMicroLocationModel::addFingerprint((CLMicroLocationModel *)buf, (const CLMicroLocationFingerprint *)v45, &v136, a9);
        CLMicroLocationModel::addRecording((CLMicroLocationModel *)buf, &v136, v46);
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_106);
        }
        float v51 = (id)logObject_MicroLocation_Default;
        if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
        {
          long long v52 = operator new(0x28uLL);
          uint64_t v130 = v52;
          long long v131 = xmmword_256514540;
          _OWORD *v52 = 0u;
          v52[1] = 0u;
          *(void *)((char *)v52 + 29) = 0;
          boost::uuids::to_chars<char *>((uint64_t)v46, v52);
          if (v131 >= 0) {
            unint64_t v53 = &v130;
          }
          else {
            unint64_t v53 = v130;
          }
          unint64_t v54 = (char *)operator new(0x28uLL);
          *(void *)int v134 = v54;
          long long v135 = xmmword_256514540;
          *(_OWORD *)unint64_t v54 = 0u;
          *((_OWORD *)v54 + 1) = 0u;
          *(void *)(v54 + 29) = 0;
          boost::uuids::to_chars<char *>((uint64_t)&v136, v54);
          long long v55 = v134;
          if (v135 < 0) {
            long long v55 = *(uint8_t **)v134;
          }
          long long __p = (void *)68289538;
          *(_WORD *)v125 = 2082;
          *(void *)&v125[2] = "";
          *(_WORD *)&v125[10] = 2082;
          *(void *)&v125[12] = v53;
          __int16 v126 = 2082;
          uint64_t v127 = (uint64_t)v55;
          _os_log_impl(&dword_25631F000, v51, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"learnBinaryModel, labeled fingeprint assigned to cluster\", \"Recording UUID\":%{public, location:escape_only}s, \"Cluster UUID\":%{public, location:escape_only}s}", (uint8_t *)&__p, 0x26u);
          if (SHIBYTE(v135) < 0) {
            operator delete(*(void **)v134);
          }
          if (SHIBYTE(v131) < 0) {
            operator delete(v130);
          }
        }
LABEL_62:

        goto LABEL_105;
      }
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_106);
      }
      uint64_t v61 = (uint64_t)(v48 + 2);
      unint64_t v62 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
      {
        CLMacAddress v63 = operator new(0x28uLL);
        uint64_t v130 = v63;
        long long v131 = xmmword_256514540;
        _OWORD *v63 = 0u;
        v63[1] = 0u;
        *(void *)((char *)v63 + 29) = 0;
        boost::uuids::to_chars<char *>(v61, v63);
        if (v131 >= 0) {
          int v64 = &v130;
        }
        else {
          int v64 = v130;
        }
        unint64_t v65 = (char *)operator new(0x28uLL);
        *(void *)int v134 = v65;
        long long v135 = xmmword_256514540;
        *(_OWORD *)unint64_t v65 = 0u;
        *((_OWORD *)v65 + 1) = 0u;
        *(void *)(v65 + 29) = 0;
        boost::uuids::to_chars<char *>(v49, v65);
        uint64_t v66 = v134;
        if (v135 < 0) {
          uint64_t v66 = *(uint8_t **)v134;
        }
        long long __p = (void *)68289538;
        *(_WORD *)v125 = 2082;
        *(void *)&v125[2] = "";
        *(_WORD *)&v125[10] = 2082;
        *(void *)&v125[12] = v64;
        __int16 v126 = 2082;
        uint64_t v127 = (uint64_t)v66;
        _os_log_impl(&dword_25631F000, v62, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"learnBinaryRoiSemiSupervisedModel, couldn't find label of labeled fingerprint\", \"Recording UUID\":%{public, location:escape_only}s, \"Trigger UUID\":%{public, location:escape_only}s}", (uint8_t *)&__p, 0x26u);
        if (SHIBYTE(v135) < 0) {
          operator delete(*(void **)v134);
        }
        if (SHIBYTE(v131) < 0) {
          operator delete(v130);
        }
      }

      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_106);
      }
      __int16 v67 = (id)logObject_MicroLocation_Default;
      if (os_signpost_enabled(v67))
      {
        float v68 = operator new(0x28uLL);
        uint64_t v130 = v68;
        long long v131 = xmmword_256514540;
        _OWORD *v68 = 0u;
        v68[1] = 0u;
        *(void *)((char *)v68 + 29) = 0;
        boost::uuids::to_chars<char *>(v61, v68);
        if (v131 >= 0) {
          float v69 = &v130;
        }
        else {
          float v69 = v130;
        }
        unsigned int v70 = (char *)operator new(0x28uLL);
        *(void *)int v134 = v70;
        long long v135 = xmmword_256514540;
        *(_OWORD *)unsigned int v70 = 0u;
        *((_OWORD *)v70 + 1) = 0u;
        *(void *)(v70 + 29) = 0;
        boost::uuids::to_chars<char *>(v49, v70);
        uint64_t v71 = v134;
        if (v135 < 0) {
          uint64_t v71 = *(uint8_t **)v134;
        }
        long long __p = (void *)68289538;
        *(_WORD *)v125 = 2082;
        *(void *)&v125[2] = "";
        *(_WORD *)&v125[10] = 2082;
        *(void *)&v125[12] = v69;
        __int16 v126 = 2082;
        uint64_t v127 = (uint64_t)v71;
        _os_signpost_emit_with_name_impl(&dword_25631F000, v67, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "learnBinaryRoiSemiSupervisedModel, couldn't find label of labeled fingerprint", "{\"msg%{public}.0s\":\"learnBinaryRoiSemiSupervisedModel, couldn't find label of labeled fingerprint\", \"Recording UUID\":%{public, location:escape_only}s, \"Trigger UUID\":%{public, location:escape_only}s}", (uint8_t *)&__p, 0x26u);
        if (SHIBYTE(v135) < 0) {
          operator delete(*(void **)v134);
        }
        if (SHIBYTE(v131) < 0) {
          operator delete(v130);
        }
      }

LABEL_105:
      CLMicroLocationFingerprintVector::Iterator::operator++((uint64_t)&v105);
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_106);
    }
    int v56 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
    {
      long long v57 = operator new(0x28uLL);
      uint64_t v130 = v57;
      long long v131 = xmmword_256514540;
      *long long v57 = 0u;
      v57[1] = 0u;
      *(void *)((char *)v57 + 29) = 0;
      boost::uuids::to_chars<char *>((uint64_t)v46, v57);
      char v58 = v131 >= 0 ? &v130 : (void **)v130;
      long long __p = (void *)68289282;
      *(_WORD *)v125 = 2082;
      *(void *)&v125[2] = "";
      *(_WORD *)&v125[10] = 2082;
      *(void *)&v125[12] = v58;
      _os_log_impl(&dword_25631F000, v56, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"learnBinaryRoiSemiSupervisedModel, couldn't find trigger of labeled fingerprint\", \"Recording UUID\":%{public, location:escape_only}s}", (uint8_t *)&__p, 0x1Cu);
      if (SHIBYTE(v131) < 0) {
        operator delete(v130);
      }
    }

    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_106);
    }
    float v51 = (id)logObject_MicroLocation_Default;
    if (os_signpost_enabled(v51))
    {
      uint64_t v59 = operator new(0x28uLL);
      uint64_t v130 = v59;
      long long v131 = xmmword_256514540;
      *uint64_t v59 = 0u;
      v59[1] = 0u;
      *(void *)((char *)v59 + 29) = 0;
      boost::uuids::to_chars<char *>((uint64_t)v46, v59);
      unint64_t v60 = v131 >= 0 ? &v130 : (void **)v130;
      long long __p = (void *)68289282;
      *(_WORD *)v125 = 2082;
      *(void *)&v125[2] = "";
      *(_WORD *)&v125[10] = 2082;
      *(void *)&v125[12] = v60;
      _os_signpost_emit_with_name_impl(&dword_25631F000, v51, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "learnBinaryRoiSemiSupervisedModel, couldn't find trigger of labeled fingerprint", "{\"msg%{public}.0s\":\"learnBinaryRoiSemiSupervisedModel, couldn't find trigger of labeled fingerprint\", \"Recording UUID\":%{public, location:escape_only}s}", (uint8_t *)&__p, 0x1Cu);
      if (SHIBYTE(v131) < 0) {
        operator delete(v130);
      }
    }
    goto LABEL_62;
  }
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_106);
  }
  uint64_t v41 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a8 + 23) >= 0) {
      uint64_t v42 = (void *)a8;
    }
    else {
      uint64_t v42 = *(void **)a8;
    }
    *(_DWORD *)uint64_t buf = 68289283;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v138 = 2082;
    uint64_t v139 = "";
    __int16 v140 = 2081;
    unint64_t v141 = (unint64_t)v42;
    uint64_t v38 = "{\"msg%{public}.0s\":\"learnBinaryModel, Must have valid labeled fingerprints\", \"ClientId\":%{private, locat"
          "ion:escape_only}s}";
    __int16 v39 = v41;
    uint32_t v40 = 28;
    goto LABEL_43;
  }
LABEL_168:
  uint64_t v101 = v112;
  uint64_t v112 = 0;
  if (v101) {
    (*(void (**)(uint64_t))(*(void *)v101 + 8))(v101);
  }
  *(void *)uint64_t buf = &v113;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v116);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v118);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v120);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v122);
  std::__function::__value_func<CLMicroLocationFingerprintConfiguration ()(void)>::~__value_func[abi:ne180100](v158);
}

void sub_2564A3BCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&a28);
  CLMicroLocationProto::Model::~Model((CLMicroLocationProto::Model *)&a59);
  std::__function::__value_func<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::~__value_func[abi:ne180100](&STACK[0x260]);

  if (a27) {
    (*(void (**)(uint64_t))(*(void *)a27 + 8))(a27);
  }
  CLMicroLocationModel::~CLMicroLocationModel((void **)&STACK[0x2F0]);
  uint64_t v61 = a31;
  a31 = 0;
  if (v61) {
    (*(void (**)(uint64_t))(*(void *)v61 + 8))(v61);
  }
  STACK[0x2F0] = (unint64_t)&a32;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2F0]);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&a41);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&a47);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&a53);
  std::__function::__value_func<CLMicroLocationFingerprintConfiguration ()(void)>::~__value_func[abi:ne180100]((void *)(v59 - 168));
  std::__optional_destruct_base<CLMicroLocationModelTable::Entry,false>::~__optional_destruct_base[abi:ne180100](a13);

  _Unwind_Resume(a1);
}

void sub_2564A402C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564A412C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_84()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

void std::vector<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unsigned int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    char v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 224;
        std::allocator<CLMicroLocationFingerprint>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>>::__emplace_back_slow_path<CLMicroLocationFingerprint const&,CLMicroLocationResultInternal&>(uint64_t *a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x124924924924924) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v4) >> 5);
  if (2 * v10 > v6) {
    unint64_t v6 = 2 * v10;
  }
  if (v10 >= 0x92492492492492) {
    unint64_t v11 = 0x124924924924924;
  }
  else {
    unint64_t v11 = v6;
  }
  unint64_t v19 = a1 + 2;
  if (v11) {
    int v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>>>(v9, v11);
  }
  else {
    int v12 = 0;
  }
  unint64_t v15 = v12;
  double v16 = &v12[224 * v5];
  uint64_t v18 = &v12[224 * v11];
  std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::pair[abi:ne180100]<CLMicroLocationFingerprint const&,CLMicroLocationResultInternal&,0>((uint64_t)v16, a2, a3);
  uint64_t v17 = v16 + 224;
  std::vector<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>>::__swap_out_circular_buffer(a1, &v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>>::~__split_buffer(&v15);
  return v13;
}

void sub_2564A4358(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::pair[abi:ne180100]<CLMicroLocationFingerprint const&,CLMicroLocationResultInternal&,0>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v6 = std::unordered_set<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::unordered_set(a1, a2);
  long long v7 = *(_OWORD *)(a2 + 40);
  *(void *)(v6 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(v6 + 40) = v7;
  std::unordered_set<CLMicroLocationProto::DataType>::unordered_set(v6 + 64, a2 + 64);
  std::unordered_map<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>::unordered_map(a1 + 104, a2 + 104);
  long long v8 = *(_OWORD *)(a2 + 144);
  int v9 = *(_DWORD *)(a2 + 160);
  *(void *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 144) = v8;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  std::vector<CLMicroLocationProto::ConfidenceReason>::__init_with_size[abi:ne180100]<CLMicroLocationProto::ConfidenceReason*,CLMicroLocationProto::ConfidenceReason*>((void *)(a1 + 168), *(const void **)(a2 + 168), *(void *)(a2 + 176), (uint64_t)(*(void *)(a2 + 176) - *(void *)(a2 + 168)) >> 2);
  long long v10 = a3[1];
  *(_OWORD *)(a1 + 192) = *a3;
  *(_OWORD *)(a1 + 208) = v10;
  return a1;
}

void sub_2564A4410(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(v2);
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>>,std::reverse_iterator<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>*>,std::reverse_iterator<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>*>,std::reverse_iterator<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x124924924924925) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(224 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>>,std::reverse_iterator<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>*>,std::reverse_iterator<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>*>,std::reverse_iterator<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 224;
      std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::pair[abi:ne180100](v7 - 224, v9);
      uint64_t v7 = *((void *)&v15 + 1) - 224;
      *((void *)&v15 + 1) -= 224;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>>,std::reverse_iterator<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4 = std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__hash_table(a1, (uint64_t *)a2);
  long long v5 = *(_OWORD *)(a2 + 40);
  *(void *)(v4 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(v4 + 40) = v5;
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__hash_table(v4 + 64, (uint64_t *)(a2 + 64));
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__hash_table(a1 + 104, (uint64_t *)(a2 + 104));
  long long v6 = *(_OWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v6;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  long long v7 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v7;
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>>,std::reverse_iterator<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>>,std::reverse_iterator<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

uint64_t *std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>>,std::reverse_iterator<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>*>>::operator()[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *(void *)(result[2] + 8);
  uint64_t v2 = *(void *)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      uint64_t result = (uint64_t *)std::allocator<CLMicroLocationFingerprint>::destroy[abi:ne180100](v3, v1);
      v1 += 224;
    }
    while (v1 != v2);
  }
  return result;
}

void **std::__split_buffer<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

uint64_t std::__split_buffer<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>>::clear[abi:ne180100](uint64_t result)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v1 = *(void *)(result + 16);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *(void *)(v3 + 32);
      *(void *)(v3 + 16) = v1 - 224;
      uint64_t result = std::allocator<CLMicroLocationFingerprint>::destroy[abi:ne180100](v4, v1 - 224);
      uint64_t v1 = *(void *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,CLMicroLocationSemiSupervisedAlgorithm::learnSelfTrainingSemiSupervisedModel(NSMutableDictionary *,ULDatabase &,std::function<BOOL ()(void)>,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,CLMicroLocationAnchorAppearanceMap const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationFingerprintPool &,boost::uuids::uuid)::$_5 &,std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal> *,false>(uint64_t result, char *a2, uint64_t a3, char a4)
{
  uint64_t v9 = (_OWORD *)result;
  uint64_t v107 = *MEMORY[0x263EF8340];
  while (2)
  {
    uint64_t v10 = (uint64_t)(a2 - 224);
    uint64_t v93 = (uint64_t)(a2 - 672);
    uint64_t v94 = (uint64_t)(a2 - 448);
    unint64_t v11 = (unint64_t)v9;
    long long v95 = a2;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = (_OWORD *)v11;
          uint64_t v12 = (uint64_t)&a2[-v11];
          unint64_t v13 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&a2[-v11] >> 5);
          if (!(!v5 & v4))
          {
            switch(v13)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                if (*((double *)a2 - 2) > *((double *)v9 + 26))
                {
                  uint64_t result = std::swap[abi:ne180100]<CLMicroLocationFingerprint>((uint64_t)v9, v10);
                  long long v49 = v9[13];
                  *(_OWORD *)uint64_t v101 = v9[12];
                  long long v50 = *(_OWORD *)v101;
                  *(_OWORD *)&v101[16] = v49;
                  long long v51 = *(_OWORD *)(a2 - 20);
                  v9[12] = *((_OWORD *)a2 - 2);
                  *(_OWORD *)((char *)v9 + 204) = v51;
                  *(_OWORD *)(a2 - 20) = *(_OWORD *)&v101[12];
                  *((_OWORD *)a2 - 2) = v50;
                }
                break;
              case 3uLL:
                uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationSemiSupervisedAlgorithm::learnSelfTrainingSemiSupervisedModel(NSMutableDictionary *,ULDatabase &,std::function<BOOL ()(void)>,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,CLMicroLocationAnchorAppearanceMap const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationFingerprintPool &,boost::uuids::uuid)::$_5 &,std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal> *>((uint64_t)v9, (uint64_t)(v9 + 14), v10);
                break;
              case 4uLL:
                uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationSemiSupervisedAlgorithm::learnSelfTrainingSemiSupervisedModel(NSMutableDictionary *,ULDatabase &,std::function<BOOL ()(void)>,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,CLMicroLocationAnchorAppearanceMap const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationFingerprintPool &,boost::uuids::uuid)::$_5 &,std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal> *>(v9, v9 + 14, v9 + 28, v10);
                break;
              case 5uLL:
                uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationSemiSupervisedAlgorithm::learnSelfTrainingSemiSupervisedModel(NSMutableDictionary *,ULDatabase &,std::function<BOOL ()(void)>,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,CLMicroLocationAnchorAppearanceMap const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationFingerprintPool &,boost::uuids::uuid)::$_5 &,std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal> *>(v9, v9 + 14, v9 + 28, (uint64_t)(v9 + 42));
                if (*((double *)a2 - 2) > *((double *)v9 + 110))
                {
                  uint64_t result = std::swap[abi:ne180100]<CLMicroLocationFingerprint>((uint64_t)(v9 + 42), v10);
                  long long v52 = v9[55];
                  *(_OWORD *)uint64_t v101 = v9[54];
                  long long v53 = *(_OWORD *)v101;
                  *(_OWORD *)&v101[16] = v52;
                  long long v54 = *(_OWORD *)(a2 - 20);
                  v9[54] = *((_OWORD *)a2 - 2);
                  *(_OWORD *)((char *)v9 + 876) = v54;
                  *(_OWORD *)(a2 - 20) = *(_OWORD *)&v101[12];
                  *((_OWORD *)a2 - 2) = v53;
                  if (*((double *)v9 + 110) > *((double *)v9 + 82))
                  {
                    uint64_t result = std::swap[abi:ne180100]<CLMicroLocationFingerprint>((uint64_t)(v9 + 28), (uint64_t)(v9 + 42));
                    long long v55 = v9[41];
                    *(_OWORD *)uint64_t v101 = v9[40];
                    long long v56 = *(_OWORD *)v101;
                    *(_OWORD *)&v101[16] = v55;
                    v9[40] = v9[54];
                    *(_OWORD *)((char *)v9 + 652) = *(_OWORD *)((char *)v9 + 876);
                    v9[54] = v56;
                    *(_OWORD *)((char *)v9 + 876) = *(_OWORD *)&v101[12];
                    if (*((double *)v9 + 82) > *((double *)v9 + 54))
                    {
                      uint64_t result = std::swap[abi:ne180100]<CLMicroLocationFingerprint>((uint64_t)(v9 + 14), (uint64_t)(v9 + 28));
                      long long v57 = v9[27];
                      *(_OWORD *)uint64_t v101 = v9[26];
                      long long v58 = *(_OWORD *)v101;
                      *(_OWORD *)&v101[16] = v57;
                      v9[26] = v9[40];
                      *(_OWORD *)((char *)v9 + 428) = *(_OWORD *)((char *)v9 + 652);
                      v9[40] = v58;
                      *(_OWORD *)((char *)v9 + 652) = *(_OWORD *)&v101[12];
                      if (*((double *)v9 + 54) > *((double *)v9 + 26))
                      {
                        uint64_t result = std::swap[abi:ne180100]<CLMicroLocationFingerprint>((uint64_t)v9, (uint64_t)(v9 + 14));
                        long long v59 = v9[13];
                        *(_OWORD *)uint64_t v101 = v9[12];
                        long long v60 = *(_OWORD *)v101;
                        *(_OWORD *)&v101[16] = v59;
                        v9[12] = v9[26];
                        *(_OWORD *)((char *)v9 + 204) = *(_OWORD *)((char *)v9 + 428);
                        v9[26] = v60;
                        *(_OWORD *)((char *)v9 + 428) = *(_OWORD *)&v101[12];
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v12 <= 5375)
          {
            if (a4)
            {
              if (v9 != (_OWORD *)a2)
              {
                uint64_t v61 = (uint64_t)(v9 + 14);
                if (v9 + 14 != (_OWORD *)a2)
                {
                  uint64_t v62 = 0;
                  CLMacAddress v63 = (double *)v9;
                  do
                  {
                    double v64 = v63[54];
                    double v65 = v63[26];
                    CLMacAddress v63 = (double *)v61;
                    if (v64 > v65)
                    {
                      std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::pair[abi:ne180100]((uint64_t)v101, v61);
                      uint64_t v66 = v62;
                      while (1)
                      {
                        std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::operator=[abi:ne180100]((uint64_t)v9 + v66 + 224, (uint64_t)v9 + v66);
                        if (!v66) {
                          break;
                        }
                        double v67 = *(double *)((char *)v9 + v66 - 16);
                        v66 -= 224;
                        if (v106 <= v67)
                        {
                          uint64_t v68 = (uint64_t)v9 + v66 + 224;
                          goto LABEL_80;
                        }
                      }
                      uint64_t v68 = (uint64_t)v9;
LABEL_80:
                      std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::operator=[abi:ne180100](v68, (uint64_t)v101);
                      if (__p)
                      {
                        uint64_t v105 = __p;
                        operator delete(__p);
                      }
                      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v103);
                      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v102);
                      uint64_t result = std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table((uint64_t)v101);
                    }
                    uint64_t v61 = (uint64_t)(v63 + 28);
                    v62 += 224;
                  }
                  while (v63 + 28 != (double *)a2);
                }
              }
            }
            else if (v9 != (_OWORD *)a2)
            {
              uint64_t v89 = (uint64_t)(v9 + 14);
              if (v9 + 14 != (_OWORD *)a2)
              {
                do
                {
                  uint64_t v90 = v89;
                  if (*((double *)v9 + 54) > *((double *)v9 + 26))
                  {
                    std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::pair[abi:ne180100]((uint64_t)v101, v89);
                    do
                    {
                      std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::operator=[abi:ne180100]((uint64_t)(v9 + 14), (uint64_t)v9);
                      long long v91 = v9 - 14;
                      double v92 = *((double *)v9 - 2);
                      v9 -= 14;
                    }
                    while (v106 > v92);
                    std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::operator=[abi:ne180100]((uint64_t)(v91 + 14), (uint64_t)v101);
                    if (__p)
                    {
                      uint64_t v105 = __p;
                      operator delete(__p);
                    }
                    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v103);
                    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v102);
                    uint64_t result = std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table((uint64_t)v101);
                  }
                  uint64_t v89 = v90 + 224;
                  uint64_t v9 = (_OWORD *)v90;
                }
                while ((char *)(v90 + 224) != a2);
              }
            }
            return result;
          }
          if (!a3)
          {
            if (v9 != (_OWORD *)a2)
            {
              int64_t v69 = (v13 - 2) >> 1;
              int64_t v70 = v69;
              do
              {
                int64_t v71 = v70;
                if (v69 >= v70)
                {
                  uint64_t v72 = (2 * v70) | 1;
                  uint64_t v73 = (uint64_t)&v9[14 * v72];
                  if (2 * v70 + 2 < (uint64_t)v13 && *(double *)&v9[14 * v72 + 13] > *(double *)(v73 + 432))
                  {
                    v73 += 224;
                    uint64_t v72 = 2 * v70 + 2;
                  }
                  if (*(double *)(v73 + 208) <= *(double *)&v9[14 * v70 + 13])
                  {
                    uint64_t v74 = (uint64_t)&v9[14 * v70];
                    std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::pair[abi:ne180100]((uint64_t)v101, v74);
                    do
                    {
                      uint64_t v75 = v73;
                      std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::operator=[abi:ne180100](v74, v73);
                      if (v69 < v72) {
                        break;
                      }
                      uint64_t v76 = (2 * v72) | 1;
                      uint64_t v73 = (uint64_t)&v9[14 * v76];
                      if (2 * v72 + 2 < (uint64_t)v13 && *(double *)&v9[14 * v76 + 13] > *(double *)(v73 + 432))
                      {
                        v73 += 224;
                        uint64_t v76 = 2 * v72 + 2;
                      }
                      uint64_t v74 = v75;
                      uint64_t v72 = v76;
                    }
                    while (*(double *)(v73 + 208) <= v106);
                    std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::operator=[abi:ne180100](v75, (uint64_t)v101);
                    if (__p)
                    {
                      uint64_t v105 = __p;
                      operator delete(__p);
                    }
                    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v103);
                    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v102);
                    std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table((uint64_t)v101);
                  }
                }
                int64_t v70 = v71 - 1;
              }
              while (v71);
              uint64_t v77 = (((unint64_t)v12 >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64;
              uint64_t v78 = (uint64_t)v95;
              do
              {
                std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::pair[abi:ne180100]((uint64_t)v96, (uint64_t)v9);
                uint64_t v79 = 0;
                uint64_t v80 = (uint64_t)v9;
                do
                {
                  uint64_t v81 = v80;
                  uint64_t v82 = v79 + 1;
                  v80 += 224 * (v79 + 1);
                  uint64_t v83 = 2 * v79;
                  uint64_t v79 = (2 * v79) | 1;
                  uint64_t v84 = v83 + 2;
                  if (v84 < v77 && *(double *)(v81 + 224 * v82 + 208) > *(double *)(v80 + 432))
                  {
                    v80 += 224;
                    uint64_t v79 = v84;
                  }
                  std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::operator=[abi:ne180100](v81, v80);
                }
                while (v79 <= (uint64_t)((unint64_t)(v77 - 2) >> 1));
                v78 -= 224;
                if (v80 == v78)
                {
                  std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::operator=[abi:ne180100](v80, (uint64_t)v96);
                }
                else
                {
                  std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::operator=[abi:ne180100](v80, v78);
                  std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::operator=[abi:ne180100](v78, (uint64_t)v96);
                  uint64_t v85 = v80 - (void)v9 + 224;
                  if (v85 >= 225)
                  {
                    unint64_t v86 = (unint64_t)(((((unint64_t)v85 >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64)
                                           - 2) >> 1;
                    if (*(double *)&v9[14 * v86 + 13] > *(double *)(v80 + 208))
                    {
                      std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::pair[abi:ne180100]((uint64_t)v101, v80);
                      do
                      {
                        uint64_t v87 = v80;
                        uint64_t v80 = (uint64_t)&v9[14 * v86];
                        std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::operator=[abi:ne180100](v87, v80);
                        if (!v86) {
                          break;
                        }
                        unint64_t v86 = (v86 - 1) >> 1;
                      }
                      while (*(double *)&v9[14 * v86 + 13] > v106);
                      std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::operator=[abi:ne180100](v80, (uint64_t)v101);
                      if (__p)
                      {
                        uint64_t v105 = __p;
                        operator delete(__p);
                      }
                      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v103);
                      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v102);
                      std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table((uint64_t)v101);
                    }
                  }
                }
                if (v99)
                {
                  uint64_t v100 = v99;
                  operator delete(v99);
                }
                std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&v98);
                std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&v97);
                uint64_t result = std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table((uint64_t)v96);
              }
              while (v77-- > 2);
            }
            return result;
          }
          uint64_t v14 = (uint64_t)&v9[14 * (v13 >> 1)];
          if ((unint64_t)v12 > 0x7000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationSemiSupervisedAlgorithm::learnSelfTrainingSemiSupervisedModel(NSMutableDictionary *,ULDatabase &,std::function<BOOL ()(void)>,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,CLMicroLocationAnchorAppearanceMap const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationFingerprintPool &,boost::uuids::uuid)::$_5 &,std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal> *>((uint64_t)v9, (uint64_t)&v9[14 * (v13 >> 1)], v10);
            uint64_t v15 = 14 * (v13 >> 1);
            double v16 = &v9[v15];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationSemiSupervisedAlgorithm::learnSelfTrainingSemiSupervisedModel(NSMutableDictionary *,ULDatabase &,std::function<BOOL ()(void)>,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,CLMicroLocationAnchorAppearanceMap const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationFingerprintPool &,boost::uuids::uuid)::$_5 &,std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal> *>((uint64_t)(v9 + 14), (uint64_t)&v9[v15 - 14], v94);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationSemiSupervisedAlgorithm::learnSelfTrainingSemiSupervisedModel(NSMutableDictionary *,ULDatabase &,std::function<BOOL ()(void)>,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,CLMicroLocationAnchorAppearanceMap const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationFingerprintPool &,boost::uuids::uuid)::$_5 &,std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal> *>((uint64_t)(v9 + 28), (uint64_t)&v9[v15 + 14], v93);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationSemiSupervisedAlgorithm::learnSelfTrainingSemiSupervisedModel(NSMutableDictionary *,ULDatabase &,std::function<BOOL ()(void)>,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,CLMicroLocationAnchorAppearanceMap const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationFingerprintPool &,boost::uuids::uuid)::$_5 &,std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal> *>((uint64_t)&v9[v15 - 14], v14, (uint64_t)&v9[v15 + 14]);
            std::swap[abi:ne180100]<CLMicroLocationFingerprint>((uint64_t)v9, v14);
            long long v17 = v9[13];
            *(_OWORD *)uint64_t v101 = v9[12];
            long long v18 = *(_OWORD *)v101;
            *(_OWORD *)&v101[16] = v17;
            long long v19 = v9[v15 + 12];
            *(_OWORD *)((char *)v9 + 204) = *(_OWORD *)((char *)&v9[v15 + 12] + 12);
            v9[12] = v19;
            *(_OWORD *)((char *)v16 + 204) = *(_OWORD *)&v101[12];
            v16[12] = v18;
            a2 = v95;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationSemiSupervisedAlgorithm::learnSelfTrainingSemiSupervisedModel(NSMutableDictionary *,ULDatabase &,std::function<BOOL ()(void)>,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,CLMicroLocationAnchorAppearanceMap const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationFingerprintPool &,boost::uuids::uuid)::$_5 &,std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal> *>((uint64_t)&v9[14 * (v13 >> 1)], (uint64_t)v9, v10);
          }
          --a3;
          if ((a4 & 1) != 0 || *((double *)v9 - 2) > *((double *)v9 + 26)) {
            break;
          }
          std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::pair[abi:ne180100]((uint64_t)v101, (uint64_t)v9);
          if (v106 > *((double *)a2 - 2))
          {
            uint64_t v37 = (double *)v9;
            do
            {
              unint64_t v11 = (unint64_t)(v37 + 28);
              double v38 = v37[54];
              v37 += 28;
            }
            while (v106 <= v38);
          }
          else
          {
            __int16 v39 = (double *)(v9 + 14);
            do
            {
              unint64_t v11 = (unint64_t)v39;
              if (v39 >= (double *)a2) {
                break;
              }
              double v40 = v39[26];
              v39 += 28;
            }
            while (v106 <= v40);
          }
          unint64_t v41 = (unint64_t)a2;
          if (v11 < (unint64_t)a2)
          {
            uint64_t v42 = a2;
            do
            {
              unint64_t v41 = (unint64_t)(v42 - 224);
              double v43 = *((double *)v42 - 2);
              v42 -= 224;
            }
            while (v106 > v43);
          }
          while (v11 < v41)
          {
            std::swap[abi:ne180100]<CLMicroLocationFingerprint>(v11, v41);
            long long v44 = *(_OWORD *)(v11 + 208);
            *(_OWORD *)uint64_t v96 = *(_OWORD *)(v11 + 192);
            long long v45 = *(_OWORD *)v96;
            *(_OWORD *)&v96[16] = v44;
            long long v46 = *(_OWORD *)(v41 + 204);
            *(_OWORD *)(v11 + 192) = *(_OWORD *)(v41 + 192);
            *(_OWORD *)(v11 + 204) = v46;
            *(_OWORD *)(v41 + 192) = v45;
            *(_OWORD *)(v41 + 204) = *(_OWORD *)&v96[12];
            do
            {
              double v47 = *(double *)(v11 + 432);
              v11 += 224;
            }
            while (v106 <= v47);
            do
            {
              double v48 = *(double *)(v41 - 16);
              v41 -= 224;
            }
            while (v106 > v48);
          }
          if ((_OWORD *)(v11 - 224) != v9) {
            std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::operator=[abi:ne180100]((uint64_t)v9, v11 - 224);
          }
          std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::operator=[abi:ne180100](v11 - 224, (uint64_t)v101);
          if (__p)
          {
            uint64_t v105 = __p;
            operator delete(__p);
          }
          std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v103);
          std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v102);
          uint64_t result = std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table((uint64_t)v101);
          a4 = 0;
        }
        std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::pair[abi:ne180100]((uint64_t)v101, (uint64_t)v9);
        uint64_t v20 = 0;
        do
        {
          double v21 = *(double *)&v9[v20 + 27];
          v20 += 14;
        }
        while (v21 > v106);
        uint64_t v22 = (char *)&v9[v20];
        uint64_t v23 = a2;
        if (v20 == 14)
        {
          uint64_t v26 = a2;
          while (v22 < v26)
          {
            unint64_t v24 = (unint64_t)(v26 - 224);
            double v27 = *((double *)v26 - 2);
            v26 -= 224;
            if (v27 > v106) {
              goto LABEL_22;
            }
          }
          unint64_t v24 = (unint64_t)v26;
        }
        else
        {
          do
          {
            unint64_t v24 = (unint64_t)(v23 - 224);
            double v25 = *((double *)v23 - 2);
            v23 -= 224;
          }
          while (v25 <= v106);
        }
LABEL_22:
        if ((unint64_t)v22 < v24)
        {
          unint64_t v28 = (unint64_t)v22;
          unint64_t v29 = v24;
          do
          {
            std::swap[abi:ne180100]<CLMicroLocationFingerprint>(v28, v29);
            long long v30 = *(_OWORD *)(v28 + 208);
            *(_OWORD *)uint64_t v96 = *(_OWORD *)(v28 + 192);
            long long v31 = *(_OWORD *)v96;
            *(_OWORD *)&v96[16] = v30;
            long long v32 = *(_OWORD *)(v29 + 204);
            *(_OWORD *)(v28 + 192) = *(_OWORD *)(v29 + 192);
            *(_OWORD *)(v28 + 204) = v32;
            *(_OWORD *)(v29 + 192) = v31;
            *(_OWORD *)(v29 + 204) = *(_OWORD *)&v96[12];
            do
            {
              double v33 = *(double *)(v28 + 432);
              v28 += 224;
            }
            while (v33 > v106);
            do
            {
              double v34 = *(double *)(v29 - 16);
              v29 -= 224;
            }
            while (v34 <= v106);
          }
          while (v28 < v29);
          uint64_t v35 = v28 - 224;
        }
        else
        {
          uint64_t v35 = (uint64_t)(v22 - 224);
        }
        if ((_OWORD *)v35 != v9) {
          std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::operator=[abi:ne180100]((uint64_t)v9, v35);
        }
        std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::operator=[abi:ne180100](v35, (uint64_t)v101);
        if (__p)
        {
          uint64_t v105 = __p;
          operator delete(__p);
        }
        std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v103);
        std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v102);
        std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table((uint64_t)v101);
        if ((unint64_t)v22 >= v24) {
          break;
        }
LABEL_37:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,CLMicroLocationSemiSupervisedAlgorithm::learnSelfTrainingSemiSupervisedModel(NSMutableDictionary *,ULDatabase &,std::function<BOOL ()(void)>,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,CLMicroLocationAnchorAppearanceMap const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationFingerprintPool &,boost::uuids::uuid)::$_5 &,std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal> *,false>(v9, v35, a3, a4 & 1);
        a4 = 0;
        unint64_t v11 = v35 + 224;
      }
      BOOL v36 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationSemiSupervisedAlgorithm::learnSelfTrainingSemiSupervisedModel(NSMutableDictionary *,ULDatabase &,std::function<BOOL ()(void)>,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,CLMicroLocationAnchorAppearanceMap const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationFingerprintPool &,boost::uuids::uuid)::$_5 &,std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal> *>(v9, (char *)v35);
      unint64_t v11 = v35 + 224;
      uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationSemiSupervisedAlgorithm::learnSelfTrainingSemiSupervisedModel(NSMutableDictionary *,ULDatabase &,std::function<BOOL ()(void)>,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,CLMicroLocationAnchorAppearanceMap const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationFingerprintPool &,boost::uuids::uuid)::$_5 &,std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal> *>((_OWORD *)(v35 + 224), a2);
      if (result) {
        break;
      }
      if (!v36) {
        goto LABEL_37;
      }
    }
    a2 = (char *)v35;
    if (!v36) {
      continue;
    }
    return result;
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationSemiSupervisedAlgorithm::learnSelfTrainingSemiSupervisedModel(NSMutableDictionary *,ULDatabase &,std::function<BOOL ()(void)>,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,CLMicroLocationAnchorAppearanceMap const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationFingerprintPool &,boost::uuids::uuid)::$_5 &,std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal> *>(uint64_t result, uint64_t a2, uint64_t a3)
{
  char v5 = (_OWORD *)result;
  double v6 = *(double *)(a2 + 208);
  double v7 = *(double *)(a3 + 208);
  if (v6 <= *(double *)(result + 208))
  {
    if (v7 > v6)
    {
      uint64_t result = std::swap[abi:ne180100]<CLMicroLocationFingerprint>(a2, a3);
      *(_OWORD *)long long v17 = *(_OWORD *)(a2 + 192);
      *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 208);
      long long v11 = *(_OWORD *)(a3 + 204);
      *(_OWORD *)(a2 + 192) = *(_OWORD *)(a3 + 192);
      *(_OWORD *)(a2 + 204) = v11;
      *(_OWORD *)(a3 + 192) = *(_OWORD *)v17;
      *(_OWORD *)(a3 + 204) = *(_OWORD *)&v17[12];
      if (*(double *)(a2 + 208) > *((double *)v5 + 26))
      {
        uint64_t result = std::swap[abi:ne180100]<CLMicroLocationFingerprint>((uint64_t)v5, a2);
        *(_OWORD *)long long v18 = v5[12];
        *(_OWORD *)&v18[16] = v5[13];
        long long v12 = *(_OWORD *)(a2 + 204);
        v5[12] = *(_OWORD *)(a2 + 192);
        *(_OWORD *)((char *)v5 + 204) = v12;
        *(_OWORD *)(a2 + 192) = *(_OWORD *)v18;
        *(_OWORD *)(a2 + 204) = *(_OWORD *)&v18[12];
      }
    }
  }
  else
  {
    uint64_t v8 = (_OWORD *)(result + 192);
    if (v7 <= v6)
    {
      uint64_t result = std::swap[abi:ne180100]<CLMicroLocationFingerprint>(result, a2);
      *(_OWORD *)long long v19 = *v8;
      long long v13 = *v8;
      *(_OWORD *)&v19[16] = v5[13];
      long long v14 = *(_OWORD *)(a2 + 204);
      _OWORD *v8 = *(_OWORD *)(a2 + 192);
      *(_OWORD *)((char *)v5 + 204) = v14;
      *(_OWORD *)(a2 + 192) = v13;
      *(_OWORD *)(a2 + 204) = *(_OWORD *)&v19[12];
      if (*(double *)(a3 + 208) <= *(double *)(a2 + 208)) {
        return result;
      }
      uint64_t result = std::swap[abi:ne180100]<CLMicroLocationFingerprint>(a2, a3);
      long long v9 = *(_OWORD *)(a2 + 192);
      *(_DWORD *)&v16[12] = HIDWORD(v9);
      *(_OWORD *)&v16[16] = *(_OWORD *)(a2 + 208);
      long long v15 = *(_OWORD *)(a3 + 204);
      *(_OWORD *)(a2 + 192) = *(_OWORD *)(a3 + 192);
      *(_OWORD *)(a2 + 204) = v15;
    }
    else
    {
      uint64_t result = std::swap[abi:ne180100]<CLMicroLocationFingerprint>(result, a3);
      long long v9 = *v8;
      *(_OWORD *)double v16 = *v8;
      *(_OWORD *)&v16[16] = v5[13];
      long long v10 = *(_OWORD *)(a3 + 204);
      _OWORD *v8 = *(_OWORD *)(a3 + 192);
      *(_OWORD *)((char *)v5 + 204) = v10;
    }
    *(_OWORD *)(a3 + 192) = v9;
    *(_OWORD *)(a3 + 204) = *(_OWORD *)&v16[12];
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationSemiSupervisedAlgorithm::learnSelfTrainingSemiSupervisedModel(NSMutableDictionary *,ULDatabase &,std::function<BOOL ()(void)>,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,CLMicroLocationAnchorAppearanceMap const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationFingerprintPool &,boost::uuids::uuid)::$_5 &,std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal> *>(_OWORD *a1, char *a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v4 = (a2 - (char *)a1) >> 5;
  BOOL result = 1;
  switch(0x6DB6DB6DB6DB6DB7 * v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*((double *)a2 - 2) > *((double *)a1 + 26))
      {
        std::swap[abi:ne180100]<CLMicroLocationFingerprint>((uint64_t)a1, (uint64_t)(a2 - 224));
        long long v6 = a1[13];
        *(_OWORD *)double v25 = a1[12];
        long long v7 = *(_OWORD *)v25;
        *(_OWORD *)&v25[16] = v6;
        long long v8 = *(_OWORD *)(a2 - 20);
        a1[12] = *((_OWORD *)a2 - 2);
        *(_OWORD *)((char *)a1 + 204) = v8;
        *((_OWORD *)a2 - 2) = v7;
        *(_OWORD *)(a2 - 20) = *(_OWORD *)&v25[12];
        return 1;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationSemiSupervisedAlgorithm::learnSelfTrainingSemiSupervisedModel(NSMutableDictionary *,ULDatabase &,std::function<BOOL ()(void)>,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,CLMicroLocationAnchorAppearanceMap const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationFingerprintPool &,boost::uuids::uuid)::$_5 &,std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal> *>((uint64_t)a1, (uint64_t)(a1 + 14), (uint64_t)(a2 - 224));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationSemiSupervisedAlgorithm::learnSelfTrainingSemiSupervisedModel(NSMutableDictionary *,ULDatabase &,std::function<BOOL ()(void)>,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,CLMicroLocationAnchorAppearanceMap const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationFingerprintPool &,boost::uuids::uuid)::$_5 &,std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal> *>(a1, a1 + 14, a1 + 28, (uint64_t)(a2 - 224));
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationSemiSupervisedAlgorithm::learnSelfTrainingSemiSupervisedModel(NSMutableDictionary *,ULDatabase &,std::function<BOOL ()(void)>,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,CLMicroLocationAnchorAppearanceMap const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationFingerprintPool &,boost::uuids::uuid)::$_5 &,std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal> *>(a1, a1 + 14, a1 + 28, (uint64_t)(a1 + 42));
      if (*((double *)a2 - 2) > *((double *)a1 + 110))
      {
        std::swap[abi:ne180100]<CLMicroLocationFingerprint>((uint64_t)(a1 + 42), (uint64_t)(a2 - 224));
        long long v16 = a1[55];
        *(_OWORD *)double v25 = a1[54];
        long long v17 = *(_OWORD *)v25;
        *(_OWORD *)&v25[16] = v16;
        long long v18 = *(_OWORD *)(a2 - 20);
        a1[54] = *((_OWORD *)a2 - 2);
        *(_OWORD *)((char *)a1 + 876) = v18;
        *((_OWORD *)a2 - 2) = v17;
        *(_OWORD *)(a2 - 20) = *(_OWORD *)&v25[12];
        if (*((double *)a1 + 110) > *((double *)a1 + 82))
        {
          std::swap[abi:ne180100]<CLMicroLocationFingerprint>((uint64_t)(a1 + 28), (uint64_t)(a1 + 42));
          long long v19 = a1[41];
          *(_OWORD *)double v25 = a1[40];
          long long v20 = *(_OWORD *)v25;
          *(_OWORD *)&v25[16] = v19;
          a1[40] = a1[54];
          *(_OWORD *)((char *)a1 + 652) = *(_OWORD *)((char *)a1 + 876);
          a1[54] = v20;
          *(_OWORD *)((char *)a1 + 876) = *(_OWORD *)&v25[12];
          if (*((double *)a1 + 82) > *((double *)a1 + 54))
          {
            std::swap[abi:ne180100]<CLMicroLocationFingerprint>((uint64_t)(a1 + 14), (uint64_t)(a1 + 28));
            long long v21 = a1[27];
            *(_OWORD *)double v25 = a1[26];
            long long v22 = *(_OWORD *)v25;
            *(_OWORD *)&v25[16] = v21;
            a1[26] = a1[40];
            *(_OWORD *)((char *)a1 + 428) = *(_OWORD *)((char *)a1 + 652);
            a1[40] = v22;
            *(_OWORD *)((char *)a1 + 652) = *(_OWORD *)&v25[12];
            if (*((double *)a1 + 54) > *((double *)a1 + 26))
            {
              std::swap[abi:ne180100]<CLMicroLocationFingerprint>((uint64_t)a1, (uint64_t)(a1 + 14));
              long long v23 = a1[13];
              *(_OWORD *)double v25 = a1[12];
              long long v24 = *(_OWORD *)v25;
              *(_OWORD *)&v25[16] = v23;
              a1[12] = a1[26];
              *(_OWORD *)((char *)a1 + 204) = *(_OWORD *)((char *)a1 + 428);
              a1[26] = v24;
              *(_OWORD *)((char *)a1 + 428) = *(_OWORD *)&v25[12];
            }
          }
        }
      }
      return 1;
    default:
      long long v9 = (double *)(a1 + 28);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationSemiSupervisedAlgorithm::learnSelfTrainingSemiSupervisedModel(NSMutableDictionary *,ULDatabase &,std::function<BOOL ()(void)>,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,CLMicroLocationAnchorAppearanceMap const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationFingerprintPool &,boost::uuids::uuid)::$_5 &,std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal> *>((uint64_t)a1, (uint64_t)(a1 + 14), (uint64_t)(a1 + 28));
      uint64_t v10 = (uint64_t)(a1 + 42);
      if (a1 + 42 == (_OWORD *)a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if (*(double *)(v10 + 208) > v9[26])
    {
      std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::pair[abi:ne180100]((uint64_t)v25, v10);
      uint64_t v13 = v11;
      while (1)
      {
        std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::operator=[abi:ne180100]((uint64_t)a1 + v13 + 672, (uint64_t)a1 + v13 + 448);
        if (v13 == -448) {
          break;
        }
        double v14 = *(double *)((char *)a1 + v13 + 432);
        v13 -= 224;
        if (v30 <= v14)
        {
          uint64_t v15 = (uint64_t)a1 + v13 + 672;
          goto LABEL_12;
        }
      }
      uint64_t v15 = (uint64_t)a1;
LABEL_12:
      std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::operator=[abi:ne180100](v15, (uint64_t)v25);
      if (__p)
      {
        unint64_t v29 = __p;
        operator delete(__p);
      }
      ++v12;
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&v27);
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&v26);
      std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table((uint64_t)v25);
      if (v12 == 8) {
        return v10 + 224 == (void)a2;
      }
    }
    long long v9 = (double *)v10;
    v11 += 224;
    v10 += 224;
    if ((char *)v10 == a2) {
      return 1;
    }
  }
}

uint64_t std::swap[abi:ne180100]<CLMicroLocationFingerprint>(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__hash_table((uint64_t)v8, (uint64_t *)a1);
  long long v9 = *(_OWORD *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 56);
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__hash_table((uint64_t)v11, (uint64_t *)(a1 + 64));
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__hash_table((uint64_t)v12, (uint64_t *)(a1 + 104));
  long long v13 = *(_OWORD *)(a1 + 144);
  int v14 = *(_DWORD *)(a1 + 160);
  long long v15 = *(_OWORD *)(a1 + 168);
  uint64_t v16 = *(void *)(a1 + 184);
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__move_assign(a1, (uint64_t *)a2);
  long long v4 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v4;
  std::__hash_table<CLMicroLocationProto::DataType,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,std::allocator<CLMicroLocationProto::DataType>>::__move_assign(a1 + 64, (uint64_t *)(a2 + 64));
  std::__hash_table<CLMicroLocationProto::DataType,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,std::allocator<CLMicroLocationProto::DataType>>::__move_assign(a1 + 104, (uint64_t *)(a2 + 104));
  long long v5 = *(_OWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v5;
  std::vector<CLMicroLocationResultInternal>::__move_assign(a1 + 168, (__n128 *)(a2 + 168));
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__move_assign(a2, v8);
  *(_OWORD *)(a2 + 40) = v9;
  *(void *)(a2 + 56) = v10;
  std::__hash_table<CLMicroLocationProto::DataType,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,std::allocator<CLMicroLocationProto::DataType>>::__move_assign(a2 + 64, v11);
  std::__hash_table<CLMicroLocationProto::DataType,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,std::allocator<CLMicroLocationProto::DataType>>::__move_assign(a2 + 104, v12);
  *(_OWORD *)(a2 + 144) = v13;
  *(_DWORD *)(a2 + 160) = v14;
  long long v6 = *(void **)(a2 + 168);
  if (v6)
  {
    *(void *)(a2 + 176) = v6;
    operator delete(v6);
  }
  *(_OWORD *)(a2 + 168) = v15;
  *(void *)(a2 + 184) = v16;
  uint64_t v16 = 0;
  long long v15 = 0uLL;
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v12);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v11);
  return std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table((uint64_t)v8);
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationSemiSupervisedAlgorithm::learnSelfTrainingSemiSupervisedModel(NSMutableDictionary *,ULDatabase &,std::function<BOOL ()(void)>,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,CLMicroLocationAnchorAppearanceMap const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationFingerprintPool &,boost::uuids::uuid)::$_5 &,std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal> *>(_OWORD *a1, _OWORD *a2, _OWORD *a3, uint64_t a4)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationSemiSupervisedAlgorithm::learnSelfTrainingSemiSupervisedModel(NSMutableDictionary *,ULDatabase &,std::function<BOOL ()(void)>,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,CLMicroLocationAnchorAppearanceMap const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationFingerprintPool &,boost::uuids::uuid)::$_5 &,std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal> *>((uint64_t)a1, (uint64_t)a2, (uint64_t)a3);
  if (*(double *)(a4 + 208) > *((double *)a3 + 26))
  {
    uint64_t result = std::swap[abi:ne180100]<CLMicroLocationFingerprint>((uint64_t)a3, a4);
    *(_OWORD *)int v12 = a3[12];
    *(_OWORD *)&v12[16] = a3[13];
    long long v9 = *(_OWORD *)(a4 + 204);
    a3[12] = *(_OWORD *)(a4 + 192);
    *(_OWORD *)((char *)a3 + 204) = v9;
    *(_OWORD *)(a4 + 192) = *(_OWORD *)v12;
    *(_OWORD *)(a4 + 204) = *(_OWORD *)&v12[12];
    if (*((double *)a3 + 26) > *((double *)a2 + 26))
    {
      uint64_t result = std::swap[abi:ne180100]<CLMicroLocationFingerprint>((uint64_t)a2, (uint64_t)a3);
      *(_OWORD *)long long v13 = a2[12];
      *(_OWORD *)&uint8_t v13[16] = a2[13];
      long long v10 = *(_OWORD *)((char *)a3 + 204);
      a2[12] = a3[12];
      *(_OWORD *)((char *)a2 + 204) = v10;
      a3[12] = *(_OWORD *)v13;
      *(_OWORD *)((char *)a3 + 204) = *(_OWORD *)&v13[12];
      if (*((double *)a2 + 26) > *((double *)a1 + 26))
      {
        uint64_t result = std::swap[abi:ne180100]<CLMicroLocationFingerprint>((uint64_t)a1, (uint64_t)a2);
        *(_OWORD *)int v14 = a1[12];
        *(_OWORD *)&v14[16] = a1[13];
        long long v11 = *(_OWORD *)((char *)a2 + 204);
        a1[12] = a2[12];
        *(_OWORD *)((char *)a1 + 204) = v11;
        a2[12] = *(_OWORD *)v14;
        *(_OWORD *)((char *)a2 + 204) = *(_OWORD *)&v14[12];
      }
    }
  }
  return result;
}

uint64_t std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::operator=[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__move_assign(a1, (uint64_t *)a2);
  long long v4 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v4;
  std::__hash_table<CLMicroLocationProto::DataType,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,std::allocator<CLMicroLocationProto::DataType>>::__move_assign(a1 + 64, (uint64_t *)(a2 + 64));
  std::__hash_table<CLMicroLocationProto::DataType,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,std::allocator<CLMicroLocationProto::DataType>>::__move_assign(a1 + 104, (uint64_t *)(a2 + 104));
  long long v5 = *(_OWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v5;
  std::vector<CLMicroLocationResultInternal>::__move_assign(a1 + 168, (__n128 *)(a2 + 168));
  long long v6 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 204) = *(_OWORD *)(a2 + 204);
  *(_OWORD *)(a1 + 192) = v6;
  return a1;
}

uint64_t std::__construct_at[abi:ne180100]<CLMicroLocationModelTable::Entry,boost::uuids::uuid,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>,CLMicroLocationProto::Model,std::string const&,boost::uuids::uuid const&,boost::uuids::uuid&,CLMicroLocationModelTable::Entry*>(uint64_t a1, uint64_t *a2, double *a3, uint64_t a4, uint64_t a5, long long *a6, void *a7)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v11 = *a2;
  uint64_t v12 = a2[1];
  double v13 = *a3;
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string __p = *(std::string *)a5;
  }
  char v16 = 1;
  long long v17 = *a6;
  char v18 = 1;
  CLMicroLocationModelTable::Entry::Entry(a1, v11, v12, a4, &__p, &v17, *a7, a7[1], v13);
  if (v16 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_2564A5BC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void *std::__hash_table<std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>(uint64_t a1, void *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  do
    v8 ^= (v8 << 6) + (v8 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v7++);
  while (v7 != 16);
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2 && i[3] == a2[1]) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x30uLL);
  void *i = 0;
  i[1] = v8;
  *((_OWORD *)i + 1) = **a4;
  i[4] = 0;
  i[5] = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  long long v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    void *i = *v22;
LABEL_44:
    void *v22 = i;
    goto LABEL_45;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    long long v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_2564A5E34(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 208;
        std::allocator<CLMicroLocationFingerprint>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unint64_t *CLDistanceMatrixTemplate<CLSymmetricMatrixStorage<float>>::CLDistanceMatrixTemplate<std::vector<CLMicroLocationFingerprint>,std::function<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>>(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  a1[1] = 0;
  long long v6 = a1 + 1;
  a1[2] = 0;
  a1[3] = 0;
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 6);
  *a1 = v7;
  v22[0] = 0;
  std::vector<float>::resize((uint64_t)(a1 + 1), (v7 + v7 * v7) >> 1, v22);
  if (*a1)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *a2;
      std::unordered_set<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::unordered_set((uint64_t)v22, *a2 + 192 * v8);
      uint64_t v10 = v9 + 192 * v8;
      long long v11 = *(_OWORD *)(v10 + 40);
      uint64_t v24 = *(void *)(v10 + 56);
      long long v23 = v11;
      std::unordered_set<CLMicroLocationProto::DataType>::unordered_set((uint64_t)v25, v10 + 64);
      std::unordered_map<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>::unordered_map((uint64_t)v26, v9 + 192 * v8 + 104);
      uint64_t v12 = v9 + 192 * v8;
      long long v13 = *(_OWORD *)(v12 + 144);
      int v27 = *(_DWORD *)(v12 + 160);
      *(_OWORD *)&v26[40] = v13;
      unint64_t v29 = 0;
      uint64_t v30 = 0;
      std::string __p = 0;
      std::vector<CLMicroLocationProto::ConfidenceReason>::__init_with_size[abi:ne180100]<CLMicroLocationProto::ConfidenceReason*,CLMicroLocationProto::ConfidenceReason*>(&__p, *(const void **)(v12 + 168), *(void *)(v12 + 176), (uint64_t)(*(void *)(v12 + 176) - *(void *)(v12 + 168)) >> 2);
      if (v8)
      {
        uint64_t v14 = 0;
        for (unint64_t i = 0; i != v8; ++i)
        {
          uint64_t v16 = *(void *)(a3 + 24);
          if (!v16) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, _DWORD *, uint64_t))(*(void *)v16 + 48))(v16, v22, *a2 + v14);
          if (v8 <= i) {
            unint64_t v18 = i;
          }
          else {
            unint64_t v18 = v8;
          }
          if (v8 >= i) {
            unint64_t v19 = i;
          }
          else {
            unint64_t v19 = v8;
          }
          float v20 = v17;
          *(float *)(*v6 + 4 * (v19 + ((v18 + v18 * v18) >> 1))) = v20;
          v14 += 192;
        }
      }
      if (__p)
      {
        unint64_t v29 = __p;
        operator delete(__p);
      }
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v26);
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v25);
      std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table((uint64_t)v22);
      ++v8;
    }
    while (v8 < *a1);
  }
  return a1;
}

void sub_2564A60F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *v13;
  if (*v13)
  {
    *(void *)(v14 + 16) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>>::__emplace_back_slow_path<CLMicroLocationFingerprint&,boost::uuids::uuid const&>(uint64_t *a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x13B13B13B13B13BLL) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = 0x4EC4EC4EC4EC4EC5 * ((a1[2] - v4) >> 4);
  if (2 * v10 > v6) {
    unint64_t v6 = 2 * v10;
  }
  if (v10 >= 0x9D89D89D89D89DLL) {
    unint64_t v11 = 0x13B13B13B13B13BLL;
  }
  else {
    unint64_t v11 = v6;
  }
  unint64_t v19 = a1 + 2;
  if (v11) {
    uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>>>(v9, v11);
  }
  else {
    uint64_t v12 = 0;
  }
  float v15 = v12;
  uint64_t v16 = &v12[208 * v5];
  unint64_t v18 = &v12[208 * v11];
  std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>::pair[abi:ne180100]<CLMicroLocationFingerprint&,boost::uuids::uuid const&,0>((uint64_t)v16, a2, a3);
  double v17 = v16 + 208;
  std::vector<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>>::__swap_out_circular_buffer(a1, &v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>>::~__split_buffer(&v15);
  return v13;
}

void sub_2564A6270(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>::pair[abi:ne180100]<CLMicroLocationFingerprint&,boost::uuids::uuid const&,0>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v6 = std::unordered_set<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::unordered_set(a1, a2);
  long long v7 = *(_OWORD *)(a2 + 40);
  *(void *)(v6 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(v6 + 40) = v7;
  std::unordered_set<CLMicroLocationProto::DataType>::unordered_set(v6 + 64, a2 + 64);
  std::unordered_map<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>::unordered_map(a1 + 104, a2 + 104);
  long long v8 = *(_OWORD *)(a2 + 144);
  int v9 = *(_DWORD *)(a2 + 160);
  *(void *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 144) = v8;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  std::vector<CLMicroLocationProto::ConfidenceReason>::__init_with_size[abi:ne180100]<CLMicroLocationProto::ConfidenceReason*,CLMicroLocationProto::ConfidenceReason*>((void *)(a1 + 168), *(const void **)(a2 + 168), *(void *)(a2 + 176), (uint64_t)(*(void *)(a2 + 176) - *(void *)(a2 + 168)) >> 2);
  *(_OWORD *)(a1 + 192) = *a3;
  return a1;
}

void sub_2564A6328(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(v2);
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>>,std::reverse_iterator<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>*>,std::reverse_iterator<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>*>,std::reverse_iterator<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x13B13B13B13B13CLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(208 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>>,std::reverse_iterator<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>*>,std::reverse_iterator<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>*>,std::reverse_iterator<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 208;
      std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>::pair[abi:ne180100](v7 - 208, v9);
      uint64_t v7 = *((void *)&v15 + 1) - 208;
      *((void *)&v15 + 1) -= 208;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>>,std::reverse_iterator<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4 = std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__hash_table(a1, (uint64_t *)a2);
  long long v5 = *(_OWORD *)(a2 + 40);
  *(void *)(v4 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(v4 + 40) = v5;
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__hash_table(v4 + 64, (uint64_t *)(a2 + 64));
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__hash_table(a1 + 104, (uint64_t *)(a2 + 104));
  long long v6 = *(_OWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v6;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>>,std::reverse_iterator<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>>,std::reverse_iterator<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

uint64_t *std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>>,std::reverse_iterator<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>*>>::operator()[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *(void *)(result[2] + 8);
  uint64_t v2 = *(void *)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      uint64_t result = (uint64_t *)std::allocator<CLMicroLocationFingerprint>::destroy[abi:ne180100](v3, v1);
      v1 += 208;
    }
    while (v1 != v2);
  }
  return result;
}

void **std::__split_buffer<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

uint64_t std::__split_buffer<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>>::clear[abi:ne180100](uint64_t result)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v1 = *(void *)(result + 16);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *(void *)(v3 + 32);
      *(void *)(v3 + 16) = v1 - 208;
      uint64_t result = std::allocator<CLMicroLocationFingerprint>::destroy[abi:ne180100](v4, v1 - 208);
      uint64_t v1 = *(void *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

id CLMicroLocationPublishHelper::duetEventsFromLocalizationResultMeasurement(uint64_t a1)
{
  *(void *)&long long v53 = *MEMORY[0x263EF8340];
  if (objc_opt_class())
  {
    id v40 = [MEMORY[0x263EFF980] array];
    __int16 v39 = [MEMORY[0x263EFF910] dateWithTimeIntervalSinceReferenceDate:*(double *)a1];
    std::string::basic_string[abi:ne180100]<0>(&v51, "com.apple.magicalmoments");
    double v43 = 0;
    long long v44 = 0;
    v45[0] = 0;
    v45[1] = &v43;
    char v46 = 0;
    double v43 = (std::string *)operator new(0x18uLL);
    long long v44 = v43;
    v45[0] = v43 + 1;
    long long v44 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v45, &v51, &v53, v43);
    if (v52 < 0) {
      operator delete((void *)v51);
    }
    uint64_t v2 = +[ULDefaultsSingleton shared];
    uint64_t v3 = [v2 defaultsDictionary];

    uint64_t v4 = [NSString stringWithUTF8String:"ULHomeLOIDomainPublishToCoreDuet"];
    long long v5 = [v3 objectForKey:v4];
    if (v5 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
      int v6 = [v5 BOOLValue];
    }
    else {
      int v6 = [MEMORY[0x263EFFA80] BOOLValue];
    }
    int v7 = v6;

    if (v7)
    {
      uint64_t v8 = v44;
      if ((unint64_t)v44 >= v45[0])
      {
        uint64_t v9 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<char const* const&>((uint64_t *)&v43, &CL::kMicroLocationHomeLOIDomain);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(v44, "com.apple.microlocation.homeloi");
        uint64_t v9 = v8 + 1;
      }
      long long v44 = v9;
    }
    uint64_t v10 = *(void **)(a1 + 8);
    unint64_t v41 = (void *)(a1 + 16);
    if (v10 != (void *)(a1 + 16))
    {
      do
      {
        unint64_t v11 = v10 + 4;
        uint64_t v12 = (std::string *)std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>((uint64_t)v43, (uint64_t)v44, (unsigned __int8 **)v10 + 4);
        if (v12 != v44)
        {
          if (v10[8] == v10[7])
          {
            CLMicroLocationPublishHelper::duetEventsFromLocalizationResultMeasurement();

            abort_report_np();
            __break(1u);
          }
          char v13 = [MEMORY[0x263EFF9A0] dictionary];
          uint64_t v14 = v10[7];
          uint64_t v15 = v10[8];
          if (v14 == v15)
          {
            uint64_t v42 = 0;
            double v16 = 0.0;
          }
          else
          {
            uint64_t v42 = 0;
            double v16 = 0.0;
            do
            {
              double v17 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDBytes:v14];
              unint64_t v18 = [NSNumber numberWithDouble:*(double *)(v14 + 16)];
              [v13 setObject:v18 forKey:v17];

              double v19 = *(double *)(v14 + 16);
              if (v19 > v16)
              {
                id v20 = v17;

                uint64_t v42 = v20;
                double v16 = v19;
              }

              v14 += 32;
            }
            while (v14 != v15);
          }
          v49[0] = @"numberOfWifiDevices";
          uint64_t v21 = [NSNumber numberWithUnsignedLong:v10[10]];
          v50[0] = v21;
          v49[1] = @"numberOfBleDevices";
          long long v22 = [NSNumber numberWithUnsignedLong:v10[11]];
          v50[1] = v22;
          long long v49[2] = @"numberOfUwbDevices";
          long long v23 = [NSNumber numberWithUnsignedLong:v10[12]];
          v50[2] = v23;
          uint64_t v24 = [NSDictionary dictionaryWithObjects:v50 forKeys:v49 count:3];

          double v25 = [MEMORY[0x263F350D8] domain];
          v47[0] = v25;
          if (*((char *)v10 + 55) < 0) {
            unint64_t v11 = (void *)*v11;
          }
          uint64_t v26 = [NSString stringWithUTF8String:v11];
          v48[0] = v26;
          int v27 = [MEMORY[0x263F350D8] probabilityVector];
          v47[1] = v27;
          v47[2] = @"_DKMicroLocationNumberOfDevices";
          v48[1] = v13;
          v48[2] = v24;
          unint64_t v28 = [MEMORY[0x263F350D8] microLocationIsStable];
          v47[3] = v28;
          unint64_t v29 = [NSNumber numberWithBool:*((unsigned __int8 *)v10 + 104)];
          v48[3] = v29;
          uint64_t v30 = [NSDictionary dictionaryWithObjects:v48 forKeys:v47 count:4];

          uint64_t v31 = (void *)MEMORY[0x263F35088];
          long long v32 = [MEMORY[0x263F35148] microLocationVisitStream];
          double v33 = [MEMORY[0x263F35160] withUUID:v42];
          double v34 = [v31 eventWithStream:v32 startDate:v39 endDate:v39 value:v33 confidence:v30 metadata:v16];

          [v40 addObject:v34];
        }
        uint64_t v35 = (void *)v10[1];
        if (v35)
        {
          do
          {
            BOOL v36 = v35;
            uint64_t v35 = (void *)*v35;
          }
          while (v35);
        }
        else
        {
          do
          {
            BOOL v36 = (void *)v10[2];
            BOOL v37 = *v36 == (void)v10;
            uint64_t v10 = v36;
          }
          while (!v37);
        }
        uint64_t v10 = v36;
      }
      while (v36 != v41);
    }
    *(void *)&long long v51 = &v43;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
  }
  else
  {
    id v40 = 0;
  }
  return v40;
}

void sub_2564A6BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, char a17)
{
  *(void *)(v17 - 136) = &a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 136));

  _Unwind_Resume(a1);
}

id CLMicroLocationPublishHelper::biomePublicEventsFromLocalizationResultMeasurement(uint64_t a1)
{
  uint64_t v2 = objc_opt_class();
  if (v2)
  {
    uint64_t v2 = [MEMORY[0x263EFF980] array];
    uint64_t v3 = *(void **)(a1 + 8);
    uint64_t v4 = (void *)(a1 + 16);
    if (v3 != v4)
    {
      long long v53 = v4;
      id v54 = v2;
      unint64_t v5 = 0x263F08000uLL;
      while (1)
      {
        int v6 = (uint64_t **)(v3 + 4);
        if (*((char *)v3 + 55) < 0)
        {
          uint64_t v8 = v3[5];
          if (v8 != 24
            || (**v6 == 0x6C7070612E6D6F63 ? (BOOL v9 = (*v6)[1] == 0x61636967616D2E65) : (BOOL v9 = 0),
                v9 ? (BOOL v10 = (*v6)[2] == 0x73746E656D6F6D6CLL) : (BOOL v10 = 0),
                !v10))
          {
            if (v8 != 31) {
              goto LABEL_50;
            }
            int v7 = *v6;
            goto LABEL_18;
          }
        }
        else
        {
          if (*((unsigned char *)v3 + 55) != 24)
          {
            int v7 = v3 + 4;
            if (*((unsigned char *)v3 + 55) != 31) {
              goto LABEL_50;
            }
LABEL_18:
            uint64_t v11 = *v7;
            uint64_t v12 = v7[1];
            uint64_t v13 = v7[2];
            uint64_t v14 = *(uint64_t *)((char *)v7 + 23);
            if (v11 != 0x6C7070612E6D6F63
              || v12 != 0x6C6F7263696D2E65
              || v13 != 0x2E6E6F697461636FLL
              || v14 != 0x696F6C656D6F682ELL)
            {
              goto LABEL_50;
            }
            goto LABEL_38;
          }
          if (*v6 != (uint64_t *)0x6C7070612E6D6F63 || v3[5] != 0x61636967616D2E65 || v3[6] != 0x73746E656D6F6D6CLL) {
            goto LABEL_50;
          }
        }
LABEL_38:
        if (v3[8] == v3[7])
        {
          CLMicroLocationPublishHelper::biomePublicEventsFromLocalizationResultMeasurement();

          id result = (id)abort_report_np();
          __break(1u);
          return result;
        }
        unint64_t v20 = v5;
        uint64_t v21 = [MEMORY[0x263EFF980] array];
        uint64_t v22 = v3[7];
        uint64_t v23 = v3[8];
        if (v22 == v23)
        {
          uint64_t v24 = 0;
          double v27 = 0.0;
        }
        else
        {
          uint64_t v24 = 0;
          double v25 = 0.0;
          do
          {
            uint64_t v26 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDBytes:v22];
            double v27 = *(double *)(v22 + 16);
            id v28 = objc_alloc(MEMORY[0x263F2A1C0]);
            unint64_t v29 = [v26 UUIDString];
            uint64_t v30 = [*(id *)(v20 + 2584) numberWithDouble:v27];
            uint64_t v31 = (void *)[v28 initWithMicroLocationIdentifier:v29 probability:v30];

            [v21 addObject:v31];
            if (v27 <= v25)
            {
              double v27 = v25;
            }
            else
            {
              id v32 = v26;

              uint64_t v24 = v32;
              double v25 = v27;
            }

            v22 += 32;
          }
          while (v22 != v23);
        }
        id v33 = objc_alloc(MEMORY[0x263F2A1B8]);
        unint64_t v5 = v20;
        double v34 = [*(id *)(v20 + 2584) numberWithUnsignedLong:v3[10]];
        uint64_t v35 = [v33 initWithTechnology:@"numberOfWifiDevices" numDevices:v34];

        long long v57 = (void *)v35;
        id v36 = objc_alloc(MEMORY[0x263F2A1B8]);
        BOOL v37 = [*(id *)(v20 + 2584) numberWithUnsignedLong:v3[11]];
        uint64_t v38 = [v36 initWithTechnology:@"numberOfBleDevices" numDevices:v37];

        long long v56 = (void *)v38;
        id v39 = objc_alloc(MEMORY[0x263F2A1B8]);
        id v40 = [*(id *)(v20 + 2584) numberWithUnsignedLong:v3[12]];
        uint64_t v41 = [v39 initWithTechnology:@"numberOfUwbDevices" numDevices:v40];

        long long v55 = (void *)v41;
        uint64_t v42 = objc_msgSend(MEMORY[0x263EFF8C0], "arrayWithObjects:", v35, v38, v41, 0);
        id v43 = objc_alloc(MEMORY[0x263F2A1B0]);
        long long v44 = v3 + 4;
        if (*((char *)v3 + 55) < 0) {
          long long v44 = (void *)v3[4];
        }
        long long v45 = [NSString stringWithUTF8String:v44];
        char v46 = [v24 UUIDString];
        double v47 = [*(id *)(v5 + 2584) numberWithDouble:v27];
        double v48 = [*(id *)(v5 + 2584) numberWithBool:*((unsigned __int8 *)v3 + 104)];
        long long v49 = (void *)[v43 initWithDomain:v45 maxProbabilityMicroLocationIdentifier:v46 maxProbability:v47 probabilityVector:v21 isStable:v48 numDevicesVector:v42];

        [v54 addObject:v49];
        uint64_t v4 = v53;
LABEL_50:
        long long v50 = (void *)v3[1];
        if (v50)
        {
          do
          {
            long long v51 = v50;
            long long v50 = (void *)*v50;
          }
          while (v50);
        }
        else
        {
          do
          {
            long long v51 = (void *)v3[2];
            BOOL v9 = *v51 == (void)v3;
            uint64_t v3 = v51;
          }
          while (!v9);
        }
        uint64_t v3 = v51;
        if (v51 == v4)
        {
          uint64_t v2 = v54;
          break;
        }
      }
    }
  }
  return v2;
}

void sub_2564A729C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

id CLMicroLocationPublishHelper::biomeRestrictedEventsFromLocalizationResultMeasurement(double *a1)
{
  if (objc_opt_class())
  {
    uint64_t v2 = [MEMORY[0x263EFF980] array];
    uint64_t v3 = (void *)v2;
    uint64_t v4 = (double *)*((void *)a1 + 1);
    unint64_t v5 = a1 + 2;
    if (v4 != a1 + 2)
    {
      double v6 = *a1;
      uint64_t v42 = a1 + 2;
      id v43 = (void *)v2;
      do
      {
        int v7 = v4 + 4;
        int v8 = *((char *)v4 + 55);
        if (v8 < 0)
        {
          if (*((void *)v4 + 5) != 38) {
            goto LABEL_27;
          }
          int v7 = (void *)*v7;
        }
        else if (v8 != 38)
        {
          goto LABEL_27;
        }
        if (!memcmp(v7, "com.apple.microlocation.semisupervised", 0x26uLL))
        {
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v48 = 0;
          std::optional<std::string>::value_or[abi:ne180100]<std::string>((uint64_t)(v4 + 14), (uint64_t)__p, &v49);
          if (SHIBYTE(v48) < 0) {
            operator delete(__p[0]);
          }
          if (*((void *)v4 + 8) == *((void *)v4 + 7))
          {
            CLMicroLocationPublishHelper::biomeRestrictedEventsFromLocalizationResultMeasurement();

            id result = (id)abort_report_np();
            __break(1u);
            return result;
          }
          BOOL v9 = [MEMORY[0x263EFF980] array];
          uint64_t v10 = *((void *)v4 + 7);
          uint64_t v11 = *((void *)v4 + 8);
          if (v10 == v11)
          {
            uint64_t v12 = 0;
            double v15 = 0.0;
          }
          else
          {
            uint64_t v12 = 0;
            double v13 = 0.0;
            do
            {
              uint64_t v14 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDBytes:v10];
              double v15 = *(double *)(v10 + 16);
              id v16 = objc_alloc(MEMORY[0x263F2A2F0]);
              uint64_t v17 = [v14 UUIDString];
              unint64_t v18 = [NSNumber numberWithDouble:v15];
              double v19 = (void *)[v16 initWithLabel:v17 probability:v18];

              [v9 addObject:v19];
              if (v15 <= v13)
              {
                double v15 = v13;
              }
              else
              {
                id v20 = v14;

                uint64_t v12 = v20;
                double v13 = v15;
              }

              v10 += 32;
            }
            while (v10 != v11);
          }
          id v21 = objc_alloc(MEMORY[0x263F2A2E8]);
          uint64_t v22 = [NSNumber numberWithUnsignedLong:*((void *)v4 + 10)];
          uint64_t v3 = v43;
          uint64_t v23 = [v21 initWithTechnologyString:@"numberOfWifiDevices" number:v22];

          char v46 = (void *)v23;
          id v24 = objc_alloc(MEMORY[0x263F2A2E8]);
          double v25 = [NSNumber numberWithUnsignedLong:*((void *)v4 + 11)];
          uint64_t v26 = [v24 initWithTechnologyString:@"numberOfBleDevices" number:v25];

          long long v45 = (void *)v26;
          id v27 = objc_alloc(MEMORY[0x263F2A2E8]);
          id v28 = [NSNumber numberWithUnsignedLong:*((void *)v4 + 12)];
          uint64_t v29 = [v27 initWithTechnologyString:@"numberOfUwbDevices" number:v28];

          long long v44 = (void *)v29;
          uint64_t v30 = objc_msgSend(MEMORY[0x263EFF8C0], "arrayWithObjects:", v23, v26, v29, 0);
          id v31 = objc_alloc(MEMORY[0x263F2A2E0]);
          id v32 = [MEMORY[0x263EFF910] dateWithTimeIntervalSinceReferenceDate:v6];
          if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            id v33 = &v49;
          }
          else {
            id v33 = (std::string *)v49.__r_.__value_.__r.__words[0];
          }
          double v34 = [NSString stringWithUTF8String:v33];
          uint64_t v35 = [v12 UUIDString];
          id v36 = [NSNumber numberWithDouble:v15];
          BOOL v37 = (void *)[v31 initWithAbsoluteTimeStamp:v32 clientBundleID:v34 maxProbabilityLabel:v35 maxProbability:v36 probabilityVector:v9 numDevicesVector:v30];

          [v43 addObject:v37];
          if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v49.__r_.__value_.__l.__data_);
          }
          unint64_t v5 = v42;
        }
LABEL_27:
        uint64_t v38 = (double *)*((void *)v4 + 1);
        if (v38)
        {
          do
          {
            id v39 = v38;
            uint64_t v38 = *(double **)v38;
          }
          while (v38);
        }
        else
        {
          do
          {
            id v39 = (double *)*((void *)v4 + 2);
            BOOL v40 = *(void *)v39 == (void)v4;
            uint64_t v4 = v39;
          }
          while (!v40);
        }
        uint64_t v4 = v39;
      }
      while (v39 != v5);
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  return v3;
}

void sub_2564A780C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_85()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<char const* const&>(uint64_t *a1, char **a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    uint64_t v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  __v.__first_ = v10;
  __v.__begin_ = v10 + v4;
  __v.__end_ = __v.__begin_;
  __v.__end_cap_.__value_ = &v10[v9];
  std::string::basic_string[abi:ne180100]<0>(__v.__begin_->__r_.__value_.__r.__words, *a2);
  __v.__end_ = __v.__begin_ + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v11 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v11;
}

void sub_2564A7A74(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void CLMicroLocationRecorder::CLMicroLocationRecorder(CLMicroLocationRecorder *this, ULDatabase *a2)
{
  *(_DWORD *)this = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = a2;
}

void CLMicroLocationRecorder::~CLMicroLocationRecorder(CLMicroLocationRecorder::RecordingTransaction **this)
{
  CLMicroLocationRecorder::stop((CLMicroLocationRecorder *)this);
  uint64_t v2 = (void **)(this + 2);
  std::vector<CLMicroLocationProto::RecordingEvent>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::unique_ptr<CLMicroLocationRecorder::RecordingTransaction>::reset[abi:ne180100](this + 1, 0);
}

CLMicroLocationRecorder::RecordingTransaction *CLMicroLocationRecorder::stop(CLMicroLocationRecorder *this)
{
  long long v4 = *((_OWORD *)this + 1);
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  uint64_t v5 = v2;
  double v6 = (void **)&v4;
  std::vector<CLMicroLocationProto::RecordingEvent>::__destroy_vector::operator()[abi:ne180100](&v6);
  *(_DWORD *)this = 0;
  return std::unique_ptr<CLMicroLocationRecorder::RecordingTransaction>::reset[abi:ne180100]((CLMicroLocationRecorder::RecordingTransaction **)this + 1, 0);
}

void CLMicroLocationRecorder::start(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  int v3 = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v3);
  boost::uuids::random_generator_pure::operator()((uint64_t)&v3);
  cl::chrono::CFAbsoluteTimeClock::now();
  v4[0] = *(_DWORD *)(a2 + 16);
  *(_DWORD *)((char *)v4 + 3) = *(_DWORD *)(a2 + 19);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v3);
  operator new();
}

void sub_2564A7D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  MEMORY[0x25A2A6340](v22, 0x1032C40401C97E5);
  operator delete(v21);
  _Unwind_Resume(a1);
}

CLMicroLocationRecorder::RecordingTransaction *std::unique_ptr<CLMicroLocationRecorder::RecordingTransaction>::reset[abi:ne180100](CLMicroLocationRecorder::RecordingTransaction **a1, CLMicroLocationRecorder::RecordingTransaction *a2)
{
  id result = *a1;
  *a1 = a2;
  if (result)
  {
    CLMicroLocationRecorder::RecordingTransaction::~RecordingTransaction(result);
    JUMPOUT(0x25A2A6340);
  }
  return result;
}

uint64_t *CLMicroLocationRecorder::updateFingerprintMetaInfoOfCurrentRecording(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  id result = *(uint64_t **)(a1 + 8);
  if (result) {
    return (uint64_t *)CLMicroLocationRecorder::RecordingTransaction::updateFingerprintMetaInfoOfCurrentRecording(result, a2, a3);
  }
  return result;
}

uint64_t **CLMicroLocationRecorder::RecordingTransaction::updateFingerprintMetaInfoOfCurrentRecording(uint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  long long v4 = (long long *)a1[11];
  if ((long long *)a1[12] == v4)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_108);
    }
    uint64_t v11 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_25631F000, v11, OS_LOG_TYPE_ERROR, "Error - recording transaction does not have any valid recording events", buf, 2u);
    }
    *(_DWORD *)(a3 + 48) = 1;
    *(_DWORD *)uint64_t buf = 1;
    return std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__emplace_unique_key_args<CLMicroLocationRecordingCompletionMetaInformation::RecordingError,CLMicroLocationRecordingCompletionMetaInformation::RecordingError>((uint64_t **)(a3 + 24), (int *)buf, buf);
  }
  else
  {
    CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)v13, (const CLMicroLocationProto::RecordingEvent *)(v4 + 5));
    LOBYTE(v19) = 1;
    long long v24 = *v4;
    char v25 = 1;
    CLMicroLocationFingerprint::create(a1 + 8, (uint64_t)v13, (uint64_t)&v24, a2, buf);
    if ((_BYTE)v19) {
      CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v13);
    }
    if (v34)
    {
      std::unordered_set<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::unordered_set((uint64_t)v13, (uint64_t)buf);
      long long v15 = v27;
      uint64_t v16 = v28;
      std::unordered_set<CLMicroLocationProto::DataType>::unordered_set((uint64_t)v17, (uint64_t)&v29);
      std::unordered_map<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>::unordered_map((uint64_t)v18, (uint64_t)v30);
      long long v19 = *(_OWORD *)&v30[40];
      int v20 = v31;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      std::string __p = 0;
      std::vector<CLMicroLocationProto::ConfidenceReason>::__init_with_size[abi:ne180100]<CLMicroLocationProto::ConfidenceReason*,CLMicroLocationProto::ConfidenceReason*>(&__p, v32, v33, (v33 - (uint64_t)v32) >> 2);
      uint64_t v7 = v14;
      if (v14)
      {
        uint64_t v8 = 0;
        unint64_t v9 = v14;
        do
        {
          if (*((_DWORD *)v9 + 6) == 1) {
            ++v8;
          }
          unint64_t v9 = (uint64_t *)*v9;
        }
        while (v9);
        uint64_t v10 = v14;
        do
        {
          if (*((_DWORD *)v10 + 6) == 5) {
            unint64_t v9 = (uint64_t *)((char *)v9 + 1);
          }
          uint64_t v10 = (uint64_t *)*v10;
        }
        while (v10);
        do
        {
          if (*((_DWORD *)v7 + 6) == 6) {
            uint64_t v10 = (uint64_t *)((char *)v10 + 1);
          }
          uint64_t v7 = (uint64_t *)*v7;
        }
        while (v7);
      }
      else
      {
        unint64_t v9 = 0;
        uint64_t v8 = 0;
        uint64_t v10 = 0;
      }
      *(void *)a3 = v8;
      *(void *)(a3 + 8) = v9;
      *(void *)(a3 + 16) = v10;
      *(_DWORD *)(a3 + 48) = 0;
      if (__p)
      {
        uint64_t v22 = __p;
        operator delete(__p);
      }
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v18);
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v17);
      std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table((uint64_t)v13);
    }
    else
    {
      *(_DWORD *)(a3 + 48) = 1;
      v13[0] = 1;
      std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__emplace_unique_key_args<CLMicroLocationRecordingCompletionMetaInformation::RecordingError,CLMicroLocationRecordingCompletionMetaInformation::RecordingError>((uint64_t **)(a3 + 24), v13, v13);
    }
    return (uint64_t **)std::__optional_destruct_base<CLMicroLocationFingerprint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
  }
}

void sub_2564A8090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

uint64_t CLMicroLocationRecorder::setIgnoreBleRssiMeasurements(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 8);
  uint64_t v2 = *(void *)(v1 + 88);
  for (uint64_t i = *(void *)(v1 + 96); v2 != i; v2 += 248)
  {
    *(_DWORD *)(v2 + 220) |= 0x2000u;
    *(unsigned char *)(v2 + 157) = 1;
  }
  return this;
}

uint64_t CLMicroLocationRecorder::setIgnoreUwbRangeMeasurements(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 8);
  uint64_t v2 = *(void *)(v1 + 88);
  for (uint64_t i = *(void *)(v1 + 96); v2 != i; v2 += 248)
  {
    *(_DWORD *)(v2 + 220) |= 0x800u;
    *(unsigned char *)(v2 + 156) = 1;
  }
  return this;
}

uint64_t CLMicroLocationRecorder::setConfidenceAndReasons(uint64_t a1, unsigned int a2, int **a3)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v20);
  double v6 = *a3;
  uint64_t v7 = a3[1];
  if (*a3 != v7)
  {
    do
    {
      CLMicroLocationUtils::placeConfidenceReasonToString(*v6, buf);
      if (v27 >= 0) {
        uint64_t v8 = buf;
      }
      else {
        uint64_t v8 = *(uint8_t **)buf;
      }
      if (v27 >= 0) {
        uint64_t v9 = HIBYTE(v27);
      }
      else {
        uint64_t v9 = *(void *)v25;
      }
      uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v8, v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
      if (SHIBYTE(v27) < 0) {
        operator delete(*(void **)buf);
      }
      ++v6;
    }
    while (v6 != v7);
  }
  std::stringbuf::str();
  if (((char)v19 & 0x80000000) == 0)
  {
    if (v19)
    {
      uint64_t v11 = --v19;
      p_p = &__p;
      goto LABEL_16;
    }
LABEL_19:
    double v13 = "";
    goto LABEL_20;
  }
  if (!v18) {
    goto LABEL_19;
  }
  uint64_t v11 = v18 - 1;
  p_p = __p;
  --v18;
LABEL_16:
  p_p[v11] = 0;
  if ((v19 & 0x80u) == 0) {
    double v13 = (const char *)&__p;
  }
  else {
    double v13 = (const char *)__p;
  }
LABEL_20:
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_108);
  }
  uint64_t v14 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)char v25 = 2082;
    *(void *)&void v25[2] = "";
    __int16 v26 = 1026;
    signed int v27 = a2;
    __int16 v28 = 2082;
    uint64_t v29 = v13;
    _os_log_impl(&dword_25631F000, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"recorder setting confidence and reasons\", \"confidence level\":%{public}d, \"confidence reasons\":%{public, location:escape_only}s}", buf, 0x22u);
  }
  CLMicroLocationRecorder::RecordingTransaction::setConfidenceAndReasons(*(void *)(a1 + 8), a2, (uint64_t)a3);
  if ((char)v19 < 0) {
    operator delete(__p);
  }
  v20[0] = *MEMORY[0x263F8C2B8];
  uint64_t v15 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v20 + *(void *)(v20[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v21[0] = v15;
  v21[1] = MEMORY[0x263F8C318] + 16;
  if (v22 < 0) {
    operator delete((void *)v21[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x25A2A6280](&v23);
}

void sub_2564A8490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void CLMicroLocationRecorder::RecordingTransaction::setConfidenceAndReasons(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v22 = a2;
  long long v24 = 0;
  uint64_t v25 = 0;
  uint64_t v23 = 0;
  std::vector<CLMicroLocationProto::ConfidenceReason>::__init_with_size[abi:ne180100]<CLMicroLocationProto::ConfidenceReason*,CLMicroLocationProto::ConfidenceReason*>(&v23, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  uint64_t v4 = *(void *)(a1 + 88);
  uint64_t v5 = *(void *)(a1 + 96);
  unsigned int v14 = v22;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v15 = 0;
  std::vector<CLMicroLocationProto::ConfidenceReason>::__init_with_size[abi:ne180100]<CLMicroLocationProto::ConfidenceReason*,CLMicroLocationProto::ConfidenceReason*>(&v15, v23, (uint64_t)v24, (v24 - (unsigned char *)v23) >> 2);
  if (v4 != v5)
  {
    double v6 = "::CLMicroLocationProto::ConfidenceLevel_IsValid(value)";
    uint64_t v7 = "set_confidencelevel";
    while (CLMicroLocationProto::ConfidenceLevel_IsValid((CLMicroLocationProto *)v14))
    {
      *(_DWORD *)(v4 + 220) |= 0x4000u;
      *(_DWORD *)(v4 + 200) = v14;
      *(_DWORD *)(v4 + 192) = 0;
      uint64_t v8 = (unsigned int *)v15;
      uint64_t v9 = v16;
      if (v15 != v16)
      {
        while (1)
        {
          int v10 = *v8;
          if (!CLMicroLocationProto::ConfidenceReason_IsValid((CLMicroLocationProto *)*v8)) {
            break;
          }
          int v11 = *(_DWORD *)(v4 + 192);
          if (v11 == *(_DWORD *)(v4 + 196))
          {
            wireless_diagnostics::google::protobuf::RepeatedField<int>::Reserve(v4 + 184, v11 + 1);
            int v11 = *(_DWORD *)(v4 + 192);
          }
          uint64_t v12 = *(void *)(v4 + 184);
          *(_DWORD *)(v4 + 192) = v11 + 1;
          *(_DWORD *)(v12 + 4 * v11) = v10;
          if (++v8 == v9) {
            goto LABEL_9;
          }
        }
        int v13 = 20721;
        uint64_t v7 = "add_confidencereasons";
        double v6 = "::CLMicroLocationProto::ConfidenceReason_IsValid(value)";
LABEL_18:
        __assert_rtn(v7, "microlocation.pb.h", v13, v6);
      }
LABEL_9:
      v4 += 248;
      if (v4 == v5) {
        goto LABEL_10;
      }
    }
    int v13 = 20701;
    goto LABEL_18;
  }
LABEL_10:
  unsigned int v18 = v14;
  int v20 = 0;
  uint64_t v21 = 0;
  std::string __p = 0;
  std::vector<CLMicroLocationProto::ConfidenceReason>::__init_with_size[abi:ne180100]<CLMicroLocationProto::ConfidenceReason*,CLMicroLocationProto::ConfidenceReason*>(&__p, v15, (uint64_t)v16, ((char *)v16 - (unsigned char *)v15) >> 2);
  if (__p)
  {
    int v20 = __p;
    operator delete(__p);
  }
  if (v15)
  {
    uint64_t v16 = (unsigned int *)v15;
    operator delete(v15);
  }
  if (v23)
  {
    long long v24 = v23;
    operator delete(v23);
  }
}

void sub_2564A86FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationRecorder::ScanMetadata::ScanMetadata(uint64_t a1, uint64_t a2)
{
  *(CFAbsoluteTime *)a1 = cl::chrono::CFAbsoluteTimeClock::now();
  *(void *)(a1 + 8) = mach_continuous_time();
  if ((a2 & 0xFF00000000) != 0) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  *(_DWORD *)(a1 + 16) = v4;
  return a1;
}

void CLMicroLocationRecorder::RecordingTransaction::~RecordingTransaction(CLMicroLocationRecorder::RecordingTransaction *this)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (onceToken_MicroLocationQE_Default != -1) {
    dispatch_once(&onceToken_MicroLocationQE_Default, &__block_literal_global_400);
  }
  uint64_t v2 = (id)logObject_MicroLocationQE_Default;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = (char *)operator new(0x28uLL);
    *(void *)(v3 + 29) = 0;
    *(_OWORD *)int v3 = 0u;
    *((_OWORD *)v3 + 1) = 0u;
    boost::uuids::to_chars<char *>((uint64_t)this, v3);
    unint64_t v4 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 3);
    unint64_t v5 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 3);
    uint64_t v9 = 68289794;
    __int16 v10 = 2082;
    int v11 = "";
    __int16 v12 = 2082;
    int v13 = v3;
    __int16 v14 = 2050;
    unint64_t v15 = v4;
    __int16 v16 = 2050;
    unint64_t v17 = v5;
    _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationRecorder: commiting recording transaction\", \"Recording UUID\":%{public, location:escape_only}s, \"Num records\":%{public}lu, \"Num measurements\":%{public}lu}", (uint8_t *)&v9, 0x30u);
    operator delete(v3);
  }

  id v6 = *(id *)(*((void *)this + 17) + 88);
  [v6 insertEntries:(char *)this + 88];

  id v7 = *(id *)(*((void *)this + 17) + 64);
  [v7 insertEntries:(char *)this + 64];

  id v8 = *(id *)(*((void *)this + 17) + 40);
  [v8 insertEntries:(char *)this + 112];

  uint64_t v9 = (uint64_t)this + 112;
  std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
  uint64_t v9 = (uint64_t)this + 88;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
  uint64_t v9 = (uint64_t)this + 64;
  std::vector<CLMicroLocationMeasurementTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
}

void sub_2564A8988(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    operator delete(v2);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationRecorder::RecordingTransaction::addMeasurementBatch(uint64_t result, double *a2, CLMicroLocationProto::Measurement **a3)
{
  int v3 = *a3;
  unint64_t v4 = a3[1];
  if (*a3 != v4)
  {
    id v6 = (uint64_t *)result;
    id v7 = (uint64_t *)(result + 64);
    id v8 = (uint64_t *)(a2 + 1);
    unint64_t v9 = *(void *)(result + 72);
    do
    {
      unsigned int v10 = *((_DWORD *)v3 + 20);
      if (v9 >= v6[10])
      {
        id result = std::vector<CLMicroLocationMeasurementTable::Entry>::__emplace_back_slow_path<boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> const&,unsigned long long const&,CLMicroLocationProto::Measurement const&,CLMicroLocationMeasurementTable::EntryFlags>(v7, v6, a2, v8, v3, &v10);
        unint64_t v9 = result;
      }
      else
      {
        id result = std::vector<CLMicroLocationMeasurementTable::Entry>::__construct_one_at_end[abi:ne180100]<boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> const&,unsigned long long const&,CLMicroLocationProto::Measurement const&,CLMicroLocationMeasurementTable::EntryFlags>((uint64_t)v7, v6, a2, v8, v3, &v10);
        v9 += 120;
      }
      v6[9] = v9;
      int v3 = (CLMicroLocationProto::Measurement *)((char *)v3 + 88);
    }
    while (v3 != v4);
  }
  return result;
}

void CLMicroLocationRecorder::RecordingTransaction::addRecordingEvent(CLMicroLocationRecorder::RecordingTransaction *this, const CLMicroLocationProto::RecordingEvent *a2)
{
  int v3 = this;
  uint64_t v42 = *MEMORY[0x263EF8340];
  LOBYTE(v40) = 0;
  char v41 = 0;
  memset(&v30, 0, sizeof(v30));
  LOBYTE(v38) = 0;
  char v39 = 0;
  int v4 = *((_DWORD *)a2 + 18);
  if (v4 != 13) {
    goto LABEL_7;
  }
  if ((*((unsigned char *)a2 + 141) & 4) == 0) {
    goto LABEL_40;
  }
  uint64_t v5 = *((void *)a2 + 11);
  if (!v5)
  {
    this = (CLMicroLocationRecorder::RecordingTransaction *)CLMicroLocationProto::RecordingEvent::default_instance(this);
    uint64_t v5 = *((void *)this + 11);
  }
  if ((*(unsigned char *)(v5 + 44) & 8) == 0)
  {
    int v4 = *((_DWORD *)a2 + 18);
LABEL_7:
    if (v4 == 1 && (*((unsigned char *)a2 + 140) & 4) != 0)
    {
      uint64_t v6 = *((void *)a2 + 2);
      if (!v6)
      {
        this = (CLMicroLocationRecorder::RecordingTransaction *)CLMicroLocationProto::RecordingEvent::default_instance(this);
        uint64_t v6 = *((void *)this + 2);
      }
      if ((*(unsigned char *)(v6 + 44) & 8) != 0)
      {
        uint64_t v7 = *((void *)a2 + 2);
        if (!v7) {
          uint64_t v7 = *(void *)(CLMicroLocationProto::RecordingEvent::default_instance(this) + 16);
        }
        id v8 = (CLMicroLocationProto::RecordingEvent *)CLMicroLocationProtobufHelper::uuidFromProtobuf(*(uint64_t ***)(v7 + 24), buf);
        long long v40 = *(_OWORD *)buf;
        char v41 = buf[16];
        uint64_t v9 = *((void *)a2 + 2);
        uint64_t v10 = v9;
        if (!v9)
        {
          id v8 = (CLMicroLocationProto::RecordingEvent *)CLMicroLocationProto::RecordingEvent::default_instance(v8);
          uint64_t v10 = *((void *)v8 + 2);
          uint64_t v9 = *((void *)a2 + 2);
        }
        if ((*(unsigned char *)(v10 + 44) & 4) != 0)
        {
          if (!v9) {
            uint64_t v9 = *(void *)(CLMicroLocationProto::RecordingEvent::default_instance(v8) + 16);
          }
          id v8 = (CLMicroLocationProto::RecordingEvent *)std::string::operator=(&v30, *(const std::string **)(v9 + 16));
          uint64_t v9 = *((void *)a2 + 2);
        }
        if (!v9)
        {
          id v8 = (CLMicroLocationProto::RecordingEvent *)CLMicroLocationProto::RecordingEvent::default_instance(v8);
          uint64_t v9 = *((void *)v8 + 2);
        }
        if ((*(unsigned char *)(v9 + 44) & 0x10) != 0)
        {
          uint64_t v11 = *((void *)a2 + 2);
          if (!v11) {
            uint64_t v11 = *(void *)(CLMicroLocationProto::RecordingEvent::default_instance(v8) + 16);
          }
LABEL_39:
          CLMicroLocationProtobufHelper::uuidFromProtobuf(*(uint64_t ***)(v11 + 32), buf);
          long long v38 = *(_OWORD *)buf;
          char v39 = buf[16];
          goto LABEL_40;
        }
      }
    }
    goto LABEL_40;
  }
  uint64_t v12 = *((void *)a2 + 11);
  if (!v12) {
    uint64_t v12 = *(void *)(CLMicroLocationProto::RecordingEvent::default_instance(this) + 88);
  }
  int v13 = (CLMicroLocationProto::RecordingEvent *)CLMicroLocationProtobufHelper::uuidFromProtobuf(*(uint64_t ***)(v12 + 24), buf);
  long long v40 = *(_OWORD *)buf;
  char v41 = buf[16];
  uint64_t v14 = *((void *)a2 + 11);
  uint64_t v15 = v14;
  if (!v14)
  {
    int v13 = (CLMicroLocationProto::RecordingEvent *)CLMicroLocationProto::RecordingEvent::default_instance(v13);
    uint64_t v15 = *((void *)v13 + 11);
    uint64_t v14 = *((void *)a2 + 11);
  }
  if ((*(unsigned char *)(v15 + 44) & 4) != 0)
  {
    if (!v14) {
      uint64_t v14 = *(void *)(CLMicroLocationProto::RecordingEvent::default_instance(v13) + 88);
    }
    int v13 = (CLMicroLocationProto::RecordingEvent *)std::string::operator=(&v30, *(const std::string **)(v14 + 16));
    uint64_t v14 = *((void *)a2 + 11);
  }
  if (!v14)
  {
    int v13 = (CLMicroLocationProto::RecordingEvent *)CLMicroLocationProto::RecordingEvent::default_instance(v13);
    uint64_t v14 = *((void *)v13 + 11);
  }
  if ((*(unsigned char *)(v14 + 44) & 0x10) != 0)
  {
    uint64_t v11 = *((void *)a2 + 11);
    if (!v11) {
      uint64_t v11 = *(void *)(CLMicroLocationProto::RecordingEvent::default_instance(v13) + 88);
    }
    goto LABEL_39;
  }
LABEL_40:
  if (v39 && v41)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_108);
    }
    __int16 v16 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v17 = operator new(0x28uLL);
      __int16 v28 = v17;
      long long v29 = xmmword_256514540;
      *unint64_t v17 = 0u;
      v17[1] = 0u;
      *(void *)((char *)v17 + 29) = 0;
      boost::uuids::to_chars<char *>((uint64_t)v3, v17);
      if (v29 >= 0) {
        uint64_t v18 = &v28;
      }
      else {
        uint64_t v18 = v28;
      }
      if (!v41) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      unsigned __int8 v19 = operator new(0x28uLL);
      std::string __p = v19;
      long long v27 = xmmword_256514540;
      _OWORD *v19 = 0u;
      v19[1] = 0u;
      *(void *)((char *)v19 + 29) = 0;
      boost::uuids::to_chars<char *>((uint64_t)&v40, v19);
      if (v27 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      if (!v39) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      uint64_t v21 = (char *)operator new(0x28uLL);
      *(void *)(v21 + 29) = 0;
      *(_OWORD *)uint64_t v21 = 0u;
      *((_OWORD *)v21 + 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)&v38, v21);
      *(_DWORD *)uint64_t buf = 68289794;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      __int16 v32 = 2082;
      uint64_t v33 = v18;
      __int16 v34 = 2082;
      uint64_t v35 = p_p;
      __int16 v36 = 2082;
      BOOL v37 = v21;
      _os_log_impl(&dword_25631F000, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationRecorder: adding label for recording event\", \"Recording UUID\":%{public, location:escape_only}s, \"Trigger UUID\":%{public, location:escape_only}s, \"Label UUID\":%{public, location:escape_only}s}", buf, 0x30u);
      operator delete(v21);
      if (SHIBYTE(v27) < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v29) < 0) {
        operator delete(v28);
      }
    }

    *(void *)uint64_t buf = *((void *)a2 + 1);
    unint64_t v22 = *((void *)v3 + 15);
    if (v22 >= *((void *)v3 + 16))
    {
      uint64_t v23 = std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__emplace_back_slow_path<boost::uuids::uuid &,std::string &,boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>>((uint64_t *)v3 + 14, (uint64_t *)&v40, (uint64_t)&v30, (uint64_t *)&v38, (double *)buf);
    }
    else
    {
      std::allocator<CLMicroLocationRecordingLabelsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingLabelsTable::Entry,boost::uuids::uuid &,std::string &,boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>>((uint64_t)v3 + 128, *((void *)v3 + 15), (uint64_t *)&v40, (uint64_t)&v30, (uint64_t *)&v38, (double *)buf);
      uint64_t v23 = v22 + 64;
      *((void *)v3 + 15) = v22 + 64;
    }
    *((void *)v3 + 15) = v23;
  }
  unint64_t v24 = *((void *)v3 + 12);
  if (v24 >= *((void *)v3 + 13))
  {
    uint64_t v25 = std::vector<CLMicroLocationRecordingEventsTable::Entry>::__emplace_back_slow_path<boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,std::string &,CLMicroLocationProto::RecordingEvent const&,std::optional<boost::uuids::uuid> &,boost::uuids::uuid &>((uint64_t *)v3 + 11, (uint64_t *)v3, (double *)v3 + 2, (uint64_t)v3 + 24, (uint64_t)a2, &v40, (void *)v3 + 6);
  }
  else
  {
    std::allocator<CLMicroLocationRecordingEventsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry,boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,std::string &,CLMicroLocationProto::RecordingEvent const&,std::optional<boost::uuids::uuid> &,boost::uuids::uuid &>((uint64_t)v3 + 104, *((void *)v3 + 12), (uint64_t *)v3, (double *)v3 + 2, (uint64_t)v3 + 24, (uint64_t)a2, &v40, (void *)v3 + 6);
    uint64_t v25 = v24 + 248;
    *((void *)v3 + 12) = v24 + 248;
  }
  *((void *)v3 + 12) = v25;
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
}

void sub_2564A8F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationRecorder::RecordingTransaction::addRecordingLabel(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, double a5)
{
  double v10 = a5;
  unint64_t v7 = a1[16];
  uint64_t v6 = (uint64_t)(a1 + 16);
  unint64_t v8 = *(void *)(v6 - 8);
  if (v8 >= v7)
  {
    uint64_t result = std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__emplace_back_slow_path<boost::uuids::uuid const&,std::string const&,boost::uuids::uuid const&,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &>(a1 + 14, a2, a3, a4, &v10);
  }
  else
  {
    std::allocator<CLMicroLocationRecordingLabelsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingLabelsTable::Entry,boost::uuids::uuid const&,std::string const&,boost::uuids::uuid const&,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &>(v6, *(void *)(v6 - 8), a2, a3, a4, &v10);
    uint64_t result = v8 + 64;
    a1[15] = v8 + 64;
  }
  a1[15] = result;
  return result;
}

void sub_2564A9044(_Unwind_Exception *a1)
{
  *(void *)(v1 + 120) = v2;
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationRecorder::recordMeasurementBatch(uint64_t a1, long long *a2, CLMicroLocationProto::Measurement **a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    long long v7 = *a2;
    uint64_t v8 = *((void *)a2 + 2);
    return CLMicroLocationRecorder::RecordingTransaction::addMeasurementBatch(v3, (double *)&v7, a3);
  }
  else
  {
    uint64_t v5 = (CLMicroLocationRecorder *)CLMicroLocationRecorder::recordMeasurementBatch();
    return CLMicroLocationRecorder::recordEvent(v5, v6);
  }
}

void CLMicroLocationRecorder::recordEvent(CLMicroLocationRecorder *this, const CLMicroLocationProto::RecordingEvent *a2)
{
  uint64_t v3 = (CLMicroLocationRecorder::RecordingTransaction *)*((void *)this + 1);
  if (v3)
  {
    CLMicroLocationRecorder::RecordingTransaction::addRecordingEvent(v3, a2);
    int v4 = (const CLMicroLocationProto::RecordingEvent *)*((void *)this + 2);
    uint64_t v5 = (const CLMicroLocationProto::RecordingEvent *)*((void *)this + 3);
    if (v4 == v5)
    {
      int64x2_t v6 = vdupq_n_s64((unint64_t)v4);
    }
    else
    {
      do
      {
        CLMicroLocationRecorder::RecordingTransaction::addRecordingEvent(*((CLMicroLocationRecorder::RecordingTransaction **)this + 1), v4);
        int v4 = (const CLMicroLocationProto::RecordingEvent *)((char *)v4 + 144);
      }
      while (v4 != v5);
      int64x2_t v6 = *((int64x2_t *)this + 1);
    }
    int64x2_t v9 = v6;
    *((void *)this + 2) = 0;
    *((void *)this + 3) = 0;
    uint64_t v7 = *((void *)this + 4);
    *((void *)this + 4) = 0;
    uint64_t v10 = v7;
    uint64_t v11 = &v9;
    std::vector<CLMicroLocationProto::RecordingEvent>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  }
  else
  {
    uint64_t v8 = (CLMicroLocationRecorder *)CLMicroLocationRecorder::recordEvent();
    CLMicroLocationRecorder::clearPendingRecordsBuff(v8);
  }
}

void CLMicroLocationRecorder::clearPendingRecordsBuff(CLMicroLocationRecorder *this)
{
  long long v1 = *((_OWORD *)this + 1);
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  uint64_t v3 = (void **)&v1;
  std::vector<CLMicroLocationProto::RecordingEvent>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void CLMicroLocationRecorder::addPendingRecordEvent(CLMicroLocationRecorder *this, const CLMicroLocationProto::RecordingEvent *a2)
{
  if (*(_DWORD *)this == 1)
  {
    CLMicroLocationRecorder::recordEvent(this, a2);
  }
  else
  {
    unint64_t v3 = *((void *)this + 3);
    if (v3 >= *((void *)this + 4))
    {
      uint64_t v4 = std::vector<CLMicroLocationProto::RecordingEvent>::__emplace_back_slow_path<CLMicroLocationProto::RecordingEvent const&>((uint64_t *)this + 2, a2);
    }
    else
    {
      CLMicroLocationProto::RecordingEvent::RecordingEvent(*((CLMicroLocationProto::RecordingEvent **)this + 3), a2);
      uint64_t v4 = v3 + 144;
      *((void *)this + 3) = v3 + 144;
    }
    *((void *)this + 3) = v4;
  }
}

void sub_2564A91D8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 24) = v2;
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationRecorder::recordTruthLabel(uint64_t a1, uint64_t a2, void *a3, CLMicroLocationProtobufHelper *a4)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v7 = a3;
  CLMicroLocationProtobufHelper::boostUuidFromNSUUID(a4, (uint64_t)v34);
  CLMicroLocationProtobufHelper::boostUuidFromNSUUID(v7, (uint64_t)v32);
  if (v35 && v33)
  {
    if (*(_DWORD *)a1 == 1)
    {
      uint64_t v8 = *(uint64_t **)(a1 + 8);
      double v9 = cl::chrono::CFAbsoluteTimeClock::now();
      CLMicroLocationRecorder::RecordingTransaction::addRecordingLabel(v8, v32, a2, v34, v9);
      uint64_t v10 = 1;
    }
    else
    {
      uint64_t v15 = v32[0];
      uint64_t v16 = v32[1];
      if (*(char *)(a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string v24 = *(std::string *)a2;
      }
      uint64_t v17 = v34[0];
      uint64_t v18 = v34[1];
      double v19 = cl::chrono::CFAbsoluteTimeClock::now();
      CLMicroLocationRecordingLabelsTable::Entry::Entry((uint64_t)buf, v15, v16, (long long *)&v24, v17, v18, v19);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      long long v27 = *(_OWORD *)buf;
      if (SHIBYTE(buf[4]) < 0) {
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)buf[2], buf[3]);
      }
      else {
        std::string __p = *(std::string *)&buf[2];
      }
      long long v29 = *(_OWORD *)&buf[5];
      uint64_t v30 = buf[7];
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v21 = 0;
      uint64_t v25 = &v21;
      char v26 = 0;
      uint64_t v21 = (char *)operator new(0x40uLL);
      uint64_t v22 = (uint64_t)v21;
      uint64_t v23 = v21 + 64;
      uint64_t v22 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationRecordingLabelsTable::Entry>,CLMicroLocationRecordingLabelsTable::Entry const*,CLMicroLocationRecordingLabelsTable::Entry const*,CLMicroLocationRecordingLabelsTable::Entry*>((uint64_t)&v23, &v27, (long long *)buf, (uint64_t)v21);
      uint64_t v10 = [*(id *)(*(void *)(a1 + 40) + 40) insertEntries:&v21];
      uint64_t v25 = &v21;
      std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(buf[4]) < 0) {
        operator delete((void *)buf[2]);
      }
    }
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_108);
    }
    uint64_t v11 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a2 + 23) >= 0) {
        uint64_t v12 = a2;
      }
      else {
        uint64_t v12 = *(void *)a2;
      }
      buf[0] = 68289282;
      LOWORD(buf[1]) = 2082;
      *(void *)((char *)&buf[1] + 2) = "";
      WORD1(buf[2]) = 2082;
      *(void *)((char *)&buf[2] + 4) = v12;
      _os_log_impl(&dword_25631F000, v11, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLMicroLocationRecorder: received invalid truth label\", \"Client\":%{public, location:escape_only}s}", (uint8_t *)buf, 0x1Cu);
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_108);
    }
    int v13 = logObject_MicroLocation_Default;
    if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
    {
      if (*(char *)(a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = *(void *)a2;
      }
      buf[0] = 68289282;
      LOWORD(buf[1]) = 2082;
      *(void *)((char *)&buf[1] + 2) = "";
      WORD1(buf[2]) = 2082;
      *(void *)((char *)&buf[2] + 4) = v14;
      _os_signpost_emit_with_name_impl(&dword_25631F000, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLMicroLocationRecorder: received invalid truth label", "{\"msg%{public}.0s\":\"CLMicroLocationRecorder: received invalid truth label\", \"Client\":%{public, location:escape_only}s}", (uint8_t *)buf, 0x1Cu);
    }
    uint64_t v10 = 0;
  }

  return v10;
}

void sub_2564A9540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationRecorder::addTriggerEventForFutureLabeling(uint64_t a1, const std::string *a2, uint64_t *a3, uint64_t a4, void *a5)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  double v10 = cl::chrono::CFAbsoluteTimeClock::now();
  CLMicroLocationProto::TruthLabelDonation::TruthLabelDonation((CLMicroLocationProto::TruthLabelDonation *)v21);
  v24 |= 2u;
  uint64_t v11 = (std::string *)MEMORY[0x263F8C740];
  if (v22 == (std::string *)MEMORY[0x263F8C740]) {
    operator new();
  }
  std::string::operator=(v22, a2);
  memset(&__str, 0, sizeof(__str));
  if ((boost::conversion::detail::try_lexical_convert<std::string,boost::uuids::uuid>((uint64_t)a3, &__str) & 1) == 0)
  {
    std::bad_cast::bad_cast((std::bad_cast *)&v35);
    v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_2704DAAD0;
    boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v35);
  }
  v24 |= 4u;
  if (v23 == v11) {
    operator new();
  }
  std::string::operator=(v23, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  CLMicroLocationProtobufHelper::createRecordingEvent<CLMicroLocationProto::TruthLabelDonation>((CLMicroLocationProto::RecordingEvent *)v21, 0, 0, 0, (CLMicroLocationProto *)3, (uint64_t)v20, v10);
  uint64_t v12 = *a3;
  uint64_t v13 = a3[1];
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v19 = *(std::string *)a4;
  }
  long long v33 = *(_OWORD *)a3;
  char v34 = 1;
  CLMicroLocationRecordingEventsTable::Entry::Entry(&v35, v12, v13, &v19, v20, &v33, *a5, a5[1], v10);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  std::string __str = v35;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = __s;
  }
  v29[0] = v37[0];
  *(_OWORD *)((char *)v29 + 12) = *(_OWORD *)((char *)v37 + 12);
  CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)v30, (const CLMicroLocationProto::RecordingEvent *)v38);
  v30[9] = v38[9];
  char v31 = v39;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  uint64_t v25 = (void **)&v16;
  char v26 = 0;
  uint64_t v16 = (char *)operator new(0xF8uLL);
  uint64_t v17 = (uint64_t)v16;
  uint64_t v18 = v16 + 248;
  uint64_t v17 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationRecordingEventsTable::Entry>,CLMicroLocationRecordingEventsTable::Entry const*,CLMicroLocationRecordingEventsTable::Entry const*,CLMicroLocationRecordingEventsTable::Entry*>((uint64_t)&v18, (long long *)&__str, (long long *)&v32, (uint64_t)v16);
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v30);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v14 = [*(id *)(*(void *)(a1 + 40) + 88) insertEntries:&v16];
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v38);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v20);
  CLMicroLocationProto::TruthLabelDonation::~TruthLabelDonation((CLMicroLocationProto::TruthLabelDonation *)v21);
  return v14;
}

void sub_2564A9924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void CLMicroLocationProtobufHelper::createRecordingEvent<CLMicroLocationProto::TruthLabelDonation>(CLMicroLocationProto::RecordingEvent *a1@<X0>, CLMicroLocationProto *a2@<X1>, char a3@<W2>, char a4@<W3>, CLMicroLocationProto *a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)a6);
  unsigned int v14 = *((_DWORD *)a1 + 8);
  if (!CLMicroLocationProto::EventType_IsValid((CLMicroLocationProto *)v14))
  {
    uint64_t v17 = "::CLMicroLocationProto::EventType_IsValid(value)";
    int v18 = 20192;
    std::string v19 = "set_eventtype";
    goto LABEL_10;
  }
  int v15 = *(_DWORD *)(a6 + 140);
  *(_DWORD *)(a6 + 72) = v14;
  *(double *)(a6 + 8) = a7;
  *(unsigned char *)(a6 + 77) = a3;
  *(_DWORD *)(a6 + 140) = v15 | 0x2803;
  *(unsigned char *)(a6 + 76) = a4;
  if (!CLMicroLocationProto::ConfidenceLevel_IsValid(a5))
  {
    uint64_t v17 = "::CLMicroLocationProto::ConfidenceLevel_IsValid(value)";
    int v18 = 20701;
    std::string v19 = "set_confidencelevel";
    goto LABEL_10;
  }
  *(_DWORD *)(a6 + 140) |= 0x4000u;
  *(_DWORD *)(a6 + 120) = a5;
  if (((unint64_t)a2 & 0xFF00000000) != 0)
  {
    if (CLMicroLocationProto::MotionState_IsValid(a2))
    {
      *(_DWORD *)(a6 + 140) |= 0x20000u;
      *(_DWORD *)(a6 + 124) = a2;
      goto LABEL_6;
    }
    uint64_t v17 = "::CLMicroLocationProto::MotionState_IsValid(value)";
    int v18 = 20793;
    std::string v19 = "set_motionstate";
LABEL_10:
    __assert_rtn(v19, "microlocation.pb.h", v18, v17);
  }
LABEL_6:
  CLMicroLocationProtobufHelper::setSpecificRecordingEvent((CLMicroLocationProtobufHelper *)a6, a1, v16);
}

void sub_2564A9B28(_Unwind_Exception *a1)
{
  CLMicroLocationProto::RecordingEvent::~RecordingEvent(v1);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationRecorder::addTriggerUuidForCachedTrigger(uint64_t a1, const std::string *a2, _OWORD *a3, long long *a4)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  id v8 = *(id *)(*(void *)(a1 + 40) + 88);
  double v9 = operator new(0x10uLL);
  *(void *)&uint8_t buf[16] = v9 + 1;
  *double v9 = *a3;
  *(void *)uint64_t buf = v9;
  *(void *)&uint8_t buf[8] = v9 + 1;
  if (!v8)
  {
    BOOL v37 = 0;
    long long v38 = 0;
    uint64_t v39 = 0;
    goto LABEL_5;
  }
  [v8 fetchRecordingEventsFromTriggerUUIDs:buf];
  double v9 = *(_OWORD **)buf;
  if (*(void *)buf)
  {
LABEL_5:
    *(void *)&uint8_t buf[8] = v9;
    operator delete(v9);
  }

  double v10 = v37;
  if (v37 == v38)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_108);
    }
    uint64_t v22 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = (char *)operator new(0x28uLL);
      *(void *)(v23 + 29) = 0;
      *(_OWORD *)uint64_t v23 = 0u;
      *((_OWORD *)v23 + 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)a3, v23);
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2082;
      *(void *)&buf[20] = v23;
      _os_log_impl(&dword_25631F000, v22, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Did not find matching entry for cached trigger UUID\", \"Cached trigger UUID\":%{public, location:escape_only}s}", buf, 0x1Cu);
      operator delete(v23);
    }

    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_108);
    }
    int v24 = (id)logObject_MicroLocation_Default;
    if (os_signpost_enabled(v24))
    {
      uint64_t v25 = (char *)operator new(0x28uLL);
      *(void *)(v25 + 29) = 0;
      *(_OWORD *)uint64_t v25 = 0u;
      *((_OWORD *)v25 + 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)a3, v25);
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2082;
      *(void *)&buf[20] = v25;
      _os_signpost_emit_with_name_impl(&dword_25631F000, v24, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Did not find matching entry for cached trigger UUID", "{\"msg%{public}.0s\":\"Did not find matching entry for cached trigger UUID\", \"Cached trigger UUID\":%{public, location:escape_only}s}", buf, 0x1Cu);
      operator delete(v25);
    }

    uint64_t v26 = 0;
  }
  else
  {
    if (0xEF7BDEF7BDEF7BDFLL * (v38 - v37) >= 2)
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_108);
      }
      uint64_t v11 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        uint64_t v12 = (char *)operator new(0x28uLL);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_256514540;
        *(_OWORD *)uint64_t v12 = 0u;
        *((_OWORD *)v12 + 1) = 0u;
        *(void *)(v12 + 29) = 0;
        boost::uuids::to_chars<char *>((uint64_t)a3, v12);
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)uint64_t buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&unsigned char buf[18] = 2082;
        *(void *)&buf[20] = p_p;
        *(_WORD *)&unsigned char buf[28] = 2050;
        *(void *)&buf[30] = 0xEF7BDEF7BDEF7BDFLL * (v38 - v37);
        _os_log_impl(&dword_25631F000, v11, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Found too many matching entries for cached trigger UUID\", \"Cached trigger UUID\":%{public, location:escape_only}s, \"Number of matches\":%{public}lu}", buf, 0x26u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }

      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_108);
      }
      unsigned int v14 = (id)logObject_MicroLocation_Default;
      if (os_signpost_enabled(v14))
      {
        int v15 = (char *)operator new(0x28uLL);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_256514540;
        *(_OWORD *)int v15 = 0u;
        *((_OWORD *)v15 + 1) = 0u;
        *(void *)(v15 + 29) = 0;
        boost::uuids::to_chars<char *>((uint64_t)a3, v15);
        uint64_t v16 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)uint64_t buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&unsigned char buf[18] = 2082;
        *(void *)&buf[20] = v16;
        *(_WORD *)&unsigned char buf[28] = 2050;
        *(void *)&buf[30] = 0xEF7BDEF7BDEF7BDFLL * (v38 - v37);
        _os_signpost_emit_with_name_impl(&dword_25631F000, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Found too many matching entries for cached trigger UUID", "{\"msg%{public}.0s\":\"Found too many matching entries for cached trigger UUID\", \"Cached trigger UUID\":%{public, location:escape_only}s, \"Number of matches\":%{public}lu}", buf, 0x26u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }

      double v10 = v37;
    }
    CLMicroLocationProto::TruthLabelDonation::TruthLabelDonation((CLMicroLocationProto::TruthLabelDonation *)v33);
    v36 |= 2u;
    uint64_t v17 = (std::string *)MEMORY[0x263F8C740];
    if (v34 == (std::string *)MEMORY[0x263F8C740]) {
      operator new();
    }
    std::string::operator=(v34, a2);
    memset(&__p, 0, sizeof(__p));
    if ((boost::conversion::detail::try_lexical_convert<std::string,boost::uuids::uuid>((uint64_t)a4, &__p) & 1) == 0)
    {
      std::bad_cast::bad_cast((std::bad_cast *)buf);
      *(void *)uint64_t buf = &unk_2704DAAD0;
      boost::throw_exception<boost::bad_lexical_cast>((uint64_t)buf);
    }
    v36 |= 4u;
    if (v35 == v17) {
      operator new();
    }
    std::string::operator=(v35, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    double v18 = cl::chrono::CFAbsoluteTimeClock::now();
    CLMicroLocationProtobufHelper::createRecordingEvent<CLMicroLocationProto::TruthLabelDonation>((CLMicroLocationProto::RecordingEvent *)v33, 0, 0, 0, (CLMicroLocationProto *)3, (uint64_t)v32, v18);
    double v19 = *(double *)v10;
    uint64_t v20 = v10[1];
    double v21 = *((double *)v10 + 2);
    if (*((char *)v10 + 47) < 0) {
      std::string::__init_copy_ctor_external(&v31, (const std::string::value_type *)v10[3], v10[4]);
    }
    else {
      std::string v31 = *(std::string *)((unsigned char *)v10 + 1);
    }
    long long v48 = *a4;
    char v49 = 1;
    CLMicroLocationRecordingEventsTable::Entry::Entry(buf, *(void *)&v19, v20, &v31, v32, &v48, v10[6], v10[7], v21);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v31.__r_.__value_.__l.__data_);
    }
    std::string __p = *(std::string *)buf;
    if ((buf[47] & 0x80000000) != 0) {
      std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)&buf[24], *(std::string::size_type *)&buf[32]);
    }
    else {
      std::string v43 = *(std::string *)&buf[24];
    }
    v44[0] = v51[0];
    *(_OWORD *)((char *)v44 + 12) = *(_OWORD *)((char *)v51 + 12);
    CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)v45, (const CLMicroLocationProto::RecordingEvent *)v52);
    v45[9] = v52[9];
    char v46 = v53;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    __int16 v28 = 0;
    uint64_t v40 = (void **)&v28;
    char v41 = 0;
    __int16 v28 = (char *)operator new(0xF8uLL);
    uint64_t v29 = (uint64_t)v28;
    uint64_t v30 = v28 + 248;
    uint64_t v29 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationRecordingEventsTable::Entry>,CLMicroLocationRecordingEventsTable::Entry const*,CLMicroLocationRecordingEventsTable::Entry const*,CLMicroLocationRecordingEventsTable::Entry*>((uint64_t)&v30, (long long *)&__p, (long long *)&v47, (uint64_t)v28);
    CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v45);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v43.__r_.__value_.__l.__data_);
    }
    uint64_t v26 = [*(id *)(*(void *)(a1 + 40) + 88) insertEntries:&v28];
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
    std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v52);
    if ((buf[47] & 0x80000000) != 0) {
      operator delete(*(void **)&buf[24]);
    }
    CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v32);
    CLMicroLocationProto::TruthLabelDonation::~TruthLabelDonation((CLMicroLocationProto::TruthLabelDonation *)v33);
  }
  *(void *)uint64_t buf = &v37;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  return v26;
}

void sub_2564AA320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  operator delete(v41);

  STACK[0x240] = (unint64_t)&a40;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x240]);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationRecorder::recordTruthLabelBetweenDates(uint64_t a1, const std::string *a2, void *a3, void *a4, void *a5)
{
  uint64_t v82 = *MEMORY[0x263EF8340];
  id v9 = a3;
  id v10 = a4;
  id v11 = a5;
  if ([v10 compare:v11] == 1)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_108);
    }
    uint64_t v12 = logObject_MicroLocation_Default;
    uint64_t v13 = 0;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_25631F000, v12, OS_LOG_TYPE_DEFAULT, "recordTruthLabelBetweenDates, startDate is later than endDate", buf, 2u);
      uint64_t v13 = 0;
    }
  }
  else
  {
    ULSettings::getRecordingEventsForModelType((char **)&v72);
    unsigned int v14 = v72;
    int v15 = v73;
    if (v72 == v73) {
      goto LABEL_23;
    }
    uint64_t v16 = v72;
    while (*v16 != 14)
    {
      if (++v16 == v73) {
        goto LABEL_19;
      }
    }
    if (v16 != v73)
    {
      for (uint64_t i = v16 + 1; i != v15; ++i)
      {
        if (*i != 14) {
          *v16++ = *i;
        }
      }
    }
    if (v16 != v15)
    {
      int v15 = v16;
      uint64_t v73 = v16;
    }
LABEL_19:
    if (v14 == v15)
    {
LABEL_23:
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_108);
      }
      __int16 v28 = logObject_MicroLocation_Default;
      uint64_t v13 = 0;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 67240192;
        *(_DWORD *)&uint8_t buf[4] = 1;
        _os_log_impl(&dword_25631F000, v28, OS_LOG_TYPE_DEFAULT, "#Warning No recording events for model type %{public}d", buf, 8u);
        uint64_t v13 = 0;
      }
    }
    else
    {
      uint64_t v52 = a1;
      id v18 = *(id *)(*(void *)(a1 + 40) + 88);
      id v50 = v10;
      id v51 = v9;
      [v10 timeIntervalSinceReferenceDate];
      double v20 = v19;
      [v11 timeIntervalSinceReferenceDate];
      double v22 = v21;
      uint64_t v23 = +[ULDefaultsSingleton shared];
      int v24 = [v23 defaultsDictionary];

      uint64_t v25 = [NSString stringWithUTF8String:"ULDatabaseSelectionLimit"];
      uint64_t v26 = [v24 objectForKey:v25];
      if (v26 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
        uint64_t v27 = [v26 unsignedIntValue];
      }
      else {
        uint64_t v27 = [&unk_2704F2220 unsignedIntValue];
      }
      uint64_t v29 = v27;

      if (v18)
      {
        [v18 fetchRecordingEventsWithScanMeasurements:&v72 fromTime:v29 toTime:v20 withLimit:v22];
      }
      else
      {
        uint64_t v69 = 0;
        uint64_t v70 = 0;
        uint64_t v71 = 0;
      }

      id v30 = [v9 UUIDString];
      std::string v31 = (char *)[v30 UTF8String];

      unint64_t v67 = 0;
      uint64_t v68 = v31;
      double v65 = 0;
      unint64_t v66 = 0;
      std::vector<CLMicroLocationRecordingEventsTable::Entry>::reserve((uint64_t *)&v65, 0xEF7BDEF7BDEF7BDFLL * ((v70 - v69) >> 3));
      uint64_t v62 = 0;
      unint64_t v63 = 0;
      unint64_t v64 = 0;
      std::vector<CLMicroLocationRecordingLabelsTable::Entry>::reserve(&v62, 0xEF7BDEF7BDEF7BDFLL * ((v70 - v69) >> 3));
      uint64_t v32 = v70;
      if (v69 != v70)
      {
        uint64_t v33 = v69 + 80;
        char v34 = (std::string *)MEMORY[0x263F8C740];
        do
        {
          long long v35 = *(_OWORD *)(v33 - 80);
          *(void *)&uint8_t buf[16] = *(void *)(v33 - 64);
          *(_OWORD *)uint64_t buf = v35;
          if (*(char *)(v33 - 33) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&buf[24], *(const std::string::value_type **)(v33 - 56), *(void *)(v33 - 48));
          }
          else
          {
            long long v36 = *(_OWORD *)(v33 - 56);
            uint64_t v78 = *(void *)(v33 - 40);
            *(_OWORD *)&uint8_t buf[24] = v36;
          }
          uint64_t v37 = v33 - 80;
          long long v38 = *(_OWORD *)(v33 - 32);
          *(_OWORD *)&v79[12] = *(_OWORD *)(v33 - 20);
          *(_OWORD *)uint64_t v79 = v38;
          CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)v80, (const CLMicroLocationProto::RecordingEvent *)v33);
          long long v39 = *(_OWORD *)(v33 + 144);
          char v81 = *(unsigned char *)(v33 + 160);
          v80[9] = v39;
          long long v76 = 0uLL;
          LODWORD(v53.__vftable) = 0;
          boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v53);
          *(void *)&long long v76 = boost::uuids::random_generator_pure::operator()((uint64_t)&v53);
          *((void *)&v76 + 1) = v40;
          boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v53);
          memset(&__str, 0, sizeof(__str));
          if ((boost::conversion::detail::try_lexical_convert<std::string,boost::uuids::uuid>((uint64_t)&v76, &__str) & 1) == 0)
          {
            std::bad_cast::bad_cast(&v53);
            v53.__vftable = (std::bad_cast_vtbl *)&unk_2704DAAD0;
            boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v53);
          }
          CLMicroLocationProto::TruthLabelDonation::TruthLabelDonation((CLMicroLocationProto::TruthLabelDonation *)v56);
          v60 |= 2u;
          if (v57 == v34) {
            operator new();
          }
          std::string::operator=(v57, a2);
          v60 |= 4u;
          if (v58 == v34) {
            operator new();
          }
          std::string::operator=(v58, &__str);
          v60 |= 8u;
          if (v59 == v34) {
            operator new();
          }
          MEMORY[0x25A2A6080]();
          double v41 = cl::chrono::CFAbsoluteTimeClock::now();
          CLMicroLocationProtobufHelper::createRecordingEvent<CLMicroLocationProto::TruthLabelDonation>((CLMicroLocationProto::RecordingEvent *)v56, 0, 0, 0, (CLMicroLocationProto *)3, (uint64_t)&v53, v41);
          long long v74 = v76;
          char v75 = 1;
          unint64_t v42 = v66;
          if (v66 >= v67)
          {
            uint64_t v43 = std::vector<CLMicroLocationRecordingEventsTable::Entry>::__emplace_back_slow_path<boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,std::string &,CLMicroLocationProto::RecordingEvent &,std::optional<boost::uuids::uuid>,boost::uuids::uuid &>((uint64_t *)&v65, (uint64_t *)buf, (double *)&buf[16], (uint64_t)&buf[24], (uint64_t)&v53, &v74, v79);
          }
          else
          {
            std::allocator<CLMicroLocationRecordingEventsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry,boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,std::string &,CLMicroLocationProto::RecordingEvent &,std::optional<boost::uuids::uuid>,boost::uuids::uuid &>((uint64_t)&v67, v66, (uint64_t *)buf, (double *)&buf[16], (uint64_t)&buf[24], (uint64_t)&v53, &v74, v79);
            uint64_t v43 = v42 + 248;
          }
          unint64_t v66 = v43;
          *(void *)&long long v74 = v54;
          unint64_t v44 = v63;
          if (v63 >= v64)
          {
            uint64_t v45 = std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__emplace_back_slow_path<boost::uuids::uuid &,std::string const&,char const*&,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>>(&v62, (uint64_t *)&v76, (uint64_t)a2, &v68, (double *)&v74);
          }
          else
          {
            std::allocator<CLMicroLocationRecordingLabelsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingLabelsTable::Entry,boost::uuids::uuid &,std::string const&,char const*&,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>>((uint64_t)&v64, v63, (uint64_t *)&v76, (uint64_t)a2, &v68, (double *)&v74);
            uint64_t v45 = v44 + 64;
          }
          unint64_t v63 = v45;
          CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)&v53);
          CLMicroLocationProto::TruthLabelDonation::~TruthLabelDonation((CLMicroLocationProto::TruthLabelDonation *)v56);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v80);
          if (SHIBYTE(v78) < 0) {
            operator delete(*(void **)&buf[24]);
          }
          v33 += 248;
        }
        while (v37 + 248 != v32);
      }
      if (*(_DWORD *)v52 == 1)
      {
        CLMicroLocationRecorder::RecordingTransaction::addRecordingEventsTableEntryBatch(*(void **)(v52 + 8), &v65);
        CLMicroLocationRecorder::RecordingTransaction::addRecordingLabelsTableEntryBatch(*(void **)(v52 + 8), &v62);
        uint64_t v13 = 1;
      }
      else
      {
        int v46 = [*(id *)(*(void *)(v52 + 40) + 88) insertEntries:&v65];
        uint64_t v13 = v46 & [*(id *)(*(void *)(v52 + 40) + 40) insertEntries:&v62];
      }
      id v10 = v50;
      id v9 = v51;
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_108);
      }
      uint64_t v47 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
      {
        BOOL v48 = *(_DWORD *)v52 == 1;
        *(_DWORD *)uint64_t buf = 68289794;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&unsigned char buf[18] = 2050;
        *(void *)&buf[20] = 0xEF7BDEF7BDEF7BDFLL * ((v70 - v69) >> 3);
        *(_WORD *)&unsigned char buf[28] = 1026;
        *(_DWORD *)&buf[30] = v48;
        *(_WORD *)&buf[34] = 1026;
        *(_DWORD *)&buf[36] = v13;
        _os_log_impl(&dword_25631F000, v47, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMicroLocationRecorder: record TruthLabel between dates\", \"Num Matching Events\":%{public}lu, \"Is Recorder Active\":%{public}hhd, \"Insertion Result\":%{public}hhd}", buf, 0x28u);
      }
      *(void *)uint64_t buf = &v62;
      std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      *(void *)uint64_t buf = &v65;
      std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      *(void *)uint64_t buf = &v69;
      std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    }
    if (v72)
    {
      uint64_t v73 = v72;
      operator delete(v72);
    }
  }

  return v13;
}

void sub_2564AAD1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::exception a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void CLMicroLocationRecorder::RecordingTransaction::addRecordingEventsTableEntryBatch(void *a1, long long **a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v5 = a1 + 11;
    int64x2_t v6 = a1 + 13;
    unint64_t v7 = a1[12];
    do
    {
      if (v7 >= *v6)
      {
        unint64_t v7 = std::vector<CLMicroLocationRecordingEventsTable::Entry>::__emplace_back_slow_path<CLMicroLocationRecordingEventsTable::Entry const&>(v5, v2);
      }
      else
      {
        std::allocator<CLMicroLocationRecordingEventsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry,CLMicroLocationRecordingEventsTable::Entry const&>((uint64_t)v6, v7, v2);
        v7 += 248;
        a1[12] = v7;
      }
      a1[12] = v7;
      uint64_t v2 = (long long *)((char *)v2 + 248);
    }
    while (v2 != v3);
  }
}

void sub_2564AAF3C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 96) = v2;
  _Unwind_Resume(a1);
}

void CLMicroLocationRecorder::RecordingTransaction::addRecordingLabelsTableEntryBatch(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v5 = a1 + 14;
    unint64_t v6 = a1[15];
    do
    {
      if (v6 >= a1[16])
      {
        unint64_t v6 = std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__emplace_back_slow_path<CLMicroLocationRecordingLabelsTable::Entry const&>(v5, v2);
      }
      else
      {
        std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__construct_one_at_end[abi:ne180100]<CLMicroLocationRecordingLabelsTable::Entry const&>((uint64_t)v5, v2);
        v6 += 64;
      }
      a1[15] = v6;
      v2 += 64;
    }
    while (v2 != v3);
  }
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_86()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

void ___ZL47_CLLogObjectForCategory_MicroLocationQE_Defaultv_block_invoke_4()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocationQE");
  uint64_t v1 = (void *)logObject_MicroLocationQE_Default;
  logObject_MicroLocationQE_Default = (uint64_t)v0;
}

uint64_t std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__emplace_back_slow_path<boost::uuids::uuid &,std::string &,boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, double *a5)
{
  uint64_t v6 = (a1[1] - *a1) >> 6;
  unint64_t v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 58) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v12 = a1[2] - *a1;
  if (v12 >> 5 > v7) {
    unint64_t v7 = v12 >> 5;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v13 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v7;
  }
  double v21 = a1 + 2;
  if (v13) {
    unsigned int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRecordingLabelsTable::Entry>>((uint64_t)(a1 + 2), v13);
  }
  else {
    unsigned int v14 = 0;
  }
  uint64_t v17 = v14;
  id v18 = &v14[64 * v6];
  double v20 = &v14[64 * v13];
  std::allocator<CLMicroLocationRecordingLabelsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingLabelsTable::Entry,boost::uuids::uuid &,std::string &,boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>>((uint64_t)(a1 + 2), (uint64_t)v18, a2, a3, a4, a5);
  double v19 = v18 + 64;
  std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__swap_out_circular_buffer(a1, &v17);
  uint64_t v15 = a1[1];
  std::__split_buffer<CLMicroLocationRecordingLabelsTable::Entry>::~__split_buffer((uint64_t)&v17);
  return v15;
}

void sub_2564AB14C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMicroLocationRecordingLabelsTable::Entry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<CLMicroLocationRecordingLabelsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingLabelsTable::Entry,boost::uuids::uuid &,std::string &,boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, double *a6)
{
  uint64_t v9 = *a3;
  uint64_t v10 = a3[1];
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string __p = *(std::string *)a4;
  }
  CLMicroLocationRecordingLabelsTable::Entry::Entry(a2, v9, v10, (long long *)&__p, *a5, a5[1], *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_2564AB1F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<CLMicroLocationMeasurementTable::Entry>::__construct_one_at_end[abi:ne180100]<boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> const&,unsigned long long const&,CLMicroLocationProto::Measurement const&,CLMicroLocationMeasurementTable::EntryFlags>(uint64_t a1, uint64_t *a2, double *a3, uint64_t *a4, CLMicroLocationProto::Measurement *a5, unsigned int *a6)
{
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t result = CLMicroLocationMeasurementTable::Entry::Entry(v7, *a2, a2[1], *a4, a5, *a6 | 0x100000000, *a3);
  *(void *)(a1 + 8) = v7 + 120;
  return result;
}

void sub_2564AB264(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMicroLocationMeasurementTable::Entry>::__emplace_back_slow_path<boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> const&,unsigned long long const&,CLMicroLocationProto::Measurement const&,CLMicroLocationMeasurementTable::EntryFlags>(uint64_t *a1, uint64_t *a2, double *a3, uint64_t *a4, CLMicroLocationProto::Measurement *a5, unsigned int *a6)
{
  uint64_t v7 = *a1;
  unint64_t v8 = 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 3);
  unint64_t v9 = v8 + 1;
  if (v8 + 1 > 0x222222222222222) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v15 = (uint64_t)(a1 + 2);
  unint64_t v16 = 0xEEEEEEEEEEEEEEEFLL * ((a1[2] - v7) >> 3);
  if (2 * v16 > v9) {
    unint64_t v9 = 2 * v16;
  }
  if (v16 >= 0x111111111111111) {
    unint64_t v17 = 0x222222222222222;
  }
  else {
    unint64_t v17 = v9;
  }
  uint64_t v25 = a1 + 2;
  if (v17) {
    id v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationMeasurementTable::Entry>>(v15, v17);
  }
  else {
    id v18 = 0;
  }
  double v21 = v18;
  double v22 = &v18[120 * v8];
  uint64_t v23 = (uint64_t)v22;
  int v24 = &v18[120 * v17];
  CLMicroLocationMeasurementTable::Entry::Entry((uint64_t)v22, *a2, a2[1], *a4, a5, *a6 | 0x100000000, *a3);
  uint64_t v23 = (uint64_t)(v22 + 120);
  std::vector<CLMicroLocationMeasurementTable::Entry>::__swap_out_circular_buffer(a1, &v21);
  uint64_t v19 = a1[1];
  std::__split_buffer<CLMicroLocationMeasurementTable::Entry>::~__split_buffer((uint64_t)&v21);
  return v19;
}

void sub_2564AB394(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMicroLocationMeasurementTable::Entry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMicroLocationRecordingEventsTable::Entry>::__emplace_back_slow_path<boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,std::string &,CLMicroLocationProto::RecordingEvent const&,std::optional<boost::uuids::uuid> &,boost::uuids::uuid &>(uint64_t *a1, uint64_t *a2, double *a3, uint64_t a4, uint64_t a5, long long *a6, void *a7)
{
  unint64_t v8 = 0xEF7BDEF7BDEF7BDFLL * ((a1[1] - *a1) >> 3);
  unint64_t v9 = v8 + 1;
  if (v8 + 1 > 0x108421084210842) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  if (0xDEF7BDEF7BDEF7BELL * ((a1[2] - *a1) >> 3) > v9) {
    unint64_t v9 = 0xDEF7BDEF7BDEF7BELL * ((a1[2] - *a1) >> 3);
  }
  if (0xEF7BDEF7BDEF7BDFLL * ((a1[2] - *a1) >> 3) >= 0x84210842108421) {
    unint64_t v16 = 0x108421084210842;
  }
  else {
    unint64_t v16 = v9;
  }
  int v24 = a1 + 2;
  if (v16) {
    unint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRecordingEventsTable::Entry>>((uint64_t)(a1 + 2), v16);
  }
  else {
    unint64_t v17 = 0;
  }
  double v20 = v17;
  double v21 = &v17[248 * v8];
  uint64_t v23 = &v17[248 * v16];
  std::allocator<CLMicroLocationRecordingEventsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry,boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,std::string &,CLMicroLocationProto::RecordingEvent const&,std::optional<boost::uuids::uuid> &,boost::uuids::uuid &>((uint64_t)(a1 + 2), (uint64_t)v21, a2, a3, a4, a5, a6, a7);
  double v22 = v21 + 248;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__swap_out_circular_buffer(a1, &v20);
  uint64_t v18 = a1[1];
  std::__split_buffer<CLMicroLocationRecordingEventsTable::Entry>::~__split_buffer(&v20);
  return v18;
}

void sub_2564AB4FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMicroLocationRecordingEventsTable::Entry>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<CLMicroLocationRecordingEventsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry,boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,std::string &,CLMicroLocationProto::RecordingEvent const&,std::optional<boost::uuids::uuid> &,boost::uuids::uuid &>(uint64_t a1, uint64_t a2, uint64_t *a3, double *a4, uint64_t a5, uint64_t a6, long long *a7, void *a8)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v12 = *a3;
  uint64_t v13 = a3[1];
  double v14 = *a4;
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string __p = *(std::string *)a5;
  }
  long long v16 = *a7;
  char v17 = *((unsigned char *)a7 + 16);
  CLMicroLocationRecordingEventsTable::Entry::Entry(a2, v12, v13, &__p, a6, &v16, *a8, a8[1], v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_2564AB5FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

uint64_t std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__emplace_back_slow_path<boost::uuids::uuid const&,std::string const&,boost::uuids::uuid const&,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, double *a5)
{
  uint64_t v6 = (a1[1] - *a1) >> 6;
  unint64_t v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 58) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v12 = a1[2] - *a1;
  if (v12 >> 5 > v7) {
    unint64_t v7 = v12 >> 5;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v13 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v7;
  }
  double v21 = a1 + 2;
  if (v13) {
    double v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRecordingLabelsTable::Entry>>((uint64_t)(a1 + 2), v13);
  }
  else {
    double v14 = 0;
  }
  char v17 = v14;
  uint64_t v18 = &v14[64 * v6];
  double v20 = &v14[64 * v13];
  std::allocator<CLMicroLocationRecordingLabelsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingLabelsTable::Entry,boost::uuids::uuid const&,std::string const&,boost::uuids::uuid const&,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &>((uint64_t)(a1 + 2), (uint64_t)v18, a2, a3, a4, a5);
  uint64_t v19 = v18 + 64;
  std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__swap_out_circular_buffer(a1, &v17);
  uint64_t v15 = a1[1];
  std::__split_buffer<CLMicroLocationRecordingLabelsTable::Entry>::~__split_buffer((uint64_t)&v17);
  return v15;
}

void sub_2564AB724(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMicroLocationRecordingLabelsTable::Entry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<CLMicroLocationRecordingLabelsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingLabelsTable::Entry,boost::uuids::uuid const&,std::string const&,boost::uuids::uuid const&,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, double *a6)
{
  uint64_t v9 = *a3;
  uint64_t v10 = a3[1];
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string __p = *(std::string *)a4;
  }
  CLMicroLocationRecordingLabelsTable::Entry::Entry(a2, v9, v10, (long long *)&__p, *a5, a5[1], *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_2564AB7D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationRecordingLabelsTable::Entry>,CLMicroLocationRecordingLabelsTable::Entry const*,CLMicroLocationRecordingLabelsTable::Entry const*,CLMicroLocationRecordingLabelsTable::Entry*>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v15 = a4;
  uint64_t v16 = a4;
  v13[0] = a1;
  v13[1] = &v15;
  int v13[2] = &v16;
  char v14 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2 + 1;
    do
    {
      *(_OWORD *)uint64_t v4 = *(v6 - 1);
      unint64_t v7 = (std::string *)(v4 + 16);
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v9 = v16;
      }
      else
      {
        long long v8 = *v6;
        *(void *)(v4 + 32) = *((void *)v6 + 2);
        *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
        uint64_t v9 = v4;
      }
      uint64_t v10 = v6 - 1;
      long long v11 = *(long long *)((char *)v6 + 24);
      *(void *)(v4 + 56) = *((void *)v6 + 5);
      *(_OWORD *)(v4 + 40) = v11;
      uint64_t v4 = v9 + 64;
      uint64_t v16 = v9 + 64;
      v6 += 4;
    }
    while (v10 + 4 != a3);
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationRecordingLabelsTable::Entry>,CLMicroLocationRecordingLabelsTable::Entry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v4;
}

void sub_2564AB8BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::vector<CLMicroLocationRecordingEventsTable::Entry>::__emplace_back_slow_path<boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,std::string &,CLMicroLocationProto::RecordingEvent &,std::optional<boost::uuids::uuid>,boost::uuids::uuid &>(uint64_t *a1, uint64_t *a2, double *a3, uint64_t a4, uint64_t a5, long long *a6, void *a7)
{
  unint64_t v8 = 0xEF7BDEF7BDEF7BDFLL * ((a1[1] - *a1) >> 3);
  unint64_t v9 = v8 + 1;
  if (v8 + 1 > 0x108421084210842) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  if (0xDEF7BDEF7BDEF7BELL * ((a1[2] - *a1) >> 3) > v9) {
    unint64_t v9 = 0xDEF7BDEF7BDEF7BELL * ((a1[2] - *a1) >> 3);
  }
  if (0xEF7BDEF7BDEF7BDFLL * ((a1[2] - *a1) >> 3) >= 0x84210842108421) {
    unint64_t v16 = 0x108421084210842;
  }
  else {
    unint64_t v16 = v9;
  }
  int v24 = a1 + 2;
  if (v16) {
    char v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRecordingEventsTable::Entry>>((uint64_t)(a1 + 2), v16);
  }
  else {
    char v17 = 0;
  }
  double v20 = v17;
  double v21 = &v17[248 * v8];
  uint64_t v23 = &v17[248 * v16];
  std::allocator<CLMicroLocationRecordingEventsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry,boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,std::string &,CLMicroLocationProto::RecordingEvent &,std::optional<boost::uuids::uuid>,boost::uuids::uuid &>((uint64_t)(a1 + 2), (uint64_t)v21, a2, a3, a4, a5, a6, a7);
  double v22 = v21 + 248;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__swap_out_circular_buffer(a1, &v20);
  uint64_t v18 = a1[1];
  std::__split_buffer<CLMicroLocationRecordingEventsTable::Entry>::~__split_buffer(&v20);
  return v18;
}

void sub_2564ABA24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMicroLocationRecordingEventsTable::Entry>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<CLMicroLocationRecordingEventsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry,boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,std::string &,CLMicroLocationProto::RecordingEvent &,std::optional<boost::uuids::uuid>,boost::uuids::uuid &>(uint64_t a1, uint64_t a2, uint64_t *a3, double *a4, uint64_t a5, uint64_t a6, long long *a7, void *a8)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v12 = *a3;
  uint64_t v13 = a3[1];
  double v14 = *a4;
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string __p = *(std::string *)a5;
  }
  long long v16 = *a7;
  char v17 = *((unsigned char *)a7 + 16);
  CLMicroLocationRecordingEventsTable::Entry::Entry(a2, v12, v13, &__p, a6, &v16, *a8, a8[1], v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_2564ABB24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

uint64_t std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__emplace_back_slow_path<boost::uuids::uuid &,std::string const&,char const*&,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>>(uint64_t *a1, uint64_t *a2, uint64_t a3, char **a4, double *a5)
{
  uint64_t v6 = (a1[1] - *a1) >> 6;
  unint64_t v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 58) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v12 = a1[2] - *a1;
  if (v12 >> 5 > v7) {
    unint64_t v7 = v12 >> 5;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v13 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v7;
  }
  double v21 = a1 + 2;
  if (v13) {
    double v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRecordingLabelsTable::Entry>>((uint64_t)(a1 + 2), v13);
  }
  else {
    double v14 = 0;
  }
  char v17 = v14;
  uint64_t v18 = &v14[64 * v6];
  double v20 = &v14[64 * v13];
  std::allocator<CLMicroLocationRecordingLabelsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingLabelsTable::Entry,boost::uuids::uuid &,std::string const&,char const*&,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>>((uint64_t)(a1 + 2), (uint64_t)v18, a2, a3, a4, a5);
  uint64_t v19 = v18 + 64;
  std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__swap_out_circular_buffer(a1, &v17);
  uint64_t v15 = a1[1];
  std::__split_buffer<CLMicroLocationRecordingLabelsTable::Entry>::~__split_buffer((uint64_t)&v17);
  return v15;
}

void sub_2564ABC4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMicroLocationRecordingLabelsTable::Entry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<CLMicroLocationRecordingLabelsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingLabelsTable::Entry,boost::uuids::uuid &,std::string const&,char const*&,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char **a5, double *a6)
{
  uint64_t v9 = *a3;
  uint64_t v10 = a3[1];
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v13 = *(std::string *)a4;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, *a5);
  CLMicroLocationRecordingLabelsTable::Entry::Entry(a2, v9, v10, &v13, __p, *a6);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_2564ABD14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<CLMicroLocationRecordingEventsTable::Entry>::__emplace_back_slow_path<CLMicroLocationRecordingEventsTable::Entry const&>(uint64_t *a1, long long *a2)
{
  unint64_t v3 = 0xEF7BDEF7BDEF7BDFLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x108421084210842) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  if (0xDEF7BDEF7BDEF7BELL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xDEF7BDEF7BDEF7BELL * ((a1[2] - *a1) >> 3);
  }
  if (0xEF7BDEF7BDEF7BDFLL * ((a1[2] - *a1) >> 3) >= 0x84210842108421) {
    unint64_t v6 = 0x108421084210842;
  }
  else {
    unint64_t v6 = v4;
  }
  double v14 = a1 + 2;
  if (v6) {
    unint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRecordingEventsTable::Entry>>((uint64_t)(a1 + 2), v6);
  }
  else {
    unint64_t v7 = 0;
  }
  uint64_t v10 = v7;
  long long v11 = &v7[248 * v3];
  std::string v13 = &v7[248 * v6];
  std::allocator<CLMicroLocationRecordingEventsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry,CLMicroLocationRecordingEventsTable::Entry const&>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  char v12 = v11 + 248;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<CLMicroLocationRecordingEventsTable::Entry>::~__split_buffer(&v10);
  return v8;
}

void sub_2564ABE5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMicroLocationRecordingEventsTable::Entry>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

__n128 std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__construct_one_at_end[abi:ne180100]<CLMicroLocationRecordingLabelsTable::Entry const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  uint64_t v5 = (std::string *)(v4 + 16);
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    *(void *)(v4 + 32) = *(void *)(a2 + 32);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  __n128 result = *(__n128 *)(a2 + 40);
  *(void *)(v4 + 56) = *(void *)(a2 + 56);
  *(__n128 *)(v4 + 40) = result;
  *(void *)(a1 + 8) = v4 + 64;
  return result;
}

void sub_2564ABEEC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__emplace_back_slow_path<CLMicroLocationRecordingLabelsTable::Entry const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 6;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 58) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 5 > v5) {
    unint64_t v5 = v8 >> 5;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v9 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  double v21 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRecordingLabelsTable::Entry>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  long long v11 = &v10[64 * v4];
  v18[0] = v10;
  v18[1] = v11;
  uint64_t v19 = v11;
  double v20 = &v10[64 * v9];
  *(_OWORD *)long long v11 = *(_OWORD *)a2;
  char v12 = (std::string *)(v11 + 16);
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
    long long v11 = v19;
  }
  else
  {
    long long v13 = *(_OWORD *)(a2 + 16);
    *((void *)v11 + 4) = *(void *)(a2 + 32);
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
  }
  double v14 = &v10[64 * v4];
  long long v15 = *(_OWORD *)(a2 + 40);
  *((void *)v14 + 7) = *(void *)(a2 + 56);
  *(_OWORD *)(v14 + 40) = v15;
  uint64_t v19 = v11 + 64;
  std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__swap_out_circular_buffer(a1, v18);
  uint64_t v16 = a1[1];
  std::__split_buffer<CLMicroLocationRecordingLabelsTable::Entry>::~__split_buffer((uint64_t)v18);
  return v16;
}

void sub_2564AC008(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMicroLocationRecordingLabelsTable::Entry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(uint64_t a1@<X0>, CLMicroLocationFingerprintPool *a2@<X1>, _OWORD *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v195 = *MEMORY[0x263EF8340];
  CLMicroLocationModel::CLMicroLocationModel((CLMicroLocationModel *)a5);
  v179 = 0;
  uint64_t v180 = 0;
  v177[1] = 0;
  long long v178 = (uint64_t *)&v179;
  v176 = v177;
  v177[0] = 0;
  v193[0] = &unk_2704DD9E0;
  v193[1] = CLMicroLocationFingerprintConfiguration::getCustomLoiRecordingConfigurationFromSettings;
  v193[3] = v193;
  ULSettings::getRecordingEventsForModelType((char **)v175);
  id v8 = *(id *)(a1 + 88);
  unint64_t v9 = v8;
  *(_OWORD *)uint64_t buf = *a3;
  uint8_t buf[16] = 1;
  if (v8)
  {
    [v8 fetchRecordingEventTriggersForLearningMeasurements:v175 atLoiGroupId:buf];
  }
  else
  {
    uint64_t v172 = 0;
    uint64_t v173 = 0;
    uint64_t v174 = 0;
  }

  uint64_t v10 = +[ULDefaultsSingleton shared];
  long long v11 = [v10 defaultsDictionary];

  char v12 = [NSString stringWithUTF8String:"ULFingerprintDataSource"];
  long long v13 = [v11 objectForKey:v12];
  if (v13 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    unsigned int v14 = [v13 unsignedIntValue];
  }
  else {
    unsigned int v14 = [&unk_2704F2280 unsignedIntValue];
  }
  unsigned int v15 = v14;

  v192[0] = &unk_2704E1D28;
  v192[3] = v192;
  std::__function::__value_func<CLMicroLocationFingerprintConfiguration ()(void)>::__value_func[abi:ne180100]((uint64_t)v191, (uint64_t)v193);
  CLMicroLocationFingerprintDataSources::create(v15);
  CLMicroLocationFingerprintVector::CLMicroLocationFingerprintVector(&v171, &v170);
  uint64_t v16 = v170;
  uint64_t v170 = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  std::__function::__value_func<CLMicroLocationFingerprintConfiguration ()(void)>::~__value_func[abi:ne180100](v191);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v192);
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_109);
  }
  char v17 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v19 = v172;
    uint64_t v18 = v173;
    uint64_t v20 = CLMicroLocationFingerprintVector::size((CLMicroLocationFingerprintVector *)&v171);
    *(_DWORD *)uint64_t buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 2050;
    *(void *)&buf[20] = 0xEF7BDEF7BDEF7BDFLL * ((v18 - v19) >> 3);
    __int16 v182 = 2050;
    *(void *)v183 = v20;
    _os_log_impl(&dword_25631F000, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"learnBlueAtlasModel\", \"Num recording entries\":%{public}lu, \"Num valid fingerprints\":%{public}lu}", buf, 0x26u);
  }

  *(void *)uint64_t buf = CLMicroLocationFingerprintVector::begin((CLMicroLocationFingerprintVector *)&v171);
  *(void *)&uint8_t buf[8] = v21;
  v151[0] = (void *)CLMicroLocationFingerprintVector::end((CLMicroLocationFingerprintVector *)&v171);
  v151[1] = v22;
  while (CLMicroLocationFingerprintVector::Iterator::operator!=(buf, v151))
  {
    for (uint64_t i = *(uint64_t **)(CLMicroLocationFingerprintVector::Iterator::operator*(buf) + 16); i; uint64_t i = (uint64_t *)*i)
    {
      if (*((_DWORD *)i + 6) == 1)
      {
        v168[0] = 0;
        if (*((_DWORD *)i + 14)) {
          std::__throw_bad_variant_access[abi:ne180100]();
        }
        v168[0] = (void *)i[4];
        int v24 = *((_DWORD *)i + 7);
        v194.__r_.__value_.__r.__words[0] = (std::string::size_type)v168;
        uint64_t v25 = std::__tree<std::__value_type<unsigned long long,std::vector<float>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<float>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<float>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(&v178, (unint64_t *)v168, (uint64_t)&std::piecewise_construct, (uint64_t **)&v194);
        uint64_t v26 = v25;
        uint64_t v27 = (char *)v25[6];
        uint64_t v28 = (uint64_t)(v25 + 7);
        unint64_t v29 = v25[7];
        if ((unint64_t)v27 >= v29)
        {
          std::string v31 = (char *)v25[5];
          uint64_t v32 = (v27 - v31) >> 2;
          if ((unint64_t)(v32 + 1) >> 62) {
            std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v33 = v29 - (void)v31;
          unint64_t v34 = (uint64_t)(v29 - (void)v31) >> 1;
          if (v34 <= v32 + 1) {
            unint64_t v34 = v32 + 1;
          }
          if (v33 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v35 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v35 = v34;
          }
          if (v35)
          {
            long long v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationProto::ConfidenceReason>>(v28, v35);
            std::string v31 = (char *)v26[5];
            uint64_t v27 = (char *)v26[6];
          }
          else
          {
            long long v36 = 0;
          }
          uint64_t v37 = &v36[4 * v32];
          *(_DWORD *)uint64_t v37 = v24;
          id v30 = v37 + 4;
          while (v27 != v31)
          {
            int v38 = *((_DWORD *)v27 - 1);
            v27 -= 4;
            *((_DWORD *)v37 - 1) = v38;
            v37 -= 4;
          }
          v26[5] = (uint64_t)v37;
          v26[6] = (uint64_t)v30;
          v26[7] = (uint64_t)&v36[4 * v35];
          if (v31) {
            operator delete(v31);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v27 = v24;
          id v30 = v27 + 4;
        }
        v26[6] = (uint64_t)v30;
      }
    }
    CLMicroLocationFingerprintVector::Iterator::operator++((uint64_t)buf);
  }
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_109);
  }
  long long v39 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 2050;
    *(void *)&buf[20] = v180;
    _os_log_impl(&dword_25631F000, v39, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"learnBlueAtlasModel\", \"Num unique APs\":%{public}lu}", buf, 0x1Cu);
  }

  uint64_t v41 = v172;
  uint64_t v40 = v173;
  unint64_t v42 = +[ULDefaultsSingleton shared];
  uint64_t v43 = [v42 defaultsDictionary];

  unint64_t v44 = [NSString stringWithUTF8String:"ULBlueAtlasAppearanceRateThresholds"];
  uint64_t v45 = [v43 objectForKey:v44];
  if (v45 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    ULSettings::convert<NSArray<NSNumber *> * {__strong},std::vector<double>>(v45, (uint64_t)buf);
    *(_OWORD *)__int16 v168 = *(_OWORD *)buf;
    uint64_t v46 = *(void *)&buf[16];
  }
  else
  {
    ULSettings::convert<std::initializer_list<double>,std::vector<double>>((uint64_t *)&_ZGRN10ULSettings14SettingsTraitsINS_33BlueAtlasAppearanceRateThresholdsEE12defaultValueE_, 2uLL, (uint64_t)buf);
    uint64_t v46 = *(void *)&buf[16];
    *(_OWORD *)__int16 v168 = *(_OWORD *)buf;
  }
  uint64_t v169 = v46;

  uint64_t v47 = +[ULDefaultsSingleton shared];
  BOOL v48 = [v47 defaultsDictionary];

  char v49 = [NSString stringWithUTF8String:"ULBlueAtlasAppearanceRateScores"];
  id v50 = [v48 objectForKey:v49];
  if (v50 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    ULSettings::convert<NSArray<NSNumber *> * {__strong},std::vector<double>>(v50, (uint64_t)buf);
    *(_OWORD *)__int16 v166 = *(_OWORD *)buf;
    uint64_t v51 = *(void *)&buf[16];
  }
  else
  {
    ULSettings::convert<std::initializer_list<double>,std::vector<double>>((uint64_t *)&_ZGRN10ULSettings14SettingsTraitsINS_29BlueAtlasAppearanceRateScoresEE12defaultValueE_, 2uLL, (uint64_t)buf);
    uint64_t v51 = *(void *)&buf[16];
    *(_OWORD *)__int16 v166 = *(_OWORD *)buf;
  }
  uint64_t v167 = v51;

  uint64_t v52 = +[ULDefaultsSingleton shared];
  std::bad_cast v53 = [v52 defaultsDictionary];

  uint64_t v54 = [NSString stringWithUTF8String:"ULBlueAtlasRssiThresholds"];
  long long v55 = [v53 objectForKey:v54];
  if (v55 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    ULSettings::convert<NSArray<NSNumber *> * {__strong},std::vector<double>>(v55, (uint64_t)buf);
    *(_OWORD *)int v164 = *(_OWORD *)buf;
    uint64_t v56 = *(void *)&buf[16];
  }
  else
  {
    ULSettings::convert<std::initializer_list<double>,std::vector<double>>(_ZGRN10ULSettings14SettingsTraitsINS_23BlueAtlasRssiThresholdsEE12defaultValueE_, 4uLL, (uint64_t)buf);
    uint64_t v56 = *(void *)&buf[16];
    *(_OWORD *)int v164 = *(_OWORD *)buf;
  }
  uint64_t v165 = v56;

  long long v57 = +[ULDefaultsSingleton shared];
  long long v58 = [v57 defaultsDictionary];

  long long v59 = [NSString stringWithUTF8String:"ULBlueAtlasRssiScores"];
  int v60 = [v58 objectForKey:v59];
  if (v60 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    ULSettings::convert<NSArray<NSNumber *> * {__strong},std::vector<double>>(v60, (uint64_t)buf);
    *(_OWORD *)long long v162 = *(_OWORD *)buf;
    uint64_t v61 = *(void *)&buf[16];
  }
  else
  {
    ULSettings::convert<std::initializer_list<double>,std::vector<double>>(_ZGRN10ULSettings14SettingsTraitsINS_19BlueAtlasRssiScoresEE12defaultValueE_, 4uLL, (uint64_t)buf);
    uint64_t v61 = *(void *)&buf[16];
    *(_OWORD *)long long v162 = *(_OWORD *)buf;
  }
  uint64_t v163 = v61;

  std::string __p = 0;
  long long v160 = 0;
  int v161 = 0;
  uint64_t v62 = v178;
  unint64_t v146 = 0xEF7BDEF7BDEF7BDFLL * ((v40 - v41) >> 3);
  if (v178 == (uint64_t *)&v179)
  {
    double v92 = 0;
    long long v91 = 0;
  }
  else
  {
    double v63 = (double)(0xEF7BDEF7BDEF7BDFLL * ((v40 - v41) >> 3));
    do
    {
      double v65 = (float *)v62[5];
      unint64_t v64 = (float *)v62[6];
      float v66 = 0.0;
      for (j = (char *)v64 - (char *)v65; v65 != v64; float v66 = v66 + v68)
        float v68 = *v65++;
      double v69 = (double)(unint64_t)(j >> 2);
      CLMicroLocationBlueAtlasAlgorithms::calculateScoreForValue<double>((double **)v168, (uint64_t *)v166, v69 / v63);
      double v71 = v70;
      CLMicroLocationBlueAtlasAlgorithms::calculateScoreForValue<double>((double **)v164, (uint64_t *)v162, v66 / v69);
      double v73 = (v71 + v72) * 0.5;
      uint64_t v74 = v62[4];
      char v75 = (double *)v160;
      if (v160 >= v161)
      {
        uint64_t v77 = (double *)__p;
        uint64_t v78 = (v160 - (unsigned char *)__p) >> 4;
        unint64_t v79 = v78 + 1;
        if ((unint64_t)(v78 + 1) >> 60) {
          std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v80 = v161 - (unsigned char *)__p;
        if ((v161 - (unsigned char *)__p) >> 3 > v79) {
          unint64_t v79 = v80 >> 3;
        }
        if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v81 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v81 = v79;
        }
        if (v81)
        {
          uint64_t v82 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::uuids::uuid>>((uint64_t)&v161, v81);
          uint64_t v77 = (double *)__p;
          char v75 = (double *)v160;
        }
        else
        {
          uint64_t v82 = 0;
        }
        uint64_t v83 = (uint64_t *)&v82[16 * v78];
        uint64_t *v83 = v74;
        *((double *)v83 + 1) = v73;
        uint64_t v84 = (char *)v83;
        if (v75 != v77)
        {
          do
          {
            *((_OWORD *)v84 - 1) = *((_OWORD *)v75 - 1);
            v84 -= 16;
            v75 -= 2;
          }
          while (v75 != v77);
          uint64_t v77 = (double *)__p;
        }
        long long v76 = (char *)(v83 + 2);
        std::string __p = v84;
        long long v160 = (char *)(v83 + 2);
        int v161 = &v82[16 * v81];
        if (v77) {
          operator delete(v77);
        }
      }
      else
      {
        *(void *)long long v160 = v74;
        v75[1] = v73;
        long long v76 = (char *)(v75 + 2);
      }
      long long v160 = v76;
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_109);
      }
      uint64_t v85 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
      {
        v194.__r_.__value_.__r.__words[0] = CLMacAddress::newFromUint64((CLMacAddress *)v62[4], v86);
        CLMacAddress::toPrettyStr((CLMacAddress *)&v194, (std::string *)v151);
        uint64_t v87 = v151;
        if (SBYTE7(v152) < 0) {
          uint64_t v87 = (void **)v151[0];
        }
        *(_DWORD *)uint64_t buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&unsigned char buf[18] = 2082;
        *(void *)&buf[20] = v87;
        __int16 v182 = 2050;
        *(double *)v183 = v73;
        _os_log_impl(&dword_25631F000, v85, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"learnBlueAtlasModel\", \"bssid\":%{public, location:escape_only}s, \"score\":\"%{public}f\"}", buf, 0x26u);
        if (SBYTE7(v152) < 0) {
          operator delete(v151[0]);
        }
      }

      char v88 = (uint64_t *)v62[1];
      if (v88)
      {
        do
        {
          uint64_t v89 = v88;
          char v88 = (uint64_t *)*v88;
        }
        while (v88);
      }
      else
      {
        do
        {
          uint64_t v89 = (uint64_t *)v62[2];
          BOOL v90 = *v89 == (void)v62;
          uint64_t v62 = v89;
        }
        while (!v90);
      }
      uint64_t v62 = v89;
    }
    while (v89 != (uint64_t *)&v179);
    long long v91 = (double *)__p;
    double v92 = (double *)v160;
  }
  unint64_t v93 = 126 - 2 * __clz(((char *)v92 - (char *)v91) >> 4);
  if (v92 == v91) {
    uint64_t v94 = 0;
  }
  else {
    uint64_t v94 = v93;
  }
  std::__introsort<std::_ClassicAlgPolicy,CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_1 &,std::pair<unsigned long long,double> *,false>(v91, v92, v94, 1);
  long long v95 = +[ULDefaultsSingleton shared];
  uint64_t v96 = [v95 defaultsDictionary];

  uint64_t v97 = [NSString stringWithUTF8String:"ULBlueAtlasModelMaxSources"];
  uint64_t v98 = [v96 objectForKey:v97];
  if (v98 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    int v99 = [v98 intValue];
  }
  else {
    int v99 = [&unk_2704F2298 intValue];
  }
  int v100 = v99;

  unint64_t v101 = (v160 - (unsigned char *)__p) >> 4;
  if (v101 > v100)
  {
    if ((char *)__p + 16 * v100 != v160)
    {
      long long v160 = (char *)__p + 16 * v100;
      unint64_t v101 = (16 * v100) >> 4;
    }
    if (v101 != v100)
    {
      uint64_t v143 = _CLLogObjectForCategory_MicroLocation_Default();
      if (os_log_type_enabled(v143, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 68290051;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&unsigned char buf[18] = 2050;
        *(void *)&buf[20] = (v160 - (unsigned char *)__p) >> 4;
        __int16 v182 = 1026;
        *(_DWORD *)v183 = v100;
        *(_WORD *)&v183[4] = 2082;
        *(void *)&v183[6] = "assert";
        *(_WORD *)&v183[14] = 2081;
        *(void *)&v183[16] = "apScores.size() == (size_t)maxSources";
        _os_log_impl(&dword_25631F000, v143, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unexpected remaining number of sources\", \"remaining APs\":%{public}lu, \"maxSources\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x36u);
      }

      __int16 v144 = _CLLogObjectForCategory_MicroLocation_Default();
      if (os_signpost_enabled(v144))
      {
        *(_DWORD *)uint64_t buf = 68290051;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&unsigned char buf[18] = 2050;
        *(void *)&buf[20] = (v160 - (unsigned char *)__p) >> 4;
        __int16 v182 = 1026;
        *(_DWORD *)v183 = v100;
        *(_WORD *)&v183[4] = 2082;
        *(void *)&v183[6] = "assert";
        *(_WORD *)&v183[14] = 2081;
        *(void *)&v183[16] = "apScores.size() == (size_t)maxSources";
        _os_signpost_emit_with_name_impl(&dword_25631F000, v144, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unexpected remaining number of sources", "{\"msg%{public}.0s\":\"Unexpected remaining number of sources\", \"remaining APs\":%{public}lu, \"maxSources\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x36u);
      }

      unint64_t v145 = _CLLogObjectForCategory_MicroLocation_Default();
      if (os_log_type_enabled(v145, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t buf = 68290051;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&unsigned char buf[18] = 2050;
        *(void *)&buf[20] = (v160 - (unsigned char *)__p) >> 4;
        __int16 v182 = 1026;
        *(_DWORD *)v183 = v100;
        *(_WORD *)&v183[4] = 2082;
        *(void *)&v183[6] = "assert";
        *(_WORD *)&v183[14] = 2081;
        *(void *)&v183[16] = "apScores.size() == (size_t)maxSources";
        _os_log_impl(&dword_25631F000, v145, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Unexpected remaining number of sources\", \"remaining APs\":%{public}lu, \"maxSources\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x36u);
      }

      abort_report_np();
      __break(1u);
    }
  }
  unint64_t v102 = (int)ULSettings::get<ULSettings::BlueAtlasModelMinSources>();
  if (v102 < (v160 - (unsigned char *)__p) >> 4)
  {
    uint64_t v103 = +[ULDefaultsSingleton shared];
    uint64_t v104 = [v103 defaultsDictionary];

    uint64_t v105 = [NSString stringWithUTF8String:"ULBlueAtlasApSelectionScoreThreshold"];
    double v106 = [v104 objectForKey:v105];
    if (!v106) {
      goto LABEL_108;
    }
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      [v106 floatValue];
    }
    else {
LABEL_108:
    }
      [&unk_2704F10F0 floatValue];
    float v108 = v107;

    uint64_t v109 = v160;
    uint64_t v110 = (char *)__p + 16 * v102;
    if (v110 != v160)
    {
      double v111 = v108;
      uint64_t v112 = v110 + 16;
      while (*((double *)v112 - 1) >= v111)
      {
        BOOL v90 = v112 == v160;
        v112 += 16;
        if (v90) {
          goto LABEL_123;
        }
      }
      uint64_t v113 = v112 - 16;
      if (v112 - 16 != v160)
      {
        while (v112 != v109)
        {
          double v114 = *((double *)v112 + 1);
          if (v114 >= v111)
          {
            *(void *)uint64_t v113 = *(void *)v112;
            *((double *)v113 + 1) = v114;
            v113 += 16;
          }
          v112 += 16;
        }
        if (v113 != v109) {
          long long v160 = v113;
        }
      }
    }
  }
LABEL_123:
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_109);
  }
  uint64_t v115 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v115, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 2050;
    *(void *)&buf[20] = (v160 - (unsigned char *)__p) >> 4;
    _os_log_impl(&dword_25631F000, v115, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"learnBlueAtlasModel\", \"Num dominant APs\":%{public}lu}", buf, 0x1Cu);
  }

  char v155 = 0;
  LOBYTE(v156.var0) = 0;
  char v157 = 0;
  *(_OWORD *)id v151 = 0u;
  long long v152 = 0u;
  long long v153 = 0u;
  char v154 = 0;
  float v158 = -3.4028e38;
  int v117 = (CLMacAddress **)__p;
  unsigned int v118 = (CLMacAddress **)v160;
  *(void *)uint64_t buf = (char *)&v152 + 8;
  while (v117 != v118)
  {
    v194.__r_.__value_.__r.__words[0] = CLMacAddress::newFromUint64(*v117, v116);
    std::back_insert_iterator<std::vector<ULServiceQualityReasonEnum>>::operator=[abi:ne180100]((uint64_t *)buf, &v194);
    v117 += 2;
  }
  uint64_t v119 = *a4;
  uint64_t v120 = a4[1];
  v194.__r_.__value_.__r.__words[0] = (std::string::size_type)v151;
  while (v119 != v120)
  {
    *(_OWORD *)uint64_t buf = *(_OWORD *)(v119 + 40);
    std::back_insert_iterator<std::vector<boost::uuids::uuid>>::operator=[abi:ne180100]((void ***)&v194, buf);
    v119 += 64;
  }
  int v121 = +[ULDefaultsSingleton shared];
  double v122 = [v121 defaultsDictionary];

  int v123 = [NSString stringWithUTF8String:"ULBlueAtlasAssociatedAccessPointLocalizerEnabled"];
  v124 = [v122 objectForKey:v123];
  if (v124 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    int v125 = [v124 BOOLValue];
  }
  else {
    int v125 = [MEMORY[0x263EFFA88] BOOLValue];
  }
  int v126 = v125;

  if (v126)
  {
    uint64_t v129 = v172;
    for (uint64_t k = v173; v129 != k; v129 += 248)
    {
      if (*(unsigned char *)(v129 + 222))
      {
        uint64_t v131 = *(void *)(v129 + 208);
        if (!v131)
        {
          uint64_t v127 = (CLMicroLocationProto::RecordingEvent *)CLMicroLocationProto::RecordingEvent::default_instance(v127);
          uint64_t v131 = *((void *)v127 + 16);
        }
        if (*(float *)(v131 + 16) > v158)
        {
          unint64_t v132 = CLMacAddress::newFromUint64(*(CLMacAddress **)(v131 + 8), v128);
          if (!v157) {
            char v157 = 1;
          }
          v156.var0 = v132;
          float v158 = *(float *)(v131 + 16);
          if (onceToken_MicroLocation_Default != -1) {
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_109);
          }
          uint64_t v133 = (id)logObject_MicroLocation_Default;
          if (os_log_type_enabled(v133, OS_LOG_TYPE_DEFAULT))
          {
            if (!v157) {
              std::__throw_bad_optional_access[abi:ne180100]();
            }
            CLMacAddress::toCLStr(&v156, &v194);
            int v134 = &v194;
            if ((v194.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              int v134 = (std::string *)v194.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)uint64_t buf = 68289539;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)&uint8_t buf[8] = 2082;
            *(void *)&buf[10] = "";
            *(_WORD *)&unsigned char buf[18] = 2081;
            *(void *)&buf[20] = v134;
            __int16 v182 = 2050;
            *(double *)v183 = v158;
            _os_log_impl(&dword_25631F000, v133, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"learnBlueAtlasModel, updating associated AP\", \"MAC Address\":%{private, location:escape_only}s, \"Rssi\":\"%{public}f\"}", buf, 0x26u);
            if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v194.__r_.__value_.__l.__data_);
            }
          }
        }
      }
    }
  }
  *(void *)a5 = 0x300000005;
  *(unsigned char *)(a5 + 8) = 1;
  *(_DWORD *)(a5 + 12) = 1;
  *(_DWORD *)(a5 + 296) = v146;
  *(_DWORD *)(a5 + 300) = CLMicroLocationFingerprintVector::size((CLMicroLocationFingerprintVector *)&v171);
  *(_DWORD *)(a5 + 304) = CLMicroLocationFingerprintVector::size((CLMicroLocationFingerprintVector *)&v171);
  *(_DWORD *)(a5 + 308) = 0;
  *(_DWORD *)(a5 + 312) = ((void)v153 - *((void *)&v152 + 1)) >> 3;
  *(void *)(a5 + 316) = 0;
  std::optional<CLMicroLocationModel::BlueAtlasData>::operator=[abi:ne180100]<CLMicroLocationModel::BlueAtlasData,void>(a5 + 200, (uint64_t)v151);
  *(_OWORD *)&v194.__r_.__value_.__l.__data_ = 0uLL;
  *(_DWORD *)uint64_t buf = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)buf);
  v194.__r_.__value_.__r.__words[0] = boost::uuids::random_generator_pure::operator()((uint64_t)buf);
  v194.__r_.__value_.__l.__size_ = v135;
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)buf);
  v150[0] = CLMicroLocationFingerprintVector::begin((CLMicroLocationFingerprintVector *)&v171);
  v150[1] = v136;
  v149[0] = CLMicroLocationFingerprintVector::end((CLMicroLocationFingerprintVector *)&v171);
  v149[1] = v137;
  while (CLMicroLocationFingerprintVector::Iterator::operator!=(v150, v149))
  {
    uint64_t v139 = CLMicroLocationFingerprintVector::Iterator::operator*(v150);
    std::unordered_set<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::unordered_set((uint64_t)buf, v139);
    long long v140 = *(_OWORD *)(v139 + 40);
    uint64_t v184 = *(void *)(v139 + 56);
    *(_OWORD *)&v183[10] = v140;
    std::unordered_set<CLMicroLocationProto::DataType>::unordered_set((uint64_t)v185, v139 + 64);
    std::unordered_map<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>::unordered_map((uint64_t)v186, v139 + 104);
    long long v141 = *(_OWORD *)(v139 + 144);
    int v187 = *(_DWORD *)(v139 + 160);
    *(_OWORD *)&v186[40] = v141;
    uint64_t v189 = 0;
    uint64_t v190 = 0;
    long long v188 = 0;
    std::vector<CLMicroLocationProto::ConfidenceReason>::__init_with_size[abi:ne180100]<CLMicroLocationProto::ConfidenceReason*,CLMicroLocationProto::ConfidenceReason*>(&v188, *(const void **)(v139 + 168), *(void *)(v139 + 176), (uint64_t)(*(void *)(v139 + 176) - *(void *)(v139 + 168)) >> 2);
    CLMicroLocationModel::addFingerprint((CLMicroLocationModel *)a5, (const CLMicroLocationFingerprint *)buf, (const uuid *)&v194, a2);
    CLMicroLocationModel::addRecording((CLMicroLocationModel *)a5, (uuid *)&v194, (const uuid *)&v183[10]);
    if (v188)
    {
      uint64_t v189 = v188;
      operator delete(v188);
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v186);
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v185);
    std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table((uint64_t)buf);
    CLMicroLocationFingerprintVector::Iterator::operator++((uint64_t)v150);
  }
  CLMicroLocationBlueAtlasAlgorithms::validateBlueAtlasModelQuality((CLMicroLocationBlueAtlasAlgorithms *)a5, v138);
  if (*((void *)&v152 + 1))
  {
    *(void *)&long long v153 = *((void *)&v152 + 1);
    operator delete(*((void **)&v152 + 1));
  }
  if (v151[0])
  {
    v151[1] = v151[0];
    operator delete(v151[0]);
  }
  if (__p)
  {
    long long v160 = (char *)__p;
    operator delete(__p);
  }
  if (v162[0]) {
    operator delete(v162[0]);
  }
  if (v164[0]) {
    operator delete(v164[0]);
  }
  if (v166[0]) {
    operator delete(v166[0]);
  }
  if (v168[0]) {
    operator delete(v168[0]);
  }
  uint64_t v142 = v171;
  uint64_t v171 = 0;
  if (v142) {
    (*(void (**)(uint64_t))(*(void *)v142 + 8))(v142);
  }
  *(void *)uint64_t buf = &v172;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v175[0])
  {
    v175[1] = v175[0];
    operator delete(v175[0]);
  }
  std::__function::__value_func<CLMicroLocationFingerprintConfiguration ()(void)>::~__value_func[abi:ne180100](v193);
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&v176, v177[0]);
  std::__tree<std::__value_type<unsigned long long,std::vector<float>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<float>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<float>>>>::destroy((uint64_t)&v178, v179);
}

void sub_2564AD5D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,char a63)
{
  if (__p)
  {
    a37 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a39) {
    operator delete(a39);
  }
  if (a43) {
    operator delete(a43);
  }
  if (a47) {
    operator delete(a47);
  }
  if (a51) {
    operator delete(a51);
  }
  uint64_t v73 = a56;
  a56 = 0;
  if (v73) {
    (*(void (**)(uint64_t))(*(void *)v73 + 8))(v73);
  }
  a25 = (uint64_t)&a57;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  if (a60)
  {
    a61 = (uint64_t)a60;
    operator delete(a60);
  }
  std::__function::__value_func<CLMicroLocationFingerprintConfiguration ()(void)>::~__value_func[abi:ne180100]((void *)(v71 - 208));
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&a63, (void *)a64);
  std::__tree<std::__value_type<unsigned long long,std::vector<float>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<float>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<float>>>>::destroy((uint64_t)&a66, (void *)a67);
  CLMicroLocationModel::~CLMicroLocationModel(v67);
  _Unwind_Resume(a1);
}

double **CLMicroLocationBlueAtlasAlgorithms::calculateScoreForValue<double>(double **result, uint64_t *a2, double a3)
{
  uint64_t v4 = *result;
  uint64_t v3 = result[1];
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  if ((char *)v3 - (char *)*result == v5 - *a2)
  {
    if (v4 != v3)
    {
      uint64_t v7 = v4 + 1;
      while (v7 != v3)
      {
        double v9 = *(v7 - 1);
        double v8 = *v7++;
        if (v8 > v9)
        {
          __n128 result = (double **)CLMicroLocationBlueAtlasAlgorithms::calculateScoreForValue<double>();
          break;
        }
      }
    }
    if (v4 != v3 && v6 != v5)
    {
      uint64_t v10 = v4 + 1;
      uint64_t v11 = v6 + 8;
      do
      {
        if (*(v10 - 1) < a3) {
          break;
        }
        if (v10 == v3) {
          break;
        }
        ++v10;
        BOOL v12 = v11 == v5;
        v11 += 8;
      }
      while (!v12);
    }
  }
  else
  {
    uint64_t v13 = CLMicroLocationBlueAtlasAlgorithms::calculateScoreForValue<double>();
    return (double **)ULSettings::get<ULSettings::BlueAtlasModelMinSources>(v13);
  }
  return result;
}

uint64_t ULSettings::get<ULSettings::BlueAtlasModelMinSources>()
{
  os_log_t v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  uint64_t v2 = [NSString stringWithUTF8String:"ULBlueAtlasModelMinSources"];
  uint64_t v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 intValue];
  }
  else {
    uint64_t v4 = [&unk_2704F2268 intValue];
  }
  uint64_t v5 = v4;

  return v5;
}

void sub_2564ADB74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationBlueAtlasAlgorithms::validateBlueAtlasModelQuality(CLMicroLocationBlueAtlasAlgorithms *this, CLMicroLocationModel *a2)
{
  uint64_t v109 = *MEMORY[0x263EF8340];
  std::string __p = 0;
  double v92 = 0;
  unint64_t v93 = 0;
  if (*((unsigned char *)this + 288)) {
    BOOL v3 = *((unsigned char *)this + 272) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    BOOL v82 = 0;
  }
  else
  {
    float v4 = *((float *)this + 70);
    uint64_t v5 = +[ULDefaultsSingleton shared];
    uint64_t v6 = [v5 defaultsDictionary];

    uint64_t v7 = [NSString stringWithUTF8String:"ULBlueAtlasStrongAssociatedAccessPointThreshold"];
    uint64_t v8 = [v6 objectForKey:v7];
    double v9 = (void *)v8;
    if (v8 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
      [v9 floatValue];
    }
    else {
      [&unk_2704F1100 floatValue];
    }
    float v11 = v10;

    BOOL v82 = v4 >= v11;
  }
  unint64_t v12 = *((unsigned int *)this + 75);
  if (v12 >= (int)ULSettings::get<ULSettings::BlueAtlasModelMinRecordings>())
  {
    int v83 = 3;
  }
  else
  {
    if (v82) {
      int v13 = 2;
    }
    else {
      int v13 = 1;
    }
    int v83 = v13;
    uint64_t v14 = (v92 - (unsigned char *)__p) >> 2;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 62) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v16 = v93 - (unsigned char *)__p;
    if ((v93 - (unsigned char *)__p) >> 1 > v15) {
      unint64_t v15 = v16 >> 1;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17) {
      uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationProto::ConfidenceReason>>((uint64_t)&v93, v17);
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v19 = &v18[4 * v14];
    *(_DWORD *)uint64_t v19 = 3;
    std::string __p = v19;
    unint64_t v93 = &v18[4 * v17];
    double v92 = v19 + 4;
  }
  if (*((unsigned char *)this + 288)) {
    unint64_t v20 = (uint64_t)(*((void *)this + 29) - *((void *)this + 28)) >> 3;
  }
  else {
    unint64_t v20 = 0;
  }
  unint64_t v80 = v20;
  if (v20 < (int)ULSettings::get<ULSettings::BlueAtlasModelMinSources>())
  {
    if (v83 == 3) {
      int v21 = 2;
    }
    else {
      int v21 = v83;
    }
    if (!v82) {
      int v21 = 1;
    }
    int v83 = v21;
    double v22 = v92;
    if (v92 >= v93)
    {
      int v24 = (char *)__p;
      uint64_t v25 = (v92 - (unsigned char *)__p) >> 2;
      unint64_t v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 62) {
        std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v27 = v93 - (unsigned char *)__p;
      if ((v93 - (unsigned char *)__p) >> 1 > v26) {
        unint64_t v26 = v27 >> 1;
      }
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v28 = v26;
      }
      if (v28)
      {
        unint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationProto::ConfidenceReason>>((uint64_t)&v93, v28);
        int v24 = (char *)__p;
        double v22 = v92;
      }
      else
      {
        unint64_t v29 = 0;
      }
      id v30 = &v29[4 * v25];
      std::string v31 = &v29[4 * v28];
      *(_DWORD *)id v30 = 1;
      uint64_t v23 = v30 + 4;
      while (v22 != v24)
      {
        int v32 = *((_DWORD *)v22 - 1);
        v22 -= 4;
        *((_DWORD *)v30 - 1) = v32;
        v30 -= 4;
      }
      std::string __p = v30;
      double v92 = v23;
      unint64_t v93 = v31;
      if (v24) {
        operator delete(v24);
      }
    }
    else
    {
      *(_DWORD *)double v92 = 1;
      uint64_t v23 = v22 + 4;
    }
    double v92 = v23;
  }
  v90[0] = 0;
  v90[1] = 0;
  unint64_t v88 = 0;
  uint64_t v89 = (uint64_t *)v90;
  unint64_t v86 = (uint64_t *)&v87;
  uint64_t v87 = 0;
  uint64_t v33 = *((void *)this + 41);
  for (uint64_t i = *((void *)this + 42); v33 != i; v33 += 32)
  {
    for (uint64_t j = *(float **)(*(void *)v33 + 16); j; uint64_t j = *(float **)j)
    {
      if (*((_DWORD *)j + 6) == 1)
      {
        std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v85, (uint64_t)(j + 8));
        if (*((unsigned char *)this + 288))
        {
          unint64_t v35 = (CLMacAddress *)*((void *)this + 28);
          long long v36 = (CLMacAddress *)*((void *)this + 29);
          std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)buf, (uint64_t)v85);
          if (v35 != v36)
          {
            while (1)
            {
              if (HIDWORD(v98)) {
                std::__throw_bad_variant_access[abi:ne180100]();
              }
              uint64_t v37 = *(void *)buf;
              if (v37 == CLMacAddress::toUint64(v35)) {
                break;
              }
              if (++v35 == v36)
              {
                unint64_t v35 = v36;
                break;
              }
            }
          }
          int v38 = (CLMacAddress *)*((void *)this + 29);
          std::__variant_detail::__dtor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)buf);
          std::__variant_detail::__dtor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v85);
          if (v35 != v38)
          {
            *(void *)uint64_t buf = j + 8;
            long long v39 = std::__tree<std::__value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,unsigned long>,std::__map_value_compare<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::__value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,unsigned long>,std::less<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,true>,std::allocator<std::__value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,unsigned long>>>::__emplace_unique_key_args<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::piecewise_construct_t const&,std::tuple<std::variant<unsigned long long,boost::uuids::uuid,std::string> const&>,std::tuple<>>(&v89, (uint64_t)(j + 8), (uint64_t)&std::piecewise_construct, (uint64_t *)buf);
            ++v39[8];
            float v40 = j[7];
            uint64_t v41 = +[ULDefaultsSingleton shared];
            unint64_t v42 = [v41 defaultsDictionary];

            uint64_t v43 = [NSString stringWithUTF8String:"ULBlueAtlasModelValidationMinRssi"];
            unint64_t v44 = [v42 objectForKey:v43];
            if (!v44) {
              goto LABEL_68;
            }
            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              int v45 = [v44 intValue];
            }
            else {
LABEL_68:
            }
              int v45 = objc_msgSend(&unk_2704F22B0, "intValue", v80);
            int v46 = v45;

            if (v40 > (float)v46) {
              std::__tree<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::__emplace_unique_key_args<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::variant<unsigned long long,boost::uuids::uuid,std::string> const&>(&v86, (uint64_t)(j + 8), (uint64_t)(j + 8));
            }
          }
        }
        else
        {
          std::__variant_detail::__dtor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v85);
        }
      }
    }
  }
  uint64_t v47 = +[ULDefaultsSingleton shared];
  BOOL v48 = [v47 defaultsDictionary];

  char v49 = [NSString stringWithUTF8String:"ULBlueAtlasModelValidationMinAppearanceRate"];
  id v50 = [v48 objectForKey:v49];
  if (v50 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    [v50 floatValue];
  }
  else {
    [&unk_2704F10E0 floatValue];
  }
  float v52 = v51;

  std::bad_cast v53 = v89;
  if (v89 == (uint64_t *)v90)
  {
    uint64_t v54 = 0;
    unint64_t v55 = 0x26B2AE000uLL;
  }
  else
  {
    uint64_t v54 = 0;
    unint64_t v55 = 0x26B2AE000;
    do
    {
      if ((float)(v52 * (float)*((unsigned int *)this + 75)) <= (float)(unint64_t)v53[8]) {
        ++v54;
      }
      uint64_t v56 = (uint64_t *)v53[1];
      if (v56)
      {
        do
        {
          long long v57 = v56;
          uint64_t v56 = (uint64_t *)*v56;
        }
        while (v56);
      }
      else
      {
        do
        {
          long long v57 = (uint64_t *)v53[2];
          BOOL v3 = *v57 == (void)v53;
          std::bad_cast v53 = v57;
        }
        while (!v3);
      }
      std::bad_cast v53 = v57;
    }
    while (v57 != (uint64_t *)v90);
  }
  long long v58 = [(id)(v55 + 2448) shared];
  long long v59 = [v58 defaultsDictionary];

  int v60 = [NSString stringWithUTF8String:"ULBlueAtlasModelValidationMinNumberOfValidAps"];
  uint64_t v61 = [v59 objectForKey:v60];
  if (v61 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    int v62 = [v61 intValue];
  }
  else {
    int v62 = [&unk_2704F2250 intValue];
  }
  int v63 = v62;

  if (v88 < v63 || v54 < v63)
  {
    int v64 = v83;
    if (v82) {
      int v65 = 2;
    }
    else {
      int v65 = 1;
    }
    if (v83 >= v65) {
      int v64 = v65;
    }
    int v83 = v64;
    float v66 = v92;
    if (v92 >= v93)
    {
      float v68 = (char *)__p;
      uint64_t v69 = (v92 - (unsigned char *)__p) >> 2;
      unint64_t v70 = v69 + 1;
      if ((unint64_t)(v69 + 1) >> 62) {
        std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v71 = v93 - (unsigned char *)__p;
      if ((v93 - (unsigned char *)__p) >> 1 > v70) {
        unint64_t v70 = v71 >> 1;
      }
      if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v72 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v72 = v70;
      }
      if (v72)
      {
        uint64_t v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationProto::ConfidenceReason>>((uint64_t)&v93, v72);
        float v68 = (char *)__p;
        float v66 = v92;
      }
      else
      {
        uint64_t v73 = 0;
      }
      uint64_t v74 = &v73[4 * v69];
      char v75 = &v73[4 * v72];
      *(_DWORD *)uint64_t v74 = 8;
      unint64_t v67 = v74 + 4;
      while (v66 != v68)
      {
        int v76 = *((_DWORD *)v66 - 1);
        v66 -= 4;
        *((_DWORD *)v74 - 1) = v76;
        v74 -= 4;
      }
      std::string __p = v74;
      double v92 = v67;
      unint64_t v93 = v75;
      if (v68) {
        operator delete(v68);
      }
    }
    else
    {
      *(_DWORD *)double v92 = 8;
      unint64_t v67 = v66 + 4;
    }
    double v92 = v67;
  }
  CLMicroLocationModel::setQualityIndicator((uint64_t)this, v83);
  CLMicroLocationModel::setCandidateQualityIndicator((uint64_t)this, v83);
  CLMicroLocationModel::setCandidateQualityReasons((uint64_t)this, (uint64_t)&__p);
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_109);
  }
  uint64_t v77 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v78 = *((unsigned int *)this + 75);
    int v79 = ULSettings::get<ULSettings::BlueAtlasModelMinRecordings>();
    *(_DWORD *)uint64_t buf = 68290562;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v95 = 2082;
    uint64_t v96 = "";
    __int16 v97 = 2050;
    uint64_t v98 = v78;
    __int16 v99 = 1026;
    int v100 = v79;
    __int16 v101 = 2050;
    uint64_t v102 = v81;
    __int16 v103 = 2050;
    unint64_t v104 = v88;
    __int16 v105 = 2050;
    uint64_t v106 = v54;
    __int16 v107 = 2050;
    uint64_t v108 = v83;
    _os_log_impl(&dword_25631F000, v77, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"validateBlueAtlasModelQuality\", \"Num input fingerprints\":%{public}lu, \"Minimal num fingerprints\":%{public}d, \"Num WiFi APs\":%{public}lu, \"Num APs with valid RSSI\":%{public}lu, \"Num APs with valid appearance rate\":%{public}lu, \"Model Quality\":%{public}lu}", buf, 0x4Au);
  }

  std::__tree<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::destroy((uint64_t)&v86, v87);
  std::__tree<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::destroy((uint64_t)&v89, v90[0]);
  if (__p)
  {
    double v92 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2564AE494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::BlueAtlasModelMinRecordings>()
{
  os_log_t v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  uint64_t v2 = [NSString stringWithUTF8String:"ULBlueAtlasModelMinRecordings"];
  BOOL v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 intValue];
  }
  else {
    uint64_t v4 = [&unk_2704F2238 intValue];
  }
  uint64_t v5 = v4;

  return v5;
}

void sub_2564AE6C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_87()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

void sub_2564AE924(_Unwind_Exception *a1)
{
  uint64_t v5 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v5;
    operator delete(v5);
  }

  _Unwind_Resume(a1);
}

void sub_2564AEA94(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<unsigned long long,std::vector<float>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<float>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<float>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned long long,std::vector<float>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<float>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<float>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long long,std::vector<float>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<float>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<float>>>>::destroy(a1, a2[1]);
    uint64_t v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

void std::__function::__func<CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_0,std::allocator<CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_0>,BOOL ()(void)>::~__func()
{
}

void *std::__function::__func<CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_0,std::allocator<CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_0>,BOOL ()(void)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_2704E1D28;
  return result;
}

void std::__function::__func<CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_0,std::allocator<CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_0>,BOOL ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_2704E1D28;
}

uint64_t std::__function::__func<CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_0,std::allocator<CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_0>,BOOL ()(void)>::operator()()
{
  return 0;
}

uint64_t std::__function::__func<CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_0,std::allocator<CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_0>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_0,std::allocator<CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_0>,BOOL ()(void)>::target_type()
{
}

uint64_t *std::__tree<std::__value_type<unsigned long long,std::vector<float>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<float>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<float>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        double v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    double v9 = a1 + 1;
LABEL_10:
    float v11 = (uint64_t *)operator new(0x40uLL);
    uint64_t v12 = **a4;
    int v11[6] = 0;
    v11[7] = 0;
    void v11[4] = v12;
    uint64_t v11[5] = 0;
    std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

double *std::__introsort<std::_ClassicAlgPolicy,CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_1 &,std::pair<unsigned long long,double> *,false>(double *result, double *a2, uint64_t a3, char a4)
{
  unint64_t v9 = (unint64_t)result;
LABEL_2:
  unint64_t v10 = (double *)v9;
  while (1)
  {
    unint64_t v9 = (unint64_t)v10;
    uint64_t v11 = (char *)a2 - (char *)v10;
    unint64_t v12 = ((char *)a2 - (char *)v10) >> 4;
    if (v5 || !v4)
    {
      switch(v12)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          double v45 = *(a2 - 1);
          double v46 = v10[1];
          if (v45 > v46)
          {
            double v47 = *v10;
            double *v10 = *(a2 - 2);
            *(a2 - 2) = v47;
            v10[1] = v45;
            *(a2 - 1) = v46;
          }
          break;
        case 3uLL:
          __n128 result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_1 &,std::pair<unsigned long long,double> *>(v10, v10 + 2, a2 - 2);
          break;
        case 4uLL:
          __n128 result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_1 &,std::pair<unsigned long long,double> *>(v10, v10 + 2, v10 + 4, a2 - 2);
          break;
        case 5uLL:
          __n128 result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_1 &,std::pair<unsigned long long,double> *>(v10, v10 + 2, v10 + 4, v10 + 6);
          double v48 = *(a2 - 1);
          double v49 = v10[7];
          if (v48 > v49)
          {
            uint64_t v50 = *((void *)v10 + 6);
            v10[6] = *(a2 - 2);
            *((void *)a2 - 2) = v50;
            v10[7] = v48;
            *(a2 - 1) = v49;
            double v51 = v10[7];
            double v52 = v10[5];
            if (v51 > v52)
            {
              uint64_t v53 = *((void *)v10 + 4);
              uint64_t v54 = *((void *)v10 + 6);
              *((void *)v10 + 4) = v54;
              *((void *)v10 + 6) = v53;
              void v10[5] = v51;
              v10[7] = v52;
              double v55 = v10[3];
              if (v51 > v55)
              {
                uint64_t v56 = *((void *)v10 + 2);
                *((void *)v10 + 2) = v54;
                *((void *)v10 + 4) = v56;
                v10[3] = v51;
                void v10[5] = v55;
                double v57 = v10[1];
                if (v51 > v57)
                {
                  double v58 = *v10;
                  *(void *)unint64_t v10 = v54;
                  void v10[2] = v58;
                  v10[1] = v51;
                  v10[3] = v57;
                }
              }
            }
          }
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v11 <= 383) {
      break;
    }
    if (!a3)
    {
      if (v10 == a2) {
        return result;
      }
      int64_t v70 = (v12 - 2) >> 1;
      int64_t v71 = v70;
      do
      {
        int64_t v72 = v71;
        if (v70 >= v71)
        {
          uint64_t v73 = (2 * v71) | 1;
          uint64_t v74 = &v10[2 * v73];
          if (2 * v72 + 2 < (uint64_t)v12 && v74[1] > v74[3])
          {
            v74 += 2;
            uint64_t v73 = 2 * v72 + 2;
          }
          double v75 = v74[1];
          double v76 = v10[2 * v72 + 1];
          if (v75 <= v76)
          {
            uint64_t v77 = &v10[2 * v72];
            uint64_t v78 = *(void *)v77;
            do
            {
              int v79 = v77;
              uint64_t v77 = v74;
              *int v79 = *v74;
              v79[1] = v75;
              if (v70 < v73) {
                break;
              }
              uint64_t v80 = 2 * v73;
              uint64_t v73 = (2 * v73) | 1;
              uint64_t v74 = &v10[2 * v73];
              uint64_t v81 = v80 + 2;
              if (v81 < (uint64_t)v12 && v74[1] > v74[3])
              {
                v74 += 2;
                uint64_t v73 = v81;
              }
              double v75 = v74[1];
            }
            while (v75 <= v76);
            *(void *)uint64_t v77 = v78;
            v77[1] = v76;
          }
        }
        int64_t v71 = v72 - 1;
      }
      while (v72);
      uint64_t v82 = (unint64_t)v11 >> 4;
      while (2)
      {
        uint64_t v83 = 0;
        double v84 = *v10;
        double v85 = v10[1];
        unint64_t v86 = v10;
        do
        {
          uint64_t v87 = v86;
          v86 += 2 * v83 + 2;
          uint64_t v88 = 2 * v83;
          uint64_t v83 = (2 * v83) | 1;
          uint64_t v89 = v88 + 2;
          if (v89 < v82 && v86[1] > v86[3])
          {
            v86 += 2;
            uint64_t v83 = v89;
          }
          *uint64_t v87 = *v86;
          v87[1] = v86[1];
        }
        while (v83 <= (uint64_t)((unint64_t)(v82 - 2) >> 1));
        if (v86 == a2 - 2)
        {
          double *v86 = v84;
          goto LABEL_117;
        }
        double *v86 = *(a2 - 2);
        v86[1] = *(a2 - 1);
        *(a2 - 2) = v84;
        *(a2 - 1) = v85;
        uint64_t v90 = (char *)v86 - (char *)v10 + 16;
        if (v90 >= 17)
        {
          unint64_t v91 = (((unint64_t)v90 >> 4) - 2) >> 1;
          double v92 = v10[2 * v91 + 1];
          double v85 = v86[1];
          if (v92 > v85)
          {
            uint64_t v93 = *(void *)v86;
            do
            {
              uint64_t v94 = v86;
              unint64_t v86 = &v10[2 * v91];
              double *v94 = *v86;
              v94[1] = v92;
              if (!v91) {
                break;
              }
              unint64_t v91 = (v91 - 1) >> 1;
              double v92 = v10[2 * v91 + 1];
            }
            while (v92 > v85);
            *(void *)unint64_t v86 = v93;
LABEL_117:
            v86[1] = v85;
          }
        }
        a2 -= 2;
        if (v82-- <= 2) {
          return result;
        }
        continue;
      }
    }
    unint64_t v13 = v12 >> 1;
    uint64_t v14 = &v10[2 * (v12 >> 1)];
    if ((unint64_t)v11 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_1 &,std::pair<unsigned long long,double> *>((double *)v9, (double *)(v9 + 16 * (v12 >> 1)), a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_1 &,std::pair<unsigned long long,double> *>((double *)(v9 + 16), v14 - 2, a2 - 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_1 &,std::pair<unsigned long long,double> *>((double *)(v9 + 32), (double *)(v9 + 16 + 16 * v13), a2 - 6);
      __n128 result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_1 &,std::pair<unsigned long long,double> *>(v14 - 2, v14, (double *)(v9 + 16 + 16 * v13));
      double v15 = *(double *)v9;
      *(double *)unint64_t v9 = *v14;
      double *v14 = v15;
      uint64_t v16 = *(void *)(v9 + 8);
      *(double *)(v9 + 8) = v14[1];
      *((void *)v14 + 1) = v16;
    }
    else
    {
      __n128 result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_1 &,std::pair<unsigned long long,double> *>((double *)(v9 + 16 * (v12 >> 1)), (double *)v9, a2 - 2);
    }
    --a3;
    if (a4)
    {
      double v17 = *(double *)(v9 + 8);
LABEL_13:
      uint64_t v18 = 0;
      double v19 = *(double *)v9;
      do
      {
        double v20 = *(double *)(v9 + v18 + 24);
        v18 += 16;
      }
      while (v20 > v17);
      int v21 = (double *)(v9 + v18);
      double v22 = a2;
      if (v18 == 16)
      {
        uint64_t v25 = a2;
        while (v21 < v25)
        {
          uint64_t v23 = v25 - 2;
          double v26 = *(v25 - 1);
          v25 -= 2;
          if (v26 > v17) {
            goto LABEL_23;
          }
        }
        uint64_t v23 = v25;
      }
      else
      {
        do
        {
          uint64_t v23 = v22 - 2;
          double v24 = *(v22 - 1);
          v22 -= 2;
        }
        while (v24 <= v17);
      }
LABEL_23:
      unint64_t v10 = v21;
      if (v21 < v23)
      {
        uint64_t v27 = v23;
        do
        {
          double v28 = *v10;
          double *v10 = *v27;
          double *v27 = v28;
          uint64_t v29 = *((void *)v10 + 1);
          v10[1] = v27[1];
          *((void *)v27 + 1) = v29;
          do
          {
            double v30 = v10[3];
            v10 += 2;
          }
          while (v30 > v17);
          do
          {
            double v31 = *(v27 - 1);
            v27 -= 2;
          }
          while (v31 <= v17);
        }
        while (v10 < v27);
      }
      if (v10 - 2 != (double *)v9)
      {
        *(double *)unint64_t v9 = *(v10 - 2);
        *(double *)(v9 + 8) = *(v10 - 1);
      }
      *(v10 - 2) = v19;
      *(v10 - 1) = v17;
      if (v21 < v23) {
        goto LABEL_34;
      }
      BOOL v32 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_1 &,std::pair<unsigned long long,double> *>((double *)v9, v10 - 2);
      __n128 result = (double *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_1 &,std::pair<unsigned long long,double> *>(v10, a2);
      if (result)
      {
        a2 = v10 - 2;
        if (v32) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v32)
      {
LABEL_34:
        __n128 result = (double *)std::__introsort<std::_ClassicAlgPolicy,CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_1 &,std::pair<unsigned long long,double> *,false>(v9, v10 - 2, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      double v17 = *(double *)(v9 + 8);
      if (*(double *)(v9 - 8) > v17) {
        goto LABEL_13;
      }
      if (v17 <= *(a2 - 1))
      {
        unint64_t v35 = (double *)(v9 + 16);
        do
        {
          unint64_t v10 = v35;
          if (v35 >= a2) {
            break;
          }
          double v36 = v35[1];
          v35 += 2;
        }
        while (v17 <= v36);
      }
      else
      {
        unint64_t v33 = v9;
        do
        {
          unint64_t v10 = (double *)(v33 + 16);
          double v34 = *(double *)(v33 + 24);
          v33 += 16;
        }
        while (v17 <= v34);
      }
      uint64_t v37 = a2;
      if (v10 < a2)
      {
        int v38 = a2;
        do
        {
          uint64_t v37 = v38 - 2;
          double v39 = *(v38 - 1);
          v38 -= 2;
        }
        while (v17 > v39);
      }
      double v40 = *(double *)v9;
      while (v10 < v37)
      {
        double v41 = *v10;
        double *v10 = *v37;
        double *v37 = v41;
        uint64_t v42 = *((void *)v10 + 1);
        v10[1] = v37[1];
        *((void *)v37 + 1) = v42;
        do
        {
          double v43 = v10[3];
          v10 += 2;
        }
        while (v17 <= v43);
        do
        {
          double v44 = *(v37 - 1);
          v37 -= 2;
        }
        while (v17 > v44);
      }
      BOOL v4 = (unint64_t)(v10 - 2) >= v9;
      BOOL v5 = v10 - 2 == (double *)v9;
      if (v10 - 2 != (double *)v9)
      {
        *(double *)unint64_t v9 = *(v10 - 2);
        *(double *)(v9 + 8) = *(v10 - 1);
      }
      a4 = 0;
      *(v10 - 2) = v40;
      *(v10 - 1) = v17;
    }
  }
  long long v59 = v10 + 2;
  BOOL v61 = v10 == a2 || v59 == a2;
  if (a4)
  {
    if (!v61)
    {
      uint64_t v62 = 0;
      int v63 = v10;
      do
      {
        double v64 = v63[3];
        double v65 = v63[1];
        int v63 = v59;
        if (v64 > v65)
        {
          uint64_t v66 = *(void *)v59;
          uint64_t v67 = v62;
          while (1)
          {
            float v68 = (double *)((char *)v10 + v67);
            v68[2] = *(double *)((char *)v10 + v67);
            v68[3] = *(double *)((char *)v10 + v67 + 8);
            if (!v67) {
              break;
            }
            v67 -= 16;
            if (v64 <= *(v68 - 1))
            {
              uint64_t v69 = (uint64_t)v10 + v67 + 16;
              goto LABEL_85;
            }
          }
          uint64_t v69 = (uint64_t)v10;
LABEL_85:
          *(void *)uint64_t v69 = v66;
          *(double *)(v69 + 8) = v64;
        }
        long long v59 = v63 + 2;
        v62 += 16;
      }
      while (v63 + 2 != a2);
    }
  }
  else if (!v61)
  {
    uint64_t v96 = v10 + 3;
    do
    {
      double v97 = *(double *)(v9 + 24);
      double v98 = *(double *)(v9 + 8);
      unint64_t v9 = (unint64_t)v59;
      if (v97 > v98)
      {
        uint64_t v99 = *(void *)v59;
        int v100 = v96;
        do
        {
          __int16 v101 = v100;
          *(v100 - 1) = *(v100 - 3);
          uint64_t v102 = *((void *)v100 - 2);
          v100 -= 2;
          *(void *)__int16 v101 = v102;
        }
        while (v97 > *(v101 - 4));
        *((void *)v100 - 1) = v99;
        *int v100 = v97;
      }
      long long v59 = (double *)(v9 + 16);
      v96 += 2;
    }
    while ((double *)(v9 + 16) != a2);
  }
  return result;
}

double *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_1 &,std::pair<unsigned long long,double> *>(double *result, double *a2, double *a3)
{
  double v3 = a2[1];
  double v4 = result[1];
  double v5 = a3[1];
  if (v3 <= v4)
  {
    if (v5 > v3)
    {
      double v7 = *a2;
      *a2 = *a3;
      *a3 = v7;
      a2[1] = v5;
      a3[1] = v3;
      double v8 = a2[1];
      double v9 = result[1];
      if (v8 > v9)
      {
        double v10 = *result;
        *__n128 result = *a2;
        *a2 = v10;
        result[1] = v8;
        a2[1] = v9;
      }
    }
  }
  else
  {
    double v6 = *result;
    if (v5 <= v3)
    {
      *__n128 result = *a2;
      *a2 = v6;
      result[1] = v3;
      a2[1] = v4;
      double v11 = a3[1];
      if (v11 <= v4) {
        return result;
      }
      *a2 = *a3;
      *a3 = v6;
      a2[1] = v11;
    }
    else
    {
      *__n128 result = *a3;
      *a3 = v6;
      result[1] = v5;
    }
    a3[1] = v4;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_1 &,std::pair<unsigned long long,double> *>(double *a1, double *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      double v6 = *(a2 - 1);
      double v7 = a1[1];
      if (v6 > v7)
      {
        double v8 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v8;
        a1[1] = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_1 &,std::pair<unsigned long long,double> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_1 &,std::pair<unsigned long long,double> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_1 &,std::pair<unsigned long long,double> *>(a1, a1 + 2, a1 + 4, a1 + 6);
      double v18 = *(a2 - 1);
      double v19 = a1[7];
      if (v18 > v19)
      {
        uint64_t v20 = *((void *)a1 + 6);
        a1[6] = *(a2 - 2);
        *((void *)a2 - 2) = v20;
        a1[7] = v18;
        *(a2 - 1) = v19;
        double v21 = a1[7];
        double v22 = a1[5];
        if (v21 > v22)
        {
          uint64_t v23 = *((void *)a1 + 4);
          uint64_t v24 = *((void *)a1 + 6);
          *((void *)a1 + 4) = v24;
          *((void *)a1 + 6) = v23;
          a1[5] = v21;
          a1[7] = v22;
          double v25 = a1[3];
          if (v21 > v25)
          {
            uint64_t v26 = *((void *)a1 + 2);
            *((void *)a1 + 2) = v24;
            *((void *)a1 + 4) = v26;
            a1[3] = v21;
            a1[5] = v25;
            double v27 = a1[1];
            if (v21 > v27)
            {
              double v28 = *a1;
              *(void *)a1 = v24;
              a1[2] = v28;
              a1[1] = v21;
              a1[3] = v27;
            }
          }
        }
      }
      return 1;
    default:
      double v9 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_1 &,std::pair<unsigned long long,double> *>(a1, a1 + 2, a1 + 4);
      double v10 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    double v13 = v10[1];
    if (v13 > v9[1])
    {
      uint64_t v14 = *(void *)v10;
      uint64_t v15 = v11;
      while (1)
      {
        uint64_t v16 = (double *)((char *)a1 + v15);
        v16[6] = *(double *)((char *)a1 + v15 + 32);
        v16[7] = *(double *)((char *)a1 + v15 + 40);
        if (v15 == -32) {
          break;
        }
        v15 -= 16;
        if (v13 <= v16[3])
        {
          uint64_t v17 = (uint64_t)a1 + v15 + 48;
          goto LABEL_13;
        }
      }
      uint64_t v17 = (uint64_t)a1;
LABEL_13:
      *(void *)uint64_t v17 = v14;
      *(double *)(v17 + 8) = v13;
      if (++v12 == 8) {
        return v10 + 2 == a2;
      }
    }
    double v9 = v10;
    v11 += 16;
    v10 += 2;
    if (v10 == a2) {
      return 1;
    }
  }
}

double *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_1 &,std::pair<unsigned long long,double> *>(double *a1, double *a2, double *a3, double *a4)
{
  BOOL result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_1 &,std::pair<unsigned long long,double> *>(a1, a2, a3);
  double v9 = a4[1];
  double v10 = a3[1];
  if (v9 > v10)
  {
    double v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    a3[1] = v9;
    a4[1] = v10;
    double v12 = a3[1];
    double v13 = a2[1];
    if (v12 > v13)
    {
      double v14 = *a2;
      *a2 = *a3;
      *a3 = v14;
      a2[1] = v12;
      a3[1] = v13;
      double v15 = a2[1];
      double v16 = a1[1];
      if (v15 > v16)
      {
        double v17 = *a1;
        *a1 = *a2;
        *a2 = v17;
        a1[1] = v15;
        a2[1] = v16;
      }
    }
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,unsigned long>,std::__map_value_compare<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::__value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,unsigned long>,std::less<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,true>,std::allocator<std::__value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,unsigned long>>>::__emplace_unique_key_args<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::piecewise_construct_t const&,std::tuple<std::variant<unsigned long long,boost::uuids::uuid,std::string> const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  double v6 = (uint64_t **)std::__tree<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::__find_equal<std::variant<unsigned long long,boost::uuids::uuid,std::string>>((uint64_t)a1, &v11, a2);
  double v7 = *v6;
  if (!*v6)
  {
    double v8 = v6;
    std::__tree<std::__value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,unsigned long>,std::__map_value_compare<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::__value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,unsigned long>,std::less<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,true>,std::allocator<std::__value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,unsigned long>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::variant<unsigned long long,boost::uuids::uuid,std::string> const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__insert_node_at(a1, v11, v8, v10[0]);
    double v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t std::__tree<std::__value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,unsigned long>,std::__map_value_compare<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::__value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,unsigned long>,std::less<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,true>,std::allocator<std::__value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,unsigned long>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::variant<unsigned long long,boost::uuids::uuid,std::string> const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  double v6 = operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)(v6 + 4), *a2);
  v6[8] = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_2564AF924(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void sub_2564AFA00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ULDBUtils::insertEntries<CLMiLoOdometryTable,ULOdometryMO>(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v12 = 0;
  double v13 = &v12;
  uint64_t v14 = 0x2020000000;
  char v15 = 0;
  uint64_t v4 = [v3 managedObjectContext];
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 3221225472;
  void v8[2] = ___ZN9ULDBUtils13insertEntriesI19CLMiLoOdometryTable12ULOdometryMOEEbP7ULStoreRKNSt3__16vectorINT_5EntryENS5_9allocatorIS8_EEEE_block_invoke;
  v8[3] = &unk_2653F90B8;
  uint64_t v11 = a2;
  id v5 = v3;
  id v9 = v5;
  double v10 = &v12;
  [v4 performBlockAndWait:v8];

  uint64_t v6 = *((unsigned __int8 *)v13 + 24);
  _Block_object_dispose(&v12, 8);

  return v6;
}

void sub_2564AFB40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ULDBUtils::fetchEntries<CLMiLoOdometryTable,ULOdometryMO>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  uint64_t v23 = 0;
  uint64_t v24 = &v23;
  uint64_t v25 = 0x4812000000;
  uint64_t v26 = __Block_byref_object_copy__20;
  double v27 = __Block_byref_object_dispose__20;
  double v28 = &unk_25654E519;
  memset(v29, 0, sizeof(v29));
  uint64_t v12 = [v9 managedObjectContext];
  v17[0] = MEMORY[0x263EF8330];
  v17[1] = 3221225472;
  v17[2] = ___ZN9ULDBUtils12fetchEntriesI19CLMiLoOdometryTable12ULOdometryMOEENSt3__16vectorINT_5EntryENS3_9allocatorIS6_EEEEP7ULStoreP7NSArrayIP11NSPredicateEPSC_IP16NSSortDescriptorEm_block_invoke;
  v17[3] = &unk_2653F90E0;
  id v13 = v10;
  id v18 = v13;
  id v14 = v11;
  id v19 = v14;
  uint64_t v22 = a4;
  id v15 = v9;
  id v20 = v15;
  double v21 = &v23;
  [v12 performBlockAndWait:v17];

  double v16 = v24;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  *(void *)a5 = 0;
  std::vector<CLMiLoOdometryTable::Entry>::__init_with_size[abi:ne180100]<CLMiLoOdometryTable::Entry*,CLMiLoOdometryTable::Entry*>((char *)a5, (long long *)v16[6], (long long *)v16[7], (v16[7] - v16[6]) >> 5);

  _Block_object_dispose(&v23, 8);
  double v30 = (void **)v29;
  std::vector<CLMiLoOdometryTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v30);
}

void sub_2564AFD24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, void *a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);

  _Block_object_dispose(va, 8);
  *(void *)(v14 - 96) = v13;
  std::vector<CLMiLoOdometryTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 96));

  _Unwind_Resume(a1);
}

void ULDBUtils::fetchAllWithLimit<CLMiLoOdometryTable,ULOdometryMO>(void *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  v10[1] = *MEMORY[0x263EF8340];
  id v5 = a1;
  uint64_t v6 = (void *)MEMORY[0x263F08B30];
  double v7 = [(id)objc_opt_class() defaultSortProperty];
  double v8 = [v6 sortDescriptorWithKey:v7 ascending:0];

  v10[0] = v8;
  id v9 = [MEMORY[0x263EFF8C0] arrayWithObjects:v10 count:1];
  ULDBUtils::fetchEntries<CLMiLoOdometryTable,ULOdometryMO>(v5, 0, v9, a2, a3);
}

void sub_2564AFE88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564B0034(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN9ULDBUtils13insertEntriesI19CLMiLoOdometryTable12ULOdometryMOEEbP7ULStoreRKNSt3__16vectorINT_5EntryENS5_9allocatorIS8_EEEE_block_invoke(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(a1 + 48);
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  if (*v2 == v4)
  {
LABEL_4:
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [*(id *)(a1 + 32) commitChangesToStore];
    double v7 = *(void **)(a1 + 32);
    [v7 deleteOldestRecordsIfFull];
  }
  else
  {
    while (1)
    {
      id v5 = [*(id *)(a1 + 32) managedObjectContext];
      uint64_t v6 = +[ULOdometryMO createFromEntry:v3 inManagedObjectContext:v5];

      if (!v6) {
        break;
      }

      v3 += 32;
      if (v3 == v4) {
        goto LABEL_4;
      }
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_110);
    }
    double v8 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      id v9 = +[ULOdometryMO entity];
      id v10 = [v9 name];
      int v15 = 68289283;
      int v16 = 0;
      __int16 v17 = 2082;
      id v18 = "";
      __int16 v19 = 2113;
      id v20 = v10;
      _os_log_impl(&dword_25631F000, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to create entry from MO\", \"MO\":%{private, location:escape_only}@}", (uint8_t *)&v15, 0x1Cu);
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_110);
    }
    id v11 = (id)logObject_MicroLocation_Default;
    if (os_signpost_enabled(v11))
    {
      uint64_t v12 = +[ULOdometryMO entity];
      uint64_t v13 = [v12 name];
      int v15 = 68289283;
      int v16 = 0;
      __int16 v17 = 2082;
      id v18 = "";
      __int16 v19 = 2113;
      id v20 = v13;
      _os_signpost_emit_with_name_impl(&dword_25631F000, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to create entry from MO", "{\"msg%{public}.0s\":\"Failed to create entry from MO\", \"MO\":%{private, location:escape_only}@}", (uint8_t *)&v15, 0x1Cu);
    }
    uint64_t v14 = [*(id *)(a1 + 32) managedObjectContext];
    [v14 reset];
  }
}

void sub_2564B034C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_88()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

__n128 __Block_byref_object_copy__20(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__20(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  std::vector<CLMiLoOdometryTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void ___ZN9ULDBUtils12fetchEntriesI19CLMiLoOdometryTable12ULOdometryMOEENSt3__16vectorINT_5EntryENS3_9allocatorIS6_EEEEP7ULStoreP7NSArrayIP11NSPredicateEPSC_IP16NSSortDescriptorEm_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  uint64_t v3 = (objc_class *)objc_opt_class();
  uint64_t v4 = NSStringFromClass(v3);
  id v5 = [v2 fetchManagedObjectsWithEntityName:v4 byAndPredicates:*(void *)(a1 + 32) sortDescriptors:*(void *)(a1 + 40) andLimit:*(void *)(a1 + 64)];

  ULDBUtils::convertManagedObjectsToEntries<CLMiLoOdometryTable,ULOdometryMO>(v5, (uint64_t)&v8);
  uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8);
  std::vector<CLMiLoOdometryTable::Entry>::__vdeallocate((void **)(v6 + 48));
  *(_OWORD *)(v6 + 48) = v8;
  *(void *)(v6 + 64) = v9;
  uint64_t v9 = 0;
  long long v8 = 0uLL;
  id v10 = (void **)&v8;
  std::vector<CLMiLoOdometryTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v10);
  double v7 = [*(id *)(a1 + 48) managedObjectContext];
  [v7 reset];
}

void sub_2564B0500(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ULDBUtils::convertManagedObjectsToEntries<CLMiLoOdometryTable,ULOdometryMO>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  id v3 = a1;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  std::vector<CLMiLoOdometryTable::Entry>::reserve((char **)a2, [v3 count]);
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  id obj = v3;
  uint64_t v4 = [obj countByEnumeratingWithState:&v43 objects:v47 count:16];
  if (!v4)
  {

    goto LABEL_44;
  }
  id v38 = v3;
  char v5 = 0;
  uint64_t v6 = *(void *)v44;
  do
  {
    uint64_t v7 = 0;
    do
    {
      if (*(void *)v44 != v6) {
        objc_enumerationMutation(obj);
      }
      id v8 = *(id *)(*((void *)&v43 + 1) + 8 * v7);
      uint64_t v9 = v8;
      if (v8)
      {
        objc_msgSend(v8, "convertToEntry", v38);
        if (v42)
        {
          unint64_t v10 = *(void *)(a2 + 8);
          unint64_t v11 = *(void *)(a2 + 16);
          if (v10 >= v11)
          {
            uint64_t v21 = (uint64_t)(v10 - *(void *)a2) >> 5;
            unint64_t v22 = v21 + 1;
            if ((unint64_t)(v21 + 1) >> 59) {
              std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v23 = v11 - *(void *)a2;
            if (v23 >> 4 > v22) {
              unint64_t v22 = v23 >> 4;
            }
            if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v24 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v24 = v22;
            }
            uint64_t v50 = a2 + 16;
            uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationResultInternal>>(a2 + 16, v24);
            double v27 = &v25[32 * v21];
            *((void *)v27 + 2) = v41;
            *(_OWORD *)double v27 = v40;
            uint64_t v28 = *((void *)&v41 + 1);
            *((void *)&v41 + 1) = 0;
            *((void *)v27 + 3) = v28;
            uint64_t v29 = *(char **)a2;
            unint64_t v30 = *(void *)(a2 + 8);
            if (v30 == *(void *)a2)
            {
              int64x2_t v34 = vdupq_n_s64(v30);
              double v31 = &v25[32 * v21];
            }
            else
            {
              double v31 = &v25[32 * v21];
              do
              {
                long long v32 = *(_OWORD *)(v30 - 32);
                *((void *)v31 - 2) = *(void *)(v30 - 16);
                *((_OWORD *)v31 - 2) = v32;
                uint64_t v33 = *(void *)(v30 - 8);
                *(void *)(v30 - 8) = 0;
                *((void *)v31 - 1) = v33;
                v31 -= 32;
                v30 -= 32;
              }
              while ((char *)v30 != v29);
              int64x2_t v34 = *(int64x2_t *)a2;
            }
            uint64_t v13 = v27 + 32;
            *(void *)a2 = v31;
            *(void *)(a2 + 8) = v27 + 32;
            *(int64x2_t *)double v49 = v34;
            uint64_t v35 = *(void *)(a2 + 16);
            *(void *)(a2 + 16) = &v25[32 * v26];
            *(void *)&v49[16] = v35;
            *(void *)uint64_t buf = v34.i64[0];
            std::__split_buffer<CLMiLoOdometryTable::Entry>::~__split_buffer((uint64_t)buf);
          }
          else
          {
            *(void *)(v10 + 16) = v41;
            *(_OWORD *)unint64_t v10 = v40;
            uint64_t v12 = *((void *)&v41 + 1);
            *((void *)&v41 + 1) = 0;
            *(void *)(v10 + 24) = v12;
            uint64_t v13 = (char *)(v10 + 32);
          }
          char v20 = 0;
          *(void *)(a2 + 8) = v13;
          goto LABEL_33;
        }
      }
      else
      {
        char v42 = 0;
        long long v40 = 0u;
        long long v41 = 0u;
      }
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_110);
      }
      uint64_t v14 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        int v15 = [v9 entity];
        int v16 = [v15 name];
        *(void *)uint64_t buf = 68289283;
        *(_WORD *)double v49 = 2082;
        *(void *)&long long v49[2] = "";
        *(_WORD *)&v49[10] = 2113;
        *(void *)&v49[12] = v16;
        _os_log_impl(&dword_25631F000, v14, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to convert MO to entry\", \"MO\":%{private, location:escape_only}@}", buf, 0x1Cu);
      }
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_110);
      }
      __int16 v17 = (id)logObject_MicroLocation_Default;
      if (os_signpost_enabled(v17))
      {
        id v18 = [v9 entity];
        __int16 v19 = [v18 name];
        *(void *)uint64_t buf = 68289283;
        *(_WORD *)double v49 = 2082;
        *(void *)&long long v49[2] = "";
        *(_WORD *)&v49[10] = 2113;
        *(void *)&v49[12] = v19;
        _os_signpost_emit_with_name_impl(&dword_25631F000, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to convert MO to entry", "{\"msg%{public}.0s\":\"Failed to convert MO to entry\", \"MO\":%{private, location:escape_only}@}", buf, 0x1Cu);
      }
      char v20 = 1;
      char v5 = 1;
LABEL_33:
      if (v42) {

      }
      if (v20) {
        goto LABEL_38;
      }
      ++v7;
    }
    while (v7 != v4);
    uint64_t v4 = [obj countByEnumeratingWithState:&v43 objects:v47 count:16];
  }
  while (v4);
LABEL_38:

  if (v5)
  {
    double v36 = *(char **)a2;
    for (uint64_t i = *(char **)(a2 + 8); i != v36; i -= 32)

    *(void *)(a2 + 8) = v36;
  }
LABEL_44:
}

void sub_2564B0998(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, ...)
{
  va_start(va, a7);

  std::vector<CLMiLoOdometryTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMiLoOdometryTable::Entry>::reserve(char **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    uint64_t v18 = result;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationResultInternal>>(result, a2);
    id v8 = *a1;
    unint64_t v9 = (unint64_t)a1[1];
    if ((char *)v9 == *a1)
    {
      int64x2_t v13 = vdupq_n_s64(v9);
      unint64_t v10 = &v6[v5];
    }
    else
    {
      unint64_t v10 = &v6[v5];
      do
      {
        long long v11 = *(_OWORD *)(v9 - 32);
        *((void *)v10 - 2) = *(void *)(v9 - 16);
        *((_OWORD *)v10 - 2) = v11;
        uint64_t v12 = *(void *)(v9 - 8);
        *(void *)(v9 - 8) = 0;
        *((void *)v10 - 1) = v12;
        v10 -= 32;
        v9 -= 32;
      }
      while ((char *)v9 != v8);
      int64x2_t v13 = *(int64x2_t *)a1;
    }
    *a1 = v10;
    a1[1] = &v6[v5];
    int64x2_t v16 = v13;
    uint64_t v14 = a1[2];
    a1[2] = &v6[32 * v7];
    __int16 v17 = v14;
    uint64_t v15 = v13.i64[0];
    return std::__split_buffer<CLMiLoOdometryTable::Entry>::~__split_buffer((uint64_t)&v15);
  }
  return result;
}

uint64_t std::__split_buffer<CLMiLoOdometryTable::Entry>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<CLMiLoOdometryTable::Entry>::__vdeallocate(void **a1)
{
  uint64_t v1 = (id *)*a1;
  if (*a1)
  {
    uint64_t v3 = (id *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        uint64_t v5 = v3 - 4;

        uint64_t v3 = v5;
      }
      while (v5 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_2564B11F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564B1574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v17);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::EnableCloudBackup>()
{
  os_log_t v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  uint64_t v2 = [NSString stringWithUTF8String:"ULEnableCloudBackup"];
  uint64_t v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 BOOLValue];
  }
  else {
    uint64_t v4 = [MEMORY[0x263EFFA88] BOOLValue];
  }
  uint64_t v5 = v4;

  return v5;
}

void sub_2564B16FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::CloudBackupExport>(_OWORD *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  CLMicroLocationProto::ReceivedEvent::ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
  CLMicroLocationProtobufHelper::setSpecificLoggedEvent((CLMicroLocationProtobufHelper *)v9, (CLMicroLocationProto::ReceivedEvent *)a2, v8);
  CLMicroLocationLoggedEventsTable::Entry::Entry(a3, a1, a2[2], (CLMicroLocationProto::ReceivedEvent *)v9, a4);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
}

void sub_2564B17B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2564B1848(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_48c27_ZTSNSt3__18functionIFbvEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100](a1 + 48, a2 + 48);
}

void *__destroy_helper_block_ea8_48c27_ZTSNSt3__18functionIFbvEEE(uint64_t a1)
{
  return std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((void *)(a1 + 48));
}

void sub_2564B1B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::CloudBackupImport>(_OWORD *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  CLMicroLocationProto::ReceivedEvent::ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
  CLMicroLocationProtobufHelper::setSpecificLoggedEvent((CLMicroLocationProtobufHelper *)v9, (CLMicroLocationProto::ReceivedEvent *)a2, v8);
  CLMicroLocationLoggedEventsTable::Entry::Entry(a3, a1, a2[2], (CLMicroLocationProto::ReceivedEvent *)v9, a4);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
}

void sub_2564B1C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2564B1CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2564B1D6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564B21E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  _Unwind_Resume(a1);
}

void sub_2564B2934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }

  (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

void sub_2564B2B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v12 = v11;

  _Unwind_Resume(a1);
}

void sub_2564B2CD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564B2F54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564B31FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564B3550(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564B3768(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564B39D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564B3C28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564B4404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::CloudBackupDefaultTableLimit>()
{
  os_log_t v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  uint64_t v2 = [NSString stringWithUTF8String:"ULCloudBackupDefaultTableLimit"];
  uint64_t v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 unsignedIntValue];
  }
  else {
    uint64_t v4 = [&unk_2704F22F8 unsignedIntValue];
  }
  uint64_t v5 = v4;

  return v5;
}

void sub_2564B4640(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::CloudBackupPageSize>()
{
  os_log_t v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  uint64_t v2 = [NSString stringWithUTF8String:"ULCloudBackupPageSize"];
  uint64_t v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 unsignedIntValue];
  }
  else {
    uint64_t v4 = [&unk_2704F22F8 unsignedIntValue];
  }
  uint64_t v5 = v4;

  return v5;
}

void sub_2564B4740(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::CloudBackupMeasurementsLimit>()
{
  os_log_t v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  uint64_t v2 = [NSString stringWithUTF8String:"ULCloudBackupMeasurementsLimit"];
  uint64_t v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 unsignedIntValue];
  }
  else {
    uint64_t v4 = [&unk_2704F2310 unsignedIntValue];
  }
  uint64_t v5 = v4;

  return v5;
}

void sub_2564B4840(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564B4CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  _Unwind_Resume(a1);
}

void sub_2564B52A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  double v31 = v26;

  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_89()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

void *std::vector<CLMicroLocationProto::EventType>::__init_with_size[abi:ne180100]<std::__wrap_iter<CLMicroLocationProto::EventType*>,std::__wrap_iter<CLMicroLocationProto::EventType*>>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<CLMicroLocationProto::ConfidenceLevel>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2564B5418(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void CLMicroLocationRapportMonitor::deviceFound(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 24) >= *(void *)(a1 + 88))
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_113);
    }
    uint64_t v6 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a2 + 23) >= 0) {
        uint64_t v7 = a2;
      }
      else {
        uint64_t v7 = *(void *)a2;
      }
      size_t v8 = *(uint64_t **)(a1 + 24);
      int v24 = 68289539;
      int v25 = 0;
      __int16 v26 = 2082;
      double v27 = "";
      __int16 v28 = 2081;
      uint64_t v29 = v7;
      __int16 v30 = 2049;
      double v31 = v8;
      _os_log_impl(&dword_25631F000, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Rapport, rapport monitor exceeded max entries\", \"IDS\":%{private, location:escape_only}s, \"Size\":%{private}lu}", (uint8_t *)&v24, 0x26u);
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_113);
    }
    uint64_t v9 = logObject_MicroLocation_Default;
    if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
    {
      if (*(char *)(a2 + 23) >= 0) {
        uint64_t v10 = a2;
      }
      else {
        uint64_t v10 = *(void *)a2;
      }
      long long v11 = *(uint64_t **)(a1 + 24);
      int v24 = 68289539;
      int v25 = 0;
      __int16 v26 = 2082;
      double v27 = "";
      __int16 v28 = 2081;
      uint64_t v29 = v10;
      __int16 v30 = 2049;
      double v31 = v11;
      uint64_t v12 = "Rapport, rapport monitor exceeded max entries";
      int64x2_t v13 = "{\"msg%{public}.0s\":\"Rapport, rapport monitor exceeded max entries\", \"IDS\":%{private, location:escape_o"
            "nly}s, \"Size\":%{private}lu}";
      uint64_t v14 = v9;
      uint32_t v15 = 38;
      goto LABEL_32;
    }
  }
  else
  {
    CLMicroLocationProtobufHelper::uuidFromStdString(a2, (uint64_t)&v34);
    if (v35)
    {
      std::__hash_table<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item::HashItem,CLMicroLocationRapportMonitor::Item::PredicateItem,std::allocator<CLMicroLocationRapportMonitor::Item>>::__emplace_unique_impl<boost::uuids::uuid const&,std::string const&,std::string&,boost::uuids::uuid&>((void *)a1, &v34, a3, (long long *)(a1 + 48), (_OWORD *)(a1 + 72));
      goto LABEL_33;
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_113);
    }
    int64x2_t v16 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a2 + 23) >= 0) {
        uint64_t v17 = a2;
      }
      else {
        uint64_t v17 = *(void *)a2;
      }
      int v24 = 68289283;
      int v25 = 0;
      __int16 v26 = 2082;
      double v27 = "";
      __int16 v28 = 2081;
      uint64_t v29 = v17;
      _os_log_impl(&dword_25631F000, v16, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Rapport, rapport monitor buffered bad IDS UUID\", \"IDS\":%{private, location:escape_only}s}", (uint8_t *)&v24, 0x1Cu);
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_113);
    }
    uint64_t v18 = logObject_MicroLocation_Default;
    if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
    {
      if (*(char *)(a2 + 23) >= 0) {
        uint64_t v19 = a2;
      }
      else {
        uint64_t v19 = *(void *)a2;
      }
      int v24 = 68289283;
      int v25 = 0;
      __int16 v26 = 2082;
      double v27 = "";
      __int16 v28 = 2081;
      uint64_t v29 = v19;
      uint64_t v12 = "Rapport, rapport monitor buffered bad IDS UUID";
      int64x2_t v13 = "{\"msg%{public}.0s\":\"Rapport, rapport monitor buffered bad IDS UUID\", \"IDS\":%{private, location:escape_only}s}";
      uint64_t v14 = v18;
      uint32_t v15 = 28;
LABEL_32:
      _os_signpost_emit_with_name_impl(&dword_25631F000, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v12, v13, (uint8_t *)&v24, v15);
    }
  }
LABEL_33:
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_113);
  }
  char v20 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v21 = a2;
    }
    else {
      uint64_t v21 = *(void *)a2;
    }
    unint64_t v22 = *(uint64_t **)a3;
    if (*((char *)a3 + 23) >= 0) {
      unint64_t v22 = (uint64_t *)a3;
    }
    uint64_t v23 = (void *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0) {
      uint64_t v23 = (void *)*v23;
    }
    int v24 = 68289795;
    int v25 = 0;
    __int16 v26 = 2082;
    double v27 = "";
    __int16 v28 = 2081;
    uint64_t v29 = v21;
    __int16 v30 = 2081;
    double v31 = v22;
    __int16 v32 = 2082;
    uint64_t v33 = v23;
    _os_log_impl(&dword_25631F000, v20, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Rapport, buffered a found device\", \"Device IDS identifier\":%{private, location:escape_only}s, \"Device name\":%{private, location:escape_only}s, \"CoreRoutine LOI Type\":%{public, location:escape_only}s}", (uint8_t *)&v24, 0x30u);
  }
}

void CLMicroLocationRapportMonitor::getDevicesSinceLearnEventTimeAtLoi(uint64_t a1@<X0>, double *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_DWORD *)(a5 + 32) = 1065353216;
  for (uint64_t i = *(void **)(a1 + 16); i; uint64_t i = (void *)*i)
  {
    if (i[10] == *a4 && i[11] == a4[1]) {
      std::__hash_table<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item::HashItem,CLMicroLocationRapportMonitor::Item::PredicateItem,std::allocator<CLMicroLocationRapportMonitor::Item>>::__emplace_unique_key_args<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item const&>(a5, (uint64_t)(i + 2), (uint64_t)(i + 2));
    }
  }
  double v12 = *a2;
  id v13 = *(id *)(*(void *)(a1 + 40) + 80);
  uint64_t v14 = v13;
  LOBYTE(__p) = 0;
  BYTE4(v38) = 0;
  *(_OWORD *)&v47[0].__vftable = *(_OWORD *)a4;
  LOBYTE(v48) = 1;
  if (v13)
  {
    [v13 fetchRapportEntriesAtLoiFromTime:&__p toTime:v47 loiType:v12 loiGroupId:1.79769313e308];
    if (BYTE4(v38) && SBYTE3(v38) < 0) {
      operator delete(__p);
    }
  }
  else
  {
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
  }

  if (*(_OWORD *)a4 != 0)
  {
    id v15 = *(id *)(*(void *)(a1 + 40) + 80);
    int64x2_t v16 = v15;
    LOBYTE(__p) = 0;
    BYTE4(v38) = 0;
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = 0uLL;
    v33.__r_.__value_.__s.__data_[16] = 1;
    if (v15)
    {
      [v15 fetchRapportEntriesAtLoiFromTime:&__p toTime:&v33 loiType:v12 loiGroupId:1.79769313e308];
      if (BYTE4(v38) && SBYTE3(v38) < 0) {
        operator delete(__p);
      }
    }
    else
    {
      v47[0].__vftable = 0;
      v47[1].__vftable = 0;
      double v48 = 0;
    }

    std::vector<CLMicroLocationRapportTable::Entry>::__insert_with_size[abi:ne180100]<std::move_iterator<std::__wrap_iter<CLMicroLocationRapportTable::Entry*>>,std::move_iterator<std::__wrap_iter<CLMicroLocationRapportTable::Entry*>>>(&v30, v31, (uint64_t)v47[0].__vftable, (uint64_t)v47[1].__vftable, 0xCCCCCCCCCCCCCCCDLL * (((char *)v47[1].__vftable - (char *)v47[0].__vftable) >> 4));
    std::string __p = v47;
    std::vector<CLMicroLocationRapportTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  uint64_t v29 = a3;
  uint64_t v17 = v31;
  if (v30 != v31)
  {
    uint64_t v18 = (uint64_t ***)(v30 + 64);
    do
    {
      CLMicroLocationProtobufHelper::uuidFromProtobuf(*(v18 - 3), v47);
      if ((_BYTE)v48)
      {
        std::__hash_table<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item::HashItem,CLMicroLocationRapportMonitor::Item::PredicateItem,std::allocator<CLMicroLocationRapportMonitor::Item>>::__emplace_unique_impl<boost::uuids::uuid &,std::string const&,std::string const&,boost::uuids::uuid const&>((void *)a5, v47, (long long *)*(v18 - 2), (long long *)(v18 - 7), v18);
      }
      else
      {
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_113);
        }
        uint64_t v19 = logObject_MicroLocation_Default;
        if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
        {
          std::string __p = (void *)68289026;
          __int16 v35 = 2082;
          uint64_t v36 = "";
          _os_log_impl(&dword_25631F000, v19, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Rapport, rapport monitor read bad IDS UUID from DB\"}", (uint8_t *)&__p, 0x12u);
        }
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_113);
        }
        char v20 = logObject_MicroLocation_Default;
        if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
        {
          std::string __p = (void *)68289026;
          __int16 v35 = 2082;
          uint64_t v36 = "";
          _os_signpost_emit_with_name_impl(&dword_25631F000, v20, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Rapport, rapport monitor read bad IDS UUID from DB", "{\"msg%{public}.0s\":\"Rapport, rapport monitor read bad IDS UUID from DB\"}", (uint8_t *)&__p, 0x12u);
        }
      }
      uint64_t v21 = v18 + 2;
      v18 += 10;
    }
    while (v21 != (_OWORD *)v17);
  }
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_113);
  }
  unint64_t v22 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v24 = v30;
    uint64_t v23 = v31;
    if (*((char *)v29 + 23) >= 0) {
      int v25 = v29;
    }
    else {
      int v25 = (uint64_t *)*v29;
    }
    memset(&v33, 0, sizeof(v33));
    if ((boost::conversion::detail::try_lexical_convert<std::string,boost::uuids::uuid>((uint64_t)a4, &v33) & 1) == 0)
    {
      __int16 v28 = std::bad_cast::bad_cast(v47);
      v47[0].__vftable = (std::bad_cast_vtbl *)&unk_2704DAAD0;
      boost::throw_exception<boost::bad_lexical_cast>((uint64_t)v28);
    }
    __int16 v26 = &v33;
    uint64_t v27 = *(void *)(a5 + 24);
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      __int16 v26 = (std::string *)v33.__r_.__value_.__r.__words[0];
    }
    std::string __p = (void *)68290306;
    __int16 v35 = 2082;
    uint64_t v36 = "";
    __int16 v37 = 2050;
    unint64_t v38 = 0xCCCCCCCCCCCCCCCDLL * ((v23 - v24) >> 4);
    __int16 v39 = 1026;
    int v40 = (int)v12;
    __int16 v41 = 2082;
    char v42 = v25;
    __int16 v43 = 2082;
    long long v44 = v26;
    __int16 v45 = 2050;
    uint64_t v46 = v27;
    _os_log_impl(&dword_25631F000, v22, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"RapportMonitor getDevicesSinceLearnEventTimeAtLoi\", \"Backup Entries\":%{public}lu, \"From time\":%{public}d, \"LOI type\":%{public, location:escape_only}s, \"LOI id\":%{public, location:escape_only}s, \"Total number of devices\":%{public}lu}", (uint8_t *)&__p, 0x40u);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v33.__r_.__value_.__l.__data_);
    }
  }

  std::string __p = &v30;
  std::vector<CLMicroLocationRapportTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_2564B5E04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a28)
  {
    if (a27 < 0) {
      operator delete(__p);
    }
  }

  std::string __p = &a13;
  std::vector<CLMicroLocationRapportTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__hash_table<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item::HashItem,CLMicroLocationRapportMonitor::Item::PredicateItem,std::allocator<CLMicroLocationRapportMonitor::Item>>::~__hash_table(v28);
  _Unwind_Resume(a1);
}

void CLMicroLocationRapportMonitor::backup(CLMicroLocationRapportMonitor *this)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  unint64_t v9 = 0;
  uint64_t v1 = (uint64_t *)*((void *)this + 2);
  if (v1)
  {
    uint64_t v3 = MEMORY[0x263F8C740];
    do
    {
      CLMicroLocationProto::RapportDevice::RapportDevice(buf);
      v12 |= 1u;
      if (*(void *)v11 == v3) {
        operator new();
      }
      MEMORY[0x25A2A6090]();
      v12 |= 2u;
      if (*(void *)&v11[8] == v3) {
        operator new();
      }
      std::string::operator=(*(std::string **)&v11[8], (const std::string *)(v1 + 4));
      unint64_t v4 = v8;
      if (v8 >= v9)
      {
        uint64_t v5 = std::vector<CLMicroLocationRapportTable::Entry>::__emplace_back_slow_path<std::string const&,CLMicroLocationProto::RapportDevice &,boost::uuids::uuid const&>(&v7, (uint64_t)(v1 + 7), (uint64_t)buf, (uint64_t)(v1 + 10));
      }
      else
      {
        std::allocator<CLMicroLocationRapportTable::Entry>::construct[abi:ne180100]<CLMicroLocationRapportTable::Entry,std::string const&,CLMicroLocationProto::RapportDevice &,boost::uuids::uuid const&>((uint64_t)&v9, v8, (uint64_t)(v1 + 7), (uint64_t)buf, (uint64_t)(v1 + 10));
        uint64_t v5 = v4 + 80;
      }
      unint64_t v8 = v5;
      CLMicroLocationProto::RapportDevice::~RapportDevice((CLMicroLocationProto::RapportDevice *)buf);
      uint64_t v1 = (uint64_t *)*v1;
    }
    while (v1);
    if (v8 != v7)
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_113);
      }
      uint64_t v6 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)long long v11 = 2082;
        *(void *)&_DWORD v11[2] = "";
        *(_WORD *)&v11[10] = 2050;
        *(void *)&v11[12] = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8 - v7) >> 4);
        _os_log_impl(&dword_25631F000, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Rapport, back up rapport monitor data to DB\", \"Num Entries\":%{public}lu}", buf, 0x1Cu);
      }
      [*(id *)(*((void *)this + 5) + 80) insertEntries:&v7];
    }
  }
  *(void *)uint64_t buf = &v7;
  std::vector<CLMicroLocationRapportTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_2564B6110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a10;
  std::vector<CLMicroLocationRapportTable::Entry>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

std::string *CLMicroLocationRapportMonitor::setCurrentLOIType(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 2, a2);
}

__n128 CLMicroLocationRapportMonitor::setCurrentLoiGroupId(CLMicroLocationRapportMonitor *this, __n128 *a2)
{
  __n128 result = *a2;
  *(__n128 *)((char *)this + 72) = *a2;
  return result;
}

unint64_t CLMicroLocationRapportMonitor::Item::HashItem::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = 0;
  do
    v3 ^= (v3 << 6) + 2654435769u + (v3 >> 2) + *(unsigned __int8 *)(a2 + v2++);
  while (v2 != 16);
  uint64_t v4 = 0;
  unint64_t v5 = 0;
  do
    v5 ^= (v5 << 6) + 2654435769u + (v5 >> 2) + *(unsigned __int8 *)(a2 + 64 + v4++);
  while (v4 != 16);
  return 0xC6A4A7935BD1E995
       * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v5) ^ ((0xC6A4A7935BD1E995 * v5) >> 47))) ^ v3)
       + 3864292196u;
}

BOOL CLMicroLocationRapportMonitor::Item::PredicateItem::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)a2 != *(void *)a3 || *(void *)(a2 + 8) != *(void *)(a3 + 8)) {
    return 0;
  }
  uint64_t v6 = *(unsigned __int8 *)(a2 + 39);
  size_t v7 = *(void *)(a2 + 24);
  if ((v6 & 0x80u) == 0) {
    uint64_t v8 = *(unsigned __int8 *)(a2 + 39);
  }
  else {
    uint64_t v8 = *(void *)(a2 + 24);
  }
  uint64_t v9 = *(unsigned __int8 *)(a3 + 39);
  int v10 = (char)v9;
  if ((v9 & 0x80u) != 0) {
    uint64_t v9 = *(void *)(a3 + 24);
  }
  if (v8 != v9) {
    return 0;
  }
  long long v11 = (const void **)(a2 + 16);
  if (v10 >= 0) {
    int v12 = (unsigned __int8 *)(a3 + 16);
  }
  else {
    int v12 = *(unsigned __int8 **)(a3 + 16);
  }
  if ((v6 & 0x80) != 0)
  {
    if (!memcmp(*v11, v12, v7)) {
      return *(void *)(a2 + 64) == *(void *)(a3 + 64) && *(void *)(a2 + 72) == *(void *)(a3 + 72);
    }
    return 0;
  }
  if (v6)
  {
    while (*(unsigned __int8 *)v11 == *v12)
    {
      long long v11 = (const void **)((char *)v11 + 1);
      ++v12;
      if (!--v6) {
        return *(void *)(a2 + 64) == *(void *)(a3 + 64) && *(void *)(a2 + 72) == *(void *)(a3 + 72);
      }
    }
    return 0;
  }
  return *(void *)(a2 + 64) == *(void *)(a3 + 64) && *(void *)(a2 + 72) == *(void *)(a3 + 72);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_90()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

void *std::__hash_table<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item::HashItem,CLMicroLocationRapportMonitor::Item::PredicateItem,std::allocator<CLMicroLocationRapportMonitor::Item>>::__emplace_unique_impl<boost::uuids::uuid const&,std::string const&,std::string&,boost::uuids::uuid&>(void *a1, _OWORD *a2, long long *a3, long long *a4, _OWORD *a5)
{
  std::__hash_table<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item::HashItem,CLMicroLocationRapportMonitor::Item::PredicateItem,std::allocator<CLMicroLocationRapportMonitor::Item>>::__construct_node<boost::uuids::uuid const&,std::string const&,std::string&,boost::uuids::uuid&>((uint64_t)a1, a2, a3, a4, a5, (uint64_t)v9);
  inserted = std::__hash_table<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item::HashItem,CLMicroLocationRapportMonitor::Item::PredicateItem,std::allocator<CLMicroLocationRapportMonitor::Item>>::__node_insert_unique(a1, v9[0]);
  if (v7) {
    v9[0] = 0;
  }
  std::unique_ptr<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  return inserted;
}

void sub_2564B6360(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item::HashItem,CLMicroLocationRapportMonitor::Item::PredicateItem,std::allocator<CLMicroLocationRapportMonitor::Item>>::__construct_node<boost::uuids::uuid const&,std::string const&,std::string&,boost::uuids::uuid&>@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, long long *a3@<X2>, long long *a4@<X3>, _OWORD *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11 = a1 + 16;
  int v12 = operator new(0x60uLL);
  *(void *)a6 = v12;
  *(void *)(a6 + 8) = v11;
  *(unsigned char *)(a6 + 16) = 0;
  *int v12 = 0;
  v12[1] = 0;
  uint64_t v13 = CLMicroLocationRapportMonitor::Item::Item((uint64_t)(v12 + 2), a2, a3, a4, a5);
  *(unsigned char *)(a6 + 16) = 1;
  unint64_t result = CLMicroLocationRapportMonitor::Item::HashItem::operator()(v13, v13);
  v12[1] = result;
  return result;
}

void sub_2564B6408(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::__hash_table<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item::HashItem,CLMicroLocationRapportMonitor::Item::PredicateItem,std::allocator<CLMicroLocationRapportMonitor::Item>>::__node_insert_unique(void *a1, void *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = (uint64_t)(a2 + 2);
  unint64_t v5 = CLMicroLocationRapportMonitor::Item::HashItem::operator()((uint64_t)a1, (uint64_t)(a2 + 2));
  v2[1] = v5;
  uint64_t v6 = std::__hash_table<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item::HashItem,CLMicroLocationRapportMonitor::Item::PredicateItem,std::allocator<CLMicroLocationRapportMonitor::Item>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)a1, v5, v4);
  if (v6) {
    return v6;
  }
  std::__hash_table<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem::HashItem,CLMicroLocationUtils::BleIdentityItem::PredicateItem,std::allocator<CLMicroLocationUtils::BleIdentityItem>>::__node_insert_unique_perform[abi:ne180100](a1, v2);
  return v2;
}

uint64_t CLMicroLocationRapportMonitor::Item::Item(uint64_t a1, _OWORD *a2, long long *a3, long long *a4, _OWORD *a5)
{
  *(_OWORD *)a1 = *a2;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v8 = *a3;
    *(void *)(a1 + 32) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 16) = v8;
  }
  uint64_t v9 = (std::string *)(a1 + 40);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v10 = *a4;
    *(void *)(a1 + 56) = *((void *)a4 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  *(_OWORD *)(a1 + 64) = *a5;
  return a1;
}

void sub_2564B6528(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item::HashItem,CLMicroLocationRapportMonitor::Item::PredicateItem,std::allocator<CLMicroLocationRapportMonitor::Item>>::__node_insert_unique_prepare[abi:ne180100](uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1;
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
    v7.i16[0] = vaddlv_u8(v7);
    unint64_t v8 = v7.u32[0];
    if (v7.u32[0] > 1uLL) {
      uint64_t v9 = v4 <= a2 ? a2 % v4 : a2;
    }
    else {
      uint64_t v9 = (v4 - 1) & a2;
    }
    long long v10 = *(void **)(*(void *)a1 + 8 * v9);
    if (v10)
    {
      uint64_t v11 = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == a2)
          {
            LOBYTE(a1) = CLMicroLocationRapportMonitor::Item::PredicateItem::operator()(a1, (uint64_t)(v11 + 2), a3);
            if (a1) {
              return v11;
            }
          }
          else
          {
            if (v8 > 1)
            {
              if (v12 >= v4) {
                v12 %= v4;
              }
            }
            else
            {
              v12 &= v4 - 1;
            }
            if (v12 != v9) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  float v13 = (float)(unint64_t)(*(void *)(v3 + 24) + 1);
  float v14 = *(float *)(v3 + 32);
  if (!v4 || (float)(v14 * (float)v4) < v13)
  {
    BOOL v15 = 1;
    if (v4 >= 3) {
      BOOL v15 = (v4 & (v4 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v4);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(v3, v18);
  }
  return 0;
}

void std::unique_ptr<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<CLMicroLocationRapportMonitor::Item,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void *std::__hash_table<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item::HashItem,CLMicroLocationRapportMonitor::Item::PredicateItem,std::allocator<CLMicroLocationRapportMonitor::Item>>::__emplace_unique_key_args<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v7 = CLMicroLocationRapportMonitor::Item::HashItem::operator()(a1, a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    unint64_t v12 = *(void **)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      float v13 = (void *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v8)
          {
            LOBYTE(v7) = CLMicroLocationRapportMonitor::Item::PredicateItem::operator()(v7, (uint64_t)(v13 + 2), a2);
            if (v7) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          float v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  std::__hash_table<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item::HashItem,CLMicroLocationRapportMonitor::Item::PredicateItem,std::allocator<CLMicroLocationRapportMonitor::Item>>::__construct_node_hash<CLMicroLocationRapportMonitor::Item const&>(a1, v8, a3, (uint64_t)v24);
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    void *v21 = v24[0];
  }
  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v22 >= v9) {
          v22 %= v9;
        }
      }
      else
      {
        v22 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }
  float v13 = (void *)v24[0];
  v24[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
  return v13;
}

void sub_2564B6938(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item::HashItem,CLMicroLocationRapportMonitor::Item::PredicateItem,std::allocator<CLMicroLocationRapportMonitor::Item>>::__construct_node_hash<CLMicroLocationRapportMonitor::Item const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x60uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  std::allocator<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *>>::construct[abi:ne180100]<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item const&>(v7, (uint64_t)(v8 + 2), a3);
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_2564B69B0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

__n128 std::allocator<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *>>::construct[abi:ne180100]<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a2 = *(_OWORD *)a3;
  unint64_t v5 = (std::string *)(a2 + 16);
  if (*(char *)(a3 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 16), *(void *)(a3 + 24));
  }
  else
  {
    long long v6 = *(_OWORD *)(a3 + 16);
    *(void *)(a2 + 32) = *(void *)(a3 + 32);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  uint64_t v7 = (std::string *)(a2 + 40);
  if (*(char *)(a3 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a3 + 40), *(void *)(a3 + 48));
  }
  else
  {
    long long v8 = *(_OWORD *)(a3 + 40);
    *(void *)(a2 + 56) = *(void *)(a3 + 56);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  __n128 result = *(__n128 *)(a3 + 64);
  *(__n128 *)(a2 + 64) = result;
  return result;
}

void sub_2564B6A60(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<CLMicroLocationRapportTable::Entry>::__insert_with_size[abi:ne180100]<std::move_iterator<std::__wrap_iter<CLMicroLocationRapportTable::Entry*>>,std::move_iterator<std::__wrap_iter<CLMicroLocationRapportTable::Entry*>>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - v12) >> 4)) >= a5)
    {
      uint64_t v20 = v12 - a2;
      if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - a2) >> 4)) >= a5)
      {
        uint64_t v21 = a3 + 80 * a5;
      }
      else
      {
        uint64_t v21 = a3 + 16 * ((uint64_t)(v12 - a2) >> 4);
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationRapportTable::Entry>,std::move_iterator<std::__wrap_iter<CLMicroLocationRapportTable::Entry*>>,std::move_iterator<std::__wrap_iter<CLMicroLocationRapportTable::Entry*>>,CLMicroLocationRapportTable::Entry*>(v9, v21, a4, *(void *)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }
      std::vector<CLMicroLocationRapportTable::Entry>::__move_range((uint64_t)a1, v5, v12, v5 + 80 * a5);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::move_iterator<std::__wrap_iter<CLMicroLocationRapportTable::Entry *>>,std::move_iterator<std::__wrap_iter<CLMicroLocationRapportTable::Entry *>>,CLMicroLocationRapportTable::Entry *>((uint64_t)v27, v7, v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 - 0x3333333333333333 * ((uint64_t)(v12 - *a1) >> 4);
      if (v14 > 0x333333333333333) {
        std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - v13) >> 4);
      unint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - v13) >> 4);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x199999999999999) {
        unint64_t v18 = 0x333333333333333;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v30 = v9;
      if (v18) {
        unint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRapportMonitor::Item>>(v9, v18);
      }
      else {
        unint64_t v19 = 0;
      }
      unint64_t v22 = &v19[80 * v15];
      v27[0] = v19;
      v27[1] = v22;
      uint64_t v28 = v22;
      uint64_t v29 = &v19[80 * v18];
      uint64_t v23 = 5 * a5;
      uint64_t v24 = &v22[80 * a5];
      uint64_t v25 = 16 * v23;
      do
      {
        std::allocator<CLMicroLocationRapportTable::Entry>::construct[abi:ne180100]<CLMicroLocationRapportTable::Entry,CLMicroLocationRapportTable::Entry>(v30, (uint64_t)v22, v7);
        v22 += 80;
        v7 += 80;
        v25 -= 80;
      }
      while (v25);
      uint64_t v28 = v24;
      uint64_t v5 = std::vector<CLMicroLocationRapportTable::Entry>::__swap_out_circular_buffer(a1, (uint64_t)v27, v5);
      std::__split_buffer<CLMicroLocationRapportTable::Entry>::~__split_buffer(v27);
    }
  }
  return v5;
}

void sub_2564B6C44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<CLMicroLocationRapportTable::Entry>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v10 = a2 + v6 - a4;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      std::allocator<CLMicroLocationRapportTable::Entry>::construct[abi:ne180100]<CLMicroLocationRapportTable::Entry,CLMicroLocationRapportTable::Entry>(a1 + 16, v8, v10);
      v10 += 80;
      v8 += 80;
    }
    while (v10 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CLMicroLocationRapportTable::Entry *,CLMicroLocationRapportTable::Entry *,CLMicroLocationRapportTable::Entry *>((uint64_t)&v12, a2, v7, v6);
}

void sub_2564B6D14(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMicroLocationRapportTable::Entry>::__swap_out_circular_buffer(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationRapportTable::Entry>,std::reverse_iterator<CLMicroLocationRapportTable::Entry*>,std::reverse_iterator<CLMicroLocationRapportTable::Entry*>,std::reverse_iterator<CLMicroLocationRapportTable::Entry*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  *(void *)(a2 + 8) = v8;
  *(void *)(a2 + 16) = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationRapportTable::Entry>,CLMicroLocationRapportTable::Entry*,CLMicroLocationRapportTable::Entry*,CLMicroLocationRapportTable::Entry*>(v7, a3, a1[1], *(__n128 **)(a2 + 16));
  uint64_t v9 = *a1;
  *a1 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v9;
  uint64_t v10 = a1[1];
  a1[1] = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = v10;
  uint64_t v11 = a1[2];
  a1[2] = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = v11;
  *(void *)a2 = *(void *)(a2 + 8);
  return v6;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationRapportTable::Entry>,std::move_iterator<std::__wrap_iter<CLMicroLocationRapportTable::Entry*>>,std::move_iterator<std::__wrap_iter<CLMicroLocationRapportTable::Entry*>>,CLMicroLocationRapportTable::Entry*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  _DWORD v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::allocator<CLMicroLocationRapportTable::Entry>::construct[abi:ne180100]<CLMicroLocationRapportTable::Entry,CLMicroLocationRapportTable::Entry>(a1, v4, v6);
      v6 += 80;
      uint64_t v4 = v12 + 80;
      v12 += 80;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationRapportTable::Entry>,CLMicroLocationRapportTable::Entry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_2564B6E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CLMicroLocationRapportTable::Entry *,CLMicroLocationRapportTable::Entry *,CLMicroLocationRapportTable::Entry *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a3 + v7;
      uint64_t v9 = a4 + v7;
      *(void *)(a4 + v7 - 80) = *(void *)(a3 + v7 - 80);
      char v10 = (void **)(a4 + v7 - 72);
      if (*(char *)(a4 + v7 - 49) < 0) {
        operator delete(*v10);
      }
      long long v11 = *(_OWORD *)(v8 - 72);
      *(void *)(a4 + v7 - 56) = *(void *)(v8 - 56);
      *(_OWORD *)char v10 = v11;
      *(unsigned char *)(v8 - 49) = 0;
      *(unsigned char *)(v8 - 72) = 0;
      CLMicroLocationProto::RapportDevice::CopyFrom((CLMicroLocationProto::RapportDevice *)(v9 - 48), (const CLMicroLocationProto::RapportDevice *)(v8 - 48));
      *(_OWORD *)(v9 - 16) = *(_OWORD *)(v8 - 16);
      v7 -= 80;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::move_iterator<std::__wrap_iter<CLMicroLocationRapportTable::Entry *>>,std::move_iterator<std::__wrap_iter<CLMicroLocationRapportTable::Entry *>>,CLMicroLocationRapportTable::Entry *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      *(void *)a4 = *(void *)v5;
      uint64_t v7 = (void **)(a4 + 8);
      if (*(char *)(a4 + 31) < 0) {
        operator delete(*v7);
      }
      long long v8 = *(_OWORD *)(v5 + 8);
      *(void *)(a4 + 24) = *(void *)(v5 + 24);
      *(_OWORD *)uint64_t v7 = v8;
      *(unsigned char *)(v5 + 31) = 0;
      *(unsigned char *)(v5 + 8) = 0;
      CLMicroLocationProto::RapportDevice::CopyFrom((CLMicroLocationProto::RapportDevice *)(a4 + 32), (const CLMicroLocationProto::RapportDevice *)(v5 + 32));
      *(_OWORD *)(a4 + 64) = *(_OWORD *)(v5 + 64);
      a4 += 80;
      v5 += 80;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

__n128 *std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationRapportTable::Entry>,CLMicroLocationRapportTable::Entry*,CLMicroLocationRapportTable::Entry*,CLMicroLocationRapportTable::Entry*>(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  uint64_t v4 = a4;
  long long v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  _DWORD v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::allocator<CLMicroLocationRapportTable::Entry>::construct[abi:ne180100]<CLMicroLocationRapportTable::Entry,CLMicroLocationRapportTable::Entry const&>(a1, v4, v6);
      v6 += 80;
      uint64_t v4 = v12 + 5;
      v12 += 5;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationRapportTable::Entry>,CLMicroLocationRapportTable::Entry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_2564B7068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::__hash_table<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item::HashItem,CLMicroLocationRapportMonitor::Item::PredicateItem,std::allocator<CLMicroLocationRapportMonitor::Item>>::__emplace_unique_impl<boost::uuids::uuid &,std::string const&,std::string const&,boost::uuids::uuid const&>(void *a1, _OWORD *a2, long long *a3, long long *a4, _OWORD *a5)
{
  std::__hash_table<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item::HashItem,CLMicroLocationRapportMonitor::Item::PredicateItem,std::allocator<CLMicroLocationRapportMonitor::Item>>::__construct_node<boost::uuids::uuid &,std::string const&,std::string const&,boost::uuids::uuid const&>((uint64_t)a1, a2, a3, a4, a5, (uint64_t)v9);
  inserted = std::__hash_table<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item::HashItem,CLMicroLocationRapportMonitor::Item::PredicateItem,std::allocator<CLMicroLocationRapportMonitor::Item>>::__node_insert_unique(a1, v9[0]);
  if (v7) {
    v9[0] = 0;
  }
  std::unique_ptr<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  return inserted;
}

void sub_2564B70DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item::HashItem,CLMicroLocationRapportMonitor::Item::PredicateItem,std::allocator<CLMicroLocationRapportMonitor::Item>>::__construct_node<boost::uuids::uuid &,std::string const&,std::string const&,boost::uuids::uuid const&>@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, long long *a3@<X2>, long long *a4@<X3>, _OWORD *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11 = a1 + 16;
  uint64_t v12 = operator new(0x60uLL);
  *(void *)a6 = v12;
  *(void *)(a6 + 8) = v11;
  *(unsigned char *)(a6 + 16) = 0;
  *uint64_t v12 = 0;
  v12[1] = 0;
  uint64_t v13 = CLMicroLocationRapportMonitor::Item::Item((uint64_t)(v12 + 2), a2, a3, a4, a5);
  *(unsigned char *)(a6 + 16) = 1;
  unint64_t result = CLMicroLocationRapportMonitor::Item::HashItem::operator()(v13, v13);
  v12[1] = result;
  return result;
}

void sub_2564B7184(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item::HashItem,CLMicroLocationRapportMonitor::Item::PredicateItem,std::allocator<CLMicroLocationRapportMonitor::Item>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item::HashItem,CLMicroLocationRapportMonitor::Item::PredicateItem,std::allocator<CLMicroLocationRapportMonitor::Item>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

uint64_t std::vector<CLMicroLocationRapportTable::Entry>::__emplace_back_slow_path<std::string const&,CLMicroLocationProto::RapportDevice &,boost::uuids::uuid const&>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x333333333333333) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999) {
    unint64_t v10 = 0x333333333333333;
  }
  else {
    unint64_t v10 = v6;
  }
  unint64_t v18 = a1 + 2;
  if (v10) {
    uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRapportMonitor::Item>>((uint64_t)(a1 + 2), v10);
  }
  else {
    uint64_t v11 = 0;
  }
  unint64_t v14 = v11;
  unint64_t v15 = &v11[80 * v5];
  uint64_t v17 = &v11[80 * v10];
  std::allocator<CLMicroLocationRapportTable::Entry>::construct[abi:ne180100]<CLMicroLocationRapportTable::Entry,std::string const&,CLMicroLocationProto::RapportDevice &,boost::uuids::uuid const&>((uint64_t)(a1 + 2), (uint64_t)v15, a2, a3, a4);
  unint64_t v16 = v15 + 80;
  std::vector<CLMicroLocationRapportTable::Entry>::__swap_out_circular_buffer(a1, &v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<CLMicroLocationRapportTable::Entry>::~__split_buffer(&v14);
  return v12;
}

void sub_2564B7308(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMicroLocationRapportTable::Entry>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<CLMicroLocationRapportTable::Entry>::construct[abi:ne180100]<CLMicroLocationRapportTable::Entry,std::string const&,CLMicroLocationProto::RapportDevice &,boost::uuids::uuid const&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v9 = *(std::string *)a3;
  }
  CFAbsoluteTime v8 = cl::chrono::CFAbsoluteTimeClock::now();
  CLMicroLocationRapportTable::Entry::Entry(a2, &v9, a4, a5, &v8);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
}

void sub_2564B73AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationsMeasurementFilters::isMeasurementGood(CLMicroLocationProto::Measurement *a1, uint64_t a2, double *a3, std::locale::__imp **a4)
{
  uint64_t v4 = 0;
  uint64_t v28 = *MEMORY[0x263EF8340];
  switch(*(_DWORD *)(a2 + 64))
  {
    case 1:
      uint64_t v7 = *(void *)(a2 + 16);
      if (!v7) {
        uint64_t v7 = *(void *)(CLMicroLocationProto::Measurement::default_instance(a1) + 16);
      }
      goto LABEL_8;
    case 3:
      uint64_t v7 = *(void *)(a2 + 32);
      if (!v7) {
        uint64_t v7 = *(void *)(CLMicroLocationProto::Measurement::default_instance(a1) + 32);
      }
      goto LABEL_8;
    case 4:
      uint64_t v7 = *(void *)(a2 + 40);
      if (!v7) {
        uint64_t v7 = *(void *)(CLMicroLocationProto::Measurement::default_instance(a1) + 40);
      }
LABEL_8:
      uint64_t v4 = *a3 >= *(double *)a1 - *(double *)(v7 + 8) && (int)*(float *)(v7 + 20) < 0;
      break;
    case 5:
      uint64_t v10 = *(void *)(a2 + 48);
      if (!v10) {
        uint64_t v10 = *(void *)(CLMicroLocationProto::Measurement::default_instance(a1) + 48);
      }
      double v11 = *(double *)a1;
      double v12 = *a3;
      float v13 = *(float *)(v10 + 20);
      unint64_t v14 = *(long long **)(v10 + 40);
      if (*((char *)v14 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)v14, *((void *)v14 + 1));
      }
      else
      {
        long long v15 = *v14;
        buf.__r_.__value_.__r.__words[2] = *((void *)v14 + 2);
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v15;
      }
      BOOL isAnchorModelValid = CLMicroLocationsMeasurementFilters::isAnchorModelValid((uint64_t)&buf, a4);
      double v20 = *(double *)(v10 + 8);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      BOOL v21 = v13 >= -100.0;
      if (v13 > -10.0) {
        BOOL v21 = 0;
      }
      unsigned int v22 = isAnchorModelValid && v21;
      if (v12 >= v11 - v20) {
        uint64_t v4 = v22;
      }
      else {
        uint64_t v4 = 0;
      }
      break;
    case 6:
      unint64_t v16 = *(const CLMicroLocationProto::UwbRange **)(a2 + 56);
      if (!v16) {
        unint64_t v16 = *(const CLMicroLocationProto::UwbRange **)(CLMicroLocationProto::Measurement::default_instance(a1) + 56);
      }
      CLMicroLocationProto::UwbRange::UwbRange((CLMicroLocationProto::UwbRange *)v24, v16);
      BOOL v17 = v25 > 0.0;
      if (v25 == *MEMORY[0x263F14078]) {
        BOOL v17 = 0;
      }
      uint64_t v4 = v26 == 2 && v17;
      if ((v4 & 1) == 0)
      {
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_114);
        }
        unint64_t v18 = logObject_MicroLocation_Default;
        if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 134349312;
          *(double *)((char *)buf.__r_.__value_.__r.__words + 4) = v25;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
          *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v26;
          _os_log_impl(&dword_25631F000, v18, OS_LOG_TYPE_DEBUG, "Bad uwb range, range %{public}.2f, type %{public}d", (uint8_t *)&buf, 0x12u);
        }
      }
      CLMicroLocationProto::UwbRange::~UwbRange((CLMicroLocationProto::UwbRange *)v24);
      break;
    default:
      return v4;
  }
  return v4;
}

void sub_2564B7654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

CLMicroLocationProto::Measurement *CLMicroLocationsMeasurementFilters::filterMeasurements(CLMicroLocationProto::Measurement *a1, uint64_t *a2, double *a3, std::locale::__imp **a4)
{
  uint64_t v5 = *a2;
  unint64_t v6 = (const CLMicroLocationProto::Measurement *)a2[1];
  if ((const CLMicroLocationProto::Measurement *)*a2 == v6) {
    goto LABEL_13;
  }
  uint64_t v10 = (CLMicroLocationProto::Measurement *)a2[1];
  while (CLMicroLocationsMeasurementFilters::isMeasurementGood(a1, v5, a3, a4))
  {
    v5 += 80;
    if ((const CLMicroLocationProto::Measurement *)v5 == v6) {
      goto LABEL_14;
    }
  }
  if ((const CLMicroLocationProto::Measurement *)v5 != v6)
  {
    double v11 = (const CLMicroLocationProto::Measurement *)(v5 + 80);
    if ((const CLMicroLocationProto::Measurement *)(v5 + 80) != v6)
    {
      uint64_t v10 = (CLMicroLocationProto::Measurement *)v5;
      do
      {
        if (CLMicroLocationsMeasurementFilters::isMeasurementGood(a1, (uint64_t)v11, a3, a4))
        {
          CLMicroLocationProto::Measurement::CopyFrom(v10, v11);
          uint64_t v10 = (CLMicroLocationProto::Measurement *)((char *)v10 + 80);
        }
        double v11 = (const CLMicroLocationProto::Measurement *)((char *)v11 + 80);
      }
      while (v11 != v6);
      goto LABEL_14;
    }
LABEL_13:
    uint64_t v10 = (CLMicroLocationProto::Measurement *)v5;
  }
LABEL_14:
  double v12 = (CLMicroLocationProto::Measurement *)a2[1];
  return std::vector<CLMicroLocationProto::Measurement>::erase((uint64_t)a2, v10, v12);
}

CLMicroLocationProto::Measurement *std::vector<CLMicroLocationProto::Measurement>::erase(uint64_t a1, CLMicroLocationProto::Measurement *this, CLMicroLocationProto::Measurement *a3)
{
  if (this != a3)
  {
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,CLMicroLocationProto::Measurement *,CLMicroLocationProto::Measurement *,CLMicroLocationProto::Measurement *,0>(a3, *(CLMicroLocationProto::Measurement **)(a1 + 8), this);
    unint64_t v6 = v5;
    uint64_t v7 = *(void (****)(void))(a1 + 8);
    if (v7 != v5)
    {
      CFAbsoluteTime v8 = v7 - 10;
      std::string v9 = v7 - 10;
      uint64_t v10 = v7 - 10;
      do
      {
        double v11 = *v10;
        v10 -= 10;
        (*v11)(v9);
        v8 -= 10;
        BOOL v12 = v9 == v6;
        std::string v9 = v10;
      }
      while (!v12);
    }
    *(void *)(a1 + 8) = v6;
  }
  return this;
}

BOOL CLMicroLocationsMeasurementFilters::isAnchorModelValid(uint64_t a1, std::locale::__imp **a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = a2[1];
  if (*a2 == v3) {
    return 0;
  }
  do
  {
    MEMORY[0x25A2A6230](&v9);
    uint64_t v5 = boost::algorithm::ifind_first<std::string const,std::string>(a1, v2, &v9);
    uint64_t v7 = v6;
    std::locale::~locale(&v9);
    BOOL result = v5 != v7;
    if (v5 != v7) {
      break;
    }
    uint64_t v2 = (std::locale::__imp *)((char *)v2 + 24);
  }
  while (v2 != v3);
  return result;
}

void sub_2564B78B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t boost::algorithm::ifind_first<std::string const,std::string>(uint64_t a1, std::locale::__imp *a2, std::locale *a3)
{
  std::locale::locale(&v15, a3);
  LODWORD(v5) = *((char *)a2 + 23);
  BOOL v6 = (int)v5 < 0;
  uint64_t v7 = *((void *)a2 + 1);
  if ((int)v5 < 0) {
    a2 = *(std::locale::__imp **)a2;
  }
  uint64_t v5 = v5;
  if (v6) {
    uint64_t v5 = v7;
  }
  CFAbsoluteTime v8 = (std::locale::__imp *)((char *)a2 + v5);
  std::locale::locale(&v18, &v15);
  v16[0].__locale_ = a2;
  v16[1].__locale_ = v8;
  std::locale::locale(&v17, &v18);
  std::locale::~locale(&v18);
  int v9 = *(char *)(a1 + 23);
  BOOL v10 = v9 < 0;
  if (v9 >= 0) {
    uint64_t v11 = a1;
  }
  else {
    uint64_t v11 = *(void *)a1;
  }
  uint64_t v12 = *(unsigned __int8 *)(a1 + 23);
  if (v10) {
    uint64_t v12 = *(void *)(a1 + 8);
  }
  uint64_t v13 = boost::algorithm::detail::first_finderF<std::__wrap_iter<char const*>,boost::algorithm::is_iequal>::operator()<std::__wrap_iter<char const*>>(v16, v11, v11 + v12);
  std::locale::~locale(&v17);
  std::locale::~locale(&v15);
  return v13;
}

void sub_2564B7994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(v10);
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_91()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

CLMicroLocationProto::Measurement *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,CLMicroLocationProto::Measurement *,CLMicroLocationProto::Measurement *,CLMicroLocationProto::Measurement *,0>(CLMicroLocationProto::Measurement *a1, CLMicroLocationProto::Measurement *a2, CLMicroLocationProto::Measurement *this)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      CLMicroLocationProto::Measurement::CopyFrom(this, v4);
      uint64_t v4 = (const CLMicroLocationProto::Measurement *)((char *)v4 + 80);
      this = (CLMicroLocationProto::Measurement *)((char *)this + 80);
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t boost::algorithm::detail::first_finderF<std::__wrap_iter<char const*>,boost::algorithm::is_iequal>::operator()<std::__wrap_iter<char const*>>(const std::locale *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  if (a2 != a3)
  {
    BOOL v6 = a1 + 2;
    locale = a1[1].__locale_;
    do
    {
      CFAbsoluteTime v8 = a1->__locale_;
      if (a1->__locale_ == locale) {
        break;
      }
      uint64_t v9 = 0;
      BOOL v10 = a1->__locale_;
      uint64_t v11 = v3;
      while ((char *)v8 + v9 != (char *)a1[1].__locale_)
      {
        if (!boost::algorithm::is_iequal::operator()<char,char>(v6, (char *)(v3 + v9), (char *)v8 + v9)) {
          goto LABEL_10;
        }
        ++v11;
        BOOL v10 = (std::locale::__imp *)((char *)v10 + 1);
        ++v9;
        if (v3 + v9 == a3)
        {
          BOOL v10 = (std::locale::__imp *)((char *)v8 + v9);
          goto LABEL_10;
        }
      }
      BOOL v10 = (std::locale::__imp *)((char *)v8 + v9);
LABEL_10:
      locale = a1[1].__locale_;
      if (v10 == locale) {
        return v3;
      }
      ++v3;
    }
    while (v3 != a3);
    return a3;
  }
  return v3;
}

BOOL boost::algorithm::is_iequal::operator()<char,char>(const std::locale *a1, char *a2, char *a3)
{
  uint64_t v5 = *a2;
  BOOL v6 = (std::locale::id *)MEMORY[0x263F8C108];
  uint64_t v7 = std::locale::use_facet(a1, MEMORY[0x263F8C108]);
  LODWORD(v5) = ((uint64_t (*)(const std::locale::facet *, uint64_t))v7->__vftable[1].~facet)(v7, v5);
  uint64_t v8 = *a3;
  uint64_t v9 = std::locale::use_facet(a1, v6);
  return v5 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v9->__vftable[1].~facet)(v9, v8);
}

void sub_2564B7C58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CLMiLoHomeSlamAnalyticEventTable::Entry::Entry(uint64_t result, __int16 a2, double a3)
{
  *(double *)BOOL result = a3;
  *(_WORD *)(result + 8) = a2;
  return result;
}

void CLMicroLocationEventLogger::CLMicroLocationEventLogger(CLMicroLocationEventLogger *this, ULDatabase *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = a2;
}

void CLMicroLocationEventLogger::~CLMicroLocationEventLogger(CLMicroLocationEventLogger *this)
{
  CLMicroLocationEventLogger::flushToDisk(this);
  uint64_t v2 = (void **)this;
  std::vector<CLMicroLocationLoggedEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_92()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

uint64_t CLMicroLocationErrorHandling::reportError(uint64_t *a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_116);
  }
  uint64_t v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
  {
    if (*((char *)a1 + 23) >= 0) {
      uint64_t v3 = a1;
    }
    else {
      uint64_t v3 = (uint64_t *)*a1;
    }
    *(_DWORD *)std::string buf = 136315138;
    BOOL v6 = v3;
    _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_ERROR, "Microlocation error report: %s", buf, 0xCu);
  }
  uint64_t result = ULSettings::get<ULSettings::AnalyticsSendEventEnabled>();
  if (result) {
    return AnalyticsSendEventLazy();
  }
  return result;
}

void sub_2564B7F6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id ___ZN28CLMicroLocationErrorHandling11reportErrorERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  v6[1] = *MEMORY[0x263EF8340];
  uint64_t v5 = @"errorType";
  uint64_t v1 = *(uint64_t **)(a1 + 32);
  if (*((char *)v1 + 23) < 0) {
    uint64_t v1 = (uint64_t *)*v1;
  }
  uint64_t v2 = [NSString stringWithUTF8String:v1];
  v6[0] = v2;
  uint64_t v3 = [NSDictionary dictionaryWithObjects:v6 forKeys:&v5 count:1];

  return v3;
}

void sub_2564B8068(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationErrorHandling::reportError(CLMicroLocationErrorHandling *this, NSString *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v2 = this;
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_116);
  }
  uint64_t v3 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string buf = 138412290;
    BOOL v6 = v2;
    _os_log_impl(&dword_25631F000, v3, OS_LOG_TYPE_ERROR, "Microlocation error report: %@", buf, 0xCu);
  }
  if (ULSettings::get<ULSettings::AnalyticsSendEventEnabled>())
  {
    uint64_t v4 = v2;
    AnalyticsSendEventLazy();
  }
}

void sub_2564B81BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

id ___ZN28CLMicroLocationErrorHandling11reportErrorEP8NSString_block_invoke(uint64_t a1)
{
  v5[1] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v4 = @"errorType";
  v5[0] = v1;
  uint64_t v2 = [NSDictionary dictionaryWithObjects:v5 forKeys:&v4 count:1];
  return v2;
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_93()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

uint64_t CLMicroLocationFingerprintDatabaseSource::CLMicroLocationFingerprintDatabaseSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_2704E1F40;
  *(void *)(a1 + 8) = 0;
  BOOL v6 = (char **)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v7 = *(void *)(a3 + 24);
  if (!v7) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t))(*(void *)v7 + 48))(v7);
  uint64_t v28 = a1 + 88;
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100](a1 + 88, a2);
  *(unsigned char *)(a1 + 128) = 0;
  *(void *)(a1 + 120) = a5;
  *(unsigned char *)(a1 + 320) = 0;
  uint64_t v11 = *(_OWORD **)a4;
  uint64_t v12 = *(_OWORD **)(a4 + 8);
  if (*(_OWORD **)a4 != v12)
  {
    do
    {
      id v13 = *(id *)(*(void *)(a1 + 120) + 64);
      v32[0] = *v11;
      unint64_t v14 = (void **)operator new(0x10uLL);
      __int16 v35 = v14 + 2;
      uint64_t v36 = v14 + 2;
      *(_OWORD *)unint64_t v14 = v32[0];
      long long v34 = v14;
      if (v13)
      {
        objc_msgSend(v13, "fetchMeasurementsForRecordingUUIDs:", &v34, v28);
        unint64_t v14 = v34;
        if (!v34) {
          goto LABEL_8;
        }
      }
      else
      {
        memset(v29, 0, sizeof(v29));
      }
      __int16 v35 = v14;
      operator delete(v14);
LABEL_8:

      CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)v32, (const CLMicroLocationProto::RecordingEvent *)(v11 + 5));
      char v33 = 1;
      long long v30 = *v11;
      char v31 = 1;
      CLMicroLocationFingerprint::create(v29, (uint64_t)v32, (uint64_t)&v30, (unint64_t *)(a1 + 32), &v34);
      if (v33) {
        CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v32);
      }
      if (v37)
      {
        unint64_t v16 = *(_OWORD **)(a1 + 16);
        unint64_t v15 = *(void *)(a1 + 24);
        if ((unint64_t)v16 >= v15)
        {
          uint64_t v18 = ((char *)v16 - *v6) >> 4;
          unint64_t v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 60) {
            std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v20 = v15 - (void)*v6;
          if (v20 >> 3 > v19) {
            unint64_t v19 = v20 >> 3;
          }
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v19;
          }
          if (v21) {
            unsigned int v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::uuids::uuid>>(a1 + 24, v21);
          }
          else {
            unsigned int v22 = 0;
          }
          uint64_t v23 = &v22[16 * v18];
          *(_OWORD *)uint64_t v23 = *v11;
          float v25 = *(char **)(a1 + 8);
          uint64_t v24 = *(char **)(a1 + 16);
          int v26 = v23;
          if (v24 != v25)
          {
            do
            {
              *((_OWORD *)v26 - 1) = *((_OWORD *)v24 - 1);
              v26 -= 16;
              v24 -= 16;
            }
            while (v24 != v25);
            uint64_t v24 = *v6;
          }
          std::locale v17 = v23 + 16;
          *(void *)(a1 + 8) = v26;
          *(void *)(a1 + 16) = v23 + 16;
          *(void *)(a1 + 24) = &v22[16 * v21];
          if (v24) {
            operator delete(v24);
          }
        }
        else
        {
          _OWORD *v16 = *v11;
          std::locale v17 = v16 + 1;
        }
        *(void *)(a1 + 16) = v17;
      }
      std::__optional_destruct_base<CLMicroLocationFingerprint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v34);
      long long v34 = (void **)v29;
      std::vector<CLMicroLocationMeasurementTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v34);
      uint64_t v11 = (_OWORD *)((char *)v11 + 248);
    }
    while (v11 != v12);
  }
  return a1;
}

void sub_2564B8570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,void *__p,uint64_t a37)
{
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(v37 + 48);
  int v40 = *v38;
  if (*v38)
  {
    *(void *)(v37 + 16) = v40;
    operator delete(v40);
  }
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationFingerprintDatabaseSource::size(CLMicroLocationFingerprintDatabaseSource *this)
{
  return (uint64_t)(*((void *)this + 2) - *((void *)this + 1)) >> 4;
}

uint64_t CLMicroLocationFingerprintDatabaseSource::at(CLMicroLocationFingerprintDatabaseSource *this, unint64_t a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 14);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 48))(v3))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    unint64_t v12 = a2;
    id v13 = exception;
    std::to_string(&v25, v12);
    unint64_t v14 = std::string::insert(&v25, 0, "Data Source Cancelled at index ");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    CLMicroLocationFingerprintDataSources::IInterruptibleDataSource::CancelledException::CancelledException(v13, &v22);
  }
  long long v26 = *(_OWORD *)(*((void *)this + 1) + 16 * a2);
  id v5 = *(id *)(*((void *)this + 15) + 64);
  BOOL v6 = operator new(0x10uLL);
  v25.__r_.__value_.__l.__size_ = (std::string::size_type)(v6 + 1);
  v25.__r_.__value_.__r.__words[2] = (std::string::size_type)(v6 + 1);
  *BOOL v6 = v26;
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
  if (!v5)
  {
    memset(v21, 0, sizeof(v21));
    goto LABEL_7;
  }
  [v5 fetchMeasurementsForRecordingUUIDs:&v25];
  BOOL v6 = (_OWORD *)v25.__r_.__value_.__r.__words[0];
  if (v25.__r_.__value_.__r.__words[0])
  {
LABEL_7:
    v25.__r_.__value_.__l.__size_ = (std::string::size_type)v6;
    operator delete(v6);
  }

  id v7 = *(id *)(*((void *)this + 15) + 88);
  uint64_t v8 = operator new(0x10uLL);
  v25.__r_.__value_.__l.__size_ = (std::string::size_type)(v8 + 1);
  v25.__r_.__value_.__r.__words[2] = (std::string::size_type)(v8 + 1);
  _OWORD *v8 = v26;
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
  if (!v7)
  {
    memset(v20, 0, sizeof(v20));
    goto LABEL_12;
  }
  [v7 fetchRecordingEventsForRecordingUUIDs:&v25];
  uint64_t v8 = (_OWORD *)v25.__r_.__value_.__r.__words[0];
  if (v25.__r_.__value_.__r.__words[0])
  {
LABEL_12:
    v25.__r_.__value_.__l.__size_ = (std::string::size_type)v8;
    operator delete(v8);
  }

  uint64_t v9 = (long long *)v20[0];
  CLMicroLocationsMeasurementFilters::filterStaleWiFiMeasurementsForFingerprint<CLMicroLocationMeasurementTable::Entry>(v21, v20[0]);
  CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)v18, (const CLMicroLocationProto::RecordingEvent *)(v9 + 5));
  char v19 = 1;
  long long v23 = *v9;
  char v24 = 1;
  CLMicroLocationFingerprint::create(v21, (uint64_t)v18, (uint64_t)&v23, (unint64_t *)this + 4, &v25);
  std::__optional_storage_base<CLMicroLocationFingerprint,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<CLMicroLocationFingerprint,false>>((uint64_t)this + 128, (uint64_t)&v25);
  std::__optional_destruct_base<CLMicroLocationFingerprint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v25);
  if (v19) {
    CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v18);
  }
  if (!*((unsigned char *)this + 320))
  {
    unint64_t v16 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v17, "fFingerprintCache optional is empty, database likely changed since data source construction");
    CLMicroLocationFingerprintDataSources::IInterruptibleDataSource::CancelledException::CancelledException(v16, &v17);
  }
  usleep(0x12Cu);
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
  std::vector<CLMicroLocationMeasurementTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  return (uint64_t)this + 128;
}

void sub_2564B8908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a48 < 0) {
    operator delete(__p);
  }
  if (a58 < 0)
  {
    operator delete(a53);
    if ((v59 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v59)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v58);
  goto LABEL_8;
}

void CLMicroLocationFingerprintDatabaseSource::~CLMicroLocationFingerprintDatabaseSource(CLMicroLocationFingerprintDatabaseSource *this)
{
  *(void *)this = &unk_2704E1F40;
  std::__optional_destruct_base<CLMicroLocationFingerprint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 128);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((void *)this + 11);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)this + 48);
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_2704E1F40;
  std::__optional_destruct_base<CLMicroLocationFingerprint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 128);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((void *)this + 11);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)this + 48);
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x25A2A6340);
}

void CLMicroLocationStateMachine::EventBase::getEventName(CLMicroLocationStateMachine::EventBase *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 1), *((void *)this + 2));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 3);
  }
}

CLMicroLocationStateMachine::StateBase *CLMicroLocationStateMachine::StateBase::StateBase(CLMicroLocationStateMachine::StateBase *this, char a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  *(void *)this = &unk_2704E1F88;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 1, "No Name Given");
  *((void *)this + 7) = 0;
  *((void *)this + 6) = (char *)this + 56;
  *((unsigned char *)this + 32) = 0;
  *((void *)this + 8) = 0;
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_117);
  }
  uint64_t v4 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO))
  {
    v6[0] = 68289026;
    v6[1] = 0;
    __int16 v7 = 2082;
    uint64_t v8 = "";
    _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"StateBase\"}", (uint8_t *)v6, 0x12u);
  }
  *((unsigned char *)this + 32) = a2;
  *((void *)this + 5) = 0;
  *((void *)this + 9) = 0;
  std::__tree<std::string>::destroy((uint64_t)this + 48, *((char **)this + 7));
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 6) = (char *)this + 56;
  *((void *)this + 10) = 0;
  return this;
}

void CLMicroLocationStateMachine::StateBase::~StateBase(CLMicroLocationStateMachine::StateBase *this)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  *(void *)this = &unk_2704E1F88;
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_117);
  }
  uint64_t v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    __int16 v5 = 2082;
    BOOL v6 = "";
    _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"~StateBase\"}", (uint8_t *)v4, 0x12u);
  }
  uint64_t v3 = (char *)*((void *)this + 7);
  *((void *)this + 5) = 0;
  *((void *)this + 9) = 0;
  std::__tree<std::string>::destroy((uint64_t)this + 48, v3);
  *((void *)this + 6) = (char *)this + 56;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 10) = 0;
  std::__tree<std::string>::destroy((uint64_t)this + 48, 0);
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  CLMicroLocationStateMachine::StateBase::~StateBase(this);
  JUMPOUT(0x25A2A6340);
}

CLMicroLocationStateMachine::StateMachineBase *CLMicroLocationStateMachine::StateMachineBase::StateMachineBase(CLMicroLocationStateMachine::StateMachineBase *this)
{
  *(void *)this = &unk_2704E1FA8;
  *((void *)this + 4) = 0;
  *((void *)this + 3) = 0;
  uint64_t v2 = (void *)((char *)this + 24);
  *((void *)this + 2) = (char *)this + 24;
  uint64_t v3 = (void *)((char *)this + 16);
  std::__tree<std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>>>::destroy((uint64_t)this + 16, 0);
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  void *v3 = v2;
  void *v2 = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 6) = 0;
  return this;
}

void CLMicroLocationStateMachine::StateMachineBase::~StateMachineBase(CLMicroLocationStateMachine::StateMachineBase *this)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  *(void *)this = &unk_2704E1FA8;
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_117);
  }
  uint64_t v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO))
  {
    v8[0] = 68289026;
    v8[1] = 0;
    __int16 v9 = 2082;
    BOOL v10 = "";
    _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"~StateMachineBase\"}", (uint8_t *)v8, 0x12u);
  }
  uint64_t v3 = (CLMicroLocationStateMachine::StateMachineBase *)*((void *)this + 2);
  if (v3 != (CLMicroLocationStateMachine::StateMachineBase *)((char *)this + 24))
  {
    do
    {
      uint64_t v4 = *((void *)v3 + 7);
      *((void *)v3 + 7) = 0;
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
      __int16 v5 = (CLMicroLocationStateMachine::StateMachineBase *)*((void *)v3 + 1);
      if (v5)
      {
        do
        {
          BOOL v6 = v5;
          __int16 v5 = *(CLMicroLocationStateMachine::StateMachineBase **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          BOOL v6 = (CLMicroLocationStateMachine::StateMachineBase *)*((void *)v3 + 2);
          BOOL v7 = *(void *)v6 == (void)v3;
          uint64_t v3 = v6;
        }
        while (!v7);
      }
      uint64_t v3 = v6;
    }
    while (v6 != (CLMicroLocationStateMachine::StateMachineBase *)((char *)this + 24));
  }
  *((void *)this + 1) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  std::__tree<std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>>>::destroy((uint64_t)this + 16, *((void **)this + 3));
}

uint64_t CLMicroLocationStateMachine::StateMachineBase::addStateToStateMap(uint64_t a1, long long *a2, uint64_t *a3)
{
  BOOL v7 = a2;
  uint64_t v4 = std::__tree<std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 16), (const void **)a2, (uint64_t)&std::piecewise_construct, &v7);
  uint64_t v5 = *a3;
  *a3 = 0;
  uint64_t result = v4[7];
  v4[7] = v5;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void CLMicroLocationStateMachine::StateMachineBase::setInitialState(void *a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (*((char *)a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)*a2, a2[1]);
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  uint64_t v4 = std::__tree<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::__map_value_compare<std::string,std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>>>::find<std::string>((uint64_t)(a1 + 2), (const void **)&__p.__r_.__value_.__l.__data_);
  if (a1 + 3 == (void *)v4) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 56);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v5) {
      goto LABEL_9;
    }
  }
  else if (v5)
  {
LABEL_9:
    CLMicroLocationStateMachine::StateMachineBase::enterNewState(a1, v5);
    return;
  }
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_117);
  }
  BOOL v6 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
  {
    BOOL v7 = v2;
    if (*((char *)v2 + 23) < 0) {
      BOOL v7 = (uint64_t *)*v2;
    }
    *(_DWORD *)std::string buf = 68289283;
    int v11 = 0;
    __int16 v12 = 2082;
    id v13 = "";
    __int16 v14 = 2081;
    long long v15 = v7;
    _os_log_impl(&dword_25631F000, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"State Machine: Failed to initialize state because requested state doesn't exist in the state table\", \"State\":%{private, location:escape_only}s}", buf, 0x1Cu);
  }
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_117);
  }
  uint64_t v8 = logObject_MicroLocation_Default;
  if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
  {
    if (*((char *)v2 + 23) < 0) {
      uint64_t v2 = (uint64_t *)*v2;
    }
    *(_DWORD *)std::string buf = 68289283;
    int v11 = 0;
    __int16 v12 = 2082;
    id v13 = "";
    __int16 v14 = 2081;
    long long v15 = v2;
    _os_signpost_emit_with_name_impl(&dword_25631F000, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "State Machine: Failed to initialize state because requested state doesn't exist in the state table", "{\"msg%{public}.0s\":\"State Machine: Failed to initialize state because requested state doesn't exist in the state table\", \"State\":%{private, location:escape_only}s}", buf, 0x1Cu);
  }
}

void sub_2564B92E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_94()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

void std::__tree<std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  BOOL v6 = (uint64_t **)std::__tree<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::__map_value_compare<std::string,std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  BOOL v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    std::__tree<std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__insert_node_at(a1, v11, v8, v10[0]);
    BOOL v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  BOOL v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  BOOL v7 = (std::string *)(v6 + 32);
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((void *)v6 + 7) = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_2564B9544(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void CLHomeNearbyObjectInternal::Builder::build(CLHomeNearbyObjectInternal::Builder *this@<X0>, uint64_t a2@<X8>)
{
  int v3 = *((_DWORD *)this + 2);
  long long v4 = *((_OWORD *)this + 1);
  char v5 = *((unsigned char *)this + 56);
  uint64_t v6 = *(void *)((char *)this + 60);
  char v7 = *((unsigned char *)this + 68);
  *(void *)a2 = *(void *)this;
  *(_DWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 16) = v4;
  uint64_t v8 = (std::string *)(a2 + 32);
  if (*((char *)this + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)this + 4), *((void *)this + 5));
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *((_OWORD *)this + 2);
    v8->__r_.__value_.__r.__words[2] = *((void *)this + 6);
  }
  *(unsigned char *)(a2 + 56) = v5;
  *(void *)(a2 + 60) = v6;
  *(unsigned char *)(a2 + 68) = v7;
}

uint64_t CLHomeNearbyObjectInternal::isNearbyObjectUwbRangingSupportedOnDevice(CLHomeNearbyObjectInternal *this)
{
  uint64_t v1 = [MEMORY[0x263F140C0] deviceCapabilities];
  uint64_t v2 = [v1 supportsPreciseDistanceMeasurement];

  return v2;
}

void sub_2564B9734(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564B9884(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564B9900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CLHomeNearbyRangeBridge;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_2564B99EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564B9BB0(_Unwind_Exception *exception_object)
{
}

void sub_2564B9CF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564BA310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  _Unwind_Resume(a1);
}

void sub_2564BA7BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char *a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  std::vector<CLHomeNearbyObjectInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&a49);
  a49 = &a33;
  std::vector<CLHomeNearbyObjectInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&a49);

  _Unwind_Resume(a1);
}

uint64_t std::vector<CLHomeNearbyObjectInternal>::emplace_back<CLHomeNearbyObjectInternal>(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - *a1) >> 4);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0x333333333333333) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 4);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x199999999999999) {
      unint64_t v15 = 0x333333333333333;
    }
    else {
      unint64_t v15 = v13;
    }
    v22[4] = v4;
    if (v15) {
      uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRapportMonitor::Item>>(v4, v15);
    }
    else {
      uint64_t v16 = 0;
    }
    std::string v17 = &v16[80 * v12];
    v22[0] = v16;
    v22[1] = v17;
    void v22[3] = &v16[80 * v15];
    long long v18 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)std::string v17 = *(_OWORD *)a2;
    *((_OWORD *)v17 + 1) = v18;
    long long v19 = *(_OWORD *)(a2 + 32);
    *((void *)v17 + 6) = *(void *)(a2 + 48);
    *((_OWORD *)v17 + 2) = v19;
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 32) = 0;
    uint64_t v20 = *(void *)(a2 + 56);
    *(void *)(v17 + 61) = *(void *)(a2 + 61);
    *((void *)v17 + 7) = v20;
    v22[2] = v17 + 80;
    std::vector<CLHomeNearbyObjectInternal>::__swap_out_circular_buffer(a1, v22);
    uint64_t v11 = a1[1];
    std::__split_buffer<CLHomeNearbyObjectInternal>::~__split_buffer((uint64_t)v22);
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)unint64_t v7 = *(_OWORD *)a2;
    *(_OWORD *)(v7 + 16) = v8;
    long long v9 = *(_OWORD *)(a2 + 32);
    *(void *)(v7 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(v7 + 32) = v9;
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 32) = 0;
    uint64_t v10 = *(void *)(a2 + 56);
    *(void *)(v7 + 61) = *(void *)(a2 + 61);
    *(void *)(v7 + 56) = v10;
    uint64_t v11 = v7 + 80;
    a1[1] = v7 + 80;
  }
  a1[1] = v11;
  return v11 - 80;
}

void sub_2564BA9D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLHomeNearbyObjectInternal>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2564BAAC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564BABC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564BAD58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564BAEA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564BAFE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_95()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

void std::vector<CLHomeNearbyObjectInternal>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<CLHomeNearbyObjectInternal>::__clear[abi:ne180100]((uint64_t *)v2);
    int v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<CLHomeNearbyObjectInternal>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 80)
  {
    if (*(char *)(i - 25) < 0) {
      operator delete(*(void **)(i - 48));
    }
  }
  a1[1] = v2;
}

uint64_t std::vector<CLHomeNearbyObjectInternal>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLHomeNearbyObjectInternal>,std::reverse_iterator<CLHomeNearbyObjectInternal*>,std::reverse_iterator<CLHomeNearbyObjectInternal*>,std::reverse_iterator<CLHomeNearbyObjectInternal*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLHomeNearbyObjectInternal>,std::reverse_iterator<CLHomeNearbyObjectInternal*>,std::reverse_iterator<CLHomeNearbyObjectInternal*>,std::reverse_iterator<CLHomeNearbyObjectInternal*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  int v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 64);
      *(_OWORD *)(v7 - 80) = *(_OWORD *)(a3 - 80);
      *(_OWORD *)(v7 - 64) = v8;
      long long v9 = *(_OWORD *)(a3 - 48);
      *(void *)(v7 - 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v7 - 48) = v9;
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 48) = 0;
      uint64_t v10 = *(void *)(a3 - 24);
      *(void *)(v7 - 19) = *(void *)(a3 - 19);
      *(void *)(v7 - 24) = v10;
      uint64_t v7 = *((void *)&v16 + 1) - 80;
      *((void *)&v16 + 1) -= 80;
      a3 -= 80;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLHomeNearbyObjectInternal>,std::reverse_iterator<CLHomeNearbyObjectInternal*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLHomeNearbyObjectInternal>,std::reverse_iterator<CLHomeNearbyObjectInternal*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<CLHomeNearbyObjectInternal>,std::reverse_iterator<CLHomeNearbyObjectInternal*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<CLHomeNearbyObjectInternal>,std::reverse_iterator<CLHomeNearbyObjectInternal*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 55) < 0) {
      operator delete(*(void **)(v1 + 32));
    }
    v1 += 80;
  }
}

uint64_t std::__split_buffer<CLHomeNearbyObjectInternal>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<CLHomeNearbyObjectInternal>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 80;
      *(void *)(a1 + 16) = v2 - 80;
      if (*(char *)(v2 - 25) < 0)
      {
        operator delete(*(void **)(v2 - 48));
        uint64_t v5 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void *std::vector<CLHomeNearbyObjectInternal>::__init_with_size[abi:ne180100]<CLHomeNearbyObjectInternal*,CLHomeNearbyObjectInternal*>(void *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<CLMicroLocationRapportMonitor::Item>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLHomeNearbyObjectInternal>,CLHomeNearbyObjectInternal*,CLHomeNearbyObjectInternal*,CLHomeNearbyObjectInternal*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2564BB53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<CLHomeNearbyObjectInternal>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLHomeNearbyObjectInternal>,CLHomeNearbyObjectInternal*,CLHomeNearbyObjectInternal*,CLHomeNearbyObjectInternal*>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v16 = a4;
  uint64_t v17 = a4;
  v14[0] = a1;
  v14[1] = &v16;
  _DWORD v14[2] = &v17;
  char v15 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2 + 2;
    do
    {
      long long v7 = *(v6 - 1);
      *(_OWORD *)uint64_t v4 = *(v6 - 2);
      *(_OWORD *)(v4 + 16) = v7;
      long long v8 = (std::string *)(v4 + 32);
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v10 = v17;
      }
      else
      {
        long long v9 = *v6;
        *(void *)(v4 + 48) = *((void *)v6 + 2);
        *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
        uint64_t v10 = v4;
      }
      uint64_t v11 = v6 - 2;
      uint64_t v12 = *((void *)v6 + 3);
      *(void *)(v4 + 61) = *(void *)((char *)v6 + 29);
      *(void *)(v4 + 56) = v12;
      uint64_t v4 = v10 + 80;
      uint64_t v17 = v10 + 80;
      v6 += 5;
    }
    while (v11 + 5 != a3);
  }
  char v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLHomeNearbyObjectInternal>,CLHomeNearbyObjectInternal*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v4;
}

void sub_2564BB62C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLHomeNearbyObjectInternal>,CLHomeNearbyObjectInternal*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<CLHomeNearbyObjectInternal>,CLHomeNearbyObjectInternal*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<CLHomeNearbyObjectInternal>,CLHomeNearbyObjectInternal*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 25) < 0) {
      operator delete(*(void **)(v1 - 48));
    }
    v1 -= 80;
  }
}

void sub_2564BB784(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ULDBUtils::insertEntries<CLMicroLocationAssociatedStateTable,ULAssociatedStateMO>(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v12 = 0;
  unint64_t v13 = &v12;
  uint64_t v14 = 0x2020000000;
  char v15 = 0;
  uint64_t v4 = [v3 managedObjectContext];
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 3221225472;
  _DWORD v8[2] = ___ZN9ULDBUtils13insertEntriesI35CLMicroLocationAssociatedStateTable19ULAssociatedStateMOEEbP7ULStoreRKNSt3__16vectorINT_5EntryENS5_9allocatorIS8_EEEE_block_invoke;
  v8[3] = &unk_2653F90B8;
  uint64_t v11 = a2;
  id v5 = v3;
  id v9 = v5;
  uint64_t v10 = &v12;
  [v4 performBlockAndWait:v8];

  uint64_t v6 = *((unsigned __int8 *)v13 + 24);
  _Block_object_dispose(&v12, 8);

  return v6;
}

void sub_2564BB8C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ULDBUtils::fetchEntries<CLMicroLocationAssociatedStateTable,ULAssociatedStateMO>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, std::string *a5@<X8>)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  uint64_t v23 = 0;
  char v24 = &v23;
  uint64_t v25 = 0x4812000000;
  long long v26 = __Block_byref_object_copy__21;
  uint64_t v27 = __Block_byref_object_dispose__21;
  uint64_t v28 = &unk_25654E519;
  memset(v29, 0, sizeof(v29));
  uint64_t v12 = [v9 managedObjectContext];
  v17[0] = MEMORY[0x263EF8330];
  v17[1] = 3221225472;
  v17[2] = ___ZN9ULDBUtils12fetchEntriesI35CLMicroLocationAssociatedStateTable19ULAssociatedStateMOEENSt3__16vectorINT_5EntryENS3_9allocatorIS6_EEEEP7ULStoreP7NSArrayIP11NSPredicateEPSC_IP16NSSortDescriptorEm_block_invoke;
  v17[3] = &unk_2653F90E0;
  id v13 = v10;
  id v18 = v13;
  id v14 = v11;
  id v19 = v14;
  uint64_t v22 = a4;
  id v15 = v9;
  id v20 = v15;
  unint64_t v21 = &v23;
  [v12 performBlockAndWait:v17];

  uint64_t v16 = v24;
  a5->__r_.__value_.__l.__size_ = 0;
  a5->__r_.__value_.__r.__words[2] = 0;
  a5->__r_.__value_.__r.__words[0] = 0;
  std::vector<CLMicroLocationAssociatedStateTable::Entry>::__init_with_size[abi:ne180100]<CLMicroLocationAssociatedStateTable::Entry*,CLMicroLocationAssociatedStateTable::Entry*>(a5, (long long *)v16[6], (long long *)v16[7], 0x8E38E38E38E38E39 * ((v16[7] - v16[6]) >> 3));

  _Block_object_dispose(&v23, 8);
  long long v30 = (void **)v29;
  std::vector<CLMicroLocationAssociatedStateTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v30);
}

void sub_2564BBABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, void *a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);

  _Block_object_dispose(va, 8);
  *(void *)(v14 - 96) = v13;
  std::vector<CLMicroLocationAssociatedStateTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 96));

  _Unwind_Resume(a1);
}

void ULDBUtils::fetchAllWithLimit<CLMicroLocationAssociatedStateTable,ULAssociatedStateMO>(void *a1@<X0>, unsigned int a2@<W1>, std::string *a3@<X8>)
{
  v10[1] = *MEMORY[0x263EF8340];
  id v5 = a1;
  uint64_t v6 = (void *)MEMORY[0x263F08B30];
  long long v7 = [(id)objc_opt_class() defaultSortProperty];
  long long v8 = [v6 sortDescriptorWithKey:v7 ascending:0];

  v10[0] = v8;
  id v9 = [MEMORY[0x263EFF8C0] arrayWithObjects:v10 count:1];
  ULDBUtils::fetchEntries<CLMicroLocationAssociatedStateTable,ULAssociatedStateMO>(v5, 0, v9, a2, a3);
}

void sub_2564BBC20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564BBD00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_2564BBDE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564BBFF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN9ULDBUtils13insertEntriesI35CLMicroLocationAssociatedStateTable19ULAssociatedStateMOEEbP7ULStoreRKNSt3__16vectorINT_5EntryENS5_9allocatorIS8_EEEE_block_invoke(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(a1 + 48);
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  if (*v2 == v4)
  {
LABEL_4:
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [*(id *)(a1 + 32) commitChangesToStore];
    long long v7 = *(void **)(a1 + 32);
    [v7 deleteOldestRecordsIfFull];
  }
  else
  {
    while (1)
    {
      id v5 = [*(id *)(a1 + 32) managedObjectContext];
      uint64_t v6 = +[ULAssociatedStateMO createFromEntry:v3 inManagedObjectContext:v5];

      if (!v6) {
        break;
      }

      v3 += 72;
      if (v3 == v4) {
        goto LABEL_4;
      }
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_119);
    }
    long long v8 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      id v9 = +[ULAssociatedStateMO entity];
      id v10 = [v9 name];
      int v15 = 68289283;
      int v16 = 0;
      __int16 v17 = 2082;
      id v18 = "";
      __int16 v19 = 2113;
      id v20 = v10;
      _os_log_impl(&dword_25631F000, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to create entry from MO\", \"MO\":%{private, location:escape_only}@}", (uint8_t *)&v15, 0x1Cu);
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_119);
    }
    id v11 = (id)logObject_MicroLocation_Default;
    if (os_signpost_enabled(v11))
    {
      uint64_t v12 = +[ULAssociatedStateMO entity];
      uint64_t v13 = [v12 name];
      int v15 = 68289283;
      int v16 = 0;
      __int16 v17 = 2082;
      id v18 = "";
      __int16 v19 = 2113;
      id v20 = v13;
      _os_signpost_emit_with_name_impl(&dword_25631F000, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to create entry from MO", "{\"msg%{public}.0s\":\"Failed to create entry from MO\", \"MO\":%{private, location:escape_only}@}", (uint8_t *)&v15, 0x1Cu);
    }
    uint64_t v14 = [*(id *)(a1 + 32) managedObjectContext];
    [v14 reset];
  }
}

void sub_2564BC328(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_96()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

__n128 __Block_byref_object_copy__21(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__21(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  std::vector<CLMicroLocationAssociatedStateTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void ___ZN9ULDBUtils12fetchEntriesI35CLMicroLocationAssociatedStateTable19ULAssociatedStateMOEENSt3__16vectorINT_5EntryENS3_9allocatorIS6_EEEEP7ULStoreP7NSArrayIP11NSPredicateEPSC_IP16NSSortDescriptorEm_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  uint64_t v3 = (objc_class *)objc_opt_class();
  uint64_t v4 = NSStringFromClass(v3);
  id v5 = [v2 fetchManagedObjectsWithEntityName:v4 byAndPredicates:*(void *)(a1 + 32) sortDescriptors:*(void *)(a1 + 40) andLimit:*(void *)(a1 + 64)];

  ULDBUtils::convertManagedObjectsToEntries<CLMicroLocationAssociatedStateTable,ULAssociatedStateMO>(v5, (uint64_t *)&v8);
  uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8);
  std::vector<CLMicroLocationAssociatedStateTable::Entry>::__vdeallocate((uint64_t *)(v6 + 48));
  *(_OWORD *)(v6 + 48) = v8;
  *(void *)(v6 + 64) = v9;
  uint64_t v9 = 0;
  long long v8 = 0uLL;
  id v10 = (void **)&v8;
  std::vector<CLMicroLocationAssociatedStateTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v10);
  long long v7 = [*(id *)(a1 + 48) managedObjectContext];
  [v7 reset];
}

void sub_2564BC4DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ULDBUtils::convertManagedObjectsToEntries<CLMicroLocationAssociatedStateTable,ULAssociatedStateMO>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  id v3 = a1;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  std::vector<CLMicroLocationAssociatedStateTable::Entry>::reserve(a2, [v3 count]);
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v4 = v3;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v20 objects:v35 count:16];
  if (!v5)
  {

    goto LABEL_28;
  }
  id v18 = v3;
  __int16 v19 = a2;
  char v6 = 0;
  uint64_t v7 = *(void *)v21;
  do
  {
    uint64_t v8 = 0;
    do
    {
      if (*(void *)v21 != v7) {
        objc_enumerationMutation(v4);
      }
      id v9 = *(id *)(*((void *)&v20 + 1) + 8 * v8);
      id v10 = v9;
      if (v9)
      {
        objc_msgSend(v9, "convertToEntry", v18);
        if (BYTE8(v34))
        {
          std::vector<CLMicroLocationAssociatedStateTable::Entry>::push_back[abi:ne180100](v19, (long long *)__p);
          char v11 = 0;
          goto LABEL_19;
        }
      }
      else
      {
        long long v33 = 0u;
        long long v34 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        *(_OWORD *)std::string __p = 0u;
      }
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_119);
      }
      uint64_t v12 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        uint64_t v13 = [v10 entity];
        uint64_t v14 = [v13 name];
        *(_DWORD *)std::string buf = 68289283;
        int v25 = 0;
        __int16 v26 = 2082;
        uint64_t v27 = "";
        __int16 v28 = 2113;
        uint64_t v29 = v14;
        _os_log_impl(&dword_25631F000, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to convert MO to entry\", \"MO\":%{private, location:escape_only}@}", buf, 0x1Cu);
      }
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_119);
      }
      int v15 = (id)logObject_MicroLocation_Default;
      if (os_signpost_enabled(v15))
      {
        int v16 = [v10 entity];
        __int16 v17 = [v16 name];
        *(_DWORD *)std::string buf = 68289283;
        int v25 = 0;
        __int16 v26 = 2082;
        uint64_t v27 = "";
        __int16 v28 = 2113;
        uint64_t v29 = v17;
        _os_signpost_emit_with_name_impl(&dword_25631F000, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to convert MO to entry", "{\"msg%{public}.0s\":\"Failed to convert MO to entry\", \"MO\":%{private, location:escape_only}@}", buf, 0x1Cu);
      }
      char v11 = 1;
      char v6 = 1;
LABEL_19:
      if (BYTE8(v34) && SBYTE7(v31) < 0) {
        operator delete(__p[0]);
      }

      if (v11) {
        goto LABEL_25;
      }
      ++v8;
    }
    while (v5 != v8);
    uint64_t v5 = [v4 countByEnumeratingWithState:&v20 objects:v35 count:16];
  }
  while (v5);
LABEL_25:

  if (v6) {
    std::vector<CLMicroLocationAssociatedStateTable::Entry>::__clear[abi:ne180100](v19);
  }
LABEL_28:
}

void sub_2564BC83C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  std::string __p = a10;
  std::vector<CLMicroLocationAssociatedStateTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMicroLocationAssociatedStateTable::Entry>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0x8E38E38E38E38E39 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x38E38E38E38E38FLL) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationAssociatedStateTable::Entry>>(result, a2);
    v7[1] = v7[0] + v5;
    _DWORD v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 72 * v6;
    std::vector<CLMicroLocationAssociatedStateTable::Entry>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<CLMicroLocationAssociatedStateTable::Entry>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_2564BC98C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMicroLocationAssociatedStateTable::Entry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMicroLocationAssociatedStateTable::Entry>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(result - 8);
  if (v7 >= v6)
  {
    unint64_t v12 = 0x8E38E38E38E38E39 * ((uint64_t)(v7 - *a1) >> 3);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0x38E38E38E38E38ELL) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v14 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x1C71C71C71C71C7) {
      unint64_t v15 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v15 = v13;
    }
    v21[4] = result;
    if (v15) {
      int v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationAssociatedStateTable::Entry>>(result, v15);
    }
    else {
      int v16 = 0;
    }
    __int16 v17 = &v16[72 * v12];
    v21[0] = v16;
    v21[1] = v17;
    uint64_t v21[3] = &v16[72 * v15];
    long long v18 = *a2;
    *((void *)v17 + 2) = *((void *)a2 + 2);
    *(_OWORD *)__int16 v17 = v18;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v19 = *(long long *)((char *)a2 + 56);
    long long v20 = *(long long *)((char *)a2 + 24);
    *(_OWORD *)(v17 + 40) = *(long long *)((char *)a2 + 40);
    *(_OWORD *)(v17 + 24) = v20;
    *(_OWORD *)(v17 + 56) = v19;
    v21[2] = v17 + 72;
    std::vector<CLMicroLocationAssociatedStateTable::Entry>::__swap_out_circular_buffer(a1, v21);
    uint64_t v11 = a1[1];
    uint64_t result = std::__split_buffer<CLMicroLocationAssociatedStateTable::Entry>::~__split_buffer((uint64_t)v21);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v9 = *(long long *)((char *)a2 + 24);
    long long v10 = *(long long *)((char *)a2 + 40);
    *(_OWORD *)(v7 + 56) = *(long long *)((char *)a2 + 56);
    *(_OWORD *)(v7 + 40) = v10;
    *(_OWORD *)(v7 + 24) = v9;
    uint64_t v11 = v7 + 72;
    a1[1] = v7 + 72;
  }
  a1[1] = v11;
  return result;
}

void sub_2564BCB10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMicroLocationAssociatedStateTable::Entry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<CLMicroLocationAssociatedStateTable::Entry>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<CLMicroLocationAssociatedStateTable::Entry>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

std::string *std::vector<CLMicroLocationAssociatedStateTable::Entry>::__init_with_size[abi:ne180100]<CLMicroLocationAssociatedStateTable::Entry*,CLMicroLocationAssociatedStateTable::Entry*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationAssociatedStateTable::Entry>,CLMicroLocationAssociatedStateTable::Entry*,CLMicroLocationAssociatedStateTable::Entry*,CLMicroLocationAssociatedStateTable::Entry*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_2564BCBC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<CLMicroLocationAssociatedStateTable::Entry>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationAssociatedStateTable::Entry>,CLMicroLocationAssociatedStateTable::Entry*,CLMicroLocationAssociatedStateTable::Entry*,CLMicroLocationAssociatedStateTable::Entry*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  unint64_t v14 = this;
  unint64_t v15 = this;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  char v13 = 0;
  if (a2 != a3)
  {
    unint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        long long v8 = v15;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
        long long v8 = v4;
      }
      long long v9 = *(long long *)((char *)v6 + 24);
      long long v10 = *(long long *)((char *)v6 + 40);
      *(_OWORD *)&v4[2].__r_.__value_.__r.__words[1] = *(long long *)((char *)v6 + 56);
      *(_OWORD *)&v4[1].__r_.__value_.__r.__words[2] = v10;
      *(_OWORD *)&v4[1].__r_.__value_.__l.__data_ = v9;
      unint64_t v6 = (long long *)((char *)v6 + 72);
      uint64_t v4 = v8 + 3;
      unint64_t v15 = v8 + 3;
    }
    while (v6 != a3);
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationAssociatedStateTable::Entry>,CLMicroLocationAssociatedStateTable::Entry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v4;
}

void sub_2564BCCB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationAssociatedStateTable::Entry>,CLMicroLocationAssociatedStateTable::Entry*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationAssociatedStateTable::Entry>,CLMicroLocationAssociatedStateTable::Entry*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationAssociatedStateTable::Entry>,CLMicroLocationAssociatedStateTable::Entry*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 49) < 0) {
      operator delete(*(void **)(v1 - 72));
    }
    v1 -= 72;
  }
}

uint64_t ULLogicAdapterImpl::ULLogicAdapterImpl(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  v29[38] = *MEMORY[0x263EF8340];
  id v20 = a2;
  id v10 = a3;
  id v21 = a4;
  id v11 = a5;
  *(void *)a1 = &unk_2704E2038;
  *(void *)(a1 + 8) = &unk_2704E2110;
  *(void *)(a1 + 16) = &unk_2704E2158;
  *(void *)(a1 + 24) = &unk_2704E2180;
  *(void *)(a1 + 32) = &unk_2704E21A8;
  ULDatabase::ULDatabase((ULDatabase *)(a1 + 40));
  CLMicroLocationEventLogger::CLMicroLocationEventLogger((CLMicroLocationEventLogger *)(a1 + 192), (ULDatabase *)(a1 + 40));
  CLMicroLocationLogic::CLMicroLocationLogic(a1 + 224, a1, a1 + 40, a1 + 192);
  CLMicroLocationLegacyClient::CLMicroLocationLegacyClient(a1 + 2848, a1 + 224, a1 + 192);
  id v12 = v11;
  *(void *)(a1 + 2960) = v12;
  *(void *)(a1 + 2976) = 0;
  *(void *)(a1 + 2992) = 0;
  *(void *)(a1 + 2984) = 0;
  *(void *)(a1 + 2968) = a1 + 2976;
  id v13 = v10;
  *(void *)(a1 + 3000) = v13;
  id v14 = v21;
  *(void *)(a1 + 3008) = v14;
  objc_storeStrong((id *)(a1 + 2992), a2);
  if ([MEMORY[0x263F55810] isMac]
    && ([MEMORY[0x263F55810] isMacBook] & 1) == 0)
  {
    CLMicroLocationLogic::setPlatformSupport((CLMicroLocationLogic *)(a1 + 224), 0);
  }
  ULDatabase::initDb((ULDatabase *)(a1 + 40));
  CLMicroLocationProto::MiloInit::MiloInit((CLMicroLocationProto::MiloInit *)&v23);
  ULSettings::get<ULSettings::Version>((uint64_t)__str);
  v25 |= 2u;
  if (v24 == (std::string *)MEMORY[0x263F8C740]) {
    operator new();
  }
  std::string::operator=(v24, (const std::string *)__str);
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  int v22 = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v22);
  __p[0] = (void *)boost::uuids::random_generator_pure::operator()((uint64_t)&v22);
  __p[1] = v15;
  double v16 = cl::chrono::CFAbsoluteTimeClock::now();
  CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::MiloInit>(__p, &v23, (uint64_t)__str, v16);
  (*(void (**)(uint64_t, unsigned char *))(*(void *)a1 + 72))(a1, __str);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v29);
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v22);
  if (onceToken_MicroLocationQE_Default != -1) {
    dispatch_once(&onceToken_MicroLocationQE_Default, &__block_literal_global_120);
  }
  __int16 v17 = (id)logObject_MicroLocationQE_Default;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    ULSettings::get<ULSettings::Version>((uint64_t)__p);
    if (v27 >= 0) {
      long long v18 = __p;
    }
    else {
      long long v18 = (void **)__p[0];
    }
    *(void *)std::string __str = 68289283;
    *(_WORD *)&__str[8] = 2082;
    *(void *)&__str[10] = "";
    *(_WORD *)&__str[18] = 2081;
    *(void *)&__str[20] = v18;
    _os_log_impl(&dword_25631F000, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"MicroLocation Initialization\", \"Microlocation Version\":%{private, location:escape_only}s}", __str, 0x1Cu);
    if (v27 < 0) {
      operator delete(__p[0]);
    }
  }

  CLMicroLocationProto::MiloInit::~MiloInit((CLMicroLocationProto::MiloInit *)&v23);
  return a1;
}

void sub_2564BD108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, int a13, char a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  CLMicroLocationProto::MiloInit::~MiloInit((CLMicroLocationProto::MiloInit *)&a16);
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy(v29 + 2968, *(void **)(v29 + 2976));

  CLMicroLocationLogic::~CLMicroLocationLogic(v34);
  CLMicroLocationEventLogger::~CLMicroLocationEventLogger(v33);
  ULDatabase::~ULDatabase(v32);

  _Unwind_Resume(a1);
}

void ULSettings::get<ULSettings::Version>(uint64_t a1@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v2 = +[ULDefaultsSingleton shared];
  id v3 = [v2 defaultsDictionary];

  uint64_t v4 = [NSString stringWithUTF8String:"ULVersion"];
  unint64_t v5 = [v3 objectForKey:v4];
  if (v5 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    ULSettings::convert<NSString * {__strong},std::string>(v5, v8);
    *(_OWORD *)a1 = *(_OWORD *)v8;
    *(void *)(a1 + 16) = *(void *)&v8[16];
  }
  else
  {
    ULSettings::convert<NSString * {__strong},std::string>(@"3.0.45", v8);
    *(void *)&v9[7] = *(void *)&v8[15];
    *(void *)long long v9 = *(void *)&v8[8];
    char v6 = v8[23];
    uint64_t v7 = *(void *)&v8[8];
    *(void *)a1 = *(void *)v8;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 15) = *(void *)&v9[7];
    *(unsigned char *)(a1 + 23) = v6;
  }
}

void sub_2564BD330(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::MiloInit>(_OWORD *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  CLMicroLocationProto::ReceivedEvent::ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
  CLMicroLocationProtobufHelper::setSpecificLoggedEvent((CLMicroLocationProtobufHelper *)v9, (CLMicroLocationProto::ReceivedEvent *)a2, v8);
  CLMicroLocationLoggedEventsTable::Entry::Entry(a3, a1, a2[4], (CLMicroLocationProto::ReceivedEvent *)v9, a4);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
}

void sub_2564BD3EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ULLogicAdapterImpl::onSendStatusToClient(ULLogicAdapterImpl *this, const CLMiLoService::ServiceStatus *a2, const uuid *a3)
{
  CLMicroLocationLegacyClient::updateStatus((CLMicroLocationLegacyClient *)((char *)this + 2848), a2);
  char v6 = (void *)*((void *)this + 374);
  ULLogicAdapterHelper::ulServiceStatusFromInternalStatus(a2, v7);
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  long long v8 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDBytes:a3];
  [v6 didUpdateServiceStatus:v9 toConnection:v8];
}

void sub_2564BD494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ULLogicAdapterImpl::onSendRequestResponseToClient(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v14[1] = *MEMORY[0x263EF8340];
  long long v8 = *(void **)(a1 + 2992);
  id v9 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDBytes:a3];
  if (a4 == -1)
  {
    id v11 = 0;
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F087E8];
    uint64_t v13 = *MEMORY[0x263F08320];
    v14[0] = @"request failed internally";
    unint64_t v5 = [NSDictionary dictionaryWithObjects:v14 forKeys:&v13 count:1];
    id v11 = [v10 errorWithDomain:@"ULLogicDomain" code:a4 userInfo:v5];
  }
  id v12 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDBytes:a5];
  [v8 didCompleteRequest:v9 withError:v11 toConnection:v12];

  if (a4 != -1)
  {
  }
}

void sub_2564BD5F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ULLogicAdapterImpl::onSendRecordingMetaInfoToClient(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  if ([MEMORY[0x263F55810] isInternalInstall])
  {
    id v23 = objc_alloc_init(MEMORY[0x263EFF980]);
    id v9 = (void *)a4[3];
    if (v9 != a4 + 4)
    {
      do
      {
        uint64_t v10 = (void *)[objc_alloc(MEMORY[0x263F55798]) initWithFingerprintErrorEnum:ULLogicAdapterHelper::ulFingerprintErrorFromRecordingError(*((_DWORD *)v9 + 7))];
        [v23 addObject:v10];

        id v11 = (void *)v9[1];
        if (v11)
        {
          do
          {
            id v12 = v11;
            id v11 = (void *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            id v12 = (void *)v9[2];
            BOOL v13 = *v12 == (void)v9;
            id v9 = v12;
          }
          while (!v13);
        }
        id v9 = v12;
      }
      while (v12 != a4 + 4);
    }
    id v14 = objc_alloc(MEMORY[0x263F557A0]);
    unint64_t v15 = [NSNumber numberWithUnsignedLong:*a4];
    double v16 = [NSNumber numberWithUnsignedLong:a4[1]];
    __int16 v17 = [NSNumber numberWithUnsignedLong:a4[2]];
    long long v18 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDBytes:a3];
    long long v19 = (void *)[v14 initWithNumWiFiAccessPoints:v15 numBLESources:v16 numUWBSources:v17 requestIdentifier:v18 errors:v23];

    id v20 = *(void **)(a1 + 2992);
    id v21 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDBytes:a5];
    [v20 didCompleteObservationWithMetaInformation:v19 toConnection:v21];
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_903);
    }
    int v22 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_25631F000, v22, OS_LOG_TYPE_DEBUG, "onSendRecordingMetaInfoToClient called on non-internal platform. ignored", buf, 2u);
    }
  }
}

void sub_2564BD894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ULLogicAdapterImpl::onSendPredictionMetaInfoToClient(ULLogicAdapterImpl *this, const CLMiLoService::ServiceDescriptor *a2, const uuid *a3, const CLMicroLocationResultToPublish *a4, const uuid *a5)
{
  if ([MEMORY[0x263F55810] isInternalInstall])
  {
    id v9 = objc_alloc(MEMORY[0x263F557A0]);
    uint64_t v10 = [NSNumber numberWithUnsignedLong:*((void *)a4 + 3)];
    id v11 = [NSNumber numberWithUnsignedLong:*((void *)a4 + 4)];
    id v12 = [NSNumber numberWithUnsignedLong:*((void *)a4 + 5)];
    BOOL v13 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDBytes:a3];
    unint64_t v15 = ULLogicAdapterHelper::getFingerprintErrorsFromPredictionResults(a4, v14);
    id v19 = (id)[v9 initWithNumWiFiAccessPoints:v10 numBLESources:v11 numUWBSources:v12 requestIdentifier:v13 errors:v15];

    double v16 = (void *)*((void *)this + 374);
    __int16 v17 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDBytes:a5];
    [v16 didCompletePredictionWithMetaInformation:v19 toConnection:v17];
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_903);
    }
    long long v18 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_25631F000, v18, OS_LOG_TYPE_DEBUG, "onSendPredictionMetaInfoToClient called on non-internal platform. ignored", buf, 2u);
    }
  }
}

void sub_2564BDB24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void ULLogicAdapterImpl::onSendPredictionResultsToClient(void *a1, const CLMiLoService::ServiceDescriptor *a2, uint64_t a3, CLMicroLocationResultToPublish *a4, uint64_t a5)
{
  CLMicroLocationLegacyClient::publishResultsToBiomeAndCoreDuet((CLMicroLocationLegacyClient *)(a1 + 356), a2, a4);
  uint64_t v10 = (void *)a1[374];
  id v11 = ULLogicAdapterHelper::createULPrediction((uint64_t *)a4, a3);
  id v12 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDBytes:a5];
  [v10 didSendPredictionResults:v11 toConnection:v12];

  if (*(unsigned char *)(a3 + 16) && [MEMORY[0x263F55810] isInternalInstall])
  {
    if (!*(unsigned char *)(a3 + 16)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    BOOL v13 = *(void (**)(void *, const CLMiLoService::ServiceDescriptor *, uint64_t, CLMicroLocationResultToPublish *, uint64_t))(*a1 + 40);
    v13(a1, a2, a3, a4, a5);
  }
}

void sub_2564BDC98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ULLogicAdapterImpl::onSendGenericEventResponseToClient(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if ([MEMORY[0x263F55810] isInternalInstall])
  {
    long long v8 = *(void **)(a1 + 2992);
    if (*((char *)a3 + 23) >= 0) {
      id v9 = a3;
    }
    else {
      id v9 = (uint64_t *)*a3;
    }
    id v12 = [NSString stringWithUTF8String:v9];
    uint64_t v10 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDBytes:a4];
    [v8 didSendGenericEvent:a2 withDescription:v12 toConnection:v10];
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_903);
    }
    id v11 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_25631F000, v11, OS_LOG_TYPE_DEBUG, "onSendGenericEventResponseToClient called on non-internal platform. ignored", buf, 2u);
    }
  }
}

void sub_2564BDDE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ULLogicAdapterImpl::onEnableMiLoAtCurrentLocationCompleted(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v11[1] = *MEMORY[0x263EF8340];
  char v6 = *(void **)(a1 + 2992);
  if (a2 == -1)
  {
    long long v8 = 0;
  }
  else
  {
    uint64_t v7 = (void *)MEMORY[0x263F087E8];
    uint64_t v10 = *MEMORY[0x263F08320];
    v11[0] = @"request failed internally";
    id v3 = [NSDictionary dictionaryWithObjects:v11 forKeys:&v10 count:1];
    long long v8 = [v7 errorWithDomain:@"ULLogicDomain" code:a2 userInfo:v3];
  }
  id v9 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDBytes:a3];
  [v6 didCreateCustomLoiAtCurrentLocationWithError:v8 forConnection:v9];

  if (a2 != -1)
  {
  }
}

void sub_2564BDF24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ULLogicAdapterImpl::onLearningBegin(ULLogicAdapterImpl *this)
{
  v8[38] = *MEMORY[0x263EF8340];
  int v5 = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v5);
  *(void *)&long long v6 = boost::uuids::random_generator_pure::operator()((uint64_t)&v5);
  *((void *)&v6 + 1) = v2;
  double v3 = cl::chrono::CFAbsoluteTimeClock::now();
  CLMicroLocationProto::LearnModel::LearnModel((CLMicroLocationProto::LearnModel *)v4);
  CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::LearnModel>(&v6, v4, (uint64_t)v7, v3);
  (*(void (**)(ULLogicAdapterImpl *, unsigned char *))(*(void *)this + 72))(this, v7);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v8);
  CLMicroLocationProto::LearnModel::~LearnModel((CLMicroLocationProto::LearnModel *)v4);
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v5);
  CLMicroLocationLogic::onLearningBegin((CLMicroLocationLogic *)((char *)this + 224));
}

void sub_2564BE04C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13, char a14)
{
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)(v14 + 32));
  CLMicroLocationProto::LearnModel::~LearnModel((CLMicroLocationProto::LearnModel *)&a10);
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&a14);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::LearnModel>(_OWORD *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  CLMicroLocationProto::ReceivedEvent::ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
  CLMicroLocationProtobufHelper::setSpecificLoggedEvent((CLMicroLocationProtobufHelper *)v9, (CLMicroLocationProto::ReceivedEvent *)a2, v8);
  CLMicroLocationLoggedEventsTable::Entry::Entry(a3, a1, a2[2], (CLMicroLocationProto::ReceivedEvent *)v9, a4);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
}

void sub_2564BE104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void non-virtual thunk to'ULLogicAdapterImpl::onLearningBegin(ULLogicAdapterImpl *this)
{
}

void ULLogicAdapterImpl::onLearningSingleModelOfTypeCompleted(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  int v14 = a2;
  id v7 = a4;
  if (*(unsigned char *)(a3 + 312))
  {
    uint64_t v8 = *(void *)(a1 + 2976);
    if (!v8) {
      goto LABEL_12;
    }
    uint64_t v9 = a1 + 2976;
    do
    {
      int v10 = *(_DWORD *)(v8 + 28);
      BOOL v11 = v10 < a2;
      if (v10 >= a2) {
        id v12 = (uint64_t *)v8;
      }
      else {
        id v12 = (uint64_t *)(v8 + 8);
      }
      if (!v11) {
        uint64_t v9 = v8;
      }
      uint64_t v8 = *v12;
    }
    while (*v12);
    if (v9 == a1 + 2976 || *(_DWORD *)(v9 + 28) > a2)
    {
LABEL_12:
      unint64_t v15 = (unsigned int *)&v14;
      *((_DWORD *)std::__tree<std::__value_type<CLMicroLocationProto::Model_ModelType,unsigned int>,std::__map_value_compare<CLMicroLocationProto::Model_ModelType,std::__value_type<CLMicroLocationProto::Model_ModelType,unsigned int>,std::less<CLMicroLocationProto::Model_ModelType>,true>,std::allocator<std::__value_type<CLMicroLocationProto::Model_ModelType,unsigned int>>>::__emplace_unique_key_args<CLMicroLocationProto::Model_ModelType,std::piecewise_construct_t const&,std::tuple<CLMicroLocationProto::Model_ModelType const&>,std::tuple<>>((uint64_t **)(a1 + 2968), &v14, (uint64_t)&std::piecewise_construct, &v15)+ 8) = 0;
    }
    unint64_t v15 = (unsigned int *)&v14;
    BOOL v13 = std::__tree<std::__value_type<CLMicroLocationProto::Model_ModelType,unsigned int>,std::__map_value_compare<CLMicroLocationProto::Model_ModelType,std::__value_type<CLMicroLocationProto::Model_ModelType,unsigned int>,std::less<CLMicroLocationProto::Model_ModelType>,true>,std::allocator<std::__value_type<CLMicroLocationProto::Model_ModelType,unsigned int>>>::__emplace_unique_key_args<CLMicroLocationProto::Model_ModelType,std::piecewise_construct_t const&,std::tuple<CLMicroLocationProto::Model_ModelType const&>,std::tuple<>>((uint64_t **)(a1 + 2968), &v14, (uint64_t)&std::piecewise_construct, &v15);
    ++*((_DWORD *)v13 + 8);
  }
}

void sub_2564BE20C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void non-virtual thunk to'ULLogicAdapterImpl::onLearningSingleModelOfTypeCompleted(uint64_t a1, int a2, uint64_t a3, void *a4)
{
}

void ULLogicAdapterImpl::onLearningForModelTypeCompleted(uint64_t a1, signed int a2)
{
  unsigned int v9 = a2;
  uint64_t v2 = *(void *)(a1 + 2976);
  if (v2)
  {
    uint64_t v4 = (uint64_t **)(a1 + 2968);
    uint64_t v5 = a1 + 2976;
    do
    {
      signed int v6 = *(_DWORD *)(v2 + 28);
      BOOL v7 = v6 < a2;
      if (v6 >= a2) {
        uint64_t v8 = (uint64_t *)v2;
      }
      else {
        uint64_t v8 = (uint64_t *)(v2 + 8);
      }
      if (!v7) {
        uint64_t v5 = v2;
      }
      uint64_t v2 = *v8;
    }
    while (*v8);
    if (v5 != a1 + 2976 && *(_DWORD *)(v5 + 28) <= a2)
    {
      if (*(_DWORD *)(v5 + 32))
      {
        int v10 = &v9;
        *((_DWORD *)std::__tree<std::__value_type<CLMicroLocationProto::Model_ModelType,unsigned int>,std::__map_value_compare<CLMicroLocationProto::Model_ModelType,std::__value_type<CLMicroLocationProto::Model_ModelType,unsigned int>,std::less<CLMicroLocationProto::Model_ModelType>,true>,std::allocator<std::__value_type<CLMicroLocationProto::Model_ModelType,unsigned int>>>::__emplace_unique_key_args<CLMicroLocationProto::Model_ModelType,std::piecewise_construct_t const&,std::tuple<CLMicroLocationProto::Model_ModelType const&>,std::tuple<>>(v4, (int *)&v9, (uint64_t)&std::piecewise_construct, &v10)+ 8) = 0;
        CLMicroLocationLogic::onModelGenerated(a1 + 224, v9);
      }
    }
  }
}

void non-virtual thunk to'ULLogicAdapterImpl::onLearningForModelTypeCompleted(uint64_t a1, signed int a2)
{
}

uint64_t ULLogicAdapterImpl::resetAndGetDevicesSinceLearnEventTimeForLoi@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, void *a4@<X8>, double a5@<D0>)
{
  return CLMicroLocationLogic::resetAndGetDevicesSinceLearnEventTimeForLoi(a1 + 224, a2, a3, a4, a5);
}

uint64_t non-virtual thunk to'ULLogicAdapterImpl::resetAndGetDevicesSinceLearnEventTimeForLoi@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, void *a4@<X8>, double a5@<D0>)
{
  return CLMicroLocationLogic::resetAndGetDevicesSinceLearnEventTimeForLoi(a1 + 216, a2, a3, a4, a5);
}

void ULLogicAdapterImpl::onLearningCompleted(ULLogicAdapterImpl *this)
{
  v8[38] = *MEMORY[0x263EF8340];
  int v5 = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v5);
  *(void *)&long long v6 = boost::uuids::random_generator_pure::operator()((uint64_t)&v5);
  *((void *)&v6 + 1) = v2;
  double v3 = cl::chrono::CFAbsoluteTimeClock::now();
  CLMicroLocationProto::LearnCompleted::LearnCompleted((CLMicroLocationProto::LearnCompleted *)v4);
  CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::LearnCompleted>(&v6, v4, (uint64_t)v7, v3);
  (*(void (**)(ULLogicAdapterImpl *, unsigned char *))(*(void *)this + 72))(this, v7);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v8);
  CLMicroLocationProto::LearnCompleted::~LearnCompleted((CLMicroLocationProto::LearnCompleted *)v4);
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v5);
  CLMicroLocationLogic::onLearningCompleted((CLMicroLocationLogic *)((char *)this + 224));
}

void sub_2564BE3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13, char a14)
{
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)(v14 + 32));
  CLMicroLocationProto::LearnCompleted::~LearnCompleted((CLMicroLocationProto::LearnCompleted *)&a10);
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&a14);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::LearnCompleted>(_OWORD *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  CLMicroLocationProto::ReceivedEvent::ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
  CLMicroLocationProtobufHelper::setSpecificLoggedEvent((CLMicroLocationProtobufHelper *)v9, (CLMicroLocationProto::ReceivedEvent *)a2, v8);
  CLMicroLocationLoggedEventsTable::Entry::Entry(a3, a1, a2[2], (CLMicroLocationProto::ReceivedEvent *)v9, a4);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
}

void sub_2564BE48C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void non-virtual thunk to'ULLogicAdapterImpl::onLearningCompleted(ULLogicAdapterImpl *this)
{
}

void ULLogicAdapterImpl::refreshRoutineStateAtLastLocation(ULLogicAdapterImpl *this)
{
}

void non-virtual thunk to'ULLogicAdapterImpl::refreshRoutineStateAtLastLocation(ULLogicAdapterImpl *this)
{
}

uint64_t ULLogicAdapterImpl::onWiFiChannelHistogramUpdated(ULLogicAdapterImpl *this)
{
  return CLMicroLocationLogic::onWiFiChannelHistogramUpdated((CLMicroLocationLogic *)((char *)this + 224));
}

uint64_t non-virtual thunk to'ULLogicAdapterImpl::onWiFiChannelHistogramUpdated(ULLogicAdapterImpl *this)
{
  return CLMicroLocationLogic::onWiFiChannelHistogramUpdated((CLMicroLocationLogic *)((char *)this + 192));
}

uint64_t ULLogicAdapterImpl::onLoggedEventsAnalyticsStart(ULLogicAdapterImpl *this)
{
  return CLMicroLocationEventLogger::flushToDisk((CLMicroLocationEventLogger *)((char *)this + 192));
}

uint64_t non-virtual thunk to'ULLogicAdapterImpl::onLoggedEventsAnalyticsStart(ULLogicAdapterImpl *this)
{
  return CLMicroLocationEventLogger::flushToDisk((CLMicroLocationEventLogger *)((char *)this + 168));
}

void ULLogicAdapterImpl::triggerLearning(ULLogicAdapterImpl *this)
{
  uint64_t v2 = +[ULTransactionManager shared];
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 3221225472;
  void v3[2] = ___ZN18ULLogicAdapterImpl15triggerLearningEv_block_invoke;
  void v3[3] = &__block_descriptor_40_e5_v8__0l;
  v3[4] = this;
  [v2 performUnderTransaction:@"com.apple.milod.learning" block:v3];
}

void sub_2564BE570(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN18ULLogicAdapterImpl15triggerLearningEv_block_invoke(uint64_t a1)
{
  v4[4] = *MEMORY[0x263EF8340];
  CLMicroLocationLearner::CLMicroLocationLearner(v1, *(void *)(a1 + 32) + 8, *(void *)(a1 + 32) + 40);
  v4[0] = &unk_2704E22D0;
  v4[3] = v4;
  CLMicroLocationLearner::executeWorkItems(v1, (uint64_t)v4);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v4);
  double v3 = (void **)&v2;
  std::vector<std::function<void ()(std::function<BOOL ()(void)>)>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void sub_2564BE638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((void *)(v9 - 56));
  CLMicroLocationLearner::~CLMicroLocationLearner(&a9);
  _Unwind_Resume(a1);
}

void CLMicroLocationLearner::~CLMicroLocationLearner(id *this)
{
  uint64_t v2 = this + 5;
  std::vector<std::function<void ()(std::function<BOOL ()(void)>)>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t ULLogicAdapterImpl::startRapportSession(ULLogicAdapterImpl *this)
{
  return [*((id *)this + 375) startRapportSession];
}

uint64_t ULLogicAdapterImpl::stopRapportSession(ULLogicAdapterImpl *this)
{
  return [*((id *)this + 375) stopRapportSession];
}

void ULLogicAdapterImpl::learnBlueAtlasModel(ULLogicAdapterImpl *this, uuid *a2)
{
  CLMicroLocationLearner::CLMicroLocationLearner(v3, (char *)this + 8, (char *)this + 40);
  CLMicroLocationLearner::learnBlueAtlasModel((CLMicroLocationLearner *)v3, a2);
  long long v6 = (void **)&v5;
  std::vector<std::function<void ()(std::function<BOOL ()(void)>)>>::__destroy_vector::operator()[abi:ne180100](&v6);
}

void sub_2564BE710(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CLMicroLocationLearner::~CLMicroLocationLearner((id *)va);
  _Unwind_Resume(a1);
}

uint64_t ULLogicAdapterImpl::isDataAvailable(ULLogicAdapterImpl *this)
{
  return [*((id *)this + 376) isDataAvailable];
}

void sub_2564BE88C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_2564BE8E8()
{
  return 0;
}

void sub_2564BE8FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564BEAEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564BEC08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564BEC6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)ULLogicAdapter;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_2564BED14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564BF05C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::__function::__value_func<std::unique_ptr<CLMicroLocationCustomLoiRecordingMotionClient> ()(CLMicroLocationSensorsDriver &)>::~__value_func[abi:ne180100](va);

  _Unwind_Resume(a1);
}

void sub_2564BF50C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, char a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,std::exception a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  CLMicroLocationProto::ServiceDelete::~ServiceDelete((CLMicroLocationProto::ServiceDelete *)&a16);
  if (a27 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::ServiceDelete>(_OWORD *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  CLMicroLocationProto::ReceivedEvent::ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
  CLMicroLocationProtobufHelper::setSpecificLoggedEvent((CLMicroLocationProtobufHelper *)v9, (CLMicroLocationProto::ReceivedEvent *)a2, v8);
  CLMicroLocationLoggedEventsTable::Entry::Entry(a3, a1, a2[6], (CLMicroLocationProto::ReceivedEvent *)v9, a4);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
}

void sub_2564BF690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2564BF808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }

  _Unwind_Resume(a1);
}

void sub_2564C001C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, char a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::exception a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  CLMicroLocationProto::ServiceConnect::~ServiceConnect((CLMicroLocationProto::ServiceConnect *)&a15);
  if (a26 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::ServiceConnect>(_OWORD *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  CLMicroLocationProto::ReceivedEvent::ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
  CLMicroLocationProtobufHelper::setSpecificLoggedEvent((CLMicroLocationProtobufHelper *)v9, (CLMicroLocationProto::ReceivedEvent *)a2, v8);
  CLMicroLocationLoggedEventsTable::Entry::Entry(a3, a1, a2[6], (CLMicroLocationProto::ReceivedEvent *)v9, a4);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
}

void sub_2564C0198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2564C03B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_2564C0968(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564C0EE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564C1478(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564C169C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564C1860(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564C1AA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564C1D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

void sub_2564C1F78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564C20E0(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

void sub_2564C21FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564C236C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_2564C2644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(a1);
}

void sub_2564C284C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_2564C2A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_2564C2C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_2564C2D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_2564C2E30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2564C2F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2564C2FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2564C303C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564C30D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564C3218(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564C3360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2564C3894(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564C3A20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564C3C40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2564C3E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_2564C41E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_2564C4488(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564C45B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id a18)
{
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((void *)(v18 - 56));
  CLMicroLocationLearner::~CLMicroLocationLearner(&a10);

  _Unwind_Resume(a1);
}

void sub_2564C46B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((void *)(v19 - 56));
  *(void *)(v19 - 64) = v18 + 8;
  std::vector<std::function<void ()(std::function<BOOL ()(void)>)>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 64));

  _Unwind_Resume(a1);
}

void sub_2564C47B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v9 = va_arg(va1, void **);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  uint64_t v9 = (void **)(v7 + 8);
  std::vector<std::function<void ()(std::function<BOOL ()(void)>)>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);

  _Unwind_Resume(a1);
}

void sub_2564C48C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v9 = va_arg(va1, void **);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  uint64_t v9 = (void **)(v7 + 16);
  std::vector<std::function<void ()(std::function<BOOL ()(void)>)>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);

  _Unwind_Resume(a1);
}

void sub_2564C49C0(_Unwind_Exception *a1, void *a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<void ()(std::function<BOOL ()(void)>)>::~__value_func[abi:ne180100]((void *)(v2 + 16));

  _Unwind_Resume(a1);
}

void sub_2564C4AB8(_Unwind_Exception *a1, void *a2, ...)
{
  va_start(va, a2);
  double v3 = v2;
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_2564C4CB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564C4EE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564C5164(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564C53FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564C5680(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564C58D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564C5B84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564C5DC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564C5FEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  if (a21 < 0) {
    operator delete(a16);
  }

  if (a27 < 0) {
    operator delete(a22);
  }

  _Unwind_Resume(a1);
}

void sub_2564C61C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564C63F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564C655C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564C65EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2564C674C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564C6900(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564C6A78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564C6CBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564C6F40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564C7040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2564C716C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564C7464(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564C75B8(_Unwind_Exception *a1)
{
  id v4 = v2;

  _Unwind_Resume(a1);
}

void sub_2564C77FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__22(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__22(uint64_t a1)
{
}

void sub_2564C7914(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ULLogicAdapterImpl::~ULLogicAdapterImpl(ULLogicAdapterImpl *this)
{
  ULLogicAdapterImpl::~ULLogicAdapterImpl(this);
  JUMPOUT(0x25A2A6340);
}

{
  *(void *)this = &unk_2704E2038;
  *((void *)this + 1) = &unk_2704E2110;
  *((void *)this + 2) = &unk_2704E2158;
  *((void *)this + 3) = &unk_2704E2180;
  *((void *)this + 4) = &unk_2704E21A8;

  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)this + 2968, *((void **)this + 372));
  CLMicroLocationLogic::~CLMicroLocationLogic((CLMicroLocationLogic *)((char *)this + 224));
  CLMicroLocationEventLogger::~CLMicroLocationEventLogger((CLMicroLocationEventLogger *)((char *)this + 192));
  ULDatabase::~ULDatabase((ULDatabase *)((char *)this + 40));
}

void ULLogicAdapterImpl::logEvent(ULLogicAdapterImpl *this, Entry *a2)
{
}

void non-virtual thunk to'ULLogicAdapterImpl::~ULLogicAdapterImpl(ULLogicAdapterImpl *this)
{
}

{
  uint64_t vars8;

  ULLogicAdapterImpl::~ULLogicAdapterImpl((ULLogicAdapterImpl *)((char *)this - 8));
  JUMPOUT(0x25A2A6340);
}

{
  ULLogicAdapterImpl::~ULLogicAdapterImpl((ULLogicAdapterImpl *)((char *)this - 16));
}

{
  uint64_t vars8;

  ULLogicAdapterImpl::~ULLogicAdapterImpl((ULLogicAdapterImpl *)((char *)this - 16));
  JUMPOUT(0x25A2A6340);
}

{
  ULLogicAdapterImpl::~ULLogicAdapterImpl((ULLogicAdapterImpl *)((char *)this - 24));
}

{
  uint64_t vars8;

  ULLogicAdapterImpl::~ULLogicAdapterImpl((ULLogicAdapterImpl *)((char *)this - 24));
  JUMPOUT(0x25A2A6340);
}

{
  ULLogicAdapterImpl::~ULLogicAdapterImpl((ULLogicAdapterImpl *)((char *)this - 32));
}

{
  uint64_t vars8;

  ULLogicAdapterImpl::~ULLogicAdapterImpl((ULLogicAdapterImpl *)((char *)this - 32));
  JUMPOUT(0x25A2A6340);
}

void ___ZL47_CLLogObjectForCategory_MicroLocationQE_Defaultv_block_invoke_5()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocationQE");
  uint64_t v1 = (void *)logObject_MicroLocationQE_Default;
  logObject_MicroLocationQE_Default = (uint64_t)v0;
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_97()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

uint64_t *std::__tree<std::__value_type<CLMicroLocationProto::Model_ModelType,unsigned int>,std::__map_value_compare<CLMicroLocationProto::Model_ModelType,std::__value_type<CLMicroLocationProto::Model_ModelType,unsigned int>,std::less<CLMicroLocationProto::Model_ModelType>,true>,std::allocator<std::__value_type<CLMicroLocationProto::Model_ModelType,unsigned int>>>::__emplace_unique_key_args<CLMicroLocationProto::Model_ModelType,std::piecewise_construct_t const&,std::tuple<CLMicroLocationProto::Model_ModelType const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, unsigned int **a4)
{
  uint64_t v7 = a1 + 1;
  long long v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10) {
          break;
        }
        long long v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      long long v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    BOOL v11 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v11 + 28) = **a4;
    std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void _ZNSt3__110__function6__funcIZZN18ULLogicAdapterImpl15triggerLearningEvEUb_E3__0NS_9allocatorIS3_EEFbvEED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZZN18ULLogicAdapterImpl15triggerLearningEvEUb_E3__0NS_9allocatorIS3_EEFbvEE7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_2704E22D0;
  return result;
}

void _ZNKSt3__110__function6__funcIZZN18ULLogicAdapterImpl15triggerLearningEvEUb_E3__0NS_9allocatorIS3_EEFbvEE7__cloneEPNS0_6__baseIS6_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_2704E22D0;
}

uint64_t _ZNSt3__110__function6__funcIZZN18ULLogicAdapterImpl15triggerLearningEvEUb_E3__0NS_9allocatorIS3_EEFbvEEclEv()
{
  return 0;
}

uint64_t _ZNKSt3__110__function6__funcIZZN18ULLogicAdapterImpl15triggerLearningEvEUb_E3__0NS_9allocatorIS3_EEFbvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN18ULLogicAdapterImpl15triggerLearningEvEUb_E3__0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN18ULLogicAdapterImpl15triggerLearningEvEUb_E3__0NS_9allocatorIS3_EEFbvEE11target_typeEv()
{
  return &_ZTIZZN18ULLogicAdapterImpl15triggerLearningEvEUb_E3__0;
}

void sub_2564C7F5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564C8170(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0xA1C400EBEDA77);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<std::unique_ptr<CLMicroLocationBleClient> ()(CLMicroLocationSensorsDriver &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_2564C841C(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0xA1C400770BE9BLL);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<std::unique_ptr<CLMicroLocationUwbClient> ()(CLMicroLocationSensorsDriver &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_2564C86CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564C88E0(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x10A1C404835BCAELL);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<std::unique_ptr<CLMicroLocationMotionClient> ()(CLMicroLocationSensorsDriver &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_2564C8B8C(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x10B3C4089EEB475);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<std::unique_ptr<CLMicroLocationStopMotionClient> ()(CLMicroLocationSensorsDriver &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_2564C8E38(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0xA1C40069AE433);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<std::unique_ptr<CLMicroLocationCustomLoiRecordingMotionClient> ()(CLMicroLocationSensorsDriver &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_2564C94F0()
{
  return 0;
}

void CLMicroLocationNearestNeighborAlgorithm::localize(CLMicroLocationModel *this@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, char **a4@<X8>)
{
  if (!CLMicroLocationModel::isValid(this))
  {
    CLMicroLocationNearestNeighborAlgorithm::localize();
    goto LABEL_45;
  }
  if (!*(unsigned char *)(a3 + 32))
  {
LABEL_45:
    CLMicroLocationNearestNeighborAlgorithm::localize();
LABEL_46:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  double v48 = 0;
  uint64_t v49 = 0;
  double v47 = (uint64_t *)&v48;
  uint64_t v9 = *((void *)this + 41);
  uint64_t v8 = *((void *)this + 42);
  if (v9 == v8)
  {
    id v12 = 0;
  }
  else
  {
    do
    {
      uint64_t v10 = *(void *)(a3 + 24);
      if (!v10) {
        goto LABEL_46;
      }
      *(void *)&long long v44 = (*(double (**)(uint64_t, void, uint64_t))(*(void *)v10 + 48))(v10, *(void *)v9, a2);
      uint64_t v11 = v9 + 16;
      std::__tree<std::__value_type<double,boost::uuids::uuid>,std::__map_value_compare<double,std::__value_type<double,boost::uuids::uuid>,std::less<double>,true>,std::allocator<std::__value_type<double,boost::uuids::uuid>>>::__emplace_multi<double,boost::uuids::uuid const&>(&v47, (double *)&v44, (_OWORD *)(v9 + 16));
      v9 += 32;
    }
    while (v11 + 16 != v8);
    id v12 = v49;
  }
  BOOL v13 = +[ULDefaultsSingleton shared];
  uint64_t v14 = [v13 defaultsDictionary];

  unint64_t v15 = [NSString stringWithUTF8String:"ULMaximumNearestNeighbors"];
  double v16 = [v14 objectForKey:v15];
  if (v16 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v17 = [v16 unsignedLongValue];
  }
  else {
    uint64_t v17 = [&unk_2704F23B8 unsignedLongValue];
  }
  unint64_t v18 = v17;

  if (v18 >= (unint64_t)v12) {
    uint64_t v19 = v12;
  }
  else {
    uint64_t v19 = (void *)v18;
  }
  if (v18) {
    id v20 = v19;
  }
  else {
    id v20 = v12;
  }
  long long v44 = 0u;
  long long v45 = 0u;
  int v46 = 1065353216;
  if (v20)
  {
    id v21 = 0;
    int v22 = v47;
    do
    {
      uint64_t v50 = v22 + 5;
      id v23 = (double *)std::__hash_table<std::__hash_value_type<boost::uuids::uuid,double>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,double>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,double>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,double>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>((uint64_t)&v44, v22 + 5, (uint64_t)&std::piecewise_construct, &v50);
      v23[4] = 1.0 / (double)(unint64_t)v20 + v23[4];
      char v24 = (uint64_t *)v22[1];
      if (v24)
      {
        do
        {
          int v25 = v24;
          char v24 = (uint64_t *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          int v25 = (uint64_t *)v22[2];
          BOOL v26 = *v25 == (void)v22;
          int v22 = v25;
        }
        while (!v26);
      }
      id v21 = (void *)((char *)v21 + 1);
      int v22 = v25;
    }
    while (v21 != v20);
    id v20 = (void *)v45;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *((_DWORD *)a4 + 6) = 3;
  *((unsigned char *)a4 + 80) = 0;
  a4[5] = 0;
  a4[6] = 0;
  a4[4] = 0;
  *((unsigned char *)a4 + 56) = 0;
  if (v20)
  {
    char v27 = 0;
    __int16 v28 = a4 + 2;
    do
    {
      uint64_t v30 = v20[2];
      uint64_t v29 = v20[3];
      if ((unint64_t)v27 >= *v28)
      {
        uint64_t v32 = (v27 - *a4) >> 5;
        if ((unint64_t)(v32 + 1) >> 59) {
          std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v33 = *v28 - (void)*a4;
        uint64_t v34 = v33 >> 4;
        if (v33 >> 4 <= (unint64_t)(v32 + 1)) {
          uint64_t v34 = v32 + 1;
        }
        if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v35 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v35 = v34;
        }
        uint64_t v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationResultInternal>>((uint64_t)(a4 + 2), v35);
        uint64_t v38 = &v36[32 * v32];
        uint64_t v39 = v20[4];
        *(void *)uint64_t v38 = v30;
        *((void *)v38 + 1) = v29;
        *((void *)v38 + 2) = v39;
        *((_DWORD *)v38 + 6) = 0;
        __int16 v41 = *a4;
        int v40 = a4[1];
        char v42 = v38;
        if (v40 != *a4)
        {
          do
          {
            long long v43 = *((_OWORD *)v40 - 2);
            *(_OWORD *)(v42 - 20) = *(_OWORD *)(v40 - 20);
            *((_OWORD *)v42 - 2) = v43;
            v42 -= 32;
            v40 -= 32;
          }
          while (v40 != v41);
          int v40 = *a4;
        }
        char v27 = v38 + 32;
        *a4 = v42;
        a4[1] = v38 + 32;
        a4[2] = &v36[32 * v37];
        if (v40) {
          operator delete(v40);
        }
      }
      else
      {
        uint64_t v31 = v20[4];
        *(void *)char v27 = v30;
        *((void *)v27 + 1) = v29;
        *((void *)v27 + 2) = v31;
        *((_DWORD *)v27 + 6) = 0;
        v27 += 32;
      }
      a4[1] = v27;
      id v20 = (void *)*v20;
    }
    while (v20);
  }
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&v44);
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&v47, v48);
}

void sub_2564C9FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *a15)
{
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

void CLMicroLocationNearestNeighborAlgorithm::~CLMicroLocationNearestNeighborAlgorithm(CLMicroLocationNearestNeighborAlgorithm *this)
{
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_98()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

char *std::__tree<std::__value_type<double,boost::uuids::uuid>,std::__map_value_compare<double,std::__value_type<double,boost::uuids::uuid>,std::less<double>,true>,std::allocator<std::__value_type<double,boost::uuids::uuid>>>::__emplace_multi<double,boost::uuids::uuid const&>(uint64_t **a1, double *a2, _OWORD *a3)
{
  long long v6 = (char *)operator new(0x38uLL);
  double v7 = *a2;
  *((double *)v6 + 4) = *a2;
  *(_OWORD *)(v6 + 40) = *a3;
  uint64_t v8 = a1 + 1;
  uint64_t v9 = a1[1];
  if (v9)
  {
    do
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v9;
        if (v7 >= *((double *)v9 + 4)) {
          break;
        }
        uint64_t v9 = (uint64_t *)*v9;
        uint64_t v10 = v8;
        if (!*v8) {
          goto LABEL_8;
        }
      }
      uint64_t v9 = (uint64_t *)v9[1];
    }
    while (v9);
    uint64_t v10 = v8 + 1;
  }
  else
  {
    uint64_t v10 = a1 + 1;
  }
LABEL_8:
  std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__insert_node_at(a1, (uint64_t)v8, v10, (uint64_t *)v6);
  return v6;
}

void *ULWiFiHistogramAnalyzer::ULWiFiHistogramAnalyzer(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1] = a3;
  result[2] = &unk_2704E2AE0;
  result[3] = result;
  result[5] = result + 2;
  return result;
}

void *ULWiFiHistogramAnalyzer::executeWiFiItem(uint64_t a1, uint64_t a2)
{
  void v5[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v5, a2);
  uint64_t v3 = *(void *)(a1 + 40);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, void *))(*(void *)v3 + 48))(v3, v5);
  return std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v5);
}

void sub_2564CA248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void ULWiFiHistogramAnalyzer::analyzeWiFiChannels(void *a1, uint64_t a2)
{
  uint64_t v80 = *MEMORY[0x263EF8340];
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_123);
  }
  id v4 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"analyzing WiFi channels\"}", buf, 0x12u);
  }
  id v5 = *(id *)(a1[1] + 56);
  long long v6 = v5;
  if (v5)
  {
    [v5 fetchAllDistinctLoiGroups];
  }
  else
  {
    uint64_t v67 = 0;
    float v68 = 0;
    uint64_t v69 = 0;
  }

  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_123);
  }
  double v7 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 134217984;
    *(void *)&uint8_t buf[4] = ((char *)v68 - (char *)v67) >> 6;
    _os_log_impl(&dword_25631F000, v7, OS_LOG_TYPE_DEFAULT, "Got %zu Unique LOI Ids", buf, 0xCu);
  }
  if (v67 == v68)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_123);
    }
    double v48 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      _os_log_impl(&dword_25631F000, v48, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"no LOI ids found\"}", buf, 0x12u);
    }
  }
  else
  {
    uint64_t v8 = +[ULDefaultsSingleton shared];
    uint64_t v9 = [v8 defaultsDictionary];

    uint64_t v10 = [NSString stringWithUTF8String:"ULNumberDaysToAnalyzeWiFiChannels"];
    uint64_t v11 = [v9 objectForKey:v10];
    if (v11 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
      int v12 = [v11 intValue];
    }
    else {
      int v12 = [&unk_2704F23D0 intValue];
    }
    int v13 = v12;

    uint64_t v14 = [MEMORY[0x263EFF910] date];
    uint64_t v64 = 0;
    unint64_t v65 = 0;
    unint64_t v66 = 0;
    unint64_t v15 = v67;
    uint64_t v56 = v68;
    if (v67 == v68)
    {
LABEL_84:
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_123);
      }
      uint64_t v51 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 68289026;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        double v52 = "{\"msg%{public}.0s\":\"Wifi Channel Histogram was not generated\"}";
        uint64_t v53 = v51;
        uint32_t v54 = 18;
LABEL_88:
        _os_log_impl(&dword_25631F000, v53, OS_LOG_TYPE_DEFAULT, v52, buf, v54);
      }
    }
    else
    {
      do
      {
        memset(v62, 0, sizeof(v62));
        int v63 = 1065353216;
        if (v13 >= 1)
        {
          int v16 = 0;
          while (1)
          {
            uint64_t v17 = *(void *)(a2 + 24);
            if (!v17) {
              std::__throw_bad_function_call[abi:ne180100]();
            }
            if ((*(unsigned int (**)(uint64_t))(*(void *)v17 + 48))(v17)) {
              break;
            }
            CLMicroLocationTimeUtils::getTimeDeltaDaysAgo(v14, (NSDate *)~v16);
            double v19 = v18;
            CLMicroLocationTimeUtils::getTimeDeltaDaysAgo(v14, (NSDate *)-v16);
            double v21 = v20;
            id v22 = *(id *)(a1[1] + 64);
            id v23 = v22;
            if (v22)
            {
              [v22 fetchLearningMeasurementsAtLoiGroupId:&v15[3] fromTime:v19 toTime:v21];
            }
            else
            {
              uint64_t v57 = 0;
              uint64_t v58 = 0;
              uint64_t v59 = 0;
            }

            if (*(_OWORD *)&v15[3].super.isa != 0)
            {
              id v25 = *(id *)(a1[1] + 64);
              BOOL v26 = v25;
              double v76 = 0;
              uint64_t v77 = 0;
              if (v25) {
                [v25 fetchLearningMeasurementsAtLoiGroupId:&v76 fromTime:v19 toTime:v21];
              }
              else {
                memset(buf, 0, 24);
              }

              std::vector<CLMicroLocationMeasurementTable::Entry>::__insert_with_size[abi:ne180100]<std::move_iterator<std::__wrap_iter<CLMicroLocationMeasurementTable::Entry*>>,std::move_iterator<std::__wrap_iter<CLMicroLocationMeasurementTable::Entry*>>>(&v57, v58, *(uint64_t *)buf, *(uint64_t *)&buf[8], 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 3));
              double v76 = buf;
              std::vector<CLMicroLocationMeasurementTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v76);
            }
            uint64_t v27 = v57;
            uint64_t v28 = v58;
            if (v57 != v58)
            {
              double v76 = 0;
              uint64_t v77 = 0;
              unint64_t v78 = 0;
              do
              {
                if (*(_DWORD *)(v27 + 96) == 1)
                {
                  uint64_t v29 = *(const CLMicroLocationProto::WiFiRssi **)(v27 + 48);
                  if (!v29) {
                    uint64_t v29 = *(const CLMicroLocationProto::WiFiRssi **)(CLMicroLocationProto::Measurement::default_instance(v24)
                  }
                                                                   + 16);
                  CLMicroLocationProto::WiFiRssi::WiFiRssi((CLMicroLocationProto::WiFiRssi *)buf, v29);
                  uint64_t v30 = v77;
                  if ((unint64_t)v77 >= v78)
                  {
                    uint64_t v31 = (CLMicroLocationProto::WiFiRssi *)std::vector<CLMicroLocationProto::WiFiRssi>::__push_back_slow_path<CLMicroLocationProto::WiFiRssi const&>((uint64_t *)&v76, (const CLMicroLocationProto::WiFiRssi *)buf);
                  }
                  else
                  {
                    CLMicroLocationProto::WiFiRssi::WiFiRssi(v77, (const CLMicroLocationProto::WiFiRssi *)buf);
                    uint64_t v31 = (CLMicroLocationProto::WiFiRssi *)((char *)v30 + 48);
                  }
                  uint64_t v77 = v31;
                  CLMicroLocationProto::WiFiRssi::~WiFiRssi((CLMicroLocationProto::WiFiRssi *)buf);
                }
                v27 += 120;
              }
              while (v27 != v28);
              CLMicroLocationWiFiChannelHistogramAnalyzer::update(v62, (uint64_t *)&v76);
              *(void *)std::string buf = &v76;
              std::vector<CLMicroLocationProto::WiFiRssi>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
            }
            *(void *)std::string buf = &v57;
            std::vector<CLMicroLocationMeasurementTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
            if (++v16 == v13) {
              goto LABEL_42;
            }
          }
          if (onceToken_MicroLocation_Default != -1) {
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_123);
          }
          uint64_t v49 = logObject_MicroLocation_Default;
          if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 68289282;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)&uint8_t buf[8] = 2082;
            *(void *)&buf[10] = "";
            *(_WORD *)&unsigned char buf[18] = 2082;
            *(void *)&buf[20] = "MicroLocationAnalytics";
            _os_log_impl(&dword_25631F000, v49, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"wifi channels analytics operation cancelled\", \"Activity\":%{public, location:escape_only}s}", buf, 0x1Cu);
          }
          std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v62);
          goto LABEL_89;
        }
LABEL_42:
        if (!CLMicroLocationWiFiChannelHistogramAnalyzer::isEmpty((CLMicroLocationWiFiChannelHistogramAnalyzer *)v62))
        {
          CLMicroLocationWiFiChannelHistogramAnalyzer::getHistogram((uint64_t)v62, (unsigned __int8 *)&v15[5], (uint64_t *)&v60);
          CLMicroLocationProto::WifiHistogram::WifiHistogram((uint64_t)&v76);
          uint64_t v32 = (int *)v60;
          uint64_t v33 = v61;
          if (v60 != v61)
          {
            int v34 = v78;
            do
            {
              int v35 = HIDWORD(v78);
              if (v34 >= SHIDWORD(v78))
              {
                if (HIDWORD(v78) == v79)
                {
                  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)&v77);
                  int v35 = HIDWORD(v78);
                }
                HIDWORD(v78) = v35 + 1;
                wireless_diagnostics::google::protobuf::internal::GenericTypeHandler<CLMicroLocationProto::ChannelAndCount>::New();
              }
              LODWORD(v78) = v34 + 1;
              uint64_t v36 = *((void *)v77 + v34++);
              int v37 = *v32;
              int v38 = *(_DWORD *)(v36 + 24);
              *(_DWORD *)(v36 + 24) = v38 | 1;
              *(_DWORD *)(v36 + 16) = v37;
              uint64_t v39 = v32[1];
              *(_DWORD *)(v36 + 24) = v38 | 3;
              *(void *)(v36 + 8) = v39;
              v32 += 2;
            }
            while (v32 != v33);
          }
          double v40 = cl::chrono::CFAbsoluteTimeClock::now();
          CLMicroLocationProtobufHelper::createConfiguration<CLMicroLocationProto::WifiHistogram>((CLMicroLocationProto::Configuration *)&v76, (uint64_t)&v57, v40);
          unint64_t v41 = v65;
          if (v65 >= v66)
          {
            uint64_t v42 = std::vector<CLMicroLocationConfigurationTable::Entry>::__emplace_back_slow_path<std::string const&,CLMicroLocationProto::Configuration &,boost::uuids::uuid const&>(&v64, (uint64_t)&v15[5], (uint64_t)&v57, &v15[3].super.isa);
          }
          else
          {
            std::allocator<CLMicroLocationConfigurationTable::Entry>::construct[abi:ne180100]<CLMicroLocationConfigurationTable::Entry,std::string const&,CLMicroLocationProto::Configuration &,boost::uuids::uuid const&>((uint64_t)&v66, v65, (uint64_t)&v15[5], (uint64_t)&v57, &v15[3].super.isa);
            uint64_t v42 = v41 + 112;
          }
          unint64_t v65 = v42;
          CLMicroLocationTimeUtils::getTimeDeltaDaysAgo(v14, (NSDate *)-v13);
          double v44 = v43;
          id v45 = *(id *)(a1[1] + 32);
          int v46 = v45;
          LODWORD(__p) = 0;
          if (v45)
          {
            [v45 fetchMostRecentConfiguration:&__p atLoiGroupId:&v15[3] beforeTime:v44];
          }
          else
          {
            uint64_t v75 = 0;
            memset(v74, 0, sizeof(v74));
            long long v73 = 0u;
            memset(buf, 0, sizeof(buf));
          }

          if ((_BYTE)v75)
          {
            CLMicroLocationWiFiChannelHistogramAnalyzer::histogramFromProtobuf((uint64_t)v74 + 8, (unsigned __int8 *)&v15[5], &__p);
            if (__p)
            {
              v71[0] = __p;
              operator delete(__p);
            }
          }
          else
          {
            if (onceToken_MicroLocation_Default != -1) {
              dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_123);
            }
            double v47 = logObject_MicroLocation_Default;
            if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO))
            {
              std::string __p = (void *)68289026;
              LOWORD(v71[0]) = 2082;
              *(void *)((char *)v71 + 2) = "";
              _os_log_impl(&dword_25631F000, v47, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Wifi Channel Histogram analytics was not sent since not enough time elapsed\"}", (uint8_t *)&__p, 0x12u);
            }
          }
          std::__optional_destruct_base<CLMicroLocationConfigurationTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
          CLMicroLocationProto::Configuration::~Configuration((CLMicroLocationProto::Configuration *)&v57);
          CLMicroLocationProto::WifiHistogram::~WifiHistogram((CLMicroLocationProto::WifiHistogram *)&v76);
          if (v60)
          {
            BOOL v61 = (int *)v60;
            operator delete(v60);
          }
        }
        std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v62);
        v15 += 8;
      }
      while (v15 != v56);
      if (v64 == v65) {
        goto LABEL_84;
      }
      if ([*(id *)(a1[1] + 32) insertEntries:&v64])
      {
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_123);
        }
        uint64_t v50 = logObject_MicroLocation_Default;
        if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)std::string buf = 68289026;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = "";
          _os_log_impl(&dword_25631F000, v50, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Wifi Channel Histogram generated successfully\"}", buf, 0x12u);
        }
        (*(void (**)(void))(*(void *)*a1 + 16))();
      }
      else
      {
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_123);
        }
        uint64_t v55 = logObject_MicroLocation_Default;
        if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 68289282;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = "";
          *(_WORD *)&unsigned char buf[18] = 1026;
          *(_DWORD *)&buf[20] = 0;
          double v52 = "{\"msg%{public}.0s\":\"#Warning Wifi Channel Histogram was not generated properly\", \"Inserted\":%{public}hhd}";
          uint64_t v53 = v55;
          uint32_t v54 = 24;
          goto LABEL_88;
        }
      }
    }
LABEL_89:
    *(void *)std::string buf = &v64;
    std::vector<CLMicroLocationConfigurationTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
  *(void *)std::string buf = &v67;
  std::vector<CLMiLoLoiTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_2564CACD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  a17 = &a33;
  std::vector<CLMicroLocationConfigurationTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);

  a17 = &a36;
  std::vector<CLMiLoLoiTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_99()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

void std::__function::__func<ULWiFiHistogramAnalyzer::ULWiFiHistogramAnalyzer(ULWiFiHistogramAnalyzer::IWiFiAnalyzerDelegate &,ULDatabase &)::$_0,std::allocator<ULWiFiHistogramAnalyzer::ULWiFiHistogramAnalyzer(ULWiFiHistogramAnalyzer::IWiFiAnalyzerDelegate &,ULDatabase &)::$_0>,void ()(std::function<BOOL ()(void)>)>::~__func()
{
}

void *std::__function::__func<ULWiFiHistogramAnalyzer::ULWiFiHistogramAnalyzer(ULWiFiHistogramAnalyzer::IWiFiAnalyzerDelegate &,ULDatabase &)::$_0,std::allocator<ULWiFiHistogramAnalyzer::ULWiFiHistogramAnalyzer(ULWiFiHistogramAnalyzer::IWiFiAnalyzerDelegate &,ULDatabase &)::$_0>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_2704E2AE0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ULWiFiHistogramAnalyzer::ULWiFiHistogramAnalyzer(ULWiFiHistogramAnalyzer::IWiFiAnalyzerDelegate &,ULDatabase &)::$_0,std::allocator<ULWiFiHistogramAnalyzer::ULWiFiHistogramAnalyzer(ULWiFiHistogramAnalyzer::IWiFiAnalyzerDelegate &,ULDatabase &)::$_0>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_2704E2AE0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<ULWiFiHistogramAnalyzer::ULWiFiHistogramAnalyzer(ULWiFiHistogramAnalyzer::IWiFiAnalyzerDelegate &,ULDatabase &)::$_0,std::allocator<ULWiFiHistogramAnalyzer::ULWiFiHistogramAnalyzer(ULWiFiHistogramAnalyzer::IWiFiAnalyzerDelegate &,ULDatabase &)::$_0>,void ()(std::function<BOOL ()(void)>)>::operator()(uint64_t a1, uint64_t a2)
{
  void v6[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v5, a2);
  uint64_t v3 = *(void **)(a1 + 8);
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v6, (uint64_t)v5);
  ULWiFiHistogramAnalyzer::analyzeWiFiChannels(v3, (uint64_t)v6);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v6);
  return std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v5);
}

void sub_2564CAFB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ULWiFiHistogramAnalyzer::ULWiFiHistogramAnalyzer(ULWiFiHistogramAnalyzer::IWiFiAnalyzerDelegate &,ULDatabase &)::$_0,std::allocator<ULWiFiHistogramAnalyzer::ULWiFiHistogramAnalyzer(ULWiFiHistogramAnalyzer::IWiFiAnalyzerDelegate &,ULDatabase &)::$_0>,void ()(std::function<BOOL ()(void)>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ULWiFiHistogramAnalyzer::ULWiFiHistogramAnalyzer(ULWiFiHistogramAnalyzer::IWiFiAnalyzerDelegate &,ULDatabase &)::$_0,std::allocator<ULWiFiHistogramAnalyzer::ULWiFiHistogramAnalyzer(ULWiFiHistogramAnalyzer::IWiFiAnalyzerDelegate &,ULDatabase &)::$_0>,void ()(std::function<BOOL ()(void)>)>::target_type()
{
}

uint64_t std::vector<CLMicroLocationMeasurementTable::Entry>::__insert_with_size[abi:ne180100]<std::move_iterator<std::__wrap_iter<CLMicroLocationMeasurementTable::Entry*>>,std::move_iterator<std::__wrap_iter<CLMicroLocationMeasurementTable::Entry*>>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if ((uint64_t)(0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      uint64_t v20 = v12 - a2;
      if ((uint64_t)(0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v12 - a2) >> 3)) >= a5)
      {
        uint64_t v21 = a3 + 120 * a5;
      }
      else
      {
        uint64_t v21 = a3 + 8 * ((uint64_t)(v12 - a2) >> 3);
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationMeasurementTable::Entry>,std::move_iterator<std::__wrap_iter<CLMicroLocationMeasurementTable::Entry*>>,std::move_iterator<std::__wrap_iter<CLMicroLocationMeasurementTable::Entry*>>,CLMicroLocationMeasurementTable::Entry*>(v9, v21, a4, *(void *)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }
      std::vector<CLMicroLocationMeasurementTable::Entry>::__move_range((uint64_t)a1, v5, v12, v5 + 120 * a5);
      if (v21 != v7)
      {
        uint64_t v22 = v5;
        do
        {
          CLMicroLocationMeasurementTable::Entry::operator=(v22, v7);
          v7 += 120;
          v22 += 120;
        }
        while (v7 != v21);
      }
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 - 0x1111111111111111 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0x222222222222222) {
        std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v15 = 0xEEEEEEEEEEEEEEEFLL * ((a2 - v13) >> 3);
      unint64_t v16 = 0xEEEEEEEEEEEEEEEFLL * ((v10 - v13) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x111111111111111) {
        unint64_t v18 = 0x222222222222222;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v30 = v9;
      if (v18) {
        double v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationMeasurementTable::Entry>>(v9, v18);
      }
      else {
        double v19 = 0;
      }
      id v23 = &v19[120 * v15];
      v27[0] = v19;
      v27[1] = v23;
      uint64_t v28 = v23;
      uint64_t v29 = &v19[120 * v18];
      uint64_t v24 = 120 * a5;
      id v25 = &v23[120 * a5];
      do
      {
        CLMicroLocationMeasurementTable::Entry::Entry(v23, v7);
        v23 += 120;
        v7 += 120;
        v24 -= 120;
      }
      while (v24);
      uint64_t v28 = v25;
      uint64_t v5 = std::vector<CLMicroLocationMeasurementTable::Entry>::__swap_out_circular_buffer(a1, v27, v5);
      std::__split_buffer<CLMicroLocationMeasurementTable::Entry>::~__split_buffer((uint64_t)v27);
    }
  }
  return v5;
}

void sub_2564CB200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<CLMicroLocationMeasurementTable::Entry>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v10 = a2 + v6 - a4;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      CLMicroLocationMeasurementTable::Entry::Entry(v8, v10);
      v10 += 120;
      v8 += 120;
    }
    while (v10 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,CLMicroLocationMeasurementTable::Entry *,CLMicroLocationMeasurementTable::Entry *,CLMicroLocationMeasurementTable::Entry *,0>(a2, v7, v6);
}

void sub_2564CB2C8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMicroLocationMeasurementTable::Entry>::__swap_out_circular_buffer(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationMeasurementTable::Entry>,std::reverse_iterator<CLMicroLocationMeasurementTable::Entry*>,std::reverse_iterator<CLMicroLocationMeasurementTable::Entry*>,std::reverse_iterator<CLMicroLocationMeasurementTable::Entry*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationMeasurementTable::Entry>,CLMicroLocationMeasurementTable::Entry*,CLMicroLocationMeasurementTable::Entry*,CLMicroLocationMeasurementTable::Entry*>(v7, a3, a1[1], a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationMeasurementTable::Entry>,std::move_iterator<std::__wrap_iter<CLMicroLocationMeasurementTable::Entry*>>,std::move_iterator<std::__wrap_iter<CLMicroLocationMeasurementTable::Entry*>>,CLMicroLocationMeasurementTable::Entry*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      CLMicroLocationMeasurementTable::Entry::Entry(a4 + v7, a2 + v7);
      v7 += 120;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_2564CB3E4(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 88;
    do
    {
      CLMicroLocationProto::Measurement::~Measurement((CLMicroLocationProto::Measurement *)(v4 + v2));
      v2 -= 120;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,CLMicroLocationMeasurementTable::Entry *,CLMicroLocationMeasurementTable::Entry *,CLMicroLocationMeasurementTable::Entry *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a1)
  {
    uint64_t v6 = a2;
    do
    {
      v6 -= 120;
      a3 -= 120;
      CLMicroLocationMeasurementTable::Entry::operator=(a3, v6);
    }
    while (v6 != a1);
  }
  return a2;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationMeasurementTable::Entry>,CLMicroLocationMeasurementTable::Entry*,CLMicroLocationMeasurementTable::Entry*,CLMicroLocationMeasurementTable::Entry*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a4 + v7;
      uint64_t v9 = a2 + v7;
      long long v10 = *(_OWORD *)(a2 + v7 + 16);
      *(_OWORD *)uint64_t v8 = *(_OWORD *)(a2 + v7);
      *(_OWORD *)(v8 + 16) = v10;
      CLMicroLocationProto::Measurement::Measurement((CLMicroLocationProto::Measurement *)(a4 + v7 + 32), (const CLMicroLocationProto::Measurement *)(a2 + v7 + 32));
      *(_DWORD *)(v8 + std::__optional_destruct_base<CachedPrediction,false>::reset[abi:ne180100]((uint64_t)this + 112) = *(_DWORD *)(a2 + v7 + 112);
      v7 += 120;
    }
    while (v9 + 120 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_2564CB4E8(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 88;
    do
    {
      CLMicroLocationProto::Measurement::~Measurement((CLMicroLocationProto::Measurement *)(v4 + v2));
      v2 -= 120;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void CLMicroLocationMaintenance::CLMicroLocationMaintenance(CLMicroLocationMaintenance *this, ULDatabase *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  *(void *)this = a2;
  v5[0] = &unk_2704E2BB0;
  v5[1] = this;
  int v5[3] = v5;
  v6[0] = &unk_2704E2C30;
  v6[1] = this;
  void v6[3] = v6;
  v7[0] = &unk_2704E2CB0;
  v7[1] = this;
  v7[3] = v7;
  v8[0] = &unk_2704E2D30;
  v8[1] = this;
  v8[3] = v8;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 1) = 0;
  uint64_t v3 = (char *)operator new(0x80uLL);
  *((void *)this + 3) = v3 + 128;
  *((void *)this + 1) = v3;
  *((void *)this + 2) = v3;
  *((void *)this + 2) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::function<void ()(std::function<BOOL ()(void)>)>>,std::function<void ()(std::function<BOOL ()(void)>)> const*,std::function<void ()(std::function<BOOL ()(void)>)> const*,std::function<void ()(std::function<BOOL ()(void)>)>*>((uint64_t)this + 24, (uint64_t)v5, (uint64_t)&v9, (uint64_t)v3);
  for (uint64_t i = 12; i != -4; i -= 4)
    std::__function::__value_func<void ()(std::function<BOOL ()(void)>)>::~__value_func[abi:ne180100](&v5[i]);
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
}

void sub_2564CB664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 16) = v14;
  std::vector<std::function<void ()(std::function<BOOL ()(void)>)>>::__destroy_vector::operator()[abi:ne180100](&a10);
  for (uint64_t i = 96; i != -32; i -= 32)
    std::__function::__value_func<void ()(std::function<BOOL ()(void)>)>::~__value_func[abi:ne180100](&a12 + i);
  _Unwind_Resume(a1);
}

void CLMicroLocationMaintenance::collectMetricsPreMaintenance(CFAbsoluteTime *this)
{
  this[8] = cl::chrono::CFAbsoluteTimeClock::now();
  id v3 = *(id *)(*(void *)this + 72);
  *((_DWORD *)this + 8) = [v3 count];

  id v4 = *(id *)(*(void *)this + 88);
  *((_DWORD *)this + 9) = [v4 count];

  id v5 = *(id *)(*(void *)this + 64);
  *((_DWORD *)this + 10) = [v5 count];

  id v6 = *(id *)(*(void *)this + 32);
  *((_DWORD *)this + 11) = [v6 count];

  id v7 = *(id *)(*(void *)this + 80);
  *((_DWORD *)this + 12) = [v7 count];

  id v8 = *(id *)(*(void *)this + 88);
  [v8 getOldestRecordingTimestamp];
  *((void *)this + 7) = v2;
}

void sub_2564CB7A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationMaintenance::collectMetricsPostMaintenance(CLMicroLocationMaintenance *this)
{
  uint64_t v2 = +[ULDefaultsSingleton shared];
  id v3 = [v2 defaultsDictionary];

  id v4 = [NSString stringWithUTF8String:"ULAnalyticsSendEventEnabled"];
  id v5 = [v3 objectForKey:v4];
  if (v5 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    int v6 = [v5 BOOLValue];
  }
  else {
    int v6 = [MEMORY[0x263EFFA88] BOOLValue];
  }
  int v7 = v6;

  if (v7)
  {
    cl::chrono::CFAbsoluteTimeClock::now();
    int v8 = [*(id *)(*(void *)this + 72) count];
    int v9 = [*(id *)(*(void *)this + 88) count];
    int v10 = [*(id *)(*(void *)this + 64) count];
    int v11 = [*(id *)(*(void *)this + 32) count];
    int v12 = [*(id *)(*(void *)this + 80) count];
    id v13 = *(id *)(*(void *)this + 104);
    uint64_t v14 = v13;
    if (v13)
    {
      [v13 getAllDistinctCustomLoiIds];
    }
    else
    {
      *(void *)std::string buf = 0;
      id v25 = 0;
      uint64_t v26 = 0;
    }

    cl::chrono::CFAbsoluteTimeClock::now();
    int v19 = v8;
    int v20 = v9;
    int v21 = v10;
    int v22 = v11;
    int v23 = v12;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    std::string __p = 0;
    std::vector<boost::uuids::uuid>::__init_with_size[abi:ne180100]<boost::uuids::uuid*,boost::uuids::uuid*>(&__p, *(const void **)buf, (uint64_t)v25, ((uint64_t)v25 - *(void *)buf) >> 4);
    AnalyticsSendEventLazy();
    if (__p)
    {
      uint64_t v17 = __p;
      operator delete(__p);
    }
    if (*(void *)buf)
    {
      id v25 = *(const void **)buf;
      operator delete(*(void **)buf);
    }
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_124);
    }
    unint64_t v15 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_25631F000, v15, OS_LOG_TYPE_DEFAULT, "CLMicroLocationMaintenance, collectMetricsPostMaintenance, not sending event because sending to CoreAnalytics is disabled", buf, 2u);
    }
  }
}

void sub_2564CBA70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  _Unwind_Resume(a1);
}

id ___ZN26CLMicroLocationMaintenance29collectMetricsPostMaintenanceEv_block_invoke(uint64_t a1)
{
  v19[13] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(_DWORD **)(a1 + 32);
  v18[0] = @"ageOfOldestRecordingDays";
  uint64_t v17 = [NSNumber numberWithInt:*(unsigned int *)(a1 + 40)];
  v19[0] = v17;
  v18[1] = @"numModels";
  unint64_t v16 = [NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 80)];
  v19[1] = v16;
  void v18[2] = @"numModelsDeleted";
  unint64_t v15 = [NSNumber numberWithUnsignedInt:(v2[8] - *(_DWORD *)(a1 + 80))];
  v19[2] = v15;
  v18[3] = @"numRecordingEvents";
  uint64_t v14 = [NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 84)];
  v19[3] = v14;
  v18[4] = @"numRecordingEventsDeleted";
  id v3 = [NSNumber numberWithUnsignedInt:(v2[9] - *(_DWORD *)(a1 + 84))];
  v19[4] = v3;
  v18[5] = @"numMeasurements";
  id v4 = [NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 88)];
  v19[5] = v4;
  v18[6] = @"numMeasurementsDeleted";
  id v5 = [NSNumber numberWithUnsignedInt:(v2[10] - *(_DWORD *)(a1 + 88))];
  v19[6] = v5;
  v18[7] = @"numConfigurations";
  int v6 = [NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 92)];
  v19[7] = v6;
  unsigned char v18[8] = @"numConfiguationsDeleted";
  int v7 = [NSNumber numberWithUnsignedInt:(v2[11] - *(_DWORD *)(a1 + 92))];
  v19[8] = v7;
  v18[9] = @"numRapportEntries";
  int v8 = [NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 96)];
  v19[9] = v8;
  v18[10] = @"numRapportEntriesDeleted";
  int v9 = [NSNumber numberWithUnsignedInt:(v2[12] - *(_DWORD *)(a1 + 96))];
  v19[10] = v9;
  v18[11] = @"maintenanceRunTime";
  int v10 = [NSNumber numberWithDouble:*(double *)(a1 + 48)];
  int v19[11] = v10;
  v18[12] = @"numCustomLoiIds";
  int v11 = [NSNumber numberWithUnsignedLong:(uint64_t)(*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 4];
  v19[12] = v11;
  int v12 = [NSDictionary dictionaryWithObjects:v19 forKeys:v18 count:13];

  return v12;
}

void sub_2564CBDE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void *__copy_helper_block_ea8_56c59_ZTSNSt3__16vectorIN5boost5uuids4uuidENS_9allocatorIS3_EEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  uint64_t v2 = (void *)(a1 + 56);
  v2[2] = 0;
  return std::vector<boost::uuids::uuid>::__init_with_size[abi:ne180100]<boost::uuids::uuid*,boost::uuids::uuid*>(v2, *(const void **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 4);
}

void __destroy_helper_block_ea8_56c59_ZTSNSt3__16vectorIN5boost5uuids4uuidENS_9allocatorIS3_EEEE(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
}

void CLMicroLocationMaintenance::deleteOldEntries(id **this)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v1 = *this;
  uint64_t v2 = +[ULDefaultsSingleton shared];
  id v3 = [v2 defaultsDictionary];

  id v4 = [NSString stringWithUTF8String:"ULRecordingPurgeAge"];
  id v5 = [v3 objectForKey:v4];
  if (v5 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    int v6 = [v5 intValue];
  }
  else {
    int v6 = [&unk_2704F2430 intValue];
  }
  int v7 = v6;

  int v8 = +[ULDefaultsSingleton shared];
  int v9 = [v8 defaultsDictionary];

  int v10 = [NSString stringWithUTF8String:"ULSimilarityListLabelsPurgeAge"];
  int v11 = [v9 objectForKey:v10];
  if (v11 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    int v12 = [v11 intValue];
  }
  else {
    int v12 = [&unk_2704F2400 intValue];
  }
  int v13 = v12;

  int v14 = ULDatabase::deleteDataOlderThan(v1, 1440 * v7, 1440 * v13, 1);
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_124);
  }
  unint64_t v15 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO))
  {
    unint64_t v16 = "NOT ";
    if (v14) {
      unint64_t v16 = "";
    }
    int v17 = 136446210;
    uint64_t v18 = v16;
    _os_log_impl(&dword_25631F000, v15, OS_LOG_TYPE_INFO, "Did %{public}s delete old data", (uint8_t *)&v17, 0xCu);
  }
}

void sub_2564CC11C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564CC178()
{
}

void CLMicroLocationMaintenance::freeDatabaseSpace(ULDatabase **this)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  int v1 = ULDatabase::freeDatabaseSpace(*this);
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_124);
  }
  uint64_t v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO))
  {
    id v3 = "NOT";
    if (v1) {
      id v3 = "";
    }
    int v4 = 136446210;
    id v5 = v3;
    _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_INFO, "Did %{public}s free database space", (uint8_t *)&v4, 0xCu);
  }
}

void *CLMicroLocationMaintenance::executeWorkItems(void *result, uint64_t a2)
{
  void v6[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = result[1];
  for (uint64_t i = result[2]; v2 != i; v2 += 32)
  {
    std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
    uint64_t v5 = *(void *)(v2 + 24);
    if (!v5) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, void *))(*(void *)v5 + 48))(v5, v6);
    uint64_t result = std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v6);
  }
  return result;
}

void sub_2564CC328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_100()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  int v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

void std::__function::__func<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_0,std::allocator<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_0>,void ()(std::function<BOOL ()(void)>)>::~__func()
{
}

void *std::__function::__func<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_0,std::allocator<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_0>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_2704E2BB0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_0,std::allocator<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_0>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_2704E2BB0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_0,std::allocator<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_0>,void ()(std::function<BOOL ()(void)>)>::operator()(uint64_t a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  CLMicroLocationMaintenance::collectMetricsPreMaintenance(*(CFAbsoluteTime **)(a1 + 8));
  return std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v4);
}

void sub_2564CC484(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_0,std::allocator<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_0>,void ()(std::function<BOOL ()(void)>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_0,std::allocator<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_0>,void ()(std::function<BOOL ()(void)>)>::target_type()
{
}

void std::__function::__func<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_1,std::allocator<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_1>,void ()(std::function<BOOL ()(void)>)>::~__func()
{
}

void *std::__function::__func<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_1,std::allocator<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_1>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_2704E2C30;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_1,std::allocator<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_1>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_2704E2C30;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_1,std::allocator<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_1>,void ()(std::function<BOOL ()(void)>)>::operator()(uint64_t a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  CLMicroLocationMaintenance::deleteOldEntries(*(id ***)(a1 + 8));
  return std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v4);
}

void sub_2564CC5DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_1,std::allocator<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_1>,void ()(std::function<BOOL ()(void)>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_1,std::allocator<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_1>,void ()(std::function<BOOL ()(void)>)>::target_type()
{
}

void std::__function::__func<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_2,std::allocator<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_2>,void ()(std::function<BOOL ()(void)>)>::~__func()
{
}

void *std::__function::__func<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_2,std::allocator<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_2>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_2704E2CB0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_2,std::allocator<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_2>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_2704E2CB0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_2,std::allocator<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_2>,void ()(std::function<BOOL ()(void)>)>::operator()(uint64_t a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  CLMicroLocationMaintenance::freeDatabaseSpace(*(ULDatabase ***)(a1 + 8));
  return std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v4);
}

void sub_2564CC734(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_2,std::allocator<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_2>,void ()(std::function<BOOL ()(void)>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_2,std::allocator<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_2>,void ()(std::function<BOOL ()(void)>)>::target_type()
{
}

void std::__function::__func<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_3,std::allocator<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_3>,void ()(std::function<BOOL ()(void)>)>::~__func()
{
}

void *std::__function::__func<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_3,std::allocator<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_3>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_2704E2D30;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_3,std::allocator<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_3>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_2704E2D30;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_3,std::allocator<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_3>,void ()(std::function<BOOL ()(void)>)>::operator()(uint64_t a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  CLMicroLocationMaintenance::collectMetricsPostMaintenance(*(CLMicroLocationMaintenance **)(a1 + 8));
  return std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v4);
}

void sub_2564CC88C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_3,std::allocator<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_3>,void ()(std::function<BOOL ()(void)>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_3,std::allocator<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_3>,void ()(std::function<BOOL ()(void)>)>::target_type()
{
}

void sub_2564CCBDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564CD118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  if (v57)
  {
    if (a50 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_101()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  int v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

void sub_2564CDA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_2564CE034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_2564CE19C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__23(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__23(uint64_t a1)
{
}

void sub_2564CE7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_2564CE98C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_2564CEAB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class initSAPathManager()
{
  if (SpaceAttributionLibrary_sOnce != -1) {
    dispatch_once(&SpaceAttributionLibrary_sOnce, &__block_literal_global_137);
  }
  Class result = objc_getClass("SAPathManager");
  classSAPathManager = (uint64_t)result;
  getSAPathManagerClass = (uint64_t (*)())SAPathManagerFunction;
  return result;
}

id SAPathManagerFunction()
{
  return (id)classSAPathManager;
}

void *__SpaceAttributionLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/SpaceAttribution.framework/SpaceAttribution", 2);
  SpaceAttributionLibrary_sLib = (uint64_t)result;
  return result;
}

Class initSAPathInfo()
{
  if (SpaceAttributionLibrary_sOnce != -1) {
    dispatch_once(&SpaceAttributionLibrary_sOnce, &__block_literal_global_137);
  }
  Class result = objc_getClass("SAPathInfo");
  classSAPathInfo = (uint64_t)result;
  getSAPathInfoClass = (uint64_t (*)())SAPathInfoFunction;
  return result;
}

id SAPathInfoFunction()
{
  return (id)classSAPathInfo;
}

void sub_2564CFAC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564CFC64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564CFE04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564CFF04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::AnalyticsInterval>()
{
  os_log_t v0 = +[ULDefaultsSingleton shared];
  int v1 = [v0 defaultsDictionary];

  uint64_t v2 = [NSString stringWithUTF8String:"ULAnalyticsInterval"];
  uint64_t v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    int v4 = [v3 intValue];
  }
  else {
    int v4 = [&unk_2704F2448 intValue];
  }
  uint64_t v5 = v4;

  return v5;
}

void sub_2564CFFD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564D00D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2564D0190(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_2564D01A0()
{
  uint64_t v0 = sub_2564E1320();
  __swift_allocate_value_buffer(v0, qword_269F5F388);
  __swift_project_value_buffer(v0, (uint64_t)qword_269F5F388);
  return sub_2564E1310();
}

uint64_t sub_2564D025C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = sub_2564E1440();
  uint64_t v10 = v9;
  uint64_t v11 = sub_2564E1440();
  uint64_t v13 = v12;
  uint64_t v14 = sub_2564E1440();
  uint64_t v16 = v15;
  uint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
  LOBYTE(a7) = a7(v8, v10, v11, v13, v14, v16, ObjCClassMetadata);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a7 & 1;
}

uint64_t sub_2564D033C(uint64_t a1, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_10:
        __break(1u);
        JUMPOUT(0x2564D0494);
      }
      uint64_t v4 = (int)v4;
LABEL_6:
      if (v4 > 27)
      {
        sub_2564D3F54(a1, a2);
        sub_2564D0684(a1, a2);
        sub_2564E1400();
        return sub_2564D3E6C(a1, a2);
      }
      else
      {
LABEL_7:
        uint64_t v8 = sub_2564E1350();
        sub_2564D41BC(&qword_269F5F3D0, MEMORY[0x270FA74B0]);
        swift_allocError();
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v8 - 8) + 104))(v9, *MEMORY[0x263F04540], v8);
        swift_willThrow();
        return sub_2564D3E6C(a1, a2);
      }
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_10;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

id sub_2564D04BC(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t (*a5)(uint64_t, unint64_t, uint64_t, uint64_t))
{
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = sub_2564E1200();
  unint64_t v11 = v10;

  uint64_t v12 = sub_2564E1440();
  uint64_t v14 = v13;

  uint64_t v15 = a5(v9, v11, v12, v14);
  unint64_t v17 = v16;
  swift_bridgeObjectRelease();
  sub_2564D3E6C(v9, v11);
  if (v17 >> 60 == 15)
  {
    uint64_t v18 = 0;
  }
  else
  {
    uint64_t v18 = (void *)sub_2564E11F0();
    sub_2564D3EC4(v15, v17);
  }
  return v18;
}

id ULEncryption.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id ULEncryption.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ULEncryption();
  return objc_msgSendSuper2(&v2, sel_init);
}

id ULEncryption.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ULEncryption();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_2564D0684(uint64_t a1, unint64_t a2)
{
  v28[5] = *MEMORY[0x263EF8340];
  void v28[3] = MEMORY[0x263F06F78];
  _OWORD v28[4] = MEMORY[0x263F06F68];
  v28[0] = a1;
  v28[1] = a2;
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(v28, MEMORY[0x263F06F78]);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      if (v5 >> 32 < (int)v5)
      {
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      sub_2564D3F54(a1, a2);
      sub_2564D3F54(v5, v6);
      id v8 = (unsigned char *)sub_2564E1190();
      if (v8)
      {
        uint64_t v9 = sub_2564E11B0();
        if (!__OFSUB__((int)v5, v9))
        {
          v8 += (int)v5 - v9;
          goto LABEL_7;
        }
LABEL_31:
        __break(1u);
      }
LABEL_7:
      uint64_t v10 = sub_2564E11A0();
      if (v10 >= (v5 >> 32) - (int)v5) {
        uint64_t v11 = (v5 >> 32) - (int)v5;
      }
      else {
        uint64_t v11 = v10;
      }
      uint64_t v12 = &v8[v11];
      if (v8) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      sub_2564D0938(v8, v13, &v27);
      sub_2564D3E6C(v5, v6);
LABEL_27:
      sub_2564D3E6C(a1, a2);
      uint64_t v24 = v27;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
      return v24;
    case 2uLL:
      uint64_t v14 = *(void *)(v5 + 16);
      uint64_t v15 = *(void *)(v5 + 24);
      sub_2564D3F54(a1, a2);
      swift_retain();
      swift_retain();
      unint64_t v16 = (unsigned char *)sub_2564E1190();
      if (!v16) {
        goto LABEL_17;
      }
      uint64_t v17 = sub_2564E11B0();
      if (__OFSUB__(v14, v17)) {
        goto LABEL_30;
      }
      v16 += v14 - v17;
LABEL_17:
      BOOL v18 = __OFSUB__(v15, v14);
      uint64_t v19 = v15 - v14;
      if (v18) {
        goto LABEL_29;
      }
      uint64_t v20 = sub_2564E11A0();
      if (v20 >= v19) {
        uint64_t v21 = v19;
      }
      else {
        uint64_t v21 = v20;
      }
      int v22 = &v16[v21];
      if (v16) {
        int v23 = v22;
      }
      else {
        int v23 = 0;
      }
      sub_2564D0938(v16, v23, &v27);
      swift_release();
      swift_release();
      goto LABEL_27;
    case 3uLL:
      memset(v26, 0, 14);
      sub_2564D3F54(a1, a2);
      id v7 = v26;
      goto LABEL_26;
    default:
      v26[0] = *v4;
      LOWORD(v26[1]) = v6;
      BYTE2(v26[1]) = BYTE2(v6);
      BYTE3(v26[1]) = BYTE3(v6);
      BYTE4(v26[1]) = BYTE4(v6);
      BYTE5(v26[1]) = BYTE5(v6);
      sub_2564D3F54(a1, a2);
      id v7 = (char *)v26 + BYTE6(v6);
LABEL_26:
      sub_2564D0938(v26, v7, &v27);
      goto LABEL_27;
  }
}

unsigned char *sub_2564D0938@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    Class result = 0;
LABEL_4:
    unint64_t v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    Class result = (unsigned char *)sub_2564D3370(result, a2);
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    Class result = (unsigned char *)sub_2564D3434((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v8 | 0x8000000000000000;
  }
  else
  {
    Class result = (unsigned char *)sub_2564D34B0((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t _s19MicroLocationDaemon12ULEncryptionC11encryptFile_15destinationPath8keyLabel13keychainClassSbSS_S2SyXlXptFZ_0()
{
  if (MEMORY[0x263F8CDE8]) {
    BOOL v0 = MEMORY[0x263F8CDD0] == 0;
  }
  else {
    BOOL v0 = 1;
  }
  BOOL v3 = v0 || MEMORY[0x263F8CDF0] == 0 || MEMORY[0x263F8CDE0] == 0 || MEMORY[0x263F8CDD8] == 0;
  if (v3
    || (MEMORY[0x263F8CDB0] ? (BOOL v4 = MEMORY[0x263F8CDB8] == 0) : (BOOL v4 = 1),
        !v4 ? (BOOL v5 = MEMORY[0x263F8CDC8] == 0) : (BOOL v5 = 1),
        !v5 ? (BOOL v6 = MEMORY[0x263F8CDA8] == 0) : (BOOL v6 = 1),
        !v6 ? (BOOL v7 = MEMORY[0x263F8CDA0] == 0) : (BOOL v7 = 1),
        !v7 ? (BOOL v8 = MEMORY[0x263F8CD98] == 0) : (BOOL v8 = 1),
        !v8 ? (BOOL v9 = MEMORY[0x263F8CDC0] == 0) : (BOOL v9 = 1),
        v9))
  {
    if (qword_269F5F380 != -1) {
      swift_once();
    }
    uint64_t v27 = sub_2564E1320();
    __swift_project_value_buffer(v27, (uint64_t)qword_269F5F388);
    uint64_t v28 = sub_2564E1300();
    os_log_type_t v29 = sub_2564E1470();
    if (!os_log_type_enabled(v28, v29)) {
      goto LABEL_54;
    }
    uint64_t v30 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v30 = 0;
    uint64_t v31 = "encryptFile: AppleArchive Library not loaded. method aborted.";
    goto LABEL_53;
  }
  if (MEMORY[0x263F04610]) {
    BOOL v10 = MEMORY[0x263F04628] == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10 || MEMORY[0x263F04638] == 0 || MEMORY[0x263F04630] == 0)
  {
    if (qword_269F5F380 != -1) {
      swift_once();
    }
    uint64_t v32 = sub_2564E1320();
    __swift_project_value_buffer(v32, (uint64_t)qword_269F5F388);
    uint64_t v28 = sub_2564E1300();
    os_log_type_t v29 = sub_2564E1470();
    if (!os_log_type_enabled(v28, v29)) {
      goto LABEL_54;
    }
    uint64_t v30 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v30 = 0;
    uint64_t v31 = "encryptFile: CryptoKit Framework not loaded. method aborted.";
LABEL_53:
    _os_log_impl(&dword_25631F000, v28, v29, v31, v30, 2u);
    MEMORY[0x25A2A70C0](v30, -1, -1);
LABEL_54:

    return 0;
  }
  uint64_t v13 = sub_2564E1330();
  uint64_t v75 = v68;
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v73 = v13;
  uint64_t v74 = v14;
  uint64_t v15 = *(void *)(v14 + 64);
  ((void (*)(void))MEMORY[0x270FA5388])();
  swift_bridgeObjectRetain();
  uint64_t v77 = (char *)v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_2564E1340();
  MEMORY[0x270FA5388](v16);
  swift_bridgeObjectRetain();
  double v76 = (char *)v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2564E1340();
  uint64_t v17 = sub_2564E12C0();
  MEMORY[0x270FA5388](v17 - 8);
  sub_2564E12B0();
  uint64_t v18 = sub_2564E1280();
  MEMORY[0x270FA5388](v18 - 8);
  sub_2564E1270();
  sub_2564E12E0();
  swift_allocObject();
  uint64_t v78 = sub_2564E12D0();
  uint64_t v19 = sub_2564E1380();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  int64_t v72 = (char *)v68 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_269F5F3B8);
  MEMORY[0x270FA5388](v22 - 8);
  uint64_t v24 = (char *)v68 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v25 = (void *)sub_2564E1430();
  id v26 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_retrieveSymmetricKey_, v25);

  if (v26)
  {
    sub_2564E14D0();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v79, 0, sizeof(v79));
  }
  sub_2564D4154((uint64_t)v79, (uint64_t)v80);
  if (!v80[3])
  {
    sub_2564D40F8((uint64_t)v80, &qword_269F5F3C0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v24, 1, 1, v19);
    goto LABEL_60;
  }
  int v33 = swift_dynamicCast();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v24, v33 ^ 1u, 1, v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v24, 1, v19) == 1)
  {
LABEL_60:
    sub_2564D40F8((uint64_t)v24, &qword_269F5F3B8);
    if (qword_269F5F380 != -1) {
      swift_once();
    }
    uint64_t v34 = sub_2564E1320();
    __swift_project_value_buffer(v34, (uint64_t)qword_269F5F388);
    int v35 = sub_2564E1300();
    os_log_type_t v36 = sub_2564E1480();
    if (os_log_type_enabled(v35, v36))
    {
      int v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v37 = 0;
      _os_log_impl(&dword_25631F000, v35, v36, "Failed to retrieve symmetric key for file encryption", v37, 2u);
      MEMORY[0x25A2A70C0](v37, -1, -1);
    }

    swift_release();
    uint64_t v38 = v73;
    uint64_t v39 = *(void (**)(char *, uint64_t))(v74 + 8);
    v39(v76, v73);
    v39(v77, v38);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v72, v24, v19);
  sub_2564E1290();
  sub_2564E1260();
  uint64_t v40 = sub_2564E1230();
  if (v40)
  {
    uint64_t v41 = v40;
    uint64_t v42 = sub_2564E1230();
    if (v42)
    {
      uint64_t v70 = v41;
      int64_t v71 = v68;
      uint64_t v43 = v42;
      uint64_t v44 = sub_2564E12F0();
      v68[2] = v68;
      uint64_t v45 = *(void *)(v44 - 8);
      MEMORY[0x270FA5388](v44);
      double v47 = (char *)v68 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
      v80[0] = MEMORY[0x263F8EE78];
      uint64_t v69 = sub_2564D41BC(&qword_269F5F3E8, MEMORY[0x270FCBD38]);
      __swift_instantiateConcreteTypeFromMangledName(&qword_269F5F3F0);
      sub_2564D4204();
      sub_2564E14E0();
      uint64_t v69 = v43;
      uint64_t v48 = sub_2564E1220();
      uint64_t v49 = v47;
      uint64_t v50 = v48;
      (*(void (**)(char *, uint64_t))(v45 + 8))(v49, v44);
      if (v50)
      {
        sub_2564E1250();
        sub_2564E1240();
        sub_2564E1240();
        sub_2564E1240();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        (*(void (**)(char *, uint64_t))(v20 + 8))(v72, v19);
        uint64_t v65 = v73;
        unint64_t v66 = *(void (**)(char *, uint64_t))(v74 + 8);
        v66(v76, v73);
        v66(v77, v65);
        return 1;
      }
      if (qword_269F5F380 != -1) {
        swift_once();
      }
      uint64_t v59 = sub_2564E1320();
      __swift_project_value_buffer(v59, (uint64_t)qword_269F5F388);
      int v60 = sub_2564E1300();
      os_log_type_t v61 = sub_2564E1480();
      if (os_log_type_enabled(v60, v61))
      {
        uint64_t v62 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v62 = 0;
        _os_log_impl(&dword_25631F000, v60, v61, "Failed to create encryption stream", v62, 2u);
        MEMORY[0x25A2A70C0](v62, -1, -1);
      }

      swift_release();
      swift_release();
    }
    else
    {
      if (qword_269F5F380 != -1) {
        swift_once();
      }
      uint64_t v55 = sub_2564E1320();
      __swift_project_value_buffer(v55, (uint64_t)qword_269F5F388);
      uint64_t v56 = sub_2564E1300();
      os_log_type_t v57 = sub_2564E1480();
      if (os_log_type_enabled(v56, v57))
      {
        uint64_t v58 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v58 = 0;
        _os_log_impl(&dword_25631F000, v56, v57, "Failed to create output file stream for encryption", v58, 2u);
        MEMORY[0x25A2A70C0](v58, -1, -1);
      }

      swift_release();
    }
  }
  else
  {
    if (qword_269F5F380 != -1) {
      swift_once();
    }
    uint64_t v51 = sub_2564E1320();
    __swift_project_value_buffer(v51, (uint64_t)qword_269F5F388);
    double v52 = sub_2564E1300();
    os_log_type_t v53 = sub_2564E1480();
    if (os_log_type_enabled(v52, v53))
    {
      uint32_t v54 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint32_t v54 = 0;
      _os_log_impl(&dword_25631F000, v52, v53, "Failed to create input file stream for encryption", v54, 2u);
      MEMORY[0x25A2A70C0](v54, -1, -1);
    }
  }
  swift_release();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v72, v19);
  uint64_t v63 = v73;
  uint64_t v64 = *(void (**)(char *, uint64_t))(v74 + 8);
  v64(v76, v73);
  v64(v77, v63);
  return 0;
}

uint64_t _s19MicroLocationDaemon12ULEncryptionC11decryptFile_15destinationPath8keyLabel13keychainClassSbSS_S2SyXlXptFZ_0()
{
  if (MEMORY[0x263F8CDE8]) {
    BOOL v0 = MEMORY[0x263F8CDD0] == 0;
  }
  else {
    BOOL v0 = 1;
  }
  BOOL v3 = v0 || MEMORY[0x263F8CDF0] == 0 || MEMORY[0x263F8CDE0] == 0 || MEMORY[0x263F8CDD8] == 0;
  if (v3
    || (MEMORY[0x263F8CDB0] ? (BOOL v4 = MEMORY[0x263F8CDB8] == 0) : (BOOL v4 = 1),
        !v4 ? (BOOL v5 = MEMORY[0x263F8CDC8] == 0) : (BOOL v5 = 1),
        !v5 ? (BOOL v6 = MEMORY[0x263F8CDA8] == 0) : (BOOL v6 = 1),
        !v6 ? (BOOL v7 = MEMORY[0x263F8CDA0] == 0) : (BOOL v7 = 1),
        !v7 ? (BOOL v8 = MEMORY[0x263F8CD98] == 0) : (BOOL v8 = 1),
        !v8 ? (BOOL v9 = MEMORY[0x263F8CDC0] == 0) : (BOOL v9 = 1),
        v9))
  {
    if (qword_269F5F380 != -1) {
      swift_once();
    }
    uint64_t v25 = sub_2564E1320();
    __swift_project_value_buffer(v25, (uint64_t)qword_269F5F388);
    id v26 = sub_2564E1300();
    os_log_type_t v27 = sub_2564E1470();
    if (!os_log_type_enabled(v26, v27)) {
      goto LABEL_54;
    }
    uint64_t v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v28 = 0;
    os_log_type_t v29 = "decryptFile: AppleArchive Framework not loaded. method aborted.";
    goto LABEL_53;
  }
  if (MEMORY[0x263F04610]) {
    BOOL v10 = MEMORY[0x263F04628] == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10 || MEMORY[0x263F04638] == 0 || MEMORY[0x263F04630] == 0)
  {
    if (qword_269F5F380 != -1) {
      swift_once();
    }
    uint64_t v30 = sub_2564E1320();
    __swift_project_value_buffer(v30, (uint64_t)qword_269F5F388);
    id v26 = sub_2564E1300();
    os_log_type_t v27 = sub_2564E1470();
    if (!os_log_type_enabled(v26, v27)) {
      goto LABEL_54;
    }
    uint64_t v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v28 = 0;
    os_log_type_t v29 = "decryptFile: CryptoKit Framework not loaded. method aborted.";
LABEL_53:
    _os_log_impl(&dword_25631F000, v26, v27, v29, v28, 2u);
    MEMORY[0x25A2A70C0](v28, -1, -1);
LABEL_54:

    return 0;
  }
  uint64_t v13 = sub_2564E1330();
  double v84 = &v73;
  uint64_t v81 = *(void *)(v13 - 8);
  uint64_t v82 = v13;
  uint64_t v14 = *(void *)(v81 + 64);
  MEMORY[0x270FA5388](v13);
  swift_bridgeObjectRetain();
  double v85 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_2564E1340();
  uint64_t v83 = &v73;
  MEMORY[0x270FA5388](v15);
  uint64_t v16 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  sub_2564E1340();
  uint64_t v17 = sub_2564E1380();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v80 = (char *)&v73 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_269F5F3B8);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v22 = (char *)&v73 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = (void *)sub_2564E1430();
  id v24 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_retrieveSymmetricKey_, v23);

  if (v24)
  {
    sub_2564E14D0();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v86, 0, sizeof(v86));
  }
  sub_2564D4154((uint64_t)v86, (uint64_t)v87);
  uint64_t v31 = v85;
  if (!v87[3])
  {
    sub_2564D40F8((uint64_t)v87, &qword_269F5F3C0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v22, 1, 1, v17);
    goto LABEL_62;
  }
  int v32 = swift_dynamicCast();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v22, v32 ^ 1u, 1, v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v22, 1, v17) == 1)
  {
LABEL_62:
    sub_2564D40F8((uint64_t)v22, &qword_269F5F3B8);
    if (qword_269F5F380 != -1) {
      swift_once();
    }
    uint64_t v37 = sub_2564E1320();
    __swift_project_value_buffer(v37, (uint64_t)qword_269F5F388);
    uint64_t v38 = sub_2564E1300();
    os_log_type_t v39 = sub_2564E1480();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v40 = 0;
      _os_log_impl(&dword_25631F000, v38, v39, "Failed to retrieve symmetric key for file decryption", v40, 2u);
      MEMORY[0x25A2A70C0](v40, -1, -1);
    }

    uint64_t v41 = v82;
    uint64_t v42 = *(void (**)(char *, uint64_t))(v81 + 8);
    v42(v16, v82);
    v42(v31, v41);
    return 0;
  }
  uint64_t v78 = &v73;
  int v79 = v16;
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v80, v22, v17);
  sub_2564E1260();
  uint64_t v33 = sub_2564E1230();
  if (v33)
  {
    uint64_t v34 = v33;
    sub_2564E12E0();
    swift_allocObject();
    swift_retain();
    uint64_t v35 = sub_2564E12A0();
    if (v35)
    {
      uint64_t v36 = v35;
      sub_2564E1290();
      uint64_t v77 = v34;
      uint64_t v54 = sub_2564E12F0();
      uint64_t v75 = &v73;
      uint64_t v74 = *(void *)(v54 - 8);
      MEMORY[0x270FA5388](v54);
      uint64_t v56 = (char *)&v73 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
      v87[0] = MEMORY[0x263F8EE78];
      sub_2564D41BC(&qword_269F5F3E8, MEMORY[0x270FCBD38]);
      uint64_t v76 = v36;
      __swift_instantiateConcreteTypeFromMangledName(&qword_269F5F3F0);
      sub_2564D4204();
      sub_2564E14E0();
      uint64_t v57 = sub_2564E1210();
      (*(void (**)(char *, uint64_t))(v74 + 8))(v56, v54);
      if (v57)
      {
        if (sub_2564E1230())
        {
          sub_2564E1250();
          uint64_t v73 = v57;
          sub_2564E1240();
          sub_2564E1240();
          sub_2564E1240();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          (*(void (**)(char *, uint64_t))(v18 + 8))(v80, v17);
          uint64_t v70 = v82;
          int64_t v71 = *(void (**)(char *, uint64_t))(v81 + 8);
          v71(v79, v82);
          v71(v31, v70);
          return 1;
        }
        if (qword_269F5F380 != -1) {
          swift_once();
        }
        uint64_t v63 = sub_2564E1320();
        __swift_project_value_buffer(v63, (uint64_t)qword_269F5F388);
        uint64_t v64 = sub_2564E1300();
        os_log_type_t v65 = sub_2564E1480();
        BOOL v66 = os_log_type_enabled(v64, v65);
        double v47 = v79;
        if (v66)
        {
          uint64_t v67 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v67 = 0;
          _os_log_impl(&dword_25631F000, v64, v65, "Failed to create output file stream for decryption", v67, 2u);
          MEMORY[0x25A2A70C0](v67, -1, -1);
        }
        swift_release();

        swift_release();
      }
      else
      {
        if (qword_269F5F380 != -1) {
          swift_once();
        }
        uint64_t v58 = sub_2564E1320();
        __swift_project_value_buffer(v58, (uint64_t)qword_269F5F388);
        uint64_t v59 = sub_2564E1300();
        os_log_type_t v60 = sub_2564E1480();
        BOOL v61 = os_log_type_enabled(v59, v60);
        double v47 = v79;
        if (v61)
        {
          uint64_t v62 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v62 = 0;
          _os_log_impl(&dword_25631F000, v59, v60, "Failed to create decryption stream", v62, 2u);
          MEMORY[0x25A2A70C0](v62, -1, -1);
        }
        swift_release();
      }
      swift_release();
    }
    else
    {
      if (qword_269F5F380 != -1) {
        swift_once();
      }
      uint64_t v49 = sub_2564E1320();
      __swift_project_value_buffer(v49, (uint64_t)qword_269F5F388);
      uint64_t v50 = sub_2564E1300();
      os_log_type_t v51 = sub_2564E1480();
      BOOL v52 = os_log_type_enabled(v50, v51);
      double v47 = v79;
      if (v52)
      {
        os_log_type_t v53 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v53 = 0;
        _os_log_impl(&dword_25631F000, v50, v51, "Failed to create archive context for decryption", v53, 2u);
        MEMORY[0x25A2A70C0](v53, -1, -1);
      }
      swift_release();
    }
  }
  else
  {
    if (qword_269F5F380 != -1) {
      swift_once();
    }
    uint64_t v43 = sub_2564E1320();
    __swift_project_value_buffer(v43, (uint64_t)qword_269F5F388);
    uint64_t v44 = sub_2564E1300();
    os_log_type_t v45 = sub_2564E1480();
    BOOL v46 = os_log_type_enabled(v44, v45);
    double v47 = v79;
    if (v46)
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v48 = 0;
      _os_log_impl(&dword_25631F000, v44, v45, "Failed to open source archive file for decryption", v48, 2u);
      MEMORY[0x25A2A70C0](v48, -1, -1);
    }
  }
  (*(void (**)(char *, uint64_t))(v18 + 8))(v80, v17);
  float v68 = *(void (**)(char *, uint64_t))(v81 + 8);
  uint64_t v69 = v82;
  v68(v47, v82);
  v68(v31, v69);
  return 0;
}

uint64_t _s19MicroLocationDaemon12ULEncryptionC11encryptData_8keyLabel10Foundation0F0VSgAH_SStFZ_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (MEMORY[0x263F046F8]) {
    BOOL v4 = MEMORY[0x263F04708] == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4
    || MEMORY[0x263F04700] == 0
    || MEMORY[0x263F04610] == 0
    || MEMORY[0x263F04628] == 0
    || MEMORY[0x263F04638] == 0
    || MEMORY[0x263F04630] == 0)
  {
    if (qword_269F5F380 != -1) {
      swift_once();
    }
    uint64_t v10 = sub_2564E1320();
    __swift_project_value_buffer(v10, (uint64_t)qword_269F5F388);
    uint64_t v11 = sub_2564E1300();
    os_log_type_t v12 = sub_2564E1470();
    if (!os_log_type_enabled(v11, v12)) {
      goto LABEL_34;
    }
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    uint64_t v14 = "encryptData: CryptoKit Framework not loaded. method aborted.";
    goto LABEL_33;
  }
  uint64_t v19 = sub_2564E1380();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v40 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_269F5F3B8);
  MEMORY[0x270FA5388](v23 - 8);
  uint64_t v25 = (char *)&v40 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ULKeychain();
  static ULKeychain.retrieveSymmetricKey(_:)(a3, a4, (uint64_t)v46);
  if (!v46[3])
  {
    sub_2564D40F8((uint64_t)v46, &qword_269F5F3C0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v25, 1, 1, v19);
    goto LABEL_29;
  }
  int v26 = swift_dynamicCast();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v25, v26 ^ 1u, 1, v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v25, 1, v19) == 1)
  {
LABEL_29:
    sub_2564D40F8((uint64_t)v25, &qword_269F5F3B8);
    if (qword_269F5F380 != -1) {
      swift_once();
    }
    uint64_t v37 = sub_2564E1320();
    __swift_project_value_buffer(v37, (uint64_t)qword_269F5F388);
    uint64_t v11 = sub_2564E1300();
    os_log_type_t v12 = sub_2564E1480();
    if (!os_log_type_enabled(v11, v12)) {
      goto LABEL_34;
    }
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    uint64_t v14 = "Failed to retrieve symmetric key for data encryption";
LABEL_33:
    _os_log_impl(&dword_25631F000, v11, v12, v14, v13, 2u);
    MEMORY[0x25A2A70C0](v13, -1, -1);
LABEL_34:

    return 0;
  }
  os_log_type_t v45 = &v40;
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v22, v25, v19);
  uint64_t v27 = sub_2564E13E0();
  uint64_t v44 = &v40;
  uint64_t v28 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  uint64_t v30 = (char *)&v40 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2564E13D0();
  uint64_t v42 = sub_2564E1410();
  uint64_t v43 = &v40;
  uint64_t v41 = *(void *)(v42 - 8);
  MEMORY[0x270FA5388](v42);
  int v32 = (char *)&v40 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46[0] = a1;
  v46[1] = a2;
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_269F5F3D8);
  double v34 = MEMORY[0x270FA5388](v33 - 8);
  uint64_t v36 = (char *)&v40 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t, double))(v28 + 16))(v36, v30, v27, v34);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v36, 0, 1, v27);
  sub_2564D40A4();
  sub_2564E13C0();
  sub_2564D40F8((uint64_t)v36, &qword_269F5F3D8);
  uint64_t v39 = sub_2564E13F0();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v32, v42);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v27);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  return v39;
}

uint64_t sub_2564D3370(unsigned char *__src, unsigned char *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t sub_2564D3434(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  sub_2564E11C0();
  swift_allocObject();
  uint64_t result = sub_2564E1180();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_2564E11E0();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = v2;
  }
  return result;
}

uint64_t sub_2564D34B0(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  sub_2564E11C0();
  swift_allocObject();
  uint64_t result = sub_2564E1180();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0) {
    return v2 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t _s19MicroLocationDaemon12ULEncryptionC11decryptData_8keyLabel10Foundation0F0VSgAH_SStFZ_0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (MEMORY[0x263F046F8]) {
    BOOL v4 = MEMORY[0x263F04708] == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4
    || MEMORY[0x263F04700] == 0
    || MEMORY[0x263F04610] == 0
    || MEMORY[0x263F04628] == 0
    || MEMORY[0x263F04638] == 0
    || MEMORY[0x263F04630] == 0)
  {
    if (qword_269F5F380 != -1) {
      swift_once();
    }
    uint64_t v10 = sub_2564E1320();
    __swift_project_value_buffer(v10, (uint64_t)qword_269F5F388);
    uint64_t v11 = sub_2564E1300();
    os_log_type_t v12 = sub_2564E1470();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl(&dword_25631F000, v11, v12, "decryptData: CryptoKit Framework not loaded. method aborted.", v13, 2u);
      MEMORY[0x25A2A70C0](v13, -1, -1);
    }

    return 0;
  }
  else
  {
    uint64_t v19 = sub_2564E1410();
    os_log_type_t v45 = &v40;
    uint64_t v20 = *(void *)(v19 - 8);
    uint64_t v41 = v19;
    uint64_t v42 = v20;
    uint64_t v21 = *(void *)(v20 + 64);
    MEMORY[0x270FA5388](v19);
    uint64_t v22 = (char *)&v40 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v23 = sub_2564E1380();
    uint64_t v44 = &v40;
    uint64_t v24 = *(void *)(v23 - 8);
    MEMORY[0x270FA5388](v23);
    uint64_t v43 = (char *)&v40 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_269F5F3B8);
    MEMORY[0x270FA5388](v26 - 8);
    uint64_t v28 = (char *)&v40 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
    type metadata accessor for ULKeychain();
    static ULKeychain.retrieveSymmetricKey(_:)(a3, a4, (uint64_t)v46);
    if (v46[3])
    {
      int v29 = swift_dynamicCast();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v28, v29 ^ 1u, 1, v23);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v28, 1, v23) != 1)
      {
        uint64_t v30 = v43;
        uint64_t v31 = (*(uint64_t (**)(char *, char *, uint64_t))(v24 + 32))(v43, v28, v23);
        MEMORY[0x270FA5388](v31);
        int v32 = (char *)&v40 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
        sub_2564D3F54(a1, a2);
        sub_2564D033C(a1, a2);
        uint64_t v38 = v41;
        uint64_t v37 = v42;
        (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v22, v32, v41);
        uint64_t v14 = sub_2564E13B0();
        (*(void (**)(char *, uint64_t))(v24 + 8))(v30, v23);
        (*(void (**)(char *, uint64_t))(v37 + 8))(v22, v38);
        return v14;
      }
    }
    else
    {
      sub_2564D40F8((uint64_t)v46, &qword_269F5F3C0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56))(v28, 1, 1, v23);
    }
    sub_2564D40F8((uint64_t)v28, &qword_269F5F3B8);
    if (qword_269F5F380 != -1) {
      swift_once();
    }
    uint64_t v33 = sub_2564E1320();
    __swift_project_value_buffer(v33, (uint64_t)qword_269F5F388);
    double v34 = sub_2564E1300();
    os_log_type_t v35 = sub_2564E1480();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v36 = 0;
      _os_log_impl(&dword_25631F000, v34, v35, "Failed to retrieve symmetric key for data decryption", v36, 2u);
      MEMORY[0x25A2A70C0](v36, -1, -1);
    }

    return 0;
  }
}

uint64_t type metadata accessor for ULEncryption()
{
  return self;
}

void type metadata accessor for CFString()
{
  if (!qword_269F5F3B0)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_269F5F3B0);
    }
  }
}

uint64_t sub_2564D3E6C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

uint64_t sub_2564D3EC4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_2564D3E6C(a1, a2);
  }
  return a1;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_2564D3F54(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }
  return swift_retain();
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

unint64_t sub_2564D40A4()
{
  unint64_t result = qword_269F5F3E0;
  if (!qword_269F5F3E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F5F3E0);
  }
  return result;
}

uint64_t sub_2564D40F8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_2564D4154(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_269F5F3C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_2564D41BC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_2564D4204()
{
  unint64_t result = qword_269F5F3F8;
  if (!qword_269F5F3F8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_269F5F3F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F5F3F8);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

void static ULKeychain.retrieveSymmetricKey(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (MEMORY[0x263F04610]) {
    BOOL v4 = MEMORY[0x263F04628] == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4 || MEMORY[0x263F04638] == 0 || MEMORY[0x263F04630] == 0)
  {
    if (qword_269F5F3A0 != -1) {
      swift_once();
    }
    uint64_t v14 = sub_2564E1320();
    __swift_project_value_buffer(v14, (uint64_t)qword_269F5F400);
    uint64_t v15 = sub_2564E1300();
    os_log_type_t v16 = sub_2564E1470();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl(&dword_25631F000, v15, v16, "retrieveSymmetricKey: CryptoKit Framework not loaded. method aborted.", v17, 2u);
      MEMORY[0x25A2A70C0](v17, -1, -1);
    }

    goto LABEL_18;
  }
  OSStatus v20 = 0;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_269F5F3B8);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ULKeychain.retrieveSymmetricKeyWithStatus(label:status:)(a1, a2, &v20, (uint64_t)v11);
  uint64_t v12 = sub_2564E1380();
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_2564D5FBC((uint64_t)v11);
LABEL_18:
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return;
  }
  *(void *)(a3 + 24) = v12;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)a3);
  (*(void (**)(uint64_t *, char *, uint64_t))(v13 + 32))(boxed_opaque_existential_0, v11, v12);
}

uint64_t sub_2564D44D8()
{
  uint64_t v0 = sub_2564E1320();
  __swift_allocate_value_buffer(v0, qword_269F5F400);
  __swift_project_value_buffer(v0, (uint64_t)qword_269F5F400);
  return sub_2564E1310();
}

void static ULKeychain.getSymmetricKeyOrCreateNew(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  if (MEMORY[0x263F04610]) {
    BOOL v4 = MEMORY[0x263F04628] == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4 || MEMORY[0x263F04638] == 0 || MEMORY[0x263F04630] == 0)
  {
    if (qword_269F5F3A0 != -1) {
      swift_once();
    }
    uint64_t v21 = sub_2564E1320();
    __swift_project_value_buffer(v21, (uint64_t)qword_269F5F400);
    uint64_t v22 = sub_2564E1300();
    os_log_type_t v23 = sub_2564E1470();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl(&dword_25631F000, v22, v23, "getSymmetricKeyOrCreateNew: CryptoKit Framework not loaded. method aborted.", v24, 2u);
      MEMORY[0x25A2A70C0](v24, -1, -1);
    }

    *a3 = 0u;
    a3[1] = 0u;
    return;
  }
  OSStatus v61 = 0;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_269F5F3B8);
  uint64_t v57 = &v49;
  uint64_t v10 = *(void *)(*(void *)(v9 - 8) + 64);
  MEMORY[0x270FA5388](v9 - 8);
  unint64_t v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v12 = (char *)&v49 - v11;
  uint64_t v55 = a1;
  uint64_t v56 = a2;
  uint64_t v13 = static ULKeychain.retrieveSymmetricKeyWithStatus(label:status:)(a1, a2, &v61, (uint64_t)&v49 - v11);
  uint64_t v58 = a3;
  MEMORY[0x270FA5388](v13);
  sub_2564D7EF8((uint64_t)&v49 - v11, (uint64_t)&v49 - v11, &qword_269F5F3B8);
  uint64_t v14 = sub_2564E1380();
  uint64_t v15 = *(void *)(v14 - 8);
  os_log_type_t v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  unsigned int v17 = v16((char *)&v49 - v11, 1, v14);
  uint64_t v18 = sub_2564D5FBC((uint64_t)&v49 - v11);
  uint64_t v19 = v58;
  if (v17 == 1 && v61 == -25300)
  {
    uint64_t v54 = (char *)&v49;
    MEMORY[0x270FA5388](v18);
    uint64_t v25 = sub_2564E13A0();
    MEMORY[0x270FA5388](v25 - 8);
    sub_2564E1390();
    sub_2564E1370();
    sub_2564D5FBC((uint64_t)&v49 - v11);
    uint64_t v53 = v15;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))((char *)&v49 - v11, 0, 1, v14);
    uint64_t v26 = sub_2564D6080((uint64_t)&v49 - v11, (uint64_t)&v49 - v11);
    MEMORY[0x270FA5388](v26);
    sub_2564D7EF8((uint64_t)&v49 - v11, (uint64_t)&v49 - v11, &qword_269F5F3B8);
    unsigned int v27 = v16((char *)&v49 - v11, 1, v14);
    uint64_t v28 = sub_2564D5FBC((uint64_t)&v49 - v11);
    if (v27 == 1)
    {
LABEL_24:
      if (qword_269F5F3A0 != -1) {
        swift_once();
      }
      uint64_t v29 = sub_2564E1320();
      __swift_project_value_buffer(v29, (uint64_t)qword_269F5F400);
      uint64_t v30 = sub_2564E1300();
      os_log_type_t v31 = sub_2564E1480();
      BOOL v32 = os_log_type_enabled(v30, v31);
      uint64_t v33 = v58;
      if (v32)
      {
        double v34 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)double v34 = 0;
        _os_log_impl(&dword_25631F000, v30, v31, "Failed to generate a symmetric key", v34, 2u);
        MEMORY[0x25A2A70C0](v34, -1, -1);
      }

      sub_2564D5FBC((uint64_t)v12);
      _OWORD *v33 = 0u;
      v33[1] = 0u;
      return;
    }
    uint64_t v36 = v16;
    uint64_t v37 = v10;
    unint64_t v52 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
    MEMORY[0x270FA5388](v28);
    uint64_t v54 = (char *)&v49 - v11;
    sub_2564D7EF8((uint64_t)&v49 - v11, (uint64_t)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_269F5F3B8);
    if (v36((char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v14) != 1)
    {
      uint64_t v38 = v14;
      sub_2564D60E8();
      sub_2564E11D0();
      uint64_t v40 = v59;
      unint64_t v39 = v60;
      uint64_t v41 = v53 + 8;
      uint64_t v42 = *(void (**)(char *, uint64_t))(v53 + 8);
      v42((char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v38);
      switch(v39 >> 62)
      {
        case 1uLL:
          uint64_t v50 = (uint64_t (*)(char *, uint64_t))v42;
          uint64_t v51 = v41;
          uint64_t v43 = sub_2564D3E6C(v40, v39);
          LODWORD(v44) = HIDWORD(v40) - v40;
          if (!__OFSUB__(HIDWORD(v40), v40))
          {
            uint64_t v14 = v38;
            uint64_t v44 = (int)v44;
LABEL_35:
            uint64_t v12 = v54;
            if (!v44) {
              goto LABEL_24;
            }
LABEL_39:
            MEMORY[0x270FA5388](v43);
            double v47 = (char *)&v49 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
            sub_2564D7EF8((uint64_t)v12, (uint64_t)v47, &qword_269F5F3B8);
            os_log_type_t v16 = v36;
            if (v36(v47, 1, v14) != 1)
            {
              BOOL v48 = _s19MicroLocationDaemon10ULKeychainC17storeSymmetricKey09symmetricG05labelSb9CryptoKit0fG0V_SStFZ_0((uint64_t)v47, v55, v56);
              uint64_t v18 = v50(v47, v14);
              uint64_t v19 = v58;
              unint64_t v11 = v52;
              uint64_t v15 = v53;
              uint64_t v12 = v54;
              if (!v48)
              {
                sub_2564D5FBC((uint64_t)v54);
                goto LABEL_17;
              }
              goto LABEL_15;
            }
LABEL_46:
            __break(1u);
            JUMPOUT(0x2564D4CD0);
          }
          __break(1u);
LABEL_44:
          __break(1u);
          break;
        case 2uLL:
          uint64_t v50 = (uint64_t (*)(char *, uint64_t))v42;
          uint64_t v51 = v41;
          uint64_t v49 = (uint64_t)&v49;
          uint64_t v46 = *(void *)(v40 + 16);
          uint64_t v45 = *(void *)(v40 + 24);
          uint64_t v43 = sub_2564D3E6C(v40, v39);
          if (__OFSUB__(v45, v46)) {
            goto LABEL_44;
          }
          uint64_t v14 = v38;
          uint64_t v12 = v54;
          if (v45 != v46) {
            goto LABEL_39;
          }
          goto LABEL_24;
        case 3uLL:
          sub_2564D3E6C(v40, v39);
          uint64_t v12 = v54;
          goto LABEL_24;
        default:
          uint64_t v50 = (uint64_t (*)(char *, uint64_t))v42;
          uint64_t v51 = v41;
          uint64_t v14 = v38;
          uint64_t v43 = sub_2564D3E6C(v40, v39);
          uint64_t v44 = BYTE6(v39);
          goto LABEL_35;
      }
    }
    __break(1u);
    goto LABEL_46;
  }
LABEL_15:
  MEMORY[0x270FA5388](v18);
  sub_2564D7EF8((uint64_t)v12, (uint64_t)&v49 - v11, &qword_269F5F3B8);
  if (v16((char *)&v49 - v11, 1, v14) == 1)
  {
    sub_2564D5FBC((uint64_t)v12);
    sub_2564D5FBC((uint64_t)&v49 - v11);
LABEL_17:
    _OWORD *v19 = 0u;
    v19[1] = 0u;
    return;
  }
  *((void *)v19 + 3) = v14;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)v19);
  (*(void (**)(uint64_t *, char *, uint64_t))(v15 + 32))(boxed_opaque_existential_0, (char *)&v49 - v11, v14);
  sub_2564D5FBC((uint64_t)v12);
}

uint64_t static ULKeychain.retrieveSymmetricKeyWithStatus(label:status:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, OSStatus *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v61 = a1;
  uint64_t v62 = a3;
  uint64_t v59 = (char *)a4;
  uint64_t v60 = a2;
  v65[35] = *(CFTypeRef *)MEMORY[0x263EF8340];
  __swift_instantiateConcreteTypeFromMangledName(&qword_269F5F428);
  uint64_t inited = swift_initStackObject();
  uint64_t v6 = (void **)MEMORY[0x263F171B8];
  *(_OWORD *)(inited + 16) = xmmword_25651DB90;
  BOOL v7 = *v6;
  *(void *)(inited + 32) = *v6;
  BOOL v8 = (void *)*MEMORY[0x263F171E0];
  type metadata accessor for CFString();
  *(void *)(inited + 40) = v8;
  uint64_t v9 = (void *)*MEMORY[0x263F17580];
  *(void *)(inited + 64) = v10;
  *(void *)(inited + 72) = v9;
  uint64_t v11 = MEMORY[0x263F8D4F8];
  uint64_t v12 = (void **)MEMORY[0x263F16E90];
  *(unsigned char *)(inited + 80) = 1;
  uint64_t v13 = *v12;
  *(void *)(inited + 104) = v11;
  *(void *)(inited + std::__optional_destruct_base<CachedPrediction,false>::reset[abi:ne180100]((uint64_t)this + 112) = v13;
  uint64_t v14 = (void *)*MEMORY[0x263F16EC8];
  *(void *)(inited + 120) = *MEMORY[0x263F16EC8];
  uint64_t v15 = (void *)*MEMORY[0x263F170B0];
  *(void *)(inited + 144) = v10;
  *(void *)(inited + 152) = v15;
  *(unsigned char *)(inited + 160) = 1;
  os_log_type_t v16 = (void *)*MEMORY[0x263F16EE0];
  *(void *)(inited + 184) = v11;
  *(void *)(inited + 192) = v16;
  uint64_t v17 = MEMORY[0x263F8D310];
  uint64_t v18 = (void **)MEMORY[0x263F17520];
  *(void *)(inited + 200) = v61;
  *(void *)(inited + 208) = a2;
  uint64_t v19 = *v18;
  *(void *)(inited + 224) = v17;
  *(void *)(inited + 232) = v19;
  *(void *)(inited + 264) = v11;
  *(unsigned char *)(inited + 240) = 1;
  id v20 = v7;
  id v21 = v8;
  id v22 = v9;
  id v23 = v13;
  id v24 = v14;
  id v25 = v15;
  id v26 = v16;
  swift_bridgeObjectRetain();
  id v27 = v19;
  sub_2564D5380(inited);
  v65[0] = 0;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_269F5F3B8);
  uint64_t v29 = *(void *)(*(void *)(v28 - 8) + 64);
  MEMORY[0x270FA5388](v28 - 8);
  uint64_t v30 = (char *)&v58 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_2564E1380();
  BOOL v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56);
  v32(v30, 1, 1, v31);
  sub_2564D7A90();
  sub_2564D7AD0();
  CFDictionaryRef v33 = (const __CFDictionary *)sub_2564E1420();
  swift_bridgeObjectRelease();
  OSStatus v34 = SecItemCopyMatching(v33, v65);

  CFTypeRef v35 = v65[0];
  *uint64_t v62 = v34;
  if (v34 == -25300)
  {
    if (qword_269F5F3A0 != -1) {
      swift_once();
    }
    uint64_t v38 = sub_2564E1320();
    __swift_project_value_buffer(v38, (uint64_t)qword_269F5F400);
    unint64_t v39 = sub_2564E1300();
    os_log_type_t v40 = sub_2564E1480();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v41 = 0;
      _os_log_impl(&dword_25631F000, v39, v40, "key not found in keychain", v41, 2u);
      MEMORY[0x25A2A70C0](v41, -1, -1);
    }

    goto LABEL_24;
  }
  if (v34)
  {
    if (qword_269F5F3A0 != -1) {
      swift_once();
    }
    uint64_t v42 = sub_2564E1320();
    __swift_project_value_buffer(v42, (uint64_t)qword_269F5F400);
    uint64_t v43 = sub_2564E1300();
    os_log_type_t v44 = sub_2564E1480();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = swift_slowAlloc();
      uint64_t v46 = swift_slowAlloc();
      *(void *)&long long v64 = v46;
      *(_DWORD *)uint64_t v45 = 67109378;
      LODWORD(v63) = v34;
      sub_2564E14B0();
      *(_WORD *)(v45 + 8) = 2080;
      CFStringRef v47 = SecCopyErrorMessageString(v34, 0);
      if (v47)
      {
        BOOL v48 = (__CFString *)v47;
        uint64_t v49 = sub_2564E1440();
        unint64_t v51 = v50;
      }
      else
      {
        LODWORD(v63) = v34;
        uint64_t v49 = sub_2564E1570();
        unint64_t v51 = v56;
      }
      uint64_t v63 = sub_2564D6134(v49, v51, (uint64_t *)&v64);
      sub_2564E14B0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_25631F000, v43, v44, "Failed to retrieve key from keychain, error %d, %s", (uint8_t *)v45, 0x12u);
      swift_arrayDestroy();
      MEMORY[0x25A2A70C0](v46, -1, -1);
      MEMORY[0x25A2A70C0](v45, -1, -1);
    }

    goto LABEL_24;
  }
  if (v35)
  {
    uint64_t v63 = (uint64_t)v35;
    swift_unknownObjectRetain();
    uint64_t v36 = swift_dynamicCast();
    if (v36)
    {
      *(double *)&long long v37 = MEMORY[0x270FA5388](v36);
      long long v64 = v37;
      sub_2564E1360();
      sub_2564D5FBC((uint64_t)&v58 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
      v32((char *)&v58 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0), 0, 1, v31);
      sub_2564D6080((uint64_t)&v58 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v58 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
LABEL_24:
      sub_2564D6080((uint64_t)v30, (uint64_t)v59);
      return swift_unknownObjectRelease();
    }
  }
  if (qword_269F5F3A0 != -1) {
    swift_once();
  }
  uint64_t v52 = sub_2564E1320();
  __swift_project_value_buffer(v52, (uint64_t)qword_269F5F400);
  uint64_t v53 = sub_2564E1300();
  os_log_type_t v54 = sub_2564E1480();
  if (os_log_type_enabled(v53, v54))
  {
    uint64_t v55 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v55 = 0;
    _os_log_impl(&dword_25631F000, v53, v54, "Failed to get key from keychain. Got invalid data", v55, 2u);
    MEMORY[0x25A2A70C0](v55, -1, -1);
  }

  sub_2564D5FBC((uint64_t)v30);
  v32(v59, 1, 1, v31);
  return swift_unknownObjectRelease();
}

unint64_t sub_2564D5380(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_269F5F450);
  uint64_t v2 = sub_2564E1550();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_2564D7EF8(v6, (uint64_t)&v13, &qword_269F5F458);
    uint64_t v7 = v13;
    unint64_t result = sub_2564D678C(v13);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v7;
    unint64_t result = (unint64_t)sub_2564D7F5C(&v14, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    void v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

id sub_2564D54C8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *__return_ptr, uint64_t, uint64_t))
{
  uint64_t v5 = sub_2564E1440();
  uint64_t v7 = v6;
  swift_getObjCClassMetadata();
  a4(v16, v5, v7);
  swift_bridgeObjectRelease();
  uint64_t v8 = v17;
  if (v17)
  {
    char v9 = __swift_project_boxed_opaque_existential_1(v16, v17);
    uint64_t v10 = *(void *)(v8 - 8);
    double v11 = MEMORY[0x270FA5388](v9);
    uint64_t v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v10 + 16))(v13, v11);
    long long v14 = (void *)sub_2564E1580();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  }
  else
  {
    long long v14 = 0;
  }
  return v14;
}

id ULKeychain.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id ULKeychain.init()()
{
  return sub_2564D5ED4(type metadata accessor for ULKeychain);
}

id ULKeychain.__deallocating_deinit()
{
  return sub_2564D5F80(type metadata accessor for ULKeychain);
}

void sub_2564D56F0(UInt8 *bytes@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (bytes) {
    CFIndex v4 = a2 - (void)bytes;
  }
  else {
    CFIndex v4 = 0;
  }
  CFDataRef v5 = CFDataCreateWithBytesNoCopy(0, bytes, v4, (CFAllocatorRef)*MEMORY[0x263EFFB28]);
  if (v5)
  {
    CFDataRef v6 = v5;
    uint64_t v7 = sub_2564E1200();
    unint64_t v9 = v8;
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v9 = 0xC000000000000000;
  }
  *a3 = v7;
  a3[1] = v9;
}

void sub_2564D5778()
{
  off_269F5F418 = (_UNKNOWN *)MEMORY[0x263F8EE80];
}

uint64_t static ULKeychainMock.retrieveSymmetricKey(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v4 = result == 0x79656B5F6F6ELL && a2 == 0xE600000000000000;
  if (v4 || (v6 = result, unint64_t result = sub_2564E1590(), (result & 1) != 0))
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return result;
  }
  uint64_t v7 = sub_2564E1380();
  v24[2] = v24;
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_269F5F3A8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  double v11 = off_269F5F418;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_269F5F3B8);
  v24[1] = v24;
  uint64_t v13 = *(void *)(*(void *)(v12 - 8) + 64);
  double v14 = MEMORY[0x270FA5388](v12 - 8);
  if (!v11[2])
  {
    uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v8 + 56);
    v17((char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v7, v14);
LABEL_15:
    sub_2564D5FBC((uint64_t)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
    swift_endAccess();
    uint64_t v18 = sub_2564E13A0();
    MEMORY[0x270FA5388](v18 - 8);
    sub_2564E1390();
    *(void *)(a3 + 24) = v7;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)a3);
    uint64_t v20 = sub_2564E1370();
    double v21 = MEMORY[0x270FA5388](v20);
    (*(void (**)(char *, uint64_t *, uint64_t, double))(v8 + 16))((char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), boxed_opaque_existential_0, v7, v21);
    ((void (*)(char *, void, uint64_t, uint64_t))v17)((char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), 0, 1, v7);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_2564D5BAC((uint64_t)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v6, a2);
    return swift_endAccess();
  }
  swift_bridgeObjectRetain();
  unint64_t v15 = sub_2564D67D0(v6, a2);
  if (v16)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))((char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v11[7] + *(void *)(v8 + 72) * v15, v7);
    uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v8 + 56);
    ((void (*)(char *, void, uint64_t, uint64_t))v17)((char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), 0, 1, v7);
  }
  else
  {
    uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v8 + 56);
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v17)((char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v7);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))((char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v7) == 1)goto LABEL_15; {
  id v22 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  }
  v22(v10, (char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  swift_endAccess();
  *(void *)(a3 + 24) = v7;
  id v23 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)a3);
  return ((uint64_t (*)(uint64_t *, char *, uint64_t))v22)(v23, v10, v7);
}

uint64_t sub_2564D5BAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v4 = v3;
  uint64_t v8 = sub_2564E1380();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1, 1, v8);
  if (v10 == 1)
  {
    sub_2564D5FBC(a1);
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_269F5F3B8);
    MEMORY[0x270FA5388](v11 - 8);
    uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2564D6A38(a2, a3, (uint64_t)v13);
    swift_bridgeObjectRelease();
    return sub_2564D5FBC((uint64_t)v13);
  }
  else
  {
    double v15 = MEMORY[0x270FA5388](v10);
    uint64_t v17 = (char *)&v19 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 32))(v17, a1, v8, v15);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v20 = *v4;
    uint64_t *v4 = 0x8000000000000000;
    sub_2564D71E8((uint64_t)v17, a2, a3, isUniquelyReferenced_nonNull_native);
    uint64_t *v4 = v20;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

id ULKeychainMock.init()()
{
  return sub_2564D5ED4(type metadata accessor for ULKeychainMock);
}

id sub_2564D5ED4(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_init);
}

id sub_2564D5F24(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  v4.receiver = a1;
  v4.super_class = (Class)a3();
  return objc_msgSendSuper2(&v4, sel_init);
}

id ULKeychainMock.__deallocating_deinit()
{
  return sub_2564D5F80(type metadata accessor for ULKeychainMock);
}

id sub_2564D5F80(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t sub_2564D5FBC(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_269F5F3B8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *__swift_allocate_boxed_opaque_existential_0(uint64_t *a1)
{
  id v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_2564D6080(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_269F5F3B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_2564D60E8()
{
  unint64_t result = qword_269F5F420;
  if (!qword_269F5F420)
  {
    sub_2564E1380();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F5F420);
  }
  return result;
}

uint64_t sub_2564D6134(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_2564D6208(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_2564D7E98((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x263F8DBE0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_2564D7E98((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t sub_2564D6208(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_2564E14C0();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_2564D63C4(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = sub_2564E1510();
  if (!v8)
  {
    sub_2564E1520();
    __break(1u);
LABEL_17:
    uint64_t result = sub_2564E1560();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_2564D63C4(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_2564D645C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_2564D663C(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_2564D663C(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_2564D645C(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_2564D65D4(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = sub_2564E1500();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      sub_2564E1520();
      __break(1u);
LABEL_10:
      uint64_t v2 = sub_2564E1460();
      if (!v2) {
        return MEMORY[0x263F8EE78];
      }
    }
    sub_2564E1560();
    __break(1u);
LABEL_14:
    uint64_t result = sub_2564E1520();
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

void *sub_2564D65D4(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_269F5F448);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  _DWORD v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_2564D663C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269F5F448);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_2564E1560();
  __break(1u);
  return result;
}

unint64_t sub_2564D678C(uint64_t a1)
{
  uint64_t v2 = sub_2564E1490();
  return sub_2564D6848(a1, v2);
}

unint64_t sub_2564D67D0(uint64_t a1, uint64_t a2)
{
  sub_2564E15B0();
  sub_2564E1450();
  uint64_t v4 = sub_2564E15C0();
  return sub_2564D6954(a1, a2, v4);
}

unint64_t sub_2564D6848(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    sub_2564D7A90();
    id v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = sub_2564E14A0();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        id v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = sub_2564E14A0();

        if (v10) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_2564D6954(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    char v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_2564E1590() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_2564E1590() & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_2564D6A38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_2564D67D0(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v21 = *v4;
    uint64_t *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_2564D7418();
      uint64_t v11 = v21;
    }
    swift_bridgeObjectRelease();
    uint64_t v12 = *(void *)(v11 + 56);
    uint64_t v13 = sub_2564E1380();
    uint64_t v20 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v20 + 32))(a3, v12 + *(void *)(v20 + 72) * v8, v13);
    sub_2564D6FD8(v8, v11);
    uint64_t *v4 = v11;
    swift_bridgeObjectRelease();
    BOOL v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a3;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = sub_2564E1380();
    BOOL v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a3;
    uint64_t v16 = 1;
  }
  return v14(v15, v16, 1, v17);
}

uint64_t sub_2564D6BE0(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269F5F440);
  int v48 = a2;
  uint64_t v6 = sub_2564E1540();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    os_log_type_t v44 = v2;
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v9 = *(void *)(v5 + 64);
    uint64_t v46 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v10 = ~(-1 << v8);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & v9;
    int64_t v45 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v12 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    for (i = v5; ; uint64_t v5 = i)
    {
      if (v11)
      {
        unint64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        int64_t v49 = v14;
        unint64_t v18 = v17 | (v14 << 6);
      }
      else
      {
        int64_t v19 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v19 >= v45) {
          goto LABEL_34;
        }
        unint64_t v20 = v46[v19];
        int64_t v21 = v14 + 1;
        if (!v20)
        {
          int64_t v21 = v14 + 2;
          if (v14 + 2 >= v45) {
            goto LABEL_34;
          }
          unint64_t v20 = v46[v21];
          if (!v20)
          {
            uint64_t v22 = v14 + 3;
            if (v14 + 3 >= v45)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v44;
              if (v48)
              {
                uint64_t v43 = 1 << *(unsigned char *)(v5 + 32);
                if (v43 >= 64) {
                  bzero(v46, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v46 = -1 << v43;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v20 = v46[v22];
            if (!v20)
            {
              while (1)
              {
                int64_t v21 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_41;
                }
                if (v21 >= v45) {
                  goto LABEL_34;
                }
                unint64_t v20 = v46[v21];
                ++v22;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v21 = v14 + 3;
          }
        }
LABEL_21:
        unint64_t v11 = (v20 - 1) & v20;
        int64_t v49 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = sub_2564E1380();
      uint64_t v24 = *(void *)(v23 - 8);
      double v26 = MEMORY[0x270FA5388](v23);
      id v27 = (char *)&v44 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v28 = *(void *)(v5 + 56);
      uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v18);
      uint64_t v31 = *v29;
      uint64_t v30 = v29[1];
      uint64_t v33 = *(void *)(v32 + 72);
      uint64_t v34 = v28 + v33 * v18;
      uint64_t v50 = v35;
      if (v48)
      {
        (*(void (**)(char *, uint64_t, uint64_t, double))(v24 + 32))((char *)&v44 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0), v34, v23, v26);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, double))(v24 + 16))((char *)&v44 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0), v34, v23, v26);
        swift_bridgeObjectRetain();
      }
      sub_2564E15B0();
      sub_2564E1450();
      uint64_t result = sub_2564E15C0();
      uint64_t v36 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v37 = result & ~v36;
      unint64_t v38 = v37 >> 6;
      if (((-1 << v37) & ~*(void *)(v12 + 8 * (v37 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v37) & ~*(void *)(v12 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v39 = 0;
        unint64_t v40 = (unint64_t)(63 - v36) >> 6;
        do
        {
          if (++v38 == v40 && (v39 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v41 = v38 == v40;
          if (v38 == v40) {
            unint64_t v38 = 0;
          }
          v39 |= v41;
          uint64_t v42 = *(void *)(v12 + 8 * v38);
        }
        while (v42 == -1);
        unint64_t v15 = __clz(__rbit64(~v42)) + (v38 << 6);
      }
      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      uint64_t v16 = (void *)(*(void *)(v7 + 48) + 16 * v15);
      void *v16 = v31;
      v16[1] = v30;
      uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v24 + 32))(*(void *)(v7 + 56) + v33 * v15, v27, v23);
      ++*(void *)(v7 + 16);
      int64_t v14 = v49;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

unint64_t sub_2564D6FD8(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = sub_2564E14F0();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        sub_2564E15B0();
        swift_bridgeObjectRetain();
        sub_2564E1450();
        uint64_t v9 = sub_2564E15C0();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8) {
          break;
        }
        if (v10 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v11 = *(void *)(a2 + 48);
        uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
        uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
        if (v3 != v6 || v12 >= v13 + 1) {
          *uint64_t v12 = *v13;
        }
        uint64_t v14 = *(void *)(a2 + 56);
        uint64_t v15 = *(void *)(*(void *)(sub_2564E1380() - 8) + 72);
        int64_t v16 = v15 * v3;
        uint64_t result = v14 + v15 * v3;
        int64_t v17 = v15 * v6;
        unint64_t v18 = v14 + v15 * v6 + v15;
        if (v16 < v17 || result >= v18)
        {
          uint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v16 == v17) {
            goto LABEL_6;
          }
          uint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }
      if (v10 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      if (v3 < (uint64_t)v10) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_21:
    unint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  uint64_t *v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_2564D71E8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_2564D67D0(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_2564D7418();
      goto LABEL_7;
    }
    sub_2564D6BE0(v15, a4 & 1);
    unint64_t v26 = sub_2564D67D0(a2, a3);
    if ((v16 & 1) == (v27 & 1))
    {
      unint64_t v12 = v26;
      unint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = sub_2564E15A0();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = v18[7];
    uint64_t v20 = sub_2564E1380();
    uint64_t v21 = *(void *)(v20 - 8);
    uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 40);
    uint64_t v23 = v20;
    uint64_t v24 = v19 + *(void *)(v21 + 72) * v12;
    return v22(v24, a1, v23);
  }
LABEL_13:
  sub_2564D7368(v12, a2, a3, a1, v18);
  return swift_bridgeObjectRetain();
}

uint64_t sub_2564D7368(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  unint64_t v8 = (void *)(a5[6] + 16 * a1);
  void *v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = sub_2564E1380();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v9 + *(void *)(*(void *)(v10 - 8) + 72) * a1, a4, v10);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

void *sub_2564D7418()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_269F5F440);
  uint64_t v34 = v0;
  uint64_t v1 = *v0;
  uint64_t v2 = sub_2564E1530();
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v38 = v2;
  if (!v3)
  {
    uint64_t result = (void *)swift_release();
    uint64_t v33 = v38;
    uint64_t v32 = v34;
LABEL_28:
    *uint64_t v32 = v33;
    return result;
  }
  uint64_t v4 = v2;
  uint64_t result = (void *)(v2 + 64);
  unint64_t v6 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v1 || (unint64_t)result >= v1 + 64 + 8 * v6)
  {
    uint64_t result = memmove(result, (const void *)(v1 + 64), 8 * v6);
    uint64_t v4 = v38;
  }
  int64_t v8 = 0;
  *(void *)(v4 + 16) = *(void *)(v1 + 16);
  uint64_t v9 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v37 = v1;
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(v1 + 64);
  uint64_t v35 = v1 + 64;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v1;
  while (1)
  {
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      int64_t v39 = v8;
      unint64_t v14 = v13 | (v8 << 6);
      goto LABEL_12;
    }
    int64_t v28 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v28 >= v36) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v35 + 8 * v28);
    int64_t v30 = v8 + 1;
    if (!v29)
    {
      int64_t v30 = v28 + 1;
      if (v28 + 1 >= v36) {
        goto LABEL_26;
      }
      unint64_t v29 = *(void *)(v35 + 8 * v30);
      if (!v29) {
        break;
      }
    }
LABEL_25:
    unint64_t v11 = (v29 - 1) & v29;
    int64_t v39 = v30;
    unint64_t v14 = __clz(__rbit64(v29)) + (v30 << 6);
LABEL_12:
    uint64_t v15 = 16 * v14;
    char v16 = (uint64_t *)(*(void *)(v12 + 48) + 16 * v14);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    uint64_t v19 = sub_2564E1380();
    uint64_t v20 = *(void *)(v19 - 8);
    double v21 = MEMORY[0x270FA5388](v19);
    uint64_t v23 = (char *)&v34 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
    unint64_t v25 = *(void *)(v24 + 72) * v14;
    (*(void (**)(char *, unint64_t, uint64_t, double))(v20 + 16))(v23, *(void *)(v12 + 56) + v25, v19, v21);
    uint64_t v26 = v38;
    char v27 = (void *)(*(void *)(v38 + 48) + v15);
    void *v27 = v18;
    v27[1] = v17;
    (*(void (**)(unint64_t, char *, uint64_t))(v20 + 32))(*(void *)(v26 + 56) + v25, v23, v19);
    uint64_t result = (void *)swift_bridgeObjectRetain();
    int64_t v8 = v39;
  }
  int64_t v31 = v28 + 2;
  if (v31 >= v36)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v32 = v34;
    uint64_t v33 = v38;
    goto LABEL_28;
  }
  unint64_t v29 = *(void *)(v35 + 8 * v31);
  if (v29)
  {
    int64_t v30 = v31;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v30 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v30 >= v36) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v35 + 8 * v30);
    ++v31;
    if (v29) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

BOOL _s19MicroLocationDaemon10ULKeychainC17storeSymmetricKey09symmetricG05labelSb9CryptoKit0fG0V_SStFZ_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_269F5F428);
  uint64_t inited = swift_initStackObject();
  uint64_t v4 = (void **)MEMORY[0x263F171B8];
  *(_OWORD *)(inited + 16) = xmmword_25651DB90;
  uint64_t v5 = *v4;
  *(void *)(inited + 32) = *v4;
  unint64_t v6 = (void *)*MEMORY[0x263F171E0];
  type metadata accessor for CFString();
  *(void *)(inited + 40) = v6;
  uint64_t v7 = (void *)*MEMORY[0x263F17580];
  *(void *)(inited + 64) = v8;
  *(void *)(inited + 72) = v7;
  uint64_t v9 = MEMORY[0x263F8D4F8];
  *(unsigned char *)(inited + 80) = 1;
  uint64_t v10 = (void *)*MEMORY[0x263F16E90];
  *(void *)(inited + 104) = v9;
  *(void *)(inited + std::__optional_destruct_base<CachedPrediction,false>::reset[abi:ne180100]((uint64_t)this + 112) = v10;
  unint64_t v11 = (void *)*MEMORY[0x263F16EC8];
  *(void *)(inited + 120) = *MEMORY[0x263F16EC8];
  uint64_t v12 = (void *)*MEMORY[0x263F170B0];
  *(void *)(inited + 144) = v8;
  *(void *)(inited + 152) = v12;
  *(unsigned char *)(inited + 160) = 1;
  unint64_t v13 = (void *)*MEMORY[0x263F175A8];
  *(void *)(inited + 184) = v9;
  *(void *)(inited + 192) = v13;
  sub_2564E1380();
  sub_2564D60E8();
  id v14 = v5;
  id v15 = v6;
  id v16 = v7;
  id v17 = v10;
  id v18 = v11;
  id v19 = v12;
  id v20 = v13;
  uint64_t v21 = MEMORY[0x263F06F78];
  sub_2564E11D0();
  *(_OWORD *)(inited + 200) = *(_OWORD *)v40;
  uint64_t v22 = (void *)*MEMORY[0x263F16EE0];
  *(void *)(inited + 224) = v21;
  *(void *)(inited + 232) = v22;
  *(void *)(inited + 264) = MEMORY[0x263F8D310];
  *(void *)(inited + 240) = a2;
  *(void *)(inited + 248) = a3;
  id v23 = v22;
  swift_bridgeObjectRetain();
  sub_2564D5380(inited);
  sub_2564D7A90();
  sub_2564D7AD0();
  CFDictionaryRef v24 = (const __CFDictionary *)sub_2564E1420();
  swift_bridgeObjectRelease();
  OSStatus v25 = SecItemAdd(v24, 0);

  if (v25)
  {
    if (qword_269F5F3A0 != -1) {
      swift_once();
    }
    uint64_t v26 = sub_2564E1320();
    __swift_project_value_buffer(v26, (uint64_t)qword_269F5F400);
    char v27 = sub_2564E1300();
    os_log_type_t v28 = sub_2564E1480();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      v40[0] = v30;
      *(_DWORD *)uint64_t v29 = 67109378;
      sub_2564E14B0();
      *(_WORD *)(v29 + 8) = 2080;
      CFStringRef v31 = SecCopyErrorMessageString(v25, 0);
      if (v31)
      {
        uint64_t v32 = (__CFString *)v31;
        uint64_t v33 = sub_2564E1440();
        unint64_t v35 = v34;
      }
      else
      {
        uint64_t v33 = sub_2564E1570();
        unint64_t v35 = v36;
      }
      sub_2564D6134(v33, v35, v40);
      sub_2564E14B0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_25631F000, v27, v28, "Failed to store key in keychain, error %d, %s", (uint8_t *)v29, 0x12u);
      swift_arrayDestroy();
      MEMORY[0x25A2A70C0](v30, -1, -1);
      MEMORY[0x25A2A70C0](v29, -1, -1);
    }
  }
  return v25 == 0;
}

unint64_t sub_2564D7A90()
{
  unint64_t result = qword_269F5F430;
  if (!qword_269F5F430)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_269F5F430);
  }
  return result;
}

unint64_t sub_2564D7AD0()
{
  unint64_t result = qword_269F5F438;
  if (!qword_269F5F438)
  {
    sub_2564D7A90();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F5F438);
  }
  return result;
}

BOOL _s19MicroLocationDaemon10ULKeychainC9removeKeyySbSSFZ_0(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_269F5F428);
  uint64_t inited = swift_initStackObject();
  uint64_t v5 = (void **)MEMORY[0x263F171B8];
  *(_OWORD *)(inited + 16) = xmmword_25651DBA0;
  unint64_t v6 = *v5;
  *(void *)(inited + 32) = *v5;
  uint64_t v7 = (void *)*MEMORY[0x263F171E0];
  type metadata accessor for CFString();
  *(void *)(inited + 40) = v7;
  uint64_t v8 = (void *)*MEMORY[0x263F17580];
  *(void *)(inited + 64) = v9;
  *(void *)(inited + 72) = v8;
  uint64_t v10 = MEMORY[0x263F8D4F8];
  unint64_t v11 = (void **)MEMORY[0x263F16E90];
  *(unsigned char *)(inited + 80) = 1;
  uint64_t v12 = *v11;
  *(void *)(inited + 104) = v10;
  *(void *)(inited + std::__optional_destruct_base<CachedPrediction,false>::reset[abi:ne180100]((uint64_t)this + 112) = v12;
  unint64_t v13 = (void *)*MEMORY[0x263F16E98];
  *(void *)(inited + 120) = *MEMORY[0x263F16E98];
  id v14 = (void *)*MEMORY[0x263F170B0];
  *(void *)(inited + 144) = v9;
  *(void *)(inited + 152) = v14;
  *(unsigned char *)(inited + 160) = 1;
  id v15 = (void *)*MEMORY[0x263F16EE0];
  *(void *)(inited + 184) = v10;
  *(void *)(inited + 192) = v15;
  *(void *)(inited + 224) = MEMORY[0x263F8D310];
  *(void *)(inited + 200) = a1;
  *(void *)(inited + 208) = a2;
  id v16 = v6;
  id v17 = v7;
  id v18 = v8;
  id v19 = v12;
  id v20 = v13;
  id v21 = v14;
  id v22 = v15;
  swift_bridgeObjectRetain();
  sub_2564D5380(inited);
  sub_2564D7A90();
  sub_2564D7AD0();
  CFDictionaryRef v23 = (const __CFDictionary *)sub_2564E1420();
  swift_bridgeObjectRelease();
  OSStatus v24 = SecItemDelete(v23);

  if (v24)
  {
    if (qword_269F5F3A0 != -1) {
      swift_once();
    }
    uint64_t v25 = sub_2564E1320();
    __swift_project_value_buffer(v25, (uint64_t)qword_269F5F400);
    uint64_t v26 = sub_2564E1300();
    os_log_type_t v27 = sub_2564E1480();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      uint64_t v37 = v29;
      *(_DWORD *)uint64_t v28 = 67109378;
      sub_2564E14B0();
      *(_WORD *)(v28 + 8) = 2080;
      CFStringRef v30 = SecCopyErrorMessageString(v24, 0);
      if (v30)
      {
        CFStringRef v31 = (__CFString *)v30;
        uint64_t v32 = sub_2564E1440();
        unint64_t v34 = v33;
      }
      else
      {
        uint64_t v32 = sub_2564E1570();
        unint64_t v34 = v35;
      }
      sub_2564D6134(v32, v34, &v37);
      sub_2564E14B0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_25631F000, v26, v27, "Failed to remove key from keychain, error %d, %s", (uint8_t *)v28, 0x12u);
      swift_arrayDestroy();
      MEMORY[0x25A2A70C0](v29, -1, -1);
      MEMORY[0x25A2A70C0](v28, -1, -1);
    }
  }
  return v24 == 0;
}

uint64_t type metadata accessor for ULKeychain()
{
  return self;
}

uint64_t type metadata accessor for ULKeychainMock()
{
  return self;
}

uint64_t sub_2564D7E98(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_2564D7EF8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

_OWORD *sub_2564D7F5C(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void CLMicroLocationCosineSimilarityLocalizationAlgorithm::localize(char *a1, uint8_t *buf, os_log_t log)
{
  if (a1[23] >= 0) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(char **)a1;
  }
  *(void *)std::string buf = 68289795;
  *((_WORD *)buf + 4) = 2082;
  *(void *)(buf + 10) = "";
  *((_WORD *)buf + 9) = 2082;
  *(void *)(buf + 20) = v4;
  *((_WORD *)buf + 14) = 2082;
  *(void *)(buf + 30) = "assert";
  *((_WORD *)buf + 19) = 2081;
  *((void *)buf + 5) = "model.modelType == CLMicroLocationProto::Model::SIMILARITY_LIST";
  _os_log_impl(&dword_25631F000, log, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CosineSimilarityLocalization, model type is not similarity list!\", \"Model Type\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
  if (a1[23] < 0) {
    operator delete(*(void **)a1);
  }
}

uint64_t CLMicroLocationCosineSimilarityLocalizationAlgorithm::localize()
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  uint64_t v0 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_0();
    _os_log_impl(&dword_25631F000, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Cannot localize on invalid model!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
  }

  uint64_t v1 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v1))
  {
    OUTLINED_FUNCTION_0();
    _os_signpost_emit_with_name_impl(&dword_25631F000, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Cannot localize on invalid model!", "{\"msg%{public}.0s\":\"Cannot localize on invalid model!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
  }

  long long v2 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    OUTLINED_FUNCTION_0();
    _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Cannot localize on invalid model!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
  }

  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

void CLMicroLocationLogic::State::clearScanActivity()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_2_0(1.7165e-36, v1, v2);
  OUTLINED_FUNCTION_1_0(v3, v4);
  *(void *)(v5 + 30) = "assert";
  *(_WORD *)(v5 + 38) = 2081;
  *(void *)(v5 + 40) = "false";
  _os_log_impl(&dword_25631F000, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Can't clear current activity as it is already invalid\", \"currentActivity\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7, 0x30u);
  if (*(char *)(v0 + 23) < 0) {
    operator delete(*(void **)v0);
  }
}

void CLMicroLocationLogic::onScanActivityCompleted()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_2_0(1.7165e-36, v1, v2);
  OUTLINED_FUNCTION_1_0(v3, v4);
  *(void *)(v5 + 30) = "assert";
  *(_WORD *)(v5 + 38) = 2081;
  *(void *)(v5 + 40) = "false";
  _os_log_impl(&dword_25631F000, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Invalid MiLo current activity\", \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7, 0x30u);
  if (*(char *)(v0 + 23) < 0) {
    operator delete(*(void **)v0);
  }
}

void CLMicroLocationModel::SimilarityListData::fromProtobuf(NSObject **a1)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v2 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_5(&dword_25631F000, v3, v4, "{\"msg%{public}.0s\":\"CLMicroLocationSimilarityListData fromProtobuf - number of probabilities should match number of clusters\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, v6, v7, v8, v19[0]);
  }

  uint64_t v9 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v9))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_3_0(&dword_25631F000, v9, v10, v11, "CLMicroLocationSimilarityListData fromProtobuf - number of probabilities should match number of clusters", "{\"msg%{public}.0s\":\"CLMicroLocationSimilarityListData fromProtobuf - number of probabilities should match number of clusters\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v19);
  }

  uint64_t v12 = _CLLogObjectForCategory_MicroLocation_Default();
  *a1 = v12;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_6(&dword_25631F000, v13, v14, "{\"msg%{public}.0s\":\"CLMicroLocationSimilarityListData fromProtobuf - number of probabilities should match number of clusters\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v15, v16, v17, v18, v19[0]);
  }
}

uint64_t CLMicroLocationModel::getPredictionClasses()
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  uint64_t v0 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_1_1();
    _os_log_impl(&dword_25631F000, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Model get prediction classes unknown model type\", \"modelType\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
  }

  uint64_t v1 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v1))
  {
    OUTLINED_FUNCTION_1_1();
    _os_signpost_emit_with_name_impl(&dword_25631F000, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Model get prediction classes unknown model type", "{\"msg%{public}.0s\":\"Model get prediction classes unknown model type\", \"modelType\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
  }

  uint64_t v2 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    OUTLINED_FUNCTION_1_1();
    _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Model get prediction classes unknown model type\", \"modelType\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
  }

  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

uint64_t CLMicroLocationModel::mapIdentifiers()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v0 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_0();
    _os_log_impl(&dword_25631F000, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"mapped cluster identifer already exists\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
  }

  uint64_t v1 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v1))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3_0(&dword_25631F000, v1, v2, v3, "mapped cluster identifer already exists", "{\"msg%{public}.0s\":\"mapped cluster identifer already exists\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf);
  }

  uint64_t v4 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    OUTLINED_FUNCTION_0();
    _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"mapped cluster identifer already exists\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
  }

  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

void CLMicroLocationModel::SimilarityListData::calculateNormalizedProbabilitiesWithoutNullCluster(NSObject **a1)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v2 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_5(&dword_25631F000, v3, v4, "{\"msg%{public}.0s\":\"Similarity List Model Learning, Localizer must not return empty results\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, v6, v7, v8, v19[0]);
  }

  uint64_t v9 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v9))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_3_0(&dword_25631F000, v9, v10, v11, "Similarity List Model Learning, Localizer must not return empty results", "{\"msg%{public}.0s\":\"Similarity List Model Learning, Localizer must not return empty results\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v19);
  }

  uint64_t v12 = _CLLogObjectForCategory_MicroLocation_Default();
  *a1 = v12;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_6(&dword_25631F000, v13, v14, "{\"msg%{public}.0s\":\"Similarity List Model Learning, Localizer must not return empty results\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v15, v16, v17, v18, v19[0]);
  }
}

uint64_t std::__optional_move_base<CLMicroLocationUtils::ProbabilityMatrix,false>::__optional_move_base[abi:ne180100](uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result) {
    OUTLINED_FUNCTION_4();
  }
  return result;
}

#error "2564D8B0C: call analysis failed (funcsize=60)"

#error "2564D8C2C: call analysis failed (funcsize=60)"

#error "2564D8D4C: call analysis failed (funcsize=60)"

#error "2564D8E6C: call analysis failed (funcsize=60)"

#error "2564D8F8C: call analysis failed (funcsize=60)"

#error "2564D90AC: call analysis failed (funcsize=60)"

uint64_t CLMicroLocationSensorsDriver::CLMicroLocationSensorsDriver(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

uint64_t CLMicroLocationSensorsDriver::recordingDuration()
{
  uint64_t v0 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_25631F000, v1, v2, "{\"msg%{public}.0s\":\"Should not be starting a recording in this state: NotSet\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, v21, v22, v23, v24, v25);
  }

  uint64_t v7 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v7))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_25631F000, v8, v9, v10, "Should not be starting a recording in this state: NotSet", "{\"msg%{public}.0s\":\"Should not be starting a recording in this state: NotSet\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11, v12, v21, v22, v23, v24, v25);
  }

  uint64_t v13 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_25631F000, v14, v15, "{\"msg%{public}.0s\":\"Should not be starting a recording in this state: NotSet\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v16, v17, v18, v19, v21, v22, v23, v24, v25);
  }

  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

uint64_t CLMicroLocationSensorsDriver::cancelWifiScan()
{
  uint64_t v0 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_25631F000, v1, v2, "{\"msg%{public}.0s\":\"SensorsDriver, received cancel wifi scan when current scan activity is not set\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, v21, v22, v23, v24, v25);
  }

  uint64_t v7 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v7))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_25631F000, v8, v9, v10, "SensorsDriver, received cancel wifi scan when current scan activity is not set", "{\"msg%{public}.0s\":\"SensorsDriver, received cancel wifi scan when current scan activity is not set\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11, v12, v21, v22, v23, v24, v25);
  }

  uint64_t v13 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_25631F000, v14, v15, "{\"msg%{public}.0s\":\"SensorsDriver, received cancel wifi scan when current scan activity is not set\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v16, v17, v18, v19, v21, v22, v23, v24, v25);
  }

  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

uint64_t CLMicroLocationSensorsDriver::startBleRssiSession()
{
  uint64_t v0 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_25631F000, v1, v2, "{\"msg%{public}.0s\":\"SensorsDriver, received a BLE scan request but current scan activity is set\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, v22, v23, v24, v25, v26);
  }

  uint64_t v7 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v7))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_25631F000, v8, v9, v10, "SensorsDriver, received a BLE scan request but current scan activity is set", "{\"msg%{public}.0s\":\"SensorsDriver, received a BLE scan request but current scan activity is set\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11, v12, v22, v23, v24, v25, v26);
  }

  uint64_t v13 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_25631F000, v14, v15, "{\"msg%{public}.0s\":\"SensorsDriver, received a BLE scan request but current scan activity is set\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v16, v17, v18, v19, v22, v23, v24, v25, v26);
  }

  uint64_t v20 = abort_report_np();
  return CLMicroLocationFingerprintDistanceFunction::weightedEuclideanJaccardDistance(v20);
}

void CLMicroLocationFingerprintDistanceFunction::weightedEuclideanJaccardDistance()
{
  uint64_t v0 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_25631F000, v1, v2, "{\"msg%{public}.0s\":\"configured e2jKernelThr illegal value\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, v20, v21, v22, v23, v24);
  }

  uint64_t v7 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v7))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_25631F000, v8, v9, v10, "configured e2jKernelThr illegal value", "{\"msg%{public}.0s\":\"configured e2jKernelThr illegal value\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11, v12, v20, v21, v22, v23, v24);
  }

  uint64_t v13 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_25631F000, v14, v15, "{\"msg%{public}.0s\":\"configured e2jKernelThr illegal value\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v16, v17, v18, v19, v20, v21, v22, v23, v24);
  }

  abort_report_np();
  CLMicroLocationFingerprintDistanceFunction::computeWeightedEuclideanComponentsAndNumItersect();
}

void CLMicroLocationFingerprintDistanceFunction::computeWeightedEuclideanComponentsAndNumItersect()
{
  if (onceToken_MicroLocation_Default != -1) {
    goto LABEL_13;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_FAULT))
    {
      OUTLINED_FUNCTION_0();
      OUTLINED_FUNCTION_3(&dword_25631F000, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_11);
    }
    if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
    {
      OUTLINED_FUNCTION_0();
      OUTLINED_FUNCTION_1(&dword_25631F000, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_11);
    }
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO))
    {
      OUTLINED_FUNCTION_0();
      OUTLINED_FUNCTION_2(&dword_25631F000, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 16;
    int v19 = "computeDifference";
    int v17 = "/Library/Caches/com.apple.xbs/Sources/MicroLocation/MicroLocationLogic/CLMicroLocationFingerprintDistanceFunction.mm";
    abort_report_np();
LABEL_13:
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_11);
  }
}

uint64_t CLMicroLocationNullSpaceAlgorithm::localize()
{
  int v1 = _CLLogObjectForCategory_MicroLocation_Default();
  if (OUTLINED_FUNCTION_5_0(v1))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_25631F000, v2, v3, "{\"msg%{public}.0s\":\"must have fingerprints distance function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v22, v23, v24, v25, v26);
  }

  int v8 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v8))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_25631F000, v9, v10, v11, "must have fingerprints distance function", "{\"msg%{public}.0s\":\"must have fingerprints distance function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v22, v23, v24, v25, v26);
  }

  int v14 = _CLLogObjectForCategory_MicroLocation_Default();
  if (OUTLINED_FUNCTION_4_0(v14))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_25631F000, v15, v16, "{\"msg%{public}.0s\":\"must have fingerprints distance function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v22, v23, v24, v25, v26);
  }

  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

{
  void *v0;
  NSObject *v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t v26;

  int v1 = _CLLogObjectForCategory_MicroLocation_Default();
  if (OUTLINED_FUNCTION_5_0(v1))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_25631F000, v2, v3, "{\"msg%{public}.0s\":\"Cannot localize on invalid model!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v22, v23, v24, v25, v26);
  }

  int v8 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v8))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_25631F000, v9, v10, v11, "Cannot localize on invalid model!", "{\"msg%{public}.0s\":\"Cannot localize on invalid model!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v22, v23, v24, v25, v26);
  }

  int v14 = _CLLogObjectForCategory_MicroLocation_Default();
  if (OUTLINED_FUNCTION_4_0(v14))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_25631F000, v15, v16, "{\"msg%{public}.0s\":\"Cannot localize on invalid model!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v22, v23, v24, v25, v26);
  }

  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

uint64_t CLMicroLocationAlgorithms::createReducerFunction<std::multiset<double>,double>()
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  int v0 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_2_1();
    _os_log_impl(&dword_25631F000, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Invalid type chosen\", \"enum value\":%{public}u, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
  }

  int v1 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v1))
  {
    OUTLINED_FUNCTION_2_1();
    _os_signpost_emit_with_name_impl(&dword_25631F000, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Invalid type chosen", "{\"msg%{public}.0s\":\"Invalid type chosen\", \"enum value\":%{public}u, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
  }

  int v2 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    OUTLINED_FUNCTION_2_1();
    _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Invalid type chosen\", \"enum value\":%{public}u, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
  }

  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

{
  void *v0;
  NSObject *v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t v26;

  int v1 = _CLLogObjectForCategory_MicroLocation_Default();
  if (OUTLINED_FUNCTION_5_0(v1))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_25631F000, v2, v3, "{\"msg%{public}.0s\":\"Unsupported reducer function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v22, v23, v24, v25, v26);
  }

  int v8 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v8))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_25631F000, v9, v10, v11, "Unsupported reducer function", "{\"msg%{public}.0s\":\"Unsupported reducer function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v22, v23, v24, v25, v26);
  }

  int v14 = _CLLogObjectForCategory_MicroLocation_Default();
  if (OUTLINED_FUNCTION_4_0(v14))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_25631F000, v15, v16, "{\"msg%{public}.0s\":\"Unsupported reducer function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v22, v23, v24, v25, v26);
  }

  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

{
  void *v0;
  NSObject *v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t v26;

  int v1 = _CLLogObjectForCategory_MicroLocation_Default();
  if (OUTLINED_FUNCTION_5_0(v1))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_25631F000, v2, v3, "{\"msg%{public}.0s\":\"Unsupported reducer function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v22, v23, v24, v25, v26);
  }

  int v8 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v8))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_25631F000, v9, v10, v11, "Unsupported reducer function", "{\"msg%{public}.0s\":\"Unsupported reducer function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v22, v23, v24, v25, v26);
  }

  int v14 = _CLLogObjectForCategory_MicroLocation_Default();
  if (OUTLINED_FUNCTION_4_0(v14))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_25631F000, v15, v16, "{\"msg%{public}.0s\":\"Unsupported reducer function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v22, v23, v24, v25, v26);
  }

  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

{
  void *v0;
  NSObject *v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t v26;

  int v1 = _CLLogObjectForCategory_MicroLocation_Default();
  if (OUTLINED_FUNCTION_5_0(v1))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_25631F000, v2, v3, "{\"msg%{public}.0s\":\"Unsupported reducer function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v22, v23, v24, v25, v26);
  }

  int v8 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v8))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_25631F000, v9, v10, v11, "Unsupported reducer function", "{\"msg%{public}.0s\":\"Unsupported reducer function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v22, v23, v24, v25, v26);
  }

  int v14 = _CLLogObjectForCategory_MicroLocation_Default();
  if (OUTLINED_FUNCTION_4_0(v14))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_25631F000, v15, v16, "{\"msg%{public}.0s\":\"Unsupported reducer function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v22, v23, v24, v25, v26);
  }

  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

void CLReducerFunction<std::multiset<double>,double>::minimumValueSorted()
{
}

void CLReducerFunction<std::multiset<double>,double>::minimumValue()
{
}

void CLReducerFunction<std::multiset<double>,double>::meanValue()
{
}

void CLReducerFunction<std::multiset<double>,double>::maximumValueSorted()
{
}

void CLReducerFunction<std::multiset<double>,double>::maximumValue()
{
}

void CLReducerFunction<std::multiset<double>,double>::firstQuartileValueSorted()
{
}

void CLReducerFunction<std::multiset<double>,double>::medianValueSorted()
{
}

void CLReducerFunction<std::multiset<double>,double>::parameterizedTruncatedMeanValueSorted()
{
}

{
  __assert_rtn("parameterizedTruncatedMeanValueSorted", "CLReducerFunction.h", 61, "minPercentile >= 0 && minPercentile <= 1 && maxPercentile >= minPercentile && maxPercentile <= 1");
}

{
  __assert_rtn("parameterizedTruncatedMeanValueSorted", "CLReducerFunction.h", 65, "numElements>0");
}

void std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void CLHierarchicalClustering::CLHierarchicalClustering(NSObject **a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  int v2 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_0_1();
    _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"min_dist should not be infinity\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7, 0x26u);
  }

  int v3 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v3))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_3_0(&dword_25631F000, v3, v4, v5, "min_dist should not be infinity", "{\"msg%{public}.0s\":\"min_dist should not be infinity\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
  }

  int v6 = _CLLogObjectForCategory_MicroLocation_Default();
  *a1 = v6;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    OUTLINED_FUNCTION_0_1();
    _os_log_impl(&dword_25631F000, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"min_dist should not be infinity\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7, 0x26u);
  }
}

uint64_t CLHierarchicalClustering::getClusterLabels()
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  int v0 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_25631F000, v1, v2, "{\"msg%{public}.0s\":\"distanceThresholdVector must not be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, v18, v19, v20, v21, v22[0]);
  }

  int v7 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v7))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3_0(&dword_25631F000, v7, v8, v9, "distanceThresholdVector must not be empty", "{\"msg%{public}.0s\":\"distanceThresholdVector must not be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v22);
  }

  int v10 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_25631F000, v11, v12, "{\"msg%{public}.0s\":\"distanceThresholdVector must not be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v18, v19, v20, v21, v22[0]);
  }

  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

{
  NSObject *v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t v22[40];
  uint64_t v23;

  uint64_t v23 = *MEMORY[0x263EF8340];
  int v0 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_25631F000, v1, v2, "{\"msg%{public}.0s\":\"minNumCluster must be greater than zero\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, v18, v19, v20, v21, v22[0]);
  }

  int v7 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v7))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3_0(&dword_25631F000, v7, v8, v9, "minNumCluster must be greater than zero", "{\"msg%{public}.0s\":\"minNumCluster must be greater than zero\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v22);
  }

  int v10 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_25631F000, v11, v12, "{\"msg%{public}.0s\":\"minNumCluster must be greater than zero\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v18, v19, v20, v21, v22[0]);
  }

  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

uint64_t CLMicroLocationAlgorithms::createLearner()
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  int v1 = _CLLogObjectForCategory_MicroLocation_Default();
  if (OUTLINED_FUNCTION_7(v1))
  {
    OUTLINED_FUNCTION_2_1();
    OUTLINED_FUNCTION_4_1(&dword_25631F000, v2, v3, "{\"msg%{public}.0s\":\"Invalid algorithm chosen\", \"enum value\":%{public}u, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12);
  }

  int v4 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v4))
  {
    OUTLINED_FUNCTION_2_1();
    OUTLINED_FUNCTION_3_1(&dword_25631F000, v5, v6, v7, "Invalid algorithm chosen", "{\"msg%{public}.0s\":\"Invalid algorithm chosen\", \"enum value\":%{public}u, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12);
  }

  uint64_t v8 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    OUTLINED_FUNCTION_2_1();
    OUTLINED_FUNCTION_5_1(&dword_25631F000, v9, v10, "{\"msg%{public}.0s\":\"Invalid algorithm chosen\", \"enum value\":%{public}u, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12);
  }

  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

uint64_t CLMicroLocationAlgorithms::createLocalizerAlgorithm()
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  int v1 = _CLLogObjectForCategory_MicroLocation_Default();
  if (OUTLINED_FUNCTION_7(v1))
  {
    OUTLINED_FUNCTION_2_1();
    OUTLINED_FUNCTION_4_1(&dword_25631F000, v2, v3, "{\"msg%{public}.0s\":\"Invalid algorithm chosen\", \"enum value\":%{public}u, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12);
  }

  int v4 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v4))
  {
    OUTLINED_FUNCTION_2_1();
    OUTLINED_FUNCTION_3_1(&dword_25631F000, v5, v6, v7, "Invalid algorithm chosen", "{\"msg%{public}.0s\":\"Invalid algorithm chosen\", \"enum value\":%{public}u, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12);
  }

  uint64_t v8 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    OUTLINED_FUNCTION_2_1();
    OUTLINED_FUNCTION_5_1(&dword_25631F000, v9, v10, "{\"msg%{public}.0s\":\"Invalid algorithm chosen\", \"enum value\":%{public}u, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12);
  }

  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

void CLMicroLocationAlgorithms::createKernelFunction(uint8_t *buf, uint64_t a2, os_log_t log)
{
  *(void *)std::string buf = 68289795;
  *((_WORD *)buf + 4) = 2082;
  *(void *)(buf + 10) = "";
  *((_WORD *)buf + 9) = 2050;
  *(void *)(buf + 20) = a2;
  *((_WORD *)buf + 14) = 2082;
  *(void *)(buf + 30) = "assert";
  *((_WORD *)buf + 19) = 2081;
  *((void *)buf + 5) = "primitiveType.unsignedLongValue < static_cast<uint32_t>(KernelFunctionType::kTypeCount)";
  _os_log_impl(&dword_25631F000, log, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Invalid algorithm chosen\", \"enum value\":%{public}lu, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
}

void CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction()
{
  int v1 = _CLLogObjectForCategory_MicroLocation_Default();
  if (OUTLINED_FUNCTION_7(v1))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_5(&dword_25631F000, v2, v3, "{\"msg%{public}.0s\":\"Couldn't find key: onesided_jaccard\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v21);
  }

  uint64_t v8 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v8))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_6_1(&dword_25631F000, v9, v10, v11, "Couldn't find key: onesided_jaccard", "{\"msg%{public}.0s\":\"Couldn't find key: onesided_jaccard\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v21);
  }

  int v14 = _CLLogObjectForCategory_MicroLocation_Default();
  if (OUTLINED_FUNCTION_8(v14))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_6(&dword_25631F000, v15, v16, "{\"msg%{public}.0s\":\"Couldn't find key: onesided_jaccard\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v21);
  }
}

{
  void *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  int v1 = _CLLogObjectForCategory_MicroLocation_Default();
  if (OUTLINED_FUNCTION_7(v1))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_5(&dword_25631F000, v2, v3, "{\"msg%{public}.0s\":\"No tanimoto_base provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v21);
  }

  uint64_t v8 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v8))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_6_1(&dword_25631F000, v9, v10, v11, "No tanimoto_base provided in dictionary", "{\"msg%{public}.0s\":\"No tanimoto_base provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v21);
  }

  int v14 = _CLLogObjectForCategory_MicroLocation_Default();
  if (OUTLINED_FUNCTION_8(v14))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_6(&dword_25631F000, v15, v16, "{\"msg%{public}.0s\":\"No tanimoto_base provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v21);
  }
}

{
  void *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t v11[56];
  uint64_t v12;

  uint64_t v12 = *MEMORY[0x263EF8340];
  int v1 = _CLLogObjectForCategory_MicroLocation_Default();
  if (OUTLINED_FUNCTION_7(v1))
  {
    OUTLINED_FUNCTION_2_2();
    OUTLINED_FUNCTION_4_1(&dword_25631F000, v2, v3, "{\"msg%{public}.0s\":\"fingerprint distance type not supported\", \"type\":%{public}u, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11);
  }

  uint64_t v4 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v4))
  {
    OUTLINED_FUNCTION_2_2();
    OUTLINED_FUNCTION_3_1(&dword_25631F000, v5, v6, v7, "fingerprint distance type not supported", "{\"msg%{public}.0s\":\"fingerprint distance type not supported\", \"type\":%{public}u, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11);
  }

  uint64_t v8 = _CLLogObjectForCategory_MicroLocation_Default();
  if (OUTLINED_FUNCTION_8(v8))
  {
    OUTLINED_FUNCTION_2_2();
    OUTLINED_FUNCTION_5_1(&dword_25631F000, v9, v10, "{\"msg%{public}.0s\":\"fingerprint distance type not supported\", \"type\":%{public}u, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11);
  }
}

uint64_t CLMicroLocationAlgorithms::createLinkageFunction()
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  int v1 = _CLLogObjectForCategory_MicroLocation_Default();
  if (OUTLINED_FUNCTION_7(v1))
  {
    OUTLINED_FUNCTION_2_1();
    OUTLINED_FUNCTION_4_1(&dword_25631F000, v2, v3, "{\"msg%{public}.0s\":\"Invalid type chosen\", \"enum value\":%{public}u, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12);
  }

  uint64_t v4 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v4))
  {
    OUTLINED_FUNCTION_2_1();
    OUTLINED_FUNCTION_3_1(&dword_25631F000, v5, v6, v7, "Invalid type chosen", "{\"msg%{public}.0s\":\"Invalid type chosen\", \"enum value\":%{public}u, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12);
  }

  uint64_t v8 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    OUTLINED_FUNCTION_2_1();
    OUTLINED_FUNCTION_5_1(&dword_25631F000, v9, v10, "{\"msg%{public}.0s\":\"Invalid type chosen\", \"enum value\":%{public}u, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12);
  }

  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

void CLMicroLocationAlgorithms::details::createPerSourceWeights(uint64_t a1, uint8_t *buf, os_log_t log)
{
  *(void *)std::string buf = 68289795;
  *((_WORD *)buf + 4) = 2082;
  *(void *)(buf + 10) = "";
  *((_WORD *)buf + 9) = 2082;
  *(void *)(buf + 20) = a1;
  *((_WORD *)buf + 14) = 2082;
  *(void *)(buf + 30) = "assert";
  *((_WORD *)buf + 19) = 2081;
  *((void *)buf + 5) = "weightsDict";
  _os_log_impl(&dword_25631F000, log, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Couldn't find key: \", \"key\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
}

void CLLaplacianKernelFunction::CLLaplacianKernelFunction()
{
}

void CLEuclideanSquaredDistanceFunction::operator()()
{
  __assert_rtn("operator()", "CLDistanceFunction.h", 26, "a.size() == b.size()");
}

void CLGaussianKernelFunction::CLGaussianKernelFunction()
{
}

void CLExponentialKernelFunction::CLExponentialKernelFunction()
{
}

{
  __assert_rtn("CLExponentialKernelFunction", "CLKernelFunction.h", 78, "sigma > 0.0");
}

void ULLogicAdapterHelper::getULConfidenceReasons(NSObject **a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t v2 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_0_1();
    _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unexpected confidence reason type\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, 0x26u);
  }

  uint64_t v3 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v3))
  {
    OUTLINED_FUNCTION_0_1();
    _os_signpost_emit_with_name_impl(&dword_25631F000, v3, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unexpected confidence reason type", "{\"msg%{public}.0s\":\"Unexpected confidence reason type\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, 0x26u);
  }

  uint64_t v4 = _CLLogObjectForCategory_MicroLocation_Default();
  *a1 = v4;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    OUTLINED_FUNCTION_0_1();
    _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Unexpected confidence reason type\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, 0x26u);
  }
}

uint64_t CLMicroLocationBlueAtlasLocalizationAlgorithm::localize()
{
  int v1 = _CLLogObjectForCategory_MicroLocation_Default();
  if (OUTLINED_FUNCTION_5_0(v1))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_25631F000, v2, v3, "{\"msg%{public}.0s\":\"must have fingerprints distance function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v22, v23, v24, v25, v26);
  }

  uint64_t v8 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v8))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_25631F000, v9, v10, v11, "must have fingerprints distance function", "{\"msg%{public}.0s\":\"must have fingerprints distance function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v22, v23, v24, v25, v26);
  }

  int v14 = _CLLogObjectForCategory_MicroLocation_Default();
  if (OUTLINED_FUNCTION_4_0(v14))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_25631F000, v15, v16, "{\"msg%{public}.0s\":\"must have fingerprints distance function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v22, v23, v24, v25, v26);
  }

  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

{
  void *v0;
  NSObject *v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t v26;

  int v1 = _CLLogObjectForCategory_MicroLocation_Default();
  if (OUTLINED_FUNCTION_5_0(v1))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_25631F000, v2, v3, "{\"msg%{public}.0s\":\"Cannot localize on invalid model!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v22, v23, v24, v25, v26);
  }

  uint64_t v8 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v8))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_25631F000, v9, v10, v11, "Cannot localize on invalid model!", "{\"msg%{public}.0s\":\"Cannot localize on invalid model!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v22, v23, v24, v25, v26);
  }

  int v14 = _CLLogObjectForCategory_MicroLocation_Default();
  if (OUTLINED_FUNCTION_4_0(v14))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_25631F000, v15, v16, "{\"msg%{public}.0s\":\"Cannot localize on invalid model!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v22, v23, v24, v25, v26);
  }

  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

void CLMicroLocationBlueAtlasLocalizationAlgorithm::localize(char *a1, uint8_t *buf, os_log_t log)
{
  if (a1[23] >= 0) {
    int v4 = a1;
  }
  else {
    int v4 = *(char **)a1;
  }
  *(void *)std::string buf = 68289795;
  *((_WORD *)buf + 4) = 2082;
  *(void *)(buf + 10) = "";
  *((_WORD *)buf + 9) = 2082;
  *(void *)(buf + 20) = v4;
  *((_WORD *)buf + 14) = 2082;
  *(void *)(buf + 30) = "assert";
  *((_WORD *)buf + 19) = 2081;
  *((void *)buf + 5) = "model.modelType == CLMicroLocationProto::Model::BLUE_ATLAS";
  _os_log_impl(&dword_25631F000, log, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Blue Atlas Localization, model type is not BLUE_ATLAS!\", \"Model Type\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
  if (a1[23] < 0) {
    operator delete(*(void **)a1);
  }
}

uint64_t CLMicroLocationBlueAtlasAlgorithms::calculateScoreForValue<double>()
{
  int v1 = _CLLogObjectForCategory_MicroLocation_Default();
  if (OUTLINED_FUNCTION_5_0(v1))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_25631F000, v2, v3, "{\"msg%{public}.0s\":\"Look up table thresholds must be sorted\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v23, v24, v25, v26, v27);
  }

  uint64_t v8 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v8))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_25631F000, v9, v10, v11, "Look up table thresholds must be sorted", "{\"msg%{public}.0s\":\"Look up table thresholds must be sorted\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v23, v24, v25, v26, v27);
  }

  int v14 = _CLLogObjectForCategory_MicroLocation_Default();
  if (OUTLINED_FUNCTION_4_0(v14))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_25631F000, v15, v16, "{\"msg%{public}.0s\":\"Look up table thresholds must be sorted\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v23, v24, v25, v26, v27);
  }

  uint64_t v21 = abort_report_np();
  return CLMicroLocationBlueAtlasAlgorithms::calculateScoreForValue<double>(v21);
}

{
  NSObject *v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  NSObject *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  NSObject *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t v26;

  int v0 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_25631F000, v1, v2, "{\"msg%{public}.0s\":\"Look up table thresholds must be sorted\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, v22, v23, v24, v25, v26);
  }

  int v7 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v7))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_25631F000, v8, v9, v10, "Look up table thresholds must be sorted", "{\"msg%{public}.0s\":\"Look up table thresholds must be sorted\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11, v12, v22, v23, v24, v25, v26);
  }

  int v13 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_25631F000, v14, v15, "{\"msg%{public}.0s\":\"Look up table thresholds must be sorted\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v16, v17, v18, v19, v22, v23, v24, v25, v26);
  }

  int v20 = abort_report_np();
  return CLMicroLocationBlueAtlasAlgorithms::calculateScoreForValue<double>(v20);
}

{
  NSObject *v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  NSObject *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  NSObject *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t v26;

  int v0 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_25631F000, v1, v2, "{\"msg%{public}.0s\":\"Look up table thresholds and scores vectors must be the same size\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, v22, v23, v24, v25, v26);
  }

  int v7 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v7))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_25631F000, v8, v9, v10, "Look up table thresholds and scores vectors must be the same size", "{\"msg%{public}.0s\":\"Look up table thresholds and scores vectors must be the same size\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11, v12, v22, v23, v24, v25, v26);
  }

  int v13 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_25631F000, v14, v15, "{\"msg%{public}.0s\":\"Look up table thresholds and scores vectors must be the same size\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v16, v17, v18, v19, v22, v23, v24, v25, v26);
  }

  int v20 = abort_report_np();
  return -[ULLogicAdapter deleteServiceWithIdentifier:clientIdentifier:](v20);
}

void CLMicroLocationBlueAtlasAlgorithms::calculateScoreForValue<double>()
{
  int v1 = _CLLogObjectForCategory_MicroLocation_Default();
  if (OUTLINED_FUNCTION_5_0(v1))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_25631F000, v2, v3, "{\"msg%{public}.0s\":\"Look up table thresholds and scores vectors must be the same size\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v22, v23, v24, v25, v26);
  }

  uint64_t v8 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v8))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_25631F000, v9, v10, v11, "Look up table thresholds and scores vectors must be the same size", "{\"msg%{public}.0s\":\"Look up table thresholds and scores vectors must be the same size\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v22, v23, v24, v25, v26);
  }

  int v14 = _CLLogObjectForCategory_MicroLocation_Default();
  if (OUTLINED_FUNCTION_4_0(v14))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_25631F000, v15, v16, "{\"msg%{public}.0s\":\"Look up table thresholds and scores vectors must be the same size\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v22, v23, v24, v25, v26);
  }

  uint64_t v21 = (NSObject **)abort_report_np();
  CLMiLoServiceManager::enterLocationPerService(v21);
}

void CLMiLoServiceManager::enterLocationPerService(NSObject **a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  int v2 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_0_1();
    _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Optional Model must have value here\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, 0x26u);
  }

  int v3 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v3))
  {
    OUTLINED_FUNCTION_0_1();
    _os_signpost_emit_with_name_impl(&dword_25631F000, v3, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Optional Model must have value here", "{\"msg%{public}.0s\":\"Optional Model must have value here\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, 0x26u);
  }

  int v4 = _CLLogObjectForCategory_MicroLocation_Default();
  *a1 = v4;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    OUTLINED_FUNCTION_0_1();
    _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Optional Model must have value here\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, 0x26u);
  }
}

#error "2564DB6B0: call analysis failed (funcsize=61)"

#error "2564DB7D8: call analysis failed (funcsize=60)"

#error "2564DB8F8: call analysis failed (funcsize=60)"

#error "2564DBA18: call analysis failed (funcsize=60)"

#error "2564DBB38: call analysis failed (funcsize=60)"

#error "2564DBC58: call analysis failed (funcsize=60)"

#error "2564DBD78: call analysis failed (funcsize=60)"

uint64_t CLMicroLocationWiFiChannelHistogramAnalyzer::histogramFromProtobuf()
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  int v0 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_0();
    _os_log_impl(&dword_25631F000, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Expecting a wifi channel histogram\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
  }

  int v1 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v1))
  {
    OUTLINED_FUNCTION_0();
    _os_signpost_emit_with_name_impl(&dword_25631F000, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Expecting a wifi channel histogram", "{\"msg%{public}.0s\":\"Expecting a wifi channel histogram\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
  }

  int v2 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    OUTLINED_FUNCTION_0();
    _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Expecting a wifi channel histogram\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
  }

  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

uint64_t CLSqliteDatabaseManager::openDatabase()
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  int v0 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_0();
    _os_log_impl(&dword_25631F000, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"mutex assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
  }

  int v1 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v1))
  {
    OUTLINED_FUNCTION_0();
    _os_signpost_emit_with_name_impl(&dword_25631F000, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "mutex assertion failed", "{\"msg%{public}.0s\":\"mutex assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
  }

  int v2 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    OUTLINED_FUNCTION_0();
    _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"mutex assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
  }

  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

uint64_t CLMiLoCustomLoiRecordingManager::setupIdleState()
{
  OUTLINED_FUNCTION_0_2();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void (***std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationProto::UwbRange>,std::reverse_iterator<CLMicroLocationProto::UwbRange*>,std::reverse_iterator<CLMicroLocationProto::UwbRange*>,std::reverse_iterator<CLMicroLocationProto::UwbRange*>>(void (***a1)(void), void (***a2)(void)))(void)
{
  int v3 = a1;
  int v4 = a1;
  do
  {
    uint64_t v5 = *v4;
    v4 += 8;
    (*v5)();
    v3 += 8;
    uint64_t result = v4;
  }
  while (v4 != a2);
  return result;
}

void CLMicroLocationTimeUtils::getTimeDeltaDaysAgo(NSObject **a1)
{
  int v2 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_5(&dword_25631F000, v3, v4, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, v6, v7, v8, v22);
  }

  int v9 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v9))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_6_1(&dword_25631F000, v10, v11, v12, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v22);
  }

  int v15 = _CLLogObjectForCategory_MicroLocation_Default();
  *a1 = v15;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_6(&dword_25631F000, v16, v17, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v18, v19, v20, v21, v22);
  }
}

void CLMicroLocationLocalizationController::LocalizationRequest::finalizeTriggerConfidence()
{
}

uint64_t CLMicroLocationLocalizationController::localizationRequestResultsPerModelInternal()
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  uint64_t v0 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_0();
    _os_log_impl(&dword_25631F000, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"semi-supervised model has no clientId value\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
  }

  int v1 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v1))
  {
    OUTLINED_FUNCTION_0();
    _os_signpost_emit_with_name_impl(&dword_25631F000, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "semi-supervised model has no clientId value", "{\"msg%{public}.0s\":\"semi-supervised model has no clientId value\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
  }

  int v2 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    OUTLINED_FUNCTION_0();
    _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"semi-supervised model has no clientId value\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
  }

  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

uint64_t CLMicroLocationLearner::getServiceLabelsAndLabeledRecordingEventsForLoi()
{
  uint64_t v0 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_25631F000, v1, v2, "{\"msg%{public}.0s\":\"getServiceLabelsAndLabeledRecordingEventsForLoi, labeledRecordingEvents must be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, v21, v22, v23, v24, v25);
  }

  uint64_t v7 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v7))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_25631F000, v8, v9, v10, "getServiceLabelsAndLabeledRecordingEventsForLoi, labeledRecordingEvents must be empty", "{\"msg%{public}.0s\":\"getServiceLabelsAndLabeledRecordingEventsForLoi, labeledRecordingEvents must be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11, v12, v21, v22, v23, v24, v25);
  }

  uint64_t v13 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_25631F000, v14, v15, "{\"msg%{public}.0s\":\"getServiceLabelsAndLabeledRecordingEventsForLoi, labeledRecordingEvents must be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v16, v17, v18, v19, v21, v22, v23, v24, v25);
  }

  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

{
  NSObject *v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  NSObject *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  NSObject *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t v25;

  uint64_t v0 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_25631F000, v1, v2, "{\"msg%{public}.0s\":\"getServiceLabelsAndLabeledRecordingEventsForLoi, labelEntries must be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, v21, v22, v23, v24, v25);
  }

  uint64_t v7 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v7))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_25631F000, v8, v9, v10, "getServiceLabelsAndLabeledRecordingEventsForLoi, labelEntries must be empty", "{\"msg%{public}.0s\":\"getServiceLabelsAndLabeledRecordingEventsForLoi, labelEntries must be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11, v12, v21, v22, v23, v24, v25);
  }

  uint64_t v13 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_25631F000, v14, v15, "{\"msg%{public}.0s\":\"getServiceLabelsAndLabeledRecordingEventsForLoi, labelEntries must be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v16, v17, v18, v19, v21, v22, v23, v24, v25);
  }

  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

uint64_t CLMicroLocationLearner::learnMagicalMomentsModelInternal(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

void CLSqliteDatabase::init()
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v0 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_5(&dword_25631F000, v1, v2, "{\"msg%{public}.0s\":\"database init failed: db filename is empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, v17[0]);
  }

  uint64_t v7 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v7))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_3_0(&dword_25631F000, v7, v8, v9, "database init failed: db filename is empty", "{\"msg%{public}.0s\":\"database init failed: db filename is empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17);
  }

  int v10 = _CLLogObjectForCategory_MicroLocation_Default();
  if (OUTLINED_FUNCTION_8(v10))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_6(&dword_25631F000, v11, v12, "{\"msg%{public}.0s\":\"database init failed: db filename is empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17[0]);
  }
}

uint64_t CLSqliteDatabase::prepareStatementNoCache()
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v1 = _CLLogObjectForCategory_MicroLocation_Default();
  if (OUTLINED_FUNCTION_5_0(v1))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_25631F000, v2, v3, "{\"msg%{public}.0s\":\"mutex locked assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v20, v21, v22, v23, v24[0]);
  }

  uint64_t v8 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v8))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3_0(&dword_25631F000, v8, v9, v10, "mutex locked assertion failed", "{\"msg%{public}.0s\":\"mutex locked assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v24);
  }

  uint64_t v11 = _CLLogObjectForCategory_MicroLocation_Default();
  if (OUTLINED_FUNCTION_4_0(v11))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_25631F000, v12, v13, "{\"msg%{public}.0s\":\"mutex locked assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, v20, v21, v22, v23, v24[0]);
  }

  uint64_t v18 = abort_report_np();
  return CLMicroLocationDatabaseColumns::convert_from_sql<std::string>::convert(v18);
}

#error "2564DCA30: call analysis failed (funcsize=61)"

#error "2564DCB58: call analysis failed (funcsize=61)"

#error "2564DCC80: call analysis failed (funcsize=60)"

#error "2564DCDA0: call analysis failed (funcsize=61)"

#error "2564DCEC8: call analysis failed (funcsize=61)"

#error "2564DCFF0: call analysis failed (funcsize=60)"

#error "2564DD110: call analysis failed (funcsize=60)"

#error "2564DD230: call analysis failed (funcsize=61)"

#error "2564DD358: call analysis failed (funcsize=61)"

#error "2564DD480: call analysis failed (funcsize=61)"

uint64_t CLMicroLocationFingerprintDataSources::create()
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  uint64_t v0 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_2_1();
    _os_log_impl(&dword_25631F000, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Invalid type chosen\", \"enum value\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
  }

  uint64_t v1 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v1))
  {
    OUTLINED_FUNCTION_2_1();
    _os_signpost_emit_with_name_impl(&dword_25631F000, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Invalid type chosen", "{\"msg%{public}.0s\":\"Invalid type chosen\", \"enum value\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
  }

  int v2 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    OUTLINED_FUNCTION_2_1();
    _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Invalid type chosen\", \"enum value\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
  }

  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

void CLMicroLocationProto::BleLeechedBeacons::MergeFrom()
{
}

void CLMicroLocationProto::BleLeechedBeacons::CheckTypeAndMergeFrom()
{
  __assert_rtn("down_cast", "common.h", 348, "f == NULL || dynamic_cast<To>(f) != NULL");
}

void CLMicroLocationProto::WiFiRssi::MergeFrom()
{
}

void CLMicroLocationProto::UwbRange::MergeFrom()
{
}

{
  __assert_rtn("set_datatype", "microlocation.pb.h", 9933, "::CLMicroLocationProto::DataType_IsValid(value)");
}

void CLMicroLocationProto::WiFiRange::MergeFrom()
{
}

void CLMicroLocationProto::ATVAirplayBluetoothRssi::MergeFrom()
{
}

void CLMicroLocationProto::HomeKitBluetoothRssi::MergeFrom()
{
}

{
  __assert_rtn("set_devicetype", "microlocation.pb.h", 10668, "::CLMicroLocationProto::HomeKitBluetoothRssi_DeviceType_IsValid(value)");
}

{
  __assert_rtn("set_datatype", "microlocation.pb.h", 10531, "::CLMicroLocationProto::DataType_IsValid(value)");
}

void CLMicroLocationProto::Measurement::MergeFrom()
{
}

void CLMicroLocationProto::FingerprintMeasurement::MergeFrom()
{
}

void CLMicroLocationProto::AnchorMetadata::MergeFrom()
{
}

{
  __assert_rtn("set_anchorstatus", "microlocation.pb.h", 11694, "::CLMicroLocationProto::AnchorStatus_IsValid(value)");
}

void CLMicroLocationProto::Model::MergeFrom()
{
}

{
  __assert_rtn("set_qualityindicator", "microlocation.pb.h", 12880, "::CLMicroLocationProto::Model_ModelQualityLevel_IsValid(value)");
}

{
  __assert_rtn("set_modeltype", "microlocation.pb.h", 12679, "::CLMicroLocationProto::Model_ModelType_IsValid(value)");
}

{
  __assert_rtn("set_generationalgorithm", "microlocation.pb.h", 12656, "::CLMicroLocationProto::Model_GenerationAlgorithm_IsValid(value)");
}

void CLMicroLocationProto::ReceivedEventAction::MergeFrom()
{
}

{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 13271, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void CLMicroLocationProto::RecordingRequest::MergeFrom()
{
}

{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 13531, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void CLMicroLocationProto::AppLaunch::MergeFrom()
{
}

void CLMicroLocationProto::BacklightOn::MergeFrom()
{
}

void CLMicroLocationProto::BatteryChargerConnected::MergeFrom()
{
}

void CLMicroLocationProto::TruthLabelDonation::MergeFrom()
{
}

void CLMicroLocationProto::ForcedRecording::MergeFrom()
{
}

void CLMicroLocationProto::HomeKitAccessory::MergeFrom()
{
}

void CLMicroLocationProto::HomeKitScene::MergeFrom()
{
}

void CLMicroLocationProto::NowPlaying::MergeFrom()
{
}

void CLMicroLocationProto::LearnModel::MergeFrom()
{
}

void CLMicroLocationProto::LearnCompleted::MergeFrom()
{
}

void CLMicroLocationProto::SensorsScanComplete::MergeFrom()
{
}

void CLMicroLocationProto::StartSpectating::MergeFrom()
{
}

void CLMicroLocationProto::StopSpectating::MergeFrom()
{
}

void CLMicroLocationProto::ServiceCreate::MergeFrom()
{
}

void CLMicroLocationProto::ServiceDelete::MergeFrom()
{
}

void CLMicroLocationProto::ServiceConnect::MergeFrom()
{
}

void CLMicroLocationProto::ServiceDisconnect::MergeFrom()
{
}

void CLMicroLocationProto::ServiceStartUpdating::MergeFrom()
{
}

void CLMicroLocationProto::ServiceStopUpdating::MergeFrom()
{
}

void CLMicroLocationProto::RequestObservation::MergeFrom()
{
}

void CLMicroLocationProto::RequestPrediction::MergeFrom()
{
}

void CLMicroLocationProto::MiloInit::MergeFrom()
{
}

void CLMicroLocationProto::MotionEvent::MergeFrom()
{
}

{
  __assert_rtn("set_status", "microlocation.pb.h", 18149, "::CLMicroLocationProto::MotionEvent_Status_IsValid(value)");
}

{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 18056, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void CLMicroLocationProto::LegacyThrottle::MergeFrom()
{
}

void CLMicroLocationProto::RetrievedLoi::MergeFrom()
{
}

{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 18388, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void CLMicroLocationProto::TriggerEvent::MergeFrom()
{
}

{
  __assert_rtn("set_reason", "microlocation.pb.h", 21235, "::CLMicroLocationProto::TriggerReason_IsValid(value)");
}

{
  __assert_rtn("set_requeststatus", "microlocation.pb.h", 21212, "::CLMicroLocationProto::TriggerRequestStatus_IsValid(value)");
}

{
  __assert_rtn("set_requesttype", "microlocation.pb.h", 21189, "::CLMicroLocationProto::TriggerRequestType_IsValid(value)");
}

{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 20820, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void CLMicroLocationProto::LegacyClientStatusUpdate::MergeFrom()
{
}

{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 21355, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void CLMicroLocationProto::SpectatingMotionUpdate::MergeFrom()
{
}

void CLMicroLocationProto::EnabledStateUpdate::MergeFrom()
{
}

void CLMicroLocationProto::ScreenStateUpdate::MergeFrom()
{
}

void CLMicroLocationProto::CloudBackupExport::MergeFrom()
{
}

void CLMicroLocationProto::CloudBackupImport::MergeFrom()
{
}

void CLMicroLocationProto::DataMigration::MergeFrom()
{
}

void CLMicroLocationProto::RecordingEvent::MergeFrom()
{
}

{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 20192, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void CLMicroLocationProto::WifiHistogram::MergeFrom()
{
}

void CLMicroLocationProto::AnchorAppearanceConfiguration::MergeFrom()
{
}

void CLMicroLocationProto::AnchorValueStatisticsConfiguration::MergeFrom()
{
}

void CLMicroLocationProto::Configuration::MergeFrom()
{
}

uint64_t CLMicroLocationBinaryRoiNullSpaceAlgorithm::localize()
{
  uint64_t v1 = _CLLogObjectForCategory_MicroLocation_Default();
  if (OUTLINED_FUNCTION_5_0(v1))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_25631F000, v2, v3, "{\"msg%{public}.0s\":\"must have fingerprints distance function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v22, v23, v24, v25, v26);
  }

  uint64_t v8 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v8))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_25631F000, v9, v10, v11, "must have fingerprints distance function", "{\"msg%{public}.0s\":\"must have fingerprints distance function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v22, v23, v24, v25, v26);
  }

  int v14 = _CLLogObjectForCategory_MicroLocation_Default();
  if (OUTLINED_FUNCTION_4_0(v14))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_25631F000, v15, v16, "{\"msg%{public}.0s\":\"must have fingerprints distance function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v22, v23, v24, v25, v26);
  }

  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

{
  void *v0;
  NSObject *v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t v26;

  uint64_t v1 = _CLLogObjectForCategory_MicroLocation_Default();
  if (OUTLINED_FUNCTION_5_0(v1))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_25631F000, v2, v3, "{\"msg%{public}.0s\":\"Cannot localize on invalid model!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v22, v23, v24, v25, v26);
  }

  uint64_t v8 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v8))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_25631F000, v9, v10, v11, "Cannot localize on invalid model!", "{\"msg%{public}.0s\":\"Cannot localize on invalid model!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v22, v23, v24, v25, v26);
  }

  int v14 = _CLLogObjectForCategory_MicroLocation_Default();
  if (OUTLINED_FUNCTION_4_0(v14))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_25631F000, v15, v16, "{\"msg%{public}.0s\":\"Cannot localize on invalid model!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v22, v23, v24, v25, v26);
  }

  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

uint64_t CLMicroLocationBinaryRoiNullSpaceAlgorithm::getAdjustmentPowerForBinaryRoiDetectionThreshold()
{
  uint64_t v1 = _CLLogObjectForCategory_MicroLocation_Default();
  if (OUTLINED_FUNCTION_5_0(v1))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_25631F000, v2, v3, "{\"msg%{public}.0s\":\"Detection threshold must be: 0 < THR < 1.0!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v23, v24, v25, v26, v27);
  }

  uint64_t v8 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v8))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_25631F000, v9, v10, v11, "Detection threshold must be: 0 < THR < 1.0!", "{\"msg%{public}.0s\":\"Detection threshold must be: 0 < THR < 1.0!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v23, v24, v25, v26, v27);
  }

  int v14 = _CLLogObjectForCategory_MicroLocation_Default();
  if (OUTLINED_FUNCTION_4_0(v14))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_25631F000, v15, v16, "{\"msg%{public}.0s\":\"Detection threshold must be: 0 < THR < 1.0!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v23, v24, v25, v26, v27);
  }

  uint64_t v21 = abort_report_np();
  return CLMicroLocationBinaryRoiNullSpaceAlgorithm::createReducedDistancesMap(v21);
}

uint64_t CLMicroLocationBinaryRoiNullSpaceAlgorithm::createReducedDistancesMap()
{
  uint64_t v1 = _CLLogObjectForCategory_MicroLocation_Default();
  if (OUTLINED_FUNCTION_5_0(v1))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_25631F000, v2, v3, "{\"msg%{public}.0s\":\"Missing key kSettingsNullSpaceRoiPercentile\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v22, v23, v24, v25, v26);
  }

  uint64_t v8 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v8))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_25631F000, v9, v10, v11, "Missing key kSettingsNullSpaceRoiPercentile", "{\"msg%{public}.0s\":\"Missing key kSettingsNullSpaceRoiPercentile\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v22, v23, v24, v25, v26);
  }

  int v14 = _CLLogObjectForCategory_MicroLocation_Default();
  if (OUTLINED_FUNCTION_4_0(v14))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_25631F000, v15, v16, "{\"msg%{public}.0s\":\"Missing key kSettingsNullSpaceRoiPercentile\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v22, v23, v24, v25, v26);
  }

  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

{
  void *v0;
  NSObject *v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t v26;

  uint64_t v1 = _CLLogObjectForCategory_MicroLocation_Default();
  if (OUTLINED_FUNCTION_5_0(v1))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_25631F000, v2, v3, "{\"msg%{public}.0s\":\"Missing key kSettingsNullSpaceNotRoiPercentile\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v22, v23, v24, v25, v26);
  }

  uint64_t v8 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v8))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_25631F000, v9, v10, v11, "Missing key kSettingsNullSpaceNotRoiPercentile", "{\"msg%{public}.0s\":\"Missing key kSettingsNullSpaceNotRoiPercentile\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v22, v23, v24, v25, v26);
  }

  int v14 = _CLLogObjectForCategory_MicroLocation_Default();
  if (OUTLINED_FUNCTION_4_0(v14))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_25631F000, v15, v16, "{\"msg%{public}.0s\":\"Missing key kSettingsNullSpaceNotRoiPercentile\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v22, v23, v24, v25, v26);
  }

  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

void CLReducerFunction<std::multiset<double>,double>::parametrizedPercentileSorted()
{
}

{
  __assert_rtn("parametrizedPercentileSorted", "CLReducerFunction.h", 81, "prctile >= 0.0 && prctile <= 1.0");
}

{
  __assert_rtn("parametrizedPercentileSorted", "CLReducerFunction.h", 93, "(startIndex >= 0) && (startIndex <= static_cast<int>(container.size()) - 2)");
}

uint64_t CLMicroLocationFingerprintVector::operator[]()
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  uint64_t v0 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_0_3();
    _os_log_impl(&dword_25631F000, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"index out of bounds\", \"ii\":%{public}llu, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
  }

  uint64_t v1 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v1))
  {
    OUTLINED_FUNCTION_0_3();
    _os_signpost_emit_with_name_impl(&dword_25631F000, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "index out of bounds", "{\"msg%{public}.0s\":\"index out of bounds\", \"ii\":%{public}llu, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
  }

  int v2 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    OUTLINED_FUNCTION_0_3();
    _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"index out of bounds\", \"ii\":%{public}llu, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
  }

  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

uint64_t CLMicroLocationSensorsLogic::setBleLink()
{
  OUTLINED_FUNCTION_0_2();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t CLMicroLocationSensorsLogic::setUwbLink()
{
  OUTLINED_FUNCTION_0_2();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t CLMicroLocationSensorsLogic::setMotionLink()
{
  OUTLINED_FUNCTION_0_2();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t CLMicroLocationSensorsLogic::setStopMotionLink()
{
  OUTLINED_FUNCTION_0_2();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t CLMicroLocationSensorsLogic::setCustomLoiRecordingFenceLink()
{
  OUTLINED_FUNCTION_0_2();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void (***std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationProto::Measurement>,std::reverse_iterator<CLMicroLocationProto::Measurement*>,std::reverse_iterator<CLMicroLocationProto::Measurement*>,std::reverse_iterator<CLMicroLocationProto::Measurement*>>(void (***a1)(void), void (***a2)(void)))(void)
{
  int v3 = a1;
  int v4 = a1;
  do
  {
    uint64_t v5 = *v4;
    v4 += 10;
    (*v5)();
    v3 += 10;
    uint64_t result = v4;
  }
  while (v4 != a2);
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationProto::Measurement>,std::__tree_const_iterator<CLMicroLocationProto::Measurement,std::__tree_node<CLMicroLocationProto::Measurement,void *> *,long>,std::__tree_const_iterator<CLMicroLocationProto::Measurement,std::__tree_node<CLMicroLocationProto::Measurement,void *> *,long>,CLMicroLocationProto::Measurement*>(uint64_t a1, uint64_t (***a2)(void))
{
  uint64_t v3 = a1 - 80;
  int v4 = (uint64_t (***)(void))(a1 - 80);
  uint64_t v5 = (uint64_t (***)(void))(a1 - 80);
  do
  {
    int v6 = *v5;
    v5 -= 10;
    uint64_t result = (*v6)(v4);
    v3 -= 80;
    BOOL v8 = v4 == a2;
    int v4 = v5;
  }
  while (!v8);
  return result;
}

void (***CLMicroLocationTriggerManager::setupCustomLoiRecordingManager())(void)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v0 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_0();
    _os_log_impl(&dword_25631F000, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Tried to setup CLMicroLocationTriggerManager with an invalide recording manager\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
  }

  uint64_t v1 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v1))
  {
    OUTLINED_FUNCTION_0();
    _os_signpost_emit_with_name_impl(&dword_25631F000, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Tried to setup CLMicroLocationTriggerManager with an invalide recording manager", "{\"msg%{public}.0s\":\"Tried to setup CLMicroLocationTriggerManager with an invalide recording manager\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
  }

  int v2 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    OUTLINED_FUNCTION_0();
    _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Tried to setup CLMicroLocationTriggerManager with an invalide recording manager\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
  }

  uint64_t v3 = (void (***)(void))abort_report_np();
  return std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationProto::RecordingEvent>,std::reverse_iterator<CLMicroLocationProto::RecordingEvent*>,std::reverse_iterator<CLMicroLocationProto::RecordingEvent*>,std::reverse_iterator<CLMicroLocationProto::RecordingEvent*>>(v3, v4);
}

void (***std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationProto::RecordingEvent>,std::reverse_iterator<CLMicroLocationProto::RecordingEvent*>,std::reverse_iterator<CLMicroLocationProto::RecordingEvent*>,std::reverse_iterator<CLMicroLocationProto::RecordingEvent*>>(void (***a1)(void), void (***a2)(void)))(void)
{
  uint64_t v3 = a1;
  int v4 = a1;
  do
  {
    uint64_t v5 = *v4;
    v4 += 18;
    (*v5)();
    v3 += 18;
    uint64_t result = v4;
  }
  while (v4 != a2);
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationProto::RecordingEvent>,CLMicroLocationProto::RecordingEvent*,CLMicroLocationProto::RecordingEvent*,CLMicroLocationProto::RecordingEvent*>(uint64_t a1, uint64_t (***a2)(void))
{
  uint64_t v3 = a1 - 144;
  int v4 = (uint64_t (***)(void))(a1 - 144);
  uint64_t v5 = (uint64_t (***)(void))(a1 - 144);
  do
  {
    int v6 = *v5;
    v5 -= 18;
    uint64_t result = (*v6)(v4);
    v3 -= 144;
    BOOL v8 = v4 == a2;
    int v4 = v5;
  }
  while (!v8);
  return result;
}

uint64_t CLMiLoService::settingsString()
{
  uint64_t v0 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_1_1();
    OUTLINED_FUNCTION_8_0(&dword_25631F000, v1, v2, "{\"msg%{public}.0s\":\"Unsupported Service Type\", \"ServiceType\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, v21, v22, v23, v24, v25);
  }

  uint64_t v7 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v7))
  {
    OUTLINED_FUNCTION_1_1();
    OUTLINED_FUNCTION_4_2(&dword_25631F000, v8, v9, v10, "Unsupported Service Type", "{\"msg%{public}.0s\":\"Unsupported Service Type\", \"ServiceType\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11, v12, v21, v22, v23, v24, v25);
  }

  int v13 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    OUTLINED_FUNCTION_1_1();
    OUTLINED_FUNCTION_7_0(&dword_25631F000, v14, v15, "{\"msg%{public}.0s\":\"Unsupported Service Type\", \"ServiceType\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v16, v17, v18, v19, v21, v22, v23, v24, v25);
  }

  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

uint64_t CLMiLoService::uint64ToLocationTypesBitset()
{
  uint64_t v0 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_25631F000, v1, v2, "{\"msg%{public}.0s\":\"Error converting uint to location types: Value does not fit into bitset\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, v21, v22, v23, v24, v25);
  }

  uint64_t v7 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v7))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_25631F000, v8, v9, v10, "Error converting uint to location types: Value does not fit into bitset", "{\"msg%{public}.0s\":\"Error converting uint to location types: Value does not fit into bitset\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11, v12, v21, v22, v23, v24, v25);
  }

  int v13 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_25631F000, v14, v15, "{\"msg%{public}.0s\":\"Error converting uint to location types: Value does not fit into bitset\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v16, v17, v18, v19, v21, v22, v23, v24, v25);
  }

  abort_report_np();
  return CLMiLoService::updateModel();
}

uint64_t CLMiLoService::updateModel()
{
  uint64_t v0 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_25631F000, v1, v2, "{\"msg%{public}.0s\":\"Update model - got null pointer\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, v21, v22, v23, v24, v25);
  }

  uint64_t v7 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v7))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_25631F000, v8, v9, v10, "Update model - got null pointer", "{\"msg%{public}.0s\":\"Update model - got null pointer\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11, v12, v21, v22, v23, v24, v25);
  }

  int v13 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_25631F000, v14, v15, "{\"msg%{public}.0s\":\"Update model - got null pointer\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v16, v17, v18, v19, v21, v22, v23, v24, v25);
  }

  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

uint64_t CLMiLoService::modelTypeByServiceAndLocationType()
{
  uint64_t v0 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_2_1();
    OUTLINED_FUNCTION_8_0(&dword_25631F000, v1, v2, "{\"msg%{public}.0s\":\"Service Type unsupported \", \"service type\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, v21, v22, v23, v24, buf);
  }

  uint64_t v7 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v7))
  {
    OUTLINED_FUNCTION_2_1();
    OUTLINED_FUNCTION_4_2(&dword_25631F000, v8, v9, v10, "Service Type unsupported ", "{\"msg%{public}.0s\":\"Service Type unsupported \", \"service type\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11, v12, v21, v22, v23, v24, buf);
  }

  int v13 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO)) {
    OUTLINED_FUNCTION_7_0(&dword_25631F000, v14, v15, "{\"msg%{public}.0s\":\"Service Type unsupported \", \"service type\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v16, v17, v18, v19, v21, v22, v23, v24, 3u);
  }

  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

void (***std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationProto::TriggerEvent>,std::reverse_iterator<CLMicroLocationProto::TriggerEvent*>,std::reverse_iterator<CLMicroLocationProto::TriggerEvent*>,std::reverse_iterator<CLMicroLocationProto::TriggerEvent*>>(void (***a1)(void), void (***a2)(void)))(void)
{
  int v3 = a1;
  int v4 = a1;
  do
  {
    int v5 = *v4;
    v4 += 11;
    (*v5)();
    v3 += 11;
    uint64_t result = v4;
  }
  while (v4 != a2);
  return result;
}

void (***std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationProto::WiFiRssi>,std::reverse_iterator<CLMicroLocationProto::WiFiRssi*>,std::reverse_iterator<CLMicroLocationProto::WiFiRssi*>,std::reverse_iterator<CLMicroLocationProto::WiFiRssi*>>(void (***a1)(void), void (***a2)(void)))(void)
{
  int v3 = a1;
  int v4 = a1;
  do
  {
    int v5 = *v4;
    v4 += 6;
    (*v5)();
    v3 += 6;
    uint64_t result = v4;
  }
  while (v4 != a2);
  return result;
}

void CLMicroLocationFingerprint::removeExceedingMeasurements()
{
  uint64_t v0 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_5(&dword_25631F000, v1, v2, "{\"msg%{public}.0s\":\"number of measurements still exceeds maximum\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, v20);
  }

  uint64_t v7 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v7))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_6_1(&dword_25631F000, v8, v9, v10, "number of measurements still exceeds maximum", "{\"msg%{public}.0s\":\"number of measurements still exceeds maximum\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11, v12, v20);
  }

  int v13 = _CLLogObjectForCategory_MicroLocation_Default();
  if (OUTLINED_FUNCTION_8(v13))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_6(&dword_25631F000, v14, v15, "{\"msg%{public}.0s\":\"number of measurements still exceeds maximum\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v16, v17, v18, v19, v20);
  }
}

uint64_t ULSettings::getFingerprintDistanceFunctionParamsForType()
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  uint64_t v0 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_2_1();
    _os_log_impl(&dword_25631F000, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unsupported distance function type\", \"type\":%{public}u, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
  }

  uint64_t v1 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v1))
  {
    OUTLINED_FUNCTION_2_1();
    _os_signpost_emit_with_name_impl(&dword_25631F000, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unsupported distance function type", "{\"msg%{public}.0s\":\"Unsupported distance function type\", \"type\":%{public}u, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
  }

  uint64_t v2 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    OUTLINED_FUNCTION_2_1();
    _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Unsupported distance function type\", \"type\":%{public}u, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
  }

  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

uint64_t CLMicroLocationSingleClusterNullSpaceAlgorithm::localize()
{
  uint64_t v1 = _CLLogObjectForCategory_MicroLocation_Default();
  if (OUTLINED_FUNCTION_5_0(v1))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_25631F000, v2, v3, "{\"msg%{public}.0s\":\"must have fingerprints distance function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v22, v23, v24, v25, v26);
  }

  uint64_t v8 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v8))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_25631F000, v9, v10, v11, "must have fingerprints distance function", "{\"msg%{public}.0s\":\"must have fingerprints distance function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v22, v23, v24, v25, v26);
  }

  uint64_t v14 = _CLLogObjectForCategory_MicroLocation_Default();
  if (OUTLINED_FUNCTION_4_0(v14))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_25631F000, v15, v16, "{\"msg%{public}.0s\":\"must have fingerprints distance function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v22, v23, v24, v25, v26);
  }

  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

{
  void *v0;
  NSObject *v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t v26;

  uint64_t v1 = _CLLogObjectForCategory_MicroLocation_Default();
  if (OUTLINED_FUNCTION_5_0(v1))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_25631F000, v2, v3, "{\"msg%{public}.0s\":\"Cannot localize on invalid model!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v22, v23, v24, v25, v26);
  }

  uint64_t v8 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v8))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_25631F000, v9, v10, v11, "Cannot localize on invalid model!", "{\"msg%{public}.0s\":\"Cannot localize on invalid model!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v22, v23, v24, v25, v26);
  }

  uint64_t v14 = _CLLogObjectForCategory_MicroLocation_Default();
  if (OUTLINED_FUNCTION_4_0(v14))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_25631F000, v15, v16, "{\"msg%{public}.0s\":\"Cannot localize on invalid model!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v22, v23, v24, v25, v26);
  }

  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationProto::TriggerEvent>,CLMicroLocationProto::TriggerEvent*,CLMicroLocationProto::TriggerEvent*,CLMicroLocationProto::TriggerEvent*>(uint64_t a1, uint64_t (***a2)(void))
{
  uint64_t v3 = a1 - 88;
  int v4 = (uint64_t (***)(void))(a1 - 88);
  int v5 = (uint64_t (***)(void))(a1 - 88);
  do
  {
    int v6 = *v5;
    v5 -= 11;
    uint64_t result = (*v6)(v4);
    v3 -= 88;
    BOOL v8 = v4 == a2;
    int v4 = v5;
  }
  while (!v8);
  return result;
}

void CLMicroLocationSemiSupervisedAlgorithm::learnSelfTrainingSemiSupervisedModel(NSObject **a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  int v2 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_0_1();
    _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Error, localization probabilities were not sorted in descending order\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, 0x26u);
  }

  uint64_t v3 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v3))
  {
    OUTLINED_FUNCTION_0_1();
    _os_signpost_emit_with_name_impl(&dword_25631F000, v3, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Error, localization probabilities were not sorted in descending order", "{\"msg%{public}.0s\":\"Error, localization probabilities were not sorted in descending order\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, 0x26u);
  }

  int v4 = _CLLogObjectForCategory_MicroLocation_Default();
  *a1 = v4;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    OUTLINED_FUNCTION_0_1();
    _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Error, localization probabilities were not sorted in descending order\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, 0x26u);
  }
}

uint64_t CLMicroLocationSemiSupervisedAlgorithm::learnSelfTrainingSemiSupervisedModel()
{
  OUTLINED_FUNCTION_0_2();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void CLMicroLocationPublishHelper::duetEventsFromLocalizationResultMeasurement()
{
  uint64_t v0 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_5(&dword_25631F000, v1, v2, "{\"msg%{public}.0s\":\"localization results vector cannot be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, v20);
  }

  int v7 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v7))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_6_1(&dword_25631F000, v8, v9, v10, "localization results vector cannot be empty", "{\"msg%{public}.0s\":\"localization results vector cannot be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11, v12, v20);
  }

  int v13 = _CLLogObjectForCategory_MicroLocation_Default();
  if (OUTLINED_FUNCTION_8(v13))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_6(&dword_25631F000, v14, v15, "{\"msg%{public}.0s\":\"localization results vector cannot be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v16, v17, v18, v19, v20);
  }
}

void CLMicroLocationPublishHelper::biomePublicEventsFromLocalizationResultMeasurement()
{
  uint64_t v0 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_5(&dword_25631F000, v1, v2, "{\"msg%{public}.0s\":\"localization results vector cannot be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, v20);
  }

  int v7 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v7))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_6_1(&dword_25631F000, v8, v9, v10, "localization results vector cannot be empty", "{\"msg%{public}.0s\":\"localization results vector cannot be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11, v12, v20);
  }

  int v13 = _CLLogObjectForCategory_MicroLocation_Default();
  if (OUTLINED_FUNCTION_8(v13))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_6(&dword_25631F000, v14, v15, "{\"msg%{public}.0s\":\"localization results vector cannot be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v16, v17, v18, v19, v20);
  }
}

void CLMicroLocationPublishHelper::biomeRestrictedEventsFromLocalizationResultMeasurement()
{
  uint64_t v0 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_5(&dword_25631F000, v1, v2, "{\"msg%{public}.0s\":\"localization results vector cannot be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, v20);
  }

  int v7 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v7))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_6_1(&dword_25631F000, v8, v9, v10, "localization results vector cannot be empty", "{\"msg%{public}.0s\":\"localization results vector cannot be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11, v12, v20);
  }

  int v13 = _CLLogObjectForCategory_MicroLocation_Default();
  if (OUTLINED_FUNCTION_8(v13))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_6(&dword_25631F000, v14, v15, "{\"msg%{public}.0s\":\"localization results vector cannot be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v16, v17, v18, v19, v20);
  }
}

uint64_t CLMicroLocationRecorder::recordMeasurementBatch()
{
  uint64_t v0 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_25631F000, v1, v2, "{\"msg%{public}.0s\":\"Assertion failed, no current transaction when recording batch of measurementWrappers\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, v22, v23, v24, v25, v26);
  }

  int v7 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v7))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_25631F000, v8, v9, v10, "Assertion failed, no current transaction when recording batch of measurementWrappers", "{\"msg%{public}.0s\":\"Assertion failed, no current transaction when recording batch of measurementWrappers\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11, v12, v22, v23, v24, v25, v26);
  }

  int v13 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_25631F000, v14, v15, "{\"msg%{public}.0s\":\"Assertion failed, no current transaction when recording batch of measurementWrappers\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v16, v17, v18, v19, v22, v23, v24, v25, v26);
  }

  uint64_t v20 = abort_report_np();
  return CLMicroLocationRecorder::recordEvent(v20);
}

uint64_t CLMicroLocationRecorder::recordEvent()
{
  uint64_t v0 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_25631F000, v1, v2, "{\"msg%{public}.0s\":\"Assertion failed, no current transaction when recording an event\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, v21, v22, v23, v24, v25);
  }

  int v7 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v7))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_25631F000, v8, v9, v10, "Assertion failed, no current transaction when recording an event", "{\"msg%{public}.0s\":\"Assertion failed, no current transaction when recording an event\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11, v12, v21, v22, v23, v24, v25);
  }

  int v13 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_25631F000, v14, v15, "{\"msg%{public}.0s\":\"Assertion failed, no current transaction when recording an event\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v16, v17, v18, v19, v21, v22, v23, v24, v25);
  }

  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

#error "2564E0418: call analysis failed (funcsize=58)"

#error "2564E052C: call analysis failed (funcsize=58)"

#error "2564E0640: call analysis failed (funcsize=58)"

#error "2564E0754: call analysis failed (funcsize=58)"

#error "2564E0868: call analysis failed (funcsize=58)"

#error "2564E097C: call analysis failed (funcsize=58)"

#error "2564E0A90: call analysis failed (funcsize=58)"

#error "2564E0BA4: call analysis failed (funcsize=58)"

#error "2564E0CB8: call analysis failed (funcsize=58)"

#error "2564E0DCC: call analysis failed (funcsize=58)"

uint64_t CLMicroLocationNearestNeighborAlgorithm::localize()
{
  uint64_t v0 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_25631F000, v1, v2, "{\"msg%{public}.0s\":\"must have fingerprints distance function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, v21, v22, v23, v24, v25);
  }

  int v7 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v7))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_25631F000, v8, v9, v10, "must have fingerprints distance function", "{\"msg%{public}.0s\":\"must have fingerprints distance function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11, v12, v21, v22, v23, v24, v25);
  }

  int v13 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_25631F000, v14, v15, "{\"msg%{public}.0s\":\"must have fingerprints distance function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v16, v17, v18, v19, v21, v22, v23, v24, v25);
  }

  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

{
  NSObject *v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  NSObject *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  NSObject *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t v25;

  uint64_t v0 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_25631F000, v1, v2, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, v21, v22, v23, v24, v25);
  }

  int v7 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_signpost_enabled(v7))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_25631F000, v8, v9, v10, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11, v12, v21, v22, v23, v24, v25);
  }

  int v13 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_25631F000, v14, v15, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v16, v17, v18, v19, v21, v22, v23, v24, v25);
  }

  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

uint64_t sub_2564E1180()
{
  return MEMORY[0x270EEE628]();
}

uint64_t sub_2564E1190()
{
  return MEMORY[0x270EEE638]();
}

uint64_t sub_2564E11A0()
{
  return MEMORY[0x270EEE658]();
}

uint64_t sub_2564E11B0()
{
  return MEMORY[0x270EEE670]();
}

uint64_t sub_2564E11C0()
{
  return MEMORY[0x270EEE688]();
}

uint64_t sub_2564E11D0()
{
  return MEMORY[0x270EEEA60]();
}

uint64_t sub_2564E11E0()
{
  return MEMORY[0x270EF0070]();
}

uint64_t sub_2564E11F0()
{
  return MEMORY[0x270EF0120]();
}

uint64_t sub_2564E1200()
{
  return MEMORY[0x270EF0178]();
}

uint64_t sub_2564E1210()
{
  return MEMORY[0x270F9CE70]();
}

uint64_t sub_2564E1220()
{
  return MEMORY[0x270F9CE78]();
}

uint64_t sub_2564E1230()
{
  return MEMORY[0x270F9CE98]();
}

uint64_t sub_2564E1240()
{
  return MEMORY[0x270F9CEA0]();
}

uint64_t sub_2564E1250()
{
  return MEMORY[0x270F9CEB0]();
}

uint64_t sub_2564E1260()
{
  return MEMORY[0x270F9CEC0]();
}

uint64_t sub_2564E1270()
{
  return MEMORY[0x270F9CEC8]();
}

uint64_t sub_2564E1280()
{
  return MEMORY[0x270F9CEE0]();
}

uint64_t sub_2564E1290()
{
  return MEMORY[0x270F9CEE8]();
}

uint64_t sub_2564E12A0()
{
  return MEMORY[0x270F9CEF0]();
}

uint64_t sub_2564E12B0()
{
  return MEMORY[0x270F9CEF8]();
}

uint64_t sub_2564E12C0()
{
  return MEMORY[0x270F9CF00]();
}

uint64_t sub_2564E12D0()
{
  return MEMORY[0x270F9CF08]();
}

uint64_t sub_2564E12E0()
{
  return MEMORY[0x270F9CF10]();
}

uint64_t sub_2564E12F0()
{
  return MEMORY[0x270F9CF20]();
}

uint64_t sub_2564E1300()
{
  return MEMORY[0x270FA2E00]();
}

uint64_t sub_2564E1310()
{
  return MEMORY[0x270FA2E08]();
}

uint64_t sub_2564E1320()
{
  return MEMORY[0x270FA2E20]();
}

uint64_t sub_2564E1330()
{
  return MEMORY[0x270FA1618]();
}

uint64_t sub_2564E1340()
{
  return MEMORY[0x270FA1620]();
}

uint64_t sub_2564E1350()
{
  return MEMORY[0x270EEA9F0]();
}

uint64_t sub_2564E1360()
{
  return MEMORY[0x270EEAB08]();
}

uint64_t sub_2564E1370()
{
  return MEMORY[0x270EEAB18]();
}

uint64_t sub_2564E1380()
{
  return MEMORY[0x270EEAB28]();
}

uint64_t sub_2564E1390()
{
  return MEMORY[0x270EEABE8]();
}

uint64_t sub_2564E13A0()
{
  return MEMORY[0x270EEAC10]();
}

uint64_t sub_2564E13B0()
{
  return MEMORY[0x270EEAC40]();
}

uint64_t sub_2564E13C0()
{
  return MEMORY[0x270EEAC68]();
}

uint64_t sub_2564E13D0()
{
  return MEMORY[0x270EEAC78]();
}

uint64_t sub_2564E13E0()
{
  return MEMORY[0x270EEAC90]();
}

uint64_t sub_2564E13F0()
{
  return MEMORY[0x270EEACC0]();
}

uint64_t sub_2564E1400()
{
  return MEMORY[0x270EEACD0]();
}

uint64_t sub_2564E1410()
{
  return MEMORY[0x270EEACE0]();
}

uint64_t sub_2564E1420()
{
  return MEMORY[0x270EF1818]();
}

uint64_t sub_2564E1430()
{
  return MEMORY[0x270EF19B0]();
}

uint64_t sub_2564E1440()
{
  return MEMORY[0x270EF19E8]();
}

uint64_t sub_2564E1450()
{
  return MEMORY[0x270F9D708]();
}

uint64_t sub_2564E1460()
{
  return MEMORY[0x270F9D7E0]();
}

uint64_t sub_2564E1470()
{
  return MEMORY[0x270FA2E40]();
}

uint64_t sub_2564E1480()
{
  return MEMORY[0x270FA2E60]();
}

uint64_t sub_2564E1490()
{
  return MEMORY[0x270FA1170]();
}

uint64_t sub_2564E14A0()
{
  return MEMORY[0x270FA1180]();
}

uint64_t sub_2564E14B0()
{
  return MEMORY[0x270F9E530]();
}

uint64_t sub_2564E14C0()
{
  return MEMORY[0x270F9E560]();
}

uint64_t sub_2564E14D0()
{
  return MEMORY[0x270F9E670]();
}

uint64_t sub_2564E14E0()
{
  return MEMORY[0x270F9E7E8]();
}

uint64_t sub_2564E14F0()
{
  return MEMORY[0x270F9E7F0]();
}

uint64_t sub_2564E1500()
{
  return MEMORY[0x270F9E9B0]();
}

uint64_t sub_2564E1510()
{
  return MEMORY[0x270F9EB28]();
}

uint64_t sub_2564E1520()
{
  return MEMORY[0x270F9EFE8]();
}

uint64_t sub_2564E1530()
{
  return MEMORY[0x270F9F098]();
}

uint64_t sub_2564E1540()
{
  return MEMORY[0x270F9F0A0]();
}

uint64_t sub_2564E1550()
{
  return MEMORY[0x270F9F0B0]();
}

uint64_t sub_2564E1560()
{
  return MEMORY[0x270F9F0C0]();
}

uint64_t sub_2564E1570()
{
  return MEMORY[0x270F9F4E0]();
}

uint64_t sub_2564E1580()
{
  return MEMORY[0x270F9F7C0]();
}

uint64_t sub_2564E1590()
{
  return MEMORY[0x270F9F7D0]();
}

uint64_t sub_2564E15A0()
{
  return MEMORY[0x270F9FB18]();
}

uint64_t sub_2564E15B0()
{
  return MEMORY[0x270F9FC48]();
}

uint64_t sub_2564E15C0()
{
  return MEMORY[0x270F9FC90]();
}

uint64_t AnalyticsSendEvent()
{
  return MEMORY[0x270F18A38]();
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x270F18A48]();
}

uint64_t BYSetupAssistantNeedsToRun()
{
  return MEMORY[0x270F5D220]();
}

uint64_t BiomeLibrary()
{
  return MEMORY[0x270F10AF0]();
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  MEMORY[0x270EE4278]();
  return result;
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x270EE47F0](allocator, bytes, length, bytesDeallocator);
}

CFAbsoluteTime CFDateGetAbsoluteTime(CFDateRef theDate)
{
  MEMORY[0x270EE48C8](theDate);
  return result;
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x270EE4B88]();
}

CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x270EE4B98]();
}

void CFNotificationCenterRemoveEveryObserver(CFNotificationCenterRef center, const void *observer)
{
}

uint64_t CPSqliteDatabaseDelete()
{
  return MEMORY[0x270F0CDE0]();
}

uint64_t MKBDeviceFormattedForContentProtection()
{
  return MEMORY[0x270F4AE00]();
}

uint64_t MKBGetDeviceLockState()
{
  return MEMORY[0x270F4AE40]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x270EF2A50](aClassName);
}

NSArray *__cdecl NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, BOOL expandTilde)
{
  return (NSArray *)MEMORY[0x270EF2BD8](directory, domainMask, expandTilde);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x270EF2C08](aClass);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x270EF2C38](aSelector);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x270EF2C48]();
}

uint64_t PLLogRegisteredEvent()
{
  return MEMORY[0x270F55148]();
}

CFStringRef SecCopyErrorMessageString(OSStatus status, void *reserved)
{
  return (CFStringRef)MEMORY[0x270EFD8F0](*(void *)&status, reserved);
}

OSStatus SecItemAdd(CFDictionaryRef attributes, CFTypeRef *result)
{
  return MEMORY[0x270EFD970](attributes, result);
}

OSStatus SecItemCopyMatching(CFDictionaryRef query, CFTypeRef *result)
{
  return MEMORY[0x270EFD978](query, result);
}

OSStatus SecItemDelete(CFDictionaryRef query)
{
  return MEMORY[0x270EFD980](query);
}

uint64_t ULLocationTypeToString()
{
  return MEMORY[0x270F4A858]();
}

uint64_t ULServiceQualityReasonToString()
{
  return MEMORY[0x270F4A860]();
}

uint64_t ULServiceQualityToString()
{
  return MEMORY[0x270F4A868]();
}

uint64_t ULServiceStateToString()
{
  return MEMORY[0x270F4A870]();
}

uint64_t ULServiceSuspendReasonToString()
{
  return MEMORY[0x270F4A878]();
}

uint64_t ULServiceTypeToString()
{
  return MEMORY[0x270F4A880]();
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t wireless_diagnostics::google::protobuf::MessageLite::ParseFromArray(wireless_diagnostics::google::protobuf::MessageLite *this, const void *a2)
{
  return MEMORY[0x270F9AC10](this, a2);
}

void wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(wireless_diagnostics::google::protobuf::MessageLite *this)
{
}

uint64_t wireless_diagnostics::google::protobuf::GoogleOnceInitImpl()
{
  return MEMORY[0x270F9AC48]();
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(wireless_diagnostics::google::protobuf::io::CodedInputStream *this)
{
  return MEMORY[0x270F9AC78](this);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unsigned int *a2)
{
  return MEMORY[0x270F9AC80](this, a2);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unint64_t *a2)
{
  return MEMORY[0x270F9AC88](this, a2);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unsigned int *a2)
{
  return MEMORY[0x270F9AC90](this, a2);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unint64_t *a2)
{
  return MEMORY[0x270F9AC98](this, a2);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(wireless_diagnostics::google::protobuf::io::CodedInputStream *this)
{
  return MEMORY[0x270F9ACA0](this);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(wireless_diagnostics::google::protobuf::io::CodedInputStream *this)
{
  return MEMORY[0x270F9ACB8](this);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(wireless_diagnostics::google::protobuf::io::CodedInputStream *this)
{
  return MEMORY[0x270F9ACC0](this);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(wireless_diagnostics::google::protobuf::io::CodedOutputStream *this)
{
  return MEMORY[0x270F9ACE0](this);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(wireless_diagnostics::google::protobuf::io::CodedOutputStream *this)
{
  return MEMORY[0x270F9AD10](this);
}

uint64_t wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage()
{
  return MEMORY[0x270F9AD78]();
}

void wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage(wireless_diagnostics::google::protobuf::internal::LogMessage *this)
{
}

uint64_t wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<()
{
  return MEMORY[0x270F9AD88]();
}

uint64_t wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=()
{
  return MEMORY[0x270F9ADA8]();
}

uint64_t wireless_diagnostics::google::protobuf::internal::VerifyVersion(wireless_diagnostics::google::protobuf::internal *this, uint64_t a2, uint64_t a3, const char *a4)
{
  return MEMORY[0x270F9AEF0](this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString()
{
  return MEMORY[0x270F9AEF8]();
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes()
{
  return MEMORY[0x270F9AF00]();
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, uint64_t a2, float a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return MEMORY[0x270F9AF08](this, a2, a4, a3);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return MEMORY[0x270F9AF18](this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, uint64_t a2, double a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return MEMORY[0x270F9AF28](this, a2, a4, a3);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString()
{
  return MEMORY[0x270F9AF40]();
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return MEMORY[0x270F9AF48](this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return MEMORY[0x270F9AF50](this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, uint64_t a2, const wireless_diagnostics::google::protobuf::MessageLite *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return MEMORY[0x270F9AF68](this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline()
{
  return MEMORY[0x270F9AF80]();
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes()
{
  return MEMORY[0x270F9AF90]();
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  return MEMORY[0x270F9AF98](this, a2);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return MEMORY[0x270F9AFA0](this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return MEMORY[0x270F9AFA8](this, a2, a3, a4);
}

void wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0(wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *this)
{
}

uint64_t wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap()
{
  return MEMORY[0x270F9AFC0]();
}

uint64_t wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *this)
{
  return MEMORY[0x270F9AFC8](this);
}

uint64_t wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::New(wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *this)
{
  return MEMORY[0x270F9AFD0](this);
}

uint64_t wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::Delete()
{
  return MEMORY[0x270F9AFD8]();
}

uint64_t wireless_diagnostics::google::protobuf::MessageLite::SerializeToArray(wireless_diagnostics::google::protobuf::MessageLite *this, void *a2)
{
  return MEMORY[0x270F9B010](this, a2);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(wireless_diagnostics::google::protobuf::io::CodedInputStream *this)
{
  return MEMORY[0x270F9B038](this);
}

const char *__cdecl std::runtime_error::what(const std::runtime_error *this)
{
  return (const char *)MEMORY[0x270F98200](this);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x270F98268]();
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x270F982E8](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x270F982F8](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x270F98330](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x270F983B0](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return (std::runtime_error *)MEMORY[0x270F983D0](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::runtime_error *a2)
{
  return (std::runtime_error *)MEMORY[0x270F983D8](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
}

{
  MEMORY[0x270F983E8](this);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x270F98428](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x270F98458](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x270F98498](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984A0](this, __s, __n);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x270F984B8](this, __s);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984C0](this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x270F984E0](this, __pos, __s);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

void std::string::__grow_by(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x270F98548](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x270F98560](this, __str);
}

uint64_t std::istream::operator>>()
{
  return MEMORY[0x270F98728]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x270F98758]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x270F98760]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x270F98768]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x270F98788]();
}

{
  return MEMORY[0x270F98790]();
}

{
  return MEMORY[0x270F987A0]();
}

{
  return MEMORY[0x270F987A8]();
}

{
  return MEMORY[0x270F987B0]();
}

{
  return MEMORY[0x270F987D8]();
}

{
  return MEMORY[0x270F987E0]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x270F98870]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x270F988A8]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x270F988B0]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x270F989E8](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

uint64_t std::__sort<std::__less<float,float> &,float *>()
{
  return MEMORY[0x270F98BE0]();
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return (std::locale *)MEMORY[0x270F98C70](this, a2);
}

std::locale *__cdecl std::locale::locale(std::locale *this)
{
  return (std::locale *)MEMORY[0x270F98C78](this);
}

void std::locale::~locale(std::locale *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x270F98DE8]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, double __val)
{
  return (std::string *)MEMORY[0x270F98DF8](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x270F98E08](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x270F98E10](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x270F98E20](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x270F98E38]();
}

std::bad_cast *__cdecl std::bad_cast::bad_cast(std::bad_cast *this)
{
  return (std::bad_cast *)MEMORY[0x270F98E48](this);
}

void std::bad_cast::~bad_cast(std::bad_cast *this)
{
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x270F98EC0](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x270F98ED8](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void *__cxa_get_exception_ptr(void *a1)
{
  return (void *)MEMORY[0x270F98F00](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x270F98F10](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x270F98F30](lpsrc, lpstype, lpdtype, s2d);
}

int *__error(void)
{
  return (int *)MEMORY[0x270ED7DC0]();
}

uint64_t __strlcpy_chk()
{
  return MEMORY[0x270ED7EE0]();
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x270ED7F00](*(void *)&a1);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x270FA0158]();
}

uint64_t abort_report_np()
{
  return MEMORY[0x270ED8458]();
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return MEMORY[0x270ED85F8](*(void *)&__upper_bound);
}

void bzero(void *a1, size_t a2)
{
}

void cblas_dgemv(const CBLAS_ORDER __Order, const CBLAS_TRANSPOSE __TransA, const int __M, const int __N, const double __alpha, const double *__A, const int __lda, const double *__X, const int __incX, const double __beta, double *__Y, const int __incY)
{
}

double cblas_dnrm2(const int __N, const double *__X, const int __incX)
{
  MEMORY[0x270EDE358](*(void *)&__N, __X, *(void *)&__incX);
  return result;
}

void cblas_dscal(const int __N, const double __alpha, double *__X, const int __incX)
{
}

__uint64_t clock_gettime_nsec_np(clockid_t __clock_id)
{
  return MEMORY[0x270ED8EF8](*(void *)&__clock_id);
}

int close(int a1)
{
  return MEMORY[0x270ED8F18](*(void *)&a1);
}

uint64_t container_copy_sandbox_token()
{
  return MEMORY[0x270ED8F88]();
}

uint64_t container_error_copy_unlocalized_description()
{
  return MEMORY[0x270ED8FD0]();
}

uint64_t container_query_create()
{
  return MEMORY[0x270ED9060]();
}

uint64_t container_query_free()
{
  return MEMORY[0x270ED9068]();
}

uint64_t container_query_get_last_error()
{
  return MEMORY[0x270ED9070]();
}

uint64_t container_query_operation_set_flags()
{
  return MEMORY[0x270ED9090]();
}

uint64_t container_query_set_class()
{
  return MEMORY[0x270ED90A0]();
}

uint64_t container_query_set_persona_unique_string()
{
  return MEMORY[0x270ED90C0]();
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_assert_queue_not_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x270ED9448](attr, frequency);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x270ED9460](label, attr);
}

void dispatch_resume(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x270ED94B8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x270ED94C8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x270ED94D0](dsema, timeout);
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x270ED9510](type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x270ED95A8](when, delta);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x270ED9628](__path, *(void *)&__mode);
}

void exit(int a1)
{
}

long double exp(long double __x)
{
  MEMORY[0x270ED9858](__x);
  return result;
}

void free(void *a1)
{
}

long double log(long double __x)
{
  MEMORY[0x270EDA0A8](__x);
  return result;
}

uint64_t mach_continuous_time(void)
{
  return MEMORY[0x270EDA158]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x270EDA288](info);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x270EDA378](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA388](count, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x270EDA458](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x270EDA498](__b, *(void *)&__c, __len);
}

double nan(const char *a1)
{
  MEMORY[0x270EDA600](a1);
  return result;
}

long double nextafter(long double __x, long double __y)
{
  MEMORY[0x270EDA710](__x, __y);
  return result;
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x270EDA760](name);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x270F9A528](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x270F9A538](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x270F9A540]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x270F9A568](a1);
}

{
  MEMORY[0x270F9A570](context);
}

{
  return (void *)MEMORY[0x270F9A588]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A590](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x270F9A5A8]();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_throw(id exception)
{
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x270F9A658](name);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x270F9A688](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x270F9A6B0](location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6D0](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6E8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x270F9A6F8]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x270F9A700]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x270F9A710]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x270F9A728]();
}

uint64_t self
{
  return MEMORY[0x270F9A730]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x270F9A880](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A888](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A890](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x270F9A898](a1);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x270F9A9F8](location, obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9AA38](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x270EDA828](a1, *(void *)&a2);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x270EDA9A0](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x270EDAA58](log);
}

uint64_t os_state_add_handler()
{
  return MEMORY[0x270EDAA78]();
}

uint64_t os_state_remove_handler()
{
  return MEMORY[0x270EDAA80]();
}

uint64_t os_transaction_create()
{
  return MEMORY[0x270EDAA90]();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

long double pow(long double __x, long double __y)
{
  MEMORY[0x270EDACF8](__x, __y);
  return result;
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF50](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x270EDAF58](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF60](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF70](a1);
}

int pthread_mutexattr_destroy(pthread_mutexattr_t *a1)
{
  return MEMORY[0x270EDAF78](a1);
}

int pthread_mutexattr_init(pthread_mutexattr_t *a1)
{
  return MEMORY[0x270EDAF80](a1);
}

int pthread_mutexattr_settype(pthread_mutexattr_t *a1, int a2)
{
  return MEMORY[0x270EDAF98](a1, *(void *)&a2);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x270EDB010]();
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x270EDB120](*(void *)&a1, a2, a3);
}

BOOL remove(const std::__fs::filesystem::path *__p, std::error_code *__ec)
{
  return MEMORY[0x270EDB1E8](__p, __ec);
}

uint64_t sandbox_extension_consume()
{
  return MEMORY[0x270EDB2B8]();
}

uint64_t sandbox_extension_release()
{
  return MEMORY[0x270EDB2D8]();
}

void (__cdecl *__cdecl signal(int a1, void (__cdecl *a2)(int)))(int)
{
  return (void (__cdecl *)(int))MEMORY[0x270EDB4D0](*(void *)&a1, a2);
}

unsigned int sleep(unsigned int a1)
{
  return MEMORY[0x270EDB508](*(void *)&a1);
}

int sqlite3_bind_text(sqlite3_stmt *a1, int a2, const char *a3, int a4, void (__cdecl *a5)(void *))
{
  return MEMORY[0x270F9B4E0](a1, *(void *)&a2, a3, *(void *)&a4, a5);
}

int sqlite3_close(sqlite3 *a1)
{
  return MEMORY[0x270F9B558](a1);
}

const void *__cdecl sqlite3_column_blob(sqlite3_stmt *a1, int iCol)
{
  return (const void *)MEMORY[0x270F9B568](a1, *(void *)&iCol);
}

int sqlite3_column_bytes(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x270F9B570](a1, *(void *)&iCol);
}

double sqlite3_column_double(sqlite3_stmt *a1, int iCol)
{
  MEMORY[0x270F9B590](a1, *(void *)&iCol);
  return result;
}

int sqlite3_column_int(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x270F9B598](a1, *(void *)&iCol);
}

sqlite3_int64 sqlite3_column_int64(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x270F9B5A0](a1, *(void *)&iCol);
}

const unsigned __int8 *__cdecl sqlite3_column_text(sqlite3_stmt *a1, int iCol)
{
  return (const unsigned __int8 *)MEMORY[0x270F9B5C0](a1, *(void *)&iCol);
}

int sqlite3_config(int a1, ...)
{
  return MEMORY[0x270F9B5E8](*(void *)&a1);
}

const char *__cdecl sqlite3_db_filename(sqlite3 *db, const char *zDbName)
{
  return (const char *)MEMORY[0x270F9B620](db, zDbName);
}

int sqlite3_db_readonly(sqlite3 *db, const char *zDbName)
{
  return MEMORY[0x270F9B630](db, zDbName);
}

const char *__cdecl sqlite3_errmsg(sqlite3 *a1)
{
  return (const char *)MEMORY[0x270F9B658](a1);
}

int sqlite3_exec(sqlite3 *a1, const char *sql, int (__cdecl *callback)(void *, int, char **, char **), void *a4, char **errmsg)
{
  return MEMORY[0x270F9B668](a1, sql, callback, a4, errmsg);
}

int sqlite3_extended_result_codes(sqlite3 *a1, int onoff)
{
  return MEMORY[0x270F9B680](a1, *(void *)&onoff);
}

int sqlite3_file_control(sqlite3 *a1, const char *zDbName, int op, void *a4)
{
  return MEMORY[0x270F9B688](a1, zDbName, *(void *)&op, a4);
}

int sqlite3_finalize(sqlite3_stmt *pStmt)
{
  return MEMORY[0x270F9B690](pStmt);
}

int sqlite3_limit(sqlite3 *a1, int id, int newVal)
{
  return MEMORY[0x270F9B6E0](a1, *(void *)&id, *(void *)&newVal);
}

int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)
{
  return MEMORY[0x270F9B710](filename, ppDb, *(void *)&flags, zVfs);
}

int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return MEMORY[0x270F9B720](db, zSql, *(void *)&nByte, ppStmt, pzTail);
}

int sqlite3_reset(sqlite3_stmt *pStmt)
{
  return MEMORY[0x270F9B730](pStmt);
}

int sqlite3_shutdown(void)
{
  return MEMORY[0x270F9B7C0]();
}

const char *__cdecl sqlite3_sql(sqlite3_stmt *pStmt)
{
  return (const char *)MEMORY[0x270F9B7F8](pStmt);
}

int sqlite3_step(sqlite3_stmt *a1)
{
  return MEMORY[0x270F9B800](a1);
}

int sqlite3_wal_checkpoint_v2(sqlite3 *db, const char *zDb, int eMode, int *pnLog, int *pnCkpt)
{
  return MEMORY[0x270F9B900](db, zDb, *(void *)&eMode, pnLog, pnCkpt);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x270EDB5B0](__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x270EDB5D0](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x270EDB5D8](*(void *)&__errnum);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x270FA0180]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x270FA0190]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x270FA0198]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x270FA01C0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x270FA01D0]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x270FA01D8]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x270FA01E0]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x270FA01E8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x270FA01F8]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x270FA0260]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x270FA02C0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x270FA02C8]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x270FA02D0]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x270FA0370]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x270FA03D0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x270FA03E0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x270FA03E8]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x270FA0440]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x270FA0448]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x270FA0450]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x270FA0478]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x270FA04C8]();
}

uint64_t swift_once()
{
  return MEMORY[0x270FA04F0]();
}

uint64_t swift_release()
{
  return MEMORY[0x270FA0520]();
}

uint64_t swift_retain()
{
  return MEMORY[0x270FA0530]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x270FA0558]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x270FA0560]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x270FA0590]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x270FA05A0]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x270FA0670]();
}

int usleep(useconds_t a1)
{
  return MEMORY[0x270EDB9E8](*(void *)&a1);
}

uint64_t xpc_transaction_exit_clean()
{
  return MEMORY[0x270EDC418]();
}