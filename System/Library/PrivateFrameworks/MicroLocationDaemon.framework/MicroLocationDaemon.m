uint64_t CLMicroLocationProto::ReceivedEvent::GetCachedSize(CLMicroLocationProto::ReceivedEvent *this)
{
  return *((unsigned int *)this + 72);
}

uint64_t CLMicroLocationProto::AppLaunch::GetCachedSize(CLMicroLocationProto::AppLaunch *this)
{
  return *((unsigned int *)this + 9);
}

void sub_256321AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_256321B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationLoiManager::handleLocationUpdate(CLMicroLocationLoiManager *this, CLLocation *a2, NSError *a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  v5 = a2;
  v6 = a3;
  if (v6)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_49);
    }
    v7 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)__p = 2082;
      *(void *)&__p[2] = "";
      __int16 v22 = 2114;
      v23 = v6;
      _os_log_impl(&dword_25631F000, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#LOI Manager, failed to get current location to enable MiLo\", \"Error\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_49);
    }
    v8 = logObject_MicroLocation_Default;
    if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)__p = 2082;
      *(void *)&__p[2] = "";
      __int16 v22 = 2114;
      v23 = v6;
      _os_signpost_emit_with_name_impl(&dword_25631F000, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#LOI Manager, failed to get current location to enable MiLo", "{\"msg%{public}.0s\":\"#LOI Manager, failed to get current location to enable MiLo\", \"Error\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    if (*((unsigned char *)this + 506))
    {
      CLMiLoLoiManagerFailedToGetLocationUpdateEvent::CLMiLoLoiManagerFailedToGetLocationUpdateEvent((CLMiLoLoiManagerFailedToGetLocationUpdateEvent *)buf);
      CLMicroLocationStateMachine::StateMachineBase::handleEvent((CLMicroLocationLoiManager *)((char *)this + 8), (CLMicroLocationStateMachine::EventBase *)buf);
      *(void *)buf = &unk_2704DC488;
      if (v24 < 0) {
        operator delete(*(void **)__p);
      }
    }
  }
  else if (*((unsigned char *)this + 506))
  {
    CLMiLoLoiManagerGotLocationUpdateEvent::CLMiLoLoiManagerGotLocationUpdateEvent((CLMiLoLoiManagerGotLocationUpdateEvent *)buf, v5);
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_49);
    }
    v9 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      [(CLLocation *)v5 coordinate];
      uint64_t v11 = v10;
      [(CLLocation *)v5 coordinate];
      v13[0] = 68289539;
      v13[1] = 0;
      __int16 v14 = 2082;
      v15 = "";
      __int16 v16 = 2049;
      uint64_t v17 = v11;
      __int16 v18 = 2049;
      uint64_t v19 = v12;
      _os_log_impl(&dword_25631F000, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#LOI Manager, got location update\", \"latitude\":\"%{private}7f\", \"longitude\":\"%{private}7f\"}", (uint8_t *)v13, 0x26u);
    }

    CLMicroLocationStateMachine::StateMachineBase::handleEvent((CLMicroLocationLoiManager *)((char *)this + 8), (CLMicroLocationStateMachine::EventBase *)buf);
    CLMiLoLoiManagerFetchedPlaceInference::~CLMiLoLoiManagerFetchedPlaceInference((id *)buf);
  }
  else
  {
    (*(void (**)(CLMicroLocationLoiManager *, CLLocation *))(*(void *)this + 40))(this, v5);
  }
}

void sub_256321E88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  CLMiLoLoiManagerFetchedPlaceInference::~CLMiLoLoiManagerFetchedPlaceInference((id *)&a15);
  _Unwind_Resume(a1);
}

void CLMicroLocationLoiManager::handleLeechedLocationUpdate(CLMicroLocationLoiManager *this, CLLocation *a2)
{
  CLMiLoLoiManagerLeechedLocationEvent::CLMiLoLoiManagerLeechedLocationEvent((CLMiLoLoiManagerLeechedLocationEvent *)v3, a2);
  CLMicroLocationStateMachine::StateMachineBase::handleEvent((CLMicroLocationLoiManager *)((char *)this + 8), (CLMicroLocationStateMachine::EventBase *)v3);
  CLMiLoLoiManagerFetchedPlaceInference::~CLMiLoLoiManagerFetchedPlaceInference(v3);
}

void sub_256321F44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CLMiLoLoiManagerFetchedPlaceInference::~CLMiLoLoiManagerFetchedPlaceInference((id *)va);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationStateMachine::StateMachineBase::handleEvent(CLMicroLocationStateMachine::StateMachineBase *this, CLMicroLocationStateMachine::EventBase *a2)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 1))
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_117);
    }
    v5 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      if (*((char *)a2 + 31) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v40, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
      }
      else
      {
        *(_OWORD *)v40 = *(_OWORD *)((char *)a2 + 8);
        *(void *)&v40[16] = *((void *)a2 + 3);
      }
      uint64_t v19 = v40;
      if (v40[23] < 0) {
        uint64_t v19 = *(unsigned char **)v40;
      }
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2081;
      *(void *)&buf[20] = v19;
      _os_log_impl(&dword_25631F000, v5, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"State Machine: Failed to handle event because current state is NULL\", \"Event\":%{private, location:escape_only}s}", buf, 0x1Cu);
      if ((v40[23] & 0x80000000) != 0) {
        operator delete(*(void **)v40);
      }
    }

    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_117);
    }
    v20 = (id)logObject_MicroLocation_Default;
    if (os_signpost_enabled(v20))
    {
      if (*((char *)a2 + 31) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v40, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
      }
      else
      {
        *(_OWORD *)v40 = *(_OWORD *)((char *)a2 + 8);
        *(void *)&v40[16] = *((void *)a2 + 3);
      }
      v21 = v40;
      if (v40[23] < 0) {
        v21 = *(unsigned char **)v40;
      }
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2081;
      *(void *)&buf[20] = v21;
      _os_signpost_emit_with_name_impl(&dword_25631F000, v20, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "State Machine: Failed to handle event because current state is NULL", "{\"msg%{public}.0s\":\"State Machine: Failed to handle event because current state is NULL\", \"Event\":%{private, location:escape_only}s}", buf, 0x1Cu);
      if ((v40[23] & 0x80000000) != 0) {
        operator delete(*(void **)v40);
      }
    }
    goto LABEL_116;
  }
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_117);
  }
  v4 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a2 + 31) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v40, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
    }
    else
    {
      *(_OWORD *)v40 = *(_OWORD *)((char *)a2 + 8);
      *(void *)&v40[16] = *((void *)a2 + 3);
    }
    v6 = v40;
    if (v40[23] < 0) {
      v6 = *(unsigned char **)v40;
    }
    uint64_t v7 = *((void *)this + 1);
    v8 = (void *)(v7 + 8);
    if (*(char *)(v7 + 31) < 0) {
      v8 = (void *)*v8;
    }
    *(_DWORD *)buf = 68289539;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2081;
    *(void *)&buf[20] = v6;
    __int16 v42 = 2081;
    v43 = v8;
    _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"State Machine: Handling Event\", \"Event\":%{private, location:escape_only}s, \"Current State\":%{private, location:escape_only}s}", buf, 0x26u);
    if ((v40[23] & 0x80000000) != 0) {
      operator delete(*(void **)v40);
    }
  }

  uint64_t v9 = *((void *)this + 1);
  uint64_t v10 = (_OWORD *)((char *)a2 + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)buf, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    *(_OWORD *)buf = *v10;
    *(void *)&buf[16] = *((void *)a2 + 3);
  }
  uint64_t v11 = std::__tree<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::__map_value_compare<std::string,std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>>>::find<std::string>(v9 + 48, (const void **)buf);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (*((void *)this + 1) + 56 == v11)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_117);
    }
    __int16 v14 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      if (*((char *)a2 + 31) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v40, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
      }
      else
      {
        *(_OWORD *)v40 = *v10;
        *(void *)&v40[16] = *((void *)a2 + 3);
      }
      v32 = v40;
      if (v40[23] < 0) {
        v32 = *(unsigned char **)v40;
      }
      uint64_t v33 = *((void *)this + 1);
      v34 = (void *)(v33 + 8);
      if (*(char *)(v33 + 31) < 0) {
        v34 = (void *)*v34;
      }
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2081;
      *(void *)&buf[20] = v32;
      __int16 v42 = 2081;
      v43 = v34;
      _os_log_impl(&dword_25631F000, v14, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"State Machine: Failed to handle event because it is not a valid event for the current state\", \"Event\":%{private, location:escape_only}s, \"Current State\":%{private, location:escape_only}s}", buf, 0x26u);
      if ((v40[23] & 0x80000000) != 0) {
        operator delete(*(void **)v40);
      }
    }

    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_117);
    }
    v20 = (id)logObject_MicroLocation_Default;
    if (os_signpost_enabled(v20))
    {
      if (*((char *)a2 + 31) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v40, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
      }
      else
      {
        *(_OWORD *)v40 = *v10;
        *(void *)&v40[16] = *((void *)a2 + 3);
      }
      v35 = v40;
      if (v40[23] < 0) {
        v35 = *(unsigned char **)v40;
      }
      uint64_t v36 = *((void *)this + 1);
      v37 = (void *)(v36 + 8);
      if (*(char *)(v36 + 31) < 0) {
        v37 = (void *)*v37;
      }
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2081;
      *(void *)&buf[20] = v35;
      __int16 v42 = 2081;
      v43 = v37;
      _os_signpost_emit_with_name_impl(&dword_25631F000, v20, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "State Machine: Failed to handle event because it is not a valid event for the current state", "{\"msg%{public}.0s\":\"State Machine: Failed to handle event because it is not a valid event for the current state\", \"Event\":%{private, location:escape_only}s, \"Current State\":%{private, location:escape_only}s}", buf, 0x26u);
      if ((v40[23] & 0x80000000) != 0) {
        operator delete(*(void **)v40);
      }
    }
LABEL_116:

    return 0;
  }
  (***(void (****)(unsigned char *__return_ptr))(v11 + 56))(buf);
  if (!buf[24])
  {
LABEL_72:
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_117);
    }
    char v24 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v25 = *((void *)this + 1);
      v26 = (void *)(v25 + 8);
      if (*(char *)(v25 + 31) < 0) {
        v26 = (void *)*v26;
      }
      *(void *)v40 = 68289283;
      *(_WORD *)&v40[8] = 2082;
      *(void *)&v40[10] = "";
      *(_WORD *)&v40[18] = 2081;
      *(void *)&v40[20] = v26;
      _os_log_impl(&dword_25631F000, v24, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"State Machine: \", \"New State\":%{private, location:escape_only}s}", v40, 0x1Cu);
    }
    goto LABEL_78;
  }
  uint64_t v12 = *((void *)this + 1);
  if (*(char *)(v12 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v40, *(const std::string::value_type **)(v12 + 8), *(void *)(v12 + 16));
  }
  else
  {
    long long v13 = *(_OWORD *)(v12 + 8);
    *(void *)&v40[16] = *(void *)(v12 + 24);
    *(_OWORD *)v40 = v13;
  }
  BOOL v15 = std::operator==[abi:ne180100]<std::string,std::string>(buf, v40);
  BOOL v16 = v15;
  if ((v40[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v40);
    if (v16) {
      goto LABEL_36;
    }
    goto LABEL_45;
  }
  if (!v15)
  {
LABEL_45:
    if (!buf[24]) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    if ((buf[23] & 0x80000000) != 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)buf, *(std::string::size_type *)&buf[8]);
    }
    else {
      std::string __p = *(std::string *)buf;
    }
    __int16 v22 = (void *)std::__tree<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::__map_value_compare<std::string,std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>>>::find<std::string>((uint64_t)this + 16, (const void **)&__p.__r_.__value_.__l.__data_);
    if ((void *)((char *)this + 24) == v22) {
      uint64_t v23 = 0;
    }
    else {
      uint64_t v23 = v22[7];
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (!v23)
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_117);
      }
      v28 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        if (!buf[24]) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        v29 = buf;
        if (buf[23] < 0) {
          v29 = *(unsigned char **)buf;
        }
        *(void *)v40 = 68289283;
        *(_WORD *)&v40[8] = 2082;
        *(void *)&v40[10] = "";
        *(_WORD *)&v40[18] = 2081;
        *(void *)&v40[20] = v29;
        _os_log_impl(&dword_25631F000, v28, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"State Machine: Failed to switch to new state because requested state doesn't exist in the state table\", \"State\":%{private, location:escape_only}s}", v40, 0x1Cu);
      }

      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_117);
      }
      v30 = (id)logObject_MicroLocation_Default;
      if (os_signpost_enabled(v30))
      {
        if (!buf[24]) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        v31 = buf;
        if (buf[23] < 0) {
          v31 = *(unsigned char **)buf;
        }
        *(void *)v40 = 68289283;
        *(_WORD *)&v40[8] = 2082;
        *(void *)&v40[10] = "";
        *(_WORD *)&v40[18] = 2081;
        *(void *)&v40[20] = v31;
        _os_signpost_emit_with_name_impl(&dword_25631F000, v30, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "State Machine: Failed to switch to new state because requested state doesn't exist in the state table", "{\"msg%{public}.0s\":\"State Machine: Failed to switch to new state because requested state doesn't exist in the state table\", \"State\":%{private, location:escape_only}s}", v40, 0x1Cu);
      }

      uint64_t v27 = 0;
      goto LABEL_79;
    }
    CLMicroLocationStateMachine::StateMachineBase::exitCurrentState(this);
    CLMicroLocationStateMachine::StateMachineBase::enterNewState(this, v23);
    goto LABEL_72;
  }
LABEL_36:
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_117);
  }
  uint64_t v17 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    if (!buf[24]) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    __int16 v18 = buf;
    if (buf[23] < 0) {
      __int16 v18 = *(unsigned char **)buf;
    }
    *(void *)v40 = 68289283;
    *(_WORD *)&v40[8] = 2082;
    *(void *)&v40[10] = "";
    *(_WORD *)&v40[18] = 2081;
    *(void *)&v40[20] = v18;
    _os_log_impl(&dword_25631F000, v17, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"State Machine: No state change requested\", \"State\":%{private, location:escape_only}s}", v40, 0x1Cu);
  }

LABEL_78:
  uint64_t v27 = 1;
LABEL_79:
  if (buf[24] && (buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  return v27;
}

void sub_256322930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  if (a26)
  {
    if (a25 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(a1);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

uint64_t std::__tree<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::__map_value_compare<std::string,std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>>>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  uint64_t v6 = a1 + 8;
  do
  {
    BOOL v7 = std::less<std::string>::operator()[abi:ne180100](v5, (const void **)(v3 + 32), a2);
    v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      v8 = (uint64_t *)v3;
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string>::operator()[abi:ne180100](v5, a2, (const void **)(v6 + 32))) {
    return v2;
  }
  return v6;
}

BOOL std::less<std::string>::operator()[abi:ne180100](uint64_t a1, const void **a2, const void **a3)
{
  int v3 = *((char *)a3 + 23);
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  if (v4 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = *a2;
  }
  if (v3 >= 0) {
    size_t v7 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v7 = (size_t)a3[1];
  }
  if (v3 >= 0) {
    v8 = a3;
  }
  else {
    v8 = *a3;
  }
  if (v7 >= v5) {
    size_t v9 = v5;
  }
  else {
    size_t v9 = v7;
  }
  int v10 = memcmp(v6, v8, v9);
  if (v10) {
    return v10 < 0;
  }
  else {
    return v5 < v7;
  }
}

void CLMiLoLoiManagerFetchedPlaceInference::~CLMiLoLoiManagerFetchedPlaceInference(id *this)
{
  *this = &unk_2704DC488;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  CLMiLoLoiManagerFetchedPlaceInference::~CLMiLoLoiManagerFetchedPlaceInference(this);
  JUMPOUT(0x25A2A6340);
}

void CLMiLoLoiManagerLeechedLocationEvent::CLMiLoLoiManagerLeechedLocationEvent(CLMiLoLoiManagerLeechedLocationEvent *this, CLLocation *a2)
{
  int v3 = a2;
  *(void *)this = &unk_2704DC488;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 1, "No Name Given");
  *(void *)this = &unk_2704DD450;
  *((void *)this + 4) = 0;
  MEMORY[0x25A2A6080]((char *)this + 8, "Leeched Location Update");
  int v4 = (void *)*((void *)this + 4);
  *((void *)this + 4) = v3;
}

void sub_256322C88(_Unwind_Exception *a1)
{
  *(void *)uint64_t v2 = v4;
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*v3);
  }

  _Unwind_Resume(a1);
}

BOOL std::operator==[abi:ne180100]<std::string,std::string>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[24];
  if (a1[24])
  {
    uint64_t v3 = a1[23];
    if ((v3 & 0x80u) == 0) {
      uint64_t v4 = a1[23];
    }
    else {
      uint64_t v4 = *((void *)a1 + 1);
    }
    uint64_t v5 = a2[23];
    int v6 = (char)v5;
    if ((v5 & 0x80u) != 0) {
      uint64_t v5 = *((void *)a2 + 1);
    }
    if (v4 == v5)
    {
      if (v6 < 0) {
        a2 = *(unsigned __int8 **)a2;
      }
      if ((v3 & 0x80) != 0)
      {
        return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
      }
      else if (a1[23])
      {
        uint64_t v7 = v3 - 1;
        do
        {
          int v9 = *a1++;
          int v8 = v9;
          int v11 = *a2++;
          int v10 = v11;
          BOOL v13 = v7-- != 0;
          BOOL v14 = v8 == v10;
          uint64_t v2 = v8 == v10;
        }
        while (v14 && v13);
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void CLMicroLocationStateMachine::StateMachineBase::exitCurrentState(CLMicroLocationStateMachine::StateMachineBase *this)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_117);
  }
  uint64_t v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *((void *)this + 1);
    uint64_t v4 = (void *)(v3 + 8);
    if (*(char *)(v3 + 31) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    int v9 = 68289283;
    int v10 = 0;
    __int16 v11 = 2082;
    uint64_t v12 = "";
    __int16 v13 = 2081;
    BOOL v14 = v4;
    _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"State Machine: Exiting State\", \"State\":%{private, location:escape_only}s}", (uint8_t *)&v9, 0x1Cu);
  }
  uint64_t v5 = *(void (****)(void, CLMicroLocationStateMachine::StateMachineBase *))(*((void *)this + 1) + 72);
  if (v5)
  {
    (**v5)(v5, this);
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_117);
    }
    int v6 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *((void *)this + 1);
      int v8 = (void *)(v7 + 8);
      if (*(char *)(v7 + 31) < 0) {
        int v8 = (void *)*v8;
      }
      int v9 = 68289283;
      int v10 = 0;
      __int16 v11 = 2082;
      uint64_t v12 = "";
      __int16 v13 = 2081;
      BOOL v14 = v8;
      _os_log_impl(&dword_25631F000, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"State Machine: State did not have an exit function\", \"State\":%{private, location:escape_only}s}", (uint8_t *)&v9, 0x1Cu);
    }
  }
}

void CLMicroLocationStateMachine::StateMachineBase::enterNewState(void *a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_117);
  }
  uint64_t v4 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (void *)(a2 + 8);
    if (*(char *)(a2 + 31) < 0) {
      uint64_t v5 = (void *)*v5;
    }
    int v11 = 68289283;
    int v12 = 0;
    __int16 v13 = 2082;
    BOOL v14 = "";
    __int16 v15 = 2081;
    BOOL v16 = v5;
    _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"State Machine: Entering new state\", \"New State\":%{private, location:escape_only}s}", (uint8_t *)&v11, 0x1Cu);
  }
  uint64_t v6 = a1[1];
  if (v6 && *(unsigned char *)(v6 + 32)) {
    a1[6] = v6;
  }
  a1[5] = v6;
  a1[1] = a2;
  uint64_t v7 = *(void (****)(void, void *))(a2 + 40);
  if (v7)
  {
    (**v7)(v7, a1);
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_117);
    }
    int v8 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = a1[1];
      int v10 = (void *)(v9 + 8);
      if (*(char *)(v9 + 31) < 0) {
        int v10 = (void *)*v10;
      }
      int v11 = 68289283;
      int v12 = 0;
      __int16 v13 = 2082;
      BOOL v14 = "";
      __int16 v15 = 2081;
      BOOL v16 = v10;
      _os_log_impl(&dword_25631F000, v8, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"State Machine: State did not have an entry function\", \"State\":%{private, location:escape_only}s}", (uint8_t *)&v11, 0x1Cu);
    }
  }
}

void CLMicroLocationLegacyEventAppLaunch::handleEvent(uint64_t a1@<X1>, double *a2@<X2>, unsigned char *a3@<X8>)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  uint64_t v3 = +[ULDefaultsSingleton shared];
  uint64_t v4 = [v3 defaultsDictionary];

  v41 = v4;
  __int16 v42 = [NSString stringWithUTF8String:"ULAppDenyList"];
  uint64_t v5 = [v4 objectForKey:v42];
  v43 = v5;
  if (v5 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    memset(&v51, 0, sizeof(v51));
    id v37 = v5;
    std::vector<std::string>::reserve(&v51, [v37 count]);
    long long v48 = 0u;
    long long v49 = 0u;
    *(_OWORD *)v46 = 0u;
    long long v47 = 0u;
    id v6 = v37;
    uint64_t v7 = [v6 countByEnumeratingWithState:v46 objects:&v53 count:16];
    if (v7)
    {
      uint64_t v8 = *(void *)v47;
      do
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          if (*(void *)v47 != v8) {
            objc_enumerationMutation(v6);
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, (char *)[*((id *)v46[1] + i) UTF8String]);
          std::vector<std::string>::pointer end = v51.__end_;
          if (v51.__end_ >= v51.__end_cap_.__value_)
          {
            unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)v51.__end_ - (char *)v51.__begin_) >> 3);
            unint64_t v13 = v12 + 1;
            if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * (((char *)v51.__end_cap_.__value_ - (char *)v51.__begin_) >> 3) > v13) {
              unint64_t v13 = 0x5555555555555556 * (((char *)v51.__end_cap_.__value_ - (char *)v51.__begin_) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v51.__end_cap_.__value_ - (char *)v51.__begin_) >> 3) >= 0x555555555555555) {
              unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v14 = v13;
            }
            __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v51.__end_cap_;
            if (v14) {
              __int16 v15 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v51.__end_cap_, v14);
            }
            else {
              __int16 v15 = 0;
            }
            BOOL v16 = v15 + v12;
            __v.__first_ = v15;
            __v.__begin_ = v16;
            __v.__end_cap_.__value_ = &v15[v14];
            long long v17 = *(_OWORD *)&__p.__begin_;
            v16->__r_.__value_.__r.__words[2] = (std::string::size_type)__p.__end_cap_.__value_;
            *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
            memset(&__p, 0, sizeof(__p));
            __v.__end_ = v16 + 1;
            std::vector<std::string>::__swap_out_circular_buffer(&v51, &__v);
            __int16 v18 = v51.__end_;
            std::__split_buffer<std::string>::~__split_buffer(&__v);
            v51.__end_ = v18;
            uint64_t v5 = v43;
            if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
              operator delete(__p.__begin_);
            }
          }
          else
          {
            long long v11 = *(_OWORD *)&__p.__begin_;
            v51.__end_->__r_.__value_.__r.__words[2] = (std::string::size_type)__p.__end_cap_.__value_;
            *(_OWORD *)&end->__r_.__value_.__l.__data_ = v11;
            v51.__end_ = end + 1;
          }
        }
        uint64_t v7 = [v6 countByEnumeratingWithState:v46 objects:&v53 count:16];
      }
      while (v7);
    }

    std::vector<std::string>::pointer begin = v51.__begin_;
    std::vector<std::string> v50 = v51;
    std::vector<std::string>::pointer v44 = v51.__end_;
    memset(&v51, 0, sizeof(v51));
    v53.__first_ = (std::__split_buffer<std::string>::pointer)&v51;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
  }
  else
  {
    memset(&__v, 0, 24);
    memset(&__p, 0, sizeof(__p));
    std::vector<std::string>::reserve(&__p, 0x12uLL);
    for (uint64_t j = 0; j != 18; ++j)
    {
      std::string::basic_string[abi:ne180100]<0>(v46, _ZGRN10ULSettings14SettingsTraitsINS_11AppDenyListEE12defaultValueE_[j]);
      std::vector<std::string>::pointer v21 = __p.__end_;
      if (__p.__end_ >= __p.__end_cap_.__value_)
      {
        unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
        unint64_t v24 = v23 + 1;
        if (v23 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v24) {
          unint64_t v24 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555) {
          unint64_t v25 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v25 = v24;
        }
        v53.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
        if (v25) {
          v26 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v25);
        }
        else {
          v26 = 0;
        }
        uint64_t v27 = v26 + v23;
        v53.__first_ = v26;
        v53.__begin_ = v27;
        v53.__end_cap_.__value_ = &v26[v25];
        long long v28 = *(_OWORD *)v46;
        v27->__r_.__value_.__r.__words[2] = v47;
        *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v28;
        v46[1] = 0;
        *(void *)&long long v47 = 0;
        v46[0] = 0;
        v53.__end_ = v27 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&__p, &v53);
        v29 = __p.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&v53);
        __p.__end_ = v29;
        uint64_t v5 = v43;
        if (SBYTE7(v47) < 0) {
          operator delete(v46[0]);
        }
      }
      else
      {
        long long v22 = *(_OWORD *)v46;
        __p.__end_->__r_.__value_.__r.__words[2] = v47;
        *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
        __p.__end_ = v21 + 1;
      }
    }
    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)&__v);
    *(_OWORD *)&__v.__first_ = *(_OWORD *)&__p.__begin_;
    __v.__end_ = __p.__end_cap_.__value_;
    memset(&__p, 0, sizeof(__p));
    v53.__first_ = (std::__split_buffer<std::string>::pointer)&__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
    std::vector<std::string>::pointer begin = __v.__first_;
    v50.__begin_ = __v.__first_;
    std::vector<std::string>::pointer v44 = __v.__begin_;
    *(_OWORD *)&v50.__end_ = *(_OWORD *)&__v.__begin_;
    memset(&__v, 0, 24);
    v53.__first_ = (std::__split_buffer<std::string>::pointer)&__v;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
  }

  if ((std::vector<std::string>::pointer)std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>((uint64_t)begin, (uint64_t)v44, (unsigned __int8 **)a1) == v44)
  {
    v30 = a2;
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_57);
    }
    v34 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a1 + 23) >= 0) {
        v35 = (std::string *)a1;
      }
      else {
        v35 = *(std::string **)a1;
      }
      v53.__first_ = (std::__split_buffer<std::string>::pointer)68289283;
      LOWORD(v53.__begin_) = 2082;
      *(std::__split_buffer<std::string>::pointer *)((char *)&v53.__begin_ + 2) = (std::__split_buffer<std::string>::pointer)"";
      WORD1(v53.__end_) = 2081;
      *(std::__split_buffer<std::string>::pointer *)((char *)&v53.__end_ + 4) = v35;
      _os_log_impl(&dword_25631F000, v34, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"appLaunch\", \"bundleIdentifier\":%{private, location:escape_only}s}", (uint8_t *)&v53, 0x1Cu);
    }
    char v32 = 1;
  }
  else
  {
    v30 = a2;
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_57);
    }
    v31 = logObject_MicroLocation_Default;
    char v32 = 0;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a1 + 23) >= 0) {
        uint64_t v33 = (std::string *)a1;
      }
      else {
        uint64_t v33 = *(std::string **)a1;
      }
      LODWORD(v53.__first_) = 136380675;
      *(std::__split_buffer<std::string>::pointer *)((char *)&v53.__first_ + 4) = v33;
      _os_log_impl(&dword_25631F000, v31, OS_LOG_TYPE_DEFAULT, "App launch denied for bundleIdentifier: %{private}s", (uint8_t *)&v53, 0xCu);
      char v32 = 0;
    }
  }
  double v36 = *v30;
  CLMicroLocationProto::AppLaunch::AppLaunch((CLMicroLocationProto::AppLaunch *)&__v);
  CLMicroLocationProtobufHelper::createRecordingEvent<CLMicroLocationProto::AppLaunch>((CLMicroLocationProto::RecordingEvent *)&__v, 0, 0, 0, (CLMicroLocationProto *)3, (uint64_t)v46, v36);
  LOBYTE(v53.__first_) = v32;
  CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)&v53.__begin_, (const CLMicroLocationProto::RecordingEvent *)v46);
  *a3 = v53.__first_;
  CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)(a3 + 8), (const CLMicroLocationProto::RecordingEvent *)&v53.__begin_);
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)&v53.__begin_);
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v46);
  CLMicroLocationProto::AppLaunch::~AppLaunch((CLMicroLocationProto::AppLaunch *)&__v);
  v53.__first_ = (std::__split_buffer<std::string>::pointer)&v50;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
}

void sub_2563237EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::__split_buffer<std::string> *a9, uint64_t a10, void *__p, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__pa,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,std::__split_buffer<std::string> *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,void *a50)
{
  a50 = &a47;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a50);

  _Unwind_Resume(a1);
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    id v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    id v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void CLMicroLocationProto::RecordingEvent::~RecordingEvent(CLMicroLocationProto::RecordingEvent *this)
{
  *(void *)this = &unk_2704DF5C8;
  CLMicroLocationProto::RecordingEvent::SharedDtor(this);
  uint64_t v2 = *((void *)this + 13);
  if (v2) {
    MEMORY[0x25A2A6320](v2, 0x1000C8052888210);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CLMicroLocationProto::RecordingEvent::~RecordingEvent(this);
  JUMPOUT(0x25A2A6340);
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

CLMicroLocationProto::RecordingEvent *CLMicroLocationProto::RecordingEvent::RecordingEvent(CLMicroLocationProto::RecordingEvent *this, const CLMicroLocationProto::RecordingEvent *a2)
{
  *(void *)this = &unk_2704DF5C8;
  *((void *)this + 13) = 0;
  *((_DWORD *)this + 18) = 1;
  *((_WORD *)this + 38) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  CLMicroLocationProto::RecordingEvent::MergeFrom(this, a2);
  return this;
}

void sub_256323B40(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  if (*v3) {
    MEMORY[0x25A2A6320](*v3, 0x1000C8052888210);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::RecordingEvent::MergeFrom(CLMicroLocationProto::RecordingEvent *this, const CLMicroLocationProto::RecordingEvent *a2)
{
  uint64_t v3 = this;
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v34);
  }
  int v4 = *((_DWORD *)a2 + 28);
  if (v4)
  {
    wireless_diagnostics::google::protobuf::RepeatedField<int>::Reserve((uint64_t)v3 + 104, *((_DWORD *)v3 + 28) + v4);
    this = (CLMicroLocationProto::RecordingEvent *)memcpy((void *)(*((void *)v3 + 13) + 4 * *((int *)v3 + 28)), *((const void **)a2 + 13), 4 * *((int *)a2 + 28));
    *((_DWORD *)v3 + 28) += *((_DWORD *)a2 + 28);
  }
  int v5 = *((_DWORD *)a2 + 35);
  if (!(_BYTE)v5) {
    goto LABEL_50;
  }
  if (v5)
  {
    unsigned int v6 = *((_DWORD *)a2 + 18);
    if (v6 - 31 >= 0x19 && (v6 > 0xE || ((1 << v6) & 0x76B6) == 0)) {
      CLMicroLocationProto::RecordingEvent::MergeFrom();
    }
    *((_DWORD *)v3 + 35) |= 1u;
    *((_DWORD *)v3 + 18) = v6;
    int v5 = *((_DWORD *)a2 + 35);
  }
  if ((v5 & 2) != 0)
  {
    uint64_t v7 = *((void *)a2 + 1);
    *((_DWORD *)v3 + 35) |= 2u;
    *((void *)v3 + 1) = v7;
    int v5 = *((_DWORD *)a2 + 35);
    if ((v5 & 4) == 0)
    {
LABEL_13:
      if ((v5 & 8) == 0) {
        goto LABEL_14;
      }
      goto LABEL_25;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_13;
  }
  *((_DWORD *)v3 + 35) |= 4u;
  uint64_t v8 = (CLMicroLocationProto::ReceivedEventAction *)*((void *)v3 + 2);
  if (!v8) {
    operator new();
  }
  uint64_t v9 = (const CLMicroLocationProto::ReceivedEventAction *)*((void *)a2 + 2);
  if (!v9)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
    uint64_t v9 = *(const CLMicroLocationProto::ReceivedEventAction **)(CLMicroLocationProto::RecordingEvent::default_instance_
                                                             + 16);
  }
  CLMicroLocationProto::ReceivedEventAction::MergeFrom(v8, v9);
  int v5 = *((_DWORD *)a2 + 35);
  if ((v5 & 8) == 0)
  {
LABEL_14:
    if ((v5 & 0x10) == 0) {
      goto LABEL_15;
    }
    goto LABEL_30;
  }
LABEL_25:
  *((_DWORD *)v3 + 35) |= 8u;
  int v10 = (CLMicroLocationProto::AppLaunch *)*((void *)v3 + 3);
  if (!v10) {
    operator new();
  }
  long long v11 = (const CLMicroLocationProto::AppLaunch *)*((void *)a2 + 3);
  if (!v11)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
    long long v11 = *(const CLMicroLocationProto::AppLaunch **)(CLMicroLocationProto::RecordingEvent::default_instance_ + 24);
  }
  CLMicroLocationProto::AppLaunch::MergeFrom(v10, v11);
  int v5 = *((_DWORD *)a2 + 35);
  if ((v5 & 0x10) == 0)
  {
LABEL_15:
    if ((v5 & 0x20) == 0) {
      goto LABEL_16;
    }
LABEL_35:
    *((_DWORD *)v3 + 35) |= 0x20u;
    unint64_t v14 = (CLMicroLocationProto::BatteryChargerConnected *)*((void *)v3 + 5);
    if (!v14) {
      operator new();
    }
    __int16 v15 = (const CLMicroLocationProto::BatteryChargerConnected *)*((void *)a2 + 5);
    if (!v15)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
      __int16 v15 = *(const CLMicroLocationProto::BatteryChargerConnected **)(CLMicroLocationProto::RecordingEvent::default_instance_
                                                                    + 40);
    }
    CLMicroLocationProto::BatteryChargerConnected::MergeFrom(v14, v15);
    int v5 = *((_DWORD *)a2 + 35);
    if ((v5 & 0x40) == 0)
    {
LABEL_17:
      if ((v5 & 0x80) == 0) {
        goto LABEL_50;
      }
      goto LABEL_45;
    }
    goto LABEL_40;
  }
LABEL_30:
  *((_DWORD *)v3 + 35) |= 0x10u;
  unint64_t v12 = (CLMicroLocationProto::BacklightOn *)*((void *)v3 + 4);
  if (!v12) {
    operator new();
  }
  unint64_t v13 = (const CLMicroLocationProto::BacklightOn *)*((void *)a2 + 4);
  if (!v13)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
    unint64_t v13 = *(const CLMicroLocationProto::BacklightOn **)(CLMicroLocationProto::RecordingEvent::default_instance_ + 32);
  }
  CLMicroLocationProto::BacklightOn::MergeFrom(v12, v13);
  int v5 = *((_DWORD *)a2 + 35);
  if ((v5 & 0x20) != 0) {
    goto LABEL_35;
  }
LABEL_16:
  if ((v5 & 0x40) == 0) {
    goto LABEL_17;
  }
LABEL_40:
  *((_DWORD *)v3 + 35) |= 0x40u;
  BOOL v16 = (CLMicroLocationProto::ForcedRecording *)*((void *)v3 + 6);
  if (!v16) {
    operator new();
  }
  long long v17 = (const CLMicroLocationProto::ForcedRecording *)*((void *)a2 + 6);
  if (!v17)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
    long long v17 = *(const CLMicroLocationProto::ForcedRecording **)(CLMicroLocationProto::RecordingEvent::default_instance_ + 48);
  }
  CLMicroLocationProto::ForcedRecording::MergeFrom(v16, v17);
  int v5 = *((_DWORD *)a2 + 35);
  if ((v5 & 0x80) != 0)
  {
LABEL_45:
    *((_DWORD *)v3 + 35) |= 0x80u;
    __int16 v18 = (CLMicroLocationProto::HomeKitAccessory *)*((void *)v3 + 7);
    if (!v18) {
      operator new();
    }
    uint64_t v19 = (const CLMicroLocationProto::HomeKitAccessory *)*((void *)a2 + 7);
    if (!v19)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
      uint64_t v19 = *(const CLMicroLocationProto::HomeKitAccessory **)(CLMicroLocationProto::RecordingEvent::default_instance_
                                                             + 56);
    }
    CLMicroLocationProto::HomeKitAccessory::MergeFrom(v18, v19);
    int v5 = *((_DWORD *)a2 + 35);
  }
LABEL_50:
  if ((v5 & 0xFF00) == 0) {
    goto LABEL_83;
  }
  if ((v5 & 0x100) != 0)
  {
    *((_DWORD *)v3 + 35) |= 0x100u;
    v20 = (CLMicroLocationProto::HomeKitScene *)*((void *)v3 + 8);
    if (!v20) {
      operator new();
    }
    std::vector<std::string>::pointer v21 = (const CLMicroLocationProto::HomeKitScene *)*((void *)a2 + 8);
    if (!v21)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
      std::vector<std::string>::pointer v21 = *(const CLMicroLocationProto::HomeKitScene **)(CLMicroLocationProto::RecordingEvent::default_instance_ + 64);
    }
    CLMicroLocationProto::HomeKitScene::MergeFrom(v20, v21);
    int v5 = *((_DWORD *)a2 + 35);
    if ((v5 & 0x200) == 0)
    {
LABEL_53:
      if ((v5 & 0x400) == 0) {
        goto LABEL_54;
      }
      goto LABEL_69;
    }
  }
  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_53;
  }
  *((_DWORD *)v3 + 35) |= 0x200u;
  long long v22 = (CLMicroLocationProto::NowPlaying *)*((void *)v3 + 10);
  if (!v22) {
    operator new();
  }
  unint64_t v23 = (const CLMicroLocationProto::NowPlaying *)*((void *)a2 + 10);
  if (!v23)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
    unint64_t v23 = *(const CLMicroLocationProto::NowPlaying **)(CLMicroLocationProto::RecordingEvent::default_instance_ + 80);
  }
  CLMicroLocationProto::NowPlaying::MergeFrom(v22, v23);
  int v5 = *((_DWORD *)a2 + 35);
  if ((v5 & 0x400) == 0)
  {
LABEL_54:
    if ((v5 & 0x800) == 0) {
      goto LABEL_55;
    }
    goto LABEL_74;
  }
LABEL_69:
  *((_DWORD *)v3 + 35) |= 0x400u;
  unint64_t v24 = (CLMicroLocationProto::RecordingRequest *)*((void *)v3 + 11);
  if (!v24) {
    operator new();
  }
  unint64_t v25 = (const CLMicroLocationProto::RecordingRequest *)*((void *)a2 + 11);
  if (!v25)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
    unint64_t v25 = *(const CLMicroLocationProto::RecordingRequest **)(CLMicroLocationProto::RecordingEvent::default_instance_ + 88);
  }
  CLMicroLocationProto::RecordingRequest::MergeFrom(v24, v25);
  int v5 = *((_DWORD *)a2 + 35);
  if ((v5 & 0x800) == 0)
  {
LABEL_55:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_75;
  }
LABEL_74:
  char v26 = *((unsigned char *)a2 + 76);
  *((_DWORD *)v3 + 35) |= 0x800u;
  *((unsigned char *)v3 + 76) = v26;
  int v5 = *((_DWORD *)a2 + 35);
  if ((v5 & 0x1000) == 0)
  {
LABEL_56:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_80;
  }
LABEL_75:
  *((_DWORD *)v3 + 35) |= 0x1000u;
  uint64_t v27 = (CLMicroLocationProto::TruthLabelDonation *)*((void *)v3 + 12);
  if (!v27) {
    operator new();
  }
  long long v28 = (const CLMicroLocationProto::TruthLabelDonation *)*((void *)a2 + 12);
  if (!v28)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
    long long v28 = *(const CLMicroLocationProto::TruthLabelDonation **)(CLMicroLocationProto::RecordingEvent::default_instance_
                                                             + 96);
  }
  CLMicroLocationProto::TruthLabelDonation::MergeFrom(v27, v28);
  int v5 = *((_DWORD *)a2 + 35);
  if ((v5 & 0x2000) == 0)
  {
LABEL_57:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_83;
    }
    goto LABEL_81;
  }
LABEL_80:
  char v29 = *((unsigned char *)a2 + 77);
  *((_DWORD *)v3 + 35) |= 0x2000u;
  *((unsigned char *)v3 + 77) = v29;
  int v5 = *((_DWORD *)a2 + 35);
  if ((v5 & 0x4000) == 0) {
    goto LABEL_83;
  }
LABEL_81:
  unsigned int v30 = *((_DWORD *)a2 + 30);
  if (v30 >= 4 && v30 != 15) {
    CLMicroLocationLocalizationController::LocalizationRequest::finalizeTriggerConfidence();
  }
  *((_DWORD *)v3 + 35) |= 0x4000u;
  *((_DWORD *)v3 + 30) = v30;
  int v5 = *((_DWORD *)a2 + 35);
LABEL_83:
  if ((v5 & 0xFF0000) != 0)
  {
    if ((v5 & 0x10000) != 0)
    {
      *((_DWORD *)v3 + 35) |= 0x10000u;
      v31 = (CLMicroLocationProto::AssociatedAccessPointInfo *)*((void *)v3 + 16);
      if (!v31) {
        operator new();
      }
      char v32 = (const CLMicroLocationProto::AssociatedAccessPointInfo *)*((void *)a2 + 16);
      if (!v32)
      {
        CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
        char v32 = *(const CLMicroLocationProto::AssociatedAccessPointInfo **)(CLMicroLocationProto::RecordingEvent::default_instance_
                                                                        + 128);
      }
      CLMicroLocationProto::AssociatedAccessPointInfo::MergeFrom(v31, v32);
      int v5 = *((_DWORD *)a2 + 35);
    }
    if ((v5 & 0x20000) != 0)
    {
      unsigned int v33 = *((_DWORD *)a2 + 31);
      if (v33 >= 4) {
        CLMicroLocationProto::RecordingEvent::MergeFrom();
      }
      *((_DWORD *)v3 + 35) |= 0x20000u;
      *((_DWORD *)v3 + 31) = v33;
    }
  }
}

void sub_2563243C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::AppLaunch::MergeFrom(CLMicroLocationProto::AppLaunch *this, const CLMicroLocationProto::AppLaunch *a2)
{
  uint64_t v3 = this;
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v4) = *((unsigned char *)a2 + 40);
  if ((_BYTE)v4)
  {
    if (*((unsigned char *)a2 + 40))
    {
      unsigned int v5 = *((_DWORD *)a2 + 8);
      if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0)) {
        CLMicroLocationProto::AppLaunch::MergeFrom();
      }
      *((_DWORD *)v3 + 10) |= 1u;
      *((_DWORD *)v3 + 8) = v5;
      int v4 = *((_DWORD *)a2 + 10);
    }
    if ((v4 & 2) != 0)
    {
      unsigned int v6 = (const std::string *)*((void *)a2 + 1);
      *((_DWORD *)v3 + 10) |= 2u;
      uint64_t v7 = (std::string *)*((void *)v3 + 1);
      if (v7 == (std::string *)MEMORY[0x263F8C740]) {
        operator new();
      }
      this = (CLMicroLocationProto::AppLaunch *)std::string::operator=(v7, v6);
      int v4 = *((_DWORD *)a2 + 10);
      if ((v4 & 4) == 0)
      {
LABEL_11:
        if ((v4 & 8) == 0) {
          return;
        }
        goto LABEL_21;
      }
    }
    else if ((v4 & 4) == 0)
    {
      goto LABEL_11;
    }
    *((_DWORD *)v3 + 10) |= 4u;
    uint64_t v8 = (CLMicroLocationProto::BundleIdFeatures *)*((void *)v3 + 2);
    if (!v8) {
      operator new();
    }
    uint64_t v9 = (const CLMicroLocationProto::BundleIdFeatures *)*((void *)a2 + 2);
    if (!v9)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
      uint64_t v9 = *(const CLMicroLocationProto::BundleIdFeatures **)(CLMicroLocationProto::AppLaunch::default_instance_ + 16);
    }
    CLMicroLocationProto::BundleIdFeatures::MergeFrom(v8, v9);
    if ((*((_DWORD *)a2 + 10) & 8) != 0)
    {
LABEL_21:
      int v10 = (const std::string *)*((void *)a2 + 3);
      *((_DWORD *)v3 + 10) |= 8u;
      long long v11 = (std::string *)*((void *)v3 + 3);
      if (v11 == (std::string *)MEMORY[0x263F8C740]) {
        operator new();
      }
      std::string::operator=(v11, v10);
    }
  }
}

void sub_2563245D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::ReceivedEvent::SharedDtor(CLMicroLocationProto::ReceivedEvent *this)
{
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
  if ((CLMicroLocationProto::ReceivedEvent *)CLMicroLocationProto::ReceivedEvent::default_instance_ != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = *((void *)this + 2);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = *((void *)this + 3);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = *((void *)this + 4);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    uint64_t v6 = *((void *)this + 5);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    uint64_t v7 = *((void *)this + 6);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    uint64_t v8 = *((void *)this + 7);
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    uint64_t v9 = *((void *)this + 8);
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    uint64_t v10 = *((void *)this + 9);
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    uint64_t v11 = *((void *)this + 10);
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
    uint64_t v12 = *((void *)this + 11);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
    uint64_t v13 = *((void *)this + 12);
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
    uint64_t v14 = *((void *)this + 13);
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
    uint64_t v15 = *((void *)this + 14);
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
    uint64_t v16 = *((void *)this + 15);
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
    uint64_t v17 = *((void *)this + 16);
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
    uint64_t v18 = *((void *)this + 17);
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
    uint64_t v19 = *((void *)this + 18);
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
    uint64_t v20 = *((void *)this + 19);
    if (v20) {
      (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    }
    uint64_t v21 = *((void *)this + 20);
    if (v21) {
      (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
    }
    uint64_t v22 = *((void *)this + 21);
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
    }
    uint64_t v23 = *((void *)this + 22);
    if (v23) {
      (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
    }
    uint64_t v24 = *((void *)this + 23);
    if (v24) {
      (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
    }
    uint64_t v25 = *((void *)this + 24);
    if (v25) {
      (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
    }
    uint64_t v26 = *((void *)this + 25);
    if (v26) {
      (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
    }
    uint64_t v27 = *((void *)this + 26);
    if (v27) {
      (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
    }
    uint64_t v28 = *((void *)this + 27);
    if (v28) {
      (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
    }
    uint64_t v29 = *((void *)this + 28);
    if (v29) {
      (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
    }
    uint64_t v30 = *((void *)this + 29);
    if (v30) {
      (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
    }
    uint64_t v31 = *((void *)this + 30);
    if (v31) {
      (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
    }
    uint64_t v32 = *((void *)this + 31);
    if (v32) {
      (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
    }
    uint64_t v33 = *((void *)this + 32);
    if (v33) {
      (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
    }
    uint64_t v34 = *((void *)this + 33);
    if (v34) {
      (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
    }
    uint64_t v35 = *((void *)this + 34);
    if (v35) {
      (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
    }
    uint64_t v36 = *((void *)this + 35);
    if (v36)
    {
      id v37 = *(void (**)(void))(*(void *)v36 + 8);
      v37();
    }
  }
}

void CLMicroLocationProto::RecordingEvent::SharedDtor(CLMicroLocationProto::RecordingEvent *this)
{
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
  if ((CLMicroLocationProto::RecordingEvent *)CLMicroLocationProto::RecordingEvent::default_instance_ != this)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = *((void *)this + 3);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = *((void *)this + 4);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = *((void *)this + 5);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    uint64_t v6 = *((void *)this + 6);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    uint64_t v7 = *((void *)this + 7);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    uint64_t v8 = *((void *)this + 8);
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    uint64_t v9 = *((void *)this + 10);
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    uint64_t v10 = *((void *)this + 11);
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    uint64_t v11 = *((void *)this + 12);
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
    uint64_t v12 = *((void *)this + 16);
    if (v12)
    {
      uint64_t v13 = *(void (**)(void))(*(void *)v12 + 8);
      v13();
    }
  }
}

void CLMicroLocationProto::AppLaunch::~AppLaunch(CLMicroLocationProto::AppLaunch *this)
{
  CLMicroLocationProto::AppLaunch::~AppLaunch(this);
  JUMPOUT(0x25A2A6340);
}

{
  uint64_t vars8;

  *(void *)this = &unk_2704DE8A8;
  CLMicroLocationProto::AppLaunch::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void CLMicroLocationProto::AppLaunch::SharedDtor(CLMicroLocationProto::AppLaunch *this)
{
  v1 = this;
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = MEMORY[0x263F8C740];
  if (v2 != MEMORY[0x263F8C740] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    this = (CLMicroLocationProto::AppLaunch *)MEMORY[0x25A2A6340](v2, 0x1012C40EC159624);
  }
  uint64_t v5 = *((void *)v1 + 3);
  if (v5 != v3 && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0) {
      operator delete(*(void **)v5);
    }
    this = (CLMicroLocationProto::AppLaunch *)MEMORY[0x25A2A6340](v5, 0x1012C40EC159624);
  }
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
  if ((CLMicroLocationProto::AppLaunch *)CLMicroLocationProto::AppLaunch::default_instance_ != v1)
  {
    uint64_t v7 = *((void *)v1 + 2);
    if (v7)
    {
      uint64_t v8 = *(void (**)(void))(*(void *)v7 + 8);
      v8();
    }
  }
}

void CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(CLMicroLocationProto *this)
{
  uint64_t v1 = CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto_once_;
  __dmb(0xBu);
  if (v1 != 2)
  {
    v2[0] = MEMORY[0x263F8C768] + 16;
    v2[1] = CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto_impl;
    char v3 = 0;
    wireless_diagnostics::google::protobuf::GoogleOnceInitImpl();
    wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_256325080(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

double CLMicroLocationProto::AppLaunch::AppLaunch(CLMicroLocationProto::AppLaunch *this)
{
  *(void *)&double result = 2;
  *((void *)this + 4) = 2;
  uint64_t v2 = MEMORY[0x263F8C740];
  *(void *)this = &unk_2704DE8A8;
  *((void *)this + 1) = v2;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = v2;
  *((_DWORD *)this + 10) = 0;
  return result;
}

void std::vector<std::string>::reserve(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3) < __n)
  {
    if (__n >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (char *)this->__end_ - (char *)this->__begin_;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)p_end_cap;
    __v.__first_ = (std::__split_buffer<std::string>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, __n);
    __v.__begin_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_cap_.__value_ = &__v.__first_[v6];
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
}

void sub_256325218(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  std::vector<std::string>::pointer begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  std::vector<std::string>::pointer end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void std::vector<std::string>::__vdeallocate(std::vector<std::string> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      int64_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        int64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    char v5 = *((unsigned char *)a3 + 23);
    if (v5 >= 0) {
      uint64_t v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    }
    else {
      uint64_t v6 = a3[1];
    }
    if (v5 >= 0) {
      uint64_t v7 = (unsigned __int8 *)a3;
    }
    else {
      uint64_t v7 = *a3;
    }
    do
    {
      uint64_t v8 = *(unsigned __int8 *)(v3 + 23);
      if ((v8 & 0x80u) == 0) {
        uint64_t v9 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
      }
      else {
        uint64_t v9 = *(unsigned __int8 **)(v3 + 8);
      }
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v3, v7, *(void *)(v3 + 8))) {
            return v3;
          }
        }
        else
        {
          if (!*(unsigned char *)(v3 + 23)) {
            return v3;
          }
          uint64_t v10 = 0;
          while (*(unsigned __int8 *)(v3 + v10) == v7[v10])
          {
            if (v8 == ++v10) {
              return v3;
            }
          }
        }
      }
      v3 += 24;
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

void CLMicroLocationProtobufHelper::createRecordingEvent<CLMicroLocationProto::AppLaunch>(CLMicroLocationProto::RecordingEvent *a1@<X0>, CLMicroLocationProto *a2@<X1>, char a3@<W2>, char a4@<W3>, CLMicroLocationProto *a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)a6);
  unsigned int v14 = *((_DWORD *)a1 + 8);
  if (!CLMicroLocationProto::EventType_IsValid((CLMicroLocationProto *)v14))
  {
    uint64_t v17 = "::CLMicroLocationProto::EventType_IsValid(value)";
    int v18 = 20192;
    uint64_t v19 = "set_eventtype";
    goto LABEL_10;
  }
  int v15 = *(_DWORD *)(a6 + 140);
  *(_DWORD *)(a6 + 72) = v14;
  *(double *)(a6 + 8) = a7;
  *(unsigned char *)(a6 + 77) = a3;
  *(_DWORD *)(a6 + 140) = v15 | 0x2803;
  *(unsigned char *)(a6 + 76) = a4;
  if (!CLMicroLocationProto::ConfidenceLevel_IsValid(a5))
  {
    uint64_t v17 = "::CLMicroLocationProto::ConfidenceLevel_IsValid(value)";
    int v18 = 20701;
    uint64_t v19 = "set_confidencelevel";
    goto LABEL_10;
  }
  *(_DWORD *)(a6 + 140) |= 0x4000u;
  *(_DWORD *)(a6 + 120) = a5;
  if (((unint64_t)a2 & 0xFF00000000) != 0)
  {
    if (CLMicroLocationProto::MotionState_IsValid(a2))
    {
      *(_DWORD *)(a6 + 140) |= 0x20000u;
      *(_DWORD *)(a6 + 124) = a2;
      goto LABEL_6;
    }
    uint64_t v17 = "::CLMicroLocationProto::MotionState_IsValid(value)";
    int v18 = 20793;
    uint64_t v19 = "set_motionstate";
LABEL_10:
    __assert_rtn(v19, "microlocation.pb.h", v18, v17);
  }
LABEL_6:
  CLMicroLocationProtobufHelper::setSpecificRecordingEvent((CLMicroLocationProtobufHelper *)a6, a1, v16);
}

void sub_2563256C8(_Unwind_Exception *a1)
{
  CLMicroLocationProto::RecordingEvent::~RecordingEvent(v1);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::AppLaunch::CopyFrom(CLMicroLocationProto::AppLaunch *this, const CLMicroLocationProto::AppLaunch *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CLMicroLocationProto::AppLaunch *))(*(void *)this + 32))(this);
    CLMicroLocationProto::AppLaunch::MergeFrom(this, a2);
  }
}

uint64_t CLMicroLocationProto::AppLaunch::Clear(uint64_t this)
{
  char v1 = *(unsigned char *)(this + 40);
  if (v1)
  {
    *(_DWORD *)(this + 32) = 2;
    uint64_t v2 = MEMORY[0x263F8C740];
    if ((v1 & 2) != 0)
    {
      uint64_t v3 = *(void *)(this + 8);
      if (v3 != MEMORY[0x263F8C740])
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(unsigned char **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v3 = 0;
          *(unsigned char *)(v3 + 23) = 0;
        }
      }
    }
    int v4 = *(_DWORD *)(this + 40);
    if ((v4 & 4) != 0)
    {
      uint64_t v5 = *(void *)(this + 16);
      if (v5)
      {
        if (*(unsigned char *)(v5 + 16)) {
          *(_WORD *)(v5 + 8) = 0;
        }
        *(_DWORD *)(v5 + 16) = 0;
        int v4 = *(_DWORD *)(this + 40);
      }
    }
    if ((v4 & 8) != 0)
    {
      uint64_t v6 = *(void *)(this + 24);
      if (v6 != v2)
      {
        if (*(char *)(v6 + 23) < 0)
        {
          **(unsigned char **)uint64_t v6 = 0;
          *(void *)(v6 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v6 = 0;
          *(unsigned char *)(v6 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(this + 40) = 0;
  return this;
}

void CLMicroLocationProtobufHelper::setSpecificRecordingEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::RecordingEvent *a2, const CLMicroLocationProto::AppLaunch *a3)
{
  *((_DWORD *)this + 35) |= 8u;
  uint64_t v3 = (CLMicroLocationProto::AppLaunch *)*((void *)this + 3);
  if (!v3) {
    operator new();
  }
  CLMicroLocationProto::AppLaunch::CopyFrom(v3, a2);
}

void sub_256325868(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x10A1C406601F8D4);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationProto::ConfidenceLevel_IsValid(CLMicroLocationProto *this)
{
  return (this < 0x10) & (0x800Fu >> (char)this);
}

uint64_t CLMicroLocationProto::EventType_IsValid(CLMicroLocationProto *this)
{
  return (this < 0x38) & (0xFFFFFF800076B6uLL >> (char)this);
}

double CLMicroLocationProto::RecordingEvent::RecordingEvent(CLMicroLocationProto::RecordingEvent *this)
{
  *(void *)this = &unk_2704DF5C8;
  *((_DWORD *)this + 18) = 1;
  *((_WORD *)this + 38) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  return result;
}

void *CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerLeechedLocationEvent,&CLMicroLocationLoiManager::HandleLeechedLocation>::stateFunction@<X0>(CLMicroLocationStateMachine::EventBase *lpsrc@<X2>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  if (a2) {
    uint64_t v5 = a2 - 8;
  }
  else {
    uint64_t v5 = 0;
  }
  if (lpsrc
  {
    return CLMicroLocationLoiManager::HandleLeechedLocation((ULDatabase **)v5, v6, a3);
  }
  else
  {
    uint64_t v29 = lpsrc;
    uint64_t v8 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v9 = *(void *)(v5 + 16);
      if (*(char *)(v9 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)(v9 + 8), *(void *)(v9 + 16));
      }
      else
      {
        long long v10 = *(_OWORD *)(v9 + 8);
        v31.__r_.__value_.__r.__words[2] = *(void *)(v9 + 24);
        *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v10;
      }
      int v11 = SHIBYTE(v31.__r_.__value_.__r.__words[2]);
      std::string::size_type v12 = v31.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      char v13 = &v31;
      if (v11 < 0) {
        char v13 = (std::string *)v12;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 68290051;
      int v33 = 0;
      __int16 v34 = 2082;
      uint64_t v35 = "";
      __int16 v36 = 2081;
      id v37 = v13;
      __int16 v38 = 2081;
      v39 = p_p;
      __int16 v40 = 2082;
      v41 = "assert";
      __int16 v42 = 2081;
      v43 = "derivedEventData != __null";
      _os_log_impl(&dword_25631F000, v8, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v31.__r_.__value_.__l.__data_);
      }
    }

    int v15 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_signpost_enabled(v15))
    {
      uint64_t v16 = *(void *)(v5 + 16);
      if (*(char *)(v16 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)(v16 + 8), *(void *)(v16 + 16));
      }
      else
      {
        long long v17 = *(_OWORD *)(v16 + 8);
        v31.__r_.__value_.__r.__words[2] = *(void *)(v16 + 24);
        *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v17;
      }
      int v18 = SHIBYTE(v31.__r_.__value_.__r.__words[2]);
      std::string::size_type v19 = v31.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      uint64_t v20 = &v31;
      if (v18 < 0) {
        uint64_t v20 = (std::string *)v19;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = &__p;
      }
      else {
        uint64_t v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 68290051;
      int v33 = 0;
      __int16 v34 = 2082;
      uint64_t v35 = "";
      __int16 v36 = 2081;
      id v37 = v20;
      __int16 v38 = 2081;
      v39 = v21;
      __int16 v40 = 2082;
      v41 = "assert";
      __int16 v42 = 2081;
      v43 = "derivedEventData != __null";
      _os_signpost_emit_with_name_impl(&dword_25631F000, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Received unsupported event in state event handler", "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v31.__r_.__value_.__l.__data_);
      }
    }

    uint64_t v22 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      uint64_t v23 = *(void *)(v5 + 16);
      if (*(char *)(v23 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)(v23 + 8), *(void *)(v23 + 16));
      }
      else
      {
        long long v24 = *(_OWORD *)(v23 + 8);
        v31.__r_.__value_.__r.__words[2] = *(void *)(v23 + 24);
        *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v24;
      }
      int v25 = SHIBYTE(v31.__r_.__value_.__r.__words[2]);
      std::string::size_type v26 = v31.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(v29, &__p);
      uint64_t v27 = &v31;
      if (v25 < 0) {
        uint64_t v27 = (std::string *)v26;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v28 = &__p;
      }
      else {
        uint64_t v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 68290051;
      int v33 = 0;
      __int16 v34 = 2082;
      uint64_t v35 = "";
      __int16 v36 = 2081;
      id v37 = v27;
      __int16 v38 = 2081;
      v39 = v28;
      __int16 v40 = 2082;
      v41 = "assert";
      __int16 v42 = 2081;
      v43 = "derivedEventData != __null";
      _os_log_impl(&dword_25631F000, v22, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v31.__r_.__value_.__l.__data_);
      }
    }

    double result = (void *)abort_report_np();
    __break(1u);
  }
  return result;
}

void sub_256325D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerReceivedLoiForLocationEvent,&CLMicroLocationLoiManager::LoiForGivenLocation>::stateFunction(CLMicroLocationStateMachine::EventBase *lpsrc@<X2>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  if (a2) {
    uint64_t v5 = (CLMicroLocationLoiManager *)(a2 - 8);
  }
  else {
    uint64_t v5 = 0;
  }
  if (lpsrc
  {
    CLMicroLocationLoiManager::LoiForGivenLocation(v5, v6, a3);
  }
  else
  {
    uint64_t v28 = lpsrc;
    uint64_t v7 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = *((void *)v5 + 2);
      if (*(char *)(v8 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v8 + 8), *(void *)(v8 + 16));
      }
      else
      {
        long long v9 = *(_OWORD *)(v8 + 8);
        v30.__r_.__value_.__r.__words[2] = *(void *)(v8 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v9;
      }
      int v10 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      std::string::size_type v11 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      std::string::size_type v12 = &v30;
      if (v10 < 0) {
        std::string::size_type v12 = (std::string *)v11;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 68290051;
      int v32 = 0;
      __int16 v33 = 2082;
      __int16 v34 = "";
      __int16 v35 = 2081;
      __int16 v36 = v12;
      __int16 v37 = 2081;
      __int16 v38 = p_p;
      __int16 v39 = 2082;
      __int16 v40 = "assert";
      __int16 v41 = 2081;
      __int16 v42 = "derivedEventData != __null";
      _os_log_impl(&dword_25631F000, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v30.__r_.__value_.__l.__data_);
      }
    }

    unsigned int v14 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_signpost_enabled(v14))
    {
      uint64_t v15 = *((void *)v5 + 2);
      if (*(char *)(v15 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v15 + 8), *(void *)(v15 + 16));
      }
      else
      {
        long long v16 = *(_OWORD *)(v15 + 8);
        v30.__r_.__value_.__r.__words[2] = *(void *)(v15 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v16;
      }
      int v17 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      std::string::size_type v18 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      std::string::size_type v19 = &v30;
      if (v17 < 0) {
        std::string::size_type v19 = (std::string *)v18;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v20 = &__p;
      }
      else {
        uint64_t v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 68290051;
      int v32 = 0;
      __int16 v33 = 2082;
      __int16 v34 = "";
      __int16 v35 = 2081;
      __int16 v36 = v19;
      __int16 v37 = 2081;
      __int16 v38 = v20;
      __int16 v39 = 2082;
      __int16 v40 = "assert";
      __int16 v41 = 2081;
      __int16 v42 = "derivedEventData != __null";
      _os_signpost_emit_with_name_impl(&dword_25631F000, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Received unsupported event in state event handler", "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v30.__r_.__value_.__l.__data_);
      }
    }

    uint64_t v21 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      uint64_t v22 = *((void *)v5 + 2);
      if (*(char *)(v22 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v22 + 8), *(void *)(v22 + 16));
      }
      else
      {
        long long v23 = *(_OWORD *)(v22 + 8);
        v30.__r_.__value_.__r.__words[2] = *(void *)(v22 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v23;
      }
      int v24 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      std::string::size_type v25 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(v28, &__p);
      std::string::size_type v26 = &v30;
      if (v24 < 0) {
        std::string::size_type v26 = (std::string *)v25;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v27 = &__p;
      }
      else {
        uint64_t v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 68290051;
      int v32 = 0;
      __int16 v33 = 2082;
      __int16 v34 = "";
      __int16 v35 = 2081;
      __int16 v36 = v26;
      __int16 v37 = 2081;
      __int16 v38 = v27;
      __int16 v39 = 2082;
      __int16 v40 = "assert";
      __int16 v41 = 2081;
      __int16 v42 = "derivedEventData != __null";
      _os_log_impl(&dword_25631F000, v21, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v30.__r_.__value_.__l.__data_);
      }
    }

    abort_report_np();
    __break(1u);
  }
}

void sub_25632621C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  _Unwind_Resume(a1);
}

double CLMicroLocationLoiManager::LoiForGivenLocation@<D0>(CLMicroLocationLoiManager *this@<X0>, const CLMiLoLoiManagerReceivedLoiForLocationEvent *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 504))
  {
    ULSettings::get<ULSettings::OverrideCurrentRTLOIType>((uint64_t)&__str);
    uint64_t v6 = (void *)*((void *)a2 + 4);
    if (v6)
    {
      uint64_t v7 = [v6 loiIdentifier];

      if (v7)
      {
        CLMicroLocationLoiManager::convertRTLocationOfInterestTypeToString([*((id *)a2 + 4) type], buf);
        uint64_t v8 = (void **)((char *)this + 384);
        if (*((char *)this + 407) < 0) {
          operator delete(*v8);
        }
        *(_OWORD *)uint64_t v8 = *(_OWORD *)buf;
        *((void *)this + 50) = *(void *)&buf[16];
        int v9 = *((char *)this + 407);
        if (v9 < 0)
        {
          if (*((void *)this + 49) != 4)
          {
LABEL_31:
            std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type size = __str.__r_.__value_.__l.__size_;
            }
            if (size) {
              std::string::operator=((std::string *)this + 16, &__str);
            }
LABEL_35:
            long long v23 = [*((id *)a2 + 4) loiIdentifier];
            id v24 = [v23 UUIDString];
            std::string::size_type v25 = (char *)[v24 UTF8String];
            size_t v26 = strlen(v25);
            *((void *)this + 53) = boost::uuids::string_generator::operator()<char const*>((boost::uuids::string_generator *)buf, (unsigned __int8 *)v25, (unsigned __int8 *)&v25[v26]);
            *((void *)this + 54) = v27;

            if (onceToken_MicroLocation_Default != -1) {
              dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_49);
            }
            uint64_t v28 = (id)logObject_MicroLocation_Default;
            if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
            {
              uint64_t v29 = [*((id *)a2 + 4) loiIdentifier];
              uint64_t v30 = [v29 description];
              std::string v31 = (void *)v30;
              int v32 = (std::string *)((char *)this + 384);
              if (*((char *)this + 407) < 0) {
                int v32 = (std::string *)*v8;
              }
              *(_DWORD *)buf = 68289539;
              *(_DWORD *)&uint8_t buf[4] = 0;
              *(_WORD *)&uint8_t buf[8] = 2082;
              *(void *)&buf[10] = "";
              *(_WORD *)&buf[18] = 2113;
              *(void *)&buf[20] = v30;
              __int16 v61 = 2081;
              v62 = v32;
              _os_log_impl(&dword_25631F000, v28, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"LOI Manager, Retrieved location of interest\", \"LOI ID\":%{private, location:escape_only}@, \"LOI TYPE\":%{private, location:escape_only}s}", buf, 0x26u);
            }
            int v33 = *((char *)this + 407);
            if (v33 < 0)
            {
              if (*((void *)this + 49) != 4) {
                goto LABEL_47;
              }
              uint64_t v8 = (void **)*v8;
            }
            else if (v33 != 4)
            {
              goto LABEL_47;
            }
            if (*(_DWORD *)v8 == 1701670760)
            {
              if (onceToken_MicroLocation_Default != -1) {
                dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_49);
              }
              v52 = logObject_MicroLocation_Default;
              if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_25631F000, v52, OS_LOG_TYPE_INFO, "LOI Manager, fetching related LOIs for LOI", buf, 2u);
              }
              std::__split_buffer<std::string> v53 = [*((id *)a2 + 4) loiIdentifier];
              LoiIdsForLouint64_t i = CLMicroLocationLoiManager::fetchLoiIdsForLoi(this, v53);

              if (LoiIdsForLoi)
              {
                *((_WORD *)this + 252) = 256;
                uint64_t v55 = *((void *)this + 2);
                if (*(char *)(v55 + 31) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)buf, *(const std::string::value_type **)(v55 + 8), *(void *)(v55 + 16));
                }
                else
                {
                  long long v56 = *(_OWORD *)(v55 + 8);
                  *(void *)&buf[16] = *(void *)(v55 + 24);
                  *(_OWORD *)buf = v56;
                }
LABEL_57:
                double result = *(double *)buf;
                *(_OWORD *)a3 = *(_OWORD *)buf;
                *(void *)(a3 + 16) = *(void *)&buf[16];
                *(unsigned char *)(a3 + 24) = 1;
LABEL_58:
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__str.__r_.__value_.__l.__data_);
                }
                return result;
              }
              if (onceToken_MicroLocation_Default != -1) {
                dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_49);
              }
              uint64_t v57 = logObject_MicroLocation_Default;
              if (!os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
              {
LABEL_52:
                if (onceToken_MicroLocation_Default != -1) {
                  dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_49);
                }
                __int16 v38 = logObject_MicroLocation_Default;
                if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl(&dword_25631F000, v38, OS_LOG_TYPE_INFO, "LOI Manager, Returning to Inactive Location State", buf, 2u);
                }
                CLMicroLocationLoiManager::resetLoiVariables(this);
                std::string::basic_string[abi:ne180100]<0>(buf, "Not in Active Location State");
                goto LABEL_57;
              }
              *(_WORD *)buf = 0;
              __int16 v35 = "LOI Manager, Failed To request related LOIs";
              __int16 v36 = v57;
              os_log_type_t v37 = OS_LOG_TYPE_ERROR;
LABEL_51:
              _os_log_impl(&dword_25631F000, v36, v37, v35, buf, 2u);
              goto LABEL_52;
            }
LABEL_47:
            if (onceToken_MicroLocation_Default != -1) {
              dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_49);
            }
            uint64_t v34 = logObject_MicroLocation_Default;
            if (!os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO)) {
              goto LABEL_52;
            }
            *(_WORD *)buf = 0;
            __int16 v35 = "LOI Manager, Not a Home LOI";
            __int16 v36 = v34;
            os_log_type_t v37 = OS_LOG_TYPE_INFO;
            goto LABEL_51;
          }
          int v10 = *v8;
        }
        else
        {
          int v10 = (_DWORD *)((char *)this + 384);
          if (v9 != 4) {
            goto LABEL_31;
          }
        }
        if (*v10 == 1701670760) {
          goto LABEL_35;
        }
        goto LABEL_31;
      }
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_49);
      }
      uint64_t v18 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        uint64_t v15 = "LOI Manager, got nil LOI for current Location.. perhaps not in an LOI";
        long long v16 = v18;
        os_log_type_t v17 = OS_LOG_TYPE_DEFAULT;
        goto LABEL_22;
      }
    }
    else
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_49);
      }
      uint64_t v14 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        uint64_t v15 = "#LOIManager, Received nil object in eventData, this shouldn't happen";
        long long v16 = v14;
        os_log_type_t v17 = OS_LOG_TYPE_ERROR;
LABEL_22:
        _os_log_impl(&dword_25631F000, v16, v17, v15, buf, 2u);
      }
    }
    std::string::size_type v19 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v19 = __str.__r_.__value_.__l.__size_;
    }
    if (v19)
    {
      std::string::operator=((std::string *)this + 16, &__str);
      *((void *)this + 53) = boost::uuids::string_generator::operator()<char const*>((boost::uuids::string_generator *)buf, "{FFFFFFFF-AAAA-1111-EEEE-DDDDDDDDDDDD}", (unsigned __int8 *)"");
      *((void *)this + 54) = v20;
      *((unsigned char *)this + 504) = 0;
      memset(buf, 0, 24);
      CLMicroLocationLoiManager::tryToEnterHomeLoi((uint64_t)this, (uint64_t)this + 384, (long long *)((char *)this + 424), (uint64_t)buf, &__p);
      double result = *(double *)&__p.__r_.__value_.__l.__data_;
      *(std::string *)a3 = __p;
      *(unsigned char *)(a3 + 24) = 1;
      if (*(void *)buf)
      {
        *(void *)&uint8_t buf[8] = *(void *)buf;
        operator delete(*(void **)buf);
      }
      goto LABEL_58;
    }
    goto LABEL_52;
  }
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_49);
  }
  std::string::size_type v11 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    uint64_t v12 = *((void *)this + 2);
    if (*(char *)(v12 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v12 + 8), *(void *)(v12 + 16));
    }
    else
    {
      long long v13 = *(_OWORD *)(v12 + 8);
      __str.__r_.__value_.__r.__words[2] = *(void *)(v12 + 24);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v13;
    }
    int v39 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
    std::string::size_type v40 = __str.__r_.__value_.__r.__words[0];
    CLMicroLocationStateMachine::EventBase::getEventName(a2, &__p);
    p_str = &__str;
    if (v39 < 0) {
      p_str = (std::string *)v40;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 68289539;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2081;
    *(void *)&buf[20] = p_str;
    __int16 v61 = 2081;
    v62 = p_p;
    _os_log_impl(&dword_25631F000, v11, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"LOI Manager, Got event when not expecting it\", \"State\":%{private, location:escape_only}s, \"Event\":%{private, location:escape_only}s}", buf, 0x26u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }

  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_49);
  }
  uint64_t v43 = (id)logObject_MicroLocation_Default;
  if (os_signpost_enabled(v43))
  {
    uint64_t v44 = *((void *)this + 2);
    if (*(char *)(v44 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v44 + 8), *(void *)(v44 + 16));
    }
    else
    {
      long long v45 = *(_OWORD *)(v44 + 8);
      __str.__r_.__value_.__r.__words[2] = *(void *)(v44 + 24);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v45;
    }
    int v46 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
    std::string::size_type v47 = __str.__r_.__value_.__r.__words[0];
    CLMicroLocationStateMachine::EventBase::getEventName(a2, &__p);
    long long v48 = &__str;
    if (v46 < 0) {
      long long v48 = (std::string *)v47;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v49 = &__p;
    }
    else {
      long long v49 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 68289539;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2081;
    *(void *)&buf[20] = v48;
    __int16 v61 = 2081;
    v62 = v49;
    _os_signpost_emit_with_name_impl(&dword_25631F000, v43, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "LOI Manager, Got event when not expecting it", "{\"msg%{public}.0s\":\"LOI Manager, Got event when not expecting it\", \"State\":%{private, location:escape_only}s, \"Event\":%{private, location:escape_only}s}", buf, 0x26u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }

  uint64_t v50 = *((void *)this + 2);
  if (*(char *)(v50 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)buf, *(const std::string::value_type **)(v50 + 8), *(void *)(v50 + 16));
  }
  else
  {
    long long v51 = *(_OWORD *)(v50 + 8);
    *(void *)&buf[16] = *(void *)(v50 + 24);
    *(_OWORD *)buf = v51;
  }
  double result = *(double *)buf;
  *(_OWORD *)a3 = *(_OWORD *)buf;
  *(void *)(a3 + 16) = *(void *)&buf[16];
  *(unsigned char *)(a3 + 24) = 1;
  return result;
}

void sub_256326B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationLoiManager::resetLoiVariables(CLMicroLocationLoiManager *this)
{
  uint64_t result = MEMORY[0x25A2A6080]((char *)this + 384, "unknown");
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *((void *)this + 58) = *((void *)this + 57);
  if (*((unsigned char *)this + 500)) {
    *((unsigned char *)this + 500) = 0;
  }
  *((_WORD *)this + 252) = 0;
  *((unsigned char *)this + 506) = 0;
  return result;
}

void CLMicroLocationStateMachine::EventHandlerWrapperWithNoData<CLMicroLocationLoiManager,&CLMicroLocationLoiManager::entryFunctionEnteringHomeLoiState>::stateFunction(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 - 8;
  if (!a2) {
    uint64_t v2 = 0;
  }
  *(_WORD *)(v2 + 504) = 1;
}

uint64_t std::__split_buffer<CLMicroLocationLoggedEventsTable::Entry>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 336;
    CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)(i - 304));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationLoggedEventsTable::Entry>,std::reverse_iterator<CLMicroLocationLoggedEventsTable::Entry*>,std::reverse_iterator<CLMicroLocationLoggedEventsTable::Entry*>,std::reverse_iterator<CLMicroLocationLoggedEventsTable::Entry*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t i = 368; ; i -= 336)
  {
    uint64_t v12 = a3 + i;
    if (a3 + i - 368 == a5) {
      break;
    }
    long long v13 = (_OWORD *)(a7 + i - 704);
    long long v14 = *(_OWORD *)(v12 - 704);
    *(_OWORD *)((char *)v13 + 12) = *(_OWORD *)(v12 - 692);
    *long long v13 = v14;
    uint64_t v15 = (CLMicroLocationProto::ReceivedEvent *)(a7 + i - 672);
    CLMicroLocationProto::ReceivedEvent::ReceivedEvent(v15, (const CLMicroLocationProto::ReceivedEvent *)(v12 - 672));
  }
  return a6;
}

void ULSettings::get<ULSettings::OverrideCurrentRTLOIType>(uint64_t a1@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v2 = +[ULDefaultsSingleton shared];
  uint64_t v3 = [v2 defaultsDictionary];

  int v4 = [NSString stringWithUTF8String:"ULOverrideCurrentRTLOIType"];
  uint64_t v5 = [v3 objectForKey:v4];
  if (v5 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    ULSettings::convert<NSString * {__strong},std::string>(v5, v8);
    *(_OWORD *)a1 = *(_OWORD *)v8;
    *(void *)(a1 + 16) = *(void *)&v8[16];
  }
  else
  {
    ULSettings::convert<NSString * {__strong},std::string>(&stru_2704E2F50, v8);
    *(void *)&v9[7] = *(void *)&v8[15];
    *(void *)int v9 = *(void *)&v8[8];
    char v6 = v8[23];
    uint64_t v7 = *(void *)&v8[8];
    *(void *)a1 = *(void *)v8;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 15) = *(void *)&v9[7];
    *(unsigned char *)(a1 + 23) = v6;
  }
}

void sub_256326E98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ULSettings::convert<NSString * {__strong},std::string>(void *a1@<X0>, void *a2@<X8>)
{
  id v3 = a1;
  std::string::basic_string[abi:ne180100]<0>(a2, (char *)[v3 UTF8String]);
}

{
  id v3;
  uint64_t vars8;

  id v3 = a1;
  std::string::basic_string[abi:ne180100]<0>(a2, (char *)[v3 UTF8String]);
}

{
  id v3;
  uint64_t vars8;

  id v3 = a1;
  std::string::basic_string[abi:ne180100]<0>(a2, (char *)[v3 UTF8String]);
}

void sub_256326F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_256326FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_25632700C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_256327200(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256327390(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256327444(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ULDatabase::isDatabaseValid(ULDatabase *this)
{
  unsigned int v2 = ULDatabase::getMigrationStatus(this, 0) - 3;
  LODWORD(result) = [this->var1 isStoreConnected];
  if (v2 < 0xFFFFFFFE) {
    return result;
  }
  else {
    return 0;
  }
}

uint64_t ULDatabase::getMigrationStatus(ULDatabase *this, int a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t result = this->var17;
  if (result == 1 || a2 != 0)
  {
    this->var17 = ULDatabase::checkMigrationStatus(this);
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_83);
    }
    uint64_t v5 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      ULDatabase::migrationStatusAsString(this->var17, __p);
      if (v8 >= 0) {
        char v6 = __p;
      }
      else {
        char v6 = (void **)__p[0];
      }
      *(_DWORD *)buf = 68289282;
      int v10 = 0;
      __int16 v11 = 2082;
      uint64_t v12 = "";
      __int16 v13 = 2082;
      long long v14 = v6;
      _os_log_impl(&dword_25631F000, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"migration status\", \"status\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (v8 < 0) {
        operator delete(__p[0]);
      }
    }

    return this->var17;
  }
  return result;
}

void sub_2563275D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ULDatabase::connectIfNecessary(ULDatabase *this)
{
  if (([this->var1 isStoreConnected] & 1) == 0) {
    ULDatabase::initDb(this);
  }
  if (([this->var1 isStoreConnected] & 1) == 0)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_83);
    }
    unsigned int v2 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v3 = 0;
      _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_DEFAULT, "#Warning Failed to connect to database", v3, 2u);
    }
  }
}

void sub_256327778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_256327B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  os_log_type_t v17 = v16;

  _Unwind_Resume(a1);
}

void sub_256328030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_256328138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_256328538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationLegacyClient::onAppLaunch(CLMicroLocationLegacyClient *a1, uint64_t a2, double *a3)
{
  v16[38] = *MEMORY[0x263EF8340];
  CLMicroLocationLegacyEventAppLaunch::handleEvent(a2, a3, v11);
  if (v11[0])
  {
    uint64_t v5 = (CLMicroLocationEventLogger *)*((void *)a1 + 11);
    int v10 = 0;
    boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v10);
    char v6 = (CLMicroLocationProto::RecordingEvent *)boost::uuids::random_generator_pure::operator()((uint64_t)&v10);
    *(void *)&long long v14 = v6;
    *((void *)&v14 + 1) = v7;
    double v8 = *a3;
    int v9 = v13;
    if (!v13) {
      int v9 = *(int **)(CLMicroLocationProto::RecordingEvent::default_instance(v6) + 24);
    }
    CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::AppLaunch>(&v14, v9, (uint64_t)&v15, v8);
    CLMicroLocationEventLogger::logEvent(v5, &v15);
    CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v16);
    boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v10);
    CLMicroLocationLegacyClient::requestLocalizationOrRecordingIfPossible(a1, (const CLMicroLocationProto::RecordingEvent *)v12);
  }
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v12);
}

void sub_2563286D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11)
{
  CLMicroLocationProto::RecordingEvent::~RecordingEvent(v11);
  _Unwind_Resume(a1);
}

uint64_t boost::uuids::random_generator_pure::operator()(uint64_t a1)
{
  void v2[2] = *MEMORY[0x263EF8340];
  boost::uuids::detail::random_provider_base::get_random_bytes(a1, (char *)v2, 0x10uLL);
  BYTE6(v2[0]) = BYTE6(v2[0]) & 0xF | 0x40;
  return v2[0];
}

uint64_t boost::uuids::detail::random_provider_base::get_random_bytes(uint64_t this, char *a2, unint64_t a3)
{
  if (a3)
  {
    uint64_t v5 = (int *)this;
    unint64_t v6 = 0;
    do
    {
      this = read(*v5, &a2[v6], a3 - v6);
      if (this < 0)
      {
        this = (uint64_t)__error();
        if (*(_DWORD *)this != 4)
        {
          uint64_t v7 = *(int *)this;
          std::string::basic_string[abi:ne180100]<0>(&v9, "read");
          std::runtime_error::runtime_error(&v10, &v9);
          v10.__vftable = (std::runtime_error_vtbl *)&unk_2704DA8B8;
          uint64_t v11 = v7;
          v8[0] = "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents"
                  "/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/boos"
                  "t/uuid/detail/random_provider_posix.ipp";
          v8[1] = "void boost::uuids::detail::random_provider_base::get_random_bytes(void *, std::size_t)";
          v8[2] = 98;
          boost::throw_exception<boost::uuids::entropy_error>((uint64_t)&v10, (uint64_t)v8);
        }
      }
      else
      {
        v6 += this;
      }
    }
    while (v6 < a3);
  }
  return this;
}

void sub_256328A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, std::runtime_error a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::AppLaunch>(_OWORD *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  CLMicroLocationProto::ReceivedEvent::ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
  CLMicroLocationProtobufHelper::setSpecificLoggedEvent((CLMicroLocationProtobufHelper *)v9, (CLMicroLocationProto::ReceivedEvent *)a2, v8);
  CLMicroLocationLoggedEventsTable::Entry::Entry(a3, a1, a2[8], (CLMicroLocationProto::ReceivedEvent *)v9, a4);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
}

void sub_256328B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t CLMicroLocationLoggedEventsTable::Entry::Entry(uint64_t a1, _OWORD *a2, int a3, CLMicroLocationProto::ReceivedEvent *a4, double a5)
{
  *(_OWORD *)a1 = *a2;
  *(double *)(a1 + 16) = a5;
  *(_DWORD *)(a1 + 24) = a3;
  CLMicroLocationProto::ReceivedEvent::ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)(a1 + 32), a4);
  return a1;
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::AppLaunch *a3)
{
  *((_DWORD *)this + 73) |= 2u;
  id v3 = (CLMicroLocationProto::AppLaunch *)*((void *)this + 2);
  if (!v3) {
    operator new();
  }
  CLMicroLocationProto::AppLaunch::CopyFrom(v3, a2);
}

void sub_256328BE0(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x10A1C406601F8D4);
  _Unwind_Resume(a1);
}

void CLMicroLocationEventLogger::logEvent(CLMicroLocationEventLogger *this, Entry *a2)
{
  int v4 = +[ULDefaultsSingleton shared];
  uint64_t v5 = [v4 defaultsDictionary];

  unint64_t v6 = [NSString stringWithUTF8String:"ULEnableEventLogging"];
  uint64_t v7 = [v5 objectForKey:v6];
  if (v7 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    int v8 = [v7 BOOLValue];
  }
  else {
    int v8 = [MEMORY[0x263EFFA88] BOOLValue];
  }
  int v9 = v8;

  if (v9)
  {
    unint64_t v10 = *((void *)this + 1);
    if (v10 >= *((void *)this + 2))
    {
      uint64_t v12 = std::vector<CLMicroLocationLoggedEventsTable::Entry>::__emplace_back_slow_path<CLMicroLocationLoggedEventsTable::Entry const&>((uint64_t *)this, (long long *)a2);
    }
    else
    {
      long long v11 = (__int128)*a2;
      *(Entry *)(v10 + 12) = *(Entry *)((char *)a2 + 12);
      *(_OWORD *)unint64_t v10 = v11;
      CLMicroLocationProto::ReceivedEvent::ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)(v10 + 32), (const CLMicroLocationProto::ReceivedEvent *)&a2[2]);
      uint64_t v12 = v10 + 336;
      *((void *)this + 1) = v10 + 336;
    }
    *((void *)this + 1) = v12;
    unint64_t v13 = 0xCF3CF3CF3CF3CF3DLL * ((v12 - *(void *)this) >> 4);
    if (v13 >= ULSettings::get<ULSettings::EventLoggerMaxBufferSize>())
    {
      CLMicroLocationEventLogger::flushToDisk(this);
    }
  }
}

void sub_256328D70(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

CLMicroLocationProto::ReceivedEvent *CLMicroLocationProto::ReceivedEvent::ReceivedEvent(CLMicroLocationProto::ReceivedEvent *this, const CLMicroLocationProto::ReceivedEvent *a2)
{
  *(void *)this = &unk_2704DF4D8;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_DWORD *)this + 74) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  CLMicroLocationProto::ReceivedEvent::MergeFrom(this, a2);
  return this;
}

void sub_256328E4C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::ReceivedEvent::MergeFrom(CLMicroLocationProto::ReceivedEvent *this, const CLMicroLocationProto::ReceivedEvent *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v76);
  }
  unsigned int v4 = *((_DWORD *)a2 + 73);
  if (!(_BYTE)v4) {
    goto LABEL_53;
  }
  if (v4)
  {
    *((_DWORD *)this + 73) |= 1u;
    uint64_t v5 = (CLMicroLocationProto::ReceivedEventAction *)*((void *)this + 1);
    if (!v5) {
      operator new();
    }
    unint64_t v6 = (const CLMicroLocationProto::ReceivedEventAction *)*((void *)a2 + 1);
    if (!v6)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
      unint64_t v6 = *(const CLMicroLocationProto::ReceivedEventAction **)(CLMicroLocationProto::ReceivedEvent::default_instance_
                                                               + 8);
    }
    CLMicroLocationProto::ReceivedEventAction::MergeFrom(v5, v6);
    unsigned int v4 = *((_DWORD *)a2 + 73);
    if ((v4 & 2) == 0)
    {
LABEL_6:
      if ((v4 & 4) == 0) {
        goto LABEL_7;
      }
      goto LABEL_23;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_6;
  }
  *((_DWORD *)this + 73) |= 2u;
  uint64_t v7 = (CLMicroLocationProto::AppLaunch *)*((void *)this + 2);
  if (!v7) {
    operator new();
  }
  int v8 = (const CLMicroLocationProto::AppLaunch *)*((void *)a2 + 2);
  if (!v8)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
    int v8 = *(const CLMicroLocationProto::AppLaunch **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 16);
  }
  CLMicroLocationProto::AppLaunch::MergeFrom(v7, v8);
  unsigned int v4 = *((_DWORD *)a2 + 73);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_28;
  }
LABEL_23:
  *((_DWORD *)this + 73) |= 4u;
  int v9 = (CLMicroLocationProto::BacklightOn *)*((void *)this + 3);
  if (!v9) {
    operator new();
  }
  unint64_t v10 = (const CLMicroLocationProto::BacklightOn *)*((void *)a2 + 3);
  if (!v10)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
    unint64_t v10 = *(const CLMicroLocationProto::BacklightOn **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 24);
  }
  CLMicroLocationProto::BacklightOn::MergeFrom(v9, v10);
  unsigned int v4 = *((_DWORD *)a2 + 73);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_33;
  }
LABEL_28:
  *((_DWORD *)this + 73) |= 8u;
  long long v11 = (CLMicroLocationProto::BatteryChargerConnected *)*((void *)this + 4);
  if (!v11) {
    operator new();
  }
  uint64_t v12 = (const CLMicroLocationProto::BatteryChargerConnected *)*((void *)a2 + 4);
  if (!v12)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
    uint64_t v12 = *(const CLMicroLocationProto::BatteryChargerConnected **)(CLMicroLocationProto::ReceivedEvent::default_instance_
                                                                  + 32);
  }
  CLMicroLocationProto::BatteryChargerConnected::MergeFrom(v11, v12);
  unsigned int v4 = *((_DWORD *)a2 + 73);
  if ((v4 & 0x10) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_38:
    *((_DWORD *)this + 73) |= 0x20u;
    Entry v15 = (CLMicroLocationProto::HomeKitAccessory *)*((void *)this + 6);
    if (!v15) {
      operator new();
    }
    long long v16 = (const CLMicroLocationProto::HomeKitAccessory *)*((void *)a2 + 6);
    if (!v16)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
      long long v16 = *(const CLMicroLocationProto::HomeKitAccessory **)(CLMicroLocationProto::ReceivedEvent::default_instance_
                                                             + 48);
    }
    CLMicroLocationProto::HomeKitAccessory::MergeFrom(v15, v16);
    unsigned int v4 = *((_DWORD *)a2 + 73);
    if ((v4 & 0x40) == 0)
    {
LABEL_11:
      if ((v4 & 0x80) == 0) {
        goto LABEL_53;
      }
      goto LABEL_48;
    }
    goto LABEL_43;
  }
LABEL_33:
  *((_DWORD *)this + 73) |= 0x10u;
  unint64_t v13 = (CLMicroLocationProto::ForcedRecording *)*((void *)this + 5);
  if (!v13) {
    operator new();
  }
  long long v14 = (const CLMicroLocationProto::ForcedRecording *)*((void *)a2 + 5);
  if (!v14)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
    long long v14 = *(const CLMicroLocationProto::ForcedRecording **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 40);
  }
  CLMicroLocationProto::ForcedRecording::MergeFrom(v13, v14);
  unsigned int v4 = *((_DWORD *)a2 + 73);
  if ((v4 & 0x20) != 0) {
    goto LABEL_38;
  }
LABEL_10:
  if ((v4 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_43:
  *((_DWORD *)this + 73) |= 0x40u;
  os_log_type_t v17 = (CLMicroLocationProto::HomeKitScene *)*((void *)this + 7);
  if (!v17) {
    operator new();
  }
  uint64_t v18 = (const CLMicroLocationProto::HomeKitScene *)*((void *)a2 + 7);
  if (!v18)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
    uint64_t v18 = *(const CLMicroLocationProto::HomeKitScene **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 56);
  }
  CLMicroLocationProto::HomeKitScene::MergeFrom(v17, v18);
  unsigned int v4 = *((_DWORD *)a2 + 73);
  if ((v4 & 0x80) != 0)
  {
LABEL_48:
    *((_DWORD *)this + 73) |= 0x80u;
    std::string::size_type v19 = (CLMicroLocationProto::NowPlaying *)*((void *)this + 8);
    if (!v19) {
      operator new();
    }
    uint64_t v20 = (const CLMicroLocationProto::NowPlaying *)*((void *)a2 + 8);
    if (!v20)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
      uint64_t v20 = *(const CLMicroLocationProto::NowPlaying **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 64);
    }
    CLMicroLocationProto::NowPlaying::MergeFrom(v19, v20);
    unsigned int v4 = *((_DWORD *)a2 + 73);
  }
LABEL_53:
  if ((v4 & 0xFF00) == 0) {
    goto LABEL_103;
  }
  if ((v4 & 0x100) != 0)
  {
    *((_DWORD *)this + 73) |= 0x100u;
    uint64_t v21 = (CLMicroLocationProto::RecordingRequest *)*((void *)this + 9);
    if (!v21) {
      operator new();
    }
    uint64_t v22 = (const CLMicroLocationProto::RecordingRequest *)*((void *)a2 + 9);
    if (!v22)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
      uint64_t v22 = *(const CLMicroLocationProto::RecordingRequest **)(CLMicroLocationProto::ReceivedEvent::default_instance_
                                                             + 72);
    }
    CLMicroLocationProto::RecordingRequest::MergeFrom(v21, v22);
    unsigned int v4 = *((_DWORD *)a2 + 73);
    if ((v4 & 0x200) == 0)
    {
LABEL_56:
      if ((v4 & 0x400) == 0) {
        goto LABEL_57;
      }
      goto LABEL_73;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_56;
  }
  *((_DWORD *)this + 73) |= 0x200u;
  long long v23 = (CLMicroLocationProto::TruthLabelDonation *)*((void *)this + 10);
  if (!v23) {
    operator new();
  }
  id v24 = (const CLMicroLocationProto::TruthLabelDonation *)*((void *)a2 + 10);
  if (!v24)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
    id v24 = *(const CLMicroLocationProto::TruthLabelDonation **)(CLMicroLocationProto::ReceivedEvent::default_instance_
                                                             + 80);
  }
  CLMicroLocationProto::TruthLabelDonation::MergeFrom(v23, v24);
  unsigned int v4 = *((_DWORD *)a2 + 73);
  if ((v4 & 0x400) == 0)
  {
LABEL_57:
    if ((v4 & 0x800) == 0) {
      goto LABEL_58;
    }
    goto LABEL_78;
  }
LABEL_73:
  *((_DWORD *)this + 73) |= 0x400u;
  std::string::size_type v25 = (CLMicroLocationProto::LearnModel *)*((void *)this + 11);
  if (!v25) {
    operator new();
  }
  size_t v26 = (const CLMicroLocationProto::LearnModel *)*((void *)a2 + 11);
  if (!v26)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
    size_t v26 = *(const CLMicroLocationProto::LearnModel **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 88);
  }
  CLMicroLocationProto::LearnModel::MergeFrom(v25, v26);
  unsigned int v4 = *((_DWORD *)a2 + 73);
  if ((v4 & 0x800) == 0)
  {
LABEL_58:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_59;
    }
    goto LABEL_83;
  }
LABEL_78:
  *((_DWORD *)this + 73) |= 0x800u;
  uint64_t v27 = (CLMicroLocationProto::LearnCompleted *)*((void *)this + 12);
  if (!v27) {
    operator new();
  }
  uint64_t v28 = (const CLMicroLocationProto::LearnCompleted *)*((void *)a2 + 12);
  if (!v28)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
    uint64_t v28 = *(const CLMicroLocationProto::LearnCompleted **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 96);
  }
  CLMicroLocationProto::LearnCompleted::MergeFrom(v27, v28);
  unsigned int v4 = *((_DWORD *)a2 + 73);
  if ((v4 & 0x1000) == 0)
  {
LABEL_59:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_60;
    }
    goto LABEL_88;
  }
LABEL_83:
  *((_DWORD *)this + 73) |= 0x1000u;
  uint64_t v29 = (CLMicroLocationProto::SensorsScanComplete *)*((void *)this + 13);
  if (!v29) {
    operator new();
  }
  uint64_t v30 = (const CLMicroLocationProto::SensorsScanComplete *)*((void *)a2 + 13);
  if (!v30)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
    uint64_t v30 = *(const CLMicroLocationProto::SensorsScanComplete **)(CLMicroLocationProto::ReceivedEvent::default_instance_
                                                              + 104);
  }
  CLMicroLocationProto::SensorsScanComplete::MergeFrom(v29, v30);
  unsigned int v4 = *((_DWORD *)a2 + 73);
  if ((v4 & 0x2000) == 0)
  {
LABEL_60:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_61;
    }
    goto LABEL_93;
  }
LABEL_88:
  *((_DWORD *)this + 73) |= 0x2000u;
  std::string v31 = (CLMicroLocationProto::StartSpectating *)*((void *)this + 14);
  if (!v31) {
    operator new();
  }
  int v32 = (const CLMicroLocationProto::StartSpectating *)*((void *)a2 + 14);
  if (!v32)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
    int v32 = *(const CLMicroLocationProto::StartSpectating **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 112);
  }
  CLMicroLocationProto::StartSpectating::MergeFrom(v31, v32);
  unsigned int v4 = *((_DWORD *)a2 + 73);
  if ((v4 & 0x4000) == 0)
  {
LABEL_61:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_103;
    }
    goto LABEL_98;
  }
LABEL_93:
  *((_DWORD *)this + 73) |= 0x4000u;
  int v33 = (CLMicroLocationProto::StopSpectating *)*((void *)this + 15);
  if (!v33) {
    operator new();
  }
  uint64_t v34 = (const CLMicroLocationProto::StopSpectating *)*((void *)a2 + 15);
  if (!v34)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
    uint64_t v34 = *(const CLMicroLocationProto::StopSpectating **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 120);
  }
  CLMicroLocationProto::StopSpectating::MergeFrom(v33, v34);
  unsigned int v4 = *((_DWORD *)a2 + 73);
  if ((v4 & 0x8000) != 0)
  {
LABEL_98:
    *((_DWORD *)this + 73) |= 0x8000u;
    __int16 v35 = (CLMicroLocationProto::ServiceCreate *)*((void *)this + 16);
    if (!v35) {
      operator new();
    }
    __int16 v36 = (const CLMicroLocationProto::ServiceCreate *)*((void *)a2 + 16);
    if (!v36)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
      __int16 v36 = *(const CLMicroLocationProto::ServiceCreate **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 128);
    }
    CLMicroLocationProto::ServiceCreate::MergeFrom(v35, v36);
    unsigned int v4 = *((_DWORD *)a2 + 73);
  }
LABEL_103:
  if ((v4 & 0xFF0000) == 0) {
    goto LABEL_153;
  }
  if ((v4 & 0x10000) != 0)
  {
    *((_DWORD *)this + 73) |= 0x10000u;
    os_log_type_t v37 = (CLMicroLocationProto::ServiceDelete *)*((void *)this + 17);
    if (!v37) {
      operator new();
    }
    __int16 v38 = (const CLMicroLocationProto::ServiceDelete *)*((void *)a2 + 17);
    if (!v38)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
      __int16 v38 = *(const CLMicroLocationProto::ServiceDelete **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 136);
    }
    CLMicroLocationProto::ServiceDelete::MergeFrom(v37, v38);
    unsigned int v4 = *((_DWORD *)a2 + 73);
    if ((v4 & 0x20000) == 0)
    {
LABEL_106:
      if ((v4 & 0x40000) == 0) {
        goto LABEL_107;
      }
      goto LABEL_123;
    }
  }
  else if ((v4 & 0x20000) == 0)
  {
    goto LABEL_106;
  }
  *((_DWORD *)this + 73) |= 0x20000u;
  int v39 = (CLMicroLocationProto::ServiceConnect *)*((void *)this + 18);
  if (!v39) {
    operator new();
  }
  std::string::size_type v40 = (const CLMicroLocationProto::ServiceConnect *)*((void *)a2 + 18);
  if (!v40)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
    std::string::size_type v40 = *(const CLMicroLocationProto::ServiceConnect **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 144);
  }
  CLMicroLocationProto::ServiceConnect::MergeFrom(v39, v40);
  unsigned int v4 = *((_DWORD *)a2 + 73);
  if ((v4 & 0x40000) == 0)
  {
LABEL_107:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_108;
    }
    goto LABEL_128;
  }
LABEL_123:
  *((_DWORD *)this + 73) |= 0x40000u;
  __int16 v41 = (CLMicroLocationProto::ServiceDisconnect *)*((void *)this + 19);
  if (!v41) {
    operator new();
  }
  __int16 v42 = (const CLMicroLocationProto::ServiceDisconnect *)*((void *)a2 + 19);
  if (!v42)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
    __int16 v42 = *(const CLMicroLocationProto::ServiceDisconnect **)(CLMicroLocationProto::ReceivedEvent::default_instance_
                                                            + 152);
  }
  CLMicroLocationProto::ServiceDisconnect::MergeFrom(v41, v42);
  unsigned int v4 = *((_DWORD *)a2 + 73);
  if ((v4 & 0x80000) == 0)
  {
LABEL_108:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_109;
    }
    goto LABEL_133;
  }
LABEL_128:
  *((_DWORD *)this + 73) |= 0x80000u;
  uint64_t v43 = (CLMicroLocationProto::ServiceStartUpdating *)*((void *)this + 20);
  if (!v43) {
    operator new();
  }
  uint64_t v44 = (const CLMicroLocationProto::ServiceStartUpdating *)*((void *)a2 + 20);
  if (!v44)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
    uint64_t v44 = *(const CLMicroLocationProto::ServiceStartUpdating **)(CLMicroLocationProto::ReceivedEvent::default_instance_
                                                               + 160);
  }
  CLMicroLocationProto::ServiceStartUpdating::MergeFrom(v43, v44);
  unsigned int v4 = *((_DWORD *)a2 + 73);
  if ((v4 & 0x100000) == 0)
  {
LABEL_109:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_110;
    }
    goto LABEL_138;
  }
LABEL_133:
  *((_DWORD *)this + 73) |= 0x100000u;
  long long v45 = (CLMicroLocationProto::ServiceStopUpdating *)*((void *)this + 21);
  if (!v45) {
    operator new();
  }
  int v46 = (const CLMicroLocationProto::ServiceStopUpdating *)*((void *)a2 + 21);
  if (!v46)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
    int v46 = *(const CLMicroLocationProto::ServiceStopUpdating **)(CLMicroLocationProto::ReceivedEvent::default_instance_
                                                              + 168);
  }
  CLMicroLocationProto::ServiceStopUpdating::MergeFrom(v45, v46);
  unsigned int v4 = *((_DWORD *)a2 + 73);
  if ((v4 & 0x200000) == 0)
  {
LABEL_110:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_111;
    }
    goto LABEL_143;
  }
LABEL_138:
  *((_DWORD *)this + 73) |= 0x200000u;
  std::string::size_type v47 = (CLMicroLocationProto::RequestObservation *)*((void *)this + 22);
  if (!v47) {
    operator new();
  }
  long long v48 = (const CLMicroLocationProto::RequestObservation *)*((void *)a2 + 22);
  if (!v48)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
    long long v48 = *(const CLMicroLocationProto::RequestObservation **)(CLMicroLocationProto::ReceivedEvent::default_instance_
                                                             + 176);
  }
  CLMicroLocationProto::RequestObservation::MergeFrom(v47, v48);
  unsigned int v4 = *((_DWORD *)a2 + 73);
  if ((v4 & 0x400000) == 0)
  {
LABEL_111:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_153;
    }
    goto LABEL_148;
  }
LABEL_143:
  *((_DWORD *)this + 73) |= 0x400000u;
  long long v49 = (CLMicroLocationProto::RequestPrediction *)*((void *)this + 23);
  if (!v49) {
    operator new();
  }
  uint64_t v50 = (const CLMicroLocationProto::RequestPrediction *)*((void *)a2 + 23);
  if (!v50)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
    uint64_t v50 = *(const CLMicroLocationProto::RequestPrediction **)(CLMicroLocationProto::ReceivedEvent::default_instance_
                                                            + 184);
  }
  CLMicroLocationProto::RequestPrediction::MergeFrom(v49, v50);
  unsigned int v4 = *((_DWORD *)a2 + 73);
  if ((v4 & 0x800000) != 0)
  {
LABEL_148:
    *((_DWORD *)this + 73) |= 0x800000u;
    long long v51 = (CLMicroLocationProto::MiloInit *)*((void *)this + 24);
    if (!v51) {
      operator new();
    }
    v52 = (const CLMicroLocationProto::MiloInit *)*((void *)a2 + 24);
    if (!v52)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
      v52 = *(const CLMicroLocationProto::MiloInit **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 192);
    }
    CLMicroLocationProto::MiloInit::MergeFrom(v51, v52);
    unsigned int v4 = *((_DWORD *)a2 + 73);
  }
LABEL_153:
  if (!HIBYTE(v4)) {
    goto LABEL_203;
  }
  if ((v4 & 0x1000000) != 0)
  {
    *((_DWORD *)this + 73) |= 0x1000000u;
    std::__split_buffer<std::string> v53 = (CLMicroLocationProto::MotionEvent *)*((void *)this + 25);
    if (!v53) {
      operator new();
    }
    uint64_t v54 = (const CLMicroLocationProto::MotionEvent *)*((void *)a2 + 25);
    if (!v54)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
      uint64_t v54 = *(const CLMicroLocationProto::MotionEvent **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 200);
    }
    CLMicroLocationProto::MotionEvent::MergeFrom(v53, v54);
    unsigned int v4 = *((_DWORD *)a2 + 73);
    if ((v4 & 0x2000000) == 0)
    {
LABEL_156:
      if ((v4 & 0x4000000) == 0) {
        goto LABEL_157;
      }
      goto LABEL_173;
    }
  }
  else if ((v4 & 0x2000000) == 0)
  {
    goto LABEL_156;
  }
  *((_DWORD *)this + 73) |= 0x2000000u;
  uint64_t v55 = (CLMicroLocationProto::LegacyThrottle *)*((void *)this + 26);
  if (!v55) {
    operator new();
  }
  long long v56 = (const CLMicroLocationProto::LegacyThrottle *)*((void *)a2 + 26);
  if (!v56)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
    long long v56 = *(const CLMicroLocationProto::LegacyThrottle **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 208);
  }
  CLMicroLocationProto::LegacyThrottle::MergeFrom(v55, v56);
  unsigned int v4 = *((_DWORD *)a2 + 73);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_157:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_158;
    }
    goto LABEL_178;
  }
LABEL_173:
  *((_DWORD *)this + 73) |= 0x4000000u;
  uint64_t v57 = (CLMicroLocationProto::RetrievedLoi *)*((void *)this + 27);
  if (!v57) {
    operator new();
  }
  v58 = (const CLMicroLocationProto::RetrievedLoi *)*((void *)a2 + 27);
  if (!v58)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
    v58 = *(const CLMicroLocationProto::RetrievedLoi **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 216);
  }
  CLMicroLocationProto::RetrievedLoi::MergeFrom(v57, v58);
  unsigned int v4 = *((_DWORD *)a2 + 73);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_158:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_159;
    }
    goto LABEL_183;
  }
LABEL_178:
  *((_DWORD *)this + 73) |= 0x8000000u;
  v59 = (CLMicroLocationProto::TriggerEvent *)*((void *)this + 28);
  if (!v59) {
    operator new();
  }
  v60 = (const CLMicroLocationProto::TriggerEvent *)*((void *)a2 + 28);
  if (!v60)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
    v60 = *(const CLMicroLocationProto::TriggerEvent **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 224);
  }
  CLMicroLocationProto::TriggerEvent::MergeFrom(v59, v60);
  unsigned int v4 = *((_DWORD *)a2 + 73);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_159:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_160;
    }
    goto LABEL_188;
  }
LABEL_183:
  *((_DWORD *)this + 73) |= 0x10000000u;
  __int16 v61 = (CLMicroLocationProto::LegacyClientStatusUpdate *)*((void *)this + 29);
  if (!v61) {
    operator new();
  }
  v62 = (const CLMicroLocationProto::LegacyClientStatusUpdate *)*((void *)a2 + 29);
  if (!v62)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
    v62 = *(const CLMicroLocationProto::LegacyClientStatusUpdate **)(CLMicroLocationProto::ReceivedEvent::default_instance_
                                                                   + 232);
  }
  CLMicroLocationProto::LegacyClientStatusUpdate::MergeFrom(v61, v62);
  unsigned int v4 = *((_DWORD *)a2 + 73);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_160:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_161;
    }
    goto LABEL_193;
  }
LABEL_188:
  *((_DWORD *)this + 73) |= 0x20000000u;
  uint64_t v63 = (CLMicroLocationProto::SpectatingMotionUpdate *)*((void *)this + 30);
  if (!v63) {
    operator new();
  }
  v64 = (const CLMicroLocationProto::SpectatingMotionUpdate *)*((void *)a2 + 30);
  if (!v64)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
    v64 = *(const CLMicroLocationProto::SpectatingMotionUpdate **)(CLMicroLocationProto::ReceivedEvent::default_instance_
                                                                 + 240);
  }
  CLMicroLocationProto::SpectatingMotionUpdate::MergeFrom(v63, v64);
  unsigned int v4 = *((_DWORD *)a2 + 73);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_161:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_203;
    }
    goto LABEL_198;
  }
LABEL_193:
  *((_DWORD *)this + 73) |= 0x40000000u;
  v65 = (CLMicroLocationProto::EnabledStateUpdate *)*((void *)this + 31);
  if (!v65) {
    operator new();
  }
  v66 = (const CLMicroLocationProto::EnabledStateUpdate *)*((void *)a2 + 31);
  if (!v66)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
    v66 = *(const CLMicroLocationProto::EnabledStateUpdate **)(CLMicroLocationProto::ReceivedEvent::default_instance_
                                                             + 248);
  }
  CLMicroLocationProto::EnabledStateUpdate::MergeFrom(v65, v66);
  if ((*((_DWORD *)a2 + 73) & 0x80000000) != 0)
  {
LABEL_198:
    *((_DWORD *)this + 73) |= 0x80000000;
    v67 = (CLMicroLocationProto::ScreenStateUpdate *)*((void *)this + 32);
    if (!v67) {
      operator new();
    }
    v68 = (const CLMicroLocationProto::ScreenStateUpdate *)*((void *)a2 + 32);
    if (!v68)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
      v68 = *(const CLMicroLocationProto::ScreenStateUpdate **)(CLMicroLocationProto::ReceivedEvent::default_instance_
                                                              + 256);
    }
    CLMicroLocationProto::ScreenStateUpdate::MergeFrom(v67, v68);
  }
LABEL_203:
  LOBYTE(v69) = *((unsigned char *)a2 + 296);
  if (!(_BYTE)v69) {
    return;
  }
  if (*((unsigned char *)a2 + 296))
  {
    *((_DWORD *)this + 74) |= 1u;
    v70 = (CLMicroLocationProto::CloudBackupExport *)*((void *)this + 33);
    if (!v70) {
      operator new();
    }
    v71 = (const CLMicroLocationProto::CloudBackupExport *)*((void *)a2 + 33);
    if (!v71)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
      v71 = *(const CLMicroLocationProto::CloudBackupExport **)(CLMicroLocationProto::ReceivedEvent::default_instance_
                                                              + 264);
    }
    CLMicroLocationProto::CloudBackupExport::MergeFrom(v70, v71);
    int v69 = *((_DWORD *)a2 + 74);
    if ((v69 & 2) == 0)
    {
LABEL_206:
      if ((v69 & 4) == 0) {
        return;
      }
      goto LABEL_218;
    }
  }
  else if ((*((unsigned char *)a2 + 296) & 2) == 0)
  {
    goto LABEL_206;
  }
  *((_DWORD *)this + 74) |= 2u;
  v72 = (CLMicroLocationProto::CloudBackupImport *)*((void *)this + 34);
  if (!v72) {
    operator new();
  }
  v73 = (const CLMicroLocationProto::CloudBackupImport *)*((void *)a2 + 34);
  if (!v73)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
    v73 = *(const CLMicroLocationProto::CloudBackupImport **)(CLMicroLocationProto::ReceivedEvent::default_instance_
                                                            + 272);
  }
  CLMicroLocationProto::CloudBackupImport::MergeFrom(v72, v73);
  if ((*((_DWORD *)a2 + 74) & 4) != 0)
  {
LABEL_218:
    *((_DWORD *)this + 74) |= 4u;
    v74 = (CLMicroLocationProto::DataMigration *)*((void *)this + 35);
    if (!v74) {
      operator new();
    }
    v75 = (const CLMicroLocationProto::DataMigration *)*((void *)a2 + 35);
    if (!v75)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
      v75 = *(const CLMicroLocationProto::DataMigration **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 280);
    }
    CLMicroLocationProto::DataMigration::MergeFrom(v74, v75);
  }
}

void sub_25632A340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

double CLMicroLocationProto::ReceivedEvent::ReceivedEvent(CLMicroLocationProto::ReceivedEvent *this)
{
  *(void *)this = &unk_2704DF4D8;
  double result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_DWORD *)this + 74) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  return result;
}

uint64_t ULSettings::get<ULSettings::EventLoggerMaxBufferSize>()
{
  v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  uint64_t v2 = [NSString stringWithUTF8String:"ULEventLoggerMaxBufferSize"];
  id v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 unsignedIntValue];
  }
  else {
    uint64_t v4 = [&unk_2704F2340 unsignedIntValue];
  }
  uint64_t v5 = v4;

  return v5;
}

void sub_25632A490(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

boost::uuids::detail::random_provider_base *boost::uuids::detail::random_provider_base::random_provider_base(boost::uuids::detail::random_provider_base *this)
{
  *(_DWORD *)this = -1;
  int v2 = open("/dev/urandom", 0x1000000);
  *(_DWORD *)this = v2;
  if (v2 == -1)
  {
    uint64_t v4 = *__error();
    std::string::basic_string[abi:ne180100]<0>(&v7, "open /dev/urandom");
    uint64_t v5 = std::runtime_error::runtime_error(&v8, &v7);
    v8.__vftable = (std::runtime_error_vtbl *)&unk_2704DA8B8;
    uint64_t v9 = v4;
    v6[0] = "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Devel"
            "oper/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/boost/uuid/detai"
            "l/random_provider_posix.ipp";
    v6[1] = "boost::uuids::detail::random_provider_base::random_provider_base()";
    v6[2] = 60;
    boost::throw_exception<boost::uuids::entropy_error>((uint64_t)v5, (uint64_t)v6);
  }
  return this;
}

void sub_25632A590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::runtime_error::~runtime_error((std::runtime_error *)(v18 - 40));
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t boost::uuids::detail::random_provider_base::destroy(boost::uuids::detail::random_provider_base *this)
{
  uint64_t result = *(unsigned int *)this;
  if ((result & 0x80000000) == 0) {
    return close(result);
  }
  return result;
}

uint64_t CLMicroLocationLegacyClient::requestLocalizationOrRecordingIfPossible(CLMicroLocationLegacyClient *this, const CLMicroLocationProto::RecordingEvent *a2)
{
  if (*((unsigned char *)this + 105))
  {
    uint64_t v4 = (CLMicroLocationProto::RecordingEvent *)CLMicroLocationLegacyClient::requestLocalizationIfPossible(this, a2);
    int v5 = (int)v4;
    if ((*((unsigned char *)a2 + 140) & 4) == 0) {
      goto LABEL_6;
    }
    uint64_t v6 = *((void *)a2 + 2);
    if (!v6)
    {
      uint64_t v4 = (CLMicroLocationProto::RecordingEvent *)CLMicroLocationProto::RecordingEvent::default_instance(v4);
      uint64_t v6 = *((void *)v4 + 2);
    }
    if ((*(unsigned char *)(v6 + 44) & 4) != 0)
    {
      uint64_t v13 = *((void *)a2 + 2);
      if (!v13) {
        uint64_t v13 = *(void *)(CLMicroLocationProto::RecordingEvent::default_instance(v4) + 16);
      }
      long long v14 = *(long long **)(v13 + 16);
      if (*((char *)v14 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)v14, *((void *)v14 + 1));
      }
      else
      {
        long long v15 = *v14;
        v25.__r_.__value_.__r.__words[2] = *((void *)v14 + 2);
        *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v15;
      }
    }
    else
    {
LABEL_6:
      std::string::basic_string[abi:ne180100]<0>(&v25, "");
    }
    std::string::basic_string[abi:ne180100]<0>(v23, "localization");
    std::string::basic_string[abi:ne180100]<0>(v21, "home");
    if (v5) {
      std::string v7 = "success";
    }
    else {
      std::string v7 = "fail";
    }
    std::string::basic_string[abi:ne180100]<0>(__p, v7);
    CLMicroLocationLegacyEventDisplayState::getDisplayState((CLMicroLocationLegacyClient *)((char *)this + 2));
    CLMicroLocationCoreAnalyticsPublishHelper::sendTriggerEvent();
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    if (v22 < 0) {
      operator delete(v21[0]);
    }
    if (v24 < 0) {
      operator delete(v23[0]);
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    int v5 = 0;
  }
  if (*((unsigned char *)this + 104))
  {
    std::runtime_error v8 = (CLMicroLocationProto::RecordingEvent *)CLMicroLocationLegacyClient::requestRecordingIfPossible(this, a2);
    unsigned int v9 = v8;
    if ((*((unsigned char *)a2 + 141) & 4) == 0) {
      goto LABEL_24;
    }
    uint64_t v10 = *((void *)a2 + 11);
    if (!v10)
    {
      std::runtime_error v8 = (CLMicroLocationProto::RecordingEvent *)CLMicroLocationProto::RecordingEvent::default_instance(v8);
      uint64_t v10 = *((void *)v8 + 11);
    }
    if ((*(unsigned char *)(v10 + 44) & 4) != 0)
    {
      uint64_t v16 = *((void *)a2 + 11);
      if (!v16) {
        uint64_t v16 = *(void *)(CLMicroLocationProto::RecordingEvent::default_instance(v8) + 88);
      }
      os_log_type_t v17 = *(long long **)(v16 + 16);
      if (*((char *)v17 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)v17, *((void *)v17 + 1));
      }
      else
      {
        long long v18 = *v17;
        v25.__r_.__value_.__r.__words[2] = *((void *)v17 + 2);
        *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v18;
      }
    }
    else
    {
LABEL_24:
      std::string::basic_string[abi:ne180100]<0>(&v25, "");
    }
    std::string::basic_string[abi:ne180100]<0>(v23, "recording");
    std::string::basic_string[abi:ne180100]<0>(v21, "home");
    if (v9) {
      long long v11 = "success";
    }
    else {
      long long v11 = "fail";
    }
    std::string::basic_string[abi:ne180100]<0>(__p, v11);
    CLMicroLocationLegacyEventDisplayState::getDisplayState((CLMicroLocationLegacyClient *)((char *)this + 2));
    CLMicroLocationCoreAnalyticsPublishHelper::sendTriggerEvent();
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    if (v22 < 0) {
      operator delete(v21[0]);
    }
    if (v24 < 0) {
      operator delete(v23[0]);
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    unsigned int v9 = 0;
  }
  return v5 | v9;
}

void sub_25632A878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationEventLogger::flushToDisk(CLMicroLocationEventLogger *this)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (*(void *)this == *((void *)this + 1)) {
    return 1;
  }
  uint64_t v2 = [*(id *)(*((void *)this + 3) + 48) insertEntries:this];
  if (!v2)
  {
    unint64_t v3 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 4);
    if (v3 < ULSettings::get<ULSettings::EventLoggerMaxBufferSize>()) {
      goto LABEL_6;
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_115);
    }
    std::string v7 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v8) = 0;
      _os_log_impl(&dword_25631F000, v7, OS_LOG_TYPE_ERROR, "Max buffer reached after failing to flush to disk, clearing event logger buffer.", (uint8_t *)&v8, 2u);
    }
  }
  CLMicroLocationEventLogger::clearBuffer(this);
LABEL_6:
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_115);
  }
  uint64_t v4 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = @"fail";
    if (v2) {
      int v5 = @"success";
    }
    int v8 = 138412290;
    unsigned int v9 = v5;
    _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_DEFAULT, "flushToDisk: %@", (uint8_t *)&v8, 0xCu);
  }
  return v2;
}

uint64_t ULDBUtils::insertEntries<CLMicroLocationLoggedEventsTable,ULLoggedEventMO>(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2020000000;
  char v15 = 0;
  uint64_t v4 = [v3 managedObjectContext];
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 3221225472;
  v8[2] = ___ZN9ULDBUtils13insertEntriesI32CLMicroLocationLoggedEventsTable15ULLoggedEventMOEEbP7ULStoreRKNSt3__16vectorINT_5EntryENS5_9allocatorIS8_EEEE_block_invoke;
  void v8[3] = &unk_2653F90B8;
  uint64_t v11 = a2;
  id v5 = v3;
  id v9 = v5;
  uint64_t v10 = &v12;
  [v4 performBlockAndWait:v8];

  uint64_t v6 = *((unsigned __int8 *)v13 + 24);
  _Block_object_dispose(&v12, 8);

  return v6;
}

void sub_25632AB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationEventLogger::clearBuffer(CLMicroLocationEventLogger *this)
{
  uint64_t v3 = *(void *)this;
  uint64_t v2 = *((void *)this + 1);
  if (v2 != *(void *)this)
  {
    do
    {
      uint64_t v4 = v2 - 336;
      CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)(v2 - 304));
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  *((void *)this + 1) = v3;
  return std::vector<CLMicroLocationLoggedEventsTable::Entry>::shrink_to_fit((uint64_t)this);
}

void CLMicroLocationProto::ReceivedEvent::~ReceivedEvent(CLMicroLocationProto::ReceivedEvent *this)
{
  *(void *)this = &unk_2704DF4D8;
  CLMicroLocationProto::ReceivedEvent::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent(this);
  JUMPOUT(0x25A2A6340);
}

uint64_t CLMicroLocationProto::LegacyClientStatusUpdate::GetCachedSize(CLMicroLocationProto::LegacyClientStatusUpdate *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t CLMicroLocationProto::ScreenStateUpdate::GetCachedSize(CLMicroLocationProto::ScreenStateUpdate *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t CLMicroLocationProto::BacklightOn::GetCachedSize(CLMicroLocationProto::BacklightOn *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t CLMicroLocationProto::ServiceStartUpdating::GetCachedSize(CLMicroLocationProto::ServiceStartUpdating *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t CLMicroLocationProto::ServiceConnect::GetCachedSize(CLMicroLocationProto::ServiceConnect *this)
{
  return *((unsigned int *)this + 7);
}

void *CLMicroLocationLoiManager::HandleLeechedLocation@<X0>(ULDatabase **this@<X0>, id *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_49);
  }
  uint64_t v6 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)uint64_t v14 = 68289026;
    *(_WORD *)&v14[8] = 2082;
    *(void *)&v14[10] = "";
    _os_log_impl(&dword_25631F000, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"LOI Manager: handle leeched location notification\"}", v14, 0x12u);
  }
  [a2[4] coordinate];
  double v8 = v7;
  [a2[4] coordinate];
  if (CLMicroLocationLoiManager::refreshRoutineStateAtLocation(this, v8, v9))
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_49);
    }
    uint64_t v10 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl(&dword_25631F000, v10, OS_LOG_TYPE_DEFAULT, "LOI Manager, requested LOI for current visit location", v14, 2u);
    }
    uint64_t result = std::string::basic_string[abi:ne180100]<0>(v14, "In the process of entering Home LOI");
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_49);
    }
    uint64_t v12 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      *(void *)uint64_t v14 = 68289026;
      *(_WORD *)&v14[8] = 2082;
      *(void *)&v14[10] = "";
      _os_log_impl(&dword_25631F000, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"LOI Manager, Failed To request LOI for current visit location\"}", v14, 0x12u);
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_49);
    }
    uint64_t v13 = logObject_MicroLocation_Default;
    if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
    {
      *(void *)uint64_t v14 = 68289026;
      *(_WORD *)&v14[8] = 2082;
      *(void *)&v14[10] = "";
      _os_signpost_emit_with_name_impl(&dword_25631F000, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "LOI Manager, Failed To request LOI for current visit location", "{\"msg%{public}.0s\":\"LOI Manager, Failed To request LOI for current visit location\"}", v14, 0x12u);
    }
    uint64_t result = std::string::basic_string[abi:ne180100]<0>(v14, "Not in Active Location State");
  }
  *(_OWORD *)a3 = *(_OWORD *)v14;
  *(void *)(a3 + 16) = *(void *)&v14[16];
  *(unsigned char *)(a3 + 24) = 1;
  return result;
}

BOOL CLMicroLocationLoiManager::fetchLocationOfInterest(CLMicroLocationLoiManager *this)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 42);
  if (v1)
  {
    uint64_t v3 = (void *)[objc_alloc(MEMORY[0x263F00A50]) initWithLatitude:*((double *)this + 44) longitude:*((double *)this + 45)];
    [*((id *)this + 42) fetchLocationOfInterestAtLocation:v3];
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_49);
    }
    uint64_t v4 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      v6[0] = 68289026;
      v6[1] = 0;
      __int16 v7 = 2082;
      double v8 = "";
      _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning LOI Bridge not setup.\"}", (uint8_t *)v6, 0x12u);
    }
  }
  return v1 != 0;
}

void sub_25632B118(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25632B378(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v3 - 96));
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationProto::MiloInit::GetCachedSize(CLMicroLocationProto::MiloInit *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t CLMicroLocationProto::BatteryChargerConnected::GetCachedSize(CLMicroLocationProto::BatteryChargerConnected *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t CLMicroLocationProto::EnabledStateUpdate::GetCachedSize(CLMicroLocationProto::EnabledStateUpdate *this)
{
  return *((unsigned int *)this + 5);
}

void CLMicroLocationProto::LegacyClientStatusUpdate::~LegacyClientStatusUpdate(CLMicroLocationProto::LegacyClientStatusUpdate *this)
{
  CLMicroLocationProto::LegacyClientStatusUpdate::~LegacyClientStatusUpdate(this);
  JUMPOUT(0x25A2A6340);
}

{
  uint64_t vars8;

  *(void *)this = &unk_2704DF6B8;
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void CLMicroLocationLoiManager::handleFetchedLocationOfInterestAtLocation(CLMicroLocationLoiManager *this, CLMicroLocationLoi *a2, CLLocation *a3, NSError *a4)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  __int16 v7 = a2;
  double v8 = a3;
  uint64_t v9 = a4;
  if (v9)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_49);
    }
    uint64_t v10 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      id v11 = [(NSError *)v9 description];
      LODWORD(v12) = 136380675;
      *(void *)((char *)&v12 + 4) = [v11 UTF8String];
      _os_log_impl(&dword_25631F000, v10, OS_LOG_TYPE_DEFAULT, "#Warning LOI Manager, Error retrieving the current LOI. %{private}s", (uint8_t *)&v12, 0xCu);
    }
    CLMiLoLoiManagerFailedToFetchLoiForLocationEvent::CLMiLoLoiManagerFailedToFetchLoiForLocationEvent((CLMiLoLoiManagerFailedToFetchLoiForLocationEvent *)&v12);
    CLMicroLocationStateMachine::StateMachineBase::handleEvent((CLMicroLocationLoiManager *)((char *)this + 8), (CLMicroLocationStateMachine::EventBase *)&v12);
  }
  else
  {
    CLMiLoLoiManagerReceivedLoiForLocationEvent::CLMiLoLoiManagerReceivedLoiForLocationEvent((CLMiLoLoiManagerReceivedLoiForLocationEvent *)&v12, v7);
    CLMicroLocationStateMachine::StateMachineBase::handleEvent((CLMicroLocationLoiManager *)((char *)this + 8), (CLMicroLocationStateMachine::EventBase *)&v12);
  }
  *(void *)&long long v12 = &unk_2704DC488;
  if (v13 < 0) {
    operator delete(*((void **)&v12 + 1));
  }
}

void sub_25632B630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void CLMiLoLoiManagerReceivedLoiForLocationEvent::CLMiLoLoiManagerReceivedLoiForLocationEvent(CLMiLoLoiManagerReceivedLoiForLocationEvent *this, CLMicroLocationLoi *a2)
{
  uint64_t v4 = a2;
  *(void *)this = &unk_2704DC488;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 1, "No Name Given");
  *(void *)this = &unk_2704DD3B0;
  *((void *)this + 4) = 0;
  objc_storeStrong((id *)this + 4, a2);
  MEMORY[0x25A2A6080]((char *)this + 8, "Got LOI Event");
}

void sub_25632B764(_Unwind_Exception *a1)
{
  *(void *)uint64_t v2 = v4;
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*v3);
  }

  _Unwind_Resume(a1);
}

void sub_25632B8B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25632B96C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN9ULDBUtils13insertEntriesI32CLMicroLocationLoggedEventsTable15ULLoggedEventMOEEbP7ULStoreRKNSt3__16vectorINT_5EntryENS5_9allocatorIS8_EEEE_block_invoke(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(a1 + 48);
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  if (*v2 == v4)
  {
LABEL_4:
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [*(id *)(a1 + 32) commitChangesToStore];
    __int16 v7 = *(void **)(a1 + 32);
    [v7 deleteOldestRecordsIfFull];
  }
  else
  {
    while (1)
    {
      id v5 = [*(id *)(a1 + 32) managedObjectContext];
      uint64_t v6 = +[ULLoggedEventMO createFromEntry:v3 inManagedObjectContext:v5];

      if (!v6) {
        break;
      }

      v3 += 336;
      if (v3 == v4) {
        goto LABEL_4;
      }
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_77);
    }
    double v8 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = +[ULLoggedEventMO entity];
      uint64_t v10 = [v9 name];
      int v15 = 68289283;
      int v16 = 0;
      __int16 v17 = 2082;
      long long v18 = "";
      __int16 v19 = 2113;
      char v20 = v10;
      _os_log_impl(&dword_25631F000, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to create entry from MO\", \"MO\":%{private, location:escape_only}@}", (uint8_t *)&v15, 0x1Cu);
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_77);
    }
    id v11 = (id)logObject_MicroLocation_Default;
    if (os_signpost_enabled(v11))
    {
      long long v12 = +[ULLoggedEventMO entity];
      char v13 = [v12 name];
      int v15 = 68289283;
      int v16 = 0;
      __int16 v17 = 2082;
      long long v18 = "";
      __int16 v19 = 2113;
      char v20 = v13;
      _os_signpost_emit_with_name_impl(&dword_25631F000, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to create entry from MO", "{\"msg%{public}.0s\":\"Failed to create entry from MO\", \"MO\":%{private, location:escape_only}@}", (uint8_t *)&v15, 0x1Cu);
    }
    id v14 = [*(id *)(a1 + 32) managedObjectContext];
    [v14 reset];
  }
}

void sub_25632BC44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25632BE6C(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6320](v3, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationProto::ReceivedEvent::ByteSize(CLMicroLocationProto::ReceivedEvent *this)
{
  unsigned int v2 = *((_DWORD *)this + 73);
  if (!(_BYTE)v2)
  {
    uint64_t v3 = 0;
    goto LABEL_61;
  }
  if ((v2 & 1) == 0)
  {
    uint64_t v3 = 0;
    if ((v2 & 2) == 0) {
      goto LABEL_18;
    }
    goto LABEL_12;
  }
  uint64_t v4 = (CLMicroLocationProto::ReceivedEventAction *)*((void *)this + 1);
  if (!v4)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    uint64_t v4 = *(CLMicroLocationProto::ReceivedEventAction **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 8);
  }
  id v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::ReceivedEventAction::ByteSize(v4);
  int v6 = (int)v5;
  if (v5 >= 0x80) {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5);
  }
  else {
    int v7 = 1;
  }
  uint64_t v3 = (v6 + v7 + 1);
  unsigned int v2 = *((_DWORD *)this + 73);
  if ((v2 & 2) != 0)
  {
LABEL_12:
    uint64_t v8 = *((void *)this + 2);
    if (!v8)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
      uint64_t v8 = *(void *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 16);
    }
    uint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::AppLaunch::ByteSize(v8);
    int v10 = (int)v9;
    if (v9 >= 0x80) {
      int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9);
    }
    else {
      int v11 = 1;
    }
    uint64_t v3 = (v3 + v10 + v11 + 1);
    unsigned int v2 = *((_DWORD *)this + 73);
  }
LABEL_18:
  if ((v2 & 4) != 0)
  {
    long long v12 = (CLMicroLocationProto::BacklightOn *)*((void *)this + 3);
    if (!v12)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
      long long v12 = *(CLMicroLocationProto::BacklightOn **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 24);
    }
    char v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::BacklightOn::ByteSize(v12);
    int v14 = (int)v13;
    if (v13 >= 0x80) {
      int v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13);
    }
    else {
      int v15 = 1;
    }
    uint64_t v3 = (v3 + v14 + v15 + 1);
    unsigned int v2 = *((_DWORD *)this + 73);
    if ((v2 & 8) == 0)
    {
LABEL_20:
      if ((v2 & 0x10) == 0) {
        goto LABEL_21;
      }
      goto LABEL_37;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_20;
  }
  int v16 = (CLMicroLocationProto::BatteryChargerConnected *)*((void *)this + 4);
  if (!v16)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    int v16 = *(CLMicroLocationProto::BatteryChargerConnected **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 32);
  }
  __int16 v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::BatteryChargerConnected::ByteSize(v16);
  int v18 = (int)v17;
  if (v17 >= 0x80) {
    int v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17);
  }
  else {
    int v19 = 1;
  }
  uint64_t v3 = (v3 + v18 + v19 + 1);
  unsigned int v2 = *((_DWORD *)this + 73);
  if ((v2 & 0x10) == 0)
  {
LABEL_21:
    if ((v2 & 0x20) == 0) {
      goto LABEL_22;
    }
    goto LABEL_43;
  }
LABEL_37:
  char v20 = (CLMicroLocationProto::ForcedRecording *)*((void *)this + 5);
  if (!v20)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    char v20 = *(CLMicroLocationProto::ForcedRecording **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 40);
  }
  uint64_t v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::ForcedRecording::ByteSize(v20);
  int v22 = (int)v21;
  if (v21 >= 0x80) {
    int v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21);
  }
  else {
    int v23 = 1;
  }
  uint64_t v3 = (v3 + v22 + v23 + 1);
  unsigned int v2 = *((_DWORD *)this + 73);
  if ((v2 & 0x20) == 0)
  {
LABEL_22:
    if ((v2 & 0x40) == 0) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }
LABEL_43:
  char v24 = (CLMicroLocationProto::HomeKitAccessory *)*((void *)this + 6);
  if (!v24)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    char v24 = *(CLMicroLocationProto::HomeKitAccessory **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 48);
  }
  std::string v25 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::HomeKitAccessory::ByteSize(v24);
  int v26 = (int)v25;
  if (v25 >= 0x80) {
    int v27 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v25);
  }
  else {
    int v27 = 1;
  }
  uint64_t v3 = (v3 + v26 + v27 + 1);
  unsigned int v2 = *((_DWORD *)this + 73);
  if ((v2 & 0x40) == 0)
  {
LABEL_23:
    if ((v2 & 0x80) == 0) {
      goto LABEL_61;
    }
    goto LABEL_55;
  }
LABEL_49:
  uint64_t v28 = (CLMicroLocationProto::HomeKitScene *)*((void *)this + 7);
  if (!v28)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    uint64_t v28 = *(CLMicroLocationProto::HomeKitScene **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 56);
  }
  uint64_t v29 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::HomeKitScene::ByteSize(v28);
  int v30 = (int)v29;
  if (v29 >= 0x80) {
    int v31 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v29);
  }
  else {
    int v31 = 1;
  }
  uint64_t v3 = (v3 + v30 + v31 + 1);
  unsigned int v2 = *((_DWORD *)this + 73);
  if ((v2 & 0x80) != 0)
  {
LABEL_55:
    uint64_t v32 = *((void *)this + 8);
    if (!v32)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
      uint64_t v32 = *(void *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 64);
    }
    int v33 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::NowPlaying::ByteSize(v32);
    int v34 = (int)v33;
    if (v33 >= 0x80) {
      int v35 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v33);
    }
    else {
      int v35 = 1;
    }
    uint64_t v3 = (v3 + v34 + v35 + 1);
    unsigned int v2 = *((_DWORD *)this + 73);
  }
LABEL_61:
  if ((v2 & 0xFF00) == 0) {
    goto LABEL_119;
  }
  if ((v2 & 0x100) != 0)
  {
    __int16 v36 = (CLMicroLocationProto::RecordingRequest *)*((void *)this + 9);
    if (!v36)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
      __int16 v36 = *(CLMicroLocationProto::RecordingRequest **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 72);
    }
    os_log_type_t v37 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::RecordingRequest::ByteSize(v36);
    int v38 = (int)v37;
    if (v37 >= 0x80) {
      int v39 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v37);
    }
    else {
      int v39 = 1;
    }
    uint64_t v3 = (v3 + v38 + v39 + 1);
    unsigned int v2 = *((_DWORD *)this + 73);
    if ((v2 & 0x200) == 0)
    {
LABEL_64:
      if ((v2 & 0x400) == 0) {
        goto LABEL_65;
      }
      goto LABEL_83;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_64;
  }
  std::string::size_type v40 = (CLMicroLocationProto::TruthLabelDonation *)*((void *)this + 10);
  if (!v40)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    std::string::size_type v40 = *(CLMicroLocationProto::TruthLabelDonation **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 80);
  }
  __int16 v41 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::TruthLabelDonation::ByteSize(v40);
  int v42 = (int)v41;
  if (v41 >= 0x80) {
    int v43 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v41);
  }
  else {
    int v43 = 1;
  }
  uint64_t v3 = (v3 + v42 + v43 + 1);
  unsigned int v2 = *((_DWORD *)this + 73);
  if ((v2 & 0x400) == 0)
  {
LABEL_65:
    if ((v2 & 0x800) == 0) {
      goto LABEL_66;
    }
    goto LABEL_89;
  }
LABEL_83:
  uint64_t v44 = (CLMicroLocationProto::LearnModel *)*((void *)this + 11);
  if (!v44)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    uint64_t v44 = *(CLMicroLocationProto::LearnModel **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 88);
  }
  long long v45 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::LearnModel::ByteSize(v44);
  int v46 = (int)v45;
  if (v45 >= 0x80) {
    int v47 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v45);
  }
  else {
    int v47 = 1;
  }
  uint64_t v3 = (v3 + v46 + v47 + 1);
  unsigned int v2 = *((_DWORD *)this + 73);
  if ((v2 & 0x800) == 0)
  {
LABEL_66:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_67;
    }
    goto LABEL_95;
  }
LABEL_89:
  long long v48 = (CLMicroLocationProto::LearnCompleted *)*((void *)this + 12);
  if (!v48)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    long long v48 = *(CLMicroLocationProto::LearnCompleted **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 96);
  }
  long long v49 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::LearnCompleted::ByteSize(v48);
  int v50 = (int)v49;
  if (v49 >= 0x80) {
    int v51 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v49);
  }
  else {
    int v51 = 1;
  }
  uint64_t v3 = (v3 + v50 + v51 + 1);
  unsigned int v2 = *((_DWORD *)this + 73);
  if ((v2 & 0x1000) == 0)
  {
LABEL_67:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_68;
    }
    goto LABEL_101;
  }
LABEL_95:
  v52 = (CLMicroLocationProto::SensorsScanComplete *)*((void *)this + 13);
  if (!v52)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    v52 = *(CLMicroLocationProto::SensorsScanComplete **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 104);
  }
  std::__split_buffer<std::string> v53 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::SensorsScanComplete::ByteSize(v52);
  int v54 = (int)v53;
  if (v53 >= 0x80) {
    int v55 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v53);
  }
  else {
    int v55 = 1;
  }
  uint64_t v3 = (v3 + v54 + v55 + 2);
  unsigned int v2 = *((_DWORD *)this + 73);
  if ((v2 & 0x2000) == 0)
  {
LABEL_68:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_69;
    }
    goto LABEL_107;
  }
LABEL_101:
  long long v56 = (CLMicroLocationProto::StartSpectating *)*((void *)this + 14);
  if (!v56)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    long long v56 = *(CLMicroLocationProto::StartSpectating **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 112);
  }
  uint64_t v57 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::StartSpectating::ByteSize(v56);
  int v58 = (int)v57;
  if (v57 >= 0x80) {
    int v59 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v57);
  }
  else {
    int v59 = 1;
  }
  uint64_t v3 = (v3 + v58 + v59 + 2);
  unsigned int v2 = *((_DWORD *)this + 73);
  if ((v2 & 0x4000) == 0)
  {
LABEL_69:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_119;
    }
    goto LABEL_113;
  }
LABEL_107:
  v60 = (CLMicroLocationProto::StopSpectating *)*((void *)this + 15);
  if (!v60)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    v60 = *(CLMicroLocationProto::StopSpectating **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 120);
  }
  __int16 v61 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::StopSpectating::ByteSize(v60);
  int v62 = (int)v61;
  if (v61 >= 0x80) {
    int v63 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v61);
  }
  else {
    int v63 = 1;
  }
  uint64_t v3 = (v3 + v62 + v63 + 2);
  unsigned int v2 = *((_DWORD *)this + 73);
  if ((v2 & 0x8000) != 0)
  {
LABEL_113:
    v64 = (CLMicroLocationProto::ServiceCreate *)*((void *)this + 16);
    if (!v64)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
      v64 = *(CLMicroLocationProto::ServiceCreate **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 128);
    }
    v65 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::ServiceCreate::ByteSize(v64);
    int v66 = (int)v65;
    if (v65 >= 0x80) {
      int v67 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v65);
    }
    else {
      int v67 = 1;
    }
    uint64_t v3 = (v3 + v66 + v67 + 2);
    unsigned int v2 = *((_DWORD *)this + 73);
  }
LABEL_119:
  if ((v2 & 0xFF0000) == 0) {
    goto LABEL_177;
  }
  if ((v2 & 0x10000) != 0)
  {
    v68 = (CLMicroLocationProto::ServiceDelete *)*((void *)this + 17);
    if (!v68)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
      v68 = *(CLMicroLocationProto::ServiceDelete **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 136);
    }
    int v69 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::ServiceDelete::ByteSize(v68);
    int v70 = (int)v69;
    if (v69 >= 0x80) {
      int v71 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v69);
    }
    else {
      int v71 = 1;
    }
    uint64_t v3 = (v3 + v70 + v71 + 2);
    unsigned int v2 = *((_DWORD *)this + 73);
    if ((v2 & 0x20000) == 0)
    {
LABEL_122:
      if ((v2 & 0x40000) == 0) {
        goto LABEL_123;
      }
      goto LABEL_141;
    }
  }
  else if ((v2 & 0x20000) == 0)
  {
    goto LABEL_122;
  }
  v72 = (CLMicroLocationProto::ServiceConnect *)*((void *)this + 18);
  if (!v72)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    v72 = *(CLMicroLocationProto::ServiceConnect **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 144);
  }
  v73 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::ServiceConnect::ByteSize(v72);
  int v74 = (int)v73;
  if (v73 >= 0x80) {
    int v75 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v73);
  }
  else {
    int v75 = 1;
  }
  uint64_t v3 = (v3 + v74 + v75 + 2);
  unsigned int v2 = *((_DWORD *)this + 73);
  if ((v2 & 0x40000) == 0)
  {
LABEL_123:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_124;
    }
    goto LABEL_147;
  }
LABEL_141:
  v76 = (CLMicroLocationProto::ServiceDisconnect *)*((void *)this + 19);
  if (!v76)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    v76 = *(CLMicroLocationProto::ServiceDisconnect **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 152);
  }
  v77 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::ServiceDisconnect::ByteSize(v76);
  int v78 = (int)v77;
  if (v77 >= 0x80) {
    int v79 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v77);
  }
  else {
    int v79 = 1;
  }
  uint64_t v3 = (v3 + v78 + v79 + 2);
  unsigned int v2 = *((_DWORD *)this + 73);
  if ((v2 & 0x80000) == 0)
  {
LABEL_124:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_125;
    }
    goto LABEL_153;
  }
LABEL_147:
  v80 = (CLMicroLocationProto::ServiceStartUpdating *)*((void *)this + 20);
  if (!v80)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    v80 = *(CLMicroLocationProto::ServiceStartUpdating **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 160);
  }
  v81 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::ServiceStartUpdating::ByteSize(v80);
  int v82 = (int)v81;
  if (v81 >= 0x80) {
    int v83 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v81);
  }
  else {
    int v83 = 1;
  }
  uint64_t v3 = (v3 + v82 + v83 + 2);
  unsigned int v2 = *((_DWORD *)this + 73);
  if ((v2 & 0x100000) == 0)
  {
LABEL_125:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_126;
    }
    goto LABEL_159;
  }
LABEL_153:
  v84 = (CLMicroLocationProto::ServiceStopUpdating *)*((void *)this + 21);
  if (!v84)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    v84 = *(CLMicroLocationProto::ServiceStopUpdating **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 168);
  }
  v85 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::ServiceStopUpdating::ByteSize(v84);
  int v86 = (int)v85;
  if (v85 >= 0x80) {
    int v87 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v85);
  }
  else {
    int v87 = 1;
  }
  uint64_t v3 = (v3 + v86 + v87 + 2);
  unsigned int v2 = *((_DWORD *)this + 73);
  if ((v2 & 0x200000) == 0)
  {
LABEL_126:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_127;
    }
    goto LABEL_165;
  }
LABEL_159:
  v88 = (CLMicroLocationProto::RequestObservation *)*((void *)this + 22);
  if (!v88)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    v88 = *(CLMicroLocationProto::RequestObservation **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 176);
  }
  v89 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::RequestObservation::ByteSize(v88);
  int v90 = (int)v89;
  if (v89 >= 0x80) {
    int v91 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v89);
  }
  else {
    int v91 = 1;
  }
  uint64_t v3 = (v3 + v90 + v91 + 2);
  unsigned int v2 = *((_DWORD *)this + 73);
  if ((v2 & 0x400000) == 0)
  {
LABEL_127:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_177;
    }
    goto LABEL_171;
  }
LABEL_165:
  v92 = (CLMicroLocationProto::RequestPrediction *)*((void *)this + 23);
  if (!v92)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    v92 = *(CLMicroLocationProto::RequestPrediction **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 184);
  }
  v93 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::RequestPrediction::ByteSize(v92);
  int v94 = (int)v93;
  if (v93 >= 0x80) {
    int v95 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v93);
  }
  else {
    int v95 = 1;
  }
  uint64_t v3 = (v3 + v94 + v95 + 2);
  unsigned int v2 = *((_DWORD *)this + 73);
  if ((v2 & 0x800000) != 0)
  {
LABEL_171:
    v96 = (CLMicroLocationProto::MiloInit *)*((void *)this + 24);
    if (!v96)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
      v96 = *(CLMicroLocationProto::MiloInit **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 192);
    }
    v97 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::MiloInit::ByteSize(v96);
    int v98 = (int)v97;
    if (v97 >= 0x80) {
      int v99 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v97);
    }
    else {
      int v99 = 1;
    }
    uint64_t v3 = (v3 + v98 + v99 + 2);
    unsigned int v2 = *((_DWORD *)this + 73);
  }
LABEL_177:
  if (!HIBYTE(v2)) {
    goto LABEL_235;
  }
  if ((v2 & 0x1000000) != 0)
  {
    v100 = (CLMicroLocationProto::MotionEvent *)*((void *)this + 25);
    if (!v100)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
      v100 = *(CLMicroLocationProto::MotionEvent **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 200);
    }
    v101 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::MotionEvent::ByteSize(v100);
    int v102 = (int)v101;
    if (v101 >= 0x80) {
      int v103 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v101);
    }
    else {
      int v103 = 1;
    }
    uint64_t v3 = (v3 + v102 + v103 + 2);
    unsigned int v2 = *((_DWORD *)this + 73);
    if ((v2 & 0x2000000) == 0)
    {
LABEL_180:
      if ((v2 & 0x4000000) == 0) {
        goto LABEL_181;
      }
      goto LABEL_199;
    }
  }
  else if ((v2 & 0x2000000) == 0)
  {
    goto LABEL_180;
  }
  v104 = (CLMicroLocationProto::LegacyThrottle *)*((void *)this + 26);
  if (!v104)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    v104 = *(CLMicroLocationProto::LegacyThrottle **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 208);
  }
  v105 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::LegacyThrottle::ByteSize(v104);
  int v106 = (int)v105;
  if (v105 >= 0x80) {
    int v107 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v105);
  }
  else {
    int v107 = 1;
  }
  uint64_t v3 = (v3 + v106 + v107 + 2);
  unsigned int v2 = *((_DWORD *)this + 73);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_181:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_182;
    }
    goto LABEL_205;
  }
LABEL_199:
  v108 = (CLMicroLocationProto::RetrievedLoi *)*((void *)this + 27);
  if (!v108)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    v108 = *(CLMicroLocationProto::RetrievedLoi **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 216);
  }
  v109 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::RetrievedLoi::ByteSize(v108);
  int v110 = (int)v109;
  if (v109 >= 0x80) {
    int v111 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v109);
  }
  else {
    int v111 = 1;
  }
  uint64_t v3 = (v3 + v110 + v111 + 2);
  unsigned int v2 = *((_DWORD *)this + 73);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_182:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_183;
    }
    goto LABEL_211;
  }
LABEL_205:
  v112 = (CLMicroLocationProto::TriggerEvent *)*((void *)this + 28);
  if (!v112)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    v112 = *(CLMicroLocationProto::TriggerEvent **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 224);
  }
  v113 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::TriggerEvent::ByteSize(v112);
  int v114 = (int)v113;
  if (v113 >= 0x80) {
    int v115 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v113);
  }
  else {
    int v115 = 1;
  }
  uint64_t v3 = (v3 + v114 + v115 + 2);
  unsigned int v2 = *((_DWORD *)this + 73);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_183:
    if ((v2 & 0x20000000) == 0) {
      goto LABEL_184;
    }
    goto LABEL_217;
  }
LABEL_211:
  v116 = (CLMicroLocationProto::LegacyClientStatusUpdate *)*((void *)this + 29);
  if (!v116)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    v116 = *(CLMicroLocationProto::LegacyClientStatusUpdate **)(CLMicroLocationProto::ReceivedEvent::default_instance_
                                                              + 232);
  }
  v117 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::LegacyClientStatusUpdate::ByteSize(v116);
  int v118 = (int)v117;
  if (v117 >= 0x80) {
    int v119 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v117);
  }
  else {
    int v119 = 1;
  }
  uint64_t v3 = (v3 + v118 + v119 + 2);
  unsigned int v2 = *((_DWORD *)this + 73);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_184:
    if ((v2 & 0x40000000) == 0) {
      goto LABEL_185;
    }
    goto LABEL_223;
  }
LABEL_217:
  v120 = (CLMicroLocationProto::SpectatingMotionUpdate *)*((void *)this + 30);
  if (!v120)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    v120 = *(CLMicroLocationProto::SpectatingMotionUpdate **)(CLMicroLocationProto::ReceivedEvent::default_instance_
                                                            + 240);
  }
  v121 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::SpectatingMotionUpdate::ByteSize(v120);
  int v122 = (int)v121;
  if (v121 >= 0x80) {
    int v123 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v121);
  }
  else {
    int v123 = 1;
  }
  uint64_t v3 = (v3 + v122 + v123 + 2);
  unsigned int v2 = *((_DWORD *)this + 73);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_185:
    if ((v2 & 0x80000000) == 0) {
      goto LABEL_235;
    }
    goto LABEL_229;
  }
LABEL_223:
  v124 = (CLMicroLocationProto::EnabledStateUpdate *)*((void *)this + 31);
  if (!v124)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    v124 = *(CLMicroLocationProto::EnabledStateUpdate **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 248);
  }
  v125 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::EnabledStateUpdate::ByteSize(v124);
  int v126 = (int)v125;
  if (v125 >= 0x80) {
    int v127 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v125);
  }
  else {
    int v127 = 1;
  }
  uint64_t v3 = (v3 + v126 + v127 + 2);
  if ((*((_DWORD *)this + 73) & 0x80000000) != 0)
  {
LABEL_229:
    v128 = (CLMicroLocationProto::ScreenStateUpdate *)*((void *)this + 32);
    if (!v128)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
      v128 = *(CLMicroLocationProto::ScreenStateUpdate **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 256);
    }
    v129 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::ScreenStateUpdate::ByteSize(v128);
    int v130 = (int)v129;
    if (v129 >= 0x80) {
      int v131 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v129);
    }
    else {
      int v131 = 1;
    }
    uint64_t v3 = (v3 + v130 + v131 + 2);
  }
LABEL_235:
  LOBYTE(v132) = *((unsigned char *)this + 296);
  if (!(_BYTE)v132) {
    goto LABEL_258;
  }
  if (*((unsigned char *)this + 296))
  {
    v133 = (CLMicroLocationProto::CloudBackupExport *)*((void *)this + 33);
    if (!v133)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
      v133 = *(CLMicroLocationProto::CloudBackupExport **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 264);
    }
    v134 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::CloudBackupExport::ByteSize(v133);
    int v135 = (int)v134;
    if (v134 >= 0x80) {
      int v136 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v134);
    }
    else {
      int v136 = 1;
    }
    uint64_t v3 = (v3 + v135 + v136 + 2);
    int v132 = *((_DWORD *)this + 74);
    if ((v132 & 2) == 0)
    {
LABEL_238:
      if ((v132 & 4) == 0) {
        goto LABEL_258;
      }
      goto LABEL_252;
    }
  }
  else if ((*((unsigned char *)this + 296) & 2) == 0)
  {
    goto LABEL_238;
  }
  v137 = (CLMicroLocationProto::CloudBackupImport *)*((void *)this + 34);
  if (!v137)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    v137 = *(CLMicroLocationProto::CloudBackupImport **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 272);
  }
  v138 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::CloudBackupImport::ByteSize(v137);
  int v139 = (int)v138;
  if (v138 >= 0x80) {
    int v140 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v138);
  }
  else {
    int v140 = 1;
  }
  uint64_t v3 = (v3 + v139 + v140 + 2);
  if ((*((_DWORD *)this + 74) & 4) != 0)
  {
LABEL_252:
    v141 = (CLMicroLocationProto::DataMigration *)*((void *)this + 35);
    if (!v141)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
      v141 = *(CLMicroLocationProto::DataMigration **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 280);
    }
    v142 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::DataMigration::ByteSize(v141);
    int v143 = (int)v142;
    if (v142 >= 0x80) {
      int v144 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v142);
    }
    else {
      int v144 = 1;
    }
    uint64_t v3 = (v3 + v143 + v144 + 2);
  }
LABEL_258:
  *((_DWORD *)this + 72) = v3;
  return v3;
}

uint64_t CLMicroLocationProto::AppLaunch::ByteSize(uint64_t this)
{
  uint64_t v1 = this;
  LOBYTE(v2) = *(unsigned char *)(this + 40);
  if (!(_BYTE)v2)
  {
    uint64_t v3 = 0;
    goto LABEL_42;
  }
  if (*(unsigned char *)(this + 40))
  {
    this = *(unsigned int *)(this + 32);
    if ((this & 0x80000000) != 0)
    {
      uint64_t v3 = 11;
      if ((v2 & 2) == 0) {
        goto LABEL_22;
      }
    }
    else if (this >= 0x80)
    {
      this = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)this);
      uint64_t v3 = (this + 1);
      int v2 = *(_DWORD *)(v1 + 40);
      if ((v2 & 2) == 0) {
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v3 = 2;
      if ((v2 & 2) == 0) {
        goto LABEL_22;
      }
    }
  }
  else
  {
    uint64_t v3 = 0;
    if ((*(unsigned char *)(this + 40) & 2) == 0) {
      goto LABEL_22;
    }
  }
  uint64_t v4 = *(void *)(v1 + 8);
  int v5 = *(unsigned __int8 *)(v4 + 23);
  char v6 = v5;
  uint64_t v7 = *(void *)(v4 + 8);
  if ((v5 & 0x80u) == 0) {
    unint64_t v8 = *(unsigned __int8 *)(v4 + 23);
  }
  else {
    unint64_t v8 = v7;
  }
  if (v8 >= 0x80)
  {
    this = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v8);
    int v5 = *(unsigned __int8 *)(v4 + 23);
    uint64_t v7 = *(void *)(v4 + 8);
    int v2 = *(_DWORD *)(v1 + 40);
    char v6 = *(unsigned char *)(v4 + 23);
  }
  else
  {
    this = 1;
  }
  if (v6 < 0) {
    int v5 = v7;
  }
  uint64_t v3 = (v3 + this + v5 + 1);
LABEL_22:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0) {
      goto LABEL_42;
    }
    goto LABEL_33;
  }
  uint64_t v9 = *(void *)(v1 + 16);
  if (!v9)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    uint64_t v9 = *(void *)(CLMicroLocationProto::AppLaunch::default_instance_ + 16);
  }
  int v10 = 2 * (*(_DWORD *)(v9 + 16) & 1);
  if ((*(_DWORD *)(v9 + 16) & 2) != 0) {
    v10 += 2;
  }
  if (*(_DWORD *)(v9 + 16)) {
    int v11 = v10;
  }
  else {
    int v11 = 0;
  }
  *(_DWORD *)(v9 + 12) = v11;
  uint64_t v3 = (v3 + v11 + 2);
  if ((*(_DWORD *)(v1 + 40) & 8) != 0)
  {
LABEL_33:
    uint64_t v12 = *(void *)(v1 + 24);
    int v13 = *(unsigned __int8 *)(v12 + 23);
    char v14 = v13;
    uint64_t v15 = *(void *)(v12 + 8);
    if ((v13 & 0x80u) == 0) {
      unint64_t v16 = *(unsigned __int8 *)(v12 + 23);
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16 >= 0x80)
    {
      int v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v16);
      int v13 = *(unsigned __int8 *)(v12 + 23);
      uint64_t v15 = *(void *)(v12 + 8);
      char v14 = *(unsigned char *)(v12 + 23);
    }
    else
    {
      int v17 = 1;
    }
    if (v14 < 0) {
      int v13 = v15;
    }
    uint64_t v3 = (v3 + v17 + v13 + 1);
  }
LABEL_42:
  *(_DWORD *)(v1 + 36) = v3;
  return v3;
}

uint64_t CLMicroLocationProto::LegacyClientStatusUpdate::ByteSize(CLMicroLocationProto::LegacyClientStatusUpdate *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 24);
  if (!(_BYTE)v2)
  {
    uint64_t v3 = 0;
    goto LABEL_24;
  }
  if (*((unsigned char *)this + 24))
  {
    uint64_t v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
    if ((v4 & 0x80000000) != 0)
    {
      uint64_t v3 = 11;
      if ((v2 & 2) == 0) {
        goto LABEL_19;
      }
    }
    else if (v4 >= 0x80)
    {
      uint64_t v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
      int v2 = *((_DWORD *)this + 6);
      if ((v2 & 2) == 0) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v3 = 2;
      if ((v2 & 2) == 0) {
        goto LABEL_19;
      }
    }
  }
  else
  {
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 24) & 2) == 0) {
      goto LABEL_19;
    }
  }
  int v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
  if ((v5 & 0x80000000) != 0)
  {
    int v6 = 11;
  }
  else if (v5 >= 0x80)
  {
    int v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
    int v2 = *((_DWORD *)this + 6);
  }
  else
  {
    int v6 = 2;
  }
  uint64_t v3 = (v6 + v3);
LABEL_19:
  if ((v2 & 4) != 0)
  {
    uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
    if (v7 >= 0x80) {
      int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7) + 1;
    }
    else {
      int v8 = 2;
    }
    uint64_t v3 = (v8 + v3);
  }
LABEL_24:
  *((_DWORD *)this + 5) = v3;
  return v3;
}

uint64_t CLMicroLocationProto::ScreenStateUpdate::ByteSize(CLMicroLocationProto::ScreenStateUpdate *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 20);
  if ((_BYTE)v2)
  {
    if (*((unsigned char *)this + 20))
    {
      int v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
      if ((v5 & 0x80000000) != 0)
      {
        unsigned int v3 = 11;
      }
      else if (v5 >= 0x80)
      {
        unsigned int v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
        int v2 = *((_DWORD *)this + 5);
      }
      else
      {
        unsigned int v3 = 2;
      }
    }
    else
    {
      unsigned int v3 = 0;
    }
    if ((v2 & 2) != 0) {
      uint64_t result = v3 + 2;
    }
    else {
      uint64_t result = v3;
    }
  }
  else
  {
    uint64_t result = 0;
  }
  *((_DWORD *)this + 4) = result;
  return result;
}

uint64_t CLMicroLocationProto::BacklightOn::ByteSize(CLMicroLocationProto::BacklightOn *this)
{
  char v2 = *((unsigned char *)this + 24);
  if (v2)
  {
    if (*((unsigned char *)this + 24))
    {
      uint64_t v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
      if ((v4 & 0x80000000) != 0)
      {
        uint64_t v3 = 11;
        if ((v2 & 2) == 0) {
          goto LABEL_22;
        }
      }
      else if (v4 >= 0x80)
      {
        uint64_t v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
        if ((*((_DWORD *)this + 6) & 2) == 0) {
          goto LABEL_22;
        }
      }
      else
      {
        uint64_t v3 = 2;
        if ((v2 & 2) == 0) {
          goto LABEL_22;
        }
      }
    }
    else
    {
      uint64_t v3 = 0;
      if ((*((unsigned char *)this + 24) & 2) == 0) {
        goto LABEL_22;
      }
    }
    uint64_t v5 = *((void *)this + 1);
    int v6 = *(unsigned __int8 *)(v5 + 23);
    char v7 = v6;
    uint64_t v8 = *(void *)(v5 + 8);
    if ((v6 & 0x80u) == 0) {
      unint64_t v9 = *(unsigned __int8 *)(v5 + 23);
    }
    else {
      unint64_t v9 = v8;
    }
    if (v9 >= 0x80)
    {
      int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v9);
      int v6 = *(unsigned __int8 *)(v5 + 23);
      uint64_t v8 = *(void *)(v5 + 8);
      char v7 = *(unsigned char *)(v5 + 23);
    }
    else
    {
      int v10 = 1;
    }
    if (v7 < 0) {
      int v6 = v8;
    }
    uint64_t v3 = (v3 + v10 + v6 + 1);
  }
  else
  {
    uint64_t v3 = 0;
  }
LABEL_22:
  *((_DWORD *)this + 5) = v3;
  return v3;
}

uint64_t CLMicroLocationProto::ServiceStartUpdating::ByteSize(CLMicroLocationProto::ServiceStartUpdating *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 36);
  if (!(_BYTE)v2)
  {
    uint64_t result = 0;
    goto LABEL_35;
  }
  if ((*((unsigned char *)this + 36) & 1) == 0)
  {
    unsigned int v3 = 0;
    if ((*((unsigned char *)this + 36) & 2) == 0) {
      goto LABEL_22;
    }
LABEL_13:
    uint64_t v6 = *((void *)this + 1);
    int v7 = *(unsigned __int8 *)(v6 + 23);
    char v8 = v7;
    uint64_t v9 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      unint64_t v10 = *(unsigned __int8 *)(v6 + 23);
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10 >= 0x80)
    {
      int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10);
      int v7 = *(unsigned __int8 *)(v6 + 23);
      uint64_t v9 = *(void *)(v6 + 8);
      int v2 = *((_DWORD *)this + 9);
      char v8 = *(unsigned char *)(v6 + 23);
    }
    else
    {
      int v11 = 1;
    }
    if (v8 < 0) {
      int v7 = v9;
    }
    v3 += v11 + v7 + 1;
    goto LABEL_22;
  }
  uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
  if ((v5 & 0x80000000) != 0)
  {
    unsigned int v3 = 11;
    if ((v2 & 2) == 0) {
      goto LABEL_22;
    }
    goto LABEL_13;
  }
  if (v5 < 0x80)
  {
    unsigned int v3 = 2;
    if ((v2 & 2) == 0) {
      goto LABEL_22;
    }
    goto LABEL_13;
  }
  unsigned int v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
  int v2 = *((_DWORD *)this + 9);
  if ((v2 & 2) != 0) {
    goto LABEL_13;
  }
LABEL_22:
  if ((v2 & 4) != 0)
  {
    uint64_t v12 = *((void *)this + 3);
    int v13 = *(unsigned __int8 *)(v12 + 23);
    char v14 = v13;
    uint64_t v15 = *(void *)(v12 + 8);
    if ((v13 & 0x80u) == 0) {
      unint64_t v16 = *(unsigned __int8 *)(v12 + 23);
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16 >= 0x80)
    {
      int v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v16);
      int v13 = *(unsigned __int8 *)(v12 + 23);
      uint64_t v15 = *(void *)(v12 + 8);
      int v2 = *((_DWORD *)this + 9);
      char v14 = *(unsigned char *)(v12 + 23);
    }
    else
    {
      int v17 = 1;
    }
    if (v14 < 0) {
      int v13 = v15;
    }
    v3 += v17 + v13 + 1;
  }
  if ((v2 & 8) != 0) {
    uint64_t result = v3 + 2;
  }
  else {
    uint64_t result = v3;
  }
LABEL_35:
  *((_DWORD *)this + 8) = result;
  return result;
}

uint64_t CLMicroLocationProto::ServiceConnect::ByteSize(CLMicroLocationProto::ServiceConnect *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 32);
  if (!(_BYTE)v2)
  {
    uint64_t v3 = 0;
    goto LABEL_32;
  }
  if ((*((unsigned char *)this + 32) & 1) == 0)
  {
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 32) & 2) == 0) {
      goto LABEL_22;
    }
LABEL_13:
    uint64_t v5 = *((void *)this + 1);
    int v6 = *(unsigned __int8 *)(v5 + 23);
    char v7 = v6;
    uint64_t v8 = *(void *)(v5 + 8);
    if ((v6 & 0x80u) == 0) {
      unint64_t v9 = *(unsigned __int8 *)(v5 + 23);
    }
    else {
      unint64_t v9 = v8;
    }
    if (v9 >= 0x80)
    {
      int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v9);
      int v6 = *(unsigned __int8 *)(v5 + 23);
      uint64_t v8 = *(void *)(v5 + 8);
      int v2 = *((_DWORD *)this + 8);
      char v7 = *(unsigned char *)(v5 + 23);
    }
    else
    {
      int v10 = 1;
    }
    if (v7 < 0) {
      int v6 = v8;
    }
    uint64_t v3 = (v3 + v10 + v6 + 1);
    goto LABEL_22;
  }
  uint64_t v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
  if ((v4 & 0x80000000) != 0)
  {
    uint64_t v3 = 11;
    if ((v2 & 2) != 0) {
      goto LABEL_13;
    }
  }
  else
  {
    if (v4 >= 0x80)
    {
      uint64_t v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
      int v2 = *((_DWORD *)this + 8);
      if ((v2 & 2) == 0) {
        goto LABEL_22;
      }
      goto LABEL_13;
    }
    uint64_t v3 = 2;
    if ((v2 & 2) != 0) {
      goto LABEL_13;
    }
  }
LABEL_22:
  if ((v2 & 4) != 0)
  {
    uint64_t v11 = *((void *)this + 2);
    int v12 = *(unsigned __int8 *)(v11 + 23);
    char v13 = v12;
    uint64_t v14 = *(void *)(v11 + 8);
    if ((v12 & 0x80u) == 0) {
      unint64_t v15 = *(unsigned __int8 *)(v11 + 23);
    }
    else {
      unint64_t v15 = v14;
    }
    if (v15 >= 0x80)
    {
      int v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15);
      int v12 = *(unsigned __int8 *)(v11 + 23);
      uint64_t v14 = *(void *)(v11 + 8);
      char v13 = *(unsigned char *)(v11 + 23);
    }
    else
    {
      int v16 = 1;
    }
    if (v13 < 0) {
      int v12 = v14;
    }
    uint64_t v3 = (v3 + v16 + v12 + 1);
  }
LABEL_32:
  *((_DWORD *)this + 7) = v3;
  return v3;
}

uint64_t CLMicroLocationProto::MiloInit::ByteSize(CLMicroLocationProto::MiloInit *this)
{
  char v2 = *((unsigned char *)this + 24);
  if (v2)
  {
    if (*((unsigned char *)this + 24))
    {
      uint64_t v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
      if ((v4 & 0x80000000) != 0)
      {
        uint64_t v3 = 11;
        if ((v2 & 2) == 0) {
          goto LABEL_22;
        }
      }
      else if (v4 >= 0x80)
      {
        uint64_t v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
        if ((*((_DWORD *)this + 6) & 2) == 0) {
          goto LABEL_22;
        }
      }
      else
      {
        uint64_t v3 = 2;
        if ((v2 & 2) == 0) {
          goto LABEL_22;
        }
      }
    }
    else
    {
      uint64_t v3 = 0;
      if ((*((unsigned char *)this + 24) & 2) == 0) {
        goto LABEL_22;
      }
    }
    uint64_t v5 = *((void *)this + 1);
    int v6 = *(unsigned __int8 *)(v5 + 23);
    char v7 = v6;
    uint64_t v8 = *(void *)(v5 + 8);
    if ((v6 & 0x80u) == 0) {
      unint64_t v9 = *(unsigned __int8 *)(v5 + 23);
    }
    else {
      unint64_t v9 = v8;
    }
    if (v9 >= 0x80)
    {
      int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v9);
      int v6 = *(unsigned __int8 *)(v5 + 23);
      uint64_t v8 = *(void *)(v5 + 8);
      char v7 = *(unsigned char *)(v5 + 23);
    }
    else
    {
      int v10 = 1;
    }
    if (v7 < 0) {
      int v6 = v8;
    }
    uint64_t v3 = (v3 + v10 + v6 + 1);
  }
  else
  {
    uint64_t v3 = 0;
  }
LABEL_22:
  *((_DWORD *)this + 5) = v3;
  return v3;
}

uint64_t CLMicroLocationProto::BatteryChargerConnected::ByteSize(CLMicroLocationProto::BatteryChargerConnected *this)
{
  if (*((unsigned char *)this + 16))
  {
    uint64_t v3 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
    if ((v3 & 0x80000000) != 0)
    {
      uint64_t result = 11;
    }
    else if (v3 >= 0x80)
    {
      uint64_t result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v3) + 1;
    }
    else
    {
      uint64_t result = 2;
    }
  }
  else
  {
    uint64_t result = 0;
  }
  *((_DWORD *)this + 3) = result;
  return result;
}

uint64_t CLMicroLocationProto::EnabledStateUpdate::ByteSize(CLMicroLocationProto::EnabledStateUpdate *this)
{
  int v2 = *((_DWORD *)this + 6);
  if ((_BYTE)v2)
  {
    if (v2)
    {
      uint64_t v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
      if ((v4 & 0x80000000) != 0)
      {
        unsigned int v3 = 11;
      }
      else if (v4 >= 0x80)
      {
        unsigned int v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
        int v2 = *((_DWORD *)this + 6);
      }
      else
      {
        unsigned int v3 = 2;
      }
    }
    else
    {
      unsigned int v3 = 0;
    }
    if ((v2 & 2) != 0) {
      v3 += 2;
    }
    if ((v2 & 4) != 0) {
      v3 += 2;
    }
    if ((v2 & 8) != 0) {
      v3 += 2;
    }
    if ((v2 & 0x10) != 0) {
      v3 += 2;
    }
    if ((v2 & 0x20) != 0) {
      v3 += 2;
    }
    if ((v2 & 0x40) != 0) {
      v3 += 2;
    }
    if ((v2 & 0x80) != 0) {
      v3 += 2;
    }
  }
  else
  {
    unsigned int v3 = 0;
  }
  if ((v2 & 0x100) != 0) {
    uint64_t result = v3 + 2;
  }
  else {
    uint64_t result = v3;
  }
  *((_DWORD *)this + 5) = result;
  return result;
}

void sub_25632D2B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25632D54C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25632D8BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void sub_25632DD7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,id a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,id a40)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);

  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

void sub_25632DEFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::MiloInit::~MiloInit(CLMicroLocationProto::MiloInit *this)
{
  CLMicroLocationProto::MiloInit::~MiloInit(this);
  JUMPOUT(0x25A2A6340);
}

{
  uint64_t vars8;

  *(void *)this = &unk_2704DF2F8;
  CLMicroLocationProto::ClusterRecordings::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void CLMicroLocationProto::BacklightOn::~BacklightOn(CLMicroLocationProto::BacklightOn *this)
{
  CLMicroLocationProto::BacklightOn::~BacklightOn(this);
  JUMPOUT(0x25A2A6340);
}

{
  uint64_t vars8;

  *(void *)this = &unk_2704DE920;
  CLMicroLocationProto::ClusterRecordings::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void CLMicroLocationProto::ClusterRecordings::SharedDtor(CLMicroLocationProto::ClusterRecordings *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1 != MEMORY[0x263F8C740] && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    this = (CLMicroLocationProto::ClusterRecordings *)MEMORY[0x25A2A6340](v1, 0x1012C40EC159624);
  }
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
}

void CLMicroLocationProto::ScreenStateUpdate::~ScreenStateUpdate(CLMicroLocationProto::ScreenStateUpdate *this)
{
  CLMicroLocationProto::ScreenStateUpdate::~ScreenStateUpdate(this);
  JUMPOUT(0x25A2A6340);
}

{
  uint64_t vars8;

  *(void *)this = &unk_2704DF820;
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void CLMicroLocationProto::ServiceConnect::~ServiceConnect(CLMicroLocationProto::ServiceConnect *this)
{
  CLMicroLocationProto::ServiceConnect::~ServiceConnect(this);
  JUMPOUT(0x25A2A6340);
}

{
  uint64_t vars8;

  *(void *)this = &unk_2704DF028;
  CLMicroLocationProto::ServiceDelete::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void CLMicroLocationProto::ServiceDelete::SharedDtor(CLMicroLocationProto::ServiceDelete *this)
{
  uint64_t v1 = this;
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = MEMORY[0x263F8C740];
  if (v2 != MEMORY[0x263F8C740] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    this = (CLMicroLocationProto::ServiceDelete *)MEMORY[0x25A2A6340](v2, 0x1012C40EC159624);
  }
  uint64_t v5 = *((void *)v1 + 2);
  if (v5 != v3 && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0) {
      operator delete(*(void **)v5);
    }
    this = (CLMicroLocationProto::ServiceDelete *)MEMORY[0x25A2A6340](v5, 0x1012C40EC159624);
  }
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
}

uint64_t CLMicroLocationProto::ReceivedEvent::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 292);
  if (v6)
  {
    uint64_t v7 = *(void *)(this + 8);
    if (!v7)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
      uint64_t v7 = *(void *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 8);
    }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    int v6 = *(_DWORD *)(v5 + 292);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_40;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v8 = *(void *)(v5 + 16);
  if (!v8)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    uint64_t v8 = *(void *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 16);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_43;
  }
LABEL_40:
  uint64_t v9 = *(void *)(v5 + 24);
  if (!v9)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    uint64_t v9 = *(void *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 24);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v9, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_46;
  }
LABEL_43:
  uint64_t v10 = *(void *)(v5 + 32);
  if (!v10)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    uint64_t v10 = *(void *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 32);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v10, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_49;
  }
LABEL_46:
  uint64_t v11 = *(void *)(v5 + 40);
  if (!v11)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    uint64_t v11 = *(void *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 40);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, v11, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_52;
  }
LABEL_49:
  uint64_t v12 = *(void *)(v5 + 48);
  if (!v12)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    uint64_t v12 = *(void *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 48);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, v12, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_55;
  }
LABEL_52:
  uint64_t v13 = *(void *)(v5 + 56);
  if (!v13)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    uint64_t v13 = *(void *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 56);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, v13, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_58;
  }
LABEL_55:
  uint64_t v14 = *(void *)(v5 + 64);
  if (!v14)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    uint64_t v14 = *(void *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 64);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, v14, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_61;
  }
LABEL_58:
  uint64_t v15 = *(void *)(v5 + 72);
  if (!v15)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    uint64_t v15 = *(void *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 72);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, v15, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_64;
  }
LABEL_61:
  uint64_t v16 = *(void *)(v5 + 80);
  if (!v16)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    uint64_t v16 = *(void *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 80);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, v16, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_67;
  }
LABEL_64:
  uint64_t v17 = *(void *)(v5 + 88);
  if (!v17)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    uint64_t v17 = *(void *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 88);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, v17, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_70;
  }
LABEL_67:
  uint64_t v18 = *(void *)(v5 + 96);
  if (!v18)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    uint64_t v18 = *(void *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 96);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF, v18, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_73;
  }
LABEL_70:
  uint64_t v19 = *(void *)(v5 + 104);
  if (!v19)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    uint64_t v19 = *(void *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 104);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, v19, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_76;
  }
LABEL_73:
  uint64_t v20 = *(void *)(v5 + 112);
  if (!v20)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    uint64_t v20 = *(void *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 112);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11, v20, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_79;
  }
LABEL_76:
  uint64_t v21 = *(void *)(v5 + 120);
  if (!v21)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    uint64_t v21 = *(void *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 120);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x12, v21, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x8000) == 0)
  {
LABEL_17:
    if ((v6 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_82;
  }
LABEL_79:
  uint64_t v22 = *(void *)(v5 + 128);
  if (!v22)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    uint64_t v22 = *(void *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 128);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x13, v22, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x10000) == 0)
  {
LABEL_18:
    if ((v6 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_85;
  }
LABEL_82:
  uint64_t v23 = *(void *)(v5 + 136);
  if (!v23)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    uint64_t v23 = *(void *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 136);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x14, v23, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x20000) == 0)
  {
LABEL_19:
    if ((v6 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_88;
  }
LABEL_85:
  uint64_t v24 = *(void *)(v5 + 144);
  if (!v24)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    uint64_t v24 = *(void *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 144);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x15, v24, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x40000) == 0)
  {
LABEL_20:
    if ((v6 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_91;
  }
LABEL_88:
  uint64_t v25 = *(void *)(v5 + 152);
  if (!v25)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    uint64_t v25 = *(void *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 152);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x16, v25, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x80000) == 0)
  {
LABEL_21:
    if ((v6 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_94;
  }
LABEL_91:
  uint64_t v26 = *(void *)(v5 + 160);
  if (!v26)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    uint64_t v26 = *(void *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 160);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x17, v26, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x100000) == 0)
  {
LABEL_22:
    if ((v6 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_97;
  }
LABEL_94:
  uint64_t v27 = *(void *)(v5 + 168);
  if (!v27)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    uint64_t v27 = *(void *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 168);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x18, v27, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x200000) == 0)
  {
LABEL_23:
    if ((v6 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_100;
  }
LABEL_97:
  uint64_t v28 = *(void *)(v5 + 176);
  if (!v28)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    uint64_t v28 = *(void *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 176);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x19, v28, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x400000) == 0)
  {
LABEL_24:
    if ((v6 & 0x800000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_103;
  }
LABEL_100:
  uint64_t v29 = *(void *)(v5 + 184);
  if (!v29)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    uint64_t v29 = *(void *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 184);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1A, v29, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x800000) == 0)
  {
LABEL_25:
    if ((v6 & 0x1000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_106;
  }
LABEL_103:
  uint64_t v30 = *(void *)(v5 + 192);
  if (!v30)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    uint64_t v30 = *(void *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 192);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1B, v30, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v6 & 0x2000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_109;
  }
LABEL_106:
  uint64_t v31 = *(void *)(v5 + 200);
  if (!v31)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    uint64_t v31 = *(void *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 200);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1C, v31, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v6 & 0x4000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_112;
  }
LABEL_109:
  uint64_t v32 = *(void *)(v5 + 208);
  if (!v32)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    uint64_t v32 = *(void *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 208);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1D, v32, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v6 & 0x8000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_115;
  }
LABEL_112:
  uint64_t v33 = *(void *)(v5 + 216);
  if (!v33)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    uint64_t v33 = *(void *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 216);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1E, v33, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x8000000) == 0)
  {
LABEL_29:
    if ((v6 & 0x10000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_118;
  }
LABEL_115:
  uint64_t v34 = *(void *)(v5 + 224);
  if (!v34)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    uint64_t v34 = *(void *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 224);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1F, v34, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x10000000) == 0)
  {
LABEL_30:
    if ((v6 & 0x20000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_121;
  }
LABEL_118:
  uint64_t v35 = *(void *)(v5 + 232);
  if (!v35)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    uint64_t v35 = *(void *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 232);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x20, v35, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v6 & 0x40000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_124;
  }
LABEL_121:
  uint64_t v36 = *(void *)(v5 + 240);
  if (!v36)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    uint64_t v36 = *(void *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 240);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x21, v36, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x40000000) == 0)
  {
LABEL_32:
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_130;
    }
    goto LABEL_127;
  }
LABEL_124:
  uint64_t v37 = *(void *)(v5 + 248);
  if (!v37)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    uint64_t v37 = *(void *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 248);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x22, v37, a2, a4);
  if ((*(_DWORD *)(v5 + 292) & 0x80000000) != 0)
  {
LABEL_127:
    uint64_t v38 = *(void *)(v5 + 256);
    if (!v38)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
      uint64_t v38 = *(void *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 256);
    }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x23, v38, a2, a4);
  }
LABEL_130:
  int v39 = *(_DWORD *)(v5 + 296);
  if (v39)
  {
    uint64_t v40 = *(void *)(v5 + 264);
    if (!v40)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
      uint64_t v40 = *(void *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 264);
    }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x24, v40, a2, a4);
    int v39 = *(_DWORD *)(v5 + 296);
    if ((v39 & 2) == 0)
    {
LABEL_132:
      if ((v39 & 4) == 0) {
        return this;
      }
      goto LABEL_140;
    }
  }
  else if ((v39 & 2) == 0)
  {
    goto LABEL_132;
  }
  uint64_t v41 = *(void *)(v5 + 272);
  if (!v41)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    uint64_t v41 = *(void *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 272);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x25, v41, a2, a4);
  if ((*(_DWORD *)(v5 + 296) & 4) != 0)
  {
LABEL_140:
    uint64_t v42 = *(void *)(v5 + 280);
    if (!v42)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
      uint64_t v42 = *(void *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 280);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x26, v42, a2, a4);
  }
  return this;
}

unsigned int *CLMicroLocationProto::AppLaunch::SerializeWithCachedSizes(unsigned int *this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  unsigned int v6 = this[10];
  if (v6)
  {
    this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, this[8], (uint64_t)a2, a4);
    unsigned int v6 = v5[10];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  unsigned int v6 = v5[10];
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_8:
  uint64_t v7 = *((void *)v5 + 2);
  if (!v7)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    uint64_t v7 = *(void *)(CLMicroLocationProto::AppLaunch::default_instance_ + 16);
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
  if ((v5[10] & 8) != 0)
  {
LABEL_11:
    return (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  }
  return this;
}

unsigned int *CLMicroLocationProto::LegacyClientStatusUpdate::SerializeWithCachedSizes(unsigned int *this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  unsigned int v6 = this[6];
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v5[3], (uint64_t)a2, a4);
    if ((v5[6] & 4) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, this[2], (uint64_t)a2, a4);
  unsigned int v6 = v5[6];
  if ((v6 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return this;
  }
LABEL_7:
  uint64_t v7 = v5[4];
  return (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, (uint64_t)a2, a4);
}

uint64_t CLMicroLocationProto::ScreenStateUpdate::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 20);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
    int v6 = *(_DWORD *)(v5 + 20);
  }
  if ((v6 & 2) != 0)
  {
    uint64_t v7 = *(unsigned __int8 *)(v5 + 12);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, (uint64_t)a2, a4);
  }
  return this;
}

uint64_t CLMicroLocationProto::BacklightOn::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v4 = this;
  int v5 = *(_DWORD *)(this + 24);
  if (v5)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 16), (uint64_t)a2, a4);
    int v5 = *(_DWORD *)(v4 + 24);
  }
  if ((v5 & 2) != 0)
  {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  }
  return this;
}

uint64_t CLMicroLocationProto::ServiceStartUpdating::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 36);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 16), (uint64_t)a2, a4);
    int v6 = *(_DWORD *)(v5 + 36);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
      if ((*(_DWORD *)(v5 + 36) & 8) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v6 & 8) == 0) {
    return this;
  }
LABEL_9:
  uint64_t v7 = *(unsigned __int8 *)(v5 + 20);
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v7, (uint64_t)a2, a4);
}

uint64_t CLMicroLocationProto::ServiceConnect::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v4 = this;
  int v5 = *(_DWORD *)(this + 32);
  if ((v5 & 1) == 0)
  {
    if ((v5 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
    if ((*(_DWORD *)(v4 + 32) & 4) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 24), (uint64_t)a2, a4);
  int v5 = *(_DWORD *)(v4 + 32);
  if ((v5 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 4) == 0) {
    return this;
  }
LABEL_7:
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
}

uint64_t CLMicroLocationProto::MiloInit::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v4 = this;
  int v5 = *(_DWORD *)(this + 24);
  if (v5)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 16), (uint64_t)a2, a4);
    int v5 = *(_DWORD *)(v4 + 24);
  }
  if ((v5 & 2) != 0)
  {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  }
  return this;
}

uint64_t CLMicroLocationProto::BatteryChargerConnected::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if (*(unsigned char *)(this + 16)) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
  }
  return this;
}

uint64_t CLMicroLocationProto::EnabledStateUpdate::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 24);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
    int v6 = *(_DWORD *)(v5 + 24);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned __int8 *)(v5 + 12), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 13), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 14), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned __int8 *)(v5 + 15), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned __int8 *)(v5 + 16), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
LABEL_18:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(unsigned __int8 *)(v5 + 18), (uint64_t)a2, a4);
    if ((*(_DWORD *)(v5 + 24) & 0x100) == 0) {
      return this;
    }
    goto LABEL_19;
  }
LABEL_17:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(unsigned __int8 *)(v5 + 17), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 0x80) != 0) {
    goto LABEL_18;
  }
LABEL_9:
  if ((v6 & 0x100) == 0) {
    return this;
  }
LABEL_19:
  uint64_t v7 = *(unsigned __int8 *)(v5 + 19);
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, v7, (uint64_t)a2, a4);
}

void CLMicroLocationProto::ServiceStartUpdating::~ServiceStartUpdating(CLMicroLocationProto::ServiceStartUpdating *this)
{
  CLMicroLocationProto::ServiceStartUpdating::~ServiceStartUpdating(this);
  JUMPOUT(0x25A2A6340);
}

{
  uint64_t vars8;

  *(void *)this = &unk_2704DF118;
  CLMicroLocationProto::ServiceStartUpdating::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void CLMicroLocationProto::ServiceStartUpdating::SharedDtor(CLMicroLocationProto::ServiceStartUpdating *this)
{
  uint64_t v1 = this;
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = MEMORY[0x263F8C740];
  if (v2 != MEMORY[0x263F8C740] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    this = (CLMicroLocationProto::ServiceStartUpdating *)MEMORY[0x25A2A6340](v2, 0x1012C40EC159624);
  }
  uint64_t v5 = *((void *)v1 + 3);
  if (v5 != v3 && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0) {
      operator delete(*(void **)v5);
    }
    this = (CLMicroLocationProto::ServiceStartUpdating *)MEMORY[0x25A2A6340](v5, 0x1012C40EC159624);
  }
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
}

void CLMicroLocationProto::BatteryChargerConnected::~BatteryChargerConnected(CLMicroLocationProto::BatteryChargerConnected *this)
{
  CLMicroLocationProto::BatteryChargerConnected::~BatteryChargerConnected(this);
  JUMPOUT(0x25A2A6340);
}

{
  uint64_t vars8;

  *(void *)this = &unk_2704DE998;
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void CLMicroLocationProto::EnabledStateUpdate::~EnabledStateUpdate(CLMicroLocationProto::EnabledStateUpdate *this)
{
  CLMicroLocationProto::EnabledStateUpdate::~EnabledStateUpdate(this);
  JUMPOUT(0x25A2A6340);
}

{
  uint64_t vars8;

  *(void *)this = &unk_2704DF7A8;
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

BOOL CLMicroLocationLoiManager::refreshRoutineStateAtLocation(ULDatabase **this, double a2, double a3)
{
  ULDatabase::connectIfNecessary(this[41]);
  if (((*((uint64_t (**)(ULDatabase *))this[41]->var0 + 2))(this[41]) & 1) == 0)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_49);
    }
    uint64_t v14 = logObject_MicroLocation_Default;
    if (!os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT)) {
      return 0;
    }
    __int16 v20 = 0;
    uint64_t v15 = "Ignoring refreshRoutineStateAtLocation request since keybag is not unlocked";
    uint64_t v16 = (uint8_t *)&v20;
    goto LABEL_16;
  }
  double v6 = cl::chrono::CFAbsoluteTimeClock::now();
  if (*((unsigned char *)this + 488))
  {
    double v7 = v6;
    double v8 = *((double *)this + 60);
    uint64_t v9 = +[ULDefaultsSingleton shared];
    uint64_t v10 = [v9 defaultsDictionary];

    uint64_t v11 = [NSString stringWithUTF8String:"ULRefreshRoutineStateThrottle"];
    uint64_t v12 = [v10 objectForKey:v11];
    if (!v12) {
      goto LABEL_10;
    }
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      [v12 doubleValue];
    }
    else {
LABEL_10:
    }
      [&unk_2704F0E40 doubleValue];
    double v17 = v13;

    if (v7 - v8 < v17)
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_49);
      }
      uint64_t v14 = logObject_MicroLocation_Default;
      if (!os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT)) {
        return 0;
      }
      __int16 v19 = 0;
      uint64_t v15 = "Ignoring refreshRoutineStateAtLocation request since last request was too recent";
      uint64_t v16 = (uint8_t *)&v19;
LABEL_16:
      _os_log_impl(&dword_25631F000, v14, OS_LOG_TYPE_DEFAULT, v15, v16, 2u);
      return 0;
    }
  }
  CLMicroLocationLoiManager::initializeStateAtLocation((CLMicroLocationLoiManager *)this, a2, a3);
  return CLMicroLocationLoiManager::fetchLocationOfInterest((CLMicroLocationLoiManager *)this);
}

void sub_25632F330(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationLoiManager::initializeStateAtLocation(CLMicroLocationLoiManager *this, double a2, double a3)
{
  double v6 = cl::chrono::CFAbsoluteTimeClock::now();
  if (!*((unsigned char *)this + 488)) {
    *((unsigned char *)this + 488) = 1;
  }
  *((double *)this + 60) = v6;
  *((double *)this + 44) = a2;
  *((double *)this + 45) = a3;
  if (*((char *)this + 407) < 0)
  {
    **((unsigned char **)this + 48) = 0;
    *((void *)this + 49) = 0;
  }
  else
  {
    *((unsigned char *)this + 384) = 0;
    *((unsigned char *)this + 407) = 0;
  }
  *((void *)this + 51) = 0;
  *((void *)this + 52) = 0;
}

uint64_t std::vector<CLMicroLocationLoggedEventsTable::Entry>::shrink_to_fit(uint64_t result)
{
  unint64_t v1 = *(void *)result;
  int64x2_t v2 = *(int64x2_t *)(result + 8);
  int64x2_t v3 = vshrq_n_s64(vsubq_s64(v2, vdupq_n_s64(*(void *)result)), 4uLL);
  unint64_t v4 = 0xCF3CF3CF3CF3CF3DLL * v3.i64[0];
  unint64_t v5 = v4;
  if (0xCF3CF3CF3CF3CF3DLL * v3.i64[1] > v4)
  {
    double v6 = (uint64_t *)result;
    uint64_t v7 = result + 16;
    uint64_t v14 = v7;
    if (v2.i64[0] == v1)
    {
      double v8 = 0;
      uint64_t v9 = 0;
    }
    else
    {
      double v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationLoggedEventsTable::Entry>>(v7, v4);
    }
    uint64_t v10 = v8;
    uint64_t v11 = &v8[336 * v5];
    uint64_t v12 = v11;
    double v13 = &v8[336 * v9];
    std::vector<CLMicroLocationLoggedEventsTable::Entry>::__swap_out_circular_buffer(v6, &v10);
    return std::__split_buffer<CLMicroLocationLoggedEventsTable::Entry>::~__split_buffer((uint64_t)&v10);
  }
  return result;
}

void sub_25632F4A0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t std::vector<CLMicroLocationLoggedEventsTable::Entry>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationLoggedEventsTable::Entry>,std::reverse_iterator<CLMicroLocationLoggedEventsTable::Entry*>,std::reverse_iterator<CLMicroLocationLoggedEventsTable::Entry*>,std::reverse_iterator<CLMicroLocationLoggedEventsTable::Entry*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::vector<CLMicroLocationLoggedEventsTable::Entry>::__emplace_back_slow_path<CLMicroLocationLoggedEventsTable::Entry const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCF3CF3CF3CF3CF3DLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xC30C30C30C30C3) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCF3CF3CF3CF3CF3DLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x61861861861861) {
    unint64_t v9 = 0xC30C30C30C30C3;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationLoggedEventsTable::Entry>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[336 * v4];
  v15[0] = v10;
  v15[1] = v11;
  uint64_t v16 = v11;
  double v17 = &v10[336 * v9];
  long long v12 = *a2;
  *(_OWORD *)(v11 + 12) = *(long long *)((char *)a2 + 12);
  *(_OWORD *)uint64_t v11 = v12;
  CLMicroLocationProto::ReceivedEvent::ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)(v11 + 32), (const CLMicroLocationProto::ReceivedEvent *)(a2 + 2));
  v16 += 336;
  std::vector<CLMicroLocationLoggedEventsTable::Entry>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<CLMicroLocationLoggedEventsTable::Entry>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_25632F65C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMicroLocationLoggedEventsTable::Entry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationLoggedEventsTable::Entry>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xC30C30C30C30C4) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(336 * a2);
}

void sub_25632F754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_25632F834(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__CFString *ULSleepWakeStateToString(int a1)
{
  if (a1 > 29)
  {
    switch(a1)
    {
      case 30:
        return @"FullWake";
      case 40:
        return @"Restart";
      case 50:
        return @"PowerOff";
    }
  }
  else
  {
    switch(a1)
    {
      case 0:
        return @"Unknown";
      case 10:
        return @"Sleep";
      case 20:
        return @"DarkWake";
    }
  }
  return @"?";
}

void sub_25632FAEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void CLMicroLocationCosineSimilarityLocalizationAlgorithm::localize(CLMicroLocationModel *this@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (!CLMicroLocationModel::isValid(this))
  {
    CLMicroLocationCosineSimilarityLocalizationAlgorithm::localize();
LABEL_44:
    __break(1u);
    return;
  }
  if (*((_DWORD *)this + 1) != 2)
  {
    uint64_t v10 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
    {
      CLMicroLocationProtobufHelper::modelTypeToString(*((_DWORD *)this + 1), v19);
      uint64_t v11 = v20 >= 0 ? v19 : *(uint8_t **)v19;
      *(void *)buf = 68289795;
      v22[0] = 2082;
      *(void *)&v22[1] = "";
      __int16 v23 = 2082;
      *(void *)uint64_t v24 = v11;
      *(_WORD *)&v24[8] = 2082;
      uint64_t v25 = "assert";
      __int16 v26 = 2081;
      uint64_t v27 = "model.modelType == CLMicroLocationProto::Model::SIMILARITY_LIST";
      _os_log_impl(&dword_25631F000, v10, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CosineSimilarityLocalization, model type is not similarity list!\", \"Model Type\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (SHIBYTE(v20) < 0) {
        operator delete(*(void **)v19);
      }
    }

    long long v12 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_signpost_enabled(v12))
    {
      CLMicroLocationProtobufHelper::modelTypeToString(*((_DWORD *)this + 1), v19);
      uint64_t v13 = v20 >= 0 ? v19 : *(uint8_t **)v19;
      *(void *)buf = 68289795;
      v22[0] = 2082;
      *(void *)&v22[1] = "";
      __int16 v23 = 2082;
      *(void *)uint64_t v24 = v13;
      *(_WORD *)&v24[8] = 2082;
      uint64_t v25 = "assert";
      __int16 v26 = 2081;
      uint64_t v27 = "model.modelType == CLMicroLocationProto::Model::SIMILARITY_LIST";
      _os_signpost_emit_with_name_impl(&dword_25631F000, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CosineSimilarityLocalization, model type is not similarity list!", "{\"msg%{public}.0s\":\"CosineSimilarityLocalization, model type is not similarity list!\", \"Model Type\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (SHIBYTE(v20) < 0) {
        operator delete(*(void **)v19);
      }
    }

    uint64_t v14 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      CLMicroLocationProtobufHelper::modelTypeToString(*((_DWORD *)this + 1), v19);
      CLMicroLocationCosineSimilarityLocalizationAlgorithm::localize((char *)v19, buf, v14);
    }

    abort_report_np();
    goto LABEL_44;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 32) = 0;
  *(unsigned char *)(a3 + 80) = 0;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  *(unsigned char *)(a3 + 56) = 0;
  *(_DWORD *)(a3 + 24) = *(_DWORD *)(a2 + 160);
  std::vector<CLMicroLocationProto::ConfidenceReason>::__insert_with_size[abi:ne180100]<std::__wrap_iter<CLMicroLocationProto::ConfidenceReason const*>,std::__wrap_iter<CLMicroLocationProto::ConfidenceReason const*>>(a3 + 32, 0, *(char **)(a2 + 168), *(char **)(a2 + 176), (uint64_t)(*(void *)(a2 + 176) - *(void *)(a2 + 168)) >> 2);
  if (*((unsigned char *)this + 192) && *((void *)this + 13) != *((void *)this + 12))
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_0);
    }
    unint64_t v5 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *((unsigned __int8 *)this + 144);
      if (*((unsigned char *)this + 144))
      {
        int v7 = *((_DWORD *)this + 33);
        if (*((unsigned char *)this + 129)) {
          int v6 = *((_DWORD *)this + 34);
        }
        else {
          int v6 = *((_DWORD *)this + 33);
        }
        if (!*((unsigned char *)this + 129)) {
          int v7 = *((_DWORD *)this + 34);
        }
      }
      else
      {
        int v7 = 0;
      }
      *(void *)buf = 68289538;
      v22[0] = 2082;
      *(void *)&v22[1] = "";
      __int16 v23 = 1026;
      *(_DWORD *)uint64_t v24 = v6;
      *(_WORD *)&v24[4] = 1026;
      *(_DWORD *)&v24[6] = v7;
      _os_log_impl(&dword_25631F000, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CosineSimilarityLocalization, running localization\", \"LSL Length\":%{public}d, \"LSL Num Clusters\":%{public}d}", buf, 0x1Eu);
    }

    if (*((unsigned char *)this + 129)) {
      unint64_t v9 = (char *)this + 132;
    }
    else {
      unint64_t v9 = (char *)this + 136;
    }
    CLMicroLocationUtils::ProbabilityMatrix::ProbabilityMatrix((CLMicroLocationUtils::ProbabilityMatrix *)v18, 1, *(_DWORD *)v9 + 1);
    v17[0] = 0;
    v17[32] = 0;
    std::string::basic_string[abi:ne180100]<0>(buf, "com.apple.magicalmoments");
    CLMicroLocationLocalizationSettings::CLMicroLocationLocalizationSettings((uint64_t)v16, buf);
    if ((v24[3] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    CLMicroLocationLocalizer::localize((uint64_t)v17, (uint64_t)this);
  }
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_0);
  }
  unint64_t v8 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)buf = 68289026;
    v22[0] = 2082;
    *(void *)&v22[1] = "";
    _os_log_impl(&dword_25631F000, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CosineSimilarityLocalization, model with empty LSL, publishing empty results\"}", buf, 0x12u);
  }
}

void sub_256331318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,id a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42)
{
  if (a31 && a28) {
    MEMORY[0x25A2A6320](a28, 0x1000C8000313F17);
  }
  CLMicroLocationAlgorithms::LocalizerResults::~LocalizerResults((CLMicroLocationAlgorithms::LocalizerResults *)(v43 - 208));
  CLMicroLocationLocalizationSettings::~CLMicroLocationLocalizationSettings(&a32);
  if (a41) {
    CLMicroLocationProto::AssociatedAccessPointInfo::~AssociatedAccessPointInfo((CLMicroLocationProto::AssociatedAccessPointInfo *)&a37);
  }
  uint64_t v45 = a42;
  a42 = 0;
  if (v45) {
    MEMORY[0x25A2A6320](v45, 0x1000C8000313F17);
  }
  CLMicroLocationAlgorithms::LocalizerResults::~LocalizerResults(v42);
  _Unwind_Resume(a1);
}

id _CLLogObjectForCategory_MicroLocation_Default(void)
{
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_0);
  }
  v0 = (void *)logObject_MicroLocation_Default;
  return v0;
}

{
  void *v0;
  uint64_t vars8;

  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
  }
  v0 = (void *)logObject_MicroLocation_Default;
  return v0;
}

{
  void *v0;
  uint64_t vars8;

  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_6);
  }
  v0 = (void *)logObject_MicroLocation_Default;
  return v0;
}

{
  void *v0;
  uint64_t vars8;

  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_8);
  }
  v0 = (void *)logObject_MicroLocation_Default;
  return v0;
}

{
  void *v0;
  uint64_t vars8;

  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_10);
  }
  v0 = (void *)logObject_MicroLocation_Default;
  return v0;
}

{
  void *v0;
  uint64_t vars8;

  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_11);
  }
  v0 = (void *)logObject_MicroLocation_Default;
  return v0;
}

{
  void *v0;
  uint64_t vars8;

  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_13);
  }
  v0 = (void *)logObject_MicroLocation_Default;
  return v0;
}

{
  void *v0;
  uint64_t vars8;

  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_19);
  }
  v0 = (void *)logObject_MicroLocation_Default;
  return v0;
}

{
  void *v0;
  uint64_t vars8;

  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_22);
  }
  v0 = (void *)logObject_MicroLocation_Default;
  return v0;
}

{
  void *v0;
  uint64_t vars8;

  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_25);
  }
  v0 = (void *)logObject_MicroLocation_Default;
  return v0;
}

{
  void *v0;
  uint64_t vars8;

  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_27);
  }
  v0 = (void *)logObject_MicroLocation_Default;
  return v0;
}

{
  void *v0;
  uint64_t vars8;

  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
  }
  v0 = (void *)logObject_MicroLocation_Default;
  return v0;
}

{
  void *v0;
  uint64_t vars8;

  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_32);
  }
  v0 = (void *)logObject_MicroLocation_Default;
  return v0;
}

{
  void *v0;
  uint64_t vars8;

  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_17);
  }
  v0 = (void *)logObject_MicroLocation_Default;
  return v0;
}

{
  void *v0;
  uint64_t vars8;

  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_40);
  }
  v0 = (void *)logObject_MicroLocation_Default;
  return v0;
}

{
  void *v0;
  uint64_t vars8;

  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_42);
  }
  v0 = (void *)logObject_MicroLocation_Default;
  return v0;
}

{
  void *v0;
  uint64_t vars8;

  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_46);
  }
  v0 = (void *)logObject_MicroLocation_Default;
  return v0;
}

{
  void *v0;
  uint64_t vars8;

  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_47);
  }
  v0 = (void *)logObject_MicroLocation_Default;
  return v0;
}

{
  void *v0;
  uint64_t vars8;

  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_49);
  }
  v0 = (void *)logObject_MicroLocation_Default;
  return v0;
}

{
  void *v0;
  uint64_t vars8;

  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_56);
  }
  v0 = (void *)logObject_MicroLocation_Default;
  return v0;
}

{
  void *v0;
  uint64_t vars8;

  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_59);
  }
  v0 = (void *)logObject_MicroLocation_Default;
  return v0;
}

{
  void *v0;
  uint64_t vars8;

  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_61);
  }
  v0 = (void *)logObject_MicroLocation_Default;
  return v0;
}

{
  void *v0;
  uint64_t vars8;

  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_62);
  }
  v0 = (void *)logObject_MicroLocation_Default;
  return v0;
}

{
  void *v0;
  uint64_t vars8;

  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_63);
  }
  v0 = (void *)logObject_MicroLocation_Default;
  return v0;
}

{
  void *v0;
  uint64_t vars8;

  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_67);
  }
  v0 = (void *)logObject_MicroLocation_Default;
  return v0;
}

{
  void *v0;
  uint64_t vars8;

  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_70);
  }
  v0 = (void *)logObject_MicroLocation_Default;
  return v0;
}

{
  void *v0;
  uint64_t vars8;

  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_74);
  }
  v0 = (void *)logObject_MicroLocation_Default;
  return v0;
}

{
  void *v0;
  uint64_t vars8;

  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
  }
  v0 = (void *)logObject_MicroLocation_Default;
  return v0;
}

{
  void *v0;
  uint64_t vars8;

  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_98);
  }
  v0 = (void *)logObject_MicroLocation_Default;
  return v0;
}

{
  void *v0;
  uint64_t vars8;

  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_101);
  }
  v0 = (void *)logObject_MicroLocation_Default;
  return v0;
}

{
  void *v0;
  uint64_t vars8;

  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_103);
  }
  v0 = (void *)logObject_MicroLocation_Default;
  return v0;
}

{
  void *v0;
  uint64_t vars8;

  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_106);
  }
  v0 = (void *)logObject_MicroLocation_Default;
  return v0;
}

{
  void *v0;
  uint64_t vars8;

  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_107);
  }
  v0 = (void *)logObject_MicroLocation_Default;
  return v0;
}

{
  void *v0;
  uint64_t vars8;

  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_108);
  }
  v0 = (void *)logObject_MicroLocation_Default;
  return v0;
}

{
  void *v0;
  uint64_t vars8;

  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_109);
  }
  v0 = (void *)logObject_MicroLocation_Default;
  return v0;
}

{
  void *v0;
  uint64_t vars8;

  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_112);
  }
  v0 = (void *)logObject_MicroLocation_Default;
  return v0;
}

{
  void *v0;
  uint64_t vars8;

  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_903);
  }
  v0 = (void *)logObject_MicroLocation_Default;
  return v0;
}

{
  void *v0;
  uint64_t vars8;

  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_122);
  }
  v0 = (void *)logObject_MicroLocation_Default;
  return v0;
}

uint64_t std::optional<std::vector<CLMicroLocationResultInternal>>::operator=[abi:ne180100]<std::vector<CLMicroLocationResultInternal>,void>(uint64_t a1, __n128 *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    std::vector<CLMicroLocationResultInternal>::__move_assign(a1, a2);
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(__n128 *)a1 = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

void CLMicroLocationAlgorithms::LocalizerResults::~LocalizerResults(CLMicroLocationAlgorithms::LocalizerResults *this)
{
  if (*((unsigned char *)this + 80))
  {
    int64x2_t v2 = (void *)*((void *)this + 7);
    if (v2)
    {
      *((void *)this + 8) = v2;
      operator delete(v2);
    }
  }
  uint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }
  unint64_t v4 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v4;
    operator delete(v4);
  }
}

void CLMicroLocationLocalizationSettings::~CLMicroLocationLocalizationSettings(id *this)
{
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)this, this[1]);
}

void CLMicroLocationCosineSimilarityLocalizationAlgorithm::~CLMicroLocationCosineSimilarityLocalizationAlgorithm(CLMicroLocationCosineSimilarityLocalizationAlgorithm *this)
{
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  unint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

unsigned char *boost::uuids::to_chars<char *>(uint64_t a1, unsigned char *a2)
{
  for (unint64_t i = 0; i != 16; ++i)
  {
    uint64_t v3 = a2;
    if (*(unsigned __int8 *)(a1 + i) >= 0xA0u) {
      char v4 = 87;
    }
    else {
      char v4 = 48;
    }
    *a2 = v4 + (*(unsigned char *)(a1 + i) >> 4);
    a2 += 2;
    unsigned int v5 = *(unsigned char *)(a1 + i) & 0xF;
    if (v5 >= 0xA) {
      char v6 = 87;
    }
    else {
      char v6 = 48;
    }
    v3[1] = v6 + v5;
    if (i <= 9 && ((1 << i) & 0x2A8) != 0)
    {
      a2 = v3 + 3;
      v3[2] = 45;
    }
  }
  return a2;
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_2653F8EC0, MEMORY[0x263F8C060]);
}

void sub_256331754(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  unint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x263F8C208], MEMORY[0x263F8C090]);
}

void std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

char *std::vector<CLMicroLocationProto::ConfidenceReason>::__insert_with_size[abi:ne180100]<std::__wrap_iter<CLMicroLocationProto::ConfidenceReason const*>,std::__wrap_iter<CLMicroLocationProto::ConfidenceReason const*>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  unsigned int v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  int v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 2)
  {
    uint64_t v13 = *(void **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 2);
    if (v14 >> 62) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (__dst - (uint64_t)v13) >> 2;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 1 > v14) {
      unint64_t v14 = v16 >> 1;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v37 = v9;
    if (v17) {
      uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationProto::ConfidenceReason>>(v9, v17);
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v28 = &v18[4 * v15];
    std::string __p = v18;
    uint64_t v34 = v28;
    uint64_t v36 = &v18[4 * v17];
    uint64_t v29 = 4 * a5;
    uint64_t v30 = &v28[4 * a5];
    do
    {
      int v31 = *(_DWORD *)v7;
      v7 += 4;
      *(_DWORD *)uint64_t v28 = v31;
      v28 += 4;
      v29 -= 4;
    }
    while (v29);
    uint64_t v35 = v30;
    unsigned int v5 = std::vector<CLMicroLocationProto::ConfidenceReason>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      v35 += (v34 - v35 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    uint64_t v21 = &__src[4 * a5];
    __int16 v23 = *(char **)(v9 - 8);
LABEL_17:
    uint64_t v24 = &v5[4 * a5];
    uint64_t v25 = &v23[-4 * a5];
    __int16 v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      __int16 v26 = v23;
      do
      {
        int v27 = *(_DWORD *)v25;
        v25 += 4;
        *(_DWORD *)__int16 v26 = v27;
        v26 += 4;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-4 * ((v23 - v24) >> 2)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  uint64_t v21 = &__src[4 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[4 * v20], a4 - v21);
  }
  __int16 v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_2563319FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<CLMicroLocationProto::ConfidenceReason>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  unsigned int v5 = *(char **)(a2 + 8);
  char v6 = (char *)*a1;
  int v7 = v5;
  if (*a1 != __src)
  {
    unint64_t v8 = __src;
    int v7 = *(char **)(a2 + 8);
    do
    {
      int v9 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v7 - 1) = v9;
      v7 -= 4;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    int v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  uint64_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  unint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationProto::ConfidenceReason>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a2);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationResultInternal>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a2);
}

__n128 std::vector<CLMicroLocationResultInternal>::__move_assign(uint64_t a1, __n128 *a2)
{
  char v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

void sub_256331C70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256331D54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256331E38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256331F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int64_t v12 = v11;

  _Unwind_Resume(a1);
}

void sub_256331FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_256332060(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25633210C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2563321E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2563322D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2563323FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_25633255C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_2563326BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_25633282C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2563329AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void std::vector<CLMiLoOdometryTable::Entry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v1 = *a1;
  int64x2_t v2 = (id *)**a1;
  if (v2)
  {
    char v4 = (id *)v1[1];
    unsigned int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        char v6 = v4 - 4;

        char v4 = v6;
      }
      while (v6 != v2);
      unsigned int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *std::vector<CLMiLoOdometryTable::Entry>::__init_with_size[abi:ne180100]<CLMiLoOdometryTable::Entry*,CLMiLoOdometryTable::Entry*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    char v6 = result;
    __n128 result = std::vector<CLMiLoOdometryTable::Entry>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2;
      *(void *)(v7 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v7 = v8;
      __n128 result = (char *)*((id *)a2 + 3);
      *(void *)(v7 + 24) = result;
      v7 += 32;
      a2 += 2;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_256332C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<CLMiLoOdometryTable::Entry>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationResultInternal>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

id _CLLogObjectForCategory_MicroLocation_Default()
{
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_25);
  }
  os_log_t v0 = (void *)logObject_MicroLocation_Default;
  return v0;
}

void OUTLINED_FUNCTION_1(void *a1, int a2, int a3, int a4, const char *a5, const char *a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  _os_signpost_emit_with_name_impl(a1, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, a5, a6, &buf, 0x26u);
}

void OUTLINED_FUNCTION_2(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  _os_log_impl(a1, v13, OS_LOG_TYPE_INFO, a4, &buf, 0x26u);
}

void OUTLINED_FUNCTION_3(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  _os_log_impl(a1, v13, OS_LOG_TYPE_FAULT, a4, &buf, 0x26u);
}

uint64_t ULHomeNearbyRangingSupport::isUwbRangingSupportedOnDevice(ULHomeNearbyRangingSupport *this)
{
  unint64_t v1 = +[CLMicroLocationEnvironment shared];
  int v2 = [v1 isTestingEnvironment];

  if (v2)
  {
    uint64_t v4 = +[ULDefaultsSingleton shared];
    unsigned int v5 = [v4 defaultsDictionary];

    char v6 = [NSString stringWithUTF8String:"ULMeasurementProcessingUwbRangeEnable"];
    uint64_t v7 = [v5 objectForKey:v6];
    if (v7 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
      uint64_t v8 = [v7 BOOLValue];
    }
    else {
      uint64_t v8 = [MEMORY[0x263EFFA88] BOOLValue];
    }
    uint64_t v10 = v8;

    return v10;
  }
  else
  {
    return CLHomeNearbyObjectInternal::isNearbyObjectUwbRangingSupportedOnDevice(v3);
  }
}

void sub_256333138(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2563334F8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_256333B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_25633461C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ULDBUtils::insertEntries<CLMicroLocationRecordingLabelsTable,ULLabelMO>(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2020000000;
  char v15 = 0;
  uint64_t v4 = [v3 managedObjectContext];
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 3221225472;
  v8[2] = ___ZN9ULDBUtils13insertEntriesI35CLMicroLocationRecordingLabelsTable9ULLabelMOEEbP7ULStoreRKNSt3__16vectorINT_5EntryENS5_9allocatorIS8_EEEE_block_invoke;
  void v8[3] = &unk_2653F90B8;
  uint64_t v11 = a2;
  id v5 = v3;
  id v9 = v5;
  uint64_t v10 = &v12;
  [v4 performBlockAndWait:v8];

  uint64_t v6 = *((unsigned __int8 *)v13 + 24);
  _Block_object_dispose(&v12, 8);

  return v6;
}

void sub_25633475C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ULDBUtils::fetchEntries<CLMicroLocationRecordingLabelsTable,ULLabelMO>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  uint64_t v23 = 0;
  uint64_t v24 = &v23;
  uint64_t v25 = 0x4812000000;
  __int16 v26 = __Block_byref_object_copy_;
  int v27 = __Block_byref_object_dispose_;
  uint64_t v28 = &unk_25654E519;
  memset(v29, 0, sizeof(v29));
  uint64_t v12 = [v9 managedObjectContext];
  v17[0] = MEMORY[0x263EF8330];
  v17[1] = 3221225472;
  v17[2] = ___ZN9ULDBUtils12fetchEntriesI35CLMicroLocationRecordingLabelsTable9ULLabelMOEENSt3__16vectorINT_5EntryENS3_9allocatorIS6_EEEEP7ULStoreP7NSArrayIP11NSPredicateEPSC_IP16NSSortDescriptorEm_block_invoke;
  v17[3] = &unk_2653F90E0;
  id v13 = v10;
  id v18 = v13;
  id v14 = v11;
  id v19 = v14;
  uint64_t v22 = a4;
  id v15 = v9;
  id v20 = v15;
  uint64_t v21 = &v23;
  [v12 performBlockAndWait:v17];

  uint64_t v16 = v24;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__init_with_size[abi:ne180100]<CLMicroLocationRecordingLabelsTable::Entry*,CLMicroLocationRecordingLabelsTable::Entry*>(a5, (long long *)v16[6], (long long *)v16[7], (v16[7] - v16[6]) >> 6);

  _Block_object_dispose(&v23, 8);
  uint64_t v30 = (void **)v29;
  std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v30);
}

void sub_256334940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, void *a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);

  _Block_object_dispose(va, 8);
  *(void *)(v14 - 96) = v13;
  std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 96));

  _Unwind_Resume(a1);
}

void ULDBUtils::fetchAllWithLimit<CLMicroLocationRecordingLabelsTable,ULLabelMO>(void *a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  v10[1] = *MEMORY[0x263EF8340];
  id v5 = a1;
  uint64_t v6 = (void *)MEMORY[0x263F08B30];
  uint64_t v7 = [(id)objc_opt_class() defaultSortProperty];
  uint64_t v8 = [v6 sortDescriptorWithKey:v7 ascending:0];

  v10[0] = v8;
  id v9 = [MEMORY[0x263EFF8C0] arrayWithObjects:v10 count:1];
  ULDBUtils::fetchEntries<CLMicroLocationRecordingLabelsTable,ULLabelMO>(v5, 0, v9, a2, a3);
}

void sub_256334AA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256334C44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256334DC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256334F44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::DatabaseSelectionLimit>()
{
  os_log_t v0 = +[ULDefaultsSingleton shared];
  unint64_t v1 = [v0 defaultsDictionary];

  uint64_t v2 = [NSString stringWithUTF8String:"ULDatabaseSelectionLimit"];
  id v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 unsignedIntValue];
  }
  else {
    uint64_t v4 = [&unk_2704F1170 unsignedIntValue];
  }
  uint64_t v5 = v4;

  return v5;
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  os_log_t v0 = +[ULDefaultsSingleton shared];
  unint64_t v1 = [v0 defaultsDictionary];

  uint64_t v2 = [NSString stringWithUTF8String:"ULDatabaseSelectionLimit"];
  id v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 unsignedIntValue];
  }
  else {
    uint64_t v4 = [&unk_2704F14B8 unsignedIntValue];
  }
  uint64_t v5 = v4;

  return v5;
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  os_log_t v0 = +[ULDefaultsSingleton shared];
  unint64_t v1 = [v0 defaultsDictionary];

  uint64_t v2 = [NSString stringWithUTF8String:"ULDatabaseSelectionLimit"];
  id v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 unsignedIntValue];
  }
  else {
    uint64_t v4 = [&unk_2704F18C0 unsignedIntValue];
  }
  uint64_t v5 = v4;

  return v5;
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  os_log_t v0 = +[ULDefaultsSingleton shared];
  unint64_t v1 = [v0 defaultsDictionary];

  uint64_t v2 = [NSString stringWithUTF8String:"ULDatabaseSelectionLimit"];
  id v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 unsignedIntValue];
  }
  else {
    uint64_t v4 = [&unk_2704F1920 unsignedIntValue];
  }
  uint64_t v5 = v4;

  return v5;
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  os_log_t v0 = +[ULDefaultsSingleton shared];
  unint64_t v1 = [v0 defaultsDictionary];

  uint64_t v2 = [NSString stringWithUTF8String:"ULDatabaseSelectionLimit"];
  id v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 unsignedIntValue];
  }
  else {
    uint64_t v4 = [&unk_2704F1E78 unsignedIntValue];
  }
  uint64_t v5 = v4;

  return v5;
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  os_log_t v0 = +[ULDefaultsSingleton shared];
  unint64_t v1 = [v0 defaultsDictionary];

  uint64_t v2 = [NSString stringWithUTF8String:"ULDatabaseSelectionLimit"];
  id v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 unsignedIntValue];
  }
  else {
    uint64_t v4 = [&unk_2704F20B8 unsignedIntValue];
  }
  uint64_t v5 = v4;

  return v5;
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  os_log_t v0 = +[ULDefaultsSingleton shared];
  unint64_t v1 = [v0 defaultsDictionary];

  uint64_t v2 = [NSString stringWithUTF8String:"ULDatabaseSelectionLimit"];
  id v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 unsignedIntValue];
  }
  else {
    uint64_t v4 = [&unk_2704F2388 unsignedIntValue];
  }
  uint64_t v5 = v4;

  return v5;
}

void sub_256335038(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2563351C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256335418(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256335690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void sub_256335848(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2563359E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_0()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  unint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

void __clang_call_terminate(void *a1)
{
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
}

void ___ZN9ULDBUtils13insertEntriesI35CLMicroLocationRecordingLabelsTable9ULLabelMOEEbP7ULStoreRKNSt3__16vectorINT_5EntryENS5_9allocatorIS8_EEEE_block_invoke(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(a1 + 48);
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  if (*v2 == v4)
  {
LABEL_4:
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [*(id *)(a1 + 32) commitChangesToStore];
    uint64_t v7 = *(void **)(a1 + 32);
    [v7 deleteOldestRecordsIfFull];
  }
  else
  {
    while (1)
    {
      uint64_t v5 = [*(id *)(a1 + 32) managedObjectContext];
      uint64_t v6 = +[ULLabelMO createFromEntry:v3 inManagedObjectContext:v5];

      if (!v6) {
        break;
      }

      v3 += 64;
      if (v3 == v4) {
        goto LABEL_4;
      }
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_3);
    }
    uint64_t v8 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      id v9 = +[ULLabelMO entity];
      id v10 = [v9 name];
      int v15 = 68289283;
      int v16 = 0;
      __int16 v17 = 2082;
      id v18 = "";
      __int16 v19 = 2113;
      id v20 = v10;
      _os_log_impl(&dword_25631F000, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to create entry from MO\", \"MO\":%{private, location:escape_only}@}", (uint8_t *)&v15, 0x1Cu);
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_3);
    }
    id v11 = (id)logObject_MicroLocation_Default;
    if (os_signpost_enabled(v11))
    {
      uint64_t v12 = +[ULLabelMO entity];
      uint64_t v13 = [v12 name];
      int v15 = 68289283;
      int v16 = 0;
      __int16 v17 = 2082;
      id v18 = "";
      __int16 v19 = 2113;
      id v20 = v13;
      _os_signpost_emit_with_name_impl(&dword_25631F000, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to create entry from MO", "{\"msg%{public}.0s\":\"Failed to create entry from MO\", \"MO\":%{private, location:escape_only}@}", (uint8_t *)&v15, 0x1Cu);
    }
    uint64_t v14 = [*(id *)(a1 + 32) managedObjectContext];
    [v14 reset];
  }
}

void sub_256335D8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy_(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void ___ZN9ULDBUtils12fetchEntriesI35CLMicroLocationRecordingLabelsTable9ULLabelMOEENSt3__16vectorINT_5EntryENS3_9allocatorIS6_EEEEP7ULStoreP7NSArrayIP11NSPredicateEPSC_IP16NSSortDescriptorEm_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  uint64_t v3 = (objc_class *)objc_opt_class();
  uint64_t v4 = NSStringFromClass(v3);
  uint64_t v5 = [v2 fetchManagedObjectsWithEntityName:v4 byAndPredicates:*(void *)(a1 + 32) sortDescriptors:*(void *)(a1 + 40) andLimit:*(void *)(a1 + 64)];

  ULDBUtils::convertManagedObjectsToEntries<CLMicroLocationRecordingLabelsTable,ULLabelMO>(v5, (uint64_t *)&v8);
  uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8);
  std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__vdeallocate((uint64_t *)(v6 + 48));
  *(_OWORD *)(v6 + 48) = v8;
  *(void *)(v6 + 64) = v9;
  uint64_t v9 = 0;
  long long v8 = 0uLL;
  id v10 = (void **)&v8;
  std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v10);
  uint64_t v7 = [*(id *)(a1 + 48) managedObjectContext];
  [v7 reset];
}

void sub_256335EFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ULDBUtils::convertManagedObjectsToEntries<CLMicroLocationRecordingLabelsTable,ULLabelMO>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  id v3 = a1;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  std::vector<CLMicroLocationRecordingLabelsTable::Entry>::reserve(a2, [v3 count]);
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v4 = v3;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v20 objects:v35 count:16];
  if (!v5)
  {

    goto LABEL_28;
  }
  id v18 = v3;
  __int16 v19 = a2;
  char v6 = 0;
  uint64_t v7 = *(void *)v21;
  do
  {
    uint64_t v8 = 0;
    do
    {
      if (*(void *)v21 != v7) {
        objc_enumerationMutation(v4);
      }
      id v9 = *(id *)(*((void *)&v20 + 1) + 8 * v8);
      id v10 = v9;
      if (v9)
      {
        objc_msgSend(v9, "convertToEntry", v18);
        if ((_BYTE)v34)
        {
          std::vector<CLMicroLocationRecordingLabelsTable::Entry>::push_back[abi:ne180100](v19, (uint64_t)&v30);
          char v11 = 0;
          goto LABEL_19;
        }
      }
      else
      {
        uint64_t v34 = 0;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        *(_OWORD *)std::string __p = 0u;
      }
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_3);
      }
      uint64_t v12 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        uint64_t v13 = [v10 entity];
        uint64_t v14 = [v13 name];
        *(_DWORD *)buf = 68289283;
        int v25 = 0;
        __int16 v26 = 2082;
        int v27 = "";
        __int16 v28 = 2113;
        uint64_t v29 = v14;
        _os_log_impl(&dword_25631F000, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to convert MO to entry\", \"MO\":%{private, location:escape_only}@}", buf, 0x1Cu);
      }
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_3);
      }
      int v15 = (id)logObject_MicroLocation_Default;
      if (os_signpost_enabled(v15))
      {
        int v16 = [v10 entity];
        __int16 v17 = [v16 name];
        *(_DWORD *)buf = 68289283;
        int v25 = 0;
        __int16 v26 = 2082;
        int v27 = "";
        __int16 v28 = 2113;
        uint64_t v29 = v17;
        _os_signpost_emit_with_name_impl(&dword_25631F000, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to convert MO to entry", "{\"msg%{public}.0s\":\"Failed to convert MO to entry\", \"MO\":%{private, location:escape_only}@}", buf, 0x1Cu);
      }
      char v11 = 1;
      char v6 = 1;
LABEL_19:
      if ((_BYTE)v34 && SBYTE7(v32) < 0) {
        operator delete(__p[0]);
      }

      if (v11) {
        goto LABEL_25;
      }
      ++v8;
    }
    while (v5 != v8);
    uint64_t v5 = [v4 countByEnumeratingWithState:&v20 objects:v35 count:16];
  }
  while (v5);
LABEL_25:

  if (v6) {
    std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__clear[abi:ne180100](v19);
  }
LABEL_28:
}

void sub_25633625C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  a25 = a10;
  std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);

  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMicroLocationRecordingLabelsTable::Entry>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 6)
  {
    if (a2 >> 58) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRecordingLabelsTable::Entry>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + (v6 << 6);
    std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<CLMicroLocationRecordingLabelsTable::Entry>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_256336380(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMicroLocationRecordingLabelsTable::Entry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMicroLocationRecordingLabelsTable::Entry>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(result - 8);
  if (v7 >= v6)
  {
    uint64_t v11 = (uint64_t)(v7 - *a1) >> 6;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 58) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = v5 - *a1;
    if (v13 >> 5 > v12) {
      unint64_t v12 = v13 >> 5;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    v19[4] = result;
    if (v14) {
      int v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRecordingLabelsTable::Entry>>(result, v14);
    }
    else {
      int v15 = 0;
    }
    int v16 = &v15[64 * v11];
    v19[0] = v15;
    v19[1] = v16;
    v19[3] = &v15[64 * v14];
    *(_OWORD *)int v16 = *(_OWORD *)a2;
    long long v17 = *(_OWORD *)(a2 + 16);
    *((void *)v16 + 4) = *(void *)(a2 + 32);
    *((_OWORD *)v16 + 1) = v17;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 16) = 0;
    long long v18 = *(_OWORD *)(a2 + 40);
    *((void *)v16 + 7) = *(void *)(a2 + 56);
    *(_OWORD *)(v16 + 40) = v18;
    v19[2] = v16 + 64;
    std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__swap_out_circular_buffer(a1, v19);
    uint64_t v10 = a1[1];
    uint64_t result = std::__split_buffer<CLMicroLocationRecordingLabelsTable::Entry>::~__split_buffer((uint64_t)v19);
  }
  else
  {
    *(_OWORD *)unint64_t v7 = *(_OWORD *)a2;
    long long v8 = *(_OWORD *)(a2 + 16);
    *(void *)(v7 + 32) = *(void *)(a2 + 32);
    *(_OWORD *)(v7 + 16) = v8;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 16) = 0;
    long long v9 = *(_OWORD *)(a2 + 40);
    *(void *)(v7 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(v7 + 40) = v9;
    uint64_t v10 = v7 + 64;
    a1[1] = v7 + 64;
  }
  a1[1] = v10;
  return result;
}

void sub_2563364CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMicroLocationRecordingLabelsTable::Entry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationRecordingLabelsTable::Entry>,std::reverse_iterator<CLMicroLocationRecordingLabelsTable::Entry*>,std::reverse_iterator<CLMicroLocationRecordingLabelsTable::Entry*>,std::reverse_iterator<CLMicroLocationRecordingLabelsTable::Entry*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRecordingLabelsTable::Entry>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(a2 << 6);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationRecordingLabelsTable::Entry>,std::reverse_iterator<CLMicroLocationRecordingLabelsTable::Entry*>,std::reverse_iterator<CLMicroLocationRecordingLabelsTable::Entry*>,std::reverse_iterator<CLMicroLocationRecordingLabelsTable::Entry*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      *(_OWORD *)(v7 - 64) = *(_OWORD *)(a3 - 64);
      long long v8 = *(_OWORD *)(a3 - 48);
      *(void *)(v7 - 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v7 - 48) = v8;
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 48) = 0;
      uint64_t v9 = *(void *)(a3 - 8);
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(void *)(v7 - 8) = v9;
      uint64_t v7 = *((void *)&v15 + 1) - 64;
      *((void *)&v15 + 1) -= 64;
      a3 -= 64;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationRecordingLabelsTable::Entry>,std::reverse_iterator<CLMicroLocationRecordingLabelsTable::Entry*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationRecordingLabelsTable::Entry>,std::reverse_iterator<CLMicroLocationRecordingLabelsTable::Entry*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationRecordingLabelsTable::Entry>,std::reverse_iterator<CLMicroLocationRecordingLabelsTable::Entry*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationRecordingLabelsTable::Entry>,std::reverse_iterator<CLMicroLocationRecordingLabelsTable::Entry*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 39) < 0) {
      operator delete(*(void **)(v1 + 16));
    }
    v1 += 64;
  }
}

uint64_t std::__split_buffer<CLMicroLocationRecordingLabelsTable::Entry>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<CLMicroLocationRecordingLabelsTable::Entry>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 64;
      *(void *)(a1 + 16) = v2 - 64;
      if (*(char *)(v2 - 25) < 0)
      {
        operator delete(*(void **)(v2 - 48));
        uint64_t v5 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 64)
  {
    if (*(char *)(i - 25) < 0) {
      operator delete(*(void **)(i - 48));
    }
  }
  a1[1] = v2;
}

void std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void *std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__init_with_size[abi:ne180100]<CLMicroLocationRecordingLabelsTable::Entry*,CLMicroLocationRecordingLabelsTable::Entry*>(void *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationRecordingLabelsTable::Entry>,CLMicroLocationRecordingLabelsTable::Entry*,CLMicroLocationRecordingLabelsTable::Entry*,CLMicroLocationRecordingLabelsTable::Entry*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_256336850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 58) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRecordingLabelsTable::Entry>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[64 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationRecordingLabelsTable::Entry>,CLMicroLocationRecordingLabelsTable::Entry*,CLMicroLocationRecordingLabelsTable::Entry*,CLMicroLocationRecordingLabelsTable::Entry*>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v15 = a4;
  uint64_t v16 = a4;
  v13[0] = a1;
  v13[1] = &v15;
  _DWORD v13[2] = &v16;
  char v14 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2 + 1;
    do
    {
      *(_OWORD *)uint64_t v4 = *(v6 - 1);
      uint64_t v7 = (std::string *)(v4 + 16);
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v9 = v16;
      }
      else
      {
        long long v8 = *v6;
        *(void *)(v4 + 32) = *((void *)v6 + 2);
        *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
        uint64_t v9 = v4;
      }
      uint64_t v10 = v6 - 1;
      long long v11 = *(long long *)((char *)v6 + 24);
      *(void *)(v4 + 56) = *((void *)v6 + 5);
      *(_OWORD *)(v4 + 40) = v11;
      uint64_t v4 = v9 + 64;
      uint64_t v16 = v9 + 64;
      v6 += 4;
    }
    while (v10 + 4 != a3);
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationRecordingLabelsTable::Entry>,CLMicroLocationRecordingLabelsTable::Entry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v4;
}

void sub_256336984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationRecordingLabelsTable::Entry>,CLMicroLocationRecordingLabelsTable::Entry*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationRecordingLabelsTable::Entry>,CLMicroLocationRecordingLabelsTable::Entry*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationRecordingLabelsTable::Entry>,CLMicroLocationRecordingLabelsTable::Entry*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 25) < 0) {
      operator delete(*(void **)(v1 - 48));
    }
    v1 -= 64;
  }
}

void std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__clear[abi:ne180100]((uint64_t *)v2);
    id v3 = **a1;
    operator delete(v3);
  }
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<char const*>(uint64_t *a1, char **a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    uint64_t v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  __v.__first_ = v10;
  __v.__begin_ = v10 + v4;
  __v.__end_ = __v.__begin_;
  __v.__end_cap_.__value_ = &v10[v9];
  std::string::basic_string[abi:ne180100]<0>(__v.__begin_->__r_.__value_.__r.__words, *a2);
  __v.__end_ = __v.__begin_ + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v11 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v11;
}

void sub_256336B60(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

CLMicroLocationLogic::State *CLMicroLocationLogic::State::State(CLMicroLocationLogic::State *this)
{
  *(_DWORD *)this = 0;
  *((_WORD *)this + 2) = 1;
  *((unsigned char *)this + 6) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 1, "unknown");
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((unsigned char *)this + 48) = 1;
  *(void *)((char *)this + 52) = 0;
  *((_WORD *)this + 30) = 257;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0x1010000000101;
  return this;
}

void CLMicroLocationLogic::State::setScanActivity(uint64_t a1, char a2)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 5))
  {
    if (*(unsigned __int8 *)(a1 + 5) - 1 < 2)
    {
      unint64_t v4 = _CLLogObjectForCategory_MicroLocation_Default();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      {
        CLMicroLocationUtils::scanActivityToString(*(unsigned char *)(a1 + 5), v38);
        int v5 = v39;
        uint64_t v6 = (void **)v38[0];
        CLMicroLocationUtils::scanActivityToString(a2, __p);
        uint64_t v7 = v38;
        if (v5 < 0) {
          uint64_t v7 = v6;
        }
        if (v43 >= 0) {
          unint64_t v8 = __p;
        }
        else {
          unint64_t v8 = *(unsigned char **)__p;
        }
        *(_DWORD *)buf = 68290051;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v45 = 2082;
        int v46 = "";
        __int16 v47 = 2082;
        long long v48 = v7;
        __int16 v49 = 2082;
        int v50 = v8;
        __int16 v51 = 2082;
        v52 = "assert";
        __int16 v53 = 2081;
        int v54 = "false";
        _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Can't set new activity\", \"currentActivity\":%{public, location:escape_only}s, \"providedNextActivity\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
        if (v43 < 0) {
          operator delete(*(void **)__p);
        }
        if (v39 < 0) {
          operator delete(v38[0]);
        }
      }

      unint64_t v9 = _CLLogObjectForCategory_MicroLocation_Default();
      if (os_signpost_enabled(v9))
      {
        CLMicroLocationUtils::scanActivityToString(*(unsigned char *)(a1 + 5), v38);
        int v10 = v39;
        uint64_t v11 = (void **)v38[0];
        CLMicroLocationUtils::scanActivityToString(a2, __p);
        unint64_t v12 = v38;
        if (v10 < 0) {
          unint64_t v12 = v11;
        }
        if (v43 >= 0) {
          char v13 = __p;
        }
        else {
          char v13 = *(unsigned char **)__p;
        }
        *(_DWORD *)buf = 68290051;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v45 = 2082;
        int v46 = "";
        __int16 v47 = 2082;
        long long v48 = v12;
        __int16 v49 = 2082;
        int v50 = v13;
        __int16 v51 = 2082;
        v52 = "assert";
        __int16 v53 = 2081;
        int v54 = "false";
        _os_signpost_emit_with_name_impl(&dword_25631F000, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Can't set new activity", "{\"msg%{public}.0s\":\"Can't set new activity\", \"currentActivity\":%{public, location:escape_only}s, \"providedNextActivity\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
        if (v43 < 0) {
          operator delete(*(void **)__p);
        }
        if (v39 < 0) {
          operator delete(v38[0]);
        }
      }

      char v14 = _CLLogObjectForCategory_MicroLocation_Default();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        CLMicroLocationUtils::scanActivityToString(*(unsigned char *)(a1 + 5), v38);
        int v15 = v39;
        uint64_t v16 = (void **)v38[0];
        CLMicroLocationUtils::scanActivityToString(a2, __p);
        long long v17 = v38;
        if (v15 < 0) {
          long long v17 = v16;
        }
        if (v43 >= 0) {
          long long v18 = __p;
        }
        else {
          long long v18 = *(unsigned char **)__p;
        }
        *(_DWORD *)buf = 68290051;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v45 = 2082;
        int v46 = "";
        __int16 v47 = 2082;
        long long v48 = v17;
        __int16 v49 = 2082;
        int v50 = v18;
        __int16 v51 = 2082;
        v52 = "assert";
        __int16 v53 = 2081;
        int v54 = "false";
        _os_log_impl(&dword_25631F000, v14, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Can't set new activity\", \"currentActivity\":%{public, location:escape_only}s, \"providedNextActivity\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
        if (v43 < 0) {
          operator delete(*(void **)__p);
        }
        if (v39 < 0) {
          operator delete(v38[0]);
        }
      }
      goto LABEL_78;
    }
  }
  else if ((a2 - 3) <= 0xFDu)
  {
    uint64_t v24 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_FAULT))
    {
      CLMicroLocationUtils::scanActivityToString(*(unsigned char *)(a1 + 5), v38);
      int v25 = v39;
      __int16 v26 = (void **)v38[0];
      CLMicroLocationUtils::scanActivityToString(a2, __p);
      int v27 = v38;
      if (v25 < 0) {
        int v27 = v26;
      }
      if (v43 >= 0) {
        __int16 v28 = __p;
      }
      else {
        __int16 v28 = *(unsigned char **)__p;
      }
      *(_DWORD *)buf = 68290051;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v45 = 2082;
      int v46 = "";
      __int16 v47 = 2082;
      long long v48 = v27;
      __int16 v49 = 2082;
      int v50 = v28;
      __int16 v51 = 2082;
      v52 = "assert";
      __int16 v53 = 2081;
      int v54 = "scanActivity == CLMicroLocationUtils::ScanActivity::Localizing || scanActivity == CLMicroLocationUtils::Scan"
            "Activity::Recording";
      _os_log_impl(&dword_25631F000, v24, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Can't set new activity\", \"currentActivity\":%{public, location:escape_only}s, \"providedNextActivity\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (v43 < 0) {
        operator delete(*(void **)__p);
      }
      if (v39 < 0) {
        operator delete(v38[0]);
      }
    }

    uint64_t v29 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_signpost_enabled(v29))
    {
      CLMicroLocationUtils::scanActivityToString(*(unsigned char *)(a1 + 5), v38);
      int v30 = v39;
      int v31 = (void **)v38[0];
      CLMicroLocationUtils::scanActivityToString(a2, __p);
      long long v32 = v38;
      if (v30 < 0) {
        long long v32 = v31;
      }
      if (v43 >= 0) {
        long long v33 = __p;
      }
      else {
        long long v33 = *(unsigned char **)__p;
      }
      *(_DWORD *)buf = 68290051;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v45 = 2082;
      int v46 = "";
      __int16 v47 = 2082;
      long long v48 = v32;
      __int16 v49 = 2082;
      int v50 = v33;
      __int16 v51 = 2082;
      v52 = "assert";
      __int16 v53 = 2081;
      int v54 = "scanActivity == CLMicroLocationUtils::ScanActivity::Localizing || scanActivity == CLMicroLocationUtils::Scan"
            "Activity::Recording";
      _os_signpost_emit_with_name_impl(&dword_25631F000, v29, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Can't set new activity", "{\"msg%{public}.0s\":\"Can't set new activity\", \"currentActivity\":%{public, location:escape_only}s, \"providedNextActivity\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (v43 < 0) {
        operator delete(*(void **)__p);
      }
      if (v39 < 0) {
        operator delete(v38[0]);
      }
    }

    char v14 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      CLMicroLocationUtils::scanActivityToString(*(unsigned char *)(a1 + 5), v38);
      int v34 = v39;
      uint64_t v35 = (void **)v38[0];
      CLMicroLocationUtils::scanActivityToString(a2, __p);
      uint64_t v36 = v38;
      if (v34 < 0) {
        uint64_t v36 = v35;
      }
      if (v43 >= 0) {
        uint64_t v37 = __p;
      }
      else {
        uint64_t v37 = *(unsigned char **)__p;
      }
      *(_DWORD *)buf = 68290051;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v45 = 2082;
      int v46 = "";
      __int16 v47 = 2082;
      long long v48 = v36;
      __int16 v49 = 2082;
      int v50 = v37;
      __int16 v51 = 2082;
      v52 = "assert";
      __int16 v53 = 2081;
      int v54 = "scanActivity == CLMicroLocationUtils::ScanActivity::Localizing || scanActivity == CLMicroLocationUtils::Scan"
            "Activity::Recording";
      _os_log_impl(&dword_25631F000, v14, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Can't set new activity\", \"currentActivity\":%{public, location:escape_only}s, \"providedNextActivity\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (v43 < 0) {
        operator delete(*(void **)__p);
      }
      if (v39 < 0) {
        operator delete(v38[0]);
      }
    }
LABEL_78:

    abort_report_np();
    __break(1u);
  }
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
  }
  __int16 v19 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    CLMicroLocationUtils::scanActivityToString(*(unsigned char *)(a1 + 5), buf);
    int v20 = SBYTE3(v48);
    long long v21 = *(uint8_t **)buf;
    CLMicroLocationUtils::scanActivityToString(a2, v38);
    long long v22 = buf;
    if (v20 < 0) {
      long long v22 = v21;
    }
    if (v39 >= 0) {
      long long v23 = v38;
    }
    else {
      long long v23 = (void **)v38[0];
    }
    *(_DWORD *)std::string __p = 136446466;
    *(void *)&__p[4] = v22;
    __int16 v41 = 2082;
    uint64_t v42 = v23;
    _os_log_impl(&dword_25631F000, v19, OS_LOG_TYPE_DEFAULT, "Advanced from %{public}s to %{public}s", __p, 0x16u);
    if (v39 < 0) {
      operator delete(v38[0]);
    }
    if (SBYTE3(v48) < 0) {
      operator delete(*(void **)buf);
    }
  }

  *(unsigned char *)(a1 + 5) = a2;
}

void sub_25633739C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void CLMicroLocationLogic::State::clearScanActivity(CLMicroLocationLogic::State *this)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (!*((unsigned char *)this + 5))
  {
    uint64_t v7 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    {
      CLMicroLocationUtils::scanActivityToString(*((unsigned char *)this + 5), __p);
      unint64_t v8 = v13 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)long long v18 = 68289795;
      *(_DWORD *)&v18[4] = 0;
      __int16 v19 = 2082;
      int v20 = "";
      __int16 v21 = 2082;
      long long v22 = v8;
      __int16 v23 = 2082;
      uint64_t v24 = "assert";
      __int16 v25 = 2081;
      __int16 v26 = "false";
      _os_log_impl(&dword_25631F000, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Can't clear current activity as it is already invalid\", \"currentActivity\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v18, 0x30u);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }

    unint64_t v9 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_signpost_enabled(v9))
    {
      CLMicroLocationUtils::scanActivityToString(*((unsigned char *)this + 5), __p);
      int v10 = v13 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)long long v18 = 68289795;
      *(_DWORD *)&v18[4] = 0;
      __int16 v19 = 2082;
      int v20 = "";
      __int16 v21 = 2082;
      long long v22 = v10;
      __int16 v23 = 2082;
      uint64_t v24 = "assert";
      __int16 v25 = 2081;
      __int16 v26 = "false";
      _os_signpost_emit_with_name_impl(&dword_25631F000, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Can't clear current activity as it is already invalid", "{\"msg%{public}.0s\":\"Can't clear current activity as it is already invalid\", \"currentActivity\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v18, 0x30u);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v11 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      CLMicroLocationUtils::scanActivityToString(*((unsigned char *)this + 5), __p);
      CLMicroLocationLogic::State::clearScanActivity();
    }

    abort_report_np();
    __break(1u);
  }
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
  }
  uint64_t v2 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    CLMicroLocationUtils::scanActivityToString(*((unsigned char *)this + 5), v18);
    int v3 = SBYTE3(v22);
    unint64_t v4 = *(uint8_t **)v18;
    CLMicroLocationUtils::scanActivityToString(0, __p);
    int v5 = v18;
    if (v3 < 0) {
      int v5 = v4;
    }
    if (v13 >= 0) {
      uint64_t v6 = __p;
    }
    else {
      uint64_t v6 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136446466;
    int v15 = v5;
    __int16 v16 = 2082;
    long long v17 = v6;
    _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_DEFAULT, "Reversed from %{public}s to %{public}s", buf, 0x16u);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (SBYTE3(v22) < 0) {
      operator delete(*(void **)v18);
    }
  }

  *((unsigned char *)this + 5) = 0;
}

void sub_2563377AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationLogic::State::setRapportSessionRunning(CLMicroLocationLogic::State *this, int a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
  }
  unint64_t v4 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = "not running";
    v6[0] = 68289282;
    v6[1] = 0;
    __int16 v7 = 2082;
    unint64_t v8 = "";
    if (a2) {
      int v5 = "running";
    }
    __int16 v9 = 2082;
    int v10 = v5;
    _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Rapport, setRapportSessionRunning\", \"session set to\":%{public, location:escape_only}s}", (uint8_t *)v6, 0x1Cu);
  }
  *((unsigned char *)this + 6) = a2;
}

BOOL CLMicroLocationLogic::State::isAtHomeLoi(CLMicroLocationLogic::State *this)
{
  uint64_t v1 = (_DWORD *)((char *)this + 8);
  int v2 = *((char *)this + 31);
  if ((v2 & 0x80000000) == 0)
  {
    if (v2 != 4) {
      return 0;
    }
    return *v1 == 1701670760;
  }
  if (*((void *)this + 2) == 4)
  {
    uint64_t v1 = *(_DWORD **)v1;
    return *v1 == 1701670760;
  }
  return 0;
}

void CLMicroLocationLogic::CLMicroLocationLogic(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = a1 + 8;
  uint64_t v9 = a1 + 16;
  uint64_t v10 = a1 + 32;
  *(void *)a1 = &unk_2704DA268;
  *(void *)(a1 + 8) = &unk_2704DA440;
  *(void *)(a1 + 16) = &unk_2704DA508;
  *(void *)(a1 + 24) = &unk_2704DA568;
  *(void *)(a1 + 32) = &unk_2704DA5F0;
  *(void *)(a1 + 40) = &unk_2704DA628;
  CLMicroLocationLogic::State::State((CLMicroLocationLogic::State *)(a1 + 48));
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 128) = a3;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  std::vector<CLMicroLocationLoggedEventsTable::Entry>::__init_with_size[abi:ne180100]<CLMicroLocationLoggedEventsTable::Entry*,CLMicroLocationLoggedEventsTable::Entry*>((void *)(a1 + 136), *a4, a4[1], 0xCF3CF3CF3CF3CF3DLL * ((a4[1] - *a4) >> 4));
  uint64_t v21 = v10;
  uint64_t v22 = a3;
  uint64_t v11 = a4[3];
  *(unsigned char *)(a1 + 168) = 0;
  *(void *)(a1 + 160) = v11;
  *(unsigned char *)(a1 + 200) = 0;
  *(unsigned char *)(a1 + 656) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(unsigned char *)(a1 + 256) = 0;
  CLMicroLocationRecorder::CLMicroLocationRecorder((CLMicroLocationRecorder *)(a1 + 664), *(ULDatabase **)(a1 + 128));
  uint64_t v23 = v9;
  uint64_t v20 = a2;
  CLMicroLocationSensorsLogic::CLMicroLocationSensorsLogic((CLMicroLocationSensorsLogic *)(a1 + 712), (CLMicroLocationLogic *)a1, *(ULDatabase **)(a1 + 128));
  uint64_t v12 = *(void *)(a1 + 128);
  char v13 = +[ULDefaultsSingleton shared];
  char v14 = [v13 defaultsDictionary];

  int v15 = [NSString stringWithUTF8String:"ULRapportMonitorMaxEntries"];
  __int16 v16 = [v14 objectForKey:v15];
  if (v16 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    unsigned int v17 = [v16 unsignedIntValue];
  }
  else {
    unsigned int v17 = [&unk_2704F1230 unsignedIntValue];
  }
  unsigned int v18 = v17;

  *(_OWORD *)(a1 + 1464) = 0u;
  *(_OWORD *)(a1 + 1480) = 0u;
  *(_DWORD *)(a1 + 1496) = 1065353216;
  *(void *)(a1 + 1504) = v12;
  *(void *)(a1 + 1512) = 0;
  *(void *)(a1 + 1528) = 0;
  *(void *)(a1 + 1520) = 0;
  *(void *)(a1 + 1552) = v18;
  CLMicroLocationTriggerManager::CLMicroLocationTriggerManager(a1 + 1560, v8);
  CLMiLoServiceManager::CLMiLoServiceManager(a1 + 1768, v23, *(void *)(a1 + 128));
  CLMacAddress::newFromUint64((CLMacAddress *)(a1 + 2016), v19);
  CLMicroLocationLoiManager::CLMicroLocationLoiManager(a1 + 2024, v21, v22);
  *(_OWORD *)(a1 + 2568) = 0u;
  *(void *)(a1 + 2584) = v20;
  *(void *)(a1 + 2600) = 0;
  *(_OWORD *)(a1 + 2608) = 0u;
  operator new();
}

void sub_256337C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CLMicroLocationSensorsLogic *a10, CLMicroLocationRecorder *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  CLMicroLocationSensorsLogic::~CLMicroLocationSensorsLogic(a10);
  CLMicroLocationRecorder::~CLMicroLocationRecorder(a11);
  CLMicroLocationLocalizationController::~CLMicroLocationLocalizationController(v18);
  CLMicroLocationEventLogger::~CLMicroLocationEventLogger(v17);
  if (*(char *)(v16 + 79) < 0) {
    operator delete(*(void **)(v16 + 56));
  }
  _Unwind_Resume(a1);
}

__n128 CLMicroLocationLogic::reloadAnchorDeviceModelAllowedList(CLMicroLocationLogic *this)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v1 = +[ULDefaultsSingleton shared];
  int v2 = [v1 defaultsDictionary];

  int v31 = v2;
  long long v32 = [NSString stringWithUTF8String:"ULAnchorDeviceModelAllowedList"];
  long long v33 = objc_msgSend(v2, "objectForKey:");
  if (v33 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    memset(&v34, 0, sizeof(v34));
    id v28 = v33;
    std::vector<std::string>::reserve(&v34, [v28 count]);
    long long v38 = 0u;
    long long v39 = 0u;
    *(_OWORD *)uint64_t v36 = 0u;
    long long v37 = 0u;
    id v3 = v28;
    uint64_t v4 = [v3 countByEnumeratingWithState:v36 objects:&v41 count:16];
    if (v4)
    {
      uint64_t v5 = *(void *)v37;
      do
      {
        for (uint64_t i = 0; i != v4; ++i)
        {
          if (*(void *)v37 != v5) {
            objc_enumerationMutation(v3);
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, (char *)[*((id *)v36[1] + i) UTF8String]);
          std::vector<std::string>::pointer end = v34.__end_;
          if (v34.__end_ >= v34.__end_cap_.__value_)
          {
            unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v34.__end_ - (char *)v34.__begin_) >> 3);
            unint64_t v10 = v9 + 1;
            if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * (((char *)v34.__end_cap_.__value_ - (char *)v34.__begin_) >> 3) > v10) {
              unint64_t v10 = 0x5555555555555556 * (((char *)v34.__end_cap_.__value_ - (char *)v34.__begin_) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v34.__end_cap_.__value_ - (char *)v34.__begin_) >> 3) >= 0x555555555555555) {
              unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v11 = v10;
            }
            __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v34.__end_cap_;
            if (v11) {
              uint64_t v12 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v34.__end_cap_, v11);
            }
            else {
              uint64_t v12 = 0;
            }
            char v13 = v12 + v9;
            __v.__first_ = v12;
            __v.__begin_ = v13;
            __v.__end_cap_.__value_ = &v12[v11];
            long long v14 = *(_OWORD *)&__p.__begin_;
            v13->__r_.__value_.__r.__words[2] = (std::string::size_type)__p.__end_cap_.__value_;
            *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
            memset(&__p, 0, sizeof(__p));
            __v.__end_ = v13 + 1;
            std::vector<std::string>::__swap_out_circular_buffer(&v34, &__v);
            int v15 = v34.__end_;
            std::__split_buffer<std::string>::~__split_buffer(&__v);
            v34.__end_ = v15;
            if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
              operator delete(__p.__begin_);
            }
          }
          else
          {
            long long v8 = *(_OWORD *)&__p.__begin_;
            v34.__end_->__r_.__value_.__r.__words[2] = (std::string::size_type)__p.__end_cap_.__value_;
            *(_OWORD *)&end->__r_.__value_.__l.__data_ = v8;
            v34.__end_ = end + 1;
          }
        }
        uint64_t v4 = [v3 countByEnumeratingWithState:v36 objects:&v41 count:16];
      }
      while (v4);
    }

    std::vector<std::string>::pointer begin = v34.__begin_;
    v41.__first_ = v34.__begin_;
    long long v29 = *(_OWORD *)&v34.__end_;
    v41.__begin_ = v34.__end_;
    memset(&v34, 0, sizeof(v34));
    v36[0] = &v34;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v36);
  }
  else
  {
    memset(&__v, 0, 24);
    memset(&__p, 0, sizeof(__p));
    std::vector<std::string>::reserve(&__p, 0xDuLL);
    for (uint64_t j = 0; j != 13; ++j)
    {
      std::string::basic_string[abi:ne180100]<0>(v36, _ZGRN10ULSettings14SettingsTraitsINS_28AnchorDeviceModelAllowedListEE12defaultValueE_[j]);
      std::vector<std::string>::pointer v18 = __p.__end_;
      if (__p.__end_ >= __p.__end_cap_.__value_)
      {
        unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
        unint64_t v21 = v20 + 1;
        if (v20 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v21) {
          unint64_t v21 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555) {
          unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v22 = v21;
        }
        v41.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
        if (v22) {
          uint64_t v23 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v22);
        }
        else {
          uint64_t v23 = 0;
        }
        uint64_t v24 = v23 + v20;
        v41.__first_ = v23;
        v41.__begin_ = v24;
        v41.__end_cap_.__value_ = &v23[v22];
        long long v25 = *(_OWORD *)v36;
        v24->__r_.__value_.__r.__words[2] = v37;
        *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
        v36[1] = 0;
        *(void *)&long long v37 = 0;
        v36[0] = 0;
        v41.__end_ = v24 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&__p, &v41);
        __int16 v26 = __p.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&v41);
        __p.__end_ = v26;
        if (SBYTE7(v37) < 0) {
          operator delete(v36[0]);
        }
      }
      else
      {
        long long v19 = *(_OWORD *)v36;
        __p.__end_->__r_.__value_.__r.__words[2] = v37;
        *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
        __p.__end_ = v18 + 1;
      }
    }
    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)&__v);
    *(_OWORD *)&__v.__first_ = *(_OWORD *)&__p.__begin_;
    __v.__end_ = __p.__end_cap_.__value_;
    memset(&__p, 0, sizeof(__p));
    v41.__first_ = (std::__split_buffer<std::string>::pointer)&__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
    std::vector<std::string>::pointer begin = __v.__first_;
    v41.__first_ = __v.__first_;
    long long v29 = *(_OWORD *)&__v.__begin_;
    memset(&__v, 0, 24);
    v36[0] = &__v;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v36);
  }

  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)((char *)this + 2600));
  *((void *)this + 325) = begin;
  *((_OWORD *)this + 163) = v29;
  memset(&v41, 0, 24);
  v36[0] = &v41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v36);
  return result;
}

void sub_25633822C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, void *a9, uint64_t a10, void *a11, uint64_t a12, void *a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t *a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__split_buffer<std::string> *__pa,uint64_t a27,std::__split_buffer<std::string> *a28)
{
  a22 = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);

  _Unwind_Resume(a1);
}

void CLMiLoServiceManager::~CLMiLoServiceManager(CLMiLoServiceManager *this)
{
  *(void *)this = &unk_2704DBBD8;
  int v2 = (void **)((char *)this + 224);
  std::vector<CLMiLoServiceManager::ConnectionRequestParams>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::deque<CLMiLoServiceManager::OutstandingEnableCustomLoiRequest>::~deque[abi:ne180100]((void *)this + 22);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>>>::~__hash_table((uint64_t)this + 136);
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)this + 64, *((void **)this + 9));
  std::__list_imp<CLMiLoService>::clear((uint64_t *)this + 5);
  int v2 = (void **)((char *)this + 16);
  std::vector<std::shared_ptr<CLMiLoService::ModelAndConf>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  void **v2;

  *(void *)this = &unk_2704DBBD8;
  int v2 = (void **)((char *)this + 224);
  std::vector<CLMiLoServiceManager::ConnectionRequestParams>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::deque<CLMiLoServiceManager::OutstandingEnableCustomLoiRequest>::~deque[abi:ne180100]((void *)this + 22);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>>>::~__hash_table((uint64_t)this + 136);
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)this + 64, *((void **)this + 9));
  std::__list_imp<CLMiLoService>::clear((uint64_t *)this + 5);
  int v2 = (void **)((char *)this + 16);
  std::vector<std::shared_ptr<CLMiLoService::ModelAndConf>>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x25A2A6340](this, 0x10A1C40F48E508FLL);
}

void CLMicroLocationTriggerManager::~CLMicroLocationTriggerManager(CLMicroLocationTriggerManager *this)
{
  *(void *)this = &unk_2704E0578;
  int v2 = (char *)this + 16;
  id v3 = (void **)((char *)this + 80);
  std::vector<CLMicroLocationProto::RecordingEvent>::__destroy_vector::operator()[abi:ne180100](&v3);
  id v3 = (void **)((char *)this + 56);
  std::vector<CLMicroLocationProto::RecordingEvent>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v2);
}

{
  char *v2;
  void **v3;

  *(void *)this = &unk_2704E0578;
  int v2 = (char *)this + 16;
  id v3 = (void **)((char *)this + 80);
  std::vector<CLMicroLocationProto::RecordingEvent>::__destroy_vector::operator()[abi:ne180100](&v3);
  id v3 = (void **)((char *)this + 56);
  std::vector<CLMicroLocationProto::RecordingEvent>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v2);
  MEMORY[0x25A2A6340](this, 0x10A1C407A5E7BEFLL);
}

void CLMicroLocationRapportMonitor::~CLMicroLocationRapportMonitor(void **this)
{
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  std::__hash_table<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item::HashItem,CLMicroLocationRapportMonitor::Item::PredicateItem,std::allocator<CLMicroLocationRapportMonitor::Item>>::~__hash_table((uint64_t)this);
}

void CLMicroLocationLocalizationController::~CLMicroLocationLocalizationController(CLMicroLocationLocalizationController *this)
{
  std::__optional_destruct_base<CLMicroLocationLocalizationController::LocalizationInput,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 88);
  int v2 = (void **)((char *)this + 64);
  std::vector<CLMicroLocationLocalizationController::LocalizationRequest>::__destroy_vector::operator()[abi:ne180100](&v2);
  int v2 = (void **)((char *)this + 40);
  std::vector<CLMiLoProtobufWrapper::Measurement>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((unsigned char *)this + 32)) {
    CLMicroLocationProto::AssociatedAccessPointInfo::~AssociatedAccessPointInfo(this);
  }
}

void CLMicroLocationLogic::~CLMicroLocationLogic(CLMicroLocationLogic *this)
{
  *(void *)this = &unk_2704DA268;
  *((void *)this + 1) = &unk_2704DA440;
  *((void *)this + 2) = &unk_2704DA508;
  *((void *)this + 3) = &unk_2704DA568;
  *((void *)this + 4) = &unk_2704DA5F0;
  *((void *)this + 5) = &unk_2704DA628;
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
  }
  int v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v3[0]) = 0;
    _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_DEFAULT, "CLMicroLocationLogic: DTOR", (uint8_t *)v3, 2u);
  }
  CLMicroLocationRapportMonitor::backup((CLMicroLocationLogic *)((char *)this + 1464));
  CLMicroLocationSensorsLogic::backupBleIdentities((CLMicroLocationLogic *)((char *)this + 712));
  v3[0] = (void **)((char *)this + 2600);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v3);

  CLMicroLocationLoiManager::~CLMicroLocationLoiManager((CLMicroLocationLogic *)((char *)this + 2024));
  *((void *)this + 221) = &unk_2704DBBD8;
  v3[0] = (void **)((char *)this + 1992);
  std::vector<CLMiLoServiceManager::ConnectionRequestParams>::__destroy_vector::operator()[abi:ne180100](v3);
  std::deque<CLMiLoServiceManager::OutstandingEnableCustomLoiRequest>::~deque[abi:ne180100]((void *)this + 243);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>>>::~__hash_table((uint64_t)this + 1904);
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)this + 1832, *((void **)this + 230));
  std::__list_imp<CLMiLoService>::clear((uint64_t *)this + 226);
  v3[0] = (void **)((char *)this + 1784);
  std::vector<std::shared_ptr<CLMiLoService::ModelAndConf>>::__destroy_vector::operator()[abi:ne180100](v3);
  *((void *)this + 195) = &unk_2704E0578;
  v3[0] = (void **)((char *)this + 1640);
  std::vector<CLMicroLocationProto::RecordingEvent>::__destroy_vector::operator()[abi:ne180100](v3);
  v3[0] = (void **)((char *)this + 1616);
  std::vector<CLMicroLocationProto::RecordingEvent>::__destroy_vector::operator()[abi:ne180100](v3);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)this + 1576);
  if (*((char *)this + 1535) < 0) {
    operator delete(*((void **)this + 189));
  }
  std::__hash_table<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item::HashItem,CLMicroLocationRapportMonitor::Item::PredicateItem,std::allocator<CLMicroLocationRapportMonitor::Item>>::~__hash_table((uint64_t)this + 1464);
  CLMicroLocationSensorsLogic::~CLMicroLocationSensorsLogic((CLMicroLocationLogic *)((char *)this + 712));
  CLMicroLocationRecorder::~CLMicroLocationRecorder((CLMicroLocationLogic *)((char *)this + 664));
  std::__optional_destruct_base<CLMicroLocationLocalizationController::LocalizationInput,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 256);
  v3[0] = (void **)((char *)this + 232);
  std::vector<CLMicroLocationLocalizationController::LocalizationRequest>::__destroy_vector::operator()[abi:ne180100](v3);
  v3[0] = (void **)((char *)this + 208);
  std::vector<CLMiLoProtobufWrapper::Measurement>::__destroy_vector::operator()[abi:ne180100](v3);
  if (*((unsigned char *)this + 200)) {
    CLMicroLocationProto::AssociatedAccessPointInfo::~AssociatedAccessPointInfo((CLMicroLocationLogic *)((char *)this + 168));
  }
  CLMicroLocationEventLogger::~CLMicroLocationEventLogger((CLMicroLocationLogic *)((char *)this + 136));
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
}

{
  uint64_t vars8;

  CLMicroLocationLogic::~CLMicroLocationLogic(this);
  JUMPOUT(0x25A2A6340);
}

void non-virtual thunk to'CLMicroLocationLogic::~CLMicroLocationLogic(CLMicroLocationLogic *this)
{
}

{
  CLMicroLocationLogic::~CLMicroLocationLogic((CLMicroLocationLogic *)((char *)this - 16));
}

{
  CLMicroLocationLogic::~CLMicroLocationLogic((CLMicroLocationLogic *)((char *)this - 24));
}

{
  CLMicroLocationLogic::~CLMicroLocationLogic((CLMicroLocationLogic *)((char *)this - 32));
}

{
  CLMicroLocationLogic::~CLMicroLocationLogic((CLMicroLocationLogic *)((char *)this - 40));
}

{
  uint64_t vars8;

  CLMicroLocationLogic::~CLMicroLocationLogic((CLMicroLocationLogic *)((char *)this - 8));
  JUMPOUT(0x25A2A6340);
}

{
  uint64_t vars8;

  CLMicroLocationLogic::~CLMicroLocationLogic((CLMicroLocationLogic *)((char *)this - 16));
  JUMPOUT(0x25A2A6340);
}

{
  uint64_t vars8;

  CLMicroLocationLogic::~CLMicroLocationLogic((CLMicroLocationLogic *)((char *)this - 24));
  JUMPOUT(0x25A2A6340);
}

{
  uint64_t vars8;

  CLMicroLocationLogic::~CLMicroLocationLogic((CLMicroLocationLogic *)((char *)this - 32));
  JUMPOUT(0x25A2A6340);
}

{
  uint64_t vars8;

  CLMicroLocationLogic::~CLMicroLocationLogic((CLMicroLocationLogic *)((char *)this - 40));
  JUMPOUT(0x25A2A6340);
}

void *CLMicroLocationLogic::setWifiLink(uint64_t a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 712;
  std::__function::__value_func<ULWiFiScanProvider * ()(objc_object  {objcproto26ULWiFiScanProviderDelegate}*)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  CLMicroLocationSensorsLogic::setWifiLink(v2, (uint64_t)v4);
  return std::__function::__value_func<ULWiFiScanProvider * ()(objc_object  {objcproto26ULWiFiScanProviderDelegate}*)>::~__value_func[abi:ne180100](v4);
}

void sub_2563389A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<ULWiFiScanProvider * ()(objc_object  {objcproto26ULWiFiScanProviderDelegate}*)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationLogic::setBleLink(uint64_t a1, uint64_t a2)
{
  return CLMicroLocationSensorsLogic::setBleLink(a1 + 712, a2);
}

uint64_t CLMicroLocationLogic::setUwbLink(uint64_t a1, uint64_t a2)
{
  return CLMicroLocationSensorsLogic::setUwbLink(a1 + 712, a2);
}

void *CLMicroLocationLogic::setOdometryLink(uint64_t a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 712;
  std::__function::__value_func<ULOdometryProvider * ()(objc_object  {objcproto26ULOdometryProviderDelegate}*)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  CLMicroLocationSensorsLogic::setOdometryLink(v2, (uint64_t)v4);
  return std::__function::__value_func<ULOdometryProvider * ()(objc_object  {objcproto26ULOdometryProviderDelegate}*)>::~__value_func[abi:ne180100](v4);
}

void sub_256338A38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<ULOdometryProvider * ()(objc_object  {objcproto26ULOdometryProviderDelegate}*)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationLogic::setMotionLink(uint64_t a1, uint64_t a2)
{
  return CLMicroLocationSensorsLogic::setMotionLink(a1 + 712, a2);
}

uint64_t CLMicroLocationLogic::setStopMotionLink(uint64_t a1, uint64_t a2)
{
  return CLMicroLocationSensorsLogic::setStopMotionLink(a1 + 712, a2);
}

uint64_t CLMicroLocationLogic::setCustomLoiRecordingFenceLink(uint64_t a1, uint64_t a2)
{
  return CLMicroLocationSensorsLogic::setCustomLoiRecordingFenceLink(a1 + 712, a2);
}

void CLMicroLocationLogic::setLoiBridge(id *this, CLMicroLocationLoiBridge *a2)
{
}

void CLMicroLocationLogic::refreshSettings(CLMicroLocationLogic *this)
{
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
  }
  uint64_t v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v3 = 0;
    _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_DEFAULT, "CLMicroLocationLogic: Settings updated so updating wifi strategies, allowed anchor models, and checking enabled flags", v3, 2u);
  }
  CLMicroLocationLogic::reloadAnchorDeviceModelAllowedList(this);
  CLMicroLocationLogic::updateEnabled(this);
}

void CLMicroLocationLogic::updateEnabled(CLMicroLocationLogic *this)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  int v2 = *((unsigned __int8 *)this + 48);
  id v3 = +[ULDefaultsSingleton shared];
  uint64_t v4 = [v3 defaultsDictionary];

  uint64_t v5 = [NSString stringWithUTF8String:"ULEnabled"];
  uint64_t v6 = [v4 objectForKey:v5];
  if (v6 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    int v7 = [v6 BOOLValue];
  }
  else {
    int v7 = [MEMORY[0x263EFFA88] BOOLValue];
  }
  int v8 = v7;

  unsigned __int8 v9 = *((unsigned char *)this + 122);
  unsigned __int8 v32 = v9;
  unsigned __int8 v10 = *((unsigned char *)this + 123);
  unsigned __int8 v33 = v10;
  unsigned __int8 v34 = *((unsigned char *)this + 50);
  int v11 = *((unsigned __int8 *)this + 51);
  LOBYTE(v35) = *((unsigned char *)this + 51);
  int v12 = *((unsigned __int8 *)this + 52);
  HIBYTE(v35) = *((unsigned char *)this + 52);
  int v13 = *((unsigned __int8 *)this + 124);
  if (v34) {
    int v14 = v8;
  }
  else {
    int v14 = 0;
  }
  if (!v11) {
    int v14 = 0;
  }
  if (!v12) {
    int v14 = 0;
  }
  if (v10 | v9) {
    int v15 = 0;
  }
  else {
    int v15 = v14;
  }
  unsigned __int8 v36 = *((unsigned char *)this + 124);
  if (v13) {
    int v16 = v15;
  }
  else {
    int v16 = 0;
  }
  *((unsigned char *)this + 48) = v16;
  CLMiLoServiceManager::setMiLoEnabled((CLMicroLocationLogic *)((char *)this + 1768), v16, (uint64_t)&v32);
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
  }
  unsigned int v17 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67241984;
    int v39 = v8;
    __int16 v40 = 1026;
    int v41 = v34;
    __int16 v42 = 1026;
    int v43 = v35;
    __int16 v44 = 1026;
    int v45 = HIBYTE(v35);
    __int16 v46 = 1026;
    int v47 = v32;
    __int16 v48 = 1026;
    int v49 = v33;
    __int16 v50 = 1026;
    int v51 = v36;
    __int16 v52 = 1026;
    int v53 = v16;
    _os_log_impl(&dword_25631F000, v17, OS_LOG_TYPE_DEFAULT, "Enabled state: microlocations defaults enabled: %{public}d; location services enabled: %{public}d; significant loc"
      "ations enabled: %{public}d; platform supported %{public}d; LowPowerMode %{public}d; AirplaneMode %{public}d; buddy"
      "Complete %{public}d; overall enabled: %{public}d",
      buf,
      0x32u);
  }
  if ((v16 & 1) != 0 || !v2)
  {
    if (!v2 && v16)
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
      }
      long long v19 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_25631F000, v19, OS_LOG_TYPE_DEFAULT, "MicroLocations are now re-enabled. Clients should begin getting notifications again", buf, 2u);
      }
      ULDatabase::connectIfNecessary(*((ULDatabase **)this + 16));
    }
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
    }
    std::vector<std::string>::pointer v18 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_25631F000, v18, OS_LOG_TYPE_DEFAULT, "MicroLocations have been disabled. Clients will no longer get notifications until we are enabled again.", buf, 2u);
    }
  }
  if ((v2 != 0) != v16)
  {
    CLMicroLocationProto::EnabledStateUpdate::EnabledStateUpdate((uint64_t)v23);
    char v24 = v8;
    unsigned __int8 v25 = v34;
    __int16 v26 = v35;
    unsigned __int8 v27 = v32;
    unsigned __int8 v30 = v33;
    unsigned __int8 v29 = v36;
    v31 |= 0x1FEu;
    char v28 = v16;
    int v22 = 0;
    boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v22);
    *(void *)&long long v37 = boost::uuids::random_generator_pure::operator()((uint64_t)&v22);
    *((void *)&v37 + 1) = v20;
    double v21 = cl::chrono::CFAbsoluteTimeClock::now();
    CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::EnabledStateUpdate>(&v37, v23, (uint64_t)buf, v21);
    (*(void (**)(CLMicroLocationLogic *, uint8_t *))(*(void *)this + 120))(this, buf);
    CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)&v48);
    boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v22);
    CLMicroLocationProto::EnabledStateUpdate::~EnabledStateUpdate((CLMicroLocationProto::EnabledStateUpdate *)v23);
  }
}

void sub_256338EF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationLogic::logState(CLMicroLocationLogic *this)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
  }
  int v2 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = (void *)((char *)this + 56);
    if (*((char *)this + 79) < 0) {
      id v3 = (void *)*v3;
    }
    int v4 = *((unsigned __int8 *)this + 48);
    uint64_t v5 = (char *)operator new(0x28uLL);
    *(void *)(v5 + 29) = 0;
    *(_OWORD *)uint64_t v5 = 0u;
    *((_OWORD *)v5 + 1) = 0u;
    boost::uuids::to_chars<char *>((uint64_t)this + 80, v5);
    int v6 = *((unsigned __int8 *)this + 50);
    int v7 = *((unsigned __int8 *)this + 51);
    CLMicroLocationUtils::scanActivityToString(*((unsigned char *)this + 53), __p);
    if (v22 >= 0) {
      int v8 = __p;
    }
    else {
      int v8 = (void **)__p[0];
    }
    int v9 = *((_DWORD *)this + 25);
    int v10 = *((_DWORD *)this + 26);
    int v11 = *((unsigned __int8 *)this + 108);
    int v12 = *((unsigned __int8 *)this + 125);
    int v13 = *((unsigned __int8 *)this + 120);
    int v14 = *((_DWORD *)this + 28);
    int v15 = *((_DWORD *)this + 29);
    int v16 = *((unsigned __int8 *)this + 121);
    int v17 = *((unsigned __int8 *)this + 122);
    int v18 = *((unsigned __int8 *)this + 123);
    int v19 = *((unsigned __int8 *)this + 124);
    BOOL v20 = *((unsigned char *)this + 126) == 0;
    *(_DWORD *)buf = 68293635;
    int v24 = 0;
    __int16 v25 = 2082;
    __int16 v26 = "";
    __int16 v27 = 1026;
    int v28 = v4;
    __int16 v29 = 2081;
    unsigned __int8 v30 = v3;
    __int16 v31 = 2081;
    unsigned __int8 v32 = v5;
    __int16 v33 = 1026;
    int v34 = v6;
    __int16 v35 = 1026;
    int v36 = v7;
    __int16 v37 = 2081;
    long long v38 = v8;
    __int16 v39 = 1026;
    int v40 = v9;
    __int16 v41 = 1026;
    int v42 = v10;
    __int16 v43 = 1026;
    int v44 = v11;
    __int16 v45 = 1026;
    int v46 = v12;
    __int16 v47 = 1026;
    int v48 = v13;
    __int16 v49 = 1026;
    int v50 = v14;
    __int16 v51 = 1026;
    int v52 = v15;
    __int16 v53 = 1026;
    int v54 = v16;
    __int16 v55 = 1026;
    int v56 = v17;
    __int16 v57 = 1026;
    int v58 = v18;
    __int16 v59 = 1026;
    int v60 = v19;
    __int16 v61 = 1026;
    BOOL v62 = v20;
    _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationLogic State\", \"enabled\":%{public}hhd, \"LOI Type\":%{private, location:escape_only}s, \"LOI ID\":%{private, location:escape_only}s, \"locationServicesEnabled\":%{public}hhd, \"significantLocationsEnabled\":%{public}hhd, \"ScanActivity\":%{private, location:escape_only}s, \"Localizing Counter\":%{public}d, \"Recording Counter\":%{public}d, \"displayOn\":%{public}hhd, \"isOnLockScreen\":%{public}hhd, \"isWiFiErrorRetryEnabled\":%{public}hhd, \"WiFi Error Retry Counter\":%{public}d, \"WiFi Error Retry Disabled Period Counter\":%{public}d, \"isLowNumberOfObservation\":%{public}hhd, \"isLowPowerMode\":%{public}hhd, \"isAirplaneMode\":%{public}hhd, \"isBuddyComplete\":%{public}hhd, \"isBluetoothDisabled\":%{public}hhd}", buf, 0x8Au);
    if (v22 < 0) {
      operator delete(__p[0]);
    }
    operator delete(v5);
  }

  CLMiLoServiceManager::logState((CLMicroLocationLogic *)((char *)this + 1768));
}

void sub_2563391B8(_Unwind_Exception *a1)
{
  operator delete(v2);

  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationLogic::getAnchorDeviceModelAllowedList(CLMicroLocationLogic *this)
{
  return (uint64_t)this + 2600;
}

uint64_t CLMicroLocationLogic::donateTruthTagLabelForRecordingEventsBetweenDates(uint64_t a1, const std::string *a2, void *a3, void *a4, void *a5)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v9 = a3;
  id v10 = a4;
  id v11 = a5;
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
  }
  int v12 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v13 = a2;
    }
    else {
      int v13 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    }
    v16[0] = 68289282;
    v16[1] = 0;
    __int16 v17 = 2082;
    int v18 = "";
    __int16 v19 = 2082;
    BOOL v20 = v13;
    _os_log_impl(&dword_25631F000, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationLogic: client request donate truth label (time window based)\", \"client\":%{public, location:escape_only}s}", (uint8_t *)v16, 0x1Cu);
  }
  uint64_t v14 = CLMicroLocationRecorder::recordTruthLabelBetweenDates(a1 + 664, a2, v9, v10, v11);

  return v14;
}

void sub_256339344(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationLogic::createInternalLocalizationEvent@<X0>(uint64_t a1@<X8>)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  int v9 = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v9);
  uint64_t v10 = boost::uuids::random_generator_pure::operator()((uint64_t)&v9);
  uint64_t v11 = v4;
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v9);
  v5.n128_f64[0] = CLMicroLocationProto::ReceivedEventAction::ReceivedEventAction((CLMicroLocationProto::ReceivedEventAction *)a1);
  *(_DWORD *)(a1 + 44) |= 4u;
  uint64_t v6 = MEMORY[0x263F8C740];
  if (*(void *)(a1 + 16) == MEMORY[0x263F8C740]) {
    operator new();
  }
  MEMORY[0x25A2A6080](v5);
  if (!CLMicroLocationProto::ReceivedEventActionType_IsValid((CLMicroLocationProto *)1)) {
    __assert_rtn("set_receivedeventactiontype", "microlocation.pb.h", 13294, "::CLMicroLocationProto::ReceivedEventActionType_IsValid(value)");
  }
  int v7 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 12) = 1;
  *(_DWORD *)(a1 + 44) = v7 | 0xA;
  if (*(void *)(a1 + 24) == v6) {
    operator new();
  }
  return MEMORY[0x25A2A6090]();
}

void sub_2563394BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10)
{
}

uint64_t CLMicroLocationLogic::logEvent(CLMicroLocationLogic *this, const Entry *a2)
{
  return (*(uint64_t (**)(void, const Entry *))(**((void **)this + 323) + 72))(*((void *)this + 323), a2);
}

uint64_t non-virtual thunk to'CLMicroLocationLogic::logEvent(CLMicroLocationLogic *this, const Entry *a2)
{
  return (*(uint64_t (**)(void, const Entry *))(**((void **)this + 322) + 72))(*((void *)this + 322), a2);
}

{
  return (*(uint64_t (**)(void, const Entry *))(**((void **)this + 321) + 72))(*((void *)this + 321), a2);
}

void CLMicroLocationLogic::onStartRecordingOrLocalizing(uint64_t a1, uint64_t a2, char a3, uint64_t a4, void *a5)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  id v8 = a5;
  if (*(unsigned char *)(a1 + 48))
  {
    if ((a3 - 3) > 0xFDu)
    {
      CLMicroLocationProtobufHelper::getTriggerUuidFromEvent(a2, &v24);
      if (*(char *)(a1 + 79) < 0) {
        std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)(a1 + 56), *(void *)(a1 + 64));
      }
      else {
        std::string v14 = *(std::string *)(a1 + 56);
      }
      long long v22 = v24;
      char v23 = v25;
      CLMicroLocationRecorder::start(a1 + 664, (uint64_t)&v14);
    }
    uint64_t v12 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    {
      std::vector<std::string> __p = (void *)68289539;
      __int16 v16 = 2082;
      __int16 v17 = "";
      __int16 v18 = 2082;
      __int16 v19 = "assert";
      __int16 v20 = 2081;
      uint64_t v21 = "scanActivity == ScanActivity::Recording || scanActivity == ScanActivity::Localizing";
      _os_log_impl(&dword_25631F000, v12, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Must contain valid scan activity\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", (uint8_t *)&__p, 0x26u);
    }

    int v13 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_signpost_enabled(v13))
    {
      std::vector<std::string> __p = (void *)68289539;
      __int16 v16 = 2082;
      __int16 v17 = "";
      __int16 v18 = 2082;
      __int16 v19 = "assert";
      __int16 v20 = 2081;
      uint64_t v21 = "scanActivity == ScanActivity::Recording || scanActivity == ScanActivity::Localizing";
      _os_signpost_emit_with_name_impl(&dword_25631F000, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Must contain valid scan activity", "{\"msg%{public}.0s\":\"Must contain valid scan activity\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", (uint8_t *)&__p, 0x26u);
    }

    uint64_t v11 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      std::vector<std::string> __p = (void *)68289539;
      __int16 v16 = 2082;
      __int16 v17 = "";
      __int16 v18 = 2082;
      __int16 v19 = "assert";
      __int16 v20 = 2081;
      uint64_t v21 = "scanActivity == ScanActivity::Recording || scanActivity == ScanActivity::Localizing";
      _os_log_impl(&dword_25631F000, v11, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Must contain valid scan activity\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", (uint8_t *)&__p, 0x26u);
    }
  }
  else
  {
    int v9 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
    {
      std::vector<std::string> __p = (void *)68289539;
      __int16 v16 = 2082;
      __int16 v17 = "";
      __int16 v18 = 2082;
      __int16 v19 = "assert";
      __int16 v20 = 2081;
      uint64_t v21 = "fState.enabled()";
      _os_log_impl(&dword_25631F000, v9, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"MiLo must be enabled\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", (uint8_t *)&__p, 0x26u);
    }

    uint64_t v10 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_signpost_enabled(v10))
    {
      std::vector<std::string> __p = (void *)68289539;
      __int16 v16 = 2082;
      __int16 v17 = "";
      __int16 v18 = 2082;
      __int16 v19 = "assert";
      __int16 v20 = 2081;
      uint64_t v21 = "fState.enabled()";
      _os_signpost_emit_with_name_impl(&dword_25631F000, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "MiLo must be enabled", "{\"msg%{public}.0s\":\"MiLo must be enabled\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", (uint8_t *)&__p, 0x26u);
    }

    uint64_t v11 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      std::vector<std::string> __p = (void *)68289539;
      __int16 v16 = 2082;
      __int16 v17 = "";
      __int16 v18 = 2082;
      __int16 v19 = "assert";
      __int16 v20 = 2081;
      uint64_t v21 = "fState.enabled()";
      _os_log_impl(&dword_25631F000, v11, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"MiLo must be enabled\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", (uint8_t *)&__p, 0x26u);
    }
  }

  abort_report_np();
  __break(1u);
}

void sub_256339BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::LocalizeWithRecordingMeasurements>()
{
  os_log_t v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  int v2 = [NSString stringWithUTF8String:"ULLocalizeWithRecordingMeasurements"];
  id v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 BOOLValue];
  }
  else {
    uint64_t v4 = [MEMORY[0x263EFFA80] BOOLValue];
  }
  uint64_t v5 = v4;

  return v5;
}

void sub_256339D04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createRecordingEvent<CLMicroLocationProto::ReceivedEventAction>(CLMicroLocationProto::RecordingEvent *a1@<X0>, CLMicroLocationProto *a2@<X1>, char a3@<W2>, char a4@<W3>, CLMicroLocationProto *a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)a6);
  unsigned int v14 = *((_DWORD *)a1 + 2);
  if (!CLMicroLocationProto::EventType_IsValid((CLMicroLocationProto *)v14))
  {
    __int16 v17 = "::CLMicroLocationProto::EventType_IsValid(value)";
    int v18 = 20192;
    __int16 v19 = "set_eventtype";
    goto LABEL_10;
  }
  int v15 = *(_DWORD *)(a6 + 140);
  *(_DWORD *)(a6 + 72) = v14;
  *(double *)(a6 + 8) = a7;
  *(unsigned char *)(a6 + 77) = a3;
  *(_DWORD *)(a6 + 140) = v15 | 0x2803;
  *(unsigned char *)(a6 + 76) = a4;
  if (!CLMicroLocationProto::ConfidenceLevel_IsValid(a5))
  {
    __int16 v17 = "::CLMicroLocationProto::ConfidenceLevel_IsValid(value)";
    int v18 = 20701;
    __int16 v19 = "set_confidencelevel";
    goto LABEL_10;
  }
  *(_DWORD *)(a6 + 140) |= 0x4000u;
  *(_DWORD *)(a6 + 120) = a5;
  if (((unint64_t)a2 & 0xFF00000000) != 0)
  {
    if (CLMicroLocationProto::MotionState_IsValid(a2))
    {
      *(_DWORD *)(a6 + 140) |= 0x20000u;
      *(_DWORD *)(a6 + 124) = a2;
      goto LABEL_6;
    }
    __int16 v17 = "::CLMicroLocationProto::MotionState_IsValid(value)";
    int v18 = 20793;
    __int16 v19 = "set_motionstate";
LABEL_10:
    __assert_rtn(v19, "microlocation.pb.h", v18, v17);
  }
LABEL_6:
  CLMicroLocationProtobufHelper::setSpecificRecordingEvent((CLMicroLocationProtobufHelper *)a6, a1, v16);
}

void sub_256339E70(_Unwind_Exception *a1)
{
  CLMicroLocationProto::RecordingEvent::~RecordingEvent(v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'CLMicroLocationLogic::onStartRecordingOrLocalizing(uint64_t a1, uint64_t a2, char a3, uint64_t a4, void *a5)
{
}

void CLMicroLocationLogic::onRequestInProgress(CLMicroLocationLogic *this, const CLMicroLocationProto::RecordingEvent *a2, int a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  CLMicroLocationRecorder::recordEvent((CLMicroLocationLogic *)((char *)this + 664), a2);
  if (a3)
  {
    CLMicroLocationTriggerManager::getCurrentLocalizationUUID((CLMicroLocationLogic *)((char *)this + 1560), (__n128 *)&v5);
    if (v6) {
      CLMicroLocationLocalizationController::onStopMotion((CLMicroLocationLogic *)((char *)this + 168), &v5);
    }
  }
}

void non-virtual thunk to'CLMicroLocationLogic::onRequestInProgress(CLMicroLocationLogic *this, const CLMicroLocationProto::RecordingEvent *a2, int a3)
{
}

void CLMicroLocationLogic::onRequestPending(CLMicroLocationLogic *this, const CLMicroLocationProto::RecordingEvent *a2)
{
}

void non-virtual thunk to'CLMicroLocationLogic::onRequestPending(CLMicroLocationLogic *this, const CLMicroLocationProto::RecordingEvent *a2)
{
}

void CLMicroLocationLogic::onRequestInterrupted(uint64_t a1, int a2)
{
  CLMicroLocationSensorsLogic::onRecordingOrLocalizingInterrupted((CLMicroLocationSensorsLogic *)(a1 + 712));
  if (a2 == 2)
  {
    v7[0] = 0;
    v7[1] = 0;
    memset(v5, 0, sizeof(v5));
    char v6 = (uint64_t *)v7;
    int v8 = 3;
    int v4 = 3;
    std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__emplace_unique_key_args<CLMicroLocationRecordingCompletionMetaInformation::RecordingError,CLMicroLocationRecordingCompletionMetaInformation::RecordingError>(&v6, &v4, &v4);
    CLMicroLocationLogic::stopRecording(a1, (uint64_t)v5);
    std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&v6, v7[0]);
  }
  else
  {
    CLMicroLocationLogic::stopLocalizing(a1, 2u);
  }
}

void sub_256339FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy(v14, a14);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationLogic::stopRecording(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  CLMicroLocationSensorsLogic::onRecordingOrLocalizationStop((CLMicroLocationSensorsLogic *)(a1 + 712));
  CLMicroLocationLogic::ignoreSensorMeasurementsIfNecessary((CLMicroLocationLogic *)a1);
  if (CLMicroLocationSensorsLogic::State::receivedWiFiScanError((CLMicroLocationSensorsLogic::State *)(a1 + 720)))
  {
    *(_DWORD *)buf = 0;
    std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__emplace_unique_key_args<CLMicroLocationRecordingCompletionMetaInformation::RecordingError,CLMicroLocationRecordingCompletionMetaInformation::RecordingError>((uint64_t **)(a2 + 24), (int *)buf, buf);
  }
  if (*(_DWORD *)(a2 + 48) == 4)
  {
    CLMicroLocationFingerprintConfiguration::getRecordingConfigurationFromSettings((uint64_t)buf);
    CLMicroLocationRecorder::updateFingerprintMetaInfoOfCurrentRecording(a1 + 664, (unint64_t *)buf, a2);
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&v12);
  }
  if (ULSettings::get<ULSettings::LocalizeWithRecordingMeasurements>())
  {
    CLMicroLocationTriggerManager::getCurrentLocalizationUUID((CLMicroLocationTriggerManager *)(a1 + 1560), (__n128 *)&v19);
    uuid v17 = v19;
    char v18 = v20;
    *(void *)buf = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    memset(v9, 0, sizeof(v9));
    CLMicroLocationLogic::updateConfidenceAndReasonsOfLocalizationRequestIfNeeded(a1, (uint64_t)&v17, (uint64_t *)buf, (uint64_t *)v9, 0);
    std::vector<std::string> __p = 0;
    int v15 = 0;
    uint64_t v16 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    *(void *)buf = 0;
    unsigned int v13 = 0;
    if (!v20
      || (ModelsVector = (uint64_t **)CLMiLoServiceManager::getModelsVector((CLMiLoServiceManager *)(a1 + 1768)),
          CLMicroLocationLocalizationController::stop((void *)(a1 + 168), &v19, ModelsVector, (uint64_t)buf),
          !v20))
    {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    CLMiLoServiceManager::ingestLocalizationResults((CLMiLoServiceManager *)(a1 + 1768), (const CLMiLoServiceManager::LocalizationResults *)buf, v19);
    CLMicroLocationRecorder::setConfidenceAndReasons(a1 + 664, v13, (int **)&__p);
    if (__p)
    {
      int v15 = __p;
      operator delete(__p);
    }
    v9[0] = (void **)buf;
    std::vector<CLMiLoServiceManager::LocalizationResultsPerModel>::__destroy_vector::operator()[abi:ne180100](v9);
  }
  CLMicroLocationRecorder::stop((CLMicroLocationRecorder *)(a1 + 664));
  *(_DWORD *)(a1 + 104) = 0;
  CLMicroLocationLogic::State::clearScanActivity((CLMicroLocationLogic::State *)(a1 + 48));
  if (onceToken_MicroLocationQE_Default != -1) {
    dispatch_once(&onceToken_MicroLocationQE_Default, &__block_literal_global_742);
  }
  uuid v5 = logObject_MicroLocationQE_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocationQE_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_25631F000, v5, OS_LOG_TYPE_DEFAULT, "Recording stopped", buf, 2u);
  }
  CLMiLoServiceManager::didRecordingStop(a1 + 1768, a2);
  CLMicroLocationTriggerManager::stopTrigger(a1 + 1560, *(_DWORD *)(a2 + 48) != 2, (CLMicroLocationProto *)5);
  unsigned int v6 = *(_DWORD *)(a2 + 48) - 1;
  if (v6 > 3) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = off_2653F91B0[v6];
  }
  return (*(uint64_t (**)(void, __CFString *))(**(void **)(a1 + 2584) + 80))(*(void *)(a1 + 2584), v7);
}

void sub_25633A27C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void CLMicroLocationLogic::stopLocalizing(uint64_t a1, unsigned int a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  CLMicroLocationSensorsLogic::onRecordingOrLocalizationStop((CLMicroLocationSensorsLogic *)(a1 + 712));
  CLMicroLocationTriggerManager::getCurrentLocalizationUUID((CLMicroLocationTriggerManager *)(a1 + 1560), (__n128 *)&v31);
  CLMicroLocationLogic::ignoreSensorMeasurementsIfNecessary((CLMicroLocationLogic *)a1);
  uuid v29 = v31;
  char v30 = v32;
  *(void *)buf = 0;
  long long v28 = 0uLL;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  CLMicroLocationLogic::updateConfidenceAndReasonsOfLocalizationRequestIfNeeded(a1, (uint64_t)&v29, (uint64_t *)buf, &v20, a2);
  std::vector<std::string> __p = 0;
  char v25 = 0;
  uint64_t v26 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v20 = 0;
  unsigned int v23 = 0;
  if (!v32) {
    goto LABEL_30;
  }
  ModelsVector = (uint64_t **)CLMiLoServiceManager::getModelsVector((CLMiLoServiceManager *)(a1 + 1768));
  CLMicroLocationLocalizationController::stop((void *)(a1 + 168), &v31, ModelsVector, (uint64_t)&v20);
  CLMicroLocationRecorder::setConfidenceAndReasons(a1 + 664, v23, (int **)&__p);
  *(_DWORD *)(a1 + 100) = 0;
  CLMicroLocationLogic::State::clearScanActivity((CLMicroLocationLogic::State *)(a1 + 48));
  if (onceToken_MicroLocationQE_Default != -1) {
    dispatch_once(&onceToken_MicroLocationQE_Default, &__block_literal_global_742);
  }
  uuid v5 = logObject_MicroLocationQE_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocationQE_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_25631F000, v5, OS_LOG_TYPE_DEFAULT, "Localization stopped", buf, 2u);
  }
  BOOL isCurrentTriggerMotionTrigger = CLMicroLocationTriggerManager::isCurrentTriggerMotionTrigger((CLMicroLocationTriggerManager *)(a1 + 1560));
  int isCurrentlyInMotion = CLMicroLocationTriggerManager::isCurrentlyInMotion((CLMicroLocationTriggerManager *)(a1 + 1560));
  if (CLMicroLocationLogic::shouldRescheduleLocalization((CLMicroLocationLogic *)a1, (const CLMiLoServiceManager::LocalizationResults *)&v20, isCurrentTriggerMotionTrigger, isCurrentlyInMotion))
  {
    if (*(unsigned char *)(a1 + 49) && !CLMicroLocationUtils::stopReasonIndicatesMiLoDisabled(a2))
    {
      int v9 = +[ULDefaultsSingleton shared];
      uint64_t v10 = [v9 defaultsDictionary];

      uint64_t v11 = [NSString stringWithUTF8String:"ULLocalizationRescheduleDelay"];
      uint64_t v12 = [v10 objectForKey:v11];
      if (v12 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
        [v12 doubleValue];
      }
      else {
        [&unk_2704F11B8 doubleValue];
      }
      double v14 = v13;

      double v15 = *(double *)(a1 + 1672);
      double v16 = cl::chrono::CFAbsoluteTimeClock::now();
      double v17 = 0.0;
      if (v16 - v15 < v14) {
        double v17 = (v14 - (v16 - v15)) * 1000.0;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 296))(a1, (uint64_t)v17);
      CLMicroLocationLogic::createLocalizationTriggerWithOptAssociatedAccessPointInfo(a1, (uint64_t)"InternalClientLogic", 0, (uint64_t)buf, v16);
      CLMicroLocationTriggerManager::expectRescheduledTrigger((unsigned char *)(a1 + 1560), (const CLMicroLocationProto::RecordingEvent *)buf, 1);
      CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)buf);
    }
    else
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
      }
      int v8 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&uint8_t buf[4] = 0;
        LOWORD(v28) = 2082;
        *(void *)((char *)&v28 + 2) = "";
        _os_log_impl(&dword_25631F000, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"decided to reschedule a localization but not rescheduling because not spectating\"}", buf, 0x12u);
      }
    }
  }
  CLMicroLocationRecorder::stop((CLMicroLocationRecorder *)(a1 + 664));
  if (!v32) {
LABEL_30:
  }
    std::__throw_bad_optional_access[abi:ne180100]();
  CLMiLoServiceManager::ingestLocalizationResults((CLMiLoServiceManager *)(a1 + 1768), (const CLMiLoServiceManager::LocalizationResults *)&v20, v31);
  BOOL v18 = CLMicroLocationUtils::stopReasonIndicatesMiLoDisabled(a2);
  if ((CLMicroLocationTriggerManager::stopTrigger(a1 + 1560, !v18, (CLMicroLocationProto *)5) & 1) == 0)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
    }
    uuid v19 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_25631F000, v19, OS_LOG_TYPE_DEFAULT, "Cannot serve queued record requests because we're no longer enabled", buf, 2u);
    }
    (*(void (**)(void, __CFString *))(**(void **)(a1 + 2584) + 80))(*(void *)(a1 + 2584), @"requestMicroLocationRecordingScan failed internally, MicroLocation is not enabled");
  }
  if (__p)
  {
    char v25 = __p;
    operator delete(__p);
  }
  *(void *)buf = &v20;
  std::vector<CLMiLoServiceManager::LocalizationResultsPerModel>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_25633A750(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  CLMiLoServiceManager::LocalizationResults::~LocalizationResults((CLMiLoServiceManager::LocalizationResults *)va);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'CLMicroLocationLogic::onRequestInterrupted(uint64_t a1, int a2)
{
}

void CLMicroLocationLogic::updateLocalizationConfidenceAndReasonsIfNeeded(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  CLMicroLocationTriggerManager::getCurrentLocalizationUUID((CLMicroLocationTriggerManager *)(a1 + 1560), &v14);
  if (v15)
  {
    __n128 v12 = v14;
    char v13 = v15;
    CLMicroLocationLogic::updateConfidenceAndReasonsOfLocalizationRequestIfNeeded(a1, (uint64_t)&v12, a2, a3, 0);
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
    }
    unsigned int v6 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      int v8 = 68289026;
      int v9 = 0;
      __int16 v10 = 2082;
      uint64_t v11 = "";
      _os_log_impl(&dword_25631F000, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"updateLocalizationConfidenceAndReasonsIfNeeded, no current localization\"}", (uint8_t *)&v8, 0x12u);
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
    }
    uint64_t v7 = logObject_MicroLocation_Default;
    if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
    {
      int v8 = 68289026;
      int v9 = 0;
      __int16 v10 = 2082;
      uint64_t v11 = "";
      _os_signpost_emit_with_name_impl(&dword_25631F000, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "updateLocalizationConfidenceAndReasonsIfNeeded, no current localization", "{\"msg%{public}.0s\":\"updateLocalizationConfidenceAndReasonsIfNeeded, no current localization\"}", (uint8_t *)&v8, 0x12u);
    }
  }
}

void CLMicroLocationLogic::updateConfidenceAndReasonsOfLocalizationRequestIfNeeded(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, unsigned int a5)
{
  uint64_t v95 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a2 + 16))
  {
    std::vector<std::string> __p = 0;
    v85 = 0;
    int v86 = 0;
    v81 = 0;
    int v82 = 0;
    int v83 = 0;
    if (CLMicroLocationSensorsLogic::State::receivedWiFiScanError((CLMicroLocationSensorsLogic::State *)(a1 + 720)))
    {
      uint64_t v10 = (v85 - (unsigned char *)__p) >> 2;
      unint64_t v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 62) {
        std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v12 = v86 - (unsigned char *)__p;
      if ((v86 - (unsigned char *)__p) >> 1 > v11) {
        unint64_t v11 = v12 >> 1;
      }
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v11;
      }
      if (v13) {
        __n128 v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationProto::ConfidenceReason>>((uint64_t)&v86, v13);
      }
      else {
        __n128 v14 = 0;
      }
      char v15 = &v14[4 * v10];
      *(_DWORD *)char v15 = 0;
      std::vector<std::string> __p = v15;
      int v86 = &v14[4 * v13];
      v85 = v15 + 4;
      uint64_t v16 = v82;
      if (v82 >= v83)
      {
        BOOL v18 = (char *)v81;
        uint64_t v19 = (v82 - (unsigned char *)v81) >> 2;
        unint64_t v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 62) {
          std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = v83 - (unsigned char *)v81;
        if ((v83 - (unsigned char *)v81) >> 1 > v20) {
          unint64_t v20 = v21 >> 1;
        }
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v20;
        }
        if (v22)
        {
          unsigned int v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationProto::ConfidenceReason>>((uint64_t)&v83, v22);
          BOOL v18 = (char *)v81;
          uint64_t v16 = v82;
        }
        else
        {
          unsigned int v23 = 0;
        }
        long long v24 = &v23[4 * v19];
        char v25 = &v23[4 * v22];
        *(_DWORD *)long long v24 = 0;
        double v17 = v24 + 4;
        while (v16 != v18)
        {
          int v26 = *((_DWORD *)v16 - 1);
          v16 -= 4;
          *((_DWORD *)v24 - 1) = v26;
          v24 -= 4;
        }
        v81 = v24;
        int v82 = v17;
        int v83 = v25;
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *(_DWORD *)int v82 = 0;
        double v17 = v16 + 4;
      }
      int v82 = v17;
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
      }
      __int16 v27 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        int v88 = 0;
        __int16 v89 = 2082;
        int v90 = "";
        _os_log_impl(&dword_25631F000, v27, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"update confidence of localization request due to wifi scan error\"}", buf, 0x12u);
      }
    }
    if (a5)
    {
      if ((CLMicroLocationUtils::stopReasonToConfidenceReason(a5) & 0xFF00000000) != 0)
      {
        long long v28 = v85;
        if (v85 >= v86)
        {
          char v32 = (char *)__p;
          uint64_t v33 = (v85 - (unsigned char *)__p) >> 2;
          unint64_t v34 = v33 + 1;
          if ((unint64_t)(v33 + 1) >> 62) {
            std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v35 = v86 - (unsigned char *)__p;
          if ((v86 - (unsigned char *)__p) >> 1 > v34) {
            unint64_t v34 = v35 >> 1;
          }
          if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v36 = v34;
          }
          if (v36)
          {
            __int16 v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationProto::ConfidenceReason>>((uint64_t)&v86, v36);
            char v32 = (char *)__p;
            long long v28 = v85;
          }
          else
          {
            __int16 v37 = 0;
          }
          long long v38 = &v37[4 * v33];
          __int16 v39 = &v37[4 * v36];
          *(_DWORD *)long long v38 = 1;
          uuid v29 = v38 + 4;
          while (v28 != v32)
          {
            int v40 = *((_DWORD *)v28 - 1);
            v28 -= 4;
            *((_DWORD *)v38 - 1) = v40;
            v38 -= 4;
          }
          std::vector<std::string> __p = v38;
          v85 = v29;
          int v86 = v39;
          if (v32) {
            operator delete(v32);
          }
        }
        else
        {
          *(_DWORD *)v85 = 1;
          uuid v29 = v28 + 4;
        }
        v85 = v29;
        uint64_t v41 = CLMicroLocationUtils::stopReasonToConfidenceReason(a5);
        int v42 = v41;
        if ((v41 & 0xFF00000000) == 0) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        __int16 v43 = v82;
        if (v82 >= v83)
        {
          __int16 v45 = (char *)v81;
          uint64_t v46 = (v82 - (unsigned char *)v81) >> 2;
          unint64_t v47 = v46 + 1;
          if ((unint64_t)(v46 + 1) >> 62) {
            std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v48 = v83 - (unsigned char *)v81;
          if ((v83 - (unsigned char *)v81) >> 1 > v47) {
            unint64_t v47 = v48 >> 1;
          }
          if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v49 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v49 = v47;
          }
          if (v49)
          {
            int v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationProto::ConfidenceReason>>((uint64_t)&v83, v49);
            __int16 v45 = (char *)v81;
            __int16 v43 = v82;
          }
          else
          {
            int v50 = 0;
          }
          __int16 v51 = &v50[4 * v46];
          int v52 = &v50[4 * v49];
          *(_DWORD *)__int16 v51 = v42;
          int v44 = v51 + 4;
          while (v43 != v45)
          {
            int v53 = *((_DWORD *)v43 - 1);
            v43 -= 4;
            *((_DWORD *)v51 - 1) = v53;
            v51 -= 4;
          }
          v81 = v51;
          int v82 = v44;
          int v83 = v52;
          if (v45) {
            operator delete(v45);
          }
        }
        else
        {
          *(_DWORD *)int v82 = v41;
          int v44 = v43 + 4;
        }
        int v82 = v44;
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
        }
        int v54 = logObject_MicroLocation_Default;
        if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289538;
          int v88 = 0;
          __int16 v89 = 2082;
          int v90 = "";
          __int16 v91 = 2050;
          uint64_t v92 = a5;
          __int16 v93 = 1026;
          int v94 = 1;
          _os_log_impl(&dword_25631F000, v54, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"update confidence of localization request due to localization stop reason\", \"stopReason\":%{public}lu, \"confidence level\":%{public}d}", buf, 0x22u);
        }
      }
      else
      {
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
        }
        char v30 = logObject_MicroLocation_Default;
        if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 68289282;
          int v88 = 0;
          __int16 v89 = 2082;
          int v90 = "";
          __int16 v91 = 2050;
          uint64_t v92 = a5;
          _os_log_impl(&dword_25631F000, v30, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"stopReason != LocalizationStopReason::CompletedSuccessfully, but stopReasonToConfidenceReason returned nullopt! shouldn't happen\", \"stopReason\":%{public}lu}", buf, 0x1Cu);
        }
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
        }
        uuid v31 = logObject_MicroLocation_Default;
        if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
        {
          *(_DWORD *)buf = 68289282;
          int v88 = 0;
          __int16 v89 = 2082;
          int v90 = "";
          __int16 v91 = 2050;
          uint64_t v92 = a5;
          _os_signpost_emit_with_name_impl(&dword_25631F000, v31, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "stopReason != LocalizationStopReason::CompletedSuccessfully, but stopReasonToConfidenceReason returned nullopt! shouldn't happen", "{\"msg%{public}.0s\":\"stopReason != LocalizationStopReason::CompletedSuccessfully, but stopReasonToConfidenceReason returned nullopt! shouldn't happen\", \"stopReason\":%{public}lu}", buf, 0x1Cu);
        }
      }
    }
    uint64_t v56 = *a3;
    uint64_t v55 = a3[1];
    if (*a3 != v55 && v55 - v56 == a4[1] - *a4)
    {
      unint64_t v57 = 0;
      do
      {
        int v58 = v85;
        if (v85 >= v86)
        {
          int v60 = (char *)__p;
          uint64_t v61 = (v85 - (unsigned char *)__p) >> 2;
          unint64_t v62 = v61 + 1;
          if ((unint64_t)(v61 + 1) >> 62) {
            std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v63 = v86 - (unsigned char *)__p;
          if ((v86 - (unsigned char *)__p) >> 1 > v62) {
            unint64_t v62 = v63 >> 1;
          }
          if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v64 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v64 = v62;
          }
          if (v64)
          {
            v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationProto::ConfidenceReason>>((uint64_t)&v86, v64);
            int v60 = (char *)__p;
            int v58 = v85;
          }
          else
          {
            v65 = 0;
          }
          int v66 = &v65[4 * v61];
          *(_DWORD *)int v66 = *(_DWORD *)(v56 + 4 * v57);
          __int16 v59 = v66 + 4;
          while (v58 != v60)
          {
            int v67 = *((_DWORD *)v58 - 1);
            v58 -= 4;
            *((_DWORD *)v66 - 1) = v67;
            v66 -= 4;
          }
          std::vector<std::string> __p = v66;
          v85 = v59;
          int v86 = &v65[4 * v64];
          if (v60) {
            operator delete(v60);
          }
        }
        else
        {
          *(_DWORD *)v85 = *(_DWORD *)(v56 + 4 * v57);
          __int16 v59 = v58 + 4;
        }
        v85 = v59;
        uint64_t v68 = *a4;
        int v69 = v82;
        if (v82 >= v83)
        {
          int v71 = (char *)v81;
          uint64_t v72 = (v82 - (unsigned char *)v81) >> 2;
          unint64_t v73 = v72 + 1;
          if ((unint64_t)(v72 + 1) >> 62) {
            std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v74 = v83 - (unsigned char *)v81;
          if ((v83 - (unsigned char *)v81) >> 1 > v73) {
            unint64_t v73 = v74 >> 1;
          }
          if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v75 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v75 = v73;
          }
          if (v75)
          {
            v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationProto::ConfidenceReason>>((uint64_t)&v83, v75);
            int v71 = (char *)v81;
            int v69 = v82;
          }
          else
          {
            v76 = 0;
          }
          v77 = &v76[4 * v72];
          *(_DWORD *)v77 = *(_DWORD *)(v68 + 4 * v57);
          int v70 = v77 + 4;
          while (v69 != v71)
          {
            int v78 = *((_DWORD *)v69 - 1);
            v69 -= 4;
            *((_DWORD *)v77 - 1) = v78;
            v77 -= 4;
          }
          v81 = v77;
          int v82 = v70;
          int v83 = &v76[4 * v75];
          if (v71) {
            operator delete(v71);
          }
        }
        else
        {
          *(_DWORD *)int v82 = *(_DWORD *)(v68 + 4 * v57);
          int v70 = v69 + 4;
        }
        int v82 = v70;
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
        }
        int v79 = logObject_MicroLocation_Default;
        if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
        {
          int v80 = *(_DWORD *)(*a3 + 4 * v57);
          *(_DWORD *)buf = 68289282;
          int v88 = 0;
          __int16 v89 = 2082;
          int v90 = "";
          __int16 v91 = 1026;
          LODWORD(v92) = v80;
          _os_log_impl(&dword_25631F000, v79, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"update confidence of localization request\", \"confidence level\":%{public}d}", buf, 0x18u);
        }
        ++v57;
        uint64_t v56 = *a3;
      }
      while (v57 < (a3[1] - *a3) >> 2);
    }
    if (!*(unsigned char *)(a2 + 16)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    CLMicroLocationLocalizationController::setConfidenceAndReasons(a1 + 168, (void *)a2, (uint64_t *)&__p, &v81);
    if (v81)
    {
      int v82 = (char *)v81;
      operator delete(v81);
    }
    if (__p)
    {
      v85 = (char *)__p;
      operator delete(__p);
    }
  }
}

void sub_25633B258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'CLMicroLocationLogic::updateLocalizationConfidenceAndReasonsIfNeeded(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
}

void CLMicroLocationLogic::startRescheduledLocalizationTimer(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (!*(void *)(a1 + 2568))
  {
    double v4 = cl::chrono::CFAbsoluteTimeClock::now();
    double v5 = (double)a2;
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
    }
    unsigned int v6 = logObject_MicroLocation_Default;
    double v7 = v5 / 1000.0;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289794;
      int v12 = 0;
      __int16 v13 = 2082;
      __n128 v14 = "";
      __int16 v15 = 2050;
      double v16 = v4;
      __int16 v17 = 2050;
      double v18 = v7;
      __int16 v19 = 2050;
      double v20 = v7 + v4;
      _os_log_impl(&dword_25631F000, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"ULLogicAdapter, Starting Rescheduled Localization Timer\", \"now\":\"%{public}.3f\", \"durationInS\":\"%{public}.3f\", \"expected end time\":\"%{public}.3f\"}", buf, 0x30u);
    }
    v10[0] = MEMORY[0x263EF8330];
    v10[1] = 3221225472;
    void v10[2] = ___ZN20CLMicroLocationLogic33startRescheduledLocalizationTimerENSt3__16chrono8durationIxNS0_5ratioILl1ELl1000EEEEE_block_invoke;
    v10[3] = &__block_descriptor_40_e5_v8__0l;
    v10[4] = a1;
    uint64_t v8 = +[ULTimerFactory timerOnPrimaryQueueWithInterval:0 repeats:v10 block:v7];
    int v9 = *(void **)(a1 + 2568);
    *(void *)(a1 + 2568) = v8;
  }
}

void ___ZN20CLMicroLocationLogic33startRescheduledLocalizationTimerENSt3__16chrono8durationIxNS0_5ratioILl1ELl1000EEEEE_block_invoke(uint64_t a1)
{
}

void CLMicroLocationLogic::onStopRescheduledLocalizationTimer(id *this)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  CFAbsoluteTime v2 = cl::chrono::CFAbsoluteTimeClock::now();
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
  }
  id v3 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289282;
    v5[1] = 0;
    __int16 v6 = 2082;
    double v7 = "";
    __int16 v8 = 2050;
    CFAbsoluteTime v9 = v2;
    _os_log_impl(&dword_25631F000, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"ULLogicAdapter, Rescheduled Localization Timer stopped\", \"now\":\"%{public}.3f\"}", (uint8_t *)v5, 0x1Cu);
  }
  [this[321] invalidate];
  id v4 = this[321];
  this[321] = 0;

  CLMicroLocationTriggerManager::onDelayedLocalizationTrigger((uint64_t)(this + 195), 2);
}

void non-virtual thunk to'CLMicroLocationLogic::startRescheduledLocalizationTimer(uint64_t a1, uint64_t a2)
{
}

void CLMicroLocationLogic::setFence(CLMicroLocationLogic *this, int a2)
{
}

void non-virtual thunk to'CLMicroLocationLogic::setFence(CLMicroLocationLogic *this, int a2)
{
}

void CLMicroLocationLogic::startMotionBasedTriggers(CLMicroLocationLogic *this)
{
  uint64_t v1 = (CLMicroLocationLogic *)((char *)this + 712);
  CLMicroLocationSensorsLogic::startSpectatingMotion((CLMicroLocationLogic *)((char *)this + 712));
  CLMicroLocationSensorsLogic::setFence(v1, 0);
}

void non-virtual thunk to'CLMicroLocationLogic::startMotionBasedTriggers(CLMicroLocationLogic *this)
{
  uint64_t v1 = (CLMicroLocationLogic *)((char *)this + 704);
  CLMicroLocationSensorsLogic::startSpectatingMotion((CLMicroLocationLogic *)((char *)this + 704));
  CLMicroLocationSensorsLogic::setFence(v1, 0);
}

void CLMicroLocationLogic::stopMotionBasedTriggers(CLMicroLocationLogic *this)
{
  uint64_t v1 = (CLMicroLocationLogic *)((char *)this + 712);
  CLMicroLocationSensorsLogic::stopMotionSM((CLMicroLocationLogic *)((char *)this + 712));
  CLMicroLocationSensorsLogic::stopSpectatingMotion(v1);
}

void non-virtual thunk to'CLMicroLocationLogic::stopMotionBasedTriggers(CLMicroLocationLogic *this)
{
  uint64_t v1 = (CLMicroLocationLogic *)((char *)this + 704);
  CLMicroLocationSensorsLogic::stopMotionSM((CLMicroLocationLogic *)((char *)this + 704));
  CLMicroLocationSensorsLogic::stopSpectatingMotion(v1);
}

uint64_t CLMicroLocationLogic::ignoreSensorMeasurementsIfNecessary(CLMicroLocationLogic *this)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v2 = *((unsigned __int8 *)this + 53);
  if (v2 == 1)
  {
    int v3 = 1;
  }
  else if (v2 == 2)
  {
    int v3 = ULSettings::get<ULSettings::LocalizeWithRecordingMeasurements>();
  }
  else
  {
    int v3 = 0;
  }
  int v4 = *((unsigned __int8 *)this + 108);
  BOOL v5 = *((unsigned char *)this + 108) == 0;
  if (!*((unsigned char *)this + 126) || (char v6 = ULSettings::get<ULSettings::OffScreenScanEnabled>(), !v4) && (v6 & 1) == 0)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
    }
    double v7 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 68289538;
      int v17 = 0;
      __int16 v18 = 2082;
      __int16 v19 = "";
      __int16 v20 = 1026;
      int v21 = 1;
      __int16 v22 = 1026;
      BOOL v23 = v5;
      _os_log_impl(&dword_25631F000, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Setting all BLE measurements as ignored\", \"ignoreBleRssi\":%{public}hhd, \"displayStateOff\":%{public}hhd}", (uint8_t *)&v16, 0x1Eu);
    }
    if (v3)
    {
      CLMicroLocationTriggerManager::getCurrentLocalizationUUID((CLMicroLocationLogic *)((char *)this + 1560), (__n128 *)&v16);
      if (!BYTE6(v19)) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      CLMicroLocationLocalizationController::setIgnoreBleRssiMeasurements((CLMicroLocationLogic *)((char *)this + 168), (const uuid *)&v16);
    }
    CLMicroLocationRecorder::setIgnoreBleRssiMeasurements((uint64_t)this + 664);
  }
  __int16 v8 = +[ULDefaultsSingleton shared];
  CFAbsoluteTime v9 = [v8 defaultsDictionary];

  uint64_t v10 = [NSString stringWithUTF8String:"ULUwbRangeLocalizationMinValidSessionTime"];
  unint64_t v11 = [v9 objectForKey:v10];
  if (v11 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    int v12 = [v11 intValue];
  }
  else {
    int v12 = [&unk_2704F1200 intValue];
  }
  int v13 = v12;

  uint64_t result = CLMicroLocationSensorsLogic::isNiSessionNotResumedForPeriod((uint64_t)this + 712, v13);
  if (result)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
    }
    __int16 v15 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 68289282;
      int v17 = 0;
      __int16 v18 = 2082;
      __int16 v19 = "";
      __int16 v20 = 1026;
      int v21 = 1;
      _os_log_impl(&dword_25631F000, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Setting all UWB measurements as ignored\", \"NI session not resumed\":%{public}hhd}", (uint8_t *)&v16, 0x18u);
    }
    if (v3)
    {
      CLMicroLocationTriggerManager::getCurrentLocalizationUUID((CLMicroLocationLogic *)((char *)this + 1560), (__n128 *)&v16);
      if (!BYTE6(v19)) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      CLMicroLocationLocalizationController::setIgnoreUwbRangeMeasurements((CLMicroLocationLogic *)((char *)this + 168), (const uuid *)&v16);
    }
    return CLMicroLocationRecorder::setIgnoreUwbRangeMeasurements((uint64_t)this + 664);
  }
  return result;
}

void sub_25633B980(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationLogic::shouldRescheduleLocalization(CLMicroLocationLogic *this, const CLMiLoServiceManager::LocalizationResults *a2, int a3, int a4)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  if (a4)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
    }
    int v4 = logObject_MicroLocation_Default;
    BOOL v5 = os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT);
    uint64_t v6 = 0;
    if (v5)
    {
      *(_DWORD *)buf = 68289026;
      int v53 = 0;
      __int16 v54 = 2082;
      uint64_t v55 = "";
      _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"shouldRescheduleLocalization, will not reschedule, currently in motion\"}", buf, 0x12u);
      return 0;
    }
    return v6;
  }
  __int16 v8 = this;
  int v9 = *((_DWORD *)a2 + 6);
  unint64_t v11 = (_DWORD *)*((void *)a2 + 4);
  uint64_t v10 = (_DWORD *)*((void *)a2 + 5);
  if (v11 == v10)
  {
    int v14 = 0;
    unsigned int v48 = 0;
  }
  else
  {
    int v12 = (_DWORD *)*((void *)a2 + 4);
    do
    {
      if (*v12 == 1) {
        goto LABEL_11;
      }
      ++v12;
    }
    while (v12 != v10);
    int v12 = (_DWORD *)*((void *)a2 + 5);
    do
    {
LABEL_11:
      if (*v11 <= 7u && ((1 << *v11) & 0x89) != 0)
      {
        int v14 = 1;
        goto LABEL_18;
      }
      ++v11;
    }
    while (v11 != v10);
    int v14 = 0;
LABEL_18:
    if (v9 == 3 || v12 == v10)
    {
      unsigned int v48 = 0;
    }
    else if (a3)
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
      }
      int v16 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        int v53 = 0;
        __int16 v54 = 2082;
        uint64_t v55 = "";
        _os_log_impl(&dword_25631F000, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"shouldRescheduleLocalization, will not reschedule a motion trigger due to motion reason\"}", buf, 0x12u);
      }
      unsigned int v48 = 0;
      __int16 v8 = this;
    }
    else
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
      }
      int v17 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        int v53 = 0;
        __int16 v54 = 2082;
        uint64_t v55 = "";
        _os_log_impl(&dword_25631F000, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"shouldRescheduleLocalization, will reschedule a localization trigger due to motion during prediction\"}", buf, 0x12u);
      }
      unsigned int v48 = 1;
    }
  }
  unint64_t v49 = v8;
  BOOL isLowLatencyMode = CLMicroLocationTriggerManager::isLowLatencyMode((CLMicroLocationLogic *)((char *)v8 + 1560));
  if (((v9 != 3) & v14 & isLowLatencyMode) != 1)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
    }
    uint64_t v24 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289794;
      int v53 = 0;
      __int16 v54 = 2082;
      uint64_t v55 = "";
      __int16 v56 = 1026;
      *(_DWORD *)unint64_t v57 = v9 != 3;
      *(_WORD *)&v57[4] = 1026;
      *(_DWORD *)&v57[6] = v14;
      __int16 v58 = 1026;
      BOOL v59 = isLowLatencyMode;
      _os_log_impl(&dword_25631F000, v24, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"shouldRescheduleLocalization, result is valid or low latency mode is disabled, resetting retry states\", \"confidenceLevelAllowReschedule\":%{public}hhd, \"localizationRetryReasonExists\":%{public}hhd, \"isLowLatencyMode\":%{public}hhd}", buf, 0x24u);
    }
    *((void *)v49 + 14) = 0;
    *((unsigned char *)v49 + 120) = 1;
    return v48;
  }
  __int16 v19 = (int *)*((void *)a2 + 4);
  for (uint64_t i = (int *)*((void *)a2 + 5); v19 != i; ++v19)
  {
    int v21 = *v19;
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
    }
    __int16 v22 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      CLMicroLocationUtils::placeConfidenceReasonToString(v21, __p);
      BOOL v23 = __p;
      if (v51 < 0) {
        BOOL v23 = (void **)__p[0];
      }
      *(_DWORD *)buf = 68289282;
      int v53 = 0;
      __int16 v54 = 2082;
      uint64_t v55 = "";
      __int16 v56 = 2082;
      *(void *)unint64_t v57 = v23;
      _os_log_impl(&dword_25631F000, v22, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"shouldRescheduleLocalization, result contains reason:\", \"reason\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (v51 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  if (!*((unsigned char *)v49 + 120))
  {
    int v34 = *((_DWORD *)v49 + 29);
    *((_DWORD *)v49 + 29) = v34 + 1;
    uint64_t v35 = +[ULDefaultsSingleton shared];
    unint64_t v36 = [v35 defaultsDictionary];

    __int16 v37 = [NSString stringWithUTF8String:"ULMaximumLocalizeNumRetryDisabledDueToWiFiError"];
    long long v38 = [v36 objectForKey:v37];
    if (v38 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
      int v39 = [v38 intValue];
    }
    else {
      int v39 = [&unk_2704F11E8 intValue];
    }
    int v42 = v39;

    if (v34 >= v42)
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
      }
      __int16 v45 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO))
      {
        int v46 = *((_DWORD *)v49 + 29) - 1;
        *(_DWORD *)buf = 68289282;
        int v53 = 0;
        __int16 v54 = 2082;
        uint64_t v55 = "";
        __int16 v56 = 1026;
        *(_DWORD *)unint64_t v57 = v46;
        _os_log_impl(&dword_25631F000, v45, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"shouldRescheduleLocalization, reached invalid result retry disabled count limit\", \"retry disabled trigger count\":%{public}d}", buf, 0x18u);
      }
      *((unsigned char *)v49 + 120) = 1;
      *((_DWORD *)v49 + 29) = 0;
    }
    else
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
      }
      __int16 v43 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO))
      {
        int v44 = *((_DWORD *)v49 + 29);
        *(_DWORD *)buf = 68289282;
        int v53 = 0;
        __int16 v54 = 2082;
        uint64_t v55 = "";
        __int16 v56 = 1026;
        *(_DWORD *)unint64_t v57 = v44;
        _os_log_impl(&dword_25631F000, v43, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"shouldRescheduleLocalization, will not retry\", \"retry disabled trigger count\":%{public}d}", buf, 0x18u);
      }
    }
    return v48;
  }
  int v25 = *((_DWORD *)v49 + 28);
  *((_DWORD *)v49 + 28) = v25 + 1;
  int v26 = +[ULDefaultsSingleton shared];
  __int16 v27 = [v26 defaultsDictionary];

  long long v28 = [NSString stringWithUTF8String:"ULMaximumLocalizeNumRetryDueToWiFiError"];
  uuid v29 = [v27 objectForKey:v28];
  if (v29 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    int v30 = [v29 intValue];
  }
  else {
    int v30 = [&unk_2704F11B8 intValue];
  }
  int v31 = v30;

  if (v25 >= v31)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
    }
    int v40 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO))
    {
      int v41 = *((_DWORD *)v49 + 28) - 1;
      *(_DWORD *)buf = 68289282;
      int v53 = 0;
      __int16 v54 = 2082;
      uint64_t v55 = "";
      __int16 v56 = 1026;
      *(_DWORD *)unint64_t v57 = v41;
      _os_log_impl(&dword_25631F000, v40, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"shouldRescheduleLocalization, reached invalid result reschedule limit\", \"retried number\":%{public}d}", buf, 0x18u);
    }
    *((unsigned char *)v49 + 120) = 0;
    *((_DWORD *)v49 + 28) = 0;
    return v48;
  }
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
  }
  char v32 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    int v33 = *((_DWORD *)v49 + 28);
    *(_DWORD *)buf = 68289282;
    int v53 = 0;
    __int16 v54 = 2082;
    uint64_t v55 = "";
    __int16 v56 = 1026;
    *(_DWORD *)unint64_t v57 = v33;
    _os_log_impl(&dword_25631F000, v32, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"shouldRescheduleLocalization, will reschedule a localization trigger due to invalid result\", \"retried count\":%{public}d}", buf, 0x18u);
  }
  return 1;
}

void sub_25633C26C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationLogic::createLocalizationTriggerWithOptAssociatedAccessPointInfo(uint64_t a1@<X0>, uint64_t a2@<X1>, CLMicroLocationProto *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  CLMicroLocationLogic::createInternalLocalizationEvent((uint64_t)&__p);
  CLMicroLocationProtobufHelper::createRecordingEvent<CLMicroLocationProto::ReceivedEventAction>((CLMicroLocationProto::RecordingEvent *)&__p, a3, 0, 0, (CLMicroLocationProto *)3, a4, a5);
  CLMicroLocationProto::ReceivedEventAction::~ReceivedEventAction((CLMicroLocationProto::ReceivedEventAction *)&__p);
  uint64_t v10 = (id *)(a1 + 720);
  if (CLMicroLocationSensorsLogic::State::isAssociatedToWifi((CLMicroLocationSensorsLogic::State *)v10))
  {
    unint64_t v11 = CLMicroLocationSensorsLogic::State::currentAssociatedWiFiAPInfo(v10);
    *(_DWORD *)(a4 + 140) |= 0x10000u;
    uint64_t v12 = *(void *)(a4 + 128);
    if (!v12) {
      operator new();
    }
    uint64_t v13 = [v11 RSSI];
    *(_DWORD *)(v12 + 24) |= 2u;
    *(float *)(v12 + 16) = (float)v13;
    id v14 = [v11 BSSID];
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)[v14 UTF8String]);
    v22.var0 = CLMacAddress::newFromCLStr((uint64_t *)&__p);
    if (SBYTE3(v27) < 0) {
      operator delete(__p);
    }

    *(_DWORD *)(a4 + 140) |= 0x10000u;
    uint64_t v15 = *(void *)(a4 + 128);
    if (!v15) {
      operator new();
    }
    unint64_t v16 = CLMacAddress::toUint64(&v22);
    *(_DWORD *)(v15 + 24) |= 1u;
    *(void *)(v15 + 8) = v16;
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
    }
    int v17 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      id v18 = [v11 BSSID];
      uint64_t v19 = [v18 UTF8String];
      uint64_t v20 = [v11 RSSI];
      std::vector<std::string> __p = (void *)68289795;
      __int16 v24 = 2082;
      int v25 = "";
      __int16 v26 = 2081;
      uint64_t v27 = v19;
      __int16 v28 = 2050;
      double v29 = (float)v20;
      __int16 v30 = 2082;
      uint64_t v31 = a2;
      _os_log_impl(&dword_25631F000, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"set associated AP for a recording event\", \"MAC Address\":%{private, location:escape_only}s, \"Rssi\":\"%{public}f\", \"client name\":%{public, location:escape_only}s}", (uint8_t *)&__p, 0x30u);
    }
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
    }
    int v21 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      std::vector<std::string> __p = (void *)68289282;
      __int16 v24 = 2082;
      int v25 = "";
      __int16 v26 = 2082;
      uint64_t v27 = a2;
      _os_log_impl(&dword_25631F000, v21, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"not set associated AP for a recording event, not associated\", \"client name\":%{public, location:escape_only}s}", (uint8_t *)&__p, 0x1Cu);
    }
  }
}

void sub_25633C608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  MEMORY[0x25A2A6340](v18, 0x1081C40DCAC275BLL);

  CLMicroLocationProto::RecordingEvent::~RecordingEvent(v16);
  _Unwind_Resume(a1);
}

void CLMiLoServiceManager::LocalizationResults::~LocalizationResults(CLMiLoServiceManager::LocalizationResults *this)
{
  int v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  int v3 = (void **)this;
  std::vector<CLMiLoServiceManager::LocalizationResultsPerModel>::__destroy_vector::operator()[abi:ne180100](&v3);
}

uint64_t ULSettings::get<ULSettings::OffScreenScanEnabled>()
{
  os_log_t v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  int v2 = [NSString stringWithUTF8String:"ULOffScreenScanEnabled"];
  int v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 BOOLValue];
  }
  else {
    uint64_t v4 = [MEMORY[0x263EFFA80] BOOLValue];
  }
  uint64_t v5 = v4;

  return v5;
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  os_log_t v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  int v2 = [NSString stringWithUTF8String:"ULOffScreenScanEnabled"];
  int v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 BOOLValue];
  }
  else {
    uint64_t v4 = [MEMORY[0x263EFFA80] BOOLValue];
  }
  uint64_t v5 = v4;

  return v5;
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  os_log_t v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  int v2 = [NSString stringWithUTF8String:"ULOffScreenScanEnabled"];
  int v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 BOOLValue];
  }
  else {
    uint64_t v4 = [MEMORY[0x263EFFA80] BOOLValue];
  }
  uint64_t v5 = v4;

  return v5;
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  os_log_t v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  int v2 = [NSString stringWithUTF8String:"ULOffScreenScanEnabled"];
  int v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 BOOLValue];
  }
  else {
    uint64_t v4 = [MEMORY[0x263EFFA80] BOOLValue];
  }
  uint64_t v5 = v4;

  return v5;
}

void sub_25633C7B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CLMicroLocationProto::Measurement *CLMicroLocationLogic::onAvailableMeasurements(CLMicroLocationProto::Measurement *result, CLMicroLocationProto::Measurement **a2)
{
  int v3 = result;
  int v4 = *((unsigned __int8 *)result + 53);
  if (v4 == 1)
  {
    CLMicroLocationRecorder::ScanMetadata::ScanMetadata((uint64_t)&v5, 0);
    CLMicroLocationRecorder::recordMeasurementBatch((uint64_t)v3 + 664, &v5, a2);
    return CLMicroLocationLocalizationController::update((CLMicroLocationProto::Measurement *)((char *)v3 + 168), (uint64_t)a2);
  }
  if (v4 == 2)
  {
    CLMicroLocationRecorder::ScanMetadata::ScanMetadata((uint64_t)&v6, 0);
    CLMicroLocationRecorder::recordMeasurementBatch((uint64_t)v3 + 664, &v6, a2);
    uint64_t result = (CLMicroLocationProto::Measurement *)ULSettings::get<ULSettings::LocalizeWithRecordingMeasurements>();
    if (result) {
      return CLMicroLocationLocalizationController::update((CLMicroLocationProto::Measurement *)((char *)v3 + 168), (uint64_t)a2);
    }
  }
  return result;
}

void CLMicroLocationLogic::onScanActivityCompleted(NSObject *this, void **a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  int v13 = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v13);
  *(void *)&long long v14 = boost::uuids::random_generator_pure::operator()((uint64_t)&v13);
  *((void *)&v14 + 1) = v4;
  double v5 = cl::chrono::CFAbsoluteTimeClock::now();
  CLMicroLocationProto::SensorsScanComplete::SensorsScanComplete((CLMicroLocationProto::SensorsScanComplete *)__p);
  CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::SensorsScanComplete>(&v14, (int *)__p, (uint64_t)buf, v5);
  (*((void (**)(NSObject *, uint8_t *))this->isa + 15))(this, buf);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)&v16[24]);
  CLMicroLocationProto::SensorsScanComplete::~SensorsScanComplete((CLMicroLocationProto::SensorsScanComplete *)__p);
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v13);
  int v6 = BYTE5(this[6].isa);
  if (v6 == 1)
  {
    CLMicroLocationLogic::stopLocalizing((uint64_t)this, 0);
    goto LABEL_21;
  }
  if (v6 == 2) {
    goto LABEL_19;
  }
  if (!BYTE5(this[6].isa))
  {
    double v7 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    {
      a2 = __p;
      CLMicroLocationUtils::scanActivityToString(0, __p);
      __int16 v8 = v12 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 68289795;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)unint64_t v16 = 2082;
      *(void *)&_DWORD v16[2] = "";
      *(_WORD *)&v16[10] = 2082;
      *(void *)&v16[12] = v8;
      *(_WORD *)&v16[20] = 2082;
      *(void *)&v16[22] = "assert";
      *(_WORD *)&v16[30] = 2081;
      int v17 = "false";
      _os_log_impl(&dword_25631F000, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Invalid MiLo current activity\", \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }

    int v9 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_signpost_enabled(v9))
    {
      a2 = __p;
      CLMicroLocationUtils::scanActivityToString(0, __p);
      uint64_t v10 = v12 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 68289795;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)unint64_t v16 = 2082;
      *(void *)&_DWORD v16[2] = "";
      *(_WORD *)&v16[10] = 2082;
      *(void *)&v16[12] = v10;
      *(_WORD *)&v16[20] = 2082;
      *(void *)&v16[22] = "assert";
      *(_WORD *)&v16[30] = 2081;
      int v17 = "false";
      _os_signpost_emit_with_name_impl(&dword_25631F000, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Invalid MiLo current activity", "{\"msg%{public}.0s\":\"Invalid MiLo current activity\", \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }

    this = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(this, OS_LOG_TYPE_INFO))
    {
      CLMicroLocationUtils::scanActivityToString(0, __p);
      CLMicroLocationLogic::onScanActivityCompleted();
    }

    abort_report_np();
    __break(1u);
LABEL_19:
    *(void *)&v16[24] = 0;
    int v17 = 0;
    *(void *)buf = 0;
    *(void *)unint64_t v16 = 0;
    *(void *)&unsigned char v16[8] = 0;
    *(void *)&v16[16] = &v16[24];
    int v18 = 4;
    CLMicroLocationLogic::stopRecording((uint64_t)this, (uint64_t)buf);
    std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&v16[16], *(void **)&v16[24]);
  }
LABEL_21:
  CLMicroLocationLogic::sendScanEventPowerLog((uint64_t)this, v6, (CLMicroLocationProto::RecordingEvent *)a2);
}

void sub_25633CBEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::SensorsScanComplete>(_OWORD *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  CLMicroLocationProto::ReceivedEvent::ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
  CLMicroLocationProtobufHelper::setSpecificLoggedEvent((CLMicroLocationProtobufHelper *)v9, (CLMicroLocationProto::ReceivedEvent *)a2, v8);
  CLMicroLocationLoggedEventsTable::Entry::Entry(a3, a1, a2[2], (CLMicroLocationProto::ReceivedEvent *)v9, a4);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
}

void sub_25633CCDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void CLMicroLocationLogic::sendScanEventPowerLog(uint64_t a1, int a2, CLMicroLocationProto::RecordingEvent *a3)
{
  v21[6] = *MEMORY[0x263EF8340];
  CLMicroLocationTriggerManager::getClientTypeStr(a3, &__p);
  uint64_t v5 = CLMicroLocationTriggerManager::enumerateClientIdToTriggerType((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  memset(&__p, 0, sizeof(__p));
  int v18 = objc_msgSend(NSString, "stringWithUTF8String:", "TriggerType", CLMicroLocationSensorsLogic::getPowerMetrics((CLMicroLocationSensorsLogic *)(a1 + 712), (__n128 *)&__p).n128_f64[0]);
  v20[0] = v18;
  v21[0] = [NSNumber numberWithInt:v5];
  int v17 = (void *)v21[0];
  unint64_t v16 = [NSString stringWithUTF8String:"NumLocalizations"];
  v20[1] = v16;
  uint64_t v15 = [NSNumber numberWithBool:a2 == 1];
  v21[1] = v15;
  int v6 = [NSString stringWithUTF8String:"NumRecordings"];
  v20[2] = v6;
  double v7 = [NSNumber numberWithBool:a2 == 2];
  v21[2] = v7;
  __int16 v8 = [NSString stringWithUTF8String:"WiFiScanDuration"];
  v20[3] = v8;
  int v9 = [NSNumber numberWithDouble:*(double *)&__p.__r_.__value_.__l.__data_];
  v21[3] = v9;
  uint64_t v10 = [NSString stringWithUTF8String:"BTScanDuration"];
  v20[4] = v10;
  unint64_t v11 = [NSNumber numberWithDouble:*(double *)&__p.__r_.__value_.__l.__size_];
  v21[4] = v11;
  char v12 = [NSString stringWithUTF8String:"BleActiveScanRate"];
  v20[5] = v12;
  int v13 = [NSNumber numberWithInt:LODWORD(__p.__r_.__value_.__r.__words[2])];
  v21[5] = v13;
  long long v14 = [NSDictionary dictionaryWithObjects:v21 forKeys:v20 count:6];

  CLMicroLocationPowerLog::logMetrics((CLMicroLocationPowerLog *)(a1 + 2016), &cfstr_Scanevent.isa, v14);
  CLMicroLocationSensorsLogic::clrPowerMetrics((CLMicroLocationSensorsLogic *)(a1 + 712));
}

void sub_25633CF7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationLogic::startMotionTriggerBasedLocalization(uint64_t a1, double *a2, unsigned int a3, int a4, CLMicroLocationProto *a5)
{
  CLMicroLocationLogic::createLocalizationTriggerWithOptAssociatedAccessPointInfo(a1, (uint64_t)"InternalClientMotion", (CLMicroLocationProto *)(a3 | 0x100000000), (uint64_t)v8, *a2);
  CLMicroLocationTriggerManager::requestLocalization(a1 + 1560, (const CLMicroLocationProto::RecordingEvent *)v8, 1, a4, a5);
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v8);
}

void sub_25633D0BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void CLMicroLocationLogic::invalidateCaches(uint64_t a1, int a2)
{
  CLMicroLocationLocalizationController::invalidateCachedLocalizationInput((CLMicroLocationLocalizationController *)(a1 + 168));
  uint64_t v4 = a1 + 1768;
  CLMiLoServiceManager::invalidateCachedPredictions((CLMiLoServiceManager *)(a1 + 1768));
  uint64_t v5 = +[ULDefaultsSingleton shared];
  int v6 = [v5 defaultsDictionary];

  double v7 = [NSString stringWithUTF8String:"ULMotionStopDetectionModuleEnable"];
  __int16 v8 = [v6 objectForKey:v7];
  if (v8 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    int v9 = [v8 BOOLValue];
  }
  else {
    int v9 = [MEMORY[0x263EFFA88] BOOLValue];
  }
  int v10 = v9;

  if (v10)
  {
    unint64_t v11 = +[ULDefaultsSingleton shared];
    char v12 = [v11 defaultsDictionary];

    int v13 = [NSString stringWithUTF8String:"ULMotionInvalidateConfidenceOnMotion"];
    long long v14 = [v12 objectForKey:v13];
    if (v14 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
      int v15 = [v14 BOOLValue];
    }
    else {
      int v15 = [MEMORY[0x263EFFA88] BOOLValue];
    }
    int v16 = v15;

    if (!a2 && v16)
    {
      CLMiLoServiceManager::notifyInvalidConfidence(v4, 1);
    }
  }
}

void sub_25633D28C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationLogic::onInMotion(uint64_t a1, unsigned int a2)
{
  v24[39] = *MEMORY[0x263EF8340];
  double v4 = cl::chrono::CFAbsoluteTimeClock::now();
  double v16 = v4;
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
  }
  int v6 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 68289282;
    int v19 = 0;
    __int16 v20 = 2082;
    int v21 = "";
    __int16 v22 = 1026;
    int v23 = v5;
    _os_log_impl(&dword_25631F000, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"onInMotion - setting medium confidence and resetting localization error retries\", \"ScreenOn\":%{public}hhd}", buf, 0x18u);
  }
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 120) = 1;
  CLMicroLocationProto::MotionEvent::MotionEvent((CLMicroLocationProto::MotionEvent *)v14);
  if (!CLMicroLocationProto::MotionEvent_Status_IsValid(0))
  {
    int v10 = "::CLMicroLocationProto::MotionEvent_Status_IsValid(value)";
    int v11 = 18149;
    char v12 = "set_status";
    goto LABEL_20;
  }
  v15 |= 4u;
  v14[5] = 0;
  if (v5) {
    uint64_t v7 = 1;
  }
  else {
    uint64_t v7 = 2;
  }
  if (!CLMicroLocationProto::ConfigurationType_IsValid((CLMicroLocationProto *)v7))
  {
    int v10 = "::CLMicroLocationProto::MotionEvent_ScreenStatus_IsValid(value)";
    int v11 = 18242;
    char v12 = "set_screenon";
LABEL_20:
    __assert_rtn(v12, "microlocation.pb.h", v11, v10);
  }
  v15 |= 0x10u;
  v14[8] = v7;
  int v13 = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v13);
  *(void *)&long long v17 = boost::uuids::random_generator_pure::operator()((uint64_t)&v13);
  *((void *)&v17 + 1) = v8;
  CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::MotionEvent>(&v17, v14, (uint64_t)buf, v4);
  (*(void (**)(uint64_t, uint8_t *))(*(void *)a1 + 120))(a1, buf);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v24);
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v13);
  CLMicroLocationTriggerManager::onInMotion((CLMicroLocationTriggerManager *)(a1 + 1560));
  if (a2)
  {
    if (a2 == 1)
    {
      uint64_t v9 = 0;
    }
    else if (a2 == 2)
    {
      uint64_t v9 = 1;
    }
    else
    {
      uint64_t v9 = 0;
      a2 = 0;
    }
  }
  else
  {
    CLMicroLocationLogic::invalidateCaches(a1, 0);
    uint64_t v9 = 0;
  }
  CLMicroLocationLogic::startMotionTriggerBasedLocalization(a1, &v16, a2, 1, (CLMicroLocationProto *)v9);
  CLMicroLocationProto::MotionEvent::~MotionEvent((CLMicroLocationProto::MotionEvent *)v14);
}

void sub_25633D580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10, __int16 a11, char a12)
{
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)(v12 + 32));
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&a10);
  CLMicroLocationProto::MotionEvent::~MotionEvent((CLMicroLocationProto::MotionEvent *)&a12);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::MotionEvent>(_OWORD *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  CLMicroLocationProto::ReceivedEvent::ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
  CLMicroLocationProtobufHelper::setSpecificLoggedEvent((CLMicroLocationProtobufHelper *)v9, (CLMicroLocationProto::ReceivedEvent *)a2, v8);
  CLMicroLocationLoggedEventsTable::Entry::Entry(a3, a1, a2[4], (CLMicroLocationProto::ReceivedEvent *)v9, a4);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
}

void sub_25633D63C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void CLMicroLocationLogic::onStopMotion(CLMicroLocationLogic *this)
{
  v21[39] = *MEMORY[0x263EF8340];
  double v2 = cl::chrono::CFAbsoluteTimeClock::now();
  double v13 = v2;
  int v3 = (*(uint64_t (**)(CLMicroLocationLogic *))(*(void *)this + 176))(this);
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
  }
  double v4 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 68289282;
    int v16 = 0;
    __int16 v17 = 2082;
    int v18 = "";
    __int16 v19 = 1026;
    int v20 = v3;
    _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"onStopMotion\", \"ScreenOn\":%{public}hhd}", buf, 0x18u);
  }
  CLMicroLocationProto::MotionEvent::MotionEvent((CLMicroLocationProto::MotionEvent *)v11);
  if (!CLMicroLocationProto::MotionEvent_Status_IsValid((CLMicroLocationProto *)1))
  {
    uint64_t v7 = "::CLMicroLocationProto::MotionEvent_Status_IsValid(value)";
    int v8 = 18149;
    uint64_t v9 = "set_status";
    goto LABEL_19;
  }
  v12 |= 4u;
  v11[5] = 1;
  if (v3) {
    uint64_t v5 = 1;
  }
  else {
    uint64_t v5 = 2;
  }
  if (!CLMicroLocationProto::ConfigurationType_IsValid((CLMicroLocationProto *)v5))
  {
    uint64_t v7 = "::CLMicroLocationProto::MotionEvent_ScreenStatus_IsValid(value)";
    int v8 = 18242;
    uint64_t v9 = "set_screenon";
LABEL_19:
    __assert_rtn(v9, "microlocation.pb.h", v8, v7);
  }
  v12 |= 0x10u;
  unsigned char v11[8] = v5;
  int v10 = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v10);
  *(void *)&long long v14 = boost::uuids::random_generator_pure::operator()((uint64_t)&v10);
  *((void *)&v14 + 1) = v6;
  CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::MotionEvent>(&v14, v11, (uint64_t)buf, v2);
  (*(void (**)(CLMicroLocationLogic *, uint8_t *))(*(void *)this + 120))(this, buf);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v21);
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v10);
  CLMicroLocationTriggerManager::onStopMotion((uint64_t)this + 1560);
  if (ULSettings::get<ULSettings::OffScreenScanEnabled>())
  {
    if (!*((unsigned char *)this + 109)) {
      goto LABEL_16;
    }
  }
  else if (!v3)
  {
    CLMicroLocationLogic::invalidateCaches((uint64_t)this, 0);
    goto LABEL_16;
  }
  CLMicroLocationTriggerManager::requestMotion((CLMicroLocationLogic *)((char *)this + 1560), 0);
  CLMicroLocationLogic::startMotionTriggerBasedLocalization((uint64_t)this, &v13, 3u, 0, 0);
LABEL_16:
  CLMicroLocationProto::MotionEvent::~MotionEvent((CLMicroLocationProto::MotionEvent *)v11);
}

void sub_25633D8D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10, __int16 a11, char a12)
{
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)(v12 + 32));
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&a10);
  CLMicroLocationProto::MotionEvent::~MotionEvent((CLMicroLocationProto::MotionEvent *)&a12);
  _Unwind_Resume(a1);
}

void CLMicroLocationLogic::onCustomLoiRecordingFenceBreach(CLMiLoCustomLoiRecordingManager **this)
{
}

void CLMicroLocationLogic::onMacInternalTrigger(CLMicroLocationLogic *this)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 49))
  {
    v2.n128_f64[0] = CLMicroLocationProto::RecordingRequest::RecordingRequest((CLMicroLocationProto::RecordingRequest *)v7);
    v11 |= 4u;
    uint64_t v3 = MEMORY[0x263F8C740];
    if (v9 == MEMORY[0x263F8C740]) {
      operator new();
    }
    MEMORY[0x25A2A6080](v2);
    if (!CLMicroLocationProto::RecordingRequestType_IsValid((CLMicroLocationProto *)1)) {
      __assert_rtn("set_recordingrequesttype", "microlocation.pb.h", 13554, "::CLMicroLocationProto::RecordingRequestType_IsValid(value)");
    }
    v11 |= 2u;
    int v8 = 1;
    v6[0] = 0;
    boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)v6);
    uint64_t v12 = boost::uuids::random_generator_pure::operator()((uint64_t)v6);
    uint64_t v13 = v4;
    boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)v6);
    v11 |= 8u;
    if (v10 == v3) {
      operator new();
    }
    MEMORY[0x25A2A6090]();
    double v5 = cl::chrono::CFAbsoluteTimeClock::now();
    CLMicroLocationProtobufHelper::createRecordingEvent<CLMicroLocationProto::RecordingRequest>((CLMicroLocationProto::RecordingEvent *)v7, 0, 0, 0, (CLMicroLocationProto *)3, (uint64_t)v6, v5);
    CLMicroLocationTriggerManager::requestRecording((CLMicroLocationLogic *)((char *)this + 1560), (const CLMicroLocationProto::RecordingEvent *)v6);
    CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v6);
    CLMicroLocationProto::RecordingRequest::~RecordingRequest((CLMicroLocationProto::RecordingRequest *)v7);
  }
}

void sub_25633DAC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)va);
  CLMicroLocationProto::RecordingRequest::~RecordingRequest((CLMicroLocationProto::RecordingRequest *)(v2 - 104));
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createRecordingEvent<CLMicroLocationProto::RecordingRequest>(CLMicroLocationProto::RecordingEvent *a1@<X0>, CLMicroLocationProto *a2@<X1>, char a3@<W2>, char a4@<W3>, CLMicroLocationProto *a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)a6);
  unsigned int v14 = *((_DWORD *)a1 + 2);
  if (!CLMicroLocationProto::EventType_IsValid((CLMicroLocationProto *)v14))
  {
    __int16 v17 = "::CLMicroLocationProto::EventType_IsValid(value)";
    int v18 = 20192;
    __int16 v19 = "set_eventtype";
    goto LABEL_10;
  }
  int v15 = *(_DWORD *)(a6 + 140);
  *(_DWORD *)(a6 + 72) = v14;
  *(double *)(a6 + 8) = a7;
  *(unsigned char *)(a6 + 77) = a3;
  *(_DWORD *)(a6 + 140) = v15 | 0x2803;
  *(unsigned char *)(a6 + 76) = a4;
  if (!CLMicroLocationProto::ConfidenceLevel_IsValid(a5))
  {
    __int16 v17 = "::CLMicroLocationProto::ConfidenceLevel_IsValid(value)";
    int v18 = 20701;
    __int16 v19 = "set_confidencelevel";
    goto LABEL_10;
  }
  *(_DWORD *)(a6 + 140) |= 0x4000u;
  *(_DWORD *)(a6 + 120) = a5;
  if (((unint64_t)a2 & 0xFF00000000) != 0)
  {
    if (CLMicroLocationProto::MotionState_IsValid(a2))
    {
      *(_DWORD *)(a6 + 140) |= 0x20000u;
      *(_DWORD *)(a6 + 124) = a2;
      goto LABEL_6;
    }
    __int16 v17 = "::CLMicroLocationProto::MotionState_IsValid(value)";
    int v18 = 20793;
    __int16 v19 = "set_motionstate";
LABEL_10:
    __assert_rtn(v19, "microlocation.pb.h", v18, v17);
  }
LABEL_6:
  CLMicroLocationProtobufHelper::setSpecificRecordingEvent((CLMicroLocationProtobufHelper *)a6, a1, v16);
}

void sub_25633DC3C(_Unwind_Exception *a1)
{
  CLMicroLocationProto::RecordingEvent::~RecordingEvent(v1);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationLogic::onMacPowerChange(CLMicroLocationLogic *this, char a2)
{
  return CLMicroLocationTriggerManager::setMacAcPower((uint64_t)this + 1560, a2);
}

void CLMicroLocationLogic::onMacExternalScreenChange(CLMicroLocationLogic *this, char a2)
{
  CLMicroLocationTriggerManager::setMacExternalDisplay((uint64_t)this + 1560, a2);
  if ((a2 & 1) == 0)
  {
    int v4 = *((unsigned __int8 *)this + 121);
    double v5 = +[ULDefaultsSingleton shared];
    uint64_t v6 = v5;
    if (v4)
    {
      uint64_t v7 = [v5 defaultsDictionary];

      int v8 = [NSString stringWithUTF8String:"ULPeriodicTriggerDelayUnstableModel"];
      uint64_t v9 = [v7 objectForKey:v8];
      if (v9)
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
LABEL_5:
          [v9 doubleValue];
          goto LABEL_10;
        }
      }
      [&unk_2704F0D80 doubleValue];
    }
    else
    {
      uint64_t v7 = [v5 defaultsDictionary];

      int v8 = [NSString stringWithUTF8String:"ULPeriodicTriggerDelay"];
      uint64_t v9 = [v7 objectForKey:v8];
      if (v9)
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          goto LABEL_5;
        }
      }
      [&unk_2704F0D70 doubleValue];
    }
LABEL_10:
    double v11 = v10;

    if (!*((void *)this + 322))
    {
      v14[0] = MEMORY[0x263EF8330];
      v14[1] = 3221225472;
      v14[2] = ___ZN20CLMicroLocationLogic25onMacExternalScreenChangeEb_block_invoke;
      v14[3] = &__block_descriptor_40_e5_v8__0l;
      v14[4] = this;
      uint64_t v12 = +[ULTimerFactory timerOnPrimaryQueueWithInterval:0 repeats:v14 block:v11];
      uint64_t v13 = (void *)*((void *)this + 322);
      *((void *)this + 322) = v12;
    }
  }
}

void sub_25633DE40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN20CLMicroLocationLogic25onMacExternalScreenChangeEb_block_invoke(uint64_t a1)
{
}

void CLMicroLocationLogic::onPeriodicTriggerEventTimer(id *this)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  CFAbsoluteTime v2 = cl::chrono::CFAbsoluteTimeClock::now();
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
  }
  uint64_t v3 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289282;
    v5[1] = 0;
    __int16 v6 = 2082;
    uint64_t v7 = "";
    __int16 v8 = 2050;
    CFAbsoluteTime v9 = v2;
    _os_log_impl(&dword_25631F000, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Periodic Event Timer elapsed\", \"now\":\"%{public}.3f\"}", (uint8_t *)v5, 0x1Cu);
  }
  [this[322] invalidate];
  id v4 = this[322];
  this[322] = 0;

  CLMicroLocationLogic::onPeriodicTrigger((CLMicroLocationLogic *)this);
}

void CLMicroLocationLogic::onPeriodicTrigger(CLMicroLocationLogic *this)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  int v2 = (*(uint64_t (**)(CLMicroLocationLogic *))(*(void *)this + 176))(this);
  if (*((unsigned char *)this + 49)) {
    BOOL v3 = v2 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    v4.n128_f64[0] = CLMicroLocationProto::RecordingRequest::RecordingRequest((CLMicroLocationProto::RecordingRequest *)v9);
    v13 |= 4u;
    uint64_t v5 = MEMORY[0x263F8C740];
    if (v11 == MEMORY[0x263F8C740]) {
      operator new();
    }
    MEMORY[0x25A2A6080](v4);
    if (!CLMicroLocationProto::RecordingRequestType_IsValid((CLMicroLocationProto *)1)) {
      __assert_rtn("set_recordingrequesttype", "microlocation.pb.h", 13554, "::CLMicroLocationProto::RecordingRequestType_IsValid(value)");
    }
    v13 |= 2u;
    int v10 = 1;
    v8[0] = 0;
    boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)v8);
    uint64_t v14 = boost::uuids::random_generator_pure::operator()((uint64_t)v8);
    uint64_t v15 = v6;
    boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)v8);
    v13 |= 8u;
    if (v12 == v5) {
      operator new();
    }
    MEMORY[0x25A2A6090]();
    double v7 = cl::chrono::CFAbsoluteTimeClock::now();
    CLMicroLocationProtobufHelper::createRecordingEvent<CLMicroLocationProto::RecordingRequest>((CLMicroLocationProto::RecordingEvent *)v9, 0, 0, 0, (CLMicroLocationProto *)3, (uint64_t)v8, v7);
    CLMicroLocationTriggerManager::requestRecording((CLMicroLocationLogic *)((char *)this + 1560), (const CLMicroLocationProto::RecordingEvent *)v8);
    CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v8);
    CLMicroLocationProto::RecordingRequest::~RecordingRequest((CLMicroLocationProto::RecordingRequest *)v9);
  }
}

void sub_25633E188(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)va);
  CLMicroLocationProto::RecordingRequest::~RecordingRequest((CLMicroLocationProto::RecordingRequest *)(v2 - 104));
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationLogic::requestWifiScanExtension(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  uint64_t v6 = ULSettings::get<ULSettings::MinimumWiFiNumberOfMeasurementsForScanExtension>();
  if (!a2) {
    return 0;
  }
  int v7 = *(unsigned __int8 *)(a1 + 53);
  if (!*(unsigned char *)(a1 + 53))
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
    }
    uint64_t v11 = logObject_MicroLocation_Default;
    if (!os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    LOWORD(v59) = 0;
    uint64_t v12 = "Logic, shouldExtendWifiScan was called when activity is NotSet";
    int v13 = v11;
    os_log_type_t v14 = OS_LOG_TYPE_ERROR;
LABEL_66:
    _os_log_impl(&dword_25631F000, v13, v14, v12, (uint8_t *)&v59, 2u);
    return 0;
  }
  unint64_t v8 = v6;
  if (v7 != 1)
  {
    if (v7 != 2)
    {
      if (a2 >= 1)
      {
        uint64_t v17 = 0;
LABEL_48:
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
        }
        unint64_t v49 = (id)logObject_MicroLocation_Default;
        if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
        {
          int v50 = [NSNumber numberWithLongLong:a2];
          char v51 = [NSNumber numberWithLongLong:v17];
          int v59 = 138412546;
          *(void *)uint64_t v60 = v50;
          *(_WORD *)&v60[8] = 2112;
          *(void *)&v60[10] = v51;
          _os_log_impl(&dword_25631F000, v49, OS_LOG_TYPE_INFO, "requestWifiScanExtension: extension request (%@) > max allowed extension (%@)", (uint8_t *)&v59, 0x16u);
        }
        return 0;
      }
      goto LABEL_62;
    }
    CFAbsoluteTime v9 = (uint64_t **)(a1 + 56);
    int v10 = *(char *)(a1 + 79);
    if (v10 < 0)
    {
      if (*(void *)(a1 + 64) != 6) {
        goto LABEL_23;
      }
      CFAbsoluteTime v9 = (uint64_t **)*v9;
    }
    else if (v10 != 6)
    {
      goto LABEL_23;
    }
    int v18 = *(_DWORD *)v9;
    int v19 = *((unsigned __int16 *)v9 + 2);
    if (v18 == 1953723747 && v19 == 28015)
    {
      unint64_t v57 = +[ULDefaultsSingleton shared];
      __int16 v22 = [v57 defaultsDictionary];

      int v23 = [NSString stringWithUTF8String:"ULRecordingDurationDualBands"];
      __int16 v24 = [v22 objectForKey:v23];
      if (v24)
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          goto LABEL_25;
        }
      }
      int v25 = [&unk_2704F1260 intValue];
      goto LABEL_27;
    }
LABEL_23:
    int v21 = +[ULDefaultsSingleton shared];
    __int16 v22 = [v21 defaultsDictionary];

    int v23 = [NSString stringWithUTF8String:"ULRecordingDuration"];
    __int16 v24 = [v22 objectForKey:v23];
    if (v24)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
LABEL_25:
        int v25 = [v24 intValue];
        goto LABEL_27;
      }
    }
    int v25 = [&unk_2704F1248 intValue];
LABEL_27:
    LODWORD(v17) = v25;

    __int16 v26 = +[ULDefaultsSingleton shared];
    uint64_t v27 = [v26 defaultsDictionary];

    __int16 v28 = [NSString stringWithUTF8String:"ULRecordingDurationMaximumIncrements"];
    double v29 = [v27 objectForKey:v28];
    if (v29 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
      int v30 = [v29 intValue];
    }
    else {
      int v30 = [&unk_2704F1188 intValue];
    }
    int v31 = v30;

    int v32 = *(_DWORD *)(a1 + 104);
    int v33 = v31 - v32;
    *(_DWORD *)(a1 + 104) = v32 + 1;
    goto LABEL_47;
  }
  uint64_t v15 = (uint64_t **)(a1 + 56);
  int v16 = *(char *)(a1 + 79);
  if (v16 < 0)
  {
    if (*(void *)(a1 + 64) != 6) {
      goto LABEL_38;
    }
    uint64_t v15 = (uint64_t **)*v15;
  }
  else if (v16 != 6)
  {
    goto LABEL_38;
  }
  int v34 = *(_DWORD *)v15;
  int v35 = *((unsigned __int16 *)v15 + 2);
  if (v34 == 1953723747 && v35 == 28015)
  {
    __int16 v58 = +[ULDefaultsSingleton shared];
    long long v38 = [v58 defaultsDictionary];

    int v39 = [NSString stringWithUTF8String:"ULLocalizingDurationMinimumDualBands"];
    int v40 = [v38 objectForKey:v39];
    if (v40)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        goto LABEL_40;
      }
    }
    int v41 = [&unk_2704F1278 intValue];
    goto LABEL_42;
  }
LABEL_38:
  __int16 v37 = +[ULDefaultsSingleton shared];
  long long v38 = [v37 defaultsDictionary];

  int v39 = [NSString stringWithUTF8String:"ULLocalizingDurationMinimum"];
  int v40 = [v38 objectForKey:v39];
  if (v40)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
LABEL_40:
      int v41 = [v40 intValue];
      goto LABEL_42;
    }
  }
  int v41 = [&unk_2704F1218 intValue];
LABEL_42:
  LODWORD(v17) = v41;

  int v42 = +[ULDefaultsSingleton shared];
  __int16 v43 = [v42 defaultsDictionary];

  int v44 = [NSString stringWithUTF8String:"ULLocalizingDurationMaximumIncrements"];
  __int16 v45 = [v43 objectForKey:v44];
  if (v45 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    int v46 = [v45 intValue];
  }
  else {
    int v46 = [&unk_2704F1188 intValue];
  }
  int v47 = v46;

  int v48 = *(_DWORD *)(a1 + 100);
  int v33 = v47 - v48;
  *(_DWORD *)(a1 + 100) = v48 + 1;
LABEL_47:
  uint64_t v17 = (int)v17;
  if ((int)v17 < a2) {
    goto LABEL_48;
  }
  if (v33 <= 0)
  {
LABEL_62:
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
    }
    uint64_t v55 = logObject_MicroLocation_Default;
    if (!os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO)) {
      return 0;
    }
    LOWORD(v59) = 0;
    uint64_t v12 = "requestWifiScanExtension: no remaining extensions";
    int v13 = v55;
    os_log_type_t v14 = OS_LOG_TYPE_INFO;
    goto LABEL_66;
  }
  if (v8 > a3) {
    uint64_t v52 = a2;
  }
  else {
    uint64_t v52 = 0;
  }
  uint64_t v53 = *(unsigned __int8 *)(a1 + 53);
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
  }
  __int16 v54 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
  {
    int v59 = 68291074;
    *(_DWORD *)uint64_t v60 = 0;
    *(_WORD *)&v60[4] = 2082;
    *(void *)&v60[6] = "";
    *(_WORD *)&v60[14] = 1026;
    *(_DWORD *)&v60[16] = v8 <= a3;
    __int16 v61 = 2050;
    unint64_t v62 = a3;
    __int16 v63 = 2050;
    uint64_t v64 = ULSettings::get<ULSettings::MinimumWiFiNumberOfMeasurementsForScanExtension>();
    __int16 v65 = 2050;
    uint64_t v66 = a2;
    __int16 v67 = 2050;
    uint64_t v68 = a2;
    __int16 v69 = 2050;
    uint64_t v70 = v33;
    __int16 v71 = 2050;
    uint64_t v72 = v52;
    __int16 v73 = 2050;
    uint64_t v74 = v53;
    _os_log_impl(&dword_25631F000, v54, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLMicroLocationLogic:requestWifiScanExtension\", \"requirement for min num measurements met\":%{public}hhd, \"Num measurements\":%{public}lu, \"Minimum num of measurements for scan extension\":%{public}lu, \"requestedExtension\":%{public}lld, \"singleScanIncrement\":%{public}lld, \"remainingExtensions\":%{public}lu, \"extendDuration\":%{public}lld, \"scanActivity\":%{public, location:CLMicroLocationUtils::ScanActivity}lld}", (uint8_t *)&v59, 0x5Eu);
  }

  return v52;
}

void sub_25633E954(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::MinimumWiFiNumberOfMeasurementsForScanExtension>()
{
  os_log_t v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  uint64_t v2 = [NSString stringWithUTF8String:"ULMinimumWiFiNumberOfMeasurementsForScanExtension"];
  BOOL v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 unsignedLongValue];
  }
  else {
    uint64_t v4 = [&unk_2704F11A0 unsignedLongValue];
  }
  uint64_t v5 = v4;

  return v5;
}

void sub_25633EAF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationLogic::setCurrentRTLOI(CLMicroLocationLogic *this, uint64_t a2, uint64_t a3, uint64_t a4, CLMicroLocationProto *a5)
{
  uint64_t v6 = a2;
  uint64_t v47 = *MEMORY[0x263EF8340];
  *(void *)&long long v45 = a3;
  *((void *)&v45 + 1) = a4;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v36 = *(std::string *)a2;
  }
  std::string::size_type v8 = *((void *)this + 9);
  long long v9 = *(_OWORD *)((char *)this + 56);
  *(std::string *)((char *)this + 56) = v36;
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v9;
  v36.__r_.__value_.__r.__words[2] = v8;
  if (SHIBYTE(v8) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  *((_OWORD *)this + 5) = v45;
  CLMicroLocationLogic::reloadWifiChannelHistogram(this);
  CLMiLoServiceManager::enterLocation((uint64_t)this + 1768, (uint64_t *)v6, v45, *((uint64_t *)&v45 + 1));
  int v10 = *(char *)(v6 + 23);
  if (v10 < 0)
  {
    if (*(void *)(v6 + 8) != 6)
    {
LABEL_15:
      char v15 = 0;
      goto LABEL_16;
    }
    uint64_t v11 = *(void *)v6;
  }
  else
  {
    uint64_t v11 = v6;
    if (v10 != 6) {
      goto LABEL_15;
    }
  }
  int v12 = *(_DWORD *)v11;
  int v13 = *(unsigned __int16 *)(v11 + 4);
  if (v12 != 1953723747 || v13 != 28015) {
    goto LABEL_15;
  }
  char v15 = 1;
LABEL_16:
  CLMicroLocationSensorsLogic::setDeviceIsInCustomLoi((uint64_t)this + 712, v15);
  int v16 = *((unsigned __int8 *)this + 49);
  CLMicroLocationProto::RetrievedLoi::RetrievedLoi((CLMicroLocationProto::RetrievedLoi *)v30);
  if (!CLMicroLocationProto::ChangedLoiReason_IsValid(a5)) {
    __assert_rtn("set_reason", "microlocation.pb.h", 18621, "::CLMicroLocationProto::ChangedLoiReason_IsValid(value)");
  }
  int v32 = (int)a5;
  v35 |= 0x14u;
  uint64_t v17 = (std::string *)MEMORY[0x263F8C740];
  if (v31 == (std::string *)MEMORY[0x263F8C740]) {
    operator new();
  }
  std::string::operator=(v31, (const std::string *)v6);
  memset(&__str, 0, sizeof(__str));
  if ((boost::conversion::detail::try_lexical_convert<std::string,boost::uuids::uuid>((uint64_t)&v45, &__str) & 1) == 0)
  {
    std::bad_cast::bad_cast((std::bad_cast *)buf);
    *(void *)buf = &unk_2704DAAD0;
    boost::throw_exception<boost::bad_lexical_cast>((uint64_t)buf);
  }
  v35 |= 8u;
  if (v33 == v17) {
    operator new();
  }
  std::string::operator=(v33, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  v35 |= 0x20u;
  char v34 = v16;
  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&__p);
  __str.__r_.__value_.__r.__words[0] = boost::uuids::random_generator_pure::operator()((uint64_t)&__p);
  __str.__r_.__value_.__l.__size_ = v18;
  double v19 = cl::chrono::CFAbsoluteTimeClock::now();
  CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::RetrievedLoi>(&__str, v30, (uint64_t)buf, v19);
  (*(void (**)(CLMicroLocationLogic *, uint8_t *))(*(void *)this + 120))(this, buf);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)((char *)&v40 + 2));
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&__p);
  int v20 = *(char *)(v6 + 23);
  if (v20 < 0)
  {
    if (*(void *)(v6 + 8) != 4)
    {
LABEL_30:
      __int16 v22 = +[ULHomeSlamAnalytics shared];
      [v22 logEventExitHomeLOIAtTimestamp:cl::chrono::CFAbsoluteTimeClock::now()];
      goto LABEL_31;
    }
    int v21 = *(_DWORD **)v6;
  }
  else
  {
    int v21 = (_DWORD *)v6;
    if (v20 != 4) {
      goto LABEL_30;
    }
  }
  if (*v21 != 1701670760) {
    goto LABEL_30;
  }
  __int16 v22 = +[ULHomeSlamAnalytics shared];
  [v22 logEventEnterHomeLOIAtTimestamp:cl::chrono::CFAbsoluteTimeClock::now()];
LABEL_31:

  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
  }
  int v23 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(v6 + 23) < 0) {
      uint64_t v6 = *(void *)v6;
    }
    memset(&__p, 0, sizeof(__p));
    if ((boost::conversion::detail::try_lexical_convert<std::string,boost::uuids::uuid>((uint64_t)&v45, &__p) & 1) == 0)
    {
      __int16 v28 = std::bad_cast::bad_cast((std::bad_cast *)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_2704DAAD0;
      boost::throw_exception<boost::bad_lexical_cast>((uint64_t)v28);
    }
    int v24 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    std::string::size_type v25 = __p.__r_.__value_.__r.__words[0];
    CLMicroLocationProtobufHelper::convertChangedLoiReasonToMessage((int)a5, &__str);
    p_p = &__p;
    if (v24 < 0) {
      p_p = (std::string *)v25;
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_str = &__str;
    }
    else {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 68290051;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)long long v38 = 2082;
    *(void *)&v38[2] = "";
    *(_WORD *)&v38[10] = 2081;
    *(void *)&v38[12] = v6;
    __int16 v39 = 2081;
    int v40 = p_p;
    __int16 v41 = 2081;
    int v42 = p_str;
    __int16 v43 = 1025;
    int v44 = v16;
    _os_log_impl(&dword_25631F000, v23, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Set current LOI.\", \"type\":%{private, location:escape_only}s, \"id\":%{private, location:escape_only}s, \"reason\":%{private, location:escape_only}s, \"is spectating\":%{private}hhd}", buf, 0x36u);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }

  CLMicroLocationProto::RetrievedLoi::~RetrievedLoi((CLMicroLocationProto::RetrievedLoi *)v30);
}

void sub_25633F038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::exception a30)
{
  CLMicroLocationProto::RetrievedLoi::~RetrievedLoi((CLMicroLocationProto::RetrievedLoi *)&a15);
  _Unwind_Resume(a1);
}

void CLMicroLocationLogic::reloadWifiChannelHistogram(CLMicroLocationLogic *this)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  long long v42 = *((_OWORD *)this + 5);
  if (*((char *)this + 79) < 0) {
    std::string::__init_copy_ctor_external(&v26, *((const std::string::value_type **)this + 7), *((void *)this + 8));
  }
  else {
    std::string v26 = *(std::string *)((char *)this + 56);
  }
  id v2 = *(id *)(*((void *)this + 16) + 32);
  BOOL v3 = v2;
  if (v2)
  {
    [v2 fetchMostRecentWifiChannelHistogramAtLoi:&v42];
  }
  else
  {
    uint64_t v41 = 0;
    memset(v40, 0, sizeof(v40));
  }

  if (!(_BYTE)v41)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
    }
    uint64_t v4 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      std::string __p = 0;
      *(void *)__int16 v28 = 0;
      *(void *)&v28[8] = 0;
      if ((boost::conversion::detail::try_lexical_convert<std::string,boost::uuids::uuid>((uint64_t)&v42, (std::string *)&__p) & 1) == 0)
      {
        std::bad_cast::bad_cast((std::bad_cast *)__src);
        *(void *)__src = &unk_2704DAAD0;
        boost::throw_exception<boost::bad_lexical_cast>((uint64_t)__src);
      }
      p_p = &__p;
      if (v28[15] < 0) {
        p_p = __p;
      }
      uint64_t v6 = &v26;
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v6 = (std::string *)v26.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136380931;
      *(void *)&uint8_t buf[4] = p_p;
      *(_WORD *)&buf[12] = 2081;
      *(void *)&buf[14] = v6;
      _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_DEBUG, "Don't have a current wifi channel histogram for this LOI id %{private}s. Using histogram using LOI type only %{private}s.", buf, 0x16u);
      if ((v28[15] & 0x80000000) != 0) {
        operator delete(__p);
      }
    }

    id v7 = *(id *)(*((void *)this + 16) + 32);
    std::string::size_type v8 = v7;
    std::string __p = 0;
    *(void *)__int16 v28 = 0;
    if (v7)
    {
      [v7 fetchMostRecentWifiChannelHistogramAtLoi:&__p];
    }
    else
    {
      *(void *)&long long v36 = 0;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      *(_OWORD *)__src = 0u;
    }
    std::__optional_storage_base<CLMicroLocationConfigurationTable::Entry,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<CLMicroLocationConfigurationTable::Entry,false>>((uint64_t)v40, (uint64_t)__src);
    std::__optional_destruct_base<CLMicroLocationConfigurationTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__src);

    if (!(_BYTE)v41)
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
      }
      long long v9 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
      {
        int v10 = &v26;
        if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          int v10 = (std::string *)v26.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)__src = 136380675;
        *(void *)&__src[4] = v10;
        _os_log_impl(&dword_25631F000, v9, OS_LOG_TYPE_DEBUG, "Don't have wifi channel histogram for current LOI type %{private}s. Using default wifi histogram", __src, 0xCu);
      }
    }
  }
  uint64_t v11 = operator new(0x68uLL);
  *(void *)&buf[16] = (char *)v11 + 104;
  *uint64_t v11 = xmmword_256514630;
  v11[1] = xmmword_256514640;
  v11[2] = xmmword_256514650;
  v11[3] = xmmword_256514660;
  v11[4] = xmmword_256514670;
  v11[5] = xmmword_256514680;
  *((void *)v11 + 12) = 13;
  *(void *)buf = v11;
  *(void *)&uint8_t buf[8] = (char *)v11 + 104;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v26.__r_.__value_.__l.__size_ != 6) {
      goto LABEL_39;
    }
    int v12 = (std::string *)v26.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) != 6) {
      goto LABEL_39;
    }
    int v12 = &v26;
  }
  int data = (int)v12->__r_.__value_.__l.__data_;
  int v14 = WORD2(v12->__r_.__value_.__r.__words[0]);
  if (data == 1953723747 && v14 == 28015)
  {
    *(_OWORD *)__src = xmmword_256514630;
    long long v30 = xmmword_256514640;
    long long v31 = xmmword_256514650;
    long long v32 = xmmword_256514660;
    long long v33 = xmmword_256514670;
    long long v34 = xmmword_256514680;
    long long v35 = xmmword_256514690;
    long long v36 = xmmword_2565146A0;
    v37[0] = xmmword_2565146B0;
    v37[1] = xmmword_2565146C0;
    v37[2] = xmmword_2565146D0;
    v37[3] = xmmword_2565146E0;
    v37[4] = xmmword_2565146F0;
    std::vector<CLMicroLocationWiFiChannelHistogram>::__assign_with_size[abi:ne180100]<CLMicroLocationWiFiChannelHistogram const*,CLMicroLocationWiFiChannelHistogram const*>((char *)buf, (char *)__src, (uint64_t)&v38, 0x1AuLL);
  }
LABEL_39:
  if ((_BYTE)v41)
  {
    CLMicroLocationWiFiChannelHistogramAnalyzer::histogramFromProtobuf((uint64_t)&v40[56], (unsigned __int8 *)&v26, (void **)__src);
    if (*(void *)buf)
    {
      *(void *)&uint8_t buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }
    *(_OWORD *)buf = *(_OWORD *)__src;
    *(void *)&buf[16] = v30;
  }
  CLMicroLocationSensorsLogic::reloadWifiChannelHistogram((uint64_t)this + 712, (uint64_t)buf);
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
  }
  int v16 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__src = 0;
    _os_log_impl(&dword_25631F000, v16, OS_LOG_TYPE_DEFAULT, "Reloaded wifi channel histogram", __src, 2u);
  }
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
  }
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO))
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__src);
    uint64_t v17 = *(void *)buf;
    for (uint64_t i = *(void *)&buf[8]; v17 != i; v17 += 8)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"channel: ", 9);
      double v19 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" count: ", 8);
      int v20 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", ", 2);
    }
    std::stringbuf::str();
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
    }
    int v21 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO))
    {
      __int16 v22 = &v24;
      if (v25 < 0) {
        __int16 v22 = v24;
      }
      std::string __p = (void *)68289283;
      *(_WORD *)__int16 v28 = 2082;
      *(void *)&v28[2] = "";
      *(_WORD *)&v28[10] = 2081;
      *(void *)&v28[12] = v22;
      _os_log_impl(&dword_25631F000, v21, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Wifi channel histogram:\", \"Histogram\":%{private, location:escape_only}s}", (uint8_t *)&__p, 0x1Cu);
    }
    if (v25 < 0) {
      operator delete(v24);
    }
    *(void *)__src = *MEMORY[0x263F8C2B8];
    uint64_t v23 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    *(void *)&__src[*(void *)(*(void *)__src - 24)] = *(void *)(MEMORY[0x263F8C2B8] + 64);
    *(void *)&long long v30 = v23;
    *((void *)&v30 + 1) = MEMORY[0x263F8C318] + 16;
    if (SHIBYTE(v35) < 0) {
      operator delete(*((void **)&v34 + 1));
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x25A2A6280](v37);
  }
  if (*(void *)buf)
  {
    *(void *)&uint8_t buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }
  std::__optional_destruct_base<CLMicroLocationConfigurationTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v40);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
}

void sub_25633F848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,std::exception a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  std::__optional_destruct_base<CLMicroLocationConfigurationTable::Entry,false>::~__optional_destruct_base[abi:ne180100](v60 - 240);
  if (a18 < 0) {
    operator delete(a13);
  }
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::RetrievedLoi>(_OWORD *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  CLMicroLocationProto::ReceivedEvent::ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
  CLMicroLocationProtobufHelper::setSpecificLoggedEvent((CLMicroLocationProtobufHelper *)v9, (CLMicroLocationProto::ReceivedEvent *)a2, v8);
  CLMicroLocationLoggedEventsTable::Entry::Entry(a3, a1, a2[6], (CLMicroLocationProto::ReceivedEvent *)v9, a4);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
}

void sub_25633F978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void CLMicroLocationLogic::startRapportSessionIfStopped(CLMicroLocationLogic *this)
{
  id v2 = (CLMicroLocationLogic *)((char *)this + 1464);
  CLMicroLocationRapportMonitor::setCurrentLOIType((std::string *)this + 61, (const std::string *)((char *)this + 56));
  CLMicroLocationRapportMonitor::setCurrentLoiGroupId(v2, (__n128 *)this + 5);
  if (*((unsigned char *)this + 54))
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
    }
    BOOL v3 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_25631F000, v3, OS_LOG_TYPE_DEFAULT, "Rapport, rapport session already running", buf, 2u);
    }
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
    }
    uint64_t v4 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_DEFAULT, "Rapport, start rapport session", v5, 2u);
    }
    (*(void (**)(void))(**((void **)this + 323) + 88))(*((void *)this + 323));
    CLMicroLocationLogic::State::setRapportSessionRunning((CLMicroLocationLogic *)((char *)this + 48), 1);
  }
}

double CLMicroLocationLogic::stopRapportSessionIfRunning(CLMicroLocationLogic *this)
{
  if (*((unsigned char *)this + 54))
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
    }
    id v2 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_DEFAULT, "Rapport, stopping rapport session", buf, 2u);
    }
    (*(void (**)(void))(**((void **)this + 323) + 96))(*((void *)this + 323));
    CLMicroLocationRapportMonitor::backup((CLMicroLocationLogic *)((char *)this + 1464));
    CLMicroLocationRapportMonitor::reset((CLMicroLocationLogic *)((char *)this + 1464));
    CLMicroLocationLogic::State::setRapportSessionRunning((CLMicroLocationLogic *)((char *)this + 48), 0);
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
    }
    BOOL v3 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_25631F000, v3, OS_LOG_TYPE_DEFAULT, "Rapport, rapport session already stopped", v5, 2u);
    }
  }
  CLMicroLocationRapportMonitor::setCurrentLOIType((std::string *)this + 61, (const std::string *)((char *)this + 56));
  *(void *)&double result = CLMicroLocationRapportMonitor::setCurrentLoiGroupId((CLMicroLocationLogic *)((char *)this + 1464), (__n128 *)this + 5).n128_u64[0];
  return result;
}

void CLMicroLocationLogic::onUpdateSpectating(CLMicroLocationLogic *this, int a2)
{
  v37[39] = *MEMORY[0x263EF8340];
  int v3 = *((unsigned __int8 *)this + 49);
  if (a2)
  {
    if (!*((unsigned char *)this + 49))
    {
      uint64_t v4 = +[ULTransactionManager shared];
      [v4 beginTransaction:@"com.apple.milod.CLMicroLocationLogic.Spectating"];

      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
      }
      uint64_t v5 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_25631F000, v5, OS_LOG_TYPE_DEFAULT, "CLMicroLocationLogic: startSpectating", buf, 2u);
      }
      int v34 = 0;
      boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v34);
      *(void *)&long long v35 = boost::uuids::random_generator_pure::operator()((uint64_t)&v34);
      *((void *)&v35 + 1) = v6;
      double v7 = cl::chrono::CFAbsoluteTimeClock::now();
      CLMicroLocationProto::StartSpectating::StartSpectating((CLMicroLocationProto::StartSpectating *)v31);
      CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::StartSpectating>(&v35, v31, (uint64_t)buf, v7);
      (*(void (**)(CLMicroLocationLogic *, uint8_t *))(*(void *)this + 120))(this, buf);
      CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v37);
      CLMicroLocationProto::StartSpectating::~StartSpectating((CLMicroLocationProto::StartSpectating *)v31);
      boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v34);
    }
    CLMicroLocationSensorsLogic::startSpectatingSensors((id *)this + 89);
    std::string::size_type v8 = +[ULDefaultsSingleton shared];
    long long v9 = [v8 defaultsDictionary];

    int v10 = [NSString stringWithUTF8String:"ULRapportUsageEnabled"];
    uint64_t v11 = [v9 objectForKey:v10];
    if (v11 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
      int v12 = [v11 BOOLValue];
    }
    else {
      int v12 = [MEMORY[0x263EFFA88] BOOLValue];
    }
    int v20 = v12;

    if (v20) {
      CLMicroLocationLogic::startRapportSessionIfStopped(this);
    }
    else {
      CLMicroLocationLogic::stopRapportSessionIfRunning(this);
    }
    *((unsigned char *)this + 49) = 1;
    CLMicroLocationTriggerManager::setSpectatingEnabled((CLMicroLocationLogic *)((char *)this + 1560), 1);
    if (ULSettings::get<ULSettings::PedestrianFenceWhenSpectatingEnabled>())
    {
      (*(void (**)(CLMicroLocationLogic *))(*(void *)this + 312))(this);
      (*(void (**)(CLMicroLocationLogic *))(*(void *)this + 328))(this);
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
      }
      int v21 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_25631F000, v21, OS_LOG_TYPE_DEFAULT, "Starting Motion Session MiLo is starting spectating", buf, 2u);
      }
      CLMicroLocationProto::MotionEvent::MotionEvent((CLMicroLocationProto::MotionEvent *)v31);
      if (!CLMicroLocationProto::MotionEvent_Status_IsValid((CLMicroLocationProto *)2)) {
        __assert_rtn("set_status", "microlocation.pb.h", 18149, "::CLMicroLocationProto::MotionEvent_Status_IsValid(value)");
      }
      v33 |= 4u;
      int v32 = 2;
      int v34 = 0;
      boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v34);
      *(void *)&long long v35 = boost::uuids::random_generator_pure::operator()((uint64_t)&v34);
      *((void *)&v35 + 1) = v22;
      double v23 = cl::chrono::CFAbsoluteTimeClock::now();
      CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::MotionEvent>(&v35, v31, (uint64_t)buf, v23);
      (*(void (**)(CLMicroLocationLogic *, uint8_t *))(*(void *)this + 120))(this, buf);
      CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v37);
      boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v34);
      CLMicroLocationProto::MotionEvent::~MotionEvent((CLMicroLocationProto::MotionEvent *)v31);
    }
    else
    {
      int v24 = +[ULDefaultsSingleton shared];
      char v25 = [v24 defaultsDictionary];

      std::string v26 = [NSString stringWithUTF8String:"ULForceOdometeryMonitoring"];
      uint64_t v27 = [v25 objectForKey:v26];
      if (v27 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
        int v28 = [v27 BOOLValue];
      }
      else {
        int v28 = [MEMORY[0x263EFFA80] BOOLValue];
      }
      int v29 = v28;

      if (v29)
      {
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
        }
        long long v30 = logObject_MicroLocation_Default;
        if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_25631F000, v30, OS_LOG_TYPE_DEFAULT, "MiLo is starting spectating, force odometery monitoring", buf, 2u);
        }
        (*(void (**)(CLMicroLocationLogic *))(*(void *)this + 328))(this);
      }
    }
  }
  else
  {
    CLMicroLocationSensorsLogic::stopSpectatingSensors((CLMicroLocationLogic *)((char *)this + 712));
    CLMicroLocationLogic::stopRapportSessionIfRunning(this);
    CLMicroLocationLogic::stopCurrentRecordingOrLocalization((uint64_t)this, 1u);
    CLMicroLocationLocalizationController::invalidateCachedLocalizationInput((CLMicroLocationLogic *)((char *)this + 168));
    *((unsigned char *)this + 49) = 0;
    CLMicroLocationTriggerManager::setSpectatingEnabled((CLMicroLocationLogic *)((char *)this + 1560), 0);
    if (ULSettings::get<ULSettings::PedestrianFenceWhenSpectatingEnabled>())
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
      }
      int v13 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_25631F000, v13, OS_LOG_TYPE_DEFAULT, "Stopping PDR Fence because MiLo is no longer spectating", buf, 2u);
      }
      CLMicroLocationProto::MotionEvent::MotionEvent((CLMicroLocationProto::MotionEvent *)v31);
      if (!CLMicroLocationProto::MotionEvent_Status_IsValid((CLMicroLocationProto *)3)) {
        __assert_rtn("set_status", "microlocation.pb.h", 18149, "::CLMicroLocationProto::MotionEvent_Status_IsValid(value)");
      }
      v33 |= 4u;
      int v32 = 3;
      int v34 = 0;
      boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v34);
      *(void *)&long long v35 = boost::uuids::random_generator_pure::operator()((uint64_t)&v34);
      *((void *)&v35 + 1) = v14;
      double v15 = cl::chrono::CFAbsoluteTimeClock::now();
      CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::MotionEvent>(&v35, v31, (uint64_t)buf, v15);
      (*(void (**)(CLMicroLocationLogic *, uint8_t *))(*(void *)this + 120))(this, buf);
      CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v37);
      boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v34);
      CLMicroLocationProto::MotionEvent::~MotionEvent((CLMicroLocationProto::MotionEvent *)v31);
    }
    if (v3)
    {
      int v16 = +[ULTransactionManager shared];
      [v16 endTransaction:@"com.apple.milod.CLMicroLocationLogic.Spectating"];

      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
      }
      uint64_t v17 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_25631F000, v17, OS_LOG_TYPE_DEFAULT, "CLMicroLocationLogic: Stop Spectating", buf, 2u);
      }
      int v34 = 0;
      boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v34);
      *(void *)&long long v35 = boost::uuids::random_generator_pure::operator()((uint64_t)&v34);
      *((void *)&v35 + 1) = v18;
      double v19 = cl::chrono::CFAbsoluteTimeClock::now();
      CLMicroLocationProto::StopSpectating::StopSpectating((CLMicroLocationProto::StopSpectating *)v31);
      CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::StopSpectating>(&v35, v31, (uint64_t)buf, v19);
      (*(void (**)(CLMicroLocationLogic *, uint8_t *))(*(void *)this + 120))(this, buf);
      CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v37);
      CLMicroLocationProto::StopSpectating::~StopSpectating((CLMicroLocationProto::StopSpectating *)v31);
      boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v34);
    }
  }
}

void sub_2563403E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::StartSpectating>(_OWORD *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  CLMicroLocationProto::ReceivedEvent::ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
  CLMicroLocationProtobufHelper::setSpecificLoggedEvent((CLMicroLocationProtobufHelper *)v9, (CLMicroLocationProto::ReceivedEvent *)a2, v8);
  CLMicroLocationLoggedEventsTable::Entry::Entry(a3, a1, a2[2], (CLMicroLocationProto::ReceivedEvent *)v9, a4);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
}

void sub_256340594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ULSettings::get<ULSettings::PedestrianFenceWhenSpectatingEnabled>()
{
  os_log_t v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  id v2 = [NSString stringWithUTF8String:"ULPedestrianFenceWhenSpectatingEnabled"];
  int v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 BOOLValue];
  }
  else {
    uint64_t v4 = [MEMORY[0x263EFFA80] BOOLValue];
  }
  uint64_t v5 = v4;

  return v5;
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  os_log_t v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  id v2 = [NSString stringWithUTF8String:"ULPedestrianFenceWhenSpectatingEnabled"];
  int v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 BOOLValue];
  }
  else {
    uint64_t v4 = [MEMORY[0x263EFFA80] BOOLValue];
  }
  uint64_t v5 = v4;

  return v5;
}

void sub_25634066C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationLogic::stopCurrentRecordingOrLocalization(uint64_t a1, unsigned int a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  int v3 = *(unsigned __int8 *)(a1 + 53);
  if (v3 == 2)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
    }
    uint64_t v5 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      LOWORD(v10) = 2082;
      *(void *)((char *)&v10 + 2) = "";
      _os_log_impl(&dword_25631F000, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"interrupting an ongoing recording\"}", buf, 0x12u);
    }
    CLMicroLocationSensorsLogic::onRecordingOrLocalizingInterrupted((CLMicroLocationSensorsLogic *)(a1 + 712));
    v12[0] = 0;
    v12[1] = 0;
    *(void *)buf = 0;
    long long v10 = 0uLL;
    uint64_t v11 = (uint64_t *)v12;
    int v13 = 2;
    int v8 = 2;
    std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__emplace_unique_key_args<CLMicroLocationRecordingCompletionMetaInformation::RecordingError,CLMicroLocationRecordingCompletionMetaInformation::RecordingError>(&v11, &v8, &v8);
    CLMicroLocationLogic::stopRecording(a1, (uint64_t)buf);
    std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&v11, v12[0]);
  }
  else if (v3 == 1)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
    }
    double v7 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      LOWORD(v10) = 2082;
      *(void *)((char *)&v10 + 2) = "";
      _os_log_impl(&dword_25631F000, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"interrupting an ongoing localization\"}", buf, 0x12u);
    }
    CLMicroLocationSensorsLogic::onRecordingOrLocalizingInterrupted((CLMicroLocationSensorsLogic *)(a1 + 712));
    CLMicroLocationLogic::stopLocalizing(a1, a2);
  }
  else if (!*(unsigned char *)(a1 + 53))
  {
    uint64_t v4 = (CLMicroLocationRecorder *)(a1 + 664);
    CLMicroLocationRecorder::clearPendingRecordsBuff(v4);
  }
}

void sub_2563408DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy(v15, a15);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::StopSpectating>(_OWORD *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  CLMicroLocationProto::ReceivedEvent::ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
  CLMicroLocationProtobufHelper::setSpecificLoggedEvent((CLMicroLocationProtobufHelper *)v9, (CLMicroLocationProto::ReceivedEvent *)a2, v8);
  CLMicroLocationLoggedEventsTable::Entry::Entry(a3, a1, a2[2], (CLMicroLocationProto::ReceivedEvent *)v9, a4);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
}

void sub_256340978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void non-virtual thunk to'CLMicroLocationLogic::onUpdateSpectating(CLMicroLocationLogic *this, int a2)
{
}

void CLMicroLocationLogic::onRapportCompanionDeviceFound(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  if (!*(unsigned char *)(a1 + 54))
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
    }
    int v8 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long v9 = 0;
      _os_log_impl(&dword_25631F000, v8, OS_LOG_TYPE_DEBUG, "Rapport device found while session is not running", v9, 2u);
    }
  }
  if (CLMicroLocationsMeasurementFilters::isAnchorModelValid(a3, (std::locale::__imp **)(a1 + 2600))) {
    CLMicroLocationRapportMonitor::deviceFound(a1 + 1464, a2, a4);
  }
}

void CLMicroLocationLogic::setLocationServicesEnabled(CLMicroLocationLogic *this, int a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
  }
  uint64_t v4 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = "disabled";
    if (a2) {
      uint64_t v5 = "enabled";
    }
    int v6 = 136446210;
    double v7 = v5;
    _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_DEBUG, "Location services set to %{public}s", (uint8_t *)&v6, 0xCu);
  }
  *((unsigned char *)this + 50) = a2;
  CLMicroLocationLogic::updateEnabled(this);
}

void CLMicroLocationLogic::setSignificantLocationsEnabled(CLMicroLocationLogic *this, int a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
  }
  uint64_t v4 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = "disabled";
    if (a2) {
      uint64_t v5 = "enabled";
    }
    int v6 = 136446210;
    double v7 = v5;
    _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_DEBUG, "Significant locations set to %{public}s", (uint8_t *)&v6, 0xCu);
  }
  *((unsigned char *)this + 51) = a2;
  CLMicroLocationLogic::updateEnabled(this);
}

void CLMicroLocationLogic::setPlatformSupport(CLMicroLocationLogic *this, int a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
  }
  uint64_t v4 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = "False";
    if (a2) {
      uint64_t v5 = "True";
    }
    int v6 = 136446210;
    double v7 = v5;
    _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_INFO, "Platform support for milo is set to %{public}s", (uint8_t *)&v6, 0xCu);
  }
  *((unsigned char *)this + 52) = a2;
}

uint64_t CLMicroLocationLogic::onResetLocationData(CLMicroLocationLogic *this)
{
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
  }
  id v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_DEFAULT, "Got request to reset Location data. Dropping microlocation tables", buf, 2u);
  }
  *(void *)buf = 0;
  uint64_t v8 = buf;
  uint64_t v9 = 0x2020000000;
  char v10 = 0;
  int v3 = +[ULTransactionManager shared];
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 3221225472;
  _DWORD v6[2] = ___ZN20CLMicroLocationLogic19onResetLocationDataEv_block_invoke;
  void v6[3] = &unk_2653F9128;
  v6[4] = buf;
  v6[5] = this;
  [v3 performUnderTransaction:@"com.apple.milod.deleteLocationData" block:v6];

  CLMiLoServiceManager::updateAllModels((CLMicroLocationLogic *)((char *)this + 1768));
  CLMicroLocationLoiManager::fetchPlaceInferenceForReason((uint64_t)this + 2024, 12);
  uint64_t v4 = v8[24];
  _Block_object_dispose(buf, 8);
  return v4;
}

void sub_256340E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN20CLMicroLocationLogic19onResetLocationDataEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = ULDatabase::dropTables(*(ULDatabase **)(v1 + 128));
  id v2 = [[ULBackupAndRestore alloc] initWithDatabase:*(void *)(v1 + 128) andEventLogger:v1 + 136];
  [(ULBackupAndRestore *)v2 deleteBackupFiles];
}

void sub_256340F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationLogic::setDisplayState(unsigned char *a1, int a2, double *a3)
{
  a1[108] = a2;
  if (a2)
  {
    CLMicroLocationLogic::requestLocalizationIfWiFiErrorRetryLimitReached((CLMicroLocationLogic *)a1, "display on");
    CLMicroLocationLogic::triggerFallbackLocalization((CLMicroLocationLogic *)a1);
    int v6 = +[ULHomeSlamAnalytics shared];
    [v6 logEventScreenOnAtTimestamp:*a3];
  }
  else
  {
    double v7 = +[ULHomeSlamAnalytics shared];
    [v7 logEventScreenOffAtTimestamp:*a3];

    if ((ULSettings::get<ULSettings::OffScreenScanEnabled>() & 1) == 0) {
      CLMicroLocationLogic::stopCurrentRecordingOrLocalization((uint64_t)a1, 4u);
    }
  }
  CLMicroLocationSensorsLogic::onDisplayStateChange((uint64_t)(a1 + 712), a2, a3);
  CLMicroLocationTriggerManager::onDisplayState((CLMicroLocationTriggerManager *)(a1 + 1560), a2);
}

void sub_256341010(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationLogic::requestLocalizationIfWiFiErrorRetryLimitReached(CLMicroLocationLogic *this, const char *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 49) && !*((unsigned char *)this + 120))
  {
    *((void *)this + 14) = 0;
    *((unsigned char *)this + 120) = 1;
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
    }
    uint64_t v4 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO))
    {
      v6[0] = 68289282;
      v6[1] = 0;
      __int16 v7 = 2082;
      uint64_t v8 = "";
      __int16 v9 = 2082;
      char v10 = a2;
      _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"localization retries have been exhausted, reset counters and trying another localization\", \"reason\":%{public, location:escape_only}s}", (uint8_t *)v6, 0x1Cu);
    }
    double v5 = cl::chrono::CFAbsoluteTimeClock::now();
    CLMicroLocationLogic::createLocalizationTriggerWithOptAssociatedAccessPointInfo((uint64_t)this, (uint64_t)"InternalClientLogic", 0, (uint64_t)v6, v5);
    CLMicroLocationTriggerManager::requestLocalization((uint64_t)this + 1560, (const CLMicroLocationProto::RecordingEvent *)v6, 1, 0, 0);
    CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v6);
  }
}

void sub_25634116C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void CLMicroLocationLogic::triggerFallbackLocalization(CLMicroLocationLogic *this)
{
  if (*((unsigned char *)this + 49))
  {
    double v2 = cl::chrono::CFAbsoluteTimeClock::now();
    CLMicroLocationLogic::createLocalizationTriggerWithOptAssociatedAccessPointInfo((uint64_t)this, (uint64_t)"InternalClientScreenOnFallback", 0, (uint64_t)v3, v2);
    CLMicroLocationTriggerManager::triggerFallbackLocalizationEvent((CLMicroLocationLogic *)((char *)this + 1560), (const CLMicroLocationProto::RecordingEvent *)v3);
    CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v3);
  }
}

void sub_2563411E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void CLMicroLocationLogic::setAPWakeState(CLMicroLocationLogic *this, int a2)
{
  *((unsigned char *)this + 109) = a2;
  CLMicroLocationSensorsLogic::onAPWakeStateChange((CLMicroLocationLogic *)((char *)this + 712), a2);
  CLMicroLocationTriggerManager::onAPWakeState((CLMicroLocationLogic *)((char *)this + 1560), a2);
  if ((a2 & 1) == 0)
  {
    CLMicroLocationLogic::stopCurrentRecordingOrLocalization((uint64_t)this, 4u);
  }
}

uint64_t CLMicroLocationLogic::getDisplayState(CLMicroLocationLogic *this)
{
  return *((unsigned __int8 *)this + 108);
}

uint64_t non-virtual thunk to'CLMicroLocationLogic::getDisplayState(CLMicroLocationLogic *this)
{
  return *((unsigned __int8 *)this + 100);
}

uint64_t CLMicroLocationLogic::isAPWake(CLMicroLocationLogic *this)
{
  return *((unsigned __int8 *)this + 109);
}

uint64_t non-virtual thunk to'CLMicroLocationLogic::isAPWake(CLMicroLocationLogic *this)
{
  return *((unsigned __int8 *)this + 101);
}

void *CLMicroLocationLogic::currentAssociatedState(CLMicroLocationLogic *this)
{
  return CLMicroLocationSensorsLogic::State::isAssociatedToWifi((CLMicroLocationLogic *)((char *)this + 720));
}

void *non-virtual thunk to'CLMicroLocationLogic::currentAssociatedState(CLMicroLocationLogic *this)
{
  return CLMicroLocationSensorsLogic::State::isAssociatedToWifi((CLMicroLocationLogic *)((char *)this + 712));
}

id CLMicroLocationLogic::currentAssociatedWifiAPInfo(id *this)
{
  return CLMicroLocationSensorsLogic::State::currentAssociatedWiFiAPInfo(this + 90);
}

id non-virtual thunk to'CLMicroLocationLogic::currentAssociatedWifiAPInfo(id *this)
{
  return CLMicroLocationSensorsLogic::State::currentAssociatedWiFiAPInfo(this + 89);
}

void CLMicroLocationLogic::startStaticDetector(CLMicroLocationLogic *this)
{
  *((unsigned char *)this + 2592) = 1;
  CLMicroLocationTriggerManager::onDeviceStaticState((CLMiLoCustomLoiRecordingManager **)this + 195, *((unsigned char *)this + 127));
}

void non-virtual thunk to'CLMicroLocationLogic::startStaticDetector(CLMicroLocationLogic *this)
{
  *((unsigned char *)this + 2584) = 1;
  CLMicroLocationTriggerManager::onDeviceStaticState((CLMiLoCustomLoiRecordingManager **)this + 194, *((unsigned char *)this + 119));
}

uint64_t CLMicroLocationLogic::stopStaticDetector(uint64_t this)
{
  *(unsigned char *)(this + 2592) = 0;
  return this;
}

uint64_t non-virtual thunk to'CLMicroLocationLogic::stopStaticDetector(uint64_t this)
{
  *(unsigned char *)(this + 2584) = 0;
  return this;
}

uint64_t CLMicroLocationLogic::setRecordingFence(CLMicroLocationLogic *this)
{
  return CLMicroLocationSensorsLogic::startCustomLoiRecordingFence((CLMicroLocationLogic *)((char *)this + 712));
}

uint64_t non-virtual thunk to'CLMicroLocationLogic::setRecordingFence(CLMicroLocationLogic *this)
{
  return CLMicroLocationSensorsLogic::startCustomLoiRecordingFence((CLMicroLocationLogic *)((char *)this + 704));
}

uint64_t CLMicroLocationLogic::clearRecordingFence(CLMicroLocationLogic *this)
{
  return CLMicroLocationSensorsLogic::teardownCustomLoiRecordingFence((CLMicroLocationLogic *)((char *)this + 712));
}

uint64_t non-virtual thunk to'CLMicroLocationLogic::clearRecordingFence(CLMicroLocationLogic *this)
{
  return CLMicroLocationSensorsLogic::teardownCustomLoiRecordingFence((CLMicroLocationLogic *)((char *)this + 704));
}

void CLMicroLocationLogic::onCustomLoiRecordingSessionCompleted(CLMicroLocationLogic *this)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (*((char *)this + 79) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 7), *((void *)this + 8));
  }
  else {
    std::string __p = *(std::string *)((char *)this + 56);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__p.__r_.__value_.__l.__size_ != 6) {
      goto LABEL_13;
    }
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) != 6) {
      goto LABEL_13;
    }
    p_p = &__p;
  }
  int data = (int)p_p->__r_.__value_.__l.__data_;
  int v4 = WORD2(p_p->__r_.__value_.__r.__words[0]);
  if (data == 1953723747 && v4 == 28015)
  {
    (*(void (**)(void, char *))(**((void **)this + 323) + 112))(*((void *)this + 323), (char *)this + 80);
    goto LABEL_26;
  }
LABEL_13:
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
  }
  int v6 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
  {
    __int16 v7 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      __int16 v7 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 68289282;
    int v12 = 0;
    __int16 v13 = 2082;
    uint64_t v14 = "";
    __int16 v15 = 2082;
    int v16 = v7;
    _os_log_impl(&dword_25631F000, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"onCustomLoiRecordingSessionCompleted while current LOI is not custom\", \"current LOI type\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
  }
  uint64_t v8 = logObject_MicroLocation_Default;
  if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
  {
    __int16 v9 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      __int16 v9 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 68289282;
    int v12 = 0;
    __int16 v13 = 2082;
    uint64_t v14 = "";
    __int16 v15 = 2082;
    int v16 = v9;
    _os_signpost_emit_with_name_impl(&dword_25631F000, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "onCustomLoiRecordingSessionCompleted while current LOI is not custom", "{\"msg%{public}.0s\":\"onCustomLoiRecordingSessionCompleted while current LOI is not custom\", \"current LOI type\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
LABEL_26:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_256341560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'CLMicroLocationLogic::onCustomLoiRecordingSessionCompleted(CLMicroLocationLogic *this)
{
}

void CLMicroLocationLogic::setLockScreenState(CLMicroLocationLogic *this, char a2)
{
  v13[39] = *MEMORY[0x263EF8340];
  CLMicroLocationProto::ScreenStateUpdate::ScreenStateUpdate((uint64_t)v8);
  v10 |= 2u;
  char v9 = a2;
  int v7 = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v7);
  *(void *)&long long v11 = boost::uuids::random_generator_pure::operator()((uint64_t)&v7);
  *((void *)&v11 + 1) = v4;
  double v5 = cl::chrono::CFAbsoluteTimeClock::now();
  CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::ScreenStateUpdate>(&v11, v8, (uint64_t)buf, v5);
  (*(void (**)(CLMicroLocationLogic *, uint8_t *))(*(void *)this + 120))(this, buf);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v13);
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v7);
  if (*((unsigned char *)this + 125) && (a2 & 1) == 0)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
    }
    int v6 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_25631F000, v6, OS_LOG_TYPE_INFO, "FBSDisplay, lock screen transition to unlock screen", buf, 2u);
    }
    CLMicroLocationLogic::onScreenUnlocked(this);
  }
  *((unsigned char *)this + 125) = a2;
  CLMicroLocationProto::ScreenStateUpdate::~ScreenStateUpdate((CLMicroLocationProto::ScreenStateUpdate *)v8);
}

void sub_2563416F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CLMicroLocationProto::ScreenStateUpdate::~ScreenStateUpdate((CLMicroLocationProto::ScreenStateUpdate *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::ScreenStateUpdate>(_OWORD *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  CLMicroLocationProto::ReceivedEvent::ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
  CLMicroLocationProtobufHelper::setSpecificLoggedEvent((CLMicroLocationProtobufHelper *)v9, (CLMicroLocationProto::ReceivedEvent *)a2, v8);
  CLMicroLocationLoggedEventsTable::Entry::Entry(a3, a1, a2[2], (CLMicroLocationProto::ReceivedEvent *)v9, a4);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
}

void sub_2563417B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void CLMicroLocationLogic::onScreenUnlocked(CLMicroLocationLogic *this)
{
  CLMicroLocationLogic::migrateFromLocationdIfNecessary(this);
  double v2 = cl::chrono::CFAbsoluteTimeClock::now();
  CLMicroLocationLogic::createLocalizationTriggerWithOptAssociatedAccessPointInfo((uint64_t)this, (uint64_t)"InternalClientScreenUnlock", 0, (uint64_t)v10, v2);
  int v3 = CLMicroLocationTriggerManager::triggerScreenUnlockLocalizationIfNeeded((CLMicroLocationLogic *)((char *)this + 1560), (const CLMicroLocationProto::RecordingEvent *)v10);
  uint64_t v4 = +[ULDefaultsSingleton shared];
  double v5 = [v4 defaultsDictionary];

  int v6 = [NSString stringWithUTF8String:"ULNotifyInvalidResultsUponScreenUnlockLocalization"];
  int v7 = [v5 objectForKey:v6];
  if (v7 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    int v8 = [v7 BOOLValue];
  }
  else {
    int v8 = [MEMORY[0x263EFFA80] BOOLValue];
  }
  int v9 = v8;

  if (v9 && !v3) {
    CLMiLoServiceManager::notifyInvalidConfidence((uint64_t)this + 1768, 3);
  }
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v10);
}

void sub_2563418E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)&a9);
  _Unwind_Resume(a1);
}

void CLMicroLocationLogic::setPowerMode(CLMicroLocationLogic *this, char a2)
{
  *((unsigned char *)this + 122) = a2;
  CLMicroLocationLogic::updateEnabled(this);
}

void CLMicroLocationLogic::setAirplaneMode(CLMicroLocationLogic *this, char a2)
{
  *((unsigned char *)this + 123) = a2;
  CLMicroLocationLogic::updateEnabled(this);
}

void CLMicroLocationLogic::onBuddyComplete(CLMicroLocationLogic *this, char a2)
{
  *((unsigned char *)this + 124) = a2;
  CLMicroLocationLogic::migrateFromLocationdIfNecessary(this);
  CLMicroLocationLogic::updateEnabled(this);
}

void CLMicroLocationLogic::migrateFromLocationdIfNecessary(CLMicroLocationLogic *this)
{
  if (*((unsigned char *)this + 124)
    && ULDatabase::isDatabaseConnected(*((ULDatabase **)this + 16))
    && (*(unsigned int (**)(CLMicroLocationLogic *))(*(void *)this + 248))(this))
  {
    double v2 = (ULDatabase *)*((void *)this + 16);
    if (*((unsigned char *)this + 52))
    {
      if (ULDatabase::getMigrationStatus(v2, 0) == 2)
      {
        int v3 = [[ULDataMigrator alloc] initWithLocalDb:*((void *)this + 16) dataProtectionDelegate:(char *)this + 40 andEventLogger:(char *)this + 136];
        [(ULDataMigrator *)v3 migrateMiloData];
        ULDatabase::getMigrationStatus(*((ULDatabase **)this + 16), 1);
        ULDatabase::handleMigrationIterationCompleted(*((ULDatabase **)this + 16));
      }
    }
    else
    {
      ULDatabase::handleMigrationIterationCompleted(v2);
    }
  }
}

void sub_256341A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationLogic::setBluetoothPower(uint64_t this, char a2)
{
  *(unsigned char *)(this + 126) = a2;
  return this;
}

void CLMicroLocationLogic::onDisplayStateChange_OSX(CLMicroLocationLogic *this, int a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
  }
  uint64_t v4 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    double v5 = @"Off";
    if (a2) {
      double v5 = @"On";
    }
    *(_DWORD *)int v6 = 138412290;
    *(void *)&v6[4] = v5;
    _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_DEFAULT, "onDisplayStateChange_OSX: screen: %@", v6, 0xCu);
  }
  *(void *)int v6 = cl::chrono::CFAbsoluteTimeClock::now();
  CLMicroLocationLogic::setDisplayState(this, a2, (double *)v6);
  if (a2)
  {
    if (!CLMicroLocationLogic::State::isAtHomeLoi((CLMicroLocationLogic *)((char *)this + 48))) {
      CLMicroLocationLoiManager::fetchPlaceInferenceForReason((uint64_t)this + 2024, 4);
    }
    CLMicroLocationLogic::onMacInternalTrigger(this);
  }
}

void CLMicroLocationLogic::onModelGenerated(uint64_t a1, unsigned int a2)
{
  v37[19] = *MEMORY[0x263EF8340];
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
  }
  uint64_t v4 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v33 = 2082;
    *(void *)int v34 = "";
    *(_WORD *)&v34[8] = 2050;
    *(void *)&v34[10] = a2;
    _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Models have been regenerated\", \"model-type\":%{public}lu}", buf, 0x1Cu);
  }
  if (a2 == 3)
  {
    double v5 = (uint64_t **)(a1 + 56);
    int v6 = *(char *)(a1 + 79);
    if (v6 < 0)
    {
      if (*(void *)(a1 + 64) != 6) {
        return;
      }
      double v5 = (uint64_t **)*v5;
    }
    else if (v6 != 6)
    {
      return;
    }
    int v7 = *(_DWORD *)v5;
    int v8 = *((unsigned __int16 *)v5 + 2);
    if (v7 == 1953723747 && v8 == 28015)
    {
      *(void *)v38.var0 = *(void *)(a1 + 88);
      *(void *)&v38.var0[8] = *(void *)(a1 + 128);
      CLMicroLocationAnalytics::generateWiFiChannelHistogramForBlueAtlas(*(CLMicroLocationAnalytics **)(a1 + 80), v38, (uint64_t)&v23);
      if (v25)
      {
        int v20 = 0;
        int v21 = 0;
        uint64_t v22 = 0;
        std::vector<CLMicroLocationWiFiChannelHistogram>::__init_with_size[abi:ne180100]<CLMicroLocationWiFiChannelHistogram*,CLMicroLocationWiFiChannelHistogram*>(&v20, v23, (uint64_t)v24, (v24 - (unsigned char *)v23) >> 3);
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
        }
        int v10 = logObject_MicroLocation_Default;
        if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 68289026;
          *(_DWORD *)&uint8_t buf[4] = 0;
          __int16 v33 = 2082;
          *(void *)int v34 = "";
          _os_log_impl(&dword_25631F000, v10, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"updating Blue Atlas wifi channel histogram\"}", buf, 0x12u);
        }
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
        long long v11 = (char *)v20;
        int v12 = v21;
        if (v20 != v21)
        {
          do
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34[6], (uint64_t)"channel: ", 9);
            __int16 v13 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" count: ", 8);
            uint64_t v14 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", ", 2);
            v11 += 8;
          }
          while (v11 != v12);
        }
        std::stringbuf::str();
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
        }
        __int16 v15 = logObject_MicroLocation_Default;
        if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO))
        {
          p_p = &__p;
          if (v19 < 0) {
            p_p = __p;
          }
          *(_DWORD *)std::string v26 = 68289283;
          int v27 = 0;
          __int16 v28 = 2082;
          int v29 = "";
          __int16 v30 = 2081;
          long long v31 = p_p;
          _os_log_impl(&dword_25631F000, v15, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Wifi channel histogram:\", \"Histogram\":%{private, location:escape_only}s}", v26, 0x1Cu);
        }
        CLMicroLocationSensorsLogic::reloadWifiChannelHistogram(a1 + 712, (uint64_t)&v20);
        if (v19 < 0) {
          operator delete(__p);
        }
        *(void *)buf = *MEMORY[0x263F8C2B8];
        uint64_t v17 = *(void *)(MEMORY[0x263F8C2B8] + 72);
        *(void *)&buf[*(void *)(*(void *)buf - 24)] = *(void *)(MEMORY[0x263F8C2B8] + 64);
        *(void *)&v34[6] = v17;
        *(void *)&v34[14] = MEMORY[0x263F8C318] + 16;
        if (v36 < 0) {
          operator delete(v35);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x25A2A6280](v37);
        if (v20)
        {
          int v21 = (char *)v20;
          operator delete(v20);
        }
        if (v25)
        {
          if (v23)
          {
            int v24 = v23;
            operator delete(v23);
          }
        }
      }
    }
  }
}

void sub_256342054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a26);
  if (a15) {
    operator delete(a15);
  }
  if (a21)
  {
    if (a18) {
      operator delete(a18);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C328] + 104;
  *(void *)(a1 + 128) = MEMORY[0x263F8C328] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x263F8C328] + 64;
  *(void *)(a1 + 16) = MEMORY[0x263F8C328] + 64;
  double v5 = (void *)MEMORY[0x263F8C2B8];
  uint64_t v6 = *(void *)(MEMORY[0x263F8C2B8] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x263F8C2B8] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  int v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x263F8C328] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 128) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_256342374(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x25A2A6280](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2B8];
  uint64_t v3 = *MEMORY[0x263F8C2B8];
  *(void *)a1 = *MEMORY[0x263F8C2B8];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x25A2A6280](a1 + 128);
  return a1;
}

void CLMicroLocationLogic::onLearningBegin(CLMicroLocationLogic *this)
{
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
  }
  uint64_t v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_DEBUG, "CLMicroLocationLogic::onLearningBegin", v3, 2u);
  }
  CLMiLoServiceManager::onLearningBegin((CLMicroLocationLogic *)((char *)this + 1768));
}

void CLMicroLocationLogic::onLearningCompleted(CLMicroLocationLogic *this)
{
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
  }
  uint64_t v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_DEBUG, "Models have been regenerated, Letting service Manager know", v3, 2u);
  }
  CLMicroLocationLogic::stopRapportSessionIfRunning(this);
  CLMiLoServiceManager::onLearningCompleted((CLMicroLocationLogic *)((char *)this + 1768));
  CLMicroLocationSensorsLogic::backupBleIdentities((CLMicroLocationLogic *)((char *)this + 712));
}

void CLMicroLocationLogic::onAssociatedState(CLMicroLocationLogic *this, ULWiFiAssociatedState *a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v3 = a2;
  uint64_t v4 = [(ULWiFiAssociatedState *)v3 BSSID];

  if (v4)
  {
    if (*((unsigned char *)this + 80))
    {
LABEL_3:
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      unsigned int v27 = 0;
      double v5 = [(ULWiFiAssociatedState *)v3 channel];
      uint64_t v6 = [v5 band];

      switch(v6)
      {
        case 0:
          if (onceToken_MicroLocation_Default != -1) {
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
          }
          uint64_t v7 = logObject_MicroLocation_Default;
          if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 68289026;
            *(_DWORD *)&uint8_t buf[4] = 0;
            __int16 v32 = 2082;
            __int16 v33 = "";
            _os_log_impl(&dword_25631F000, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLMicroLocationLogic, onAssociatedState event invalid band\"}", buf, 0x12u);
          }
          if (onceToken_MicroLocation_Default != -1) {
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
          }
          int v8 = logObject_MicroLocation_Default;
          if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
          {
            *(_DWORD *)buf = 68289026;
            *(_DWORD *)&uint8_t buf[4] = 0;
            __int16 v32 = 2082;
            __int16 v33 = "";
            _os_signpost_emit_with_name_impl(&dword_25631F000, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLMicroLocationLogic, onAssociatedState event invalid band", "{\"msg%{public}.0s\":\"CLMicroLocationLogic, onAssociatedState event invalid band\"}", buf, 0x12u);
          }
          goto LABEL_12;
        case 1:
LABEL_12:
          unsigned int v9 = 2;
          goto LABEL_23;
        case 2:
          unsigned int v9 = 5;
          goto LABEL_23;
        case 3:
          unsigned int v9 = 6;
LABEL_23:
          unsigned int v27 = v9;
          break;
        default:
          break;
      }
      CFAbsoluteTime v26 = cl::chrono::CFAbsoluteTimeClock::now();
      unsigned __int8 v25 = 1;
      id v13 = [(ULWiFiAssociatedState *)v3 BSSID];
      std::string::basic_string[abi:ne180100]<0>(buf, (char *)[v13 UTF8String]);
      uint64_t v24 = CLMacAddress::newFromCLStr((uint64_t *)buf);
      uint64_t v14 = [(ULWiFiAssociatedState *)v3 channel];
      __int16 v15 = (void *)((char *)this + 56);
      uint64_t v23 = [v14 channelNumber];
      uint64_t v29 = std::vector<CLMicroLocationAssociatedStateTable::Entry>::__emplace_back_slow_path<std::string const&,boost::uuids::uuid const&,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>,BOOL,CLMacAddress,CLMicroLocationAssociatedStateTable::Entry::Band &,unsigned long>(&v28, (uint64_t)this + 56, (uint64_t)this + 80, (uint64_t)&v26, &v25, (uint64_t)&v24, &v27, (unsigned int *)&v23);

      if (SBYTE3(v35) < 0) {
        operator delete(*(void **)buf);
      }

      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
      }
      int v16 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        if (*((char *)this + 79) < 0) {
          __int16 v15 = (void *)*v15;
        }
        uint64_t v17 = (char *)operator new(0x28uLL);
        *(void *)(v17 + 29) = 0;
        *(_OWORD *)uint64_t v17 = 0u;
        *((_OWORD *)v17 + 1) = 0u;
        boost::uuids::to_chars<char *>((uint64_t)this + 80, v17);
        id v18 = [(ULWiFiAssociatedState *)v3 BSSID];
        uint64_t v19 = [v18 UTF8String];
        uint64_t v20 = v27;
        int v21 = [(ULWiFiAssociatedState *)v3 channel];
        int v22 = [v21 channelNumber];
        *(_DWORD *)buf = 68290563;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v32 = 2082;
        __int16 v33 = "";
        __int16 v34 = 2081;
        long long v35 = v15;
        __int16 v36 = 2081;
        __int16 v37 = v17;
        __int16 v38 = 1026;
        int v39 = 1;
        __int16 v40 = 2081;
        uint64_t v41 = v19;
        __int16 v42 = 2050;
        uint64_t v43 = v20;
        __int16 v44 = 1026;
        int v45 = v22;
        _os_log_impl(&dword_25631F000, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationLogic, onAssociatedState event\", \"currentRTLOIType\":%{private, location:escape_only}s, \"currentRtLoiId\":%{private, location:escape_only}s, \"IsAssociated\":%{public}hhd, \"MAC Address\":%{private, location:escape_only}s, \"Band\":%{public}lu, \"Channel\":%{public}d}", buf, 0x46u);

        operator delete(v17);
      }

      [*(id *)(*((void *)this + 16) + 16) insertEntries:&v28];
      *(void *)buf = &v28;
      std::vector<CLMicroLocationAssociatedStateTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    }
    else
    {
      uint64_t v10 = 0;
      while (v10 != 15)
      {
        if (*((unsigned __int8 *)this + v10++ + 81))
        {
          if ((unint64_t)(v10 - 1) < 0xF) {
            goto LABEL_3;
          }
          break;
        }
      }
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
      }
      uint64_t v12 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v32 = 2082;
        __int16 v33 = "";
        _os_log_impl(&dword_25631F000, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationLogic, onAssociatedState event ignored - nil currentRtLoiId\"}", buf, 0x12u);
      }
    }
  }
}

void sub_256342B20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  operator delete(v25);
  std::string __p = &a14;
  std::vector<CLMicroLocationAssociatedStateTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  _Unwind_Resume(a1);
}

void CLMicroLocationLogic::refreshLocationOnInterval(CLMicroLocationLogic *this)
{
}

void CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::EnabledStateUpdate>(_OWORD *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  CLMicroLocationProto::ReceivedEvent::ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
  CLMicroLocationProtobufHelper::setSpecificLoggedEvent((CLMicroLocationProtobufHelper *)v9, (CLMicroLocationProto::ReceivedEvent *)a2, v8);
  CLMicroLocationLoggedEventsTable::Entry::Entry(a3, a1, a2[2], (CLMicroLocationProto::ReceivedEvent *)v9, a4);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
}

void sub_256342C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t CLMicroLocationLogic::enabled(CLMicroLocationLogic *this)
{
  return *((unsigned __int8 *)this + 48);
}

void CLMicroLocationLogic::onKeybagUnlocked(ULDatabase **this)
{
  ULDatabase::connectIfNecessary(this[16]);
  CLMicroLocationLogic::migrateFromLocationdIfNecessary((CLMicroLocationLogic *)this);
  if ((*((unsigned int (**)(ULDatabase *))this[16]->var0 + 2))(this[16]))
  {
    CLMicroLocationSensorsLogic::loadBleIdentitiesFromDb((CLMicroLocationSensorsLogic *)(this + 89));
  }
}

void CLMicroLocationLogic::onDatabaseBecameValid(CLMicroLocationLogic *this)
{
  uint64_t v2 = (CLMicroLocationLogic *)((char *)this + 2024);
  CLMicroLocationLoiManager::fetchPlaceInferenceForReason((uint64_t)this + 2024, 6);
  CLMicroLocationLoiManager::setupRegionMonitoring(v2);
  CLMiLoServiceManager::processConnectionRequestsAwaitingDb((CLMicroLocationLogic *)((char *)this + 1768));
  CLMicroLocationSensorsLogic::loadBleIdentitiesFromDb((CLMicroLocationLogic *)((char *)this + 712));
}

uint64_t CLMicroLocationLogic::isDataAvailable(CLMicroLocationLogic *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 323) + 128))();
}

uint64_t non-virtual thunk to'CLMicroLocationLogic::isDataAvailable(CLMicroLocationLogic *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 318) + 128))();
}

uint64_t CLMicroLocationLogic::resetAndGetDevicesSinceLearnEventTimeForLoi@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, void *a4@<X8>, double a5@<D0>)
{
  double v12 = a5;
  uint64_t v6 = (CLMicroLocationRapportMonitor *)(a1 + 1464);
  CLMicroLocationRapportMonitor::getDevicesSinceLearnEventTimeAtLoi(a1 + 1464, &v12, a2, a3, (uint64_t)v11);
  CLMicroLocationRapportMonitor::backup(v6);
  CLMicroLocationRapportMonitor::reset(v6);
  uint64_t v7 = (void *)v11[2];
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  unint64_t v8 = 0;
  if (v7)
  {
    unsigned int v9 = v7;
    do
    {
      ++v8;
      unsigned int v9 = (void *)*v9;
    }
    while (v9);
  }
  std::vector<CLMicroLocationRapportMonitor::Item>::__init_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *> *>,std::__hash_const_iterator<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *> *>>(a4, v7, 0, v8);
  return std::__hash_table<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item::HashItem,CLMicroLocationRapportMonitor::Item::PredicateItem,std::allocator<CLMicroLocationRapportMonitor::Item>>::~__hash_table((uint64_t)v11);
}

void sub_256342E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL CLMicroLocationLogic::onRecordingRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5, double *a6)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  long long v20 = *a5;
  char v21 = *((unsigned char *)a5 + 16);
  unsigned int v9 = CLMicroLocationProtobufHelper::createRecordingRequestDictionary(1, a3, a4, (uint64_t)&v20);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v14 = *(std::string *)a2;
  }
  char v15 = 1;
  CLMicroLocationProtobufHelper::getClientRecordingRequest((uint64_t)&v14, v9, (uint64_t)v16);
  if (v15 && SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  int v13 = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v13);
  *(void *)&long long v17 = boost::uuids::random_generator_pure::operator()((uint64_t)&v13);
  *((void *)&v17 + 1) = v10;
  CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::RecordingRequest>(&v17, v16, (uint64_t)v18, *a6);
  (*(void (**)(uint64_t, unsigned char *))(*(void *)a1 + 120))(a1, v18);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)&v19);
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v13);
  CLMicroLocationProtobufHelper::createRecordingEvent<CLMicroLocationProto::RecordingRequest>((CLMicroLocationProto::RecordingEvent *)v16, 0, 0, 0, (CLMicroLocationProto *)3, (uint64_t)v18, *a6);
  int v11 = CLMicroLocationTriggerManager::requestRecording((CLMicroLocationTriggerManager *)(a1 + 1560), (const CLMicroLocationProto::RecordingEvent *)v18);
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v18);
  CLMicroLocationProto::RecordingRequest::~RecordingRequest((CLMicroLocationProto::RecordingRequest *)v16);

  return v11 != 5;
}

void sub_256343004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::RecordingRequest>(_OWORD *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  CLMicroLocationProto::ReceivedEvent::ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
  CLMicroLocationProtobufHelper::setSpecificLoggedEvent((CLMicroLocationProtobufHelper *)v9, (CLMicroLocationProto::ReceivedEvent *)a2, v8);
  CLMicroLocationLoggedEventsTable::Entry::Entry(a3, a1, a2[2], (CLMicroLocationProto::ReceivedEvent *)v9, a4);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
}

void sub_2563430F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL non-virtual thunk to'CLMicroLocationLogic::onRecordingRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5, double *a6)
{
  return CLMicroLocationLogic::onRecordingRequest(a1 - 24, a2, a3, a4, a5, a6);
}

void CLMicroLocationLogic::onLocalizationRequest(uint64_t a1@<X0>, const std::string *a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, double *a6@<X5>, int a7@<W6>, __n128 *a8@<X8>)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  v28.n128_u64[0] = a3;
  v28.n128_u64[1] = a4;
  CLMicroLocationProto::ReceivedEventAction::ReceivedEventAction((CLMicroLocationProto::ReceivedEventAction *)v20);
  v24 |= 4u;
  uint64_t v14 = MEMORY[0x263F8C740];
  if (v21 == (std::string *)MEMORY[0x263F8C740]) {
    operator new();
  }
  std::string::operator=(v21, a2);
  if (!CLMicroLocationProto::ReceivedEventActionType_IsValid((CLMicroLocationProto *)1)) {
    __assert_rtn("set_receivedeventactiontype", "microlocation.pb.h", 13294, "::CLMicroLocationProto::ReceivedEventActionType_IsValid(value)");
  }
  v20[3] = 1;
  v24 |= 0xAu;
  if (v22 == v14) {
    operator new();
  }
  MEMORY[0x25A2A6090]();
  if (*(unsigned char *)(a5 + 16))
  {
    v24 |= 0x10u;
    if (v23 == v14) {
      operator new();
    }
    MEMORY[0x25A2A6090]();
  }
  int v19 = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v19);
  *(void *)&long long v25 = boost::uuids::random_generator_pure::operator()((uint64_t)&v19);
  *((void *)&v25 + 1) = v15;
  CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::ReceivedEventAction>(&v25, v20, (uint64_t)v26, *a6);
  (*(void (**)(uint64_t, unsigned char *))(*(void *)a1 + 120))(a1, v26);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)&v27);
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v19);
  CLMicroLocationProtobufHelper::createRecordingEvent<CLMicroLocationProto::ReceivedEventAction>((CLMicroLocationProto::RecordingEvent *)v20, 0, 0, 0, (CLMicroLocationProto *)3, (uint64_t)v26, *a6);
  int v16 = (CLMicroLocationTriggerManager *)(a1 + 1560);
  int v17 = CLMicroLocationTriggerManager::requestLocalization((uint64_t)v16, (const CLMicroLocationProto::RecordingEvent *)v26, a7, 0, 0);
  if (v17 == 3)
  {
    CLMicroLocationTriggerManager::getRescheduledLocalizationUUID(v16, a8);
LABEL_15:
    char v18 = 0;
    goto LABEL_16;
  }
  if (v17 != 4)
  {
    CLMicroLocationTriggerManager::getCurrentLocalizationUUID(v16, a8);
    goto LABEL_15;
  }
  *a8 = v28;
  char v18 = 1;
  a8[1].n128_u8[0] = 1;
LABEL_16:
  a8[1].n128_u8[1] = v18;
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v26);
  CLMicroLocationProto::ReceivedEventAction::~ReceivedEventAction((CLMicroLocationProto::ReceivedEventAction *)v20);
}

void sub_2563433CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CLMicroLocationProto::ReceivedEventAction::~ReceivedEventAction((CLMicroLocationProto::ReceivedEventAction *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::ReceivedEventAction>(_OWORD *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  CLMicroLocationProto::ReceivedEvent::ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
  CLMicroLocationProtobufHelper::setSpecificLoggedEvent((CLMicroLocationProtobufHelper *)v9, (CLMicroLocationProto::ReceivedEvent *)a2, v8);
  CLMicroLocationLoggedEventsTable::Entry::Entry(a3, a1, a2[2], (CLMicroLocationProto::ReceivedEvent *)v9, a4);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
}

void sub_256343498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void non-virtual thunk to'CLMicroLocationLogic::onLocalizationRequest(uint64_t a1@<X0>, const std::string *a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, double *a6@<X5>, int a7@<W6>, __n128 *a8@<X8>)
{
}

uint64_t CLMicroLocationLogic::onTruthLabel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _DWORD v13[2] = *MEMORY[0x263EF8340];
  v13[0] = a3;
  v13[1] = a4;
  v12[0] = a5;
  v12[1] = a6;
  unint64_t v8 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDBytes:v13];
  unsigned int v9 = (CLMicroLocationProtobufHelper *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDBytes:v12];
  uint64_t v10 = CLMicroLocationRecorder::recordTruthLabel(a1 + 664, a2, v8, v9);

  return v10;
}

void sub_25634356C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'CLMicroLocationLogic::onTruthLabel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return CLMicroLocationLogic::onTruthLabel(a1 - 24, a2, a3, a4, a5, a6);
}

uint64_t CLMicroLocationLogic::onTruthTagLabelForBetweenDates(uint64_t a1, const std::string *a2, uint64_t a3, void *a4, void *a5)
{
  id v9 = a4;
  id v10 = a5;
  int v11 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDBytes:a3];
  uint64_t v12 = CLMicroLocationLogic::donateTruthTagLabelForRecordingEventsBetweenDates(a1, a2, v11, v9, v10);

  return v12;
}

void sub_256343628(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'CLMicroLocationLogic::onTruthTagLabelForBetweenDates(uint64_t a1, const std::string *a2, uint64_t a3, void *a4, void *a5)
{
  return CLMicroLocationLogic::onTruthTagLabelForBetweenDates(a1 - 24, a2, a3, a4, a5);
}

uint64_t CLMicroLocationLogic::addTriggerUuidForCachedTrigger(uint64_t a1, const std::string *a2, _OWORD *a3, long long *a4)
{
  return CLMicroLocationRecorder::addTriggerUuidForCachedTrigger(a1 + 664, a2, a3, a4);
}

uint64_t non-virtual thunk to'CLMicroLocationLogic::addTriggerUuidForCachedTrigger(uint64_t a1, const std::string *a2, _OWORD *a3, long long *a4)
{
  return CLMicroLocationRecorder::addTriggerUuidForCachedTrigger(a1 + 640, a2, a3, a4);
}

uint64_t CLMicroLocationLogic::addTriggerEventForFutureLabeling(uint64_t a1, const std::string *a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 664;
  if (*(char *)(a1 + 79) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 56), *(void *)(a1 + 64));
  }
  else {
    std::string __p = *(std::string *)(a1 + 56);
  }
  uint64_t v7 = CLMicroLocationRecorder::addTriggerEventForFutureLabeling(v6, a2, a3, (uint64_t)&__p, (void *)(a1 + 80));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v7;
}

void sub_2563436F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'CLMicroLocationLogic::addTriggerEventForFutureLabeling(uint64_t a1, const std::string *a2, uint64_t *a3)
{
  return CLMicroLocationLogic::addTriggerEventForFutureLabeling(a1 - 24, a2, a3);
}

uint64_t CLMicroLocationLogic::startLowLatencyUpdates(CLMicroLocationLogic *this, uuid *a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  int v16 = 1;
  uint64_t v4 = (char *)this + 1560;
  BOOL isLowLatencyMode = CLMicroLocationTriggerManager::isLowLatencyMode((CLMicroLocationLogic *)((char *)this + 1560));
  uint64_t v6 = CLMicroLocationTriggerManager::addPolicy((uint64_t)v4, a2, &v16);
  if (!v6) {
    goto LABEL_15;
  }
  if (!isLowLatencyMode)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
    }
    id v10 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = (char *)operator new(0x28uLL);
      *(void *)(v11 + 29) = 0;
      *(_OWORD *)int v11 = 0u;
      *((_OWORD *)v11 + 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)a2, v11);
      *(_DWORD *)buf = 68289282;
      int v18 = 0;
      __int16 v19 = 2082;
      long long v20 = "";
      __int16 v21 = 2082;
      uint64_t v22 = v11;
      _os_log_impl(&dword_25631F000, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"first service to connect to low-latency: invalidating caches\", \"ServiceUUID\":%{public, location:escape_only}s}", buf, 0x1Cu);
      operator delete(v11);
    }

    CLMicroLocationLogic::invalidateCaches((uint64_t)this, 1);
    goto LABEL_14;
  }
  BOOL v7 = CLMicroLocationLogic::calcCachedLocalizationResults(this, *a2);
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
  }
  unint64_t v8 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    id v9 = (char *)operator new(0x28uLL);
    *(void *)(v9 + 29) = 0;
    *(_OWORD *)id v9 = 0u;
    *((_OWORD *)v9 + 1) = 0u;
    boost::uuids::to_chars<char *>((uint64_t)a2, v9);
    *(_DWORD *)buf = 68289538;
    int v18 = 0;
    __int16 v19 = 2082;
    long long v20 = "";
    __int16 v21 = 2082;
    uint64_t v22 = v9;
    __int16 v23 = 1026;
    int v24 = v7;
    _os_log_impl(&dword_25631F000, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"service connects to low-latency while already in low-latency\", \"ServiceUUID\":%{public, location:escape_only}s, \"CachedLocalizationSuccess\":%{public}hhd}", buf, 0x22u);
    operator delete(v9);
  }

  if (!v7)
  {
LABEL_14:
    double v12 = cl::chrono::CFAbsoluteTimeClock::now();
    CLMicroLocationLogic::createLocalizationTriggerWithOptAssociatedAccessPointInfo((uint64_t)this, (uint64_t)"InternalClientMotion", 0, (uint64_t)buf, v12);
    CLMicroLocationTriggerManager::requestLocalization((uint64_t)v4, (const CLMicroLocationProto::RecordingEvent *)buf, 1, 0, 0);
    CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)buf);
  }
LABEL_15:
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
  }
  int v13 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    uint64_t v14 = (char *)operator new(0x28uLL);
    *(void *)(v14 + 29) = 0;
    *(_OWORD *)uint64_t v14 = 0u;
    *((_OWORD *)v14 + 1) = 0u;
    boost::uuids::to_chars<char *>((uint64_t)a2, v14);
    *(_DWORD *)buf = 68289539;
    int v18 = 0;
    __int16 v19 = 2082;
    long long v20 = "";
    __int16 v21 = 2081;
    uint64_t v22 = v14;
    __int16 v23 = 1025;
    int v24 = v6;
    _os_log_impl(&dword_25631F000, v13, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Adding Low Latency policy to trigger manager\", \"\":%{private, location:escape_only}s, \"Success\":%{private}hhd}", buf, 0x22u);
    operator delete(v14);
  }

  return v6;
}

void sub_256343A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  operator delete(v12);

  _Unwind_Resume(a1);
}

BOOL CLMicroLocationLogic::calcCachedLocalizationResults(CLMicroLocationLogic *this, uuid a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uuid v20 = a2;
  uint64_t v3 = (CLMicroLocationLogic *)((char *)this + 1768);
  CLMiLoServiceManager::getModelOfService((uint64_t)this + 1768, a2, &v10);
  if (v10)
  {
    v18.var0[0] = 0;
    char v19 = 0;
    std::string __p = 0;
    int v16 = 0;
    uint64_t v17 = 0;
    memset(v14, 0, 20);
    *(void *)buf = 0;
    BOOL v4 = CLMicroLocationLocalizationController::calculateLocalizationResultsOnLastInputs((uint64_t)this + 168, &v10, (uint64_t)&v18, (uint64_t)buf);
    if (v4)
    {
      if (!v19) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      CLMiLoServiceManager::ingestLocalizationResults(v3, (const CLMiLoServiceManager::LocalizationResults *)buf, v18);
    }
    if (__p)
    {
      int v16 = __p;
      operator delete(__p);
    }
    double v12 = buf;
    std::vector<CLMiLoServiceManager::LocalizationResultsPerModel>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
    }
    double v5 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = (char *)operator new(0x28uLL);
      *(void *)(v6 + 29) = 0;
      *(_OWORD *)uint64_t v6 = 0u;
      *((_OWORD *)v6 + 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)&v20, v6);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      LOWORD(v14[0]) = 2082;
      *(void *)((char *)v14 + 2) = "";
      WORD1(v14[1]) = 2082;
      *(void *)((char *)&v14[1] + 4) = v6;
      _os_log_impl(&dword_25631F000, v5, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"calcCachedLocalizationResults, didn't find model for requested service\", \"Service Uuid\":%{public, location:escape_only}s}", buf, 0x1Cu);
      operator delete(v6);
    }

    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
    }
    BOOL v7 = (id)logObject_MicroLocation_Default;
    if (os_signpost_enabled(v7))
    {
      unint64_t v8 = (char *)operator new(0x28uLL);
      *(void *)(v8 + 29) = 0;
      *(_OWORD *)unint64_t v8 = 0u;
      *((_OWORD *)v8 + 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)&v20, v8);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      LOWORD(v14[0]) = 2082;
      *(void *)((char *)v14 + 2) = "";
      WORD1(v14[1]) = 2082;
      *(void *)((char *)&v14[1] + 4) = v8;
      _os_signpost_emit_with_name_impl(&dword_25631F000, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "calcCachedLocalizationResults, didn't find model for requested service", "{\"msg%{public}.0s\":\"calcCachedLocalizationResults, didn't find model for requested service\", \"Service Uuid\":%{public, location:escape_only}s}", buf, 0x1Cu);
      operator delete(v8);
    }

    BOOL v4 = 0;
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  return v4;
}

void sub_256343D8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, char a13)
{
  uint64_t v15 = v14;
  operator delete(v15);

  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'CLMicroLocationLogic::startLowLatencyUpdates(CLMicroLocationLogic *this, uuid *a2)
{
  return CLMicroLocationLogic::startLowLatencyUpdates((CLMicroLocationLogic *)((char *)this - 24), a2);
}

BOOL CLMicroLocationLogic::stopLowLatencyUpdates(CLMicroLocationLogic *this, uuid *a2)
{
  return CLMicroLocationTriggerManager::removePolicy((CLMicroLocationLogic *)((char *)this + 1560), a2);
}

BOOL non-virtual thunk to'CLMicroLocationLogic::stopLowLatencyUpdates(CLMicroLocationLogic *this, uuid *a2)
{
  return CLMicroLocationTriggerManager::removePolicy((CLMicroLocationLogic *)((char *)this + 1536), a2);
}

uint64_t CLMicroLocationLogic::isInRoomDetectionInCustomLoiEnabled(CLMicroLocationLogic *this)
{
  return *((unsigned __int8 *)this + 96);
}

uint64_t non-virtual thunk to'CLMicroLocationLogic::isInRoomDetectionInCustomLoiEnabled(CLMicroLocationLogic *this)
{
  return *((unsigned __int8 *)this + 72);
}

uint64_t CLMicroLocationLogic::enableMiLoAtCurrentLocation(CLMicroLocationLogic *this, const uuid *a2)
{
  return 1;
}

uint64_t non-virtual thunk to'CLMicroLocationLogic::enableMiLoAtCurrentLocation(CLMicroLocationLogic *this, const uuid *a2)
{
  return 1;
}

uint64_t CLMicroLocationLogic::disableMiLoAtLocationWithIdentifier(CLMicroLocationLogic *this, const uuid *a2, const uuid *a3)
{
  return 1;
}

uint64_t non-virtual thunk to'CLMicroLocationLogic::disableMiLoAtLocationWithIdentifier(CLMicroLocationLogic *this, const uuid *a2, const uuid *a3)
{
  return 1;
}

void CLMicroLocationLogic::deleteService(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uuid a3@<X3:X2>, uint64_t *a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v6 = a2;
  uint64_t v24 = *MEMORY[0x263EF8340];
  uuid v23 = a3;
  CLMiLoServiceManager::deleteService(a3, (CLMiLoServiceManager *)(a1 + 1768), a2, a5);
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
  }
  unint64_t v8 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    if ((v6[23] & 0x80u) != 0) {
      uint64_t v6 = *(unsigned __int8 **)v6;
    }
    if (*((char *)a4 + 23) >= 0) {
      id v9 = a4;
    }
    else {
      id v9 = (uint64_t *)*a4;
    }
    uint64_t v10 = (char *)operator new(0x28uLL);
    *(void *)(v10 + 29) = 0;
    *(_OWORD *)uint64_t v10 = 0u;
    *((_OWORD *)v10 + 1) = 0u;
    boost::uuids::to_chars<char *>((uint64_t)&v23, v10);
    uint64_t v11 = *(void *)(a5 + 40);
    v12[0] = 68290051;
    __int16 v13 = 2082;
    v12[1] = 0;
    uint64_t v14 = "";
    __int16 v15 = 2081;
    int v16 = v6;
    __int16 v17 = 2081;
    uuid v18 = v9;
    __int16 v19 = 2081;
    uuid v20 = v10;
    __int16 v21 = 1025;
    int v22 = v11;
    _os_log_impl(&dword_25631F000, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationLogic::deleteService\", \"clientId\":%{private, location:escape_only}s, \"userId\":%{private, location:escape_only}s, \"serviceId\":%{private, location:escape_only}s, \"result\":%{private}d}", (uint8_t *)v12, 0x36u);
    operator delete(v10);
  }
}

void sub_256344038(_Unwind_Exception *a1)
{
  operator delete(v2);

  _Unwind_Resume(a1);
}

void CLMicroLocationLogic::queryServices(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
}

uint64_t CLMicroLocationLogic::connectToService(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  long long v9 = *a5;
  char v10 = *((unsigned char *)a5 + 16);
  return CLMiLoServiceManager::connect(a1 + 1768, a2, a3, a4, (uint64_t)&v9, a6, a7, a8);
}

uint64_t CLMicroLocationLogic::disconnectFromService(uint64_t a1, const std::string *a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5)
{
  return CLMiLoServiceManager::disconnect((void *)(a1 + 1768), a2, a3, a4, a5);
}

uint64_t CLMicroLocationLogic::predictionRequest(uint64_t a1, uuid a2, const uuid *a3, double *a4, int a5)
{
  return CLMiLoServiceManager::predictionRequest((CLMiLoServiceManager *)(a1 + 1768), a2, a3, a4, a5);
}

uint64_t CLMicroLocationLogic::requestObservation(uint64_t a1, uuid a2, uint64_t a3, uint64_t a4, long long *a5, double *a6)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  long long v7 = *a5;
  char v8 = *((unsigned char *)a5 + 16);
  return CLMiLoServiceManager::requestObservation((CLMiLoServiceManager *)(a1 + 1768), a2, a3, a4, (uint64_t)&v7, a6);
}

uint64_t CLMicroLocationLogic::onSendStatusToClient(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 2584) + 16))();
}

uint64_t non-virtual thunk to'CLMicroLocationLogic::onSendStatusToClient(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 2568) + 16))();
}

uint64_t CLMicroLocationLogic::onSendRequestResponseToClient(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 2584) + 24))();
}

uint64_t non-virtual thunk to'CLMicroLocationLogic::onSendRequestResponseToClient(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 2568) + 24))();
}

uint64_t CLMicroLocationLogic::onSendRecordingMetaInfoToClient(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 2584) + 32))();
}

uint64_t non-virtual thunk to'CLMicroLocationLogic::onSendRecordingMetaInfoToClient(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 2568) + 32))();
}

uint64_t CLMicroLocationLogic::onSendPredictionMetaInfoToClient(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 2584) + 40))();
}

uint64_t non-virtual thunk to'CLMicroLocationLogic::onSendPredictionMetaInfoToClient(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 2568) + 40))();
}

uint64_t CLMicroLocationLogic::onSendPredictionResultsToClient(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v72 = *MEMORY[0x263EF8340];
  if (onceToken_MicroLocationQE_Default != -1) {
    dispatch_once(&onceToken_MicroLocationQE_Default, &__block_literal_global_742);
  }
  char v8 = (id)logObject_MicroLocationQE_Default;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    if (*((unsigned char *)a4 + 48)) {
      uint64_t v9 = "YES";
    }
    else {
      uint64_t v9 = "NO";
    }
    memset(&v57, 0, sizeof(v57));
    std::optional<std::string>::value_or[abi:ne180100]<std::string>((uint64_t)(a4 + 7), (uint64_t)&v57, &v58);
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v10 = &v58;
    }
    else {
      char v10 = (std::string *)v58.__r_.__value_.__r.__words[0];
    }
    uint64_t v11 = operator new(0x28uLL);
    uint64_t v55 = v11;
    long long v56 = xmmword_256514540;
    *uint64_t v11 = 0u;
    v11[1] = 0u;
    *(void *)((char *)v11 + 29) = 0;
    boost::uuids::to_chars<char *>(a2, v11);
    if (v56 >= 0) {
      double v12 = (std::string *)&v55;
    }
    else {
      double v12 = (std::string *)v55;
    }
    int v13 = *(unsigned __int8 *)(a3 + 16);
    if (*(unsigned char *)(a3 + 16))
    {
      uint64_t v14 = (char *)operator new(0x28uLL);
      uint64_t v53 = (void **)v14;
      long long v54 = xmmword_256514540;
      *(_OWORD *)uint64_t v14 = 0u;
      *((_OWORD *)v14 + 1) = 0u;
      *(void *)(v14 + 29) = 0;
      boost::uuids::to_chars<char *>(a3, v14);
      __int16 v15 = (void **)&v53;
      if (v54 < 0) {
        __int16 v15 = v53;
      }
    }
    else
    {
      __p[0] = 0;
      __p[1] = 0;
      __int16 v15 = __p;
      uint64_t v52 = 0;
    }
    uint64_t v16 = (a4[1] - *a4) >> 5;
    uint64_t buf = 68290307;
    __int16 v60 = 2082;
    __int16 v61 = "";
    __int16 v62 = 2081;
    __int16 v63 = (std::string *)v9;
    __int16 v64 = 2081;
    __int16 v65 = v10;
    __int16 v66 = 2081;
    __int16 v67 = v12;
    __int16 v68 = 2081;
    __int16 v69 = v15;
    __int16 v70 = 2049;
    uint64_t v71 = v16;
    _os_log_impl(&dword_25631F000, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Localizer results, model\", \"isStable\":%{private, location:escape_only}s, \"clientIdentifier\":%{private, location:escape_only}s, \"serviceUUID\":%{private, location:escape_only}s, \"requestId\":%{private, location:escape_only}s, \"numberOfMicroLocations\":%{private}lu}", (uint8_t *)&buf, 0x44u);
    if (v13)
    {
      if (SHIBYTE(v54) < 0)
      {
        __int16 v17 = v53;
LABEL_23:
        operator delete(v17);
      }
    }
    else if (SHIBYTE(v52) < 0)
    {
      __int16 v17 = (void **)__p[0];
      goto LABEL_23;
    }
    if (SHIBYTE(v56) < 0) {
      operator delete(v55);
    }
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v58.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v46 = a2;
  uint64_t v47 = a3;
  uint64_t v48 = a5;

  uuid v18 = +[ULDefaultsSingleton shared];
  __int16 v19 = [v18 defaultsDictionary];

  uuid v20 = [NSString stringWithUTF8String:"ULNumberOfLoggedProbabilityResults"];
  __int16 v21 = [v19 objectForKey:v20];
  if (v21 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    unsigned int v22 = [v21 unsignedIntValue];
  }
  else {
    unsigned int v22 = objc_msgSend(&unk_2704F11D0, "unsignedIntValue", a2, v47, v48);
  }
  unsigned int v23 = v22;

  unsigned int v24 = 0;
  uint64_t v25 = *a4;
  uint64_t v26 = a4[1];
  if (*a4 != v26 && v23)
  {
    unsigned int v24 = 0;
    uint64_t v27 = v25 + 32;
    do
    {
      if (onceToken_MicroLocationQE_Default != -1) {
        dispatch_once(&onceToken_MicroLocationQE_Default, &__block_literal_global_742);
      }
      __n128 v28 = (id)logObject_MicroLocationQE_Default;
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v29 = (char *)operator new(0x28uLL);
        v58.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
        *(_OWORD *)&v58.__r_.__value_.__r.__words[1] = xmmword_256514540;
        *(_OWORD *)uint64_t v29 = 0u;
        *((_OWORD *)v29 + 1) = 0u;
        *(void *)(v29 + 29) = 0;
        boost::uuids::to_chars<char *>(v27 - 32, v29);
        int v30 = SHIBYTE(v58.__r_.__value_.__r.__words[2]);
        std::string::size_type v31 = v58.__r_.__value_.__r.__words[0];
        __int16 v32 = *(std::string **)(v27 - 16);
        uint64_t v55 = 0;
        long long v56 = 0uLL;
        std::optional<std::string>::value_or[abi:ne180100]<std::string>((uint64_t)(a4 + 7), (uint64_t)&v55, &v57);
        __int16 v33 = &v58;
        if (v30 < 0) {
          __int16 v33 = (std::string *)v31;
        }
        __int16 v34 = &v57;
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          __int16 v34 = (std::string *)v57.__r_.__value_.__r.__words[0];
        }
        uint64_t buf = 68289795;
        __int16 v60 = 2082;
        __int16 v61 = "";
        __int16 v62 = 2081;
        __int16 v63 = v33;
        __int16 v64 = 2049;
        __int16 v65 = v32;
        __int16 v66 = 2081;
        __int16 v67 = v34;
        _os_log_impl(&dword_25631F000, v28, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Localizer results, cluster\", \"microLocationId\":%{private, location:escape_only}s, \"probability\":\"%{private}.6f\", \"clientIdentifier\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x30u);
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v57.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v56) < 0) {
          operator delete(v55);
        }
        if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v58.__r_.__value_.__l.__data_);
        }
      }

      ++v24;
      if (v27 == v26) {
        break;
      }
      v27 += 32;
    }
    while (v24 < v23);
    uint64_t v25 = *a4;
    uint64_t v26 = a4[1];
  }
  unint64_t v35 = v24;
  if (v24 < (unint64_t)((v26 - v25) >> 5))
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
    }
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v36 = *a4;
      if (v24 < (unint64_t)((a4[1] - *a4) >> 5))
      {
        unsigned int v37 = v24 + 1;
        do
        {
          if (onceToken_MicroLocationQE_Default != -1) {
            dispatch_once(&onceToken_MicroLocationQE_Default, &__block_literal_global_742);
          }
          __int16 v38 = (id)logObject_MicroLocationQE_Default;
          if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
          {
            int v39 = (char *)operator new(0x28uLL);
            v58.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
            *(_OWORD *)&v58.__r_.__value_.__r.__words[1] = xmmword_256514540;
            *(_OWORD *)int v39 = 0u;
            *((_OWORD *)v39 + 1) = 0u;
            *(void *)(v39 + 29) = 0;
            boost::uuids::to_chars<char *>(v36 + 32 * v35, v39);
            int v40 = SHIBYTE(v58.__r_.__value_.__r.__words[2]);
            std::string::size_type v41 = v58.__r_.__value_.__r.__words[0];
            __int16 v42 = *(std::string **)(v36 + 32 * v35 + 16);
            uint64_t v55 = 0;
            long long v56 = 0uLL;
            std::optional<std::string>::value_or[abi:ne180100]<std::string>((uint64_t)(a4 + 7), (uint64_t)&v55, &v57);
            uint64_t v43 = &v58;
            if (v40 < 0) {
              uint64_t v43 = (std::string *)v41;
            }
            __int16 v44 = &v57;
            if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              __int16 v44 = (std::string *)v57.__r_.__value_.__r.__words[0];
            }
            uint64_t buf = 68289795;
            __int16 v60 = 2082;
            __int16 v61 = "";
            __int16 v62 = 2081;
            __int16 v63 = v43;
            __int16 v64 = 2049;
            __int16 v65 = v42;
            __int16 v66 = 2081;
            __int16 v67 = v44;
            _os_log_impl(&dword_25631F000, v38, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Localizer results, cluster\", \"microLocationId\":%{private, location:escape_only}s, \"probability\":\"%{private}.6f\", \"clientIdentifier\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x30u);
            if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v57.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v56) < 0) {
              operator delete(v55);
            }
            if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v58.__r_.__value_.__l.__data_);
            }
          }

          unint64_t v35 = v37;
          uint64_t v36 = *a4;
          ++v37;
        }
        while (v35 < (a4[1] - *a4) >> 5);
      }
    }
  }
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t *, uint64_t))(**(void **)(a1 + 2584) + 48))(*(void *)(a1 + 2584), v46, v47, a4, v48);
}

void sub_2563449B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  _Unwind_Resume(a1);
}

void std::optional<std::string>::value_or[abi:ne180100]<std::string>(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  if (*(unsigned char *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a3->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
    }
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
  }
}

uint64_t non-virtual thunk to'CLMicroLocationLogic::onSendPredictionResultsToClient(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  return CLMicroLocationLogic::onSendPredictionResultsToClient(a1 - 16, a2, a3, a4, a5);
}

uint64_t CLMicroLocationLogic::onSendGenericEventResponseToClient(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 2584) + 56))();
}

uint64_t non-virtual thunk to'CLMicroLocationLogic::onSendGenericEventResponseToClient(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 2568) + 56))();
}

uint64_t CLMicroLocationLogic::onEnableMiLoAtCurrentLocationCompleted(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 2584) + 64))(*(void *)(a1 + 2584));
  if (a2 == -1 && *(unsigned char *)(a1 + 96))
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
    }
    double v5 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_25631F000, v5, OS_LOG_TYPE_DEFAULT, "starting custom LOI recording scan", v6, 2u);
    }
    return CLMicroLocationTriggerManager::startCustomLoiRecordingSession((CLMicroLocationTriggerManager *)(a1 + 1560));
  }
  return result;
}

uint64_t non-virtual thunk to'CLMicroLocationLogic::onEnableMiLoAtCurrentLocationCompleted(uint64_t a1, uint64_t a2)
{
  return CLMicroLocationLogic::onEnableMiLoAtCurrentLocationCompleted(a1 - 16, a2);
}

BOOL CLMicroLocationLogic::labelObservation(CLMicroLocationLogic *this, uuid a2, uuid a3, uuid a4)
{
  return CLMiLoServiceManager::labelObservation((CLMicroLocationLogic *)((char *)this + 1768), a2, a3, a4);
}

BOOL CLMicroLocationLogic::labelObservationsBetweenDates(CLMicroLocationLogic *this, uuid a2, const uuid *a3, const uuid *a4, NSDate *a5, NSDate *a6)
{
  return CLMiLoServiceManager::labelObservationsBetweenDates((CLMicroLocationLogic *)((char *)this + 1768), a2, a3, a4, a5, a6);
}

BOOL CLMicroLocationLogic::isLowLatencyMode(CLMicroLocationLogic *this)
{
  return CLMicroLocationTriggerManager::isLowLatencyMode((CLMicroLocationLogic *)((char *)this + 1560));
}

BOOL CLMicroLocationLogic::requestMicroLocationLearning(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const uuid *a5)
{
  return CLMiLoServiceManager::requestMicroLocationLearning((CLMiLoServiceManager *)(a1 + 1768), a2, a3, a4, a5);
}

void CLMicroLocationLogic::triggerLearning(CLMicroLocationLogic *this)
{
  if (*((char *)this + 79) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 7), *((void *)this + 8));
  }
  else {
    std::string __p = *(std::string *)((char *)this + 56);
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) == 6)
    {
      p_p = &__p;
      goto LABEL_9;
    }
LABEL_13:
    (*(void (**)(void))(**((void **)this + 323) + 104))(*((void *)this + 323));
    goto LABEL_14;
  }
  if (__p.__r_.__value_.__l.__size_ != 6) {
    goto LABEL_13;
  }
  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_9:
  int data = (int)p_p->__r_.__value_.__l.__data_;
  int v4 = WORD2(p_p->__r_.__value_.__r.__words[0]);
  if (data != 1953723747 || v4 != 28015) {
    goto LABEL_13;
  }
  (*(void (**)(void, char *))(**((void **)this + 323) + 112))(*((void *)this + 323), (char *)this + 80);
LABEL_14:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_256344D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'CLMicroLocationLogic::triggerLearning(CLMicroLocationLogic *this)
{
}

BOOL CLMicroLocationLogic::startUpdating(CLMicroLocationLogic *this, uuid a2, int a3)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  uuid v4 = a2;
  return CLMiLoServiceManager::startUpdating((CLMicroLocationLogic *)((char *)this + 1768), &v4, a3);
}

BOOL CLMicroLocationLogic::stopUpdating(CLMicroLocationLogic *this, const uuid *a2)
{
  return CLMiLoServiceManager::stopUpdating((CLMicroLocationLogic *)((char *)this + 1768), a2);
}

uint64_t CLMicroLocationLogic::createCustomLoiAtCurrentLocation(uint64_t a1, const uuid *a2, void *a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v5 = a3;
  *(unsigned char *)(a1 + 96) = [v5 isInRoomDetectionEnabled];
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
  }
  uint64_t v6 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    long long v7 = (char *)operator new(0x28uLL);
    *(void *)(v7 + 29) = 0;
    *(_OWORD *)long long v7 = 0u;
    *((_OWORD *)v7 + 1) = 0u;
    boost::uuids::to_chars<char *>((uint64_t)a2, v7);
    int v8 = [v5 isInRoomDetectionEnabled];
    int v9 = *(unsigned __int8 *)(a1 + 96);
    v12[0] = 68289795;
    v12[1] = 0;
    __int16 v13 = 2082;
    uint64_t v14 = "";
    __int16 v15 = 2081;
    uint64_t v16 = v7;
    __int16 v17 = 1026;
    int v18 = v8;
    __int16 v19 = 1026;
    int v20 = v9;
    _os_log_impl(&dword_25631F000, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"createCustomLoiAtCurrentLocation\", \"connectionId\":%{private, location:escape_only}s, \"In room enabled\":%{public}hhd, \"state\":%{public}hhd}", (uint8_t *)v12, 0x28u);
    operator delete(v7);
  }

  uint64_t v10 = CLMiLoServiceManager::enableMiLoAtCurrentLocation((CLMiLoServiceManager *)(a1 + 1768), a2);
  return v10;
}

void sub_256344F3C(_Unwind_Exception *a1)
{
  operator delete(v3);

  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationLogic::removeCustomLoiWithIdentifier(CLMicroLocationLogic *this, const uuid *a2, uuid a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uuid v16 = a3;
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
  }
  id v5 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = (char *)operator new(0x28uLL);
    *(void *)(v6 + 29) = 0;
    *(_OWORD *)uint64_t v6 = 0u;
    *((_OWORD *)v6 + 1) = 0u;
    boost::uuids::to_chars<char *>((uint64_t)a2, v6);
    long long v7 = (char *)operator new(0x28uLL);
    *(void *)(v7 + 29) = 0;
    *(_OWORD *)long long v7 = 0u;
    *((_OWORD *)v7 + 1) = 0u;
    boost::uuids::to_chars<char *>((uint64_t)&v16, v7);
    v9[0] = 68289539;
    v9[1] = 0;
    __int16 v10 = 2082;
    uint64_t v11 = "";
    __int16 v12 = 2081;
    __int16 v13 = v6;
    __int16 v14 = 2081;
    __int16 v15 = v7;
    _os_log_impl(&dword_25631F000, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"removeCustomLoiWithIdentifier\", \"identifier\":%{private, location:escape_only}s, \"connectionId\":%{private, location:escape_only}s}", (uint8_t *)v9, 0x26u);
    operator delete(v7);
    operator delete(v6);
  }

  return CLMiLoServiceManager::removeCustomLoiWithIdentifier((CLMicroLocationLogic *)((char *)this + 1768), a2, &v16);
}

void sub_2563450EC(_Unwind_Exception *a1)
{
  operator delete(v3);
  operator delete(v2);

  _Unwind_Resume(a1);
}

void CLMicroLocationLogic::updateBleOobKeys(uint64_t a1, void *a2)
{
}

void CLMicroLocationLogic::startOdometryMonitoring(id *this)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v2 = +[ULDefaultsSingleton shared];
  uint64_t v3 = [v2 defaultsDictionary];

  uuid v4 = [NSString stringWithUTF8String:"ULOdometryTrackingEnabled"];
  id v5 = [v3 objectForKey:v4];
  if (v5 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    int v6 = [v5 BOOLValue];
  }
  else {
    int v6 = [MEMORY[0x263EFFA88] BOOLValue];
  }
  int v7 = v6;

  if (v7)
  {
    CLMicroLocationSensorsLogic::startOdometryMonitoringIfStopped(this + 89);
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_4);
    }
    int v8 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      v9[0] = 68289026;
      v9[1] = 0;
      __int16 v10 = 2082;
      uint64_t v11 = "";
      _os_log_impl(&dword_25631F000, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Got odometry start request, but odometry monitor setting disabled\"}", (uint8_t *)v9, 0x12u);
    }
    CLMicroLocationSensorsLogic::stopOdometryMonitoringIfRunning(this + 89);
  }
}

void sub_256345308(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void non-virtual thunk to'CLMicroLocationLogic::startOdometryMonitoring(id *this)
{
}

void CLMicroLocationLogic::stopOdometryMonitoring(id *this)
{
}

void non-virtual thunk to'CLMicroLocationLogic::stopOdometryMonitoring(id *this)
{
}

void CLMicroLocationLogic::removePendingConnectionRequestsByConnectionToken(CLMicroLocationLogic *this, uuid a2)
{
}

void CLMicroLocationLogic::didEnableMicroLocationAtCurrentLocationWithResponse(uint64_t a1, uint64_t a2)
{
}

void non-virtual thunk to'CLMicroLocationLogic::didEnableMicroLocationAtCurrentLocationWithResponse(uint64_t a1, uint64_t a2)
{
}

void CLMicroLocationLogic::setCurrentLoi(CLMicroLocationLogic *this, uint64_t a2, uint64_t a3, uint64_t a4, CLMicroLocationProto *a5)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  CLMicroLocationLogic::setCurrentRTLOI(this, (uint64_t)&__p, a3, a4, a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_256345414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'CLMicroLocationLogic::setCurrentLoi(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, CLMicroLocationProto *a5)
{
}

void CLMicroLocationLogic::onOdometryUpdate(CLMicroLocationLogic *this, Entry a2)
{
  uint64_t v2 = *(long long **)a2.var0.var0;
  id v3 = *(id *)(*((void *)this + 16) + 120);
  long long v7 = *v2;
  uint64_t v8 = *((void *)v2 + 2);
  id v4 = *((id *)v2 + 3);
  __int16 v10 = 0;
  uint64_t v11 = 0;
  int v9 = 0;
  uint64_t v12 = (void **)&v9;
  char v13 = 0;
  id v5 = operator new(0x20uLL);
  int v9 = v5;
  __int16 v10 = (char *)v5;
  uint64_t v11 = (char *)(v5 + 4);
  *(_OWORD *)id v5 = v7;
  _DWORD v5[2] = v8;
  id v6 = v4;
  void v5[3] = v6;
  __int16 v10 = (char *)(v5 + 4);
  [v3 insertEntries:&v9];
  uint64_t v12 = (void **)&v9;
  std::vector<CLMiLoOdometryTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v12);
}

void sub_256345510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::vector<CLMiLoOdometryTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)va);

  _Unwind_Resume(a1);
}

void CLMicroLocationLogic::onOdometryError(CLMicroLocationLogic *this, Entry a2)
{
  uint64_t v2 = *(long long **)a2.var0.var0;
  id v3 = *(id *)(*((void *)this + 16) + 120);
  long long v7 = *v2;
  uint64_t v8 = *((void *)v2 + 2);
  id v4 = *((id *)v2 + 3);
  __int16 v10 = 0;
  uint64_t v11 = 0;
  int v9 = 0;
  uint64_t v12 = (void **)&v9;
  char v13 = 0;
  id v5 = operator new(0x20uLL);
  int v9 = v5;
  __int16 v10 = (char *)v5;
  uint64_t v11 = (char *)(v5 + 4);
  *(_OWORD *)id v5 = v7;
  _DWORD v5[2] = v8;
  id v6 = v4;
  void v5[3] = v6;
  __int16 v10 = (char *)(v5 + 4);
  [v3 insertEntries:&v9];
  uint64_t v12 = (void **)&v9;
  std::vector<CLMiLoOdometryTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v12);
}

void sub_256345618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::vector<CLMiLoOdometryTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)va);

  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_1()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

void *std::vector<CLMicroLocationLoggedEventsTable::Entry>::__init_with_size[abi:ne180100]<CLMicroLocationLoggedEventsTable::Entry*,CLMicroLocationLoggedEventsTable::Entry*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    id v6 = result;
    std::vector<CLMicroLocationLoggedEventsTable::Entry>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationLoggedEventsTable::Entry>,CLMicroLocationLoggedEventsTable::Entry*,CLMicroLocationLoggedEventsTable::Entry*,CLMicroLocationLoggedEventsTable::Entry*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2563456F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<CLMicroLocationLoggedEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<CLMicroLocationLoggedEventsTable::Entry>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xC30C30C30C30C4) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationLoggedEventsTable::Entry>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[336 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationLoggedEventsTable::Entry>,CLMicroLocationLoggedEventsTable::Entry*,CLMicroLocationLoggedEventsTable::Entry*,CLMicroLocationLoggedEventsTable::Entry*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = (_OWORD *)(a4 + v7);
      long long v9 = *(_OWORD *)(a2 + v7);
      *(_OWORD *)((char *)v8 + 12) = *(_OWORD *)(a2 + v7 + 12);
      _OWORD *v8 = v9;
      CLMicroLocationProto::ReceivedEvent::ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)(a4 + v7 + 32), (const CLMicroLocationProto::ReceivedEvent *)(a2 + v7 + 32));
      v7 += 336;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_2563457E4(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 304;
    do
    {
      CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)(v4 + v2));
      v2 -= 336;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<CLMicroLocationLoggedEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    id v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        id v6 = v4 - 336;
        CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)(v4 - 304));
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      id v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<CLMiLoServiceManager::ConnectionRequestParams>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    id v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 104;
        std::allocator<CLMiLoServiceManager::ConnectionRequestParams>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      id v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<CLMiLoServiceManager::ConnectionRequestParams>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 103) < 0) {
    operator delete(*(void **)(a2 + 80));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    id v3 = *(void **)a2;
    operator delete(v3);
  }
}

uint64_t std::deque<CLMiLoServiceManager::OutstandingEnableCustomLoiRequest>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  id v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      id v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 128;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 256;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<CLMiLoServiceManager::OutstandingEnableCustomLoiRequest *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<CLMiLoServiceManager::OutstandingEnableCustomLoiRequest *>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void *)*v2;
      unint64_t v4 = (std::__shared_weak_count *)v2[5];
      if (v4) {
        std::__shared_weak_count::__release_weak(v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__list_imp<CLMiLoService>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        unint64_t v5 = (uint64_t *)v3[1];
        std::__destroy_at[abi:ne180100]<CLMiLoService,0>((uint64_t)(v3 + 2));
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void std::__destroy_at[abi:ne180100]<CLMiLoService,0>(uint64_t a1)
{
  std::deque<CLMiLoService::OutstandingRequest>::~deque[abi:ne180100]((void *)(a1 + 376));
  std::deque<CLMiLoService::OutstandingRequest>::~deque[abi:ne180100]((void *)(a1 + 304));
  std::__optional_destruct_base<CachedPrediction,false>::~__optional_destruct_base[abi:ne180100](a1 + 112);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 104);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0)
  {
    uint64_t v3 = *(void **)(a1 + 40);
    operator delete(v3);
  }
}

uint64_t std::deque<CLMiLoService::OutstandingRequest>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 60;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 120;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<CLMiLoServiceManager::OutstandingEnableCustomLoiRequest *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__optional_destruct_base<CachedPrediction,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 184))
  {
    uint64_t v2 = *(void **)(a1 + 144);
    if (v2)
    {
      *(void *)(a1 + 152) = v2;
      operator delete(v2);
    }
    if (*(unsigned char *)(a1 + 128)) {
      std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::~__hash_table(a1 + 88);
    }
    if (*(unsigned char *)(a1 + 80) && *(char *)(a1 + 79) < 0) {
      operator delete(*(void **)(a1 + 56));
    }
    uint64_t v3 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v3;
      operator delete(v3);
    }
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::__deallocate_node(int a1, void **__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::vector<std::shared_ptr<CLMiLoService::ModelAndConf>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::shared_ptr<CLMiLoService::ModelAndConf>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::shared_ptr<CLMiLoService::ModelAndConf>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    unint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  a1[1] = v2;
}

void std::vector<CLMicroLocationProto::RecordingEvent>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 144;
      uint64_t v7 = v4 - 144;
      uint64_t v8 = v4 - 144;
      do
      {
        long long v9 = *(void (***)(char *))v8;
        v8 -= 144;
        (*v9)(v7);
        v6 -= 144;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__optional_destruct_base<CLMicroLocationLocalizationController::LocalizationInput,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 400))
  {
    CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)(a1 + 248));
    std::__optional_destruct_base<CLMicroLocationFingerprint,false>::~__optional_destruct_base[abi:ne180100](a1 + 48);
    uint64_t v2 = *(void **)(a1 + 24);
    if (v2)
    {
      *(void *)(a1 + 32) = v2;
      operator delete(v2);
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<CLMicroLocationFingerprint,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 192))
  {
    uint64_t v2 = *(void **)(a1 + 168);
    if (v2)
    {
      *(void *)(a1 + 176) = v2;
      operator delete(v2);
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(a1 + 104);
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(a1 + 64);
    std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table(a1);
  }
  return a1;
}

uint64_t std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__variant_detail::__dtor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(v2 + 4));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_2704DA760[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJyN5boost5uuids4uuidENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSI_1EJySA_SG_EEEEEEDcSK_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

void std::vector<CLMicroLocationLocalizationController::LocalizationRequest>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    char v4 = (char *)v1[1];
    unint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        CLMicroLocationLocalizationController::LocalizationRequest::~LocalizationRequest((CLMicroLocationLocalizationController::LocalizationRequest *)(v4 - 200));
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<CLMiLoProtobufWrapper::Measurement>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    char v4 = (char *)v1[1];
    unint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        CLMicroLocationProto::Measurement::~Measurement((CLMicroLocationProto::Measurement *)(v4 - 88));
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::string::basic_string[abi:ne180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

void boost::throw_exception<boost::uuids::entropy_error>(uint64_t a1, uint64_t a2)
{
  exception = __cxa_allocate_exception(0x48uLL);
  boost::wrapexcept<boost::uuids::entropy_error>::wrapexcept(exception, a1, a2);
}

void sub_2563462DC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::wrapexcept<boost::uuids::entropy_error>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 32) = &unk_2704DA8E8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

uint64_t boost::wrapexcept<boost::uuids::entropy_error>::wrapexcept(uint64_t a1, const std::runtime_error *a2, int8x16_t *a3)
{
  *(void *)a1 = &unk_2704DA888;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  uint64_t v6 = a2[1].__vftable;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)a1 = &unk_2704DA808;
  *(void *)(a1 + 8) = &unk_2704DA838;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = &unk_2704DA868;
  *(_DWORD *)(a1 + 64) = a3[1].i32[0];
  *(int8x16_t *)(a1 + 48) = vextq_s8(*a3, *a3, 8uLL);
  return a1;
}

void boost::wrapexcept<boost::uuids::entropy_error>::clone()
{
}

void sub_2563465E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::uuids::entropy_error>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x48uLL);
  boost::wrapexcept<boost::uuids::entropy_error>::wrapexcept((uint64_t)exception, a1);
}

void sub_2563466A8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::uuids::entropy_error>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 32) = &unk_2704DA8E8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  JUMPOUT(0x25A2A6340);
}

void non-virtual thunk to'boost::wrapexcept<boost::uuids::entropy_error>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_2704DA8E8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  uint64_t vars8;

  *(void *)(a1 + 24) = &unk_2704DA8E8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x25A2A6340);
}

uint64_t boost::uuids::entropy_error::errcode(boost::uuids::entropy_error *this)
{
  return *((void *)this + 2);
}

void non-virtual thunk to'boost::wrapexcept<boost::uuids::entropy_error>::~wrapexcept(void *a1)
{
  *a1 = &unk_2704DA8E8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 - 3));
}

{
  uint64_t vars8;

  *a1 = &unk_2704DA8E8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 - 3));
  JUMPOUT(0x25A2A6340);
}

void boost::uuids::entropy_error::~entropy_error(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x25A2A6340);
}

uint64_t *boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *a1 = 0;
  }
  return a1;
}

uint64_t boost::wrapexcept<boost::uuids::entropy_error>::wrapexcept(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2704DA888;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(void *)(a1 + 8) = &unk_2704DA8B8;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = &unk_2704DA8E8;
  *(void *)(a1 + 40) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v5;
  *(void *)a1 = &unk_2704DA808;
  *(void *)(a1 + 8) = &unk_2704DA838;
  *(void *)(a1 + 32) = &unk_2704DA868;
  return a1;
}

void sub_256346A9C(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result);
  }
  *a1 = a2;
  if (a2)
  {
    long long v5 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 24);
    return v5(a2);
  }
  return result;
}

void std::__throw_bad_optional_access[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x263F8C3B0] + 16;
  __cxa_throw(exception, MEMORY[0x263F8C200], MEMORY[0x263F8C088]);
}

void ___ZL47_CLLogObjectForCategory_MicroLocationQE_Defaultv_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocationQE");
  uint64_t v1 = (void *)logObject_MicroLocationQE_Default;
  logObject_MicroLocationQE_Default = (uint64_t)v0;
}

void std::vector<CLMiLoServiceManager::LocalizationResultsPerModel>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 216;
        std::allocator<CLMiLoServiceManager::LocalizationResultsPerModel>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<CLMiLoServiceManager::LocalizationResultsPerModel>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 208))
  {
    uint64_t v3 = *(void **)(a2 + 184);
    if (v3)
    {
      *(void *)(a2 + 192) = v3;
      operator delete(v3);
    }
  }
  uint64_t v4 = *(void **)(a2 + 144);
  if (v4)
  {
    *(void *)(a2 + 152) = v4;
    operator delete(v4);
  }
  if (*(unsigned char *)(a2 + 128)) {
    std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::~__hash_table(a2 + 88);
  }
  if (*(unsigned char *)(a2 + 80) && *(char *)(a2 + 79) < 0) {
    operator delete(*(void **)(a2 + 56));
  }
  long long v5 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v5;
    operator delete(v5);
  }
}

void std::__optional_storage_base<CLMicroLocationConfigurationTable::Entry,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<CLMicroLocationConfigurationTable::Entry,false>>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 112) == *(unsigned __int8 *)(a2 + 112))
  {
    if (*(unsigned char *)(a1 + 112))
    {
      *(void *)a1 = *(void *)a2;
      uint64_t v4 = (void **)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        operator delete(*v4);
      }
      long long v5 = *(_OWORD *)(a2 + 8);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(_OWORD *)uint64_t v4 = v5;
      *(unsigned char *)(a2 + 3CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0;
      *(unsigned char *)(a2 + 8) = 0;
      long long v6 = *(_OWORD *)(a2 + 32);
      *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = v6;
      CLMicroLocationProto::Configuration::CopyFrom((CLMicroLocationProto::Configuration *)(a1 + 56), (const CLMicroLocationProto::Configuration *)(a2 + 56));
    }
  }
  else if (*(unsigned char *)(a1 + 112))
  {
    std::__optional_destruct_base<CLMicroLocationConfigurationTable::Entry,false>::reset[abi:ne180100](a1);
  }
  else
  {
    std::__construct_at[abi:ne180100]<CLMicroLocationConfigurationTable::Entry,CLMicroLocationConfigurationTable::Entry,CLMicroLocationConfigurationTable::Entry*>(a1, a2);
    *(unsigned char *)(a1 + 112) = 1;
  }
}

void std::__optional_destruct_base<CLMicroLocationConfigurationTable::Entry,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 112))
  {
    CLMicroLocationProto::Configuration::~Configuration((CLMicroLocationProto::Configuration *)(a1 + 56));
    if (*(char *)(a1 + 31) < 0) {
      operator delete(*(void **)(a1 + 8));
    }
    *(unsigned char *)(a1 + 112) = 0;
  }
}

uint64_t std::__construct_at[abi:ne180100]<CLMicroLocationConfigurationTable::Entry,CLMicroLocationConfigurationTable::Entry,CLMicroLocationConfigurationTable::Entry*>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  long long v3 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v3;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v4;
  CLMicroLocationProto::Configuration::Configuration((CLMicroLocationProto::Configuration *)(a1 + 56), (const CLMicroLocationProto::Configuration *)(a2 + 56));
  return a1;
}

void sub_256346EA0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<CLMicroLocationConfigurationTable::Entry,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 112))
  {
    CLMicroLocationProto::Configuration::~Configuration((CLMicroLocationProto::Configuration *)(a1 + 56));
    if (*(char *)(a1 + 31) < 0) {
      operator delete(*(void **)(a1 + 8));
    }
  }
  return a1;
}

uint64_t std::__hash_table<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item::HashItem,CLMicroLocationRapportMonitor::Item::PredicateItem,std::allocator<CLMicroLocationRapportMonitor::Item>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item::HashItem,CLMicroLocationRapportMonitor::Item::PredicateItem,std::allocator<CLMicroLocationRapportMonitor::Item>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item::HashItem,CLMicroLocationRapportMonitor::Item::PredicateItem,std::allocator<CLMicroLocationRapportMonitor::Item>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      long long v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<CLMicroLocationRapportMonitor::Item,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<CLMicroLocationRapportMonitor::Item,0>(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 16);
    operator delete(v2);
  }
}

uint64_t std::__function::__value_func<ULWiFiScanProvider * ()(objc_object  {objcproto26ULWiFiScanProviderDelegate}*)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  long long v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    long long v3 = (void *)(a1 + 24);
  }
  *long long v3 = 0;
  return a1;
}

void *std::__function::__value_func<ULWiFiScanProvider * ()(objc_object  {objcproto26ULWiFiScanProviderDelegate}*)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<ULOdometryProvider * ()(objc_object  {objcproto26ULOdometryProviderDelegate}*)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  long long v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    long long v3 = (void *)(a1 + 24);
  }
  *long long v3 = 0;
  return a1;
}

void *std::__function::__value_func<ULOdometryProvider * ()(objc_object  {objcproto26ULOdometryProviderDelegate}*)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t **std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__emplace_unique_key_args<CLMicroLocationRecordingCompletionMetaInformation::RecordingError,CLMicroLocationRecordingCompletionMetaInformation::RecordingError>(uint64_t **a1, int *a2, _DWORD *a3)
{
  long long v6 = a1 + 1;
  long long v5 = a1[1];
  if (v5)
  {
    int v7 = *a2;
    while (1)
    {
      while (1)
      {
        size_t v8 = (uint64_t **)v5;
        int v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9) {
          break;
        }
        long long v5 = *v8;
        long long v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      long long v5 = v8[1];
      if (!v5)
      {
        long long v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    size_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t *std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  long long v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      long long v3 = (uint64_t *)v2[2];
      uint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), long long v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            int v9 = (uint64_t **)a2[2];
          }
          else
          {
            int v9 = (uint64_t **)v2[1];
            uint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              void v10[2] = (uint64_t)v2;
              long long v3 = (uint64_t *)v2[2];
            }
            _DWORD v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            void *v9 = v2;
            void v2[2] = (uint64_t)v9;
            long long v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *long long v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          void v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (int v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *uint64_t v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            long long v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          void v2[2] = (uint64_t)a2;
          long long v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        void v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        *uint64_t v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      unsigned char *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t boost::conversion::detail::try_lexical_convert<std::string,boost::uuids::uuid>(uint64_t a1, std::string *a2)
{
  boost::detail::lexical_istream_limited_src<char,std::char_traits<char>,true,2ul>::lexical_istream_limited_src((uint64_t)v6);
  boost::detail::lexical_istream_limited_src<char,std::char_traits<char>,true,2ul>::shl_input_streamable<boost::uuids::uuid const>(v6);
  uint64_t v4 = v3;
  if (v3) {
    std::string::__assign_trivial[abi:ne180100]<char const*,char const*>(a2, v9, v10, v10 - v9);
  }
  std::ostream::~ostream();
  v6[0].n128_u64[0] = MEMORY[0x263F8C318] + 16;
  if (v8 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  return v4;
}

void sub_256347530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t boost::detail::lexical_istream_limited_src<char,std::char_traits<char>,true,2ul>::lexical_istream_limited_src(uint64_t a1)
{
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::streambuf::basic_streambuf();
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 24;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_2704DA928;
  *(void *)(a1 + 104) = MEMORY[0x263F8C2F8] + 24;
  *(void *)(a1 + 112) = MEMORY[0x263F8C2F8] + 64;
  std::ios_base::init((std::ios_base *)(a1 + 112), (void *)a1);
  *(void *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 256) = -1;
  *(void *)(a1 + 272) = a1 + 264;
  *(void *)(a1 + 280) = a1 + 266;
  return a1;
}

uint64_t boost::detail::basic_unlockedbuf<std::stringbuf,char>::~basic_unlockedbuf(uint64_t a1)
{
  *(void *)a1 = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  return std::streambuf::~streambuf();
}

void boost::detail::basic_unlockedbuf<std::stringbuf,char>::~basic_unlockedbuf(uint64_t a1)
{
  *(void *)a1 = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  std::streambuf::~streambuf();
  JUMPOUT(0x25A2A6340);
}

void *boost::detail::basic_pointerbuf<char,std::stringbuf>::setbuf(void *result, uint64_t a2, uint64_t a3)
{
  result[2] = a2;
  result[3] = a2;
  result[4] = a2 + a3;
  return result;
}

double boost::detail::basic_pointerbuf<char,std::stringbuf>::seekoff@<D0>(void *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  if ((a4 & 0x10) != 0)
  {
    uint64_t v7 = -1;
    goto LABEL_19;
  }
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[4] - v5;
  if (!a3)
  {
    uint64_t v7 = -1;
    if (a2 < 0 || v6 < a2) {
      goto LABEL_19;
    }
    uint64_t v9 = v5 + a2;
LABEL_15:
    uint64_t v8 = a1[4];
    goto LABEL_16;
  }
  if (a3 == 1)
  {
    uint64_t v7 = -1;
    uint64_t v10 = a1[3] - v5 + a2;
    if (v10 < 0 || v10 > v6) {
      goto LABEL_19;
    }
    uint64_t v9 = a1[3] + a2;
    goto LABEL_15;
  }
  if (a3 != 2)
  {
    uint64_t v9 = a1[3];
    goto LABEL_18;
  }
  uint64_t v7 = -1;
  if ((a2 & 0x8000000000000000) == 0 && v6 >= a2)
  {
    uint64_t v8 = a1[4];
    uint64_t v9 = v8 - a2;
LABEL_16:
    a1[3] = v9;
    a1[4] = v8;
LABEL_18:
    uint64_t v7 = v9 - v5;
  }
LABEL_19:
  double result = 0.0;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(void *)(a5 + 128) = v7;
  return result;
}

double boost::detail::basic_pointerbuf<char,std::stringbuf>::seekpos@<D0>(void *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  if ((a3 & 0x10) == 0)
  {
    uint64_t v4 = a1[2];
    uint64_t v5 = *(void *)(a2 + 128);
    if (v5 <= a1[4] - v4)
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = a1[4];
      a1[3] = v6;
      a1[4] = v7;
    }
  }
  double result = 0.0;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(void *)(a4 + 128) = -1;
  return result;
}

__n128 boost::detail::lexical_istream_limited_src<char,std::char_traits<char>,true,2ul>::shl_input_streamable<boost::uuids::uuid const>(__n128 *a1)
{
  uint64_t v2 = &a1[6].n128_i64[1];
  uint64_t v3 = (std::ios_base *)&a1[6].n128_i8[*(void *)(a1[6].n128_u64[1] - 24) + 8];
  v3->__exceptions_ = 1;
  std::ios_base::clear(v3, v3->__rdstate_);
  boost::uuids::operator<<<char,std::char_traits<char>>(v2);
  __n128 result = *(__n128 *)(*(uint64_t *)((char *)v2 + *(void *)(a1[6].n128_u64[1] - 24) + 40) + 40);
  a1[17] = result;
  return result;
}

uint64_t *boost::uuids::operator<<<char,std::char_traits<char>>(uint64_t *a1)
{
  uint64_t v2 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::fmtflags fmtflags = v2->__fmtflags_;
  boost::io::basic_ios_fill_saver<char,std::char_traits<char>>::basic_ios_fill_saver((uint64_t)v29, v2);
  MEMORY[0x25A2A6110](v28, a1);
  if (v28[0])
  {
    std::ios_base::fmtflags v26 = fmtflags;
    uint64_t v27 = v2;
    uint64_t v4 = *a1;
    uint64_t v5 = (char *)a1 + *(void *)(*a1 - 24);
    uint64_t v6 = *((void *)v5 + 3);
    *((void *)v5 + 3) = 0;
    uint64_t v7 = (char *)a1 + *(void *)(v4 - 24);
    int v8 = *((_DWORD *)v7 + 2);
    int v9 = *((_DWORD *)v7 + 36);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(v4 - 24)));
      uint64_t v10 = std::locale::use_facet(&v30, MEMORY[0x263F8C108]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v30);
      *((_DWORD *)v7 + 36) = v9;
    }
    if ((v8 & 0x90) != 0 && v6 >= 37)
    {
      uint64_t v11 = v6 - 36;
      do
      {
        LOBYTE(v30.__locale_) = v9;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&v30, 1);
        --v11;
      }
      while (v11);
    }
    uint64_t v12 = *a1;
    *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 8) = *(_DWORD *)((unsigned char *)a1 + *(void *)(*a1 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(_DWORD *)((char *)a1 + *(void *)(v12 - 24) + 8) = *(_DWORD *)((unsigned char *)a1 + *(void *)(v12 - 24) + 8) & 0xFFFFFF4F | 0x80;
    uint64_t v13 = (const std::ios_base *)((char *)a1 + *(void *)(v12 - 24));
    std::ios_base::getloc(v13);
    char v24 = v8;
    uint64_t v25 = v6;
    __int16 v14 = std::locale::use_facet(&v30, MEMORY[0x263F8C108]);
    std::ios_base::fmtflags v15 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 48);
    std::locale::~locale(&v30);
    if (v13[1].__fmtflags_ == -1)
    {
      std::ios_base::getloc(v13);
      uuid v16 = std::locale::use_facet(&v30, MEMORY[0x263F8C108]);
      std::ios_base::fmtflags v17 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 32);
      std::locale::~locale(&v30);
      v13[1].__fmtflags_ = v17;
    }
    unint64_t v18 = 0;
    v13[1].__fmtflags_ = v15;
    __int16 v19 = (std::locale::id *)MEMORY[0x263F8C108];
    do
    {
      *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 24) = 2;
      std::ostream::operator<<();
      if (v18 <= 9 && ((1 << v18) & 0x2A8) != 0)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
        int v20 = std::locale::use_facet(&v30, v19);
        char v21 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 45);
        std::locale::~locale(&v30);
        LOBYTE(v30.__locale_) = v21;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&v30, 1);
      }
      ++v18;
    }
    while (v18 != 16);
    if ((v24 & 0x20) != 0 && v25 >= 37)
    {
      uint64_t v22 = v25 - 36;
      do
      {
        LOBYTE(v30.__locale_) = v9;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&v30, 1);
        --v22;
      }
      while (v22);
    }
    *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 24) = 0;
    uint64_t v2 = v27;
    std::ios_base::fmtflags fmtflags = v26;
  }
  MEMORY[0x25A2A6120](v28);
  boost::io::basic_ios_fill_saver<char,std::char_traits<char>>::restore((uint64_t)v29);
  v2->__fmtflags_ = fmtflags;
  return a1;
}

void sub_256347D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, std::locale a19)
{
  *(_DWORD *)(a14 + 8) = a13;
  _Unwind_Resume(a1);
}

uint64_t boost::io::basic_ios_fill_saver<char,std::char_traits<char>>::basic_ios_fill_saver(uint64_t a1, std::ios_base *this)
{
  *(void *)a1 = this;
  std::ios_base::fmtflags fmtflags = this[1].__fmtflags_;
  if (fmtflags == -1)
  {
    std::ios_base::getloc(this);
    uint64_t v5 = std::locale::use_facet(&v7, MEMORY[0x263F8C108]);
    std::ios_base::fmtflags fmtflags = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(&v7);
    this[1].__fmtflags_ = fmtflags;
  }
  *(unsigned char *)(a1 + 8) = fmtflags;
  return a1;
}

void sub_256347E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x25A2A6110](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x25A2A6120](v13);
  return a1;
}

void sub_256347F74(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x25A2A6120](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x256347F54);
}

void sub_256347FC8(_Unwind_Exception *a1)
{
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      uint64_t v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_256348148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void boost::io::basic_ios_fill_saver<char,std::char_traits<char>>::restore(uint64_t a1)
{
  uint64_t v1 = *(const std::ios_base **)a1;
  std::ios_base::fmtflags v2 = *(char *)(a1 + 8);
  if (*(_DWORD *)(*(void *)a1 + 144) == -1)
  {
    std::ios_base::getloc(*(const std::ios_base **)a1);
    uint64_t v3 = std::locale::use_facet(&v5, MEMORY[0x263F8C108]);
    std::ios_base::fmtflags v4 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 32);
    std::locale::~locale(&v5);
    v1[1].__fmtflags_ = v4;
  }
  v1[1].__fmtflags_ = v2;
}

void sub_2563481FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void std::string::__assign_trivial[abi:ne180100]<char const*,char const*>(std::string *this, std::string::value_type *a2, std::string::value_type *a3, std::string::size_type a4)
{
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    int v8 = this;
    if (a4 <= 0x16) {
      goto LABEL_11;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v10 = 22;
    goto LABEL_6;
  }
  unint64_t v11 = this->__r_.__value_.__r.__words[2];
  std::string::size_type v10 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v10 < a4)
  {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
LABEL_6:
    std::string::__grow_by(this, v10, a4 - v10, size, 0, size, 0);
    this->__r_.__value_.__l.__size_ = 0;
    LOBYTE(v12) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    goto LABEL_8;
  }
  unint64_t v12 = HIBYTE(v11);
LABEL_8:
  int v8 = this;
  if ((v12 & 0x80) != 0) {
    int v8 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
LABEL_11:
  while (a2 != a3)
  {
    std::string::value_type v13 = *a2++;
    v8->__r_.__value_.__s.__data_[0] = v13;
    int v8 = (std::string *)((char *)v8 + 1);
  }
  v8->__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    this->__r_.__value_.__l.__size_ = a4;
  }
  else {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = a4 & 0x7F;
  }
}

void boost::throw_exception<boost::bad_lexical_cast>(uint64_t a1)
{
  exception = (__n128 *)__cxa_allocate_exception(0x48uLL);
  boost::wrapexcept<boost::bad_lexical_cast>::wrapexcept(exception, a1);
}

void sub_256348328(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__n128 boost::wrapexcept<boost::bad_lexical_cast>::wrapexcept(__n128 *a1, uint64_t a2)
{
  a1->n128_u64[0] = (unint64_t)&unk_2704DA888;
  a1->n128_u64[1] = (unint64_t)&unk_2704DAAD0;
  __n128 result = *(__n128 *)(a2 + 8);
  a1[1] = result;
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u32[0] = -1;
  a1->n128_u64[0] = (unint64_t)&unk_2704DAA58;
  a1->n128_u64[1] = (unint64_t)&unk_2704DAA88;
  a1[2].n128_u64[0] = (unint64_t)&unk_2704DAAB0;
  a1[2].n128_u64[1] = 0;
  return result;
}

uint64_t boost::wrapexcept<boost::bad_lexical_cast>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 32) = &unk_2704DA8E8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::exception::~exception((std::exception *)(a1 + 8));
  return a1;
}

void boost::wrapexcept<boost::bad_lexical_cast>::clone()
{
}

void sub_256348608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::bad_lexical_cast>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x48uLL);
  boost::wrapexcept<boost::bad_lexical_cast>::wrapexcept((uint64_t)exception, a1);
}

void sub_2563486C8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::bad_lexical_cast>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 32) = &unk_2704DA8E8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::exception::~exception((std::exception *)(a1 + 8));
  JUMPOUT(0x25A2A6340);
}

void non-virtual thunk to'boost::wrapexcept<boost::bad_lexical_cast>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_2704DA8E8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::exception::~exception((std::exception *)a1);
}

{
  uint64_t vars8;

  *(void *)(a1 + 24) = &unk_2704DA8E8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::exception::~exception((std::exception *)a1);
  JUMPOUT(0x25A2A6340);
}

const char *boost::bad_lexical_cast::what(boost::bad_lexical_cast *this)
{
  return "bad lexical cast: source type value could not be interpreted as target";
}

void non-virtual thunk to'boost::wrapexcept<boost::bad_lexical_cast>::~wrapexcept(void *a1)
{
  *a1 = &unk_2704DA8E8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 3);
}

{
  uint64_t vars8;

  *a1 = &unk_2704DA8E8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 3);
  JUMPOUT(0x25A2A6340);
}

void boost::bad_lexical_cast::~bad_lexical_cast(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x25A2A6340);
}

uint64_t boost::wrapexcept<boost::bad_lexical_cast>::wrapexcept(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2704DA888;
  *(void *)(a1 + 8) = &unk_2704DAAD0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = &unk_2704DA8E8;
  *(void *)(a1 + 40) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v5;
  *(void *)a1 = &unk_2704DAA58;
  *(void *)(a1 + 8) = &unk_2704DAA88;
  *(void *)(a1 + 32) = &unk_2704DAAB0;
  return a1;
}

void sub_256348A58(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void *std::vector<CLMicroLocationWiFiChannelHistogram>::__init_with_size[abi:ne180100]<CLMicroLocationWiFiChannelHistogram*,CLMicroLocationWiFiChannelHistogram*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = std::vector<CLMicroLocationWiFiChannelHistogram>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_256348ACC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<CLMicroLocationWiFiChannelHistogram>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

void std::vector<CLMicroLocationAssociatedStateTable::Entry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  std::ios_base::fmtflags v2 = *a1;
  if (*v2)
  {
    std::vector<CLMicroLocationAssociatedStateTable::Entry>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<CLMicroLocationAssociatedStateTable::Entry>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 72)
  {
    if (*(char *)(i - 49) < 0) {
      operator delete(*(void **)(i - 72));
    }
  }
  a1[1] = v2;
}

uint64_t std::vector<CLMicroLocationAssociatedStateTable::Entry>::__emplace_back_slow_path<std::string const&,boost::uuids::uuid const&,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>,BOOL,CLMacAddress,CLMicroLocationAssociatedStateTable::Entry::Band &,unsigned long>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6, unsigned int *a7, unsigned int *a8)
{
  uint64_t v9 = *a1;
  unint64_t v10 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  unint64_t v11 = v10 + 1;
  if (v10 + 1 > 0x38E38E38E38E38ELL) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v19 = (uint64_t)(a1 + 2);
  unint64_t v20 = 0x8E38E38E38E38E39 * ((a1[2] - v9) >> 3);
  if (2 * v20 > v11) {
    unint64_t v11 = 2 * v20;
  }
  if (v20 >= 0x1C71C71C71C71C7) {
    unint64_t v21 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v21 = v11;
  }
  uint64_t v29 = a1 + 2;
  if (v21) {
    uint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationAssociatedStateTable::Entry>>(v19, v21);
  }
  else {
    uint64_t v22 = 0;
  }
  uint64_t v25 = v22;
  std::ios_base::fmtflags v26 = &v22[72 * v10];
  uint64_t v27 = v26;
  __n128 v28 = &v22[72 * v21];
  CLMicroLocationAssociatedStateTable::Entry::Entry(v26, a2, a3, a4, *a5, a6, *a7, *a8);
  uint64_t v27 = v26 + 72;
  std::vector<CLMicroLocationAssociatedStateTable::Entry>::__swap_out_circular_buffer(a1, &v25);
  uint64_t v23 = a1[1];
  std::__split_buffer<CLMicroLocationAssociatedStateTable::Entry>::~__split_buffer((uint64_t)&v25);
  return v23;
}

void sub_256348D5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMicroLocationAssociatedStateTable::Entry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMicroLocationAssociatedStateTable::Entry>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationAssociatedStateTable::Entry>,std::reverse_iterator<CLMicroLocationAssociatedStateTable::Entry*>,std::reverse_iterator<CLMicroLocationAssociatedStateTable::Entry*>,std::reverse_iterator<CLMicroLocationAssociatedStateTable::Entry*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationAssociatedStateTable::Entry>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(72 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationAssociatedStateTable::Entry>,std::reverse_iterator<CLMicroLocationAssociatedStateTable::Entry*>,std::reverse_iterator<CLMicroLocationAssociatedStateTable::Entry*>,std::reverse_iterator<CLMicroLocationAssociatedStateTable::Entry*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 72);
      *(void *)(v9 - 56) = *(void *)(a3 - 56);
      *(_OWORD *)(v9 - 72) = v10;
      *(void *)(a3 - 64) = 0;
      *(void *)(a3 - 56) = 0;
      *(void *)(a3 - 72) = 0;
      long long v11 = *(_OWORD *)(a3 - 48);
      long long v12 = *(_OWORD *)(a3 - 16);
      *(_OWORD *)(v9 - 32) = *(_OWORD *)(a3 - 32);
      *(_OWORD *)(v9 - 16) = v12;
      *(_OWORD *)(v9 - 48) = v11;
      v9 -= 72;
      v7 -= 72;
      a3 -= 72;
    }
    while (a3 != a5);
    *((void *)&v17 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v9;
  }
  char v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationAssociatedStateTable::Entry>,std::reverse_iterator<CLMicroLocationAssociatedStateTable::Entry*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationAssociatedStateTable::Entry>,std::reverse_iterator<CLMicroLocationAssociatedStateTable::Entry*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationAssociatedStateTable::Entry>,std::reverse_iterator<CLMicroLocationAssociatedStateTable::Entry*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationAssociatedStateTable::Entry>,std::reverse_iterator<CLMicroLocationAssociatedStateTable::Entry*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 72;
  }
}

uint64_t std::__split_buffer<CLMicroLocationAssociatedStateTable::Entry>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<CLMicroLocationAssociatedStateTable::Entry>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 9;
      *(void *)(a1 + 16) = v2 - 9;
      if (*((char *)v2 - 49) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

char *std::vector<CLMicroLocationWiFiChannelHistogram>::__assign_with_size[abi:ne180100]<CLMicroLocationWiFiChannelHistogram const*,CLMicroLocationWiFiChannelHistogram const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<CLMicroLocationWiFiChannelHistogram>::__vallocate[abi:ne180100](v7, v11);
    std::string::value_type v13 = (char *)v7[1];
    long long v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      char v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  long long v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  long long v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    char v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *long long v12 = &v9[v17];
  return result;
}

void *std::vector<CLMicroLocationRapportMonitor::Item>::__init_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *> *>,std::__hash_const_iterator<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *> *>>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<CLMicroLocationRapportMonitor::Item>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationRapportMonitor::Item>,std::__hash_const_iterator<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *> *>,std::__hash_const_iterator<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *> *>,CLMicroLocationRapportMonitor::Item*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_256349168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<CLMicroLocationRapportMonitor::Item>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<CLMicroLocationRapportMonitor::Item>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRapportMonitor::Item>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[80 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRapportMonitor::Item>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(80 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationRapportMonitor::Item>,std::__hash_const_iterator<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *> *>,std::__hash_const_iterator<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *> *>,CLMicroLocationRapportMonitor::Item*>(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  _DWORD v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::allocator<CLMicroLocationRapportMonitor::Item>::construct[abi:ne180100]<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item const&>(a1, v4, (uint64_t)(v6 + 2));
      uint64_t v6 = (void *)*v6;
      uint64_t v4 = v12 + 80;
      v12 += 80;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationRapportMonitor::Item>,CLMicroLocationRapportMonitor::Item*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_2563492BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

__n128 std::allocator<CLMicroLocationRapportMonitor::Item>::construct[abi:ne180100]<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a2 = *(_OWORD *)a3;
  uint64_t v5 = (std::string *)(a2 + 16);
  if (*(char *)(a3 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 16), *(void *)(a3 + 24));
  }
  else
  {
    long long v6 = *(_OWORD *)(a3 + 16);
    *(void *)(a2 + 32) = *(void *)(a3 + 32);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  uint64_t v7 = (std::string *)(a2 + 40);
  if (*(char *)(a3 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a3 + 40), *(void *)(a3 + 48));
  }
  else
  {
    long long v8 = *(_OWORD *)(a3 + 40);
    *(void *)(a2 + 56) = *(void *)(a3 + 56);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  __n128 result = *(__n128 *)(a3 + 64);
  *(__n128 *)(a2 + 64) = result;
  return result;
}

void sub_256349368(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationRapportMonitor::Item>,CLMicroLocationRapportMonitor::Item*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationRapportMonitor::Item>,CLMicroLocationRapportMonitor::Item*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationRapportMonitor::Item>,CLMicroLocationRapportMonitor::Item*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 80;
      std::allocator<CLMicroLocationRapportMonitor::Item>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

void std::allocator<CLMicroLocationRapportMonitor::Item>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 63) < 0) {
    operator delete(*(void **)(a2 + 40));
  }
  if (*(char *)(a2 + 39) < 0)
  {
    uint64_t v3 = *(void **)(a2 + 16);
    operator delete(v3);
  }
}

void std::vector<CLMicroLocationRapportMonitor::Item>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        std::allocator<CLMicroLocationRapportMonitor::Item>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void OUTLINED_FUNCTION_1_0(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(a1 + 10) = v3;
  *(_WORD *)(a1 + 18) = v2;
  *(void *)(a1 + 20) = a2;
  *(_WORD *)(a1 + 28) = v2;
}

void OUTLINED_FUNCTION_2_0(float a1, uint64_t a2, uint64_t a3)
{
  *(float *)a3 = a1;
  *(_DWORD *)(a3 + 4) = 0;
  *(_WORD *)(a3 + 8) = 2082;
}

void sub_256349DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_25634A2A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void CLMicroLocationModel::CLMicroLocationModel(CLMicroLocationModel *this)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  *((_DWORD *)this + 3) = 0;
  *(void *)this = 0;
  *((unsigned char *)this + 8) = 0;
  CLMicroLocationAnchorAppearanceMap::CLMicroLocationAnchorAppearanceMap((CLMicroLocationModel *)((char *)this + 16));
  *((unsigned char *)this + 72) = 0;
  *((unsigned char *)this + 192) = 0;
  *((unsigned char *)this + 200) = 0;
  *((unsigned char *)this + 2CLMicroLocationSensorsLogic::stopOdometryMonitoringIfRunning(this + 88) = 0;
  *((void *)this + 38) = 0;
  *((void *)this + 39) = 0;
  *((void *)this + 37) = 0;
  *((_DWORD *)this + 80) = 0;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *((void *)this + 47) = 0;
  *((_DWORD *)this + 96) = 1065353216;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  __int16 v2 = +[ULDefaultsSingleton shared];
  uint64_t v3 = [v2 defaultsDictionary];

  uint64_t v4 = [NSString stringWithUTF8String:"ULVersion"];
  uint64_t v5 = [v3 objectForKey:v4];
  if (v5 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    ULSettings::convert<NSString * {__strong},std::string>(v5, v8);
    *(_OWORD *)((char *)this + 424) = *(_OWORD *)v8;
    *((void *)this + 55) = *(void *)&v8[16];
  }
  else
  {
    ULSettings::convert<NSString * {__strong},std::string>(@"3.0.45", v8);
    *(void *)&v9[7] = *(void *)&v8[15];
    *(void *)uint64_t v9 = *(void *)&v8[8];
    char v6 = v8[23];
    uint64_t v7 = *(void *)&v8[8];
    *((void *)this + 53) = *(void *)v8;
    *((void *)this + 54) = v7;
    *(void *)((char *)this + 439) = *(void *)&v9[7];
    *((unsigned char *)this + 447) = v6;
  }
}

void sub_25634B24C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  size_t v17 = *(void **)(v9 + 400);
  if (v17)
  {
    *(void *)(v9 + 408) = v17;
    operator delete(v17);
  }
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::~__hash_table(v9 + 352);
  a9 = (void **)(v11 + 256);
  std::vector<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::__optional_destruct_base<CLMicroLocationModel::BlueAtlasData,false>::~__optional_destruct_base[abi:ne180100](v12);
  std::__optional_destruct_base<CLMicroLocationModel::SimilarityListData,false>::~__optional_destruct_base[abi:ne180100](v11);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(v10);
  _Unwind_Resume(a1);
}

void CLMicroLocationModel::toProtobuf(CLMicroLocationModel *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  CLMicroLocationProto::Model::Model((CLMicroLocationProto::Model *)a2);
  uint64_t v5 = *((void *)this + 41);
  for (uint64_t i = *((void *)this + 42); v5 != i; v5 += 32)
  {
    int v7 = *(_DWORD *)(a2 + 20);
    uint64_t v8 = *(int *)(a2 + 16);
    if ((int)v8 >= v7)
    {
      if (v7 == *(_DWORD *)(a2 + 24))
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 8));
        int v7 = *(_DWORD *)(a2 + 20);
      }
      *(_DWORD *)(a2 + 20) = v7 + 1;
      wireless_diagnostics::google::protobuf::internal::GenericTypeHandler<CLMicroLocationProto::Fingerprint>::New();
    }
    uint64_t v9 = *(void *)(a2 + 8);
    *(_DWORD *)(a2 + 16) = v8 + 1;
    uint64_t v10 = *(CLMicroLocationProto::Fingerprint **)(v9 + 8 * v8);
    uint64_t v11 = *(void *)v5;
    long long v53 = *(_OWORD *)(v5 + 16);
    char v54 = 1;
    CLMicroLocationFingerprint::toProtobuf(v11, (uint64_t)&v53, (uint64_t)&__str);
    CLMicroLocationProto::Fingerprint::CopyFrom(v10, (const CLMicroLocationProto::Fingerprint *)&__str);
    CLMicroLocationProto::Fingerprint::~Fingerprint((CLMicroLocationProto::Fingerprint *)&__str);
  }
  for (uint64_t j = (void *)*((void *)this + 46); j; uint64_t j = (void *)*j)
  {
    int v13 = *(_DWORD *)(a2 + 68);
    uint64_t v14 = *(int *)(a2 + 64);
    if ((int)v14 >= v13)
    {
      if (v13 == *(_DWORD *)(a2 + 72))
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 56));
        int v13 = *(_DWORD *)(a2 + 68);
      }
      *(_DWORD *)(a2 + 68) = v13 + 1;
      wireless_diagnostics::google::protobuf::internal::GenericTypeHandler<CLMicroLocationProto::ClusterRecordings>::New();
    }
    uint64_t v15 = *(void *)(a2 + 56);
    *(_DWORD *)(a2 + 64) = v14 + 1;
    uint64_t v16 = *(void *)(v15 + 8 * v14);
    uint64_t v17 = 0;
    *((unsigned char *)&__str.__r_.__value_.__s + 23) = 16;
    do
    {
      __str.__r_.__value_.__s.__data_[v17] = *((unsigned char *)j + v17 + 16);
      ++v17;
    }
    while (v17 != 16);
    __str.__r_.__value_.__s.__data_[16] = 0;
    *(_DWORD *)(v16 + 44) |= 1u;
    char v18 = *(std::string **)(v16 + 8);
    if (v18 == (std::string *)MEMORY[0x263F8C740]) {
      operator new();
    }
    uint64_t v19 = (wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)std::string::operator=(v18, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    uint64_t v21 = j[4];
    for (uint64_t k = j[5]; v21 != k; v21 += 16)
    {
      uint64_t v22 = 0;
      *((unsigned char *)&__str.__r_.__value_.__s + 23) = 16;
      do
      {
        __str.__r_.__value_.__s.__data_[v22] = *(unsigned char *)(v21 + v22);
        ++v22;
      }
      while (v22 != 16);
      __str.__r_.__value_.__s.__data_[16] = 0;
      int v23 = *(_DWORD *)(v16 + 28);
      uint64_t v24 = *(int *)(v16 + 24);
      if ((int)v24 >= v23)
      {
        if (v23 == *(_DWORD *)(v16 + 32))
        {
          uint64_t v19 = (wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v16 + 16));
          int v23 = *(_DWORD *)(v16 + 28);
        }
        *(_DWORD *)(v16 + 28) = v23 + 1;
        std::ios_base::fmtflags v26 = (std::string *)wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::New(v19);
        uint64_t v27 = *(void *)(v16 + 16);
        uint64_t v28 = *(int *)(v16 + 24);
        *(_DWORD *)(v16 + 24) = v28 + 1;
        *(void *)(v27 + 8 * v28) = v26;
      }
      else
      {
        uint64_t v25 = *(void *)(v16 + 16);
        *(_DWORD *)(v16 + 24) = v24 + 1;
        std::ios_base::fmtflags v26 = *(std::string **)(v25 + 8 * v24);
      }
      uint64_t v19 = (wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)std::string::operator=(v26, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
  }
  uint64_t v29 = *((void *)this + 47);
  *(_DWORD *)(a2 + 200) |= 2u;
  *(void *)(a2 + 32) = v29;
  int v30 = *(_DWORD *)this;
  if (!CLMicroLocationProto::TriggerReason_IsValid((CLMicroLocationProto *)*(unsigned int *)this))
  {
    uint64_t v48 = "::CLMicroLocationProto::Model_GenerationAlgorithm_IsValid(value)";
    int v49 = 12656;
    int v50 = "set_generationalgorithm";
    goto LABEL_62;
  }
  *(_DWORD *)(a2 + 200) |= 8u;
  *(_DWORD *)(a2 + 48) = v30;
  unsigned int v31 = *((_DWORD *)this + 1);
  if (!CLMicroLocationProto::MotionState_IsValid((CLMicroLocationProto *)v31))
  {
    uint64_t v48 = "::CLMicroLocationProto::Model_ModelType_IsValid(value)";
    int v49 = 12679;
    int v50 = "set_modeltype";
LABEL_62:
    __assert_rtn(v50, "microlocation.pb.h", v49, v48);
  }
  *(_DWORD *)(a2 + 200) |= 0x10u;
  *(_DWORD *)(a2 + 52) = v31;
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_6);
  }
  __int16 v32 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
  {
    BOOL isStable = CLMicroLocationModel::isStable(this);
    __str.__r_.__value_.__r.__words[0] = 68289282;
    LOWORD(__str.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    WORD1(__str.__r_.__value_.__r.__words[2]) = 1026;
    HIDWORD(__str.__r_.__value_.__r.__words[2]) = isStable;
    _os_log_impl(&dword_25631F000, v32, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"isStable, toProtobuf\", \"isStableflag\":%{public}hhd}", (uint8_t *)&__str, 0x18u);
  }

  BOOL v34 = CLMicroLocationModel::isStable(this);
  int v35 = *(_DWORD *)(a2 + 200);
  *(unsigned char *)(a2 + 104) = v34;
  *(_DWORD *)(a2 + 108) = *((_DWORD *)this + 3);
  *(_DWORD *)(a2 + 200) = v35 | 0x380;
  uint64_t v36 = *(CLMicroLocationProto::anchorAppearancesVector **)(a2 + 112);
  if (!v36) {
    operator new();
  }
  CLMicroLocationAnchorAppearanceMap::toProtobuf((CLMicroLocationModel *)((char *)this + 16), (int *)&__str);
  CLMicroLocationProto::anchorAppearancesVector::CopyFrom(v36, (const CLMicroLocationProto::anchorAppearancesVector *)&__str);
  CLMicroLocationProto::anchorAppearancesVector::~anchorAppearancesVector((CLMicroLocationProto::anchorAppearancesVector *)&__str);
  unsigned int v37 = *((_DWORD *)this + 98);
  if (!CLMicroLocationProto::MotionState_IsValid((CLMicroLocationProto *)v37))
  {
    int v51 = 12880;
    uint64_t v52 = "set_qualityindicator";
    goto LABEL_65;
  }
  *(_DWORD *)(a2 + 200) |= 0x800u;
  *(_DWORD *)(a2 + 128) = v37;
  unsigned int v38 = *((_DWORD *)this + 99);
  if (!CLMicroLocationProto::MotionState_IsValid((CLMicroLocationProto *)v38))
  {
    int v51 = 12903;
    uint64_t v52 = "set_candidatequalityindicator";
LABEL_65:
    __assert_rtn(v52, "microlocation.pb.h", v51, "::CLMicroLocationProto::Model_ModelQualityLevel_IsValid(value)");
  }
  *(_DWORD *)(a2 + 200) |= 0x1000u;
  *(_DWORD *)(a2 + 132) = v38;
  int v39 = (unsigned int *)*((void *)this + 50);
  for (m = (unsigned int *)*((void *)this + 51); v39 != m; ++v39)
  {
    unsigned int v41 = *v39;
    if (!CLMicroLocationProto::ServiceQualityReasonEnum_IsValid((CLMicroLocationProto *)*v39)) {
      __assert_rtn("add_candidatequalityreasons", "microlocation.pb.h", 12923, "::CLMicroLocationProto::ServiceQualityReasonEnum_IsValid(value)");
    }
    int v42 = *(_DWORD *)(a2 + 144);
    if (v42 == *(_DWORD *)(a2 + 148))
    {
      wireless_diagnostics::google::protobuf::RepeatedField<int>::Reserve(a2 + 136, v42 + 1);
      int v42 = *(_DWORD *)(a2 + 144);
    }
    uint64_t v43 = *(void *)(a2 + 136);
    *(_DWORD *)(a2 + 144) = v42 + 1;
    *(_DWORD *)(v43 + 4 * v42) = v41;
  }
  if (*((_DWORD *)this + 1) == 2 && *((unsigned char *)this + 192))
  {
    *(_DWORD *)(a2 + 200) |= 0x400u;
    __int16 v44 = *(CLMicroLocationProto::LocationSimilarityListData **)(a2 + 120);
    if (!v44) {
      operator new();
    }
    CLMicroLocationModel::SimilarityListData::toProtobuf((CLMicroLocationModel *)((char *)this + 72), (uint64_t)&__str);
    CLMicroLocationProto::LocationSimilarityListData::CopyFrom(v44, (const CLMicroLocationProto::LocationSimilarityListData *)&__str);
    CLMicroLocationProto::LocationSimilarityListData::~LocationSimilarityListData((CLMicroLocationProto::LocationSimilarityListData *)&__str);
  }
  int v45 = *(_DWORD *)(a2 + 200);
  *(_OWORD *)(a2 + 152) = *(_OWORD *)((char *)this + 296);
  *(void *)(a2 + 168) = *((void *)this + 39);
  *(_DWORD *)(a2 + 192) = *((_DWORD *)this + 80);
  *(_DWORD *)(a2 + 200) = v45 | 0x3FC000;
  uint64_t v46 = *(std::string **)(a2 + 176);
  if (v46 == (std::string *)MEMORY[0x263F8C740]) {
    operator new();
  }
  std::string::operator=(v46, (const std::string *)((char *)this + 424));
  if (*((_DWORD *)this + 1) == 3 && *((unsigned char *)this + 288))
  {
    *(_DWORD *)(a2 + 200) |= 0x400000u;
    uint64_t v47 = *(CLMicroLocationProto::BlueAtlasData **)(a2 + 184);
    if (!v47) {
      operator new();
    }
    CLMicroLocationModel::BlueAtlasData::toProtobuf((CLMacAddress *)this + 25, (uint64_t)&__str);
    CLMicroLocationProto::BlueAtlasData::CopyFrom(v47, (const CLMicroLocationProto::BlueAtlasData *)&__str);
    CLMicroLocationProto::BlueAtlasData::~BlueAtlasData((CLMicroLocationProto::BlueAtlasData *)&__str);
  }
}

void sub_25634B994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  MEMORY[0x25A2A6340](v19, 0x10B1C400E3A2C2ELL);
  CLMicroLocationProto::Model::~Model(v18);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationModel::numClusters(CLMicroLocationModel *this)
{
  return *((void *)this + 47);
}

BOOL CLMicroLocationModel::isStable(CLMicroLocationModel *this)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)this + 1) == 2) {
    return *((unsigned char *)this + 8) != 0;
  }
  uint64_t v3 = (void *)*((void *)this + 46);
  if (v3)
  {
    unint64_t v4 = 0;
    do
    {
      v4 += (uint64_t)(v3[5] - v3[4]) >> 4;
      uint64_t v3 = (void *)*v3;
    }
    while (v3);
  }
  else
  {
    unint64_t v4 = 0;
  }
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_6);
  }
  uint64_t v5 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = *((unsigned int *)this + 3);
    int v7 = *((unsigned __int8 *)this + 8);
    v21[0] = 68289794;
    v21[1] = 0;
    __int16 v22 = 2082;
    int v23 = "";
    __int16 v24 = 2050;
    unint64_t v25 = v4;
    __int16 v26 = 2050;
    uint64_t v27 = v6;
    __int16 v28 = 1026;
    int v29 = v7;
    _os_log_impl(&dword_25631F000, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"isStable, getter\", \"numRecordingsBeforePruning\":%{public}llu, \"numDaysWithRecordings\":%{public}ld, \"fIsStable\":%{public}hhd}", (uint8_t *)v21, 0x2Cu);
  }
  if (*((unsigned char *)this + 8)) {
    return 1;
  }
  uint64_t v8 = +[ULDefaultsSingleton shared];
  uint64_t v9 = [v8 defaultsDictionary];

  uint64_t v10 = [NSString stringWithUTF8String:"ULMinimumNumberOfRecordingsInStableModel"];
  uint64_t v11 = [v9 objectForKey:v10];
  if (!v11) {
    goto LABEL_16;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v12 = [v11 unsignedLongValue];
  }
  else {
LABEL_16:
  }
    uint64_t v12 = [&unk_2704F1398 unsignedLongValue];
  unint64_t v13 = v12;

  if (v4 >= v13) {
    return 1;
  }
  unint64_t v14 = *((unsigned int *)this + 3);
  uint64_t v15 = +[ULDefaultsSingleton shared];
  uint64_t v16 = [v15 defaultsDictionary];

  uint64_t v17 = [NSString stringWithUTF8String:"ULMinimumNumberOfDaysWithRecordingsInStableModel"];
  char v18 = [v16 objectForKey:v17];
  if (v18 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v19 = [v18 unsignedLongValue];
  }
  else {
    uint64_t v19 = [&unk_2704F1368 unsignedLongValue];
  }
  unint64_t v20 = v19;

  return v20 <= v14;
}

void sub_25634BDB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationModel::getQualityIndicator(CLMicroLocationModel *this)
{
  return *((unsigned int *)this + 98);
}

uint64_t CLMicroLocationModel::getCandidateQualityIndicator(CLMicroLocationModel *this)
{
  return *((unsigned int *)this + 99);
}

uint64_t CLMicroLocationModel::getCandidateQualityReasons(CLMicroLocationModel *this)
{
  return (uint64_t)this + 400;
}

void CLMicroLocationModel::SimilarityListData::toProtobuf(CLMicroLocationModel::SimilarityListData *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = (wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)CLMicroLocationProto::LocationSimilarityListData::LocationSimilarityListData(a2);
  uint64_t v5 = *(void *)this;
  uint64_t v6 = *((void *)this + 1);
  if (*(void *)this != v6)
  {
    do
    {
      uint64_t v7 = 0;
      *((unsigned char *)&__str.__r_.__value_.__s + 23) = 16;
      do
      {
        __str.__r_.__value_.__s.__data_[v7] = *(unsigned char *)(v5 + v7);
        ++v7;
      }
      while (v7 != 16);
      __str.__r_.__value_.__s.__data_[16] = 0;
      int v8 = *(_DWORD *)(a2 + 20);
      uint64_t v9 = *(int *)(a2 + 16);
      if ((int)v9 >= v8)
      {
        if (v8 == *(_DWORD *)(a2 + 24))
        {
          unint64_t v4 = (wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 8));
          int v8 = *(_DWORD *)(a2 + 20);
        }
        *(_DWORD *)(a2 + 20) = v8 + 1;
        uint64_t v11 = (std::string *)wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::New(v4);
        uint64_t v12 = *(void *)(a2 + 8);
        uint64_t v13 = *(int *)(a2 + 16);
        *(_DWORD *)(a2 + 16) = v13 + 1;
        *(void *)(v12 + 8 * v13) = v11;
      }
      else
      {
        uint64_t v10 = *(void *)(a2 + 8);
        *(_DWORD *)(a2 + 16) = v9 + 1;
        uint64_t v11 = *(std::string **)(v10 + 8 * v9);
      }
      unint64_t v4 = (wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)std::string::operator=(v11, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      v5 += 16;
    }
    while (v5 != v6);
  }
  unint64_t v14 = (unsigned int *)*((void *)this + 10);
  for (uint64_t i = (unsigned int *)*((void *)this + 11); v14 != i; ++v14)
  {
    unsigned int v16 = *v14;
    if ((CLMicroLocationProto::ConfidenceLevel_IsValid((CLMicroLocationProto *)*v14) & 1) == 0) {
      __assert_rtn("add_eventconfidences", "microlocation.pb.h", 12438, "::CLMicroLocationProto::ConfidenceLevel_IsValid(value)");
    }
    int v17 = *(_DWORD *)(a2 + 64);
    if (v17 == *(_DWORD *)(a2 + 68))
    {
      wireless_diagnostics::google::protobuf::RepeatedField<int>::Reserve(a2 + 56, v17 + 1);
      int v17 = *(_DWORD *)(a2 + 64);
    }
    uint64_t v18 = *(void *)(a2 + 56);
    *(_DWORD *)(a2 + 64) = v17 + 1;
    *(_DWORD *)(v18 + 4 * v17) = v16;
  }
  uint64_t v19 = *((void *)this + 3);
  if (*((void *)this + 4) != v19)
  {
    uint64_t v20 = 0;
    unint64_t v21 = 0;
    __int16 v22 = (std::string *)MEMORY[0x263F8C740];
    do
    {
      int v23 = *(_DWORD *)(a2 + 44);
      uint64_t v24 = *(int *)(a2 + 40);
      if ((int)v24 >= v23)
      {
        if (v23 == *(_DWORD *)(a2 + 48))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 32));
          int v23 = *(_DWORD *)(a2 + 44);
        }
        *(_DWORD *)(a2 + 44) = v23 + 1;
        wireless_diagnostics::google::protobuf::internal::GenericTypeHandler<CLMicroLocationProto::LocationSimilarityListElement>::New();
      }
      uint64_t v25 = *(void *)(a2 + 32);
      *(_DWORD *)(a2 + 40) = v24 + 1;
      uint64_t v26 = *(void *)(v25 + 8 * v24);
      uint64_t v27 = 0;
      *((unsigned char *)&__str.__r_.__value_.__s + 23) = 16;
      uint64_t v28 = v19 + v20;
      do
      {
        __str.__r_.__value_.__s.__data_[v27] = *(unsigned char *)(v28 + v27);
        ++v27;
      }
      while (v27 != 16);
      __str.__r_.__value_.__s.__data_[16] = 0;
      *(_DWORD *)(v26 + 36) |= 1u;
      int v29 = *(std::string **)(v26 + 8);
      if (v29 == v22) {
        operator new();
      }
      std::string::operator=(v29, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (*((void *)this + 1) != *(void *)this)
      {
        unint64_t v30 = 0;
        do
        {
          __str.__r_.__value_.__r.__words[0] = 0;
          CLMicroLocationUtils::ProbabilityMatrix::getValue((CLMicroLocationModel::SimilarityListData *)((char *)this + 48), v21, v30, (double *)&__str);
          std::string::size_type v31 = __str.__r_.__value_.__r.__words[0];
          int v32 = *(_DWORD *)(v26 + 24);
          if (v32 == *(_DWORD *)(v26 + 28))
          {
            wireless_diagnostics::google::protobuf::RepeatedField<double>::Reserve(v26 + 16, v32 + 1);
            int v32 = *(_DWORD *)(v26 + 24);
          }
          uint64_t v33 = *(void *)(v26 + 16);
          *(_DWORD *)(v26 + 24) = v32 + 1;
          *(void *)(v33 + 8 * v32) = v31;
          ++v30;
        }
        while (v30 < (uint64_t)(*((void *)this + 1) - *(void *)this) >> 4);
      }
      ++v21;
      uint64_t v19 = *((void *)this + 3);
      v20 += 16;
    }
    while (v21 < (*((void *)this + 4) - v19) >> 4);
  }
}

void sub_25634C168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  CLMicroLocationProto::LocationSimilarityListData::~LocationSimilarityListData(v15);
  _Unwind_Resume(a1);
}

float CLMicroLocationModel::BlueAtlasData::toProtobuf@<S0>(CLMacAddress *this@<X0>, uint64_t a2@<X8>)
{
  double v5 = CLMicroLocationProto::BlueAtlasData::BlueAtlasData((CLMicroLocationProto::BlueAtlasData *)a2);
  unint64_t var0 = this->var0;
  unint64_t v7 = this[1].var0;
  if (this->var0 != v7)
  {
    do
    {
      uint64_t v8 = 0;
      *((unsigned char *)&__str.__r_.__value_.__s + 23) = 16;
      do
      {
        __str.__r_.__value_.__s.__data_[v8] = *(unsigned char *)(var0 + v8);
        ++v8;
      }
      while (v8 != 16);
      __str.__r_.__value_.__s.__data_[16] = 0;
      int v9 = *(_DWORD *)(a2 + 20);
      uint64_t v10 = *(int *)(a2 + 16);
      if ((int)v10 >= v9)
      {
        if (v9 == *(_DWORD *)(a2 + 24))
        {
          unint64_t v4 = (wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 8));
          int v9 = *(_DWORD *)(a2 + 20);
        }
        *(_DWORD *)(a2 + 20) = v9 + 1;
        uint64_t v12 = (std::string *)wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::New(v4);
        uint64_t v13 = *(void *)(a2 + 8);
        uint64_t v14 = *(int *)(a2 + 16);
        *(_DWORD *)(a2 + 16) = v14 + 1;
        *(void *)(v13 + 8 * v14) = v12;
      }
      else
      {
        uint64_t v11 = *(void *)(a2 + 8);
        *(_DWORD *)(a2 + 16) = v10 + 1;
        uint64_t v12 = *(std::string **)(v11 + 8 * v10);
      }
      unint64_t v4 = (wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)std::string::operator=(v12, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      var0 += 16;
    }
    while (var0 != v7);
  }
  uint64_t v15 = (CLMacAddress *)this[3].var0;
  for (uint64_t i = (CLMacAddress *)this[4].var0; v15 != i; ++v15)
  {
    unint64_t v17 = CLMacAddress::toUint64(v15);
    int v18 = *(_DWORD *)(a2 + 40);
    if (v18 == *(_DWORD *)(a2 + 44))
    {
      wireless_diagnostics::google::protobuf::RepeatedField<double>::Reserve(a2 + 32, v18 + 1);
      int v18 = *(_DWORD *)(a2 + 40);
    }
    uint64_t v19 = *(void *)(a2 + 32);
    *(_DWORD *)(a2 + 40) = v18 + 1;
    *(void *)(v19 + 8 * v18) = v17;
  }
  if (LOBYTE(this[9].var0))
  {
    *(_DWORD *)(a2 + 60) |= 4u;
    uint64_t v20 = *(void *)(a2 + 48);
    if (!v20) {
      operator new();
    }
    unint64_t v21 = CLMacAddress::toUint64(this + 8);
    *(_DWORD *)(v20 + 24) |= 1u;
    *(void *)(v20 + 8) = v21;
    *(_DWORD *)(a2 + 60) |= 4u;
    uint64_t v22 = *(void *)(a2 + 48);
    if (!v22) {
      operator new();
    }
    LODWORD(v5) = this[10].var0;
    *(_DWORD *)(v22 + 24) |= 2u;
    *(_DWORD *)(v22 + 16) = LODWORD(v5);
  }
  return *(float *)&v5;
}

void sub_25634C3B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x25A2A6340](v16, 0x1081C40DCAC275BLL);
  CLMicroLocationProto::BlueAtlasData::~BlueAtlasData(v15);
  _Unwind_Resume(a1);
}

void CLMicroLocationModel::fromProtobuf(const CLMicroLocationProto::Fingerprint ***this@<X0>, const CLMicroLocationProto::Model *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v92 = *MEMORY[0x263EF8340];
  CLMicroLocationModel::CLMicroLocationModel((CLMicroLocationModel *)a3);
  *(void *)v91.unint64_t var0 = 0;
  *(void *)&v91.var0[8] = 0;
  *(void *)v90.unint64_t var0 = 0;
  *(void *)&v90.var0[8] = 0;
  uint64_t v71 = (CLMicroLocationModel *)this;
  uint64_t v7 = *((int *)this + 4);
  if (v7)
  {
    uint64_t v8 = this[1];
    uint64_t v9 = 8 * v7;
    while (1)
    {
      uint64_t v10 = *v8;
      int v11 = *((_DWORD *)*v8 + 26);
      if ((v11 & 0x20) != 0) {
        break;
      }
      if ((v11 & 2) != 0)
      {
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_6);
        }
        uint64_t v15 = (id)logObject_MicroLocation_Default;
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl(&dword_25631F000, v15, OS_LOG_TYPE_DEFAULT, "#Warning The protobuf fingerprint is using a deprecated uint64 cluster label", buf, 2u);
        }

        *(void *)v91.unint64_t var0 = *((void *)v10 + 4);
LABEL_21:
        CLMicroLocationFingerprint::CLMicroLocationFingerprint((CLMicroLocationFingerprint *)buf, v10);
        CLMicroLocationModel::addFingerprint((CLMicroLocationModel *)a3, (const CLMicroLocationFingerprint *)buf, &v91, a2);
        if (__p)
        {
          __int16 v89 = __p;
          operator delete(__p);
        }
        std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v87);
        std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&v83);
        std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table((uint64_t)buf);
        goto LABEL_29;
      }
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_6);
      }
      uint64_t v12 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl(&dword_25631F000, v12, OS_LOG_TYPE_DEFAULT, "#Warning The protobuf fingerprint does not have a cluster identifer", buf, 2u);
      }

LABEL_29:
      ++v8;
      v9 -= 8;
      if (!v9) {
        goto LABEL_30;
      }
    }
    uint64_t v13 = (uint64_t **)*((void *)v10 + 8);
    int v14 = *((char *)v13 + 23);
    if (v14 < 0)
    {
      if (v13[1] != (uint64_t *)16)
      {
LABEL_24:
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_6);
        }
        uint64_t v16 = (id)logObject_MicroLocation_Default;
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl(&dword_25631F000, v16, OS_LOG_TYPE_DEFAULT, "#Warning The protobuf fingerprint does not have a valid cluster label uuid", buf, 2u);
        }

        goto LABEL_29;
      }
      uint64_t v13 = (uint64_t **)*v13;
    }
    else if (v14 != 16)
    {
      goto LABEL_24;
    }
    uuid v91 = *(uuid *)v13;
    goto LABEL_21;
  }
LABEL_30:
  uint64_t v17 = *((int *)v71 + 16);
  if (v17)
  {
    int v18 = (uint64_t *)*((void *)v71 + 7);
    uint64_t v19 = &v18[v17];
    while (1)
    {
      uint64_t v20 = *v18;
      unint64_t v21 = *(uint64_t ***)(*v18 + 8);
      int v22 = *((char *)v21 + 23);
      if (v22 < 0)
      {
        if (v21[1] != (uint64_t *)16)
        {
LABEL_52:
          if (onceToken_MicroLocation_Default != -1) {
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_6);
          }
          int v29 = (id)logObject_MicroLocation_Default;
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl(&dword_25631F000, v29, OS_LOG_TYPE_DEFAULT, "#Warning The protobuf cluster recording does not have a valid cluster label uuid", buf, 2u);
          }

          goto LABEL_57;
        }
        unint64_t v21 = (uint64_t **)*v21;
      }
      else if (v22 != 16)
      {
        goto LABEL_52;
      }
      uuid v91 = *(uuid *)v21;
      uint64_t v23 = *(int *)(v20 + 24);
      if (v23) {
        break;
      }
LABEL_57:
      if (++v18 == v19) {
        goto LABEL_58;
      }
    }
    uint64_t v24 = *(uint64_t ****)(v20 + 16);
    uint64_t v25 = 8 * v23;
    while (1)
    {
      uint64_t v26 = *v24;
      int v27 = *((char *)*v24 + 23);
      if (v27 < 0)
      {
        if (v26[1] != (uint64_t *)16)
        {
LABEL_45:
          if (onceToken_MicroLocation_Default != -1) {
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_6);
          }
          uint64_t v28 = (id)logObject_MicroLocation_Default;
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl(&dword_25631F000, v28, OS_LOG_TYPE_DEFAULT, "#Warning The protobuf cluster recording does not have a valid recording uuid", buf, 2u);
          }

          goto LABEL_50;
        }
        uint64_t v26 = (uint64_t **)*v26;
      }
      else if (v27 != 16)
      {
        goto LABEL_45;
      }
      uuid v90 = *(uuid *)v26;
      CLMicroLocationModel::addRecording((CLMicroLocationModel *)a3, &v91, &v90);
LABEL_50:
      ++v24;
      v25 -= 8;
      if (!v25) {
        goto LABEL_57;
      }
    }
  }
LABEL_58:
  int v30 = *((_DWORD *)v71 + 13) & ((int)(*((_DWORD *)v71 + 50) << 27) >> 31);
  *(_DWORD *)a3 = *((_DWORD *)v71 + 12);
  *(_DWORD *)(a3 + 4) = v30;
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_6);
  }
  std::string::size_type v31 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
  {
    int v32 = *((unsigned __int8 *)v71 + 104);
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = v32;
    _os_log_impl(&dword_25631F000, v31, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"isStable, fromProtobuf\", \"isStableFlag\":%{public}hhd}", buf, 0x18u);
  }

  BOOL v34 = v71;
  *(unsigned char *)(a3 + 8) = *((unsigned char *)v71 + 104);
  *(_DWORD *)(a3 + 12) = *((_DWORD *)v71 + 27);
  if (*((unsigned char *)v71 + 201))
  {
    int v35 = (const CLMicroLocationProto::anchorAppearancesVector *)*((void *)v71 + 14);
    if (!v35) {
      int v35 = *(const CLMicroLocationProto::anchorAppearancesVector **)(CLMicroLocationProto::Model::default_instance(v33)
    }
                                                                    + 112);
    CLMicroLocationAnchorAppearanceMap::CLMicroLocationAnchorAppearanceMap((CLMicroLocationAnchorAppearanceMap *)buf, v35);
    if ((uint8_t *)(a3 + 16) != buf)
    {
      *(_DWORD *)(a3 + 48) = v82[0];
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,void *> *>>((void *)(a3 + 16), *(uint64_t **)&buf[16], 0);
    }
    *(_OWORD *)(a3 + 56) = *(_OWORD *)((char *)v82 + 8);
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)buf);
    BOOL v34 = v71;
  }
  int v36 = *((_DWORD *)v34 + 32);
  *(_DWORD *)(a3 + 392) = v36;
  if (!v36)
  {
    unsigned int v37 = *(void **)(a3 + 368);
    if (v37)
    {
      unint64_t v38 = 0;
      do
      {
        v38 += (uint64_t)(v37[5] - v37[4]) >> 4;
        unsigned int v37 = (void *)*v37;
      }
      while (v37);
    }
    else
    {
      unint64_t v38 = 0;
    }
    int v39 = +[ULDefaultsSingleton shared];
    int v40 = [v39 defaultsDictionary];

    unsigned int v41 = [NSString stringWithUTF8String:"ULModelQualityNumFingerprintsWiFiOnlyThreshold"];
    int v42 = [v40 objectForKey:v41];
    if (v42 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
      unsigned int v43 = [v42 unsignedIntValue];
    }
    else {
      unsigned int v43 = [&unk_2704F1398 unsignedIntValue];
    }
    unsigned int v44 = v43;

    if (v38 <= v44) {
      int v45 = 1;
    }
    else {
      int v45 = 3;
    }
    *(_DWORD *)(a3 + 392) = v45;
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_6);
    }
    uint64_t v46 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
    {
      int v47 = *(_DWORD *)(a3 + 392);
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 1026;
      *(_DWORD *)&buf[20] = v47;
      _os_log_impl(&dword_25631F000, v46, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Loaded model doesn't have model quality, calculate on the fly\", \"QualityIndicator\":%{public}d}", buf, 0x18u);
    }

    BOOL v34 = v71;
  }
  int v70 = v30;
  *(_DWORD *)(a3 + 396) = *((_DWORD *)v34 + 33);
  __src = 0;
  int v79 = 0;
  int v80 = 0;
  uint64_t v48 = *((int *)v34 + 36);
  if (v48)
  {
    int v49 = 0;
    int v50 = (int *)*((void *)v34 + 17);
    int v51 = &v50[v48];
    do
    {
      int v52 = *v50;
      if (v49 >= v80)
      {
        char v54 = (char *)__src;
        uint64_t v55 = (v49 - (unsigned char *)__src) >> 2;
        unint64_t v56 = v55 + 1;
        if ((unint64_t)(v55 + 1) >> 62) {
          std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v57 = v80 - (unsigned char *)__src;
        if ((v80 - (unsigned char *)__src) >> 1 > v56) {
          unint64_t v56 = v57 >> 1;
        }
        if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v58 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v58 = v56;
        }
        if (v58)
        {
          int v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationProto::ConfidenceReason>>((uint64_t)&v80, v58);
          char v54 = (char *)__src;
          int v49 = v79;
        }
        else
        {
          int v59 = 0;
        }
        __int16 v60 = &v59[4 * v55];
        *(_DWORD *)__int16 v60 = v52;
        uint64_t v53 = (uint64_t)(v60 + 4);
        while (v49 != v54)
        {
          int v61 = *((_DWORD *)v49 - 1);
          v49 -= 4;
          *((_DWORD *)v60 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v61;
          v60 -= 4;
        }
        __src = v60;
        int v79 = (char *)v53;
        int v80 = &v59[4 * v58];
        if (v54) {
          operator delete(v54);
        }
      }
      else
      {
        *(_DWORD *)int v49 = v52;
        uint64_t v53 = (uint64_t)(v49 + 4);
      }
      int v79 = (char *)v53;
      ++v50;
      int v49 = (char *)v53;
    }
    while (v50 != v51);
  }
  else
  {
    uint64_t v53 = 0;
  }
  if ((void **)(a3 + 400) != &__src) {
    std::vector<CLMicroLocationProto::ConfidenceLevel>::__assign_with_size[abi:ne180100]<CLMicroLocationProto::ConfidenceLevel*,CLMicroLocationProto::ConfidenceLevel*>((char *)(a3 + 400), (char *)__src, v53, (v53 - (uint64_t)__src) >> 2);
  }
  if ((*((unsigned char *)v71 + 201) & 4) != 0)
  {
    __int16 v65 = (CLMicroLocationModel::SimilarityListData *)*((void *)v71 + 15);
    if (!v65) {
      __int16 v65 = *(CLMicroLocationModel::SimilarityListData **)(CLMicroLocationProto::Model::default_instance(0) + 120);
    }
    CLMicroLocationModel::SimilarityListData::fromProtobuf(v65, (uint64_t)buf);
    std::optional<CLMicroLocationModel::SimilarityListData>::operator=[abi:ne180100]<CLMicroLocationModel::SimilarityListData,void>(a3 + 72, (uint64_t)buf);
    if (v84)
    {
      v85 = v84;
      operator delete(v84);
    }
    if (BYTE8(v83))
    {
      uint64_t v66 = *(void *)&v82[1];
      *(void *)&v82[1] = 0;
      if (v66) {
        MEMORY[0x25A2A6320](v66, 0x1000C8000313F17);
      }
    }
    if (*(void *)&buf[24])
    {
      *(void *)&v82[0] = *(void *)&buf[24];
      operator delete(*(void **)&buf[24]);
    }
    if (*(void *)buf)
    {
      *(void *)&uint8_t buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }
  }
  else if (v70 == 2)
  {
    CLMicroLocationModel::getIdentifiers((void *)a3, (uint64_t)v76);
    uint64_t v74 = 0;
    uint64_t v75 = 0;
    __int16 v73 = 0;
    unint64_t v62 = 0;
    if (v77)
    {
      __int16 v63 = v77;
      do
      {
        ++v62;
        __int16 v63 = (uint64_t *)*v63;
      }
      while (v63);
    }
    std::vector<boost::uuids::uuid>::__init_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<boost::uuids::uuid,void *> *>,std::__hash_const_iterator<std::__hash_node<boost::uuids::uuid,void *> *>>((char *)&v73, v77, 0, v62);
    BYTE8(v83) = 0;
    v87[8] = 0;
    memset(buf, 0, sizeof(buf));
    memset(v82, 0, 17);
    v85 = 0;
    uint64_t v86 = 0;
    v84 = 0;
    v87[0] = 0;
    memset(v72, 0, sizeof(v72));
    CLMicroLocationModel::SimilarityListData::prepareWithClustersInformationOfEvents((uint64_t)buf, (unint64_t **)&v73, v72);
    std::optional<CLMicroLocationModel::SimilarityListData>::operator=[abi:ne180100]<CLMicroLocationModel::SimilarityListData&,void>((CLMicroLocationModel::SimilarityListData *)(a3 + 72), (CLMicroLocationModel::SimilarityListData *)buf);
    if (v84)
    {
      v85 = v84;
      operator delete(v84);
    }
    if (BYTE8(v83))
    {
      uint64_t v64 = *(void *)&v82[1];
      *(void *)&v82[1] = 0;
      if (v64) {
        MEMORY[0x25A2A6320](v64, 0x1000C8000313F17);
      }
    }
    if (*(void *)&buf[24])
    {
      *(void *)&v82[0] = *(void *)&buf[24];
      operator delete(*(void **)&buf[24]);
    }
    if (*(void *)buf)
    {
      *(void *)&uint8_t buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }
    if (v73)
    {
      uint64_t v74 = v73;
      operator delete(v73);
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v76);
  }
  *(_OWORD *)(a3 + 296) = *(_OWORD *)((char *)v71 + 152);
  *(void *)(a3 + 312) = *((void *)v71 + 21);
  *(_DWORD *)(a3 + 320) = *((_DWORD *)v71 + 48);
  std::string::operator=((std::string *)(a3 + 424), *((const std::string **)v71 + 22));
  if ((*((unsigned char *)v71 + 202) & 0x40) != 0)
  {
    __int16 v69 = (uint64_t ****)*((void *)v71 + 23);
    if (!v69) {
      __int16 v69 = *(uint64_t *****)(CLMicroLocationProto::Model::default_instance(0) + 184);
    }
    CLMicroLocationModel::BlueAtlasData::fromProtobuf(v69, v67, (char **)buf);
    std::optional<CLMicroLocationModel::BlueAtlasData>::operator=[abi:ne180100]<CLMicroLocationModel::BlueAtlasData,void>(a3 + 200, (uint64_t)buf);
  }
  else
  {
    if (v70 != 3) {
      goto LABEL_151;
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_6);
    }
    __int16 v68 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_25631F000, v68, OS_LOG_TYPE_ERROR, "Loaded Blue Atlas model doesn't have Blue Atlas data structure, create empty", buf, 2u);
    }

    long long v83 = 0u;
    memset(v82, 0, sizeof(v82));
    memset(buf, 0, sizeof(buf));
    v84 = (void *)4286578687;
    std::optional<CLMicroLocationModel::BlueAtlasData>::operator=[abi:ne180100]<CLMicroLocationModel::BlueAtlasData,void>(a3 + 200, (uint64_t)buf);
  }
  if (*(void *)&buf[24])
  {
    *(void *)&v82[0] = *(void *)&buf[24];
    operator delete(*(void **)&buf[24]);
  }
  if (*(void *)buf)
  {
    *(void *)&uint8_t buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }
LABEL_151:
  if (__src)
  {
    int v79 = (char *)__src;
    operator delete(__src);
  }
}

void sub_25634CEA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  CLMicroLocationModel::~CLMicroLocationModel(v25);
  _Unwind_Resume(a1);
}

void CLMicroLocationModel::addFingerprint(CLMicroLocationModel *this, const CLMicroLocationFingerprint *a2, const uuid *a3, CLMicroLocationFingerprintPool *a4)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  CLMicroLocationFingerprintPool::add(a4, (uuid *)((char *)a2 + 40), a2, &v6);
  uint64_t v8 = v6;
  uint64_t v9 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v10 = (__int128)*a3;
  std::vector<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>::emplace_back<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>((uint64_t *)this + 41, (uint64_t)&v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_25634D054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void CLMicroLocationFingerprint::~CLMicroLocationFingerprint(CLMicroLocationFingerprint *this)
{
  __int16 v2 = (void *)*((void *)this + 21);
  if (v2)
  {
    *((void *)this + 22) = v2;
    operator delete(v2);
  }
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)this + 104);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)this + 64);
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table((uint64_t)this);
}

void CLMicroLocationModel::addRecording(CLMicroLocationModel *this, uuid *a2, const uuid *a3)
{
  int v18 = a2;
  unint64_t v4 = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>((uint64_t)this + 352, a2, (uint64_t)&std::piecewise_construct, &v18);
  double v5 = (uuid *)v4[5];
  unint64_t v6 = v4[6];
  if ((unint64_t)v5 >= v6)
  {
    uint64_t v8 = v4[4];
    uint64_t v9 = ((uint64_t)v5 - v8) >> 4;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v6 - v8;
    if (v11 >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::uuids::uuid>>((uint64_t)(v4 + 6), v12);
    }
    else {
      uint64_t v13 = 0;
    }
    int v14 = (uuid *)&v13[16 * v9];
    uint64_t v15 = &v13[16 * v12];
    *int v14 = *a3;
    uint64_t v7 = v14 + 1;
    uint64_t v17 = (uuid *)v4[4];
    uint64_t v16 = (uuid *)v4[5];
    if (v16 != v17)
    {
      do
      {
        v14[-1] = v16[-1];
        --v14;
        --v16;
      }
      while (v16 != v17);
      uint64_t v16 = (uuid *)v4[4];
    }
    v4[4] = v14;
    void v4[5] = v7;
    v4[6] = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    uuid *v5 = *a3;
    uint64_t v7 = v5 + 1;
  }
  void v4[5] = v7;
}

uint64_t CLMicroLocationModel::setQualityIndicator(uint64_t result, int a2)
{
  *(_DWORD *)(result + 392) = a2;
  return result;
}

uint64_t CLMicroLocationModel::numRecordingsBeforePruning(CLMicroLocationModel *this)
{
  uint64_t v1 = (void *)*((void *)this + 46);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  do
  {
    result += (uint64_t)(v1[5] - v1[4]) >> 4;
    uint64_t v1 = (void *)*v1;
  }
  while (v1);
  return result;
}

uint64_t CLMicroLocationModel::setCandidateQualityIndicator(uint64_t result, int a2)
{
  *(_DWORD *)(result + 396) = a2;
  return result;
}

char *CLMicroLocationModel::setCandidateQualityReasons(uint64_t a1, uint64_t a2)
{
  uint64_t result = (char *)(a1 + 400);
  if (result != (char *)a2) {
    return std::vector<CLMicroLocationProto::ConfidenceLevel>::__assign_with_size[abi:ne180100]<CLMicroLocationProto::ConfidenceLevel*,CLMicroLocationProto::ConfidenceLevel*>(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
  return result;
}

void CLMicroLocationModel::SimilarityListData::fromProtobuf(CLMicroLocationModel::SimilarityListData *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  unint64_t v58 = 0;
  int v59 = 0;
  __int16 v60 = 0;
  uint64_t v4 = *((int *)this + 4);
  if (v4)
  {
    double v5 = (uint64_t ***)*((void *)this + 1);
    unint64_t v6 = &v5[v4];
    do
    {
      CLMicroLocationProtobufHelper::uuidFromProtobuf(*v5, &v65);
      if ((_BYTE)v66)
      {
        uint64_t v7 = v59;
        if (v59 >= v60)
        {
          uint64_t v12 = (v59 - (unsigned char *)v58) >> 4;
          unint64_t v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 60) {
            std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v14 = v60 - (unsigned char *)v58;
          if ((v60 - (unsigned char *)v58) >> 3 > v13) {
            unint64_t v13 = v14 >> 3;
          }
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v15 = v13;
          }
          if (v15) {
            uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::uuids::uuid>>((uint64_t)&v60, v15);
          }
          else {
            uint64_t v16 = 0;
          }
          uint64_t v20 = &v16[16 * v12];
          *(_OWORD *)uint64_t v20 = v65;
          int v22 = (char *)v58;
          unint64_t v21 = v59;
          uint64_t v23 = v20;
          if (v59 != v58)
          {
            do
            {
              *((_OWORD *)v23 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = *((_OWORD *)v21 - 1);
              v23 -= 16;
              v21 -= 16;
            }
            while (v21 != v22);
            goto LABEL_39;
          }
          goto LABEL_40;
        }
        *(_OWORD *)int v59 = v65;
        uint64_t v8 = v7 + 16;
      }
      else
      {
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_6);
        }
        uint64_t v9 = logObject_MicroLocation_Default;
        if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
        {
          *(void *)uint64_t buf = 68289026;
          __int16 v68 = 2082;
          __int16 v69 = "";
          _os_log_impl(&dword_25631F000, v9, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLMicroLocationSimilarityListData fromProtobuf - invalid clusterUuid conversion!\"}", buf, 0x12u);
        }
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_6);
        }
        unint64_t v10 = logObject_MicroLocation_Default;
        if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
        {
          *(void *)uint64_t buf = 68289026;
          __int16 v68 = 2082;
          __int16 v69 = "";
          _os_signpost_emit_with_name_impl(&dword_25631F000, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLMicroLocationSimilarityListData fromProtobuf - invalid clusterUuid conversion!", "{\"msg%{public}.0s\":\"CLMicroLocationSimilarityListData fromProtobuf - invalid clusterUuid conversion!\"}", buf, 0x12u);
        }
        uint64_t v11 = v59;
        if (v59 >= v60)
        {
          uint64_t v17 = (v59 - (unsigned char *)v58) >> 4;
          unint64_t v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 60) {
            std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v19 = v60 - (unsigned char *)v58;
          if ((v60 - (unsigned char *)v58) >> 3 > v18) {
            unint64_t v18 = v19 >> 3;
          }
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v15 = v18;
          }
          if (v15) {
            uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::uuids::uuid>>((uint64_t)&v60, v15);
          }
          else {
            uint64_t v16 = 0;
          }
          uint64_t v20 = &v16[16 * v17];
          *(void *)uint64_t v20 = 0;
          *((void *)v20 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0;
          uint64_t v24 = (char *)v58;
          unint64_t v21 = v59;
          uint64_t v23 = v20;
          if (v59 != v58)
          {
            do
            {
              *((_OWORD *)v23 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = *((_OWORD *)v21 - 1);
              v23 -= 16;
              v21 -= 16;
            }
            while (v21 != v24);
LABEL_39:
            unint64_t v21 = (char *)v58;
          }
LABEL_40:
          uint64_t v8 = v20 + 16;
          unint64_t v58 = v23;
          int v59 = v20 + 16;
          __int16 v60 = &v16[16 * v15];
          if (v21) {
            operator delete(v21);
          }
          goto LABEL_42;
        }
        uint64_t v8 = v59 + 16;
        *(void *)int v59 = 0;
        *((void *)v11 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0;
      }
LABEL_42:
      int v59 = v8;
      ++v5;
    }
    while (v5 != v6);
  }
  long long v65 = 0uLL;
  uint64_t v66 = 0;
  int v25 = *((_DWORD *)this + 10);
  int v26 = *((_DWORD *)this + 16);
  LODWORD(v27) = v25;
  if (v25 != v26)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_6);
    }
    uint64_t v28 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      *(void *)uint64_t buf = 68289026;
      __int16 v68 = 2082;
      __int16 v69 = "";
      _os_log_impl(&dword_25631F000, v28, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLMicroLocationSimilarityListData fromProtobuf - size of confidences doesn't equal event number, setting all event's confidence to invalid\"}", buf, 0x12u);
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_6);
    }
    int v29 = logObject_MicroLocation_Default;
    if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
    {
      *(void *)uint64_t buf = 68289026;
      __int16 v68 = 2082;
      __int16 v69 = "";
      _os_signpost_emit_with_name_impl(&dword_25631F000, v29, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLMicroLocationSimilarityListData fromProtobuf - size of confidences doesn't equal event number, setting all event's confidence to invalid", "{\"msg%{public}.0s\":\"CLMicroLocationSimilarityListData fromProtobuf - size of confidences doesn't equal event number, setting all event's confidence to invalid\"}", buf, 0x12u);
    }
    LODWORD(v27) = *((_DWORD *)this + 10);
  }
  if ((int)v27 >= 1)
  {
    uint64_t v30 = 0;
    do
    {
      if (v30 >= (int)v27)
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
        wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)buf);
      }
      CLMicroLocationProtobufHelper::uuidFromProtobuf(*(uint64_t ***)(*(void *)(*((void *)this + 4) + 8 * v30) + 8), &v61);
      if (v62)
      {
        long long v63 = v61;
      }
      else
      {
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_6);
        }
        std::string::size_type v31 = logObject_MicroLocation_Default;
        if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
        {
          *(void *)uint64_t buf = 68289026;
          __int16 v68 = 2082;
          __int16 v69 = "";
          _os_log_impl(&dword_25631F000, v31, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLMicroLocationSimilarityListData fromProtobuf - invalid LabelUuid conversion!\"}", buf, 0x12u);
        }
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_6);
        }
        int v32 = logObject_MicroLocation_Default;
        if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
        {
          *(void *)uint64_t buf = 68289026;
          __int16 v68 = 2082;
          __int16 v69 = "";
          _os_signpost_emit_with_name_impl(&dword_25631F000, v32, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLMicroLocationSimilarityListData fromProtobuf - invalid LabelUuid conversion!", "{\"msg%{public}.0s\":\"CLMicroLocationSimilarityListData fromProtobuf - invalid LabelUuid conversion!\"}", buf, 0x12u);
        }
        long long v63 = 0uLL;
      }
      if (v25 == v26)
      {
        if (v30 >= *((int *)this + 16))
        {
          wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
          wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
          wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
          wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)buf);
        }
        int v33 = *(_DWORD *)(*((void *)this + 7) + 4 * v30);
      }
      else
      {
        int v33 = 0;
      }
      int v64 = v33;
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_6);
      }
      BOOL v34 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        int v35 = operator new(0x28uLL);
        std::string __p = v35;
        long long v57 = xmmword_256514540;
        _OWORD *v35 = 0u;
        v35[1] = 0u;
        *(void *)((char *)v35 + 29) = 0;
        boost::uuids::to_chars<char *>((uint64_t)&v63, v35);
        p_p = &__p;
        if (v57 < 0) {
          p_p = __p;
        }
        *(void *)uint64_t buf = 68289794;
        __int16 v68 = 2082;
        __int16 v69 = "";
        __int16 v70 = 1026;
        int v71 = v30;
        __int16 v72 = 2082;
        __int16 v73 = p_p;
        __int16 v74 = 1026;
        int v75 = v64;
        _os_log_impl(&dword_25631F000, v34, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationSimilarityListData fromProtobuf\", \"listElementInx\":%{public}d, \"event label\":%{public, location:escape_only}s, \"confidence level\":%{public}d}", buf, 0x28u);
        if (SHIBYTE(v57) < 0) {
          operator delete(__p);
        }
      }

      unsigned int v37 = (_OWORD *)*((void *)&v65 + 1);
      if (*((void *)&v65 + 1) >= (unint64_t)v66)
      {
        unint64_t v40 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v65 + 1) - v65) >> 2);
        unint64_t v41 = v40 + 1;
        if (v40 + 1 > 0xCCCCCCCCCCCCCCCLL) {
          std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
        }
        if (0x999999999999999ALL * ((uint64_t)&v66[-v65] >> 2) > v41) {
          unint64_t v41 = 0x999999999999999ALL * ((uint64_t)&v66[-v65] >> 2);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v66[-v65] >> 2) >= 0x666666666666666) {
          unint64_t v42 = 0xCCCCCCCCCCCCCCCLL;
        }
        else {
          unint64_t v42 = v41;
        }
        if (v42) {
          unsigned int v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationModel::SimilarityListData::EventInformation>>((uint64_t)&v66, v42);
        }
        else {
          unsigned int v43 = 0;
        }
        unsigned int v44 = &v43[20 * v40];
        long long v45 = v63;
        *((_DWORD *)v44 + 4) = v64;
        *(_OWORD *)unsigned int v44 = v45;
        uint64_t v46 = (char *)*((void *)&v65 + 1);
        int v47 = (char *)v65;
        uint64_t v48 = v44;
        if (*((void *)&v65 + 1) != (void)v65)
        {
          do
          {
            long long v49 = *(_OWORD *)(v46 - 20);
            *((_DWORD *)v48 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = *((_DWORD *)v46 - 1);
            *(_OWORD *)(v48 - 20) = v49;
            v48 -= 20;
            v46 -= 20;
          }
          while (v46 != v47);
          uint64_t v46 = (char *)v65;
        }
        int v39 = v44 + 20;
        *(void *)&long long v65 = v48;
        *((void *)&v65 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v44 + 20;
        uint64_t v66 = &v43[20 * v42];
        if (v46) {
          operator delete(v46);
        }
      }
      else
      {
        long long v38 = v63;
        *(_DWORD *)(*((void *)&v65 + 1) + 16) = v64;
        _OWORD *v37 = v38;
        int v39 = (char *)v37 + 20;
      }
      *((void *)&v65 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v39;
      ++v30;
      uint64_t v27 = *((int *)this + 10);
    }
    while (v30 < v27);
  }
  *(unsigned char *)(a2 + 72) = 0;
  *(unsigned char *)(a2 + 112) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(unsigned char *)(a2 + 48) = 0;
  *(void *)(a2 + CLMicroLocationSensorsLogic::stopOdometryMonitoringIfRunning(this + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 80) = 0;
  *(unsigned char *)(a2 + 104) = 0;
  CLMicroLocationModel::SimilarityListData::prepareWithClustersInformationOfEvents(a2, (unint64_t **)&v58, (uint64_t *)&v65);
  LODWORD(v50) = *((_DWORD *)this + 10);
  if ((int)v50 >= 1)
  {
    uint64_t v51 = 0;
    do
    {
      if (v51 >= (int)v50)
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
        wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)buf);
      }
      uint64_t v52 = *(void *)(*((void *)this + 4) + 8 * v51);
      uint64_t v53 = *(int *)(v52 + 24);
      if (v53 != (v59 - (unsigned char *)v58) >> 4)
      {
        CLMicroLocationModel::SimilarityListData::fromProtobuf((NSObject **)buf);

        abort_report_np();
        __break(1u);
      }
      if ((int)v53 >= 1)
      {
        for (uint64_t i = 0; i < v53; ++i)
        {
          if (i >= (int)v53)
          {
            wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
            wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
            wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
            wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)buf);
          }
          CLMicroLocationUtils::ProbabilityMatrix::setValue((CLMicroLocationUtils::ProbabilityMatrix *)(a2 + 48), v51, i, *(double *)(*(void *)(v52 + 16) + 8 * i));
          uint64_t v53 = *(int *)(v52 + 24);
        }
      }
      ++v51;
      uint64_t v50 = *((int *)this + 10);
    }
    while (v51 < v50);
  }
  if ((void)v65)
  {
    *((void *)&v65 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v65;
    operator delete((void *)v65);
  }
  if (v58)
  {
    int v59 = (char *)v58;
    operator delete(v58);
  }
}

void sub_25634DC74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CLMicroLocationModel::SimilarityListData *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  CLMicroLocationModel::SimilarityListData::~SimilarityListData(a13);
  uint64_t v28 = *(void **)(v26 - 184);
  if (v28)
  {
    *(void *)(v26 - 176) = v28;
    operator delete(v28);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::optional<CLMicroLocationModel::SimilarityListData>::operator=[abi:ne180100]<CLMicroLocationModel::SimilarityListData,void>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 120))
  {
    std::vector<CLMicroLocationResultInternal>::__move_assign(a1, (__n128 *)a2);
    std::vector<CLMicroLocationResultInternal>::__move_assign(a1 + 24, (__n128 *)(a2 + 24));
    std::__optional_storage_base<CLMicroLocationUtils::ProbabilityMatrix,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<CLMicroLocationUtils::ProbabilityMatrix,false>>((uint64_t *)(a1 + 48), a2 + 48);
    std::vector<CLMicroLocationResultInternal>::__move_assign(a1 + 80, (__n128 *)(a2 + 80));
    uint64_t v4 = *(void *)(a2 + 104);
    *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
    *(void *)(a1 + 104) = v4;
  }
  else
  {
    std::__construct_at[abi:ne180100]<CLMicroLocationModel::SimilarityListData,CLMicroLocationModel::SimilarityListData,CLMicroLocationModel::SimilarityListData*>(a1, a2);
    *(unsigned char *)(a1 + 120) = 1;
  }
  return a1;
}

void CLMicroLocationModel::SimilarityListData::~SimilarityListData(CLMicroLocationModel::SimilarityListData *this)
{
  __int16 v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 1CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v2;
    operator delete(v2);
  }
  if (*((unsigned char *)this + 72))
  {
    uint64_t v3 = *((void *)this + 6);
    *((void *)this + 6) = 0;
    if (v3) {
      MEMORY[0x25A2A6320](v3, 0x1000C8000313F17);
    }
  }
  uint64_t v4 = (void *)*((void *)this + 3);
  if (v4)
  {
    *((void *)this + 4) = v4;
    operator delete(v4);
  }
  double v5 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v5;
    operator delete(v5);
  }
}

void *CLMicroLocationModel::getIdentifiers@<X0>(void *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  uint64_t v3 = this[41];
  uint64_t v4 = this[42];
  while (v3 != v4)
  {
    this = std::__hash_table<boost::uuids::uuid,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,std::allocator<boost::uuids::uuid>>::__emplace_unique_key_args<boost::uuids::uuid,boost::uuids::uuid const&>(a2, (void *)(v3 + 16), (_OWORD *)(v3 + 16));
    v3 += 32;
  }
  return this;
}

void sub_25634DE94(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void CLMicroLocationModel::SimilarityListData::prepareWithClustersInformationOfEvents(uint64_t a1, unint64_t **a2, uint64_t *a3)
{
  CLMicroLocationUtils::ProbabilityMatrix::ProbabilityMatrix((CLMicroLocationUtils::ProbabilityMatrix *)&v37, -858993459 * ((unint64_t)(a3[1] - *a3) >> 2), (unint64_t)((char *)a2[1] - (char *)*a2) >> 4);
  CLMicroLocationUtils::ProbabilityMatrix::ProbabilityMatrix(&v39);
  char v41 = 1;
  std::__optional_storage_base<CLMicroLocationUtils::ProbabilityMatrix,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<CLMicroLocationUtils::ProbabilityMatrix,false>>((uint64_t *)(a1 + 48), (uint64_t)&v39);
  if (v41)
  {
    unint64_t v6 = v39;
    int v39 = 0;
    if (v6) {
      MEMORY[0x25A2A6320](v6, 0x1000C8000313F17);
    }
  }
  uint64_t v7 = v37;
  *(void *)&long long v37 = 0;
  if (v7) {
    MEMORY[0x25A2A6320](v7, 0x1000C8000313F17);
  }
  std::set<boost::uuids::uuid>::set[abi:ne180100]<std::__wrap_iter<boost::uuids::uuid const*>>((uint64_t)&v39, *a2, a2[1]);
  std::vector<boost::uuids::uuid>::vector<std::__tree_const_iterator<boost::uuids::uuid,std::__tree_node<boost::uuids::uuid,void *> *,long>,0>(&v37, v39, &v40);
  uint64_t v8 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v8;
    operator delete(v8);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = v37;
  unint64_t v10 = (char **)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v38;
  *(void *)(a1 + 32) = v9;
  uint64_t v11 = (void **)(a1 + 80);
  *(void *)(a1 + CLMicroLocationSensorsLogic::stopOdometryMonitoringIfRunning(this + 88) = *(void *)(a1 + 80);
  std::vector<boost::uuids::uuid>::reserve((void **)(a1 + 24), 0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 2));
  std::vector<CLMicroLocationProto::ConfidenceLevel>::reserve((std::vector<int> *)(a1 + 80), 0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 2));
  uint64_t v12 = *a3;
  uint64_t v13 = a3[1];
  if (*a3 != v13)
  {
    do
    {
      unint64_t v15 = *(_OWORD **)(a1 + 32);
      unint64_t v14 = *(void *)(a1 + 40);
      if ((unint64_t)v15 >= v14)
      {
        uint64_t v17 = ((char *)v15 - *v10) >> 4;
        unint64_t v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 60) {
          std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = v14 - (void)*v10;
        if (v19 >> 3 > v18) {
          unint64_t v18 = v19 >> 3;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v20 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v18;
        }
        if (v20) {
          unint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::uuids::uuid>>(a1 + 40, v20);
        }
        else {
          unint64_t v21 = 0;
        }
        int v22 = &v21[16 * v17];
        *(_OWORD *)int v22 = *(_OWORD *)v12;
        uint64_t v24 = *(char **)(a1 + 24);
        uint64_t v23 = *(char **)(a1 + 32);
        int v25 = v22;
        if (v23 != v24)
        {
          do
          {
            *((_OWORD *)v25 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = *((_OWORD *)v23 - 1);
            v25 -= 16;
            v23 -= 16;
          }
          while (v23 != v24);
          uint64_t v23 = *v10;
        }
        uint64_t v16 = v22 + 16;
        *(void *)(a1 + 24) = v25;
        *(void *)(a1 + 32) = v22 + 16;
        *(void *)(a1 + 40) = &v21[16 * v20];
        if (v23) {
          operator delete(v23);
        }
      }
      else
      {
        _OWORD *v15 = *(_OWORD *)v12;
        uint64_t v16 = v15 + 1;
      }
      *(void *)(a1 + 32) = v16;
      uint64_t v27 = *(char **)(a1 + 88);
      unint64_t v26 = *(void *)(a1 + 96);
      if ((unint64_t)v27 >= v26)
      {
        int v29 = (char *)*v11;
        uint64_t v30 = (v27 - (unsigned char *)*v11) >> 2;
        unint64_t v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 62) {
          std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v32 = v26 - (void)v29;
        if (v32 >> 1 > v31) {
          unint64_t v31 = v32 >> 1;
        }
        if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v33 = v31;
        }
        if (v33)
        {
          BOOL v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationProto::ConfidenceReason>>(a1 + 96, v33);
          int v29 = *(char **)(a1 + 80);
          uint64_t v27 = *(char **)(a1 + 88);
        }
        else
        {
          BOOL v34 = 0;
        }
        int v35 = &v34[4 * v30];
        *(_DWORD *)int v35 = *(_DWORD *)(v12 + 16);
        uint64_t v28 = v35 + 4;
        while (v27 != v29)
        {
          int v36 = *((_DWORD *)v27 - 1);
          v27 -= 4;
          *((_DWORD *)v35 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v36;
          v35 -= 4;
        }
        *(void *)(a1 + 80) = v35;
        *(void *)(a1 + CLMicroLocationSensorsLogic::stopOdometryMonitoringIfRunning(this + 88) = v28;
        *(void *)(a1 + 96) = &v34[4 * v33];
        if (v29) {
          operator delete(v29);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v27 = *(_DWORD *)(v12 + 16);
        uint64_t v28 = v27 + 4;
      }
      *(void *)(a1 + CLMicroLocationSensorsLogic::stopOdometryMonitoringIfRunning(this + 88) = v28;
      v12 += 20;
    }
    while (v12 != v13);
  }
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&v39, v40);
}

void sub_25634E1DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

CLMicroLocationModel::SimilarityListData *std::optional<CLMicroLocationModel::SimilarityListData>::operator=[abi:ne180100]<CLMicroLocationModel::SimilarityListData&,void>(CLMicroLocationModel::SimilarityListData *this, CLMicroLocationModel::SimilarityListData *a2)
{
  if (*((unsigned char *)this + 120))
  {
    if (this == a2)
    {
      std::__optional_storage_base<CLMicroLocationUtils::ProbabilityMatrix,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<CLMicroLocationUtils::ProbabilityMatrix,false> const&>((unsigned char *)this + 48, (unsigned __int8 *)this + 48);
    }
    else
    {
      std::vector<boost::uuids::uuid>::__assign_with_size[abi:ne180100]<boost::uuids::uuid*,boost::uuids::uuid*>((char *)this, *(char **)a2, *((void *)a2 + 1), (uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 4);
      std::vector<boost::uuids::uuid>::__assign_with_size[abi:ne180100]<boost::uuids::uuid*,boost::uuids::uuid*>((char *)this + 24, *((char **)a2 + 3), *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 4);
      std::__optional_storage_base<CLMicroLocationUtils::ProbabilityMatrix,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<CLMicroLocationUtils::ProbabilityMatrix,false> const&>((unsigned char *)this + 48, (unsigned __int8 *)a2 + 48);
      std::vector<CLMicroLocationProto::ConfidenceLevel>::__assign_with_size[abi:ne180100]<CLMicroLocationProto::ConfidenceLevel*,CLMicroLocationProto::ConfidenceLevel*>((char *)this + 80, *((char **)a2 + 10), *((void *)a2 + 11), (uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 2);
    }
    uint64_t v4 = *((void *)a2 + 13);
    *((unsigned char *)this + 112) = *((unsigned char *)a2 + 112);
    *((void *)this + 13) = v4;
  }
  else
  {
    CLMicroLocationModel::SimilarityListData::SimilarityListData(this, a2);
    *((unsigned char *)this + 120) = 1;
  }
  return this;
}

float CLMicroLocationModel::BlueAtlasData::fromProtobuf@<S0>(uint64_t ****this@<X0>, unint64_t a2@<X1>, char **a3@<X8>)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  *((unsigned char *)a3 + 56) = 0;
  *((unsigned char *)a3 + 64) = 0;
  *((unsigned char *)a3 + 72) = 0;
  LODWORD(v4) = 0;
  *(_OWORD *)a3 = 0u;
  *((_OWORD *)a3 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
  *((_OWORD *)a3 + 2) = 0u;
  *((unsigned char *)a3 + 48) = 0;
  *((_DWORD *)a3 + 20) = -8388609;
  uint64_t v38 = (CLMicroLocationModel::BlueAtlasData *)this;
  uint64_t v5 = *((int *)this + 4);
  if (v5)
  {
    unint64_t v6 = this[1];
    uint64_t v7 = &v6[v5];
    do
    {
      this = (uint64_t ****)CLMicroLocationProtobufHelper::uuidFromProtobuf(*v6, &v43);
      if (v44)
      {
        uint64_t v9 = a3[1];
        unint64_t v8 = (unint64_t)a3[2];
        if ((unint64_t)v9 >= v8)
        {
          uint64_t v13 = (v9 - *a3) >> 4;
          unint64_t v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 60) {
            std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v15 = v8 - (void)*a3;
          if (v15 >> 3 > v14) {
            unint64_t v14 = v15 >> 3;
          }
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
            a2 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            a2 = v14;
          }
          if (a2) {
            this = (uint64_t ****)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::uuids::uuid>>((uint64_t)(a3 + 2), a2);
          }
          else {
            this = 0;
          }
          uint64_t v16 = &this[2 * v13];
          LODWORD(v4) = v43;
          *(_OWORD *)uint64_t v16 = v43;
          unint64_t v18 = *a3;
          uint64_t v17 = a3[1];
          uint64_t v19 = v16;
          if (v17 != *a3)
          {
            do
            {
              long long v4 = *((_OWORD *)v17 - 1);
              *((_OWORD *)v19 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v4;
              v19 -= 2;
              v17 -= 16;
            }
            while (v17 != v18);
            uint64_t v17 = *a3;
          }
          unint64_t v10 = (char *)(v16 + 2);
          *a3 = (char *)v19;
          a3[1] = (char *)(v16 + 2);
          a3[2] = (char *)&this[2 * a2];
          if (v17) {
            operator delete(v17);
          }
        }
        else
        {
          LODWORD(v4) = v43;
          *(_OWORD *)uint64_t v9 = v43;
          unint64_t v10 = v9 + 16;
        }
        a3[1] = v10;
      }
      else
      {
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_6);
        }
        uint64_t v11 = logObject_MicroLocation_Default;
        if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t buf = 68289026;
          int v40 = 0;
          __int16 v41 = 2082;
          unint64_t v42 = "";
          _os_log_impl(&dword_25631F000, v11, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLMicroLocationModel::BlueAtlasData fromProtobuf - invalid LabelUuid conversion!\"}", buf, 0x12u);
        }
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_6);
        }
        uint64_t v12 = logObject_MicroLocation_Default;
        this = (uint64_t ****)os_signpost_enabled((os_log_t)logObject_MicroLocation_Default);
        if (this)
        {
          *(_DWORD *)uint64_t buf = 68289026;
          int v40 = 0;
          __int16 v41 = 2082;
          unint64_t v42 = "";
          _os_signpost_emit_with_name_impl(&dword_25631F000, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLMicroLocationModel::BlueAtlasData fromProtobuf - invalid LabelUuid conversion!", "{\"msg%{public}.0s\":\"CLMicroLocationModel::BlueAtlasData fromProtobuf - invalid LabelUuid conversion!\"}", buf, 0x12u);
        }
      }
      ++v6;
    }
    while (v6 != v7);
  }
  uint64_t v20 = *((int *)v38 + 10);
  if (v20)
  {
    unint64_t v21 = (CLMacAddress **)*((void *)v38 + 4);
    int v22 = &v21[v20];
    uint64_t v23 = (CLMicroLocationModel::BlueAtlasData **)(a3 + 3);
    do
    {
      this = (uint64_t ****)CLMacAddress::newFromUint64(*v21, a2);
      uint64_t v24 = (CLMicroLocationModel::BlueAtlasData *)this;
      unint64_t v26 = (CLMicroLocationModel::BlueAtlasData *)a3[4];
      unint64_t v25 = (unint64_t)a3[5];
      if ((unint64_t)v26 >= v25)
      {
        this = (uint64_t ****)*v23;
        uint64_t v28 = (v26 - *v23) >> 3;
        unint64_t v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 61) {
          std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v30 = v25 - (void)this;
        if (v30 >> 2 > v29) {
          unint64_t v29 = v30 >> 2;
        }
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8) {
          a2 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          a2 = v29;
        }
        if (a2)
        {
          unint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>((uint64_t)(a3 + 5), a2);
          this = (uint64_t ****)a3[3];
          unint64_t v26 = (CLMicroLocationModel::BlueAtlasData *)a3[4];
        }
        else
        {
          unint64_t v31 = 0;
        }
        uint64_t v32 = (CLMicroLocationModel::BlueAtlasData **)&v31[8 * v28];
        NSObject *v32 = v24;
        uint64_t v27 = (char *)(v32 + 1);
        while (v26 != (CLMicroLocationModel::BlueAtlasData *)this)
        {
          unint64_t v33 = (CLMicroLocationModel::BlueAtlasData *)*((void *)v26 - 1);
          unint64_t v26 = (CLMicroLocationModel::BlueAtlasData *)((char *)v26 - 8);
          *--uint64_t v32 = v33;
        }
        a3[3] = (char *)v32;
        a3[4] = v27;
        a3[5] = &v31[8 * a2];
        if (this) {
          operator delete(this);
        }
      }
      else
      {
        *(void *)unint64_t v26 = this;
        uint64_t v27 = (char *)v26 + 8;
      }
      a3[4] = v27;
      ++v21;
    }
    while (v21 != v22);
  }
  if ((*((unsigned char *)v38 + 60) & 4) != 0)
  {
    uint64_t v34 = *((void *)v38 + 6);
    if (!v34) {
      uint64_t v34 = *(void *)(CLMicroLocationProto::BlueAtlasData::default_instance((CLMicroLocationProto::BlueAtlasData *)this)
    }
                      + 48);
    int v35 = (CLMicroLocationProto::BlueAtlasData *)CLMacAddress::newFromUint64(*(CLMacAddress **)(v34 + 8), a2);
    if (!*((unsigned char *)a3 + 72)) {
      *((unsigned char *)a3 + 72) = 1;
    }
    a3[8] = (char *)v35;
    uint64_t v36 = *((void *)v38 + 6);
    if (!v36) {
      uint64_t v36 = *(void *)(CLMicroLocationProto::BlueAtlasData::default_instance(v35) + 48);
    }
    LODWORD(v4) = *(_DWORD *)(v36 + 16);
    *((_DWORD *)a3 + 20) = v4;
  }
  return *(float *)&v4;
}

void sub_25634E704(_Unwind_Exception *a1)
{
  CLMicroLocationModel::BlueAtlasData::~BlueAtlasData(v1);
  _Unwind_Resume(a1);
}

uint64_t std::optional<CLMicroLocationModel::BlueAtlasData>::operator=[abi:ne180100]<CLMicroLocationModel::BlueAtlasData,void>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 88))
  {
    std::vector<CLMicroLocationResultInternal>::__move_assign(a1, (__n128 *)a2);
    std::vector<CLMicroLocationResultInternal>::__move_assign(a1 + 24, (__n128 *)(a2 + 24));
    long long v4 = *(_OWORD *)(a2 + 48);
    long long v5 = *(_OWORD *)(a2 + 64);
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 48) = v4;
    *(_OWORD *)(a1 + 64) = v5;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    long long v6 = *(_OWORD *)(a2 + 48);
    long long v7 = *(_OWORD *)(a2 + 64);
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 48) = v6;
    *(_OWORD *)(a1 + 64) = v7;
    *(unsigned char *)(a1 + CLMicroLocationSensorsLogic::stopOdometryMonitoringIfRunning(this + 88) = 1;
  }
  return a1;
}

void CLMicroLocationModel::BlueAtlasData::~BlueAtlasData(CLMicroLocationModel::BlueAtlasData *this)
{
  __int16 v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v3;
    operator delete(v3);
  }
}

void CLMicroLocationModel::~CLMicroLocationModel(void **this)
{
  if (*((char *)this + 447) < 0) {
    operator delete(this[53]);
  }
  __int16 v2 = this[50];
  if (v2)
  {
    this[51] = v2;
    operator delete(v2);
  }
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::~__hash_table((uint64_t)(this + 44));
  uint64_t v3 = this + 41;
  std::vector<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__optional_destruct_base<CLMicroLocationModel::BlueAtlasData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 25));
  std::__optional_destruct_base<CLMicroLocationModel::SimilarityListData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 9));
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)(this + 2));
}

void *CLMicroLocationModel::getPredictionClasses@<X0>(void *this@<X0>, void **a2@<X8>)
{
  unsigned int v3 = *((_DWORD *)this + 1);
  if (v3 >= 2)
  {
    if (v3 == 2)
    {
      if (*((unsigned char *)this + 192))
      {
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
        long long v4 = (const void *)this[12];
        uint64_t v5 = this[13];
        goto LABEL_11;
      }
    }
    else
    {
      if (v3 != 3)
      {
        PredictionClasses = (_Unwind_Exception *)CLMicroLocationModel::getPredictionClasses();
        unint64_t v8 = *a2;
        if (*a2)
        {
          a2[1] = v8;
          operator delete(v8);
        }
        std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v9);
        _Unwind_Resume(PredictionClasses);
      }
      if (*((unsigned char *)this + 288))
      {
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
        long long v4 = (const void *)this[25];
        uint64_t v5 = this[26];
LABEL_11:
        return std::vector<boost::uuids::uuid>::__init_with_size[abi:ne180100]<boost::uuids::uuid*,boost::uuids::uuid*>(a2, v4, v5, (v5 - (uint64_t)v4) >> 4);
      }
    }
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return this;
  }
  CLMicroLocationModel::getIdentifiers(this, (uint64_t)v9);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  long long v6 = v10;
  for (i = a2; v6; long long v6 = (uint64_t *)*v6)
    std::back_insert_iterator<std::vector<boost::uuids::uuid>>::operator=[abi:ne180100](&i, (_OWORD *)v6 + 1);
  return (void *)std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v9);
}

BOOL CLMicroLocationModel::isValid(CLMicroLocationModel *this)
{
  uint64_t v1 = *((void *)this + 41);
  uint64_t v2 = *((void *)this + 42);
  BOOL v3 = v1 == v2 && *((_DWORD *)this + 1) == 3;
  if (v1 != v2)
  {
    if (*((void *)this + 47))
    {
      CLMicroLocationModel::getIdentifiers(this, (uint64_t)v8);
      if (v10 == *((void *)this + 47))
      {
        uint64_t v5 = v9;
        if (v9)
        {
          long long v6 = (void *)((char *)this + 352);
          LOBYTE(v3) = 1;
          do
          {
            BOOL v3 = v3
              && std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::find<boost::uuids::uuid>(v6, v5 + 2) != 0;
            uint64_t v5 = (void *)*v5;
          }
          while (v5);
        }
        else
        {
          BOOL v3 = 1;
        }
      }
      else
      {
        BOOL v3 = 0;
      }
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v8);
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void sub_25634EA78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void *CLMicroLocationModel::mapIdentifiers(void *result, void *a2)
{
  BOOL v3 = result;
  for (uint64_t i = (void *)a2[2]; i; uint64_t i = (void *)*i)
  {
    if (i[2] != i[4] || i[3] != i[5])
    {
      uint64_t result = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::find<boost::uuids::uuid>(v3 + 44, i + 2);
      if (result)
      {
        std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::__emplace_unique_key_args<boost::uuids::uuid,boost::uuids::uuid const&,std::vector<boost::uuids::uuid>>((uint64_t)(v3 + 44), i + 4, (_OWORD *)i + 2, (long long *)result + 2);
        if ((v6 & 1) == 0)
        {
          uint64_t v11 = (CLMicroLocationModel *)CLMicroLocationModel::mapIdentifiers();
          return (void *)CLMicroLocationModel::generateRandomIdentifiers(v11, v12);
        }
        uint64_t result = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::__erase_unique<boost::uuids::uuid>(v3 + 44, i + 2);
      }
    }
  }
  long long v7 = (void *)v3[41];
  unint64_t v8 = (void *)v3[42];
  if (v7 != v8)
  {
    uint64_t v9 = v7 + 2;
    do
    {
      uint64_t result = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::find<boost::uuids::uuid>(a2, v9);
      if (result) {
        *(_OWORD *)uint64_t v9 = *((_OWORD *)result + 2);
      }
      uint64_t v10 = v9 + 2;
      v9 += 4;
    }
    while (v10 != v8);
  }
  return result;
}

uint64_t CLMicroLocationModel::generateRandomIdentifiers@<X0>(unint64_t this@<X0>, void **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  int v21 = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v21);
  if (this)
  {
    do
    {
      uint64_t v4 = boost::uuids::random_generator_pure::operator()((uint64_t)&v21);
      uint64_t v6 = v4;
      uint64_t v7 = v5;
      uint64_t v9 = (uint64_t *)a2[1];
      unint64_t v8 = (unint64_t)a2[2];
      if ((unint64_t)v9 >= v8)
      {
        uint64_t v11 = ((char *)v9 - (unsigned char *)*a2) >> 4;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 60) {
          std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v13 = v8 - (void)*a2;
        if (v13 >> 3 > v12) {
          unint64_t v12 = v13 >> 3;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14) {
          uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::uuids::uuid>>((uint64_t)(a2 + 2), v14);
        }
        else {
          uint64_t v15 = 0;
        }
        uint64_t v16 = (uint64_t *)&v15[16 * v11];
        *uint64_t v16 = v6;
        v16[1] = v7;
        unint64_t v18 = (char *)*a2;
        uint64_t v17 = (char *)a2[1];
        uint64_t v19 = v16;
        if (v17 != *a2)
        {
          do
          {
            *((_OWORD *)v19 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = *((_OWORD *)v17 - 1);
            v19 -= 2;
            v17 -= 16;
          }
          while (v17 != v18);
          uint64_t v17 = (char *)*a2;
        }
        uint64_t v10 = v16 + 2;
        *a2 = v19;
        a2[1] = v16 + 2;
        a2[2] = &v15[16 * v14];
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        uint64_t *v9 = v4;
        v9[1] = v5;
        uint64_t v10 = v9 + 2;
      }
      a2[1] = v10;
    }
    while (this > ((char *)v10 - (unsigned char *)*a2) >> 4);
  }
  return boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v21);
}

void sub_25634ECB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&a11);
  uint64_t v13 = *(void **)v11;
  if (*(void *)v11)
  {
    *(void *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

void CLMicroLocationModel::mapIdentifiersFromOldModel(CLMicroLocationModel *this, const CLMicroLocationModel *a2, NSMutableDictionary *a3)
{
  uint64_t v79 = *MEMORY[0x263EF8340];
  unint64_t v56 = a3;
  CLMicroLocationModel::getIdentifiers(this, (uint64_t)v66);
  CLMicroLocationModel::getIdentifiers(a2, (uint64_t)v63);
  if (v68 == *((CLMicroLocationModel **)this + 47) && v65 == *((void *)a2 + 47))
  {
    for (uint64_t i = v64; v64; uint64_t i = v64)
    {
      while (!std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::find<boost::uuids::uuid>(v66, i + 2))
      {
        uint64_t i = (void *)*i;
        if (!i) {
          goto LABEL_16;
        }
      }
      CLMicroLocationModel::generateRandomIdentifiers((unint64_t)v68, __p);
      long long v72 = 0u;
      long long v73 = 0u;
      int v74 = 1065353216;
      uint64_t v6 = v67;
      if (v67)
      {
        uint64_t v7 = (long long *)__p[0];
        do
        {
          long long v77 = *((_OWORD *)v6 + 1);
          long long v78 = *v7;
          std::__hash_table<std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>>>::__emplace_unique_key_args<boost::uuids::uuid,std::pair<boost::uuids::uuid const,boost::uuids::uuid>>((uint64_t)&v72, &v77, &v77);
          uint64_t v6 = (uint64_t *)*v6;
          ++v7;
        }
        while (v6);
      }
      CLMicroLocationModel::mapIdentifiers(this, &v72);
      std::__hash_table<boost::uuids::uuid,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,std::allocator<boost::uuids::uuid>>::clear(v66);
      unint64_t v8 = __p[0];
      uint64_t v9 = __p[1];
      while (v8 != v9)
      {
        std::__hash_table<boost::uuids::uuid,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,std::allocator<boost::uuids::uuid>>::__emplace_unique_key_args<boost::uuids::uuid,boost::uuids::uuid const&>((uint64_t)v66, v8, v8);
        v8 += 2;
      }
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&v72);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
LABEL_16:
    long long v61 = 0;
    uint64_t v62 = 0;
    __int16 v60 = (uint64_t *)&v61;
    uint64_t v10 = +[ULDefaultsSingleton shared];
    uint64_t v11 = [v10 defaultsDictionary];

    unint64_t v12 = [NSString stringWithUTF8String:"ULFingerprintDistanceFunctionType"];
    uint64_t v13 = [v11 objectForKey:v12];
    if (v13 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
      int v14 = [v13 unsignedIntValue];
    }
    else {
      int v14 = [&unk_2704F1380 unsignedIntValue];
    }
    int v15 = v14;

    char v54 = ULSettings::getFingerprintDistanceFunctionParamsForType(v15);
    std::unordered_map<boost::uuids::uuid,CLMicroLocationAnchorAppearance>::unordered_map((uint64_t)&v72, (uint64_t)this + 16);
    long long v75 = *(_OWORD *)((char *)this + 56);
    char v76 = 1;
    CLMicroLocationAlgorithms::createLearnFingerprintDistanceFunction(v15, v54, (uint64_t)&v72, &v77);
    if (v76) {
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&v72);
    }
    uint64_t v16 = +[ULDefaultsSingleton shared];
    uint64_t v17 = [v16 defaultsDictionary];

    unint64_t v18 = [NSString stringWithUTF8String:"ULClusterPersistenceDistanceThreshold"];
    uint64_t v19 = [v17 objectForKey:v18];
    if (v19 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
      [v19 doubleValue];
    }
    else {
      [&unk_2704F0D90 doubleValue];
    }
    double v21 = v20;

    int v22 = v67;
    if (v67)
    {
      double v23 = 0.0;
      double v24 = 1.79769313e308;
      while (1)
      {
        unint64_t v25 = v64;
        uint64_t v55 = (uint64_t **)v22;
        if (v64) {
          break;
        }
        double v36 = v24;
LABEL_60:
        int v22 = *v55;
        double v24 = v36;
        if (!*v55) {
          goto LABEL_61;
        }
      }
      unint64_t v26 = v22 + 2;
      while (1)
      {
        uint64_t v27 = v25 + 2;
        uint64_t v28 = (void *)*((void *)this + 41);
        unint64_t v29 = (void *)*((void *)this + 42);
        if (v28 == v29)
        {
          unint64_t v30 = 0;
          double v31 = 0.0;
        }
        else
        {
          unint64_t v30 = 0;
          double v31 = 0.0;
          do
          {
            unint64_t v33 = (void *)*((void *)a2 + 41);
            uint64_t v32 = (void *)*((void *)a2 + 42);
            while (v33 != v32)
            {
              BOOL v34 = v28[2] == *v26 && v28[3] == v26[1];
              if (v34 && v33[2] == *v27 && v33[3] == v25[3])
              {
                if (!*((void *)&v78 + 1)) {
                  std::__throw_bad_function_call[abi:ne180100]();
                }
                ++v30;
                double v31 = v31
                    + (*(double (**)(void, void, void))(**((void **)&v78 + 1) + 48))(*((void *)&v78 + 1), *v28, *v33);
              }
              v33 += 4;
            }
            v28 += 4;
          }
          while (v28 != v29);
        }
        double v36 = v31 / (double)v30;
        __p[0] = *(void **)&v36;
        if (v36 >= v21)
        {
          if (v36 >= v24)
          {
LABEL_56:
            double v36 = v24;
            goto LABEL_57;
          }
          uint64_t v38 = [NSNumber numberWithDouble:v36];
          [(NSMutableDictionary *)v56 setObject:v38 forKeyedSubscript:@"minDistanceAbovePersistenceThreshold"];
        }
        else
        {
          long long v72 = *(_OWORD *)v26;
          long long v73 = *(_OWORD *)v27;
          std::__tree<std::__value_type<double,std::pair<boost::uuids::uuid const,boost::uuids::uuid>>,std::__map_value_compare<double,std::__value_type<double,std::pair<boost::uuids::uuid const,boost::uuids::uuid>>,std::less<double>,true>,std::allocator<std::__value_type<double,std::pair<boost::uuids::uuid const,boost::uuids::uuid>>>>::__emplace_multi<double &,std::pair<boost::uuids::uuid const,boost::uuids::uuid>>(&v60, (double *)__p, &v72);
          long long v37 = __p[0];
          if (*(double *)__p <= v23) {
            goto LABEL_56;
          }
          uint64_t v38 = [NSNumber numberWithDouble:*(double *)__p];
          [(NSMutableDictionary *)v56 setObject:v38 forKeyedSubscript:@"maxDistanceBelowPersistenceThreshold"];
          double v36 = v24;
          double v23 = *(double *)&v37;
        }

LABEL_57:
        unint64_t v25 = (void *)*v25;
        double v24 = v36;
        if (!v25) {
          goto LABEL_60;
        }
      }
    }
LABEL_61:
    long long v72 = 0u;
    long long v73 = 0u;
    int v74 = 1065353216;
    while (v62)
    {
      long long v39 = *(_OWORD *)(v60 + 7);
      *(_OWORD *)std::string __p = *(_OWORD *)(v60 + 5);
      long long v71 = v39;
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>>>::__emplace_unique_key_args<boost::uuids::uuid,std::pair<boost::uuids::uuid const,boost::uuids::uuid> const&>((uint64_t)&v72, __p, __p);
      unint64_t v58 = 0;
      uint64_t v59 = 0;
      long long v57 = (uint64_t *)&v58;
      int v40 = v60;
      v69[0] = &v57;
      v69[1] = &v58;
      if (v60 == (uint64_t *)&v61)
      {
        uint64_t v45 = 0;
        int v47 = 0;
        uint64_t v48 = (uint64_t *)&v58;
        uint64_t v46 = (uint64_t *)&v61;
      }
      else
      {
        do
        {
          if (((void *)v40[5] != __p[0] || (void *)v40[6] != __p[1])
            && (v40[7] != (void)v71 || v40[8] != *((void *)&v71 + 1)))
          {
            std::insert_iterator<std::multimap<double,std::pair<boost::uuids::uuid const,boost::uuids::uuid>>>::operator=[abi:ne180100]((uint64_t)v69, (uint64_t)(v40 + 4));
          }
          long long v43 = (uint64_t *)v40[1];
          if (v43)
          {
            do
            {
              char v44 = v43;
              long long v43 = (uint64_t *)*v43;
            }
            while (v43);
          }
          else
          {
            do
            {
              char v44 = (uint64_t *)v40[2];
              BOOL v34 = *v44 == (void)v40;
              int v40 = v44;
            }
            while (!v34);
          }
          int v40 = v44;
        }
        while (v44 != (uint64_t *)&v61);
        uint64_t v45 = v59;
        uint64_t v46 = v60;
        uint64_t v48 = v57;
        int v47 = v58;
      }
      long long v49 = v61;
      uint64_t v50 = v62;
      __int16 v60 = v48;
      long long v61 = v47;
      long long v57 = v46;
      unint64_t v58 = v49;
      uint64_t v62 = v45;
      uint64_t v59 = v50;
      uint64_t v51 = (uint64_t **)(v47 + 2);
      if (v45) {
        uint64_t v52 = v51;
      }
      else {
        uint64_t v52 = &v60;
      }
      const char *v52 = (uint64_t *)&v61;
      uint64_t v53 = (uint64_t **)(v49 + 2);
      if (!v50) {
        uint64_t v53 = &v57;
      }
      *uint64_t v53 = (uint64_t *)&v58;
      std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&v57, v49);
    }
    CLMicroLocationModel::mapIdentifiers(this, &v72);
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&v72);
    std::__function::__value_func<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::~__value_func[abi:ne180100](&v77);

    std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&v60, v61);
  }
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v63);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v66);
}

void sub_25634F358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, char a15, uint64_t a16, uint64_t a17, char a18, void *a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  std::__function::__value_func<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::~__value_func[abi:ne180100]((void *)(v47 - 176));
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&a18, a19);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&a21);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&a26);

  _Unwind_Resume(a1);
}

void CLMicroLocationModel::pruneSmallClusters(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v4 = a1 + 41;
  uint64_t v5 = *(void **)(a2 + 16);
  uint64_t v25 = a1[41];
  uint64_t v26 = a1[42];
  if (v5)
  {
    uint64_t v7 = a1 + 44;
    uint64_t v8 = a1[42];
    do
    {
      uint64_t v9 = v8;
      uint64_t v10 = v5 + 2;
      uint64_t v11 = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::find<boost::uuids::uuid>(v7, v5 + 2);
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_6);
      }
      unint64_t v12 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = operator new(0x28uLL);
        std::string __p = v13;
        long long v28 = xmmword_256514540;
        *uint64_t v13 = 0u;
        v13[1] = 0u;
        *(void *)((char *)v13 + 29) = 0;
        boost::uuids::to_chars<char *>((uint64_t)(v5 + 2), v13);
        p_p = &__p;
        if (v28 < 0) {
          p_p = __p;
        }
        uint64_t v15 = (v11[5] - v11[4]) >> 4;
        *(_DWORD *)uint64_t buf = 68289794;
        int v30 = 0;
        __int16 v31 = 2082;
        uint64_t v32 = "";
        __int16 v33 = 2082;
        unint64_t v34 = (unint64_t)p_p;
        __int16 v35 = 2050;
        uint64_t v36 = v15;
        __int16 v37 = 2050;
        unint64_t v38 = a3;
        _os_log_impl(&dword_25631F000, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"pruneSmallClusters\", \"cluster ID\":%{public, location:escape_only}s, \"cluster size\":%{public}lu, \"threshold\":%{public}lu}", buf, 0x30u);
        if (SHIBYTE(v28) < 0) {
          operator delete(__p);
        }
      }

      if (a3 <= (v11[5] - v11[4]) >> 4
        || (std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::erase(v7, v11), uint64_t v8 = *v4, *v4 == v9))
      {
        uint64_t v8 = v9;
        uint64_t v16 = a1;
      }
      else
      {
        uint64_t v16 = a1;
        while (1)
        {
          BOOL v17 = *(void *)(v8 + 16) == *v10 && *(void *)(v8 + 24) == v5[3];
          uint64_t v18 = v8 + 32;
          if (v17) {
            break;
          }
          v8 += 32;
          if (v18 == v9)
          {
            uint64_t v8 = v9;
            goto LABEL_30;
          }
        }
        while (v18 != v9)
        {
          if (*(void *)(v18 + 16) != *v10 || *(void *)(v18 + 24) != v5[3])
          {
            long long v20 = *(_OWORD *)v18;
            *(void *)uint64_t v18 = 0;
            *(void *)(v18 + 8) = 0;
            double v21 = *(std::__shared_weak_count **)(v8 + 8);
            *(_OWORD *)uint64_t v8 = v20;
            if (v21)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v21);
              uint64_t v16 = a1;
            }
            *(_OWORD *)(v8 + 16) = *(_OWORD *)(v18 + 16);
            v8 += 32;
          }
          v18 += 32;
        }
      }
LABEL_30:
      uint64_t v5 = (void *)*v5;
    }
    while (v5);
    int v22 = (long long *)v16[42];
  }
  else
  {
    uint64_t v8 = a1[42];
    int v22 = (long long *)v8;
  }
  std::vector<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>::erase((uint64_t)v4, v8, v22);
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_6);
  }
  double v23 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v24 = (a1[42] - a1[41]) >> 5;
    *(_DWORD *)uint64_t buf = 68289794;
    int v30 = 0;
    __int16 v31 = 2082;
    uint64_t v32 = "";
    __int16 v33 = 2050;
    unint64_t v34 = a3;
    __int16 v35 = 2050;
    uint64_t v36 = (v26 - v25) >> 5;
    __int16 v37 = 2050;
    unint64_t v38 = v24;
    _os_log_impl(&dword_25631F000, v23, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"pruneSmallClusters\", \"clusterSizeThreshold\":%{public}lu, \"numFingerprintsPrePruning\":%{public}lu, \"numFingerprintsPostPruning\":%{public}lu}", buf, 0x30u);
  }
}

void sub_25634F82C(_Unwind_Exception *a1)
{
  operator delete(v2);

  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>::erase(uint64_t a1, uint64_t a2, long long *a3)
{
  if ((long long *)a2 != a3)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid> *,std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid> *,std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid> *>((uint64_t)&v10, a3, *(long long **)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        uint64_t v8 = *(std::__shared_weak_count **)(v7 - 24);
        if (v8) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }
        v7 -= 32;
      }
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

uint64_t CLMicroLocationModel::pruneSmallClusters(CLMicroLocationModel *this)
{
  uint64_t v2 = +[ULDefaultsSingleton shared];
  BOOL v3 = [v2 defaultsDictionary];

  uint64_t v4 = [NSString stringWithUTF8String:"ULClusterSizeThreshold"];
  uint64_t v5 = [v3 objectForKey:v4];
  if (v5 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v6 = [v5 unsignedLongValue];
  }
  else {
    uint64_t v6 = [&unk_2704F1338 unsignedLongValue];
  }
  unint64_t v7 = v6;

  CLMicroLocationModel::getIdentifiers(this, (uint64_t)v9);
  CLMicroLocationModel::pruneSmallClusters((uint64_t *)this, (uint64_t)v9, v7);
  return std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v9);
}

void sub_25634F9D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationModel::mapIdentifiersFromOldModelAndPruneNoiseClusters(CLMicroLocationModel *a1, uint64_t a2, int a3, void *a4)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  unint64_t v7 = a4;
  if (CLMicroLocationModel::isValid(a1))
  {
    uint64_t v8 = +[ULDefaultsSingleton shared];
    uint64_t v9 = [v8 defaultsDictionary];

    char v10 = [NSString stringWithUTF8String:"ULClusterSizeRatio"];
    uint64_t v11 = [v9 objectForKey:v10];
    if (v11 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
      [v11 doubleValue];
    }
    else {
      [&unk_2704F0DA0 doubleValue];
    }
    double v13 = v12;

    int v14 = (void *)*((void *)a1 + 46);
    uint64_t v15 = (void *)*v14;
    if (*v14)
    {
      do
      {
        if (v14[5] - v14[4] < v15[5] - v15[4]) {
          int v14 = v15;
        }
        uint64_t v15 = (void *)*v15;
      }
      while (v15);
    }
    unint64_t v16 = (unint64_t)(v13 * (double)(unint64_t)((uint64_t)(v14[5] - v14[4]) >> 4));
    if (v16 > (int)ULSettings::get<ULSettings::ClusterMaximalSizeForRelativePruning>()) {
      unint64_t v16 = (int)ULSettings::get<ULSettings::ClusterMaximalSizeForRelativePruning>();
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_6);
    }
    BOOL v17 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t buf = 68289282;
      __int16 v24 = 2082;
      *(void *)uint64_t v25 = "";
      *(_WORD *)&v25[8] = 2050;
      *(double *)&v25[10] = (double)v16;
      _os_log_impl(&dword_25631F000, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Using relative cluster size threshold : \", \"size\":\"%{public}.5f\"}", (uint8_t *)&buf, 0x1Cu);
    }
    CLMicroLocationModel::pruneSmallClusters(a1);
    if (CLMicroLocationModel::isValid(a1))
    {
      CLMicroLocationModel::getIdentifiers(a1, (uint64_t)&buf);
      if (a3) {
        CLMicroLocationModel::pruneSmallClusters((uint64_t *)a1, (uint64_t)&buf, v16);
      }
      if (*(unsigned char *)(a2 + 8))
      {
        uint64_t v18 = *(const CLMicroLocationModel **)a2;
        if (CLMicroLocationModel::isValid(v18))
        {
          CLMicroLocationModel::mapIdentifiersFromOldModel(a1, v18, v7);
          CLMicroLocationModel::getIdentifiers(a1, (uint64_t)v22);
          uint64_t v19 = *(uint64_t **)&v25[6];
          if (*(void *)&v25[6])
          {
            do
            {
              uint64_t v20 = *v19;
              if (!std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::find<boost::uuids::uuid>(v22, v19 + 2))std::__hash_table<boost::uuids::uuid,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,std::allocator<boost::uuids::uuid>>::erase(&buf, v19); {
              uint64_t v19 = (uint64_t *)v20;
              }
            }
            while (v20);
          }
          std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v22);
        }
      }
      if ((a3 & 1) == 0) {
        CLMicroLocationModel::pruneSmallClusters((uint64_t *)a1, (uint64_t)&buf, v16);
      }
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&buf);
    }
    else
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_6);
      }
      double v21 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_25631F000, v21, OS_LOG_TYPE_DEFAULT, "Model has become invalid after pruning clusters with absolute size threshold", (uint8_t *)&buf, 2u);
      }
    }
  }
}

void sub_25634FD5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::ClusterMaximalSizeForRelativePruning>()
{
  os_log_t v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  uint64_t v2 = [NSString stringWithUTF8String:"ULClusterMaximalSizeForRelativePruning"];
  BOOL v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 intValue];
  }
  else {
    uint64_t v4 = [&unk_2704F1350 intValue];
  }
  uint64_t v5 = v4;

  return v5;
}

void sub_25634FEA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationModel::getClusterPairwiseDistances@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  unint64_t v6 = a1[47];
  CLMicroLocationModel::getIdentifiers(a1, (uint64_t)v37);
  v36[0] = 0;
  v36[1] = 0;
  uint64_t v34 = 0;
  __int16 v35 = (uint64_t *)v36;
  for (uint64_t i = v38; i; uint64_t i = (uint64_t *)*i)
  {
    *(_OWORD *)std::string __p = *((_OWORD *)i + 1);
    std::__tree<std::__value_type<boost::uuids::uuid,unsigned long>,std::__map_value_compare<boost::uuids::uuid,std::__value_type<boost::uuids::uuid,unsigned long>,std::less<boost::uuids::uuid>,true>,std::allocator<std::__value_type<boost::uuids::uuid,unsigned long>>>::__emplace_unique_key_args<boost::uuids::uuid,boost::uuids::uuid&,unsigned long &>(&v35, (unint64_t *)__p, __p, &v34);
    ++v34;
  }
  a3[1] = 0;
  uint64_t v8 = (uint64_t *)(a3 + 1);
  a3[2] = 0;
  a3[3] = 0;
  __p[1] = 0;
  __int16 v41 = 0;
  uint64_t v42 = 0;
  *a3 = v6;
  *(void *)__x = 0;
  std::vector<double>::resize((uint64_t)(a3 + 1), (v6 + v6 * v6) >> 1, __x);
  __p[0] = (void *)v6;
  __x[0] = 0;
  std::vector<int>::resize((std::vector<int> *)&__p[1], (v6 + v6 * v6) >> 1, __x);
  uint64_t v10 = a1[41];
  uint64_t v9 = a1[42];
  if (v9 != v10)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      if (v12 >= (v9 - v10) >> 5)
      {
        unint64_t v21 = (v9 - v10) >> 5;
      }
      else
      {
        uint64_t v33 = v11;
        unint64_t v13 = v12;
        do
        {
          uint64_t v14 = *(void *)(a2 + 24);
          if (!v14) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          double v15 = (*(double (**)(uint64_t, void, void))(*(void *)v14 + 48))(v14, *(void *)(v10 + 32 * v12), *(void *)(v10 + v11));
          *(void *)__x = v10 + 32 * v12 + 16;
          unint64_t v16 = *((void *)std::__tree<std::__value_type<boost::uuids::uuid,unsigned long>,std::__map_value_compare<boost::uuids::uuid,std::__value_type<boost::uuids::uuid,unsigned long>,std::less<boost::uuids::uuid>,true>,std::allocator<std::__value_type<boost::uuids::uuid,unsigned long>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>(&v35, *(unint64_t **)__x, (uint64_t)&std::piecewise_construct, (_OWORD **)__x)+ 6);
          *(void *)__x = v10 + v11 + 16;
          BOOL v17 = std::__tree<std::__value_type<boost::uuids::uuid,unsigned long>,std::__map_value_compare<boost::uuids::uuid,std::__value_type<boost::uuids::uuid,unsigned long>,std::less<boost::uuids::uuid>,true>,std::allocator<std::__value_type<boost::uuids::uuid,unsigned long>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>(&v35, *(unint64_t **)__x, (uint64_t)&std::piecewise_construct, (_OWORD **)__x);
          unint64_t v18 = *((void *)v17 + 6);
          if (v16 <= v18) {
            unint64_t v19 = *((void *)v17 + 6);
          }
          else {
            unint64_t v19 = v16;
          }
          if (v16 < v18) {
            unint64_t v18 = v16;
          }
          unint64_t v20 = v18 + ((v19 + v19 * v19) >> 1);
          *(double *)(*v8 + 8 * v20) = v15 + *(double *)(*v8 + 8 * v20);
          ++*((_DWORD *)__p[1] + v20);
          ++v13;
          uint64_t v10 = a1[41];
          uint64_t v9 = a1[42];
          v11 += 32;
        }
        while (v13 < (v9 - v10) >> 5);
        unint64_t v21 = (v9 - v10) >> 5;
        uint64_t v11 = v33;
      }
      ++v12;
      v11 += 32;
    }
    while (v12 < v21);
  }
  int v22 = __p[1];
  if (v6)
  {
    double v23 = 0;
    uint64_t v24 = *v8;
    do
    {
      uint64_t v25 = *v8;
      unint64_t v26 = (unint64_t)v23;
      do
      {
        if ((unint64_t)v23 <= v26) {
          unint64_t v27 = v26;
        }
        else {
          unint64_t v27 = (unint64_t)v23;
        }
        if ((unint64_t)v23 >= v26) {
          long long v28 = (char *)v26;
        }
        else {
          long long v28 = v23;
        }
        unint64_t v29 = &v28[(v27 + v27 * v27) >> 1];
        int v30 = v22[(void)v29];
        if (v30) {
          double v31 = *(double *)(v25 + 8 * (void)v29) / (double)v30;
        }
        else {
          double v31 = 0.0;
        }
        *(double *)(v24 + 8 * (void)v29) = v31;
        ++v26;
      }
      while (v26 < v6);
      ++v23;
    }
    while (v23 != (char *)v6);
    goto LABEL_33;
  }
  if (__p[1])
  {
LABEL_33:
    __int16 v41 = v22;
    operator delete(v22);
  }
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&v35, v36[0]);
  return std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v37);
}

void sub_2563501C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
}

double CLMicroLocationModel::representativeFPsRatio(CLMicroLocationModel *this)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = (void *)*((void *)this + 46);
  if (v2)
  {
    unint64_t v3 = 0;
    do
    {
      v3 += (uint64_t)(v2[5] - v2[4]) >> 4;
      uint64_t v2 = (void *)*v2;
    }
    while (v2);
    if (v3) {
      return (double)(unint64_t)((uint64_t)(*((void *)this + 42) - *((void *)this + 41)) >> 5) / (double)v3;
    }
  }
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_6);
  }
  uint64_t v5 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 68289282;
    v6[1] = 0;
    __int16 v7 = 2082;
    uint64_t v8 = "";
    __int16 v9 = 1026;
    BOOL isValid = CLMicroLocationModel::isValid(this);
    _os_log_impl(&dword_25631F000, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"representativeFPsRatio, called with empty model\", \"isValid\":%{public}hhd}", (uint8_t *)v6, 0x18u);
  }

  return 1.0;
}

void sub_256350364(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_OWORD *std::vector<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>::emplace_back<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = a1 + 2;
  unint64_t v5 = v6;
  __int16 v7 = (_OWORD *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = ((uint64_t)v7 - *a1) >> 5;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 59) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - *a1;
    if (v11 >> 4 > v10) {
      unint64_t v10 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = v4;
    if (v12) {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationResultInternal>>((uint64_t)v4, v12);
    }
    else {
      unint64_t v13 = 0;
    }
    uint64_t v14 = &v13[32 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[32 * v12];
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *((_OWORD *)v14 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = *(_OWORD *)(a2 + 16);
    _DWORD v16[2] = v14 + 32;
    std::vector<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>::__swap_out_circular_buffer(a1, v16);
    uint64_t v8 = (_OWORD *)a1[1];
    std::__split_buffer<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>::~__split_buffer(v16);
  }
  else
  {
    _OWORD *v7 = *(_OWORD *)a2;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    v7[1] = *(_OWORD *)(a2 + 16);
    uint64_t v8 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v8;
  return v8 - 2;
}

void sub_256350480(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::vector<boost::uuids::uuid>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::uuids::uuid>>(v3, a2);
    __int16 v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    uint64_t v9 = &v6[16 * v8];
    uint64_t v11 = (char *)*a1;
    unint64_t v10 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      unint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void std::vector<CLMicroLocationProto::ConfidenceLevel>::reserve(std::vector<int> *this, std::vector<int>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (__n > value - this->__begin_)
  {
    if (__n >> 62) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (char *)this->__end_ - (char *)this->__begin_;
    unint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationProto::ConfidenceReason>>((uint64_t)p_end_cap, __n);
    __int16 v7 = (int *)&v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v9 = (int *)&v6[4 * v8];
    std::vector<int>::pointer begin = this->__begin_;
    std::vector<std::string>::pointer end = this->__end_;
    unint64_t v12 = v7;
    if (end != this->__begin_)
    {
      unint64_t v12 = v7;
      do
      {
        int v13 = *--end;
        *--unint64_t v12 = v13;
      }
      while (end != begin);
    }
    this->__begin_ = v12;
    this->__end_ = v7;
    this->__end_cap_.__value_ = v9;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

void CLMicroLocationModel::SimilarityListData::calculateNormalizedProbabilitiesWithoutNullCluster(void *a1, uint64_t a2, CLMicroLocationFingerprintVector *a3, void *a4, void *a5)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  v28[0] = 0;
  char v29 = 0;
  CLMicroLocationProtobufHelper::ModelTypeToDomain(0, v26);
  CLMicroLocationLocalizationSettings::CLMicroLocationLocalizationSettings((uint64_t)v23, v26);
  v22[0] = CLMicroLocationFingerprintVector::begin(a3);
  v22[1] = v7;
  v21[0] = CLMicroLocationFingerprintVector::end(a3);
  v21[1] = v8;
  if (CLMicroLocationFingerprintVector::Iterator::operator!=(v22, v21))
  {
    uint64_t v9 = CLMicroLocationFingerprintVector::Iterator::operator*(v22);
    unint64_t v10 = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::find<boost::uuids::uuid>(a4, (void *)(v9 + 40));
    if (v10)
    {
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>>>::__equal_range_multi<boost::uuids::uuid>(a5, v10 + 4);
      CLMicroLocationLocalizer::localize((uint64_t)v28, a2);
    }
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  if ((CLMicroLocationUtils::ProbabilityMatrix::normalizeRows((CLMicroLocationUtils::ProbabilityMatrix *)(a1 + 6)) & 1) == 0)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_6);
    }
    uint64_t v11 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      *(void *)int v30 = 68289026;
      v31[0] = 2082;
      *(void *)&v31[1] = "";
      _os_log_impl(&dword_25631F000, v11, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Similarity List Model Learning, error normalizing probability matrix\"}", v30, 0x12u);
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_6);
    }
    unint64_t v12 = logObject_MicroLocation_Default;
    if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
    {
      *(void *)int v30 = 68289026;
      v31[0] = 2082;
      *(void *)&v31[1] = "";
      _os_signpost_emit_with_name_impl(&dword_25631F000, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Similarity List Model Learning, error normalizing probability matrix", "{\"msg%{public}.0s\":\"Similarity List Model Learning, error normalizing probability matrix\"}", v30, 0x12u);
    }
  }
  if (*(_OWORD *)*a1 == 0)
  {
    CLMicroLocationUtils::ProbabilityMatrix::removeFirstCols((uint64_t)(a1 + 6), 1u, v30);
    std::__optional_storage_base<CLMicroLocationUtils::ProbabilityMatrix,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<CLMicroLocationUtils::ProbabilityMatrix,false>>(a1 + 6, (uint64_t)v30);
    if (v32)
    {
      uint64_t v13 = *(void *)v30;
      *(void *)int v30 = 0;
      if (v13) {
        MEMORY[0x25A2A6320](v13, 0x1000C8000313F17);
      }
    }
    double v15 = (char *)*a1;
    uint64_t v14 = (unsigned char *)a1[1];
    unint64_t v16 = (unsigned char *)(*a1 + 16);
    int64_t v17 = v14 - v16;
    if (v14 != v16) {
      memmove((void *)*a1, v16, v14 - v16);
    }
    a1[1] = &v15[v17];
  }

  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)v23, v24);
  if (v27 < 0) {
    operator delete(v26[0]);
  }
  if (v29) {
    CLMicroLocationProto::AssociatedAccessPointInfo::~AssociatedAccessPointInfo((CLMicroLocationProto::AssociatedAccessPointInfo *)v28);
  }
}

void sub_256350DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,void *a29,uint64_t a30,void *a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  if (*(unsigned char *)(v43 - 168))
  {
    uint64_t v45 = *(void *)(v43 - 192);
    *(void *)(v43 - 192) = 0;
    if (v45) {
      MEMORY[0x25A2A6320](v45, 0x1000C8000313F17);
    }
  }

  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&a28, a29);
  if (a38 < 0) {
    operator delete(__p);
  }
  if (a43) {
    CLMicroLocationProto::AssociatedAccessPointInfo::~AssociatedAccessPointInfo((CLMicroLocationProto::AssociatedAccessPointInfo *)&a39);
  }
  _Unwind_Resume(a1);
}

void CLMicroLocationModel::SimilarityListData::appendNewEvents(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  v51[0] = 0;
  char v52 = 0;
  int v7 = ULSettings::get<ULSettings::SimilarityListMaxNumberOfItems>();
  CLMicroLocationProtobufHelper::ModelTypeToDomain(0, v49);
  CLMicroLocationLocalizationSettings::CLMicroLocationLocalizationSettings((uint64_t)v46, v49);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 6);
  if (v8 == (a4[1] - *a4) >> 4)
  {
    uint64_t v42 = a4;
    if (v7 >= (int)v8) {
      int v7 = -1431655765 * ((a3[1] - *a3) >> 6);
    }
    uint64_t v9 = 60;
    if (!*(unsigned char *)(a1 + 57)) {
      uint64_t v9 = 64;
    }
    CLMicroLocationUtils::ProbabilityMatrix::ProbabilityMatrix((CLMicroLocationUtils::ProbabilityMatrix *)&v45, v7, *(_DWORD *)(a1 + v9) + 1);
    if (v7) {
      CLMicroLocationLocalizer::localize((uint64_t)v51, a2);
    }
    if (!CLMicroLocationUtils::ProbabilityMatrix::normalizeRows((CLMicroLocationUtils::ProbabilityMatrix *)&v45))
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_6);
      }
      unint64_t v20 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
      {
        *(void *)unint64_t v56 = 68289026;
        v57[0] = 2082;
        *(void *)&v57[1] = "";
        _os_log_impl(&dword_25631F000, v20, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Similarity List appending new events, fail to normalize rows\"}", v56, 0x12u);
      }
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_6);
      }
      unint64_t v21 = logObject_MicroLocation_Default;
      if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
      {
        *(void *)unint64_t v56 = 68289026;
        v57[0] = 2082;
        *(void *)&v57[1] = "";
        _os_signpost_emit_with_name_impl(&dword_25631F000, v21, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Similarity List appending new events, fail to normalize rows", "{\"msg%{public}.0s\":\"Similarity List appending new events, fail to normalize rows\"}", v56, 0x12u);
      }
      goto LABEL_59;
    }
    CLMicroLocationUtils::ProbabilityMatrix::removeFirstCols((uint64_t)&v45, 1u, buf);
    if (v55)
    {
      if (*(unsigned char *)(a1 + 57))
      {
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_6);
        }
        unint64_t v10 = logObject_MicroLocation_Default;
        if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
        {
          *(void *)unint64_t v56 = 68289026;
          v57[0] = 2082;
          *(void *)&v57[1] = "";
          _os_log_impl(&dword_25631F000, v10, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Does not support appending new events to a transposed matrix!\"}", v56, 0x12u);
        }
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_6);
        }
        uint64_t v11 = logObject_MicroLocation_Default;
        if (!os_signpost_enabled((os_log_t)logObject_MicroLocation_Default)) {
          goto LABEL_56;
        }
        *(void *)unint64_t v56 = 68289026;
        v57[0] = 2082;
        *(void *)&v57[1] = "";
        unint64_t v12 = "Does not support appending new events to a transposed matrix!";
        uint64_t v13 = "{\"msg%{public}.0s\":\"Does not support appending new events to a transposed matrix!\"}";
      }
      else
      {
        signed int v23 = ULSettings::get<ULSettings::SimilarityListMaxNumberOfItems>();
        if (CLMicroLocationUtils::ProbabilityMatrix::appendRows((CLMicroLocationUtils::ProbabilityMatrix *)(a1 + 48), (const CLMicroLocationUtils::ProbabilityMatrix *)buf, v23))
        {
          memset(__p, 0, sizeof(__p));
          uint64_t v24 = *a3;
          uint64_t v25 = a3[1];
          *(void *)unint64_t v56 = __p;
          if (v24 == v25)
          {
            unint64_t v26 = 0;
          }
          else
          {
            do
            {
              int v53 = *(_DWORD *)(v24 + 160);
              std::back_insert_iterator<std::vector<CLMicroLocationProto::ConfidenceLevel>>::operator=[abi:ne180100]((uint64_t *)v56, &v53);
              v24 += 192;
            }
            while (v24 != v25);
            unint64_t v26 = __p[1];
          }
          uint64_t v30 = *(void *)(a1 + 24);
          uint64_t v31 = *(void *)(a1 + 32);
          std::vector<CLMicroLocationProto::ConfidenceLevel>::__insert_with_size[abi:ne180100]<std::__wrap_iter<CLMicroLocationProto::ConfidenceLevel*>,std::__wrap_iter<CLMicroLocationProto::ConfidenceLevel*>>((uint64_t)__p, (uint64_t)v26, *(char **)(a1 + 80), *(char **)(a1 + 88), (uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 2);
          char v32 = __p[0];
          long long v33 = *(_OWORD *)(a1 + 80);
          *(void **)(a1 + 80) = __p[0];
          uint64_t v34 = *(void **)(a1 + 96);
          long long v35 = *(_OWORD *)&__p[1];
          *(_OWORD *)std::string __p = v33;
          __p[2] = v34;
          *(_OWORD *)(a1 + CLMicroLocationSensorsLogic::stopOdometryMonitoringIfRunning(this + 88) = v35;
          if (v23 < (unint64_t)((uint64_t)(v35 - (void)v32) >> 2)) {
            std::vector<CLMicroLocationProto::ConfidenceLevel>::resize(a1 + 80, v23);
          }
          std::vector<boost::uuids::uuid>::__insert_with_size[abi:ne180100]<std::__wrap_iter<boost::uuids::uuid*>,std::__wrap_iter<boost::uuids::uuid*>>((uint64_t)v42, v42[1], *(char **)(a1 + 24), *(char **)(a1 + 32), (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 4);
          uint64_t v36 = *v42;
          *uint64_t v42 = *(void *)(a1 + 24);
          *(void *)(a1 + 24) = v36;
          uint64_t v37 = v42[1];
          v42[1] = *(void *)(a1 + 32);
          *(void *)(a1 + 32) = v37;
          uint64_t v38 = v42[2];
          v42[2] = *(void *)(a1 + 40);
          *(void *)(a1 + 40) = v38;
          if (v23 < (unint64_t)((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 4)) {
            std::vector<boost::uuids::uuid>::resize(a1 + 24, v23);
          }
          if (onceToken_MicroLocation_Default != -1) {
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_6);
          }
          uint64_t v39 = logObject_MicroLocation_Default;
          if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v40 = (v42[1] - *v42) >> 4;
            uint64_t v41 = (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 4;
            *(void *)unint64_t v56 = 68289794;
            v57[0] = 2082;
            *(void *)&v57[1] = "";
            __int16 v58 = 2050;
            unint64_t v59 = v40;
            __int16 v60 = 2050;
            uint64_t v61 = (v31 - v30) >> 4;
            __int16 v62 = 2050;
            uint64_t v63 = v41;
            _os_log_impl(&dword_25631F000, v39, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Similarity List appended new events\", \"Num new Labels\":%{public}lu, \"Old LSL length\":%{public}lu, \"New LSL length\":%{public}lu}", v56, 0x30u);
          }
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          goto LABEL_56;
        }
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_6);
        }
        char v27 = logObject_MicroLocation_Default;
        if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
        {
          *(void *)unint64_t v56 = 68289026;
          v57[0] = 2082;
          *(void *)&v57[1] = "";
          _os_log_impl(&dword_25631F000, v27, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Similarity List appending new events, fail to append rows\"}", v56, 0x12u);
        }
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_6);
        }
        uint64_t v11 = logObject_MicroLocation_Default;
        if (!os_signpost_enabled((os_log_t)logObject_MicroLocation_Default)) {
          goto LABEL_56;
        }
        *(void *)unint64_t v56 = 68289026;
        v57[0] = 2082;
        *(void *)&v57[1] = "";
        unint64_t v12 = "Similarity List appending new events, fail to append rows";
        uint64_t v13 = "{\"msg%{public}.0s\":\"Similarity List appending new events, fail to append rows\"}";
      }
    }
    else
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_6);
      }
      int v22 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
      {
        *(void *)unint64_t v56 = 68289026;
        v57[0] = 2082;
        *(void *)&v57[1] = "";
        _os_log_impl(&dword_25631F000, v22, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Similarity List appending new events, fail to remove nullspace column\"}", v56, 0x12u);
      }
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_6);
      }
      uint64_t v11 = logObject_MicroLocation_Default;
      if (!os_signpost_enabled((os_log_t)logObject_MicroLocation_Default)) {
        goto LABEL_56;
      }
      *(void *)unint64_t v56 = 68289026;
      v57[0] = 2082;
      *(void *)&v57[1] = "";
      unint64_t v12 = "Similarity List appending new events, fail to remove nullspace column";
      uint64_t v13 = "{\"msg%{public}.0s\":\"Similarity List appending new events, fail to remove nullspace column\"}";
    }
    _os_signpost_emit_with_name_impl(&dword_25631F000, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v12, v13, v56, 0x12u);
LABEL_56:
    if (v55)
    {
      uint64_t v28 = *(void *)buf;
      *(void *)uint64_t buf = 0;
      if (v28) {
        MEMORY[0x25A2A6320](v28, 0x1000C8000313F17);
      }
    }
LABEL_59:
    uint64_t v29 = v45;
    uint64_t v45 = 0;
    if (v29) {
      MEMORY[0x25A2A6320](v29, 0x1000C8000313F17);
    }
    goto LABEL_61;
  }
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_6);
  }
  uint64_t v14 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
  {
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 6);
    uint64_t v16 = (a4[1] - *a4) >> 4;
    *(void *)unint64_t v56 = 68289538;
    v57[0] = 2082;
    *(void *)&v57[1] = "";
    __int16 v58 = 2050;
    unint64_t v59 = v15;
    __int16 v60 = 2050;
    uint64_t v61 = v16;
    _os_log_impl(&dword_25631F000, v14, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"SimilarityListData, appendNewEvents, fingerprints size not equal labelUuids size!\", \"Num Fingerprints\":%{public}lu, \"Num Labels\":%{public}lu}", v56, 0x26u);
  }
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_6);
  }
  int64_t v17 = logObject_MicroLocation_Default;
  if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
  {
    unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 6);
    uint64_t v19 = (a4[1] - *a4) >> 4;
    *(void *)unint64_t v56 = 68289538;
    v57[0] = 2082;
    *(void *)&v57[1] = "";
    __int16 v58 = 2050;
    unint64_t v59 = v18;
    __int16 v60 = 2050;
    uint64_t v61 = v19;
    _os_signpost_emit_with_name_impl(&dword_25631F000, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SimilarityListData, appendNewEvents, fingerprints size not equal labelUuids size!", "{\"msg%{public}.0s\":\"SimilarityListData, appendNewEvents, fingerprints size not equal labelUuids size!\", \"Num Fingerprints\":%{public}lu, \"Num Labels\":%{public}lu}", v56, 0x26u);
  }
LABEL_61:

  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)v46, v47);
  if (v50 < 0) {
    operator delete(v49[0]);
  }
  if (v52) {
    CLMicroLocationProto::AssociatedAccessPointInfo::~AssociatedAccessPointInfo((CLMicroLocationProto::AssociatedAccessPointInfo *)v51);
  }
}

void sub_256351F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  if (__p) {
    operator delete(__p);
  }
  if (a41)
  {
    uint64_t v42 = a38;
    a38 = 0;
    if (v42) {
      MEMORY[0x25A2A6320](v42, 0x1000C8000313F17);
    }
  }
  if (a18) {
    MEMORY[0x25A2A6320](a18, 0x1000C8000313F17);
  }
  CLMicroLocationLocalizationSettings::~CLMicroLocationLocalizationSettings(&a21);
  if (a31 < 0) {
    operator delete(a26);
  }
  if (a36) {
    CLMicroLocationProto::AssociatedAccessPointInfo::~AssociatedAccessPointInfo((CLMicroLocationProto::AssociatedAccessPointInfo *)&a32);
  }
  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::SimilarityListMaxNumberOfItems>()
{
  os_log_t v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  uint64_t v2 = [NSString stringWithUTF8String:"ULSimilarityListMaxNumberOfItems"];
  uint64_t v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 intValue];
  }
  else {
    uint64_t v4 = [&unk_2704F1320 intValue];
  }
  uint64_t v5 = v4;

  return v5;
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  os_log_t v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  uint64_t v2 = [NSString stringWithUTF8String:"ULSimilarityListMaxNumberOfItems"];
  uint64_t v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 intValue];
  }
  else {
    uint64_t v4 = [&unk_2704F1A28 intValue];
  }
  uint64_t v5 = v4;

  return v5;
}

void sub_25635210C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<CLMicroLocationProto::ConfidenceLevel>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    std::vector<CLMicroLocationProto::ConfidenceLevel>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<boost::uuids::uuid>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    std::vector<boost::uuids::uuid>::__append((void **)a1, a2 - v2);
  }
}

uint64_t std::__optional_destruct_base<CLMicroLocationModel::BlueAtlasData,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 88))
  {
    unint64_t v2 = *(void **)(a1 + 24);
    if (v2)
    {
      *(void *)(a1 + 32) = v2;
      operator delete(v2);
    }
    uint64_t v3 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v3;
      operator delete(v3);
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<CLMicroLocationModel::SimilarityListData,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 120))
  {
    unint64_t v2 = *(void **)(a1 + 80);
    if (v2)
    {
      *(void *)(a1 + CLMicroLocationSensorsLogic::stopOdometryMonitoringIfRunning(this + 88) = v2;
      operator delete(v2);
    }
    if (*(unsigned char *)(a1 + 72))
    {
      uint64_t v3 = *(void *)(a1 + 48);
      *(void *)(a1 + 48) = 0;
      if (v3) {
        MEMORY[0x25A2A6320](v3, 0x1000C8000313F17);
      }
    }
    uint64_t v4 = *(void **)(a1 + 24);
    if (v4)
    {
      *(void *)(a1 + 32) = v4;
      operator delete(v4);
    }
    uint64_t v5 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v5;
      operator delete(v5);
    }
  }
  return a1;
}

void wireless_diagnostics::google::protobuf::internal::GenericTypeHandler<CLMicroLocationProto::Fingerprint>::New()
{
}

void sub_2563522B8(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x10A1C40FC75E0FCLL);
  _Unwind_Resume(a1);
}

void wireless_diagnostics::google::protobuf::internal::GenericTypeHandler<CLMicroLocationProto::ClusterRecordings>::New()
{
}

void sub_25635231C(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x10A1C40F1948F29);
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_2()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

uint64_t wireless_diagnostics::google::protobuf::RepeatedField<int>::Reserve(uint64_t result, int a2)
{
  int v2 = *(_DWORD *)(result + 12);
  if (v2 < a2)
  {
    int v3 = 2 * v2;
    if (v3 <= a2) {
      int v3 = a2;
    }
    if (v3 <= 4) {
      int v3 = 4;
    }
    *(_DWORD *)(result + 12) = v3;
    operator new[]();
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,void *> *>>(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_9;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  unint64_t v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      *((_OWORD *)v8 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = *((_OWORD *)a2 + 1);
      long long v9 = *((_OWORD *)a2 + 2);
      *((_DWORD *)v8 + 12) = *((_DWORD *)a2 + 12);
      *((_OWORD *)v8 + 2) = v9;
      unint64_t v10 = (uint64_t *)*v8;
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__node_insert_multi(a1, v8);
      a2 = (uint64_t *)*a2;
      unint64_t v8 = v10;
      if (!v10) {
        goto LABEL_9;
      }
    }
    do
    {
      uint64_t v11 = (uint64_t *)*v8;
      operator delete(v8);
      unint64_t v8 = v11;
    }
    while (v11);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__emplace_multi<std::pair<boost::uuids::uuid const,CLMicroLocationAnchorAppearance> const&>(a1, (uint64_t)(a2 + 2));
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_256352504(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    int v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_256352524(_Unwind_Exception *a1)
{
}

void *std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__node_insert_multi(void *a1, void *a2)
{
  unint64_t v4 = 0;
  for (uint64_t i = 16; i != 32; ++i)
    v4 ^= (v4 << 6) + (v4 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + i);
  a2[1] = v4;
  inserted = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__node_insert_multi_prepare((uint64_t)a1, v4, a2 + 2);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__node_insert_multi_perform(a1, a2, inserted);
  return a2;
}

void *std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    uint64_t v9 = 2 * v6;
    BOOL v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    size_t v11 = v10 | v9;
    unint64_t v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v11;
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<false>(a1, v13);
    unint64_t v6 = *(void *)(a1 + 8);
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v15 = a2;
    if (v6 <= a2) {
      unint64_t v15 = a2 % v6;
    }
  }
  else
  {
    unint64_t v15 = (v6 - 1) & a2;
  }
  uint64_t v16 = *(void **)(*(void *)a1 + 8 * v15);
  if (!v16) {
    return 0;
  }
  int v17 = 0;
  do
  {
    uint64_t result = v16;
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      break;
    }
    unint64_t v19 = v16[1];
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v20 = v16[1];
      if (v19 >= v6) {
        unint64_t v20 = v19 % v6;
      }
    }
    else
    {
      unint64_t v20 = v19 & (v6 - 1);
    }
    if (v20 != v15) {
      break;
    }
    if (v19 == a2)
    {
      BOOL v21 = v16[2] == *a3 && v16[3] == a3[1];
      BOOL v22 = v21;
    }
    else
    {
      BOOL v22 = 0;
    }
    int v23 = v17 & !v22;
    v17 |= v22;
  }
  while (v23 != 1);
  return result;
}

void *std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__node_insert_multi_perform(void *result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(void *)(*result + 8 * v4) = result + 2;
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
LABEL_18:
    *(void *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
    if (v6 != v4) {
      goto LABEL_18;
    }
  }
LABEL_19:
  ++result[3];
  return result;
}

void std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<false>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__do_rehash<false>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      for (uint64_t i = (void *)*v7; *v7; uint64_t i = (void *)*v7)
      {
        unint64_t v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2) {
            v12 %= a2;
          }
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          uint64_t v7 = i;
        }
        else
        {
          size_t v13 = i;
          if (*(void *)(*(void *)a1 + 8 * v12))
          {
            do
            {
              uint8x8_t v14 = v13;
              size_t v13 = (void *)*v13;
              if (!v13) {
                break;
              }
            }
            while (i[2] == v13[2] && i[3] == v13[3]);
            void *v7 = v13;
            *uint8x8_t v14 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = i;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v12) = v7;
            uint64_t v7 = i;
            unint64_t v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    BOOL v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void *std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__emplace_multi<std::pair<boost::uuids::uuid const,CLMicroLocationAnchorAppearance> const&>(void *a1, uint64_t a2)
{
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__construct_node<std::pair<boost::uuids::uuid const,CLMicroLocationAnchorAppearance> const&>((uint64_t)a1, a2, (uint64_t)&v4);
  return std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__node_insert_multi(a1, v4);
}

void sub_256352A9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__construct_node<std::pair<boost::uuids::uuid const,CLMicroLocationAnchorAppearance> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  uint64_t result = operator new(0x38uLL);
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 1;
  *(void *)uint64_t result = 0;
  long long v9 = *(_OWORD *)(a2 + 16);
  result[1] = *(_OWORD *)a2;
  result[2] = v9;
  *((void *)result + 6) = *(void *)(a2 + 32);
  do
    v8 ^= (v8 << 6) + (v8 >> 2) + 2654435769u + *((unsigned __int8 *)result + v7++ + 16);
  while (v7 != 16);
  *((void *)result + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v8;
  return result;
}

uint64_t std::unordered_map<boost::uuids::uuid,CLMicroLocationAnchorAppearance>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__emplace_unique_key_args<boost::uuids::uuid,std::pair<boost::uuids::uuid const,CLMicroLocationAnchorAppearance> const&>(a1, i + 2, (uint64_t)(i + 2));
  return a1;
}

void sub_256352BAC(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__do_rehash<true>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      size_t v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            void *v7 = *v11;
            *size_t v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            size_t v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          size_t v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    BOOL v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void *std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__emplace_unique_key_args<boost::uuids::uuid,std::pair<boost::uuids::uuid const,CLMicroLocationAnchorAppearance> const&>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  do
    v7 ^= (v7 << 6) + (v7 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v6++);
  while (v6 != 16);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
    BOOL v10 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v10)
    {
      size_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == *a2 && v11[3] == a2[1]) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v3) {
              break;
            }
          }
          size_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  size_t v11 = operator new(0x38uLL);
  *size_t v11 = 0;
  v11[1] = v7;
  long long v14 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v11 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = *(_OWORD *)a3;
  *((_OWORD *)v11 + 2) = v14;
  v11[6] = *(void *)(a3 + 32);
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
  }
  uint64_t v21 = *(void *)a1;
  BOOL v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *size_t v11 = *v22;
LABEL_44:
    *BOOL v22 = v11;
    goto LABEL_45;
  }
  *size_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v21 + 8 * v3) = a1 + 16;
  if (*v11)
  {
    unint64_t v23 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8) {
        v23 %= v8;
      }
    }
    else
    {
      v23 &= v8 - 1;
    }
    BOOL v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_256353058(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__optional_storage_base<CLMicroLocationUtils::ProbabilityMatrix,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<CLMicroLocationUtils::ProbabilityMatrix,false>>(uint64_t *result, uint64_t a2)
{
  int v2 = result;
  if (*((unsigned __int8 *)result + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (*((unsigned char *)result + 24))
    {
      return CLMicroLocationUtils::ProbabilityMatrix::operator=(result, (uint64_t *)a2);
    }
  }
  else if (*((unsigned char *)result + 24))
  {
    uint64_t result = (uint64_t *)*result;
    *int v2 = 0;
    if (result) {
      uint64_t result = (uint64_t *)MEMORY[0x25A2A6320](result, 0x1000C8000313F17);
    }
    *((unsigned char *)v2 + 24) = 0;
  }
  else
  {
    uint64_t result = (uint64_t *)CLMicroLocationUtils::ProbabilityMatrix::ProbabilityMatrix(result);
    *((unsigned char *)v2 + 24) = 1;
  }
  return result;
}

void wireless_diagnostics::google::protobuf::internal::GenericTypeHandler<CLMicroLocationProto::LocationSimilarityListElement>::New()
{
}

void sub_25635313C(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x10A1C407F42033CLL);
  _Unwind_Resume(a1);
}

uint64_t wireless_diagnostics::google::protobuf::RepeatedField<double>::Reserve(uint64_t result, int a2)
{
  int v2 = *(_DWORD *)(result + 12);
  if (v2 < a2)
  {
    int v3 = 2 * v2;
    if (v3 <= a2) {
      int v3 = a2;
    }
    if (v3 <= 4) {
      int v3 = 4;
    }
    *(_DWORD *)(result + 12) = v3;
    operator new[]();
  }
  return result;
}

void std::vector<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  int v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>::__clear[abi:ne180100]((uint64_t *)v2);
    int v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32)
  {
    int8x8_t v4 = *(std::__shared_weak_count **)(i - 24);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  a1[1] = v2;
}

uint64_t std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      int v3 = (void *)*v2;
      int8x8_t v4 = (void *)v2[4];
      if (v4)
      {
        v2[5] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__construct_at[abi:ne180100]<CLMicroLocationModel::SimilarityListData,CLMicroLocationModel::SimilarityListData,CLMicroLocationModel::SimilarityListData*>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  std::__optional_move_base<CLMicroLocationUtils::ProbabilityMatrix,false>::__optional_move_base[abi:ne180100]((unsigned char *)(a1 + 48), a2 + 48);
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + CLMicroLocationSensorsLogic::stopOdometryMonitoringIfRunning(this + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + CLMicroLocationSensorsLogic::stopOdometryMonitoringIfRunning(this + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  return a1;
}

void sub_2563533DC(_Unwind_Exception *exception_object)
{
  int8x8_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  unint64_t v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *std::__optional_move_base<CLMicroLocationUtils::ProbabilityMatrix,false>::__optional_move_base[abi:ne180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[24] = 0;
  if (*(unsigned char *)(a2 + 24))
  {
    CLMicroLocationUtils::ProbabilityMatrix::ProbabilityMatrix(a1);
    a1[24] = 1;
  }
  return a1;
}

void sub_25635344C(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24)) {
    std::__optional_move_base<CLMicroLocationUtils::ProbabilityMatrix,false>::__optional_move_base[abi:ne180100]((uint64_t *)v1);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<boost::uuids::uuid>::__init_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<boost::uuids::uuid,void *> *>,std::__hash_const_iterator<std::__hash_node<boost::uuids::uuid,void *> *>>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<boost::uuids::uuid>::__vallocate[abi:ne180100](result, a4);
    unint64_t v7 = (_OWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      *v7++ = *((_OWORD *)a2 + 1);
      a2 = (uint64_t *)*a2;
    }
    *((void *)v6 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v7;
  }
  return result;
}

void sub_2563534C4(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<boost::uuids::uuid>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::uuids::uuid>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<boost::uuids::uuid>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

char *std::vector<boost::uuids::uuid>::__assign_with_size[abi:ne180100]<boost::uuids::uuid*,boost::uuids::uuid*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint8x8_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 4)
  {
    if (v9)
    {
      *((void *)result + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 60) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<boost::uuids::uuid>::__vallocate[abi:ne180100](v7, v11);
    size_t v13 = (char *)v7[1];
    unint64_t v12 = (void **)(v7 + 1);
    uint8x8_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      unint64_t v18 = v9;
      unint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  unint64_t v12 = (void **)(result + 8);
  long long v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 4;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  float v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint8x8_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    unint64_t v18 = v9;
    unint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *unint64_t v12 = &v9[v17];
  return result;
}

unsigned char *std::__optional_storage_base<CLMicroLocationUtils::ProbabilityMatrix,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<CLMicroLocationUtils::ProbabilityMatrix,false> const&>(unsigned char *this, unsigned __int8 *a2)
{
  uint64_t v2 = this;
  if (this[24] == a2[24])
  {
    if (this[24])
    {
      return (unsigned char *)CLMicroLocationUtils::ProbabilityMatrix::operator=((uint64_t)this, (uint64_t)a2);
    }
  }
  else if (this[24])
  {
    this = *(unsigned char **)this;
    *(void *)uint64_t v2 = 0;
    if (this) {
      this = (unsigned char *)MEMORY[0x25A2A6320](this, 0x1000C8000313F17);
    }
    v2[24] = 0;
  }
  else
  {
    this = (unsigned char *)CLMicroLocationUtils::ProbabilityMatrix::ProbabilityMatrix((CLMicroLocationUtils::ProbabilityMatrix *)this, (const CLMicroLocationUtils::ProbabilityMatrix *)a2);
    v2[24] = 1;
  }
  return this;
}

char *std::vector<CLMicroLocationProto::ConfidenceLevel>::__assign_with_size[abi:ne180100]<CLMicroLocationProto::ConfidenceLevel*,CLMicroLocationProto::ConfidenceLevel*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint8x8_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<CLMicroLocationProto::ConfidenceLevel>::__vallocate[abi:ne180100](v7, v11);
    size_t v13 = (char *)v7[1];
    unint64_t v12 = (void **)(v7 + 1);
    uint8x8_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      unint64_t v18 = v9;
      unint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  unint64_t v12 = (void **)(result + 8);
  long long v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  float v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint8x8_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    unint64_t v18 = v9;
    unint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *unint64_t v12 = &v9[v17];
  return result;
}

char *std::vector<CLMicroLocationProto::ConfidenceLevel>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationProto::ConfidenceReason>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

CLMicroLocationModel::SimilarityListData *CLMicroLocationModel::SimilarityListData::SimilarityListData(CLMicroLocationModel::SimilarityListData *this, const CLMicroLocationModel::SimilarityListData *a2)
{
  *(void *)this = 0;
  *((void *)this + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0;
  *((void *)this + 2) = 0;
  std::vector<boost::uuids::uuid>::__init_with_size[abi:ne180100]<boost::uuids::uuid*,boost::uuids::uuid*>(this, *(const void **)a2, *((void *)a2 + 1), (uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 4);
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  std::vector<boost::uuids::uuid>::__init_with_size[abi:ne180100]<boost::uuids::uuid*,boost::uuids::uuid*>((void *)this + 3, *((const void **)a2 + 3), *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 4);
  std::__optional_copy_base<CLMicroLocationUtils::ProbabilityMatrix,false>::__optional_copy_base[abi:ne180100]((CLMicroLocationModel::SimilarityListData *)((char *)this + 48), (const CLMicroLocationModel::SimilarityListData *)((char *)a2 + 48));
  *((void *)this + 10) = 0;
  *((void *)this + 1CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0;
  *((void *)this + 12) = 0;
  std::vector<CLMicroLocationProto::ConfidenceLevel>::__init_with_size[abi:ne180100]<CLMicroLocationProto::ConfidenceLevel*,CLMicroLocationProto::ConfidenceLevel*>((void *)this + 10, *((const void **)a2 + 10), *((void *)a2 + 11), (uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 2);
  *(_OWORD *)((char *)this + 104) = *(_OWORD *)((char *)a2 + 104);
  return this;
}

void sub_2563538E8(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 72))
  {
    uint64_t v5 = *v3;
    *int v3 = 0;
    if (v5) {
      MEMORY[0x25A2A6320](v5, 0x1000C8000313F17);
    }
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v6;
    operator delete(v6);
  }
  unint64_t v7 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(exception_object);
}

CLMicroLocationUtils::ProbabilityMatrix *std::__optional_copy_base<CLMicroLocationUtils::ProbabilityMatrix,false>::__optional_copy_base[abi:ne180100](CLMicroLocationUtils::ProbabilityMatrix *this, const CLMicroLocationUtils::ProbabilityMatrix *a2)
{
  *(unsigned char *)this = 0;
  *((unsigned char *)this + 24) = 0;
  if (*((unsigned char *)a2 + 24))
  {
    CLMicroLocationUtils::ProbabilityMatrix::ProbabilityMatrix(this, a2);
    *((unsigned char *)this + 24) = 1;
  }
  return this;
}

void sub_256353990(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24)) {
    std::__optional_move_base<CLMicroLocationUtils::ProbabilityMatrix,false>::__optional_move_base[abi:ne180100]((uint64_t *)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<CLMicroLocationProto::ConfidenceLevel>::__init_with_size[abi:ne180100]<CLMicroLocationProto::ConfidenceLevel*,CLMicroLocationProto::ConfidenceLevel*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<CLMicroLocationProto::ConfidenceLevel>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_256353A0C(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<boost::uuids::uuid,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,std::allocator<boost::uuids::uuid>>::__emplace_unique_key_args<boost::uuids::uuid,boost::uuids::uuid const&>(uint64_t a1, void *a2, _OWORD *a3)
{
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  do
    v7 ^= (v7 << 6) + (v7 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v6++);
  while (v6 != 16);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == *a2 && i[3] == a2[1]) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v7;
  *((_OWORD *)i + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *uint64_t i = *v21;
LABEL_44:
    void *v21 = i;
    goto LABEL_45;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_256353C68(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ***std::back_insert_iterator<std::vector<boost::uuids::uuid>>::operator=[abi:ne180100](void ***a1, _OWORD *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = *a1;
  unint64_t v9 = (unint64_t)v6[2];
  uint64_t v7 = (uint64_t)(v6 + 2);
  unint64_t v8 = v9;
  if ((unint64_t)v5 >= v9)
  {
    uint64_t v11 = ((char *)v5 - (unsigned char *)*v4) >> 4;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = v8 - (void)*v4;
    if (v13 >> 3 > v12) {
      unint64_t v12 = v13 >> 3;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14) {
      float v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::uuids::uuid>>(v7, v14);
    }
    else {
      float v15 = 0;
    }
    BOOL v16 = &v15[16 * v11];
    unint64_t v17 = &v15[16 * v14];
    *(_OWORD *)BOOL v16 = *a2;
    uint64_t v10 = v16 + 16;
    size_t v19 = (char *)*v4;
    unint64_t v18 = (char *)v4[1];
    if (v18 != *v4)
    {
      do
      {
        *((_OWORD *)v16 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = *((_OWORD *)v18 - 1);
        v16 -= 16;
        v18 -= 16;
      }
      while (v18 != v19);
      unint64_t v18 = (char *)*v4;
    }
    void *v4 = v16;
    v4[1] = v10;
    v4[2] = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    _OWORD *v5 = *a2;
    uint64_t v10 = v5 + 1;
  }
  v4[1] = v10;
  return a1;
}

void *std::vector<boost::uuids::uuid>::__init_with_size[abi:ne180100]<boost::uuids::uuid*,boost::uuids::uuid*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<boost::uuids::uuid>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_256353DD8(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::find<boost::uuids::uuid>(void *a1, void *a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = 0;
  do
    v3 ^= (v3 << 6) + (v3 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v2++);
  while (v2 != 16);
  int8x8_t v4 = (int8x8_t)a1[1];
  if (!*(void *)&v4) {
    return 0;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = v3;
    if (v3 >= *(void *)&v4) {
      unint64_t v6 = v3 % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & v3;
  }
  uint64_t v7 = *(void **)(*a1 + 8 * v6);
  if (!v7) {
    return 0;
  }
  uint64_t result = (void *)*v7;
  if (*v7)
  {
    do
    {
      unint64_t v9 = result[1];
      if (v3 == v9)
      {
        if (result[2] == *a2 && result[3] == a2[1]) {
          return result;
        }
      }
      else
      {
        if (v5.u32[0] > 1uLL)
        {
          if (v9 >= *(void *)&v4) {
            v9 %= *(void *)&v4;
          }
        }
        else
        {
          v9 &= *(void *)&v4 - 1;
        }
        if (v9 != v6) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

{
  uint64_t v2;
  unint64_t v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  void *v7;
  void *result;
  unint64_t v9;

  uint64_t v2 = 0;
  unint64_t v3 = 0;
  do
    v3 ^= (v3 << 6) + (v3 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v2++);
  while (v2 != 16);
  int8x8_t v4 = (int8x8_t)a1[1];
  if (!*(void *)&v4) {
    return 0;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = v3;
    if (v3 >= *(void *)&v4) {
      unint64_t v6 = v3 % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & v3;
  }
  uint64_t v7 = *(void **)(*a1 + 8 * v6);
  if (!v7) {
    return 0;
  }
  uint64_t result = (void *)*v7;
  if (*v7)
  {
    do
    {
      unint64_t v9 = result[1];
      if (v9 == v3)
      {
        if (result[2] == *a2 && result[3] == a2[1]) {
          return result;
        }
      }
      else
      {
        if (v5.u32[0] > 1uLL)
        {
          if (v9 >= *(void *)&v4) {
            v9 %= *(void *)&v4;
          }
        }
        else
        {
          v9 &= *(void *)&v4 - 1;
        }
        if (v9 != v6) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::__emplace_unique_key_args<boost::uuids::uuid,boost::uuids::uuid const&,std::vector<boost::uuids::uuid>>(uint64_t a1, void *a2, _OWORD *a3, long long *a4)
{
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  do
    v9 ^= (v9 << 6) + (v9 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v8++);
  while (v8 != 16);
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
    unint64_t v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      uint64_t v13 = *v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == *a2 && v13[3] == a2[1]) {
              return v13;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10) {
                v14 %= v10;
              }
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4) {
              break;
            }
          }
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  BOOL v16 = (void *)(a1 + 16);
  uint64_t v13 = operator new(0x38uLL);
  *uint64_t v13 = 0;
  v13[1] = v9;
  long long v17 = *a4;
  *((_OWORD *)v13 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = *a3;
  *((_OWORD *)v13 + 2) = v17;
  v13[6] = *((void *)a4 + 2);
  *(void *)a4 = 0;
  *((void *)a4 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0;
  *((void *)a4 + 2) = 0;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    BOOL v20 = 1;
    if (v10 >= 3) {
      BOOL v20 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v10);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v23);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v24 = *(void *)a1;
  uint64_t v25 = *(void **)(*(void *)a1 + 8 * v4);
  if (v25)
  {
    *uint64_t v13 = *v25;
LABEL_44:
    *uint64_t v25 = v13;
    goto LABEL_45;
  }
  *uint64_t v13 = *v16;
  *BOOL v16 = v13;
  *(void *)(v24 + 8 * v4) = v16;
  if (*v13)
  {
    unint64_t v26 = *(void *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v26 >= v10) {
        v26 %= v10;
      }
    }
    else
    {
      v26 &= v10 - 1;
    }
    uint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_256354248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    unint64_t v3 = (void *)__p[4];
    if (v3)
    {
      __p[5] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t *std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::__erase_unique<boost::uuids::uuid>(void *a1, void *a2)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::find<boost::uuids::uuid>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::remove(a1, a2, (uint64_t)&__p);
  unint64_t v3 = __p;
  std::string __p = 0;
  if (v3) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,void *>>>::operator()[abi:ne180100]((uint64_t)&v6, v3);
  }
  return v2;
}

void *std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::remove@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  uint64_t v6 = *(void **)(*result + 8 * v4);
  do
  {
    uint64_t v7 = v6;
    uint64_t v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v1CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v7;
      uint64_t v10 = *a2;
    }
  }
  void *v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void *std::__hash_table<std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>>>::__emplace_unique_key_args<boost::uuids::uuid,std::pair<boost::uuids::uuid const,boost::uuids::uuid>>(uint64_t a1, void *a2, _OWORD *a3)
{
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  do
    v7 ^= (v7 << 6) + (v7 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v6++);
  while (v6 != 16);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v10)
    {
      unint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == *a2 && v11[3] == a2[1]) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v3) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  unint64_t v11 = operator new(0x30uLL);
  *unint64_t v11 = 0;
  v11[1] = v7;
  long long v14 = a3[1];
  *((_OWORD *)v11 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = *a3;
  *((_OWORD *)v11 + 2) = v14;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
  }
  uint64_t v21 = *(void *)a1;
  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *unint64_t v11 = *v22;
LABEL_44:
    *unint64_t v22 = v11;
    goto LABEL_45;
  }
  *unint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v21 + 8 * v3) = a1 + 16;
  if (*v11)
  {
    unint64_t v23 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8) {
        v23 %= v8;
      }
    }
    else
    {
      v23 &= v8 - 1;
    }
    unint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_2563546BC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<boost::uuids::uuid,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,std::allocator<boost::uuids::uuid>>::clear(void *result)
{
  if (result[3])
  {
    uint64_t v1 = result;
    uint64_t result = (void *)result[2];
    if (result)
    {
      do
      {
        uint64_t v2 = (void *)*result;
        operator delete(result);
        uint64_t result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    uint64_t v3 = v1[1];
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

void *std::__function::__value_func<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x25A2A6340);
}

char *std::__tree<std::__value_type<double,std::pair<boost::uuids::uuid const,boost::uuids::uuid>>,std::__map_value_compare<double,std::__value_type<double,std::pair<boost::uuids::uuid const,boost::uuids::uuid>>,std::less<double>,true>,std::allocator<std::__value_type<double,std::pair<boost::uuids::uuid const,boost::uuids::uuid>>>>::__emplace_multi<double &,std::pair<boost::uuids::uuid const,boost::uuids::uuid>>(uint64_t **a1, double *a2, _OWORD *a3)
{
  uint64_t v6 = (char *)operator new(0x48uLL);
  double v7 = *a2;
  *((double *)v6 + 4) = *a2;
  long long v8 = a3[1];
  *(_OWORD *)(v6 + 40) = *a3;
  *(_OWORD *)(v6 + 56) = v8;
  uint8x8_t v9 = a1 + 1;
  uint64_t v10 = a1[1];
  if (v10)
  {
    do
    {
      while (1)
      {
        uint8x8_t v9 = (uint64_t **)v10;
        if (v7 >= *((double *)v10 + 4)) {
          break;
        }
        uint64_t v10 = (uint64_t *)*v10;
        unint64_t v11 = v9;
        if (!*v9) {
          goto LABEL_8;
        }
      }
      uint64_t v10 = (uint64_t *)v10[1];
    }
    while (v10);
    unint64_t v11 = v9 + 1;
  }
  else
  {
    unint64_t v11 = a1 + 1;
  }
LABEL_8:
  std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__insert_node_at(a1, (uint64_t)v9, v11, (uint64_t *)v6);
  return v6;
}

void *std::__hash_table<std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>>>::__emplace_unique_key_args<boost::uuids::uuid,std::pair<boost::uuids::uuid const,boost::uuids::uuid> const&>(uint64_t a1, void *a2, _OWORD *a3)
{
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  do
    v7 ^= (v7 << 6) + (v7 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v6++);
  while (v6 != 16);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v10)
    {
      unint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == *a2 && v11[3] == a2[1]) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v3) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  unint64_t v11 = operator new(0x30uLL);
  *unint64_t v11 = 0;
  v11[1] = v7;
  long long v14 = a3[1];
  *((_OWORD *)v11 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = *a3;
  *((_OWORD *)v11 + 2) = v14;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
  }
  uint64_t v21 = *(void *)a1;
  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *unint64_t v11 = *v22;
LABEL_44:
    *unint64_t v22 = v11;
    goto LABEL_45;
  }
  *unint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v21 + 8 * v3) = a1 + 16;
  if (*v11)
  {
    unint64_t v23 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8) {
        v23 %= v8;
      }
    }
    else
    {
      v23 &= v8 - 1;
    }
    unint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_256354B24(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::insert_iterator<std::multimap<double,std::pair<boost::uuids::uuid const,boost::uuids::uuid>>>::operator=[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v3 = std::__tree<std::__value_type<double,std::pair<boost::uuids::uuid const,boost::uuids::uuid>>,std::__map_value_compare<double,std::__value_type<double,std::pair<boost::uuids::uuid const,boost::uuids::uuid>>,std::less<double>,true>,std::allocator<std::__value_type<double,std::pair<boost::uuids::uuid const,boost::uuids::uuid>>>>::__emplace_hint_multi<std::pair<double const,std::pair<boost::uuids::uuid const,boost::uuids::uuid>> const&>(*(uint64_t ***)a1, *(double **)(a1 + 8), a2);
  *(void *)(a1 + 8) = v3;
  unint64_t v4 = (void *)v3[1];
  if (v4)
  {
    do
    {
      uint8x8_t v5 = v4;
      unint64_t v4 = (void *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      uint8x8_t v5 = (void *)v3[2];
      BOOL v6 = *v5 == (void)v3;
      unint64_t v3 = v5;
    }
    while (!v6);
  }
  *(void *)(a1 + 8) = v5;
  return a1;
}

void *std::__tree<std::__value_type<double,std::pair<boost::uuids::uuid const,boost::uuids::uuid>>,std::__map_value_compare<double,std::__value_type<double,std::pair<boost::uuids::uuid const,boost::uuids::uuid>>,std::less<double>,true>,std::allocator<std::__value_type<double,std::pair<boost::uuids::uuid const,boost::uuids::uuid>>>>::__emplace_hint_multi<std::pair<double const,std::pair<boost::uuids::uuid const,boost::uuids::uuid>> const&>(uint64_t **a1, double *a2, uint64_t a3)
{
  BOOL v6 = operator new(0x48uLL);
  long long v7 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v6 + 2) = *(_OWORD *)a3;
  *((_OWORD *)v6 + 3) = v7;
  *((void *)v6 + 8) = *(void *)(a3 + 32);
  leaf = std::__tree<std::__value_type<double,std::pair<boost::uuids::uuid const,boost::uuids::uuid>>,std::__map_value_compare<double,std::__value_type<double,std::pair<boost::uuids::uuid const,boost::uuids::uuid>>,std::less<double>,true>,std::allocator<std::__value_type<double,std::pair<boost::uuids::uuid const,boost::uuids::uuid>>>>::__find_leaf(a1, a2, &v10, (double *)v6 + 4);
  std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__insert_node_at(a1, (uint64_t)v10, (uint64_t **)leaf, (uint64_t *)v6);
  return v6;
}

void sub_256354C20(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

double *std::__tree<std::__value_type<double,std::pair<boost::uuids::uuid const,boost::uuids::uuid>>,std::__map_value_compare<double,std::__value_type<double,std::pair<boost::uuids::uuid const,boost::uuids::uuid>>,std::less<double>,true>,std::allocator<std::__value_type<double,std::pair<boost::uuids::uuid const,boost::uuids::uuid>>>>::__find_leaf(void *a1, double *a2, double **a3, double *a4)
{
  unint64_t v4 = (double *)(a1 + 1);
  if (a1 + 1 != (void *)a2 && a2[4] < *a4)
  {
    while (1)
    {
      uint64_t v5 = *(void *)v4;
      a2 = v4;
      if (!*(void *)v4) {
        break;
      }
      while (1)
      {
        unint64_t v4 = (double *)v5;
        if (*(double *)(v5 + 32) >= *a4) {
          break;
        }
        uint64_t v5 = *(void *)(v5 + 8);
        if (!v5) {
          goto LABEL_19;
        }
      }
    }
LABEL_20:
    *a3 = v4;
    return a2;
  }
  double v6 = *a2;
  if ((double *)*a1 == a2)
  {
    unint64_t v8 = a2;
  }
  else
  {
    if (v6 == 0.0)
    {
      uint8x8_t v9 = a2;
      do
      {
        unint64_t v8 = (double *)*((void *)v9 + 2);
        BOOL v10 = *(void *)v8 == (void)v9;
        uint8x8_t v9 = v8;
      }
      while (v10);
    }
    else
    {
      double v7 = *a2;
      do
      {
        unint64_t v8 = *(double **)&v7;
        double v7 = *(double *)(*(void *)&v7 + 8);
      }
      while (v7 != 0.0);
    }
    if (*a4 < v8[4])
    {
      while (1)
      {
        uint64_t v11 = *(void *)v4;
        a2 = v4;
        if (!*(void *)v4) {
          goto LABEL_20;
        }
        while (1)
        {
          unint64_t v4 = (double *)v11;
          if (*a4 < *(double *)(v11 + 32)) {
            break;
          }
          uint64_t v11 = *(void *)(v11 + 8);
          if (!v11)
          {
LABEL_19:
            a2 = v4 + 1;
            goto LABEL_20;
          }
        }
      }
    }
  }
  if (v6 == 0.0)
  {
    *a3 = a2;
  }
  else
  {
    *a3 = v8;
    return v8 + 1;
  }
  return a2;
}

long long *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid> *,std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid> *,std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid> *>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      long long v7 = *v5;
      *(void *)uint64_t v5 = 0;
      *((void *)v5 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0;
      unint64_t v8 = *(std::__shared_weak_count **)(a4 + 8);
      *(_OWORD *)a4 = v7;
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      *(_OWORD *)(a4 + 16) = v5[1];
      a4 += 32;
      v5 += 2;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::__hash_table<boost::uuids::uuid,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,std::allocator<boost::uuids::uuid>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::remove(a1, a2, (uint64_t)&__p);
  unint64_t v3 = __p;
  std::string __p = 0;
  if (v3) {
    operator delete(v3);
  }
  return v2;
}

_OWORD *std::__tree<std::__value_type<boost::uuids::uuid,unsigned long>,std::__map_value_compare<boost::uuids::uuid,std::__value_type<boost::uuids::uuid,unsigned long>,std::less<boost::uuids::uuid>,true>,std::allocator<std::__value_type<boost::uuids::uuid,unsigned long>>>::__emplace_unique_key_args<boost::uuids::uuid,boost::uuids::uuid&,unsigned long &>(uint64_t **a1, unint64_t *a2, _OWORD *a3, void *a4)
{
  long long v7 = (void **)std::__tree<std::__value_type<boost::uuids::uuid,unsigned long>,std::__map_value_compare<boost::uuids::uuid,std::__value_type<boost::uuids::uuid,unsigned long>,std::less<boost::uuids::uuid>,true>,std::allocator<std::__value_type<boost::uuids::uuid,unsigned long>>>::__find_equal<boost::uuids::uuid>((uint64_t)a1, &v11, a2);
  unint64_t v8 = *v7;
  if (!*v7)
  {
    uint8x8_t v9 = (uint64_t **)v7;
    unint64_t v8 = operator new(0x38uLL);
    v8[2] = *a3;
    *((void *)v8 + 6) = *a4;
    std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__insert_node_at(a1, v11, v9, (uint64_t *)v8);
  }
  return v8;
}

void *std::__tree<std::__value_type<boost::uuids::uuid,unsigned long>,std::__map_value_compare<boost::uuids::uuid,std::__value_type<boost::uuids::uuid,unsigned long>,std::less<boost::uuids::uuid>,true>,std::allocator<std::__value_type<boost::uuids::uuid,unsigned long>>>::__find_equal<boost::uuids::uuid>(uint64_t a1, void *a2, unint64_t *a3)
{
  uint64_t v5 = *(void **)(a1 + 8);
  uint64_t result = (void *)(a1 + 8);
  unint64_t v4 = v5;
  if (v5)
  {
    do
    {
      while (1)
      {
        double v6 = v4;
        unint64_t v7 = bswap64(*a3);
        unint64_t v8 = bswap64(v6[4]);
        if (v7 == v8)
        {
          unint64_t v7 = bswap64(a3[1]);
          unint64_t v8 = bswap64(v6[5]);
          if (v7 == v8) {
            break;
          }
        }
        int v9 = v7 < v8 ? -1 : 1;
        if ((v9 & 0x80000000) == 0) {
          break;
        }
        unint64_t v4 = (void *)*v6;
        uint64_t result = v6;
        if (!*v6) {
          goto LABEL_20;
        }
      }
      unint64_t v10 = bswap64(v6[4]);
      unint64_t v11 = bswap64(*a3);
      if (v10 == v11)
      {
        unint64_t v10 = bswap64(v6[5]);
        unint64_t v11 = bswap64(a3[1]);
        if (v10 == v11) {
          break;
        }
      }
      int v12 = v10 < v11 ? -1 : 1;
      if ((v12 & 0x80000000) == 0) {
        break;
      }
      uint64_t result = v6 + 1;
      unint64_t v4 = (void *)v6[1];
    }
    while (v4);
  }
  else
  {
    double v6 = result;
  }
LABEL_20:
  *a2 = v6;
  return result;
}

void std::vector<double>::resize(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<double>::__append((void **)a1, a2 - v3, a3);
  }
}

void std::vector<double>::__append(void **a1, unint64_t a2, void *a3)
{
  unint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  unint64_t v7 = v8;
  int v9 = *(void **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 3)
  {
    if (a2)
    {
      uint64_t v16 = 8 * a2;
      BOOL v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 8;
      }
      while (v16);
      int v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    unint64_t v11 = a2 + (v10 >> 3);
    if (v11 >> 61) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 3;
    uint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 >> 2 > v11) {
      unint64_t v11 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      float v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>(v6, v14);
    }
    else {
      float v15 = 0;
    }
    unint64_t v18 = &v15[8 * v12];
    unint64_t v19 = &v18[8 * a2];
    uint64_t v20 = 8 * a2;
    uint64_t v21 = v18;
    do
    {
      *(void *)uint64_t v21 = *a3;
      v21 += 8;
      v20 -= 8;
    }
    while (v20);
    unint64_t v22 = &v15[8 * v14];
    unint64_t v23 = (char *)*a1;
    for (uint64_t i = (char *)a1[1]; i != v23; i -= 8)
    {
      uint64_t v25 = *((void *)i - 1);
      *((void *)v18 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v25;
      v18 -= 8;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz, std::vector<int>::const_reference __x)
{
  std::vector<int>::size_type v3 = this->__end_ - this->__begin_;
  if (__sz <= v3)
  {
    if (__sz < v3) {
      this->__end_ = &this->__begin_[__sz];
    }
  }
  else
  {
    std::vector<int>::__append(this, __sz - v3, __x);
  }
}

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n, std::vector<int>::const_reference __x)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  unint64_t v7 = value;
  int v9 = p_end_cap[-1].__value_;
  if (__n <= value - v9)
  {
    if (__n)
    {
      std::vector<int>::size_type v16 = 4 * __n;
      BOOL v17 = &v9[__n];
      do
      {
        *v9++ = *__x;
        v16 -= 4;
      }
      while (v16);
      int v9 = v17;
    }
    this->__end_ = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (char *)this->__begin_;
    unint64_t v11 = __n + (v10 >> 2);
    if (v11 >> 62) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 2;
    uint64_t v13 = (char *)v7 - (char *)this->__begin_;
    if (v13 >> 1 > v11) {
      unint64_t v11 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      float v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationProto::ConfidenceReason>>((uint64_t)p_end_cap, v14);
    }
    else {
      float v15 = 0;
    }
    unint64_t v18 = (int *)&v15[4 * v12];
    unint64_t v19 = &v18[__n];
    std::vector<int>::size_type v20 = 4 * __n;
    uint64_t v21 = v18;
    do
    {
      *v21++ = *__x;
      v20 -= 4;
    }
    while (v20);
    unint64_t v22 = (int *)&v15[4 * v14];
    std::vector<int>::pointer begin = this->__begin_;
    for (std::vector<int>::pointer i = this->__end_; i != begin; --i)
    {
      int v25 = *(i - 1);
      *--unint64_t v18 = v25;
    }
    this->__begin_ = v18;
    this->__end_ = v19;
    this->__end_cap_.__value_ = v22;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

_OWORD *std::__tree<std::__value_type<boost::uuids::uuid,unsigned long>,std::__map_value_compare<boost::uuids::uuid,std::__value_type<boost::uuids::uuid,unsigned long>,std::less<boost::uuids::uuid>,true>,std::allocator<std::__value_type<boost::uuids::uuid,unsigned long>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v6 = (void **)std::__tree<std::__value_type<boost::uuids::uuid,unsigned long>,std::__map_value_compare<boost::uuids::uuid,std::__value_type<boost::uuids::uuid,unsigned long>,std::less<boost::uuids::uuid>,true>,std::allocator<std::__value_type<boost::uuids::uuid,unsigned long>>>::__find_equal<boost::uuids::uuid>((uint64_t)a1, &v10, a2);
  unint64_t v7 = *v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    unint64_t v7 = operator new(0x38uLL);
    v7[2] = **a4;
    *((void *)v7 + 6) = 0;
    std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t std::vector<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>,std::reverse_iterator<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>*>,std::reverse_iterator<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>*>,std::reverse_iterator<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>,std::reverse_iterator<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>*>,std::reverse_iterator<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>*>,std::reverse_iterator<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(a3 + 16);
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>,std::reverse_iterator<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>,std::reverse_iterator<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>,std::reverse_iterator<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>,std::reverse_iterator<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    std::vector<int>::size_type v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 += 32;
  }
}

void **std::__split_buffer<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 32;
    unint64_t v4 = *(std::__shared_weak_count **)(v1 - 24);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 32;
    }
  }
}

void *std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>(uint64_t a1, void *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  do
    v8 ^= (v8 << 6) + (v8 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v7++);
  while (v7 != 16);
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    unint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      for (std::vector<int>::pointer i = *v11; i; std::vector<int>::pointer i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2 && i[3] == a2[1]) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
        }
      }
    }
  }
  float v15 = (void *)(a1 + 16);
  std::vector<int>::pointer i = operator new(0x38uLL);
  *std::vector<int>::pointer i = 0;
  i[1] = v8;
  *((_OWORD *)i + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = **a4;
  i[5] = 0;
  i[6] = 0;
  i[4] = 0;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v22 = *(void *)a1;
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *std::vector<int>::pointer i = *v23;
LABEL_44:
    void *v23 = i;
    goto LABEL_45;
  }
  *std::vector<int>::pointer i = *v15;
  void *v15 = i;
  *(void *)(v22 + 8 * v4) = v15;
  if (*i)
  {
    unint64_t v24 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9) {
        v24 %= v9;
      }
    }
    else
    {
      v24 &= v9 - 1;
    }
    unint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_2563556EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

uint64_t std::set<boost::uuids::uuid>::set[abi:ne180100]<std::__wrap_iter<boost::uuids::uuid const*>>(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  *(void *)(a1 + 8) = 0;
  unint64_t v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::__tree<boost::uuids::uuid>::__emplace_hint_unique_key_args<boost::uuids::uuid,boost::uuids::uuid const&>((uint64_t **)a1, v4, v6, v6);
      v6 += 2;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_256355774(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

char *std::__tree<boost::uuids::uuid>::__emplace_hint_unique_key_args<boost::uuids::uuid,boost::uuids::uuid const&>(uint64_t **a1, void *a2, unint64_t *a3, _OWORD *a4)
{
  uint64_t v6 = (void **)std::__tree<boost::uuids::uuid>::__find_equal<boost::uuids::uuid>(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (char *)*v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v7 + 25) = *a4;
    std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__insert_node_at(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

void *std::__tree<boost::uuids::uuid>::__find_equal<boost::uuids::uuid>(void *a1, void *a2, void *a3, void *a4, unint64_t *a5)
{
  if (a1 + 1 == a2
    || ((v5 = bswap64(*a5), unint64_t v6 = bswap64(*(void *)((char *)a2 + 25)), v5 != v6)
     || (v5 = bswap64(a5[1]), unint64_t v6 = bswap64(*(void *)((char *)a2 + 33)), v5 != v6))
    && (v5 < v6 ? (int v10 = -1) : (int v10 = 1), v10 < 0))
  {
    uint64_t v7 = *a2;
    if ((void *)*a1 == a2)
    {
      unint64_t v9 = a2;
    }
    else
    {
      if (v7)
      {
        unint64_t v8 = (void *)*a2;
        do
        {
          unint64_t v9 = v8;
          unint64_t v8 = (void *)v8[1];
        }
        while (v8);
      }
      else
      {
        float v16 = a2;
        do
        {
          unint64_t v9 = (void *)v16[2];
          BOOL v17 = *v9 == (void)v16;
          float v16 = v9;
        }
        while (v17);
      }
      unint64_t v18 = bswap64(*(void *)((char *)v9 + 25));
      unint64_t v19 = bswap64(*a5);
      if (v18 == v19)
      {
        unint64_t v18 = bswap64(*(void *)((char *)v9 + 33));
        unint64_t v19 = bswap64(a5[1]);
        if (v18 == v19) {
          return std::__tree<boost::uuids::uuid>::__find_equal<boost::uuids::uuid>((uint64_t)a1, a3, a5);
        }
      }
      int v20 = v18 < v19 ? -1 : 1;
      if ((v20 & 0x80000000) == 0) {
        return std::__tree<boost::uuids::uuid>::__find_equal<boost::uuids::uuid>((uint64_t)a1, a3, a5);
      }
    }
    if (v7)
    {
      *a3 = v9;
      return v9 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  unint64_t v11 = bswap64(*(void *)((char *)a2 + 25));
  unint64_t v12 = bswap64(*a5);
  if (v11 != v12 || (unint64_t v11 = bswap64(*(void *)((char *)a2 + 33)), v12 = bswap64(a5[1]), v11 != v12))
  {
    int v15 = v11 < v12 ? -1 : 1;
    if (v15 < 0)
    {
      uint64_t v13 = a2[1];
      if (v13)
      {
        long long v14 = (void *)a2[1];
        do
        {
          a4 = v14;
          long long v14 = (void *)*v14;
        }
        while (v14);
      }
      else
      {
        size_t v21 = a2;
        do
        {
          a4 = (void *)v21[2];
          BOOL v17 = *a4 == (void)v21;
          size_t v21 = a4;
        }
        while (!v17);
      }
      if (a4 == a1 + 1
        || ((unint64_t v22 = bswap64(*a5), v23 = bswap64(*(void *)((char *)a4 + 25)), v22 != v23)
         || (unint64_t v22 = bswap64(a5[1]), v23 = bswap64(*(void *)((char *)a4 + 33)), v22 != v23)
          ? (v22 < v23
           ? (int v24 = -1)
           : (int v24 = 1))
          : (int v24 = 0),
            v24 < 0))
      {
        if (v13)
        {
          *a3 = a4;
        }
        else
        {
          *a3 = a2;
          return a2 + 1;
        }
        return a4;
      }
      return std::__tree<boost::uuids::uuid>::__find_equal<boost::uuids::uuid>((uint64_t)a1, a3, a5);
    }
  }
  *a3 = a2;
  *a4 = a2;
  return a4;
}

void *std::__tree<boost::uuids::uuid>::__find_equal<boost::uuids::uuid>(uint64_t a1, void *a2, unint64_t *a3)
{
  unint64_t v5 = *(void **)(a1 + 8);
  uint64_t result = (void *)(a1 + 8);
  unint64_t v4 = v5;
  if (v5)
  {
    do
    {
      while (1)
      {
        unint64_t v6 = v4;
        unint64_t v7 = bswap64(*a3);
        unint64_t v8 = bswap64(*(void *)((char *)v6 + 25));
        if (v7 == v8)
        {
          unint64_t v7 = bswap64(a3[1]);
          unint64_t v8 = bswap64(*(void *)((char *)v6 + 33));
          if (v7 == v8) {
            break;
          }
        }
        int v9 = v7 < v8 ? -1 : 1;
        if ((v9 & 0x80000000) == 0) {
          break;
        }
        unint64_t v4 = (void *)*v6;
        uint64_t result = v6;
        if (!*v6) {
          goto LABEL_20;
        }
      }
      unint64_t v10 = bswap64(*(void *)((char *)v6 + 25));
      unint64_t v11 = bswap64(*a3);
      if (v10 == v11)
      {
        unint64_t v10 = bswap64(*(void *)((char *)v6 + 33));
        unint64_t v11 = bswap64(a3[1]);
        if (v10 == v11) {
          break;
        }
      }
      int v12 = v10 < v11 ? -1 : 1;
      if ((v12 & 0x80000000) == 0) {
        break;
      }
      uint64_t result = v6 + 1;
      unint64_t v4 = (void *)v6[1];
    }
    while (v4);
  }
  else
  {
    unint64_t v6 = result;
  }
LABEL_20:
  *a2 = v6;
  return result;
}

void *std::vector<boost::uuids::uuid>::vector<std::__tree_const_iterator<boost::uuids::uuid,std::__tree_node<boost::uuids::uuid,void *> *,long>,0>(void *a1, void *a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 == a3)
  {
    unint64_t v4 = 0;
  }
  else
  {
    unint64_t v4 = 0;
    unint64_t v5 = a2;
    do
    {
      unint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          unint64_t v7 = v6;
          unint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          unint64_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          unint64_t v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      unint64_t v5 = v7;
    }
    while (v7 != a3);
  }
  std::vector<boost::uuids::uuid>::__init_with_size[abi:ne180100]<std::__tree_const_iterator<boost::uuids::uuid,std::__tree_node<boost::uuids::uuid,void *> *,long>,std::__tree_const_iterator<boost::uuids::uuid,std::__tree_node<boost::uuids::uuid,void *> *,long>>(a1, a2, a3, v4);
  return a1;
}

void *std::vector<boost::uuids::uuid>::__init_with_size[abi:ne180100]<std::__tree_const_iterator<boost::uuids::uuid,std::__tree_node<boost::uuids::uuid,void *> *,long>,std::__tree_const_iterator<boost::uuids::uuid,std::__tree_node<boost::uuids::uuid,void *> *,long>>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = (uint64_t)result;
    std::vector<boost::uuids::uuid>::__vallocate[abi:ne180100](result, a4);
    return (void *)std::vector<boost::uuids::uuid>::__construct_at_end<std::__tree_const_iterator<boost::uuids::uuid,std::__tree_node<boost::uuids::uuid,void *> *,long>,std::__tree_const_iterator<boost::uuids::uuid,std::__tree_node<boost::uuids::uuid,void *> *,long>>(v6, a2, a3);
  }
  return result;
}

void sub_256355BC0(_Unwind_Exception *exception_object)
{
  std::vector<int>::size_type v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<boost::uuids::uuid>::__construct_at_end<std::__tree_const_iterator<boost::uuids::uuid,std::__tree_node<boost::uuids::uuid,void *> *,long>,std::__tree_const_iterator<boost::uuids::uuid,std::__tree_node<boost::uuids::uuid,void *> *,long>>(uint64_t result, void *a2, void *a3)
{
  std::vector<int>::size_type v3 = *(_OWORD **)(result + 8);
  if (a2 != a3)
  {
    do
    {
      *std::vector<int>::size_type v3 = *(_OWORD *)((char *)a2 + 25);
      unint64_t v4 = (void *)a2[1];
      if (v4)
      {
        do
        {
          unint64_t v5 = v4;
          unint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          unint64_t v5 = (void *)a2[2];
          BOOL v6 = *v5 == (void)a2;
          a2 = v5;
        }
        while (!v6);
      }
      ++v3;
      a2 = v5;
    }
    while (v5 != a3);
  }
  *(void *)(result + 8) = v3;
  return result;
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_2653F8EC8, MEMORY[0x263F8C068]);
}

void sub_256355C7C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  return result;
}

void *std::__hash_table<std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>>>::__equal_range_multi<boost::uuids::uuid>(void *a1, void *a2)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::find<boost::uuids::uuid>(a1, a2);
  if (result)
  {
    unint64_t v4 = result;
    do
    {
      unint64_t v4 = (void *)*v4;
      if (!v4) {
        break;
      }
    }
    while (v4[2] == *a2 && v4[3] == a2[1]);
  }
  return result;
}

{
  void *result;
  void *v4;

  uint64_t result = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::find<boost::uuids::uuid>(a1, a2);
  if (result)
  {
    unint64_t v4 = result;
    do
    {
      unint64_t v4 = (void *)*v4;
      if (!v4) {
        break;
      }
    }
    while (v4[2] == *a2 && v4[3] == a2[1]);
  }
  return result;
}

uint64_t *std::back_insert_iterator<std::vector<CLMicroLocationProto::ConfidenceLevel>>::operator=[abi:ne180100](uint64_t *a1, _DWORD *a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = *(_DWORD **)(*a1 + 8);
  BOOL v6 = (void *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    BOOL v8 = *(_DWORD **)v4;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v4) >> 2;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = *v6 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationProto::ConfidenceReason>>((uint64_t)v6, v12);
      BOOL v8 = *(_DWORD **)v4;
      unint64_t v5 = *(_DWORD **)(v4 + 8);
    }
    else
    {
      uint64_t v13 = 0;
    }
    long long v14 = &v13[4 * v9];
    int v15 = &v13[4 * v12];
    *(_DWORD *)long long v14 = *a2;
    unint64_t v7 = v14 + 4;
    while (v5 != v8)
    {
      int v16 = *--v5;
      *((_DWORD *)v14 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v16;
      v14 -= 4;
    }
    *(void *)uint64_t v4 = v14;
    *(void *)(v4 + 8) = v7;
    *(void *)(v4 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    _DWORD *v5 = *a2;
    unint64_t v7 = v5 + 1;
  }
  *(void *)(v4 + 8) = v7;
  return a1;
}

char *std::vector<CLMicroLocationProto::ConfidenceLevel>::__insert_with_size[abi:ne180100]<std::__wrap_iter<CLMicroLocationProto::ConfidenceLevel*>,std::__wrap_iter<CLMicroLocationProto::ConfidenceLevel*>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  unint64_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  unint64_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 2)
  {
    uint64_t v13 = *(void **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 2);
    if (v14 >> 62) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (__dst - (uint64_t)v13) >> 2;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 1 > v14) {
      unint64_t v14 = v16 >> 1;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v37 = v9;
    if (v17) {
      unint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationProto::ConfidenceReason>>(v9, v17);
    }
    else {
      unint64_t v18 = 0;
    }
    uint64_t v28 = &v18[4 * v15];
    std::string __p = v18;
    uint64_t v34 = v28;
    uint64_t v36 = &v18[4 * v17];
    uint64_t v29 = 4 * a5;
    uint64_t v30 = &v28[4 * a5];
    do
    {
      int v31 = *(_DWORD *)v7;
      v7 += 4;
      *(_DWORD *)uint64_t v28 = v31;
      v28 += 4;
      v29 -= 4;
    }
    while (v29);
    long long v35 = v30;
    unint64_t v5 = std::vector<CLMicroLocationProto::ConfidenceReason>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      v35 += (v34 - v35 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    size_t v21 = &__src[4 * a5];
    unint64_t v23 = *(char **)(v9 - 8);
LABEL_17:
    int v24 = &v5[4 * a5];
    int v25 = &v23[-4 * a5];
    unint64_t v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      unint64_t v26 = v23;
      do
      {
        int v27 = *(_DWORD *)v25;
        v25 += 4;
        *(_DWORD *)unint64_t v26 = v27;
        v26 += 4;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-4 * ((v23 - v24) >> 2)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  size_t v21 = &__src[4 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[4 * v20], a4 - v21);
  }
  unint64_t v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_256355FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<CLMicroLocationProto::ConfidenceLevel>::__append(char **a1, unint64_t a2)
{
  BOOL v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    BOOL v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 2);
    if (v10 >> 62) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = v5 - v8;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationProto::ConfidenceReason>>(v4, v13);
      BOOL v8 = *a1;
      unint64_t v7 = a1[1];
    }
    else
    {
      unint64_t v14 = 0;
    }
    uint64_t v15 = &v14[4 * v11];
    uint64_t v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    unint64_t v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      int v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

char *std::vector<boost::uuids::uuid>::__insert_with_size[abi:ne180100]<std::__wrap_iter<boost::uuids::uuid*>,std::__wrap_iter<boost::uuids::uuid*>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  unint64_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  unint64_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 4)
  {
    unint64_t v13 = *(void **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 4);
    if (v14 >> 60) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (__dst - (uint64_t)v13) >> 4;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 3 > v14) {
      unint64_t v14 = v16 >> 3;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v37 = v9;
    if (v17) {
      int v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::uuids::uuid>>(v9, v17);
    }
    else {
      int v18 = 0;
    }
    uint64_t v28 = &v18[16 * v15];
    std::string __p = v18;
    uint64_t v34 = v28;
    uint64_t v36 = &v18[16 * v17];
    uint64_t v29 = 16 * a5;
    uint64_t v30 = &v28[16 * a5];
    do
    {
      long long v31 = *(_OWORD *)v7;
      v7 += 16;
      *(_OWORD *)uint64_t v28 = v31;
      v28 += 16;
      v29 -= 16;
    }
    while (v29);
    long long v35 = v30;
    unint64_t v5 = (char *)std::vector<boost::uuids::uuid>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      v35 += (v34 - v35 + 15) & 0xFFFFFFFFFFFFFFF0;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 4;
  if (v20 >= a5)
  {
    size_t v21 = &__src[16 * a5];
    unint64_t v23 = *(char **)(v9 - 8);
LABEL_17:
    int v24 = &v5[16 * a5];
    int v25 = &v23[-16 * a5];
    unint64_t v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      unint64_t v26 = v23;
      do
      {
        long long v27 = *(_OWORD *)v25;
        v25 += 16;
        *(_OWORD *)unint64_t v26 = v27;
        v26 += 16;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-16 * ((v23 - v24) >> 4)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  size_t v21 = &__src[16 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[16 * v20], a4 - v21);
  }
  unint64_t v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_256356308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<boost::uuids::uuid>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  unint64_t v5 = *(void **)(a2 + 8);
  BOOL v6 = (char *)*a1;
  unint64_t v7 = v5;
  if (*a1 != __src)
  {
    BOOL v8 = __src;
    uint64_t v9 = *(void *)(a2 + 8);
    do
    {
      unint64_t v7 = (void *)(v9 - 16);
      *(_OWORD *)(v9 - 16) = *((_OWORD *)v8 - 1);
      v8 -= 16;
      v9 -= 16;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    unint64_t v7 = *(void **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  unint64_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  unint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void std::vector<boost::uuids::uuid>::__append(void **a1, unint64_t a2)
{
  BOOL v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::uuids::uuid>>(v4, v12);
    }
    else {
      unint64_t v13 = 0;
    }
    unint64_t v14 = &v13[16 * v10];
    uint64_t v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    uint64_t v16 = &v14[16 * a2];
    int v18 = (char *)*a1;
    unint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      unint64_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationModel::SimilarityListData::EventInformation>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xCCCCCCCCCCCCCCDLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(20 * a2);
}

void OUTLINED_FUNCTION_3_0(void *a1, NSObject *a2, uint64_t a3, uint64_t a4, const char *a5, const char *a6, uint8_t *a7)
{
  _os_signpost_emit_with_name_impl(a1, a2, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, a5, a6, a7, 0x26u);
}

void OUTLINED_FUNCTION_4()
{
}

void OUTLINED_FUNCTION_5(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0x26u);
}

void OUTLINED_FUNCTION_6(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_impl(a1, v9, OS_LOG_TYPE_INFO, a4, &a9, 0x26u);
}

void sub_256356C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_2563573C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_256357B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

uint64_t CLMutexDubiousLock(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t CLMutexDubiousUnlock(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

void BasicMutex::BasicMutex(BasicMutex *this, const char *a2)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  *(void *)this = &unk_2704DABB8;
  operator new();
}

void BasicMutex::~BasicMutex(pthread_mutex_t **this)
{
  *this = (pthread_mutex_t *)&unk_2704DABB8;
  pthread_mutex_destroy(this[1]);
  uint64_t v2 = this[1];
  if (*(void *)&v2[1].__opaque[16])
  {
    free(*(void **)&v2[1].__opaque[16]);
    *(void *)&this[1][1].__opaque[16] = 0;
  }
  MEMORY[0x25A2A6340]();
}

{
  uint64_t vars8;

  BasicMutex::~BasicMutex(this);
  JUMPOUT(0x25A2A6340);
}

pthread_t BasicMutex::lock(pthread_mutex_t **this)
{
  if (pthread_mutex_lock(this[1]))
  {
    pthread_t result = (pthread_t)BasicMutex::lock();
    goto LABEL_9;
  }
  pthread_t result = pthread_self();
  std::vector<int>::size_type v3 = this[1];
  int sig = v3[1].__sig;
  if (sig < 0)
  {
LABEL_9:
    pthread_t result = (pthread_t)BasicMutex::lock(result);
    goto LABEL_10;
  }
  unint64_t v5 = *(_opaque_pthread_t **)v3[1].__opaque;
  if (sig)
  {
    if (v5 == result)
    {
LABEL_7:
      LODWORD(v3[1].__sig) = sig + 1;
      *(void *)v3[1].__opaque = result;
      return result;
    }
    pthread_t result = (pthread_t)BasicMutex::lock();
  }
  if (!v5) {
    goto LABEL_7;
  }
LABEL_10:
  BasicMutex::lock(result);
  return (pthread_t)_CLLogObjectForCategory_MicroLocation_Default();
}

uint64_t BasicMutex::unlock(BasicMutex *this)
{
  uint64_t v1 = *((void *)this + 1);
  int v2 = *(_DWORD *)(v1 + 64);
  if (v2 <= 0)
  {
    uint64_t result = BasicMutex::unlock();
LABEL_7:
    unint64_t v5 = (BasicMutex *)BasicMutex::unlock(result);
    return BasicMutex::__assertOwned(v5);
  }
  int v3 = v2 - 1;
  *(_DWORD *)(v1 + 64) = v3;
  if (!v3) {
    *(void *)(v1 + 72) = 0;
  }
  uint64_t result = pthread_mutex_unlock((pthread_mutex_t *)v1);
  if (result) {
    goto LABEL_7;
  }
  return result;
}

BOOL BasicMutex::__assertOwned(BasicMutex *this)
{
  pthread_t v1 = *(pthread_t *)(*((void *)this + 1) + 72);
  return v1 == pthread_self();
}

BOOL BasicMutex::__assertNotOwned(BasicMutex *this)
{
  pthread_t v1 = *(pthread_t *)(*((void *)this + 1) + 72);
  return v1 != pthread_self();
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_3()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  pthread_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

BOOL OUTLINED_FUNCTION_4_0(NSObject *a1)
{
  return os_log_type_enabled(a1, OS_LOG_TYPE_INFO);
}

BOOL OUTLINED_FUNCTION_5_0(NSObject *a1)
{
  return os_log_type_enabled(a1, OS_LOG_TYPE_FAULT);
}

uint64_t CLMicroLocationMigrationTable::Entry::Entry(uint64_t result, int a2, void *a3)
{
  *(void *)uint64_t result = *a3;
  *(_DWORD *)(result + 8) = a2;
  return result;
}

void sub_2563589B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256358D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_256358F14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_4()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

void sub_256358FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_256359030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2563590B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_256359124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_256359188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_256359204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_25635937C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_256359424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationSensorsDriver::CLMicroLocationSensorsDriver(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2704DACB0;
  *(void *)(a1 + 8) = &unk_2704DAD78;
  *(void *)(a1 + 16) = &unk_2704DADA8;
  *(void *)(a1 + 24) = &unk_2704DADD8;
  *(void *)(a1 + 32) = &unk_2704DAE20;
  *(void *)(a1 + 40) = &unk_2704DAE58;
  *(void *)(a1 + 48) = &unk_2704DAE90;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + CLMicroLocationSensorsLogic::stopOdometryMonitoringIfRunning(this + 88) = 0;
  uint64_t v4 = operator new(0x68uLL);
  _OWORD *v4 = xmmword_256514630;
  v4[1] = xmmword_256514640;
  v4[2] = xmmword_256514650;
  v4[3] = xmmword_256514660;
  v4[4] = xmmword_256514670;
  void v4[5] = xmmword_256514680;
  *((void *)v4 + 12) = 13;
  *(void *)(a1 + 72) = v4;
  *(void *)(a1 + 80) = (char *)v4 + 104;
  *(void *)(a1 + CLMicroLocationSensorsLogic::stopOdometryMonitoringIfRunning(this + 88) = (char *)v4 + 104;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  unint64_t v5 = operator new(0x68uLL);
  _OWORD *v5 = xmmword_256514630;
  v5[1] = xmmword_256514640;
  _DWORD v5[2] = xmmword_256514650;
  void v5[3] = xmmword_256514660;
  v5[4] = xmmword_256514670;
  v5[5] = xmmword_256514680;
  *((void *)v5 + 12) = 13;
  *(void *)(a1 + 96) = v5;
  *(void *)(a1 + 104) = (char *)v5 + 104;
  *(void *)(a1 + 112) = (char *)v5 + 104;
  *(void *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = a2;
  CLMicroLocationSensorsDriver::createAndRegisterWiFiScanDelegateAdapter((CLMicroLocationSensorsDriver *)a1);
  CLMicroLocationSensorsDriver::createAndRegisterOdometryDelegateAdapter((CLMicroLocationSensorsDriver *)a1);
  return a1;
}

void sub_2563596B8(_Unwind_Exception *a1)
{
  int v3 = *(void **)(v1 + 72);
  if (v3)
  {
    *(void *)(v1 + 80) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationSensorsDriver::createAndRegisterWiFiScanDelegateAdapter(CLMicroLocationSensorsDriver *this)
{
  int v2 = objc_alloc_init(ULWiFiScanClientAdapter);
  int v3 = (void *)*((void *)this + 8);
  *((void *)this + 8) = v2;

  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 3221225472;
  void v10[2] = ___ZN28CLMicroLocationSensorsDriver40createAndRegisterWiFiScanDelegateAdapterEv_block_invoke;
  v10[3] = &__block_descriptor_40_e5_v8__0l;
  v10[4] = this;
  [*((id *)this + 8) setDidStopWifiRssiScanningBlock:v10];
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 3221225472;
  _DWORD v9[2] = ___ZN28CLMicroLocationSensorsDriver40createAndRegisterWiFiScanDelegateAdapterEv_block_invoke_2;
  void v9[3] = &__block_descriptor_40_e5_v8__0l;
  v9[4] = this;
  [*((id *)this + 8) setDidStopWifiScanTimerBlock:v9];
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 3221225472;
  v8[2] = ___ZN28CLMicroLocationSensorsDriver40createAndRegisterWiFiScanDelegateAdapterEv_block_invoke_3;
  int v8[3] = &__block_descriptor_40_e20_v24__0_v8__NSDate_16l;
  void v8[4] = this;
  [*((id *)this + 8) setDidUpdateWifiAPsBlock:v8];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  v7[2] = ___ZN28CLMicroLocationSensorsDriver40createAndRegisterWiFiScanDelegateAdapterEv_block_invoke_4;
  v7[3] = &__block_descriptor_40_e5_v8__0l;
  v7[4] = this;
  [*((id *)this + 8) setDidReceiveWifiScanErrorBlock:v7];
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 3221225472;
  _DWORD v6[2] = ___ZN28CLMicroLocationSensorsDriver40createAndRegisterWiFiScanDelegateAdapterEv_block_invoke_5;
  void v6[3] = &__block_descriptor_40_e5_v8__0l;
  __n128 v6[4] = this;
  [*((id *)this + 8) setDidReceiveWifiScanErrorBusyBlock:v6];
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 3221225472;
  _DWORD v5[2] = ___ZN28CLMicroLocationSensorsDriver40createAndRegisterWiFiScanDelegateAdapterEv_block_invoke_6;
  void v5[3] = &__block_descriptor_40_e31_v16__0__ULWiFiAssociatedState_8l;
  v5[4] = this;
  return [*((id *)this + 8) setDidUpdateWiFiAssociatedStateBlock:v5];
}

uint64_t CLMicroLocationSensorsDriver::createAndRegisterOdometryDelegateAdapter(CLMicroLocationSensorsDriver *this)
{
  int v2 = objc_alloc_init(ULOdometryClientAdapter);
  int v3 = (void *)*((void *)this + 22);
  *((void *)this + 22) = v2;

  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 3221225472;
  _DWORD v6[2] = ___ZN28CLMicroLocationSensorsDriver40createAndRegisterOdometryDelegateAdapterEv_block_invoke;
  void v6[3] = &__block_descriptor_40_e28_v24__0__NSError_8__NSDate_16l;
  __n128 v6[4] = this;
  [*((id *)this + 22) setDidReceiveOdometryErrorBlock:v6];
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 3221225472;
  _DWORD v5[2] = ___ZN28CLMicroLocationSensorsDriver40createAndRegisterOdometryDelegateAdapterEv_block_invoke_115;
  void v5[3] = &__block_descriptor_40_e37_v24__0__ULOdometryStatus_8__NSUUID_16l;
  v5[4] = this;
  return [*((id *)this + 22) setDidReceiveOdometryUpdateBlock:v5];
}

uint64_t ___ZN28CLMicroLocationSensorsDriver40createAndRegisterWiFiScanDelegateAdapterEv_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 48))();
}

uint64_t ___ZN28CLMicroLocationSensorsDriver40createAndRegisterWiFiScanDelegateAdapterEv_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 56))();
}

void ___ZN28CLMicroLocationSensorsDriver40createAndRegisterWiFiScanDelegateAdapterEv_block_invoke_3(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = v5;
  [v5 timeIntervalSinceReferenceDate];
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, a2);
}

void sub_256359BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN28CLMicroLocationSensorsDriver40createAndRegisterWiFiScanDelegateAdapterEv_block_invoke_4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 32))();
}

uint64_t ___ZN28CLMicroLocationSensorsDriver40createAndRegisterWiFiScanDelegateAdapterEv_block_invoke_5(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 40))();
}

uint64_t ___ZN28CLMicroLocationSensorsDriver40createAndRegisterWiFiScanDelegateAdapterEv_block_invoke_6(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 24))();
}

void ___ZN28CLMicroLocationSensorsDriver40createAndRegisterOdometryDelegateAdapterEv_block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_10);
  }
  uint64_t v8 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 138412546;
    id v14 = v6;
    __int16 v15 = 2112;
    id v16 = v5;
    _os_log_impl(&dword_25631F000, v8, OS_LOG_TYPE_ERROR, "SensorsDriver, got odometry error, timestamp: %@, error: %@", buf, 0x16u);
  }
  [v6 timeIntervalSinceReferenceDate];
  double v10 = v9;
  uint64_t v11 = [MEMORY[0x263F08C38] nilUUID];
  CLMiLoOdometryTable::Entry::Entry((uint64_t)v12, v11, 0.0, 0.0, 0.0, v10);
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v7 + 88))(v7, v12);
}

void sub_256359DA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN28CLMicroLocationSensorsDriver40createAndRegisterOdometryDelegateAdapterEv_block_invoke_115(uint64_t a1, void *a2, void *a3)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_10);
  }
  uint64_t v8 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    double v9 = [v5 statusDate];
    double v10 = [v5 deltaPositionX];
    uint64_t v11 = [v5 deltaPositionY];
    unint64_t v12 = [v5 deltaPositionZ];
    *(_DWORD *)uint64_t buf = 138413314;
    long long v27 = v9;
    __int16 v28 = 2112;
    uint64_t v29 = v10;
    __int16 v30 = 2112;
    long long v31 = v11;
    __int16 v32 = 2112;
    long long v33 = v12;
    __int16 v34 = 2112;
    id v35 = v6;
    _os_log_impl(&dword_25631F000, v8, OS_LOG_TYPE_DEFAULT, "SensorsDriver, odometry update, timestamp: %@, deltaX: %@, deltaY: %@, deltaZ: %@, uuid: %@", buf, 0x34u);
  }
  unint64_t v13 = [v5 statusDate];
  [v13 timeIntervalSinceReferenceDate];
  double v15 = v14;

  id v16 = [v5 deltaPositionX];
  [v16 floatValue];
  float v18 = v17;

  uint64_t v19 = [v5 deltaPositionY];
  [v19 floatValue];
  float v21 = v20;

  int64_t v22 = [v5 deltaPositionZ];
  [v22 floatValue];
  float v24 = v23;

  CLMiLoOdometryTable::Entry::Entry((uint64_t)v25, v6, v18, v21, v24, v15);
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v7 + 80))(v7, v25);
}

void sub_25635A06C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationSensorsDriver::setWifiLink(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = std::function<ULWiFiScanProvider * ()(objc_object  {objcproto26ULWiFiScanProviderDelegate}*)>::operator()(a2, *(void **)(a1 + 64));
  uint64_t v4 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = v3;
}

id std::function<ULWiFiScanProvider * ()(objc_object  {objcproto26ULWiFiScanProviderDelegate}*)>::operator()(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v4 = (*(void (**)(uint64_t, id *))(*(void *)v3 + 48))(v3, &v6);

  return v4;
}

void sub_25635A1CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationSensorsDriver::setBleLink(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t result = *(void *)(a1 + 152);
  *(void *)(a1 + 152) = v3;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t CLMicroLocationSensorsDriver::setUwbLink(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t result = *(void *)(a1 + 160);
  *(void *)(a1 + 160) = v3;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CLMicroLocationSensorsDriver::setOdometryLink(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = std::function<ULOdometryProvider * ()(objc_object  {objcproto26ULOdometryProviderDelegate}*)>::operator()(a2, *(void **)(a1 + 176));
  uint64_t v4 = *(void **)(a1 + 168);
  *(void *)(a1 + 168) = v3;
}

id std::function<ULOdometryProvider * ()(objc_object  {objcproto26ULOdometryProviderDelegate}*)>::operator()(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v4 = (*(void (**)(uint64_t, id *))(*(void *)v3 + 48))(v3, &v6);

  return v4;
}

void sub_25635A338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationSensorsDriver::setMotionLink(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t result = *(void *)(a1 + 184);
  *(void *)(a1 + 184) = v3;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t CLMicroLocationSensorsDriver::setStopMotionLink(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t result = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = v3;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t CLMicroLocationSensorsDriver::setCustomLoiRecordingFenceLink(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t result = *(void *)(a1 + 200);
  *(void *)(a1 + 200) = v3;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CLMicroLocationSensorsDriver::requestWifiScan(uint64_t a1, unsigned __int8 *a2)
{
  *(unsigned char *)(a1 + 128) = *a2;
  *(void *)(a1 + 120) = *((void *)a2 + 1);
  *(unsigned char *)(a1 + 129) = a2[16];
  [*(id *)(a1 + 56) startScanTimerWithInterval:(double)(uint64_t)CLMicroLocationSensorsDriver::recordingDuration((CLMicroLocationSensorsDriver *)a1) / 1000.0];
  *(unsigned char *)(a1 + 144) = 0;
  uint64_t v4 = +[ULDefaultsSingleton shared];
  id v5 = [v4 defaultsDictionary];

  id v6 = [NSString stringWithUTF8String:"ULScanWifiRSSIEnabled"];
  uint64_t v7 = [v5 objectForKey:v6];
  if (v7 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    int v8 = [v7 BOOLValue];
  }
  else {
    int v8 = [MEMORY[0x263EFFA88] BOOLValue];
  }
  int v9 = v8;

  if (v9)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_10);
    }
    double v10 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_25631F000, v10, OS_LOG_TYPE_DEFAULT, "SensorsDriver, wifi, start scanning", buf, 2u);
    }
    uint64_t v11 = ULWiFiStrategyBuilder::buildScanStartegy(*a2, (void *)(a1 + 72), (unsigned int **)(a1 + 96), *((void *)a2 + 3));
    unint64_t v12 = *(void **)(a1 + 136);
    *(void *)(a1 + 136) = v11;

    [*(id *)(a1 + 56) startScanWithStrategyType:*(void *)(a1 + 136) initialDelay:*((double *)a2 + 1)];
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_10);
    }
    unint64_t v13 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)double v14 = 0;
      _os_log_impl(&dword_25631F000, v13, OS_LOG_TYPE_DEBUG, "SensorsDriver, Not scanning Wifi RSSI because it's not enabled", v14, 2u);
    }
  }
}

void sub_25635A620(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CLMicroLocationSensorsDriver *CLMicroLocationSensorsDriver::recordingDuration(CLMicroLocationSensorsDriver *this)
{
  uint64_t v1 = this;
  int v2 = *((unsigned __int8 *)this + 128);
  if (v2 == 1)
  {
LABEL_5:
    int v3 = *((unsigned __int8 *)v1 + 129);
    uint64_t v4 = +[ULDefaultsSingleton shared];
    id v5 = v4;
    if (v3)
    {
      id v6 = [v4 defaultsDictionary];

      uint64_t v7 = [NSString stringWithUTF8String:"ULLocalizingDurationMinimumDualBands"];
      int v8 = [v6 objectForKey:v7];
      if (!v8 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
      {
        int v9 = [&unk_2704F1458 intValue];
        goto LABEL_22;
      }
    }
    else
    {
      id v6 = [v4 defaultsDictionary];

      uint64_t v7 = [NSString stringWithUTF8String:"ULLocalizingDurationMinimum"];
      int v8 = [v6 objectForKey:v7];
      if (!v8 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
      {
        int v9 = [&unk_2704F13F8 intValue];
        goto LABEL_22;
      }
    }
    int v9 = [v8 intValue];
LABEL_22:
    int v17 = v9;

    return (CLMicroLocationSensorsDriver *)((uint64_t)(*((double *)v1 + 15) * 1000.0) + v17);
  }
  if (v2 == 2)
  {
    int v10 = *((unsigned __int8 *)this + 129);
    uint64_t v11 = +[ULDefaultsSingleton shared];
    unint64_t v12 = v11;
    if (v10)
    {
      unint64_t v13 = [v11 defaultsDictionary];

      double v14 = [NSString stringWithUTF8String:"ULRecordingDurationDualBands"];
      double v15 = [v13 objectForKey:v14];
      if (!v15 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
      {
        int v16 = [&unk_2704F1440 intValue];
        goto LABEL_24;
      }
    }
    else
    {
      unint64_t v13 = [v11 defaultsDictionary];

      double v14 = [NSString stringWithUTF8String:"ULRecordingDuration"];
      double v15 = [v13 objectForKey:v14];
      if (!v15 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
      {
        int v16 = [&unk_2704F1410 intValue];
        goto LABEL_24;
      }
    }
    int v16 = [v15 intValue];
LABEL_24:
    uint64_t v1 = (CLMicroLocationSensorsDriver *)v16;

    return v1;
  }
  if (!*((unsigned char *)this + 128))
  {
    CLMicroLocationSensorsDriver::recordingDuration();
    goto LABEL_5;
  }
  return v1;
}

void sub_25635A918(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationSensorsDriver::onWifiAPs(uint64_t a1, CLMicroLocationProto::WiFiRssi **a2, double a3)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  *(unsigned char *)(a1 + 144) = 0;
  *(_OWORD *)uint64_t buf = xmmword_256514A80;
  *(_OWORD *)&uint8_t buf[16] = unk_256514A90;
  long long v40 = xmmword_256514AA0;
  LODWORD(v4CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 13;
  std::set<unsigned int>::set[abi:ne180100]((uint64_t)&v37, (unsigned int *)buf, 13);
  if (*(unsigned char *)(a1 + 129))
  {
    long long v40 = xmmword_256514AD4;
    long long v41 = unk_256514AE4;
    long long v42 = xmmword_256514AF4;
    long long v43 = unk_256514B04;
    *(_OWORD *)uint64_t buf = xmmword_256514AB4;
    *(_OWORD *)&uint8_t buf[16] = unk_256514AC4;
    uint64_t v44 = 0xB1000000ADLL;
    std::set<unsigned int>::set[abi:ne180100]((uint64_t)&v34, (unsigned int *)buf, 26);
    std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&v37, v38[0]);
    id v6 = v35;
    uint64_t v37 = v34;
    v38[0] = v35;
    v38[1] = v36;
    if (v36)
    {
      v35[2] = v38;
      __int16 v34 = &v35;
      id v35 = 0;
      uint64_t v36 = 0;
      id v6 = 0;
    }
    else
    {
      uint64_t v37 = v38;
    }
    std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&v34, v6);
  }
  int v8 = *a2;
  uint64_t v7 = a2[1];
  uint64_t v9 = v7 - *a2;
  if (v7 == *a2) {
    goto LABEL_34;
  }
  if (v38[0])
  {
    while (1)
    {
      unsigned int v10 = *((_DWORD *)v8 + 8);
      uint64_t v11 = v38;
      unint64_t v12 = v38[0];
      do
      {
        unint64_t v13 = v12;
        double v14 = v11;
        unsigned int v15 = *((_DWORD *)v12 + 7);
        if (v15 >= v10) {
          uint64_t v11 = (void **)v12;
        }
        else {
          ++v12;
        }
        unint64_t v12 = (void *)*v12;
      }
      while (v12);
      if (v11 == v38) {
        break;
      }
      if (v15 < v10) {
        unint64_t v13 = v14;
      }
      if (v10 < *((_DWORD *)v13 + 7)) {
        break;
      }
      int v8 = (CLMicroLocationProto::WiFiRssi *)((char *)v8 + 56);
      if (v8 == v7) {
        goto LABEL_34;
      }
    }
  }
  if (v8 == v7)
  {
LABEL_34:
    unint64_t v26 = a2[1];
  }
  else
  {
    int v16 = (CLMicroLocationProto::WiFiRssi *)((char *)v8 + 56);
    if ((CLMicroLocationProto::WiFiRssi *)((char *)v8 + 56) == v7)
    {
      unint64_t v26 = a2[1];
      uint64_t v7 = v8;
    }
    else
    {
      int v17 = v8;
      do
      {
        float v18 = v8;
        int v8 = v16;
        uint64_t v19 = v38[0];
        if (v38[0])
        {
          unsigned int v20 = *((_DWORD *)v18 + 22);
          float v21 = v38;
          do
          {
            int64_t v22 = v19;
            float v23 = v21;
            unsigned int v24 = *((_DWORD *)v19 + 7);
            int v25 = v19 + 1;
            if (v24 >= v20)
            {
              int v25 = v22;
              float v21 = (void **)v22;
            }
            uint64_t v19 = (void *)*v25;
          }
          while (v19);
          if (v21 != v38)
          {
            if (v24 < v20) {
              int64_t v22 = v23;
            }
            if (v20 >= *((_DWORD *)v22 + 7))
            {
              CLMicroLocationProto::WiFiRssi::CopyFrom(v17, v8);
              *((_DWORD *)v17 + 12) = *((_DWORD *)v18 + 26);
              int v17 = (CLMicroLocationProto::WiFiRssi *)((char *)v17 + 56);
            }
          }
        }
        int v16 = (CLMicroLocationProto::WiFiRssi *)((char *)v8 + 56);
      }
      while ((CLMicroLocationProto::WiFiRssi *)((char *)v8 + 56) != v7);
      unint64_t v26 = a2[1];
      uint64_t v7 = v17;
    }
  }
  std::vector<CLMiLoProtobufWrapper::WiFiRssi>::erase((uint64_t)a2, v7, v26);
  uint64_t v27 = 0x6DB6DB6DB6DB6DB7 * (v9 >> 3);
  uint64_t v28 = 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3);
  int v29 = v27 - v28;
  if (v27 != v28)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_10);
    }
    __int16 v30 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      int v31 = *(unsigned __int8 *)(a1 + 129);
      *(_DWORD *)uint64_t buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 1026;
      *(_DWORD *)&buf[20] = v29;
      *(_WORD *)&buf[24] = 1026;
      *(_DWORD *)&buf[26] = v31;
      _os_log_impl(&dword_25631F000, v30, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"wifi measurements with unexpected channel received\", \"number of invalid measurements\":%{public}u, \"is scanning dual bands?\":%{public}hhd}", buf, 0x1Eu);
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_10);
    }
    __int16 v32 = logObject_MicroLocation_Default;
    if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
    {
      int v33 = *(unsigned __int8 *)(a1 + 129);
      *(_DWORD *)uint64_t buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 1026;
      *(_DWORD *)&buf[20] = v29;
      *(_WORD *)&buf[24] = 1026;
      *(_DWORD *)&buf[26] = v33;
      _os_signpost_emit_with_name_impl(&dword_25631F000, v32, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "wifi measurements with unexpected channel received", "{\"msg%{public}.0s\":\"wifi measurements with unexpected channel received\", \"number of invalid measurements\":%{public}u, \"is scanning dual bands?\":%{public}hhd}", buf, 0x1Eu);
    }
  }
  (*(void (**)(void, CLMicroLocationProto::WiFiRssi **, double))(**(void **)(a1 + 208) + 16))(*(void *)(a1 + 208), a2, a3);
  [*(id *)(a1 + 56) issueNextScanIterrationOrStopScan:*(void *)(a1 + 136)];
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&v37, v38[0]);
}

void sub_25635ADF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *a15)
{
}

CLMicroLocationProto::WiFiRssi *std::vector<CLMiLoProtobufWrapper::WiFiRssi>::erase(uint64_t a1, CLMicroLocationProto::WiFiRssi *this, CLMicroLocationProto::WiFiRssi *a3)
{
  if (this != a3)
  {
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,CLMiLoProtobufWrapper::WiFiRssi *,CLMiLoProtobufWrapper::WiFiRssi *,CLMiLoProtobufWrapper::WiFiRssi *,0>(a3, *(CLMicroLocationProto::WiFiRssi **)(a1 + 8), this);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
        CLMicroLocationProto::WiFiRssi::~WiFiRssi((CLMicroLocationProto::WiFiRssi *)(v7 - 56));
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return this;
}

uint64_t CLMicroLocationSensorsDriver::onWifiScanError(CLMicroLocationSensorsDriver *this)
{
  *((unsigned char *)this + 144) = 1;
  (*(void (**)(void))(**((void **)this + 26) + 128))(*((void *)this + 26));
  int v2 = (void *)*((void *)this + 7);
  return [v2 stopScanTimer];
}

uint64_t CLMicroLocationSensorsDriver::onWifiScanErrorBusy(CLMicroLocationSensorsDriver *this)
{
  *((unsigned char *)this + 144) = 1;
  (*(void (**)(void))(**((void **)this + 26) + 136))(*((void *)this + 26));
  int v2 = (void *)*((void *)this + 7);
  return [v2 stopScanTimer];
}

uint64_t CLMicroLocationSensorsDriver::onWiFiAssociatedState(CLMicroLocationSensorsDriver *this, ULWiFiAssociatedState *a2)
{
  return (*(uint64_t (**)(void, ULWiFiAssociatedState *))(**((void **)this + 26) + 40))(*((void *)this + 26), a2);
}

uint64_t CLMicroLocationSensorsDriver::onStopWifiRssiScanning(uint64_t this)
{
  *(void *)(this + 120) = 0;
  *(unsigned char *)(this + 128) = 0;
  return this;
}

uint64_t CLMicroLocationSensorsDriver::onStopWifiScanTimer(CLMicroLocationSensorsDriver *this, const ULWiFiScanStrategy *a2)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v3 = ULWiFiStrategyBuilder::expectedScanDuration(*((ULWiFiStrategyBuilder **)this + 17), a2);
  uint64_t v4 = +[ULDefaultsSingleton shared];
  uint64_t v5 = [v4 defaultsDictionary];

  uint64_t v6 = [NSString stringWithUTF8String:"ULWiFiScanExtensionInterfaceSlackTime"];
  uint64_t v7 = [v5 objectForKey:v6];
  if (v7 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    int v8 = [v7 intValue];
  }
  else {
    int v8 = [&unk_2704F1428 intValue];
  }
  int v9 = v8;

  uint64_t v10 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 26) + 32))(*((void *)this + 26), v3 + v9);
  if (v10)
  {
    uint64_t v11 = v10;
    BOOL v12 = *((unsigned char *)this + 144) == 0;
    unint64_t v13 = +[ULDefaultsSingleton shared];
    double v14 = v13;
    if (v12)
    {
      unsigned int v15 = [v13 defaultsDictionary];

      int v16 = [NSString stringWithUTF8String:"ULWifiRetryInitialDelay"];
      int v17 = [v15 objectForKey:v16];
      if (!v17 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
      {
        int v18 = [&unk_2704F13E0 intValue];
        goto LABEL_20;
      }
    }
    else
    {
      unsigned int v15 = [v13 defaultsDictionary];

      int v16 = [NSString stringWithUTF8String:"ULWifiErrorRetryDelay"];
      int v17 = [v15 objectForKey:v16];
      if (!v17 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
      {
        int v18 = [&unk_2704F13C8 intValue];
        goto LABEL_20;
      }
    }
    int v18 = [v17 intValue];
LABEL_20:
    int v23 = v18;

    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_10);
    }
    unsigned int v24 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
    {
      int v26 = 68289538;
      int v27 = 0;
      __int16 v28 = 2082;
      int v29 = "";
      __int16 v30 = 2050;
      *(void *)&double v31 = v11 + v23;
      __int16 v32 = 2050;
      uint64_t v33 = v23;
      _os_log_impl(&dword_25631F000, v24, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"SensorDriver, Wifi scan timer stopped but but scanned AP requirements not met, extend timer\", \"by duration (ms)\":%{public}lld, \"initial delay(ms)\":%{public}lld}", (uint8_t *)&v26, 0x26u);
    }
    [*((id *)this + 7) startScanTimerWithInterval:(double)(v11 + v23) / 1000.0];
    return [*((id *)this + 7) startScanWithStrategyType:*((void *)this + 17) initialDelay:(double)v23 / 1000.0];
  }
  uint64_t v19 = (*(uint64_t (**)(void))(**((void **)this + 26) + 120))(*((void *)this + 26));
  if (v19)
  {
    uint64_t v20 = v19;
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_10);
    }
    float v21 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      int v26 = 68289282;
      int v27 = 0;
      __int16 v28 = 2082;
      int v29 = "";
      __int16 v30 = 2050;
      double v31 = (double)v20;
      _os_log_impl(&dword_25631F000, v21, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"SensorsLogic, WiFi scan extention due to backlight on\", \"backlightOnExtention_s\":\"%{public}.09f\"}", (uint8_t *)&v26, 0x1Cu);
    }
    [*((id *)this + 7) startScanTimerWithInterval:(double)v20 / 1000.0];
    return [*((id *)this + 7) startScanWithStrategyType:*((void *)this + 17) initialDelay:0.0];
  }
  else
  {
    (*(void (**)(void))(**((void **)this + 26) + 152))(*((void *)this + 26));
    [*((id *)this + 7) stopScan];
    int v25 = *(uint64_t (**)(void))(**((void **)this + 26) + 24);
    return v25();
  }
}

void sub_25635B460(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationSensorsDriver::cancelWifiScan(CLMicroLocationSensorsDriver *this)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 128))
  {
    uint64_t v1 = this;
    if (onceToken_MicroLocation_Default == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    CLMicroLocationSensorsDriver::cancelWifiScan();
    __break(1u);
  }
  dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_10);
LABEL_3:
  int v2 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    CLMicroLocationUtils::scanActivityToString(*((unsigned char *)v1 + 128), __p);
    if (v6 >= 0) {
      uint64_t v3 = __p;
    }
    else {
      uint64_t v3 = (void **)__p[0];
    }
    *(_DWORD *)uint64_t buf = 68289282;
    int v8 = 0;
    __int16 v9 = 2082;
    uint64_t v10 = "";
    __int16 v11 = 2082;
    BOOL v12 = v3;
    _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"SensorsDriver, received cancel wifi scan\", \"scan activity\":%{public, location:escape_only}s}", buf, 0x1Cu);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
  }

  return [*((id *)v1 + 7) stopScan];
}

void sub_25635B610(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *CLMicroLocationSensorsDriver::setCurrentWifiChannelHistogram(uint64_t a1, uint64_t a2)
{
  std::vector<CLMicroLocationWiFiChannelHistogram>::__assign_with_size[abi:ne180100]<std::__wrap_iter<CLMicroLocationWiFiChannelHistogram*>,std::__wrap_iter<CLMicroLocationWiFiChannelHistogram*>>((char *)(a1 + 72), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  uint64_t v4 = *(char **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  unint64_t v6 = (v5 - *(void *)a2) >> 3;
  return std::vector<CLMicroLocationWiFiChannelHistogram>::__assign_with_size[abi:ne180100]<std::__wrap_iter<CLMicroLocationWiFiChannelHistogram*>,std::__wrap_iter<CLMicroLocationWiFiChannelHistogram*>>((char *)(a1 + 96), v4, v5, v6);
}

uint64_t CLMicroLocationSensorsDriver::onBleRssiMeasurement(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 208) + 48))();
}

uint64_t non-virtual thunk to'CLMicroLocationSensorsDriver::onBleRssiMeasurement(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 200) + 48))();
}

uint64_t CLMicroLocationSensorsDriver::onBleIdentityItem(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 208) + 56))();
}

uint64_t non-virtual thunk to'CLMicroLocationSensorsDriver::onBleIdentityItem(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 200) + 56))();
}

uint64_t CLMicroLocationSensorsDriver::startBleRssiSession(CLMicroLocationSensorsDriver *this, const CLMicroLocationUtils::BleScanConfiguration *a2)
{
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_10);
  }
  uint64_t v4 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_DEFAULT, "SensorsDriver, ble, start session", v7, 2u);
  }
  if (*((unsigned char *)a2 + 9)) {
    return (*(uint64_t (**)(void, const CLMicroLocationUtils::BleScanConfiguration *))(**((void **)this + 19)
  }
                                                                                                 + 16))(*((void *)this + 19), a2);
  if (!*((unsigned char *)this + 128))
  {
    *((unsigned char *)this + 128) = *((unsigned char *)a2 + 8);
    return (*(uint64_t (**)(void, const CLMicroLocationUtils::BleScanConfiguration *))(**((void **)this + 19)
                                                                                                 + 16))(*((void *)this + 19), a2);
  }
  started = (CLMicroLocationSensorsDriver *)CLMicroLocationSensorsDriver::startBleRssiSession();
  return CLMicroLocationSensorsDriver::stopBleRssiSession(started);
}

uint64_t CLMicroLocationSensorsDriver::stopBleRssiSession(CLMicroLocationSensorsDriver *this)
{
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_10);
  }
  int v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_DEFAULT, "SensorsDriver, ble, stop session", v4, 2u);
  }
  return (*(uint64_t (**)(void))(**((void **)this + 19) + 24))(*((void *)this + 19));
}

uint64_t CLMicroLocationSensorsDriver::activateBleScannersIfNeeded(CLMicroLocationSensorsDriver *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 19) + 32))();
}

uint64_t CLMicroLocationSensorsDriver::onUwbRangeMeasurements(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 208) + 64))();
}

uint64_t non-virtual thunk to'CLMicroLocationSensorsDriver::onUwbRangeMeasurements(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 184) + 64))();
}

uint64_t CLMicroLocationSensorsDriver::setRangingRate(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 32))();
}

uint64_t CLMicroLocationSensorsDriver::resetRangingRate(CLMicroLocationSensorsDriver *this)
{
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_10);
  }
  int v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_DEFAULT, "SensorsDriver, uwb, reset ranging rate", v4, 2u);
  }
  return (*(uint64_t (**)(void))(**((void **)this + 20) + 40))(*((void *)this + 20));
}

uint64_t CLMicroLocationSensorsDriver::startRanging(CLMicroLocationSensorsDriver *this)
{
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_10);
  }
  int v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_DEFAULT, "SensorsDriver, uwb, start session", v4, 2u);
  }
  return (*(uint64_t (**)(void))(**((void **)this + 20) + 16))(*((void *)this + 20));
}

uint64_t CLMicroLocationSensorsDriver::stopRanging(CLMicroLocationSensorsDriver *this)
{
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_10);
  }
  int v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_DEFAULT, "SensorsDriver, uwb, stop session", v4, 2u);
  }
  return (*(uint64_t (**)(void))(**((void **)this + 20) + 24))(*((void *)this + 20));
}

uint64_t CLMicroLocationSensorsDriver::onHomeNearbySessionStopped(CLMicroLocationSensorsDriver *this)
{
  v2.n128_f64[0] = cl::chrono::CFAbsoluteTimeClock::now();
  uint64_t v3 = *(uint64_t (**)(__n128))(**((void **)this + 26) + 112);
  return v3(v2);
}

uint64_t non-virtual thunk to'CLMicroLocationSensorsDriver::onHomeNearbySessionStopped(CLMicroLocationSensorsDriver *this)
{
  v2.n128_f64[0] = cl::chrono::CFAbsoluteTimeClock::now();
  uint64_t v3 = *(uint64_t (**)(__n128))(**((void **)this + 23) + 112);
  return v3(v2);
}

uint64_t CLMicroLocationSensorsDriver::onHomeNearbySessionCreated(CLMicroLocationSensorsDriver *this)
{
  v2.n128_f64[0] = cl::chrono::CFAbsoluteTimeClock::now();
  uint64_t v3 = *(uint64_t (**)(__n128))(**((void **)this + 26) + 112);
  return v3(v2);
}

uint64_t non-virtual thunk to'CLMicroLocationSensorsDriver::onHomeNearbySessionCreated(CLMicroLocationSensorsDriver *this)
{
  v2.n128_f64[0] = cl::chrono::CFAbsoluteTimeClock::now();
  uint64_t v3 = *(uint64_t (**)(__n128))(**((void **)this + 23) + 112);
  return v3(v2);
}

uint64_t CLMicroLocationSensorsDriver::onHomeNearbySessionSuspended(CLMicroLocationSensorsDriver *this)
{
  v2.n128_f64[0] = cl::chrono::CFAbsoluteTimeClock::now();
  uint64_t v3 = *(uint64_t (**)(__n128))(**((void **)this + 26) + 112);
  return v3(v2);
}

uint64_t non-virtual thunk to'CLMicroLocationSensorsDriver::onHomeNearbySessionSuspended(CLMicroLocationSensorsDriver *this)
{
  v2.n128_f64[0] = cl::chrono::CFAbsoluteTimeClock::now();
  uint64_t v3 = *(uint64_t (**)(__n128))(**((void **)this + 23) + 112);
  return v3(v2);
}

uint64_t CLMicroLocationSensorsDriver::onHomeNearbySessionResumed(CLMicroLocationSensorsDriver *this)
{
  v2.n128_f64[0] = cl::chrono::CFAbsoluteTimeClock::now();
  uint64_t v3 = *(uint64_t (**)(__n128))(**((void **)this + 26) + 112);
  return v3(v2);
}

uint64_t non-virtual thunk to'CLMicroLocationSensorsDriver::onHomeNearbySessionResumed(CLMicroLocationSensorsDriver *this)
{
  v2.n128_f64[0] = cl::chrono::CFAbsoluteTimeClock::now();
  uint64_t v3 = *(uint64_t (**)(__n128))(**((void **)this + 23) + 112);
  return v3(v2);
}

void CLMicroLocationSensorsDriver::onOdometryError(CLMicroLocationSensorsDriver *this, Entry a2)
{
  uint64_t v2 = *(void *)a2.var0.var0;
  uint64_t v3 = *((void *)this + 26);
  long long v5 = *(_OWORD *)*(void *)a2.var0.var0;
  uint64_t v4 = *(void **)(*(void *)a2.var0.var0 + 24);
  uint64_t v6 = *(void *)(*(void *)a2.var0.var0 + 16);
  id v7 = v4;
  (*(void (**)(uint64_t, long long *))(*(void *)v3 + 80))(v3, &v5);
}

void sub_25635BEE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void non-virtual thunk to'CLMicroLocationSensorsDriver::onOdometryError(CLMicroLocationSensorsDriver *this, Entry a2)
{
}

void CLMicroLocationSensorsDriver::onOdometryUpdate(CLMicroLocationSensorsDriver *this, Entry a2)
{
  uint64_t v2 = *(void *)a2.var0.var0;
  uint64_t v3 = *((void *)this + 26);
  long long v5 = *(_OWORD *)*(void *)a2.var0.var0;
  uint64_t v4 = *(void **)(*(void *)a2.var0.var0 + 24);
  uint64_t v6 = *(void *)(*(void *)a2.var0.var0 + 16);
  id v7 = v4;
  (*(void (**)(uint64_t, long long *))(*(void *)v3 + 72))(v3, &v5);
}

void sub_25635BF74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void non-virtual thunk to'CLMicroLocationSensorsDriver::onOdometryUpdate(CLMicroLocationSensorsDriver *this, Entry a2)
{
}

uint64_t CLMicroLocationSensorsDriver::startOdometryBackgroundUpdates(id *this)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_10);
  }
  uint64_t v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    __int16 v5 = 2082;
    uint64_t v6 = "";
    _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMicroLocationSensorsDriver, startOdometryBackgroundUpdates\"}", (uint8_t *)v4, 0x12u);
  }
  return [this[21] startBackgroundUpdates];
}

uint64_t CLMicroLocationSensorsDriver::stopOdometryBackgroundUpdates(id *this)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_10);
  }
  uint64_t v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    __int16 v5 = 2082;
    uint64_t v6 = "";
    _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"stopOdometryBackgroundUpdates, stopOdometryBackgroundUpdates\"}", (uint8_t *)v4, 0x12u);
  }
  return [this[21] stopBackgroundUpdates];
}

uint64_t CLMicroLocationSensorsDriver::onMotionMeasurements(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 208) + 88))();
}

{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 208) + 88))();
}

uint64_t non-virtual thunk to'CLMicroLocationSensorsDriver::onMotionMeasurements(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 176) + 88))();
}

{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 168) + 88))();
}

uint64_t CLMicroLocationSensorsDriver::onFailureToReceiveGeofenceStatusReports(CLMicroLocationSensorsDriver *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 26) + 96))();
}

uint64_t non-virtual thunk to'CLMicroLocationSensorsDriver::onFailureToReceiveGeofenceStatusReports(CLMicroLocationSensorsDriver *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 22) + 96))();
}

uint64_t CLMicroLocationSensorsDriver::onStopMotionMeasurements(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 208) + 104))();
}

uint64_t non-virtual thunk to'CLMicroLocationSensorsDriver::onStopMotionMeasurements(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 168) + 104))();
}

uint64_t CLMicroLocationSensorsDriver::logEvent(CLMicroLocationSensorsDriver *this, const Entry *a2)
{
  return (*(uint64_t (**)(void, const Entry *))(**((void **)this + 26) + 144))(*((void *)this + 26), a2);
}

uint64_t non-virtual thunk to'CLMicroLocationSensorsDriver::logEvent(CLMicroLocationSensorsDriver *this, const Entry *a2)
{
  return (*(uint64_t (**)(void, const Entry *))(**((void **)this + 22) + 144))(*((void *)this + 22), a2);
}

{
  return (*(uint64_t (**)(void, const Entry *))(**((void **)this + 21) + 144))(*((void *)this + 21), a2);
}

{
  return (*(uint64_t (**)(void, const Entry *))(**((void **)this + 20) + 144))(*((void *)this + 20), a2);
}

uint64_t CLMicroLocationSensorsDriver::setMotionFence(CLMicroLocationSensorsDriver *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 23) + 16))();
}

uint64_t CLMicroLocationSensorsDriver::clearMotionFence(CLMicroLocationSensorsDriver *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 23) + 24))();
}

uint64_t CLMicroLocationSensorsDriver::startMotionSession(CLMicroLocationSensorsDriver *this)
{
  (*(void (**)(void))(**((void **)this + 23) + 32))(*((void *)this + 23));
  uint64_t v2 = *(uint64_t (**)(void))(**((void **)this + 24) + 32);
  return v2();
}

uint64_t CLMicroLocationSensorsDriver::stopMotionSession(CLMicroLocationSensorsDriver *this)
{
  (*(void (**)(void))(**((void **)this + 23) + 40))(*((void *)this + 23));
  uint64_t v2 = *(uint64_t (**)(void))(**((void **)this + 24) + 40);
  return v2();
}

uint64_t CLMicroLocationSensorsDriver::setStopDetection(CLMicroLocationSensorsDriver *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 24) + 24))();
}

uint64_t CLMicroLocationSensorsDriver::clearStopDetection(CLMicroLocationSensorsDriver *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 24) + 16))();
}

uint64_t CLMicroLocationSensorsDriver::startCustomLoiRecordingFence(CLMicroLocationSensorsDriver *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 25) + 16))();
}

uint64_t CLMicroLocationSensorsDriver::teardownCustomLoiRecordingFence(CLMicroLocationSensorsDriver *this)
{
  uint64_t result = *((void *)this + 25);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

uint64_t CLMicroLocationSensorsDriver::onRecordingFenceBreach(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 208) + 160))();
}

uint64_t non-virtual thunk to'CLMicroLocationSensorsDriver::onRecordingFenceBreach(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 160))();
}

uint64_t CLMicroLocationSensorsDriver::getWiFiScanExpectedDuration(ULWiFiStrategyBuilder **this, const ULWiFiScanStrategy *a2)
{
  return ULWiFiStrategyBuilder::expectedScanDuration(this[17], a2);
}

void CLMicroLocationSensorsDriver::~CLMicroLocationSensorsDriver(CLMicroLocationSensorsDriver *this)
{
  CLMicroLocationSensorsDriver::~CLMicroLocationSensorsDriver(this);
  JUMPOUT(0x25A2A6340);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;

  *(void *)this = &unk_2704DACB0;
  *((void *)this + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = &unk_2704DAD78;
  *((void *)this + 2) = &unk_2704DADA8;
  *((void *)this + 3) = &unk_2704DADD8;
  *((void *)this + 4) = &unk_2704DAE20;
  *((void *)this + 5) = &unk_2704DAE58;
  *((void *)this + 6) = &unk_2704DAE90;
  uint64_t v2 = *((void *)this + 25);
  *((void *)this + 25) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 24);
  *((void *)this + 24) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 23);
  *((void *)this + 23) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  __int16 v5 = *((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 19);
  *((void *)this + 19) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }

  uint64_t v7 = (void *)*((void *)this + 12);
  if (v7)
  {
    *((void *)this + 13) = v7;
    operator delete(v7);
  }
  int v8 = (void *)*((void *)this + 9);
  if (v8)
  {
    *((void *)this + 10) = v8;
    operator delete(v8);
  }
}

void non-virtual thunk to'CLMicroLocationSensorsDriver::~CLMicroLocationSensorsDriver(CLMicroLocationSensorsDriver *this)
{
}

{
  uint64_t vars8;

  CLMicroLocationSensorsDriver::~CLMicroLocationSensorsDriver((CLMicroLocationSensorsDriver *)((char *)this - 8));
  JUMPOUT(0x25A2A6340);
}

{
  CLMicroLocationSensorsDriver::~CLMicroLocationSensorsDriver((CLMicroLocationSensorsDriver *)((char *)this - 16));
}

{
  uint64_t vars8;

  CLMicroLocationSensorsDriver::~CLMicroLocationSensorsDriver((CLMicroLocationSensorsDriver *)((char *)this - 16));
  JUMPOUT(0x25A2A6340);
}

{
  CLMicroLocationSensorsDriver::~CLMicroLocationSensorsDriver((CLMicroLocationSensorsDriver *)((char *)this - 24));
}

{
  uint64_t vars8;

  CLMicroLocationSensorsDriver::~CLMicroLocationSensorsDriver((CLMicroLocationSensorsDriver *)((char *)this - 24));
  JUMPOUT(0x25A2A6340);
}

{
  CLMicroLocationSensorsDriver::~CLMicroLocationSensorsDriver((CLMicroLocationSensorsDriver *)((char *)this - 32));
}

{
  uint64_t vars8;

  CLMicroLocationSensorsDriver::~CLMicroLocationSensorsDriver((CLMicroLocationSensorsDriver *)((char *)this - 32));
  JUMPOUT(0x25A2A6340);
}

{
  CLMicroLocationSensorsDriver::~CLMicroLocationSensorsDriver((CLMicroLocationSensorsDriver *)((char *)this - 40));
}

{
  uint64_t vars8;

  CLMicroLocationSensorsDriver::~CLMicroLocationSensorsDriver((CLMicroLocationSensorsDriver *)((char *)this - 40));
  JUMPOUT(0x25A2A6340);
}

{
  CLMicroLocationSensorsDriver::~CLMicroLocationSensorsDriver((CLMicroLocationSensorsDriver *)((char *)this - 48));
}

{
  uint64_t vars8;

  CLMicroLocationSensorsDriver::~CLMicroLocationSensorsDriver((CLMicroLocationSensorsDriver *)((char *)this - 48));
  JUMPOUT(0x25A2A6340);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_5()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

uint64_t std::set<unsigned int>::set[abi:ne180100](uint64_t a1, unsigned int *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 4 * a3;
    do
    {
      std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>((uint64_t **)a1, v4, a2, a2);
      ++a2;
      v6 -= 4;
    }
    while (v6);
  }
  return a1;
}

void sub_25635CA38(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>(uint64_t **a1, uint64_t *a2, unsigned int *a3, _DWORD *a4)
{
  uint64_t v6 = std::__tree<unsigned int>::__find_equal<unsigned int>(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    int v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v7 + 7) = *a4;
    std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<unsigned int>::__find_equal<unsigned int>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int *a5)
{
  __int16 v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, unsigned int v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    int v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      __int16 v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        __int16 v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        uint64_t v13 = v10;
      }
      while (v14);
    }
    unsigned int v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          int v17 = (uint64_t *)v16;
          unsigned int v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          __int16 v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        __int16 v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      int v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    BOOL v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      BOOL v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      uint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          float v21 = (uint64_t *)v20;
          unsigned int v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          __int16 v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        __int16 v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      float v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

CLMicroLocationProto::WiFiRssi *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,CLMiLoProtobufWrapper::WiFiRssi *,CLMiLoProtobufWrapper::WiFiRssi *,CLMiLoProtobufWrapper::WiFiRssi *,0>(CLMicroLocationProto::WiFiRssi *a1, CLMicroLocationProto::WiFiRssi *a2, CLMicroLocationProto::WiFiRssi *this)
{
  uint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  __int16 v5 = a2;
  do
  {
    CLMicroLocationProto::WiFiRssi::CopyFrom(this, v4);
    *((_DWORD *)this + 12) = *((_DWORD *)v4 + 12);
    this = (CLMicroLocationProto::WiFiRssi *)((char *)this + 56);
    uint64_t v4 = (CLMicroLocationProto::WiFiRssi *)((char *)v4 + 56);
  }
  while (v4 != v5);
  return v5;
}

char *std::vector<CLMicroLocationWiFiChannelHistogram>::__assign_with_size[abi:ne180100]<std::__wrap_iter<CLMicroLocationWiFiChannelHistogram*>,std::__wrap_iter<CLMicroLocationWiFiChannelHistogram*>>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  unsigned int v7 = result;
  uint64_t v8 = *((void *)result + 2);
  __int16 v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<CLMicroLocationWiFiChannelHistogram>::__vallocate[abi:ne180100](v7, v11);
    uint64_t v13 = (char *)v7[1];
    BOOL v12 = (void **)(v7 + 1);
    __int16 v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      unsigned int v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  BOOL v12 = (void **)(result + 8);
  BOOL v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, 8 * v15);
    __int16 v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    unsigned int v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *BOOL v12 = &v9[v17];
  return result;
}

double CLMicroLocationFingerprintDistanceFunction::euclideanLike(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  double v4 = COERCE_DOUBLE(CLMicroLocationFingerprintDistanceFunction::computeSumSquaredDifferenceAndNumIntersect(a1, a2, a3, a4));
  if (v5) {
    return sqrt(v4 / (double)v5);
  }
  else {
    return 1.79769313e308;
  }
}

uint64_t CLMicroLocationFingerprintDistanceFunction::computeSumSquaredDifferenceAndNumIntersect(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  BOOL v14 = &unk_2704DAFD8;
  __asm { FMOV            V0.2D, #1.0 }
  long long v15 = _Q0;
  uint64_t v16 = 0x4008000000000000;
  long long v12 = _Q0;
  uint64_t v13 = 0x3FF0000000000000;
  unint64_t v11 = &unk_2704DB028;
  CLMicroLocationFingerprintDistanceFunction::computeWeightedEuclideanComponentsAndNumItersect(a1, a2, a3, (uint64_t)&v14, (uint64_t)&v11, a4, (uint64_t)&v10);
  return v10;
}

double CLMicroLocationFingerprintDistanceFunction::jaccardLike(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)a3;
  if (*(unsigned char *)(a3 + 8)) {
    uint64_t v8 = (~*(unsigned char *)(a1 + 56) & ~*(_DWORD *)(a2 + 56)) & v8 & 0x7F;
  }
  uint64_t v14 = v8;
  __int16 v9 = *(void **)(a1 + 16);
  if (v9)
  {
    uint64_t v10 = 0;
    do
    {
      unint64_t v11 = (double *)std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::find<CLMicroLocationFingerprint::Measurement>((void *)a2, (uint64_t)(v9 + 2));
      if (v11) {
        v10 += CLMicroLocationFingerprintDistanceFunction::shouldAccountMeasurements(&v14, a4, (uint64_t)(v9 + 2), v11[2]);
      }
      __int16 v9 = (void *)*v9;
    }
    while (v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v12 = CLMicroLocationFingerprintDistanceFunction::computeNumUnion(a1, a2, v10, (uint64_t *)a3, a4);
  if (v12) {
    return (double)(unint64_t)(v12 - v10) / (double)(unint64_t)v12;
  }
  else {
    return 1.79769313e308;
  }
}

uint64_t CLMicroLocationFingerprintDistanceFunction::computeNumUnion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9 = *a4;
  if (*((unsigned char *)a4 + 8)) {
    uint64_t v9 = (~*(unsigned char *)(a1 + 56) & ~*(_DWORD *)(a2 + 56)) & v9 & 0x7F;
  }
  uint64_t v14 = v9;
  uint64_t v10 = *(void **)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 0;
    do
    {
      v11 += CLMicroLocationFingerprintDistanceFunction::shouldAccountMeasurements(&v14, a5, (uint64_t)(v10 + 2), *(double *)(a2 + 144));
      uint64_t v10 = (void *)*v10;
    }
    while (v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  for (std::vector<int>::pointer i = *(void **)(a2 + 16); i; std::vector<int>::pointer i = (void *)*i)
    v11 += CLMicroLocationFingerprintDistanceFunction::shouldAccountMeasurements(&v14, a5, (uint64_t)(i + 2), *(double *)(a1 + 144));
  return v11 - a3;
}

uint64_t CLMicroLocationFingerprintDistanceFunction::combinedEuclideanJaccard(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  CLMicroLocationFingerprintDistanceFunction::computeSumSquaredDifferenceAndNumIntersect(a1, a2, a3, a4);
  return CLMicroLocationFingerprintDistanceFunction::computeNumUnion(a1, a2, v8, a3, a4);
}

double CLMicroLocationFingerprintDistanceFunction::weightedEuclideanJaccardDistance(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, uint64_t a11)
{
  if (!(*(void *)(a1 + 24) | *(void *)(a2 + 24))) {
    return 1.79769313e308;
  }
  double v11 = a9;
  CLMicroLocationFingerprintDistanceFunction::computeWeightedEuclideanComponentsAndNumItersect(a1, a2, (uint64_t *)a8, a3, a4, a11, (uint64_t)&v28);
  if (!v30) {
    return v11;
  }
  uint64_t v19 = *(void *)a8;
  if (*(unsigned char *)(a8 + 8)) {
    uint64_t v19 = (~*(unsigned char *)(a1 + 56) & ~*(_DWORD *)(a2 + 56)) & v19 & 0x7F;
  }
  *(void *)uint64_t buf = v19;
  uint64_t v20 = *(void **)(a1 + 16);
  if (v20)
  {
    double v21 = 0.0;
    double v22 = 0.0;
    do
    {
      if (CLMicroLocationFingerprintDistanceFunction::shouldAccountMeasurements(buf, a11, (uint64_t)(v20 + 2), *(double *)(a2 + 144)))
      {
        if (std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::find<CLMicroLocationFingerprint::Measurement>((void *)a2, (uint64_t)(v20 + 2)))
        {
          double v22 = v22 + (*(double (**)(uint64_t, void *))(*(void *)a5 + 16))(a5, v20 + 2);
        }
        else
        {
          double v21 = v21 + (*(double (**)(uint64_t, void *))(*(void *)a6 + 16))(a6, v20 + 2);
        }
      }
      uint64_t v20 = (void *)*v20;
    }
    while (v20);
  }
  else
  {
    double v22 = 0.0;
    double v21 = 0.0;
  }
  for (std::vector<int>::pointer i = *(void **)(a2 + 16); i; std::vector<int>::pointer i = (void *)*i)
  {
    if (CLMicroLocationFingerprintDistanceFunction::shouldAccountMeasurements(buf, a11, (uint64_t)(i + 2), *(double *)(a1 + 144))&& !std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::find<CLMicroLocationFingerprint::Measurement>((void *)a1, (uint64_t)(i + 2))&& ((*(uint64_t (**)(uint64_t, void *))(*(void *)a7 + 16))(a7, i + 2) & 1) == 0)
    {
      double v21 = v21 + (*(double (**)(uint64_t, void *))(*(void *)a6 + 16))(a6, i + 2);
    }
  }
  if (v29 == 0.0 || (double v24 = v22 + v21, v22 + v21 == 0.0))
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_11);
    }
    int v27 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_25631F000, v27, OS_LOG_TYPE_ERROR, "euclidean denominator or jaccardDenominator are 0, this can only happen if weights are 0, check configuration!", buf, 2u);
    }
    return 1.79769313e308;
  }
  if (a10 <= 0.0 || a10 > 1.0) {
    CLMicroLocationFingerprintDistanceFunction::weightedEuclideanJaccardDistance();
  }
  double v25 = v29 / (v24 + v29);
  if (a10 < 1.0) {
    double v25 = fmin(v25 / a10, 1.0);
  }
  return v21 / v24 * v11 * (1.0 - v25) + sqrt(v28 / (double)(unint64_t)v29) * v25;
}

uint64_t CLMicroLocationFingerprintDistanceFunction::computeWeightedEuclideanComponentsAndNumItersect@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12 = *a3;
  if (*((unsigned char *)a3 + 8)) {
    uint64_t v12 = (~*(unsigned char *)(result + 56) & ~*(_DWORD *)(a2 + 56)) & v12 & 0x7F;
  }
  uint64_t v21 = v12;
  uint64_t v13 = *(uint64_t **)(result + 16);
  if (v13)
  {
    uint64_t v14 = 0;
    double v15 = 0.0;
    double v16 = 0.0;
    do
    {
      uint64_t result = (uint64_t)std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::find<CLMicroLocationFingerprint::Measurement>((void *)a2, (uint64_t)(v13 + 2));
      if (result)
      {
        uint64_t v17 = result;
        uint64_t result = CLMicroLocationFingerprintDistanceFunction::shouldAccountMeasurements(&v21, a6, (uint64_t)(v13 + 2), *(double *)(result + 16));
        if (result)
        {
          double v18 = (*(double (**)(uint64_t, uint64_t *))(*(void *)a5 + 16))(a5, v13 + 2);
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a4 + 16))(a4, v13 + 2);
          if (*((_DWORD *)v13 + 6) != *(_DWORD *)(v17 + 24)) {
            CLMicroLocationFingerprintDistanceFunction::computeWeightedEuclideanComponentsAndNumItersect();
          }
          double v20 = (float)(*((float *)v13 + 7) - *(float *)(v17 + 28));
          double v16 = v16 + v19 * v20 * (v19 * v20) * v18;
          ++v14;
          double v15 = v15 + v18;
        }
      }
      uint64_t v13 = (uint64_t *)*v13;
    }
    while (v13);
  }
  else
  {
    uint64_t v14 = 0;
    double v16 = 0.0;
    double v15 = 0.0;
  }
  *(double *)a7 = v16;
  *(double *)(a7 + 8) = v15;
  *(void *)(a7 + 16) = v14;
  return result;
}

void CLMicroLocationFingerprintDistanceFunction::tanimotoLike(CLMicroLocationFingerprintDistanceFunction *this, const CLMicroLocationFingerprint *a2, const CLMicroLocationFingerprint *a3, long double a4)
{
  unsigned int v7 = (float *)*((void *)this + 2);
  if (v7)
  {
    double v8 = 0.0;
    double v9 = 0.0;
    double v10 = 0.0;
    do
    {
      double v11 = pow(a4, v7[7]);
      uint64_t v12 = (float *)std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::find<CLMicroLocationFingerprint::Measurement>(a2, (uint64_t)(v7 + 4));
      if (v12)
      {
        long double v13 = pow(a4, v12[7]);
        double v9 = v9 + v11 * v13;
        double v10 = v10 + v13 * v13;
      }
      double v8 = v8 + v11 * v11;
      unsigned int v7 = *(float **)v7;
    }
    while (v7);
  }
  else
  {
    double v10 = 0.0;
  }
  for (std::vector<int>::pointer i = (float *)*((void *)a2 + 2); i; std::vector<int>::pointer i = *(float **)i)
  {
    if (!std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::find<CLMicroLocationFingerprint::Measurement>(this, (uint64_t)(i + 4)))
    {
      long double v15 = pow(a4, i[7]);
      double v10 = v10 + v15 * v15;
    }
  }
}

void CLMicroLocationUtils::PerSourceWeights<double>::~PerSourceWeights()
{
}

double CLMicroLocationUtils::PerSourceWeights<double>::operator[](double *a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 8);
  switch(v2)
  {
    case 6:
      return a1[3];
    case 5:
      return a1[2];
    case 1:
      return a1[1];
  }
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_11);
  }
  double v4 = logObject_MicroLocation_Default;
  double v3 = 0.0;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)unsigned int v6 = 0;
    _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_ERROR, "Datatype not supported", v6, 2u);
  }
  return v3;
}

void CLMicroLocationUtils::ConstantWeight<double>::~ConstantWeight()
{
}

BOOL CLMicroLocationFingerprintDistanceFunction::shouldAccountMeasurements(void *a1, uint64_t a2, uint64_t a3, double a4)
{
  double v6 = a4;
  unsigned int v4 = *(_DWORD *)(a3 + 8);
  if (v4 >= 7) {
    std::__throw_out_of_range[abi:ne180100]("bitset test argument out of range");
  }
  return ((*a1 >> v4) & 1) != 0
      && (!*(unsigned char *)(a2 + 56) || (CLMicroLocationAnchorAppearanceMap::isAnchorValid(a2, a3, &v6) & 1) != 0);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_6()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

void *std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::find<CLMicroLocationFingerprint::Measurement>(void *a1, uint64_t a2)
{
  unint64_t v4 = CLMicroLocationFingerprint::Measurement::HashMeasurement::operator()((uint64_t)(a1 + 3), a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  double v10 = *(void **)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  double v11 = (void *)*v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = v11[1];
      if (v6 == v13)
      {
        if (CLMicroLocationFingerprint::Measurement::PredicateMeasurement::operator()(v12, (uint64_t)(v11 + 2), a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      double v11 = (void *)*v11;
    }
    while (v11);
  }
  return v11;
}

void sub_25635DDC0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v5 - 136));
  _Unwind_Resume(a1);
}

void *CLMacAddress::newFromStrStrict(const std::string *a1)
{
  if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
    if (!size) {
      goto LABEL_15;
    }
    if (size != 12) {
      goto LABEL_17;
    }
    uint64_t v1 = (const std::string *)a1->__r_.__value_.__r.__words[0];
  }
  else
  {
    uint64_t v1 = a1;
    if (*((unsigned char *)&a1->__r_.__value_.__s + 23) != 12)
    {
      if (*((unsigned char *)&a1->__r_.__value_.__s + 23))
      {
LABEL_17:
        std::string::basic_string[abi:ne180100]<0>(v8, "size");
        uint64_t v6 = CLMacAddress::newFromMalformedMac();
LABEL_19:
        unint64_t v4 = (void *)v6;
        goto LABEL_20;
      }
LABEL_15:
      std::string::basic_string[abi:ne180100]<0>(v8, "empty");
      std::string::basic_string[abi:ne180100]<0>(v14, " ");
      unint64_t v4 = (void *)CLMacAddress::newFromMalformedMac();
      if (v15 < 0) {
        operator delete(v14[0]);
      }
LABEL_20:
      if (SHIBYTE(v9) < 0) {
        operator delete(v8[0]);
      }
      return v4;
    }
  }
  for (uint64_t i = 0; i != 12; ++i)
  {
    if (v1->__r_.__value_.__s.__data_[i] < 0
      || (*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v1->__r_.__value_.__s.__data_[i] + 60) & 0x10000) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(v8, "nonhex");
      uint64_t v6 = CLMacAddress::newFromMalformedMac();
      goto LABEL_19;
    }
  }
  v14[0] = 0;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t *)v8, a1, 24);
  *(_DWORD *)((char *)&v8[1] + *((void *)v8[0] - 3)) = *(_DWORD *)((unsigned char *)&v8[1] + *((void *)v8[0] - 3)) & 0xFFFFFFB5 | 8;
  MEMORY[0x25A2A6100](v8, v14);
  unint64_t v4 = v14[0];
  v8[0] = *(void **)MEMORY[0x263F8C2B8];
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void **)((char *)v8 + *((void *)v8[0] - 3)) = *(void **)(MEMORY[0x263F8C2B8] + 64);
  uint64_t v9 = v5;
  uint64_t v10 = MEMORY[0x263F8C318] + 16;
  if (v12 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x25A2A6280](&v13);
  return v4;
}

void sub_25635E7D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

uint64_t CLMacAddress::newFromMalformedMac()
{
  std::string::basic_string[abi:ne180100]<0>(__p, "ff:ff:ff:ff:ff:ff");
  uint64_t v0 = CLMacAddress::newFromCLStr(__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return v0;
}

void sub_25635E874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t *a1, const std::string *a2, int a3)
{
  uint64_t v6 = MEMORY[0x263F8C328] + 104;
  a1[16] = MEMORY[0x263F8C328] + 104;
  uint8x8_t v7 = a1 + 2;
  uint64_t v8 = MEMORY[0x263F8C328] + 64;
  a1[2] = MEMORY[0x263F8C328] + 64;
  uint64_t v9 = (uint64_t)(a1 + 3);
  uint64_t v10 = (void *)MEMORY[0x263F8C2B8];
  uint64_t v11 = *(void *)(MEMORY[0x263F8C2B8] + 24);
  uint64_t v12 = *(void *)(MEMORY[0x263F8C2B8] + 16);
  *a1 = v12;
  *(uint64_t *)((char *)a1 + *(void *)(v12 - CLMicroLocationLogic::triggerLearning((CLMicroLocationLogic *)((char *)this - 24)) = v11;
  a1[1] = 0;
  uint64_t v13 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v13, a1 + 3);
  uint64_t v14 = MEMORY[0x263F8C328] + 24;
  v13[1].__vftable = 0;
  v13[1].__fmtflags_ = -1;
  uint64_t v15 = v10[5];
  uint64_t v16 = v10[4];
  a1[2] = v16;
  *(void *)((char *)v7 + *(void *)(v16 - CLMicroLocationLogic::triggerLearning((CLMicroLocationLogic *)((char *)this - 24)) = v15;
  uint64_t v17 = v10[1];
  *a1 = v17;
  *(uint64_t *)((char *)a1 + *(void *)(v17 - CLMicroLocationLogic::triggerLearning((CLMicroLocationLogic *)((char *)this - 24)) = v10[6];
  *a1 = v14;
  a1[16] = v6;
  a1[2] = v8;
  std::stringbuf::basic_stringbuf[abi:ne180100](v9, a2, a3);
  return a1;
}

void sub_25635EB2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t CLMacAddress::newFromStr(char *a1)
{
  uint64_t v1 = a1;
  if ((a1[23] & 0x80000000) == 0)
  {
    uint64_t v2 = a1[23];
    if (a1[23])
    {
      memset(&__str, 0, sizeof(__str));
      goto LABEL_6;
    }
LABEL_18:
    std::string::basic_string[abi:ne180100]<0>(&__str, "empty");
    std::string::basic_string[abi:ne180100]<0>(&__p, " ");
    uint64_t v10 = CLMacAddress::newFromMalformedMac();
    goto LABEL_30;
  }
  uint64_t v2 = *((void *)a1 + 1);
  if (!v2) {
    goto LABEL_18;
  }
  memset(&__str, 0, sizeof(__str));
  uint64_t v1 = *(char **)a1;
LABEL_6:
  uint64_t v3 = MEMORY[0x263EF8318];
  do
  {
    unsigned int v4 = *v1;
    if ((v4 & 0x80000000) != 0 || (*(_DWORD *)(v3 + 4 * v4 + 60) & 0x10000) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "nonhex");
      uint64_t v10 = CLMacAddress::newFromMalformedMac();
      goto LABEL_30;
    }
    std::string::value_type v5 = __tolower(v4);
    std::string::push_back(&__str, v5);
    ++v1;
    --v2;
  }
  while (v2);
  std::string::size_type size = __str.__r_.__value_.__l.__size_;
  std::string::size_type v7 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  memset(&__p, 0, sizeof(__p));
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v7 = __str.__r_.__value_.__l.__size_;
  }
  if (v7 > 0xB)
  {
    std::string::operator=(&__p, &__str);
  }
  else
  {
    BOOL v8 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    if (size == 12)
    {
      std::string::size_type v9 = 12;
    }
    else
    {
      unint64_t v11 = 0;
      do
      {
        std::string::push_back(&__p, 48);
        ++v11;
        BOOL v8 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v9 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v9 = __str.__r_.__value_.__l.__size_;
        }
      }
      while (v11 < 12 - v9);
    }
    if (v8) {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    else {
      p_str = &__str;
    }
    std::string::append(&__p, (const std::string::value_type *)p_str, v9);
  }
  uint64_t v10 = (uint64_t)CLMacAddress::newFromStrStrict(&__p);
LABEL_30:
  uint64_t v13 = v10;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return v13;
}

void sub_25635ED08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CLMacAddress::newFromCLStr(uint64_t *a1)
{
  if (*((char *)a1 + 23) < 0)
  {
    uint64_t v1 = a1[1];
    if (!v1)
    {
LABEL_24:
      std::string::basic_string[abi:ne180100]<0>(v12, "empty");
      std::string::basic_string[abi:ne180100]<0>(&__p, " ");
      uint64_t v3 = CLMacAddress::newFromMalformedMac();
      if (v11 < 0) {
        operator delete(__p);
      }
LABEL_29:
      if (v13 < 0) {
        operator delete(v12[0]);
      }
      return v3;
    }
    a1 = (uint64_t *)*a1;
  }
  else
  {
    uint64_t v1 = *((unsigned __int8 *)a1 + 23);
    if (!*((unsigned char *)a1 + 23)) {
      goto LABEL_24;
    }
  }
  int v2 = 0;
  uint64_t v3 = 0;
  char v4 = 0;
  int v5 = 0;
  do
  {
    int v6 = *((char *)a1 + v1 - 1);
    if (v6 == 58)
    {
      ++v5;
      if (v2 == 2)
      {
        int v2 = 0;
        goto LABEL_20;
      }
      if (v2 != 1)
      {
        std::string::basic_string[abi:ne180100]<0>(v12, "multibyte");
        uint64_t v8 = CLMacAddress::newFromMalformedMac();
        goto LABEL_28;
      }
      int v2 = 0;
    }
    else
    {
      int v7 = v6 - 48;
      if ((v6 - 48) > 9)
      {
        if ((v6 - 65) > 5)
        {
          if ((v6 - 97) > 5) {
            goto LABEL_26;
          }
          int v7 = v6 - 87;
        }
        else
        {
          int v7 = v6 - 55;
        }
      }
      if (v7 == -1)
      {
LABEL_26:
        std::string::basic_string[abi:ne180100]<0>(v12, "nonhex");
        uint64_t v8 = CLMacAddress::newFromMalformedMac();
        goto LABEL_28;
      }
      v3 += (uint64_t)v7 << v4;
      ++v2;
    }
    v4 += 4;
LABEL_20:
    --v1;
  }
  while (v1);
  if (v5 && v5 != 5)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "colons");
    uint64_t v8 = CLMacAddress::newFromMalformedMac();
LABEL_28:
    uint64_t v3 = v8;
    goto LABEL_29;
  }
  return v3;
}

void sub_25635EED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL CLMacAddress::operator==(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t CLMacAddress::str(CLMacAddress *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
  char v5 = 48;
  uint64_t v1 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, &v5);
  uint64_t v2 = *v1;
  *(uint64_t *)((char *)v1 + *(void *)(*v1 - 24) + 24) = 12;
  *(_DWORD *)((char *)v1 + *(void *)(v2 - 24) + 8) = *(_DWORD *)((unsigned char *)v1 + *(void *)(v2 - 24) + 8) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  std::stringbuf::str();
  v6[0] = *MEMORY[0x263F8C2B8];
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v6 + *(void *)(v6[0] - CLMicroLocationLogic::triggerLearning((CLMicroLocationLogic *)((char *)this - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v7[0] = v3;
  v7[1] = MEMORY[0x263F8C318] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x25A2A6280](&v9);
}

void sub_25635F110(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::operator<<[abi:ne180100]<std::char_traits<char>>(void *a1, char *a2)
{
  uint64_t v3 = (char *)a1 + *(void *)(*a1 - 24);
  int v4 = *a2;
  if (*((_DWORD *)v3 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
    char v5 = std::locale::use_facet(&v8, MEMORY[0x263F8C108]);
    int v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(&v8);
    *((_DWORD *)v3 + 36) = v6;
  }
  *((_DWORD *)v3 + 36) = v4;
  return a1;
}

void sub_25635F1E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void CLMacAddress::toPrettyStr(CLMacAddress *this@<X0>, std::string *a2@<X8>)
{
  CLMacAddress::str((uint64_t *)__p, this);
  uint64_t v3 = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  while (1)
  {
    unsigned __int8 v4 = v8;
    if ((char)v8 < 0) {
      break;
    }
    if ((unint64_t)v3 >= v8) {
      return;
    }
LABEL_6:
    if (v3)
    {
      std::string::push_back(a2, 58);
      unsigned __int8 v4 = v8;
    }
    if ((v4 & 0x80u) == 0) {
      char v5 = __p;
    }
    else {
      char v5 = (void **)__p[0];
    }
    std::string::push_back(a2, v3[(void)v5]);
    if ((v8 & 0x80u) == 0) {
      int v6 = __p;
    }
    else {
      int v6 = (void **)__p[0];
    }
    std::string::push_back(a2, v3[(void)v6 + 1]);
    v3 += 2;
  }
  if (v3 < __p[1]) {
    goto LABEL_6;
  }
  operator delete(__p[0]);
}

void sub_25635F2C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CLMacAddress::toCLStr(CLMacAddress *this@<X0>, std::string *a2@<X8>)
{
  CLMacAddress::str((uint64_t *)__p, this);
  uint64_t v3 = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  while (1)
  {
    unsigned __int8 v4 = v10;
    if ((char)v10 < 0) {
      break;
    }
    if ((unint64_t)v3 >= v10) {
      return;
    }
LABEL_6:
    if (v3)
    {
      std::string::push_back(a2, 58);
      unsigned __int8 v4 = v10;
    }
    char v5 = (void **)__p[0];
    if ((v4 & 0x80u) == 0) {
      int v6 = __p;
    }
    else {
      int v6 = (void **)__p[0];
    }
    int v7 = v3[(void)v6];
    if (v7 != 48)
    {
      std::string::push_back(a2, v7);
      unsigned __int8 v4 = v10;
      char v5 = (void **)__p[0];
    }
    if ((v4 & 0x80u) == 0) {
      unsigned __int8 v8 = __p;
    }
    else {
      unsigned __int8 v8 = v5;
    }
    std::string::push_back(a2, v3[(void)v8 + 1]);
    v3 += 2;
  }
  if (v3 < __p[1]) {
    goto LABEL_6;
  }
  operator delete(__p[0]);
}

void sub_25635F3C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t CLMacAddress::toUint64(CLMacAddress *this)
{
  return this->var0;
}

uint64_t std::stringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6 = std::streambuf::basic_streambuf();
  *(void *)uint64_t v6 = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1);
  return a1;
}

void sub_25635F478(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  *(void *)(a1 + CLMicroLocationSensorsLogic::stopOdometryMonitoringIfRunning(this + 88) = 0;
  uint64_t v2 = (std::string *)(a1 + 64);
  char v3 = *(unsigned char *)(a1 + 87);
  if (v3 < 0)
  {
    unsigned __int8 v4 = *(std::string **)(a1 + 64);
    unint64_t v5 = *(void *)(a1 + 72);
  }
  else
  {
    unsigned __int8 v4 = v2;
    unint64_t v5 = *(unsigned __int8 *)(a1 + 87);
  }
  int v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(void *)(a1 + CLMicroLocationSensorsLogic::stopOdometryMonitoringIfRunning(this + 88) = (char *)v4 + v5;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(void *)(a1 + CLMicroLocationSensorsLogic::stopOdometryMonitoringIfRunning(this + 88) = (char *)v4 + v5;
    std::string::size_type v7 = v3 < 0 ? (*(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    uint64_t v8 = *(char *)(a1 + 87) < 0 ? *(void *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(void *)(a1 + 40) = v4;
    *(void *)(a1 + 48) = v4;
    *(void *)(a1 + 56) = (char *)v4 + v8;
    if ((*(unsigned char *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        uint64_t v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        unsigned __int8 v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        unint64_t v5 = v5 - v10 - 0x7FFFFFFF;
        *(void *)(a1 + 48) = v4;
      }
      if (v5) {
        *(void *)(a1 + 48) = (char *)v4 + v5;
      }
    }
  }
}

uint64_t CLMicroLocationNullSpaceAlgorithm::localize@<X0>(CLMicroLocationModel *this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X2>, uint64_t a4@<X3>, id *a5@<X4>, char **a6@<X8>)
{
  uint64_t v108 = *MEMORY[0x263EF8340];
  if (!CLMicroLocationModel::isValid(this))
  {
    CLMicroLocationNullSpaceAlgorithm::localize();
    goto LABEL_85;
  }
  if (!*(unsigned char *)(a4 + 32))
  {
    CLMicroLocationNullSpaceAlgorithm::localize();
LABEL_85:
    __break(1u);
  }
  memset(v95, 0, sizeof(v95));
  int v96 = 1065353216;
  uint64_t v12 = (void *)*((void *)this + 41);
  for (uint64_t i = (void *)*((void *)this + 42); v12 != i; v12 += 4)
  {
    *(void *)uint64_t buf = v12 + 2;
    uint64_t v14 = (uint64_t **)std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>((uint64_t)v95, v12 + 2, (uint64_t)&std::piecewise_construct, (_OWORD **)buf);
    uint64_t v15 = *(void *)(a4 + 24);
    if (!v15) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    *(void *)uint64_t buf = (*(double (**)(uint64_t, void, uint64_t))(*(void *)v15 + 48))(v15, *v12, a3);
    std::__tree<double>::__emplace_multi<double>(v14 + 4, (double *)buf);
  }
  (*(void (**)(void *__return_ptr, uint64_t, unsigned char *, id *))(*(void *)a2 + 24))(v93, a2, v95, a5);
  long long v90 = 0u;
  long long v91 = 0u;
  int v92 = 1065353216;
  int v87 = 0;
  int v88 = 0;
  __int16 v89 = 0;
  CLMicroLocationLocalizationSettings::getKernelFuncSettings(a5);
  uint64_t v16 = (CLMicroLocationAlgorithms *)objc_claimAutoreleasedReturnValue();
  CLMicroLocationAlgorithms::createKernelFunction(v16, &v86);

  for (uint64_t j = v94; j; uint64_t j = (uint64_t *)*j)
  {
    double v18 = (*(double (**)(uint64_t, double))(*(void *)v86 + 24))(v86, *((double *)j + 4));
    double v19 = v18;
    double v20 = j + 2;
    if (v18 >= 0.0)
    {
      if (v18 >= 0.999)
      {
        uint64_t v21 = v88;
        if (v88 >= v89)
        {
          uint64_t v23 = (v88 - (unsigned char *)v87) >> 4;
          unint64_t v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 60) {
            std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v25 = v89 - (unsigned char *)v87;
          if ((v89 - (unsigned char *)v87) >> 3 > v24) {
            unint64_t v24 = v25 >> 3;
          }
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v26 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v26 = v24;
          }
          if (v26) {
            int v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::uuids::uuid>>((uint64_t)&v89, v26);
          }
          else {
            int v27 = 0;
          }
          double v28 = &v27[16 * v23];
          *(_OWORD *)double v28 = *v20;
          uint64_t v30 = (char *)v87;
          double v29 = v88;
          double v31 = v28;
          if (v88 != v87)
          {
            do
            {
              *((_OWORD *)v31 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = *((_OWORD *)v29 - 1);
              v31 -= 16;
              v29 -= 16;
            }
            while (v29 != v30);
            double v29 = (char *)v87;
          }
          double v22 = v28 + 16;
          int v87 = v31;
          int v88 = v28 + 16;
          __int16 v89 = &v27[16 * v26];
          if (v29) {
            operator delete(v29);
          }
        }
        else
        {
          *(_OWORD *)int v88 = *v20;
          double v22 = v21 + 16;
        }
        int v88 = v22;
      }
      else
      {
        *(void *)uint64_t buf = j + 2;
        *((double *)std::__hash_table<std::__hash_value_type<boost::uuids::uuid,double>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,double>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,double>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,double>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>((uint64_t)&v90, j + 2, (uint64_t)&std::piecewise_construct, (_OWORD **)buf)+ 4) = v18 / (1.0 - v18);
      }
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_13);
    }
    __int16 v32 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v33 = operator new(0x28uLL);
      std::string __p = v33;
      long long v85 = xmmword_256514540;
      *uint64_t v33 = 0u;
      v33[1] = 0u;
      *(void *)((char *)v33 + 29) = 0;
      boost::uuids::to_chars<char *>((uint64_t)(j + 2), v33);
      p_p = &__p;
      if (v85 < 0) {
        p_p = __p;
      }
      uint64_t v36 = j[4];
      uint64_t v35 = j[5];
      *(void *)uint64_t buf = 68290051;
      __int16 v98 = 2082;
      int v99 = "";
      __int16 v100 = 2081;
      v101 = p_p;
      __int16 v102 = 2049;
      uint64_t v103 = v35;
      __int16 v104 = 2049;
      double v105 = v19;
      __int16 v106 = 2049;
      uint64_t v107 = v36;
      _os_log_impl(&dword_25631F000, v32, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"nullspace\", \"identifier\":%{private, location:escape_only}s, \"weight\":\"%{private}f\", \"phat\":\"%{private}f\", \"reducedDistance\":\"%{private}f\"}", buf, 0x3Au);
      if (SHIBYTE(v85) < 0) {
        operator delete(__p);
      }
    }
  }
  int v37 = *(_DWORD *)(a3 + 160);
  a6[1] = 0;
  a6[2] = 0;
  *a6 = 0;
  *((_DWORD *)a6 + 6) = 3;
  *((unsigned char *)a6 + 80) = 0;
  a6[5] = 0;
  a6[6] = 0;
  a6[4] = 0;
  *((unsigned char *)a6 + 56) = 0;
  uint64_t v38 = (char *)v87;
  uint64_t v39 = v88;
  if (v87 == v88)
  {
    unint64_t v56 = (double *)v91;
    for (k = 1.0; v56; unint64_t v56 = *(double **)v56)
      double k = k + v56[4];
    __int16 v58 = a6 + 2;
    unint64_t v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationResultInternal>>((uint64_t)(a6 + 2), 1uLL);
    double v60 = 1.0 / k;
    __int16 v62 = &v59[32 * v61];
    *(void *)unint64_t v59 = 0;
    *((void *)v59 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0;
    *((double *)v59 + 2) = 1.0 / k;
    *((_DWORD *)v59 + 6) = v37;
    uint64_t v63 = v59 + 32;
    uint64_t v65 = *a6;
    uint64_t v64 = a6[1];
    if (v64 != *a6)
    {
      do
      {
        long long v66 = *((_OWORD *)v64 - 2);
        *(_OWORD *)(v59 - 20) = *(_OWORD *)(v64 - 20);
        *((_OWORD *)v59 - 2) = v66;
        v59 -= 32;
        v64 -= 32;
      }
      while (v64 != v65);
      uint64_t v64 = *a6;
    }
    *a6 = v59;
    a6[1] = v63;
    a6[2] = v62;
    if (v64) {
      operator delete(v64);
    }
    a6[1] = v63;
    for (m = (double *)v91; m; m = *(double **)m)
    {
      uint64_t v69 = *((void *)m + 2);
      uint64_t v68 = *((void *)m + 3);
      double v70 = v60 * m[4];
      if ((unint64_t)v63 >= *v58)
      {
        uint64_t v71 = (v63 - *a6) >> 5;
        if ((unint64_t)(v71 + 1) >> 59) {
          std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v72 = *v58 - (void)*a6;
        uint64_t v73 = v72 >> 4;
        if (v72 >> 4 <= (unint64_t)(v71 + 1)) {
          uint64_t v73 = v71 + 1;
        }
        if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v74 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v74 = v73;
        }
        long long v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationResultInternal>>((uint64_t)(a6 + 2), v74);
        long long v77 = &v75[32 * v71];
        *(void *)long long v77 = v69;
        *((void *)v77 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v68;
        *((double *)v77 + 2) = v70;
        *((_DWORD *)v77 + 6) = v37;
        uint64_t v79 = *a6;
        long long v78 = a6[1];
        int v80 = v77;
        if (v78 != *a6)
        {
          do
          {
            long long v81 = *((_OWORD *)v78 - 2);
            *(_OWORD *)(v80 - 20) = *(_OWORD *)(v78 - 20);
            *((_OWORD *)v80 - 2) = v81;
            v80 -= 32;
            v78 -= 32;
          }
          while (v78 != v79);
          long long v78 = *a6;
        }
        uint64_t v63 = v77 + 32;
        *a6 = v80;
        a6[1] = v77 + 32;
        a6[2] = &v75[32 * v76];
        if (v78) {
          operator delete(v78);
        }
      }
      else
      {
        *(void *)uint64_t v63 = v69;
        *((void *)v63 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v68;
        *((double *)v63 + 2) = v70;
        *((_DWORD *)v63 + 6) = v37;
        v63 += 32;
      }
      a6[1] = v63;
    }
  }
  else
  {
    long long v40 = 0;
    double v41 = 1.0 / (double)(unint64_t)((v88 - (unsigned char *)v87) >> 4);
    long long v42 = a6 + 2;
    do
    {
      uint64_t v44 = *(void *)v38;
      uint64_t v43 = *((void *)v38 + 1);
      if ((unint64_t)v40 >= *v42)
      {
        uint64_t v45 = (v40 - *a6) >> 5;
        if ((unint64_t)(v45 + 1) >> 59) {
          std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v46 = *v42 - (void)*a6;
        uint64_t v47 = v46 >> 4;
        if (v46 >> 4 <= (unint64_t)(v45 + 1)) {
          uint64_t v47 = v45 + 1;
        }
        if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v48 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v48 = v47;
        }
        long long v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationResultInternal>>((uint64_t)(a6 + 2), v48);
        uint64_t v51 = &v49[32 * v45];
        *(void *)uint64_t v51 = v44;
        *((void *)v51 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v43;
        *((double *)v51 + 2) = v41;
        *((_DWORD *)v51 + 6) = v37;
        int v53 = *a6;
        char v52 = a6[1];
        char v54 = v51;
        if (v52 != *a6)
        {
          do
          {
            long long v55 = *((_OWORD *)v52 - 2);
            *(_OWORD *)(v54 - 20) = *(_OWORD *)(v52 - 20);
            *((_OWORD *)v54 - 2) = v55;
            v54 -= 32;
            v52 -= 32;
          }
          while (v52 != v53);
          char v52 = *a6;
        }
        long long v40 = v51 + 32;
        *a6 = v54;
        a6[1] = v51 + 32;
        a6[2] = &v49[32 * v50];
        if (v52) {
          operator delete(v52);
        }
      }
      else
      {
        *(void *)long long v40 = v44;
        *((void *)v40 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v43;
        *((double *)v40 + 2) = v41;
        *((_DWORD *)v40 + 6) = v37;
        v40 += 32;
      }
      a6[1] = v40;
      v38 += 16;
    }
    while (v38 != v39);
  }
  uint64_t v82 = v86;
  uint64_t v86 = 0;
  if (v82) {
    (*(void (**)(uint64_t))(*(void *)v82 + 8))(v82);
  }
  if (v87)
  {
    int v88 = (char *)v87;
    operator delete(v87);
  }
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&v90);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v93);
  return std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>>>::~__hash_table((uint64_t)v95);
}

void sub_25635FD18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  CLMicroLocationAlgorithms::LocalizerResults::~LocalizerResults(v33);
  if (a19) {
    (*(void (**)(uint64_t))(*(void *)a19 + 8))(a19);
  }
  if (__p) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>>>::~__hash_table((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void *CLMicroLocationNullSpaceAlgorithm::createReducedDistancesMap@<X0>(CLMicroLocationLocalizationSettings *this@<X2>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  int v6 = *(void **)(a2 + 16);
  if (v6)
  {
    unint64_t v7 = 0;
    do
    {
      v7 += v6[6];
      int v6 = (void *)*v6;
    }
    while (v6);
    double v8 = (double)v7;
  }
  else
  {
    double v8 = 0.0;
  }
  double MinPercentileForReducerFunction = CLMicroLocationLocalizationSettings::getMinPercentileForReducerFunction(this);
  double MaxPercentileForReducerFunction = CLMicroLocationLocalizationSettings::getMaxPercentileForReducerFunction(this);
  char v11 = +[ULDefaultsSingleton shared];
  uint64_t v12 = [v11 defaultsDictionary];

  char v13 = [NSString stringWithUTF8String:"ULNullSpaceDistanceReductionFunction"];
  uint64_t v14 = [v12 objectForKey:v13];
  if (v14 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v15 = [v14 unsignedIntValue];
  }
  else {
    uint64_t v15 = [&unk_2704F1470 unsignedIntValue];
  }
  uint64_t v16 = v15;

  ((void (*)(void *__return_ptr, uint64_t, void, double, double))CLMicroLocationAlgorithms::createReducerFunction<std::multiset<double>,double>)(v24, v16, 0, MinPercentileForReducerFunction, MaxPercentileForReducerFunction);
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  for (uint64_t i = *(uint64_t **)(a2 + 16); i; uint64_t i = (uint64_t *)*i)
  {
    std::multiset<double>::multiset[abi:ne180100]((uint64_t)v22, (uint64_t)(i + 4));
    if (!v25) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    double v18 = (*(double (**)(uint64_t, void **))(*(void *)v25 + 48))(v25, v22);
    unint64_t v19 = i[6];
    uint64_t v23 = i + 2;
    double v20 = (double *)std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationNullSpaceAlgorithm::ReducedDistanceAndWeight>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationNullSpaceAlgorithm::ReducedDistanceAndWeight>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationNullSpaceAlgorithm::ReducedDistanceAndWeight>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationNullSpaceAlgorithm::ReducedDistanceAndWeight>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>(a3, i + 2, (uint64_t)&std::piecewise_construct, &v23);
    int v20[4] = v18;
    v20[5] = (double)v19 / v8;
    std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)v22, v22[1]);
  }
  return std::__function::__value_func<double ()(std::multiset<double>)>::~__value_func[abi:ne180100](v24);
}

void sub_256360060(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationNullSpaceAlgorithm::~CLMicroLocationNullSpaceAlgorithm(CLMicroLocationNullSpaceAlgorithm *this)
{
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_7()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

uint64_t std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>>>::__deallocate_node(uint64_t a1, void **a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      char v3 = *v2;
      std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)(v2 + 4), v2[5]);
      operator delete(v2);
      uint64_t v2 = (void **)v3;
    }
    while (v3);
  }
}

void *std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>(uint64_t a1, void *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  do
    v8 ^= (v8 << 6) + (v8 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v7++);
  while (v7 != 16);
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    char v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2 && i[3] == a2[1]) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v15 = (void *)(a1 + 16);
  uint64_t i = operator new(0x38uLL);
  *uint64_t i = 0;
  i[1] = v8;
  *((_OWORD *)i + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = **a4;
  i[6] = 0;
  i[5] = 0;
  i[4] = i + 5;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v22 = *(void *)a1;
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *uint64_t i = *v23;
LABEL_44:
    void *v23 = i;
    goto LABEL_45;
  }
  *uint64_t i = *v15;
  void *v15 = i;
  *(void *)(v22 + 8 * v4) = v15;
  if (*i)
  {
    unint64_t v24 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9) {
        v24 %= v9;
      }
    }
    else
    {
      v24 &= v9 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_256360634(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)(a2 + 4), a2[5]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t *std::__tree<double>::__emplace_multi<double>(uint64_t **a1, double *a2)
{
  unint64_t v4 = (uint64_t *)operator new(0x28uLL);
  double v5 = *a2;
  v4[4] = *(void *)a2;
  int v6 = a1 + 1;
  uint64_t v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        int v6 = (uint64_t **)v7;
        if (v5 >= *((double *)v7 + 4)) {
          break;
        }
        uint64_t v7 = (uint64_t *)*v7;
        unint64_t v8 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      uint64_t v7 = (uint64_t *)v7[1];
    }
    while (v7);
    unint64_t v8 = v6 + 1;
  }
  else
  {
    unint64_t v8 = a1 + 1;
  }
LABEL_8:
  std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__insert_node_at(a1, (uint64_t)v6, v8, v4);
  return v4;
}

void *std::__hash_table<std::__hash_value_type<boost::uuids::uuid,double>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,double>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,double>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,double>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>(uint64_t a1, void *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  do
    v8 ^= (v8 << 6) + (v8 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v7++);
  while (v7 != 16);
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    char v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2 && i[3] == a2[1]) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x28uLL);
  *uint64_t i = 0;
  i[1] = v8;
  *((_OWORD *)i + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = **a4;
  i[4] = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *uint64_t i = *v22;
LABEL_44:
    *uint64_t v22 = i;
    goto LABEL_45;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_256360984(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

double CLReducerFunction<std::multiset<double>,double>::minimumValueSorted(void *a1)
{
  if (!a1[2]) {
    CLReducerFunction<std::multiset<double>,double>::minimumValueSorted();
  }
  return *(double *)(*a1 + 32);
}

double CLReducerFunction<std::multiset<double>,double>::minimumValue(void *a1)
{
  if (!a1[2]) {
    CLReducerFunction<std::multiset<double>,double>::minimumValue();
  }
  char v3 = (double *)*a1;
  uint64_t v1 = (double *)(a1 + 1);
  uint64_t v2 = v3;
  if (v3 != v1)
  {
    unint64_t v4 = v2;
    while (1)
    {
      double v5 = (double *)*((void *)v4 + 1);
      int v6 = v4;
      if (v5)
      {
        do
        {
          unint64_t v4 = v5;
          double v5 = *(double **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          unint64_t v4 = (double *)*((void *)v6 + 2);
          BOOL v7 = *(void *)v4 == (void)v6;
          int v6 = v4;
        }
        while (!v7);
      }
      if (v4 == v1) {
        break;
      }
      if (v4[4] < v2[4]) {
        uint64_t v2 = v4;
      }
    }
  }
  return v2[4];
}

double CLReducerFunction<std::multiset<double>,double>::meanValue(void *a1)
{
  unint64_t v1 = a1[2];
  if (!v1) {
    CLReducerFunction<std::multiset<double>,double>::meanValue();
  }
  unint64_t v4 = (void *)*a1;
  uint64_t v2 = a1 + 1;
  char v3 = v4;
  double v5 = 0.0;
  if (v4 != v2)
  {
    do
    {
      int v6 = (void *)v3[1];
      BOOL v7 = v3;
      if (v6)
      {
        do
        {
          unint64_t v8 = v6;
          int v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          unint64_t v8 = (void *)v7[2];
          BOOL v9 = *v8 == (void)v7;
          BOOL v7 = v8;
        }
        while (!v9);
      }
      double v5 = v5 + *((double *)v3 + 4);
      char v3 = v8;
    }
    while (v8 != v2);
  }
  return v5 / (double)v1;
}

double CLReducerFunction<std::multiset<double>,double>::maximumValueSorted(uint64_t a1)
{
  if (!*(void *)(a1 + 16)) {
    CLReducerFunction<std::multiset<double>,double>::maximumValueSorted();
  }
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v1 = a1 + 8;
  uint64_t v2 = v3;
  if (v3)
  {
    do
    {
      uint64_t v4 = v2;
      uint64_t v2 = *(void *)(v2 + 8);
    }
    while (v2);
  }
  else
  {
    do
    {
      uint64_t v4 = *(void *)(v1 + 16);
      BOOL v5 = *(void *)v4 == v1;
      uint64_t v1 = v4;
    }
    while (v5);
  }
  return *(double *)(v4 + 32);
}

double CLReducerFunction<std::multiset<double>,double>::maximumValue(void *a1)
{
  if (!a1[2]) {
    CLReducerFunction<std::multiset<double>,double>::maximumValue();
  }
  uint64_t v3 = (double *)*a1;
  uint64_t v1 = (double *)(a1 + 1);
  uint64_t v2 = v3;
  if (v3 != v1)
  {
    uint64_t v4 = v2;
    while (1)
    {
      BOOL v5 = (double *)*((void *)v4 + 1);
      int v6 = v4;
      if (v5)
      {
        do
        {
          uint64_t v4 = v5;
          BOOL v5 = *(double **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v4 = (double *)*((void *)v6 + 2);
          BOOL v7 = *(void *)v4 == (void)v6;
          int v6 = v4;
        }
        while (!v7);
      }
      if (v4 == v1) {
        break;
      }
      if (v2[4] < v4[4]) {
        uint64_t v2 = v4;
      }
    }
  }
  return v2[4];
}

double CLReducerFunction<std::multiset<double>,double>::firstQuartileValueSorted(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    CLReducerFunction<std::multiset<double>,double>::firstQuartileValueSorted();
  }
  uint64_t v3 = *(double **)a1;
  std::__advance[abi:ne180100]<std::__tree_const_iterator<double,std::__tree_node<double,void *> *,long>>((void **)&v3, llround((double)v1 * 0.25));
  return v3[4];
}

double CLReducerFunction<std::multiset<double>,double>::medianValueSorted(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    CLReducerFunction<std::multiset<double>,double>::medianValueSorted();
  }
  uint64_t v3 = *(double **)a1;
  std::__advance[abi:ne180100]<std::__tree_const_iterator<double,std::__tree_node<double,void *> *,long>>((void **)&v3, llround((double)v1 * 0.5));
  return v3[4];
}

void std::__function::__func<double (*)(std::multiset<double> const&),std::allocator<double (*)(std::multiset<double> const&)>,double ()(std::multiset<double>)>::~__func()
{
}

void *std::__function::__func<double (*)(std::multiset<double> const&),std::allocator<double (*)(std::multiset<double> const&)>,double ()(std::multiset<double>)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_2704DB110;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<double (*)(std::multiset<double> const&),std::allocator<double (*)(std::multiset<double> const&)>,double ()(std::multiset<double>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_2704DB110;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<double (*)(std::multiset<double> const&),std::allocator<double (*)(std::multiset<double> const&)>,double ()(std::multiset<double>)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t std::__function::__func<double (*)(std::multiset<double> const&),std::allocator<double (*)(std::multiset<double> const&)>,double ()(std::multiset<double>)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<double (*)(std::multiset<double> const&),std::allocator<double (*)(std::multiset<double> const&)>,double ()(std::multiset<double>)>::target_type()
{
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

void **std::__advance[abi:ne180100]<std::__tree_const_iterator<double,std::__tree_node<double,void *> *,long>>(void **result, uint64_t a2)
{
  if (a2 < 0)
  {
    BOOL v7 = *result;
    do
    {
      unint64_t v8 = (void *)*v7;
      if (*v7)
      {
        do
        {
          uint64_t v4 = v8;
          unint64_t v8 = (void *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v4 = (void *)v7[2];
          BOOL v5 = *v4 == (void)v7;
          BOOL v7 = v4;
        }
        while (v5);
      }
      BOOL v7 = v4;
    }
    while (!__CFADD__(a2++, 1));
  }
  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = *result;
    do
    {
      uint64_t v3 = (void *)v2[1];
      if (v3)
      {
        do
        {
          uint64_t v4 = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          uint64_t v4 = (void *)v2[2];
          BOOL v5 = *v4 == (void)v2;
          uint64_t v2 = v4;
        }
        while (!v5);
      }
      uint64_t v2 = v4;
    }
    while (a2-- > 1);
  }
  *uint64_t result = v4;
  return result;
}

void std::__function::__func<std::function<double ()(std::multiset<double>)> CLMicroLocationAlgorithms::createReducerFunction<std::multiset<double>,double>(CLMicroLocationAlgorithms::ReducerFunctionType,CLMicroLocationAlgorithms::SortedContainer,double,double)::{lambda(std::multiset<double> const&)#1},std::allocator<std::function<double ()(std::multiset<double>)> CLMicroLocationAlgorithms::createReducerFunction<std::multiset<double>,double>(CLMicroLocationAlgorithms::ReducerFunctionType,CLMicroLocationAlgorithms::SortedContainer,double,double)::{lambda(std::multiset<double> const&)#1}>,double ()(std::multiset<double>)>::~__func()
{
}

__n128 std::__function::__func<std::function<double ()(std::multiset<double>)> CLMicroLocationAlgorithms::createReducerFunction<std::multiset<double>,double>(CLMicroLocationAlgorithms::ReducerFunctionType,CLMicroLocationAlgorithms::SortedContainer,double,double)::{lambda(std::multiset<double> const&)#1},std::allocator<std::function<double ()(std::multiset<double>)> CLMicroLocationAlgorithms::createReducerFunction<std::multiset<double>,double>(CLMicroLocationAlgorithms::ReducerFunctionType,CLMicroLocationAlgorithms::SortedContainer,double,double)::{lambda(std::multiset<double> const&)#1}>,double ()(std::multiset<double>)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_2704DB1C0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::function<double ()(std::multiset<double>)> CLMicroLocationAlgorithms::createReducerFunction<std::multiset<double>,double>(CLMicroLocationAlgorithms::ReducerFunctionType,CLMicroLocationAlgorithms::SortedContainer,double,double)::{lambda(std::multiset<double> const&)#1},std::allocator<std::function<double ()(std::multiset<double>)> CLMicroLocationAlgorithms::createReducerFunction<std::multiset<double>,double>(CLMicroLocationAlgorithms::ReducerFunctionType,CLMicroLocationAlgorithms::SortedContainer,double,double)::{lambda(std::multiset<double> const&)#1}>,double ()(std::multiset<double>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_2704DB1C0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double std::__function::__func<std::function<double ()(std::multiset<double>)> CLMicroLocationAlgorithms::createReducerFunction<std::multiset<double>,double>(CLMicroLocationAlgorithms::ReducerFunctionType,CLMicroLocationAlgorithms::SortedContainer,double,double)::{lambda(std::multiset<double> const&)#1},std::allocator<std::function<double ()(std::multiset<double>)> CLMicroLocationAlgorithms::createReducerFunction<std::multiset<double>,double>(CLMicroLocationAlgorithms::ReducerFunctionType,CLMicroLocationAlgorithms::SortedContainer,double,double)::{lambda(std::multiset<double> const&)#1}>,double ()(std::multiset<double>)>::operator()(uint64_t a1, uint64_t a2)
{
  return CLReducerFunction<std::multiset<double>,double>::parameterizedTruncatedMeanValueSorted(a2, *(double *)(a1 + 8), *(double *)(a1 + 16));
}

uint64_t std::__function::__func<std::function<double ()(std::multiset<double>)> CLMicroLocationAlgorithms::createReducerFunction<std::multiset<double>,double>(CLMicroLocationAlgorithms::ReducerFunctionType,CLMicroLocationAlgorithms::SortedContainer,double,double)::{lambda(std::multiset<double> const&)#1},std::allocator<std::function<double ()(std::multiset<double>)> CLMicroLocationAlgorithms::createReducerFunction<std::multiset<double>,double>(CLMicroLocationAlgorithms::ReducerFunctionType,CLMicroLocationAlgorithms::SortedContainer,double,double)::{lambda(std::multiset<double> const&)#1}>,double ()(std::multiset<double>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<double ()(std::multiset<double>)> CLMicroLocationAlgorithms::createReducerFunction<std::multiset<double>,double>(CLMicroLocationAlgorithms::ReducerFunctionType,CLMicroLocationAlgorithms::SortedContainer,double,double)::{lambda(std::multiset<double> const&)#1},std::allocator<std::function<double ()(std::multiset<double>)> CLMicroLocationAlgorithms::createReducerFunction<std::multiset<double>,double>(CLMicroLocationAlgorithms::ReducerFunctionType,CLMicroLocationAlgorithms::SortedContainer,double,double)::{lambda(std::multiset<double> const&)#1}>,double ()(std::multiset<double>)>::target_type()
{
}

double CLReducerFunction<std::multiset<double>,double>::parameterizedTruncatedMeanValueSorted(uint64_t a1, double a2, double a3)
{
  unint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    CLReducerFunction<std::multiset<double>,double>::parameterizedTruncatedMeanValueSorted();
  }
  if (a3 > 1.0 || (a2 >= 0.0 ? (v4 = a2 > 1.0) : (v4 = 1), !v4 ? (BOOL v5 = a3 < a2) : (BOOL v5 = 1), v5)) {
    CLReducerFunction<std::multiset<double>,double>::parameterizedTruncatedMeanValueSorted();
  }
  uint64_t v6 = llround(floor((double)v3 * a2));
  int64_t v7 = llround(ceil((double)v3 * a3));
  uint64_t v8 = v7 - v6;
  if (v7 <= v6) {
    CLReducerFunction<std::multiset<double>,double>::parameterizedTruncatedMeanValueSorted();
  }
  float v16 = *(double **)a1;
  std::__advance[abi:ne180100]<std::__tree_const_iterator<double,std::__tree_node<double,void *> *,long>>((void **)&v16, v6);
  BOOL v9 = v16;
  std::__advance[abi:ne180100]<std::__tree_const_iterator<double,std::__tree_node<double,void *> *,long>>((void **)&v16, v8);
  double v10 = 0.0;
  if (v9 != v16)
  {
    do
    {
      char v11 = (double *)*((void *)v9 + 1);
      uint64_t v12 = v9;
      if (v11)
      {
        do
        {
          unint64_t v13 = v11;
          char v11 = *(double **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          unint64_t v13 = (double *)*((void *)v12 + 2);
          BOOL v14 = *(void *)v13 == (void)v12;
          uint64_t v12 = v13;
        }
        while (!v14);
      }
      double v10 = v10 + v9[4];
      BOOL v9 = v13;
    }
    while (v13 != v16);
  }
  return v10 / (double)v8;
}

void *std::__function::__value_func<double ()(std::multiset<double>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationNullSpaceAlgorithm::ReducedDistanceAndWeight>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationNullSpaceAlgorithm::ReducedDistanceAndWeight>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationNullSpaceAlgorithm::ReducedDistanceAndWeight>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationNullSpaceAlgorithm::ReducedDistanceAndWeight>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>(uint64_t a1, void *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  do
    v8 ^= (v8 << 6) + (v8 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v7++);
  while (v7 != 16);
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    char v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2 && i[3] == a2[1]) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x30uLL);
  *uint64_t i = 0;
  i[1] = v8;
  *((_OWORD *)i + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = **a4;
  i[4] = 0;
  i[5] = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *uint64_t i = *v22;
LABEL_44:
    *uint64_t v22 = i;
    goto LABEL_45;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_25636129C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::multiset<double>::multiset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  std::multiset<double>::insert[abi:ne180100]<std::__tree_const_iterator<double,std::__tree_node<double,void *> *,long>>((char *)a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_2563612F0(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

char *std::multiset<double>::insert[abi:ne180100]<std::__tree_const_iterator<double,std::__tree_node<double,void *> *,long>>(char *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    unint64_t v4 = a2;
    BOOL v5 = (uint64_t **)result;
    uint64_t v6 = (double *)(result + 8);
    do
    {
      __n128 result = (char *)std::__tree<double>::__emplace_hint_multi<double const&>(v5, v6, v4 + 4);
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          unint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          unint64_t v4 = v8;
        }
        while (!v9);
      }
      unint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

void *std::__tree<double>::__emplace_hint_multi<double const&>(uint64_t **a1, double *a2, void *a3)
{
  uint64_t v6 = operator new(0x28uLL);
  *((void *)v6 + 4) = *a3;
  leaf = std::__tree<std::__value_type<double,std::pair<boost::uuids::uuid const,boost::uuids::uuid>>,std::__map_value_compare<double,std::__value_type<double,std::pair<boost::uuids::uuid const,boost::uuids::uuid>>,std::less<double>,true>,std::allocator<std::__value_type<double,std::pair<boost::uuids::uuid const,boost::uuids::uuid>>>>::__find_leaf(a1, a2, &v9, (double *)v6 + 4);
  std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__insert_node_at(a1, (uint64_t)v9, (uint64_t **)leaf, (uint64_t *)v6);
  return v6;
}

void sub_256361408(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void CLMicroLocationLegacyEventDisplayState::handleEvent(unsigned char *a1@<X0>, char a2@<W1>, double *a3@<X2>, unsigned char *a4@<X8>)
{
  *a1 = a2;
  v7.n128_f64[0] = CLMicroLocationProto::BacklightOn::BacklightOn((CLMicroLocationProto::BacklightOn *)v11);
  v13 |= 2u;
  if (v12 == MEMORY[0x263F8C740]) {
    operator new();
  }
  MEMORY[0x25A2A6080](v7);
  CLMicroLocationProtobufHelper::createRecordingEvent<CLMicroLocationProto::BacklightOn>((CLMicroLocationProto::RecordingEvent *)v11, 0, 0, 0, (CLMicroLocationProto *)3, (uint64_t)v8, *a3);
  char v9 = a2;
  CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)v10, (const CLMicroLocationProto::RecordingEvent *)v8);
  *a4 = v9;
  CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)(a4 + 8), (const CLMicroLocationProto::RecordingEvent *)v10);
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v10);
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v8);
  CLMicroLocationProto::BacklightOn::~BacklightOn((CLMicroLocationProto::BacklightOn *)v11);
}

void sub_256361568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  CLMicroLocationProto::RecordingEvent::~RecordingEvent(v10);
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)&a10);
  CLMicroLocationProto::BacklightOn::~BacklightOn((CLMicroLocationProto::BacklightOn *)(v11 - 80));
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createRecordingEvent<CLMicroLocationProto::BacklightOn>(CLMicroLocationProto::RecordingEvent *a1@<X0>, CLMicroLocationProto *a2@<X1>, char a3@<W2>, char a4@<W3>, CLMicroLocationProto *a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)a6);
  unsigned int v14 = *((_DWORD *)a1 + 4);
  if (!CLMicroLocationProto::EventType_IsValid((CLMicroLocationProto *)v14))
  {
    BOOL v17 = "::CLMicroLocationProto::EventType_IsValid(value)";
    int v18 = 20192;
    unint64_t v19 = "set_eventtype";
    goto LABEL_10;
  }
  int v15 = *(_DWORD *)(a6 + 140);
  *(_DWORD *)(a6 + 72) = v14;
  *(double *)(a6 + 8) = a7;
  *(unsigned char *)(a6 + 77) = a3;
  *(_DWORD *)(a6 + 140) = v15 | 0x2803;
  *(unsigned char *)(a6 + 76) = a4;
  if (!CLMicroLocationProto::ConfidenceLevel_IsValid(a5))
  {
    BOOL v17 = "::CLMicroLocationProto::ConfidenceLevel_IsValid(value)";
    int v18 = 20701;
    unint64_t v19 = "set_confidencelevel";
    goto LABEL_10;
  }
  *(_DWORD *)(a6 + 140) |= 0x4000u;
  *(_DWORD *)(a6 + 120) = a5;
  if (((unint64_t)a2 & 0xFF00000000) != 0)
  {
    if (CLMicroLocationProto::MotionState_IsValid(a2))
    {
      *(_DWORD *)(a6 + 140) |= 0x20000u;
      *(_DWORD *)(a6 + 124) = a2;
      goto LABEL_6;
    }
    BOOL v17 = "::CLMicroLocationProto::MotionState_IsValid(value)";
    int v18 = 20793;
    unint64_t v19 = "set_motionstate";
LABEL_10:
    __assert_rtn(v19, "microlocation.pb.h", v18, v17);
  }
LABEL_6:
  CLMicroLocationProtobufHelper::setSpecificRecordingEvent((CLMicroLocationProtobufHelper *)a6, a1, v16);
}

void sub_2563616D0(_Unwind_Exception *a1)
{
  CLMicroLocationProto::RecordingEvent::~RecordingEvent(v1);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationLegacyEventDisplayState::getDisplayState(CLMicroLocationLegacyEventDisplayState *this)
{
  return *(unsigned __int8 *)this;
}

void CLMicroLocationClusterRFDistance::evaluateRFClusterDistances(uint64_t a1@<X0>, uint64_t a2@<X1>, float *a3@<X8>)
{
  v36[4] = *MEMORY[0x263EF8340];
  uint64_t v6 = +[ULDefaultsSingleton shared];
  __n128 v7 = [v6 defaultsDictionary];

  unint64_t v8 = [NSString stringWithUTF8String:"ULFingerprintDistanceFunctionType"];
  char v9 = [v7 objectForKey:v8];
  if (v9 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    int v10 = [v9 unsignedIntValue];
  }
  else {
    int v10 = [&unk_2704F1488 unsignedIntValue];
  }
  int v11 = v10;

  uint64_t v12 = ULSettings::getFingerprintDistanceFunctionParamsForType(v11);
  std::unordered_map<boost::uuids::uuid,CLMicroLocationAnchorAppearance>::unordered_map((uint64_t)&v30, a2 + 16);
  long long v33 = *(_OWORD *)(a2 + 56);
  char v34 = 1;
  CLMicroLocationAlgorithms::createLearnFingerprintDistanceFunction(v11, v12, a1 + 8, (uint64_t)&v30, v36);
  if (v34) {
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&v30);
  }
  std::__function::__value_func<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::__value_func[abi:ne180100]((uint64_t)v35, (uint64_t)v36);
  CLMicroLocationModel::getClusterPairwiseDistances((void *)a2, (uint64_t)v35, &v30);
  std::__function::__value_func<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::~__value_func[abi:ne180100](v35);
  int v13 = v31;
  if (v30)
  {
    unint64_t v14 = 0;
    float v15 = 0.0;
    float v16 = 3.4028e38;
    float v17 = 1.1755e-38;
    float v18 = 3.4028e38;
    float v19 = 1.1755e-38;
    float v20 = 0.0;
    do
    {
      unint64_t v21 = v14 + 1;
      double v22 = *((double *)v31 + v14 + (((v14 + 1) * v14) >> 1));
      float v23 = v22;
      if (v22 > v17) {
        float v17 = v22;
      }
      if (v22 < v16) {
        float v16 = v22;
      }
      unint64_t v24 = v14 + 1;
      if (v21 < v30)
      {
        do
        {
          if (v14 <= v24) {
            unint64_t v25 = v24;
          }
          else {
            unint64_t v25 = v14;
          }
          if (v14 >= v24) {
            unint64_t v26 = v24;
          }
          else {
            unint64_t v26 = v14;
          }
          double v27 = *((double *)v31 + v26 + ((v25 + v25 * v25) >> 1));
          float v28 = v27;
          float v15 = v15 + v28;
          if (v27 > v19) {
            float v19 = v27;
          }
          if (v27 < v18) {
            float v18 = v27;
          }
          ++v24;
        }
        while (v30 != v24);
      }
      ++v14;
      float v20 = (float)(v20 + v23) / (float)v30;
    }
    while (v21 != v30);
  }
  else
  {
    float v20 = 0.0;
    float v18 = 3.4028e38;
    float v19 = 1.1755e-38;
    float v15 = 0.0;
    float v16 = 3.4028e38;
    float v17 = 1.1755e-38;
  }
  float v29 = (float)(((v30 - 1) * v30) >> 1);
  *a3 = v16;
  a3[1] = v17;
  a3[2] = v20;
  a3[3] = v18;
  a3[4] = v19;
  a3[5] = v15 / v29;
  if (v13)
  {
    __int16 v32 = v13;
    operator delete(v13);
  }
  std::__function::__value_func<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::~__value_func[abi:ne180100](v36);
}

void sub_256361990(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  unint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void sub_256361B88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ULDBUtils::insertEntries<CLMiLoLoiTable,ULLoiMO>(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v12 = 0;
  int v13 = &v12;
  uint64_t v14 = 0x2020000000;
  char v15 = 0;
  unint64_t v4 = [v3 managedObjectContext];
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 3221225472;
  v8[2] = ___ZN9ULDBUtils13insertEntriesI14CLMiLoLoiTable7ULLoiMOEEbP7ULStoreRKNSt3__16vectorINT_5EntryENS5_9allocatorIS8_EEEE_block_invoke;
  int v8[3] = &unk_2653F90B8;
  uint64_t v11 = a2;
  id v5 = v3;
  id v9 = v5;
  int v10 = &v12;
  [v4 performBlockAndWait:v8];

  uint64_t v6 = *((unsigned __int8 *)v13 + 24);
  _Block_object_dispose(&v12, 8);

  return v6;
}

void sub_256361CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ULDBUtils::fetchEntries<CLMiLoLoiTable,ULLoiMO>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  uint64_t v23 = 0;
  unint64_t v24 = &v23;
  uint64_t v25 = 0x4812000000;
  unint64_t v26 = __Block_byref_object_copy__1;
  double v27 = __Block_byref_object_dispose__1;
  float v28 = &unk_25654E519;
  memset(v29, 0, sizeof(v29));
  uint64_t v12 = [v9 managedObjectContext];
  v17[0] = MEMORY[0x263EF8330];
  v17[1] = 3221225472;
  v17[2] = ___ZN9ULDBUtils12fetchEntriesI14CLMiLoLoiTable7ULLoiMOEENSt3__16vectorINT_5EntryENS3_9allocatorIS6_EEEEP7ULStoreP7NSArrayIP11NSPredicateEPSC_IP16NSSortDescriptorEm_block_invoke;
  v17[3] = &unk_2653F90E0;
  id v13 = v10;
  id v18 = v13;
  id v14 = v11;
  id v19 = v14;
  uint64_t v22 = a4;
  id v15 = v9;
  id v20 = v15;
  unint64_t v21 = &v23;
  [v12 performBlockAndWait:v17];

  float v16 = v24;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  std::vector<CLMiLoLoiTable::Entry>::__init_with_size[abi:ne180100]<CLMiLoLoiTable::Entry*,CLMiLoLoiTable::Entry*>(a5, v16[6], v16[7], (v16[7] - v16[6]) >> 6);

  _Block_object_dispose(&v23, 8);
  unint64_t v30 = (void **)v29;
  std::vector<CLMiLoLoiTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v30);
}

void sub_256361EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, void *a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);

  _Block_object_dispose(va, 8);
  *(void *)(v14 - 96) = v13;
  std::vector<CLMiLoLoiTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 96));

  _Unwind_Resume(a1);
}

void ULDBUtils::fetchAllWithLimit<CLMiLoLoiTable,ULLoiMO>(void *a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  v10[1] = *MEMORY[0x263EF8340];
  id v5 = a1;
  uint64_t v6 = (void *)MEMORY[0x263F08B30];
  __n128 v7 = [(id)objc_opt_class() defaultSortProperty];
  unint64_t v8 = [v6 sortDescriptorWithKey:v7 ascending:0];

  v10[0] = v8;
  id v9 = [MEMORY[0x263EFF8C0] arrayWithObjects:v10 count:1];
  ULDBUtils::fetchEntries<CLMiLoLoiTable,ULLoiMO>(v5, 0, v9, a2, a3);
}

void sub_256362010(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256362230(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256362358(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2563624EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256362680(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256362844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  *(void *)(v11 - 72) = v10;
  std::vector<CLMiLoLoiTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)(v11 - 72));

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__1(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  std::vector<CLMiLoLoiTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void sub_256362A5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ULDBUtils::convertManagedObjectsToEntries<CLMiLoLoiTable,ULLoiMO>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  id v3 = a1;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  std::vector<CLMiLoLoiTable::Entry>::reserve(a2, [v3 count]);
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v4 = v3;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v20 objects:v34 count:16];
  if (!v5)
  {

    goto LABEL_28;
  }
  id v18 = v3;
  id v19 = a2;
  char v6 = 0;
  uint64_t v7 = *(void *)v21;
  do
  {
    uint64_t v8 = 0;
    do
    {
      if (*(void *)v21 != v7) {
        objc_enumerationMutation(v4);
      }
      id v9 = *(id *)(*((void *)&v20 + 1) + 8 * v8);
      uint64_t v10 = v9;
      if (v9)
      {
        objc_msgSend(v9, "convertToEntry", v18);
        if ((_BYTE)v33)
        {
          std::vector<CLMiLoLoiTable::Entry>::push_back[abi:ne180100](v19, v30);
          char v11 = 0;
          goto LABEL_19;
        }
      }
      else
      {
        uint64_t v33 = 0;
        *(_OWORD *)std::string __p = 0u;
        long long v32 = 0u;
        memset(v30, 0, sizeof(v30));
      }
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_14);
      }
      uint64_t v12 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        uint64_t v13 = [v10 entity];
        uint64_t v14 = [v13 name];
        *(_DWORD *)uint64_t buf = 68289283;
        int v25 = 0;
        __int16 v26 = 2082;
        double v27 = "";
        __int16 v28 = 2113;
        float v29 = v14;
        _os_log_impl(&dword_25631F000, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to convert MO to entry\", \"MO\":%{private, location:escape_only}@}", buf, 0x1Cu);
      }
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_14);
      }
      id v15 = (id)logObject_MicroLocation_Default;
      if (os_signpost_enabled(v15))
      {
        float v16 = [v10 entity];
        float v17 = [v16 name];
        *(_DWORD *)uint64_t buf = 68289283;
        int v25 = 0;
        __int16 v26 = 2082;
        double v27 = "";
        __int16 v28 = 2113;
        float v29 = v17;
        _os_signpost_emit_with_name_impl(&dword_25631F000, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to convert MO to entry", "{\"msg%{public}.0s\":\"Failed to convert MO to entry\", \"MO\":%{private, location:escape_only}@}", buf, 0x1Cu);
      }
      char v11 = 1;
      char v6 = 1;
LABEL_19:
      if ((_BYTE)v33 && SHIBYTE(v32) < 0) {
        operator delete(__p[1]);
      }

      if (v11) {
        goto LABEL_25;
      }
      ++v8;
    }
    while (v5 != v8);
    uint64_t v5 = [v4 countByEnumeratingWithState:&v20 objects:v34 count:16];
  }
  while (v5);
LABEL_25:

  if (v6) {
    std::vector<CLMiLoLoiTable::Entry>::__clear[abi:ne180100](v19);
  }
LABEL_28:
}

void sub_256362DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  a25 = a10;
  std::vector<CLMiLoLoiTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);

  _Unwind_Resume(a1);
}

void sub_25636302C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256363114(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256363238(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

void sub_2563633F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2563635E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2563637DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256363BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  _Block_object_dispose(&a22, 8);
  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
  }
  a22 = v31 - 112;
  std::vector<CLMiLoLoiTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  _Unwind_Resume(a1);
}

void sub_256363FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_2563641F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id a19, id a20)
{
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v23);

  _Block_object_dispose(&a10, 8);
  _Unwind_Resume(a1);
}

void sub_256364358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_80c27_ZTSNSt3__18functionIFbvEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100](a1 + 80, a2 + 80);
}

void *__destroy_helper_block_ea8_80c27_ZTSNSt3__18functionIFbvEEE(uint64_t a1)
{
  return std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((void *)(a1 + 80));
}

void ___ZN9ULDBUtils13insertEntriesI14CLMiLoLoiTable7ULLoiMOEEbP7ULStoreRKNSt3__16vectorINT_5EntryENS5_9allocatorIS8_EEEE_block_invoke(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(a1 + 48);
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  if (*v2 == v4)
  {
LABEL_4:
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [*(id *)(a1 + 32) commitChangesToStore];
    uint64_t v7 = *(void **)(a1 + 32);
    [v7 deleteOldestRecordsIfFull];
  }
  else
  {
    while (1)
    {
      uint64_t v5 = [*(id *)(a1 + 32) managedObjectContext];
      char v6 = +[ULLoiMO createFromEntry:v3 inManagedObjectContext:v5];

      if (!v6) {
        break;
      }

      v3 += 64;
      if (v3 == v4) {
        goto LABEL_4;
      }
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_14);
    }
    uint64_t v8 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      id v9 = +[ULLoiMO entity];
      uint64_t v10 = [v9 name];
      int v15 = 68289283;
      int v16 = 0;
      __int16 v17 = 2082;
      id v18 = "";
      __int16 v19 = 2113;
      long long v20 = v10;
      _os_log_impl(&dword_25631F000, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to create entry from MO\", \"MO\":%{private, location:escape_only}@}", (uint8_t *)&v15, 0x1Cu);
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_14);
    }
    char v11 = (id)logObject_MicroLocation_Default;
    if (os_signpost_enabled(v11))
    {
      uint64_t v12 = +[ULLoiMO entity];
      uint64_t v13 = [v12 name];
      int v15 = 68289283;
      int v16 = 0;
      __int16 v17 = 2082;
      id v18 = "";
      __int16 v19 = 2113;
      long long v20 = v13;
      _os_signpost_emit_with_name_impl(&dword_25631F000, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to create entry from MO", "{\"msg%{public}.0s\":\"Failed to create entry from MO\", \"MO\":%{private, location:escape_only}@}", (uint8_t *)&v15, 0x1Cu);
    }
    uint64_t v14 = [*(id *)(a1 + 32) managedObjectContext];
    [v14 reset];
  }
}

void sub_256364660(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_8()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

void ___ZN9ULDBUtils12fetchEntriesI14CLMiLoLoiTable7ULLoiMOEENSt3__16vectorINT_5EntryENS3_9allocatorIS6_EEEEP7ULStoreP7NSArrayIP11NSPredicateEPSC_IP16NSSortDescriptorEm_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  uint64_t v3 = (objc_class *)objc_opt_class();
  uint64_t v4 = NSStringFromClass(v3);
  uint64_t v5 = [v2 fetchManagedObjectsWithEntityName:v4 byAndPredicates:*(void *)(a1 + 32) sortDescriptors:*(void *)(a1 + 40) andLimit:*(void *)(a1 + 64)];

  ULDBUtils::convertManagedObjectsToEntries<CLMiLoLoiTable,ULLoiMO>(v5, (uint64_t *)&v8);
  uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8);
  std::vector<CLMiLoLoiTable::Entry>::__vdeallocate((uint64_t *)(v6 + 48));
  *(_OWORD *)(v6 + 48) = v8;
  *(void *)(v6 + 64) = v9;
  uint64_t v9 = 0;
  long long v8 = 0uLL;
  uint64_t v10 = (void **)&v8;
  std::vector<CLMiLoLoiTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v10);
  uint64_t v7 = [*(id *)(a1 + 48) managedObjectContext];
  [v7 reset];
}

void sub_2563647C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<CLMiLoLoiTable::Entry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<CLMiLoLoiTable::Entry>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<CLMiLoLoiTable::Entry>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 64)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

uint64_t std::vector<CLMiLoLoiTable::Entry>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 6)
  {
    if (a2 >> 58) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRecordingLabelsTable::Entry>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + (v6 << 6);
    std::vector<CLMiLoLoiTable::Entry>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<CLMiLoLoiTable::Entry>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_256364914(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMiLoLoiTable::Entry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMiLoLoiTable::Entry>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(result - 8);
  if (v7 >= v6)
  {
    uint64_t v12 = (uint64_t)(v7 - *a1) >> 6;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 58) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = v5 - *a1;
    if (v14 >> 5 > v13) {
      unint64_t v13 = v14 >> 5;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v15 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    v21[4] = result;
    if (v15) {
      int v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRecordingLabelsTable::Entry>>(result, v15);
    }
    else {
      int v16 = 0;
    }
    __int16 v17 = &v16[64 * v12];
    v21[0] = v16;
    v21[1] = v17;
    v21[3] = &v16[64 * v15];
    long long v18 = *a2;
    long long v19 = a2[1];
    *((void *)v17 + 4) = *((void *)a2 + 4);
    *(_OWORD *)__int16 v17 = v18;
    *((_OWORD *)v17 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v19;
    long long v20 = *(long long *)((char *)a2 + 40);
    *((void *)v17 + 7) = *((void *)a2 + 7);
    *(_OWORD *)(v17 + 40) = v20;
    *((void *)a2 + 6) = 0;
    *((void *)a2 + 7) = 0;
    *((void *)a2 + 5) = 0;
    void v21[2] = v17 + 64;
    std::vector<CLMiLoLoiTable::Entry>::__swap_out_circular_buffer(a1, v21);
    uint64_t v11 = a1[1];
    uint64_t result = std::__split_buffer<CLMiLoLoiTable::Entry>::~__split_buffer((uint64_t)v21);
  }
  else
  {
    long long v8 = *a2;
    long long v9 = a2[1];
    *(void *)(v7 + 32) = *((void *)a2 + 4);
    *(_OWORD *)unint64_t v7 = v8;
    *(_OWORD *)(v7 + 16) = v9;
    long long v10 = *(long long *)((char *)a2 + 40);
    *(void *)(v7 + 56) = *((void *)a2 + 7);
    *(_OWORD *)(v7 + 40) = v10;
    *((void *)a2 + 6) = 0;
    *((void *)a2 + 7) = 0;
    *((void *)a2 + 5) = 0;
    uint64_t v11 = v7 + 64;
    a1[1] = v7 + 64;
  }
  a1[1] = v11;
  return result;
}

void sub_256364A50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMiLoLoiTable::Entry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMiLoLoiTable::Entry>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMiLoLoiTable::Entry>,std::reverse_iterator<CLMiLoLoiTable::Entry*>,std::reverse_iterator<CLMiLoLoiTable::Entry*>,std::reverse_iterator<CLMiLoLoiTable::Entry*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMiLoLoiTable::Entry>,std::reverse_iterator<CLMiLoLoiTable::Entry*>,std::reverse_iterator<CLMiLoLoiTable::Entry*>,std::reverse_iterator<CLMiLoLoiTable::Entry*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 64);
      long long v11 = *(_OWORD *)(a3 - 48);
      *(void *)(v9 - 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v9 - 64) = v10;
      *(_OWORD *)(v9 - 48) = v11;
      long long v12 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v12;
      v9 -= 64;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 64;
      a3 -= 64;
    }
    while (a3 != a5);
    *((void *)&v17 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v9;
  }
  char v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMiLoLoiTable::Entry>,std::reverse_iterator<CLMiLoLoiTable::Entry*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMiLoLoiTable::Entry>,std::reverse_iterator<CLMiLoLoiTable::Entry*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<CLMiLoLoiTable::Entry>,std::reverse_iterator<CLMiLoLoiTable::Entry*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<CLMiLoLoiTable::Entry>,std::reverse_iterator<CLMiLoLoiTable::Entry*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 63) < 0) {
      operator delete(*(void **)(v1 + 40));
    }
    v1 += 64;
  }
}

uint64_t std::__split_buffer<CLMiLoLoiTable::Entry>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<CLMiLoLoiTable::Entry>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 64;
      *(void *)(a1 + 16) = v2 - 64;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        uint64_t v5 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void std::vector<CLMiLoLoiTable::Entry>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<CLMiLoLoiTable::Entry>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void *std::vector<CLMiLoLoiTable::Entry>::__init_with_size[abi:ne180100]<CLMiLoLoiTable::Entry*,CLMiLoLoiTable::Entry*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMiLoLoiTable::Entry>,CLMiLoLoiTable::Entry*,CLMiLoLoiTable::Entry*,CLMiLoLoiTable::Entry*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_256364D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<CLMiLoLoiTable::Entry>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMiLoLoiTable::Entry>,CLMiLoLoiTable::Entry*,CLMiLoLoiTable::Entry*,CLMiLoLoiTable::Entry*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v15 = a4;
  uint64_t v16 = a4;
  v13[0] = a1;
  v13[1] = &v15;
  _DWORD v13[2] = &v16;
  char v14 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = (long long *)(a2 + 40);
    do
    {
      long long v7 = *(long long *)((char *)v6 - 40);
      long long v8 = *(long long *)((char *)v6 - 24);
      *(void *)(v4 + 32) = *((void *)v6 - 1);
      *(_OWORD *)uint64_t v4 = v7;
      *(_OWORD *)(v4 + 16) = v8;
      uint64_t v9 = (std::string *)(v4 + 40);
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v16;
      }
      else
      {
        long long v10 = *v6;
        *(void *)(v4 + 56) = *((void *)v6 + 2);
        *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
      }
      uint64_t v11 = (uint64_t)v6 - 40;
      v4 += 64;
      uint64_t v16 = v4;
      v6 += 4;
    }
    while (v11 + 64 != a3);
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMiLoLoiTable::Entry>,CLMiLoLoiTable::Entry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v4;
}

void sub_256364E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMiLoLoiTable::Entry>,CLMiLoLoiTable::Entry*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<CLMiLoLoiTable::Entry>,CLMiLoLoiTable::Entry*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<CLMiLoLoiTable::Entry>,CLMiLoLoiTable::Entry*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0) {
      operator delete(*(void **)(v1 - 24));
    }
    v1 -= 64;
  }
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::uuids::uuid *,false>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
LABEL_1:
  uint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = ((char *)a2 - (char *)v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          unint64_t v25 = *(a2 - 2);
          unint64_t v24 = a2 - 2;
          unint64_t v26 = bswap64(v25);
          unint64_t v27 = bswap64(*v11);
          if (v26 == v27 && (v26 = bswap64(v24[1]), unint64_t v27 = bswap64(v11[1]), v26 == v27))
          {
            int v28 = 0;
          }
          else if (v26 < v27)
          {
            int v28 = -1;
          }
          else
          {
            int v28 = 1;
          }
          if (v28 < 0)
          {
            long long v30 = *(_OWORD *)v11;
            *(_OWORD *)uint64_t v11 = *(_OWORD *)v24;
            *(_OWORD *)unint64_t v24 = v30;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::uuids::uuid *>(v11, v11 + 2, a2 - 2);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::uuids::uuid *>(v11, v11 + 2, v11 + 4, a2 - 2);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::uuids::uuid *>(v11, v11 + 2, v11 + 4, v11 + 6, a2 - 2);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::uuids::uuid *,boost::uuids::uuid *>(v11, a2, a2, a3);
      }
      return;
    }
    unint64_t v16 = v15 >> 1;
    long long v17 = &v11[2 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::uuids::uuid *>(v11, &v11[2 * (v15 >> 1)], a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::uuids::uuid *>(v11 + 2, v17 - 2, a2 - 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::uuids::uuid *>(v11 + 4, &v11[2 * v16 + 2], a2 - 6);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::uuids::uuid *>(v17 - 2, v17, &v11[2 * v16 + 2]);
      long long v29 = *(_OWORD *)v11;
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v17;
      *(_OWORD *)long long v17 = v29;
      if (a5) {
        goto LABEL_19;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::uuids::uuid *>(&v11[2 * (v15 >> 1)], v11, a2 - 2);
      if (a5) {
        goto LABEL_19;
      }
    }
    unint64_t v18 = bswap64(*(v11 - 2));
    unint64_t v19 = bswap64(*v11);
    if (v18 == v19 && (unint64_t v18 = bswap64(*(v11 - 1)), v19 = bswap64(v11[1]), v18 == v19))
    {
      int v20 = 0;
    }
    else if (v18 < v19)
    {
      int v20 = -1;
    }
    else
    {
      int v20 = 1;
    }
    if ((v20 & 0x80000000) == 0)
    {
      uint64_t v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,boost::uuids::uuid *,std::__less<void,void> &>(v11, a2);
      goto LABEL_24;
    }
LABEL_19:
    uint64_t v21 = (unint64_t *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,boost::uuids::uuid *,std::__less<void,void> &>((long long *)v11, (long long *)a2);
    if ((v22 & 1) == 0) {
      goto LABEL_22;
    }
    BOOL v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::uuids::uuid *>(v11, v21);
    uint64_t v11 = v21 + 2;
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::uuids::uuid *>(v21 + 2, a2))
    {
      a4 = -v13;
      a2 = v21;
      if (v23) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v23)
    {
LABEL_22:
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::uuids::uuid *,false>(a1, v21, a3, -v13, a5 & 1);
      uint64_t v11 = v21 + 2;
LABEL_24:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::uuids::uuid *>(v11, a2);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::uuids::uuid *>(v11, a2);
  }
}

unint64_t *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::uuids::uuid *>(unint64_t *result, unint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = result;
      do
      {
        char v5 = v2;
        unint64_t v6 = bswap64(v4[2]);
        unint64_t v7 = bswap64(*v4);
        if (v6 != v7 || (v6 = bswap64(v5[1]), unint64_t v7 = bswap64(v4[1]), v6 != v7))
        {
          int v8 = v6 < v7 ? -1 : 1;
          if (v8 < 0)
          {
            long long v15 = *(_OWORD *)v5;
            uint64_t v9 = v3;
            while (1)
            {
              long long v10 = (char *)result + v9;
              *(_OWORD *)((char *)result + v9 + 16) = *(_OWORD *)((char *)result + v9);
              if (!v9) {
                break;
              }
              unint64_t v11 = bswap64(v15);
              unint64_t v12 = bswap64(*((void *)v10 - 2));
              if (v11 == v12
                && (unint64_t v11 = bswap64(*((unint64_t *)&v15 + 1)), v12 = bswap64(*((void *)v10 - 1)), v11 == v12))
              {
                int v13 = 0;
              }
              else if (v11 < v12)
              {
                int v13 = -1;
              }
              else
              {
                int v13 = 1;
              }
              v9 -= 16;
              if ((v13 & 0x80000000) == 0)
              {
                uint64_t v14 = (unint64_t *)((char *)result + v9 + 16);
                goto LABEL_21;
              }
            }
            uint64_t v14 = result;
LABEL_21:
            *(_OWORD *)uint64_t v14 = v15;
          }
        }
        uint64_t v2 = v5 + 2;
        v3 += 16;
        uint64_t v4 = v5;
      }
      while (v5 + 2 != a2);
    }
  }
  return result;
}

unint64_t *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::uuids::uuid *>(unint64_t *result, unint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v3 = result - 2;
      do
      {
        uint64_t v4 = v2;
        unint64_t v5 = bswap64(*v2);
        unint64_t v6 = bswap64(*result);
        if (v5 != v6 || (v5 = bswap64(v4[1]), unint64_t v6 = bswap64(result[1]), v5 != v6))
        {
          int v7 = v5 < v6 ? -1 : 1;
          if (v7 < 0)
          {
            long long v12 = *(_OWORD *)v4;
            int v8 = v3;
            do
            {
              *((_OWORD *)v8 + 2) = *((_OWORD *)v8 + 1);
              unint64_t v9 = bswap64(v12);
              unint64_t v10 = bswap64(*v8);
              if (v9 == v10 && (v9 = bswap64(*((unint64_t *)&v12 + 1)), unint64_t v10 = bswap64(v8[1]), v9 == v10))
              {
                int v11 = 0;
              }
              else if (v9 < v10)
              {
                int v11 = -1;
              }
              else
              {
                int v11 = 1;
              }
              v8 -= 2;
            }
            while (v11 < 0);
            *((_OWORD *)v8 + 2) = v12;
          }
        }
        uint64_t v2 = v4 + 2;
        v3 += 2;
        uint64_t result = v4;
      }
      while (v4 + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::uuids::uuid *>(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = bswap64(*a2);
  unint64_t v4 = bswap64(*a1);
  if (v3 == v4 && (unint64_t v3 = bswap64(a2[1]), v4 = bswap64(a1[1]), v3 == v4))
  {
    int v5 = 0;
  }
  else if (v3 < v4)
  {
    int v5 = -1;
  }
  else
  {
    int v5 = 1;
  }
  unint64_t v6 = bswap64(*a3);
  unint64_t v7 = bswap64(*a2);
  if (v6 == v7 && (v6 = bswap64(a3[1]), unint64_t v7 = bswap64(a2[1]), v6 == v7))
  {
    int v8 = 0;
    if (v5 < 0) {
      goto LABEL_10;
    }
  }
  else
  {
    if (v6 < v7) {
      int v8 = -1;
    }
    else {
      int v8 = 1;
    }
    if (v5 < 0)
    {
LABEL_10:
      if (v8 < 0)
      {
        long long v20 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a3;
        *(_OWORD *)a3 = v20;
      }
      else
      {
        long long v9 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)a2 = v9;
        unint64_t v10 = bswap64(*a3);
        unint64_t v11 = bswap64(*a2);
        if (v10 != v11 || (unint64_t v10 = bswap64(a3[1]), v11 = bswap64(a2[1]), v10 != v11))
        {
          int v16 = v10 < v11 ? -1 : 1;
          if (v16 < 0)
          {
            long long v17 = *(_OWORD *)a2;
            *(_OWORD *)a2 = *(_OWORD *)a3;
            *(_OWORD *)a3 = v17;
            return 2;
          }
        }
      }
      return 1;
    }
  }
  if ((v8 & 0x80000000) == 0) {
    return 0;
  }
  long long v13 = *(_OWORD *)a2;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)a3 = v13;
  unint64_t v14 = bswap64(*a2);
  unint64_t v15 = bswap64(*a1);
  if (v14 != v15 || (unint64_t v14 = bswap64(a2[1]), v15 = bswap64(a1[1]), v14 != v15))
  {
    int v18 = v14 < v15 ? -1 : 1;
    if (v18 < 0)
    {
      long long v19 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)a2 = v19;
      return 2;
    }
  }
  return 1;
}

unint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,boost::uuids::uuid *,std::__less<void,void> &>(unint64_t *a1, unint64_t *a2)
{
  long long v32 = *(_OWORD *)a1;
  unint64_t v2 = bswap64(*a1);
  unint64_t v3 = bswap64(*(a2 - 2));
  if (v2 == v3 && (unint64_t v2 = bswap64(*((unint64_t *)&v32 + 1)), v3 = bswap64(*(a2 - 1)), v2 == v3)
    || (v2 < v3 ? (int v10 = -1) : (int v10 = 1), (v10 & 0x80000000) == 0))
  {
    unint64_t v11 = a1 + 2;
    do
    {
      int v5 = v11;
      if (v11 >= a2) {
        break;
      }
      unint64_t v12 = bswap64(v32);
      unint64_t v13 = bswap64(*v5);
      if (v12 == v13 && (unint64_t v12 = bswap64(*((unint64_t *)&v32 + 1)), v13 = bswap64(v5[1]), v12 == v13)) {
        int v14 = 0;
      }
      else {
        int v14 = v12 < v13 ? -1 : 1;
      }
      unint64_t v11 = v5 + 2;
    }
    while ((v14 & 0x80000000) == 0);
  }
  else
  {
    unint64_t v4 = a1;
    int v5 = a1;
    do
    {
      unint64_t v6 = v5[2];
      v5 += 2;
      unint64_t v7 = bswap64(v32);
      unint64_t v8 = bswap64(v6);
      if (v7 == v8 && (unint64_t v7 = bswap64(*((unint64_t *)&v32 + 1)), v8 = bswap64(v4[3]), v7 == v8))
      {
        int v9 = 0;
      }
      else if (v7 < v8)
      {
        int v9 = -1;
      }
      else
      {
        int v9 = 1;
      }
      unint64_t v4 = v5;
    }
    while ((v9 & 0x80000000) == 0);
  }
  if (v5 >= a2)
  {
    unint64_t v15 = a2;
  }
  else
  {
    unint64_t v15 = a2;
    do
    {
      unint64_t v16 = *(v15 - 2);
      v15 -= 2;
      unint64_t v17 = bswap64(v32);
      unint64_t v18 = bswap64(v16);
      if (v17 == v18 && (unint64_t v17 = bswap64(*((unint64_t *)&v32 + 1)), v18 = bswap64(*(a2 - 1)), v17 == v18))
      {
        int v19 = 0;
      }
      else if (v17 < v18)
      {
        int v19 = -1;
      }
      else
      {
        int v19 = 1;
      }
      a2 = v15;
    }
    while (v19 < 0);
  }
  while (v5 < v15)
  {
    long long v33 = *(_OWORD *)v5;
    *(_OWORD *)int v5 = *(_OWORD *)v15;
    *(_OWORD *)unint64_t v15 = v33;
    long long v20 = v5;
    do
    {
      unint64_t v21 = v5[2];
      v5 += 2;
      unint64_t v22 = bswap64(v32);
      unint64_t v23 = bswap64(v21);
      if (v22 == v23 && (unint64_t v22 = bswap64(*((unint64_t *)&v32 + 1)), v23 = bswap64(v20[3]), v22 == v23))
      {
        int v24 = 0;
      }
      else if (v22 < v23)
      {
        int v24 = -1;
      }
      else
      {
        int v24 = 1;
      }
      long long v20 = v5;
    }
    while ((v24 & 0x80000000) == 0);
    unint64_t v25 = v15;
    do
    {
      unint64_t v26 = *(v15 - 2);
      v15 -= 2;
      unint64_t v27 = bswap64(v32);
      unint64_t v28 = bswap64(v26);
      if (v27 == v28 && (unint64_t v27 = bswap64(*((unint64_t *)&v32 + 1)), v28 = bswap64(*(v25 - 1)), v27 == v28))
      {
        int v29 = 0;
      }
      else if (v27 < v28)
      {
        int v29 = -1;
      }
      else
      {
        int v29 = 1;
      }
      unint64_t v25 = v15;
    }
    while (v29 < 0);
  }
  long long v30 = v5 - 2;
  if (v5 - 2 != a1) {
    *(_OWORD *)a1 = *(_OWORD *)v30;
  }
  *(_OWORD *)long long v30 = v32;
  return v5;
}

long long *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,boost::uuids::uuid *,std::__less<void,void> &>(long long *a1, long long *a2)
{
  uint64_t v2 = 0;
  long long v30 = *a1;
  do
  {
    unint64_t v3 = bswap64(*(void *)&a1[v2 + 1]);
    unint64_t v4 = bswap64(v30);
    if (v3 == v4
      && (unint64_t v3 = bswap64(*((void *)&a1[v2 + 1] + 1)), v4 = bswap64(*((unint64_t *)&v30 + 1)), v3 == v4))
    {
      int v5 = 0;
    }
    else if (v3 < v4)
    {
      int v5 = -1;
    }
    else
    {
      int v5 = 1;
    }
    ++v2;
  }
  while (v5 < 0);
  unint64_t v6 = &a1[v2];
  unint64_t v7 = &a1[v2 - 1];
  if (v2 == 1)
  {
    while (v6 < a2)
    {
      unint64_t v8 = a2 - 1;
      unint64_t v13 = bswap64(*((void *)a2 - 2));
      unint64_t v14 = bswap64(v30);
      if (v13 == v14
        && (v13 = bswap64(*((void *)a2 - 1)), unint64_t v14 = bswap64(*((unint64_t *)&v30 + 1)), v13 == v14))
      {
        int v15 = 0;
      }
      else if (v13 < v14)
      {
        int v15 = -1;
      }
      else
      {
        int v15 = 1;
      }
      --a2;
      if (v15 < 0) {
        goto LABEL_28;
      }
    }
    unint64_t v8 = a2;
  }
  else
  {
    unint64_t v8 = a2;
    do
    {
      unint64_t v9 = *((void *)v8-- - 2);
      unint64_t v10 = bswap64(v9);
      unint64_t v11 = bswap64(v30);
      if (v10 == v11
        && (unint64_t v10 = bswap64(*((void *)a2 - 1)), v11 = bswap64(*((unint64_t *)&v30 + 1)), v10 == v11))
      {
        int v12 = 0;
      }
      else if (v10 < v11)
      {
        int v12 = -1;
      }
      else
      {
        int v12 = 1;
      }
      a2 = v8;
    }
    while ((v12 & 0x80000000) == 0);
  }
LABEL_28:
  if (v6 < v8)
  {
    unint64_t v16 = (unint64_t)v6;
    unint64_t v17 = v8;
    do
    {
      long long v18 = *(_OWORD *)v16;
      *(_OWORD *)unint64_t v16 = *v17;
      *unint64_t v17 = v18;
      unint64_t v19 = v16;
      do
      {
        unint64_t v20 = *(void *)(v16 + 16);
        v16 += 16;
        unint64_t v21 = bswap64(v20);
        unint64_t v22 = bswap64(v30);
        if (v21 == v22
          && (v21 = bswap64(*(void *)(v19 + 24)), unint64_t v22 = bswap64(*((unint64_t *)&v30 + 1)), v21 == v22))
        {
          int v23 = 0;
        }
        else if (v21 < v22)
        {
          int v23 = -1;
        }
        else
        {
          int v23 = 1;
        }
        unint64_t v19 = v16;
      }
      while (v23 < 0);
      int v24 = v17;
      do
      {
        unint64_t v25 = *((void *)v17-- - 2);
        unint64_t v26 = bswap64(v25);
        unint64_t v27 = bswap64(v30);
        if (v26 == v27
          && (v26 = bswap64(*((void *)v24 - 1)), unint64_t v27 = bswap64(*((unint64_t *)&v30 + 1)), v26 == v27))
        {
          int v28 = 0;
        }
        else if (v26 < v27)
        {
          int v28 = -1;
        }
        else
        {
          int v28 = 1;
        }
        int v24 = v17;
      }
      while ((v28 & 0x80000000) == 0);
    }
    while (v16 < (unint64_t)v17);
    unint64_t v7 = (long long *)(v16 - 16);
  }
  if (v7 != a1) {
    *a1 = *v7;
  }
  long long *v7 = v30;
  return v7;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::uuids::uuid *>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = a2 - 2;
      unint64_t v7 = bswap64(*(a2 - 2));
      unint64_t v8 = bswap64(*a1);
      if (v7 != v8 || (unint64_t v7 = bswap64(*(a2 - 1)), v8 = bswap64(a1[1]), v7 != v8))
      {
        if (v7 < v8) {
          int v22 = -1;
        }
        else {
          int v22 = 1;
        }
        if (v22 < 0)
        {
          long long v23 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v6;
          *(_OWORD *)unint64_t v6 = v23;
        }
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::uuids::uuid *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::uuids::uuid *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::uuids::uuid *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      unint64_t v9 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::uuids::uuid *>(a1, a1 + 2, a1 + 4);
      unint64_t v10 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    unint64_t v13 = bswap64(*v10);
    unint64_t v14 = bswap64(*v9);
    if (v13 != v14 || (v13 = bswap64(v10[1]), unint64_t v14 = bswap64(v9[1]), v13 != v14))
    {
      int v15 = v13 < v14 ? -1 : 1;
      if (v15 < 0)
      {
        long long v24 = *(_OWORD *)v10;
        uint64_t v16 = v11;
        while (1)
        {
          unint64_t v17 = (char *)a1 + v16;
          *(_OWORD *)((char *)a1 + v16 + 48) = *(_OWORD *)((char *)a1 + v16 + 32);
          if (v16 == -32) {
            break;
          }
          unint64_t v18 = bswap64(v24);
          unint64_t v19 = bswap64(*((void *)v17 + 2));
          if (v18 == v19
            && (unint64_t v18 = bswap64(*((unint64_t *)&v24 + 1)), v19 = bswap64(*((void *)v17 + 3)), v18 == v19))
          {
            int v20 = 0;
          }
          else if (v18 < v19)
          {
            int v20 = -1;
          }
          else
          {
            int v20 = 1;
          }
          v16 -= 16;
          if ((v20 & 0x80000000) == 0)
          {
            unint64_t v21 = (unint64_t *)((char *)a1 + v16 + 48);
            goto LABEL_24;
          }
        }
        unint64_t v21 = a1;
LABEL_24:
        *(_OWORD *)unint64_t v21 = v24;
        if (++v12 == 8) {
          return v10 + 2 == a2;
        }
      }
    }
    unint64_t v9 = v10;
    v11 += 16;
    v10 += 2;
    if (v10 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::uuids::uuid *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::uuids::uuid *>(a1, a2, a3);
  unint64_t v9 = bswap64(*a4);
  unint64_t v10 = bswap64(*a3);
  if (v9 != v10 || (v9 = bswap64(a4[1]), unint64_t v10 = bswap64(a3[1]), v9 != v10))
  {
    int v11 = v9 < v10 ? -1 : 1;
    if (v11 < 0)
    {
      __n128 result = *(__n128 *)a3;
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(__n128 *)a4 = result;
      unint64_t v12 = bswap64(*a3);
      unint64_t v13 = bswap64(*a2);
      if (v12 != v13 || (unint64_t v12 = bswap64(a3[1]), v13 = bswap64(a2[1]), v12 != v13))
      {
        int v14 = v12 < v13 ? -1 : 1;
        if (v14 < 0)
        {
          __n128 result = *(__n128 *)a2;
          *(_OWORD *)a2 = *(_OWORD *)a3;
          *(__n128 *)a3 = result;
          unint64_t v15 = bswap64(*a2);
          unint64_t v16 = bswap64(*a1);
          if (v15 != v16 || (v15 = bswap64(a2[1]), unint64_t v16 = bswap64(a1[1]), v15 != v16))
          {
            if (v15 < v16) {
              int v17 = -1;
            }
            else {
              int v17 = 1;
            }
            if (v17 < 0)
            {
              __n128 result = *(__n128 *)a1;
              *(_OWORD *)a1 = *(_OWORD *)a2;
              *(__n128 *)a2 = result;
            }
          }
        }
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::uuids::uuid *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::uuids::uuid *>(a1, a2, a3, a4).n128_u64[0];
  unint64_t v11 = bswap64(*a5);
  unint64_t v12 = bswap64(*a4);
  if (v11 != v12 || (unint64_t v11 = bswap64(a5[1]), v12 = bswap64(a4[1]), v11 != v12))
  {
    int v13 = v11 < v12 ? -1 : 1;
    if (v13 < 0)
    {
      __n128 result = *(__n128 *)a4;
      *(_OWORD *)a4 = *(_OWORD *)a5;
      *(__n128 *)a5 = result;
      unint64_t v14 = bswap64(*a4);
      unint64_t v15 = bswap64(*a3);
      if (v14 != v15 || (unint64_t v14 = bswap64(a4[1]), v15 = bswap64(a3[1]), v14 != v15))
      {
        int v16 = v14 < v15 ? -1 : 1;
        if (v16 < 0)
        {
          __n128 result = *(__n128 *)a3;
          *(_OWORD *)a3 = *(_OWORD *)a4;
          *(__n128 *)a4 = result;
          unint64_t v17 = bswap64(*a3);
          unint64_t v18 = bswap64(*a2);
          if (v17 != v18 || (unint64_t v17 = bswap64(a3[1]), v18 = bswap64(a2[1]), v17 != v18))
          {
            int v19 = v17 < v18 ? -1 : 1;
            if (v19 < 0)
            {
              __n128 result = *(__n128 *)a2;
              *(_OWORD *)a2 = *(_OWORD *)a3;
              *(__n128 *)a3 = result;
              unint64_t v20 = bswap64(*a2);
              unint64_t v21 = bswap64(*a1);
              if (v20 == v21 && (v20 = bswap64(a2[1]), unint64_t v21 = bswap64(a1[1]), v20 == v21))
              {
                int v22 = 0;
              }
              else if (v20 < v21)
              {
                int v22 = -1;
              }
              else
              {
                int v22 = 1;
              }
              if (v22 < 0)
              {
                __n128 result = *(__n128 *)a1;
                *(_OWORD *)a1 = *(_OWORD *)a2;
                *(__n128 *)a2 = result;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

unint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::uuids::uuid *,boost::uuids::uuid *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      unint64_t v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::uuids::uuid *>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    int v13 = a2;
    if (a2 != a3)
    {
      unint64_t v14 = a2;
      do
      {
        unint64_t v15 = bswap64(*v14);
        unint64_t v16 = bswap64(*a1);
        if (v15 != v16 || (v15 = bswap64(v14[1]), unint64_t v16 = bswap64(a1[1]), v15 != v16))
        {
          int v17 = v15 < v16 ? -1 : 1;
          if (v17 < 0)
          {
            long long v18 = *(_OWORD *)v14;
            *(_OWORD *)unint64_t v14 = *(_OWORD *)a1;
            *(_OWORD *)a1 = v18;
            std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::uuids::uuid *>((uint64_t)a1, a4, v9, a1);
          }
        }
        v14 += 2;
      }
      while (v14 != a3);
      int v13 = a3;
    }
    if (v8 >= 17)
    {
      uint64_t v19 = (unint64_t)v8 >> 4;
      unint64_t v20 = a2 - 2;
      do
      {
        long long v24 = *(_OWORD *)a1;
        unint64_t v21 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::uuids::uuid *>(a1, a4, v19);
        if (v20 == v21)
        {
          *(_OWORD *)unint64_t v21 = v24;
        }
        else
        {
          *(_OWORD *)unint64_t v21 = *(_OWORD *)v20;
          *(_OWORD *)unint64_t v20 = v24;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::uuids::uuid *>((uint64_t)a1, (uint64_t)(v21 + 2), a4, ((char *)(v21 + 2) - (char *)a1) >> 4);
        }
        v20 -= 2;
      }
      while (v19-- > 2);
    }
    return v13;
  }
  return a3;
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::uuids::uuid *>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - a1;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - a1) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (unint64_t *)(a1 + 16 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        unint64_t v10 = bswap64(*v8);
        unint64_t v11 = bswap64(v8[2]);
        if (v10 == v11 && (unint64_t v10 = bswap64(v8[1]), v11 = bswap64(v8[3]), v10 == v11)) {
          int v12 = 0;
        }
        else {
          int v12 = v10 < v11 ? -1 : 1;
        }
        if (v12 < 0)
        {
          v8 += 2;
          uint64_t v7 = v9;
        }
      }
      unint64_t v13 = bswap64(*v8);
      unint64_t v14 = bswap64(*a4);
      if (v13 == v14 && (v13 = bswap64(v8[1]), unint64_t v14 = bswap64(a4[1]), v13 == v14)
        || (v13 < v14 ? (int v15 = -1) : (int v15 = 1), (v15 & 0x80000000) == 0))
      {
        __n128 v25 = *(__n128 *)a4;
        do
        {
          unint64_t v16 = (__n128 *)v8;
          *(_OWORD *)a4 = *(_OWORD *)v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v17 = (2 * v7) | 1;
          uint64_t v8 = (unint64_t *)(a1 + 16 * v17);
          uint64_t v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            uint64_t v7 = v17;
          }
          else
          {
            unint64_t v18 = bswap64(*v8);
            unint64_t v19 = bswap64(v8[2]);
            if (v18 == v19 && (unint64_t v18 = bswap64(v8[1]), v19 = bswap64(v8[3]), v18 == v19)) {
              int v20 = 0;
            }
            else {
              int v20 = v18 < v19 ? -1 : 1;
            }
            if (v20 >= 0) {
              uint64_t v7 = v17;
            }
            else {
              v8 += 2;
            }
          }
          unint64_t v21 = bswap64(*v8);
          unint64_t v22 = bswap64(v25.n128_u64[0]);
          if (v21 == v22 && (v21 = bswap64(v8[1]), unint64_t v22 = bswap64(v25.n128_u64[1]), v21 == v22)) {
            int v23 = 0;
          }
          else {
            int v23 = v21 < v22 ? -1 : 1;
          }
          a4 = (unint64_t *)v16;
        }
        while ((v23 & 0x80000000) == 0);
        __n128 result = v25;
        *unint64_t v16 = v25;
      }
    }
  }
  return result;
}

unint64_t *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::uuids::uuid *>(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = &a1[2 * v3 + 2];
    uint64_t v7 = (2 * v3) | 1;
    uint64_t v8 = 2 * v3 + 2;
    if (v8 < a3)
    {
      unint64_t v9 = bswap64(*v6);
      unint64_t v10 = bswap64(v6[2]);
      if (v9 == v10 && (v9 = bswap64(v6[1]), unint64_t v10 = bswap64(v6[3]), v9 == v10))
      {
        int v11 = 0;
      }
      else if (v9 < v10)
      {
        int v11 = -1;
      }
      else
      {
        int v11 = 1;
      }
      if (v11 < 0)
      {
        v6 += 2;
        uint64_t v7 = v8;
      }
    }
    *(_OWORD *)a1 = *(_OWORD *)v6;
    a1 = v6;
    uint64_t v3 = v7;
  }
  while (v7 <= v5);
  return v6;
}

__n128 std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::uuids::uuid *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v4 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v5 = (unint64_t *)(a1 + 16 * v4);
    uint64_t v6 = (__n128 *)(a2 - 16);
    unint64_t v7 = bswap64(*v5);
    unint64_t v8 = bswap64(*(void *)(a2 - 16));
    if (v7 != v8 || (unint64_t v7 = bswap64(v5[1]), v8 = bswap64(*(void *)(a2 - 8)), v7 != v8))
    {
      int v9 = v7 < v8 ? -1 : 1;
      if (v9 < 0)
      {
        __n128 v15 = *v6;
        do
        {
          unint64_t v10 = (__n128 *)v5;
          __n128 *v6 = *(__n128 *)v5;
          if (!v4) {
            break;
          }
          unint64_t v4 = (v4 - 1) >> 1;
          uint64_t v5 = (unint64_t *)(a1 + 16 * v4);
          unint64_t v11 = bswap64(*v5);
          unint64_t v12 = bswap64(v15.n128_u64[0]);
          if (v11 == v12 && (unint64_t v11 = bswap64(v5[1]), v12 = bswap64(v15.n128_u64[1]), v11 == v12)) {
            int v13 = 0;
          }
          else {
            int v13 = v11 < v12 ? -1 : 1;
          }
          uint64_t v6 = v10;
        }
        while (v13 < 0);
        __n128 result = v15;
        *unint64_t v10 = v15;
      }
    }
  }
  return result;
}

void *std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<boost::uuids::uuid *>,std::__wrap_iter<boost::uuids::uuid *>,std::__equal_to &>(void *a1, void *a2)
{
  uint64_t v2 = a2;
  if (a1 != a2)
  {
    do
    {
      uint64_t v3 = a1 + 2;
      if (a1 + 2 == a2) {
        return a2;
      }
      BOOL v4 = *a1 == a1[2] && a1[1] == a1[3];
      a1 += 2;
    }
    while (!v4);
    uint64_t v5 = v3 + 2;
    uint64_t v6 = v3 - 2;
    while (v5 != a2)
    {
      if (*v6 != *v5 || v6[1] != v5[1])
      {
        *((_OWORD *)v6 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = *(_OWORD *)v5;
        v6 += 2;
      }
      v5 += 2;
    }
    return v6 + 2;
  }
  return v2;
}

uint64_t std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  BOOL v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t CLMicroLocationBluetoothIdentityTable::Entry::Entry(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, long long *a5, double a6)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v9 = *a4;
    *(void *)(a1 + 32) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 16) = v9;
  }
  unint64_t v10 = (std::string *)(a1 + 40);
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v11 = *a5;
    *(void *)(a1 + 56) = *((void *)a5 + 2);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  *(double *)(a1 + 64) = a6;
  return a1;
}

void sub_256366AA4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_256366D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent(v9);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)&a9);
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_9()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

void sub_256366E98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ULDBUtils::insertEntries<CLMicroLocationMigrationTable,ULMigrationMO>(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v12 = 0;
  int v13 = &v12;
  uint64_t v14 = 0x2020000000;
  char v15 = 0;
  BOOL v4 = [v3 managedObjectContext];
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 3221225472;
  v8[2] = ___ZN9ULDBUtils13insertEntriesI29CLMicroLocationMigrationTable13ULMigrationMOEEbP7ULStoreRKNSt3__16vectorINT_5EntryENS5_9allocatorIS8_EEEE_block_invoke;
  int v8[3] = &unk_2653F90B8;
  uint64_t v11 = a2;
  id v5 = v3;
  id v9 = v5;
  unint64_t v10 = &v12;
  [v4 performBlockAndWait:v8];

  uint64_t v6 = *((unsigned __int8 *)v13 + 24);
  _Block_object_dispose(&v12, 8);

  return v6;
}

void sub_256366FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ULDBUtils::fetchEntries<CLMicroLocationMigrationTable,ULMigrationMO>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  uint64_t v23 = 0;
  long long v24 = &v23;
  uint64_t v25 = 0x4812000000;
  unint64_t v26 = __Block_byref_object_copy__2;
  unint64_t v27 = __Block_byref_object_dispose__2;
  int v28 = &unk_25654E519;
  long long v30 = 0;
  uint64_t v31 = 0;
  std::string __p = 0;
  uint64_t v12 = [v9 managedObjectContext];
  v17[0] = MEMORY[0x263EF8330];
  v17[1] = 3221225472;
  v17[2] = ___ZN9ULDBUtils12fetchEntriesI29CLMicroLocationMigrationTable13ULMigrationMOEENSt3__16vectorINT_5EntryENS3_9allocatorIS6_EEEEP7ULStoreP7NSArrayIP11NSPredicateEPSC_IP16NSSortDescriptorEm_block_invoke;
  v17[3] = &unk_2653F90E0;
  id v13 = v10;
  id v18 = v13;
  id v14 = v11;
  id v19 = v14;
  uint64_t v22 = a4;
  id v15 = v9;
  id v20 = v15;
  unint64_t v21 = &v23;
  [v12 performBlockAndWait:v17];

  unint64_t v16 = v24;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  std::vector<CLMicroLocationMigrationTable::Entry>::__init_with_size[abi:ne180100]<CLMicroLocationMigrationTable::Entry*,CLMicroLocationMigrationTable::Entry*>(a5, (const void *)v16[6], v16[7], (v16[7] - v16[6]) >> 4);

  _Block_object_dispose(&v23, 8);
  if (__p)
  {
    long long v30 = __p;
    operator delete(__p);
  }
}

void sub_2563671BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  _Block_object_dispose(&a18, 8);
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void ULDBUtils::fetchAllWithLimit<CLMicroLocationMigrationTable,ULMigrationMO>(void *a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  v10[1] = *MEMORY[0x263EF8340];
  id v5 = a1;
  uint64_t v6 = (void *)MEMORY[0x263F08B30];
  unint64_t v7 = [(id)objc_opt_class() defaultSortProperty];
  unint64_t v8 = [v6 sortDescriptorWithKey:v7 ascending:0];

  v10[0] = v8;
  id v9 = [MEMORY[0x263EFF8C0] arrayWithObjects:v10 count:1];
  ULDBUtils::fetchEntries<CLMicroLocationMigrationTable,ULMigrationMO>(v5, 0, v9, a2, a3);
}

void sub_256367324(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2563674E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN9ULDBUtils13insertEntriesI29CLMicroLocationMigrationTable13ULMigrationMOEEbP7ULStoreRKNSt3__16vectorINT_5EntryENS5_9allocatorIS8_EEEE_block_invoke(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(a1 + 48);
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  if (*v2 == v4)
  {
LABEL_4:
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [*(id *)(a1 + 32) commitChangesToStore];
    unint64_t v7 = *(void **)(a1 + 32);
    [v7 deleteOldestRecordsIfFull];
  }
  else
  {
    while (1)
    {
      id v5 = [*(id *)(a1 + 32) managedObjectContext];
      uint64_t v6 = +[ULMigrationMO createFromEntry:v3 inManagedObjectContext:v5];

      if (!v6) {
        break;
      }

      v3 += 16;
      if (v3 == v4) {
        goto LABEL_4;
      }
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_16);
    }
    unint64_t v8 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      id v9 = +[ULMigrationMO entity];
      id v10 = [v9 name];
      int v15 = 68289283;
      int v16 = 0;
      __int16 v17 = 2082;
      id v18 = "";
      __int16 v19 = 2113;
      id v20 = v10;
      _os_log_impl(&dword_25631F000, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to create entry from MO\", \"MO\":%{private, location:escape_only}@}", (uint8_t *)&v15, 0x1Cu);
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_16);
    }
    id v11 = (id)logObject_MicroLocation_Default;
    if (os_signpost_enabled(v11))
    {
      uint64_t v12 = +[ULMigrationMO entity];
      id v13 = [v12 name];
      int v15 = 68289283;
      int v16 = 0;
      __int16 v17 = 2082;
      id v18 = "";
      __int16 v19 = 2113;
      id v20 = v13;
      _os_signpost_emit_with_name_impl(&dword_25631F000, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to create entry from MO", "{\"msg%{public}.0s\":\"Failed to create entry from MO\", \"MO\":%{private, location:escape_only}@}", (uint8_t *)&v15, 0x1Cu);
    }
    id v14 = [*(id *)(a1 + 32) managedObjectContext];
    [v14 reset];
  }
}

void sub_2563677F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_10()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

__n128 __Block_byref_object_copy__2(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void ___ZN9ULDBUtils12fetchEntriesI29CLMicroLocationMigrationTable13ULMigrationMOEENSt3__16vectorINT_5EntryENS3_9allocatorIS6_EEEEP7ULStoreP7NSArrayIP11NSPredicateEPSC_IP16NSSortDescriptorEm_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  uint64_t v3 = (objc_class *)objc_opt_class();
  uint64_t v4 = NSStringFromClass(v3);
  id v5 = [v2 fetchManagedObjectsWithEntityName:v4 byAndPredicates:*(void *)(a1 + 32) sortDescriptors:*(void *)(a1 + 40) andLimit:*(void *)(a1 + 64)];

  ULDBUtils::convertManagedObjectsToEntries<CLMicroLocationMigrationTable,ULMigrationMO>(v5, (uint64_t)&v9);
  uint64_t v6 = *(void **)(*(void *)(a1 + 56) + 8);
  unint64_t v7 = (void *)v6[6];
  if (v7)
  {
    v6[7] = v7;
    operator delete(v7);
    void v6[6] = 0;
    v6[7] = 0;
    v6[8] = 0;
  }
  *((_OWORD *)v6 + 3) = v9;
  v6[8] = v10;
  unint64_t v8 = [*(id *)(a1 + 48) managedObjectContext];
  [v8 reset];
}

void sub_256367994(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ULDBUtils::convertManagedObjectsToEntries<CLMicroLocationMigrationTable,ULMigrationMO>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  id v3 = a1;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  std::vector<CLMicroLocationMigrationTable::Entry>::reserve((char **)a2, [v3 count]);
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  id v4 = v3;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v33 objects:v43 count:16];
  if (v5)
  {
    id v30 = v3;
    uint64_t v6 = *(void *)v34;
    while (2)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v34 != v6) {
          objc_enumerationMutation(v4);
        }
        id v8 = *(id *)(*((void *)&v33 + 1) + 8 * i);
        long long v9 = v8;
        if (!v8 || (objc_msgSend(v8, "convertToEntry", v30), !v32))
        {
          if (onceToken_MicroLocation_Default != -1) {
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_16);
          }
          long long v24 = (id)logObject_MicroLocation_Default;
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
          {
            uint64_t v25 = [v9 entity];
            unint64_t v26 = [v25 name];
            *(_DWORD *)uint64_t buf = 68289283;
            int v38 = 0;
            __int16 v39 = 2082;
            long long v40 = "";
            __int16 v41 = 2113;
            long long v42 = v26;
            _os_log_impl(&dword_25631F000, v24, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to convert MO to entry\", \"MO\":%{private, location:escape_only}@}", buf, 0x1Cu);
          }
          if (onceToken_MicroLocation_Default != -1) {
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_16);
          }
          unint64_t v27 = (id)logObject_MicroLocation_Default;
          if (os_signpost_enabled(v27))
          {
            int v28 = [v9 entity];
            int v29 = [v28 name];
            *(_DWORD *)uint64_t buf = 68289283;
            int v38 = 0;
            __int16 v39 = 2082;
            long long v40 = "";
            __int16 v41 = 2113;
            long long v42 = v29;
            _os_signpost_emit_with_name_impl(&dword_25631F000, v27, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to convert MO to entry", "{\"msg%{public}.0s\":\"Failed to convert MO to entry\", \"MO\":%{private, location:escape_only}@}", buf, 0x1Cu);
          }
          *(void *)(a2 + 8) = *(void *)a2;
          goto LABEL_38;
        }
        id v11 = *(_OWORD **)(a2 + 8);
        unint64_t v10 = *(void *)(a2 + 16);
        if ((unint64_t)v11 >= v10)
        {
          uint64_t v12 = ((uint64_t)v11 - *(void *)a2) >> 4;
          unint64_t v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 60) {
            std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v14 = v10 - *(void *)a2;
          if (v14 >> 3 > v13) {
            unint64_t v13 = v14 >> 3;
          }
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v15 = v13;
          }
          if (v15) {
            int v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::uuids::uuid>>(a2 + 16, v15);
          }
          else {
            int v16 = 0;
          }
          __int16 v17 = &v16[16 * v12];
          *(_OWORD *)__int16 v17 = v31;
          __int16 v19 = *(char **)a2;
          id v18 = *(char **)(a2 + 8);
          id v20 = v17;
          if (v18 != *(char **)a2)
          {
            do
            {
              uint64_t v21 = *((void *)v18 - 2);
              v18 -= 16;
              int v22 = *((_DWORD *)v18 + 2);
              *((void *)v20 - 2) = v21;
              v20 -= 16;
              *((_DWORD *)v20 + 2) = v22;
            }
            while (v18 != v19);
            id v18 = *(char **)a2;
          }
          uint64_t v23 = v17 + 16;
          *(void *)a2 = v20;
          *(void *)(a2 + 8) = v17 + 16;
          *(void *)(a2 + 16) = &v16[16 * v15];
          if (v18) {
            operator delete(v18);
          }
          *(void *)(a2 + 8) = v23;
        }
        else
        {
          *id v11 = v31;
          *(void *)(a2 + 8) = v11 + 1;
        }
      }
      uint64_t v5 = [v4 countByEnumeratingWithState:&v33 objects:v43 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }

LABEL_38:
}

void sub_256367D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v12 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v12;
    operator delete(v12);
  }

  _Unwind_Resume(a1);
}

void std::vector<CLMicroLocationMigrationTable::Entry>::reserve(char **a1, unint64_t a2)
{
  id v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::uuids::uuid>>(v3, a2);
    unint64_t v7 = &v6[v5];
    uint64_t v9 = &v6[16 * v8];
    id v11 = *a1;
    unint64_t v10 = a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *((void *)v10 - 2);
        v10 -= 16;
        int v14 = *((_DWORD *)v10 + 2);
        *((void *)v12 - 2) = v13;
        v12 -= 16;
        *((_DWORD *)v12 + 2) = v14;
      }
      while (v10 != v11);
      unint64_t v10 = *a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void *std::vector<CLMicroLocationMigrationTable::Entry>::__init_with_size[abi:ne180100]<CLMicroLocationMigrationTable::Entry*,CLMicroLocationMigrationTable::Entry*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = std::vector<boost::uuids::uuid>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    uint64_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8 - 4);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_256367F20(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_25636827C(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6320](v3, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

void sub_256368768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void CLMicroLocationRecordingEventsTable::Entry::~Entry(void **this)
{
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_11()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

uint64_t std::__optional_destruct_base<CLMicroLocationRecordingEventsTable::Entry,false>::__optional_destruct_base[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry>(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  long long v5 = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(_OWORD *)(a1 + 24) = v5;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 3) = 0;
  long long v6 = a2[3];
  *(_OWORD *)(a1 + 60) = *(long long *)((char *)a2 + 60);
  *(_OWORD *)(a1 + 48) = v6;
  CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)(a1 + 80), (const CLMicroLocationProto::RecordingEvent *)(a2 + 5));
  long long v7 = a2[14];
  *(unsigned char *)(a1 + 240) = *((unsigned char *)a2 + 240);
  *(_OWORD *)(a1 + 224) = v7;
  *(unsigned char *)(a1 + 248) = 1;
  return a1;
}

void sub_25636893C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CLMiLoOdometryTable::Entry::Entry(uint64_t a1, void *a2, float a3, float a4, float a5, double a6)
{
  id v11 = a2;
  *(float *)a1 = a3;
  *(float *)(a1 + 4) = a4;
  *(float *)(a1 + 8) = a5;
  *(double *)(a1 + 16) = a6;
  *(void *)(a1 + 24) = v11;
  return a1;
}

void sub_256368A74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ULDBUtils::insertEntries<CLMicroLocationModelTable,ULModelMO>(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2020000000;
  char v15 = 0;
  long long v4 = [v3 managedObjectContext];
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 3221225472;
  v8[2] = ___ZN9ULDBUtils13insertEntriesI25CLMicroLocationModelTable9ULModelMOEEbP7ULStoreRKNSt3__16vectorINT_5EntryENS5_9allocatorIS8_EEEE_block_invoke;
  int v8[3] = &unk_2653F90B8;
  uint64_t v11 = a2;
  id v5 = v3;
  id v9 = v5;
  unint64_t v10 = &v12;
  [v4 performBlockAndWait:v8];

  uint64_t v6 = *((unsigned __int8 *)v13 + 24);
  _Block_object_dispose(&v12, 8);

  return v6;
}

void sub_256368BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ULDBUtils::fetchEntries<CLMicroLocationModelTable,ULModelMO>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, CLMicroLocationModelTable::Entry *a5@<X8>)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  uint64_t v23 = 0;
  long long v24 = &v23;
  uint64_t v25 = 0x4812000000;
  unint64_t v26 = __Block_byref_object_copy__3;
  unint64_t v27 = __Block_byref_object_dispose__3;
  int v28 = &unk_25654E519;
  memset(v29, 0, sizeof(v29));
  uint64_t v12 = [v9 managedObjectContext];
  v17[0] = MEMORY[0x263EF8330];
  v17[1] = 3221225472;
  v17[2] = ___ZN9ULDBUtils12fetchEntriesI25CLMicroLocationModelTable9ULModelMOEENSt3__16vectorINT_5EntryENS3_9allocatorIS6_EEEEP7ULStoreP7NSArrayIP11NSPredicateEPSC_IP16NSSortDescriptorEm_block_invoke;
  v17[3] = &unk_2653F90E0;
  id v13 = v10;
  id v18 = v13;
  id v14 = v11;
  id v19 = v14;
  uint64_t v22 = a4;
  id v15 = v9;
  id v20 = v15;
  uint64_t v21 = &v23;
  [v12 performBlockAndWait:v17];

  int v16 = v24;
  *((void *)a5 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0;
  *((void *)a5 + 2) = 0;
  *(void *)a5 = 0;
  std::vector<CLMicroLocationModelTable::Entry>::__init_with_size[abi:ne180100]<CLMicroLocationModelTable::Entry*,CLMicroLocationModelTable::Entry*>(a5, (CLMicroLocationModelTable::Entry *)v16[6], (CLMicroLocationModelTable::Entry *)v16[7], 0x6F96F96F96F96F97 * ((v16[7] - v16[6]) >> 3));

  _Block_object_dispose(&v23, 8);
  id v30 = (void **)v29;
  std::vector<CLMicroLocationModelTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v30);
}

void sub_256368DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, void *a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);

  _Block_object_dispose(va, 8);
  *(void *)(v14 - 96) = v13;
  std::vector<CLMicroLocationModelTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 96));

  _Unwind_Resume(a1);
}

void ULDBUtils::fetchAllWithLimit<CLMicroLocationModelTable,ULModelMO>(void *a1@<X0>, unsigned int a2@<W1>, CLMicroLocationModelTable::Entry *a3@<X8>)
{
  v10[1] = *MEMORY[0x263EF8340];
  id v5 = a1;
  uint64_t v6 = (void *)MEMORY[0x263F08B30];
  long long v7 = [(id)objc_opt_class() defaultSortProperty];
  uint64_t v8 = [v6 sortDescriptorWithKey:v7 ascending:0];

  v10[0] = v8;
  id v9 = [MEMORY[0x263EFF8C0] arrayWithObjects:v10 count:1];
  ULDBUtils::fetchEntries<CLMicroLocationModelTable,ULModelMO>(v5, 0, v9, a2, a3);
}

void sub_256368F10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2563691C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256369450(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2563695D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25636984C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a11;
  std::vector<CLMicroLocationModelTable::Entry>::__destroy_vector::operator()[abi:ne180100](&a14);

  _Unwind_Resume(a1);
}

void sub_256369B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a11;
  std::vector<CLMicroLocationModelTable::Entry>::__destroy_vector::operator()[abi:ne180100](&a14);

  _Unwind_Resume(a1);
}

void sub_256369D14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25636A018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a11;
  std::vector<CLMicroLocationModelTable::Entry>::__destroy_vector::operator()[abi:ne180100](&a14);

  _Unwind_Resume(a1);
}

void sub_25636A190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__optional_destruct_base<CLMicroLocationModelTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  std::vector<CLMicroLocationModelTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void sub_25636A310(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25636A4AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_12()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

uint64_t std::__optional_destruct_base<CLMicroLocationModelTable::Entry,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 312))
  {
    if (*(unsigned char *)(a1 + 264) && *(char *)(a1 + 263) < 0) {
      operator delete(*(void **)(a1 + 240));
    }
    CLMicroLocationProto::Model::~Model((CLMicroLocationProto::Model *)(a1 + 32));
  }
  return a1;
}

void ___ZN9ULDBUtils13insertEntriesI25CLMicroLocationModelTable9ULModelMOEEbP7ULStoreRKNSt3__16vectorINT_5EntryENS5_9allocatorIS8_EEEE_block_invoke(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(a1 + 48);
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  if (*v2 == v4)
  {
LABEL_4:
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [*(id *)(a1 + 32) commitChangesToStore];
    long long v7 = *(void **)(a1 + 32);
    [v7 deleteOldestRecordsIfFull];
  }
  else
  {
    while (1)
    {
      id v5 = [*(id *)(a1 + 32) managedObjectContext];
      uint64_t v6 = +[ULModelMO createFromEntry:v3 inManagedObjectContext:v5];

      if (!v6) {
        break;
      }

      v3 += 312;
      if (v3 == v4) {
        goto LABEL_4;
      }
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_18);
    }
    uint64_t v8 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      id v9 = +[ULModelMO entity];
      id v10 = [v9 name];
      int v15 = 68289283;
      int v16 = 0;
      __int16 v17 = 2082;
      id v18 = "";
      __int16 v19 = 2113;
      id v20 = v10;
      _os_log_impl(&dword_25631F000, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to create entry from MO\", \"MO\":%{private, location:escape_only}@}", (uint8_t *)&v15, 0x1Cu);
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_18);
    }
    id v11 = (id)logObject_MicroLocation_Default;
    if (os_signpost_enabled(v11))
    {
      uint64_t v12 = +[ULModelMO entity];
      uint64_t v13 = [v12 name];
      int v15 = 68289283;
      int v16 = 0;
      __int16 v17 = 2082;
      id v18 = "";
      __int16 v19 = 2113;
      id v20 = v13;
      _os_signpost_emit_with_name_impl(&dword_25631F000, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to create entry from MO", "{\"msg%{public}.0s\":\"Failed to create entry from MO\", \"MO\":%{private, location:escape_only}@}", (uint8_t *)&v15, 0x1Cu);
    }
    uint64_t v14 = [*(id *)(a1 + 32) managedObjectContext];
    [v14 reset];
  }
}

void sub_25636A844(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__3(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  std::vector<CLMicroLocationModelTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void ___ZN9ULDBUtils12fetchEntriesI25CLMicroLocationModelTable9ULModelMOEENSt3__16vectorINT_5EntryENS3_9allocatorIS6_EEEEP7ULStoreP7NSArrayIP11NSPredicateEPSC_IP16NSSortDescriptorEm_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  uint64_t v3 = (objc_class *)objc_opt_class();
  uint64_t v4 = NSStringFromClass(v3);
  id v5 = [v2 fetchManagedObjectsWithEntityName:v4 byAndPredicates:*(void *)(a1 + 32) sortDescriptors:*(void *)(a1 + 40) andLimit:*(void *)(a1 + 64)];

  ULDBUtils::convertManagedObjectsToEntries<CLMicroLocationModelTable,ULModelMO>(v5, (uint64_t *)&v8);
  uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8);
  std::vector<CLMicroLocationModelTable::Entry>::__vdeallocate((void **)(v6 + 48));
  *(_OWORD *)(v6 + 48) = v8;
  *(void *)(v6 + 64) = v9;
  uint64_t v9 = 0;
  long long v8 = 0uLL;
  id v10 = (void **)&v8;
  std::vector<CLMicroLocationModelTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v10);
  long long v7 = [*(id *)(a1 + 48) managedObjectContext];
  [v7 reset];
}

void sub_25636A9B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ULDBUtils::convertManagedObjectsToEntries<CLMicroLocationModelTable,ULModelMO>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  id v3 = a1;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  std::vector<CLMicroLocationModelTable::Entry>::reserve(a2, [v3 count]);
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v4 = v3;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v20 objects:v32 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v21;
    while (2)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v21 != v6) {
          objc_enumerationMutation(v4);
        }
        id v8 = *(id *)(*((void *)&v20 + 1) + 8 * i);
        uint64_t v9 = v8;
        if (!v8)
        {
          long long v31 = 0u;
          memset(v30, 0, sizeof(v30));
LABEL_16:
          if (onceToken_MicroLocation_Default != -1) {
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_18);
          }
          uint64_t v12 = (id)logObject_MicroLocation_Default;
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            uint64_t v13 = [v9 entity];
            uint64_t v14 = [v13 name];
            *(_DWORD *)uint64_t buf = 68289283;
            int v25 = 0;
            __int16 v26 = 2082;
            unint64_t v27 = "";
            __int16 v28 = 2113;
            int v29 = v14;
            _os_log_impl(&dword_25631F000, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to convert MO to entry\", \"MO\":%{private, location:escape_only}@}", buf, 0x1Cu);
          }
          if (onceToken_MicroLocation_Default != -1) {
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_18);
          }
          int v15 = (id)logObject_MicroLocation_Default;
          if (os_signpost_enabled(v15))
          {
            int v16 = [v9 entity];
            __int16 v17 = [v16 name];
            *(_DWORD *)uint64_t buf = 68289283;
            int v25 = 0;
            __int16 v26 = 2082;
            unint64_t v27 = "";
            __int16 v28 = 2113;
            int v29 = v17;
            _os_signpost_emit_with_name_impl(&dword_25631F000, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to convert MO to entry", "{\"msg%{public}.0s\":\"Failed to convert MO to entry\", \"MO\":%{private, location:escape_only}@}", buf, 0x1Cu);
          }
          std::__optional_destruct_base<CLMicroLocationModelTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v30);

          uint64_t v19 = *a2;
          for (uint64_t j = a2[1];
                j != v19;
                std::allocator<CLMicroLocationModelTable::Entry>::destroy[abi:ne180100]((uint64_t)(a2 + 2), j))
          {
            j -= 312;
          }
          a2[1] = v19;
          goto LABEL_28;
        }
        objc_msgSend(v8, "convertToEntry", (void)v20);
        if (!BYTE8(v31)) {
          goto LABEL_16;
        }
        unint64_t v10 = a2[1];
        if (v10 >= a2[2])
        {
          uint64_t v11 = std::vector<CLMicroLocationModelTable::Entry>::__push_back_slow_path<CLMicroLocationModelTable::Entry>(a2, (uint64_t)v30);
        }
        else
        {
          CLMicroLocationModelTable::Entry::Entry(a2[1], v30);
          uint64_t v11 = v10 + 312;
          a2[1] = v10 + 312;
        }
        a2[1] = v11;
        std::__optional_destruct_base<CLMicroLocationModelTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v30);
      }
      uint64_t v5 = [v4 countByEnumeratingWithState:&v20 objects:v32 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }

LABEL_28:
}

void sub_25636AD54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);

  std::__optional_destruct_base<CLMicroLocationModelTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  std::vector<CLMicroLocationModelTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)va);

  _Unwind_Resume(a1);
}

void **std::vector<CLMicroLocationModelTable::Entry>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  __n128 result = (void **)(a1 + 2);
  if (0x6F96F96F96F96F97 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xD20D20D20D20D3) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationModelTable::Entry>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 312 * v6;
    std::vector<CLMicroLocationModelTable::Entry>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<CLMicroLocationModelTable::Entry>::~__split_buffer(v7);
  }
  return result;
}

void sub_25636AE90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMicroLocationModelTable::Entry>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMicroLocationModelTable::Entry>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationModelTable::Entry>,std::reverse_iterator<CLMicroLocationModelTable::Entry*>,std::reverse_iterator<CLMicroLocationModelTable::Entry*>,std::reverse_iterator<CLMicroLocationModelTable::Entry*>>((uint64_t)(a1 + 2), a1[1], (const CLMicroLocationModelTable::Entry *)a1[1], *a1, (const CLMicroLocationModelTable::Entry *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationModelTable::Entry>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xD20D20D20D20D3) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(312 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationModelTable::Entry>,std::reverse_iterator<CLMicroLocationModelTable::Entry*>,std::reverse_iterator<CLMicroLocationModelTable::Entry*>,std::reverse_iterator<CLMicroLocationModelTable::Entry*>>(uint64_t a1, uint64_t a2, const CLMicroLocationModelTable::Entry *a3, uint64_t a4, const CLMicroLocationModelTable::Entry *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  _DWORD v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      uint64_t v9 = (const CLMicroLocationModelTable::Entry *)((char *)v9 - 312);
      CLMicroLocationModelTable::Entry::Entry((CLMicroLocationModelTable::Entry *)(v7 - 312), v9);
      uint64_t v7 = *((void *)&v15 + 1) - 312;
      *((void *)&v15 + 1) -= 312;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationModelTable::Entry>,std::reverse_iterator<CLMicroLocationModelTable::Entry*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_25636B010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

CLMicroLocationModelTable::Entry *CLMicroLocationModelTable::Entry::Entry(CLMicroLocationModelTable::Entry *this, const CLMicroLocationModelTable::Entry *a2)
{
  long long v4 = *(_OWORD *)a2;
  *(_OWORD *)((char *)this + 12) = *(_OWORD *)((char *)a2 + 12);
  *(_OWORD *)this = v4;
  CLMicroLocationProto::Model::Model((CLMicroLocationModelTable::Entry *)((char *)this + 32), (const CLMicroLocationModelTable::Entry *)((char *)a2 + 32));
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)this + 10, (long long *)a2 + 15);
  long long v5 = *((_OWORD *)a2 + 17);
  long long v6 = *((_OWORD *)a2 + 18);
  *((unsigned char *)this + 304) = *((unsigned char *)a2 + 304);
  *((_OWORD *)this + 17) = v5;
  *((_OWORD *)this + 18) = v6;
  return this;
}

void sub_25636B090(_Unwind_Exception *a1)
{
  CLMicroLocationProto::Model::~Model(v1);
  _Unwind_Resume(a1);
}

std::string *std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](std::string *a1, long long *a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<std::string,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::string,false> const&>(a1, a2);
  return a1;
}

void sub_25636B0D4(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24)) {
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__optional_storage_base<std::string,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::string,false> const&>(std::string *this, long long *a2)
{
  if (*((unsigned char *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v3 = *a2;
      this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationModelTable::Entry>,std::reverse_iterator<CLMicroLocationModelTable::Entry*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationModelTable::Entry>,std::reverse_iterator<CLMicroLocationModelTable::Entry*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationModelTable::Entry>,std::reverse_iterator<CLMicroLocationModelTable::Entry*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<CLMicroLocationModelTable::Entry>::destroy[abi:ne180100](v3, v1);
      v1 += 312;
    }
    while (v1 != v2);
  }
}

void std::allocator<CLMicroLocationModelTable::Entry>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 264) && *(char *)(a2 + 263) < 0) {
    operator delete(*(void **)(a2 + 240));
  }
  CLMicroLocationProto::Model::~Model((CLMicroLocationProto::Model *)(a2 + 32));
}

void **std::__split_buffer<CLMicroLocationModelTable::Entry>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<CLMicroLocationModelTable::Entry>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 312;
    std::allocator<CLMicroLocationModelTable::Entry>::destroy[abi:ne180100](v4, i - 312);
  }
}

uint64_t std::vector<CLMicroLocationModelTable::Entry>::__push_back_slow_path<CLMicroLocationModelTable::Entry>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6F96F96F96F96F97 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0xD20D20D20D20D2) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6F96F96F96F96F97 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x69069069069069) {
    unint64_t v9 = 0xD20D20D20D20D2;
  }
  else {
    unint64_t v9 = v5;
  }
  __int16 v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationModelTable::Entry>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  char v13 = v10;
  long long v14 = &v10[312 * v4];
  int v16 = &v10[312 * v9];
  CLMicroLocationModelTable::Entry::Entry(v14, a2);
  long long v15 = v14 + 312;
  std::vector<CLMicroLocationModelTable::Entry>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<CLMicroLocationModelTable::Entry>::~__split_buffer(&v13);
  return v11;
}

void sub_25636B3AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMicroLocationModelTable::Entry>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::vector<CLMicroLocationModelTable::Entry>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 312;
        std::allocator<CLMicroLocationModelTable::Entry>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

CLMicroLocationModelTable::Entry *std::vector<CLMicroLocationModelTable::Entry>::__init_with_size[abi:ne180100]<CLMicroLocationModelTable::Entry*,CLMicroLocationModelTable::Entry*>(CLMicroLocationModelTable::Entry *result, CLMicroLocationModelTable::Entry *a2, CLMicroLocationModelTable::Entry *a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<CLMicroLocationModelTable::Entry>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationModelTable::Entry>,CLMicroLocationModelTable::Entry*,CLMicroLocationModelTable::Entry*,CLMicroLocationModelTable::Entry*>((uint64_t)v6 + 16, a2, a3, *((CLMicroLocationModelTable::Entry **)v6 + 1));
    *((void *)v6 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = result;
  }
  return result;
}

void sub_25636B498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<CLMicroLocationModelTable::Entry>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<CLMicroLocationModelTable::Entry>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xD20D20D20D20D3) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationModelTable::Entry>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[312 * v4];
  return result;
}

CLMicroLocationModelTable::Entry *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationModelTable::Entry>,CLMicroLocationModelTable::Entry*,CLMicroLocationModelTable::Entry*,CLMicroLocationModelTable::Entry*>(uint64_t a1, CLMicroLocationModelTable::Entry *a2, CLMicroLocationModelTable::Entry *a3, CLMicroLocationModelTable::Entry *this)
{
  uint64_t v4 = this;
  uint64_t v10 = this;
  uint64_t v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    long long v6 = a2;
    do
    {
      CLMicroLocationModelTable::Entry::Entry(v4, v6);
      long long v6 = (const CLMicroLocationModelTable::Entry *)((char *)v6 + 312);
      uint64_t v4 = (CLMicroLocationModelTable::Entry *)((char *)v11 + 312);
      uint64_t v11 = (CLMicroLocationModelTable::Entry *)((char *)v11 + 312);
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationModelTable::Entry>,CLMicroLocationModelTable::Entry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_25636B5A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationModelTable::Entry>,CLMicroLocationModelTable::Entry*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationModelTable::Entry>,CLMicroLocationModelTable::Entry*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationModelTable::Entry>,CLMicroLocationModelTable::Entry*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 312;
      std::allocator<CLMicroLocationModelTable::Entry>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

void std::vector<CLMicroLocationModelTable::Entry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 312;
        std::allocator<CLMicroLocationModelTable::Entry>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<CLMicroLocationModelTable::Entry>::__push_back_slow_path<CLMicroLocationModelTable::Entry const&>(uint64_t *a1, const CLMicroLocationModelTable::Entry *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6F96F96F96F96F97 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0xD20D20D20D20D2) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6F96F96F96F96F97 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x69069069069069) {
    unint64_t v9 = 0xD20D20D20D20D2;
  }
  else {
    unint64_t v9 = v5;
  }
  __int16 v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationModelTable::Entry>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  char v13 = v10;
  long long v14 = (CLMicroLocationModelTable::Entry *)&v10[312 * v4];
  int v16 = &v10[312 * v9];
  CLMicroLocationModelTable::Entry::Entry(v14, a2);
  long long v15 = (char *)v14 + 312;
  std::vector<CLMicroLocationModelTable::Entry>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<CLMicroLocationModelTable::Entry>::~__split_buffer(&v13);
  return v11;
}

void sub_25636B7E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMicroLocationModelTable::Entry>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationConfigurationTable::Entry::Entry(uint64_t a1, long long *a2, CLMicroLocationProto::Configuration *a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = *((void *)a3 + 1);
  long long v6 = *a2;
  *(void *)(a1 + 24) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v6;
  *((void *)a2 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(void *)(a1 + 32) = a4;
  *(void *)(a1 + 40) = a5;
  *(_DWORD *)(a1 + 48) = *((_DWORD *)a3 + 10);
  CLMicroLocationProto::Configuration::Configuration((CLMicroLocationProto::Configuration *)(a1 + 56), a3);
  return a1;
}

void sub_25636B860(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_25636C464(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25636C544(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float CLHierarchicalClustering::singleLinkage(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a2 <= a6) {
    unint64_t v6 = a6;
  }
  else {
    unint64_t v6 = a2;
  }
  if (a2 >= a6) {
    unint64_t v7 = a6;
  }
  else {
    unint64_t v7 = a2;
  }
  unint64_t v8 = v7 + ((v6 + v6 * v6) >> 1);
  uint64_t v9 = *(void *)(a1 + 8);
  float result = *(float *)(v9 + 4 * v8);
  if (a4 <= a6) {
    unint64_t v11 = a6;
  }
  else {
    unint64_t v11 = a4;
  }
  if (a4 >= a6) {
    unint64_t v12 = a6;
  }
  else {
    unint64_t v12 = a4;
  }
  unint64_t v13 = v12 + ((v11 + v11 * v11) >> 1);
  if (*(float *)(v9 + 4 * v13) < result) {
    return *(float *)(v9 + 4 * v13);
  }
  return result;
}

float CLHierarchicalClustering::averageLinkage(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  if (a2 <= a6) {
    unint64_t v6 = a6;
  }
  else {
    unint64_t v6 = a2;
  }
  if (a2 >= a6) {
    unint64_t v7 = a6;
  }
  else {
    unint64_t v7 = a2;
  }
  unint64_t v8 = v7 + ((v6 + v6 * v6) >> 1);
  uint64_t v9 = *(void *)(a1 + 8);
  float v10 = *(float *)(v9 + 4 * v8);
  if (a4 <= a6) {
    unint64_t v11 = a6;
  }
  else {
    unint64_t v11 = a4;
  }
  if (a4 >= a6) {
    unint64_t v12 = a6;
  }
  else {
    unint64_t v12 = a4;
  }
  float result = *(float *)(v9 + 4 * (v12 + ((v11 + v11 * v11) >> 1)));
  if (v10 >= 3.4028e38)
  {
    if (result >= 3.4028e38) {
      return 3.4028e38;
    }
  }
  else if (result >= 3.4028e38)
  {
    return v10;
  }
  else
  {
    return (float)((float)(result * (float)a5) + (float)((float)a3 * v10)) / (float)(a5 + a3);
  }
  return result;
}

float CLHierarchicalClustering::completeLinkage(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a2 <= a6) {
    unint64_t v6 = a6;
  }
  else {
    unint64_t v6 = a2;
  }
  if (a2 >= a6) {
    unint64_t v7 = a6;
  }
  else {
    unint64_t v7 = a2;
  }
  unint64_t v8 = v7 + ((v6 + v6 * v6) >> 1);
  uint64_t v9 = *(void *)(a1 + 8);
  float result = *(float *)(v9 + 4 * v8);
  if (a4 <= a6) {
    unint64_t v11 = a6;
  }
  else {
    unint64_t v11 = a4;
  }
  if (a4 >= a6) {
    unint64_t v12 = a6;
  }
  else {
    unint64_t v12 = a4;
  }
  float v13 = *(float *)(v9 + 4 * (v12 + ((v11 + v11 * v11) >> 1)));
  if (result >= 3.4028e38)
  {
    float result = 3.4028e38;
    if (v13 < 3.4028e38) {
      return *(float *)(v9 + 4 * (v12 + ((v11 + v11 * v11) >> 1)));
    }
  }
  else if (v13 < 3.4028e38 && result < v13)
  {
    return *(float *)(v9 + 4 * (v12 + ((v11 + v11 * v11) >> 1)));
  }
  return result;
}

char **CLHierarchicalClustering::CLHierarchicalClustering(char **a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v5 = a1;
  uint64_t v68 = *MEMORY[0x263EF8340];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<CLHierarchicalClustering::GraphEdge>::reserve((void **)a1, *a2 - 1);
  unint64_t v56 = 0;
  unint64_t v57 = 0;
  long long v55 = (uint64_t *)&v56;
  if (*a2)
  {
    char v54 = v5;
    unint64_t v6 = 0;
    do
    {
      *(void *)uint64_t buf = v6;
      *(void *)unint64_t v59 = 1;
      std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_hint_unique_key_args<unsigned long,std::pair<unsigned long,unsigned long>>(&v55, &v56, (unint64_t *)buf, buf);
      ++v6;
    }
    while (v6 < *a2);
    if (v57 >= 2)
    {
      uint64_t v53 = a3;
      do
      {
        unint64_t v7 = v55;
        if (v55 == (uint64_t *)&v56)
        {
          uint64_t v9 = 0;
          unint64_t v8 = 0;
          float v11 = INFINITY;
        }
        else
        {
          unint64_t v8 = 0;
          uint64_t v9 = 0;
          float v11 = INFINITY;
          do
          {
            unint64_t v12 = (uint64_t *)v7[1];
            float v13 = v12;
            long long v14 = v7;
            if (v12)
            {
              do
              {
                long long v15 = v13;
                float v13 = (uint64_t *)*v13;
              }
              while (v13);
            }
            else
            {
              do
              {
                long long v15 = (uint64_t *)v14[2];
                BOOL v16 = *v15 == (void)v14;
                long long v14 = v15;
              }
              while (!v16);
            }
            if (v15 != (uint64_t *)&v56)
            {
              unint64_t v17 = v7[4];
              do
              {
                unint64_t v18 = v15[4];
                if (v17 <= v18) {
                  uint64_t v19 = v15[4];
                }
                else {
                  uint64_t v19 = v7[4];
                }
                if (v17 < v18) {
                  unint64_t v18 = v7[4];
                }
                unint64_t v10 = a2[1];
                if (*(float *)(v10 + 4 * (v18 + ((unint64_t)(v19 + v19 * v19) >> 1))) < v11)
                {
                  float v11 = *(float *)(v10 + 4 * (v18 + ((unint64_t)(v19 + v19 * v19) >> 1)));
                  uint64_t v9 = v15;
                  unint64_t v8 = v7;
                }
                long long v20 = (uint64_t *)v15[1];
                if (v20)
                {
                  do
                  {
                    long long v21 = v20;
                    long long v20 = (uint64_t *)*v20;
                  }
                  while (v20);
                }
                else
                {
                  do
                  {
                    long long v21 = (uint64_t *)v15[2];
                    BOOL v16 = *v21 == (void)v15;
                    long long v15 = v21;
                  }
                  while (!v16);
                }
                long long v15 = v21;
              }
              while (v21 != (uint64_t *)&v56);
            }
            if (v12)
            {
              do
              {
                long long v22 = v12;
                unint64_t v12 = (uint64_t *)*v12;
              }
              while (v12);
            }
            else
            {
              do
              {
                long long v22 = (uint64_t *)v7[2];
                BOOL v16 = *v22 == (void)v7;
                unint64_t v7 = v22;
              }
              while (!v16);
            }
            unint64_t v7 = v22;
          }
          while (v22 != (uint64_t *)&v56);
        }
        if (fabsf(v11) == INFINITY)
        {
          CLHierarchicalClustering::CLHierarchicalClustering((NSObject **)buf);

          abort_report_np();
          __break(1u);
        }
        long long v23 = (uint64_t *)v9[1];
        long long v24 = v9;
        if (v23)
        {
          do
          {
            int v25 = v23;
            long long v23 = (uint64_t *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            int v25 = (uint64_t *)v24[2];
            BOOL v16 = *v25 == (void)v24;
            long long v24 = v25;
          }
          while (!v16);
        }
        uint64_t v26 = v8[4];
        uint64_t v27 = v8[5];
        uint64_t v29 = v9[4];
        uint64_t v28 = v9[5];
        unint64_t v30 = (unint64_t)v5[1];
        unint64_t v31 = (unint64_t)v5[2];
        if (v30 >= v31)
        {
          uint64_t v33 = *v5;
          uint64_t v34 = (uint64_t)(v30 - (void)*v5) >> 5;
          unint64_t v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 59) {
            std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v36 = v31 - (void)v33;
          if (v36 >> 4 > v35) {
            unint64_t v35 = v36 >> 4;
          }
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v37 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v37 = v35;
          }
          int v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationResultInternal>>((uint64_t)(v54 + 2), v37);
          long long v40 = &v38[32 * v34];
          *(void *)long long v40 = v26;
          *((void *)v40 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v29;
          *((float *)v40 + 4) = v11;
          *((void *)v40 + 3) = v28 + v27;
          long long v42 = *v54;
          __int16 v41 = v54[1];
          uint64_t v43 = v40;
          if (v41 != *v54)
          {
            do
            {
              long long v44 = *((_OWORD *)v41 - 1);
              *((_OWORD *)v43 - 2) = *((_OWORD *)v41 - 2);
              *((_OWORD *)v43 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v44;
              v43 -= 32;
              v41 -= 32;
            }
            while (v41 != v42);
            __int16 v41 = *v54;
          }
          char v32 = v40 + 32;
          *char v54 = v43;
          v54[1] = v40 + 32;
          v54[2] = &v38[32 * v39];
          if (v41) {
            operator delete(v41);
          }
        }
        else
        {
          *(void *)unint64_t v30 = v26;
          *(void *)(v30 + 8) = v29;
          *(float *)(v30 + 16) = v11;
          char v32 = (char *)(v30 + 32);
          *(void *)(v30 + 24) = v28 + v27;
        }
        v54[1] = v32;
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_19);
        }
        uint64_t v45 = logObject_MicroLocation_Default;
        if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)uint64_t buf = 68290050;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)unint64_t v59 = 2082;
          *(void *)&v59[2] = "";
          __int16 v60 = 2050;
          uint64_t v61 = v26;
          __int16 v62 = 2050;
          uint64_t v63 = v29;
          __int16 v64 = 2050;
          double v65 = v11;
          __int16 v66 = 2050;
          uint64_t v67 = v28 + v27;
          _os_log_impl(&dword_25631F000, v45, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"dendrogram\", \"left\":%{public}lu, \"right\":%{public}lu, \"dist\":\"%{public}f\", \"size\":%{public}lu}", buf, 0x3Au);
        }
        *(void *)uint64_t buf = v29;
        *(void *)unint64_t v59 = v28 + v27;
        std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__remove_node_pointer(&v55, v8);
        operator delete(v8);
        std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__remove_node_pointer(&v55, v9);
        operator delete(v9);
        uint64_t v46 = v55;
        if (v55 != (uint64_t *)&v56)
        {
          do
          {
            std::function<float ()(CLDistanceMatrixTemplate<CLSymmetricMatrixStorage<float>> const&,std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>)>::operator()(v53, (uint64_t)a2, v26, v27, v29, v28, v46[4], v46[5]);
            id v48 = (id)v46[4];
            if ((unint64_t)v48 <= *(void *)buf) {
              uint64_t v49 = *(void *)buf;
            }
            else {
              uint64_t v49 = v46[4];
            }
            if ((unint64_t)v48 >= *(void *)buf) {
              id v48 = *(id *)buf;
            }
            *(_DWORD *)(a2[1] + 4 * ((void)v48 + ((unint64_t)(v49 + v49 * v49) >> 1))) = v47;
            uint64_t v50 = (uint64_t *)v46[1];
            if (v50)
            {
              do
              {
                uint64_t v51 = v50;
                uint64_t v50 = (uint64_t *)*v50;
              }
              while (v50);
            }
            else
            {
              do
              {
                uint64_t v51 = (uint64_t *)v46[2];
                BOOL v16 = *v51 == (void)v46;
                uint64_t v46 = v51;
              }
              while (!v16);
            }
            uint64_t v46 = v51;
          }
          while (v51 != (uint64_t *)&v56);
        }
        std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_hint_unique_key_args<unsigned long,std::pair<unsigned long,unsigned long>>(&v55, v25, (unint64_t *)buf, buf);
        unint64_t v5 = v54;
      }
      while (v57 > 1);
    }
  }
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&v55, v56);
  return v5;
}

void sub_25636CBB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21)
{
  long long v23 = *(void **)v21;
  if (*(void *)v21)
  {
    *(void *)(v21 + 8) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<CLHierarchicalClustering::GraphEdge>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 5)
  {
    if (a2 >> 59) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationResultInternal>>(v3, a2);
    unint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFE0];
    uint64_t v9 = &v6[32 * v8];
    float v11 = (char *)*a1;
    unint64_t v10 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v13;
        v12 -= 32;
        v10 -= 32;
      }
      while (v10 != v11);
      unint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t std::function<float ()(CLDistanceMatrixTemplate<CLSymmetricMatrixStorage<float>> const&,std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v12[0] = a3;
  v12[1] = a4;
  v11[0] = a5;
  v11[1] = a6;
  v10[0] = a7;
  v10[1] = a8;
  uint64_t v8 = *(void *)(a1 + 24);
  if (!v8) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, void *, void *, void *))(*(void *)v8 + 48))(v8, a2, v12, v11, v10);
}

uint64_t CLHierarchicalClustering::getClusterLabels(uint64_t *a1, void *a2, void *a3, unint64_t a4, unint64_t a5, double a6)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  if (*a3 == a3[1])
  {
    CLHierarchicalClustering::getClusterLabels();
  }
  else
  {
    unint64_t v7 = a5;
    if (*(double *)&a5 != 0.0)
    {
      unint64_t v8 = a4;
      double v11 = a6;
      uint64_t v9 = a3;
      unint64_t v6 = a2;
      unint64_t v10 = a1;
      if (onceToken_MicroLocation_Default == -1) {
        goto LABEL_4;
      }
      goto LABEL_48;
    }
    CLHierarchicalClustering::getClusterLabels();
  }
  __break(1u);
LABEL_48:
  dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_19);
LABEL_4:
  unint64_t v12 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v46 = 2082;
    int v47 = "";
    __int16 v48 = 2050;
    unint64_t v49 = v8;
    __int16 v50 = 2050;
    double v51 = v11;
    __int16 v52 = 2050;
    double v53 = *(double *)&v7;
    _os_log_impl(&dword_25631F000, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"getClusterLabels\", \"smallNodeSize\":%{public}lu, \"distanceThresholdForSmallNode\":\"%{public}f\", \"minNumClusters\":%{public}lu}", buf, 0x30u);
  }
  v6[1] = *v6;
  unint64_t v13 = ((v10[1] - *v10) >> 5) + 1;
  *(void *)uint64_t buf = 0;
  std::vector<unsigned long>::resize((uint64_t)v6, v13, buf);
  uint64_t v14 = v10[1];
  uint64_t v15 = *v10;
  if (v14 == *v10) {
    return 1;
  }
  uint64_t v16 = v9[1];
  double v17 = *(float *)(v14 - 16);
  if (v16 == *v9) {
    uint64_t v18 = -1;
  }
  else {
    uint64_t v18 = 0;
  }
  BOOL v19 = v7 > 1;
  if (*(double *)(*v9 + 8 * v18) < v17 || v7 >= 2)
  {
    unint64_t v21 = (v16 - *v9) >> 3;
    unint64_t v40 = 1;
    while (1)
    {
      uint64_t v22 = *v6;
      BOOL v23 = v17 > v11 || *(void *)(v14 - 8) > v8;
      if (v23 || v19)
      {
        *(void *)(v22 + 8 * *(void *)(v14 - 32)) = v40;
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_19);
        }
        ++v40;
        uint64_t v31 = logObject_MicroLocation_Default;
        if (!os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_30;
        }
        unint64_t v32 = *(void *)(v14 - 32);
        double v33 = *(double *)(v14 - 24);
        double v34 = *(float *)(v14 - 16);
        uint64_t v35 = *(void *)(v14 - 8);
        *(_DWORD *)uint64_t buf = 68290050;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v46 = 2082;
        int v47 = "";
        __int16 v48 = 2050;
        unint64_t v49 = v32;
        __int16 v50 = 2050;
        double v51 = v33;
        __int16 v52 = 2050;
        double v53 = v34;
        __int16 v54 = 2050;
        uint64_t v55 = v35;
        uint64_t v29 = v31;
        unint64_t v30 = "{\"msg%{public}.0s\":\"getClusterLabels - split\", \"left\":%{public}lu, \"right\":%{public}lu, \"dist\":\""
              "%{public}f\", \"size\":%{public}lu}";
      }
      else
      {
        *(void *)(v22 + 8 * *(void *)(v14 - 32)) = *(void *)(v22 + 8 * *(void *)(v14 - 24));
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_19);
        }
        uint64_t v24 = logObject_MicroLocation_Default;
        if (!os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_30;
        }
        unint64_t v25 = *(void *)(v14 - 32);
        double v26 = *(double *)(v14 - 24);
        double v27 = *(float *)(v14 - 16);
        uint64_t v28 = *(void *)(v14 - 8);
        *(_DWORD *)uint64_t buf = 68290050;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v46 = 2082;
        int v47 = "";
        __int16 v48 = 2050;
        unint64_t v49 = v25;
        __int16 v50 = 2050;
        double v51 = v26;
        __int16 v52 = 2050;
        double v53 = v27;
        __int16 v54 = 2050;
        uint64_t v55 = v28;
        uint64_t v29 = v24;
        unint64_t v30 = "{\"msg%{public}.0s\":\"getClusterLabels - don't split\", \"left\":%{public}lu, \"right\":%{public}lu, \"di"
              "st\":\"%{public}f\", \"size\":%{public}lu}";
      }
      _os_log_impl(&dword_25631F000, v29, OS_LOG_TYPE_DEBUG, v30, buf, 0x3Au);
LABEL_30:
      uint64_t v36 = v14 - 32;
      uint64_t v15 = *v10;
      if (v14 - 32 == *v10) {
        return v40;
      }
      double v17 = *(float *)(v14 - 48);
      if (v21 >= v40) {
        unint64_t v37 = v40;
      }
      else {
        unint64_t v37 = v21;
      }
      double v38 = *(double *)(*v9 + 8 * v37 - 8);
      BOOL v19 = v40 < v7;
      BOOL v39 = v38 >= v17 && v40 >= v7;
      v14 -= 32;
      if (v39)
      {
        uint64_t v14 = v36;
        goto LABEL_41;
      }
    }
  }
  unint64_t v40 = 1;
LABEL_41:
  if (v14 != v15)
  {
    uint64_t v41 = *v6;
    do
    {
      uint64_t v42 = *(void *)(v14 - 32);
      uint64_t v43 = *(void *)(v14 - 24);
      v14 -= 32;
      *(void *)(v41 + 8 * v42) = *(void *)(v41 + 8 * v43);
    }
    while (v14 != v15);
  }
  return v40;
}

void std::vector<unsigned long>::resize(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<unsigned long>::__append((void **)a1, a2 - v3, a3);
  }
}

uint64_t CLHierarchicalClustering::getClusterLabels(uint64_t *a1, void *a2, unint64_t a3, double a4, double a5)
{
  double v12 = a4;
  std::vector<double>::vector(__p, 1uLL, &v12);
  uint64_t ClusterLabels = CLHierarchicalClustering::getClusterLabels(a1, a2, __p, a3, 1uLL, a5);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return ClusterLabels;
}

void sub_25636D224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_13()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

uint64_t *std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_hint_unique_key_args<unsigned long,std::pair<unsigned long,unsigned long>>(uint64_t **a1, void *a2, unint64_t *a3, _OWORD *a4)
{
  unint64_t v6 = (void **)std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__find_equal<unsigned long>(a1, a2, &v11, &v10, a3);
  unint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    unint64_t v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

void *std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__find_equal<unsigned long>(void *a1, void *a2, void *a3, void *a4, unint64_t *a5)
{
  int64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, unint64_t v7 = a2[4], *a5 < v7))
  {
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      uint64_t v9 = (void *)*a2;
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      unint64_t v13 = a2;
      do
      {
        uint64_t v10 = (void *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        unint64_t v13 = v10;
      }
      while (v14);
    }
    unint64_t v15 = *a5;
    if (v10[4] < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          double v17 = v16;
          unint64_t v18 = v16[4];
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = (void *)*v17;
          int64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        int64_t v5 = v17 + 1;
        uint64_t v16 = (void *)v17[1];
      }
      while (v16);
    }
    else
    {
      double v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    double v12 = (void *)a2[1];
    do
    {
      a4 = v12;
      double v12 = (void *)*v12;
    }
    while (v12);
  }
  else
  {
    BOOL v19 = a2;
    do
    {
      a4 = (void *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      BOOL v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    long long v20 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          unint64_t v21 = v20;
          unint64_t v22 = v20[4];
          if (v6 >= v22) {
            break;
          }
          long long v20 = (void *)*v21;
          int64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        int64_t v5 = v21 + 1;
        long long v20 = (void *)v21[1];
      }
      while (v20);
    }
    else
    {
      unint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t *std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      unint64_t v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v4 = a2;
    do
    {
      unint64_t v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      uint64_t v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  unint64_t v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      unint64_t v3 = a2;
      goto LABEL_7;
    }
    do
    {
      unint64_t v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  unint64_t v6 = (uint64_t **)v3[2];
  unint64_t v7 = *v6;
  if (*v6 == v3)
  {
    uint64_t *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      unint64_t v7 = 0;
      float result = (uint64_t *)v2;
    }
    else
    {
      unint64_t v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *unint64_t v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      float result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 == v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      unint64_t v13 = *(uint64_t **)(v12 + 8);
      uint64_t v14 = *v13;
      *(void *)(v12 + 8) = *v13;
      if (v14) {
        *(void *)(v14 + 16) = v12;
      }
      _DWORD v13[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
      *unint64_t v13 = v12;
      *(void *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7) {
        float result = v7;
      }
      unint64_t v7 = *(uint64_t **)(*v7 + 8);
    }
    unint64_t v15 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v15 + 24))
    {
      uint64_t v16 = (uint64_t *)v7[1];
      if (!v16) {
        goto LABEL_56;
      }
LABEL_55:
      if (*((unsigned char *)v16 + 24))
      {
LABEL_56:
        *((unsigned char *)v15 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = v15[1];
        uint64_t *v7 = v22;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        void v15[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        uint64_t v16 = v7;
      }
      else
      {
        unint64_t v15 = v7;
      }
      uint64_t v23 = v15[2];
      *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      uint64_t v24 = *(uint64_t **)(v23 + 8);
      uint64_t v25 = *v24;
      *(void *)(v23 + 8) = *v24;
      if (v25) {
        *(void *)(v25 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      *uint64_t v24 = v23;
      goto LABEL_72;
    }
    uint64_t v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_55;
    }
    *((unsigned char *)v7 + 24) = 0;
    double v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      double v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
LABEL_49:
    unint64_t v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    uint64_t v18 = v7[1];
    *(void *)uint64_t v12 = v18;
    if (v18) {
      *(void *)(v18 + 16) = v12;
    }
    v7[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(void *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12) {
      float result = v7;
    }
    unint64_t v7 = *(uint64_t **)v12;
  }
  BOOL v19 = (void *)*v7;
  if (*v7 && !*((unsigned char *)v19 + 24)) {
    goto LABEL_68;
  }
  long long v20 = (uint64_t *)v7[1];
  if (!v20 || *((unsigned char *)v20 + 24))
  {
    *((unsigned char *)v7 + 24) = 0;
    double v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_68:
    long long v20 = v7;
  }
  else
  {
    *((unsigned char *)v20 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v26 = *v20;
    v7[1] = *v20;
    if (v26) {
      *(void *)(v26 + 16) = v7;
    }
    v20[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
    uint64_t *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    BOOL v19 = v7;
  }
  uint64_t v23 = v20[2];
  *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  uint64_t v24 = *(uint64_t **)v23;
  uint64_t v27 = *(void *)(*(void *)v23 + 8);
  *(void *)uint64_t v23 = v27;
  if (v27) {
    *(void *)(v27 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

void std::vector<unsigned long>::__append(void **a1, unint64_t a2, void *a3)
{
  int v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  unint64_t v7 = v8;
  uint64_t v9 = *(void **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 3)
  {
    if (a2)
    {
      uint64_t v16 = 8 * a2;
      double v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 8;
      }
      while (v16);
      uint64_t v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    unint64_t v11 = a2 + (v10 >> 3);
    if (v11 >> 61) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 3;
    uint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 >> 2 > v11) {
      unint64_t v11 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      unint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>(v6, v14);
    }
    else {
      unint64_t v15 = 0;
    }
    uint64_t v18 = &v15[8 * v12];
    BOOL v19 = &v18[8 * a2];
    uint64_t v20 = 8 * a2;
    BOOL v21 = v18;
    do
    {
      *(void *)BOOL v21 = *a3;
      v21 += 8;
      v20 -= 8;
    }
    while (v20);
    uint64_t v22 = &v15[8 * v14];
    uint64_t v23 = (char *)*a1;
    for (uint64_t i = (char *)a1[1]; i != v23; i -= 8)
    {
      uint64_t v25 = *((void *)i - 1);
      *((void *)v18 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v25;
      v18 -= 8;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

void *std::vector<double>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<CLMicroLocationWiFiChannelHistogram>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (void *)a1[1];
    unint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_25636DA38(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *CLMicroLocationFingerprintStdVectorSource::CLMicroLocationFingerprintStdVectorSource(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  *a1 = &unk_2704DB338;
  a1[1] = 0;
  uint64_t v6 = a1 + 1;
  a1[2] = 0;
  a1[3] = 0;
  uint64_t v7 = *(void *)(a3 + 24);
  if (!v7) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(unint64_t *__return_ptr))(*(void *)v7 + 48))(v22);
  unint64_t v11 = *(_OWORD **)a4;
  uint64_t v12 = *(_OWORD **)(a4 + 8);
  if (*(_OWORD **)a4 != v12)
  {
    do
    {
      uint64_t v13 = *(void *)(a2 + 24);
      if (!v13) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)v13 + 48))(v13))
      {
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_20);
        }
        BOOL v19 = logObject_MicroLocation_Default;
        if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl(&dword_25631F000, v19, OS_LOG_TYPE_DEFAULT, "Data source cancelled learning", buf, 2u);
        }
        break;
      }
      id v14 = *(id *)(a5 + 64);
      v26[0] = *v11;
      unint64_t v15 = operator new(0x10uLL);
      uint64_t v29 = v15 + 1;
      unint64_t v30 = v15 + 1;
      _OWORD *v15 = v26[0];
      *(void *)uint64_t buf = v15;
      if (v14)
      {
        [v14 fetchMeasurementsForRecordingUUIDs:buf];
        unint64_t v15 = *(_OWORD **)buf;
        if (!*(void *)buf) {
          goto LABEL_10;
        }
      }
      else
      {
        memset(v21, 0, sizeof(v21));
      }
      uint64_t v29 = v15;
      operator delete(v15);
LABEL_10:

      CLMicroLocationsMeasurementFilters::filterStaleWiFiMeasurementsForFingerprint<CLMicroLocationMeasurementTable::Entry>(v21, (uint64_t)v11);
      uint64_t v16 = (const CLMicroLocationProto::RecordingEvent *)(v11 + 5);
      CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)v26, v16);
      char v27 = 1;
      long long v24 = *((_OWORD *)v16 - 5);
      char v25 = 1;
      CLMicroLocationFingerprint::create(v21, (uint64_t)v26, (uint64_t)&v24, v22, buf);
      if (v27) {
        CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v26);
      }
      if (v31)
      {
        unint64_t v17 = a1[2];
        if (v17 >= a1[3])
        {
          uint64_t v18 = std::vector<CLMicroLocationFingerprint>::__emplace_back_slow_path<CLMicroLocationFingerprint>(v6, (uint64_t)buf);
        }
        else
        {
          std::allocator<CLMicroLocationFingerprint>::construct[abi:ne180100]<CLMicroLocationFingerprint,CLMicroLocationFingerprint>((uint64_t)(a1 + 3), a1[2], (uint64_t)buf);
          uint64_t v18 = v17 + 192;
        }
        a1[2] = v18;
      }
      std::__optional_destruct_base<CLMicroLocationFingerprint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
      *(void *)uint64_t buf = v21;
      std::vector<CLMicroLocationMeasurementTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      unint64_t v11 = (_OWORD *)((char *)v16 + 168);
    }
    while (v11 != v12);
  }
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&v23);
  return a1;
}

void sub_25636DD14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,void *__p,uint64_t a44)
{
}

void CLMicroLocationsMeasurementFilters::filterStaleWiFiMeasurementsForFingerprint<CLMicroLocationMeasurementTable::Entry>(uint64_t *a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v4 = +[ULDefaultsSingleton shared];
  int v5 = [v4 defaultsDictionary];

  uint64_t v6 = [NSString stringWithUTF8String:"ULMaximumAgeForValidity"];
  uint64_t v7 = [v5 objectForKey:v6];
  if (v7 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    [v7 doubleValue];
  }
  else {
    [&unk_2704F1518 doubleValue];
  }
  double v9 = v8;

  uint64_t v11 = *a1;
  uint64_t v10 = a1[1];
  uint64_t v12 = std::remove_if[abi:ne180100]<std::__wrap_iter<CLMicroLocationMeasurementTable::Entry *>,void CLMicroLocationsMeasurementFilters::filterStaleWiFiMeasurementsForFingerprint<CLMicroLocationMeasurementTable::Entry>(std::vector<CLMicroLocationMeasurementTable::Entry> &,CLMicroLocationRecordingEventsTable::Entry const&)::{lambda(CLMicroLocationMeasurementTable::Entry const&)#1}>(*a1, v10, *(double *)(a2 + 16) - v9);
  std::vector<CLMicroLocationMeasurementTable::Entry>::erase((uint64_t)a1, v12, a1[1]);
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_20);
  }
  uint64_t v13 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    uint64_t v15 = *a1;
    uint64_t v14 = a1[1];
    uint64_t v16 = (char *)operator new(0x28uLL);
    *(void *)(v16 + 29) = 0;
    *(_OWORD *)uint64_t v16 = 0u;
    *((_OWORD *)v16 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
    boost::uuids::to_chars<char *>(a2, v16);
    v17[0] = 68289794;
    v17[1] = 0;
    BOOL v19 = "";
    __int16 v18 = 2082;
    __int16 v20 = 2050;
    unint64_t v21 = 0xEEEEEEEEEEEEEEEFLL * ((v10 - v11) >> 3);
    __int16 v22 = 2050;
    unint64_t v23 = 0xEEEEEEEEEEEEEEEFLL * ((v14 - v15) >> 3);
    __int16 v24 = 2082;
    char v25 = v16;
    _os_log_impl(&dword_25631F000, v13, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"filterStaleWiFiMeasurementsForFingerprint\", \"num measurements before\":%{public}lu, \"num measurements after filter\":%{public}lu, \"Recording UUID\":%{public, location:escape_only}s}", (uint8_t *)v17, 0x30u);
    operator delete(v16);
  }
}

void sub_25636DFF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t CLMicroLocationFingerprintStdVectorSource::size(CLMicroLocationFingerprintStdVectorSource *this)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 2) - *((void *)this + 1)) >> 6);
}

uint64_t CLMicroLocationFingerprintStdVectorSource::at(CLMicroLocationFingerprintStdVectorSource *this, uint64_t a2)
{
  return *((void *)this + 1) + 192 * a2;
}

uint64_t CLMicroLocationFingerprintStdVectorSource::push_back(CLMicroLocationFingerprintStdVectorSource *this, const CLMicroLocationFingerprint *a2)
{
  unint64_t v4 = *((void *)this + 3);
  unint64_t v3 = (char *)this + 24;
  unint64_t v5 = *((void *)v3 - 1);
  if (v5 >= v4)
  {
    uint64_t result = std::vector<CLMicroLocationFingerprint>::__push_back_slow_path<CLMicroLocationFingerprint const&>((uint64_t *)this + 1, (uint64_t)a2);
  }
  else
  {
    std::allocator<CLMicroLocationFingerprint>::construct[abi:ne180100]<CLMicroLocationFingerprint,CLMicroLocationFingerprint const&>((uint64_t)v3, *((void *)v3 - 1), (uint64_t)a2);
    uint64_t result = v5 + 192;
    *((void *)this + 2) = v5 + 192;
  }
  *((void *)this + 2) = result;
  return result;
}

void sub_25636E0D4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

void CLMicroLocationFingerprintStdVectorSource::~CLMicroLocationFingerprintStdVectorSource(CLMicroLocationFingerprintStdVectorSource *this)
{
  *(void *)this = &unk_2704DB338;
  uint64_t v1 = (void **)((char *)this + 8);
  std::vector<CLMicroLocationFingerprint>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(void *)this = &unk_2704DB338;
  uint64_t v2 = (void **)((char *)this + 8);
  std::vector<CLMicroLocationFingerprint>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x25A2A6340](this, 0xA1C4030951706);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_14()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

char *std::vector<CLMicroLocationFingerprint>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x155555555555556) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationFingerprint>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[192 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationFingerprint>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x155555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(192 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationFingerprint>,CLMicroLocationFingerprint*,CLMicroLocationFingerprint*,CLMicroLocationFingerprint*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  _DWORD v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::allocator<CLMicroLocationFingerprint>::construct[abi:ne180100]<CLMicroLocationFingerprint,CLMicroLocationFingerprint&>(a1, v4, v6);
      v6 += 192;
      uint64_t v4 = v12 + 192;
      v12 += 192;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationFingerprint>,CLMicroLocationFingerprint*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_25636E318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::allocator<CLMicroLocationFingerprint>::construct[abi:ne180100]<CLMicroLocationFingerprint,CLMicroLocationFingerprint&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::unordered_set<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::unordered_set(a2, a3);
  long long v5 = *(_OWORD *)(a3 + 40);
  *(void *)(a2 + 56) = *(void *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  std::unordered_set<CLMicroLocationProto::DataType>::unordered_set(a2 + 64, a3 + 64);
  std::unordered_map<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>::unordered_map(a2 + 104, a3 + 104);
  long long v6 = *(_OWORD *)(a3 + 144);
  int v7 = *(_DWORD *)(a3 + 160);
  *(void *)(a2 + 168) = 0;
  *(_DWORD *)(a2 + 160) = v7;
  *(_OWORD *)(a2 + 144) = v6;
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  return std::vector<CLMicroLocationProto::ConfidenceReason>::__init_with_size[abi:ne180100]<CLMicroLocationProto::ConfidenceReason*,CLMicroLocationProto::ConfidenceReason*>((void *)(a2 + 168), *(const void **)(a3 + 168), *(void *)(a3 + 176), (uint64_t)(*(void *)(a3 + 176) - *(void *)(a3 + 168)) >> 2);
}

void sub_25636E3C0(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(v2);
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::unordered_set(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(uint64_t **)(a2 + 16); i; uint64_t i = (uint64_t *)*i)
    std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__emplace_unique_key_args<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement const&>(a1, (uint64_t)(i + 2), (_OWORD *)i + 1);
  return a1;
}

void sub_25636E454(_Unwind_Exception *a1)
{
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__emplace_unique_key_args<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement const&>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  int v7 = (void *)(a1 + 24);
  unint64_t v8 = CLMicroLocationFingerprint::Measurement::HashMeasurement::operator()(a1 + 24, a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(void **)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      uint64_t v14 = (void *)*v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v9)
          {
            if (CLMicroLocationFingerprint::Measurement::PredicateMeasurement::operator()(a1 + 32, (uint64_t)(v14 + 2), a2))return v14; {
          }
            }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10) {
                v15 %= v10;
              }
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3) {
              break;
            }
          }
          uint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__construct_node_hash<CLMicroLocationFingerprint::Measurement const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  __int16 v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *__int16 v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t v14 = (void *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return v14;
}

void sub_25636E6D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__construct_node_hash<CLMicroLocationFingerprint::Measurement const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  *((_OWORD *)v8 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = *a3;
  uint64_t result = std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)(v8 + 4), (uint64_t)(a3 + 1));
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_25636E754(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::__copy_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
  return a1;
}

void sub_25636E7A0(_Unwind_Exception *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 24);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_2704DB3A0[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 24) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_2704DB3B8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJyN5boost5uuids4uuidENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSL_1EJySA_SG_EEERKSY_EEEDcSQ_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJyN5boost5uuids4uuidENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSL_1EJySA_SG_EEERKSY_EEEDcSQ_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJyN5boost5uuids4uuidENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSL_1EJySA_SG_EEERKSY_EEEDcSQ_DpT0_(int a1, std::string *this, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v3 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
}

void std::unique_ptr<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__variant_detail::__dtor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t std::unordered_set<CLMicroLocationProto::DataType>::unordered_set(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned int **)(a2 + 16); i; uint64_t i = *(unsigned int **)i)
    std::__hash_table<CLMicroLocationProto::DataType,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,std::allocator<CLMicroLocationProto::DataType>>::__emplace_unique_key_args<CLMicroLocationProto::DataType,CLMicroLocationProto::DataType const&>(a1, i + 4, i + 4);
  return a1;
}

void sub_25636E940(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<CLMicroLocationProto::DataType,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,std::allocator<CLMicroLocationProto::DataType>>::__emplace_unique_key_args<CLMicroLocationProto::DataType,CLMicroLocationProto::DataType const&>(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          unint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  unint64_t v10 = operator new(0x18uLL);
  *unint64_t v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  unint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *unint64_t v10 = *v19;
LABEL_38:
    *unint64_t v19 = v10;
    goto LABEL_39;
  }
  *unint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    unint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_25636EB64(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned int **)(a2 + 16); i; uint64_t i = *(unsigned int **)i)
    std::__hash_table<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,std::__unordered_map_hasher<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,true>,std::__unordered_map_equal<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,std::equal_to<CLMicroLocationProto::DataType>,std::hash<CLMicroLocationProto::DataType>,true>,std::allocator<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>>>::__emplace_unique_key_args<CLMicroLocationProto::DataType,std::pair<CLMicroLocationProto::DataType const,CLMicroLocationFingerprint::StartAndEndTimestamps> const&>(a1, i + 4, (uint64_t)(i + 4));
  return a1;
}

void sub_25636EBD8(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,std::__unordered_map_hasher<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,true>,std::__unordered_map_equal<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,std::equal_to<CLMicroLocationProto::DataType>,std::hash<CLMicroLocationProto::DataType>,true>,std::allocator<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>>>::__emplace_unique_key_args<CLMicroLocationProto::DataType,std::pair<CLMicroLocationProto::DataType const,CLMicroLocationFingerprint::StartAndEndTimestamps> const&>(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          unint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  unint64_t v10 = operator new(0x28uLL);
  *unint64_t v10 = 0;
  v10[1] = v6;
  *((_OWORD *)v10 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = *(_OWORD *)a3;
  v10[4] = *(void *)(a3 + 16);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  unint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *unint64_t v10 = *v19;
LABEL_38:
    *unint64_t v19 = v10;
    goto LABEL_39;
  }
  *unint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    unint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_25636EE04(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::vector<CLMicroLocationProto::ConfidenceReason>::__init_with_size[abi:ne180100]<CLMicroLocationProto::ConfidenceReason*,CLMicroLocationProto::ConfidenceReason*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    __n128 result = std::vector<CLMicroLocationProto::ConfidenceLevel>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_25636EE78(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationFingerprint>,CLMicroLocationFingerprint*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationFingerprint>,CLMicroLocationFingerprint*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

uint64_t *std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationFingerprint>,CLMicroLocationFingerprint*>::operator()[abi:ne180100](uint64_t *result)
{
  uint64_t v2 = (uint64_t *)result[1];
  uint64_t v1 = (uint64_t *)result[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *result;
    do
    {
      v3 -= 192;
      __n128 result = (uint64_t *)std::allocator<CLMicroLocationFingerprint>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t std::allocator<CLMicroLocationFingerprint>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 168);
  if (v3)
  {
    *(void *)(a2 + 176) = v3;
    operator delete(v3);
  }
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(a2 + 104);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(a2 + 64);
  return std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table(a2);
}

void std::vector<CLMicroLocationFingerprint>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 192;
        std::allocator<CLMicroLocationFingerprint>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<CLMicroLocationMeasurementTable::Entry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unint64_t v6 = v4 - 120;
        CLMicroLocationProto::Measurement::~Measurement((CLMicroLocationProto::Measurement *)(v4 - 88));
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<CLMicroLocationMeasurementTable::Entry>::erase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,CLMicroLocationMeasurementTable::Entry *,CLMicroLocationMeasurementTable::Entry *,CLMicroLocationMeasurementTable::Entry *,0>(a3, *(void *)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        uint64_t v8 = v7 - 120;
        CLMicroLocationProto::Measurement::~Measurement((CLMicroLocationProto::Measurement *)(v7 - 88));
        uint64_t v7 = v8;
      }
      while (v8 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

uint64_t std::remove_if[abi:ne180100]<std::__wrap_iter<CLMicroLocationMeasurementTable::Entry *>,void CLMicroLocationsMeasurementFilters::filterStaleWiFiMeasurementsForFingerprint<CLMicroLocationMeasurementTable::Entry>(std::vector<CLMicroLocationMeasurementTable::Entry> &,CLMicroLocationRecordingEventsTable::Entry const&)::{lambda(CLMicroLocationMeasurementTable::Entry const&)#1}>(uint64_t a1, uint64_t a2, double a3)
{
  if (a1 == a2) {
    return a2;
  }
  for (uint64_t i = a1 + 120; *(_DWORD *)(i - 24) != 1 || *(double *)(i - 80) >= a3; i += 120)
  {
    if (i == a2) {
      return a2;
    }
  }
  uint64_t v7 = i - 120;
  if (i - 120 != a2)
  {
    while (i != a2)
    {
      if (*(_DWORD *)(i + 96) != 1 || *(double *)(i + 40) >= a3)
      {
        CLMicroLocationMeasurementTable::Entry::operator=(v7, i);
        v7 += 120;
      }
      i += 120;
    }
  }
  return v7;
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,CLMicroLocationMeasurementTable::Entry *,CLMicroLocationMeasurementTable::Entry *,CLMicroLocationMeasurementTable::Entry *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      CLMicroLocationMeasurementTable::Entry::operator=(a3, v4);
      v4 += 120;
      a3 += 120;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t std::vector<CLMicroLocationFingerprint>::__emplace_back_slow_path<CLMicroLocationFingerprint>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 6);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x155555555555555) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 6) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 6);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 6) >= 0xAAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x155555555555555;
  }
  else {
    unint64_t v6 = v4;
  }
  BOOL v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationFingerprint>>((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  unint64_t v10 = v7;
  unint64_t v11 = &v7[192 * v3];
  float v13 = &v7[192 * v6];
  std::allocator<CLMicroLocationFingerprint>::construct[abi:ne180100]<CLMicroLocationFingerprint,CLMicroLocationFingerprint>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  float v12 = v11 + 192;
  std::vector<CLMicroLocationFingerprint>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<CLMicroLocationFingerprint>::~__split_buffer(&v10);
  return v8;
}

void sub_25636F318(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMicroLocationFingerprint>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

__n128 std::allocator<CLMicroLocationFingerprint>::construct[abi:ne180100]<CLMicroLocationFingerprint,CLMicroLocationFingerprint>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__hash_table(a2, (uint64_t *)a3);
  long long v5 = *(_OWORD *)(a3 + 40);
  *(void *)(a2 + 56) = *(void *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__hash_table(a2 + 64, (uint64_t *)(a3 + 64));
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__hash_table(a2 + 104, (uint64_t *)(a3 + 104));
  long long v6 = *(_OWORD *)(a3 + 144);
  *(_DWORD *)(a2 + 160) = *(_DWORD *)(a3 + 160);
  *(_OWORD *)(a2 + 144) = v6;
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  *(void *)(a2 + 168) = 0;
  __n128 result = *(__n128 *)(a3 + 168);
  *(__n128 *)(a2 + 168) = result;
  *(void *)(a2 + 184) = *(void *)(a3 + 184);
  *(void *)(a3 + 168) = 0;
  *(void *)(a3 + 176) = 0;
  *(void *)(a3 + 184) = 0;
  return result;
}

uint64_t std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__hash_table(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *(void *)__n128 result = v2;
  *(void *)(result + 8) = a2[1];
  a2[1] = 0;
  uint64_t v5 = a2[2];
  unint64_t v3 = a2 + 2;
  uint64_t v4 = v5;
  *(void *)(result + 16) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 16;
    *unint64_t v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t std::vector<CLMicroLocationFingerprint>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationFingerprint>,std::reverse_iterator<CLMicroLocationFingerprint*>,std::reverse_iterator<CLMicroLocationFingerprint*>,std::reverse_iterator<CLMicroLocationFingerprint*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationFingerprint>,std::reverse_iterator<CLMicroLocationFingerprint*>,std::reverse_iterator<CLMicroLocationFingerprint*>,std::reverse_iterator<CLMicroLocationFingerprint*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  _DWORD v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 192;
      std::allocator<CLMicroLocationFingerprint>::construct[abi:ne180100]<CLMicroLocationFingerprint,CLMicroLocationFingerprint>(a1, v7 - 192, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 192;
      *((void *)&v16 + 1) -= 192;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationFingerprint>,std::reverse_iterator<CLMicroLocationFingerprint*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationFingerprint>,std::reverse_iterator<CLMicroLocationFingerprint*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationFingerprint>,std::reverse_iterator<CLMicroLocationFingerprint*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

uint64_t *std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationFingerprint>,std::reverse_iterator<CLMicroLocationFingerprint*>>::operator()[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *(void *)(result[2] + 8);
  uint64_t v2 = *(void *)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      uint64_t result = (uint64_t *)std::allocator<CLMicroLocationFingerprint>::destroy[abi:ne180100](v3, v1);
      v1 += 192;
    }
    while (v1 != v2);
  }
  return result;
}

void **std::__split_buffer<CLMicroLocationFingerprint>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

uint64_t std::__split_buffer<CLMicroLocationFingerprint>::clear[abi:ne180100](uint64_t result)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v1 = *(void *)(result + 16);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *(void *)(v3 + 32);
      *(void *)(v3 + 16) = v1 - 192;
      uint64_t result = std::allocator<CLMicroLocationFingerprint>::destroy[abi:ne180100](v4, v1 - 192);
      uint64_t v1 = *(void *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t std::vector<CLMicroLocationFingerprint>::__push_back_slow_path<CLMicroLocationFingerprint const&>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 6);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x155555555555555) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 6) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 6);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 6) >= 0xAAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x155555555555555;
  }
  else {
    unint64_t v6 = v4;
  }
  char v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationFingerprint>>((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  unint64_t v10 = v7;
  uint64_t v11 = &v7[192 * v3];
  float v13 = &v7[192 * v6];
  std::allocator<CLMicroLocationFingerprint>::construct[abi:ne180100]<CLMicroLocationFingerprint,CLMicroLocationFingerprint const&>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  float v12 = v11 + 192;
  std::vector<CLMicroLocationFingerprint>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<CLMicroLocationFingerprint>::~__split_buffer(&v10);
  return v8;
}

void sub_25636F758(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMicroLocationFingerprint>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *std::allocator<CLMicroLocationFingerprint>::construct[abi:ne180100]<CLMicroLocationFingerprint,CLMicroLocationFingerprint const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::unordered_set<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::unordered_set(a2, a3);
  long long v5 = *(_OWORD *)(a3 + 40);
  *(void *)(a2 + 56) = *(void *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  std::unordered_set<CLMicroLocationProto::DataType>::unordered_set(a2 + 64, a3 + 64);
  std::unordered_map<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>::unordered_map(a2 + 104, a3 + 104);
  long long v6 = *(_OWORD *)(a3 + 144);
  int v7 = *(_DWORD *)(a3 + 160);
  *(void *)(a2 + 168) = 0;
  *(_DWORD *)(a2 + 160) = v7;
  *(_OWORD *)(a2 + 144) = v6;
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  return std::vector<CLMicroLocationProto::ConfidenceReason>::__init_with_size[abi:ne180100]<CLMicroLocationProto::ConfidenceReason*,CLMicroLocationProto::ConfidenceReason*>((void *)(a2 + 168), *(const void **)(a3 + 168), *(void *)(a3 + 176), (uint64_t)(*(void *)(a3 + 176) - *(void *)(a3 + 168)) >> 2);
}

void sub_25636F800(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(v2);
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_25636F898()
{
  return 0;
}

void sub_25636FD88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_256370590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CLMicroLocationFingerprintPool::add(CLMicroLocationFingerprintPool *this@<X0>, uuid *a2@<X1>, const CLMicroLocationFingerprint *a3@<X2>, void *a4@<X8>)
{
  float v13 = a2;
  long long v6 = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>((uint64_t)this, a2, (uint64_t)&std::piecewise_construct, &v13);
  *a4 = 0;
  a4[1] = 0;
  int v7 = (std::__shared_weak_count *)v6[5];
  if (v7)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v7);
    a4[1] = v8;
    if (v8)
    {
      uint64_t v9 = v6[4];
      *a4 = v9;
      if (v9) {
        return;
      }
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  std::allocate_shared[abi:ne180100]<CLMicroLocationFingerprint,std::allocator<CLMicroLocationFingerprint>,CLMicroLocationFingerprint const&,void>((uint64_t)a3, &v13);
  uint64_t v11 = v13;
  unint64_t v10 = v14;
  float v13 = 0;
  char v14 = 0;
  *a4 = v11;
  a4[1] = v10;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
  }
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  float v12 = (std::__shared_weak_count *)v6[5];
  __n128 v6[4] = v11;
  void v6[5] = v10;
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
}

void sub_25637069C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void CLMicroLocationFingerprintPool::at(CLMicroLocationFingerprintPool *this@<X0>, uuid *a2@<X1>, unsigned char *a3@<X8>)
{
  *a3 = 0;
  a3[192] = 0;
  unint64_t v4 = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::find<boost::uuids::uuid>(this, a2);
  long long v5 = v4;
  if (v4)
  {
    long long v6 = (std::__shared_weak_count *)v4[5];
    if (v6)
    {
      int v7 = std::__shared_weak_count::lock(v6);
      if (v7)
      {
        uint64_t v8 = v7;
        uint64_t v9 = v5[4];
        if (v9)
        {
          std::__optional_destruct_base<CLMicroLocationFingerprint,false>::reset[abi:ne180100]((uint64_t)a3);
          std::__construct_at[abi:ne180100]<CLMicroLocationFingerprint,CLMicroLocationFingerprint&,CLMicroLocationFingerprint*>((uint64_t)a3, v9);
          a3[192] = 1;
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
    }
  }
}

void sub_25637074C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  std::__optional_destruct_base<CLMicroLocationFingerprint,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>(uint64_t a1, void *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  do
    v8 ^= (v8 << 6) + (v8 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v7++);
  while (v7 != 16);
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2 && i[3] == a2[1]) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
        }
      }
    }
  }
  long long v15 = (void *)(a1 + 16);
  uint64_t i = operator new(0x30uLL);
  *uint64_t i = 0;
  i[1] = v8;
  *((_OWORD *)i + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = **a4;
  i[4] = 0;
  i[5] = 0;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v22 = *(void *)a1;
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *uint64_t i = *v23;
LABEL_44:
    void *v23 = i;
    goto LABEL_45;
  }
  *uint64_t i = *v15;
  void *v15 = i;
  *(void *)(v22 + 8 * v4) = v15;
  if (*i)
  {
    unint64_t v24 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9) {
        v24 %= v9;
      }
    }
    else
    {
      v24 &= v9 - 1;
    }
    unint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_2563709DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = (std::__shared_weak_count *)__p[5];
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void *std::allocate_shared[abi:ne180100]<CLMicroLocationFingerprint,std::allocator<CLMicroLocationFingerprint>,CLMicroLocationFingerprint const&,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  unint64_t v4 = operator new(0xD8uLL);
  uint64_t result = std::__shared_ptr_emplace<CLMicroLocationFingerprint>::__shared_ptr_emplace[abi:ne180100]<CLMicroLocationFingerprint const&,std::allocator<CLMicroLocationFingerprint>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_256370A9C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<CLMicroLocationFingerprint>::__shared_ptr_emplace[abi:ne180100]<CLMicroLocationFingerprint const&,std::allocator<CLMicroLocationFingerprint>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_2704DB400;
  std::allocator<CLMicroLocationFingerprint>::construct[abi:ne180100]<CLMicroLocationFingerprint,CLMicroLocationFingerprint const&>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_256370B0C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<CLMicroLocationFingerprint>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_2704DB400;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CLMicroLocationFingerprint>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_2704DB400;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2A6340);
}

uint64_t std::__shared_ptr_emplace<CLMicroLocationFingerprint>::__on_zero_shared(uint64_t a1)
{
  return std::allocator<CLMicroLocationFingerprint>::destroy[abi:ne180100]((uint64_t)&v2, a1 + 24);
}

uint64_t std::__optional_destruct_base<CLMicroLocationFingerprint,false>::reset[abi:ne180100](uint64_t result)
{
  if (*(unsigned char *)(result + 192))
  {
    uint64_t v1 = result;
    char v2 = *(void **)(result + 168);
    if (v2)
    {
      *(void *)(v1 + 176) = v2;
      operator delete(v2);
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(v1 + 104);
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(v1 + 64);
    uint64_t result = std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table(v1);
    *(unsigned char *)(v1 + 192) = 0;
  }
  return result;
}

uint64_t std::__construct_at[abi:ne180100]<CLMicroLocationFingerprint,CLMicroLocationFingerprint&,CLMicroLocationFingerprint*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = std::unordered_set<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::unordered_set(a1, a2);
  long long v5 = *(_OWORD *)(a2 + 40);
  *(void *)(v4 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(v4 + 40) = v5;
  std::unordered_set<CLMicroLocationProto::DataType>::unordered_set(v4 + 64, a2 + 64);
  std::unordered_map<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>::unordered_map(a1 + 104, a2 + 104);
  long long v6 = *(_OWORD *)(a2 + 144);
  int v7 = *(_DWORD *)(a2 + 160);
  *(void *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 160) = v7;
  *(_OWORD *)(a1 + 144) = v6;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  std::vector<CLMicroLocationProto::ConfidenceReason>::__init_with_size[abi:ne180100]<CLMicroLocationProto::ConfidenceReason*,CLMicroLocationProto::ConfidenceReason*>((void *)(a1 + 168), *(const void **)(a2 + 168), *(void *)(a2 + 176), (uint64_t)(*(void *)(a2 + 176) - *(void *)(a2 + 168)) >> 2);
  return a1;
}

void sub_256370CA4(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(v2);
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

id CLMicroLocationAlgorithms::createLearner@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 >= 2)
  {
    CLMicroLocationAlgorithms::createLearner();
    return _CLLogObjectForCategory_MicroLocation_Default();
  }
  else
  {
    if (a1 != 1) {
      operator new();
    }
    id result = 0;
    *a2 = 0;
  }
  return result;
}

void CLMicroLocationAlgorithms::getDendrogramLearningParams(int a1@<W0>, void *a2@<X8>)
{
  if (a1 == 2)
  {
    ULSettings::get<ULSettings::SimilarityListClusterDistanceThresholdVector>((uint64_t)a2);
    uint64_t v3 = +[ULDefaultsSingleton shared];
    uint64_t v4 = [v3 defaultsDictionary];

    long long v5 = [NSString stringWithUTF8String:"ULSimilarityListSmallClusterSize"];
    long long v6 = [v4 objectForKey:v5];
    if (v6 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
      uint64_t v7 = [v6 unsignedLongValue];
    }
    else {
      uint64_t v7 = [&unk_2704F1530 unsignedLongValue];
    }
    uint64_t v8 = v7;

    a2[3] = v8;
    unint64_t v9 = +[ULDefaultsSingleton shared];
    uint8x8_t v10 = [v9 defaultsDictionary];

    uint64_t v11 = [NSString stringWithUTF8String:"ULSimilarityListSmallClusterRelativeSize"];
    float v12 = [v10 objectForKey:v11];
    if (v12 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
      [v12 doubleValue];
    }
    else {
      [&unk_2704F0DB0 doubleValue];
    }
    uint64_t v14 = v13;

    a2[4] = v14;
    long long v15 = +[ULDefaultsSingleton shared];
    float v16 = [v15 defaultsDictionary];

    float v17 = [NSString stringWithUTF8String:"ULSimilarityListSmallClusterDistanceThreshold"];
    BOOL v18 = [v16 objectForKey:v17];
    if (v18 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
      [v18 doubleValue];
    }
    else {
      [&unk_2704F0DC0 doubleValue];
    }
    uint64_t v20 = v19;

    a2[5] = v20;
  }
  else
  {
    ULSettings::get<ULSettings::MagicalMomentsClusterDistanceThresholdVector>((uint64_t)a2);
    a2[3] = 0;
    a2[4] = 0;
    a2[5] = 0;
  }
}

void sub_256370FC4(_Unwind_Exception *a1)
{
  long long v6 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

void sub_256371040()
{
}

void ULSettings::get<ULSettings::SimilarityListClusterDistanceThresholdVector>(uint64_t a1@<X8>)
{
  uint64_t v2 = +[ULDefaultsSingleton shared];
  uint64_t v3 = [v2 defaultsDictionary];

  uint64_t v4 = [NSString stringWithUTF8String:"ULSimilarityListClusterDistanceThresholdVector"];
  long long v5 = [v3 objectForKey:v4];
  if (v5 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    ULSettings::convert<NSArray<NSNumber *> * {__strong},std::vector<double>>(v5, (uint64_t)&v7);
    *(_OWORD *)a1 = v7;
    uint64_t v6 = v8;
  }
  else
  {
    ULSettings::convert<std::initializer_list<double>,std::vector<double>>(&_ZGRN10ULSettings14SettingsTraitsINS_44SimilarityListClusterDistanceThresholdVectorEE12defaultValueE_, 1uLL, (uint64_t)&v7);
    uint64_t v6 = v8;
    *(_OWORD *)a1 = v7;
  }
  *(void *)(a1 + 16) = v6;
}

void sub_256371138(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ULSettings::get<ULSettings::MagicalMomentsClusterDistanceThresholdVector>(uint64_t a1@<X8>)
{
  uint64_t v2 = +[ULDefaultsSingleton shared];
  uint64_t v3 = [v2 defaultsDictionary];

  uint64_t v4 = [NSString stringWithUTF8String:"ULMagicalMomentsClusterDistanceThresholdVector"];
  long long v5 = [v3 objectForKey:v4];
  if (v5 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    ULSettings::convert<NSArray<NSNumber *> * {__strong},std::vector<double>>(v5, (uint64_t)&v7);
    *(_OWORD *)a1 = v7;
    uint64_t v6 = v8;
  }
  else
  {
    ULSettings::convert<std::initializer_list<double>,std::vector<double>>(_ZGRN10ULSettings14SettingsTraitsINS_44MagicalMomentsClusterDistanceThresholdVectorEE12defaultValueE_, 3uLL, (uint64_t)&v7);
    uint64_t v6 = v8;
    *(_OWORD *)a1 = v7;
  }
  *(void *)(a1 + 16) = v6;
}

void sub_256371264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationAlgorithms::createKernelFunction(CLMicroLocationAlgorithms *this@<X0>, void *a2@<X8>)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  char v27 = this;
  uint64_t v4 = [(CLMicroLocationAlgorithms *)v27 objectForKeyedSubscript:@"type"];
  long long v5 = v4;
  if (!v4)
  {
    uint8x8_t v10 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v29 = 0;
      __int16 v30 = 2082;
      char v31 = "";
      __int16 v32 = 2082;
      double v33 = "assert";
      __int16 v34 = 2081;
      uint64_t v35 = "primitiveType";
      _os_log_impl(&dword_25631F000, v10, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"No type provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }

    uint64_t v11 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_signpost_enabled(v11))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v29 = 0;
      __int16 v30 = 2082;
      char v31 = "";
      __int16 v32 = 2082;
      double v33 = "assert";
      __int16 v34 = 2081;
      uint64_t v35 = "primitiveType";
      _os_signpost_emit_with_name_impl(&dword_25631F000, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "No type provided in dictionary", "{\"msg%{public}.0s\":\"No type provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }

    float v12 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v29 = 0;
      __int16 v30 = 2082;
      char v31 = "";
      __int16 v32 = 2082;
      double v33 = "assert";
      __int16 v34 = 2081;
      uint64_t v35 = "primitiveType";
      _os_log_impl(&dword_25631F000, v12, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"No type provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    goto LABEL_29;
  }
  if ((unint64_t)[v4 unsignedLongValue] >= 4)
  {
    uint64_t v13 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289795;
      int v29 = 0;
      __int16 v30 = 2082;
      char v31 = "";
      __int16 v32 = 2050;
      double v33 = (const char *)[v5 unsignedLongValue];
      __int16 v34 = 2082;
      uint64_t v35 = "assert";
      __int16 v36 = 2081;
      unint64_t v37 = "primitiveType.unsignedLongValue < static_cast<uint32_t>(KernelFunctionType::kTypeCount)";
      _os_log_impl(&dword_25631F000, v13, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Invalid algorithm chosen\", \"enum value\":%{public}lu, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
    }

    uint64_t v14 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_signpost_enabled(v14))
    {
      uint64_t v15 = [v5 unsignedLongValue];
      *(_DWORD *)uint64_t buf = 68289795;
      int v29 = 0;
      __int16 v30 = 2082;
      char v31 = "";
      __int16 v32 = 2050;
      double v33 = (const char *)v15;
      __int16 v34 = 2082;
      uint64_t v35 = "assert";
      __int16 v36 = 2081;
      unint64_t v37 = "primitiveType.unsignedLongValue < static_cast<uint32_t>(KernelFunctionType::kTypeCount)";
      _os_signpost_emit_with_name_impl(&dword_25631F000, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Invalid algorithm chosen", "{\"msg%{public}.0s\":\"Invalid algorithm chosen\", \"enum value\":%{public}lu, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
    }

    float v12 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO)) {
      CLMicroLocationAlgorithms::createKernelFunction(buf, [v5 unsignedLongValue], v12);
    }
LABEL_29:

    abort_report_np();
    goto LABEL_65;
  }
  int v6 = [v5 unsignedLongValue];
  long long v7 = [(CLMicroLocationAlgorithms *)v27 objectForKeyedSubscript:@"sigma"];
  uint64_t v8 = [(CLMicroLocationAlgorithms *)v27 objectForKeyedSubscript:@"power"];
  unint64_t v9 = v8;
  switch(v6)
  {
    case 1:
      if (v7)
      {
        [v7 doubleValue];
        operator new();
      }
      uint64_t v19 = _CLLogObjectForCategory_MicroLocation_Default();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 68289539;
        int v29 = 0;
        __int16 v30 = 2082;
        char v31 = "";
        __int16 v32 = 2082;
        double v33 = "assert";
        __int16 v34 = 2081;
        uint64_t v35 = "sigma";
        _os_log_impl(&dword_25631F000, v19, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"No sigma provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }

      uint64_t v20 = _CLLogObjectForCategory_MicroLocation_Default();
      if (os_signpost_enabled(v20))
      {
        *(_DWORD *)uint64_t buf = 68289539;
        int v29 = 0;
        __int16 v30 = 2082;
        char v31 = "";
        __int16 v32 = 2082;
        double v33 = "assert";
        __int16 v34 = 2081;
        uint64_t v35 = "sigma";
        _os_signpost_emit_with_name_impl(&dword_25631F000, v20, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "No sigma provided in dictionary", "{\"msg%{public}.0s\":\"No sigma provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }

      BOOL v18 = _CLLogObjectForCategory_MicroLocation_Default();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t buf = 68289539;
        int v29 = 0;
        __int16 v30 = 2082;
        char v31 = "";
        __int16 v32 = 2082;
        double v33 = "assert";
        __int16 v34 = 2081;
        uint64_t v35 = "sigma";
        _os_log_impl(&dword_25631F000, v18, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"No sigma provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }
      break;
    case 2:
      if (v7)
      {
        if (v8)
        {
          [v7 doubleValue];
          [v9 doubleValue];
          operator new();
        }
        char v25 = _CLLogObjectForCategory_MicroLocation_Default();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)uint64_t buf = 68289539;
          int v29 = 0;
          __int16 v30 = 2082;
          char v31 = "";
          __int16 v32 = 2082;
          double v33 = "assert";
          __int16 v34 = 2081;
          uint64_t v35 = "power";
          _os_log_impl(&dword_25631F000, v25, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"No power provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        }

        uint64_t v26 = _CLLogObjectForCategory_MicroLocation_Default();
        if (os_signpost_enabled(v26))
        {
          *(_DWORD *)uint64_t buf = 68289539;
          int v29 = 0;
          __int16 v30 = 2082;
          char v31 = "";
          __int16 v32 = 2082;
          double v33 = "assert";
          __int16 v34 = 2081;
          uint64_t v35 = "power";
          _os_signpost_emit_with_name_impl(&dword_25631F000, v26, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "No power provided in dictionary", "{\"msg%{public}.0s\":\"No power provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        }

        BOOL v18 = _CLLogObjectForCategory_MicroLocation_Default();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint64_t buf = 68289539;
          int v29 = 0;
          __int16 v30 = 2082;
          char v31 = "";
          __int16 v32 = 2082;
          double v33 = "assert";
          __int16 v34 = 2081;
          uint64_t v35 = "power";
          _os_log_impl(&dword_25631F000, v18, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"No power provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        }
      }
      else
      {
        size_t v21 = _CLLogObjectForCategory_MicroLocation_Default();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)uint64_t buf = 68289539;
          int v29 = 0;
          __int16 v30 = 2082;
          char v31 = "";
          __int16 v32 = 2082;
          double v33 = "assert";
          __int16 v34 = 2081;
          uint64_t v35 = "sigma";
          _os_log_impl(&dword_25631F000, v21, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"No sigma provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        }

        uint64_t v22 = _CLLogObjectForCategory_MicroLocation_Default();
        if (os_signpost_enabled(v22))
        {
          *(_DWORD *)uint64_t buf = 68289539;
          int v29 = 0;
          __int16 v30 = 2082;
          char v31 = "";
          __int16 v32 = 2082;
          double v33 = "assert";
          __int16 v34 = 2081;
          uint64_t v35 = "sigma";
          _os_signpost_emit_with_name_impl(&dword_25631F000, v22, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "No sigma provided in dictionary", "{\"msg%{public}.0s\":\"No sigma provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        }

        BOOL v18 = _CLLogObjectForCategory_MicroLocation_Default();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint64_t buf = 68289539;
          int v29 = 0;
          __int16 v30 = 2082;
          char v31 = "";
          __int16 v32 = 2082;
          double v33 = "assert";
          __int16 v34 = 2081;
          uint64_t v35 = "sigma";
          _os_log_impl(&dword_25631F000, v18, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"No sigma provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        }
      }
      break;
    case 3:
      if (v7)
      {
        [v7 doubleValue];
        operator new();
      }
      float v16 = _CLLogObjectForCategory_MicroLocation_Default();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 68289539;
        int v29 = 0;
        __int16 v30 = 2082;
        char v31 = "";
        __int16 v32 = 2082;
        double v33 = "assert";
        __int16 v34 = 2081;
        uint64_t v35 = "sigma";
        _os_log_impl(&dword_25631F000, v16, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"No sigma provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }

      float v17 = _CLLogObjectForCategory_MicroLocation_Default();
      if (os_signpost_enabled(v17))
      {
        *(_DWORD *)uint64_t buf = 68289539;
        int v29 = 0;
        __int16 v30 = 2082;
        char v31 = "";
        __int16 v32 = 2082;
        double v33 = "assert";
        __int16 v34 = 2081;
        uint64_t v35 = "sigma";
        _os_signpost_emit_with_name_impl(&dword_25631F000, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "No sigma provided in dictionary", "{\"msg%{public}.0s\":\"No sigma provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }

      BOOL v18 = _CLLogObjectForCategory_MicroLocation_Default();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t buf = 68289539;
        int v29 = 0;
        __int16 v30 = 2082;
        char v31 = "";
        __int16 v32 = 2082;
        double v33 = "assert";
        __int16 v34 = 2081;
        uint64_t v35 = "sigma";
        _os_log_impl(&dword_25631F000, v18, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"No sigma provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }
      break;
    case 4:
      *a2 = 0;

      return;
    default:
      if (v7)
      {
        [v7 doubleValue];
        operator new();
      }
      unint64_t v23 = _CLLogObjectForCategory_MicroLocation_Default();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 68289539;
        int v29 = 0;
        __int16 v30 = 2082;
        char v31 = "";
        __int16 v32 = 2082;
        double v33 = "assert";
        __int16 v34 = 2081;
        uint64_t v35 = "sigma";
        _os_log_impl(&dword_25631F000, v23, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"No sigma provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }

      unint64_t v24 = _CLLogObjectForCategory_MicroLocation_Default();
      if (os_signpost_enabled(v24))
      {
        *(_DWORD *)uint64_t buf = 68289539;
        int v29 = 0;
        __int16 v30 = 2082;
        char v31 = "";
        __int16 v32 = 2082;
        double v33 = "assert";
        __int16 v34 = 2081;
        uint64_t v35 = "sigma";
        _os_signpost_emit_with_name_impl(&dword_25631F000, v24, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "No sigma provided in dictionary", "{\"msg%{public}.0s\":\"No sigma provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }

      BOOL v18 = _CLLogObjectForCategory_MicroLocation_Default();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t buf = 68289539;
        int v29 = 0;
        __int16 v30 = 2082;
        char v31 = "";
        __int16 v32 = 2082;
        double v33 = "assert";
        __int16 v34 = 2081;
        uint64_t v35 = "sigma";
        _os_log_impl(&dword_25631F000, v18, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"No sigma provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }
      break;
  }

  abort_report_np();
LABEL_65:
  __break(1u);
}

void sub_256372278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  MEMORY[0x25A2A6340](v15, 0x1081C40468F112ELL);

  _Unwind_Resume(a1);
}

void CLMicroLocationAlgorithms::createLearnFingerprintDistanceFunction(int a1@<W0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
}

void CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(int a1@<W0>, void *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  id v19 = a2;
  unint64_t v9 = (ULHomeNearbyRangingSupport *)ULSettings::get<ULSettings::MeasurementProcessingUwbRangeEnable>();
  if (v9) {
    int isUwbRangingSupportedOnDevice = ULHomeNearbyRangingSupport::isUwbRangingSupportedOnDevice(v9);
  }
  else {
    int isUwbRangingSupportedOnDevice = 0;
  }
  uint64_t v11 = (CLMicroLocationUtils *)ULSettings::get<ULSettings::MeasurementProcessingWifiRssiEnable>();
  int v12 = ULSettings::get<ULSettings::MeasurementProcessingBleLeechEnable>();
  uint64_t EnabledTechnologies = CLMicroLocationUtils::createEnabledTechnologies(v11, v12, isUwbRangingSupportedOnDevice);
  uint64_t v13 = +[ULDefaultsSingleton shared];
  uint64_t v14 = [v13 defaultsDictionary];

  uint64_t v15 = [NSString stringWithUTF8String:"ULAdaptiveSensorsEnable"];
  float v16 = [v14 objectForKey:v15];
  if (v16 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    char v17 = [v16 BOOLValue];
  }
  else {
    char v17 = [MEMORY[0x263EFFA88] BOOLValue];
  }
  char v18 = v17;

  char v21 = v18;
  CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(a1, v19, (uint64_t)&EnabledTechnologies, a3, a4, a5);
}

void sub_2563724B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationAlgorithms::createLearnFingerprintDistanceFunction(int a1@<W0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
}

void CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(int a1@<W0>, void *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v74 = *MEMORY[0x263EF8340];
  id v47 = a2;
  switch(a1)
  {
    case 1:
      *(void *)&long long v51 = *(void *)a3;
      BYTE8(v5CLMicroLocationLogic::startOdometryMonitoring(this - 1) = *(unsigned char *)(a3 + 8);
      uint64_t v28 = v52;
      std::__optional_copy_base<CLMicroLocationAnchorAppearanceMap,false>::__optional_copy_base[abi:ne180100]((uint64_t)v52, a5);
      a6[3] = 0;
      __int16 v30 = (char *)operator new(0x58uLL);
      *(void *)__int16 v30 = &unk_2704DB500;
      *(_OWORD *)(v30 + 8) = v51;
      std::__optional_copy_base<CLMicroLocationAnchorAppearanceMap,false>::__optional_copy_base[abi:ne180100]((uint64_t)(v30 + 24), (uint64_t)v52);
      a6[3] = v30;
      if (!v52[56]) {
        goto LABEL_23;
      }
      goto LABEL_18;
    case 2:
      char v21 = [v47 objectForKeyedSubscript:@"jaccard_threshold"];
      uint64_t v22 = [v47 objectForKeyedSubscript:@"jaccard_scale_factor"];
      unint64_t v23 = (void *)v22;
      if (!v21)
      {
        uint64_t v41 = _CLLogObjectForCategory_MicroLocation_Default();
        if (os_log_type_enabled(v41, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)uint64_t buf = 68289539;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = "";
          __int16 v57 = 2082;
          *(void *)__int16 v58 = "assert";
          *(_WORD *)&v58[8] = 2081;
          *(void *)&v58[10] = "jaccard_threshold";
          _os_log_impl(&dword_25631F000, v41, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"No jaccard_threshold provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        }

        uint64_t v42 = _CLLogObjectForCategory_MicroLocation_Default();
        if (os_signpost_enabled(v42))
        {
          *(_DWORD *)uint64_t buf = 68289539;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = "";
          __int16 v57 = 2082;
          *(void *)__int16 v58 = "assert";
          *(_WORD *)&v58[8] = 2081;
          *(void *)&v58[10] = "jaccard_threshold";
          _os_signpost_emit_with_name_impl(&dword_25631F000, v42, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "No jaccard_threshold provided in dictionary", "{\"msg%{public}.0s\":\"No jaccard_threshold provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        }

        uint64_t v43 = _CLLogObjectForCategory_MicroLocation_Default();
        if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint64_t buf = 68289539;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = "";
          __int16 v57 = 2082;
          *(void *)__int16 v58 = "assert";
          *(_WORD *)&v58[8] = 2081;
          *(void *)&v58[10] = "jaccard_threshold";
          _os_log_impl(&dword_25631F000, v43, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"No jaccard_threshold provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        }
        goto LABEL_60;
      }
      if (!v22)
      {
        long long v44 = _CLLogObjectForCategory_MicroLocation_Default();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)uint64_t buf = 68289539;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = "";
          __int16 v57 = 2082;
          *(void *)__int16 v58 = "assert";
          *(_WORD *)&v58[8] = 2081;
          *(void *)&v58[10] = "jaccard_scale_factor";
          _os_log_impl(&dword_25631F000, v44, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"No jaccard_scale_factor provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        }

        uint64_t v45 = _CLLogObjectForCategory_MicroLocation_Default();
        if (os_signpost_enabled(v45))
        {
          *(_DWORD *)uint64_t buf = 68289539;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = "";
          __int16 v57 = 2082;
          *(void *)__int16 v58 = "assert";
          *(_WORD *)&v58[8] = 2081;
          *(void *)&v58[10] = "jaccard_scale_factor";
          _os_signpost_emit_with_name_impl(&dword_25631F000, v45, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "No jaccard_scale_factor provided in dictionary", "{\"msg%{public}.0s\":\"No jaccard_scale_factor provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        }

        uint64_t v43 = _CLLogObjectForCategory_MicroLocation_Default();
        if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint64_t buf = 68289539;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = "";
          __int16 v57 = 2082;
          *(void *)__int16 v58 = "assert";
          *(_WORD *)&v58[8] = 2081;
          *(void *)&v58[10] = "jaccard_scale_factor";
          _os_log_impl(&dword_25631F000, v43, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"No jaccard_scale_factor provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        }
LABEL_60:

        abort_report_np();
        goto LABEL_62;
      }
      *(void *)&long long v48 = *(void *)a3;
      BYTE8(v48) = *(unsigned char *)(a3 + 8);
      id v24 = v21;
      *(void *)&long long v49 = v24;
      id v25 = v23;
      *((void *)&v49 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v25;
      std::__optional_copy_base<CLMicroLocationAnchorAppearanceMap,false>::__optional_copy_base[abi:ne180100]((uint64_t)v50, a5);
      a6[3] = 0;
      uint64_t v26 = (char *)operator new(0x68uLL);
      *(void *)uint64_t v26 = &unk_2704DB580;
      *(_OWORD *)(v26 + 8) = v48;
      *(_OWORD *)(v26 + 24) = v49;
      std::__optional_copy_base<CLMicroLocationAnchorAppearanceMap,false>::__optional_copy_base[abi:ne180100]((uint64_t)(v26 + 40), (uint64_t)v50);
      a6[3] = v26;
      if (v50[56]) {
        std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v50);
      }

LABEL_23:
      return;
    case 3:
      uint64_t v27 = [v47 objectForKeyedSubscript:@"tanimoto_base"];
      if (v27)
      {
        *a6 = &unk_2704DB6D0;
        a6[1] = v27;
        a6[3] = a6;
        goto LABEL_23;
      }
      CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction();

      abort_report_np();
      goto LABEL_62;
    case 4:
    case 5:
      id v11 = v47;
      int v12 = [v11 objectForKeyedSubscript:@"jaccard_scale_factor"];
      __int16 v46 = [v11 objectForKeyedSubscript:@"e2j_kernel_thr"];
      uint64_t v13 = [v11 objectForKeyedSubscript:@"per_source_params"];
      uint64_t v14 = (NSString *)v13;
      if (v12)
      {
        if (v46)
        {
          if (v13)
          {
            id v15 = v12;
            *(void *)uint64_t buf = v15;
            id v16 = v46;
            *(void *)&uint8_t buf[8] = v16;
            CLMicroLocationAlgorithms::details::createPerSourceWeights((CLMicroLocationAlgorithms::details *)@"value_scale_factor", v14, &buf[16]);
            CLMicroLocationAlgorithms::details::createPerSourceWeights((CLMicroLocationAlgorithms::details *)@"euclidean_weight", v14, &v60);
            CLMicroLocationAlgorithms::details::createPerSourceWeights((CLMicroLocationAlgorithms::details *)@"jaccard_pos_weight", v14, &v63);
            CLMicroLocationAlgorithms::details::createPerSourceWeights((CLMicroLocationAlgorithms::details *)@"jaccard_neg_weight", v14, &v66);
            char v17 = v14;
            char v18 = v17;
            if (!a4)
            {
              uint64_t v69 = &unk_2704DB600;
              __int16 v70 = 0;
              char v71 = 0;
              goto LABEL_20;
            }
            id v19 = [(NSString *)v17 objectForKeyedSubscript:@"onesided_jaccard"];
            uint64_t v20 = v19;
            if (v19)
            {
              CLMicroLocationUtils::PerSourceWeights<BOOL>::fromConfiguration(v19, (uint64_t)&v69);

LABEL_20:
              *(void *)&long long v72 = *(void *)a3;
              BYTE8(v72) = *(unsigned char *)(a3 + 8);
              std::__optional_copy_base<CLMicroLocationAnchorAppearanceMap,false>::__optional_copy_base[abi:ne180100]((uint64_t)v73, a5);
              a6[3] = 0;
              char v31 = (char *)operator new(0xF8uLL);
              *(void *)char v31 = &unk_2704DB650;
              long long v32 = *(_OWORD *)buf;
              *(void *)uint64_t buf = 0;
              *(void *)&uint8_t buf[8] = 0;
              *(_OWORD *)(v31 + 8) = v32;
              *((void *)v31 + 3) = &unk_2704DAFD8;
              *((_OWORD *)v31 + 2) = *(_OWORD *)&v58[4];
              *((void *)v31 + 6) = v59;
              *((void *)v31 + 7) = &unk_2704DAFD8;
              *((_OWORD *)v31 + 4) = v61;
              *((void *)v31 + 10) = v62;
              *((void *)v31 + 1CLMicroLocationLogic::startOdometryMonitoring(this - 1) = &unk_2704DAFD8;
              *((_OWORD *)v31 + 6) = v64;
              *((void *)v31 + 14) = v65;
              *((void *)v31 + 15) = &unk_2704DAFD8;
              uint64_t v33 = v68;
              *((_OWORD *)v31 + 8) = v67;
              *((void *)v31 + 18) = v33;
              *((void *)v31 + 19) = &unk_2704DB600;
              v31[162] = v71;
              *((_WORD *)v31 + 80) = v70;
              *(_OWORD *)(v31 + 168) = v72;
              std::__optional_copy_base<CLMicroLocationAnchorAppearanceMap,false>::__optional_copy_base[abi:ne180100]((uint64_t)(v31 + 184), (uint64_t)v73);
              a6[3] = v31;
              if (v73[56]) {
                std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v73);
              }

              goto LABEL_23;
            }
            CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction();

            abort_report_np();
LABEL_62:
            __break(1u);
            return;
          }
          BOOL v39 = _CLLogObjectForCategory_MicroLocation_Default();
          if (os_log_type_enabled(v39, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)uint64_t buf = 68289539;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)&uint8_t buf[8] = 2082;
            *(void *)&buf[10] = "";
            __int16 v57 = 2082;
            *(void *)__int16 v58 = "assert";
            *(_WORD *)&v58[8] = 2081;
            *(void *)&v58[10] = "perSourceParams";
            _os_log_impl(&dword_25631F000, v39, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"No per_source_params provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
          }

          unint64_t v40 = _CLLogObjectForCategory_MicroLocation_Default();
          if (os_signpost_enabled(v40))
          {
            *(_DWORD *)uint64_t buf = 68289539;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)&uint8_t buf[8] = 2082;
            *(void *)&buf[10] = "";
            __int16 v57 = 2082;
            *(void *)__int16 v58 = "assert";
            *(_WORD *)&v58[8] = 2081;
            *(void *)&v58[10] = "perSourceParams";
            _os_signpost_emit_with_name_impl(&dword_25631F000, v40, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "No per_source_params provided in dictionary", "{\"msg%{public}.0s\":\"No per_source_params provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
          }

          __int16 v36 = _CLLogObjectForCategory_MicroLocation_Default();
          if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)uint64_t buf = 68289539;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)&uint8_t buf[8] = 2082;
            *(void *)&buf[10] = "";
            __int16 v57 = 2082;
            *(void *)__int16 v58 = "assert";
            *(_WORD *)&v58[8] = 2081;
            *(void *)&v58[10] = "perSourceParams";
            _os_log_impl(&dword_25631F000, v36, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"No per_source_params provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
          }
        }
        else
        {
          unint64_t v37 = _CLLogObjectForCategory_MicroLocation_Default();
          if (os_log_type_enabled(v37, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)uint64_t buf = 68289539;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)&uint8_t buf[8] = 2082;
            *(void *)&buf[10] = "";
            __int16 v57 = 2082;
            *(void *)__int16 v58 = "assert";
            *(_WORD *)&v58[8] = 2081;
            *(void *)&v58[10] = "e2jKernelThr";
            _os_log_impl(&dword_25631F000, v37, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"No e2j_kernel_thr provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
          }

          uint64_t v38 = _CLLogObjectForCategory_MicroLocation_Default();
          if (os_signpost_enabled(v38))
          {
            *(_DWORD *)uint64_t buf = 68289539;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)&uint8_t buf[8] = 2082;
            *(void *)&buf[10] = "";
            __int16 v57 = 2082;
            *(void *)__int16 v58 = "assert";
            *(_WORD *)&v58[8] = 2081;
            *(void *)&v58[10] = "e2jKernelThr";
            _os_signpost_emit_with_name_impl(&dword_25631F000, v38, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "No e2j_kernel_thr provided in dictionary", "{\"msg%{public}.0s\":\"No e2j_kernel_thr provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
          }

          __int16 v36 = _CLLogObjectForCategory_MicroLocation_Default();
          if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)uint64_t buf = 68289539;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)&uint8_t buf[8] = 2082;
            *(void *)&buf[10] = "";
            __int16 v57 = 2082;
            *(void *)__int16 v58 = "assert";
            *(_WORD *)&v58[8] = 2081;
            *(void *)&v58[10] = "e2jKernelThr";
            _os_log_impl(&dword_25631F000, v36, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"No e2j_kernel_thr provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
          }
        }
      }
      else
      {
        __int16 v34 = _CLLogObjectForCategory_MicroLocation_Default();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)uint64_t buf = 68289539;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = "";
          __int16 v57 = 2082;
          *(void *)__int16 v58 = "assert";
          *(_WORD *)&v58[8] = 2081;
          *(void *)&v58[10] = "jaccard_scale_factor";
          _os_log_impl(&dword_25631F000, v34, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"No jaccard_scale_factor provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        }

        uint64_t v35 = _CLLogObjectForCategory_MicroLocation_Default();
        if (os_signpost_enabled(v35))
        {
          *(_DWORD *)uint64_t buf = 68289539;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = "";
          __int16 v57 = 2082;
          *(void *)__int16 v58 = "assert";
          *(_WORD *)&v58[8] = 2081;
          *(void *)&v58[10] = "jaccard_scale_factor";
          _os_signpost_emit_with_name_impl(&dword_25631F000, v35, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "No jaccard_scale_factor provided in dictionary", "{\"msg%{public}.0s\":\"No jaccard_scale_factor provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        }

        __int16 v36 = _CLLogObjectForCategory_MicroLocation_Default();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint64_t buf = 68289539;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = "";
          __int16 v57 = 2082;
          *(void *)__int16 v58 = "assert";
          *(_WORD *)&v58[8] = 2081;
          *(void *)&v58[10] = "jaccard_scale_factor";
          _os_log_impl(&dword_25631F000, v36, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"No jaccard_scale_factor provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        }
      }

      abort_report_np();
      goto LABEL_62;
    case 6:
      CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction();

      abort_report_np();
      goto LABEL_62;
    default:
      *(void *)&long long v53 = *(void *)a3;
      BYTE8(v53) = *(unsigned char *)(a3 + 8);
      uint64_t v28 = v54;
      std::__optional_copy_base<CLMicroLocationAnchorAppearanceMap,false>::__optional_copy_base[abi:ne180100]((uint64_t)v54, a5);
      a6[3] = 0;
      int v29 = (char *)operator new(0x58uLL);
      *(void *)int v29 = &unk_2704DB470;
      *(_OWORD *)(v29 + 8) = v53;
      std::__optional_copy_base<CLMicroLocationAnchorAppearanceMap,false>::__optional_copy_base[abi:ne180100]((uint64_t)(v29 + 24), (uint64_t)v54);
      a6[3] = v29;
      if (v54[56]) {
LABEL_18:
      }
        std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v28);
      goto LABEL_23;
  }
}

void sub_256373450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, ...)
{
  va_start(va, a8);

  operator delete(v10);
  CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_2::~$_2((uint64_t)va);

  _Unwind_Resume(a1);
}

void CLMicroLocationAlgorithms::createLocalizeFingerprintDistanceFunction(int a1@<W0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
}

uint64_t CLMicroLocationAlgorithms::getDataTypeValidForLocalization(CLMicroLocationAlgorithms *this)
{
  if (ULSettings::get<ULSettings::MeasurementProcessingWifiRssiEnable>()) {
    uint64_t v1 = 2;
  }
  else {
    uint64_t v1 = 0;
  }
  if (ULSettings::get<ULSettings::MeasurementProcessingBleLeechEnable>()) {
    v1 |= 0x20uLL;
  }
  uint64_t v2 = (ULHomeNearbyRangingSupport *)ULSettings::get<ULSettings::MeasurementProcessingUwbRangeEnable>();
  if (v2 && ULHomeNearbyRangingSupport::isUwbRangingSupportedOnDevice(v2)) {
    return v1 | 0x40;
  }
  return v1;
}

uint64_t ULSettings::get<ULSettings::MeasurementProcessingWifiRssiEnable>()
{
  os_log_t v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  uint64_t v2 = [NSString stringWithUTF8String:"ULMeasurementProcessingWifiRssiEnable"];
  uint64_t v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 BOOLValue];
  }
  else {
    uint64_t v4 = [MEMORY[0x263EFFA88] BOOLValue];
  }
  uint64_t v5 = v4;

  return v5;
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  os_log_t v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  uint64_t v2 = [NSString stringWithUTF8String:"ULMeasurementProcessingWifiRssiEnable"];
  uint64_t v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 BOOLValue];
  }
  else {
    uint64_t v4 = [MEMORY[0x263EFFA88] BOOLValue];
  }
  uint64_t v5 = v4;

  return v5;
}

void sub_25637370C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::MeasurementProcessingBleLeechEnable>()
{
  os_log_t v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  uint64_t v2 = [NSString stringWithUTF8String:"ULMeasurementProcessingBleLeechEnable"];
  uint64_t v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 BOOLValue];
  }
  else {
    uint64_t v4 = [MEMORY[0x263EFFA88] BOOLValue];
  }
  uint64_t v5 = v4;

  return v5;
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  os_log_t v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  uint64_t v2 = [NSString stringWithUTF8String:"ULMeasurementProcessingBleLeechEnable"];
  uint64_t v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 BOOLValue];
  }
  else {
    uint64_t v4 = [MEMORY[0x263EFFA88] BOOLValue];
  }
  uint64_t v5 = v4;

  return v5;
}

void sub_25637380C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::MeasurementProcessingUwbRangeEnable>()
{
  os_log_t v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  uint64_t v2 = [NSString stringWithUTF8String:"ULMeasurementProcessingUwbRangeEnable"];
  uint64_t v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 BOOLValue];
  }
  else {
    uint64_t v4 = [MEMORY[0x263EFFA88] BOOLValue];
  }
  uint64_t v5 = v4;

  return v5;
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  os_log_t v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  uint64_t v2 = [NSString stringWithUTF8String:"ULMeasurementProcessingUwbRangeEnable"];
  uint64_t v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 BOOLValue];
  }
  else {
    uint64_t v4 = [MEMORY[0x263EFFA88] BOOLValue];
  }
  uint64_t v5 = v4;

  return v5;
}

void sub_25637390C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationAlgorithms::createLinkageFunction(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 >= 3)
  {
    LinkageFunction = (uint64_t *)CLMicroLocationAlgorithms::createLinkageFunction();
    CLMicroLocationAlgorithms::removeImprobableLocations(LinkageFunction, v4);
  }
  else
  {
    uint64_t v2 = off_2704DB9B0[a1];
    *a2 = &unk_2704DB910;
    a2[1] = v2;
    a2[3] = a2;
  }
}

void CLMicroLocationAlgorithms::removeImprobableLocations(uint64_t *a1, unsigned int a2)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (a2 < 2) {
    goto LABEL_4;
  }
  if (a2 == 2) {
    return;
  }
  if (a2 == 3)
  {
LABEL_4:
    unsigned int v4 = +[ULDefaultsSingleton shared];
    uint64_t v5 = [v4 defaultsDictionary];

    int v6 = [NSString stringWithUTF8String:"ULMinimumMicroLocationProbabilityForLocalization"];
    long long v7 = [v5 objectForKey:v6];
    if (v7 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
      [v7 doubleValue];
    }
    else {
      [&unk_2704F0DD0 doubleValue];
    }
    double v9 = v8;

    uint8x8_t v10 = (long long *)*a1;
    id v11 = (long long *)a1[1];
    double v12 = 0.0;
    if ((long long *)*a1 != v11)
    {
      do
      {
        double v13 = *((double *)v10 + 2);
        if (v13 < 0.0)
        {
          if (onceToken_MicroLocation_Default != -1) {
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_22);
          }
          uint64_t v14 = logObject_MicroLocation_Default;
          if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v15 = *((void *)v10 + 2);
            *(_DWORD *)uint64_t buf = 134349056;
            *(void *)int v29 = v15;
            _os_log_impl(&dword_25631F000, v14, OS_LOG_TYPE_DEFAULT, "#Warning microlocation probability should be non-negative %{public}f", buf, 0xCu);
          }
          double v13 = *((double *)v10 + 2);
        }
        double v12 = v12 + v13;
        v10 += 2;
      }
      while (v10 != v11);
    }
    if (fabs(v12 + -1.0) > nextafter(1.0, INFINITY) + -1.0)
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_22);
      }
      id v16 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 134349056;
        *(double *)int v29 = v12;
        _os_log_impl(&dword_25631F000, v16, OS_LOG_TYPE_DEFAULT, "#Warning microlocation probability vector should sum to 1.0 %{public}f", buf, 0xCu);
      }
    }
    char v18 = (long long *)*a1;
    char v17 = (long long *)a1[1];
    if ((long long *)*a1 == v17)
    {
      double v21 = 0.0;
      id v19 = (long long *)*a1;
    }
    else
    {
      id v19 = (long long *)*a1;
      while (1)
      {
        double v20 = *((double *)v19 + 2);
        if (v20 < v9) {
          break;
        }
        v19 += 2;
        if (v19 == v17)
        {
          double v21 = 0.0;
          goto LABEL_45;
        }
      }
      double v21 = v20 + 0.0;
    }
    if (v19 != v17)
    {
      id v24 = v19 + 2;
      if (v19 + 2 != v17)
      {
        do
        {
          double v25 = *((double *)v24 + 2);
          if (v25 >= v9)
          {
            long long v26 = *v24;
            *(long long *)((char *)v19 + 12) = *(long long *)((char *)v24 + 12);
            *id v19 = v26;
            v19 += 2;
          }
          else
          {
            double v21 = v25 + v21;
          }
          v24 += 2;
        }
        while (v24 != v17);
        char v18 = (long long *)*a1;
        char v17 = (long long *)a1[1];
      }
    }
    if (v19 != v17)
    {
      char v17 = v19;
      a1[1] = (uint64_t)v19;
    }
LABEL_45:
    if (v18 != v17)
    {
      double v27 = v21 / (double)(unint64_t)(((char *)v17 - (char *)v18) >> 5);
      do
      {
        *((double *)v18 + 2) = v27 + *((double *)v18 + 2);
        v18 += 2;
      }
      while (v18 != v17);
    }
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_22);
    }
    uint64_t v22 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)int v29 = 0;
      *(_WORD *)&v29[4] = 2082;
      *(void *)&v29[6] = "";
      __int16 v30 = 2050;
      uint64_t v31 = a2;
      _os_log_impl(&dword_25631F000, v22, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"invalid\", \"localizer type\":%{public}lu}", buf, 0x1Cu);
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_22);
    }
    unint64_t v23 = logObject_MicroLocation_Default;
    if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)int v29 = 0;
      *(_WORD *)&v29[4] = 2082;
      *(void *)&v29[6] = "";
      __int16 v30 = 2050;
      uint64_t v31 = a2;
      _os_signpost_emit_with_name_impl(&dword_25631F000, v23, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "invalid", "{\"msg%{public}.0s\":\"invalid\", \"localizer type\":%{public}lu}", buf, 0x1Cu);
    }
  }
}

void sub_256373E54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_15()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

void ULSettings::convert<NSArray<NSNumber *> * {__strong},std::vector<double>>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  id v3 = a1;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  std::vector<double>::reserve((void **)a2, [v3 count]);
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v4 = v3;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v22;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v22 != v6) {
          objc_enumerationMutation(v4);
        }
        objc_msgSend(*(id *)(*((void *)&v21 + 1) + 8 * i), "doubleValue", (void)v21);
        uint64_t v9 = v8;
        id v11 = *(void **)(a2 + 8);
        unint64_t v10 = *(void *)(a2 + 16);
        if ((unint64_t)v11 >= v10)
        {
          double v13 = *(void **)a2;
          uint64_t v14 = ((uint64_t)v11 - *(void *)a2) >> 3;
          unint64_t v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 61) {
            std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v16 = v10 - (void)v13;
          if (v16 >> 2 > v15) {
            unint64_t v15 = v16 >> 2;
          }
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v15;
          }
          if (v17)
          {
            char v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>(a2 + 16, v17);
            double v13 = *(void **)a2;
            id v11 = *(void **)(a2 + 8);
          }
          else
          {
            char v18 = 0;
          }
          id v19 = &v18[8 * v14];
          *(void *)id v19 = v9;
          double v12 = v19 + 8;
          while (v11 != v13)
          {
            uint64_t v20 = *--v11;
            *((void *)v19 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v20;
            v19 -= 8;
          }
          *(void *)a2 = v19;
          *(void *)(a2 + 8) = v12;
          *(void *)(a2 + 16) = &v18[8 * v17];
          if (v13) {
            operator delete(v13);
          }
        }
        else
        {
          *id v11 = v8;
          double v12 = v11 + 1;
        }
        *(void *)(a2 + 8) = v12;
      }
      uint64_t v5 = [v4 countByEnumeratingWithState:&v21 objects:v25 count:16];
    }
    while (v5);
  }
}

{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  unsigned char v25[128];
  uint64_t v26;

  uint64_t v26 = *MEMORY[0x263EF8340];
  id v3 = a1;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  std::vector<double>::reserve((void **)a2, [v3 count]);
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v4 = v3;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v22;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v22 != v6) {
          objc_enumerationMutation(v4);
        }
        objc_msgSend(*(id *)(*((void *)&v21 + 1) + 8 * i), "doubleValue", (void)v21);
        uint64_t v9 = v8;
        id v11 = *(void **)(a2 + 8);
        unint64_t v10 = *(void *)(a2 + 16);
        if ((unint64_t)v11 >= v10)
        {
          double v13 = *(void **)a2;
          uint64_t v14 = ((uint64_t)v11 - *(void *)a2) >> 3;
          unint64_t v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 61) {
            std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v16 = v10 - (void)v13;
          if (v16 >> 2 > v15) {
            unint64_t v15 = v16 >> 2;
          }
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v15;
          }
          if (v17)
          {
            char v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>(a2 + 16, v17);
            double v13 = *(void **)a2;
            id v11 = *(void **)(a2 + 8);
          }
          else
          {
            char v18 = 0;
          }
          id v19 = &v18[8 * v14];
          *(void *)id v19 = v9;
          double v12 = v19 + 8;
          while (v11 != v13)
          {
            uint64_t v20 = *--v11;
            *((void *)v19 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v20;
            v19 -= 8;
          }
          *(void *)a2 = v19;
          *(void *)(a2 + 8) = v12;
          *(void *)(a2 + 16) = &v18[8 * v17];
          if (v13) {
            operator delete(v13);
          }
        }
        else
        {
          *id v11 = v8;
          double v12 = v11 + 1;
        }
        *(void *)(a2 + 8) = v12;
      }
      uint64_t v5 = [v4 countByEnumeratingWithState:&v21 objects:v25 count:16];
    }
    while (v5);
  }
}

{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  unsigned char v25[128];
  uint64_t v26;

  uint64_t v26 = *MEMORY[0x263EF8340];
  id v3 = a1;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  std::vector<double>::reserve((void **)a2, [v3 count]);
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v4 = v3;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v22;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v22 != v6) {
          objc_enumerationMutation(v4);
        }
        objc_msgSend(*(id *)(*((void *)&v21 + 1) + 8 * i), "doubleValue", (void)v21);
        uint64_t v9 = v8;
        id v11 = *(void **)(a2 + 8);
        unint64_t v10 = *(void *)(a2 + 16);
        if ((unint64_t)v11 >= v10)
        {
          double v13 = *(void **)a2;
          uint64_t v14 = ((uint64_t)v11 - *(void *)a2) >> 3;
          unint64_t v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 61) {
            std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v16 = v10 - (void)v13;
          if (v16 >> 2 > v15) {
            unint64_t v15 = v16 >> 2;
          }
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v15;
          }
          if (v17)
          {
            char v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>(a2 + 16, v17);
            double v13 = *(void **)a2;
            id v11 = *(void **)(a2 + 8);
          }
          else
          {
            char v18 = 0;
          }
          id v19 = &v18[8 * v14];
          *(void *)id v19 = v9;
          double v12 = v19 + 8;
          while (v11 != v13)
          {
            uint64_t v20 = *--v11;
            *((void *)v19 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v20;
            v19 -= 8;
          }
          *(void *)a2 = v19;
          *(void *)(a2 + 8) = v12;
          *(void *)(a2 + 16) = &v18[8 * v17];
          if (v13) {
            operator delete(v13);
          }
        }
        else
        {
          *id v11 = v8;
          double v12 = v11 + 1;
        }
        *(void *)(a2 + 8) = v12;
      }
      uint64_t v5 = [v4 countByEnumeratingWithState:&v21 objects:v25 count:16];
    }
    while (v5);
  }
}

{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  unsigned char v25[128];
  uint64_t v26;

  uint64_t v26 = *MEMORY[0x263EF8340];
  id v3 = a1;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  std::vector<double>::reserve((void **)a2, [v3 count]);
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v4 = v3;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v22;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v22 != v6) {
          objc_enumerationMutation(v4);
        }
        objc_msgSend(*(id *)(*((void *)&v21 + 1) + 8 * i), "doubleValue", (void)v21);
        uint64_t v9 = v8;
        id v11 = *(void **)(a2 + 8);
        unint64_t v10 = *(void *)(a2 + 16);
        if ((unint64_t)v11 >= v10)
        {
          double v13 = *(void **)a2;
          uint64_t v14 = ((uint64_t)v11 - *(void *)a2) >> 3;
          unint64_t v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 61) {
            std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v16 = v10 - (void)v13;
          if (v16 >> 2 > v15) {
            unint64_t v15 = v16 >> 2;
          }
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v15;
          }
          if (v17)
          {
            char v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>(a2 + 16, v17);
            double v13 = *(void **)a2;
            id v11 = *(void **)(a2 + 8);
          }
          else
          {
            char v18 = 0;
          }
          id v19 = &v18[8 * v14];
          *(void *)id v19 = v9;
          double v12 = v19 + 8;
          while (v11 != v13)
          {
            uint64_t v20 = *--v11;
            *((void *)v19 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v20;
            v19 -= 8;
          }
          *(void *)a2 = v19;
          *(void *)(a2 + 8) = v12;
          *(void *)(a2 + 16) = &v18[8 * v17];
          if (v13) {
            operator delete(v13);
          }
        }
        else
        {
          *id v11 = v8;
          double v12 = v11 + 1;
        }
        *(void *)(a2 + 8) = v12;
      }
      uint64_t v5 = [v4 countByEnumeratingWithState:&v21 objects:v25 count:16];
    }
    while (v5);
  }
}

void sub_2563740BC(_Unwind_Exception *a1)
{
  uint64_t v5 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v5;
    operator delete(v5);
  }

  _Unwind_Resume(a1);
}

void ULSettings::convert<std::initializer_list<double>,std::vector<double>>(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  std::vector<double>::reserve((void **)a3, a2);
  if (a2)
  {
    uint64_t v6 = (void *)(a3 + 16);
    long long v7 = *(void **)(a3 + 8);
    uint64_t v8 = &a1[a2];
    do
    {
      uint64_t v9 = *a1;
      if ((unint64_t)v7 >= *v6)
      {
        id v11 = *(void **)a3;
        uint64_t v12 = ((uint64_t)v7 - *(void *)a3) >> 3;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 61) {
          std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v14 = *v6 - (void)v11;
        if (v14 >> 2 > v13) {
          unint64_t v13 = v14 >> 2;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v13;
        }
        if (v15)
        {
          uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>(a3 + 16, v15);
          id v11 = *(void **)a3;
          long long v7 = *(void **)(a3 + 8);
        }
        else
        {
          uint64_t v16 = 0;
        }
        unint64_t v17 = &v16[8 * v12];
        *(void *)unint64_t v17 = v9;
        unint64_t v10 = v17 + 8;
        while (v7 != v11)
        {
          uint64_t v18 = *--v7;
          *((void *)v17 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v18;
          v17 -= 8;
        }
        *(void *)a3 = v17;
        *(void *)(a3 + 8) = v10;
        *(void *)(a3 + 16) = &v16[8 * v15];
        if (v11) {
          operator delete(v11);
        }
      }
      else
      {
        void *v7 = v9;
        unint64_t v10 = v7 + 1;
      }
      *(void *)(a3 + 8) = v10;
      ++a1;
      long long v7 = v10;
    }
    while (a1 != v8);
  }
}

{
  void *v6;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  std::vector<double>::reserve((void **)a3, a2);
  if (a2)
  {
    uint64_t v6 = (void *)(a3 + 16);
    long long v7 = *(void **)(a3 + 8);
    uint64_t v8 = &a1[a2];
    do
    {
      uint64_t v9 = *a1;
      if ((unint64_t)v7 >= *v6)
      {
        id v11 = *(void **)a3;
        uint64_t v12 = ((uint64_t)v7 - *(void *)a3) >> 3;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 61) {
          std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v14 = *v6 - (void)v11;
        if (v14 >> 2 > v13) {
          unint64_t v13 = v14 >> 2;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v13;
        }
        if (v15)
        {
          uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>(a3 + 16, v15);
          id v11 = *(void **)a3;
          long long v7 = *(void **)(a3 + 8);
        }
        else
        {
          uint64_t v16 = 0;
        }
        unint64_t v17 = &v16[8 * v12];
        *(void *)unint64_t v17 = v9;
        unint64_t v10 = v17 + 8;
        while (v7 != v11)
        {
          uint64_t v18 = *--v7;
          *((void *)v17 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v18;
          v17 -= 8;
        }
        *(void *)a3 = v17;
        *(void *)(a3 + 8) = v10;
        *(void *)(a3 + 16) = &v16[8 * v15];
        if (v11) {
          operator delete(v11);
        }
      }
      else
      {
        void *v7 = v9;
        unint64_t v10 = v7 + 1;
      }
      *(void *)(a3 + 8) = v10;
      ++a1;
      long long v7 = v10;
    }
    while (a1 != v8);
  }
}

{
  void *v6;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  std::vector<double>::reserve((void **)a3, a2);
  if (a2)
  {
    uint64_t v6 = (void *)(a3 + 16);
    long long v7 = *(void **)(a3 + 8);
    uint64_t v8 = &a1[a2];
    do
    {
      uint64_t v9 = *a1;
      if ((unint64_t)v7 >= *v6)
      {
        id v11 = *(void **)a3;
        uint64_t v12 = ((uint64_t)v7 - *(void *)a3) >> 3;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 61) {
          std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v14 = *v6 - (void)v11;
        if (v14 >> 2 > v13) {
          unint64_t v13 = v14 >> 2;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v13;
        }
        if (v15)
        {
          uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>(a3 + 16, v15);
          id v11 = *(void **)a3;
          long long v7 = *(void **)(a3 + 8);
        }
        else
        {
          uint64_t v16 = 0;
        }
        unint64_t v17 = &v16[8 * v12];
        *(void *)unint64_t v17 = v9;
        unint64_t v10 = v17 + 8;
        while (v7 != v11)
        {
          uint64_t v18 = *--v7;
          *((void *)v17 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v18;
          v17 -= 8;
        }
        *(void *)a3 = v17;
        *(void *)(a3 + 8) = v10;
        *(void *)(a3 + 16) = &v16[8 * v15];
        if (v11) {
          operator delete(v11);
        }
      }
      else
      {
        void *v7 = v9;
        unint64_t v10 = v7 + 1;
      }
      *(void *)(a3 + 8) = v10;
      ++a1;
      long long v7 = v10;
    }
    while (a1 != v8);
  }
}

{
  void *v6;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  std::vector<double>::reserve((void **)a3, a2);
  if (a2)
  {
    uint64_t v6 = (void *)(a3 + 16);
    long long v7 = *(void **)(a3 + 8);
    uint64_t v8 = &a1[a2];
    do
    {
      uint64_t v9 = *a1;
      if ((unint64_t)v7 >= *v6)
      {
        id v11 = *(void **)a3;
        uint64_t v12 = ((uint64_t)v7 - *(void *)a3) >> 3;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 61) {
          std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v14 = *v6 - (void)v11;
        if (v14 >> 2 > v13) {
          unint64_t v13 = v14 >> 2;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v13;
        }
        if (v15)
        {
          uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>(a3 + 16, v15);
          id v11 = *(void **)a3;
          long long v7 = *(void **)(a3 + 8);
        }
        else
        {
          uint64_t v16 = 0;
        }
        unint64_t v17 = &v16[8 * v12];
        *(void *)unint64_t v17 = v9;
        unint64_t v10 = v17 + 8;
        while (v7 != v11)
        {
          uint64_t v18 = *--v7;
          *((void *)v17 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v18;
          v17 -= 8;
        }
        *(void *)a3 = v17;
        *(void *)(a3 + 8) = v10;
        *(void *)(a3 + 16) = &v16[8 * v15];
        if (v11) {
          operator delete(v11);
        }
      }
      else
      {
        void *v7 = v9;
        unint64_t v10 = v7 + 1;
      }
      *(void *)(a3 + 8) = v10;
      ++a1;
      long long v7 = v10;
    }
    while (a1 != v8);
  }
}

void sub_25637422C(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<double>::reserve(void **a1, unint64_t a2)
{
  id v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>(v3, a2);
    long long v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v9 = &v6[8 * v8];
    unint64_t v10 = (char *)*a1;
    id v11 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v11 != *a1)
    {
      uint64_t v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_2::~$_2(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 88)) {
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(a1 + 32);
  }

  return a1;
}

uint64_t std::__optional_copy_base<CLMicroLocationAnchorAppearanceMap,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 56) = 0;
  if (*(unsigned char *)(a2 + 56))
  {
    std::unordered_map<boost::uuids::uuid,CLMicroLocationAnchorAppearance>::unordered_map(a1, a2);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(unsigned char *)(a1 + 56) = 1;
  }
  return a1;
}

void sub_25637438C(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 56)) {
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_0,std::allocator<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_0>,double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_2704DB470;
  if (*(unsigned char *)(a1 + 80)) {
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(a1 + 24);
  }
  return a1;
}

void std::__function::__func<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_0,std::allocator<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_0>,double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_2704DB470;
  if (*(unsigned char *)(a1 + 80)) {
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(a1 + 24);
  }
  JUMPOUT(0x25A2A6340);
}

char *std::__function::__func<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_0,std::allocator<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_0>,double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x58uLL);
  *(void *)uint64_t v2 = &unk_2704DB470;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  std::__optional_copy_base<CLMicroLocationAnchorAppearanceMap,false>::__optional_copy_base[abi:ne180100]((uint64_t)(v2 + 24), a1 + 24);
  return v2;
}

void sub_2563744C8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_0,std::allocator<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_0>,double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_2704DB470;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return std::__optional_copy_base<CLMicroLocationAnchorAppearanceMap,false>::__optional_copy_base[abi:ne180100](a2 + 24, a1 + 24);
}

uint64_t std::__function::__func<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_0,std::allocator<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_0>,double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::destroy(uint64_t result)
{
  if (*(unsigned char *)(result + 80)) {
    return std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(result + 24);
  }
  return result;
}

void std::__function::__func<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_0,std::allocator<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_0>,double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::destroy_deallocate(unsigned char *__p)
{
  if (__p[80]) {
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)(__p + 24));
  }
  operator delete(__p);
}

double std::__function::__func<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_0,std::allocator<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_0>,double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLMicroLocationFingerprintDistanceFunction::euclideanLike(a2, a3, (uint64_t *)(a1 + 8), a1 + 24);
}

uint64_t std::__function::__func<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_0,std::allocator<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_0>,double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_0,std::allocator<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_0>,double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::target_type()
{
}

uint64_t std::__function::__func<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_1,std::allocator<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_1>,double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_2704DB500;
  if (*(unsigned char *)(a1 + 80)) {
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(a1 + 24);
  }
  return a1;
}

void std::__function::__func<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_1,std::allocator<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_1>,double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_2704DB500;
  if (*(unsigned char *)(a1 + 80)) {
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(a1 + 24);
  }
  JUMPOUT(0x25A2A6340);
}

char *std::__function::__func<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_1,std::allocator<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_1>,double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x58uLL);
  *(void *)uint64_t v2 = &unk_2704DB500;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  std::__optional_copy_base<CLMicroLocationAnchorAppearanceMap,false>::__optional_copy_base[abi:ne180100]((uint64_t)(v2 + 24), a1 + 24);
  return v2;
}

void sub_2563746EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_1,std::allocator<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_1>,double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_2704DB500;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return std::__optional_copy_base<CLMicroLocationAnchorAppearanceMap,false>::__optional_copy_base[abi:ne180100](a2 + 24, a1 + 24);
}

uint64_t std::__function::__func<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_1,std::allocator<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_1>,double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::destroy(uint64_t result)
{
  if (*(unsigned char *)(result + 80)) {
    return std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(result + 24);
  }
  return result;
}

void std::__function::__func<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_1,std::allocator<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_1>,double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::destroy_deallocate(unsigned char *__p)
{
  if (__p[80]) {
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)(__p + 24));
  }
  operator delete(__p);
}

double std::__function::__func<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_1,std::allocator<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_1>,double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLMicroLocationFingerprintDistanceFunction::jaccardLike(a2, a3, a1 + 8, a1 + 24);
}

uint64_t std::__function::__func<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_1,std::allocator<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_1>,double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_1,std::allocator<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_1>,double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::target_type()
{
}

uint64_t std::__function::__func<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_2,std::allocator<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_2>,double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_2704DB580;
  if (*(unsigned char *)(a1 + 96)) {
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(a1 + 40);
  }

  return a1;
}

void std::__function::__func<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_2,std::allocator<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_2>,double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_2704DB580;
  if (*(unsigned char *)(a1 + 96)) {
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(a1 + 40);
  }

  JUMPOUT(0x25A2A6340);
}

void *std::__function::__func<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_2,std::allocator<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_2>,double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x68uLL);
  *uint64_t v2 = &unk_2704DB580;
  std::__compressed_pair_elem<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_2,0,false>::__compressed_pair_elem[abi:ne180100]<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_2 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_256374924(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_2,std::allocator<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_2>,double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_2704DB580;
  return std::__compressed_pair_elem<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_2,0,false>::__compressed_pair_elem[abi:ne180100]<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_2 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_2,std::allocator<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_2>,double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::destroy(uint64_t a1)
{
}

void std::__function::__func<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_2,std::allocator<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_2>,double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_2,std::allocator<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_2>,double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_2,std::allocator<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_2>,double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t *)(a1 + 8);
  [*(id *)(a1 + 24) doubleValue];
  [*(id *)(a1 + 32) doubleValue];
  return CLMicroLocationFingerprintDistanceFunction::combinedEuclideanJaccard(a2, a3, v6, a1 + 40);
}

uint64_t std::__function::__func<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_2,std::allocator<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_2>,double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_2,std::allocator<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_2>,double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_2,0,false>::__compressed_pair_elem[abi:ne180100]<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_2 const&,0ul>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(id *)(a2 + 16);
  *(void *)(a1 + 24) = *(id *)(a2 + 24);
  std::__optional_copy_base<CLMicroLocationAnchorAppearanceMap,false>::__optional_copy_base[abi:ne180100](a1 + 32, a2 + 32);
  return a1;
}

void sub_256374AC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__alloc_func<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_2,std::allocator<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_2>,double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 88)) {
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(a1 + 32);
  }

  uint64_t v2 = *(void **)(a1 + 16);
}

void CLMicroLocationAlgorithms::details::createPerSourceWeights(CLMicroLocationAlgorithms::details *this@<X0>, NSString *a2@<X1>, void *a3@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v13 = this;
  uint64_t v6 = a2;
  long long v7 = [(NSString *)v6 objectForKeyedSubscript:v13];
  uint64_t v8 = v7;
  if (!v7)
  {
    uint64_t v9 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289795;
      int v15 = 0;
      __int16 v16 = 2082;
      unint64_t v17 = "";
      __int16 v18 = 2082;
      uint64_t v19 = [(CLMicroLocationAlgorithms::details *)v13 UTF8String];
      __int16 v20 = 2082;
      long long v21 = "assert";
      __int16 v22 = 2081;
      long long v23 = "weightsDict";
      _os_log_impl(&dword_25631F000, v9, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't find key: \", \"key\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
    }

    unint64_t v10 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_signpost_enabled(v10))
    {
      uint64_t v11 = [(CLMicroLocationAlgorithms::details *)v13 UTF8String];
      *(_DWORD *)uint64_t buf = 68289795;
      int v15 = 0;
      __int16 v16 = 2082;
      unint64_t v17 = "";
      __int16 v18 = 2082;
      uint64_t v19 = v11;
      __int16 v20 = 2082;
      long long v21 = "assert";
      __int16 v22 = 2081;
      long long v23 = "weightsDict";
      _os_signpost_emit_with_name_impl(&dword_25631F000, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't find key: ", "{\"msg%{public}.0s\":\"Couldn't find key: \", \"key\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
    }

    uint64_t v12 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO)) {
      CLMicroLocationAlgorithms::details::createPerSourceWeights([(CLMicroLocationAlgorithms::details *)v13 UTF8String], buf, v12);
    }

    abort_report_np();
    __break(1u);
  }
  CLMicroLocationUtils::PerSourceWeights<double>::fromConfiguration(v7, a3);
}

void sub_256374D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationAlgorithms::details::createWeightedEuclideanJaccardDistanceFunction(NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage const&,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_0::~$_0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 232)) {
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(a1 + 176);
  }

  return a1;
}

void CLMicroLocationUtils::PerSourceWeights<double>::fromConfiguration(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  id v18 = a1;
  uint64_t v3 = [v18 objectForKeyedSubscript:@"wifi"];
  id v4 = [v18 objectForKeyedSubscript:@"ble"];
  int64_t v5 = [v18 objectForKeyedSubscript:@"uwb"];
  if (!v3 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    uint64_t v11 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v20 = 0;
      __int16 v21 = 2082;
      __int16 v22 = "";
      __int16 v23 = 2082;
      uint64_t v24 = "assert";
      __int16 v25 = 2081;
      uint64_t v26 = "wifiValue && [wifiValue isKindOfClass:[NSNumber class]]";
      _os_log_impl(&dword_25631F000, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"No wifi provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }

    uint64_t v12 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_signpost_enabled(v12))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v20 = 0;
      __int16 v21 = 2082;
      __int16 v22 = "";
      __int16 v23 = 2082;
      uint64_t v24 = "assert";
      __int16 v25 = 2081;
      uint64_t v26 = "wifiValue && [wifiValue isKindOfClass:[NSNumber class]]";
      _os_signpost_emit_with_name_impl(&dword_25631F000, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "No wifi provided in dictionary", "{\"msg%{public}.0s\":\"No wifi provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }

    uint64_t v13 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v20 = 0;
      __int16 v21 = 2082;
      __int16 v22 = "";
      __int16 v23 = 2082;
      uint64_t v24 = "assert";
      __int16 v25 = 2081;
      uint64_t v26 = "wifiValue && [wifiValue isKindOfClass:[NSNumber class]]";
      _os_log_impl(&dword_25631F000, v13, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"No wifi provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
LABEL_30:

    abort_report_np();
    __break(1u);
  }
  if (!v4 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    uint64_t v14 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v20 = 0;
      __int16 v21 = 2082;
      __int16 v22 = "";
      __int16 v23 = 2082;
      uint64_t v24 = "assert";
      __int16 v25 = 2081;
      uint64_t v26 = "bleValue && [bleValue isKindOfClass:[NSNumber class]]";
      _os_log_impl(&dword_25631F000, v14, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"No ble provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }

    int v15 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_signpost_enabled(v15))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v20 = 0;
      __int16 v21 = 2082;
      __int16 v22 = "";
      __int16 v23 = 2082;
      uint64_t v24 = "assert";
      __int16 v25 = 2081;
      uint64_t v26 = "bleValue && [bleValue isKindOfClass:[NSNumber class]]";
      _os_signpost_emit_with_name_impl(&dword_25631F000, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "No ble provided in dictionary", "{\"msg%{public}.0s\":\"No ble provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }

    uint64_t v13 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v20 = 0;
      __int16 v21 = 2082;
      __int16 v22 = "";
      __int16 v23 = 2082;
      uint64_t v24 = "assert";
      __int16 v25 = 2081;
      uint64_t v26 = "bleValue && [bleValue isKindOfClass:[NSNumber class]]";
      _os_log_impl(&dword_25631F000, v13, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"No ble provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    goto LABEL_30;
  }
  if (!v5 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    __int16 v16 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v20 = 0;
      __int16 v21 = 2082;
      __int16 v22 = "";
      __int16 v23 = 2082;
      uint64_t v24 = "assert";
      __int16 v25 = 2081;
      uint64_t v26 = "uwbValue && [uwbValue isKindOfClass:[NSNumber class]]";
      _os_log_impl(&dword_25631F000, v16, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"No uwb provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }

    unint64_t v17 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_signpost_enabled(v17))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v20 = 0;
      __int16 v21 = 2082;
      __int16 v22 = "";
      __int16 v23 = 2082;
      uint64_t v24 = "assert";
      __int16 v25 = 2081;
      uint64_t v26 = "uwbValue && [uwbValue isKindOfClass:[NSNumber class]]";
      _os_signpost_emit_with_name_impl(&dword_25631F000, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "No uwb provided in dictionary", "{\"msg%{public}.0s\":\"No uwb provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }

    uint64_t v13 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v20 = 0;
      __int16 v21 = 2082;
      __int16 v22 = "";
      __int16 v23 = 2082;
      uint64_t v24 = "assert";
      __int16 v25 = 2081;
      uint64_t v26 = "uwbValue && [uwbValue isKindOfClass:[NSNumber class]]";
      _os_log_impl(&dword_25631F000, v13, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"No uwb provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    goto LABEL_30;
  }
  [v3 doubleValue];
  uint64_t v7 = v6;
  [v4 doubleValue];
  uint64_t v9 = v8;
  [v5 doubleValue];
  *a2 = &unk_2704DAFD8;
  a2[1] = v7;
  a2[2] = v9;
  a2[3] = v10;
}

void sub_2563754BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationUtils::PerSourceWeights<BOOL>::fromConfiguration(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  id v18 = a1;
  uint64_t v3 = [v18 objectForKeyedSubscript:@"wifi"];
  id v4 = [v18 objectForKeyedSubscript:@"ble"];
  int64_t v5 = [v18 objectForKeyedSubscript:@"uwb"];
  if (!v3 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    uint64_t v11 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v20 = 0;
      __int16 v21 = 2082;
      __int16 v22 = "";
      __int16 v23 = 2082;
      uint64_t v24 = "assert";
      __int16 v25 = 2081;
      uint64_t v26 = "wifiValue && [wifiValue isKindOfClass:[NSNumber class]]";
      _os_log_impl(&dword_25631F000, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"No wifi provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }

    uint64_t v12 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_signpost_enabled(v12))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v20 = 0;
      __int16 v21 = 2082;
      __int16 v22 = "";
      __int16 v23 = 2082;
      uint64_t v24 = "assert";
      __int16 v25 = 2081;
      uint64_t v26 = "wifiValue && [wifiValue isKindOfClass:[NSNumber class]]";
      _os_signpost_emit_with_name_impl(&dword_25631F000, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "No wifi provided in dictionary", "{\"msg%{public}.0s\":\"No wifi provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }

    uint64_t v13 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v20 = 0;
      __int16 v21 = 2082;
      __int16 v22 = "";
      __int16 v23 = 2082;
      uint64_t v24 = "assert";
      __int16 v25 = 2081;
      uint64_t v26 = "wifiValue && [wifiValue isKindOfClass:[NSNumber class]]";
      _os_log_impl(&dword_25631F000, v13, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"No wifi provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
LABEL_30:

    abort_report_np();
    __break(1u);
  }
  if (!v4 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    uint64_t v14 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v20 = 0;
      __int16 v21 = 2082;
      __int16 v22 = "";
      __int16 v23 = 2082;
      uint64_t v24 = "assert";
      __int16 v25 = 2081;
      uint64_t v26 = "bleValue && [bleValue isKindOfClass:[NSNumber class]]";
      _os_log_impl(&dword_25631F000, v14, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"No ble provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }

    int v15 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_signpost_enabled(v15))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v20 = 0;
      __int16 v21 = 2082;
      __int16 v22 = "";
      __int16 v23 = 2082;
      uint64_t v24 = "assert";
      __int16 v25 = 2081;
      uint64_t v26 = "bleValue && [bleValue isKindOfClass:[NSNumber class]]";
      _os_signpost_emit_with_name_impl(&dword_25631F000, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "No ble provided in dictionary", "{\"msg%{public}.0s\":\"No ble provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }

    uint64_t v13 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v20 = 0;
      __int16 v21 = 2082;
      __int16 v22 = "";
      __int16 v23 = 2082;
      uint64_t v24 = "assert";
      __int16 v25 = 2081;
      uint64_t v26 = "bleValue && [bleValue isKindOfClass:[NSNumber class]]";
      _os_log_impl(&dword_25631F000, v13, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"No ble provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    goto LABEL_30;
  }
  if (!v5 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    __int16 v16 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v20 = 0;
      __int16 v21 = 2082;
      __int16 v22 = "";
      __int16 v23 = 2082;
      uint64_t v24 = "assert";
      __int16 v25 = 2081;
      uint64_t v26 = "uwbValue && [uwbValue isKindOfClass:[NSNumber class]]";
      _os_log_impl(&dword_25631F000, v16, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"No uwb provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }

    unint64_t v17 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_signpost_enabled(v17))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v20 = 0;
      __int16 v21 = 2082;
      __int16 v22 = "";
      __int16 v23 = 2082;
      uint64_t v24 = "assert";
      __int16 v25 = 2081;
      uint64_t v26 = "uwbValue && [uwbValue isKindOfClass:[NSNumber class]]";
      _os_signpost_emit_with_name_impl(&dword_25631F000, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "No uwb provided in dictionary", "{\"msg%{public}.0s\":\"No uwb provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }

    uint64_t v13 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v20 = 0;
      __int16 v21 = 2082;
      __int16 v22 = "";
      __int16 v23 = 2082;
      uint64_t v24 = "assert";
      __int16 v25 = 2081;
      uint64_t v26 = "uwbValue && [uwbValue isKindOfClass:[NSNumber class]]";
      _os_log_impl(&dword_25631F000, v13, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"No uwb provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    goto LABEL_30;
  }
  [v3 doubleValue];
  double v7 = v6;
  [v4 doubleValue];
  double v9 = v8;
  [v5 doubleValue];
  *(void *)a2 = &unk_2704DB600;
  *(unsigned char *)(a2 + 8) = v7 != 0.0;
  *(unsigned char *)(a2 + 9) = v9 != 0.0;
  *(unsigned char *)(a2 + 10) = v10 != 0.0;
}

void sub_256375BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationUtils::PerSourceWeights<BOOL>::~PerSourceWeights()
{
}

BOOL CLMicroLocationUtils::PerSourceWeights<BOOL>::operator[](unsigned __int8 *a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 8);
  switch(v2)
  {
    case 6:
      int v3 = a1[10];
      return v3 != 0;
    case 5:
      int v3 = a1[9];
      return v3 != 0;
    case 1:
      int v3 = a1[8];
      return v3 != 0;
  }
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_22);
  }
  int64_t v5 = logObject_MicroLocation_Default;
  BOOL result = os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_WORD *)double v6 = 0;
    _os_log_impl(&dword_25631F000, v5, OS_LOG_TYPE_ERROR, "Datatype not supported", v6, 2u);
    return 0;
  }
  return result;
}

uint64_t std::__function::__func<CLMicroLocationAlgorithms::details::createWeightedEuclideanJaccardDistanceFunction(NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage const&,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_0,std::allocator<CLMicroLocationAlgorithms::details::createWeightedEuclideanJaccardDistanceFunction(NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage const&,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_0>,double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_2704DB650;
  if (*(unsigned char *)(a1 + 240)) {
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(a1 + 184);
  }

  return a1;
}

void std::__function::__func<CLMicroLocationAlgorithms::details::createWeightedEuclideanJaccardDistanceFunction(NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage const&,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_0,std::allocator<CLMicroLocationAlgorithms::details::createWeightedEuclideanJaccardDistanceFunction(NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage const&,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_0>,double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_2704DB650;
  if (*(unsigned char *)(a1 + 240)) {
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(a1 + 184);
  }

  JUMPOUT(0x25A2A6340);
}

void *std::__function::__func<CLMicroLocationAlgorithms::details::createWeightedEuclideanJaccardDistanceFunction(NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage const&,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_0,std::allocator<CLMicroLocationAlgorithms::details::createWeightedEuclideanJaccardDistanceFunction(NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage const&,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_0>,double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  int v2 = operator new(0xF8uLL);
  *int v2 = &unk_2704DB650;
  std::__compressed_pair_elem<CLMicroLocationAlgorithms::details::createWeightedEuclideanJaccardDistanceFunction(NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage const&,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<CLMicroLocationAlgorithms::details::createWeightedEuclideanJaccardDistanceFunction(NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage const&,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_256375E0C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<CLMicroLocationAlgorithms::details::createWeightedEuclideanJaccardDistanceFunction(NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage const&,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_0,std::allocator<CLMicroLocationAlgorithms::details::createWeightedEuclideanJaccardDistanceFunction(NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage const&,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_0>,double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_2704DB650;
  return std::__compressed_pair_elem<CLMicroLocationAlgorithms::details::createWeightedEuclideanJaccardDistanceFunction(NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage const&,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<CLMicroLocationAlgorithms::details::createWeightedEuclideanJaccardDistanceFunction(NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage const&,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<CLMicroLocationAlgorithms::details::createWeightedEuclideanJaccardDistanceFunction(NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage const&,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_0,std::allocator<CLMicroLocationAlgorithms::details::createWeightedEuclideanJaccardDistanceFunction(NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage const&,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_0>,double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::destroy(uint64_t a1)
{
}

void std::__function::__func<CLMicroLocationAlgorithms::details::createWeightedEuclideanJaccardDistanceFunction(NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage const&,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_0,std::allocator<CLMicroLocationAlgorithms::details::createWeightedEuclideanJaccardDistanceFunction(NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage const&,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_0>,double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<CLMicroLocationAlgorithms::details::createWeightedEuclideanJaccardDistanceFunction(NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage const&,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_0,std::allocator<CLMicroLocationAlgorithms::details::createWeightedEuclideanJaccardDistanceFunction(NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage const&,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_0>,double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<CLMicroLocationAlgorithms::details::createWeightedEuclideanJaccardDistanceFunction(NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage const&,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_0,std::allocator<CLMicroLocationAlgorithms::details::createWeightedEuclideanJaccardDistanceFunction(NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage const&,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_0>,double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  [*(id *)(a1 + 8) doubleValue];
  double v7 = v6;
  [*(id *)(a1 + 16) doubleValue];
  CLMicroLocationFingerprintDistanceFunction::weightedEuclideanJaccardDistance(a2, a3, a1 + 24, a1 + 56, a1 + 88, a1 + 120, a1 + 152, a1 + 168, v7, v8, a1 + 184);
}

uint64_t std::__function::__func<CLMicroLocationAlgorithms::details::createWeightedEuclideanJaccardDistanceFunction(NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage const&,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_0,std::allocator<CLMicroLocationAlgorithms::details::createWeightedEuclideanJaccardDistanceFunction(NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage const&,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_0>,double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationAlgorithms::details::createWeightedEuclideanJaccardDistanceFunction(NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage const&,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_0,std::allocator<CLMicroLocationAlgorithms::details::createWeightedEuclideanJaccardDistanceFunction(NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage const&,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_0>,double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<CLMicroLocationAlgorithms::details::createWeightedEuclideanJaccardDistanceFunction(NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage const&,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<CLMicroLocationAlgorithms::details::createWeightedEuclideanJaccardDistanceFunction(NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage const&,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(id *)a2;
  *(void *)(a1 + 8) = *(id *)(a2 + 8);
  *(void *)(a1 + 16) = &unk_2704DAFD8;
  uint64_t v4 = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = &unk_2704DAFD8;
  uint64_t v5 = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = v5;
  *(void *)(a1 + 80) = &unk_2704DAFD8;
  uint64_t v6 = *(void *)(a2 + 104);
  *(_OWORD *)(a1 + CLMicroLocationSensorsLogic::stopOdometryMonitoringIfRunning(this + 88) = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = v6;
  *(void *)(a1 + 112) = &unk_2704DAFD8;
  uint64_t v7 = *(void *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = v7;
  *(void *)(a1 + 144) = &unk_2704DB600;
  char v8 = *(unsigned char *)(a2 + 154);
  *(_WORD *)(a1 + 152) = *(_WORD *)(a2 + 152);
  *(unsigned char *)(a1 + 154) = v8;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  std::__optional_copy_base<CLMicroLocationAnchorAppearanceMap,false>::__optional_copy_base[abi:ne180100](a1 + 176, a2 + 176);
  return a1;
}

void sub_256376094(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__alloc_func<CLMicroLocationAlgorithms::details::createWeightedEuclideanJaccardDistanceFunction(NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage const&,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_0,std::allocator<CLMicroLocationAlgorithms::details::createWeightedEuclideanJaccardDistanceFunction(NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage const&,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_0>,double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 232)) {
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(a1 + 176);
  }

  int v2 = *(void **)a1;
}

uint64_t std::__function::__func<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_3,std::allocator<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_3>,double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_3,std::allocator<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_3>,double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::~__func(uint64_t a1)
{
  JUMPOUT(0x25A2A6340);
}

void *std::__function::__func<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_3,std::allocator<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_3>,double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::__clone(uint64_t a1)
{
  int v2 = operator new(0x10uLL);
  *int v2 = &unk_2704DB6D0;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id std::__function::__func<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_3,std::allocator<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_3>,double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_2704DB6D0;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void std::__function::__func<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_3,std::allocator<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_3>,double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::destroy(uint64_t a1)
{
}

void std::__function::__func<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_3,std::allocator<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_3>,double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

void std::__function::__func<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_3,std::allocator<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_3>,double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::operator()(uint64_t a1, CLMicroLocationFingerprintDistanceFunction *a2, const CLMicroLocationFingerprint *a3)
{
  [*(id *)(a1 + 8) doubleValue];
  CLMicroLocationFingerprintDistanceFunction::tanimotoLike(a2, a3, v5, v6);
}

uint64_t std::__function::__func<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_3,std::allocator<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_3>,double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_3,std::allocator<CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction(CLMicroLocationAlgorithms::FingerprintDistanceFunctionType,NSDictionary *,CLMicroLocationFingerprintDistanceFunction::EnabledTechnologiesConfig const&,CLMicroLocationAlgorithms::details::FingerprintDistanceFunctionUsage,std::optional<CLMicroLocationAnchorAppearanceMap> const&)::$_3>,double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::target_type()
{
}

void CLLaplacianKernelFunction::CLLaplacianKernelFunction(CLLaplacianKernelFunction *this, double a2)
{
  *(void *)this = &unk_2704DB750;
  *((void *)this + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0x3FF0000000000000;
  if (a2 <= 0.0) {
    CLLaplacianKernelFunction::CLLaplacianKernelFunction();
  }
  *((double *)this + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 1.0 / a2;
}

void CLLaplacianKernelFunction::~CLLaplacianKernelFunction(CLLaplacianKernelFunction *this)
{
}

uint64_t CLKernelFunction::operator()(uint64_t a1, uint64_t *a2, void *a3)
{
  long double v6 = &unk_2704DB7F8;
  double v4 = CLEuclideanSquaredDistanceFunction::operator()((uint64_t)&v6, a2, a3);
  return (*(uint64_t (**)(uint64_t, double))(*(void *)a1 + 24))(a1, sqrt(v4));
}

double CLLaplacianKernelFunction::operator()(uint64_t a1, double a2)
{
  return exp(-(*(double *)(a1 + 8) * a2));
}

double CLEuclideanDistanceFunction::operator()(uint64_t a1, uint64_t *a2, void *a3)
{
  double v4 = &unk_2704DB7F8;
  return sqrt(CLEuclideanSquaredDistanceFunction::operator()((uint64_t)&v4, a2, a3));
}

void CLEuclideanDistanceFunction::~CLEuclideanDistanceFunction(CLEuclideanDistanceFunction *this)
{
}

double CLEuclideanSquaredDistanceFunction::operator()(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  unint64_t v5 = (v4 - *a2) >> 3;
  if (v5 != (uint64_t)(a3[1] - *a3) >> 3) {
    CLEuclideanSquaredDistanceFunction::operator()();
  }
  if (v4 == v3) {
    return 0.0;
  }
  uint64_t v6 = 0;
  double result = 0.0;
  do
  {
    double v8 = *(double *)(v3 + 8 * v6) - *(double *)(*a3 + 8 * v6);
    double result = result + v8 * v8;
    ++v6;
  }
  while (v5 > v6);
  return result;
}

void CLEuclideanSquaredDistanceFunction::~CLEuclideanSquaredDistanceFunction(CLEuclideanSquaredDistanceFunction *this)
{
}

void CLGaussianKernelFunction::CLGaussianKernelFunction(CLGaussianKernelFunction *this, double a2)
{
  *(void *)this = &unk_2704DB838;
  *((void *)this + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0x3FE0000000000000;
  if (a2 <= 0.0) {
    CLGaussianKernelFunction::CLGaussianKernelFunction();
  }
  *((double *)this + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 1.0 / ((a2 + a2) * a2);
}

void CLGaussianKernelFunction::~CLGaussianKernelFunction(CLGaussianKernelFunction *this)
{
}

double CLGaussianKernelFunction::operator()(uint64_t a1, uint64_t *a2, void *a3)
{
  double v3 = *(double *)(a1 + 8);
  uint64_t v6 = &unk_2704DB7F8;
  double v4 = -(v3 * CLEuclideanSquaredDistanceFunction::operator()((uint64_t)&v6, a2, a3));
  return exp(v4);
}

double CLGaussianKernelFunction::operator()(uint64_t a1, double a2)
{
  return exp(-(*(double *)(a1 + 8) * a2) * a2);
}

void CLExponentialKernelFunction::CLExponentialKernelFunction(CLExponentialKernelFunction *this, long double a2, long double a3)
{
  *(void *)this = &unk_2704DB880;
  __asm { FMOV            V2.2D, #1.0 }
  *(_OWORD *)((char *)this + 8) = _Q2;
  if (a3 <= 0.0) {
    CLExponentialKernelFunction::CLExponentialKernelFunction();
  }
  if (a2 <= 0.0) {
    CLExponentialKernelFunction::CLExponentialKernelFunction();
  }
  *((long double *)this + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = a3;
  *((long double *)this + 2) = 1.0 / pow(a2, a3);
}

void CLExponentialKernelFunction::~CLExponentialKernelFunction(CLExponentialKernelFunction *this)
{
}

double CLExponentialKernelFunction::operator()(uint64_t a1, long double a2)
{
  double v2 = *(double *)(a1 + 16);
  long double v3 = -(v2 * pow(a2, *(long double *)(a1 + 8)));
  return exp(v3);
}

void CLUniformKernelFunction::~CLUniformKernelFunction(CLUniformKernelFunction *this)
{
}

double CLUniformKernelFunction::operator()(uint64_t a1, double a2)
{
  BOOL v2 = *(double *)(a1 + 8) <= a2;
  double result = 0.0;
  if (!v2) {
    return 1.0;
  }
  return result;
}

void std::__function::__func<float (*)(CLDistanceMatrixTemplate<CLSymmetricMatrixStorage<float>> const&,std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>),std::allocator<float (*)(CLDistanceMatrixTemplate<CLSymmetricMatrixStorage<float>> const&,std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>)>,float ()(CLDistanceMatrixTemplate<CLSymmetricMatrixStorage<float>> const&,std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>)>::~__func()
{
}

void *std::__function::__func<float (*)(CLDistanceMatrixTemplate<CLSymmetricMatrixStorage<float>> const&,std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>),std::allocator<float (*)(CLDistanceMatrixTemplate<CLSymmetricMatrixStorage<float>> const&,std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>)>,float ()(CLDistanceMatrixTemplate<CLSymmetricMatrixStorage<float>> const&,std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_2704DB910;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<float (*)(CLDistanceMatrixTemplate<CLSymmetricMatrixStorage<float>> const&,std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>),std::allocator<float (*)(CLDistanceMatrixTemplate<CLSymmetricMatrixStorage<float>> const&,std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>)>,float ()(CLDistanceMatrixTemplate<CLSymmetricMatrixStorage<float>> const&,std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_2704DB910;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<float (*)(CLDistanceMatrixTemplate<CLSymmetricMatrixStorage<float>> const&,std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>),std::allocator<float (*)(CLDistanceMatrixTemplate<CLSymmetricMatrixStorage<float>> const&,std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>)>,float ()(CLDistanceMatrixTemplate<CLSymmetricMatrixStorage<float>> const&,std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>)>::operator()(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  return (*(uint64_t (**)(uint64_t, void, void, void, void, void, void))(a1 + 8))(a2, *a3, a3[1], *a4, a4[1], *a5, a5[1]);
}

uint64_t std::__function::__func<float (*)(CLDistanceMatrixTemplate<CLSymmetricMatrixStorage<float>> const&,std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>),std::allocator<float (*)(CLDistanceMatrixTemplate<CLSymmetricMatrixStorage<float>> const&,std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>)>,float ()(CLDistanceMatrixTemplate<CLSymmetricMatrixStorage<float>> const&,std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<float (*)(CLDistanceMatrixTemplate<CLSymmetricMatrixStorage<float>> const&,std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>),std::allocator<float (*)(CLDistanceMatrixTemplate<CLSymmetricMatrixStorage<float>> const&,std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>)>,float ()(CLDistanceMatrixTemplate<CLSymmetricMatrixStorage<float>> const&,std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>)>::target_type()
{
}

void OUTLINED_FUNCTION_3_1(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, const char *a6, uint8_t *a7)
{
  _os_signpost_emit_with_name_impl(a1, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, a5, a6, a7, 0x2Cu);
}

void OUTLINED_FUNCTION_4_1(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, v5, OS_LOG_TYPE_FAULT, a4, a5, 0x2Cu);
}

void OUTLINED_FUNCTION_5_1(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, v5, OS_LOG_TYPE_INFO, a4, a5, 0x2Cu);
}

void OUTLINED_FUNCTION_6_1(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, const char *a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_signpost_emit_with_name_impl(a1, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, a5, a6, &a9, 0x26u);
}

BOOL OUTLINED_FUNCTION_7(NSObject *a1)
{
  return os_log_type_enabled(a1, OS_LOG_TYPE_FAULT);
}

BOOL OUTLINED_FUNCTION_8(NSObject *a1)
{
  id *v1 = a1;
  return os_log_type_enabled(a1, OS_LOG_TYPE_INFO);
}

void sub_256376914(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256376B84(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6320](v3, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

void sub_256376EC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void CLMicroLocationRapportTable::Entry::~Entry(void **this)
{
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_16()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

uint64_t std::__optional_destruct_base<CLMicroLocationRapportTable::Entry,false>::__optional_destruct_base[abi:ne180100]<CLMicroLocationRapportTable::Entry>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  long long v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v4;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  CLMicroLocationProto::RapportDevice::RapportDevice((CLMicroLocationProto::RapportDevice *)(a1 + 32), (const CLMicroLocationProto::RapportDevice *)(a2 + 32));
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = 1;
  return a1;
}

void sub_256377048(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_256377088()
{
  return 0;
}

void sub_2563773B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id ULLogicAdapterHelper::createULPrediction(uint64_t *a1, uint64_t a2)
{
  id v4 = objc_alloc(MEMORY[0x263F557B8]);
  unint64_t v5 = ULLogicAdapterHelper::createULPlaces(a1);
  int v6 = *(unsigned __int8 *)(a2 + 16);
  if (*(unsigned char *)(a2 + 16))
  {
    id v7 = objc_alloc(MEMORY[0x263F08C38]);
    if (!*(unsigned char *)(a2 + 16)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    uint64_t v8 = (void *)[v7 initWithUUIDBytes:a2];
  }
  else
  {
    uint64_t v8 = 0;
  }
  double v9 = [MEMORY[0x263EFF910] date];
  uint64_t ULConfidence = ULLogicAdapterHelper::getULConfidence((uint64_t)a1);
  uint64_t v12 = ULLogicAdapterHelper::getULConfidenceReasons((ULLogicAdapterHelper *)a1, v11);
  uint64_t v13 = (void *)[v4 initWithPlaces:v5 error:0 requestIdentifier:v8 time:v9 confidence:ULConfidence confidenceReasons:v12];

  if (v6) {
  return v13;
  }
}

void sub_2563778E4(_Unwind_Exception *a1)
{
  if (v5) {
  _Unwind_Resume(a1);
  }
}

id ULLogicAdapterHelper::createULPlaces(uint64_t *a1)
{
  uint64_t v2 = [MEMORY[0x263EFF980] array];
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      id v5 = objc_alloc(MEMORY[0x263F557B0]);
      int v6 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDBytes:v3];
      id v7 = [NSNumber numberWithDouble:*(double *)(v3 + 16)];
      uint64_t v8 = (void *)[v5 initWithIdentifier:v6 score:v7];

      [v2 addObject:v8];
      v3 += 32;
    }
    while (v3 != v4);
  }
  double v9 = [MEMORY[0x263EFF8C0] arrayWithArray:v2];

  return v9;
}

void sub_256377A24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ULLogicAdapterHelper::getULConfidence(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 136);
  if (v1 < 4) {
    return qword_256516188[v1];
  }
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_25);
  }
  uint64_t v3 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_25631F000, v3, OS_LOG_TYPE_ERROR, "unknown protobuf confidence level, deprecated?", v4, 2u);
  }
  return 0;
}

id ULLogicAdapterHelper::getULConfidenceReasons(ULLogicAdapterHelper *this, const CLMicroLocationResultToPublish *a2)
{
  uint64_t v3 = [MEMORY[0x263EFF980] array];
  uint64_t v4 = (unsigned int *)*((void *)this + 18);
  id v5 = (unsigned int *)*((void *)this + 19);
  if (v4 == v5)
  {
LABEL_4:
    uint64_t v8 = [MEMORY[0x263EFF8C0] arrayWithArray:v3];

    return v8;
  }
  else
  {
    while (1)
    {
      uint64_t v6 = *v4;
      if (v6 >= 8) {
        break;
      }
      id v7 = (void *)[objc_alloc(MEMORY[0x263F55788]) initWithConfidenceReasonEnum:v6];
      [v3 addObject:v7];

      if (++v4 == v5) {
        goto LABEL_4;
      }
    }
    ULLogicAdapterHelper::getULConfidenceReasons(&v10);

    id result = (id)abort_report_np();
    __break(1u);
  }
  return result;
}

void sub_256377C0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id ULLogicAdapterHelper::ulServiceStatusFromInternalStatus(ULLogicAdapterHelper *this, const CLMiLoService::ServiceStatus *a2)
{
  id v3 = objc_alloc_init(MEMORY[0x263EFF980]);
  for (uint64_t i = 0; i != 32; ++i)
  {
    if ((*((void *)this + 7) >> i))
    {
      id v5 = (void *)[objc_alloc(MEMORY[0x263F557A8]) initWithLocationTypeEnum:i];
      [v3 addObject:v5];
    }
  }
  uint64_t v6 = [objc_alloc(MEMORY[0x263F08C38]) initWithUUIDBytes:(char *)this + 32];
  id v7 = objc_alloc(MEMORY[0x263F557C0]);
  uint64_t v8 = *((void *)this + 6);
  double v9 = (void *)[v3 copy];
  uint64_t v42 = v3;
  uint64_t v43 = (void *)v6;
  long long v44 = (void *)[v7 initWithServiceIdentifier:v6 serviceType:v8 locationTypes:v9];

  id v10 = objc_alloc_init(MEMORY[0x263EFF980]);
  uint64_t v11 = (void *)*((void *)this + 1);
  for (uint64_t j = (void *)*((void *)this + 2); v11 != j; ++v11)
  {
    uint64_t v13 = (void *)[objc_alloc(MEMORY[0x263F557E8]) initWithSuspendReasonEnum:*v11];
    [v10 addObject:v13];
  }
  id v14 = objc_alloc_init(MEMORY[0x263EFF980]);
  int v15 = (void *)*((void *)this + 10);
  for (double k = (void *)*((void *)this + 11); v15 != k; ++v15)
  {
    unint64_t v17 = (void *)[objc_alloc(MEMORY[0x263F557D8]) initWithQualityReasonEnum:*v15];
    [v14 addObject:v17];
  }
  id v18 = objc_alloc(MEMORY[0x263F557D0]);
  uint64_t v19 = *((void *)this + 9);
  int v20 = (void *)[v14 copy];
  uint64_t v21 = [v18 initServiceWithQuality:v19 andReasons:v20];

  uint64_t v41 = (void *)v21;
  BOOL v39 = v14;
  if (*((unsigned char *)this + 152))
  {
    id v22 = objc_alloc(MEMORY[0x263F08C38]);
    if (!*((unsigned char *)this + 152)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    uint64_t v23 = [v22 initWithUUIDBytes:(char *)this + 136];
    id v24 = objc_alloc(MEMORY[0x263F557A8]);
    if (!*((unsigned char *)this + 152)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    uint64_t v38 = (void *)[v24 initWithLocationTypeEnum:*((void *)this + 16)];
    unint64_t v40 = (void *)v23;
  }
  else
  {
    unint64_t v40 = 0;
    uint64_t v38 = 0;
  }
  id v25 = objc_alloc(MEMORY[0x263F557C8]);
  uint64_t v45 = [NSNumber numberWithUnsignedInt:*((unsigned int *)this + 40)];
  unint64_t v37 = [NSNumber numberWithUnsignedInt:*((unsigned int *)this + 41)];
  __int16 v36 = [NSNumber numberWithUnsignedInt:*((unsigned int *)this + 42)];
  uint64_t v35 = [NSNumber numberWithUnsignedInt:*((unsigned int *)this + 44)];
  __int16 v34 = [NSNumber numberWithUnsignedInt:*((unsigned int *)this + 43)];
  uint64_t v33 = [NSNumber numberWithUnsignedInt:*((unsigned int *)this + 45)];
  uint64_t v26 = [NSNumber numberWithUnsignedInt:*((unsigned int *)this + 46)];
  uint64_t v27 = [NSNumber numberWithUnsignedInt:*((unsigned int *)this + 47)];
  uint64_t v28 = [NSNumber numberWithUnsignedInt:*((unsigned int *)this + 48)];
  int v29 = [NSNumber numberWithUnsignedInt:*((unsigned int *)this + 49)];
  uint64_t v32 = (void *)[v25 initWithNumClustersLearnedInModel:v45 numRecordingTriggersAtCurrentLOI:v37 numInputValidFingerprints:v36 numInputValidFingerprintsLabeled:v35 numInputValidFingerprintsUnlabeled:v34 numFingerprintsBeforePruning:v33 numFingerprintsAfterPruning:v26 numWiFiAccessPoints:v27 numBLESources:v28 numUWBSources:v29];

  __int16 v30 = (void *)[objc_alloc(MEMORY[0x263F557E0]) initWithServiceState:*(void *)this serviceSuspendReasons:v10 serviceDescriptor:v44 currentLocationOfInterestUuid:v40 currentLocationOfInterestType:v38 error:0 serviceQualityInfo:v41 metaInfo:v32];
  return v30;
}

void sub_2563780AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24)
{
  uint64_t v31 = *(void **)(v28 - 112);
  __int16 v30 = *(void **)(v28 - 104);

  _Unwind_Resume(a1);
}

uint64_t ULLogicAdapterHelper::ulFingerprintErrorFromRecordingError(unsigned int a1)
{
  if (a1 < 4) {
    return qword_2565161A8[a1];
  }
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_25);
  }
  uint64_t v2 = logObject_MicroLocation_Default;
  if (!os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR)) {
    return 2;
  }
  *(_WORD *)uint64_t v4 = 0;
  uint64_t v1 = 2;
  _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_ERROR, "Unexpected recording error", v4, 2u);
  return v1;
}

id ULLogicAdapterHelper::getFingerprintErrorsFromPredictionResults(ULLogicAdapterHelper *this, const CLMicroLocationResultToPublish *a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v3 = [MEMORY[0x263EFF980] array];
  ULLogicAdapterHelper::getULConfidenceReasons(this, v4);
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v14 != v7) {
          objc_enumerationMutation(v5);
        }
        unint64_t v9 = objc_msgSend(*(id *)(*((void *)&v13 + 1) + 8 * i), "confidenceReasonEnum", (void)v13);
        if (v9 <= 7)
        {
          id v10 = objc_msgSend(objc_alloc(MEMORY[0x263F55798]), "initWithFingerprintErrorEnum:", objc_msgSend(off_2653F9510[v9], "integerValue"));
          [v3 addObject:v10];
        }
      }
      uint64_t v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v6);
  }

  uint64_t v11 = [MEMORY[0x263EFF8C0] arrayWithArray:v3];

  return v11;
}

void sub_25637845C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_17()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

void sub_25637859C(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
}

void sub_256378A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,id a36)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a31, 8);

  _Block_object_dispose((const void *)(v36 - 208), 8);
  _Unwind_Resume(a1);
}

void sub_256378C18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256378E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id a18, id a19, id a20,id a21)
{
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v26);

  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void sub_256378FA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_96c27_ZTSNSt3__18functionIFbvEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100](a1 + 96, a2 + 96);
}

void *__destroy_helper_block_ea8_96c27_ZTSNSt3__18functionIFbvEEE(uint64_t a1)
{
  return std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((void *)(a1 + 96));
}

void sub_2563791E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *a18, void *a19, void *a20,void *a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id a29)
{
  _Block_object_dispose(&a24, 8);
  _Unwind_Resume(a1);
}

void sub_2563794E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_256379A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,void *a24,void *a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,id a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,id a44)
{
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a39, 8);

  _Block_object_dispose((const void *)(v44 - 208), 8);
  _Unwind_Resume(a1);
}

void sub_256379CA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256379DF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25637A21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,id a34)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);

  _Unwind_Resume(a1);
}

void sub_25637A3E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25637A680(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25637A8BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25637A964(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25637A9FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25637AA8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25637AF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,id a38)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a33, 8);

  _Block_object_dispose((const void *)(v39 - 208), 8);
  _Unwind_Resume(a1);
}

void sub_25637B118(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25637B2F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id a18)
{
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v20);

  _Block_object_dispose(&a10, 8);
  _Unwind_Resume(a1);
}

void sub_25637B67C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_56c27_ZTSNSt3__18functionIFbvEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100](a1 + 56, a2 + 56);
}

void *__destroy_helper_block_ea8_56c27_ZTSNSt3__18functionIFbvEEE(uint64_t a1)
{
  return std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((void *)(a1 + 56));
}

void sub_25637BB1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,id a34)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);

  _Unwind_Resume(a1);
}

void sub_25637BCB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25637BD30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_18()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

void CLMicroLocationBlueAtlasLocalizationAlgorithm::localize(CLMicroLocationModel *this@<X1>, const CLMicroLocationModel *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X6>, char **a5@<X8>)
{
  uint64_t v7 = this;
  uint64_t v179 = *MEMORY[0x263EF8340];
  if (CLMicroLocationModel::isValid(this))
  {
    if (*((_DWORD *)v7 + 1) == 3)
    {
      if (*(unsigned char *)(a3 + 32))
      {
        *a5 = 0;
        a5[1] = 0;
        a5[2] = 0;
        *((_DWORD *)a5 + 6) = 3;
        *((unsigned char *)a5 + 80) = 0;
        a5[5] = 0;
        a5[6] = 0;
        a5[4] = 0;
        *((unsigned char *)a5 + 56) = 0;
        unint64_t v9 = +[ULDefaultsSingleton shared];
        id v10 = [v9 defaultsDictionary];

        uint64_t v11 = [NSString stringWithUTF8String:"ULBlueAtlasAssociatedAccessPointLocalizerEnabled"];
        uint64_t v12 = [v10 objectForKey:v11];
        unint64_t v13 = 0x263F08000uLL;
        if (v12 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
          int v14 = [v12 BOOLValue];
        }
        else {
          int v14 = [MEMORY[0x263EFFA88] BOOLValue];
        }
        int v15 = v14;

        double v16 = 0.0;
        if (v15)
        {
          std::__optional_copy_base<CLMicroLocationProto::AssociatedAccessPointInfo,false>::__optional_copy_base[abi:ne180100]((CLMicroLocationProto::AssociatedAccessPointInfo *)v148, (const CLMicroLocationProto::AssociatedAccessPointInfo *)a4);
          BOOL isValidAssociatedAccessPointBasedDecision = CLMicroLocationBlueAtlasLocalizationAlgorithm::isValidAssociatedAccessPointBasedDecision((uint64_t)v7, (uint64_t)v148);
          BOOL v18 = isValidAssociatedAccessPointBasedDecision;
          if (v148[32])
          {
            CLMicroLocationProto::AssociatedAccessPointInfo::~AssociatedAccessPointInfo((CLMicroLocationProto::AssociatedAccessPointInfo *)v148);
            if (v18)
            {
LABEL_11:
              if (onceToken_MicroLocation_Default != -1) {
                dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_27);
              }
              uint64_t v132 = a3;
              uint64_t v19 = (id)logObject_MicroLocation_Default;
              if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
              {
                if (!*((unsigned char *)v7 + 288) || !*((unsigned char *)v7 + 272)) {
                  std::__throw_bad_optional_access[abi:ne180100]();
                }
                int v20 = (CLMacAddress *)v7;
                uint64_t v21 = *((unsigned int *)v7 + 1);
                id v22 = v20;
                CLMacAddress::toCLStr(v20 + 33, &__p);
                if (!*(unsigned char *)(a4 + 32) || !LOBYTE(v22[36].var0)) {
                  std::__throw_bad_optional_access[abi:ne180100]();
                }
                p_p = &__p;
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                double v24 = *(float *)(a4 + 16);
                uint64_t v25 = (uint64_t)(v22[26].var0 - v22[25].var0) >> 4;
                *(_DWORD *)uint64_t buf = 68290051;
                *(_WORD *)&uint8_t buf[8] = 2082;
                *(_DWORD *)&uint8_t buf[4] = 0;
                *(void *)&buf[10] = "";
                *(_WORD *)&unsigned char buf[18] = 2050;
                *(void *)&buf[20] = v21;
                *(_WORD *)&unsigned char buf[28] = 2081;
                *(void *)&buf[30] = p_p;
                __int16 v162 = 2050;
                *(double *)v163 = v24;
                *(_WORD *)&v163[8] = 2050;
                *(void *)&v163[10] = v25;
                _os_log_impl(&dword_25631F000, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"localizationRequestResultsPerModel, found matching strong associated AP\", \"ModelType\":%{public}lu, \"MAC Address\":%{private, location:escape_only}s, \"Rssi\":\"%{public}f\", \"Num labels\":%{public}lu}", buf, 0x3Au);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                uint64_t v7 = (CLMicroLocationModel *)v22;
              }

              *((_DWORD *)a5 + 6) = 3;
              if (!*((unsigned char *)v7 + 288)) {
                std::__throw_bad_optional_access[abi:ne180100]();
              }
              uint64_t v27 = (uint64_t *)*((void *)v7 + 25);
              uint64_t v28 = (uint64_t *)*((void *)v7 + 26);
              v137 = v7;
              if (v27 != v28)
              {
                int v29 = a5 + 2;
                __int16 v30 = a5[1];
                do
                {
                  uint64_t v32 = *v27;
                  uint64_t v31 = v27[1];
                  if ((unint64_t)v30 >= *v29)
                  {
                    uint64_t v33 = (v30 - *a5) >> 5;
                    if ((unint64_t)(v33 + 1) >> 59) {
                      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
                    }
                    uint64_t v34 = *v29 - (void)*a5;
                    uint64_t v35 = v34 >> 4;
                    if (v34 >> 4 <= (unint64_t)(v33 + 1)) {
                      uint64_t v35 = v33 + 1;
                    }
                    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFE0) {
                      unint64_t v36 = 0x7FFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v36 = v35;
                    }
                    unint64_t v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationResultInternal>>((uint64_t)(a5 + 2), v36);
                    uint64_t v39 = &v37[32 * v33];
                    *(void *)uint64_t v39 = v32;
                    *((void *)v39 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v31;
                    *((void *)v39 + 2) = 0x3FF0000000000000;
                    *((_DWORD *)v39 + 6) = 3;
                    uint64_t v41 = *a5;
                    unint64_t v40 = a5[1];
                    uint64_t v42 = v39;
                    unint64_t v13 = 0x263F08000;
                    if (v40 != *a5)
                    {
                      do
                      {
                        long long v43 = *((_OWORD *)v40 - 2);
                        *(_OWORD *)(v42 - 20) = *(_OWORD *)(v40 - 20);
                        *((_OWORD *)v42 - 2) = v43;
                        v42 -= 32;
                        v40 -= 32;
                      }
                      while (v40 != v41);
                      unint64_t v40 = *a5;
                    }
                    __int16 v30 = v39 + 32;
                    *a5 = v42;
                    a5[1] = v39 + 32;
                    a5[2] = &v37[32 * v38];
                    if (v40) {
                      operator delete(v40);
                    }
                  }
                  else
                  {
                    *(void *)__int16 v30 = v32;
                    *((void *)v30 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v31;
                    *((void *)v30 + 2) = 0x3FF0000000000000;
                    *((_DWORD *)v30 + 6) = 3;
                    v30 += 32;
                    unint64_t v13 = 0x263F08000;
                  }
                  a5[1] = v30;
                  v27 += 2;
                }
                while (v27 != v28);
                if (!*((unsigned char *)v7 + 288)) {
                  goto LABEL_54;
                }
              }
              if (*((void *)v7 + 25) != *((void *)v7 + 26))
              {
                uint64_t v44 = (uint64_t *)*((void *)v7 + 41);
                uint64_t v45 = (uint64_t *)*((void *)v7 + 42);
                if (v44 == v45)
                {
                  double v60 = 0.0;
                  double v61 = 0.0;
                  unint64_t v13 = 0x263F08000;
                }
                else
                {
                  memset(v147, 0, sizeof(v147));
                  *(void *)v154 = v147;
                  do
                  {
                    uint64_t v46 = *v44;
                    std::unordered_set<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::unordered_set((uint64_t)buf, *v44);
                    long long v47 = *(_OWORD *)(v46 + 40);
                    *(void *)&v163[16] = *(void *)(v46 + 56);
                    *(_OWORD *)v163 = v47;
                    std::unordered_set<CLMicroLocationProto::DataType>::unordered_set((uint64_t)&v163[24], v46 + 64);
                    std::unordered_map<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>::unordered_map((uint64_t)v167, v46 + 104);
                    long long v48 = *(_OWORD *)(v46 + 144);
                    int v169 = *(_DWORD *)(v46 + 160);
                    v168[1] = v48;
                    v171 = 0;
                    uint64_t v172 = 0;
                    v170 = 0;
                    std::vector<CLMicroLocationProto::ConfidenceReason>::__init_with_size[abi:ne180100]<CLMicroLocationProto::ConfidenceReason*,CLMicroLocationProto::ConfidenceReason*>(&v170, *(const void **)(v46 + 168), *(void *)(v46 + 176), (uint64_t)(*(void *)(v46 + 176) - *(void *)(v46 + 168)) >> 2);
                    std::back_insert_iterator<std::vector<CLMicroLocationFingerprint>>::operator=[abi:ne180100]((uint64_t **)v154, (uint64_t)buf);
                    if (v170)
                    {
                      v171 = v170;
                      operator delete(v170);
                    }
                    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v167);
                    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&v163[24]);
                    std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table((uint64_t)buf);
                    v44 += 4;
                  }
                  while (v44 != v45);
                  uint64_t v144 = 0;
                  uint64_t v145 = 0;
                  uint64_t v146 = 0;
                  if (!*((unsigned char *)v7 + 288)) {
                    std::__throw_bad_optional_access[abi:ne180100]();
                  }
                  long long v49 = (void *)*((void *)v7 + 28);
                  __int16 v50 = (void *)*((void *)v137 + 29);
                  while (v49 != v50)
                  {
                    *(void *)v154 = *v49;
                    *(void *)uint64_t buf = CLMacAddress::toUint64((CLMacAddress *)v154);
                    *(_DWORD *)&buf[24] = 0;
                    std::vector<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::push_back[abi:ne180100](&v144, (uint64_t)buf);
                    std::__variant_detail::__dtor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)buf);
                    ++v49;
                  }
                  CLMicroLocationFingerprint::CLMicroLocationFingerprint(&__p, v147);
                  __int16 v58 = (uint64_t *)__p.__r_.__value_.__r.__words[2];
                  if (__p.__r_.__value_.__r.__words[2])
                  {
                    uint64_t v59 = 0;
                    do
                    {
                      if (*((_DWORD *)v58 + 6) == 1) {
                        ++v59;
                      }
                      __int16 v58 = (uint64_t *)*v58;
                    }
                    while (v58);
                  }
                  else
                  {
                    uint64_t v59 = 0;
                  }
                  memset(v143, 0, sizeof(v143));
                  std::vector<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::__init_with_size[abi:ne180100]<std::variant<unsigned long long,boost::uuids::uuid,std::string>*,std::variant<unsigned long long,boost::uuids::uuid,std::string>*>(v143, v144, v145, (v145 - v144) >> 5);
                  CLMicroLocationFingerprint::removeMeasurementsFromSourcesOtherThan(&__p, 1, v143);
                  *(void *)uint64_t buf = v143;
                  std::vector<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
                  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
                  uint64_t v63 = (uint64_t *)__p.__r_.__value_.__r.__words[2];
                  if (__p.__r_.__value_.__r.__words[2])
                  {
                    char v64 = 1;
                    do
                    {
                      if (*((_DWORD *)v63 + 6) == 1)
                      {
                        if (*((_DWORD *)v63 + 14)) {
                          std::__throw_bad_variant_access[abi:ne180100]();
                        }
                        v151.unint64_t var0 = CLMacAddress::newFromUint64((CLMacAddress *)v63[4], v62);
                        if ((v64 & 1) == 0) {
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf[16], (uint64_t)", ", 2);
                        }
                        CLMacAddress::toPrettyStr(&v151, (std::string *)v154);
                        if (v154[23] >= 0) {
                          uint64_t v65 = v154;
                        }
                        else {
                          uint64_t v65 = *(unsigned char **)v154;
                        }
                        if (v154[23] >= 0) {
                          uint64_t v66 = v154[23];
                        }
                        else {
                          uint64_t v66 = *(void *)&v154[8];
                        }
                        long long v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf[16], (uint64_t)v65, v66);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)" (", 2);
                        uint64_t v68 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)")", 1);
                        if ((v154[23] & 0x80000000) != 0) {
                          operator delete(*(void **)v154);
                        }
                        char v64 = 0;
                      }
                      uint64_t v63 = (uint64_t *)*v63;
                    }
                    while (v63);
                  }
                  if (onceToken_MicroLocation_Default != -1) {
                    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_27);
                  }
                  uint64_t v69 = v137;
                  unint64_t v13 = 0x263F08000;
                  __int16 v70 = (id)logObject_MicroLocation_Default;
                  if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
                  {
                    uint64_t v72 = v144;
                    uint64_t v71 = v145;
                    uint64_t v73 = v174;
                    std::stringbuf::str();
                    if (v152 >= 0) {
                      unint64_t var0 = (unint64_t)&v151;
                    }
                    else {
                      unint64_t var0 = v151.var0;
                    }
                    *(_DWORD *)v154 = 68290050;
                    *(_DWORD *)&v154[4] = 0;
                    *(_WORD *)&v154[8] = 2082;
                    *(void *)&v154[10] = "";
                    *(_WORD *)&v154[18] = 2050;
                    *(void *)&v154[20] = (v71 - v72) >> 5;
                    __int16 v155 = 2050;
                    uint64_t v156 = v59;
                    __int16 v157 = 2050;
                    uint64_t v158 = v73;
                    __int16 v159 = 2082;
                    unint64_t v160 = var0;
                    _os_log_impl(&dword_25631F000, v70, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"BlueAtlasLocalization - Model Super fingerprint\", \"num dominant sources\":%{public}lu, \"super fingerprint size before filtering dominant sources\":%{public}lu, \"super fingerprint size\":%{public}lu, \"values\":%{public, location:escape_only}s}", v154, 0x3Au);
                    if (v152 < 0) {
                      operator delete((void *)v151.var0);
                    }
                    uint64_t v69 = v137;
                  }

                  if (!*(unsigned char *)(v132 + 32)) {
                    std::__throw_bad_optional_access[abi:ne180100]();
                  }
                  std::__function::__value_func<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::__value_func[abi:ne180100]((uint64_t)&v151, v132);
                  if (!v153) {
                    std::__throw_bad_function_call[abi:ne180100]();
                  }
                  double v60 = (*(double (**)(uint64_t, std::string *, const CLMicroLocationModel *))(*(void *)v153 + 48))(v153, &__p, a2);
                  if (onceToken_MicroLocation_Default != -1) {
                    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_27);
                  }
                  long long v75 = (id)logObject_MicroLocation_Default;
                  if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
                  {
                    if (!*((unsigned char *)v69 + 288)) {
                      std::__throw_bad_optional_access[abi:ne180100]();
                    }
                    uint64_t v76 = (uint64_t)(*((void *)v69 + 26) - *((void *)v69 + 25)) >> 4;
                    *(_DWORD *)v154 = 68289794;
                    *(_DWORD *)&v154[4] = 0;
                    *(_WORD *)&v154[8] = 2082;
                    *(void *)&v154[10] = "";
                    *(_WORD *)&v154[18] = 2050;
                    *(double *)&v154[20] = v60;
                    __int16 v155 = 2050;
                    uint64_t v156 = 0;
                    __int16 v157 = 2050;
                    uint64_t v158 = v76;
                    _os_log_impl(&dword_25631F000, v75, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"BlueAtlasLocalization\", \"euclideanDistance\":\"%{public}f\", \"euclideanScore\":\"%{public}f\", \"Num labels\":%{public}lu}", v154, 0x30u);
                  }

                  long long v77 = +[ULDefaultsSingleton shared];
                  long long v78 = [v77 defaultsDictionary];

                  uint64_t v79 = [NSString stringWithUTF8String:"ULBlueAtlasLocalizerEuclideanThresholds"];
                  int v80 = [v78 objectForKey:v79];
                  if (v80 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
                  {
                    ULSettings::convert<NSArray<NSNumber *> * {__strong},std::vector<double>>(v80, (uint64_t)v154);
                    v133 = *(void **)v154;
                    long long v141 = *(_OWORD *)v154;
                    uint64_t v81 = *(void *)&v154[16];
                  }
                  else
                  {
                    ULSettings::convert<std::initializer_list<double>,std::vector<double>>((uint64_t *)&_ZGRN10ULSettings14SettingsTraitsINS_37BlueAtlasLocalizerEuclideanThresholdsEE12defaultValueE_, 2uLL, (uint64_t)v154);
                    uint64_t v81 = *(void *)&v154[16];
                    v133 = *(void **)v154;
                    long long v141 = *(_OWORD *)v154;
                  }
                  uint64_t v142 = v81;

                  uint64_t v82 = v133;
                  long long v83 = +[ULDefaultsSingleton shared];
                  v84 = [v83 defaultsDictionary];

                  long long v85 = [NSString stringWithUTF8String:"ULBlueAtlasLocalizerEuclideanSimilarityScores"];
                  uint64_t v86 = [v84 objectForKey:v85];
                  if (v86 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
                  {
                    ULSettings::convert<NSArray<NSNumber *> * {__strong},std::vector<double>>(v86, (uint64_t)v154);
                    v134 = *(void **)v154;
                    long long v139 = *(_OWORD *)v154;
                    uint64_t v87 = *(void *)&v154[16];
                  }
                  else
                  {
                    ULSettings::convert<std::initializer_list<double>,std::vector<double>>((uint64_t *)&_ZGRN10ULSettings14SettingsTraitsINS_43BlueAtlasLocalizerEuclideanSimilarityScoresEE12defaultValueE_, 2uLL, (uint64_t)v154);
                    uint64_t v87 = *(void *)&v154[16];
                    v134 = *(void **)v154;
                    long long v139 = *(_OWORD *)v154;
                  }
                  uint64_t v140 = v87;

                  CLMicroLocationBlueAtlasAlgorithms::calculateScoreForValue<double>((double **)&v141, (uint64_t *)&v139, 0, v60);
                  double v61 = v88;
                  if (v134) {
                    operator delete(v134);
                  }
                  if (v82) {
                    operator delete(v82);
                  }
                  std::__function::__value_func<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::~__value_func[abi:ne180100](&v151);
                  *(void *)uint64_t buf = *MEMORY[0x263F8C2B8];
                  uint64_t v89 = *(void *)(MEMORY[0x263F8C2B8] + 72);
                  *(void *)&buf[*(void *)(*(void *)buf - 24)] = *(void *)(MEMORY[0x263F8C2B8] + 64);
                  *(void *)&uint8_t buf[16] = v89;
                  *(void *)&buf[24] = MEMORY[0x263F8C318] + 16;
                  if ((v167[7] & 0x80000000) != 0) {
                    operator delete(v166);
                  }
                  std::streambuf::~streambuf();
                  std::iostream::~basic_iostream();
                  MEMORY[0x25A2A6280](v168);
                  if (v177)
                  {
                    v178 = v177;
                    operator delete(v177);
                  }
                  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&v176);
                  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&v175);
                  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table((uint64_t)&__p);
                  *(void *)uint64_t buf = &v144;
                  std::vector<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
                  *(void *)uint64_t buf = v147;
                  std::vector<CLMicroLocationFingerprint>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
                  uint64_t v7 = v137;
                }
                unsigned int v90 = CLMicroLocationBlueAtlasLocalizationAlgorithm::countSharedAPsInModelAndTestFingerprint(v7, a2, v26);
                long long v91 = +[ULDefaultsSingleton shared];
                int v92 = [v91 defaultsDictionary];

                __int16 v93 = [NSString stringWithUTF8String:"ULBlueAtlasLocalizerRssiScaleNumberOfAps"];
                int v94 = [v92 objectForKey:v93];
                if (v94 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
                {
                  ULSettings::convert<NSArray<NSNumber *> * {__strong},std::vector<double>>(v94, (uint64_t)buf);
                  int v135 = *(void **)buf;
                  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)buf;
                  std::string::size_type v95 = *(void *)&buf[16];
                }
                else
                {
                  ULSettings::convert<std::initializer_list<double>,std::vector<double>>((uint64_t *)&_ZGRN10ULSettings14SettingsTraitsINS_38BlueAtlasLocalizerRssiScaleNumberOfApsEE12defaultValueE_, 2uLL, (uint64_t)buf);
                  std::string::size_type v95 = *(void *)&buf[16];
                  int v135 = *(void **)buf;
                  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)buf;
                }
                __p.__r_.__value_.__r.__words[2] = v95;

                int v96 = v135;
                v97 = +[ULDefaultsSingleton shared];
                __int16 v98 = [v97 defaultsDictionary];

                int v99 = [NSString stringWithUTF8String:"ULBlueAtlasLocalizerRssiScaleFactor"];
                __int16 v100 = [v98 objectForKey:v99];
                if (v100 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
                {
                  ULSettings::convert<NSArray<NSNumber *> * {__strong},std::vector<double>>(v100, (uint64_t)buf);
                  int v136 = *(void **)buf;
                  *(_OWORD *)v154 = *(_OWORD *)buf;
                  uint64_t v101 = *(void *)&buf[16];
                }
                else
                {
                  ULSettings::convert<std::initializer_list<double>,std::vector<double>>((uint64_t *)&_ZGRN10ULSettings14SettingsTraitsINS_33BlueAtlasLocalizerRssiScaleFactorEE12defaultValueE_, 2uLL, (uint64_t)buf);
                  uint64_t v101 = *(void *)&buf[16];
                  int v136 = *(void **)buf;
                  *(_OWORD *)v154 = *(_OWORD *)buf;
                }
                *(void *)&v154[16] = v101;

                double v102 = (double)v90;
                CLMicroLocationBlueAtlasAlgorithms::calculateScoreForValue<double>((double **)&__p, (uint64_t *)v154, 1, (double)v90);
                double v104 = v103;
                if (v136) {
                  operator delete(v136);
                }
                if (v96) {
                  operator delete(v96);
                }
                double v105 = 0.5;
                if (onceToken_MicroLocation_Default != -1)
                {
                  dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_27);
                  double v105 = 0.5;
                }
                double v16 = v105 + (v61 + -0.5) * v104;
                __int16 v106 = (id)logObject_MicroLocation_Default;
                if (os_log_type_enabled(v106, OS_LOG_TYPE_DEFAULT))
                {
                  if (!*((unsigned char *)v7 + 288)) {
                    std::__throw_bad_optional_access[abi:ne180100]();
                  }
                  uint64_t v107 = (uint64_t)(*((void *)v7 + 26) - *((void *)v7 + 25)) >> 4;
                  *(_DWORD *)uint64_t buf = 68290562;
                  *(_DWORD *)&uint8_t buf[4] = 0;
                  *(_WORD *)&uint8_t buf[8] = 2082;
                  *(void *)&buf[10] = "";
                  *(_WORD *)&unsigned char buf[18] = 2050;
                  *(double *)&buf[20] = v60;
                  *(_WORD *)&unsigned char buf[28] = 2050;
                  *(double *)&buf[30] = v61;
                  __int16 v162 = 2050;
                  *(double *)v163 = v102;
                  *(_WORD *)&v163[8] = 2050;
                  *(double *)&v163[10] = v104;
                  *(_WORD *)&v163[18] = 2050;
                  *(double *)&v163[20] = v16;
                  __int16 v164 = 2050;
                  uint64_t v165 = v107;
                  _os_log_impl(&dword_25631F000, v106, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"BlueAtlasLocalization\", \"euclideanDistance\":\"%{public}f\", \"euclideanScore\":\"%{public}f\", \"numSharedAPs\":\"%{public}f\", \"rssiScaleFactor\":\"%{public}f\", \"similarityScore\":\"%{public}f\", \"Num labels\":%{public}lu}", buf, 0x4Eu);
                }

                if (!*((unsigned char *)v7 + 288)) {
                  std::__throw_bad_optional_access[abi:ne180100]();
                }
                uint64_t v108 = (uint64_t *)*((void *)v7 + 25);
                v109 = (uint64_t *)*((void *)v7 + 26);
                double v52 = 1.0;
                if (v108 != v109)
                {
                  int v110 = a5 + 2;
                  int v111 = a5[1];
                  uint64_t v51 = MEMORY[0x263EFFA88];
                  do
                  {
                    uint64_t v113 = *v108;
                    uint64_t v112 = v108[1];
                    if ((unint64_t)v111 >= *v110)
                    {
                      uint64_t v115 = (v111 - *a5) >> 5;
                      if ((unint64_t)(v115 + 1) >> 59) {
                        std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
                      }
                      uint64_t v116 = *v110 - (void)*a5;
                      uint64_t v117 = v116 >> 4;
                      if (v116 >> 4 <= (unint64_t)(v115 + 1)) {
                        uint64_t v117 = v115 + 1;
                      }
                      if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFE0) {
                        unint64_t v118 = 0x7FFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v118 = v117;
                      }
                      int v119 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationResultInternal>>((uint64_t)(a5 + 2), v118);
                      v121 = &v119[32 * v115];
                      int v122 = *((_DWORD *)a2 + 40);
                      *(void *)v121 = v113;
                      *((void *)v121 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v112;
                      *((double *)v121 + 2) = v16;
                      *((_DWORD *)v121 + 6) = v122;
                      v124 = *a5;
                      int v123 = a5[1];
                      v125 = v121;
                      unint64_t v13 = 0x263F08000;
                      if (v123 != *a5)
                      {
                        do
                        {
                          long long v126 = *((_OWORD *)v123 - 2);
                          *(_OWORD *)(v125 - 20) = *(_OWORD *)(v123 - 20);
                          *((_OWORD *)v125 - 2) = v126;
                          v125 -= 32;
                          v123 -= 32;
                        }
                        while (v123 != v124);
                        int v123 = *a5;
                      }
                      int v111 = v121 + 32;
                      *a5 = v125;
                      a5[1] = v121 + 32;
                      a5[2] = &v119[32 * v120];
                      if (v123) {
                        operator delete(v123);
                      }
                    }
                    else
                    {
                      int v114 = *((_DWORD *)a2 + 40);
                      *(void *)int v111 = v113;
                      *((void *)v111 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v112;
                      *((double *)v111 + 2) = v16;
                      *((_DWORD *)v111 + 6) = v114;
                      v111 += 32;
                      unint64_t v13 = 0x263F08000;
                    }
                    a5[1] = v111;
                    v108 += 2;
                  }
                  while (v108 != v109);
                  goto LABEL_53;
                }
              }
              else
              {
LABEL_54:
                if (onceToken_MicroLocation_Default != -1) {
                  dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_27);
                }
                __int16 v57 = logObject_MicroLocation_Default;
                double v52 = 1.0;
                if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)uint64_t buf = 68289026;
                  *(_DWORD *)&uint8_t buf[4] = 0;
                  *(_WORD *)&uint8_t buf[8] = 2082;
                  *(void *)&buf[10] = "";
                  _os_log_impl(&dword_25631F000, v57, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"BlueAtlasLocalization, model with empty Blue Atlas Data, publishing empty results\"}", buf, 0x12u);
                }
              }
              uint64_t v51 = MEMORY[0x263EFFA88];
LABEL_53:
              v150[0] = &unk_2704F1620;
              v149[0] = @"LocalizationEventCount";
              v149[1] = @"AssociatedApSimilarity";
              long long v53 = [*(id *)(v13 + 2584) numberWithDouble:v52];
              v150[1] = v53;
              v149[2] = @"RfSimilarity";
              __int16 v54 = [*(id *)(v13 + 2584) numberWithDouble:v16];
              v149[3] = @"isValidAssociatedAccessPointBasedDecision";
              v150[2] = v54;
              v150[3] = v51;
              id v55 = [NSDictionary dictionaryWithObjects:v150 forKeys:v149 count:4];

              CLMicroLocationBlueAtlasLocalizationAlgorithm::sendBlueAtlasLocalizationAnalytics(v56, v55);
              return;
            }
          }
          else if (isValidAssociatedAccessPointBasedDecision)
          {
            goto LABEL_11;
          }
        }
        uint64_t v51 = MEMORY[0x263EFFA80];
        double v52 = 0.0;
        goto LABEL_53;
      }
      CLMicroLocationBlueAtlasLocalizationAlgorithm::localize();
    }
    else
    {
      int v127 = _CLLogObjectForCategory_MicroLocation_Default();
      if (os_log_type_enabled(v127, OS_LOG_TYPE_FAULT))
      {
        CLMicroLocationProtobufHelper::modelTypeToString(*((_DWORD *)v7 + 1), &__p);
        v128 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
             ? &__p
             : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)uint64_t buf = 68289795;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&unsigned char buf[18] = 2082;
        *(void *)&buf[20] = v128;
        *(_WORD *)&unsigned char buf[28] = 2082;
        *(void *)&buf[30] = "assert";
        __int16 v162 = 2081;
        *(void *)v163 = "model.modelType == CLMicroLocationProto::Model::BLUE_ATLAS";
        _os_log_impl(&dword_25631F000, v127, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Blue Atlas Localization, model type is not BLUE_ATLAS!\", \"Model Type\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }

      v129 = _CLLogObjectForCategory_MicroLocation_Default();
      if (os_signpost_enabled(v129))
      {
        CLMicroLocationProtobufHelper::modelTypeToString(*((_DWORD *)v7 + 1), &__p);
        int v130 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
             ? &__p
             : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)uint64_t buf = 68289795;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&unsigned char buf[18] = 2082;
        *(void *)&buf[20] = v130;
        *(_WORD *)&unsigned char buf[28] = 2082;
        *(void *)&buf[30] = "assert";
        __int16 v162 = 2081;
        *(void *)v163 = "model.modelType == CLMicroLocationProto::Model::BLUE_ATLAS";
        _os_signpost_emit_with_name_impl(&dword_25631F000, v129, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Blue Atlas Localization, model type is not BLUE_ATLAS!", "{\"msg%{public}.0s\":\"Blue Atlas Localization, model type is not BLUE_ATLAS!\", \"Model Type\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }

      int v131 = _CLLogObjectForCategory_MicroLocation_Default();
      if (os_log_type_enabled(v131, OS_LOG_TYPE_INFO))
      {
        CLMicroLocationProtobufHelper::modelTypeToString(*((_DWORD *)v7 + 1), &__p);
        CLMicroLocationBlueAtlasLocalizationAlgorithm::localize((char *)&__p, buf, v131);
      }

      abort_report_np();
    }
  }
  else
  {
    CLMicroLocationBlueAtlasLocalizationAlgorithm::localize();
  }
  __break(1u);
}

void sub_25637D144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  if (v60) {
    operator delete(v60);
  }
  std::__function::__value_func<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::~__value_func[abi:ne180100](&a47);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a59);
  CLMicroLocationFingerprint::~CLMicroLocationFingerprint((CLMicroLocationFingerprint *)&STACK[0x2B0]);
  STACK[0x2B0] = (unint64_t)&a28;
  std::vector<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2B0]);
  STACK[0x2B0] = (unint64_t)&a31;
  std::vector<CLMicroLocationFingerprint>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2B0]);
  CLMicroLocationAlgorithms::LocalizerResults::~LocalizerResults(v59);
  _Unwind_Resume(a1);
}

BOOL CLMicroLocationBlueAtlasLocalizationAlgorithm::isValidAssociatedAccessPointBasedDecision(uint64_t a1, uint64_t a2)
{
  BOOL v2 = *(_DWORD *)(a1 + 4) != 3 || *(unsigned char *)(a1 + 288) == 0;
  if (v2 || !*(unsigned char *)(a1 + 272) || !*(unsigned char *)(a2 + 32)) {
    return 0;
  }
  unint64_t v4 = CLMacAddress::toUint64((CLMacAddress *)(a1 + 264));
  if (!*(unsigned char *)(a2 + 32)) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  if (v4 != *(void *)(a2 + 8)) {
    return 0;
  }
  float v5 = *(float *)(a2 + 16);
  uint64_t v6 = +[ULDefaultsSingleton shared];
  uint64_t v7 = [v6 defaultsDictionary];

  uint64_t v8 = [NSString stringWithUTF8String:"ULBlueAtlasStrongAssociatedAccessPointThreshold"];
  unint64_t v9 = [v7 objectForKey:v8];
  if (!v9) {
    goto LABEL_12;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    [v9 floatValue];
  }
  else {
LABEL_12:
  }
    [&unk_2704F0DF0 floatValue];
  float v11 = v10;

  return v5 > v11;
}

void sub_25637D608(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double **CLMicroLocationBlueAtlasAlgorithms::calculateScoreForValue<double>(double **result, uint64_t *a2, int a3, double a4)
{
  float v5 = *result;
  unint64_t v4 = result[1];
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  if ((char *)v4 - (char *)*result == v6 - *a2)
  {
    if (v5 != v4)
    {
      uint64_t v8 = v5 + 1;
      while (v8 != v4)
      {
        double v9 = *(v8 - 1);
        BOOL v10 = *v8 > v9;
        if (!a3) {
          BOOL v10 = *v8 < v9;
        }
        ++v8;
        if (v10)
        {
          id result = (double **)CLMicroLocationBlueAtlasAlgorithms::calculateScoreForValue<double>();
          break;
        }
      }
    }
    if (v5 != v4 && v7 != v6)
    {
      float v11 = v5 + 1;
      uint64_t v12 = v7 + 8;
      do
      {
        double v13 = *(v11 - 1);
        if (a3)
        {
          if (v13 < a4) {
            return result;
          }
        }
        else if (v13 > a4)
        {
          return result;
        }
        if (v11 == v4) {
          break;
        }
        ++v11;
        BOOL v14 = v12 == v6;
        v12 += 8;
      }
      while (!v14);
    }
  }
  else
  {
    CLMicroLocationBlueAtlasAlgorithms::calculateScoreForValue<double>();
    return (double **)CLMicroLocationBlueAtlasLocalizationAlgorithm::countSharedAPsInModelAndTestFingerprint(v15, v16, v17);
  }
  return result;
}

uint64_t CLMicroLocationBlueAtlasLocalizationAlgorithm::countSharedAPsInModelAndTestFingerprint(CLMicroLocationBlueAtlasLocalizationAlgorithm *this, const CLMicroLocationModel *a2, const CLMicroLocationFingerprint *a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)this + 1) != 3 || *((unsigned char *)this + 288) == 0) {
    return 0;
  }
  double v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  std::vector<CLMacAddress>::__init_with_size[abi:ne180100]<CLMacAddress*,CLMacAddress*>(&v24, *((const void **)this + 28), *((void *)this + 29), (uint64_t)(*((void *)this + 29) - *((void *)this + 28)) >> 3);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v20);
  uint64_t v7 = (uint64_t *)*((void *)a2 + 2);
  if (v7)
  {
    uint64_t v4 = 0;
    char v8 = 1;
    do
    {
      if (*((_DWORD *)v7 + 6) == 1)
      {
        if (*((_DWORD *)v7 + 14)) {
          std::__throw_bad_variant_access[abi:ne180100]();
        }
        __p[0] = (void *)CLMacAddress::newFromUint64((CLMacAddress *)v7[4], v6);
        double v9 = v24;
        BOOL v10 = v25;
        if (v24 == v25)
        {
          float v11 = v24;
        }
        else
        {
          while (!CLMacAddress::operator==(v9, __p))
          {
            if (++v9 == v10)
            {
              double v9 = v10;
              break;
            }
          }
          float v11 = v9;
          double v9 = v25;
        }
        if (v11 != v9)
        {
          if ((v8 & 1) == 0) {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)", ", 2);
          }
          CLMacAddress::toPrettyStr((CLMacAddress *)__p, (std::string *)buf);
          if ((v30 & 0x80000000) == 0) {
            uint64_t v12 = buf;
          }
          else {
            uint64_t v12 = *(uint8_t **)buf;
          }
          if ((v30 & 0x80000000) == 0) {
            uint64_t v13 = BYTE3(v30);
          }
          else {
            uint64_t v13 = *(void *)v28;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v12, v13);
          if (SBYTE3(v30) < 0) {
            operator delete(*(void **)buf);
          }
          char v8 = 0;
          uint64_t v4 = (v4 + 1);
        }
      }
      uint64_t v7 = (uint64_t *)*v7;
    }
    while (v7);
  }
  else
  {
    uint64_t v4 = 0;
  }
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_27);
  }
  BOOL v14 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    std::stringbuf::str();
    int v15 = v19 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)uint64_t buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)uint64_t v28 = 2082;
    *(void *)&v28[2] = "";
    __int16 v29 = 2050;
    uint64_t v30 = v4;
    __int16 v31 = 2082;
    uint64_t v32 = v15;
    _os_log_impl(&dword_25631F000, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"countSharedAPsInTestFingerprintAndModel\", \"number of shared APs\":%{public}lu, \"shared AP addresses\":%{public, location:escape_only}s}", buf, 0x26u);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
  }

  v20[0] = *MEMORY[0x263F8C2B8];
  uint64_t v16 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v20 + *(void *)(v20[0] - CLMicroLocationLogic::triggerLearning((CLMicroLocationLogic *)((char *)this - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v21[0] = v16;
  v21[1] = MEMORY[0x263F8C318] + 16;
  if (v22 < 0) {
    operator delete((void *)v21[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x25A2A6280](&v23);
  if (v24)
  {
    uint64_t v25 = v24;
    operator delete(v24);
  }
  return v4;
}

void sub_25637DABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  char v8 = *(void **)(v6 - 152);
  if (v8)
  {
    *(void *)(v6 - 144) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

void CLMicroLocationBlueAtlasLocalizationAlgorithm::sendBlueAtlasLocalizationAnalytics(CLMicroLocationBlueAtlasLocalizationAlgorithm *this, NSDictionary *a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  BOOL v2 = a2;
  id v3 = +[ULDefaultsSingleton shared];
  uint64_t v4 = [v3 defaultsDictionary];

  float v5 = [NSString stringWithUTF8String:"ULAnalyticsSendEventEnabled"];
  uint64_t v6 = [v4 objectForKey:v5];
  if (v6 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    int v7 = [v6 BOOLValue];
  }
  else {
    int v7 = [MEMORY[0x263EFFA88] BOOLValue];
  }
  int v8 = v7;

  if (v8)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_27);
    }
    double v9 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      int v11 = 68289539;
      int v12 = 0;
      __int16 v13 = 2082;
      BOOL v14 = "";
      __int16 v15 = 2081;
      uint64_t v16 = [@"com.apple.MicroLocation.CustomLoiModelLocalize" UTF8String];
      __int16 v17 = 2113;
      BOOL v18 = v2;
      _os_log_impl(&dword_25631F000, v9, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"BlueAtlasLocalization, sending core analytics\", \"event\":%{private, location:escape_only}s, \"eventFields\":%{private, location:escape_only}@}", (uint8_t *)&v11, 0x26u);
    }

    +[ULSendEvent sendEvent:v2 withEventName:@"com.apple.MicroLocation.CustomLoiModelLocalize"];
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_27);
    }
    BOOL v10 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 68289026;
      int v12 = 0;
      __int16 v13 = 2082;
      BOOL v14 = "";
      _os_log_impl(&dword_25631F000, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"BlueAtlasLocalization, CoreAnalytics Disabled\"}", (uint8_t *)&v11, 0x12u);
    }
  }
}

void sub_25637DD78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationBlueAtlasLocalizationAlgorithm::~CLMicroLocationBlueAtlasLocalizationAlgorithm(CLMicroLocationBlueAtlasLocalizationAlgorithm *this)
{
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_19()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

CLMicroLocationProto::AssociatedAccessPointInfo *std::__optional_copy_base<CLMicroLocationProto::AssociatedAccessPointInfo,false>::__optional_copy_base[abi:ne180100](CLMicroLocationProto::AssociatedAccessPointInfo *this, const CLMicroLocationProto::AssociatedAccessPointInfo *a2)
{
  *(unsigned char *)this = 0;
  *((unsigned char *)this + 32) = 0;
  if (*((unsigned char *)a2 + 32))
  {
    CLMicroLocationProto::AssociatedAccessPointInfo::AssociatedAccessPointInfo(this, a2);
    *((unsigned char *)this + 32) = 1;
  }
  return this;
}

void sub_25637DE6C(_Unwind_Exception *exception_object)
{
  if (*((unsigned char *)v1 + 32)) {
    CLMicroLocationProto::AssociatedAccessPointInfo::~AssociatedAccessPointInfo(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_bad_variant_access[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x263F8C3A8] + 16;
  __cxa_throw(exception, MEMORY[0x263F8C1F8], (void (*)(void *))std::bad_variant_access::~bad_variant_access);
}

void sub_25637E0B8(_Unwind_Exception *a1)
{
  float v5 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v5;
    operator delete(v5);
  }

  _Unwind_Resume(a1);
}

void sub_25637E228(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **std::back_insert_iterator<std::vector<CLMicroLocationFingerprint>>::operator=[abi:ne180100](uint64_t **a1, uint64_t a2)
{
  id v3 = *a1;
  unint64_t v4 = (*a1)[1];
  float v5 = *a1;
  unint64_t v7 = v5[2];
  uint64_t v6 = (uint64_t)(v5 + 2);
  if (v4 >= v7)
  {
    uint64_t v8 = std::vector<CLMicroLocationFingerprint>::__push_back_slow_path<CLMicroLocationFingerprint>(v3, a2);
  }
  else
  {
    std::allocator<CLMicroLocationFingerprint>::construct[abi:ne180100]<CLMicroLocationFingerprint,CLMicroLocationFingerprint>(v6, v4, a2);
    uint64_t v8 = v4 + 192;
  }
  v3[1] = v8;
  return a1;
}

uint64_t std::vector<CLMicroLocationFingerprint>::__push_back_slow_path<CLMicroLocationFingerprint>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 6);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x155555555555555) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 6) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 6);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 6) >= 0xAAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x155555555555555;
  }
  else {
    unint64_t v6 = v4;
  }
  BOOL v14 = a1 + 2;
  if (v6) {
    unint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationFingerprint>>((uint64_t)(a1 + 2), v6);
  }
  else {
    unint64_t v7 = 0;
  }
  BOOL v10 = v7;
  int v11 = &v7[192 * v3];
  __int16 v13 = &v7[192 * v6];
  std::allocator<CLMicroLocationFingerprint>::construct[abi:ne180100]<CLMicroLocationFingerprint,CLMicroLocationFingerprint>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  int v12 = v11 + 192;
  std::vector<CLMicroLocationFingerprint>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<CLMicroLocationFingerprint>::~__split_buffer(&v10);
  return v8;
}

void sub_25637E3AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMicroLocationFingerprint>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::vector<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    float v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = std::__variant_detail::__dtor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::~__dtor(v4 - 32);
      while ((void *)v4 != v2);
      float v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v10 = (uint64_t)(v7 - *a1) >> 5;
    if ((unint64_t)(v10 + 1) >> 59) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - *a1;
    uint64_t v12 = v11 >> 4;
    if (v11 >> 4 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      BOOL v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationResultInternal>>(v4, v13);
    }
    else {
      BOOL v14 = 0;
    }
    __int16 v15 = v14;
    uint64_t v16 = &v14[32 * v10];
    BOOL v18 = &v14[32 * v13];
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v16, a2);
    __int16 v17 = v16 + 32;
    std::vector<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::__swap_out_circular_buffer(a1, &v15);
    uint64_t v9 = a1[1];
    uint64_t result = std::__split_buffer<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    uint64_t result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::__move_constructor(*(void *)(v4 - 8), a2);
    uint64_t v9 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v9;
  return result;
}

void sub_25637E534(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 24);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_2704DBB18[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 24) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_2704DBB30[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJyN5boost5uuids4uuidENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJySA_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJyN5boost5uuids4uuidENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJySA_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJyN5boost5uuids4uuidENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJySA_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

uint64_t std::vector<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t result = a2[1];
  while (v4 != v5)
  {
    v4 -= 32;
    uint64_t result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::__move_constructor(result - 32, v4);
  }
  a2[1] = result;
  uint64_t v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    std::__variant_detail::__dtor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::~__dtor(i - 32);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::vector<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::__init_with_size[abi:ne180100]<std::variant<unsigned long long,boost::uuids::uuid,std::string>*,std::variant<unsigned long long,boost::uuids::uuid,std::string>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    char v6 = result;
    std::vector<CLMiLoOdometryTable::Entry>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,std::variant<unsigned long long,boost::uuids::uuid,std::string>*,std::variant<unsigned long long,boost::uuids::uuid,std::string>*,std::variant<unsigned long long,boost::uuids::uuid,std::string>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_25637E784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,std::variant<unsigned long long,boost::uuids::uuid,std::string>*,std::variant<unsigned long long,boost::uuids::uuid,std::string>*,std::variant<unsigned long long,boost::uuids::uuid,std::string>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::__copy_constructor(a4 + v7, a2 + v7);
      v7 += 32;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_25637E804(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 32;
    do
    {
      std::__variant_detail::__dtor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::~__dtor(v4 + v2);
      v2 -= 32;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<CLMacAddress>::__init_with_size[abi:ne180100]<CLMacAddress*,CLMacAddress*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    char v6 = result;
    uint64_t result = std::vector<CLMicroLocationWiFiChannelHistogram>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_25637E888(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_25637EAE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25637EE40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, char a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  _Block_object_dispose(&__p, 8);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::DataMigration>(_OWORD *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  CLMicroLocationProto::ReceivedEvent::ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
  CLMicroLocationProtobufHelper::setSpecificLoggedEvent((CLMicroLocationProtobufHelper *)v9, (CLMicroLocationProto::ReceivedEvent *)a2, v8);
  CLMicroLocationLoggedEventsTable::Entry::Entry(a3, a1, a2[2], (CLMicroLocationProto::ReceivedEvent *)v9, a4);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
}

void sub_25637EF68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_25637F2D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_25637F594(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25637F73C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }

  _Unwind_Resume(a1);
}

void sub_25637F8FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_25637FE48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *__p, uint64_t a14)
{
  _Unwind_Resume(a1);
}

void sub_256380074(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2563803E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a23, 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
}

void sub_2563808C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256380CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_20()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

void sub_256380F54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2563812AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_21()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

void CLMicroLocationPowerLog::logMetrics(CLMicroLocationPowerLog *this, NSString *a2, NSDictionary *a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v4 = a2;
  uint64_t v5 = a3;
  if (+[ULPowerLogBridge ULPowerLogEnabled])
  {
    char v6 = [@"MiLo" stringByAppendingString:v4];
    +[ULPowerLogBridge ULPowerLogTimeInsensitive:v5 event:v6];

    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_30);
    }
    uint64_t v7 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
    {
      int v12 = 138412290;
      unint64_t v13 = v5;
      size_t v8 = "Wrote microlocation metrics to power log: %@";
      uint64_t v9 = v7;
      uint32_t v10 = 12;
LABEL_10:
      _os_log_impl(&dword_25631F000, v9, OS_LOG_TYPE_DEBUG, v8, (uint8_t *)&v12, v10);
    }
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_30);
    }
    uint64_t v11 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v12) = 0;
      size_t v8 = "PowerLog is not enabled so not writing microlocation metrics";
      uint64_t v9 = v11;
      uint32_t v10 = 2;
      goto LABEL_10;
    }
  }
}

void sub_2563814E4(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_22()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

void sub_2563816B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_256381A4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_23()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

double CLMiLoServiceManager::CLMiLoServiceManager(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_2704DBBD8;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 1CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = a1 + 40;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 48) = a1 + 40;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a1 + 72;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + CLMicroLocationSensorsLogic::stopOdometryMonitoringIfRunning(this + 88) = a3;
  *(unsigned char *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = a2;
  double result = 0.0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 168) = 1065353216;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(void *)(a1 + 240) = 0;
  return result;
}

void CLMiLoServiceManager::queryServices(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  id v7 = *(id *)(*(void *)(a1 + 88) + 96);
  size_t v8 = v7;
  if (v7)
  {
    [v7 fetchAllServicesForClientId:a2 andUserId:a3];
  }
  else
  {
    uint64_t v42 = 0;
    long long v43 = 0;
    uint64_t v44 = 0;
  }

  uint64_t v33 = ULSettings::get<ULSettings::ClientIdLocationdToMilodMapping>();
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v9 = a2;
  }
  else {
    uint64_t v9 = (uint64_t *)*a2;
  }
  uint32_t v10 = [NSString stringWithUTF8String:v9];
  uint64_t v34 = ___ZN20CLMiLoServiceManager13queryServicesERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8__block_invoke((uint64_t)v10, v33, v10);

  uint64_t v11 = a2;
  if ([v34 count])
  {
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    obuint64_t j = v34;
    uint64_t v12 = [obj countByEnumeratingWithState:&v38 objects:v52 count:16];
    if (v12)
    {
      uint64_t v13 = *(void *)v39;
      do
      {
        for (uint64_t i = 0; i != v12; ++i)
        {
          if (*(void *)v39 != v13) {
            objc_enumerationMutation(obj);
          }
          __int16 v15 = *(void **)(*((void *)&v38 + 1) + 8 * i);
          id v16 = *(id *)(*(void *)(a1 + 88) + 96);
          __int16 v17 = v15;
          a2 = v11;
          std::string::basic_string[abi:ne180100]<0>(&__p, (char *)[v17 UTF8String]);
          if (v16)
          {
            [v16 fetchAllServicesForClientId:&__p andUserId:a3];
          }
          else
          {
            *(void *)uint64_t buf = 0;
            *(void *)long long v47 = 0;
            *(void *)&v47[8] = 0;
          }
          if (SHIBYTE(v37) < 0) {
            operator delete(__p);
          }

          if (*(void *)buf != *(void *)v47)
          {
            std::vector<CLMiLoServiceTable::Entry>::reserve((uint64_t *)&v42, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)v47 - *(void *)buf) >> 3)+ 0x2E8BA2E8BA2E8BA3 * (v43 - v42));
            std::vector<CLMiLoServiceTable::Entry>::__insert_with_size[abi:ne180100]<std::__wrap_iter<CLMiLoServiceTable::Entry*>,std::__wrap_iter<CLMiLoServiceTable::Entry*>>((uint64_t *)&v42, (uint64_t)v43, *(uint64_t *)buf, *(uint64_t *)v47, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)v47 - *(void *)buf) >> 3));
          }
          std::string __p = buf;
          std::vector<CLMiLoServiceTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        }
        uint64_t v12 = [obj countByEnumeratingWithState:&v38 objects:v52 count:16];
      }
      while (v12);
    }
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  p_superclass = &OBJC_METACLASS___CLMicroLocationLoiBridge.superclass;
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
  }
  uint64_t v19 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a2 + 23) >= 0) {
      int v20 = a2;
    }
    else {
      int v20 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)long long v47 = 2082;
    *(void *)&v47[2] = "";
    *(_WORD *)&v47[10] = 2082;
    *(void *)&v47[12] = v20;
    __int16 v48 = 2050;
    uint64_t v49 = 0x2E8BA2E8BA2E8BA3 * (v43 - v42);
    _os_log_impl(&dword_25631F000, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoServiceManager Client queried services\", \"ClientId\":%{public, location:escape_only}s, \"NumServicesFound\":%{public}llu}", buf, 0x26u);
  }
  uint64_t v21 = v42;
  uint64_t v22 = (uint64_t)v43;
  if (v42 != v43)
  {
    do
    {
      if (p_superclass[429] != (__objc2_class *)-1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
      }
      uint64_t v23 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        double v24 = p_superclass;
        if (*((char *)a2 + 23) >= 0) {
          uint64_t v25 = a2;
        }
        else {
          uint64_t v25 = (uint64_t *)*a2;
        }
        uint64_t v26 = *v21;
        uint64_t v27 = operator new(0x28uLL);
        std::string __p = v27;
        long long v37 = xmmword_256514540;
        *uint64_t v27 = 0u;
        v27[1] = 0u;
        *(void *)((char *)v27 + 29) = 0;
        boost::uuids::to_chars<char *>((uint64_t)(v21 + 1), v27);
        p_p = &__p;
        if (v37 < 0) {
          p_p = __p;
        }
        *(_DWORD *)uint64_t buf = 68289794;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)long long v47 = 2082;
        *(void *)&v47[2] = "";
        *(_WORD *)&v47[10] = 2082;
        *(void *)&v47[12] = v25;
        __int16 v48 = 2050;
        uint64_t v49 = v26;
        __int16 v50 = 2082;
        uint64_t v51 = p_p;
        _os_log_impl(&dword_25631F000, v23, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoServiceManager Client query result\", \"ClientId\":%{public, location:escape_only}s, \"ServiceType\":%{public}llu, \"ServiceUuid\":%{public, location:escape_only}s}", buf, 0x30u);
        if (SHIBYTE(v37) < 0) {
          operator delete(__p);
        }
        a2 = v11;
        p_superclass = v24;
      }

      v21 += 11;
    }
    while (v21 != (uint64_t *)v22);
    uint64_t v29 = (uint64_t)v42;
    uint64_t v30 = (uint64_t)v43;
    uint64_t v45 = (void **)a4;
    while (v29 != v30)
    {
      uint64_t v31 = v29 + 8;
      CLMiLoService::ServiceDescriptor::ServiceDescriptor((__n128 *)buf, (__n128 *)(v29 + 8), *(void *)v29, *(unsigned int *)(v29 + 56));
      std::back_insert_iterator<std::vector<CLMiLoService::ServiceDescriptor>>::operator=[abi:ne180100](&v45, buf);
      uint64_t v29 = v31 + 80;
    }
  }

  *(void *)uint64_t buf = &v42;
  std::vector<CLMiLoServiceTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_256382068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  std::string __p = &a32;
  std::vector<CLMiLoServiceTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

id ULSettings::get<ULSettings::ClientIdLocationdToMilodMapping>()
{
  os_log_t v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  uint64_t v2 = [NSString stringWithUTF8String:"ULClientIdLocationdToMilodMapping"];
  uint64_t v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    id v4 = v3;
  }
  else {
    id v4 = &unk_2704F24C0;
  }

  return v4;
}

void sub_256382224(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id ___ZN20CLMiLoServiceManager13queryServicesERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8__block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v4 = a2;
  id v5 = a3;
  id v6 = objc_alloc_init(MEMORY[0x263EFF980]);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v7 = v4;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v8)
  {
    uint64_t v9 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v16 != v9) {
          objc_enumerationMutation(v7);
        }
        uint64_t v11 = *(void *)(*((void *)&v15 + 1) + 8 * i);
        uint64_t v12 = objc_msgSend(v7, "objectForKey:", v11, (void)v15);
        int v13 = [v12 isEqualToString:v5];

        if (v13) {
          [v6 addObject:v11];
        }
      }
      uint64_t v8 = [v7 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v8);
  }

  return v6;
}

void sub_2563823C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void **std::vector<CLMiLoServiceTable::Entry>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  double result = (void **)(a1 + 2);
  if (0x2E8BA2E8BA2E8BA3 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x2E8BA2E8BA2E8BBLL) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<CLMiLoServiceTable::Entry>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 88 * v6;
    std::vector<CLMiLoServiceTable::Entry>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<CLMiLoServiceTable::Entry>::~__split_buffer(v7);
  }
  return result;
}

void sub_2563824AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMiLoServiceTable::Entry>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

unsigned char *boost::uuids::to_string@<X0>(boost::uuids *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = (char *)operator new(0x28uLL);
  *(void *)a2 = v5;
  *(_OWORD *)(a2 + 8) = xmmword_256514540;
  *(_OWORD *)uint64_t v5 = 0u;
  *((_OWORD *)v5 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
  *(void *)(v5 + 29) = 0;
  return boost::uuids::to_chars<char *>((uint64_t)this, v5);
}

void sub_256382568(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void CLMiLoServiceManager::createService(uuid this@<X2:X1>, uuid a2@<0:X3, 8:X4>, uint64_t a3@<X0>, uint64_t a4@<X5>, uint64_t *a5@<X6>, uint64_t a6@<X8>)
{
  unint64_t v8 = *(void *)&a2.var0[8];
  uint64_t v9 = *(uint64_t **)this.var0;
  uint64_t v55 = *MEMORY[0x263EF8340];
  v54.n128_u64[0] = *(void *)&this.var0[8];
  v54.n128_u64[1] = *(void *)a2.var0;
  *(void *)this.unint64_t var0 = *(void *)a2.var0;
  if (!v12)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
    }
    long long v15 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)v9 + 23) >= 0) {
        long long v16 = v9;
      }
      else {
        long long v16 = (uint64_t *)*v9;
      }
      *(_DWORD *)uint64_t buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2082;
      *(void *)&buf[20] = v16;
      *(_WORD *)&unsigned char buf[28] = 2050;
      *(void *)&buf[30] = v8;
      _os_log_impl(&dword_25631F000, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"MiLoServiceManager cannot create service since only static tokens are supported\", \"ClientId\":%{public, location:escape_only}s, \"ServiceType\":%{public}llu}", buf, 0x26u);
    }
    *(unsigned char *)a6 = 0;
    *(unsigned char *)(a6 + 32) = 0;
    uint64_t v17 = 21;
    goto LABEL_21;
  }
  if (((*(uint64_t (**)(void))(**(void **)(a3 + 88) + 16))(*(void *)(a3 + 88)) & 1) == 0)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
    }
    long long v18 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)v9 + 23) >= 0) {
        uint64_t v19 = v9;
      }
      else {
        uint64_t v19 = (uint64_t *)*v9;
      }
      *(_DWORD *)uint64_t buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2082;
      *(void *)&buf[20] = v19;
      *(_WORD *)&unsigned char buf[28] = 2050;
      *(void *)&buf[30] = v8;
      _os_log_impl(&dword_25631F000, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"MiLoServiceManager cannot create service since database is not available\", \"ClientId\":%{public, location:escape_only}s, \"ServiceType\":%{public}llu}", buf, 0x26u);
    }
    *(unsigned char *)a6 = 0;
    *(unsigned char *)(a6 + 32) = 0;
    uint64_t v17 = 22;
LABEL_21:
    *(void *)(a6 + 40) = v17;
    return;
  }
  id v13 = *(id *)(*(void *)(a3 + 88) + 96);
  uint64_t v14 = v13;
  if (v13)
  {
    [v13 fetchAllServicesForClientId:v9 andUserId:a5];
  }
  else
  {
    long long v43 = 0;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
  }

  unint64_t v20 = CLMiLoService::locationTypesBitsetFromVector(a4);
  unint64_t v42 = v20;
  uint64_t v21 = v43;
  uint64_t v22 = v44;
  if (v43 == v44)
  {
    unint64_t v23 = 0;
LABEL_35:
    if (CLMiLoServiceManager::isNewServiceAllowed(v20, v8, v23))
    {
      id v27 = *(id *)(*(void *)(a3 + 88) + 96);
      __n128 v28 = v54;
      double v29 = cl::chrono::CFAbsoluteTimeClock::now();
      CLMiLoServiceTable::Entry::Entry(buf, v28.n128_u64[0], v28.n128_u64[1], v8, v9, v42, a5, v29);
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      uint64_t v41 = 0;
      uint64_t v46 = (void **)&v39;
      char v47 = 0;
      uint64_t v39 = (uint64_t)operator new(0x58uLL);
      uint64_t v40 = v39;
      uint64_t v41 = v39 + 88;
      uint64_t v40 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMiLoServiceTable::Entry>,CLMiLoServiceTable::Entry const*,CLMiLoServiceTable::Entry const*,CLMiLoServiceTable::Entry*>((uint64_t)&v41, (uint64_t)buf, (uint64_t)&v54, v39);
      [v27 insertEntries:&v39];
      uint64_t v46 = (void **)&v39;
      std::vector<CLMiLoServiceTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v46);
      if (v53 < 0) {
        operator delete(__p);
      }
      if (SBYTE5(v51) < 0) {
        operator delete(*(void **)&buf[32]);
      }

      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
      }
      uint64_t v30 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        if (*((char *)v9 + 23) >= 0) {
          uint64_t v31 = v9;
        }
        else {
          uint64_t v31 = (uint64_t *)*v9;
        }
        if (*((char *)a5 + 23) < 0) {
          a5 = (uint64_t *)*a5;
        }
        uint64_t v32 = (char *)operator new(0x28uLL);
        *(void *)(v32 + 29) = 0;
        *(_OWORD *)uint64_t v32 = 0u;
        *((_OWORD *)v32 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
        boost::uuids::to_chars<char *>((uint64_t)&v54, v32);
        *(_DWORD *)uint64_t buf = 68290050;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&unsigned char buf[18] = 2082;
        *(void *)&buf[20] = v31;
        *(_WORD *)&unsigned char buf[28] = 2082;
        *(void *)&buf[30] = a5;
        *(_WORD *)&unsigned char buf[38] = 2050;
        unint64_t v49 = v8;
        __int16 v50 = 2082;
        uint64_t v51 = v32;
        _os_log_impl(&dword_25631F000, v30, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"MiLoServiceManager new service created for client\", \"ClientId\":%{public, location:escape_only}s, \"UserId\":%{public, location:escape_only}s, \"ServiceType\":%{public}llu, \"ServiceUuid\":%{public, location:escape_only}s}", buf, 0x3Au);
        operator delete(v32);
      }

      CLMiLoService::ServiceDescriptor::ServiceDescriptor((__n128 *)buf, &v54, v8, v42);
      long long v33 = *(_OWORD *)&buf[16];
      *(_OWORD *)a6 = *(_OWORD *)buf;
      *(_OWORD *)(a6 + 16) = v33;
      *(unsigned char *)(a6 + 32) = 1;
      uint64_t v34 = -1;
    }
    else
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
      }
      uint64_t v35 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
        if (*((char *)v9 + 23) >= 0) {
          unint64_t v36 = v9;
        }
        else {
          unint64_t v36 = (uint64_t *)*v9;
        }
        *(_DWORD *)uint64_t buf = 68289794;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&unsigned char buf[18] = 2082;
        *(void *)&buf[20] = v36;
        *(_WORD *)&unsigned char buf[28] = 2050;
        *(void *)&buf[30] = v8;
        *(_WORD *)&unsigned char buf[38] = 2050;
        unint64_t v49 = v23;
        _os_log_impl(&dword_25631F000, v35, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"MiLoServiceManager Client tried to create service, failed since not allowed\", \"ClientId\":%{public, location:escape_only}s, \"ServiceType\":%{public}llu, \"NumIdenticalServices\":%{public}llu}", buf, 0x30u);
      }
      *(unsigned char *)a6 = 0;
      *(unsigned char *)(a6 + 32) = 0;
      uint64_t v34 = 21;
    }
  }
  else
  {
    unint64_t v23 = 0;
    while (1)
    {
      uint64_t v39 = CLMiLoService::uint64ToLocationTypesBitset(v21[7]);
      unint64_t v20 = std::__equal_aligned[abi:ne180100]<std::__bitset<1ul,32ul>,true,true>(&v42, 0, (uint64_t)&v42, 0x20u, &v39);
      if (v21[1] == v54.n128_u64[0] && v21[2] == v54.n128_u64[1]) {
        break;
      }
      uint64_t v25 = *v21;
      v21 += 11;
      if (v25 == v8) {
        uint64_t v26 = v20;
      }
      else {
        uint64_t v26 = 0;
      }
      v23 += v26;
      if (v21 == v22) {
        goto LABEL_35;
      }
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
    }
    long long v37 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      long long v38 = (char *)operator new(0x28uLL);
      *(void *)(v38 + 29) = 0;
      *(_OWORD *)long long v38 = 0u;
      *((_OWORD *)v38 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)&v54, v38);
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2082;
      *(void *)&buf[20] = v38;
      _os_log_impl(&dword_25631F000, v37, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"MiLoServiceManager client tried to create an already existing service\", \"ServiceUuid\":%{public, location:escape_only}s}", buf, 0x1Cu);
      operator delete(v38);
    }

    *(unsigned char *)a6 = 0;
    *(unsigned char *)(a6 + 32) = 0;
    uint64_t v34 = 5;
  }
  *(void *)(a6 + 40) = v34;
  *(void *)uint64_t buf = &v43;
  std::vector<CLMiLoServiceTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_256382C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char *a19)
{
  operator delete(v20);

  a19 = &a14;
  std::vector<CLMiLoServiceTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  _Unwind_Resume(a1);
}

unint64_t anonymous namespace'::_findStaticServiceTypeById(_anonymous_namespace_ *this, uuid a2)
{
  v92[2] = *MEMORY[0x263EF8340];
  v92[0] = this;
  v92[1] = *(void *)a2.var0;
  uint64_t v2 = (char *)objc_msgSend(@"00000000-0000-0000-0000-000000000001", "UTF8String", *(void *)&a2.var0[8]);
  size_t v3 = strlen(v2);
  v91[0] = boost::uuids::string_generator::operator()<char const*>((boost::uuids::string_generator *)&v89, (unsigned __int8 *)v2, (unsigned __int8 *)&v2[v3]);
  v91[1] = v4;
  v91[2] = 4;
  uint64_t v5 = (char *)[@"00000000-0000-0000-0000-000000000002" UTF8String];
  size_t v6 = strlen(v5);
  v91[3] = boost::uuids::string_generator::operator()<char const*>((boost::uuids::string_generator *)&v88, (unsigned __int8 *)v5, (unsigned __int8 *)&v5[v6]);
  v91[4] = v7;
  v91[5] = 4;
  unint64_t v8 = (char *)[@"00000000-0000-0000-0000-000000000003" UTF8String];
  size_t v9 = strlen(v8);
  v91[6] = boost::uuids::string_generator::operator()<char const*>((boost::uuids::string_generator *)&v87, (unsigned __int8 *)v8, (unsigned __int8 *)&v8[v9]);
  v91[7] = v10;
  v91[8] = 4;
  uint64_t v11 = (char *)[@"00000000-0000-0000-0000-000000000004" UTF8String];
  size_t v12 = strlen(v11);
  v91[9] = boost::uuids::string_generator::operator()<char const*>((boost::uuids::string_generator *)&v86, (unsigned __int8 *)v11, (unsigned __int8 *)&v11[v12]);
  v91[10] = v13;
  v91[11] = 4;
  uint64_t v14 = (char *)[@"00000000-0000-0000-0000-000000000005" UTF8String];
  size_t v15 = strlen(v14);
  v91[12] = boost::uuids::string_generator::operator()<char const*>((boost::uuids::string_generator *)&v85, (unsigned __int8 *)v14, (unsigned __int8 *)&v14[v15]);
  v91[13] = v16;
  v91[14] = 4;
  uint64_t v17 = (char *)[@"00000000-0000-0000-0000-000000000006" UTF8String];
  size_t v18 = strlen(v17);
  v91[15] = boost::uuids::string_generator::operator()<char const*>((boost::uuids::string_generator *)&v84, (unsigned __int8 *)v17, (unsigned __int8 *)&v17[v18]);
  v91[16] = v19;
  v91[17] = 4;
  unint64_t v20 = (char *)[@"00000000-0000-0000-0000-000000000007" UTF8String];
  size_t v21 = strlen(v20);
  v91[18] = boost::uuids::string_generator::operator()<char const*>((boost::uuids::string_generator *)&v83, (unsigned __int8 *)v20, (unsigned __int8 *)&v20[v21]);
  v91[19] = v22;
  v91[20] = 4;
  unint64_t v23 = (char *)[@"00000000-0000-0000-0000-000000000008" UTF8String];
  size_t v24 = strlen(v23);
  v91[21] = boost::uuids::string_generator::operator()<char const*>((boost::uuids::string_generator *)&v82, (unsigned __int8 *)v23, (unsigned __int8 *)&v23[v24]);
  v91[22] = v25;
  v91[23] = 4;
  uint64_t v26 = (char *)[@"00000000-0000-0000-0000-000000000009" UTF8String];
  size_t v27 = strlen(v26);
  v91[24] = boost::uuids::string_generator::operator()<char const*>((boost::uuids::string_generator *)&v81, (unsigned __int8 *)v26, (unsigned __int8 *)&v26[v27]);
  v91[25] = v28;
  v91[26] = 4;
  double v29 = (char *)[@"00000000-0000-0000-0000-000000000010" UTF8String];
  size_t v30 = strlen(v29);
  v91[27] = boost::uuids::string_generator::operator()<char const*>((boost::uuids::string_generator *)&v80, (unsigned __int8 *)v29, (unsigned __int8 *)&v29[v30]);
  v91[28] = v31;
  v91[29] = 4;
  uint64_t v32 = (char *)[@"00000000-0000-0000-0000-000000000011" UTF8String];
  size_t v33 = strlen(v32);
  v91[30] = boost::uuids::string_generator::operator()<char const*>((boost::uuids::string_generator *)&v79, (unsigned __int8 *)v32, (unsigned __int8 *)&v32[v33]);
  v91[31] = v34;
  v91[32] = 4;
  uint64_t v35 = (char *)[@"00000000-0000-0000-0000-000000000012" UTF8String];
  size_t v36 = strlen(v35);
  v91[33] = boost::uuids::string_generator::operator()<char const*>((boost::uuids::string_generator *)&v78, (unsigned __int8 *)v35, (unsigned __int8 *)&v35[v36]);
  v91[34] = v37;
  v91[35] = 1;
  long long v38 = (char *)[@"00000000-0000-0000-0000-000000000013" UTF8String];
  size_t v39 = strlen(v38);
  v91[36] = boost::uuids::string_generator::operator()<char const*>((boost::uuids::string_generator *)&v77, (unsigned __int8 *)v38, (unsigned __int8 *)&v38[v39]);
  v91[37] = v40;
  v91[38] = 2;
  uint64_t v41 = (char *)[@"00000000-0000-0000-0000-000000000014" UTF8String];
  size_t v42 = strlen(v41);
  v91[39] = boost::uuids::string_generator::operator()<char const*>((boost::uuids::string_generator *)&v76, (unsigned __int8 *)v41, (unsigned __int8 *)&v41[v42]);
  v91[40] = v43;
  v91[41] = 3;
  uint64_t v44 = (char *)[@"00000000-0000-0000-0000-000000000015" UTF8String];
  size_t v45 = strlen(v44);
  v91[42] = boost::uuids::string_generator::operator()<char const*>((boost::uuids::string_generator *)&v75, (unsigned __int8 *)v44, (unsigned __int8 *)&v44[v45]);
  v91[43] = v46;
  v91[44] = 4;
  char v47 = (char *)[@"00000000-0000-0000-0000-000000000016" UTF8String];
  size_t v48 = strlen(v47);
  v91[45] = boost::uuids::string_generator::operator()<char const*>((boost::uuids::string_generator *)&v74, (unsigned __int8 *)v47, (unsigned __int8 *)&v47[v48]);
  v91[46] = v49;
  v91[47] = 1;
  __int16 v50 = (char *)[@"00000000-0000-0000-0000-000000000017" UTF8String];
  size_t v51 = strlen(v50);
  v91[48] = boost::uuids::string_generator::operator()<char const*>((boost::uuids::string_generator *)&v73, (unsigned __int8 *)v50, (unsigned __int8 *)&v50[v51]);
  v91[49] = v52;
  v91[50] = 2;
  char v53 = (char *)[@"00000000-0000-0000-0000-000000000018" UTF8String];
  size_t v54 = strlen(v53);
  v91[51] = boost::uuids::string_generator::operator()<char const*>((boost::uuids::string_generator *)&v72, (unsigned __int8 *)v53, (unsigned __int8 *)&v53[v54]);
  v91[52] = v55;
  v91[53] = 4;
  uint64_t v56 = (char *)[@"00000000-0000-0000-0000-000000000019" UTF8String];
  size_t v57 = strlen(v56);
  v91[54] = boost::uuids::string_generator::operator()<char const*>((boost::uuids::string_generator *)&v71, (unsigned __int8 *)v56, (unsigned __int8 *)&v56[v57]);
  v91[55] = v58;
  v91[56] = 1;
  uint64_t v59 = (char *)[@"00000000-0000-0000-0000-000000000020" UTF8String];
  size_t v60 = strlen(v59);
  v91[57] = boost::uuids::string_generator::operator()<char const*>((boost::uuids::string_generator *)&v70, (unsigned __int8 *)v59, (unsigned __int8 *)&v59[v60]);
  v91[58] = v61;
  v91[59] = 4;
  unint64_t v62 = (char *)[@"00000000-0000-0000-0000-000000000021" UTF8String];
  size_t v63 = strlen(v62);
  v91[60] = boost::uuids::string_generator::operator()<char const*>((boost::uuids::string_generator *)&v69, (unsigned __int8 *)v62, (unsigned __int8 *)&v62[v63]);
  v91[61] = v64;
  v91[62] = 4;
  std::unordered_map<boost::uuids::uuid,ULServiceType>::unordered_map((uint64_t)v90, v91, 21);
  uint64_t v65 = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::find<boost::uuids::uuid>(v90, v92);
  if (v65)
  {
    unint64_t v66 = v65[4] & 0xFFFFFFFFFFFFFF00;
    uint64_t v67 = v65[4];
  }
  else
  {
    uint64_t v67 = 0;
    unint64_t v66 = 0;
  }
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v90);
  return v66 | v67;
}

void sub_2563831FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL CLMiLoServiceManager::isNewServiceAllowed(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  switch(a2)
  {
    case 1:
      uint64_t v5 = +[ULDefaultsSingleton shared];
      size_t v6 = [v5 defaultsDictionary];

      uint64_t v7 = [NSString stringWithUTF8String:"ULMaximumNumberOfCreatedUnsupervisedServicesPerClient"];
      unint64_t v8 = [v6 objectForKey:v7];
      if (!v8) {
        goto LABEL_23;
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        goto LABEL_23;
      }
      goto LABEL_22;
    case 2:
      size_t v12 = +[ULDefaultsSingleton shared];
      size_t v6 = [v12 defaultsDictionary];

      uint64_t v7 = [NSString stringWithUTF8String:"ULMaximumNumberOfCreatedBinaryRoiServicesPerClient"];
      unint64_t v8 = [v6 objectForKey:v7];
      if (v8)
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          goto LABEL_22;
        }
      }
      goto LABEL_23;
    case 3:
      uint64_t v13 = +[ULDefaultsSingleton shared];
      size_t v6 = [v13 defaultsDictionary];

      uint64_t v7 = [NSString stringWithUTF8String:"ULMaximumNumberOfCreatedMulticlassServicesPerClient"];
      unint64_t v8 = [v6 objectForKey:v7];
      if (v8)
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          goto LABEL_22;
        }
      }
LABEL_23:
      uint64_t v15 = [&unk_2704F1680 unsignedLongValue];
      goto LABEL_25;
    case 4:
      uint64_t v14 = +[ULDefaultsSingleton shared];
      size_t v6 = [v14 defaultsDictionary];

      uint64_t v7 = [NSString stringWithUTF8String:"ULMaximumNumberOfCreatedSimilarityListServicesPerClient"];
      unint64_t v8 = [v6 objectForKey:v7];
      if (v8 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
LABEL_22:
      }
        uint64_t v15 = [v8 unsignedLongValue];
      else {
        uint64_t v15 = [&unk_2704F16B0 unsignedLongValue];
      }
LABEL_25:
      unint64_t v16 = v15;

      BOOL v11 = v16 > a3;
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
      }
      uint64_t v17 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
        int v19 = 68290050;
        int v20 = 0;
        __int16 v21 = 2082;
        uint64_t v22 = "";
        __int16 v23 = 2050;
        uint64_t v24 = a2;
        __int16 v25 = 2050;
        uint64_t v26 = v16;
        __int16 v27 = 2050;
        uint64_t v28 = a3;
        __int16 v29 = 1026;
        BOOL v30 = v16 > a3;
        _os_log_impl(&dword_25631F000, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoServiceManager::isNewServiceAllowed\", \"ServiceType\":%{public}lu, \"Allowed\":%{public}lu, \"AlreadyCreated\":%{public}lu, \"Verdict\":%{public}hhd}", (uint8_t *)&v19, 0x36u);
      }
      break;
    default:
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
      }
      size_t v9 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
      {
        int v19 = 68289282;
        int v20 = 0;
        __int16 v21 = 2082;
        uint64_t v22 = "";
        __int16 v23 = 2050;
        uint64_t v24 = a2;
        _os_log_impl(&dword_25631F000, v9, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"unhandled serviceType\", \"ServiceType\":%{public}lu}", (uint8_t *)&v19, 0x1Cu);
      }
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
      }
      uint64_t v10 = logObject_MicroLocation_Default;
      if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
      {
        int v19 = 68289282;
        int v20 = 0;
        __int16 v21 = 2082;
        uint64_t v22 = "";
        __int16 v23 = 2050;
        uint64_t v24 = a2;
        _os_signpost_emit_with_name_impl(&dword_25631F000, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "unhandled serviceType", "{\"msg%{public}.0s\":\"unhandled serviceType\", \"ServiceType\":%{public}lu}", (uint8_t *)&v19, 0x1Cu);
      }
      BOOL v11 = 0;
      break;
  }
  return v11;
}

void sub_256383704(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLMiLoServiceTable::Entry::~Entry(void **this)
{
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
}

unint64_t CLMiLoServiceManager::deleteService@<X0>(uuid a1@<0:X2, 8:X3>, CLMiLoServiceManager *a2@<X0>, unsigned __int8 *a3@<X1>, uint64_t a4@<X8>)
{
  uint64_t v4 = *(void *)&a1.var0[8];
  uint64_t v5 = *(void *)a1.var0;
  uint64_t v42 = *MEMORY[0x263EF8340];
  uuid v41 = a1;
  unint64_t result = CLMiLoServiceManager::loadedServiceByUuid(a2, a1);
  if (v10)
  {
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 32) = 0;
    *(void *)(a4 + 40) = 23;
    return result;
  }
  id v11 = *(id *)(*((void *)a2 + 11) + 96);
  size_t v12 = v11;
  if (v11)
  {
    objc_msgSend(v11, "fetchServiceByUUID:", v5, v4);
  }
  else
  {
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    memset(v36, 0, sizeof(v36));
  }

  if (BYTE8(v40))
  {
    uint64_t v13 = a3[23];
    if ((v13 & 0x80u) == 0) {
      uint64_t v14 = a3[23];
    }
    else {
      uint64_t v14 = *((void *)a3 + 1);
    }
    uint64_t v15 = BYTE7(v38);
    if (SBYTE7(v38) < 0) {
      uint64_t v15 = *((void *)&v37 + 1);
    }
    if (v14 != v15) {
      goto LABEL_24;
    }
    if ((SBYTE7(v38) & 0x80u) == 0) {
      unint64_t v16 = (unsigned __int8 *)&v37;
    }
    else {
      unint64_t v16 = (unsigned __int8 *)v37;
    }
    if ((v13 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a3, v16, *((void *)a3 + 1))) {
        goto LABEL_24;
      }
    }
    else if (a3[23])
    {
      uint64_t v17 = a3;
      while (*v17 == *v16)
      {
        ++v17;
        ++v16;
        if (!--v13) {
          goto LABEL_50;
        }
      }
LABEL_24:
      int v19 = ULSettings::get<ULSettings::ClientIdLocationdToMilodMapping>();
      if (!BYTE8(v40)) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      if ((SBYTE7(v38) & 0x80u) == 0) {
        int v20 = &v37;
      }
      else {
        int v20 = (long long *)v37;
      }
      __int16 v21 = [NSString stringWithUTF8String:v20];
      uint64_t v22 = [v19 objectForKey:v21];

      if (!v22) {
        goto LABEL_37;
      }
      id v23 = v22;
      uint64_t v24 = (const char *)[v23 UTF8String];
      size_t v25 = strlen(v24);
      size_t v26 = v25;
      if ((char)a3[23] < 0)
      {
        if (v25 == *((void *)a3 + 1))
        {
          if (v25 == -1) {
            goto LABEL_58;
          }
          __int16 v27 = *(const void **)a3;
LABEL_36:
          if (memcmp(v27, v24, v26)) {
            goto LABEL_37;
          }

          goto LABEL_50;
        }
      }
      else if (v25 == a3[23])
      {
        __int16 v27 = a3;
        if (v26 == -1) {
LABEL_58:
        }
          std::string::__throw_out_of_range[abi:ne180100]();
        goto LABEL_36;
      }
LABEL_37:
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
      }
      uint64_t v28 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        if ((a3[23] & 0x80u) == 0) {
          __int16 v29 = a3;
        }
        else {
          __int16 v29 = *(const void **)a3;
        }
        BOOL v30 = (char *)operator new(0x28uLL);
        *(void *)(v30 + 29) = 0;
        *(_OWORD *)BOOL v30 = 0u;
        *((_OWORD *)v30 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
        boost::uuids::to_chars<char *>((uint64_t)&v41, v30);
        if (!BYTE8(v40)) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        if ((SBYTE7(v38) & 0x80u) == 0) {
          uint64_t v31 = &v37;
        }
        else {
          uint64_t v31 = (long long *)v37;
        }
        *(void *)size_t v33 = 68289794;
        *(_WORD *)&v33[8] = 2082;
        *(void *)&v33[10] = "";
        *(_WORD *)&v33[18] = 2082;
        *(void *)&v33[20] = v29;
        *(_WORD *)&v33[28] = 2082;
        *(void *)&v33[30] = v30;
        __int16 v34 = 2082;
        uint64_t v35 = v31;
        _os_log_impl(&dword_25631F000, v28, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"MiLoServiceManager cannot delete  service since client unauthorised to delete\", \"ClientId\":%{public, location:escape_only}s, \"ServiceUuid\":%{public, location:escape_only}s, \"Expected ClientId\":%{public, location:escape_only}s}", v33, 0x30u);
        operator delete(v30);
      }

      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 32) = 0;
      *(void *)(a4 + 40) = 25;

      return std::__optional_destruct_base<CLMiLoServiceTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v36);
    }
LABEL_50:
    if (objc_msgSend(*(id *)(*((void *)a2 + 11) + 96), "deleteServiceForUUID:", *(void *)v41.var0, *(void *)&v41.var0[8]))
    {
      if (!BYTE8(v40)) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      CLMiLoService::ServiceDescriptor::ServiceDescriptor((__n128 *)v33, (__n128 *)&v41, v36[0], DWORD2(v38));
      long long v32 = *(_OWORD *)&v33[16];
      *(_OWORD *)a4 = *(_OWORD *)v33;
      *(_OWORD *)(a4 + 16) = v32;
      *(unsigned char *)(a4 + 32) = 1;
      uint64_t v18 = -1;
    }
    else
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 32) = 0;
      uint64_t v18 = 26;
    }
    goto LABEL_54;
  }
  *(unsigned char *)a4 = 0;
  *(unsigned char *)(a4 + 32) = 0;
  uint64_t v18 = 24;
LABEL_54:
  *(void *)(a4 + 40) = v18;
  return std::__optional_destruct_base<CLMiLoServiceTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v36);
}

void sub_256383BC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

unint64_t CLMiLoServiceManager::loadedServiceByUuid(CLMiLoServiceManager *this, uuid a2)
{
  size_t v3 = (char *)this + 40;
  uint64_t v4 = (char *)*((void *)this + 6);
  if (v4 == (char *)this + 40) {
    return 0;
  }
  unsigned __int8 v5 = 0;
  do
  {
    uint64_t v6 = CLMiLoService::uuid((CLMiLoService *)(v4 + 16));
    if (v6 == *(void *)a2.var0 && v7 == *(void *)&a2.var0[8])
    {
      unsigned __int8 v5 = (_BYTE)v4 + 16;
      unint64_t v2 = (unint64_t)(v4 + 16) >> 8;
    }
    uint64_t v4 = (char *)*((void *)v4 + 1);
  }
  while (v4 != v3);
  return v5 | (v2 << 8);
}

uint64_t CLMiLoServiceManager::connect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v87 = *MEMORY[0x263EF8340];
  *(void *)v86.unint64_t var0 = a3;
  *(void *)&v86.var0[8] = a4;
  *(void *)&long long v85 = a6;
  *((void *)&v85 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = a7;
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
  }
  size_t v12 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v13 = a2;
    }
    else {
      uint64_t v13 = *(void *)a2;
    }
    uint64_t v14 = (char *)operator new(0x28uLL);
    *(void *)char v77 = v14;
    *(_OWORD *)&v77[8] = xmmword_256514540;
    *(_OWORD *)uint64_t v14 = 0u;
    *((_OWORD *)v14 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
    *(void *)(v14 + 29) = 0;
    boost::uuids::to_chars<char *>((uint64_t)&v86, v14);
    if (v77[23] >= 0) {
      uint64_t v15 = v77;
    }
    else {
      uint64_t v15 = *(unsigned char **)v77;
    }
    if (*(char *)(a8 + 23) >= 0) {
      uint64_t v16 = a8;
    }
    else {
      uint64_t v16 = *(void *)a8;
    }
    uint64_t v17 = operator new(0x28uLL);
    std::string __p = v17;
    long long v70 = xmmword_256514540;
    *uint64_t v17 = 0u;
    v17[1] = 0u;
    *(void *)((char *)v17 + 29) = 0;
    boost::uuids::to_chars<char *>((uint64_t)&v85, v17);
    p_p = &__p;
    if (v70 < 0) {
      p_p = __p;
    }
    *(_DWORD *)uint64_t buf = 68290050;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 2082;
    *(void *)&buf[20] = v13;
    *(_WORD *)&unsigned char buf[28] = 2082;
    *(void *)&buf[30] = v15;
    __int16 v72 = 2082;
    char v73 = (void **)v16;
    __int16 v74 = 2082;
    unint64_t v75 = (unint64_t)p_p;
    _os_log_impl(&dword_25631F000, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"MiLoServiceManager connection parameters: \", \"ClientId\":%{public, location:escape_only}s, \"ServiceUuid\":%{public, location:escape_only}s, \"UserID\":%{public, location:escape_only}s, \"connectionToken\":%{public, location:escape_only}s}", buf, 0x3Au);
    if (SHIBYTE(v70) < 0) {
      operator delete(__p);
    }
    if ((v77[23] & 0x80000000) != 0) {
      operator delete(*(void **)v77);
    }
  }

  CLMiLoServiceManager::loadedServiceByUuid((CLMiLoServiceManager *)a1, v86);
  if (v19.var0[0])
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
    }
    int v20 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a2 + 23) < 0) {
        a2 = *(void *)a2;
      }
      __int16 v21 = (char *)operator new(0x28uLL);
      *(void *)(v21 + 29) = 0;
      *(_OWORD *)__int16 v21 = 0u;
      *((_OWORD *)v21 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)&v86, v21);
      *(_DWORD *)uint64_t buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2082;
      *(void *)&buf[20] = a2;
      *(_WORD *)&unsigned char buf[28] = 2082;
      *(void *)&buf[30] = v21;
      _os_log_impl(&dword_25631F000, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"MiLoServiceManager cannot connect to service since service already has active connection\", \"ClientId\":%{public, location:escape_only}s, \"ServiceUuid\":%{public, location:escape_only}s}", buf, 0x26u);
      operator delete(v21);
    }

    return 18;
  }
  *(void *)v19.unint64_t var0 = *(void *)&v86.var0[8];
  char v26 = v25;
  if (v25)
  {
    uint64_t v27 = StaticServiceTypeById;
    if (((*(uint64_t (**)(void))(**(void **)(a1 + 88) + 16))(*(void *)(a1 + 88)) & 1) == 0)
    {
      long long v83 = *(_OWORD *)a5;
      char v84 = *(unsigned char *)(a5 + 16);
      if (CLMiLoServiceManager::addToRequestsAwaitingDb(a1, a2, *(uint64_t *)v86.var0, *(uint64_t *)&v86.var0[8], &v83, v85, *((uint64_t *)&v85 + 1), a8))return -1; {
      else
      }
        return 18;
    }
    long long v81 = *(_OWORD *)a5;
    char v82 = *(unsigned char *)(a5 + 16);
    if (CLMiLoServiceManager::migrateLegacyServiceIdToServiceId(a1, *(uint64_t *)v86.var0, *(uint64_t *)&v86.var0[8], (boost::uuids *)&v81))
    {
      CLMiLoServiceManager::findOrCreateServiceEntryWithServiceId(a1, *(uint64_t *)v86.var0, *(uint64_t *)&v86.var0[8], (void **)a2, v27, v26, 1, (uint64_t)v77);
      if (v80)
      {
        uint64_t v28 = *(void *)(a1 + 48);
        if (v28 != a1 + 40)
        {
          int v29 = 0;
          while (1)
          {
            BOOL v30 = (unsigned __int8 *)CLMiLoService::clientId((CLMiLoService *)(v28 + 16));
            uint64_t v31 = v30[23];
            if ((v31 & 0x80u) == 0) {
              uint64_t v32 = v30[23];
            }
            else {
              uint64_t v32 = *((void *)v30 + 1);
            }
            uint64_t v33 = v79;
            if ((v79 & 0x80u) != 0) {
              uint64_t v33 = v78[1];
            }
            if (v32 != v33) {
              goto LABEL_50;
            }
            __int16 v34 = (v79 & 0x80u) == 0 ? (unsigned __int8 *)v78 : (unsigned __int8 *)v78[0];
            if ((v31 & 0x80) == 0) {
              break;
            }
            if (!memcmp(*(const void **)v30, v34, *((void *)v30 + 1))) {
              goto LABEL_49;
            }
LABEL_50:
            uint64_t v28 = *(void *)(v28 + 8);
            if (v28 == a1 + 40) {
              goto LABEL_78;
            }
          }
          if (v30[23])
          {
            while (*v30 == *v34)
            {
              ++v30;
              ++v34;
              if (!--v31) {
                goto LABEL_49;
              }
            }
            goto LABEL_50;
          }
LABEL_49:
          uint64_t v35 = CLMiLoService::serviceType((CLMiLoService *)(v28 + 16));
          v29 += v35 == *(void *)v77;
          goto LABEL_50;
        }
        int v29 = 0;
LABEL_78:
        CLMiLoServiceManager::migrateLegacyClientIdToClientIdIfNecessary(a1, (uint64_t)v77, (const std::string *)a2);
        size_t v45 = std::__optional_copy_base<CLMiLoServiceTable::Entry,false>::__optional_copy_base[abi:ne180100](v76, (uint64_t)v77);
        uint64_t isClientAllowedToConnect = CLMiLoServiceManager::isClientAllowedToConnect((uint64_t)v45, v76, (uint64_t *)a2, *(uint64_t *)v86.var0, *(uint64_t *)&v86.var0[8], v29);
        char v47 = v46;
        std::__optional_destruct_base<CLMiLoServiceTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v76);
        if (!v47)
        {
          size_t v48 = _CLLogObjectForCategory_MicroLocation_Default();
          if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
          {
            int v49 = *(char *)(a2 + 23);
            uint64_t v50 = *(void *)a2;
            boost::uuids::to_string((boost::uuids *)&v86, (uint64_t)&__p);
            uint64_t v51 = v49 >= 0 ? a2 : v50;
            uint64_t v52 = v70 >= 0 ? &__p : (void **)__p;
            *(_DWORD *)uint64_t buf = 68290050;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)&uint8_t buf[8] = 2082;
            *(void *)&buf[10] = "";
            *(_WORD *)&unsigned char buf[18] = 2082;
            *(void *)&buf[20] = v51;
            *(_WORD *)&unsigned char buf[28] = 2082;
            *(void *)&buf[30] = v52;
            __int16 v72 = 2050;
            char v73 = (void **)*(unsigned int *)v77;
            __int16 v74 = 2050;
            unint64_t v75 = (v29 + 1);
            _os_log_impl(&dword_25631F000, v48, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"MiLoServiceManager client connected to service\", \"ClientId\":%{public, location:escape_only}s, \"ServiceUuid\":%{public, location:escape_only}s, \"ServiceType\":%{public}lu, \"NumberOfConnectionsToServiceType\":%{public}lu}", buf, 0x3Au);
            if (SHIBYTE(v70) < 0) {
              operator delete(__p);
            }
          }

          if (!v80) {
            std::__throw_bad_optional_access[abi:ne180100]();
          }
          CLMiLoService::CLMiLoService((uint64_t)buf, a1, (uint64_t)v77, a1 + 8);
          char v53 = std::list<CLMiLoService>::emplace_back<CLMiLoService>((uint64_t *)(a1 + 40), (long long *)buf);
          CLMiLoService::~CLMiLoService((CLMiLoService *)buf);
          *(uuid *)uint64_t buf = v86;
          *(_OWORD *)&uint8_t buf[16] = v85;
          std::__tree<std::pair<boost::uuids::uuid,boost::uuids::uuid>>::__emplace_unique_key_args<std::pair<boost::uuids::uuid,boost::uuids::uuid>,std::pair<boost::uuids::uuid,boost::uuids::uuid>>((uint64_t **)(a1 + 64), (unint64_t *)buf, buf);
          if (v54)
          {
            uint64_t v61 = +[ULTransactionManager shared];
            v66[0] = MEMORY[0x263EF8330];
            v66[1] = 3221225472;
            void v66[2] = ___ZN20CLMiLoServiceManager7connectERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN5boost5uuids4uuidENS0_8optionalISB_EESB_S8__block_invoke;
            v66[3] = &__block_descriptor_48_e5_v8__0l;
            v66[4] = a1;
            v66[5] = v53;
            [v61 performUnderTransaction:@"com.apple.locationd.microlocation-service-connect" block:v66];
            uint64_t isClientAllowedToConnect = -1;
          }
          else
          {
            uint64_t v55 = _CLLogObjectForCategory_MicroLocation_Default();
            if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
            {
              if (*(char *)(a2 + 23) >= 0) {
                uint64_t v56 = a2;
              }
              else {
                uint64_t v56 = *(void *)a2;
              }
              boost::uuids::to_string((boost::uuids *)&v86, (uint64_t)&__p);
              int v57 = SHIBYTE(v70);
              uint64_t v58 = (void **)__p;
              boost::uuids::to_string((boost::uuids *)&v85, (uint64_t)v67);
              uint64_t v59 = &__p;
              if (v57 < 0) {
                uint64_t v59 = v58;
              }
              if (v68 >= 0) {
                size_t v60 = v67;
              }
              else {
                size_t v60 = (void **)v67[0];
              }
              *(_DWORD *)uint64_t buf = 68289794;
              *(_DWORD *)&uint8_t buf[4] = 0;
              *(_WORD *)&uint8_t buf[8] = 2082;
              *(void *)&buf[10] = "";
              *(_WORD *)&unsigned char buf[18] = 2082;
              *(void *)&buf[20] = v56;
              *(_WORD *)&unsigned char buf[28] = 2082;
              *(void *)&buf[30] = v59;
              __int16 v72 = 2082;
              char v73 = v60;
              _os_log_impl(&dword_25631F000, v55, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"MiLoServiceManager, failed to insert to fServiceIdToConnectionIdMap\", \"ClientId\":%{public, location:escape_only}s, \"ServiceUuid\":%{public, location:escape_only}s, \"ConnectionToken\":%{public, location:escape_only}s}", buf, 0x30u);
              if (v68 < 0) {
                operator delete(v67[0]);
              }
              if (SHIBYTE(v70) < 0) {
                operator delete(__p);
              }
            }

            uint64_t v61 = _CLLogObjectForCategory_MicroLocation_Default();
            if (os_signpost_enabled(v61))
            {
              if (*(char *)(a2 + 23) < 0) {
                a2 = *(void *)a2;
              }
              boost::uuids::to_string((boost::uuids *)&v86, (uint64_t)&__p);
              int v62 = SHIBYTE(v70);
              size_t v63 = (void **)__p;
              boost::uuids::to_string((boost::uuids *)&v85, (uint64_t)v67);
              uint64_t v64 = &__p;
              if (v62 < 0) {
                uint64_t v64 = v63;
              }
              if (v68 >= 0) {
                uint64_t v65 = v67;
              }
              else {
                uint64_t v65 = (void **)v67[0];
              }
              *(_DWORD *)uint64_t buf = 68289794;
              *(_DWORD *)&uint8_t buf[4] = 0;
              *(_WORD *)&uint8_t buf[8] = 2082;
              *(void *)&buf[10] = "";
              *(_WORD *)&unsigned char buf[18] = 2082;
              *(void *)&buf[20] = a2;
              *(_WORD *)&unsigned char buf[28] = 2082;
              *(void *)&buf[30] = v64;
              __int16 v72 = 2082;
              char v73 = v65;
              _os_signpost_emit_with_name_impl(&dword_25631F000, v61, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "MiLoServiceManager, failed to insert to fServiceIdToConnectionIdMap", "{\"msg%{public}.0s\":\"MiLoServiceManager, failed to insert to fServiceIdToConnectionIdMap\", \"ClientId\":%{public, location:escape_only}s, \"ServiceUuid\":%{public, location:escape_only}s, \"ConnectionToken\":%{public, location:escape_only}s}", buf, 0x30u);
              if (v68 < 0) {
                operator delete(v67[0]);
              }
              if (SHIBYTE(v70) < 0) {
                operator delete(__p);
              }
            }
            uint64_t isClientAllowedToConnect = 0;
          }
        }
      }
      else
      {
        uint64_t isClientAllowedToConnect = 19;
      }
      std::__optional_destruct_base<CLMiLoServiceTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v77);
      return isClientAllowedToConnect;
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
    }
    uuid v41 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v42 = (char *)operator new(0x28uLL);
      *(void *)(v42 + 29) = 0;
      *(_OWORD *)uint64_t v42 = 0u;
      *((_OWORD *)v42 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)&v86, v42);
      long long v43 = 0uLL;
      if (*(unsigned char *)(a5 + 16)) {
        long long v43 = *(_OWORD *)a5;
      }
      *(_OWORD *)char v77 = v43;
      uint64_t v44 = (char *)operator new(0x28uLL);
      *(void *)(v44 + 29) = 0;
      *(_OWORD *)uint64_t v44 = 0u;
      *((_OWORD *)v44 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)v77, v44);
      *(_DWORD *)uint64_t buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2082;
      *(void *)&buf[20] = v42;
      *(_WORD *)&unsigned char buf[28] = 2082;
      *(void *)&buf[30] = v44;
      _os_log_impl(&dword_25631F000, v41, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"MiLoServiceManager failed to migrate legacy service UUID to static ID\", \"Service UUID\":%{public, location:escape_only}s, \"Legacy service UUID\":%{public, location:escape_only}s}", buf, 0x26u);
      operator delete(v44);
      operator delete(v42);
    }

    return 33;
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
    }
    size_t v36 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a2 + 23) >= 0) {
        uint64_t v37 = a2;
      }
      else {
        uint64_t v37 = *(void *)a2;
      }
      long long v38 = (char *)operator new(0x28uLL);
      *(void *)(v38 + 29) = 0;
      *(_OWORD *)long long v38 = 0u;
      *((_OWORD *)v38 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)&v86, v38);
      *(_DWORD *)uint64_t buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2082;
      *(void *)&buf[20] = v37;
      *(_WORD *)&unsigned char buf[28] = 2082;
      *(void *)&buf[30] = v38;
      _os_log_impl(&dword_25631F000, v36, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"MiLoServiceManager cannot connect to service, only connection with static token is allowed\", \"ClientId\":%{public, location:escape_only}s, \"ServiceUuid\":%{public, location:escape_only}s}", buf, 0x26u);
      operator delete(v38);
    }

    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
    }
    long long v39 = (id)logObject_MicroLocation_Default;
    if (os_signpost_enabled(v39))
    {
      if (*(char *)(a2 + 23) < 0) {
        a2 = *(void *)a2;
      }
      long long v40 = (char *)operator new(0x28uLL);
      *(void *)(v40 + 29) = 0;
      *(_OWORD *)long long v40 = 0u;
      *((_OWORD *)v40 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)&v86, v40);
      *(_DWORD *)uint64_t buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2082;
      *(void *)&buf[20] = a2;
      *(_WORD *)&unsigned char buf[28] = 2082;
      *(void *)&buf[30] = v40;
      _os_signpost_emit_with_name_impl(&dword_25631F000, v39, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "MiLoServiceManager cannot connect to service, only connection with static token is allowed", "{\"msg%{public}.0s\":\"MiLoServiceManager cannot connect to service, only connection with static token is allowed\", \"ClientId\":%{public, location:escape_only}s, \"ServiceUuid\":%{public, location:escape_only}s}", buf, 0x26u);
      operator delete(v40);
    }

    return 20;
  }
}

void sub_256384884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }

  std::__optional_destruct_base<CLMiLoServiceTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&STACK[0x2A0]);
  _Unwind_Resume(a1);
}

uint64_t CLMiLoServiceManager::addToRequestsAwaitingDb(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = a1;
  uint64_t v43 = *MEMORY[0x263EF8340];
  *(void *)&long long v42 = a3;
  *((void *)&v42 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = a4;
  *(void *)&long long v41 = a6;
  *((void *)&v41 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = a7;
  uint64_t v13 = *(void *)(a1 + 224);
  uint64_t v14 = *(void *)(a1 + 232);
  size_t v12 = (uint64_t *)(a1 + 224);
  if (v13 != v14)
  {
    int v15 = *(char *)(a2 + 23);
    if (v15 >= 0) {
      uint64_t v16 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v16 = *(void *)(a2 + 8);
    }
    if (v15 >= 0) {
      uint64_t v17 = (const std::string::value_type *)a2;
    }
    else {
      uint64_t v17 = *(const std::string::value_type **)a2;
    }
    uint64_t v18 = *(unsigned __int8 *)(a8 + 23);
    BOOL v19 = (v18 & 0x80u) != 0;
    if ((v18 & 0x80u) != 0) {
      uint64_t v18 = *(void *)(a8 + 8);
    }
    uint64_t v35 = v18;
    if (v19) {
      int v20 = *(const std::string::value_type **)a8;
    }
    else {
      int v20 = (const std::string::value_type *)a8;
    }
    while (1)
    {
      uint64_t v21 = *(unsigned __int8 *)(v13 + 23);
      if ((v21 & 0x80u) == 0) {
        uint64_t v22 = *(unsigned __int8 *)(v13 + 23);
      }
      else {
        uint64_t v22 = *(void *)(v13 + 8);
      }
      if (v22 == v16)
      {
        if ((v21 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v13, v17, *(void *)(v13 + 8)))
          {
LABEL_24:
            if (*(void *)(v13 + 24) == (void)v42
              && *(void *)(v13 + 32) == *((void *)&v42 + 1)
              && *(void *)(v13 + 57) == (void)v41
              && *(void *)(v13 + 65) == *((void *)&v41 + 1))
            {
              uint64_t v26 = *(unsigned __int8 *)(v13 + 103);
              uint64_t v27 = (v26 & 0x80u) == 0 ? *(unsigned __int8 *)(v13 + 103) : *(void *)(v13 + 88);
              if (v27 == v35)
              {
                if ((v26 & 0x80) != 0)
                {
                  if (!memcmp(*(const void **)(v13 + 80), v20, *(void *)(v13 + 88)))
                  {
LABEL_48:
                    uint64_t v11 = a1;
                    break;
                  }
                }
                else
                {
                  if (!*(unsigned char *)(v13 + 103)) {
                    goto LABEL_48;
                  }
                  uint64_t v28 = 0;
                  while (*(unsigned __int8 *)(v13 + v28 + 80) == v20[v28])
                  {
                    if (v26 == ++v28) {
                      goto LABEL_48;
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
          if (!*(unsigned char *)(v13 + 23)) {
            goto LABEL_24;
          }
          uint64_t v23 = 0;
          while (*(unsigned __int8 *)(v13 + v23) == v17[v23])
          {
            if (v21 == ++v23) {
              goto LABEL_24;
            }
          }
        }
      }
      v13 += 104;
      if (v13 == v14)
      {
        uint64_t v11 = a1;
        if ((v15 & 0x80) != 0) {
          goto LABEL_55;
        }
LABEL_47:
        *(_OWORD *)uint64_t buf = *(_OWORD *)a2;
        *(void *)&uint8_t buf[16] = *(void *)(a2 + 16);
        goto LABEL_56;
      }
    }
  }
  if (v13 == v14)
  {
    if ((*(unsigned char *)(a2 + 23) & 0x80) == 0) {
      goto LABEL_47;
    }
LABEL_55:
    std::string::__init_copy_ctor_external((std::string *)buf, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
LABEL_56:
    *(_OWORD *)&buf[24] = v42;
    long long v37 = *a5;
    char v38 = *((unsigned char *)a5 + 16);
    long long v39 = v41;
    if (*(char *)(a8 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a8, *(void *)(a8 + 8));
    }
    else {
      std::string __p = *(std::string *)a8;
    }
    std::vector<CLMiLoServiceManager::ConnectionRequestParams>::emplace_back<CLMiLoServiceManager::ConnectionRequestParams>(v12, (long long *)buf);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
    }
    uint64_t v32 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v33 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(v11 + 232) - *(void *)(v11 + 224)) >> 3);
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2050;
      *(void *)&buf[20] = v33;
      _os_log_impl(&dword_25631F000, v32, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoServiceManager adding a pending connection requests\", \"NumRequests cached\":%{public}lu}", buf, 0x1Cu);
    }
    return 1;
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
    }
    int v29 = logObject_MicroLocation_Default;
    BOOL v30 = os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (v30)
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      _os_log_impl(&dword_25631F000, v29, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoServiceManager adding a pending connection requests failed, request already cached\"}", buf, 0x12u);
      return 0;
    }
  }
  return result;
}

void sub_256384DB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL CLMiLoServiceManager::migrateLegacyServiceIdToServiceId(uint64_t a1, uint64_t a2, uint64_t a3, boost::uuids *a4)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v42 = a2;
  uint64_t v43 = a3;
  if (!*((unsigned char *)a4 + 16)) {
    return 1;
  }
  if (v42 == *(void *)a4 && v43 == *((void *)a4 + 1)) {
    return 1;
  }
  id v9 = *(id *)(*(void *)(a1 + 88) + 96);
  char v10 = v9;
  if (!*((unsigned char *)a4 + 16)) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  char v11 = objc_msgSend(v9, "updateAllServicesWithMatchingServiceUUID:withNewServiceUUID:", *(void *)a4, *((void *)a4 + 1), a2, a3);

  if ((v11 & 1) == 0)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
    }
    uint64_t v28 = logObject_MicroLocation_Default;
    BOOL result = os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_FAULT);
    if (!result) {
      return result;
    }
    *(_WORD *)uint64_t buf = 0;
    int v29 = "MiLoServiceManager static tokens: updateAllServicesWithMatchingServiceUUID failed";
LABEL_39:
    _os_log_impl(&dword_25631F000, v28, OS_LOG_TYPE_FAULT, v29, buf, 2u);
    return 0;
  }
  id v12 = *(id *)(*(void *)(a1 + 88) + 72);
  uint64_t v13 = v12;
  if (!*((unsigned char *)a4 + 16)) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  char v14 = objc_msgSend(v12, "updateAllModelsWithMatchingServiceUUID:withNewServiceUUID:", *(void *)a4, *((void *)a4 + 1), a2, a3);

  if ((v14 & 1) == 0)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
    }
    uint64_t v28 = logObject_MicroLocation_Default;
    BOOL result = os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_FAULT);
    if (!result) {
      return result;
    }
    *(_WORD *)uint64_t buf = 0;
    int v29 = "MiLoServiceManager static tokens: updateAllModelsWithMatchingServiceUUID failed";
    goto LABEL_39;
  }
  id v15 = *(id *)(*(void *)(a1 + 88) + 40);
  uint64_t v16 = v15;
  if (!*((unsigned char *)a4 + 16)) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  char v17 = objc_msgSend(v15, "updateAllLabelsWithMatchingServiceUUID:withNewServiceUUID:", *(void *)a4, *((void *)a4 + 1), a2, a3);

  if (v17)
  {
    id v18 = *(id *)(*(void *)(a1 + 88) + 104);
    BOOL v19 = v18;
    if (!*((unsigned char *)a4 + 16)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    char v20 = [v18 updateAllCustomLoiIdsWithMatchingServiceUUID:a4 withNewServiceUUID:&v42];

    uint64_t v21 = _CLLogObjectForCategory_MicroLocation_Default();
    uint64_t v22 = v21;
    if (v20)
    {
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        if (!*((unsigned char *)a4 + 16)) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        boost::uuids::to_string(a4, (uint64_t)v32);
        int v23 = v33;
        uint64_t v24 = (void **)v32[0];
        boost::uuids::to_string((boost::uuids *)&v42, (uint64_t)__p);
        char v25 = v32;
        if (v23 < 0) {
          char v25 = v24;
        }
        if (v31 >= 0) {
          uint64_t v26 = __p;
        }
        else {
          uint64_t v26 = (void **)__p[0];
        }
        *(_DWORD *)uint64_t buf = 68289538;
        int v35 = 0;
        __int16 v36 = 2082;
        long long v37 = "";
        __int16 v38 = 2082;
        long long v39 = v25;
        __int16 v40 = 2082;
        long long v41 = v26;
        _os_log_impl(&dword_25631F000, v22, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"MiLoServiceManager static tokens update completed\", \"legacyServiceIdentifier\":%{public, location:escape_only}s, \"newServiceIdentifier\":%{public, location:escape_only}s}", buf, 0x26u);
        if (v31 < 0) {
          operator delete(__p[0]);
        }
        if (v33 < 0) {
          operator delete(v32[0]);
        }
      }

      return 1;
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_25631F000, v22, OS_LOG_TYPE_FAULT, "MiLoServiceManager static tokens: updateAllCustomLoiIdsWithMatchingServiceUUID failed", buf, 2u);
    }

    return 0;
  }
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
  }
  uint64_t v28 = logObject_MicroLocation_Default;
  BOOL result = os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_FAULT);
  if (result)
  {
    *(_WORD *)uint64_t buf = 0;
    int v29 = "MiLoServiceManager static tokens: updateAllLabelsWithMatchingServiceUUID failed";
    goto LABEL_39;
  }
  return result;
}

void sub_2563851BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void CLMiLoServiceManager::findOrCreateServiceEntryWithServiceId(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void **a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, int a7@<W6>, uint64_t a8@<X8>)
{
  v35[2] = *MEMORY[0x263EF8340];
  v35[0] = a2;
  v35[1] = a3;
  id v16 = *(id *)(*(void *)(a1 + 88) + 96);
  char v17 = v16;
  if (v16)
  {
    objc_msgSend(v16, "fetchServiceByUUID:", a2, a3);
  }
  else
  {
    *(_OWORD *)(a8 + 64) = 0u;
    *(_OWORD *)(a8 + 80) = 0u;
    *(_OWORD *)(a8 + 32) = 0u;
    *(_OWORD *)(a8 + 48) = 0u;
    *(_OWORD *)a8 = 0u;
    *(_OWORD *)(a8 + 16) = 0u;
  }

  int v18 = *(unsigned __int8 *)(a8 + 88);
  if (!*(unsigned char *)(a8 + 88) && a7)
  {
    if (!a6) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    BOOL v19 = operator new(8uLL);
    uint64_t v26 = v19;
    *BOOL v19 = 0;
    uint64_t v27 = v19 + 1;
    uint64_t v28 = v19 + 1;
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    *(void *)v20.unint64_t var0 = a4;
    *(void *)&v20.var0[8] = a2;
    *(void *)v36.unint64_t var0 = a3;
    *(void *)&v36.var0[8] = a5;
    CLMiLoServiceManager::createService(v20, v36, a1, (uint64_t)&v26, (uint64_t *)__p, (uint64_t)v33);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    if (v26)
    {
      uint64_t v27 = v26;
      operator delete(v26);
    }
    if (v34 != -1)
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
      }
      uint64_t v21 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_FAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl(&dword_25631F000, v21, OS_LOG_TYPE_FAULT, "create service for static token failed", (uint8_t *)__p, 2u);
      }
    }
    id v22 = *(id *)(*(void *)(a1 + 88) + 96);
    int v23 = v22;
    if (v22)
    {
      objc_msgSend(v22, "fetchServiceByUUID:", a2, a3);
    }
    else
    {
      long long v31 = 0u;
      long long v32 = 0u;
      long long v30 = 0u;
      memset(__p, 0, sizeof(__p));
    }
    std::__optional_storage_base<CLMiLoServiceTable::Entry,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<CLMiLoServiceTable::Entry,false>>(a8, (uint64_t)__p);
    std::__optional_destruct_base<CLMiLoServiceTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);

    int v18 = *(unsigned __int8 *)(a8 + 88);
  }
  if (!v18)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
    }
    uint64_t v24 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)a4 + 23) < 0) {
        a4 = (void **)*a4;
      }
      char v25 = (char *)operator new(0x28uLL);
      *(void *)(v25 + 29) = 0;
      *(_OWORD *)char v25 = 0u;
      *((_OWORD *)v25 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)v35, v25);
      __p[0] = (void *)68289538;
      LOWORD(__p[1]) = 2082;
      *(void **)((char *)&__p[1] + 2) = "";
      WORD1(__p[2]) = 2082;
      *(void **)((char *)&__p[2] + 4) = a4;
      WORD2(__p[3]) = 2082;
      *(void **)((char *)&__p[3] + 6) = v25;
      _os_log_impl(&dword_25631F000, v24, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"MiLoServiceManager cannot connect to service since service not found in database\", \"ClientId\":%{public, location:escape_only}s, \"ServiceUuid\":%{public, location:escape_only}s}", (uint8_t *)__p, 0x26u);
      operator delete(v25);
    }
  }
}

void sub_256385518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  operator delete(v20);

  std::__optional_destruct_base<CLMiLoServiceTable::Entry,false>::~__optional_destruct_base[abi:ne180100](v18);
  _Unwind_Resume(a1);
}

void CLMiLoServiceManager::migrateLegacyClientIdToClientIdIfNecessary(uint64_t a1, uint64_t a2, const std::string *a3)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a2 + 88))
  {
    uint64_t v44 = (std::string *)(a2 + 32);
    size_t v5 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    size_t size = a3->__r_.__value_.__l.__size_;
    if ((v5 & 0x80u) == 0) {
      size_t v7 = v5;
    }
    else {
      size_t v7 = size;
    }
    uint64_t v8 = *(unsigned __int8 *)(a2 + 55);
    int v9 = (char)v8;
    if ((v8 & 0x80u) != 0) {
      uint64_t v8 = *(void *)(a2 + 40);
    }
    if (v7 == v8)
    {
      if (v9 >= 0) {
        char v10 = (unsigned __int8 *)(a2 + 32);
      }
      else {
        char v10 = (unsigned __int8 *)v44->__r_.__value_.__r.__words[0];
      }
      if ((v5 & 0x80) != 0)
      {
        if (!memcmp(a3->__r_.__value_.__l.__data_, v10, size)) {
          return;
        }
      }
      else
      {
        if (!v5) {
          return;
        }
        for (uint64_t i = a3; i->__r_.__value_.__s.__data_[0] == *v10; uint64_t i = (const std::string *)((char *)i + 1))
        {
          ++v10;
          if (!--v5) {
            return;
          }
        }
      }
    }
    uint64_t v43 = ULSettings::get<ULSettings::ClientIdLocationdToMilodMapping>();
    if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      id v12 = a3;
    }
    else {
      id v12 = (const std::string *)a3->__r_.__value_.__r.__words[0];
    }
    uint64_t v13 = [NSString stringWithUTF8String:v12];
    char v14 = ___ZN20CLMiLoServiceManager42migrateLegacyClientIdToClientIdIfNecessaryERNSt3__18optionalIN18CLMiLoServiceTable5EntryEEERKNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke((uint64_t)v13, v43, v13);

    uint64_t v42 = v14;
    if ([v14 count])
    {
      long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      obuint64_t j = v14;
      uint64_t v15 = [obj countByEnumeratingWithState:&v56 objects:v70 count:16];
      if (v15)
      {
        uint64_t v16 = *(void *)v57;
        do
        {
          uint64_t v17 = 0;
          do
          {
            if (*(void *)v57 != v16) {
              objc_enumerationMutation(obj);
            }
            uint64_t v18 = *(void **)(*((void *)&v56 + 1) + 8 * v17);
            id v19 = *(id *)(*(void *)(a1 + 88) + 96);
            id v20 = v18;
            std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v20 UTF8String]);
            if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v53, a3->__r_.__value_.__l.__data_, a3->__r_.__value_.__l.__size_);
            }
            else {
              std::string v53 = *a3;
            }
            char v21 = [v19 updateAllServicesWithMatchingClientId:__p withNewClientId:&v53];
            if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v53.__r_.__value_.__l.__data_);
            }
            if (v55 < 0) {
              operator delete(__p[0]);
            }

            if ((v21 & 1) == 0)
            {
              if (onceToken_MicroLocation_Default != -1) {
                dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
              }
              id v22 = logObject_MicroLocation_Default;
              if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_FAULT))
              {
                *(_WORD *)uint64_t buf = 0;
                _os_log_impl(&dword_25631F000, v22, OS_LOG_TYPE_FAULT, "MiLoServiceManager: updateAllServicesWithMatchingClientId failed on Update services", buf, 2u);
              }
            }
            id v23 = *(id *)(*(void *)(a1 + 88) + 72);
            id v24 = v20;
            std::string::basic_string[abi:ne180100]<0>(v51, (char *)[v24 UTF8String]);
            if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v50, a3->__r_.__value_.__l.__data_, a3->__r_.__value_.__l.__size_);
            }
            else {
              std::string v50 = *a3;
            }
            char v25 = [v23 updateAllModelsWithMatchingClientId:v51 withNewClientId:&v50];
            if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v50.__r_.__value_.__l.__data_);
            }
            if (v52 < 0) {
              operator delete(v51[0]);
            }

            if ((v25 & 1) == 0)
            {
              if (onceToken_MicroLocation_Default != -1) {
                dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
              }
              uint64_t v26 = logObject_MicroLocation_Default;
              if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_FAULT))
              {
                *(_WORD *)uint64_t buf = 0;
                _os_log_impl(&dword_25631F000, v26, OS_LOG_TYPE_FAULT, "MiLoServiceManager: updateAllServicesWithMatchingClientId failed on Update models", buf, 2u);
              }
            }
            id v27 = *(id *)(*(void *)(a1 + 88) + 40);
            std::string::basic_string[abi:ne180100]<0>(v48, (char *)[v24 UTF8String]);
            if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v47, a3->__r_.__value_.__l.__data_, a3->__r_.__value_.__l.__size_);
            }
            else {
              std::string v47 = *a3;
            }
            char v28 = [v27 updateAllLabelsWithMatchingClientId:v48 withNewClientId:&v47];
            if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v47.__r_.__value_.__l.__data_);
            }
            if (v49 < 0) {
              operator delete(v48[0]);
            }

            if ((v28 & 1) == 0)
            {
              if (onceToken_MicroLocation_Default != -1) {
                dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
              }
              int v29 = logObject_MicroLocation_Default;
              if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_FAULT))
              {
                *(_WORD *)uint64_t buf = 0;
                _os_log_impl(&dword_25631F000, v29, OS_LOG_TYPE_FAULT, "MiLoServiceManager: updateAllServicesWithMatchingClientId failed on Update labels", buf, 2u);
              }
            }
            ++v17;
          }
          while (v15 != v17);
          uint64_t v15 = [obj countByEnumeratingWithState:&v56 objects:v70 count:16];
        }
        while (v15);
      }

      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
      }
      long long v30 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v31 = a3;
        }
        else {
          long long v31 = (const std::string *)a3->__r_.__value_.__r.__words[0];
        }
        if (!*(unsigned char *)(a2 + 88)) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        long long v32 = (char *)operator new(0x28uLL);
        *(void *)(v32 + 29) = 0;
        *(_OWORD *)long long v32 = 0u;
        *((_OWORD *)v32 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
        boost::uuids::to_chars<char *>(a2 + 8, v32);
        if (!*(unsigned char *)(a2 + 88)) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        char v33 = v44;
        if (*(char *)(a2 + 55) < 0) {
          char v33 = *(std::string **)(a2 + 32);
        }
        *(_DWORD *)uint64_t buf = 68289794;
        int v61 = 0;
        __int16 v62 = 2082;
        size_t v63 = "";
        __int16 v64 = 2082;
        uint64_t v65 = v31;
        __int16 v66 = 2082;
        uint64_t v67 = v32;
        __int16 v68 = 2082;
        char v69 = v33;
        _os_log_impl(&dword_25631F000, v30, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"MiLoServiceManager found mapping from locationd client ID to received ID \", \"ClientId\":%{public, location:escape_only}s, \"ServiceUuid\":%{public, location:escape_only}s, \"Existing ClientId\":%{public, location:escape_only}s}", buf, 0x30u);
        operator delete(v32);
      }

      if (!*(unsigned char *)(a2 + 88)) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      std::string::operator=(v44, a3);
    }
    else
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
      }
      uint64_t v34 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v35 = a3;
        }
        else {
          int v35 = (const std::string *)a3->__r_.__value_.__r.__words[0];
        }
        if (!*(unsigned char *)(a2 + 88)) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        uuid v36 = (char *)operator new(0x28uLL);
        *(void *)(v36 + 29) = 0;
        *(_OWORD *)uuid v36 = 0u;
        *((_OWORD *)v36 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
        boost::uuids::to_chars<char *>(a2 + 8, v36);
        if (!*(unsigned char *)(a2 + 88)) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        long long v37 = v44;
        if (*(char *)(a2 + 55) < 0) {
          long long v37 = *(std::string **)(a2 + 32);
        }
        *(_DWORD *)uint64_t buf = 68289794;
        int v61 = 0;
        __int16 v62 = 2082;
        size_t v63 = "";
        __int16 v64 = 2082;
        uint64_t v65 = v35;
        __int16 v66 = 2082;
        uint64_t v67 = v36;
        __int16 v68 = 2082;
        char v69 = v37;
        _os_log_impl(&dword_25631F000, v34, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"MiLoServiceManager unable to find mapping for legacy ClientId\", \"ClientId\":%{public, location:escape_only}s, \"ServiceUuid\":%{public, location:escape_only}s, \"Expected ClientId\":%{public, location:escape_only}s}", buf, 0x30u);
        operator delete(v36);
      }

      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
      }
      __int16 v38 = (id)logObject_MicroLocation_Default;
      if (os_signpost_enabled(v38))
      {
        if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v39 = a3;
        }
        else {
          long long v39 = (const std::string *)a3->__r_.__value_.__r.__words[0];
        }
        if (!*(unsigned char *)(a2 + 88)) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        __int16 v40 = (char *)operator new(0x28uLL);
        *(void *)(v40 + 29) = 0;
        *(_OWORD *)__int16 v40 = 0u;
        *((_OWORD *)v40 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
        boost::uuids::to_chars<char *>(a2 + 8, v40);
        if (!*(unsigned char *)(a2 + 88)) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        long long v41 = v44;
        if (*(char *)(a2 + 55) < 0) {
          long long v41 = *(std::string **)(a2 + 32);
        }
        *(_DWORD *)uint64_t buf = 68289794;
        int v61 = 0;
        __int16 v62 = 2082;
        size_t v63 = "";
        __int16 v64 = 2082;
        uint64_t v65 = v39;
        __int16 v66 = 2082;
        uint64_t v67 = v40;
        __int16 v68 = 2082;
        char v69 = v41;
        _os_signpost_emit_with_name_impl(&dword_25631F000, v38, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "MiLoServiceManager unable to find mapping for legacy ClientId", "{\"msg%{public}.0s\":\"MiLoServiceManager unable to find mapping for legacy ClientId\", \"ClientId\":%{public, location:escape_only}s, \"ServiceUuid\":%{public, location:escape_only}s, \"Expected ClientId\":%{public, location:escape_only}s}", buf, 0x30u);
        operator delete(v40);
      }
    }
  }
}

void sub_256385E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  operator delete(v51);

  _Unwind_Resume(a1);
}

uint64_t CLMiLoServiceManager::isClientAllowedToConnect(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4, uint64_t a5, int a6)
{
  v32[2] = *MEMORY[0x263EF8340];
  v32[0] = a4;
  v32[1] = a5;
  switch(*a2)
  {
    case 1:
      int v9 = +[ULDefaultsSingleton shared];
      char v10 = [v9 defaultsDictionary];

      char v11 = [NSString stringWithUTF8String:"ULMaximumNumberOfConnectedUnsupervisedServicesPerClient"];
      id v12 = [v10 objectForKey:v11];
      if (!v12) {
        goto LABEL_15;
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        goto LABEL_15;
      }
      goto LABEL_14;
    case 2:
      char v14 = +[ULDefaultsSingleton shared];
      char v10 = [v14 defaultsDictionary];

      char v11 = [NSString stringWithUTF8String:"ULMaximumNumberOfConnectedBinaryRoiServicesPerClient"];
      id v12 = [v10 objectForKey:v11];
      if (v12)
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          goto LABEL_14;
        }
      }
      goto LABEL_15;
    case 3:
      uint64_t v15 = +[ULDefaultsSingleton shared];
      char v10 = [v15 defaultsDictionary];

      char v11 = [NSString stringWithUTF8String:"ULMaximumNumberOfConnectedMulticlassServicesPerClient"];
      id v12 = [v10 objectForKey:v11];
      if (v12)
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          goto LABEL_14;
        }
      }
LABEL_15:
      uint64_t v17 = [&unk_2704F1680 unsignedLongValue];
      goto LABEL_17;
    case 4:
      uint64_t v16 = +[ULDefaultsSingleton shared];
      char v10 = [v16 defaultsDictionary];

      char v11 = [NSString stringWithUTF8String:"ULMaximumNumberOfConnectedSimilarityListServicesPerClient"];
      id v12 = [v10 objectForKey:v11];
      if (v12 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
LABEL_14:
      }
        uint64_t v17 = [v12 unsignedLongValue];
      else {
        uint64_t v17 = [&unk_2704F1698 unsignedLongValue];
      }
LABEL_17:
      unint64_t v18 = v17;

      if (v18 >= (a6 + 1))
      {
        uint64_t result = 0;
      }
      else
      {
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
        }
        id v19 = (id)logObject_MicroLocation_Default;
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          if (*((char *)a3 + 23) >= 0) {
            id v20 = a3;
          }
          else {
            id v20 = (uint64_t *)*a3;
          }
          char v21 = (char *)operator new(0x28uLL);
          *(void *)(v21 + 29) = 0;
          *(_OWORD *)char v21 = 0u;
          *((_OWORD *)v21 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
          boost::uuids::to_chars<char *>((uint64_t)v32, v21);
          uint64_t v22 = *(unsigned int *)a2;
          v23[0] = 68289794;
          v23[1] = 0;
          __int16 v24 = 2082;
          char v25 = "";
          __int16 v26 = 2082;
          id v27 = v20;
          __int16 v28 = 2082;
          int v29 = v21;
          __int16 v30 = 2050;
          uint64_t v31 = v22;
          _os_log_impl(&dword_25631F000, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"MiLoServiceManager cannot connect to service since client has maxed out number of connections\", \"ClientId\":%{public, location:escape_only}s, \"ServiceUuid\":%{public, location:escape_only}s, \"ServiceType\":%{public}lu}", (uint8_t *)v23, 0x30u);
          operator delete(v21);
        }

        uint64_t result = 32;
      }
      break;
    default:
      uint64_t result = 3;
      break;
  }
  return result;
}

void sub_256386380(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::list<CLMiLoService>::emplace_back<CLMiLoService>(uint64_t *a1, long long *a2)
{
  size_t v3 = std::__list_imp<CLMiLoService>::__create_node[abi:ne180100]<CLMiLoService>((uint64_t)a1, 0, 0, a2);
  uint64_t v4 = *a1;
  *size_t v3 = *a1;
  v3[1] = a1;
  *(void *)(v4 + 8) = v3;
  *a1 = (uint64_t)v3;
  ++a1[2];
  return v3 + 2;
}

void CLMiLoService::~CLMiLoService(CLMiLoService *this)
{
  std::deque<CLMiLoService::OutstandingRequest>::~deque[abi:ne180100]((void *)this + 47);
  std::deque<CLMiLoService::OutstandingRequest>::~deque[abi:ne180100]((void *)this + 38);
  std::__optional_destruct_base<CachedPrediction,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 112);
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 87) < 0) {
    operator delete(*((void **)this + 8));
  }
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
}

uint64_t ___ZN20CLMiLoServiceManager7connectERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN5boost5uuids4uuidENS0_8optionalISB_EESB_S8__block_invoke(uint64_t a1)
{
  unint64_t v2 = *(CLMiLoServiceManager **)(a1 + 32);
  CLMiLoServiceManager::updateServiceLastActiveTime(v2, *(const CLMiLoService **)(a1 + 40));
  CLMiLoServiceManager::enterLocationPerService(v2, *(int64x2_t **)(a1 + 40));
  return CLMiLoServiceManager::checkSpectating(v2);
}

uint64_t CLMiLoServiceManager::updateServiceLastActiveTime(CLMiLoServiceManager *this, const CLMiLoService *a2)
{
  id v3 = *(id *)(*((void *)this + 11) + 96);
  double v4 = cl::chrono::CFAbsoluteTimeClock::now();
  uint64_t v5 = CLMiLoService::uuid(a2);
  uint64_t v7 = objc_msgSend(v3, "updateLastActiveTime:forService:", v5, v6, v4);

  return v7;
}

void sub_2563865A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLMiLoServiceManager::enterLocationPerService(CLMiLoServiceManager *this, int64x2_t *a2)
{
  double v4 = (unint64_t *)((char *)this + 96);
  if (!*((unsigned char *)this + 120) || !CLMiLoService::isLocationTypeEnabled((uint64_t)a2, *v4)) {
    goto LABEL_8;
  }
  if (!*((unsigned char *)this + 120)) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  if (*v4 != 2)
  {
    long long v13 = 0uLL;
    goto LABEL_11;
  }
  if (((*(uint64_t (**)(void))(*(void *)(*((void *)this + 16) + 8) + 104))() & 1) == 0)
  {
LABEL_8:
    CLMiLoServiceManager::releaseModel(this, a2);
LABEL_9:
    CLMiLoService::sendStatus(a2, (uint64_t)v4);
    return;
  }
  int v5 = *((unsigned __int8 *)this + 120);
  long long v13 = 0uLL;
  if (!v5) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
LABEL_11:
  CLMiLoServiceManager::modelByServiceAndLocation((CLMiLoService *)a2, (uint64_t)this, &v12);
  uint64_t v7 = (std::__shared_weak_count *)*((void *)&v12 + 1);
  uint64_t v6 = v12;
  long long v13 = v12;
  if ((void)v12)
  {
LABEL_18:
    uint64_t v10 = v6;
    char v11 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    CLMiLoService::updateModel((uint64_t)a2, &v10);
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    int v9 = (std::__shared_weak_count *)*((void *)&v13 + 1);
    long long v13 = 0uLL;
    if (v9)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      if (*((void *)&v13 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v13 + 1));
      }
    }
    goto LABEL_9;
  }
  if (!*((unsigned char *)this + 120)) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  CLMiLoServiceManager::loadModelForServiceOrCreateNewIfNecessary((CLMiLoService *)a2, *((void *)this + 11), (CLMiLoServiceManager *)((char *)this + 136), (uint64_t *)v4, &v12);
  long long v8 = v12;
  long long v12 = 0uLL;
  long long v13 = v8;
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    if (*((void *)&v12 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v12 + 1));
    }
  }
  std::vector<std::shared_ptr<CLMiLoService::ModelAndConf>>::push_back[abi:ne180100]((uint64_t *)this + 2, &v13);
  uint64_t v6 = v13;
  if ((void)v13)
  {
    uint64_t v7 = (std::__shared_weak_count *)*((void *)&v13 + 1);
    goto LABEL_18;
  }
  CLMiLoServiceManager::enterLocationPerService((NSObject **)&v12);

  abort_report_np();
  __break(1u);
}

void sub_256386780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v14 - 40);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CLMiLoServiceManager::checkSpectating(CLMiLoServiceManager *this)
{
  unint64_t v2 = (char *)this + 40;
  id v3 = (char *)*((void *)this + 6);
  if (v3 != (char *)this + 40)
  {
    int v4 = 0;
    do
    {
      v4 |= CLMiLoService::doAllowObservation((CLMiLoService *)(v3 + 16));
      id v3 = (char *)*((void *)v3 + 1);
    }
    while (v3 != v2);
  }
  int v5 = *(uint64_t (**)(void))(*(void *)(*((void *)this + 16) + 8) + 72);
  return v5();
}

uint64_t CLMiLoServiceManager::disconnect(void *a1, const std::string *a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5)
{
  uint64_t v88 = *MEMORY[0x263EF8340];
  *(void *)v87.unint64_t var0 = a3;
  *(void *)&v87.var0[8] = a4;
  CLMiLoServiceManager::BiDirectionalUuidMap::lookupByValue((CLMiLoServiceManager::BiDirectionalUuidMap *)(a1 + 8), &v87, &v85);
  if (!v86)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
    }
    uint64_t v17 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v18 = (char *)operator new(0x28uLL);
      *(void *)(v18 + 29) = 0;
      *(_OWORD *)unint64_t v18 = 0u;
      *((_OWORD *)v18 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)&v87, v18);
      *(_DWORD *)uint64_t buf = 68289283;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)char v73 = 2082;
      *(void *)&v73[2] = "";
      __int16 v74 = 2081;
      unint64_t v75 = (void **)v18;
      _os_log_impl(&dword_25631F000, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoServiceManager::disconnect, failed because can't find serviceId for this connection\", \"connectionToken\":%{private, location:escape_only}s}", buf, 0x1Cu);
      operator delete(v18);
    }
    goto LABEL_26;
  }
  uuid v84 = v85;
  long long v8 = (CLMiLoService *)CLMiLoServiceManager::loadedServiceByUuid((CLMiLoServiceManager *)a1, v85);
  if (!v9)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
    }
    uint64_t v17 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      id v19 = (char *)operator new(0x28uLL);
      *(void *)(v19 + 29) = 0;
      *(_OWORD *)id v19 = 0u;
      *((_OWORD *)v19 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)&v84, v19);
      *(_DWORD *)uint64_t buf = 68289283;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)char v73 = 2082;
      *(void *)&v73[2] = "";
      __int16 v74 = 2081;
      unint64_t v75 = (void **)v19;
      _os_log_impl(&dword_25631F000, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoServiceManager::disconnect, failed because not connected to this service\", \"ServiceUUID\":%{private, location:escape_only}s}", buf, 0x1Cu);
      operator delete(v19);
    }
LABEL_26:

    return 27;
  }
  uint64_t v10 = v8;
  char v11 = (unsigned __int8 *)CLMiLoService::clientId(v8);
  uint64_t v12 = v11[23];
  if ((v12 & 0x80u) == 0) {
    uint64_t v13 = v11[23];
  }
  else {
    uint64_t v13 = *((void *)v11 + 1);
  }
  std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  int v15 = (char)size;
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  if (v13 != size) {
    goto LABEL_43;
  }
  if (v15 >= 0) {
    uint64_t v16 = a2;
  }
  else {
    uint64_t v16 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if ((v12 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v11, v16, *((void *)v11 + 1))) {
      goto LABEL_43;
    }
  }
  else if (v11[23])
  {
    while (*v11 == v16->__r_.__value_.__s.__data_[0])
    {
      ++v11;
      uint64_t v16 = (const std::string *)((char *)v16 + 1);
      if (!--v12) {
        goto LABEL_28;
      }
    }
    goto LABEL_43;
  }
LABEL_28:
  char v21 = (unsigned __int8 *)CLMiLoService::userId(v10);
  uint64_t v22 = v21[23];
  if ((v22 & 0x80u) == 0) {
    uint64_t v23 = v21[23];
  }
  else {
    uint64_t v23 = *((void *)v21 + 1);
  }
  uint64_t v24 = a5[23];
  int v25 = (char)v24;
  if ((v24 & 0x80u) != 0) {
    uint64_t v24 = *((void *)a5 + 1);
  }
  if (v23 != v24) {
    goto LABEL_43;
  }
  if (v25 >= 0) {
    __int16 v26 = a5;
  }
  else {
    __int16 v26 = *(unsigned __int8 **)a5;
  }
  if ((v22 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v21, v26, *((void *)v21 + 1))) {
      goto LABEL_84;
    }
LABEL_43:
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
    }
    id v27 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      __int16 v28 = operator new(0x28uLL);
      std::string __p = v28;
      long long v69 = xmmword_256514540;
      _OWORD *v28 = 0u;
      v28[1] = 0u;
      *(void *)((char *)v28 + 29) = 0;
      boost::uuids::to_chars<char *>((uint64_t)&v84, v28);
      int v29 = v69 >= 0 ? &__p : (void **)__p;
      __int16 v30 = (a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? (unsigned __int8 *)a2
          : (unsigned __int8 *)a2->__r_.__value_.__r.__words[0];
      size_t v63 = v30;
      uint64_t v65 = v29;
      uint64_t v31 = CLMiLoService::clientId(v10);
      int v32 = *(char *)(v31 + 23);
      uint64_t v33 = *(void *)v31;
      int v34 = (char)a5[23];
      int v35 = *(unsigned __int8 **)a5;
      uint64_t v36 = CLMiLoService::userId(v10);
      long long v37 = v34 >= 0 ? a5 : v35;
      uint64_t v38 = v32 >= 0 ? v31 : v33;
      uint64_t v39 = *(char *)(v36 + 23) >= 0 ? v36 : *(void *)v36;
      *(_DWORD *)uint64_t buf = 68290307;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)char v73 = 2082;
      *(void *)&v73[2] = "";
      __int16 v74 = 2081;
      unint64_t v75 = v65;
      __int16 v76 = 2081;
      char v77 = v63;
      __int16 v78 = 2081;
      uint64_t v79 = v38;
      __int16 v80 = 2081;
      long long v81 = v37;
      __int16 v82 = 2081;
      uint64_t v83 = v39;
      _os_log_impl(&dword_25631F000, v27, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLMiLoServiceManager::disconnect, client ID or user ID does not match!\", \"ServiceUUID\":%{private, location:escape_only}s, \"clientId\":%{private, location:escape_only}s, \"loadedServiceClientId\":%{private, location:escape_only}s, \"userId\":%{private, location:escape_only}s, \"loadedServiceUserId\":%{private, location:escape_only}s}", buf, 0x44u);
      if (SHIBYTE(v69) < 0) {
        operator delete(__p);
      }
    }

    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
    }
    __int16 v40 = (id)logObject_MicroLocation_Default;
    if (os_signpost_enabled(v40))
    {
      long long v41 = operator new(0x28uLL);
      std::string __p = v41;
      long long v69 = xmmword_256514540;
      _OWORD *v41 = 0u;
      v41[1] = 0u;
      *(void *)((char *)v41 + 29) = 0;
      boost::uuids::to_chars<char *>((uint64_t)&v84, v41);
      uint64_t v42 = v69 >= 0 ? &__p : (void **)__p;
      uint64_t v43 = (a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? (unsigned __int8 *)a2
          : (unsigned __int8 *)a2->__r_.__value_.__r.__words[0];
      __int16 v64 = v43;
      __int16 v66 = v42;
      uint64_t v44 = CLMiLoService::clientId(v10);
      int v45 = *(char *)(v44 + 23);
      uint64_t v46 = *(void *)v44;
      int v47 = (char)a5[23];
      size_t v48 = *(unsigned __int8 **)a5;
      uint64_t v49 = CLMiLoService::userId(v10);
      std::string v50 = v47 >= 0 ? a5 : v48;
      uint64_t v51 = v45 >= 0 ? v44 : v46;
      uint64_t v52 = *(char *)(v49 + 23) >= 0 ? v49 : *(void *)v49;
      *(_DWORD *)uint64_t buf = 68290307;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)char v73 = 2082;
      *(void *)&v73[2] = "";
      __int16 v74 = 2081;
      unint64_t v75 = v66;
      __int16 v76 = 2081;
      char v77 = v64;
      __int16 v78 = 2081;
      uint64_t v79 = v51;
      __int16 v80 = 2081;
      long long v81 = v50;
      __int16 v82 = 2081;
      uint64_t v83 = v52;
      _os_signpost_emit_with_name_impl(&dword_25631F000, v40, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLMiLoServiceManager::disconnect, client ID or user ID does not match!", "{\"msg%{public}.0s\":\"CLMiLoServiceManager::disconnect, client ID or user ID does not match!\", \"ServiceUUID\":%{private, location:escape_only}s, \"clientId\":%{private, location:escape_only}s, \"loadedServiceClientId\":%{private, location:escape_only}s, \"userId\":%{private, location:escape_only}s, \"loadedServiceUserId\":%{private, location:escape_only}s}", buf, 0x44u);
      if (SHIBYTE(v69) < 0) {
        operator delete(__p);
      }
    }

    goto LABEL_84;
  }
  if (v21[23])
  {
    while (*v21 == *v26)
    {
      ++v21;
      ++v26;
      if (!--v22) {
        goto LABEL_84;
      }
    }
    goto LABEL_43;
  }
LABEL_84:
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
  }
  std::string v53 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)char v73 = 2082;
    *(void *)&v73[2] = "";
    _os_log_impl(&dword_25631F000, v53, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoServiceManager::disconnect, releasing model and updating service time\"}", buf, 0x12u);
  }
  CLMicroLocationProto::ServiceDisconnect::ServiceDisconnect((CLMicroLocationProto::ServiceDisconnect *)&__p);
  v70 |= 2u;
  uint64_t v54 = MEMORY[0x263F8C740];
  if ((void)v69 == MEMORY[0x263F8C740]) {
    operator new();
  }
  std::string::operator=((std::string *)v69, a2);
  *(void *)uint64_t buf = CLMiLoService::uuid(v10);
  *(void *)char v73 = v55;
  long long v56 = (char *)operator new(0x28uLL);
  *(void *)(v56 + 29) = 0;
  *(_OWORD *)long long v56 = 0u;
  *((_OWORD *)v56 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
  boost::uuids::to_chars<char *>((uint64_t)buf, v56);
  v70 |= 4u;
  if (*((void *)&v69 + 1) == v54) {
    operator new();
  }
  MEMORY[0x25A2A6080]();
  operator delete(v56);
  uint64_t v57 = a1[16];
  int v67 = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v67);
  *(void *)&long long v71 = boost::uuids::random_generator_pure::operator()((uint64_t)&v67);
  *((void *)&v71 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v58;
  double v59 = cl::chrono::CFAbsoluteTimeClock::now();
  CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::ServiceDisconnect>(&v71, (int *)&__p, (uint64_t)buf, v59);
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v57 + 72))(v57, buf);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)((char *)&v77 + 2));
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v67);
  CLMiLoServiceManager::releaseModel((CLMiLoServiceManager *)a1, (int64x2_t *)v10);
  CLMiLoServiceManager::updateServiceLastActiveTime((CLMiLoServiceManager *)a1, v10);
  uint64_t v60 = CLMiLoService::uuid(v10);
  uint64_t v62 = v61;
  *(void *)v89.unint64_t var0 = v60;
  *(void *)&v89.var0[8] = v62;
  CLMiLoServiceManager::releaseServiceByUuid((CLMiLoServiceManager *)a1, v89);
  CLMicroLocationProto::ServiceDisconnect::~ServiceDisconnect((CLMicroLocationProto::ServiceDisconnect *)&__p);
  return -1;
}

void sub_256387088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  operator delete(v19);

  _Unwind_Resume(a1);
}

void *CLMiLoServiceManager::BiDirectionalUuidMap::lookupByValue@<X0>(CLMiLoServiceManager::BiDirectionalUuidMap *this@<X0>, const uuid *a2@<X1>, unsigned char *a3@<X8>)
{
  int v5 = *(void **)this;
  uint64_t result = (void *)((char *)this + 8);
  int v4 = v5;
  if (v5 == result)
  {
LABEL_12:
    char v9 = 0;
    *a3 = 0;
  }
  else
  {
    while (1)
    {
      BOOL v6 = *(void *)((char *)v4 + 41) == *(void *)a2->var0
        && *(void *)((char *)v4 + 49) == *(void *)&a2->var0[8];
      if (v6) {
        break;
      }
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          long long v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          long long v8 = (void *)v4[2];
          BOOL v6 = *v8 == (void)v4;
          int v4 = v8;
        }
        while (!v6);
      }
      int v4 = v8;
      if (v8 == result) {
        goto LABEL_12;
      }
    }
    *(_OWORD *)a3 = *(_OWORD *)((char *)v4 + 25);
    char v9 = 1;
  }
  a3[16] = v9;
  return result;
}

void CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::ServiceDisconnect>(_OWORD *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  CLMicroLocationProto::ReceivedEvent::ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
  CLMicroLocationProtobufHelper::setSpecificLoggedEvent((CLMicroLocationProtobufHelper *)v9, (CLMicroLocationProto::ReceivedEvent *)a2, v8);
  CLMicroLocationLoggedEventsTable::Entry::Entry(a3, a1, a2[6], (CLMicroLocationProto::ReceivedEvent *)v9, a4);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
}

void sub_25638726C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void CLMiLoServiceManager::releaseModel(CLMiLoServiceManager *this, int64x2_t *a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)this + 2);
  uint64_t v6 = *((void *)this + 3);
  int v4 = (char *)this + 16;
  CLMiLoService::releaseModel(a2);
  long long v8 = *(long long **)v4;
  uint64_t v7 = (long long *)*((void *)v4 + 1);
  if (*(long long **)v4 == v7)
  {
    uint64_t v7 = *(long long **)v4;
  }
  else
  {
    char v9 = v8 + 1;
    while (1)
    {
      uint64_t v10 = *((void *)v9 - 1);
      if (v10)
      {
        if (!*(void *)(v10 + 8)) {
          break;
        }
      }
      if (v9++ == v7)
      {
        long long v8 = (long long *)*((void *)v4 + 1);
        goto LABEL_18;
      }
    }
    long long v8 = v9 - 1;
    if (v9 - 1 != v7 && v9 != v7)
    {
      do
      {
        uint64_t v12 = *((void *)v9 + 1);
        if (!v12 || *(void *)(v12 + 8))
        {
          uint64_t v13 = *(void *)v9;
          *(void *)char v9 = 0;
          *((void *)v9 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0;
          uint64_t v14 = (std::__shared_weak_count *)*((void *)v8 + 1);
          *(void *)long long v8 = v13;
          *((void *)v8 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v12;
          if (v14) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v14);
          }
          ++v8;
        }
        ++v9;
      }
      while (v9 != v7);
      uint64_t v7 = (long long *)*((void *)this + 3);
    }
  }
LABEL_18:
  std::vector<std::shared_ptr<CLMiLoService::ModelAndConf>>::erase((uint64_t)v4, (uint64_t)v8, v7);
  uint64_t v16 = *((void *)this + 2);
  uint64_t v15 = *((void *)this + 3);
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
  }
  uint64_t v17 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    v20[0] = CLMiLoService::uuid((CLMiLoService *)a2);
    v20[1] = v18;
    id v19 = (char *)operator new(0x28uLL);
    *(void *)(v19 + 29) = 0;
    *(_OWORD *)id v19 = 0u;
    *((_OWORD *)v19 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
    boost::uuids::to_chars<char *>((uint64_t)v20, v19);
    *(_DWORD *)uint64_t buf = 68289795;
    int v22 = 0;
    __int16 v23 = 2082;
    uint64_t v24 = "";
    __int16 v25 = 2081;
    __int16 v26 = v19;
    __int16 v27 = 2050;
    uint64_t v28 = (v6 - v5) >> 4;
    __int16 v29 = 2050;
    uint64_t v30 = (v15 - v16) >> 4;
    _os_log_impl(&dword_25631F000, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoServiceManager::releaseModel, released model\", \"ServiceUUID\":%{private, location:escape_only}s, \"NumModelsBefore\":%{public}lu, \"NumModelsAfter\":%{public}lu}", buf, 0x30u);
    operator delete(v19);
  }
}

void sub_25638749C(_Unwind_Exception *a1)
{
  operator delete(v1);

  _Unwind_Resume(a1);
}

uint64_t CLMiLoServiceManager::releaseServiceByUuid(CLMiLoServiceManager *this, uuid a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uuid v9 = a2;
  id v3 = (uint64_t *)((char *)this + 40);
  int v4 = (uint64_t *)*((void *)this + 6);
  uuid v10 = a2;
  while (v4 != v3)
  {
    if (CLMiLoService::uuid((CLMiLoService *)(v4 + 2)) == *(void *)v10.var0 && v5 == *(void *)&v10.var0[8])
    {
      id v3 = v4;
      break;
    }
    int v4 = (uint64_t *)v4[1];
  }
  uint64_t v7 = *v3;
  *(void *)(v7 + 8) = v3[1];
  *(void *)v3[1] = v7;
  --*((void *)this + 7);
  std::__destroy_at[abi:ne180100]<CLMiLoService,0>((uint64_t)(v3 + 2));
  operator delete(v3);
  return CLMiLoServiceManager::BiDirectionalUuidMap::eraseByKey((uint64_t **)this + 8, &v9);
}

void CLMiLoServiceManager::enterLocation(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = CLMiLoServiceManager::rtLoiStringToLocationType(a2);
  if (v8)
  {
    int v9 = *(unsigned __int8 *)(a1 + 120);
    *(void *)(a1 + 96) = v7;
    *(void *)(a1 + 104) = a3;
    *(void *)(a1 + 112) = a4;
    if (!v9) {
      *(unsigned char *)(a1 + 120) = 1;
    }
  }
  else if (*(unsigned char *)(a1 + 120))
  {
    *(unsigned char *)(a1 + 120) = 0;
  }
  CLMiLoServiceManager::updateAllModels((CLMiLoServiceManager *)a1);
}

uint64_t CLMiLoServiceManager::rtLoiStringToLocationType(uint64_t *a1)
{
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    int v1 = *((unsigned __int8 *)a1 + 23);
    if (v1 != 4)
    {
      if (v1 != 6) {
        return 30;
      }
      if (*(_DWORD *)a1 != 1953723747 || *((_WORD *)a1 + 2) != 28015)
      {
LABEL_25:
        if (v1 == 4) {
          goto LABEL_26;
        }
        return 30;
      }
      return 2;
    }
    if (*(_DWORD *)a1 != 1701670760)
    {
      if (*(_DWORD *)a1 != 1802661751) {
        goto LABEL_25;
      }
      return 1;
    }
    return 0;
  }
  uint64_t v3 = a1[1];
  if (v3 == 4)
  {
    if (*(_DWORD *)*a1 == 1701670760) {
      return 0;
    }
    if (*(_DWORD *)*a1 == 1802661751) {
      return 1;
    }
    uint64_t v3 = a1[1];
  }
  if (v3 == 6)
  {
    if (*(_DWORD *)*a1 == 1953723747 && *(_WORD *)(*a1 + 4) == 28015) {
      return 2;
    }
    uint64_t v3 = a1[1];
  }
  if (v3 != 4) {
    return 30;
  }
  a1 = (uint64_t *)*a1;
LABEL_26:
  if (*(_DWORD *)a1 != 1701736302) {
    return 30;
  }
  return 0;
}

void CLMiLoServiceManager::updateAllModels(CLMiLoServiceManager *this)
{
  unint64_t v2 = +[ULTransactionManager shared];
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 3221225472;
  v3[2] = ___ZN20CLMiLoServiceManager15updateAllModelsEv_block_invoke;
  v3[3] = &__block_descriptor_40_e5_v8__0l;
  v3[4] = this;
  [v2 performUnderTransaction:@"com.apple.locationd.microlocation-update-all-models" block:v3];
}

void sub_2563877DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLMiLoServiceManager::releaseAllModels(CLMiLoServiceManager *this)
{
  unint64_t v2 = (int64x2_t *)((char *)this + 40);
  for (uint64_t i = (int64x2_t *)*((void *)this + 6); i != v2; uint64_t i = (int64x2_t *)i->i64[1])
    CLMiLoServiceManager::releaseModel(this, i + 1);
  uint64_t v4 = *((void *)this + 2);
  uint64_t v5 = *((void *)this + 3);
  uint64_t v6 = (uint64_t *)((char *)this + 16);
  while (v4 != v5)
  {
    uint64_t v7 = *(void *)(v4 + 8);
    if (!v7 || *(void *)(v7 + 8))
    {
      uint64_t v8 = CLMiLoServiceManager::releaseAllModels();
      CLMiLoServiceManager::predictionRequest(v8);
      return;
    }
    v4 += 16;
  }
  std::vector<std::shared_ptr<CLMiLoService::ModelAndConf>>::__clear[abi:ne180100](v6);
}

uint64_t CLMiLoServiceManager::predictionRequest(CLMiLoServiceManager *a1, uuid a2, const uuid *a3, double *a4, int a5)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  unint64_t v9 = CLMiLoServiceManager::loadedServiceByConnectionToken(a1, a2);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = (CLMiLoService *)v9;
  CLMicroLocationProto::RequestPrediction::RequestPrediction((CLMicroLocationProto::RequestPrediction *)&v22);
  *(void *)&long long v30 = CLMiLoService::uuid(v11);
  *((void *)&v30 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v12;
  uint64_t v13 = operator new(0x28uLL);
  std::string __p = v13;
  long long v28 = xmmword_256514540;
  *uint64_t v13 = 0u;
  v13[1] = 0u;
  *(void *)((char *)v13 + 29) = 0;
  boost::uuids::to_chars<char *>((uint64_t)&v30, v13);
  v26 |= 4u;
  uint64_t v14 = (std::string *)MEMORY[0x263F8C740];
  if (v24 == MEMORY[0x263F8C740]) {
    operator new();
  }
  MEMORY[0x25A2A6080]();
  if (SHIBYTE(v28) < 0) {
    operator delete(__p);
  }
  uint64_t v15 = (char *)operator new(0x28uLL);
  *(void *)(v15 + 29) = 0;
  *(_OWORD *)uint64_t v15 = 0u;
  *((_OWORD *)v15 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
  boost::uuids::to_chars<char *>((uint64_t)a3, v15);
  v26 |= 8u;
  if (v25 == v14) {
    operator new();
  }
  MEMORY[0x25A2A6080]();
  operator delete(v15);
  uint64_t v16 = (const std::string *)CLMiLoService::clientId(v11);
  v26 |= 2u;
  if (v23 == v14) {
    operator new();
  }
  std::string::operator=(v23, v16);
  uint64_t v17 = *((void *)a1 + 16);
  int v21 = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v21);
  *(void *)&long long v30 = boost::uuids::random_generator_pure::operator()((uint64_t)&v21);
  *((void *)&v30 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v18;
  CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::RequestPrediction>(&v30, &v22, (uint64_t)&__p, *a4);
  (*(void (**)(uint64_t, void **))(*(void *)v17 + 72))(v17, &__p);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)&v29);
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v21);
  uint64_t v19 = CLMiLoService::predictionRequest((uint64_t *)v11, a3, (uint64_t)a4, a5);
  CLMicroLocationProto::RequestPrediction::~RequestPrediction((CLMicroLocationProto::RequestPrediction *)&v22);
  return v19;
}

void sub_256387B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10, __int16 a11, char a12)
{
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)(v12 + 32));
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&a10);
  CLMicroLocationProto::RequestPrediction::~RequestPrediction((CLMicroLocationProto::RequestPrediction *)&a12);
  _Unwind_Resume(a1);
}

unint64_t CLMiLoServiceManager::loadedServiceByConnectionToken(CLMiLoServiceManager *this, uuid a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uuid v13 = a2;
  CLMiLoServiceManager::BiDirectionalUuidMap::lookupByValue((CLMiLoServiceManager *)((char *)this + 64), &v13, v11);
  if (!v12 || (uint64_t v4 = (void *)*((void *)this + 6), v4 == (void *)((char *)this + 40)))
  {
    uint64_t v9 = 0;
    unint64_t v8 = 0;
  }
  else
  {
    unsigned __int8 v5 = 0;
    do
    {
      uint64_t v6 = CLMiLoService::uuid((CLMiLoService *)(v4 + 2));
      if (v6 == v11[0] && v7 == v11[1])
      {
        unsigned __int8 v5 = (_BYTE)v4 + 16;
        unint64_t v2 = (unint64_t)(v4 + 2) >> 8;
      }
      uint64_t v4 = (void *)v4[1];
    }
    while (v4 != (void *)((char *)this + 40));
    unint64_t v8 = v2 << 8;
    uint64_t v9 = v5;
  }
  return v8 | v9;
}

void CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::RequestPrediction>(_OWORD *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  CLMicroLocationProto::ReceivedEvent::ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
  CLMicroLocationProtobufHelper::setSpecificLoggedEvent((CLMicroLocationProtobufHelper *)v9, (CLMicroLocationProto::ReceivedEvent *)a2, v8);
  CLMicroLocationLoggedEventsTable::Entry::Entry(a3, a1, a2[8], (CLMicroLocationProto::ReceivedEvent *)v9, a4);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
}

void sub_256387D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL CLMiLoServiceManager::startUpdating(CLMiLoServiceManager *this, const uuid *a2, int a3)
{
  v25[38] = *MEMORY[0x263EF8340];
  unint64_t v5 = CLMiLoServiceManager::loadedServiceByConnectionToken(this, *a2);
  uint64_t v7 = v6;
  if (v6)
  {
    unint64_t v8 = (CLMiLoService *)v5;
    CLMicroLocationProto::ServiceStartUpdating::ServiceStartUpdating((uint64_t)&v18);
    v24[0] = CLMiLoService::uuid(v8);
    v24[1] = v9;
    char v10 = (char *)operator new(0x28uLL);
    *(void *)(v10 + 29) = 0;
    *(_OWORD *)char v10 = 0u;
    *((_OWORD *)v10 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
    boost::uuids::to_chars<char *>((uint64_t)v24, v10);
    v22 |= 4u;
    uint64_t v11 = (std::string *)MEMORY[0x263F8C740];
    if (v21 == MEMORY[0x263F8C740]) {
      operator new();
    }
    MEMORY[0x25A2A6080]();
    operator delete(v10);
    v22 |= 8u;
    char v20 = a3;
    char v12 = (const std::string *)CLMiLoService::clientId(v8);
    v22 |= 2u;
    if (v19 == v11) {
      operator new();
    }
    std::string::operator=(v19, v12);
    uint64_t v13 = *((void *)this + 16);
    int v17 = 0;
    boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v17);
    *(void *)&long long v23 = boost::uuids::random_generator_pure::operator()((uint64_t)&v17);
    *((void *)&v23 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v14;
    double v15 = cl::chrono::CFAbsoluteTimeClock::now();
    CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::ServiceStartUpdating>(&v23, &v18, (uint64_t)v24, v15);
    (*(void (**)(uint64_t, void *))(*(void *)v13 + 72))(v13, v24);
    CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v25);
    boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v17);
    CLMiLoService::startUpdating(v8, a3);
    CLMicroLocationProto::ServiceStartUpdating::~ServiceStartUpdating((CLMicroLocationProto::ServiceStartUpdating *)&v18);
  }
  return v7 != 0;
}

void sub_256387F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, __int16 a12, char a13)
{
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)(v13 + 32));
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&a11);
  CLMicroLocationProto::ServiceStartUpdating::~ServiceStartUpdating((CLMicroLocationProto::ServiceStartUpdating *)&a13);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::ServiceStartUpdating>(_OWORD *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  CLMicroLocationProto::ReceivedEvent::ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
  CLMicroLocationProtobufHelper::setSpecificLoggedEvent((CLMicroLocationProtobufHelper *)v9, (CLMicroLocationProto::ReceivedEvent *)a2, v8);
  CLMicroLocationLoggedEventsTable::Entry::Entry(a3, a1, a2[4], (CLMicroLocationProto::ReceivedEvent *)v9, a4);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
}

void sub_256387FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL CLMiLoServiceManager::stopUpdating(CLMiLoServiceManager *this, const uuid *a2)
{
  v22[38] = *MEMORY[0x263EF8340];
  uint64_t v3 = (CLMiLoService *)CLMiLoServiceManager::loadedServiceByConnectionToken(this, *a2);
  uint64_t v5 = v4;
  if (v4)
  {
    unsigned __int8 v6 = v3;
    CLMiLoService::stopUpdating(v3);
    CLMicroLocationProto::ServiceStopUpdating::ServiceStopUpdating((CLMicroLocationProto::ServiceStopUpdating *)&v16);
    v21[0] = CLMiLoService::uuid(v6);
    v21[1] = v7;
    unint64_t v8 = (char *)operator new(0x28uLL);
    *(void *)(v8 + 29) = 0;
    *(_OWORD *)unint64_t v8 = 0u;
    *((_OWORD *)v8 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
    boost::uuids::to_chars<char *>((uint64_t)v21, v8);
    v19 |= 4u;
    uint64_t v9 = (std::string *)MEMORY[0x263F8C740];
    if (v18 == MEMORY[0x263F8C740]) {
      operator new();
    }
    MEMORY[0x25A2A6080]();
    operator delete(v8);
    char v10 = (const std::string *)CLMiLoService::clientId(v6);
    v19 |= 2u;
    if (v17 == v9) {
      operator new();
    }
    std::string::operator=(v17, v10);
    uint64_t v11 = *((void *)this + 16);
    int v15 = 0;
    boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v15);
    *(void *)&long long v20 = boost::uuids::random_generator_pure::operator()((uint64_t)&v15);
    *((void *)&v20 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v12;
    double v13 = cl::chrono::CFAbsoluteTimeClock::now();
    CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::ServiceStopUpdating>(&v20, &v16, (uint64_t)v21, v13);
    (*(void (**)(uint64_t, void *))(*(void *)v11 + 72))(v11, v21);
    CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v22);
    boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v15);
    CLMicroLocationProto::ServiceStopUpdating::~ServiceStopUpdating((CLMicroLocationProto::ServiceStopUpdating *)&v16);
  }
  return v5 != 0;
}

void sub_2563881D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, __int16 a12, char a13)
{
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)(v13 + 32));
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&a11);
  CLMicroLocationProto::ServiceStopUpdating::~ServiceStopUpdating((CLMicroLocationProto::ServiceStopUpdating *)&a13);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::ServiceStopUpdating>(_OWORD *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  CLMicroLocationProto::ReceivedEvent::ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
  CLMicroLocationProtobufHelper::setSpecificLoggedEvent((CLMicroLocationProtobufHelper *)v9, (CLMicroLocationProto::ReceivedEvent *)a2, v8);
  CLMicroLocationLoggedEventsTable::Entry::Entry(a3, a1, a2[6], (CLMicroLocationProto::ReceivedEvent *)v9, a4);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
}

void sub_2563882A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t CLMiLoServiceManager::enableMiLoAtCurrentLocation(CLMiLoServiceManager *this, const uuid *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  unint64_t v4 = CLMiLoServiceManager::loadedServiceByConnectionToken(this, *a2);
  if (!v5) {
    return 0;
  }
  unsigned __int8 v6 = (CLMiLoService *)v4;
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
  }
  uint64_t v7 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v17[0] = CLMiLoService::uuid(v6);
    v17[1] = v8;
    uint64_t v9 = (char *)operator new(0x28uLL);
    *(void *)(v9 + 29) = 0;
    *(_OWORD *)uint64_t v9 = 0u;
    *((_OWORD *)v9 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
    boost::uuids::to_chars<char *>((uint64_t)v17, v9);
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    __int16 v19 = 2082;
    long long v20 = v9;
    _os_log_impl(&dword_25631F000, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"ServiceManager: enableMiLoAtCurrentLocation for service\", \"serviceId\":%{public, location:escape_only}s}", buf, 0x1Cu);
    operator delete(v9);
  }

  *(uuid *)uint64_t buf = *a2;
  __n128 v10 = std::deque<CLMiLoServiceManager::OutstandingEnableCustomLoiRequest>::push_back((void *)this + 22, (__n128 *)buf);
  if ((*(unsigned int (**)(__n128))(*(void *)(*((void *)this + 16) + 8) + 104))(v10))
  {
    if ((CLMiLoService::isLocationTypeEnabled((uint64_t)v6, 2uLL) & 1) == 0)
    {
      CLMiLoService::enableInLocationType((uint64_t)v6, 2uLL);
      id v11 = *(id *)(*((void *)this + 11) + 96);
      uint64_t v12 = CLMiLoService::uuid(v6);
      objc_msgSend(v11, "updateServiceLocationTypes:withLocationTypes:", v12, v13, CLMiLoService::locationTypes(v6));
    }
  }
  uint64_t v14 = *((void *)this + 16);
  *(void *)uint64_t buf = CLMiLoService::uuid(v6);
  *(void *)&uint8_t buf[8] = v15;
  return (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)(v14 + 8) + 96))(v14 + 8, buf);
}

void sub_2563884F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CLMiLoServiceManager::removeCustomLoiWithIdentifier(CLMiLoServiceManager *this, const uuid *a2, const uuid *a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  unint64_t v5 = CLMiLoServiceManager::loadedServiceByConnectionToken(this, *a3);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = (CLMiLoService *)v5;
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
  }
  uint64_t v8 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = (char *)operator new(0x28uLL);
    *(void *)(v9 + 29) = 0;
    *(_OWORD *)uint64_t v9 = 0u;
    *((_OWORD *)v9 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
    boost::uuids::to_chars<char *>((uint64_t)a2, v9);
    v15[0] = CLMiLoService::uuid(v7);
    v15[1] = v10;
    id v11 = (char *)operator new(0x28uLL);
    *(void *)(v11 + 29) = 0;
    *(_OWORD *)id v11 = 0u;
    *((_OWORD *)v11 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
    boost::uuids::to_chars<char *>((uint64_t)v15, v11);
    *(_DWORD *)uint64_t buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)int v17 = 2082;
    *(void *)&void v17[2] = "";
    __int16 v18 = 2082;
    __int16 v19 = v9;
    __int16 v20 = 2082;
    uint64_t v21 = v11;
    _os_log_impl(&dword_25631F000, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"ServiceManager: removeCustomLoiWithIdentifier for service\", \"CustomloiId\":%{public, location:escape_only}s, \"serviceId\":%{public, location:escape_only}s}", buf, 0x26u);
    operator delete(v11);
    operator delete(v9);
  }

  if (CLMiLoService::isLocationTypeEnabled((uint64_t)v7, 2uLL)) {
    CLMiLoService::disableInLocationType((uint64_t)v7, 2uLL);
  }
  uint64_t v12 = *((void *)this + 16);
  *(void *)uint64_t buf = CLMiLoService::uuid(v7);
  *(void *)int v17 = v13;
  return (*(uint64_t (**)(uint64_t, const uuid *, uint8_t *))(*(void *)(v12 + 8) + 112))(v12 + 8, a2, buf);
}

void sub_256388708(_Unwind_Exception *a1)
{
  operator delete(v3);
  operator delete(v2);

  _Unwind_Resume(a1);
}

void CLMiLoServiceManager::ingestLocalizationResults(CLMiLoServiceManager *this, const CLMiLoServiceManager::LocalizationResults *a2, uuid a3)
{
  unint64_t v5 = (int64x2_t *)((char *)this + 40);
  char v6 = (int64x2_t *)*((void *)this + 6);
  if (v6 != (int64x2_t *)((char *)this + 40))
  {
    uint64_t v7 = *(void *)&a3.var0[8];
    uint64_t v8 = *(void *)a3.var0;
    do
    {
      v4 &= 0xFFFFFFFFFFFFFF00;
      v3 &= 0xFFFFFFFFFFFFFF00;
      uint64_t Model = CLMiLoService::getModel((CLMiLoService *)&v6[1]);
      if (v11)
      {
        for (unint64_t i = *(void *)a2; i != *((void *)a2 + 1); i += 216)
        {
          if (*(_OWORD *)(i + 168) == *(_OWORD *)(Model + 448))
          {
            unint64_t v4 = i;
            unint64_t v3 = v3 & 0xFFFFFFFFFFFFFF00 | 1;
          }
        }
      }
      CLMiLoService::ingestLocalizationResults(v6 + 1, (CLMicroLocationResultToPublish *)v4, v3, v8, v7);
      char v6 = (int64x2_t *)v6->i64[1];
    }
    while (v6 != v5);
  }
}

void CLMiLoServiceManager::invalidateCachedPredictions(CLMiLoServiceManager *this)
{
  int v1 = (char *)this + 40;
  for (uint64_t i = *((void *)this + 6); (char *)i != v1; uint64_t i = *(void *)(i + 8))
    CLMiLoService::invalidateCachedPrediction((CLMiLoService *)(i + 16));
}

void CLMiLoServiceManager::notifyInvalidConfidence(uint64_t a1, int a2)
{
  uint64_t v2 = a1 + 40;
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3 != a1 + 40)
  {
    do
    {
      CLMiLoService::notifyInvalidConfidence((uint64_t *)(v3 + 16), a2);
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while (v3 != v2);
  }
}

uint64_t CLMiLoServiceManager::requestObservation(CLMiLoServiceManager *a1, uuid a2, uint64_t a3, uint64_t a4, uint64_t a5, double *a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  *(void *)&long long v33 = a3;
  *((void *)&v33 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = a4;
  unint64_t v9 = CLMiLoServiceManager::loadedServiceByConnectionToken(a1, a2);
  if (!v10) {
    return 0;
  }
  char v11 = (CLMiLoService *)v9;
  CLMicroLocationProto::RequestObservation::RequestObservation((CLMicroLocationProto::RequestObservation *)&v23);
  *(void *)&long long v32 = CLMiLoService::uuid(v11);
  *((void *)&v32 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v12;
  uint64_t v13 = operator new(0x28uLL);
  std::string __p = v13;
  long long v30 = xmmword_256514540;
  *uint64_t v13 = 0u;
  v13[1] = 0u;
  *(void *)((char *)v13 + 29) = 0;
  boost::uuids::to_chars<char *>((uint64_t)&v32, v13);
  v28 |= 4u;
  uint64_t v14 = (std::string *)MEMORY[0x263F8C740];
  if (v25 == MEMORY[0x263F8C740]) {
    operator new();
  }
  MEMORY[0x25A2A6080]();
  if (SHIBYTE(v30) < 0) {
    operator delete(__p);
  }
  uint64_t v15 = operator new(0x28uLL);
  std::string __p = v15;
  long long v30 = xmmword_256514540;
  _OWORD *v15 = 0u;
  v15[1] = 0u;
  *(void *)((char *)v15 + 29) = 0;
  boost::uuids::to_chars<char *>((uint64_t)&v33, v15);
  v28 |= 8u;
  if (v26 == v14) {
    operator new();
  }
  MEMORY[0x25A2A6080]();
  if (SHIBYTE(v30) < 0) {
    operator delete(__p);
  }
  int v16 = (char *)operator new(0x28uLL);
  *(void *)(v16 + 29) = 0;
  *(_OWORD *)int v16 = 0u;
  *((_OWORD *)v16 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
  boost::uuids::to_chars<char *>((uint64_t)&v33, v16);
  v28 |= 0x10u;
  if (v27 == v14) {
    operator new();
  }
  MEMORY[0x25A2A6080]();
  operator delete(v16);
  int v17 = (const std::string *)CLMiLoService::clientId(v11);
  v28 |= 2u;
  if (v24 == v14) {
    operator new();
  }
  std::string::operator=(v24, v17);
  uint64_t v18 = *((void *)a1 + 16);
  int v22 = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v22);
  *(void *)&long long v32 = boost::uuids::random_generator_pure::operator()((uint64_t)&v22);
  *((void *)&v32 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v19;
  CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::RequestObservation>(&v32, &v23, (uint64_t)&__p, *a6);
  (*(void (**)(uint64_t, void **))(*(void *)v18 + 72))(v18, &__p);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)&v31);
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v22);
  uint64_t v20 = CLMiLoService::observationRequest((uint64_t *)v11, &v33, a5, (uint64_t)a6, 0);
  CLMicroLocationProto::RequestObservation::~RequestObservation((CLMicroLocationProto::RequestObservation *)&v23);
  return v20;
}

void sub_256388C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, char a13, __int16 a14, char a15)
{
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)(v15 + 32));
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&a13);
  CLMicroLocationProto::RequestObservation::~RequestObservation((CLMicroLocationProto::RequestObservation *)&a15);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::RequestObservation>(_OWORD *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  CLMicroLocationProto::ReceivedEvent::ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
  CLMicroLocationProtobufHelper::setSpecificLoggedEvent((CLMicroLocationProtobufHelper *)v9, (CLMicroLocationProto::ReceivedEvent *)a2, v8);
  CLMicroLocationLoggedEventsTable::Entry::Entry(a3, a1, a2[10], (CLMicroLocationProto::ReceivedEvent *)v9, a4);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
}

void sub_256388D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL CLMiLoServiceManager::labelObservation(CLMiLoServiceManager *this, uuid a2, uuid a3, uuid a4)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uuid v9 = a3;
  uuid v8 = a4;
  unint64_t v4 = (CLMiLoService *)CLMiLoServiceManager::loadedServiceByConnectionToken(this, a2);
  uint64_t v6 = v5;
  if (v5) {
    CLMiLoService::labelObservation(v4, &v9, &v8);
  }
  return v6 != 0;
}

BOOL CLMiLoServiceManager::labelObservationsBetweenDates(CLMiLoServiceManager *this, uuid a2, const uuid *a3, const uuid *a4, NSDate *a5, NSDate *a6)
{
  uint64_t v9 = *(void *)&a2.var0[8];
  uint64_t v10 = *(void *)a2.var0;
  uint64_t v12 = a5;
  uint64_t v13 = a6;
  *(void *)v18.unint64_t var0 = v10;
  *(void *)&v18.var0[8] = v9;
  uint64_t v14 = (CLMiLoService *)CLMiLoServiceManager::loadedServiceByUuid(this, v18);
  uint64_t v16 = v15;
  if (v15) {
    CLMiLoService::labelObservationsBetweenDates(v14, a3, a4, v12, v13);
  }

  return v16 != 0;
}

void sub_256388E38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CLMiLoServiceManager::onTruthLabel(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 128) + 8) + 32))();
}

uint64_t CLMiLoServiceManager::onTruthTagLabelForBetweenDates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 128) + 8) + 48))();
}

uint64_t CLMiLoServiceManager::addTriggerUuidForCachedTrigger(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 128) + 8) + 64))();
}

uint64_t CLMiLoServiceManager::addTriggerEventForFutureLabeling(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 128) + 8) + 56))();
}

uint64_t CLMiLoServiceManager::getModelsVector(CLMiLoServiceManager *this)
{
  return (uint64_t)this + 16;
}

uint64_t CLMiLoServiceManager::getModelOfService@<X0>(uint64_t this@<X0>, uuid a2@<0:X1, 8:X2>, void *a3@<X8>)
{
  uint64_t v4 = this + 40;
  for (uint64_t i = *(void *)(this + 48); ; uint64_t i = *(void *)(i + 8))
  {
    if (i == v4)
    {
      *a3 = 0;
      a3[1] = 0;
      return this;
    }
    this = CLMiLoService::uuid((CLMiLoService *)(i + 16));
    if (this == *(void *)a2.var0 && v6 == *(void *)&a2.var0[8]) {
      break;
    }
  }
  return CLMiLoService::getModelPtr(i + 16, a3);
}

uint64_t std::vector<std::shared_ptr<CLMiLoService::ModelAndConf>>::erase(uint64_t a1, uint64_t a2, long long *a3)
{
  if ((long long *)a2 != a3)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<CLMiLoService::ModelAndConf> *,std::shared_ptr<CLMiLoService::ModelAndConf> *,std::shared_ptr<CLMiLoService::ModelAndConf> *>((uint64_t)&v10, a3, *(long long **)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        uuid v8 = *(std::__shared_weak_count **)(v7 - 8);
        if (v8) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }
        v7 -= 16;
      }
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

uint64_t CLMiLoServiceManager::BiDirectionalUuidMap::eraseByKey(uint64_t **this, const uuid *a2)
{
  uint64_t v3 = (uint64_t *)(this + 1);
  uint64_t v2 = *this;
  if (*this == (uint64_t *)(this + 1))
  {
    char v6 = 0;
  }
  else
  {
    char v6 = 0;
    do
    {
      if (*(uint64_t *)((char *)v2 + 25) == *(void *)a2->var0
        && *(uint64_t *)((char *)v2 + 33) == *(void *)&a2->var0[8])
      {
        char v10 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__remove_node_pointer(this, v2);
        operator delete(v2);
        char v6 = 1;
        uint64_t v2 = v10;
      }
      else
      {
        uuid v8 = (uint64_t *)v2[1];
        if (v8)
        {
          do
          {
            uint64_t v2 = v8;
            uuid v8 = (uint64_t *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            uint64_t v9 = v2;
            uint64_t v2 = (uint64_t *)v2[2];
          }
          while ((uint64_t *)*v2 != v9);
        }
      }
    }
    while (v2 != v3);
  }
  return v6 & 1;
}

uint64_t CLMiLoServiceManager::loadModelForServiceOrCreateNewIfNecessary@<X0>(CLMiLoService *a1@<X0>, uint64_t a2@<X1>, const CLMicroLocationProto::Model *a3@<X2>, uint64_t *a4@<X3>, void *a5@<X8>)
{
  uint64_t v163 = *MEMORY[0x263EF8340];
  LOBYTE(v153[0]) = 0;
  char v160 = 0;
  if (CLMiLoService::serviceType(a1) == 1)
  {
    id v9 = *(id *)(a2 + 72);
    char v10 = v9;
    long long v151 = *(_OWORD *)(a4 + 1);
    char v152 = 1;
    if (v9)
    {
      [v9 fetchMostRecentModelOfModelType:0 atLoiGroupId:&v151];
    }
    else
    {
      long long v120 = 0u;
      long long v121 = 0u;
      long long v118 = 0u;
      long long v119 = 0u;
      long long v116 = 0u;
      *(_OWORD *)uint64_t v117 = 0u;
      long long v114 = 0u;
      long long v115 = 0u;
      long long v112 = 0u;
      long long v113 = 0u;
      long long v110 = 0u;
      long long v111 = 0u;
      long long v108 = 0u;
      long long v109 = 0u;
      long long v107 = 0u;
      memset(v106, 0, sizeof(v106));
      memset(__p, 0, sizeof(__p));
    }
    std::__optional_storage_base<CLMicroLocationModelTable::Entry,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<CLMicroLocationModelTable::Entry,false>>((uint64_t)v153, (uint64_t)__p);
    std::__optional_destruct_base<CLMicroLocationModelTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);

    if (!v160) {
      goto LABEL_20;
    }
    if (!v158)
    {
      CLMiLoService::modelClientIdentifierString(a1, __p);
      if (!v160) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      std::optional<std::string>::operator=[abi:ne180100]<std::string const,void>(&v157, __p);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      id v14 = *(id *)(a2 + 72);
      if (!v160) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      CLMicroLocationModelTable::Entry::Entry((CLMicroLocationModelTable::Entry *)__p, (const CLMicroLocationModelTable::Entry *)v153);
      v128[1].__vftable = 0;
      v128[0].__vftable = 0;
      *(void *)&v129[0] = 0;
      v93[0] = 0;
      v128[0].__vftable = (std::bad_cast_vtbl *)operator new(0x138uLL);
      v128[1] = v128[0];
      *(void *)&v129[0] = v128[0].__vftable + 13;
      v128[1].__vftable = (std::bad_cast_vtbl *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationModelTable::Entry>,CLMicroLocationModelTable::Entry const*,CLMicroLocationModelTable::Entry const*,CLMicroLocationModelTable::Entry*>((uint64_t)v129, (CLMicroLocationModelTable::Entry *)__p, (CLMicroLocationModelTable::Entry *)((char *)&v121 + 8), (CLMicroLocationModelTable::Entry *)v128[0].__vftable);
      [v14 insertEntries:v128];
      *(void *)uint64_t buf = v128;
      std::vector<CLMicroLocationModelTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      if (BYTE8(v118) && SBYTE7(v118) < 0) {
        operator delete(v117[0]);
      }
      CLMicroLocationProto::Model::~Model((CLMicroLocationProto::Model *)&__p[1].__r_.__value_.__r.__words[1]);
    }
  }
  else
  {
    id v11 = *(id *)(a2 + 72);
    uint64_t v12 = CLMiLoService::uuid(a1);
    if (v11)
    {
      objc_msgSend(v11, "fetchMostRecentModelForServiceUuid:atLoiGroupId:", v12, v13, a4[1], a4[2]);
    }
    else
    {
      long long v120 = 0u;
      long long v121 = 0u;
      long long v118 = 0u;
      long long v119 = 0u;
      long long v116 = 0u;
      *(_OWORD *)uint64_t v117 = 0u;
      long long v114 = 0u;
      long long v115 = 0u;
      long long v112 = 0u;
      long long v113 = 0u;
      long long v110 = 0u;
      long long v111 = 0u;
      long long v108 = 0u;
      long long v109 = 0u;
      long long v107 = 0u;
      memset(v106, 0, sizeof(v106));
      memset(__p, 0, sizeof(__p));
    }
    std::__optional_storage_base<CLMicroLocationModelTable::Entry,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<CLMicroLocationModelTable::Entry,false>>((uint64_t)v153, (uint64_t)__p);
    std::__optional_destruct_base<CLMicroLocationModelTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
  }
  if (v160)
  {
LABEL_92:
    uint64_t v16 = *a4;
    goto LABEL_93;
  }
LABEL_20:
  uint64_t v15 = CLMiLoService::serviceType(a1);
  uint64_t v16 = *a4;
  if (v15 == 4 && v16 != 2)
  {
    long long v162 = *(_OWORD *)(a4 + 1);
    id v17 = *(id *)(a2 + 72);
    uuid v18 = v17;
    *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v162;
    v104.__r_.__value_.__s.__data_[16] = 1;
    if (v17)
    {
      [v17 fetchMostRecentModelOfModelType:2 atLoiGroupId:&v104];
    }
    else
    {
      long long v144 = 0u;
      long long v143 = 0u;
      long long v142 = 0u;
      long long v141 = 0u;
      *(_OWORD *)uint64_t v140 = 0u;
      long long v139 = 0u;
      long long v138 = 0u;
      long long v137 = 0u;
      long long v136 = 0u;
      long long v135 = 0u;
      *(_OWORD *)v134 = 0u;
      long long v133 = 0u;
      long long v132 = 0u;
      long long v131 = 0u;
      long long v130 = 0u;
      memset(v129, 0, sizeof(v129));
      *(_OWORD *)&v128[0].__vftable = 0u;
    }

    std::string::basic_string[abi:ne180100]<0>(buf, "");
    if ((_BYTE)v162)
    {
LABEL_26:
      uint64_t v19 = (char *)operator new(0x28uLL);
      *(void *)(v19 + 29) = 0;
      *(_OWORD *)uint64_t v19 = 0u;
      *((_OWORD *)v19 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)&v162, v19);
      if ((v93[15] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      *(void *)uint64_t buf = v19;
      *(_OWORD *)__int16 v93 = xmmword_256514540;
    }
    else
    {
      uint64_t v20 = 1;
      while (v20 != 16)
      {
        if (*((unsigned __int8 *)&v162 + v20++))
        {
          if ((unint64_t)(v20 - 2) <= 0xE) {
            goto LABEL_26;
          }
          break;
        }
      }
    }
    if (BYTE8(v144))
    {
      CLMiLoService::getClientIdAndServiceUuid(a1, __p);
      if (!BYTE8(v144)) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      if (BYTE8(v141))
      {
        if (SBYTE7(v141) < 0) {
          operator delete(v140[0]);
        }
        *(_OWORD *)uint64_t v140 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
        *(void *)&long long v141 = *((void *)&__p[0].__r_.__value_.__l + 2);
      }
      else
      {
        *(_OWORD *)uint64_t v140 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
        *(void *)&long long v141 = *((void *)&__p[0].__r_.__value_.__l + 2);
        BYTE8(v14CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 1;
      }
      if (BYTE8(v144))
      {
        if (v134[1])
        {
          CLMicroLocationProto::LocationSimilarityListData::Clear(v134[1]);
          DWORD2(v139) &= ~0x400u;
          if (!BYTE8(v144)) {
            std::__throw_bad_optional_access[abi:ne180100]();
          }
        }
        else
        {
          DWORD2(v139) &= ~0x400u;
        }
        *(_OWORD *)&v90.__r_.__value_.__l.__data_ = *(_OWORD *)&v128[0].__vftable;
        LODWORD(__p[0].__r_.__value_.__l.__data_) = 0;
        boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)__p);
        uint64_t v24 = (std::bad_cast_vtbl *)boost::uuids::random_generator_pure::operator()((uint64_t)__p);
        if (!BYTE8(v144)) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        v128[0].__vftable = v24;
        v128[1].__vftable = v25;
        boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)__p);
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
        }
        int v26 = (id)logObject_MicroLocation_Default;
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          CLMiLoService::getClientIdAndServiceUuid(a1, v91);
          if ((v91[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            __int16 v27 = v91;
          }
          else {
            __int16 v27 = (std::string *)v91[0].__r_.__value_.__r.__words[0];
          }
          if (!BYTE8(v144) || !BYTE8(v141)) {
            std::__throw_bad_optional_access[abi:ne180100]();
          }
          if ((SBYTE7(v141) & 0x80u) == 0) {
            int v28 = v140;
          }
          else {
            int v28 = (void **)v140[0];
          }
          uint64_t v29 = (char *)operator new(0x28uLL);
          *(void *)(v29 + 29) = 0;
          *(_OWORD *)uint64_t v29 = 0u;
          *((_OWORD *)v29 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
          boost::uuids::to_chars<char *>((uint64_t)&v90, v29);
          if (!BYTE8(v144)) {
            std::__throw_bad_optional_access[abi:ne180100]();
          }
          long long v30 = (char *)operator new(0x28uLL);
          *(void *)(v30 + 29) = 0;
          *(_OWORD *)long long v30 = 0u;
          *((_OWORD *)v30 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
          boost::uuids::to_chars<char *>((uint64_t)v128, v30);
          uint64_t v31 = buf;
          if (v93[15] < 0) {
            uint64_t v31 = *(uint8_t **)buf;
          }
          __p[0].__r_.__value_.__r.__words[0] = 68290562;
          LOWORD(__p[0].__r_.__value_.__r.__words[1]) = 2082;
          *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
          WORD1(__p[0].__r_.__value_.__r.__words[2]) = 2082;
          *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"LSL";
          WORD2(__p[1].__r_.__value_.__r.__words[0]) = 2082;
          *(std::string::size_type *)((char *)__p[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)v27;
          HIWORD(__p[1].__r_.__value_.__r.__words[1]) = 2082;
          __p[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v28;
          LOWORD(v106[0]) = 2082;
          *(void *)((char *)v106 + 2) = v29;
          WORD5(v106[0]) = 2082;
          *(void *)((char *)v106 + 12) = v30;
          WORD2(v106[1]) = 2082;
          *(void *)((char *)&v106[1] + 6) = v31;
          _os_log_impl(&dword_25631F000, v26, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoServiceManager::findInstantModelForServiceOfTypeLSL, new LSL service looking for unsupervised model\", \"FoundModelType\":%{public, location:escape_only}s, \"ServiceId\":%{public, location:escape_only}s, \"UsingModelOf\":%{public, location:escape_only}s, \"OriginalLSLModelUUID\":%{public, location:escape_only}s, \"UsedModelUUID\":%{public, location:escape_only}s, \"AtLoi\":%{public, location:escape_only}s}", (uint8_t *)__p, 0x4Eu);
          operator delete(v30);
          operator delete(v29);
          if (SHIBYTE(v91[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v91[0].__r_.__value_.__l.__data_);
          }
        }
LABEL_88:

LABEL_89:
        if ((v93[15] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        std::__optional_storage_base<CLMicroLocationModelTable::Entry,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<CLMicroLocationModelTable::Entry,false>>((uint64_t)v153, (uint64_t)v128);
        std::__optional_destruct_base<CLMicroLocationModelTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v128);
        goto LABEL_92;
      }
    }
    else
    {
      id v22 = *(id *)(a2 + 72);
      int v23 = v22;
      *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v162;
      v90.__r_.__value_.__s.__data_[16] = 1;
      if (v22)
      {
        [v22 fetchMostRecentModelOfModelType:0 atLoiGroupId:&v90];
      }
      else
      {
        long long v120 = 0u;
        long long v121 = 0u;
        long long v118 = 0u;
        long long v119 = 0u;
        long long v116 = 0u;
        *(_OWORD *)uint64_t v117 = 0u;
        long long v114 = 0u;
        long long v115 = 0u;
        long long v112 = 0u;
        long long v113 = 0u;
        long long v110 = 0u;
        long long v111 = 0u;
        long long v108 = 0u;
        long long v109 = 0u;
        long long v107 = 0u;
        memset(v106, 0, sizeof(v106));
        memset(__p, 0, sizeof(__p));
      }
      std::__optional_storage_base<CLMicroLocationModelTable::Entry,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<CLMicroLocationModelTable::Entry,false>>((uint64_t)v128, (uint64_t)__p);
      std::__optional_destruct_base<CLMicroLocationModelTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);

      if (!BYTE8(v144)) {
        goto LABEL_89;
      }
      CLMiLoService::getClientIdAndServiceUuid(a1, __p);
      if (!BYTE8(v144)) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      if (BYTE8(v141))
      {
        if (SBYTE7(v141) < 0) {
          operator delete(v140[0]);
        }
        *(_OWORD *)uint64_t v140 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
        *(void *)&long long v141 = *((void *)&__p[0].__r_.__value_.__l + 2);
      }
      else
      {
        *(_OWORD *)uint64_t v140 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
        *(void *)&long long v141 = *((void *)&__p[0].__r_.__value_.__l + 2);
        BYTE8(v14CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 1;
      }
      if (BYTE8(v144))
      {
        DWORD2(v129[0]) = 2;
        if (!CLMicroLocationProto::MotionState_IsValid((CLMicroLocationProto *)2)) {
          __assert_rtn("set_modeltype", "microlocation.pb.h", 12679, "::CLMicroLocationProto::Model_ModelType_IsValid(value)");
        }
        DWORD2(v139) |= 0x10u;
        DWORD1(v130) = 2;
        if (!BYTE8(v144)) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        long long v161 = *(_OWORD *)&v128[0].__vftable;
        LODWORD(__p[0].__r_.__value_.__l.__data_) = 0;
        boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)__p);
        long long v32 = (std::bad_cast_vtbl *)boost::uuids::random_generator_pure::operator()((uint64_t)__p);
        if (!BYTE8(v144)) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        v128[0].__vftable = v32;
        v128[1].__vftable = v33;
        boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)__p);
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
        }
        int v26 = (id)logObject_MicroLocation_Default;
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v34 = v91;
          CLMiLoService::getClientIdAndServiceUuid(a1, v91);
          if ((v91[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v34 = (std::string *)v91[0].__r_.__value_.__r.__words[0];
          }
          int v35 = (char *)operator new(0x28uLL);
          *(void *)(v35 + 29) = 0;
          *(_OWORD *)int v35 = 0u;
          *((_OWORD *)v35 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
          boost::uuids::to_chars<char *>((uint64_t)&v161, v35);
          if (!BYTE8(v144)) {
            std::__throw_bad_optional_access[abi:ne180100]();
          }
          uint64_t v36 = (char *)operator new(0x28uLL);
          *(void *)(v36 + 29) = 0;
          *(_OWORD *)uint64_t v36 = 0u;
          *((_OWORD *)v36 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
          boost::uuids::to_chars<char *>((uint64_t)v128, v36);
          long long v37 = buf;
          if (v93[15] < 0) {
            long long v37 = *(uint8_t **)buf;
          }
          __p[0].__r_.__value_.__r.__words[0] = 68290306;
          LOWORD(__p[0].__r_.__value_.__r.__words[1]) = 2082;
          *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
          WORD1(__p[0].__r_.__value_.__r.__words[2]) = 2082;
          *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"unsupervised";
          WORD2(__p[1].__r_.__value_.__r.__words[0]) = 2082;
          *(std::string::size_type *)((char *)__p[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)v34;
          HIWORD(__p[1].__r_.__value_.__r.__words[1]) = 2082;
          __p[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v35;
          LOWORD(v106[0]) = 2082;
          *(void *)((char *)v106 + 2) = v36;
          WORD5(v106[0]) = 2082;
          *(void *)((char *)v106 + 12) = v37;
          _os_log_impl(&dword_25631F000, v26, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoServiceManager::findInstantModelForServiceOfTypeLSL, new LSL service looking for unsupervised model\", \"FoundModelType\":%{public, location:escape_only}s, \"ServiceId\":%{public, location:escape_only}s, \"OriginalUnsupervisedModelUUID\":%{public, location:escape_only}s, \"UsedModelUUID\":%{public, location:escape_only}s, \"AtLoi\":%{public, location:escape_only}s}", (uint8_t *)__p, 0x44u);
          operator delete(v36);
          operator delete(v35);
          if (SHIBYTE(v91[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v91[0].__r_.__value_.__l.__data_);
          }
        }
        goto LABEL_88;
      }
    }
    std::__throw_bad_optional_access[abi:ne180100]();
  }
LABEL_93:
  if (v16 == 2 && CLMiLoService::serviceType(a1) == 4)
  {
    if (!v160) {
      goto LABEL_169;
    }
    if (v155 != 3)
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
      }
      uint64_t v38 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        if (!v160 || !v158) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v39 = &v157;
        }
        else {
          uint64_t v39 = (std::string *)v157.__r_.__value_.__r.__words[0];
        }
        __int16 v40 = (char *)operator new(0x28uLL);
        *(void *)uint64_t buf = v40;
        *(_OWORD *)__int16 v93 = xmmword_256514540;
        *(_OWORD *)__int16 v40 = 0u;
        *((_OWORD *)v40 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
        *(void *)(v40 + 29) = 0;
        boost::uuids::to_chars<char *>((uint64_t)v153, v40);
        if (v93[15] >= 0) {
          long long v41 = buf;
        }
        else {
          long long v41 = *(uint8_t **)buf;
        }
        if (!v160) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        std::string::size_type v42 = v155;
        memset(v91, 0, 24);
        if ((boost::conversion::detail::try_lexical_convert<std::string,boost::uuids::uuid>((uint64_t)v159, v91) & 1) == 0)
        {
          std::bad_cast::bad_cast(v128);
          v128[0].__vftable = (std::bad_cast_vtbl *)&unk_2704DAAD0;
          boost::throw_exception<boost::bad_lexical_cast>((uint64_t)v128);
        }
        uint64_t v43 = v91;
        if ((v91[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v43 = (std::string *)v91[0].__r_.__value_.__r.__words[0];
        }
        __p[0].__r_.__value_.__r.__words[0] = 68290051;
        LOWORD(__p[0].__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
        WORD1(__p[0].__r_.__value_.__r.__words[2]) = 2082;
        *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v39;
        WORD2(__p[1].__r_.__value_.__r.__words[0]) = 2082;
        *(std::string::size_type *)((char *)__p[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)v41;
        HIWORD(__p[1].__r_.__value_.__r.__words[1]) = 2050;
        __p[1].__r_.__value_.__r.__words[2] = v42;
        LOWORD(v106[0]) = 2081;
        *(void *)((char *)v106 + 2) = v43;
        _os_log_impl(&dword_25631F000, v38, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLMiLoServiceManager loaded incorrect model type for LSL service in custom LOI, this should never happen!!!\", \"ClientId\":%{public, location:escape_only}s, \"ModelUuid\":%{public, location:escape_only}s, \"ModelType\":%{public}lld, \"LOI ID\":%{private, location:escape_only}s}", (uint8_t *)__p, 0x3Au);
        if (SHIBYTE(v91[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v91[0].__r_.__value_.__l.__data_);
        }
        if ((v93[15] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }

      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
      }
      uint64_t v44 = (id)logObject_MicroLocation_Default;
      if (os_signpost_enabled(v44))
      {
        if (!v160 || !v158) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v45 = &v157;
        }
        else {
          int v45 = (std::string *)v157.__r_.__value_.__r.__words[0];
        }
        uint64_t v46 = (char *)operator new(0x28uLL);
        *(void *)uint64_t buf = v46;
        *(_OWORD *)__int16 v93 = xmmword_256514540;
        *(_OWORD *)uint64_t v46 = 0u;
        *((_OWORD *)v46 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
        *(void *)(v46 + 29) = 0;
        boost::uuids::to_chars<char *>((uint64_t)v153, v46);
        if (v93[15] >= 0) {
          int v47 = buf;
        }
        else {
          int v47 = *(uint8_t **)buf;
        }
        if (!v160) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        std::string::size_type v48 = v155;
        memset(v91, 0, 24);
        if ((boost::conversion::detail::try_lexical_convert<std::string,boost::uuids::uuid>((uint64_t)v159, v91) & 1) == 0)
        {
          std::bad_cast::bad_cast(v128);
          v128[0].__vftable = (std::bad_cast_vtbl *)&unk_2704DAAD0;
          boost::throw_exception<boost::bad_lexical_cast>((uint64_t)v128);
        }
        uint64_t v49 = v91;
        if ((v91[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v49 = (std::string *)v91[0].__r_.__value_.__r.__words[0];
        }
        __p[0].__r_.__value_.__r.__words[0] = 68290051;
        LOWORD(__p[0].__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
        WORD1(__p[0].__r_.__value_.__r.__words[2]) = 2082;
        *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v45;
        WORD2(__p[1].__r_.__value_.__r.__words[0]) = 2082;
        *(std::string::size_type *)((char *)__p[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)v47;
        HIWORD(__p[1].__r_.__value_.__r.__words[1]) = 2050;
        __p[1].__r_.__value_.__r.__words[2] = v48;
        LOWORD(v106[0]) = 2081;
        *(void *)((char *)v106 + 2) = v49;
        _os_signpost_emit_with_name_impl(&dword_25631F000, v44, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLMiLoServiceManager loaded incorrect model type for LSL service in custom LOI, this should never happen!!!", "{\"msg%{public}.0s\":\"CLMiLoServiceManager loaded incorrect model type for LSL service in custom LOI, this should never happen!!!\", \"ClientId\":%{public, location:escape_only}s, \"ModelUuid\":%{public, location:escape_only}s, \"ModelType\":%{public}lld, \"LOI ID\":%{private, location:escape_only}s}", (uint8_t *)__p, 0x3Au);
        if (SHIBYTE(v91[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v91[0].__r_.__value_.__l.__data_);
        }
        if ((v93[15] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }

      std::__optional_destruct_base<CLMicroLocationModelTable::Entry,false>::reset[abi:ne180100]((uint64_t)v153);
    }
  }
  if (v160)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
    }
    std::string v50 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
    {
      if (!v160 || !v158) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v51 = &v157;
      }
      else {
        uint64_t v51 = (std::string *)v157.__r_.__value_.__r.__words[0];
      }
      uint64_t v52 = (char *)operator new(0x28uLL);
      *(void *)uint64_t buf = v52;
      *(_OWORD *)__int16 v93 = xmmword_256514540;
      *(_OWORD *)uint64_t v52 = 0u;
      *((_OWORD *)v52 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
      *(void *)(v52 + 29) = 0;
      boost::uuids::to_chars<char *>((uint64_t)v153, v52);
      if (v93[15] >= 0) {
        std::string v53 = buf;
      }
      else {
        std::string v53 = *(uint8_t **)buf;
      }
      if (!v160) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      std::string::size_type v54 = v155;
      memset(v91, 0, 24);
      if ((boost::conversion::detail::try_lexical_convert<std::string,boost::uuids::uuid>((uint64_t)v159, v91) & 1) == 0)
      {
        std::bad_cast::bad_cast(v128);
        v128[0].__vftable = (std::bad_cast_vtbl *)&unk_2704DAAD0;
        boost::throw_exception<boost::bad_lexical_cast>((uint64_t)v128);
      }
      uint64_t v55 = v91;
      if ((v91[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v55 = (std::string *)v91[0].__r_.__value_.__r.__words[0];
      }
      __p[0].__r_.__value_.__r.__words[0] = 68290051;
      LOWORD(__p[0].__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
      WORD1(__p[0].__r_.__value_.__r.__words[2]) = 2082;
      *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v51;
      WORD2(__p[1].__r_.__value_.__r.__words[0]) = 2082;
      *(std::string::size_type *)((char *)__p[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)v53;
      HIWORD(__p[1].__r_.__value_.__r.__words[1]) = 2050;
      __p[1].__r_.__value_.__r.__words[2] = v54;
      LOWORD(v106[0]) = 2081;
      *(void *)((char *)v106 + 2) = v55;
      _os_log_impl(&dword_25631F000, v50, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoServiceManager loaded model from DB:\", \"ClientId\":%{public, location:escape_only}s, \"ModelUuid\":%{public, location:escape_only}s, \"ModelType\":%{public}lld, \"LOI ID\":%{private, location:escape_only}s}", (uint8_t *)__p, 0x3Au);
      if (SHIBYTE(v91[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v91[0].__r_.__value_.__l.__data_);
      }
      if ((v93[15] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }

    if (!v160) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    CLMicroLocationModel::fromProtobuf(&v156, a3, (uint64_t)__p);
    if (!v160) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    CLMiLoService::modelClientIdentifierString(a1, (std::string *)v128);
    v91[0].__r_.__value_.__r.__words[0] = CLMiLoService::uuid(a1);
    v91[0].__r_.__value_.__l.__size_ = v56;
    if (!v160) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    CLMiLoService::settingsString(a1, buf);
    if (!v160) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    std::allocate_shared[abi:ne180100]<CLMiLoService::ModelAndConf,std::allocator<CLMiLoService::ModelAndConf>,CLMicroLocationModel,boost::uuids::uuid &,std::string const,boost::uuids::uuid,boost::uuids::uuid &,std::string,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,void>((const CLMicroLocationModel *)__p, v153, (long long *)v128, (uint64_t *)v91, v159, (long long *)buf, &v154, a5);
    if ((v93[15] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (SBYTE7(v129[0]) < 0) {
      operator delete(v128[0].__vftable);
    }
    if (v127 < 0) {
      operator delete(v126);
    }
    if (v124)
    {
      v125 = v124;
      operator delete(v124);
    }
    uint64_t v57 = (std::bad_cast *)__p;
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::~__hash_table((uint64_t)&v123);
    v128[0].__vftable = (std::bad_cast_vtbl *)&v122;
    uint64_t v58 = v128;
    goto LABEL_203;
  }
LABEL_169:
  CLMicroLocationModel::CLMicroLocationModel((CLMicroLocationModel *)v128);
  uint64_t v59 = CLMiLoService::serviceType(a1);
  HIDWORD(v128[0].__vftable) = CLMiLoService::modelTypeByServiceAndLocationType(v59, *a4);
  uint64_t v60 = CLMiLoService::serviceType(a1);
  LODWORD(v128[0].__vftable) = CLMiLoService::generationAlgorithmByServiceAndLocationType(v60, *a4);
  CLMicroLocationModel::setQualityIndicator((uint64_t)v128, 1);
  uint64_t v61 = operator new(4uLL);
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v61;
  *uint64_t v61 = 3;
  __p[0].__r_.__value_.__r.__words[2] = (std::string::size_type)(v61 + 1);
  __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)(v61 + 1);
  CLMicroLocationModel::setCandidateQualityReasons((uint64_t)v128, (uint64_t)__p);
  if (__p[0].__r_.__value_.__r.__words[0])
  {
    __p[0].__r_.__value_.__l.__size_ = __p[0].__r_.__value_.__r.__words[0];
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  long long v161 = 0uLL;
  LODWORD(__p[0].__r_.__value_.__l.__data_) = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)__p);
  *(void *)&long long v161 = boost::uuids::random_generator_pure::operator()((uint64_t)__p);
  *((void *)&v161 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v62;
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)__p);
  long long v63 = v161;
  CLMiLoService::modelClientIdentifierString(a1, (std::string *)buf);
  uint64_t v64 = CLMiLoService::uuid(a1);
  uint64_t v66 = v65;
  uint64_t v67 = a4[1];
  uint64_t v69 = a4[2];
  uint64_t v68 = (uint64_t)(a4 + 1);
  CLMiLoService::settingsString(a1, v91);
  double v70 = cl::chrono::CFAbsoluteTimeClock::now();
  CLMiLoService::ModelAndConf::ModelAndConf((uint64_t)__p, (const CLMicroLocationModel *)v128, v63, *((uint64_t *)&v63 + 1), (long long *)buf, v64, v66, v70, v71, v67, v69, (long long *)v91);
  if (SHIBYTE(v91[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v91[0].__r_.__value_.__l.__data_);
  }
  if ((v93[15] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  id v72 = *(id *)(a2 + 72);
  int v87 = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v87);
  uint64_t v73 = boost::uuids::random_generator_pure::operator()((uint64_t)&v87);
  uint64_t v75 = v74;
  double v76 = cl::chrono::CFAbsoluteTimeClock::now();
  CLMicroLocationModel::toProtobuf((CLMicroLocationModel *)__p, (uint64_t)v91);
  CLMiLoService::modelClientIdentifierString(a1, &v90);
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v85, v90.__r_.__value_.__l.__data_, v90.__r_.__value_.__l.__size_);
  }
  else {
    std::string v85 = v90;
  }
  char v86 = 1;
  v88[0] = CLMiLoService::uuid(a1);
  v88[1] = v77;
  char v89 = 1;
  CLMicroLocationModelTable::Entry::Entry(buf, v73, v75, v91, &v85, v88, a4[1], a4[2], v76);
  memset(&v104, 0, sizeof(v104));
  *(void *)&long long v162 = &v104;
  BYTE8(v162) = 0;
  v104.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x138uLL);
  v104.__r_.__value_.__l.__size_ = v104.__r_.__value_.__r.__words[0];
  v104.__r_.__value_.__r.__words[2] = v104.__r_.__value_.__r.__words[0] + 312;
  v104.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationModelTable::Entry>,CLMicroLocationModelTable::Entry const*,CLMicroLocationModelTable::Entry const*,CLMicroLocationModelTable::Entry*>((uint64_t)&v104.__r_.__value_.__r.__words[2], (CLMicroLocationModelTable::Entry *)buf, (CLMicroLocationModelTable::Entry *)&v103, (CLMicroLocationModelTable::Entry *)v104.__r_.__value_.__l.__data_);
  [v72 insertEntries:&v104];
  *(void *)&long long v162 = &v104;
  std::vector<CLMicroLocationModelTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v162);
  if (v102 && v101 < 0) {
    operator delete(v100);
  }
  CLMicroLocationProto::Model::~Model((CLMicroLocationProto::Model *)((char *)&v95 + 2));
  if (v86 && SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v85.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v90.__r_.__value_.__l.__data_);
  }
  CLMicroLocationProto::Model::~Model((CLMicroLocationProto::Model *)v91);
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v87);

  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
  }
  __int16 v78 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v79 = &v104;
    CLMiLoService::modelClientIdentifierString(a1, &v104);
    if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v79 = (std::string *)v104.__r_.__value_.__r.__words[0];
    }
    __int16 v80 = (char *)operator new(0x28uLL);
    *(void *)(v80 + 29) = 0;
    *(_OWORD *)__int16 v80 = 0u;
    *((_OWORD *)v80 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
    boost::uuids::to_chars<char *>((uint64_t)&v161, v80);
    uint64_t v81 = HIDWORD(v128[0].__vftable);
    memset(&v90, 0, sizeof(v90));
    if ((boost::conversion::detail::try_lexical_convert<std::string,boost::uuids::uuid>(v68, &v90) & 1) == 0)
    {
      std::bad_cast::bad_cast((std::bad_cast *)v91);
      v91[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_2704DAAD0;
      boost::throw_exception<boost::bad_lexical_cast>((uint64_t)v91);
    }
    __int16 v82 = &v90;
    if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      __int16 v82 = (std::string *)v90.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)uint64_t buf = 68290051;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)__int16 v93 = 2082;
    *(void *)&void v93[2] = "";
    *(_WORD *)&v93[10] = 2082;
    *(void *)&v93[12] = v79;
    __int16 v94 = 2082;
    std::string::size_type v95 = v80;
    __int16 v96 = 2050;
    uint64_t v97 = v81;
    __int16 v98 = 2081;
    int v99 = v82;
    _os_log_impl(&dword_25631F000, v78, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoServiceManager created empty model:\", \"ClientId\":%{public, location:escape_only}s, \"ModelUuid\":%{public, location:escape_only}s, \"ModelType\":%{public}lld, \"LOI ID\":%{private, location:escape_only}s}", buf, 0x3Au);
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v90.__r_.__value_.__l.__data_);
    }
    operator delete(v80);
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v104.__r_.__value_.__l.__data_);
    }
  }

  std::allocate_shared[abi:ne180100]<CLMiLoService::ModelAndConf,std::allocator<CLMiLoService::ModelAndConf>,CLMiLoService::ModelAndConf&,void>((const CLMiLoService::ModelAndConf *)__p, a5);
  CLMiLoService::ModelAndConf::~ModelAndConf((CLMiLoService::ModelAndConf *)__p);
  if (v150 < 0) {
    operator delete(v149);
  }
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
  uint64_t v57 = v128;
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::~__hash_table((uint64_t)&v146);
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v145;
  uint64_t v58 = (std::bad_cast *)__p;
LABEL_203:
  std::vector<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>::__destroy_vector::operator()[abi:ne180100]((void ***)v58);
  std::__optional_destruct_base<CLMicroLocationModel::BlueAtlasData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v57[25]);
  std::__optional_destruct_base<CLMicroLocationModel::SimilarityListData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v57[9]);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&v57[2]);
  return std::__optional_destruct_base<CLMicroLocationModelTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v153);
}

void sub_25638A650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  operator delete(v61);
  operator delete(v60);
  if (a30 < 0) {
    operator delete(__p);
  }

  if (a59 < 0) {
    operator delete(a54);
  }
  std::__optional_destruct_base<CLMicroLocationModelTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&STACK[0x540]);
  std::__optional_destruct_base<CLMicroLocationModelTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&STACK[0x720]);
  _Unwind_Resume(a1);
}

void CLMicroLocationModelTable::Entry::~Entry(void **this)
{
  if (*((unsigned char *)this + 264) && *((char *)this + 263) < 0) {
    operator delete(this[30]);
  }
  CLMicroLocationProto::Model::~Model((CLMicroLocationProto::Model *)(this + 4));
}

void *CLMiLoServiceManager::modelByServiceAndLocation@<X0>(CLMiLoService *this@<X1>, uint64_t a2@<X0>, void *a3@<X8>)
{
  v13[4] = *MEMORY[0x263EF8340];
  v13[0] = &unk_2704DBDF0;
  void v13[3] = v13;
  v12[0] = &unk_2704DBE80;
  v12[1] = this;
  void v12[3] = v12;
  uint64_t v5 = *(void **)(a2 + 16);
  char v6 = *(void **)(a2 + 24);
  if (CLMiLoService::serviceType(this) == 1) {
    uint64_t v7 = v13;
  }
  else {
    uint64_t v7 = v12;
  }
  std::__function::__value_func<BOOL ()(std::shared_ptr<CLMiLoService::ModelAndConf> const&)>::__value_func[abi:ne180100]((uint64_t)v10, (uint64_t)v7);
  if (v5 != v6)
  {
    while (1)
    {
      if (!v11) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      if ((*(uint64_t (**)(uint64_t, void *))(*(void *)v11 + 48))(v11, v5)) {
        break;
      }
      v5 += 2;
      if (v5 == v6)
      {
        uint64_t v5 = v6;
        break;
      }
    }
  }
  std::__function::__value_func<BOOL ()(std::shared_ptr<CLMiLoService::ModelAndConf> const&)>::~__value_func[abi:ne180100](v10);
  if (v5 == *(void **)(a2 + 24))
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    *a3 = *v5;
    uint64_t v8 = v5[1];
    a3[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
  }
  std::__function::__value_func<BOOL ()(std::shared_ptr<CLMiLoService::ModelAndConf> const&)>::~__value_func[abi:ne180100](v12);
  return std::__function::__value_func<BOOL ()(std::shared_ptr<CLMiLoService::ModelAndConf> const&)>::~__value_func[abi:ne180100](v13);
}

void sub_25638ACC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  std::__function::__value_func<BOOL ()(std::shared_ptr<CLMiLoService::ModelAndConf> const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<BOOL ()(std::shared_ptr<CLMiLoService::ModelAndConf> const&)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<CLMiLoService::ModelAndConf>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    id v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::uuids::uuid>>((uint64_t)result, v13);
    uint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    void v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<CLMiLoService::ModelAndConf>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<CLMiLoService::ModelAndConf>>::~__split_buffer(v18);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_25638ADF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<CLMiLoService::ModelAndConf>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN20CLMiLoServiceManager15updateAllModelsEv_block_invoke(uint64_t a1)
{
  int v1 = *(CLMiLoServiceManager **)(a1 + 32);
  CLMiLoServiceManager::releaseAllModels(v1);
  for (uint64_t i = (int64x2_t *)*((void *)v1 + 6); i != (int64x2_t *)((char *)v1 + 40); uint64_t i = (int64x2_t *)i->i64[1])
    CLMiLoServiceManager::enterLocationPerService(v1, i + 1);
  return CLMiLoServiceManager::checkSpectating(v1);
}

void CLMiLoServiceManager::didRecordingStop(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 40;
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3 != a1 + 40)
  {
    do
    {
      CLMiLoService::didRecordingStop((void *)(v3 + 16), a2);
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while (v3 != v2);
  }
}

uint64_t CLMiLoServiceManager::onLocalizationRequest(uint64_t a1, uint64_t a2, uint64_t *a3, long long *a4)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 128);
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  long long v8 = *a4;
  char v9 = *((unsigned char *)a4 + 16);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 + 8) + 24))(v4 + 8, a2, v5, v6);
}

uint64_t CLMiLoServiceManager::onSendPredictionResultsToClient(uint64_t a1, const uuid *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  long long v8 = CLMiLoServiceManager::BiDirectionalUuidMap::lookupByKey((CLMiLoServiceManager::BiDirectionalUuidMap *)(a1 + 64), a2, v10);
  if (!v10[16]) {
    CLMiLoServiceManager::onSendPredictionResultsToClient(v8);
  }
  return (*(uint64_t (**)(void, const uuid *, uint64_t, uint64_t, unsigned char *))(**(void **)(a1 + 128) + 48))(*(void *)(a1 + 128), a2, a3, a4, v10);
}

void *CLMiLoServiceManager::BiDirectionalUuidMap::lookupByKey@<X0>(CLMiLoServiceManager::BiDirectionalUuidMap *this@<X0>, const uuid *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v5 = *(void **)this;
  uint64_t result = (void *)((char *)this + 8);
  uint64_t v4 = v5;
  if (v5 == result)
  {
LABEL_12:
    char v9 = 0;
    *a3 = 0;
  }
  else
  {
    while (1)
    {
      BOOL v6 = *(void *)((char *)v4 + 25) == *(void *)a2->var0
        && *(void *)((char *)v4 + 33) == *(void *)&a2->var0[8];
      if (v6) {
        break;
      }
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          long long v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          long long v8 = (void *)v4[2];
          BOOL v6 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v6);
      }
      uint64_t v4 = v8;
      if (v8 == result) {
        goto LABEL_12;
      }
    }
    *(_OWORD *)a3 = *(_OWORD *)((char *)v4 + 41);
    char v9 = 1;
  }
  a3[16] = v9;
  return result;
}

uint64_t CLMiLoServiceManager::onSendRequestResponseToClient(uint64_t a1, const uuid *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  long long v8 = CLMiLoServiceManager::BiDirectionalUuidMap::lookupByKey((CLMiLoServiceManager::BiDirectionalUuidMap *)(a1 + 64), a2, v10);
  if (!v10[16]) {
    CLMiLoServiceManager::onSendRequestResponseToClient(v8);
  }
  return (*(uint64_t (**)(void, const uuid *, uint64_t, uint64_t, unsigned char *))(**(void **)(a1 + 128) + 24))(*(void *)(a1 + 128), a2, a3, a4, v10);
}

uint64_t CLMiLoServiceManager::onSendRecordingMetaInfoToClient(uint64_t a1, const uuid *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  long long v8 = CLMiLoServiceManager::BiDirectionalUuidMap::lookupByKey((CLMiLoServiceManager::BiDirectionalUuidMap *)(a1 + 64), a2, v10);
  if (!v10[16]) {
    CLMiLoServiceManager::onSendRecordingMetaInfoToClient(v8);
  }
  return (*(uint64_t (**)(void, const uuid *, uint64_t, uint64_t, unsigned char *))(**(void **)(a1 + 128) + 32))(*(void *)(a1 + 128), a2, a3, a4, v10);
}

uint64_t CLMiLoServiceManager::onSendPredictionMetaInfoToClient(CLMiLoServiceManager *this, const uuid *a2, const uuid *a3, const CLMicroLocationResultToPublish *a4)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  long long v8 = CLMiLoServiceManager::BiDirectionalUuidMap::lookupByKey((CLMiLoServiceManager *)((char *)this + 64), a2, v10);
  if (!v10[16]) {
    CLMiLoServiceManager::onSendPredictionMetaInfoToClient(v8);
  }
  return (*(uint64_t (**)(void, const uuid *, const uuid *, const CLMicroLocationResultToPublish *, unsigned char *))(**((void **)this + 16) + 40))(*((void *)this + 16), a2, a3, a4, v10);
}

uint64_t CLMiLoServiceManager::onSendGenericEventResponseToClient(uint64_t a1, const uuid *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v7 = CLMiLoServiceManager::BiDirectionalUuidMap::lookupByKey((CLMiLoServiceManager::BiDirectionalUuidMap *)(a1 + 64), a2, v9);
  if (!v9[16]) {
    CLMiLoServiceManager::onSendGenericEventResponseToClient(v7);
  }
  return (*(uint64_t (**)(void, uint64_t, uint64_t, unsigned char *))(**(void **)(a1 + 128) + 56))(*(void *)(a1 + 128), a3, a4, v9);
}

uint64_t CLMiLoServiceManager::onRecordingRequest(uint64_t a1, uint64_t a2, uint64_t *a3, long long *a4)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 128);
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  char v9 = *((unsigned char *)a4 + 16);
  long long v8 = *a4;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 + 8) + 16))(v4 + 8, a2, v5, v6);
}

uint64_t CLMiLoServiceManager::onSendStatusToClient(CLMiLoServiceManager *this, const uuid *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v4 = CLMiLoServiceManager::BiDirectionalUuidMap::lookupByKey((CLMiLoServiceManager *)((char *)this + 64), a2 + 2, v6);
  if (!v6[16]) {
    CLMiLoServiceManager::onSendStatusToClient(v4);
  }
  return (*(uint64_t (**)(void, const uuid *, unsigned char *))(**((void **)this + 16) + 16))(*((void *)this + 16), a2, v6);
}

void CLMiLoServiceManager::onEnableMiLoAtCurrentLocationResponse(int64x2_t *a1, uint64_t a2)
{
  *(void *)&v20[5] = *MEMORY[0x263EF8340];
  if (a1[13].i64[1])
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
    }
    uint64_t v4 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v5 = a1[13].i64[1] != 0;
      *(_DWORD *)uint64_t buf = 68289538;
      int v16 = 0;
      __int16 v17 = 2082;
      uuid v18 = "";
      __int16 v19 = 1026;
      v20[0] = v5;
      LOWORD(v20[1]) = 1026;
      *(_DWORD *)((char *)&v20[1] + 2) = a2 == -1;
      _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoServiceManager releasing create custom LOI at current location requests: \", \"NumRequests\":%{public}hhd, \"Success\":%{public}hhd}", buf, 0x1Eu);
    }
    while (a1[13].i64[1])
    {
      uint64_t v6 = (uuid *)(*(void *)(a1[11].i64[1] + (((unint64_t)a1[13].i64[0] >> 5) & 0x7FFFFFFFFFFFFF8))
                  + 16 * a1[13].i64[0]);
      uuid v14 = *v6;
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
      }
      uint64_t v7 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        long long v8 = operator new(0x28uLL);
        std::string __p = v8;
        long long v13 = xmmword_256514540;
        _OWORD *v8 = 0u;
        v8[1] = 0u;
        *(void *)((char *)v8 + 29) = 0;
        boost::uuids::to_chars<char *>((uint64_t)&v14, v8);
        p_p = &__p;
        if (v13 < 0) {
          p_p = __p;
        }
        *(_DWORD *)uint64_t buf = 68289282;
        int v16 = 0;
        __int16 v17 = 2082;
        uuid v18 = "";
        __int16 v19 = 2082;
        *(void *)uint64_t v20 = p_p;
        _os_log_impl(&dword_25631F000, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"enableMiLoAtCurrentLocation completed for connectionToken\", \"connectionToken\":%{public, location:escape_only}s}", buf, 0x1Cu);
        if (SHIBYTE(v13) < 0) {
          operator delete(__p);
        }
      }

      if (((a2 == -1) & (*(unsigned int (**)(void))(*(void *)(a1[8].i64[0] + 8) + 104))()) == 1)
      {
        uint64_t v10 = (CLMiLoService *)CLMiLoServiceManager::loadedServiceByConnectionToken((CLMiLoServiceManager *)a1, *v6);
        if (v11) {
          CLMiLoService::sendInitialBlueAtlasPrediction(v10);
        }
      }
      (*(void (**)(uint64_t, uint64_t, uuid *))(*(void *)a1[8].i64[0] + 64))(a1[8].i64[0], a2, &v14);
      a1[13] = vaddq_s64(a1[13], (int64x2_t)xmmword_256516360);
      std::deque<CLMiLoServiceManager::OutstandingEnableCustomLoiRequest>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1[11].i64, 1);
    }
  }
}

void sub_25638B7B0(_Unwind_Exception *a1)
{
  operator delete(v2);

  _Unwind_Resume(a1);
}

BOOL CLMiLoServiceManager::requestMicroLocationLearning(CLMiLoServiceManager *a1, uint64_t a2, uint64_t a3, uint64_t a4, const uuid *a5)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  *(void *)v21.unint64_t var0 = a3;
  *(void *)&v21.var0[8] = a4;
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
  }
  uint64_t v7 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    long long v8 = (char *)operator new(0x28uLL);
    *(void *)(v8 + 29) = 0;
    *(_OWORD *)long long v8 = 0u;
    *((_OWORD *)v8 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
    boost::uuids::to_chars<char *>((uint64_t)&v21, v8);
    char v9 = (char *)operator new(0x28uLL);
    *(void *)(v9 + 29) = 0;
    *(_OWORD *)char v9 = 0u;
    *((_OWORD *)v9 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
    boost::uuids::to_chars<char *>((uint64_t)a5, v9);
    v14[0] = 68289538;
    v14[1] = 0;
    __int16 v15 = 2082;
    int v16 = "";
    __int16 v17 = 2082;
    uuid v18 = v8;
    __int16 v19 = 2082;
    uint64_t v20 = v9;
    _os_log_impl(&dword_25631F000, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoServiceManager::requestMicroLocationLearning\", \"connectionToken\":%{public, location:escape_only}s, \"requestId\":%{public, location:escape_only}s}", (uint8_t *)v14, 0x26u);
    operator delete(v9);
    operator delete(v8);
  }

  uint64_t v10 = (CLMiLoService *)CLMiLoServiceManager::loadedServiceByConnectionToken(a1, v21);
  if (v11) {
    return CLMiLoService::requestMicroLocationLearning(v10, a5);
  }
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
  }
  long long v13 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v14[0]) = 0;
    _os_log_impl(&dword_25631F000, v13, OS_LOG_TYPE_DEFAULT, "#requestMicroLocationLearning, can't load service for connectionToken, possibly not connected to a service", (uint8_t *)v14, 2u);
  }
  CLMiLoService::ServiceDescriptor::ServiceDescriptor((uint64_t)v14);
  (*(void (**)(void *, _DWORD *, const uuid *, uint64_t, uuid *))(**((void **)a1 + 16) + 24))(*((void **)a1 + 16), v14, a5, 10, &v21);
  return 0;
}

void sub_25638BA08(_Unwind_Exception *a1)
{
  operator delete(v3);
  operator delete(v2);

  _Unwind_Resume(a1);
}

void CLMiLoServiceManager::onLearningBegin(CLMiLoServiceManager *this)
{
  CLMiLoServiceManager::releaseAllModels(this);
  uint64_t v2 = (int64x2_t *)((char *)this + 40);
  uint64_t v3 = (int64x2_t *)*((void *)this + 6);
  if (v3 != (int64x2_t *)((char *)this + 40))
  {
    uint64_t v4 = (char *)this + 96;
    do
    {
      CLMiLoService::onLearningBegin(v3 + 1, (uint64_t)v4);
      uint64_t v3 = (int64x2_t *)v3->i64[1];
    }
    while (v3 != v2);
  }
}

void CLMiLoServiceManager::onLearningCompleted(CLMiLoServiceManager *this)
{
  CLMiLoServiceManager::updateAllModels(this);
  for (uint64_t i = (void *)*((void *)this + 6); i != (void *)((char *)this + 40); uint64_t i = (void *)i[1])
  {
    CLMiLoServiceManager::updateServiceLastActiveTime(this, (const CLMiLoService *)(i + 2));
    CLMiLoService::onLearningCompleted((unsigned char *)i + 16);
  }
}

void CLMiLoServiceManager::logState(CLMiLoServiceManager *this)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  int v1 = (char *)this + 40;
  uint64_t v2 = (char *)*((void *)this + 6);
  if (v2 != (char *)this + 40)
  {
    uint64_t v3 = (char *)this + 96;
    do
    {
      CLMiLoService::getCurrentStatus((uint64_t)(v2 + 16), (uint64_t)v3, &v4);
      if (__p)
      {
        uint64_t v10 = __p;
        operator delete(__p);
      }
      if (v7)
      {
        long long v8 = v7;
        operator delete(v7);
      }
      if (v5)
      {
        uint64_t v6 = v5;
        operator delete(v5);
      }
      uint64_t v2 = (char *)*((void *)v2 + 1);
    }
    while (v2 != v1);
  }
}

void CLMiLoServiceManager::onLocalizationStart(CLMiLoServiceManager *this, uuid a2)
{
  uint64_t v2 = (char *)this + 40;
  uint64_t v3 = (char *)*((void *)this + 6);
  if (v3 != (char *)this + 40)
  {
    uint64_t v4 = *(void *)&a2.var0[8];
    uint64_t v5 = *(void *)a2.var0;
    do
    {
      *(void *)v6.unint64_t var0 = v5;
      *(void *)&v6.var0[8] = v4;
      CLMiLoService::onLocalizationStart((CLMiLoService *)(v3 + 16), v6);
      uint64_t v3 = (char *)*((void *)v3 + 1);
    }
    while (v3 != v2);
  }
}

uint64_t CLMiLoServiceManager::setMiLoEnabled(CLMiLoServiceManager *this, char a2, uint64_t a3)
{
  *((unsigned char *)this + 8) = a2;
  *(_DWORD *)((char *)this + 9) = *(_DWORD *)a3;
  *(_WORD *)((char *)this + 13) = *(_WORD *)(a3 + 4);
  uint64_t v4 = (char *)this + 40;
  uint64_t v5 = (char *)*((void *)this + 6);
  if (v5 != (char *)this + 40)
  {
    do
    {
      CLMiLoService::didStateAffectingParametersUpdate((CLMiLoService *)(v5 + 16));
      CLMiLoService::sendStatus((void *)v5 + 2, (uint64_t)this + 96);
      uint64_t v5 = (char *)*((void *)v5 + 1);
    }
    while (v5 != v4);
  }
  return CLMiLoServiceManager::checkSpectating(this);
}

uint64_t CLMiLoServiceManager::triggerLearning(CLMiLoServiceManager *this)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
  }
  uint64_t v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    __int16 v5 = 2082;
    uuid v6 = "";
    _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoServiceManager::triggerLearning\"}", (uint8_t *)v4, 0x12u);
  }
  return (*(uint64_t (**)(void))(*(void *)(*((void *)this + 16) + 8) + 40))();
}

void CLMiLoServiceManager::onRequireFingerprintsForTriggerUuids(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
}

uint64_t CLMiLoServiceManager::startLowLatencyUpdates(CLMiLoServiceManager *this, const uuid *a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*((void *)this + 16) + 8) + 80))();
}

uint64_t CLMiLoServiceManager::stopLowLatencyUpdates(CLMiLoServiceManager *this, const uuid *a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*((void *)this + 16) + 8) + 88))();
}

void CLMiLoServiceManager::onRequireServiceLabelEntries(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>, double a4@<D0>)
{
}

void CLMiLoServiceManager::onRequireAnchorValueStatistics(CLMiLoServiceManager *this@<X0>, const uuid *a2@<X1>, uint64_t a3@<X8>)
{
  id v5 = *(id *)(*((void *)this + 11) + 32);
  id v6 = v5;
  if (v5)
  {
    [v5 fetchMostRecentClusterAnchorValueStatisticsForModelUUID:a2];
  }
  else
  {
    *(void *)(a3 + 112) = 0;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
  }
}

void sub_25638BE84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void CLMiLoServiceManager::processConnectionRequestsAwaitingDb(CLMiLoServiceManager *this)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (*((void *)this + 28) != *((void *)this + 29))
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
    }
    uint64_t v2 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((void *)this + 29) - *((void *)this + 28)) >> 3);
      *(_DWORD *)uint64_t buf = 68289282;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2050;
      uint64_t v17 = v3;
      _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoServiceManager releasing pending connection requests: \", \"NumRequests\":%{public}lu}", buf, 0x1Cu);
    }
    uint64_t v4 = *((void *)this + 28);
    if (*((void *)this + 29) != v4)
    {
      do
      {
        uint64_t v5 = *(void *)(v4 + 24);
        uint64_t v6 = *(void *)(v4 + 32);
        long long v10 = *(_OWORD *)(v4 + 40);
        char v11 = *(unsigned char *)(v4 + 56);
        CLMiLoServiceManager::connect((uint64_t)this, v4, v5, v6, (uint64_t)&v10, *(void *)(v4 + 57), *(void *)(v4 + 65), v4 + 80);
        std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CLMiLoServiceManager::ConnectionRequestParams *,CLMiLoServiceManager::ConnectionRequestParams *,CLMiLoServiceManager::ConnectionRequestParams *>((uint64_t)buf, (long long *)(v4 + 104), *((long long **)this + 29), v4);
        uint64_t v8 = v7;
        for (uint64_t i = *((void *)this + 29);
              i != v8;
              std::allocator<CLMiLoServiceManager::ConnectionRequestParams>::destroy[abi:ne180100]((uint64_t)this + 240, i))
        {
          i -= 104;
        }
        *((void *)this + 29) = v8;
      }
      while (v8 != v4);
    }
  }
}

uint64_t std::vector<CLMiLoServiceManager::ConnectionRequestParams>::emplace_back<CLMiLoServiceManager::ConnectionRequestParams>(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = a1 + 2;
  unint64_t v5 = v6;
  unint64_t v7 = *(v4 - 1);
  if (v7 >= v6)
  {
    uint64_t v14 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v7 - *a1) >> 3);
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) > 0x276276276276276) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v16 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v16 > v15) {
      unint64_t v15 = 2 * v16;
    }
    if (v16 >= 0x13B13B13B13B13BLL) {
      unint64_t v17 = 0x276276276276276;
    }
    else {
      unint64_t v17 = v15;
    }
    uint8_t v26[4] = v4;
    if (v17) {
      uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMiLoServiceManager::ConnectionRequestParams>>((uint64_t)v4, v17);
    }
    else {
      uint64_t v18 = 0;
    }
    __int16 v19 = &v18[104 * v14];
    v26[0] = v18;
    v26[1] = v19;
    v26[3] = &v18[104 * v17];
    long long v20 = *a2;
    *((void *)v19 + 2) = *((void *)a2 + 2);
    *(_OWORD *)__int16 v19 = v20;
    *((void *)a2 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v21 = *(long long *)((char *)a2 + 24);
    long long v22 = *(long long *)((char *)a2 + 40);
    long long v23 = *(long long *)((char *)a2 + 56);
    v19[72] = *((unsigned char *)a2 + 72);
    *(_OWORD *)(v19 + 56) = v23;
    *(_OWORD *)(v19 + 40) = v22;
    *(_OWORD *)(v19 + 24) = v21;
    long long v24 = a2[5];
    *((void *)v19 + 12) = *((void *)a2 + 12);
    *((_OWORD *)v19 + 5) = v24;
    *((void *)a2 + 1CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0;
    *((void *)a2 + 12) = 0;
    *((void *)a2 + 10) = 0;
    v26[2] = v19 + 104;
    std::vector<CLMiLoServiceManager::ConnectionRequestParams>::__swap_out_circular_buffer(a1, v26);
    uint64_t v13 = a1[1];
    std::__split_buffer<CLMiLoServiceManager::ConnectionRequestParams>::~__split_buffer(v26);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v9 = *(long long *)((char *)a2 + 24);
    long long v10 = *(long long *)((char *)a2 + 40);
    long long v11 = *(long long *)((char *)a2 + 56);
    *(unsigned char *)(v7 + 72) = *((unsigned char *)a2 + 72);
    *(_OWORD *)(v7 + 56) = v11;
    *(_OWORD *)(v7 + 40) = v10;
    *(_OWORD *)(v7 + 24) = v9;
    long long v12 = a2[5];
    *(void *)(v7 + 96) = *((void *)a2 + 12);
    *(_OWORD *)(v7 + 80) = v12;
    *((void *)a2 + 1CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0;
    *((void *)a2 + 12) = 0;
    *((void *)a2 + 10) = 0;
    uint64_t v13 = v7 + 104;
    a1[1] = v7 + 104;
  }
  a1[1] = v13;
  return v13 - 104;
}

void sub_25638C1FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMiLoServiceManager::ConnectionRequestParams>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void CLMiLoServiceManager::ConnectionRequestParams::~ConnectionRequestParams(void **this)
{
  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void CLMiLoServiceManager::removePendingConnectionRequestsByConnectionToken(CLMiLoServiceManager *this, uuid a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)this + 28);
  uint64_t v4 = *((void *)this + 29);
  uint64_t v3 = (char *)this + 224;
  uint64_t v19 = *(void *)a2.var0;
  *(void *)long long v20 = *(void *)&a2.var0[8];
  uint64_t v6 = v4 - v5;
  if (v4 == v5)
  {
LABEL_7:
    long long v8 = (long long *)v4;
  }
  else
  {
    while (*(void *)(v5 + 57) != v19 || *(void *)(v5 + 65) != *(void *)v20)
    {
      v5 += 104;
      if (v5 == v4) {
        goto LABEL_7;
      }
    }
    if (v5 == v4 || (long long v9 = (long long *)(v5 + 104), v5 + 104 == v4))
    {
      long long v8 = (long long *)v4;
    }
    else
    {
      do
      {
        if (*(void *)((char *)v9 + 57) != v19 || *(void *)((char *)v9 + 65) != *(void *)v20)
        {
          if (*(char *)(v5 + 23) < 0) {
            operator delete(*(void **)v5);
          }
          long long v11 = *v9;
          *(void *)(v5 + 16) = *((void *)v9 + 2);
          *(_OWORD *)uint64_t v5 = v11;
          *((unsigned char *)v9 + 23) = 0;
          *(unsigned char *)long long v9 = 0;
          char v12 = *((unsigned char *)v9 + 72);
          long long v13 = *(long long *)((char *)v9 + 56);
          long long v14 = *(long long *)((char *)v9 + 40);
          *(_OWORD *)(v5 + 24) = *(long long *)((char *)v9 + 24);
          *(_OWORD *)(v5 + 40) = v14;
          *(_OWORD *)(v5 + 56) = v13;
          *(unsigned char *)(v5 + 72) = v12;
          unint64_t v15 = (void **)(v5 + 80);
          if (*(char *)(v5 + 103) < 0) {
            operator delete(*v15);
          }
          long long v16 = v9[5];
          *(void *)(v5 + 96) = *((void *)v9 + 12);
          *(_OWORD *)unint64_t v15 = v16;
          *((unsigned char *)v9 + 103) = 0;
          *((unsigned char *)v9 + 80) = 0;
          v5 += 104;
        }
        long long v9 = (long long *)((char *)v9 + 104);
      }
      while (v9 != (long long *)v4);
      long long v8 = (long long *)*((void *)this + 29);
    }
    uint64_t v4 = v5;
  }
  std::vector<CLMiLoServiceManager::ConnectionRequestParams>::erase((uint64_t)v3, v4, v8);
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_545);
  }
  unint64_t v17 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v18 = 0x4EC4EC4EC4EC4EC5 * (v6 >> 3)
        - 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((void *)this + 29) - *((void *)this + 28)) >> 3);
    uint64_t v19 = 68289282;
    *(_WORD *)long long v20 = 2082;
    *(void *)&void v20[2] = "";
    __int16 v21 = 2050;
    uint64_t v22 = v18;
    _os_log_impl(&dword_25631F000, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoServiceManager remove pending connection requests: \", \"NumRequests removed\":%{public}lu}", (uint8_t *)&v19, 0x1Cu);
  }
}

uint64_t std::vector<CLMiLoServiceManager::ConnectionRequestParams>::erase(uint64_t a1, uint64_t a2, long long *a3)
{
  if ((long long *)a2 != a3)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CLMiLoServiceManager::ConnectionRequestParams *,CLMiLoServiceManager::ConnectionRequestParams *,CLMiLoServiceManager::ConnectionRequestParams *>((uint64_t)&v9, a3, *(long long **)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v7 -= 104;
        std::allocator<CLMiLoServiceManager::ConnectionRequestParams>::destroy[abi:ne180100](a1 + 16, v7);
      }
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

id ___ZN20CLMiLoServiceManager42migrateLegacyClientIdToClientIdIfNecessaryERNSt3__18optionalIN18CLMiLoServiceTable5EntryEEERKNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v4 = a2;
  id v5 = a3;
  id v6 = objc_alloc_init(MEMORY[0x263EFF980]);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v7 = v4;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v8)
  {
    uint64_t v9 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v16 != v9) {
          objc_enumerationMutation(v7);
        }
        uint64_t v11 = *(void *)(*((void *)&v15 + 1) + 8 * i);
        char v12 = objc_msgSend(v7, "objectForKey:", v11, (void)v15);
        int v13 = [v12 isEqualToString:v5];

        if (v13) {
          [v6 addObject:v11];
        }
      }
      uint64_t v8 = [v7 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v8);
  }

  return v6;
}

void sub_25638C690(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_24()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  int v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

uint64_t std::__optional_destruct_base<CLMiLoServiceTable::Entry,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 88))
  {
    if (*(char *)(a1 + 87) < 0) {
      operator delete(*(void **)(a1 + 64));
    }
    if (*(char *)(a1 + 55) < 0) {
      operator delete(*(void **)(a1 + 32));
    }
  }
  return a1;
}

unsigned char *std::__optional_copy_base<CLMiLoServiceTable::Entry,false>::__optional_copy_base[abi:ne180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[88] = 0;
  if (*(unsigned char *)(a2 + 88))
  {
    std::__construct_at[abi:ne180100]<CLMiLoServiceTable::Entry,CLMiLoServiceTable::Entry const&,CLMiLoServiceTable::Entry*>((uint64_t)a1, a2);
    a1[88] = 1;
  }
  return a1;
}

void sub_25638C844(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<CLMiLoServiceTable::Entry,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__construct_at[abi:ne180100]<CLMiLoServiceTable::Entry,CLMiLoServiceTable::Entry const&,CLMiLoServiceTable::Entry*>(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  id v6 = (std::string *)(a1 + 64);
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return a1;
}

void sub_25638C8F4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__optional_storage_base<CLMicroLocationModelTable::Entry,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<CLMicroLocationModelTable::Entry,false>>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 312) == *(unsigned __int8 *)(a2 + 312))
  {
    if (*(unsigned char *)(a1 + 312))
    {
      CLMicroLocationModelTable::Entry::operator=(a1, a2);
    }
  }
  else if (*(unsigned char *)(a1 + 312))
  {
    std::__optional_destruct_base<CLMicroLocationModelTable::Entry,false>::reset[abi:ne180100](a1);
  }
  else
  {
    *(unsigned char *)(CLMicroLocationModelTable::Entry::Entry() + 312) = 1;
  }
}

void std::__optional_destruct_base<CLMicroLocationModelTable::Entry,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 312))
  {
    if (*(unsigned char *)(a1 + 264))
    {
      if (*(char *)(a1 + 263) < 0) {
        operator delete(*(void **)(a1 + 240));
      }
    }
    CLMicroLocationProto::Model::~Model((CLMicroLocationProto::Model *)(a1 + 32));
    *(unsigned char *)(a1 + 312) = 0;
  }
}

std::string *std::optional<std::string>::operator=[abi:ne180100]<std::string const,void>(std::string *this, const std::string *a2)
{
  if (this[1].__r_.__value_.__s.__data_[0])
  {
    std::string::operator=(this, a2);
  }
  else
  {
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(this, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

uint64_t CLMiLoService::ModelAndConf::ModelAndConf(uint64_t a1, const CLMicroLocationModel *a2, uint64_t a3, uint64_t a4, long long *a5, uint64_t a6, uint64_t a7, double a8, uint64_t a9, uint64_t a10, uint64_t a11, long long *a12)
{
  CLMicroLocationModel::CLMicroLocationModel((CLMicroLocationModel *)a1, a2);
  *(void *)(v20 + 448) = a3;
  *(void *)(v20 + 456) = a4;
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v20 + 464), *(const std::string::value_type **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v21 = *a5;
    *(void *)(v20 + 480) = *((void *)a5 + 2);
    *(_OWORD *)(v20 + 464) = v21;
  }
  *(unsigned char *)(a1 + 4CLMicroLocationSensorsLogic::stopOdometryMonitoringIfRunning(this + 88) = 1;
  *(void *)(a1 + 496) = a6;
  *(void *)(a1 + 504) = a7;
  *(void *)(a1 + 512) = a10;
  *(void *)(a1 + 520) = a11;
  CLMicroLocationLocalizationSettings::CLMicroLocationLocalizationSettings(a1 + 528, a12, *(_DWORD *)a2);
  uint64_t v22 = (std::string *)(a1 + 568);
  if (*((char *)a12 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v22, *(const std::string::value_type **)a12, *((void *)a12 + 1));
  }
  else
  {
    long long v23 = *a12;
    *(void *)(a1 + 584) = *((void *)a12 + 2);
    *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
  }
  *(double *)(a1 + 592) = a8;
  *(unsigned char *)(a1 + 600) = 0;
  *(unsigned char *)(a1 + 640) = 0;
  return a1;
}

void sub_25638CB28(_Unwind_Exception *a1)
{
  CLMicroLocationLocalizationSettings::~CLMicroLocationLocalizationSettings(v3);
  if (*(unsigned char *)(v1 + 488))
  {
    if (*(char *)(v1 + 487) < 0) {
      operator delete(*v2);
    }
  }
  CLMicroLocationModel::~CLMicroLocationModel((void **)v1);
  _Unwind_Resume(a1);
}

void CLMicroLocationModel::CLMicroLocationModel(CLMicroLocationModel *this, const CLMicroLocationModel *a2)
{
  *(_OWORD *)this = *(_OWORD *)a2;
  std::unordered_map<boost::uuids::uuid,CLMicroLocationAnchorAppearance>::unordered_map((uint64_t)this + 16, (uint64_t)a2 + 16);
  *(_OWORD *)((char *)this + 56) = *(_OWORD *)((char *)a2 + 56);
  std::__optional_copy_base<CLMicroLocationModel::SimilarityListData,false>::__optional_copy_base[abi:ne180100]((CLMicroLocationModel *)((char *)this + 72), (const CLMicroLocationModel *)((char *)a2 + 72));
  std::__optional_copy_base<CLMicroLocationModel::BlueAtlasData,false>::__optional_copy_base[abi:ne180100]((unsigned char *)this + 200, (uint64_t)a2 + 200);
  long long v4 = *(_OWORD *)((char *)a2 + 296);
  *(_OWORD *)((char *)this + 308) = *(_OWORD *)((char *)a2 + 308);
  *(_OWORD *)((char *)this + 296) = v4;
  *((void *)this + 42) = 0;
  *((void *)this + 43) = 0;
  *((void *)this + 4CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0;
  std::vector<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>*,std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>*>((void *)this + 41, *((void *)a2 + 41), *((void *)a2 + 42), (uint64_t)(*((void *)a2 + 42) - *((void *)a2 + 41)) >> 5);
  std::unordered_map<boost::uuids::uuid,std::vector<boost::uuids::uuid>>::unordered_map((uint64_t)this + 352, (uint64_t)a2 + 352);
  *((void *)this + 49) = *((void *)a2 + 49);
  *((void *)this + 50) = 0;
  *((void *)this + 5CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0;
  *((void *)this + 52) = 0;
  std::vector<CLMicroLocationProto::ServiceQualityReasonEnum>::__init_with_size[abi:ne180100]<CLMicroLocationProto::ServiceQualityReasonEnum*,CLMicroLocationProto::ServiceQualityReasonEnum*>((void *)this + 50, *((const void **)a2 + 50), *((void *)a2 + 51), (uint64_t)(*((void *)a2 + 51) - *((void *)a2 + 50)) >> 2);
  long long v5 = (std::string *)((char *)this + 424);
  if (*((char *)a2 + 447) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 53), *((void *)a2 + 54));
  }
  else
  {
    long long v6 = *(_OWORD *)((char *)a2 + 424);
    *((void *)this + 55) = *((void *)a2 + 55);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
}

void sub_25638CC88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v9 = *v7;
  if (*v7)
  {
    *(void *)(v5 + 408) = v9;
    operator delete(v9);
  }
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::~__hash_table(v6);
  std::vector<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__optional_destruct_base<CLMicroLocationModel::BlueAtlasData,false>::~__optional_destruct_base[abi:ne180100](v4);
  std::__optional_destruct_base<CLMicroLocationModel::SimilarityListData,false>::~__optional_destruct_base[abi:ne180100](v3);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

void sub_25638CCF0()
{
}

CLMicroLocationModel::SimilarityListData *std::__optional_copy_base<CLMicroLocationModel::SimilarityListData,false>::__optional_copy_base[abi:ne180100](CLMicroLocationModel::SimilarityListData *this, const CLMicroLocationModel::SimilarityListData *a2)
{
  *(unsigned char *)this = 0;
  *((unsigned char *)this + 120) = 0;
  if (*((unsigned char *)a2 + 120))
  {
    CLMicroLocationModel::SimilarityListData::SimilarityListData(this, a2);
    *((unsigned char *)this + 120) = 1;
  }
  return this;
}

void sub_25638CD3C(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<CLMicroLocationModel::SimilarityListData,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

unsigned char *std::__optional_copy_base<CLMicroLocationModel::BlueAtlasData,false>::__optional_copy_base[abi:ne180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[88] = 0;
  if (*(unsigned char *)(a2 + 88))
  {
    std::__construct_at[abi:ne180100]<CLMicroLocationModel::BlueAtlasData,CLMicroLocationModel::BlueAtlasData const&,CLMicroLocationModel::BlueAtlasData*>((uint64_t)a1, a2);
    a1[88] = 1;
  }
  return a1;
}

void sub_25638CD94(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<CLMicroLocationModel::BlueAtlasData,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__construct_at[abi:ne180100]<CLMicroLocationModel::BlueAtlasData,CLMicroLocationModel::BlueAtlasData const&,CLMicroLocationModel::BlueAtlasData*>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  std::vector<boost::uuids::uuid>::__init_with_size[abi:ne180100]<boost::uuids::uuid*,boost::uuids::uuid*>((void *)a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  std::vector<CLMacAddress>::__init_with_size[abi:ne180100]<CLMacAddress*,CLMacAddress*>((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  return a1;
}

void sub_25638CE18(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>*,std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<CLMiLoOdometryTable::Entry>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>,std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>*,std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>*,std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_25638CE9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>,std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>*,std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>*,std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *(void *)uint64_t v4 = *(void *)a2;
      uint64_t v5 = *(void *)(a2 + 8);
      *(void *)(v4 + 8) = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      *(_OWORD *)(v4 + 16) = *(_OWORD *)(a2 + 16);
      v4 += 32;
      a2 += 32;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>,std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>,std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>,std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>,std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 - 24);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 -= 32;
  }
}

uint64_t std::unordered_map<boost::uuids::uuid,std::vector<boost::uuids::uuid>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::pair<boost::uuids::uuid const,std::vector<boost::uuids::uuid>> const&>(a1, i + 2, (uint64_t)(i + 2));
  return a1;
}

void sub_25638D030(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::pair<boost::uuids::uuid const,std::vector<boost::uuids::uuid>> const&>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  do
    v6 ^= (v6 << 6) + (v6 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v5++);
  while (v5 != 16);
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = v6;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t result = (void *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = result[1];
          if (v11 == v6)
          {
            if (result[2] == *a2 && result[3] == a2[1]) {
              return result;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t result = (void *)*result;
        }
        while (result);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::__construct_node_hash<std::pair<boost::uuids::uuid const,std::vector<boost::uuids::uuid>> const&>(a1, v6, a3, (uint64_t)&v21);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    void *v21 = *v19;
    *uint64_t v19 = v21;
  }
  else
  {
    void *v21 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v21;
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*v21)
    {
      unint64_t v20 = *(void *)(*v21 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v20 >= v7) {
          v20 %= v7;
        }
      }
      else
      {
        v20 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v20) = v21;
    }
  }
  uint64_t result = v21;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_25638D294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::__construct_node_hash<std::pair<boost::uuids::uuid const,std::vector<boost::uuids::uuid>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint8x8_t v8 = operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  *((_OWORD *)v8 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = *(_OWORD *)a3;
  void v8[5] = 0;
  v8[6] = 0;
  void v8[4] = 0;
  uint64_t result = std::vector<boost::uuids::uuid>::__init_with_size[abi:ne180100]<boost::uuids::uuid*,boost::uuids::uuid*>(v8 + 4, *(const void **)(a3 + 16), *(void *)(a3 + 24), (uint64_t)(*(void *)(a3 + 24) - *(void *)(a3 + 16)) >> 4);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_25638D33C(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void *std::vector<CLMicroLocationProto::ServiceQualityReasonEnum>::__init_with_size[abi:ne180100]<CLMicroLocationProto::ServiceQualityReasonEnum*,CLMicroLocationProto::ServiceQualityReasonEnum*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<CLMicroLocationProto::ConfidenceLevel>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_25638D3B8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void CLMiLoService::ModelAndConf::~ModelAndConf(CLMiLoService::ModelAndConf *this)
{
  if (*((unsigned char *)this + 640)) {
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>>>::~__hash_table((uint64_t)this + 600);
  }
  if (*((char *)this + 591) < 0) {
    operator delete(*((void **)this + 71));
  }

  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)this + 528, *((void **)this + 67));
  if (*((unsigned char *)this + 488) && *((char *)this + 487) < 0) {
    operator delete(*((void **)this + 58));
  }
  if (*((char *)this + 447) < 0) {
    operator delete(*((void **)this + 53));
  }
  uint64_t v2 = (void *)*((void *)this + 50);
  if (v2)
  {
    *((void *)this + 5CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v2;
    operator delete(v2);
  }
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::~__hash_table((uint64_t)this + 352);
  uint64_t v3 = (void **)((char *)this + 328);
  std::vector<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__optional_destruct_base<CLMicroLocationModel::BlueAtlasData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 200);
  std::__optional_destruct_base<CLMicroLocationModel::SimilarityListData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 72);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)this + 16);
}

uint64_t std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::~__hash_table((uint64_t)(v2 + 4));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

__n128 std::__optional_storage_base<CLMiLoServiceTable::Entry,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<CLMiLoServiceTable::Entry,false>>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 88) == *(unsigned __int8 *)(a2 + 88))
  {
    if (*(unsigned char *)(a1 + 88))
    {
      long long v4 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v4;
      uint64_t v5 = (void **)(a1 + 32);
      unint64_t v6 = (long long *)(a2 + 32);
      if (*(char *)(a1 + 55) < 0) {
        operator delete(*v5);
      }
      long long v7 = *v6;
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(_OWORD *)uint64_t v5 = v7;
      *(unsigned char *)(a2 + 55) = 0;
      *(unsigned char *)(a2 + 32) = 0;
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      size_t v8 = (void **)(a1 + 64);
      if (*(char *)(a1 + 87) < 0) {
        operator delete(*v8);
      }
      __n128 result = *(__n128 *)(a2 + 64);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(__n128 *)size_t v8 = result;
      *(unsigned char *)(a2 + 87) = 0;
      *(unsigned char *)(a2 + 64) = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 88))
  {
    std::__optional_destruct_base<CLMiLoServiceTable::Entry,false>::reset[abi:ne180100](a1);
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
    long long v11 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v11;
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    __n128 result = *(__n128 *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(__n128 *)(a1 + 64) = result;
    *(void *)(a2 + 72) = 0;
    *(void *)(a2 + 80) = 0;
    *(void *)(a2 + 64) = 0;
    *(unsigned char *)(a1 + CLMicroLocationSensorsLogic::stopOdometryMonitoringIfRunning(this + 88) = 1;
  }
  return result;
}

void std::__optional_destruct_base<CLMiLoServiceTable::Entry,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 88))
  {
    if (*(char *)(a1 + 87) < 0) {
      operator delete(*(void **)(a1 + 64));
    }
    if (*(char *)(a1 + 55) < 0) {
      operator delete(*(void **)(a1 + 32));
    }
    *(unsigned char *)(a1 + CLMicroLocationSensorsLogic::stopOdometryMonitoringIfRunning(this + 88) = 0;
  }
}

uint64_t boost::uuids::string_generator::operator()<char const*>(boost::uuids::string_generator *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  void v17[2] = *MEMORY[0x263EF8340];
  if (a2 == a3) {
    goto LABEL_32;
  }
  uint64_t v5 = (signed __int8 *)(a2 + 1);
  int v6 = *a2;
  if (v6 == 123)
  {
    if (v5 == (signed __int8 *)a3) {
      goto LABEL_32;
    }
    uint64_t v5 = (signed __int8 *)(a2 + 2);
    signed __int8 v7 = a2[1];
  }
  else
  {
    signed __int8 v7 = *a2;
  }
  int v8 = 0;
  uint64_t v9 = 0;
  while (1)
  {
    do
    {
      if (v9 == 4)
      {
        if (v7 == 45)
        {
          if (v5 == (signed __int8 *)a3) {
            goto LABEL_32;
          }
          int v8 = 1;
LABEL_22:
          signed __int8 v12 = *v5++;
          signed __int8 v7 = v12;
          goto LABEL_24;
        }
        int v8 = 0;
      }
      else
      {
        BOOL v11 = (v9 & 0x7FFFFFFD) == 8 || v9 == 6;
        if (v11 && ((v8 ^ 1) & 1) == 0)
        {
          if (v7 != 45 || v5 == (signed __int8 *)a3) {
            goto LABEL_32;
          }
          goto LABEL_22;
        }
      }
LABEL_24:
      char value = boost::uuids::string_generator::get_value(this, v7);
      *((unsigned char *)v17 + v9) = value;
      if (v5 == (signed __int8 *)a3) {
        goto LABEL_32;
      }
      int v14 = *v5++;
      signed __int8 v7 = v14;
      *((unsigned char *)v17 + v9++) = boost::uuids::string_generator::get_value(this, v14) | (16 * value);
    }
    while (!v9);
    if (v9 == 16) {
      break;
    }
    if (v5 == (signed __int8 *)a3) {
      goto LABEL_32;
    }
    signed __int8 v10 = *v5++;
    signed __int8 v7 = v10;
  }
  if (v6 == 123 && (v5 == (signed __int8 *)a3 || (int v15 = *v5, ++v5, v15 != 125))
    || v5 != (signed __int8 *)a3)
  {
LABEL_32:
    boost::uuids::string_generator::throw_invalid(this);
  }
  return v17[0];
}

void boost::uuids::string_generator::throw_invalid(boost::uuids::string_generator *this)
{
  MEMORY[0x25A2A5FF0](v2, "invalid uuid string");
  v1[0] = "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Develop"
          "er/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/boost/uuid/string_generator.hpp";
  v1[1] = "void boost::uuids::string_generator::throw_invalid() const";
  v1[2] = 192;
  boost::throw_exception<std::runtime_error>((uint64_t)v2, (uint64_t)v1);
}

void sub_25638D880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::runtime_error a13)
{
}

uint64_t boost::uuids::string_generator::get_value(boost::uuids::string_generator *this, int a2)
{
  p_superclass = &OBJC_METACLASS___CLMicroLocationLoiBridge.superclass;
  {
    int v10 = a2;
    p_superclass = &OBJC_METACLASS___CLMicroLocationLoiBridge.superclass;
    a2 = v10;
    if (v9)
    {
      boost::uuids::string_generator::get_value(char)const::digits_std::vector<std::string>::pointer end = (uint64_t)&boost::uuids::string_generator::get_value(char)const::digits_begin[(void)boost::uuids::string_generator::get_value(char)const::digits_len];
      p_superclass = (__objc2_class **)(&OBJC_METACLASS___CLMicroLocationLoiBridge + 8);
      a2 = v10;
    }
  }
  long long v4 = p_superclass[425];
  uint64_t v5 = (__objc2_class *)memchr("0123456789abcdefABCDEF", a2, (char *)v4 - "0123456789abcdefABCDEF");
  if (v5) {
    int v6 = v5;
  }
  else {
    int v6 = v4;
  }
  unint64_t v7 = (char *)v6 - "0123456789abcdefABCDEF";
  if (v7 >= (unint64_t)boost::uuids::string_generator::get_value(char)const::digits_len) {
    boost::uuids::string_generator::throw_invalid(this);
  }
  return boost::uuids::string_generator::get_value(char)const::values[v7];
}

void boost::throw_exception<std::runtime_error>(uint64_t a1, uint64_t a2)
{
  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<std::runtime_error>::wrapexcept(exception, a1, a2);
}

void sub_25638D9B4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::wrapexcept<std::runtime_error>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_2704DA8E8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

uint64_t boost::wrapexcept<std::runtime_error>::wrapexcept(uint64_t a1, const std::runtime_error *a2, int8x16_t *a3)
{
  *(void *)a1 = &unk_2704DA888;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_2704DBD28;
  *(void *)(a1 + 8) = &unk_2704DBD58;
  *(void *)(a1 + 24) = &unk_2704DBD80;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 56) = a3[1].i32[0];
  *(int8x16_t *)(a1 + 40) = vextq_s8(*a3, *a3, 8uLL);
  return a1;
}

void boost::wrapexcept<std::runtime_error>::clone()
{
}

void sub_25638DC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<std::runtime_error>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<std::runtime_error>::wrapexcept((uint64_t)exception, a1);
}

void sub_25638DD48(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<std::runtime_error>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_2704DA8E8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  JUMPOUT(0x25A2A6340);
}

void non-virtual thunk to'boost::wrapexcept<std::runtime_error>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_2704DA8E8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  uint64_t vars8;

  *(void *)(a1 + 16) = &unk_2704DA8E8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x25A2A6340);
}

void non-virtual thunk to'boost::wrapexcept<std::runtime_error>::~wrapexcept(void *a1)
{
  *a1 = &unk_2704DA8E8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 1);
}

{
  uint64_t vars8;

  *a1 = &unk_2704DA8E8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 1);
  JUMPOUT(0x25A2A6340);
}

uint64_t boost::wrapexcept<std::runtime_error>::wrapexcept(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2704DA888;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = &unk_2704DA8E8;
  *(void *)(a1 + 32) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)a1 = &unk_2704DBD28;
  *(void *)(a1 + 8) = &unk_2704DBD58;
  *(void *)(a1 + 24) = &unk_2704DBD80;
  return a1;
}

void sub_25638E07C(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<boost::uuids::uuid,ULServiceType>::unordered_map(uint64_t a1, void *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 24 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,ULServiceType>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,ULServiceType>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,ULServiceType>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,ULServiceType>>>::__emplace_unique_key_args<boost::uuids::uuid,std::pair<boost::uuids::uuid const,ULServiceType> const&>(a1, a2, (uint64_t)a2);
      a2 += 3;
      v5 -= 24;
    }
    while (v5);
  }
  return a1;
}

void sub_25638E0F8(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<boost::uuids::uuid,ULServiceType>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,ULServiceType>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,ULServiceType>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,ULServiceType>>>::__emplace_unique_key_args<boost::uuids::uuid,std::pair<boost::uuids::uuid const,ULServiceType> const&>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  do
    v7 ^= (v7 << 6) + (v7 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v6++);
  while (v6 != 16);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == *a2 && i[3] == a2[1]) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x28uLL);
  *uint64_t i = 0;
  i[1] = v7;
  *((_OWORD *)i + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = *(_OWORD *)a3;
  i[4] = *(void *)(a3 + 16);
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  long long v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *uint64_t i = *v21;
LABEL_44:
    void *v21 = i;
    goto LABEL_45;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    long long v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_25638E354(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::vector<CLMiLoServiceTable::Entry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 88;
        std::allocator<CLMiLoServiceTable::Entry>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<CLMiLoServiceTable::Entry>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 87) < 0) {
    operator delete(*(void **)(a2 + 64));
  }
  if (*(char *)(a2 + 55) < 0)
  {
    unint64_t v3 = *(void **)(a2 + 32);
    operator delete(v3);
  }
}

uint64_t std::vector<CLMiLoServiceTable::Entry>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMiLoServiceTable::Entry>,std::reverse_iterator<CLMiLoServiceTable::Entry*>,std::reverse_iterator<CLMiLoServiceTable::Entry*>,std::reverse_iterator<CLMiLoServiceTable::Entry*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CLMiLoServiceTable::Entry>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(88 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMiLoServiceTable::Entry>,std::reverse_iterator<CLMiLoServiceTable::Entry*>,std::reverse_iterator<CLMiLoServiceTable::Entry*>,std::reverse_iterator<CLMiLoServiceTable::Entry*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  _DWORD v14[2] = &v17;
  if (a3 == a5)
  {
    uint64_t v12 = a6;
  }
  else
  {
    uint64_t v8 = a7;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 88);
      *(_OWORD *)(v8 - 72) = *(_OWORD *)(a3 - 72);
      *(_OWORD *)(v8 - CLMicroLocationSensorsLogic::stopOdometryMonitoringIfRunning(this + 88) = v9;
      long long v10 = *(_OWORD *)(a3 - 56);
      *(void *)(v8 - 40) = *(void *)(a3 - 40);
      *(_OWORD *)(v8 - 56) = v10;
      *(void *)(a3 - 48) = 0;
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 56) = 0;
      *(void *)(v8 - 32) = *(void *)(a3 - 32);
      long long v11 = *(_OWORD *)(a3 - 24);
      *(void *)(v8 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v8 - 24) = v11;
      v8 -= 88;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 88;
      a3 -= 88;
    }
    while (a3 != a5);
    *((void *)&v17 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v8;
    uint64_t v12 = v17;
  }
  char v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMiLoServiceTable::Entry>,std::reverse_iterator<CLMiLoServiceTable::Entry*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v12;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMiLoServiceTable::Entry>,std::reverse_iterator<CLMiLoServiceTable::Entry*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<CLMiLoServiceTable::Entry>,std::reverse_iterator<CLMiLoServiceTable::Entry*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<CLMiLoServiceTable::Entry>,std::reverse_iterator<CLMiLoServiceTable::Entry*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<CLMiLoServiceTable::Entry>::destroy[abi:ne180100](v3, v1);
      v1 += 88;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<CLMiLoServiceTable::Entry>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<CLMiLoServiceTable::Entry>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 88;
    std::allocator<CLMiLoServiceTable::Entry>::destroy[abi:ne180100](v4, i - 88);
  }
}

uint64_t std::vector<CLMiLoServiceTable::Entry>::__insert_with_size[abi:ne180100]<std::__wrap_iter<CLMiLoServiceTable::Entry*>,std::__wrap_iter<CLMiLoServiceTable::Entry*>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v11 - v12) >> 3) >= a5)
    {
      uint64_t v20 = v12 - a2;
      if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v12 - a2) >> 3) >= a5)
      {
        uint64_t v21 = a3 + 88 * a5;
      }
      else
      {
        uint64_t v21 = a3 + 8 * ((uint64_t)(v12 - a2) >> 3);
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMiLoServiceTable::Entry>,CLMiLoServiceTable::Entry*,CLMiLoServiceTable::Entry*,CLMiLoServiceTable::Entry*>(v9, v21, a4, *(void *)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }
      std::vector<CLMiLoServiceTable::Entry>::__move_range((uint64_t)a1, v5, v12, v5 + 88 * a5);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CLMiLoServiceTable::Entry *,CLMiLoServiceTable::Entry *,CLMiLoServiceTable::Entry *>((uint64_t)v26, v7, v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0x2E8BA2E8BA2E8BALL) {
        std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = 0x2E8BA2E8BA2E8BA3 * ((a2 - v13) >> 3);
      unint64_t v16 = 0x2E8BA2E8BA2E8BA3 * ((v10 - v13) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x1745D1745D1745DLL) {
        unint64_t v18 = 0x2E8BA2E8BA2E8BALL;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v29 = v9;
      if (v18) {
        size_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMiLoServiceTable::Entry>>(v9, v18);
      }
      else {
        size_t v19 = 0;
      }
      unint64_t v22 = &v19[88 * v15];
      v26[0] = v19;
      v26[1] = v22;
      __int16 v27 = v22;
      int v28 = &v19[88 * v18];
      uint64_t v23 = 88 * a5;
      long long v24 = &v22[88 * a5];
      do
      {
        std::allocator<CLMiLoServiceTable::Entry>::construct[abi:ne180100]<CLMiLoServiceTable::Entry,CLMiLoServiceTable::Entry&>(v29, (uint64_t)v22, v7);
        v22 += 88;
        v7 += 88;
        v23 -= 88;
      }
      while (v23);
      __int16 v27 = v24;
      uint64_t v5 = std::vector<CLMiLoServiceTable::Entry>::__swap_out_circular_buffer(a1, v26, v5);
      std::__split_buffer<CLMiLoServiceTable::Entry>::~__split_buffer(v26);
    }
  }
  return v5;
}

void sub_25638E8E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<CLMiLoServiceTable::Entry>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v9 = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      long long v10 = *(_OWORD *)(v9 + 16);
      *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
      *(_OWORD *)(v8 + 16) = v10;
      long long v11 = *(_OWORD *)(v9 + 32);
      *(void *)(v8 + 48) = *(void *)(v9 + 48);
      *(_OWORD *)(v8 + 32) = v11;
      *(void *)(v9 + 40) = 0;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 32) = 0;
      *(void *)(v8 + 56) = *(void *)(v9 + 56);
      long long v12 = *(_OWORD *)(v9 + 64);
      *(void *)(v8 + 80) = *(void *)(v9 + 80);
      *(_OWORD *)(v8 + 64) = v12;
      *(void *)(v9 + 72) = 0;
      *(void *)(v9 + 80) = 0;
      *(void *)(v9 + 64) = 0;
      v8 += 88;
      v9 += 88;
    }
    while (v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CLMiLoServiceTable::Entry *,CLMiLoServiceTable::Entry *,CLMiLoServiceTable::Entry *>((uint64_t)&v14, a2, v7, v6);
}

uint64_t std::vector<CLMiLoServiceTable::Entry>::__swap_out_circular_buffer(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMiLoServiceTable::Entry>,std::reverse_iterator<CLMiLoServiceTable::Entry*>,std::reverse_iterator<CLMiLoServiceTable::Entry*>,std::reverse_iterator<CLMiLoServiceTable::Entry*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMiLoServiceTable::Entry>,CLMiLoServiceTable::Entry*,CLMiLoServiceTable::Entry*,CLMiLoServiceTable::Entry*>(v7, a3, a1[1], a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMiLoServiceTable::Entry>,CLMiLoServiceTable::Entry*,CLMiLoServiceTable::Entry*,CLMiLoServiceTable::Entry*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  _DWORD v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::allocator<CLMiLoServiceTable::Entry>::construct[abi:ne180100]<CLMiLoServiceTable::Entry,CLMiLoServiceTable::Entry&>(a1, v4, v6);
      v6 += 88;
      uint64_t v4 = v12 + 88;
      v12 += 88;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMiLoServiceTable::Entry>,CLMiLoServiceTable::Entry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_25638EAF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::allocator<CLMiLoServiceTable::Entry>::construct[abi:ne180100]<CLMiLoServiceTable::Entry,CLMiLoServiceTable::Entry&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v5 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v5;
  uint64_t v6 = (std::string *)(a2 + 32);
  if (*(char *)(a3 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a3 + 32), *(void *)(a3 + 40));
  }
  else
  {
    long long v7 = *(_OWORD *)(a3 + 32);
    *(void *)(a2 + 48) = *(void *)(a3 + 48);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(void *)(a2 + 56) = *(void *)(a3 + 56);
  uint64_t v8 = (std::string *)(a2 + 64);
  if (*(char *)(a3 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a3 + 64), *(void *)(a3 + 72));
  }
  else
  {
    long long v9 = *(_OWORD *)(a3 + 64);
    *(void *)(a2 + 80) = *(void *)(a3 + 80);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
}

void sub_25638EBA4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMiLoServiceTable::Entry>,CLMiLoServiceTable::Entry*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<CLMiLoServiceTable::Entry>,CLMiLoServiceTable::Entry*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<CLMiLoServiceTable::Entry>,CLMiLoServiceTable::Entry*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 88;
      std::allocator<CLMiLoServiceTable::Entry>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CLMiLoServiceTable::Entry *,CLMiLoServiceTable::Entry *,CLMiLoServiceTable::Entry *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a3 + v7;
      uint64_t v9 = a4 + v7;
      long long v10 = *(_OWORD *)(a3 + v7 - 88);
      *(_OWORD *)(v9 - 72) = *(_OWORD *)(a3 + v7 - 72);
      *(_OWORD *)(v9 - CLMicroLocationSensorsLogic::stopOdometryMonitoringIfRunning(this + 88) = v10;
      uint64_t v11 = (void **)(a4 + v7 - 56);
      if (*(char *)(a4 + v7 - 33) < 0) {
        operator delete(*v11);
      }
      long long v12 = *(_OWORD *)(v8 - 56);
      *(void *)(a4 + v7 - 40) = *(void *)(v8 - 40);
      *(_OWORD *)uint64_t v11 = v12;
      *(unsigned char *)(v8 - 33) = 0;
      *(unsigned char *)(v8 - 56) = 0;
      *(void *)(v9 - 32) = *(void *)(v8 - 32);
      uint64_t v13 = (void **)(v9 - 24);
      if (*(char *)(v9 - 1) < 0) {
        operator delete(*v13);
      }
      uint64_t v14 = a3 + v7;
      long long v15 = *(_OWORD *)(a3 + v7 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 + v7 - 8);
      *(_OWORD *)uint64_t v13 = v15;
      *(unsigned char *)(v14 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0;
      *(unsigned char *)(v14 - 24) = 0;
      v7 -= 88;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CLMiLoServiceTable::Entry *,CLMiLoServiceTable::Entry *,CLMiLoServiceTable::Entry *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    long long v7 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)v5;
    *(_OWORD *)(a4 + 16) = v7;
    std::string::operator=((std::string *)(a4 + 32), (const std::string *)(v5 + 32));
    *(void *)(a4 + 56) = *(void *)(v5 + 56);
    std::string::operator=((std::string *)(a4 + 64), (const std::string *)(v5 + 64));
    a4 += 88;
    v5 += 88;
  }
  while (v5 != v6);
  return v6;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMiLoServiceTable::Entry>,CLMiLoServiceTable::Entry*,CLMiLoServiceTable::Entry*,CLMiLoServiceTable::Entry*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v12 = a4;
  uint64_t v11 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  _DWORD v9[2] = &v12;
  if (a2 != a3)
  {
    do
    {
      long long v5 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
      *(_OWORD *)(v4 + 16) = v5;
      long long v6 = *(_OWORD *)(a2 + 32);
      *(void *)(v4 + 48) = *(void *)(a2 + 48);
      *(_OWORD *)(v4 + 32) = v6;
      *(void *)(a2 + 40) = 0;
      *(void *)(a2 + 48) = 0;
      *(void *)(a2 + 32) = 0;
      *(void *)(v4 + 56) = *(void *)(a2 + 56);
      long long v7 = *(_OWORD *)(a2 + 64);
      *(void *)(v4 + 80) = *(void *)(a2 + 80);
      *(_OWORD *)(v4 + 64) = v7;
      *(void *)(a2 + 72) = 0;
      *(void *)(a2 + 80) = 0;
      *(void *)(a2 + 64) = 0;
      v4 += 88;
      a2 += 88;
    }
    while (a2 != a3);
    uint64_t v12 = v4;
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMiLoServiceTable::Entry>,CLMiLoServiceTable::Entry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void ***std::back_insert_iterator<std::vector<CLMiLoService::ServiceDescriptor>>::operator=[abi:ne180100](void ***a1, _OWORD *a2)
{
  uint64_t v4 = *a1;
  long long v5 = (*a1)[1];
  long long v6 = *a1;
  unint64_t v9 = (unint64_t)v6[2];
  uint64_t v7 = (uint64_t)(v6 + 2);
  unint64_t v8 = v9;
  if ((unint64_t)v5 >= v9)
  {
    uint64_t v12 = ((char *)v5 - (unsigned char *)*v4) >> 5;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 59) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = v8 - (void)*v4;
    if (v14 >> 4 > v13) {
      unint64_t v13 = v14 >> 4;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v15 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15) {
      unint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationResultInternal>>(v7, v15);
    }
    else {
      unint64_t v16 = 0;
    }
    uint64_t v17 = &v16[32 * v12];
    unint64_t v18 = &v16[32 * v15];
    long long v19 = a2[1];
    *(_OWORD *)uint64_t v17 = *a2;
    *((_OWORD *)v17 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v19;
    uint64_t v11 = v17 + 32;
    uint64_t v21 = (char *)*v4;
    uint64_t v20 = (char *)v4[1];
    if (v20 != *v4)
    {
      do
      {
        long long v22 = *((_OWORD *)v20 - 1);
        *((_OWORD *)v17 - 2) = *((_OWORD *)v20 - 2);
        *((_OWORD *)v17 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v22;
        v17 -= 32;
        v20 -= 32;
      }
      while (v20 != v21);
      uint64_t v20 = (char *)*v4;
    }
    __objc2_class *v4 = v17;
    v4[1] = v11;
    _DWORD v4[2] = v18;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    long long v10 = a2[1];
    _OWORD *v5 = *a2;
    v5[1] = v10;
    uint64_t v11 = v5 + 2;
  }
  v4[1] = v11;
  return a1;
}

uint64_t std::__equal_aligned[abi:ne180100]<std::__bitset<1ul,32ul>,true,true>(void *a1, unsigned int a2, uint64_t a3, unsigned int a4, void *a5)
{
  int64_t v5 = a4 - (unint64_t)a2 + 8 * (a3 - (void)a1);
  if (v5 >= 1)
  {
    if (a2)
    {
      if (v5 >= (unint64_t)(64 - a2)) {
        unint64_t v6 = 64 - a2;
      }
      else {
        unint64_t v6 = a4 - (unint64_t)a2 + 8 * (a3 - (void)a1);
      }
      if (((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v6)) & (-1 << a2) & (*a1 ^ *a5)) != 0) {
        return 0;
      }
      v5 -= v6;
      ++a5;
      ++a1;
    }
    if (v5 >= 64)
    {
      while (*a5 == *a1)
      {
        uint64_t v7 = v5 - 64;
        ++a1;
        ++a5;
        BOOL v8 = v5 <= 127;
        v5 -= 64;
        if (v8) {
          goto LABEL_14;
        }
      }
      return 0;
    }
    uint64_t v7 = v5;
LABEL_14:
    if (v7 >= 1 && (*a1 ^ *a5) << -(char)v7) {
      return 0;
    }
  }
  return 1;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMiLoServiceTable::Entry>,CLMiLoServiceTable::Entry const*,CLMiLoServiceTable::Entry const*,CLMiLoServiceTable::Entry*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  _DWORD v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::allocator<CLMiLoServiceTable::Entry>::construct[abi:ne180100]<CLMiLoServiceTable::Entry,CLMiLoServiceTable::Entry const&>(a1, v4, v6);
      v6 += 88;
      uint64_t v4 = v12 + 88;
      v12 += 88;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMiLoServiceTable::Entry>,CLMiLoServiceTable::Entry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_25638F0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::allocator<CLMiLoServiceTable::Entry>::construct[abi:ne180100]<CLMiLoServiceTable::Entry,CLMiLoServiceTable::Entry const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v5 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v5;
  uint64_t v6 = (std::string *)(a2 + 32);
  if (*(char *)(a3 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a3 + 32), *(void *)(a3 + 40));
  }
  else
  {
    long long v7 = *(_OWORD *)(a3 + 32);
    *(void *)(a2 + 48) = *(void *)(a3 + 48);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(void *)(a2 + 56) = *(void *)(a3 + 56);
  BOOL v8 = (std::string *)(a2 + 64);
  if (*(char *)(a3 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a3 + 64), *(void *)(a3 + 72));
  }
  else
  {
    long long v9 = *(_OWORD *)(a3 + 64);
    *(void *)(a2 + 80) = *(void *)(a3 + 80);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
}

void sub_25638F16C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void *std::__list_imp<CLMiLoService>::__create_node[abi:ne180100]<CLMiLoService>(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  long long v7 = operator new(0x1E0uLL);
  void *v7 = a2;
  v7[1] = a3;
  CLMiLoService::CLMiLoService((uint64_t)(v7 + 2), a4);
  return v7;
}

void sub_25638F1D4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t CLMiLoService::CLMiLoService(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *((const std::string::value_type **)a2 + 5), *((void *)a2 + 6));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 40);
    *(void *)(a1 + 56) = *((void *)a2 + 7);
    *(_OWORD *)(a1 + 40) = v6;
  }
  long long v7 = (std::string *)(a1 + 64);
  if (*((char *)a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 8), *((void *)a2 + 9));
  }
  else
  {
    long long v8 = a2[4];
    *(void *)(a1 + 80) = *((void *)a2 + 10);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  *(void *)(a1 + CLMicroLocationSensorsLogic::stopOdometryMonitoringIfRunning(this + 88) = *((void *)a2 + 11);
  *(_OWORD *)(a1 + 96) = a2[6];
  *((void *)a2 + 12) = 0;
  *((void *)a2 + 13) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 296) = 0;
  if (*((unsigned char *)a2 + 296))
  {
    std::__construct_at[abi:ne180100]<CachedPrediction,CachedPrediction,CachedPrediction*>(a1 + 112, (uint64_t)(a2 + 7));
    *(unsigned char *)(a1 + 296) = 1;
  }
  *(void *)(a1 + 304) = *((void *)a2 + 38);
  *(void *)(a1 + 312) = *((void *)a2 + 39);
  *(void *)(a1 + 320) = *((void *)a2 + 40);
  *(void *)(a1 + 328) = *((void *)a2 + 41);
  a2[19] = 0u;
  a2[20] = 0u;
  *(void *)(a1 + 336) = *((void *)a2 + 42);
  *(void *)(a1 + 344) = *((void *)a2 + 43);
  *((void *)a2 + 42) = 0;
  *((void *)a2 + 43) = 0;
  long long v9 = a2[22];
  *(unsigned char *)(a1 + 368) = *((unsigned char *)a2 + 368);
  *(_OWORD *)(a1 + 352) = v9;
  *(void *)(a1 + 376) = *((void *)a2 + 47);
  *(void *)(a1 + 384) = *((void *)a2 + 48);
  *(void *)(a1 + 392) = *((void *)a2 + 49);
  *(void *)(a1 + 400) = *((void *)a2 + 50);
  *(long long *)((char *)a2 + 376) = 0u;
  *(long long *)((char *)a2 + 392) = 0u;
  *(void *)(a1 + 408) = *((void *)a2 + 51);
  *(void *)(a1 + 416) = *((void *)a2 + 52);
  *((void *)a2 + 5CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0;
  *((void *)a2 + 52) = 0;
  long long v10 = *(long long *)((char *)a2 + 424);
  long long v11 = *(long long *)((char *)a2 + 440);
  *(_DWORD *)(a1 + 455) = *(_DWORD *)((char *)a2 + 455);
  *(_OWORD *)(a1 + 424) = v10;
  *(_OWORD *)(a1 + 440) = v11;
  return a1;
}

void sub_25638F35C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__construct_at[abi:ne180100]<CachedPrediction,CachedPrediction,CachedPrediction*>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  long long v4 = *(_OWORD *)(a2 + 24);
  long long v5 = *(_OWORD *)(a2 + 33);
  *(unsigned char *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 33) = v5;
  *(_OWORD *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 80) = 0;
  if (*(unsigned char *)(a2 + 80))
  {
    long long v6 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v6;
    *(void *)(a2 + 64) = 0;
    *(void *)(a2 + 72) = 0;
    *(void *)(a2 + 56) = 0;
    *(unsigned char *)(a1 + 80) = 1;
  }
  *(unsigned char *)(a1 + CLMicroLocationSensorsLogic::stopOdometryMonitoringIfRunning(this + 88) = 0;
  uint64_t v7 = a1 + 88;
  *(unsigned char *)(a1 + 128) = 0;
  if (*(unsigned char *)(a2 + 128))
  {
    std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__hash_table(v7, (uint64_t *)(a2 + 88));
    *(unsigned char *)(a1 + 128) = 1;
  }
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  return a1;
}

__n128 std::deque<CLMiLoServiceManager::OutstandingEnableCustomLoiRequest>::push_back(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<CLMiLoServiceManager::OutstandingEnableCustomLoiRequest>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  __n128 result = *a2;
  *(__n128 *)(*(void *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

void std::deque<CLMiLoServiceManager::OutstandingEnableCustomLoiRequest>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    long long v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    long long v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)long long v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>(v5, v33);
      int v35 = &v34[8 * (v33 >> 2)];
      long long v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      long long v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        long long v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        long long v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)long long v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    long long v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      long long v9 = (char *)a1[1];
    }
    long long v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<CLMiLoServiceManager::OutstandingEnableCustomLoiRequest *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<CLMiLoServiceManager::OutstandingEnableCustomLoiRequest *>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    long long v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    long long v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>((uint64_t)(a1 + 3), v46);
      int v35 = &v34[8 * (v46 >> 2)];
      long long v37 = &v34[8 * v47];
      std::string::size_type v48 = (uint64_t *)a1[1];
      long long v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        long long v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        long long v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  std::string::size_type v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v54 + 8 * v26;
  std::string v53 = operator new(0x1000uLL);
  std::__split_buffer<CLMiLoServiceManager::OutstandingEnableCustomLoiRequest *>::push_back(&v54, &v53);
  __int16 v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<CLMiLoServiceManager::OutstandingEnableCustomLoiRequest *>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_25638F7B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__split_buffer<CLMiLoServiceManager::OutstandingEnableCustomLoiRequest *>::push_back(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    unint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      long long v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      __int16 v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)uint64_t v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        int64_t v16 = 1;
      }
      else {
        int64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>(a1[4], v16);
      long long v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      unint64_t v7 = v6 >> 3;
      uint64_t v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        BOOL v10 = v9;
      }
      else {
        BOOL v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      uint64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<CLMiLoServiceManager::OutstandingEnableCustomLoiRequest *>::push_front(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    unint64_t v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  unsigned char *v6;
  unsigned char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    unint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        uint64_t v11 = 1;
      }
      else {
        uint64_t v11 = (v7 - v4) >> 2;
      }
      unint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      int64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        int64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
}

long long *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<CLMiLoService::ModelAndConf> *,std::shared_ptr<CLMiLoService::ModelAndConf> *,std::shared_ptr<CLMiLoService::ModelAndConf> *>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      long long v7 = *v5;
      *(void *)uint64_t v5 = 0;
      *((void *)v5 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0;
      uint64_t v8 = *(std::__shared_weak_count **)(a4 + 8);
      *(_OWORD *)a4 = v7;
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      ++v5;
      a4 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

CLMicroLocationModelTable::Entry *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationModelTable::Entry>,CLMicroLocationModelTable::Entry const*,CLMicroLocationModelTable::Entry const*,CLMicroLocationModelTable::Entry*>(uint64_t a1, CLMicroLocationModelTable::Entry *a2, CLMicroLocationModelTable::Entry *a3, CLMicroLocationModelTable::Entry *this)
{
  uint64_t v4 = this;
  uint64_t v10 = this;
  uint64_t v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      CLMicroLocationModelTable::Entry::Entry(v4, v6);
      uint64_t v6 = (const CLMicroLocationModelTable::Entry *)((char *)v6 + 312);
      uint64_t v4 = (CLMicroLocationModelTable::Entry *)((char *)v11 + 312);
      uint64_t v11 = (CLMicroLocationModelTable::Entry *)((char *)v11 + 312);
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationModelTable::Entry>,CLMicroLocationModelTable::Entry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_25638FD7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::allocate_shared[abi:ne180100]<CLMiLoService::ModelAndConf,std::allocator<CLMiLoService::ModelAndConf>,CLMicroLocationModel,boost::uuids::uuid &,std::string const,boost::uuids::uuid,boost::uuids::uuid &,std::string,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,void>@<X0>(const CLMicroLocationModel *a1@<X1>, uint64_t *a2@<X2>, long long *a3@<X3>, uint64_t *a4@<X4>, uint64_t *a5@<X5>, long long *a6@<X6>, double *a7@<X7>, void *a8@<X8>)
{
  int64_t v16 = operator new(0x2A0uLL);
  __n128 result = std::__shared_ptr_emplace<CLMiLoService::ModelAndConf>::__shared_ptr_emplace[abi:ne180100]<CLMicroLocationModel,boost::uuids::uuid &,std::string const,boost::uuids::uuid,boost::uuids::uuid &,std::string,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,std::allocator<CLMiLoService::ModelAndConf>,0>(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  return result;
}

void sub_25638FE20(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<CLMiLoService::ModelAndConf>::__shared_ptr_emplace[abi:ne180100]<CLMicroLocationModel,boost::uuids::uuid &,std::string const,boost::uuids::uuid,boost::uuids::uuid &,std::string,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,std::allocator<CLMiLoService::ModelAndConf>,0>(void *a1, const CLMicroLocationModel *a2, uint64_t *a3, long long *a4, uint64_t *a5, uint64_t *a6, long long *a7, double *a8)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_2704DBDA0;
  CLMiLoService::ModelAndConf::ModelAndConf((uint64_t)(a1 + 3), a2, *a3, a3[1], a4, *a5, a5[1], *a8, (uint64_t)a8, *a6, a6[1], a7);
  return a1;
}

void sub_25638FEB0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<CLMiLoService::ModelAndConf>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_2704DBDA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CLMiLoService::ModelAndConf>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_2704DBDA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2A6340);
}

void std::__shared_ptr_emplace<CLMiLoService::ModelAndConf>::__on_zero_shared(uint64_t a1)
{
}

void *std::allocate_shared[abi:ne180100]<CLMiLoService::ModelAndConf,std::allocator<CLMiLoService::ModelAndConf>,CLMiLoService::ModelAndConf&,void>@<X0>(const CLMiLoService::ModelAndConf *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x2A0uLL);
  __n128 result = std::__shared_ptr_emplace<CLMiLoService::ModelAndConf>::__shared_ptr_emplace[abi:ne180100]<CLMiLoService::ModelAndConf&,std::allocator<CLMiLoService::ModelAndConf>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_25638FF8C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<CLMiLoService::ModelAndConf>::__shared_ptr_emplace[abi:ne180100]<CLMiLoService::ModelAndConf&,std::allocator<CLMiLoService::ModelAndConf>,0>(void *a1, const CLMiLoService::ModelAndConf *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_2704DBDA0;
  CLMiLoService::ModelAndConf::ModelAndConf((CLMiLoService::ModelAndConf *)(a1 + 3), a2);
  return a1;
}

void sub_25638FFE8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

CLMiLoService::ModelAndConf *CLMiLoService::ModelAndConf::ModelAndConf(CLMiLoService::ModelAndConf *this, const CLMiLoService::ModelAndConf *a2)
{
  CLMicroLocationModel::CLMicroLocationModel(this, a2);
  *(_OWORD *)(v4 + 448) = *((_OWORD *)a2 + 28);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)(v4 + 464), (long long *)a2 + 29);
  long long v5 = *((_OWORD *)a2 + 32);
  *((_OWORD *)this + 3CLMicroLocationLogic::startOdometryMonitoring(this - 1) = *((_OWORD *)a2 + 31);
  *((_OWORD *)this + 32) = v5;
  std::map<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>::map[abi:ne180100]((uint64_t *)this + 66, (uint64_t)a2 + 528);
  *((void *)this + 69) = *((id *)a2 + 69);
  *((void *)this + 70) = *((void *)a2 + 70);
  if (*((char *)a2 + 591) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 568), *((const std::string::value_type **)a2 + 71), *((void *)a2 + 72));
  }
  else
  {
    long long v6 = *(_OWORD *)((char *)a2 + 568);
    *((void *)this + 73) = *((void *)a2 + 73);
    *(_OWORD *)((char *)this + 568) = v6;
  }
  *((void *)this + 74) = *((void *)a2 + 74);
  std::__optional_copy_base<CLMicroLocationAnchorValueStatisticsMap,false>::__optional_copy_base[abi:ne180100]((unsigned char *)this + 600, (uint64_t)a2 + 600);
  return this;
}

void sub_2563900C4(_Unwind_Exception *a1)
{
  CLMicroLocationLocalizationSettings::~CLMicroLocationLocalizationSettings(v3);
  if (*(unsigned char *)(v1 + 488))
  {
    if (*(char *)(v1 + 487) < 0) {
      operator delete(*v2);
    }
  }
  CLMicroLocationModel::~CLMicroLocationModel((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t *std::map<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__tree_node<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,void *> *,long>>>(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_256390160(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__tree_node<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,void *> *,long>>>(uint64_t *result, int *a2, int *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    long long v5 = (uint64_t **)result;
    long long v6 = result + 1;
    do
    {
      __n128 result = std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::__emplace_hint_unique_key_args<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::pair<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes const,double> const&>(v5, v6, v4 + 8, (_OWORD *)v4 + 2);
      long long v7 = (int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          long long v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::__emplace_hint_unique_key_args<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::pair<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes const,double> const&>(uint64_t **a1, uint64_t *a2, int *a3, _OWORD *a4)
{
  long long v6 = std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::__find_equal<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>(a1, a2, &v11, &v10, a3);
  long long v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    long long v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::__find_equal<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  long long v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, int v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    uint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        uint64_t v13 = v10;
      }
      while (v14);
    }
    int v15 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = (uint64_t *)v16;
          int v18 = *(_DWORD *)(v16 + 32);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          long long v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        long long v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      uint64_t v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    unint64_t v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      unint64_t v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      uint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v21 = (uint64_t *)v20;
          int v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          long long v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        long long v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      uint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

unsigned char *std::__optional_copy_base<CLMicroLocationAnchorValueStatisticsMap,false>::__optional_copy_base[abi:ne180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[40] = 0;
  if (*(unsigned char *)(a2 + 40))
  {
    std::unordered_map<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>::unordered_map((uint64_t)a1, a2);
    a1[40] = 1;
  }
  return a1;
}

void sub_256390478(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 40)) {
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>>>::~__hash_table(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_map<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::pair<boost::uuids::uuid const,std::unordered_map<std::string,AnchorValueStatistics>> const&>(a1, i + 2, (_OWORD *)i + 1);
  return a1;
}

void sub_2563904F4(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::pair<boost::uuids::uuid const,std::unordered_map<std::string,AnchorValueStatistics>> const&>(uint64_t a1, void *a2, _OWORD *a3)
{
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  do
    v6 ^= (v6 << 6) + (v6 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v5++);
  while (v5 != 16);
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = v6;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    BOOL v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = (void *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == *a2 && v10[3] == a2[1]) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>>>::__construct_node_hash<std::pair<boost::uuids::uuid const,std::unordered_map<std::string,AnchorValueStatistics>> const&>(a1, v6, a3, (uint64_t)v22);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *(void *)v22[0] = *v19;
    *uint64_t v19 = v22[0];
  }
  else
  {
    *(void *)v22[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v22[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v22[0])
    {
      unint64_t v20 = *(void *)(*(void *)v22[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v20 >= v7) {
          v20 %= v7;
        }
      }
      else
      {
        v20 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v20) = v22[0];
    }
  }
  uint64_t v10 = (void *)v22[0];
  v22[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,void *>>>>::reset[abi:ne180100]((uint64_t)v22, 0);
  return v10;
}

void sub_256390774(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>>>::__construct_node_hash<std::pair<boost::uuids::uuid const,std::unordered_map<std::string,AnchorValueStatistics>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint8x8_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  *((_OWORD *)v8 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = *a3;
  uint64_t result = std::unordered_map<std::string,AnchorValueStatistics>::unordered_map((uint64_t)(v8 + 4), (uint64_t)(a3 + 1));
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_2563907F0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,AnchorValueStatistics>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,AnchorValueStatistics> const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_256390868(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,AnchorValueStatistics> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    float v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::__construct_node_hash<std::pair<std::string const,AnchorValueStatistics> const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  int v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *int v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_256390ADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,AnchorValueStatistics>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::__construct_node_hash<std::pair<std::string const,AnchorValueStatistics> const&>@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x38uLL);
  *(void *)(a4 + 8) = v7;
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = a2;
  unint64_t v9 = (std::string *)(v8 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v8 + 4) = *(void *)(a3 + 16);
  }
  __n128 result = *(__n128 *)(a3 + 24);
  *(__n128 *)(v8 + 40) = result;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_256390B90(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,AnchorValueStatistics>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      unint64_t v14 = v8 + a3 + v7 + v4;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v17 + v6 + v9;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      int v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v39 + v30 + v28 + v29;
        uint64_t v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64;
      }
      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  if (a2 < 9)
  {
    if (a2 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        unint64_t v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      uint64_t v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273 * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(void *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)a1 + a2 - 16);
  uint64_t v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = __ROR8__(v3 + v4, 52);
  uint64_t v7 = v3 + a1[1];
  uint64_t v8 = __ROR8__(v7, 7);
  uint64_t v9 = v7 + v5;
  uint64_t v10 = *(void *)((char *)a1 + a2 - 32) + v5;
  uint64_t v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  uint64_t v12 = *(void *)((char *)a1 + a2 - 24) + v10 + v2;
  unint64_t v13 = 0xC3A5C85C97CB3127 * (v12 + *(void *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(void *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    uint64_t v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,AnchorValueStatistics>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::~__hash_table((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t std::vector<std::shared_ptr<CLMiLoService::ModelAndConf>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<CLMiLoService::ModelAndConf>>,std::reverse_iterator<std::shared_ptr<CLMiLoService::ModelAndConf>*>,std::reverse_iterator<std::shared_ptr<CLMiLoService::ModelAndConf>*>,std::reverse_iterator<std::shared_ptr<CLMiLoService::ModelAndConf>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<CLMiLoService::ModelAndConf>>,std::reverse_iterator<std::shared_ptr<CLMiLoService::ModelAndConf>*>,std::reverse_iterator<std::shared_ptr<CLMiLoService::ModelAndConf>*>,std::reverse_iterator<std::shared_ptr<CLMiLoService::ModelAndConf>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<CLMiLoService::ModelAndConf>>,std::reverse_iterator<std::shared_ptr<CLMiLoService::ModelAndConf>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<CLMiLoService::ModelAndConf>>,std::reverse_iterator<std::shared_ptr<CLMiLoService::ModelAndConf>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<CLMiLoService::ModelAndConf>>,std::reverse_iterator<std::shared_ptr<CLMiLoService::ModelAndConf>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<CLMiLoService::ModelAndConf>>,std::reverse_iterator<std::shared_ptr<CLMiLoService::ModelAndConf>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 += 16;
  }
}

void **std::__split_buffer<std::shared_ptr<CLMiLoService::ModelAndConf>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::shared_ptr<CLMiLoService::ModelAndConf>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

void std::__function::__func<CLMiLoServiceManager::modelByServiceAndLocation(CLMiLoService const&,CLMiLoService::MiLoLocation)::$_0,std::allocator<CLMiLoServiceManager::modelByServiceAndLocation(CLMiLoService const&,CLMiLoService::MiLoLocation)::$_0>,BOOL ()(std::shared_ptr<CLMiLoService::ModelAndConf> const&)>::~__func()
{
}

void *std::__function::__func<CLMiLoServiceManager::modelByServiceAndLocation(CLMiLoService const&,CLMiLoService::MiLoLocation)::$_0,std::allocator<CLMiLoServiceManager::modelByServiceAndLocation(CLMiLoService const&,CLMiLoService::MiLoLocation)::$_0>,BOOL ()(std::shared_ptr<CLMiLoService::ModelAndConf> const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_2704DBDF0;
  return result;
}

void std::__function::__func<CLMiLoServiceManager::modelByServiceAndLocation(CLMiLoService const&,CLMiLoService::MiLoLocation)::$_0,std::allocator<CLMiLoServiceManager::modelByServiceAndLocation(CLMiLoService const&,CLMiLoService::MiLoLocation)::$_0>,BOOL ()(std::shared_ptr<CLMiLoService::ModelAndConf> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_2704DBDF0;
}

BOOL std::__function::__func<CLMiLoServiceManager::modelByServiceAndLocation(CLMiLoService const&,CLMiLoService::MiLoLocation)::$_0,std::allocator<CLMiLoServiceManager::modelByServiceAndLocation(CLMiLoService const&,CLMiLoService::MiLoLocation)::$_0>,BOOL ()(std::shared_ptr<CLMiLoService::ModelAndConf> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(*(void *)a2 + 4) == 0;
}

uint64_t std::__function::__func<CLMiLoServiceManager::modelByServiceAndLocation(CLMiLoService const&,CLMiLoService::MiLoLocation)::$_0,std::allocator<CLMiLoServiceManager::modelByServiceAndLocation(CLMiLoService const&,CLMiLoService::MiLoLocation)::$_0>,BOOL ()(std::shared_ptr<CLMiLoService::ModelAndConf> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMiLoServiceManager::modelByServiceAndLocation(CLMiLoService const&,CLMiLoService::MiLoLocation)::$_0,std::allocator<CLMiLoServiceManager::modelByServiceAndLocation(CLMiLoService const&,CLMiLoService::MiLoLocation)::$_0>,BOOL ()(std::shared_ptr<CLMiLoService::ModelAndConf> const&)>::target_type()
{
}

void *std::__function::__value_func<BOOL ()(std::shared_ptr<CLMiLoService::ModelAndConf> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<CLMiLoServiceManager::modelByServiceAndLocation(CLMiLoService const&,CLMiLoService::MiLoLocation)::$_1,std::allocator<CLMiLoServiceManager::modelByServiceAndLocation(CLMiLoService const&,CLMiLoService::MiLoLocation)::$_1>,BOOL ()(std::shared_ptr<CLMiLoService::ModelAndConf> const&)>::~__func()
{
}

void *std::__function::__func<CLMiLoServiceManager::modelByServiceAndLocation(CLMiLoService const&,CLMiLoService::MiLoLocation)::$_1,std::allocator<CLMiLoServiceManager::modelByServiceAndLocation(CLMiLoService const&,CLMiLoService::MiLoLocation)::$_1>,BOOL ()(std::shared_ptr<CLMiLoService::ModelAndConf> const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_2704DBE80;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CLMiLoServiceManager::modelByServiceAndLocation(CLMiLoService const&,CLMiLoService::MiLoLocation)::$_1,std::allocator<CLMiLoServiceManager::modelByServiceAndLocation(CLMiLoService const&,CLMiLoService::MiLoLocation)::$_1>,BOOL ()(std::shared_ptr<CLMiLoService::ModelAndConf> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_2704DBE80;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<CLMiLoServiceManager::modelByServiceAndLocation(CLMiLoService const&,CLMiLoService::MiLoLocation)::$_1,std::allocator<CLMiLoServiceManager::modelByServiceAndLocation(CLMiLoService const&,CLMiLoService::MiLoLocation)::$_1>,BOOL ()(std::shared_ptr<CLMiLoService::ModelAndConf> const&)>::operator()(uint64_t a1, void *a2)
{
  uint64_t v2 = (unsigned __int8 *)(*a2 + 464);
  CLMiLoService::getClientIdAndServiceUuid(*(CLMiLoService **)(a1 + 8), &__p);
  BOOL v3 = std::operator==[abi:ne180100]<std::string,std::string>(v2, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v3;
}

uint64_t std::__function::__func<CLMiLoServiceManager::modelByServiceAndLocation(CLMiLoService const&,CLMiLoService::MiLoLocation)::$_1,std::allocator<CLMiLoServiceManager::modelByServiceAndLocation(CLMiLoService const&,CLMiLoService::MiLoLocation)::$_1>,BOOL ()(std::shared_ptr<CLMiLoService::ModelAndConf> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMiLoServiceManager::modelByServiceAndLocation(CLMiLoService const&,CLMiLoService::MiLoLocation)::$_1,std::allocator<CLMiLoServiceManager::modelByServiceAndLocation(CLMiLoService const&,CLMiLoService::MiLoLocation)::$_1>,BOOL ()(std::shared_ptr<CLMiLoService::ModelAndConf> const&)>::target_type()
{
}

uint64_t std::__function::__value_func<BOOL ()(std::shared_ptr<CLMiLoService::ModelAndConf> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::deque<CLMiLoServiceManager::OutstandingEnableCustomLoiRequest>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x100) {
    a2 = 1;
  }
  if (v2 < 0x200) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 256;
  }
  return v4 ^ 1u;
}

char *std::__tree<std::pair<boost::uuids::uuid,boost::uuids::uuid>>::__emplace_unique_key_args<std::pair<boost::uuids::uuid,boost::uuids::uuid>,std::pair<boost::uuids::uuid,boost::uuids::uuid>>(uint64_t **a1, unint64_t *a2, _OWORD *a3)
{
  uint64_t v5 = (void **)std::__tree<std::pair<boost::uuids::uuid,boost::uuids::uuid>>::__find_equal<std::pair<boost::uuids::uuid,boost::uuids::uuid>>((uint64_t)a1, &v10, a2);
  uint64_t v6 = (char *)*v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = (char *)operator new(0x40uLL);
    long long v8 = a3[1];
    *(_OWORD *)(v6 + 25) = *a3;
    *(_OWORD *)(v6 + 4CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v8;
    std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__insert_node_at(a1, v10, v7, (uint64_t *)v6);
  }
  return v6;
}

void *std::__tree<std::pair<boost::uuids::uuid,boost::uuids::uuid>>::__find_equal<std::pair<boost::uuids::uuid,boost::uuids::uuid>>(uint64_t a1, void *a2, unint64_t *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  int v4 = *(void **)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        long long v8 = v4;
        long long v9 = (void *)((char *)v4 + 25);
        if (!std::less<std::pair<boost::uuids::uuid,boost::uuids::uuid>>::operator()[abi:ne180100](v7, a3, (void *)((char *)v4 + 25)))break; {
        int v4 = (void *)*v8;
        }
        uint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!std::less<std::pair<boost::uuids::uuid,boost::uuids::uuid>>::operator()[abi:ne180100](v7, v9, a3))break; {
      uint64_t v5 = v8 + 1;
      }
      int v4 = (void *)v8[1];
    }
    while (v4);
  }
  else
  {
    long long v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t std::less<std::pair<boost::uuids::uuid,boost::uuids::uuid>>::operator()[abi:ne180100](uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = bswap64(*a2);
  unint64_t v4 = bswap64(*a3);
  if (v3 != v4 || (unint64_t v3 = bswap64(a2[1]), v4 = bswap64(a3[1]), v3 != v4))
  {
    int v6 = v3 < v4 ? -1 : 1;
    if (v6 < 0) {
      return 1;
    }
  }
  unint64_t v7 = bswap64(*a3);
  unint64_t v8 = bswap64(*a2);
  if (v7 != v8 || (unint64_t v7 = bswap64(a3[1]), v8 = bswap64(a2[1]), v7 != v8))
  {
    int v9 = v7 < v8 ? -1 : 1;
    if (v9 < 0) {
      return 0;
    }
  }
  unint64_t v10 = bswap64(a2[2]);
  unint64_t v11 = bswap64(a3[2]);
  if (v10 == v11 && (unint64_t v10 = bswap64(a2[3]), v11 = bswap64(a3[3]), v10 == v11))
  {
    unsigned int v12 = 0;
  }
  else if (v10 < v11)
  {
    unsigned int v12 = -1;
  }
  else
  {
    unsigned int v12 = 1;
  }
  return v12 >> 31;
}

long long *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CLMiLoServiceManager::ConnectionRequestParams *,CLMiLoServiceManager::ConnectionRequestParams *,CLMiLoServiceManager::ConnectionRequestParams *>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(char *)(a4 + 23) < 0) {
        operator delete(*(void **)a4);
      }
      long long v7 = *v5;
      *(void *)(a4 + 16) = *((void *)v5 + 2);
      *(_OWORD *)a4 = v7;
      *((unsigned char *)v5 + 23) = 0;
      *(unsigned char *)uint64_t v5 = 0;
      char v8 = *((unsigned char *)v5 + 72);
      long long v9 = *(long long *)((char *)v5 + 56);
      long long v10 = *(long long *)((char *)v5 + 40);
      *(_OWORD *)(a4 + 24) = *(long long *)((char *)v5 + 24);
      *(_OWORD *)(a4 + 40) = v10;
      *(_OWORD *)(a4 + 56) = v9;
      *(unsigned char *)(a4 + 72) = v8;
      unint64_t v11 = (void **)(a4 + 80);
      if (*(char *)(a4 + 103) < 0) {
        operator delete(*v11);
      }
      long long v12 = v5[5];
      *(void *)(a4 + 96) = *((void *)v5 + 12);
      *(_OWORD *)unint64_t v11 = v12;
      *((unsigned char *)v5 + 103) = 0;
      *((unsigned char *)v5 + 80) = 0;
      a4 += 104;
      uint64_t v5 = (long long *)((char *)v5 + 104);
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::vector<CLMiLoServiceManager::ConnectionRequestParams>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMiLoServiceManager::ConnectionRequestParams>,std::reverse_iterator<CLMiLoServiceManager::ConnectionRequestParams*>,std::reverse_iterator<CLMiLoServiceManager::ConnectionRequestParams*>,std::reverse_iterator<CLMiLoServiceManager::ConnectionRequestParams*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CLMiLoServiceManager::ConnectionRequestParams>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x276276276276277) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(104 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMiLoServiceManager::ConnectionRequestParams>,std::reverse_iterator<CLMiLoServiceManager::ConnectionRequestParams*>,std::reverse_iterator<CLMiLoServiceManager::ConnectionRequestParams*>,std::reverse_iterator<CLMiLoServiceManager::ConnectionRequestParams*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v19 = a6;
  *((void *)&v19 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = a7;
  long long v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  _DWORD v16[2] = &v19;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 104);
      *(void *)(v9 - CLMicroLocationSensorsLogic::stopOdometryMonitoringIfRunning(this + 88) = *(void *)(a3 - 88);
      *(_OWORD *)(v9 - 104) = v10;
      *(void *)(a3 - 96) = 0;
      *(void *)(a3 - CLMicroLocationSensorsLogic::stopOdometryMonitoringIfRunning(this + 88) = 0;
      *(void *)(a3 - 104) = 0;
      long long v11 = *(_OWORD *)(a3 - 80);
      long long v12 = *(_OWORD *)(a3 - 64);
      long long v13 = *(_OWORD *)(a3 - 48);
      *(unsigned char *)(v9 - 32) = *(unsigned char *)(a3 - 32);
      *(_OWORD *)(v9 - 64) = v12;
      *(_OWORD *)(v9 - 48) = v13;
      *(_OWORD *)(v9 - 80) = v11;
      long long v14 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v14;
      v9 -= 104;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 104;
      a3 -= 104;
    }
    while (a3 != a5);
    *((void *)&v19 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v9;
  }
  char v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMiLoServiceManager::ConnectionRequestParams>,std::reverse_iterator<CLMiLoServiceManager::ConnectionRequestParams*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMiLoServiceManager::ConnectionRequestParams>,std::reverse_iterator<CLMiLoServiceManager::ConnectionRequestParams*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<CLMiLoServiceManager::ConnectionRequestParams>,std::reverse_iterator<CLMiLoServiceManager::ConnectionRequestParams*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<CLMiLoServiceManager::ConnectionRequestParams>,std::reverse_iterator<CLMiLoServiceManager::ConnectionRequestParams*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<CLMiLoServiceManager::ConnectionRequestParams>::destroy[abi:ne180100](v3, v1);
      v1 += 104;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<CLMiLoServiceManager::ConnectionRequestParams>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<CLMiLoServiceManager::ConnectionRequestParams>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 104;
    std::allocator<CLMiLoServiceManager::ConnectionRequestParams>::destroy[abi:ne180100](v4, i - 104);
  }
}

BOOL CLMicroLocationWiFiChannelHistogramAnalyzer::histogramSortFunction(uint64_t a1, uint64_t a2)
{
  return HIDWORD(a1) > HIDWORD(a2);
}

void *CLMicroLocationWiFiChannelHistogramAnalyzer::update(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v4 = result;
    do
    {
      unsigned int v5 = *(_DWORD *)(v2 + 32);
      if (!std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v4, &v5))
      {
        uint64_t v6 = &v5;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v4, &v5, (uint64_t)&std::piecewise_construct, &v6)+ 5) = 0;
      }
      uint64_t v6 = &v5;
      uint64_t result = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v4, &v5, (uint64_t)&std::piecewise_construct, &v6);
      ++*((_DWORD *)result + 5);
      v2 += 48;
    }
    while (v2 != v3);
  }
  return result;
}

BOOL CLMicroLocationWiFiChannelHistogramAnalyzer::isEmpty(CLMicroLocationWiFiChannelHistogramAnalyzer *this)
{
  return *((void *)this + 3) == 0;
}

void CLMicroLocationWiFiChannelHistogramAnalyzer::getHistogram(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unsigned int v5 = *(void **)(a1 + 16);
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = a3 + 2;
    do
    {
      if ((unint64_t)v6 >= *v7)
      {
        uint64_t v8 = ((uint64_t)v6 - *a3) >> 3;
        if ((unint64_t)(v8 + 1) >> 61) {
          std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v9 = *v7 - *a3;
        uint64_t v10 = v9 >> 2;
        if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
          uint64_t v10 = v8 + 1;
        }
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v10;
        }
        long long v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>((uint64_t)(a3 + 2), v11);
        long long v14 = &v12[8 * v8];
        *(void *)long long v14 = v5[2];
        uint64_t v6 = v14 + 8;
        unint64_t v16 = (char *)*a3;
        long long v15 = (char *)a3[1];
        if (v15 != (char *)*a3)
        {
          do
          {
            uint64_t v17 = *((void *)v15 - 1);
            v15 -= 8;
            *((void *)v14 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v17;
            v14 -= 8;
          }
          while (v15 != v16);
          long long v15 = (char *)*a3;
        }
        *a3 = (uint64_t)v14;
        a3[1] = (uint64_t)v6;
        a3[2] = (uint64_t)&v12[8 * v13];
        if (v15) {
          operator delete(v15);
        }
      }
      else
      {
        *v6++ = v5[2];
      }
      a3[1] = (uint64_t)v6;
      unsigned int v5 = (void *)*v5;
    }
    while (v5);
  }
  CLMicroLocationWiFiChannelHistogramAnalyzer::getValidChannels(a2, (uint64_t *)&v41);
  long long v18 = v41;
  if (v41 == v42)
  {
    uint64_t v20 = (char *)a3[1];
  }
  else
  {
    long long v19 = a3 + 2;
    uint64_t v20 = (char *)a3[1];
    do
    {
      int v21 = *((_DWORD *)v18 + 7);
      uint64_t v22 = *a3;
      uint64_t v23 = (char *)*a3;
      if ((char *)*a3 == v20)
      {
LABEL_22:
        if ((unint64_t)v20 >= *v19)
        {
          uint64_t v24 = (uint64_t)&v20[-v22] >> 3;
          if ((unint64_t)(v24 + 1) >> 61) {
            std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v25 = *v19 - v22;
          uint64_t v26 = v25 >> 2;
          if (v25 >> 2 <= (unint64_t)(v24 + 1)) {
            uint64_t v26 = v24 + 1;
          }
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v27 = v26;
          }
          uint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>((uint64_t)(a3 + 2), v27);
          uint64_t v30 = &v28[8 * v24];
          *(_DWORD *)uint64_t v30 = v21;
          *((_DWORD *)v30 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0;
          uint64_t v32 = (char *)*a3;
          uint64_t v31 = (char *)a3[1];
          uint64_t v33 = v30;
          if (v31 != (char *)*a3)
          {
            do
            {
              uint64_t v34 = *((void *)v31 - 1);
              v31 -= 8;
              *((void *)v33 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v34;
              v33 -= 8;
            }
            while (v31 != v32);
            uint64_t v31 = (char *)*a3;
          }
          uint64_t v20 = v30 + 8;
          *a3 = (uint64_t)v33;
          a3[1] = (uint64_t)(v30 + 8);
          a3[2] = (uint64_t)&v28[8 * v29];
          if (v31) {
            operator delete(v31);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v20 = v21;
          *((_DWORD *)v20 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0;
          v20 += 8;
        }
        a3[1] = (uint64_t)v20;
      }
      else
      {
        while (*(_DWORD *)v23 != v21)
        {
          v23 += 8;
          if (v23 == v20) {
            goto LABEL_22;
          }
        }
      }
      uint64_t v35 = v18[1];
      if (v35)
      {
        do
        {
          uint64_t v36 = (void **)v35;
          uint64_t v35 = (void *)*v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          uint64_t v36 = (void **)v18[2];
          BOOL v37 = *v36 == v18;
          long long v18 = v36;
        }
        while (!v37);
      }
      long long v18 = v36;
    }
    while (v36 != v42);
  }
  uint64_t v38 = *a3;
  unint64_t v39 = 126 - 2 * __clz((uint64_t)&v20[-*a3] >> 3);
  BOOL v37 = v20 == (char *)*a3;
  uint64_t v43 = CLMicroLocationWiFiChannelHistogramAnalyzer::histogramSortFunction;
  if (v37) {
    uint64_t v40 = 0;
  }
  else {
    uint64_t v40 = v39;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(CLMicroLocationWiFiChannelHistogram,CLMicroLocationWiFiChannelHistogram),CLMicroLocationWiFiChannelHistogram*,false>(v38, v20, (uint64_t (**)(uint64_t, uint64_t))&v43, v40, 1);
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&v41, v42[0]);
}

void sub_256392044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&a9, a10);
  long long v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationWiFiChannelHistogramAnalyzer::getValidChannels@<X0>(unsigned __int8 *a1@<X0>, uint64_t *a2@<X8>)
{
  _DWORD v23[2] = *MEMORY[0x263EF8340];
  v16[0] = xmmword_2565166D4;
  v16[1] = unk_2565166E4;
  _DWORD v16[2] = xmmword_2565166F4;
  int v17 = 13;
  std::set<unsigned int>::set[abi:ne180100]((uint64_t)&v10, (unsigned int *)v16, 13);
  std::string::basic_string[abi:ne180100]<0>(v18, "home");
  long long v19 = v10;
  v20[0] = v11;
  v20[1] = v12;
  if (v12)
  {
    void v11[2] = v20;
    uint64_t v10 = &v11;
    unint64_t v11 = 0;
    uint64_t v12 = 0;
  }
  else
  {
    long long v19 = v20;
  }
  _DWORD v14[2] = xmmword_256516728;
  void v14[3] = unk_256516738;
  v14[4] = xmmword_256516748;
  void v14[5] = unk_256516758;
  v14[0] = xmmword_256516708;
  v14[1] = unk_256516718;
  uint64_t v15 = 0xB1000000ADLL;
  std::set<unsigned int>::set[abi:ne180100]((uint64_t)&v7, (unsigned int *)v14, 26);
  std::string::basic_string[abi:ne180100]<0>(v21, "custom");
  uint64_t v22 = v7;
  v23[0] = v8;
  v23[1] = v9;
  if (v9)
  {
    v8[2] = v23;
    uint64_t v7 = &v8;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v22 = v23;
  }
  std::unordered_map<std::string,std::set<unsigned int>>::unordered_map((uint64_t)v13, (unsigned __int8 *)v18, 2);
  for (uint64_t i = 0; i != -12; i -= 6)
  {
    std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&v23[i - 1], (void *)v23[i]);
    if (SHIBYTE(v21[i + 2]) < 0) {
      operator delete((void *)v21[i]);
    }
  }
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&v7, v8);
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&v10, v11);
  unsigned int v5 = std::__hash_table<std::__hash_value_type<std::string,std::set<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<unsigned int>>>>::find<std::string>(v13, a1);
  if (v5)
  {
    std::set<unsigned int>::set[abi:ne180100](a2, (uint64_t)(v5 + 40));
  }
  else
  {
    a2[2] = 0;
    a2[1] = 0;
    *a2 = (uint64_t)(a2 + 1);
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::set<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<unsigned int>>>>::~__hash_table((uint64_t)v13);
}

void sub_256392290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, void *a12, uint64_t a13, uint64_t a14, char a15, void *a16)
{
  for (uint64_t i = 48; i != -48; i -= 48)
    std::pair<std::string const,std::set<unsigned int>>::~pair(v16 + i);
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&a11, a12);
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&a15, a16);
  _Unwind_Resume(a1);
}

void CLMicroLocationWiFiChannelHistogramAnalyzer::histogramFromProtobuf(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void **a3@<X8>)
{
  if (*(_DWORD *)(a1 + 40))
  {
    CLMicroLocationWiFiChannelHistogramAnalyzer::histogramFromProtobuf();
LABEL_32:
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  ValidChannels = (CLMicroLocationProto::Configuration *)CLMicroLocationWiFiChannelHistogramAnalyzer::getValidChannels(a2, &v35);
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6) {
    uint64_t v6 = *(void *)(CLMicroLocationProto::Configuration::default_instance(ValidChannels) + 16);
  }
  uint64_t v7 = *(int *)(v6 + 16);
  if (v7)
  {
    uint64_t v8 = *(const CLMicroLocationProto::ChannelAndCount ***)(v6 + 8);
    uint64_t v9 = &v8[v7];
    do
    {
      CLMicroLocationProto::ChannelAndCount::ChannelAndCount((CLMicroLocationProto::ChannelAndCount *)v32, *v8);
      uint64_t v10 = v36[0];
      if (v36[0])
      {
        unsigned int v11 = v34;
        uint64_t v12 = v36;
        do
        {
          uint64_t v13 = v10;
          long long v14 = v12;
          unsigned int v15 = *((_DWORD *)v10 + 7);
          uint64_t v16 = v10 + 1;
          if (v15 >= v34)
          {
            uint64_t v16 = v13;
            uint64_t v12 = (void **)v13;
          }
          uint64_t v10 = (void *)*v16;
        }
        while (v10);
        if (v12 != v36)
        {
          if (v15 < v34) {
            uint64_t v13 = v14;
          }
          if (v34 >= *((_DWORD *)v13 + 7))
          {
            unsigned int v17 = v33;
            long long v19 = (unsigned int *)a3[1];
            unint64_t v18 = (unint64_t)a3[2];
            if ((unint64_t)v19 >= v18)
            {
              uint64_t v21 = ((char *)v19 - (unsigned char *)*a3) >> 3;
              unint64_t v22 = v21 + 1;
              if ((unint64_t)(v21 + 1) >> 61) {
                goto LABEL_32;
              }
              uint64_t v23 = v18 - (void)*a3;
              if (v23 >> 2 > v22) {
                unint64_t v22 = v23 >> 2;
              }
              if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v24 = v22;
              }
              uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>((uint64_t)(a3 + 2), v24);
              unint64_t v27 = &v25[8 * v21];
              *(_DWORD *)unint64_t v27 = v11;
              *((_DWORD *)v27 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v17;
              uint64_t v29 = (char *)*a3;
              uint64_t v28 = (char *)a3[1];
              uint64_t v30 = v27;
              if (v28 != *a3)
              {
                do
                {
                  uint64_t v31 = *((void *)v28 - 1);
                  v28 -= 8;
                  *((void *)v30 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v31;
                  v30 -= 8;
                }
                while (v28 != v29);
                uint64_t v28 = (char *)*a3;
              }
              uint64_t v20 = v27 + 8;
              *a3 = v30;
              a3[1] = v27 + 8;
              a3[2] = &v25[8 * v26];
              if (v28) {
                operator delete(v28);
              }
            }
            else
            {
              *long long v19 = v34;
              v19[1] = v17;
              uint64_t v20 = v19 + 2;
            }
            a3[1] = v20;
          }
        }
      }
      CLMicroLocationProto::ChannelAndCount::~ChannelAndCount((CLMicroLocationProto::ChannelAndCount *)v32);
      ++v8;
    }
    while (v8 != v9);
  }
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&v35, v36[0]);
}

void sub_256392500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *a15)
{
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&a14, a15);
  unsigned int v17 = *(void **)v15;
  if (*(void *)v15)
  {
    *(void *)(v15 + 8) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,std::set<unsigned int>>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_25()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(void *a1, unsigned int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }
  uint64_t v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (uint64_t result = *v6; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unsigned int v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          unsigned int v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  unsigned int v11 = operator new(0x18uLL);
  *unsigned int v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_DWORD *)v11 + 5) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *unsigned int v11 = *v20;
LABEL_38:
    void *v20 = v11;
    goto LABEL_39;
  }
  *unsigned int v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_2563928DC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(CLMicroLocationWiFiChannelHistogram,CLMicroLocationWiFiChannelHistogram),CLMicroLocationWiFiChannelHistogram*,false>(uint64_t result, char *a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4, char a5)
{
  uint64_t v10 = (char *)result;
LABEL_2:
  unsigned int v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = a2 - v11;
    unint64_t v15 = (a2 - v11) >> 3;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t result = (*a3)(*((void *)a2 - 1), *(void *)v11);
          if (result)
          {
            uint64_t v22 = *(void *)v11;
            *(void *)unsigned int v11 = *((void *)a2 - 1);
            *((void *)a2 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v22;
          }
          break;
        case 3uLL:
          uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CLMicroLocationWiFiChannelHistogram,CLMicroLocationWiFiChannelHistogram),CLMicroLocationWiFiChannelHistogram*>(v11, (void *)v11 + 1, (void *)a2 - 1, (unsigned int (**)(void))a3);
          break;
        case 4uLL:
          uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CLMicroLocationWiFiChannelHistogram,CLMicroLocationWiFiChannelHistogram),CLMicroLocationWiFiChannelHistogram*>(v11, (void *)v11 + 1, (void *)v11 + 2, (void *)a2 - 1, (unsigned int (**)(void))a3);
          break;
        case 5uLL:
          uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CLMicroLocationWiFiChannelHistogram,CLMicroLocationWiFiChannelHistogram),CLMicroLocationWiFiChannelHistogram*>(v11, (void *)v11 + 1, (void *)v11 + 2, (void *)v11 + 3, (void *)a2 - 1, (unsigned int (**)(void))a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 191) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CLMicroLocationWiFiChannelHistogram,CLMicroLocationWiFiChannelHistogram),CLMicroLocationWiFiChannelHistogram*,CLMicroLocationWiFiChannelHistogram*>(v11, a2, (uint64_t *)a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    unint64_t v17 = &v11[8 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CLMicroLocationWiFiChannelHistogram,CLMicroLocationWiFiChannelHistogram),CLMicroLocationWiFiChannelHistogram*>(v11, &v11[8 * (v15 >> 1)], (void *)a2 - 1, (unsigned int (**)(void))a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CLMicroLocationWiFiChannelHistogram,CLMicroLocationWiFiChannelHistogram),CLMicroLocationWiFiChannelHistogram*>((void *)v11 + 1, (void *)v17 - 1, (void *)a2 - 2, (unsigned int (**)(void))a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CLMicroLocationWiFiChannelHistogram,CLMicroLocationWiFiChannelHistogram),CLMicroLocationWiFiChannelHistogram*>((void *)v11 + 2, &v11[8 * v16 + 8], (void *)a2 - 3, (unsigned int (**)(void))a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CLMicroLocationWiFiChannelHistogram,CLMicroLocationWiFiChannelHistogram),CLMicroLocationWiFiChannelHistogram*>((void *)v17 - 1, v17, &v11[8 * v16 + 8], (unsigned int (**)(void))a3);
      uint64_t v18 = *(void *)v11;
      *(void *)unsigned int v11 = *(void *)v17;
      *(void *)unint64_t v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CLMicroLocationWiFiChannelHistogram,CLMicroLocationWiFiChannelHistogram),CLMicroLocationWiFiChannelHistogram*>(&v11[8 * (v15 >> 1)], v11, (void *)a2 - 1, (unsigned int (**)(void))a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (((*a3)(*((void *)v11 - 1), *(void *)v11) & 1) == 0)
    {
      uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationWiFiChannelHistogram *,BOOL (*&)(CLMicroLocationWiFiChannelHistogram,CLMicroLocationWiFiChannelHistogram)>((uint64_t *)v11, (uint64_t *)a2, a3);
      unsigned int v11 = (char *)result;
      goto LABEL_19;
    }
LABEL_14:
    uint64_t v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationWiFiChannelHistogram *,BOOL (*&)(CLMicroLocationWiFiChannelHistogram,CLMicroLocationWiFiChannelHistogram)>((uint64_t *)v11, (uint64_t *)a2, a3);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CLMicroLocationWiFiChannelHistogram,CLMicroLocationWiFiChannelHistogram),CLMicroLocationWiFiChannelHistogram*>(v11, v19, (unsigned int (**)(void))a3);
    unsigned int v11 = (char *)(v19 + 1);
    uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CLMicroLocationWiFiChannelHistogram,CLMicroLocationWiFiChannelHistogram),CLMicroLocationWiFiChannelHistogram*>(v19 + 1, a2, (unsigned int (**)(void))a3);
    if (result)
    {
      a4 = -v13;
      a2 = (char *)v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      uint64_t result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(CLMicroLocationWiFiChannelHistogram,CLMicroLocationWiFiChannelHistogram),CLMicroLocationWiFiChannelHistogram*,false>(v10, v19, a3, -v13, a5 & 1);
      unsigned int v11 = (char *)(v19 + 1);
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CLMicroLocationWiFiChannelHistogram,CLMicroLocationWiFiChannelHistogram),CLMicroLocationWiFiChannelHistogram*>((uint64_t)v11, (uint64_t *)a2, a3);
  }
  else
  {
    return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CLMicroLocationWiFiChannelHistogram,CLMicroLocationWiFiChannelHistogram),CLMicroLocationWiFiChannelHistogram*>((uint64_t)v11, a2, a3);
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CLMicroLocationWiFiChannelHistogram,CLMicroLocationWiFiChannelHistogram),CLMicroLocationWiFiChannelHistogram*>(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  if ((uint64_t *)result != a2)
  {
    unint64_t v4 = (void *)result;
    char v5 = (uint64_t *)(result + 8);
    if ((uint64_t *)(result + 8) != a2)
    {
      uint64_t v7 = 0;
      unint64_t v8 = (uint64_t *)result;
      do
      {
        uint64_t v10 = *v8;
        uint64_t v9 = v8[1];
        unint64_t v8 = v5;
        uint64_t result = (*a3)(v9, v10);
        if (result)
        {
          uint64_t v11 = *v8;
          uint64_t v12 = v7;
          while (1)
          {
            *(void *)((char *)v4 + v12 + 8) = *(void *)((char *)v4 + v12);
            if (!v12) {
              break;
            }
            uint64_t result = (*a3)(v11, *(void *)((char *)v4 + v12 - 8));
            v12 -= 8;
            if ((result & 1) == 0)
            {
              uint64_t v13 = (void *)((char *)v4 + v12 + 8);
              goto LABEL_10;
            }
          }
          uint64_t v13 = v4;
LABEL_10:
          *uint64_t v13 = v11;
        }
        char v5 = v8 + 1;
        v7 += 8;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CLMicroLocationWiFiChannelHistogram,CLMicroLocationWiFiChannelHistogram),CLMicroLocationWiFiChannelHistogram*>(uint64_t result, void *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  if ((void *)result != a2)
  {
    unint64_t v4 = (void *)result;
    for (uint64_t i = (void *)(result + 8); v4 + 1 != a2; uint64_t i = v4 + 1)
    {
      uint64_t v8 = *v4;
      uint64_t v7 = v4[1];
      unint64_t v4 = i;
      uint64_t result = (*a3)(v7, v8);
      if (result)
      {
        uint64_t v9 = *v4;
        uint64_t v10 = v4;
        do
        {
          uint64_t v11 = v10;
          uint64_t v12 = *--v10;
          *uint64_t v11 = v12;
          uint64_t result = (*a3)(v9, *(v11 - 2));
        }
        while ((result & 1) != 0);
        *uint64_t v10 = v9;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CLMicroLocationWiFiChannelHistogram,CLMicroLocationWiFiChannelHistogram),CLMicroLocationWiFiChannelHistogram*>(void *a1, void *a2, void *a3, unsigned int (**a4)(void))
{
  char v8 = ((uint64_t (*)(void, void))*a4)(*a2, *a1);
  uint64_t result = ((uint64_t (*)(void, void))*a4)(*a3, *a2);
  if ((v8 & 1) == 0)
  {
    if (!result) {
      return result;
    }
    uint64_t v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    if (!((unsigned int (*)(void, void))*a4)(*a2, *a1)) {
      return 1;
    }
    uint64_t v12 = *a1;
    *a1 = *a2;
    *a2 = v12;
    return 2;
  }
  uint64_t v10 = *a1;
  if (!result)
  {
    *a1 = *a2;
    *a2 = v10;
    if (!(*a4)(*a3)) {
      return 1;
    }
    uint64_t v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    return 2;
  }
  *a1 = *a3;
  *a3 = v10;
  return 1;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationWiFiChannelHistogram *,BOOL (*&)(CLMicroLocationWiFiChannelHistogram,CLMicroLocationWiFiChannelHistogram)>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  unint64_t v4 = a2;
  uint64_t v6 = *a1;
  if ((*a3)(*a1, *(a2 - 1)))
  {
    uint64_t v7 = a1;
    do
    {
      uint64_t v8 = v7[1];
      ++v7;
    }
    while (((*a3)(v6, v8) & 1) == 0);
  }
  else
  {
    uint64_t v9 = a1 + 1;
    do
    {
      uint64_t v7 = v9;
      if (v9 >= v4) {
        break;
      }
      ++v9;
    }
    while (!(*a3)(v6, *v7));
  }
  if (v7 < v4)
  {
    do
      uint64_t v10 = *--v4;
    while (((*a3)(v6, v10) & 1) != 0);
  }
  while (v7 < v4)
  {
    uint64_t v11 = *v7;
    uint64_t *v7 = *v4;
    uint64_t *v4 = v11;
    do
    {
      uint64_t v12 = v7[1];
      ++v7;
    }
    while (!(*a3)(v6, v12));
    do
      uint64_t v13 = *--v4;
    while (((*a3)(v6, v13) & 1) != 0);
  }
  if (v7 - 1 != a1) {
    *a1 = *(v7 - 1);
  }
  *(v7 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v6;
  return v7;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationWiFiChannelHistogram *,BOOL (*&)(CLMicroLocationWiFiChannelHistogram,CLMicroLocationWiFiChannelHistogram)>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v6 = 0;
  uint64_t v7 = *a1;
  do
    char v8 = (*a3)(a1[++v6], v7);
  while ((v8 & 1) != 0);
  uint64_t v9 = &a1[v6];
  uint64_t v10 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v9 >= a2) {
        break;
      }
      uint64_t v12 = *--a2;
    }
    while (((*a3)(v12, v7) & 1) == 0);
  }
  else
  {
    do
      uint64_t v11 = *--a2;
    while (!(*a3)(v11, v7));
  }
  if (v9 < a2)
  {
    uint64_t v13 = &a1[v6];
    uint64_t v14 = a2;
    do
    {
      uint64_t v15 = *v13;
      *uint64_t v13 = *v14;
      *uint64_t v14 = v15;
      do
      {
        uint64_t v16 = v13[1];
        ++v13;
      }
      while (((*a3)(v16, v7) & 1) != 0);
      do
        uint64_t v17 = *--v14;
      while (!(*a3)(v17, v7));
    }
    while (v13 < v14);
    uint64_t v10 = v13 - 1;
  }
  if (v10 != a1) {
    *a1 = *v10;
  }
  *uint64_t v10 = v7;
  return v10;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CLMicroLocationWiFiChannelHistogram,CLMicroLocationWiFiChannelHistogram),CLMicroLocationWiFiChannelHistogram*>(void *a1, void *a2, unsigned int (**a3)(void))
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((unsigned int (*)(void, void))*a3)(*(a2 - 1), *a1))
      {
        uint64_t v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CLMicroLocationWiFiChannelHistogram,CLMicroLocationWiFiChannelHistogram),CLMicroLocationWiFiChannelHistogram*>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CLMicroLocationWiFiChannelHistogram,CLMicroLocationWiFiChannelHistogram),CLMicroLocationWiFiChannelHistogram*>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CLMicroLocationWiFiChannelHistogram,CLMicroLocationWiFiChannelHistogram),CLMicroLocationWiFiChannelHistogram*>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v9 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CLMicroLocationWiFiChannelHistogram,CLMicroLocationWiFiChannelHistogram),CLMicroLocationWiFiChannelHistogram*>(a1, a1 + 1, a1 + 2, a3);
      uint64_t v10 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if (((unsigned int (*)(void, void))*a3)(*v10, *v9))
    {
      uint64_t v13 = *v10;
      uint64_t v14 = v11;
      while (1)
      {
        uint64_t v15 = (char *)a1 + v14;
        *(void *)((char *)a1 + v14 + 24) = *(void *)((char *)a1 + v14 + 16);
        if (v14 == -16) {
          break;
        }
        v14 -= 8;
        if ((((uint64_t (*)(uint64_t, void))*a3)(v13, *((void *)v15 + 1)) & 1) == 0)
        {
          uint64_t v16 = (void *)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      uint64_t v16 = a1;
LABEL_12:
      *uint64_t v16 = v13;
      if (++v12 == 8) {
        return v10 + 1 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 8;
    if (++v10 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CLMicroLocationWiFiChannelHistogram,CLMicroLocationWiFiChannelHistogram),CLMicroLocationWiFiChannelHistogram*>(void *a1, void *a2, void *a3, void *a4, unsigned int (**a5)(void))
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CLMicroLocationWiFiChannelHistogram,CLMicroLocationWiFiChannelHistogram),CLMicroLocationWiFiChannelHistogram*>(a1, a2, a3, a5);
  uint64_t result = ((uint64_t (*)(void, void))*a5)(*a4, *a3);
  if (result)
  {
    uint64_t v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    uint64_t result = ((uint64_t (*)(void, void))*a5)(*a3, *a2);
    if (result)
    {
      uint64_t v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      uint64_t result = ((uint64_t (*)(void, void))*a5)(*a2, *a1);
      if (result)
      {
        uint64_t v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CLMicroLocationWiFiChannelHistogram,CLMicroLocationWiFiChannelHistogram),CLMicroLocationWiFiChannelHistogram*>(void *a1, void *a2, void *a3, void *a4, void *a5, unsigned int (**a6)(void))
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CLMicroLocationWiFiChannelHistogram,CLMicroLocationWiFiChannelHistogram),CLMicroLocationWiFiChannelHistogram*>(a1, a2, a3, a4, a6);
  uint64_t result = ((uint64_t (*)(void, void))*a6)(*a5, *a4);
  if (result)
  {
    uint64_t v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    uint64_t result = ((uint64_t (*)(void, void))*a6)(*a4, *a3);
    if (result)
    {
      uint64_t v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      uint64_t result = ((uint64_t (*)(void, void))*a6)(*a3, *a2);
      if (result)
      {
        uint64_t v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        uint64_t result = ((uint64_t (*)(void, void))*a6)(*a2, *a1);
        if (result)
        {
          uint64_t v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CLMicroLocationWiFiChannelHistogram,CLMicroLocationWiFiChannelHistogram),CLMicroLocationWiFiChannelHistogram*,CLMicroLocationWiFiChannelHistogram*>(char *a1, char *a2, uint64_t *a3, uint64_t (**a4)(uint64_t, uint64_t))
{
  if (a1 != a2)
  {
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) >> 3;
    if (a2 - a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[8 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CLMicroLocationWiFiChannelHistogram,CLMicroLocationWiFiChannelHistogram),CLMicroLocationWiFiChannelHistogram*>((uint64_t)a1, (unsigned int (**)(void, void))a4, v9, v12);
        v12 -= 8;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != (char *)a3)
    {
      uint64_t v14 = (uint64_t *)a2;
      do
      {
        if ((*a4)(*v14, *(void *)a1))
        {
          uint64_t v15 = *v14;
          *uint64_t v14 = *(void *)a1;
          *(void *)a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CLMicroLocationWiFiChannelHistogram,CLMicroLocationWiFiChannelHistogram),CLMicroLocationWiFiChannelHistogram*>((uint64_t)a1, (unsigned int (**)(void, void))a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      uint64_t v13 = (char *)a3;
    }
    if (v8 >= 9)
    {
      uint64_t v16 = (unint64_t)v8 >> 3;
      uint64_t v17 = a2 - 8;
      do
      {
        uint64_t v18 = *(void *)a1;
        uint64_t v19 = (char *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CLMicroLocationWiFiChannelHistogram,CLMicroLocationWiFiChannelHistogram),CLMicroLocationWiFiChannelHistogram*>(a1, (unsigned int (**)(void, void))a4, v16);
        if (v17 == v19)
        {
          *(void *)uint64_t v19 = v18;
        }
        else
        {
          *(void *)uint64_t v19 = *(void *)v17;
          *(void *)uint64_t v17 = v18;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CLMicroLocationWiFiChannelHistogram,CLMicroLocationWiFiChannelHistogram),CLMicroLocationWiFiChannelHistogram*>((uint64_t)a1, (uint64_t)(v19 + 8), a4, (v19 + 8 - a1) >> 3);
        }
        v17 -= 8;
      }
      while (v16-- > 2);
    }
    return (uint64_t *)v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CLMicroLocationWiFiChannelHistogram,CLMicroLocationWiFiChannelHistogram),CLMicroLocationWiFiChannelHistogram*>(uint64_t result, unsigned int (**a2)(void, void), uint64_t a3, void *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    char v5 = a4;
    uint64_t v6 = result;
    int64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v10 = ((uint64_t)a4 - result) >> 2;
      uint64_t v11 = v10 + 1;
      uint64_t v12 = (void *)(result + 8 * (v10 + 1));
      uint64_t v13 = v10 + 2;
      if (v10 + 2 < a3 && (*a2)(*v12, v12[1]))
      {
        ++v12;
        uint64_t v11 = v13;
      }
      uint64_t result = ((uint64_t (*)(void, void))*a2)(*v12, *v5);
      if ((result & 1) == 0)
      {
        uint64_t v14 = *v5;
        do
        {
          uint64_t v15 = v12;
          void *v5 = *v12;
          if (v7 < v11) {
            break;
          }
          uint64_t v16 = (2 * v11) | 1;
          uint64_t v12 = (void *)(v6 + 8 * v16);
          if (2 * v11 + 2 < a3)
          {
            if ((*a2)(*v12, v12[1]))
            {
              ++v12;
              uint64_t v16 = 2 * v11 + 2;
            }
          }
          uint64_t result = ((uint64_t (*)(void, uint64_t))*a2)(*v12, v14);
          char v5 = v15;
          uint64_t v11 = v16;
        }
        while (!result);
        void *v15 = v14;
      }
    }
  }
  return result;
}

void *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CLMicroLocationWiFiChannelHistogram,CLMicroLocationWiFiChannelHistogram),CLMicroLocationWiFiChannelHistogram*>(void *a1, unsigned int (**a2)(void, void), uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = &a1[v6 + 1];
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)(a1[v6 + 1], a1[v6 + 2]))
    {
      ++v9;
      uint64_t v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CLMicroLocationWiFiChannelHistogram,CLMicroLocationWiFiChannelHistogram),CLMicroLocationWiFiChannelHistogram*>(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v6 = result;
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = (uint64_t *)(result + 8 * (v4 >> 1));
    uint64_t v9 = (uint64_t *)(a2 - 8);
    uint64_t result = (*a3)(*v8, *(void *)(a2 - 8));
    if (result)
    {
      uint64_t v10 = *v9;
      do
      {
        uint64_t v11 = v8;
        uint64_t *v9 = *v8;
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = (uint64_t *)(v6 + 8 * v7);
        uint64_t result = (*a3)(*v8, v10);
        uint64_t v9 = v11;
      }
      while ((result & 1) != 0);
      *uint64_t v11 = v10;
    }
  }
  return result;
}

uint64_t std::unordered_map<std::string,std::set<unsigned int>>::unordered_map(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 48 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,std::set<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<unsigned int>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::set<unsigned int>> const&>(a1, a2, (long long *)a2);
      a2 += 48;
      v5 -= 48;
    }
    while (v5);
  }
  return a1;
}

void sub_2563938C8(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::set<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<unsigned int>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::set<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<unsigned int>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::set<unsigned int>> const&>(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  unint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::set<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<unsigned int>>>>::__construct_node_hash<std::pair<std::string const,std::set<unsigned int>> const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *uint64_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::set<unsigned int>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::set<unsigned int>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_256393B48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::set<unsigned int>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::set<unsigned int>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::set<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<unsigned int>>>>::__construct_node_hash<std::pair<std::string const,std::set<unsigned int>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = a2;
  uint64_t result = std::pair<std::string const,std::set<unsigned int>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_256393BC0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::set<unsigned int>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::set<unsigned int>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::set<unsigned int>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::set<unsigned int>::set[abi:ne180100]((uint64_t *)&this[1], (uint64_t)a2 + 24);
  return this;
}

void sub_256393C34(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::set<unsigned int>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::set<unsigned int>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  int8x8_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<unsigned int>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<unsigned int>>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy(a1 + 24, *(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
  {
    int8x8_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::set<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<unsigned int>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::set<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<unsigned int>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  int8x8_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::set<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<unsigned int>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    int8x8_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<unsigned int>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      int8x8_t v2 = v3;
    }
    while (v3);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::set<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<unsigned int>>>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  unint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint8x8_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v6 == v13)
      {
        if (std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      uint8x8_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t *std::set<unsigned int>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<unsigned int>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>(a1, *(unsigned int **)a2, (unsigned int *)(a2 + 8));
  return a1;
}

void sub_256393EC0(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<unsigned int>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>(uint64_t *result, unsigned int *a2, unsigned int *a3)
{
  if (a2 != a3)
  {
    unint64_t v4 = a2;
    int8x8_t v5 = (uint64_t **)result;
    unint64_t v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>(v5, v6, v4 + 7, v4 + 7);
      uint8x8_t v7 = (unsigned int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          unint64_t v8 = v7;
          uint8x8_t v7 = *(unsigned int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v8 = (unsigned int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          unint64_t v4 = v8;
        }
        while (!v9);
      }
      unint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

void sub_2563945A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_256394E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
}

uint64_t CLMicroLocationRapportTable::Entry::Entry(uint64_t a1, long long *a2, CLMicroLocationProto::RapportDevice *a3, _OWORD *a4, void *a5)
{
  *(void *)a1 = *a5;
  long long v7 = *a2;
  *(void *)(a1 + 24) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v7;
  *((void *)a2 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  CLMicroLocationProto::RapportDevice::RapportDevice((CLMicroLocationProto::RapportDevice *)(a1 + 32), a3);
  *(_OWORD *)(a1 + 64) = *a4;
  return a1;
}

void sub_25639509C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ULSettings::get<ULSettings::LogOdometryAnalyticsEnabled>()
{
  os_log_t v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  int8x8_t v2 = [NSString stringWithUTF8String:"ULLogOdometryAnalyticsEnabled"];
  unint64_t v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 BOOLValue];
  }
  else {
    uint64_t v4 = [MEMORY[0x263EFFA88] BOOLValue];
  }
  uint64_t v5 = v4;

  return v5;
}

void sub_256395240(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256395344(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256395418(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2563955A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)ULHomeSlamAnalytics;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_256395960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_256395A90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  unint64_t v19 = v17;
  objc_destroyWeak(v18);

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_256395B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_256395BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_256395D48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256395F70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_26()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

uint64_t CLMiLoLoiTable::Entry::Entry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, double a7)
{
  *(double *)a1 = a7;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a4;
  *(void *)(a1 + 32) = a5;
  unint64_t v8 = (std::string *)(a1 + 40);
  if (*((char *)a6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a6, *((void *)a6 + 1));
  }
  else
  {
    long long v9 = *a6;
    v8->__r_.__value_.__r.__words[2] = *((void *)a6 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  return a1;
}

void sub_25639618C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ULDBUtils::insertEntries<CLMicroLocationConfigurationTable,ULConfigurationMO>(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2020000000;
  char v15 = 0;
  uint64_t v4 = [v3 managedObjectContext];
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 3221225472;
  v8[2] = ___ZN9ULDBUtils13insertEntriesI33CLMicroLocationConfigurationTable17ULConfigurationMOEEbP7ULStoreRKNSt3__16vectorINT_5EntryENS5_9allocatorIS8_EEEE_block_invoke;
  void v8[3] = &unk_2653F90B8;
  uint64_t v11 = a2;
  id v5 = v3;
  id v9 = v5;
  uint64_t v10 = &v12;
  [v4 performBlockAndWait:v8];

  uint64_t v6 = *((unsigned __int8 *)v13 + 24);
  _Block_object_dispose(&v12, 8);

  return v6;
}

void sub_2563962CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ULDBUtils::fetchEntries<CLMicroLocationConfigurationTable,ULConfigurationMO>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  uint64_t v23 = 0;
  unint64_t v24 = &v23;
  uint64_t v25 = 0x4812000000;
  uint64_t v26 = __Block_byref_object_copy__7;
  unint64_t v27 = __Block_byref_object_dispose__7;
  uint64_t v28 = &unk_25654E519;
  memset(v29, 0, sizeof(v29));
  uint64_t v12 = [v9 managedObjectContext];
  v17[0] = MEMORY[0x263EF8330];
  v17[1] = 3221225472;
  void v17[2] = ___ZN9ULDBUtils12fetchEntriesI33CLMicroLocationConfigurationTable17ULConfigurationMOEENSt3__16vectorINT_5EntryENS3_9allocatorIS6_EEEEP7ULStoreP7NSArrayIP11NSPredicateEPSC_IP16NSSortDescriptorEm_block_invoke;
  void v17[3] = &unk_2653F90E0;
  id v13 = v10;
  id v18 = v13;
  id v14 = v11;
  id v19 = v14;
  uint64_t v22 = a4;
  id v15 = v9;
  id v20 = v15;
  size_t v21 = &v23;
  [v12 performBlockAndWait:v17];

  float v16 = v24;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  std::vector<CLMicroLocationConfigurationTable::Entry>::__init_with_size[abi:ne180100]<CLMicroLocationConfigurationTable::Entry*,CLMicroLocationConfigurationTable::Entry*>(a5, v16[6], v16[7], 0x6DB6DB6DB6DB6DB7 * ((v16[7] - v16[6]) >> 4));

  _Block_object_dispose(&v23, 8);
  uint64_t v30 = (void **)v29;
  std::vector<CLMicroLocationConfigurationTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v30);
}

void sub_2563964C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, void *a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);

  _Block_object_dispose(va, 8);
  *(void *)(v14 - 96) = v13;
  std::vector<CLMicroLocationConfigurationTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 96));

  _Unwind_Resume(a1);
}

void ULDBUtils::fetchAllWithLimit<CLMicroLocationConfigurationTable,ULConfigurationMO>(void *a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  v10[1] = *MEMORY[0x263EF8340];
  id v5 = a1;
  uint64_t v6 = (void *)MEMORY[0x263F08B30];
  long long v7 = [(id)objc_opt_class() defaultSortProperty];
  unint64_t v8 = [v6 sortDescriptorWithKey:v7 ascending:0];

  v10[0] = v8;
  id v9 = [MEMORY[0x263EFF8C0] arrayWithObjects:v10 count:1];
  ULDBUtils::fetchEntries<CLMicroLocationConfigurationTable,ULConfigurationMO>(v5, 0, v9, a2, a3);
}

void sub_256396628(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256396930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a13;
  std::vector<CLMicroLocationConfigurationTable::Entry>::__destroy_vector::operator()[abi:ne180100](&a16);

  _Unwind_Resume(a1);
}

void sub_256396A78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_256396B38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a16)
  {
    if (a15 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_256396CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a11;
  std::vector<CLMicroLocationConfigurationTable::Entry>::__destroy_vector::operator()[abi:ne180100](&a14);

  _Unwind_Resume(a1);
}

void sub_256396E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a19)
  {
    if (a18 < 0) {
      operator delete(__p);
    }
  }
  -[ULConfigurationStore fetchMostRecentClusterAnchorValueStatisticsForLOIType:](v19, (uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_256396F2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a16)
  {
    if (a15 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_2563970E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id a19, id a20)
{
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v23);

  _Block_object_dispose(&a10, 8);
  _Unwind_Resume(a1);
}

void sub_256397244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_25639757C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);

  _Block_object_dispose(va, 8);
  *(void *)(v19 - 112) = v17;
  std::vector<CLMicroLocationConfigurationTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 112));

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__7(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__7(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  std::vector<CLMicroLocationConfigurationTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void sub_256397830(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ULDBUtils::convertManagedObjectsToEntries<CLMicroLocationConfigurationTable,ULConfigurationMO>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  id v3 = a1;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  std::vector<CLMicroLocationConfigurationTable::Entry>::reserve(a2, [v3 count]);
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v4 = v3;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v20 objects:v32 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v21;
    while (2)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v21 != v6) {
          objc_enumerationMutation(v4);
        }
        id v8 = *(id *)(*((void *)&v20 + 1) + 8 * i);
        id v9 = v8;
        if (!v8)
        {
          uint64_t v31 = 0;
          memset(v30, 0, sizeof(v30));
LABEL_16:
          if (onceToken_MicroLocation_Default != -1) {
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_35);
          }
          uint64_t v12 = (id)logObject_MicroLocation_Default;
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            uint64_t v13 = [v9 entity];
            uint64_t v14 = [v13 name];
            *(_DWORD *)uint64_t buf = 68289283;
            int v25 = 0;
            __int16 v26 = 2082;
            unint64_t v27 = "";
            __int16 v28 = 2113;
            uint64_t v29 = v14;
            _os_log_impl(&dword_25631F000, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to convert MO to entry\", \"MO\":%{private, location:escape_only}@}", buf, 0x1Cu);
          }
          if (onceToken_MicroLocation_Default != -1) {
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_35);
          }
          id v15 = (id)logObject_MicroLocation_Default;
          if (os_signpost_enabled(v15))
          {
            float v16 = [v9 entity];
            uint64_t v17 = [v16 name];
            *(_DWORD *)uint64_t buf = 68289283;
            int v25 = 0;
            __int16 v26 = 2082;
            unint64_t v27 = "";
            __int16 v28 = 2113;
            uint64_t v29 = v17;
            _os_signpost_emit_with_name_impl(&dword_25631F000, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to convert MO to entry", "{\"msg%{public}.0s\":\"Failed to convert MO to entry\", \"MO\":%{private, location:escape_only}@}", buf, 0x1Cu);
          }
          std::__optional_destruct_base<CLMicroLocationConfigurationTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v30);

          uint64_t v19 = *a2;
          for (uint64_t j = a2[1];
                j != v19;
                std::allocator<CLMicroLocationConfigurationTable::Entry>::destroy[abi:ne180100]((uint64_t)(a2 + 2), j))
          {
            j -= 112;
          }
          a2[1] = v19;
          goto LABEL_28;
        }
        objc_msgSend(v8, "convertToEntry", (void)v20);
        if (!(_BYTE)v31) {
          goto LABEL_16;
        }
        unint64_t v10 = a2[1];
        if (v10 >= a2[2])
        {
          uint64_t v11 = std::vector<CLMicroLocationConfigurationTable::Entry>::__push_back_slow_path<CLMicroLocationConfigurationTable::Entry>(a2, (uint64_t)v30);
        }
        else
        {
          std::allocator<CLMicroLocationConfigurationTable::Entry>::construct[abi:ne180100]<CLMicroLocationConfigurationTable::Entry,CLMicroLocationConfigurationTable::Entry>((uint64_t)(a2 + 2), a2[1], (uint64_t)v30);
          uint64_t v11 = v10 + 112;
          a2[1] = v10 + 112;
        }
        a2[1] = v11;
        std::__optional_destruct_base<CLMicroLocationConfigurationTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v30);
      }
      uint64_t v5 = [v4 countByEnumeratingWithState:&v20 objects:v32 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }

LABEL_28:
}

void sub_256397BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);

  std::__optional_destruct_base<CLMicroLocationConfigurationTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  std::vector<CLMicroLocationConfigurationTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)va);

  _Unwind_Resume(a1);
}

void sub_256397E34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<CLMicroLocationConfigurationTable::Entry,false>::__optional_destruct_base[abi:ne180100]<CLMicroLocationConfigurationTable::Entry>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  long long v3 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v3;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v4;
  CLMicroLocationProto::Configuration::Configuration((CLMicroLocationProto::Configuration *)(a1 + 56), (const CLMicroLocationProto::Configuration *)(a2 + 56));
  *(unsigned char *)(a1 + 112) = 1;
  return a1;
}

void sub_256397F14(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN9ULDBUtils13insertEntriesI33CLMicroLocationConfigurationTable17ULConfigurationMOEEbP7ULStoreRKNSt3__16vectorINT_5EntryENS5_9allocatorIS8_EEEE_block_invoke(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  int8x8_t v2 = *(uint64_t **)(a1 + 48);
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  if (*v2 == v4)
  {
LABEL_4:
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [*(id *)(a1 + 32) commitChangesToStore];
    long long v7 = *(void **)(a1 + 32);
    [v7 deleteOldestRecordsIfFull];
  }
  else
  {
    while (1)
    {
      uint64_t v5 = [*(id *)(a1 + 32) managedObjectContext];
      uint64_t v6 = +[ULConfigurationMO createFromEntry:v3 inManagedObjectContext:v5];

      if (!v6) {
        break;
      }

      v3 += 112;
      if (v3 == v4) {
        goto LABEL_4;
      }
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_35);
    }
    id v8 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      id v9 = +[ULConfigurationMO entity];
      unint64_t v10 = [v9 name];
      int v15 = 68289283;
      int v16 = 0;
      __int16 v17 = 2082;
      id v18 = "";
      __int16 v19 = 2113;
      long long v20 = v10;
      _os_log_impl(&dword_25631F000, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to create entry from MO\", \"MO\":%{private, location:escape_only}@}", (uint8_t *)&v15, 0x1Cu);
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_35);
    }
    uint64_t v11 = (id)logObject_MicroLocation_Default;
    if (os_signpost_enabled(v11))
    {
      uint64_t v12 = +[ULConfigurationMO entity];
      uint64_t v13 = [v12 name];
      int v15 = 68289283;
      int v16 = 0;
      __int16 v17 = 2082;
      id v18 = "";
      __int16 v19 = 2113;
      long long v20 = v13;
      _os_signpost_emit_with_name_impl(&dword_25631F000, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to create entry from MO", "{\"msg%{public}.0s\":\"Failed to create entry from MO\", \"MO\":%{private, location:escape_only}@}", (uint8_t *)&v15, 0x1Cu);
    }
    uint64_t v14 = [*(id *)(a1 + 32) managedObjectContext];
    [v14 reset];
  }
}

void sub_2563981F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_27()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

void ___ZN9ULDBUtils12fetchEntriesI33CLMicroLocationConfigurationTable17ULConfigurationMOEENSt3__16vectorINT_5EntryENS3_9allocatorIS6_EEEEP7ULStoreP7NSArrayIP11NSPredicateEPSC_IP16NSSortDescriptorEm_block_invoke(uint64_t a1)
{
  int8x8_t v2 = *(void **)(a1 + 48);
  uint64_t v3 = (objc_class *)objc_opt_class();
  uint64_t v4 = NSStringFromClass(v3);
  uint64_t v5 = [v2 fetchManagedObjectsWithEntityName:v4 byAndPredicates:*(void *)(a1 + 32) sortDescriptors:*(void *)(a1 + 40) andLimit:*(void *)(a1 + 64)];

  ULDBUtils::convertManagedObjectsToEntries<CLMicroLocationConfigurationTable,ULConfigurationMO>(v5, (uint64_t *)&v8);
  uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8);
  std::vector<CLMicroLocationConfigurationTable::Entry>::__vdeallocate((void **)(v6 + 48));
  *(_OWORD *)(v6 + 48) = v8;
  *(void *)(v6 + 64) = v9;
  uint64_t v9 = 0;
  long long v8 = 0uLL;
  unint64_t v10 = (void **)&v8;
  std::vector<CLMicroLocationConfigurationTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v10);
  long long v7 = [*(id *)(a1 + 48) managedObjectContext];
  [v7 reset];
}

void sub_256398354(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<CLMicroLocationConfigurationTable::Entry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  int8x8_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 112;
        std::allocator<CLMicroLocationConfigurationTable::Entry>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<CLMicroLocationConfigurationTable::Entry>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  CLMicroLocationProto::Configuration::~Configuration((CLMicroLocationProto::Configuration *)(a2 + 56));
  if (*(char *)(a2 + 31) < 0)
  {
    uint64_t v3 = *(void **)(a2 + 8);
    operator delete(v3);
  }
}

void **std::vector<CLMicroLocationConfigurationTable::Entry>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  __n128 result = (void **)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x24924924924924ALL) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationConfigurationTable::Entry>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    void v7[3] = (char *)v7[0] + 112 * v6;
    std::vector<CLMicroLocationConfigurationTable::Entry>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<CLMicroLocationConfigurationTable::Entry>::~__split_buffer(v7);
  }
  return result;
}

void sub_256398514(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMicroLocationConfigurationTable::Entry>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMicroLocationConfigurationTable::Entry>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationConfigurationTable::Entry>,std::reverse_iterator<CLMicroLocationConfigurationTable::Entry*>,std::reverse_iterator<CLMicroLocationConfigurationTable::Entry*>,std::reverse_iterator<CLMicroLocationConfigurationTable::Entry*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationConfigurationTable::Entry>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x24924924924924ALL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(112 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationConfigurationTable::Entry>,std::reverse_iterator<CLMicroLocationConfigurationTable::Entry*>,std::reverse_iterator<CLMicroLocationConfigurationTable::Entry*>,std::reverse_iterator<CLMicroLocationConfigurationTable::Entry*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  _DWORD v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 112;
      std::allocator<CLMicroLocationConfigurationTable::Entry>::construct[abi:ne180100]<CLMicroLocationConfigurationTable::Entry,CLMicroLocationConfigurationTable::Entry const&>(a1, v7 - 112, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 112;
      *((void *)&v16 + 1) -= 112;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationConfigurationTable::Entry>,std::reverse_iterator<CLMicroLocationConfigurationTable::Entry*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

void sub_2563986A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::allocator<CLMicroLocationConfigurationTable::Entry>::construct[abi:ne180100]<CLMicroLocationConfigurationTable::Entry,CLMicroLocationConfigurationTable::Entry const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = *(void *)a3;
  uint64_t v5 = (std::string *)(a2 + 8);
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)(a3 + 8);
    *(void *)(a2 + 24) = *(void *)(a3 + 24);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  long long v7 = *(_OWORD *)(a3 + 32);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 32) = v7;
  return CLMicroLocationProto::Configuration::Configuration((CLMicroLocationProto::Configuration *)(a2 + 56), (const CLMicroLocationProto::Configuration *)(a3 + 56));
}

void sub_256398738(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationConfigurationTable::Entry>,std::reverse_iterator<CLMicroLocationConfigurationTable::Entry*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationConfigurationTable::Entry>,std::reverse_iterator<CLMicroLocationConfigurationTable::Entry*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationConfigurationTable::Entry>,std::reverse_iterator<CLMicroLocationConfigurationTable::Entry*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<CLMicroLocationConfigurationTable::Entry>::destroy[abi:ne180100](v3, v1);
      v1 += 112;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<CLMicroLocationConfigurationTable::Entry>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<CLMicroLocationConfigurationTable::Entry>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 112;
    std::allocator<CLMicroLocationConfigurationTable::Entry>::destroy[abi:ne180100](v4, i - 112);
  }
}

uint64_t std::vector<CLMicroLocationConfigurationTable::Entry>::__push_back_slow_path<CLMicroLocationConfigurationTable::Entry>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x249249249249249) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 4);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 4)) >= 0x124924924924924) {
    unint64_t v6 = 0x249249249249249;
  }
  else {
    unint64_t v6 = v4;
  }
  char v14 = a1 + 2;
  if (v6) {
    long long v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationConfigurationTable::Entry>>((uint64_t)(a1 + 2), v6);
  }
  else {
    long long v7 = 0;
  }
  unint64_t v10 = v7;
  uint64_t v11 = &v7[112 * v3];
  uint64_t v13 = &v7[112 * v6];
  std::allocator<CLMicroLocationConfigurationTable::Entry>::construct[abi:ne180100]<CLMicroLocationConfigurationTable::Entry,CLMicroLocationConfigurationTable::Entry>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  uint64_t v12 = v11 + 112;
  std::vector<CLMicroLocationConfigurationTable::Entry>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<CLMicroLocationConfigurationTable::Entry>::~__split_buffer(&v10);
  return v8;
}

void sub_256398970(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMicroLocationConfigurationTable::Entry>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<CLMicroLocationConfigurationTable::Entry>::construct[abi:ne180100]<CLMicroLocationConfigurationTable::Entry,CLMicroLocationConfigurationTable::Entry>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = *(void *)a3;
  long long v3 = *(_OWORD *)(a3 + 8);
  *(void *)(a2 + 24) = *(void *)(a3 + 24);
  *(_OWORD *)(a2 + 8) = v3;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 8) = 0;
  long long v4 = *(_OWORD *)(a3 + 32);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 32) = v4;
  return CLMicroLocationProto::Configuration::Configuration((CLMicroLocationProto::Configuration *)(a2 + 56), (const CLMicroLocationProto::Configuration *)(a3 + 56));
}

void sub_2563989EC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<CLMicroLocationConfigurationTable::Entry>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    long long v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 112;
        std::allocator<CLMicroLocationConfigurationTable::Entry>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      long long v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void *std::vector<CLMicroLocationConfigurationTable::Entry>::__init_with_size[abi:ne180100]<CLMicroLocationConfigurationTable::Entry*,CLMicroLocationConfigurationTable::Entry*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    std::vector<CLMicroLocationConfigurationTable::Entry>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationConfigurationTable::Entry>,CLMicroLocationConfigurationTable::Entry*,CLMicroLocationConfigurationTable::Entry*,CLMicroLocationConfigurationTable::Entry*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_256398AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<CLMicroLocationConfigurationTable::Entry>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<CLMicroLocationConfigurationTable::Entry>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x24924924924924ALL) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationConfigurationTable::Entry>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[112 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationConfigurationTable::Entry>,CLMicroLocationConfigurationTable::Entry*,CLMicroLocationConfigurationTable::Entry*,CLMicroLocationConfigurationTable::Entry*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  _DWORD v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::allocator<CLMicroLocationConfigurationTable::Entry>::construct[abi:ne180100]<CLMicroLocationConfigurationTable::Entry,CLMicroLocationConfigurationTable::Entry&>(a1, v4, v6);
      v6 += 112;
      uint64_t v4 = v12 + 112;
      v12 += 112;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationConfigurationTable::Entry>,CLMicroLocationConfigurationTable::Entry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_256398BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::allocator<CLMicroLocationConfigurationTable::Entry>::construct[abi:ne180100]<CLMicroLocationConfigurationTable::Entry,CLMicroLocationConfigurationTable::Entry&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = *(void *)a3;
  uint64_t v5 = (std::string *)(a2 + 8);
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)(a3 + 8);
    *(void *)(a2 + 24) = *(void *)(a3 + 24);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  long long v7 = *(_OWORD *)(a3 + 32);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 32) = v7;
  return CLMicroLocationProto::Configuration::Configuration((CLMicroLocationProto::Configuration *)(a2 + 56), (const CLMicroLocationProto::Configuration *)(a3 + 56));
}

void sub_256398C84(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationConfigurationTable::Entry>,CLMicroLocationConfigurationTable::Entry*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationConfigurationTable::Entry>,CLMicroLocationConfigurationTable::Entry*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationConfigurationTable::Entry>,CLMicroLocationConfigurationTable::Entry*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 112;
      std::allocator<CLMicroLocationConfigurationTable::Entry>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

void sub_256398D98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256398E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, CLMacAddress *a9, uint64_t a10)
{
  std::unique_ptr<ULMiloSqliteDatabase>::reset[abi:ne180100](&a9, 0);
  uint64_t v12 = a10;
  a10 = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }

  _Unwind_Resume(a1);
}

void sub_256399150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  unint64_t v27 = v25;

  void *v23 = 0;
  (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }

  _Unwind_Resume(a1);
}

void sub_2563994AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256399B2C(_Unwind_Exception *exception_object)
{
}

uint64_t ULRecordingEventTable::migrationLimit(ULRecordingEventTable *this)
{
  uint64_t v1 = +[ULDefaultsSingleton shared];
  uint64_t v2 = [v1 defaultsDictionary];

  uint64_t v3 = [NSString stringWithUTF8String:"ULRecordingEventTableMigrationLimit"];
  uint64_t v4 = [v2 objectForKey:v3];
  if (v4 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v5 = [v4 unsignedIntValue];
  }
  else {
    uint64_t v5 = [&unk_2704F1740 unsignedIntValue];
  }
  uint64_t v6 = v5;

  return v6;
}

void sub_256399C80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ULRecordingEventTable::pageSize(ULRecordingEventTable *this)
{
  uint64_t v1 = +[ULDefaultsSingleton shared];
  uint64_t v2 = [v1 defaultsDictionary];

  uint64_t v3 = [NSString stringWithUTF8String:"ULRecordingEventTableMigrationPageSize"];
  uint64_t v4 = [v2 objectForKey:v3];
  if (v4 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v5 = [v4 unsignedIntValue];
  }
  else {
    uint64_t v5 = [&unk_2704F16F8 unsignedIntValue];
  }
  uint64_t v6 = v5;

  return v6;
}

void sub_256399D80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_256399E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t ULMeasurementTable::migrationLimit(ULMeasurementTable *this)
{
  uint64_t v1 = +[ULDefaultsSingleton shared];
  uint64_t v2 = [v1 defaultsDictionary];

  uint64_t v3 = [NSString stringWithUTF8String:"ULMeasurementTableMigrationLimit"];
  uint64_t v4 = [v2 objectForKey:v3];
  if (v4 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v5 = [v4 unsignedIntValue];
  }
  else {
    uint64_t v5 = [&unk_2704F1758 unsignedIntValue];
  }
  uint64_t v6 = v5;

  return v6;
}

void sub_256399F14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ULMeasurementTable::pageSize(ULMeasurementTable *this)
{
  uint64_t v1 = +[ULDefaultsSingleton shared];
  uint64_t v2 = [v1 defaultsDictionary];

  uint64_t v3 = [NSString stringWithUTF8String:"ULMeasurementTableMigrationPageSize"];
  uint64_t v4 = [v2 objectForKey:v3];
  if (v4 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v5 = [v4 unsignedIntValue];
  }
  else {
    uint64_t v5 = [&unk_2704F16F8 unsignedIntValue];
  }
  uint64_t v6 = v5;

  return v6;
}

void sub_25639A014(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25639A0C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<CLMicroLocationMeasurementTable::Entry>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t ULLabelTable::migrationLimit(ULLabelTable *this)
{
  uint64_t v1 = +[ULDefaultsSingleton shared];
  uint64_t v2 = [v1 defaultsDictionary];

  uint64_t v3 = [NSString stringWithUTF8String:"ULLabelTableMigrationLimit"];
  uint64_t v4 = [v2 objectForKey:v3];
  if (v4 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v5 = [v4 unsignedIntValue];
  }
  else {
    uint64_t v5 = [&unk_2704F1770 unsignedIntValue];
  }
  uint64_t v6 = v5;

  return v6;
}

void sub_25639A1A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ULLabelTable::pageSize(ULLabelTable *this)
{
  uint64_t v1 = +[ULDefaultsSingleton shared];
  uint64_t v2 = [v1 defaultsDictionary];

  uint64_t v3 = [NSString stringWithUTF8String:"ULLabelTableMigrationPageSize"];
  uint64_t v4 = [v2 objectForKey:v3];
  if (v4 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v5 = [v4 unsignedIntValue];
  }
  else {
    uint64_t v5 = [&unk_2704F16F8 unsignedIntValue];
  }
  uint64_t v6 = v5;

  return v6;
}

void sub_25639A2A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25639A358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t ULServiceTable::migrationLimit(ULServiceTable *this)
{
  uint64_t v1 = +[ULDefaultsSingleton shared];
  uint64_t v2 = [v1 defaultsDictionary];

  uint64_t v3 = [NSString stringWithUTF8String:"ULServiceTableMigrationLimit"];
  uint64_t v4 = [v2 objectForKey:v3];
  if (v4 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v5 = [v4 unsignedIntValue];
  }
  else {
    uint64_t v5 = [&unk_2704F16F8 unsignedIntValue];
  }
  uint64_t v6 = v5;

  return v6;
}

void sub_25639A43C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ULServiceTable::pageSize(ULServiceTable *this)
{
  uint64_t v1 = +[ULDefaultsSingleton shared];
  uint64_t v2 = [v1 defaultsDictionary];

  uint64_t v3 = [NSString stringWithUTF8String:"ULServiceTableMigrationPageSize"];
  uint64_t v4 = [v2 objectForKey:v3];
  if (v4 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v5 = [v4 unsignedIntValue];
  }
  else {
    uint64_t v5 = [&unk_2704F16F8 unsignedIntValue];
  }
  uint64_t v6 = v5;

  return v6;
}

void sub_25639A53C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25639A5EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<CLMiLoServiceTable::Entry>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t ULLoiTable::migrationLimit(ULLoiTable *this)
{
  uint64_t v1 = +[ULDefaultsSingleton shared];
  uint64_t v2 = [v1 defaultsDictionary];

  uint64_t v3 = [NSString stringWithUTF8String:"ULLoiTableMigrationLimit"];
  uint64_t v4 = [v2 objectForKey:v3];
  if (v4 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v5 = [v4 unsignedIntValue];
  }
  else {
    uint64_t v5 = [&unk_2704F16F8 unsignedIntValue];
  }
  uint64_t v6 = v5;

  return v6;
}

void sub_25639A6D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ULLoiTable::pageSize(ULLoiTable *this)
{
  uint64_t v1 = +[ULDefaultsSingleton shared];
  uint64_t v2 = [v1 defaultsDictionary];

  uint64_t v3 = [NSString stringWithUTF8String:"ULLoiTableMigrationPageSize"];
  uint64_t v4 = [v2 objectForKey:v3];
  if (v4 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v5 = [v4 unsignedIntValue];
  }
  else {
    uint64_t v5 = [&unk_2704F16F8 unsignedIntValue];
  }
  uint64_t v6 = v5;

  return v6;
}

void sub_25639A7D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25639A880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<CLMiLoLoiTable::Entry>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t ULRapportTable::migrationLimit(ULRapportTable *this)
{
  uint64_t v1 = +[ULDefaultsSingleton shared];
  uint64_t v2 = [v1 defaultsDictionary];

  uint64_t v3 = [NSString stringWithUTF8String:"ULRapportTableMigrationLimit"];
  uint64_t v4 = [v2 objectForKey:v3];
  if (v4 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v5 = [v4 unsignedIntValue];
  }
  else {
    uint64_t v5 = [&unk_2704F16F8 unsignedIntValue];
  }
  uint64_t v6 = v5;

  return v6;
}

void sub_25639A964(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ULRapportTable::pageSize(ULRapportTable *this)
{
  uint64_t v1 = +[ULDefaultsSingleton shared];
  uint64_t v2 = [v1 defaultsDictionary];

  uint64_t v3 = [NSString stringWithUTF8String:"ULRapportTableMigrationPageSize"];
  uint64_t v4 = [v2 objectForKey:v3];
  if (v4 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v5 = [v4 unsignedIntValue];
  }
  else {
    uint64_t v5 = [&unk_2704F16F8 unsignedIntValue];
  }
  uint64_t v6 = v5;

  return v6;
}

void sub_25639AA64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25639AB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<CLMicroLocationRapportTable::Entry>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t ULAssociatedStateTable::migrationLimit(ULAssociatedStateTable *this)
{
  uint64_t v1 = +[ULDefaultsSingleton shared];
  uint64_t v2 = [v1 defaultsDictionary];

  uint64_t v3 = [NSString stringWithUTF8String:"ULAssociatedStateTableMigrationLimit"];
  uint64_t v4 = [v2 objectForKey:v3];
  if (v4 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v5 = [v4 unsignedIntValue];
  }
  else {
    uint64_t v5 = [&unk_2704F16F8 unsignedIntValue];
  }
  uint64_t v6 = v5;

  return v6;
}

void sub_25639ABF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ULAssociatedStateTable::pageSize(ULAssociatedStateTable *this)
{
  uint64_t v1 = +[ULDefaultsSingleton shared];
  uint64_t v2 = [v1 defaultsDictionary];

  uint64_t v3 = [NSString stringWithUTF8String:"ULAssociatedStateTableMigrationPageSize"];
  uint64_t v4 = [v2 objectForKey:v3];
  if (v4 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v5 = [v4 unsignedIntValue];
  }
  else {
    uint64_t v5 = [&unk_2704F16F8 unsignedIntValue];
  }
  uint64_t v6 = v5;

  return v6;
}

void sub_25639ACF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25639ADA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<CLMicroLocationAssociatedStateTable::Entry>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t ULBlueToothIdentityTable::migrationLimit(ULBlueToothIdentityTable *this)
{
  uint64_t v1 = +[ULDefaultsSingleton shared];
  uint64_t v2 = [v1 defaultsDictionary];

  uint64_t v3 = [NSString stringWithUTF8String:"ULBluetoothIdentityTableMigrationLimit"];
  uint64_t v4 = [v2 objectForKey:v3];
  if (v4 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v5 = [v4 unsignedIntValue];
  }
  else {
    uint64_t v5 = [&unk_2704F16F8 unsignedIntValue];
  }
  uint64_t v6 = v5;

  return v6;
}

void sub_25639AE8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ULBlueToothIdentityTable::pageSize(ULBlueToothIdentityTable *this)
{
  uint64_t v1 = +[ULDefaultsSingleton shared];
  uint64_t v2 = [v1 defaultsDictionary];

  uint64_t v3 = [NSString stringWithUTF8String:"ULBluetoothIdentityTableMigrationPageSize"];
  uint64_t v4 = [v2 objectForKey:v3];
  if (v4 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v5 = [v4 unsignedIntValue];
  }
  else {
    uint64_t v5 = [&unk_2704F16F8 unsignedIntValue];
  }
  uint64_t v6 = v5;

  return v6;
}

void sub_25639AF8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25639B03C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t ULConfigurationTable::migrationLimit(ULConfigurationTable *this)
{
  uint64_t v1 = +[ULDefaultsSingleton shared];
  uint64_t v2 = [v1 defaultsDictionary];

  uint64_t v3 = [NSString stringWithUTF8String:"ULConfigurationTableMigrationLimit"];
  uint64_t v4 = [v2 objectForKey:v3];
  if (v4 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v5 = [v4 unsignedIntValue];
  }
  else {
    uint64_t v5 = [&unk_2704F1788 unsignedIntValue];
  }
  uint64_t v6 = v5;

  return v6;
}

void sub_25639B120(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ULConfigurationTable::pageSize(ULConfigurationTable *this)
{
  uint64_t v1 = +[ULDefaultsSingleton shared];
  uint64_t v2 = [v1 defaultsDictionary];

  uint64_t v3 = [NSString stringWithUTF8String:"ULConfigurationTableMigrationPageSize"];
  uint64_t v4 = [v2 objectForKey:v3];
  if (v4 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v5 = [v4 unsignedIntValue];
  }
  else {
    uint64_t v5 = [&unk_2704F1788 unsignedIntValue];
  }
  uint64_t v6 = v5;

  return v6;
}

void sub_25639B220(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25639B2D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<CLMicroLocationConfigurationTable::Entry>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t ULModelTable::migrationLimit(ULModelTable *this)
{
  uint64_t v1 = +[ULDefaultsSingleton shared];
  uint64_t v2 = [v1 defaultsDictionary];

  uint64_t v3 = [NSString stringWithUTF8String:"ULModelTableMigrationLimit"];
  uint64_t v4 = [v2 objectForKey:v3];
  if (v4 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v5 = [v4 unsignedIntValue];
  }
  else {
    uint64_t v5 = [&unk_2704F1728 unsignedIntValue];
  }
  uint64_t v6 = v5;

  return v6;
}

void sub_25639B3B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ULModelTable::pageSize(ULModelTable *this)
{
  uint64_t v1 = +[ULDefaultsSingleton shared];
  uint64_t v2 = [v1 defaultsDictionary];

  uint64_t v3 = [NSString stringWithUTF8String:"ULModelTableMigrationPageSize"];
  uint64_t v4 = [v2 objectForKey:v3];
  if (v4 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v5 = [v4 unsignedIntValue];
  }
  else {
    uint64_t v5 = [&unk_2704F1710 unsignedIntValue];
  }
  uint64_t v6 = v5;

  return v6;
}

void sub_25639B4B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25639B564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<CLMicroLocationModelTable::Entry>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t ULCustomLoiTable::migrationLimit(ULCustomLoiTable *this)
{
  uint64_t v1 = +[ULDefaultsSingleton shared];
  uint64_t v2 = [v1 defaultsDictionary];

  uint64_t v3 = [NSString stringWithUTF8String:"ULCustomLoiTableMigrationLimit"];
  uint64_t v4 = [v2 objectForKey:v3];
  if (v4 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v5 = [v4 unsignedIntValue];
  }
  else {
    uint64_t v5 = [&unk_2704F16F8 unsignedIntValue];
  }
  uint64_t v6 = v5;

  return v6;
}

void sub_25639B648(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ULCustomLoiTable::pageSize(ULCustomLoiTable *this)
{
  uint64_t v1 = +[ULDefaultsSingleton shared];
  uint64_t v2 = [v1 defaultsDictionary];

  uint64_t v3 = [NSString stringWithUTF8String:"ULCustomLoiTableMigrationPageSize"];
  uint64_t v4 = [v2 objectForKey:v3];
  if (v4 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v5 = [v4 unsignedIntValue];
  }
  else {
    uint64_t v5 = [&unk_2704F16F8 unsignedIntValue];
  }
  uint64_t v6 = v5;

  return v6;
}

void sub_25639B748(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25639B7FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ULLoggedEventTable::migrationLimit(ULLoggedEventTable *this)
{
  uint64_t v1 = +[ULDefaultsSingleton shared];
  uint64_t v2 = [v1 defaultsDictionary];

  uint64_t v3 = [NSString stringWithUTF8String:"ULLoggedEventsTableMigrationLimit"];
  uint64_t v4 = [v2 objectForKey:v3];
  if (v4 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v5 = [v4 unsignedIntValue];
  }
  else {
    uint64_t v5 = [&unk_2704F17A0 unsignedIntValue];
  }
  uint64_t v6 = v5;

  return v6;
}

void sub_25639B8E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ULLoggedEventTable::pageSize(ULLoggedEventTable *this)
{
  uint64_t v1 = +[ULDefaultsSingleton shared];
  uint64_t v2 = [v1 defaultsDictionary];

  uint64_t v3 = [NSString stringWithUTF8String:"ULLoggedEventsTableMigrationPageSize"];
  uint64_t v4 = [v2 objectForKey:v3];
  if (v4 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v5 = [v4 unsignedIntValue];
  }
  else {
    uint64_t v5 = [&unk_2704F16F8 unsignedIntValue];
  }
  uint64_t v6 = v5;

  return v6;
}

void sub_25639B9E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25639BA90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<CLMicroLocationLoggedEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_25639BD10(_Unwind_Exception *exception_object)
{
}

void sub_25639C05C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_28()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

CLMacAddress *std::unique_ptr<ULMiloSqliteDatabase>::reset[abi:ne180100](CLMacAddress **a1, unint64_t a2)
{
  uint64_t result = *a1;
  *a1 = (CLMacAddress *)a2;
  if (result)
  {
    CLMacAddress::newFromUint64(result, a2);
    JUMPOUT(0x25A2A6340);
  }
  return result;
}

void std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 248;
        std::allocator<CLMicroLocationRecordingEventsTable::Entry>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<CLMicroLocationRecordingEventsTable::Entry>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)(a2 + 80));
  if (*(char *)(a2 + 47) < 0)
  {
    uint64_t v3 = *(void **)(a2 + 24);
    operator delete(v3);
  }
}

void std::vector<CLMicroLocationRapportTable::Entry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        std::allocator<CLMicroLocationRapportTable::Entry>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<CLMicroLocationRapportTable::Entry>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  CLMicroLocationProto::RapportDevice::~RapportDevice((CLMicroLocationProto::RapportDevice *)(a2 + 32));
  if (*(char *)(a2 + 31) < 0)
  {
    uint64_t v3 = *(void **)(a2 + 8);
    operator delete(v3);
  }
}

void std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        std::allocator<CLMicroLocationRapportMonitor::Item>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_25639C7BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_25639C8E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25639C940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  char v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)ULDataContainer;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_25639CA7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25639CD5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25639CF98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_29()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

void CLSqliteDatabaseManager::create(CLSqliteDatabaseManager *this)
{
}

void sub_25639D048(_Unwind_Exception *a1)
{
  MEMORY[0x25A2A6340](v1, 0x10A0C40FCC610CCLL);
  _Unwind_Resume(a1);
}

uint64_t CLSqliteDatabaseManager::instance(CLSqliteDatabaseManager *this)
{
  if (CLSqliteDatabaseManager::instance(void)::pred != -1) {
    dispatch_once(&CLSqliteDatabaseManager::instance(void)::pred, &__block_literal_global_38);
  }
  return CLSqliteDatabaseManager::fInstance;
}

void CLSqliteDatabaseManager::CLSqliteDatabaseManager(CLSqliteDatabaseManager *this)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  *((void *)this + 2) = 0;
  *((void *)this + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0;
  *(void *)this = (char *)this + 8;
  BasicMutex::BasicMutex((CLSqliteDatabaseManager *)((char *)this + 24), "SqliteDatabaseManager", 1, 1);
  *((_WORD *)this + 20) = 256;
  int v2 = sqlite3_shutdown();
  if (v2)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_17);
    }
    uint64_t v3 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      int v7 = v2;
      _os_log_impl(&dword_25631F000, v3, OS_LOG_TYPE_ERROR, "sqlite3_shutdown failed. sqlite_rc: %d", buf, 8u);
    }
  }
  int v4 = sqlite3_config(13, 512, 125);
  if (v4)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_17);
    }
    uint64_t v5 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      int v7 = v4;
      _os_log_impl(&dword_25631F000, v5, OS_LOG_TYPE_ERROR, "Can't set the sqlite lookaside buffers size to 64K. sqlite_rc: %d", buf, 8u);
    }
  }
}

void sub_25639D258(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::__map_value_compare<std::string,std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t CLSqliteDatabaseManager::openDatabase(unsigned __int8 *a1, int *a2, const char *a3, sqlite3 **a4)
{
  v64[20] = *MEMORY[0x263EF8340];
  if (!BasicMutex::__assertOwned((BasicMutex *)(a1 + 24)))
  {
    CLSqliteDatabaseManager::openDatabase();
    __break(1u);
    goto LABEL_115;
  }
  if (*((unsigned char *)a2 + 8)) {
    int v4 = 1;
  }
  else {
    int v4 = 6;
  }
  int v10 = *a2;
  p_superclass = &OBJC_METACLASS___CLMicroLocationLoiBridge.superclass;
  uint64_t v5 = &OBJC_METACLASS___CLMicroLocationLoiBridge.superclass;
  uint64_t v52 = a2;
  if (*a2 == 3)
  {
    char v50 = 0;
    int v12 = 3145728;
  }
  else if (v10 == 2)
  {
    char v50 = 0;
    int v12 = 0x200000;
  }
  else
  {
    if (v10 == 1)
    {
      if (onceToken_MicroLocation_Default == -1)
      {
LABEL_9:
        uint64_t v11 = v5[427];
        if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl(&dword_25631F000, v11, OS_LOG_TYPE_FAULT, "Attempted to open an encrypted database", buf, 2u);
        }
        char v50 = 0;
        int v12 = 0x100000;
        goto LABEL_15;
      }
LABEL_115:
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_17);
      goto LABEL_9;
    }
    char v50 = 1;
    int v12 = 0x400000;
  }
LABEL_15:
  int v13 = v4 | v12 | 0x20000;
  uint64_t v49 = *MEMORY[0x263F8C2B8];
  uint64_t v47 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  uint64_t v48 = *(void *)(MEMORY[0x263F8C2B8] + 64);
  while (1)
  {
    while (1)
    {
      if (a3[23] >= 0) {
        char v14 = a3;
      }
      else {
        char v14 = *(const char **)a3;
      }
      uint64_t v15 = sqlite3_open_v2(v14, a4, v13, 0);
      if (p_superclass[429] != (__objc2_class *)-1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_17);
      }
      long long v16 = v5[427];
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        if (a3[23] >= 0) {
          __int16 v17 = a3;
        }
        else {
          __int16 v17 = *(const char **)a3;
        }
        *(_DWORD *)uint64_t buf = 67109378;
        *(_DWORD *)&uint8_t buf[4] = v15;
        __int16 v60 = 2080;
        *(void *)uint64_t v61 = v17;
        _os_log_impl(&dword_25631F000, v16, OS_LOG_TYPE_DEFAULT, "openDatabase. sqlite_rc: %d, path: %s", buf, 0x12u);
      }
      if (!v15)
      {
        if (!*((unsigned char *)v52 + 8)) {
          CLSqliteDatabase::setIncrementalVacuumEnabled((CLSqliteDatabase *)*a4, (sqlite3 *)a1[41]);
        }
        uint64_t v15 = sqlite3_exec(*a4, "pragma page_size = 4096;", 0, 0, 0);
        if (p_superclass[429] != (__objc2_class *)-1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_17);
        }
        id v18 = v5[427];
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint64_t buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v15;
          _os_log_impl(&dword_25631F000, v18, OS_LOG_TYPE_INFO, "pragma page_std::string::size_type size = 4096. sqlite_rc: %d", buf, 8u);
        }
        if (!v15)
        {
          if (*((unsigned char *)v52 + 8))
          {
            uint64_t v15 = 0;
          }
          else
          {
            uint64_t v15 = sqlite3_exec(*a4, "pragma journal_mode=WAL;", 0, 0, 0);
            if (p_superclass[429] != (__objc2_class *)-1) {
              dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_17);
            }
            __int16 v19 = v5[427];
            if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)uint64_t buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = v15;
              _os_log_impl(&dword_25631F000, v19, OS_LOG_TYPE_INFO, "pragma journal_mode=WAL. sqlite_rc: %d", buf, 8u);
            }
          }
          char v20 = v50;
          if (v15) {
            char v20 = 1;
          }
          if ((v20 & 1) == 0)
          {
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
            int v21 = a1[40];
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v61[6], (uint64_t)"pragma secure_delete = ", 23);
            long long v22 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)";", 1);
            std::stringbuf::str();
            if (v54 >= 0) {
              long long v23 = __p;
            }
            else {
              long long v23 = (void **)__p[0];
            }
            uint64_t v15 = sqlite3_exec(*a4, (const char *)v23, 0, 0, 0);
            if (p_superclass[429] != (__objc2_class *)-1) {
              dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_17);
            }
            uint64_t v24 = v5[427];
            if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)long long v55 = 67109376;
              int v56 = v21;
              __int16 v57 = 1024;
              int v58 = v15;
              _os_log_impl(&dword_25631F000, v24, OS_LOG_TYPE_INFO, "pragma secure_delete. useSecureDelete: %d, sqlite_rc: %d", v55, 0xEu);
            }
            if (v54 < 0) {
              operator delete(__p[0]);
            }
            *(void *)uint64_t buf = v49;
            *(void *)&buf[*(void *)(v49 - 24)] = v48;
            *(void *)&v61[6] = v47;
            *(void *)&v61[14] = MEMORY[0x263F8C318] + 16;
            if (v63 < 0) {
              operator delete(v62);
            }
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x25A2A6280](v64);
          }
          if (!v15)
          {
            int v25 = *a4;
            if (*((unsigned char *)v52 + 8))
            {
              uint64_t v15 = sqlite3_exec(v25, "pragma cache_size = 5;", 0, 0, 0);
              if (p_superclass[429] != (__objc2_class *)-1) {
                dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_17);
              }
              __int16 v26 = v5[427];
              if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)uint64_t buf = 67109120;
                *(_DWORD *)&uint8_t buf[4] = v15;
                unint64_t v27 = v26;
                __int16 v28 = "pragma cache_size = 5. sqlite_rc: %d";
LABEL_61:
                _os_log_impl(&dword_25631F000, v27, OS_LOG_TYPE_INFO, v28, buf, 8u);
                goto LABEL_62;
              }
              goto LABEL_62;
            }
            uint64_t v15 = sqlite3_exec(v25, "pragma cache_size = 50;", 0, 0, 0);
            if (p_superclass[429] != (__objc2_class *)-1) {
              dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_17);
            }
            uint64_t v33 = v5[427];
            if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)uint64_t buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = v15;
              _os_log_impl(&dword_25631F000, v33, OS_LOG_TYPE_INFO, "pragma cache_std::string::size_type size = 50. sqlite_rc: %d", buf, 8u);
            }
            if (!v15) {
              break;
            }
          }
        }
      }
LABEL_83:
      if (p_superclass[429] != (__objc2_class *)-1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_17);
      }
      unsigned int v34 = v5[427];
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        int v35 = *__error();
        *(_DWORD *)uint64_t buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v35;
        __int16 v60 = 1024;
        *(_DWORD *)uint64_t v61 = v15;
        _os_log_impl(&dword_25631F000, v34, OS_LOG_TYPE_DEFAULT, "failed to obtain database handle. errno: %d, sqlite_rc: %d", buf, 0xEu);
      }

      int v36 = sqlite3_close(*a4);
      if (v36)
      {
        if (p_superclass[429] != (__objc2_class *)-1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_17);
        }
        BOOL v37 = v5[427];
        if (os_log_type_enabled(v37, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)uint64_t buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v36;
          _os_log_impl(&dword_25631F000, v37, OS_LOG_TYPE_FAULT, "Failed to close partially opened database. sqlite_rc: %d", buf, 8u);
        }
      }
      *a4 = 0;
      if (v15 != 10 && v15 != 13) {
        return v15;
      }
      sleepAfterSqliteReadOnlyMismatch();
    }
    uint64_t v15 = sqlite3_exec(*a4, "pragma cache_spill = 500;", 0, 0, 0);
    if (p_superclass[429] != (__objc2_class *)-1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_17);
    }
    uint64_t v38 = v5[427];
    if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v15;
      unint64_t v27 = v38;
      __int16 v28 = "pragma cache_spill = 500. sqlite_rc: %d";
      goto LABEL_61;
    }
LABEL_62:
    if (v15) {
      goto LABEL_83;
    }
    uint64_t v15 = sqlite3_exec(*a4, "pragma recursive_triggers = true;", 0, 0, 0);
    if (p_superclass[429] != (__objc2_class *)-1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_17);
    }
    uint64_t v29 = v5[427];
    if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v15;
      _os_log_impl(&dword_25631F000, v29, OS_LOG_TYPE_INFO, "pragma recursive_triggers = true. sqlite_rc: %d", buf, 8u);
    }
    if (v15) {
      goto LABEL_83;
    }
    sqlite3_limit(*a4, 10, 10);
    int v30 = sqlite3_limit(*a4, 10, -1);
    if (v30 != 10)
    {
      if (p_superclass[429] != (__objc2_class *)-1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_17);
      }
      uint64_t v31 = v5[427];
      if (os_log_type_enabled(v31, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = 10;
        __int16 v60 = 1024;
        *(_DWORD *)uint64_t v61 = v30;
        _os_log_impl(&dword_25631F000, v31, OS_LOG_TYPE_FAULT, "Trigger depth. expected: %d, actual: %d", buf, 0xEu);
      }
    }
    uint64_t v15 = sqlite3_extended_result_codes(*a4, 1);
    if (v15)
    {
      if (p_superclass[429] != (__objc2_class *)-1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_17);
      }
      uint64_t v32 = v5[427];
      if (os_log_type_enabled(v32, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v15;
        _os_log_impl(&dword_25631F000, v32, OS_LOG_TYPE_FAULT, "Failed to enable extended result codes. sqlite_rc: %d", buf, 8u);
      }
      goto LABEL_83;
    }
    LODWORD(__p[0]) = -1;
    int v39 = sqlite3_file_control(*a4, "main", 4, __p);
    int v40 = sqlite3_db_readonly(*a4, "main");
    if (*((unsigned char *)v52 + 8)) {
      return 0;
    }
    int v41 = v40;
    if (v40 <= 0) {
      return 0;
    }
    if (p_superclass[429] != (__objc2_class *)-1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_17);
    }
    uint64_t v42 = v5[427];
    if (os_log_type_enabled(v42, OS_LOG_TYPE_FAULT))
    {
      int v43 = *((unsigned __int8 *)v52 + 8);
      *(_DWORD *)uint64_t buf = 67109888;
      *(_DWORD *)&uint8_t buf[4] = v43;
      __int16 v60 = 1024;
      *(_DWORD *)uint64_t v61 = v41;
      *(_WORD *)&v61[4] = 1024;
      *(_DWORD *)&v61[6] = __p[0];
      *(_WORD *)&v61[10] = 1024;
      *(_DWORD *)&v61[12] = v39;
      _os_log_impl(&dword_25631F000, v42, OS_LOG_TYPE_FAULT, "Database opened with read/write access was found to be read-only. properties.readOnly: %d, sqlite3_db_readonly: %d, last POSIX errNo: %d, File control rc: %d", buf, 0x1Au);
    }
    int v44 = sqlite3_close(*a4);
    if (v44)
    {
      if (p_superclass[429] != (__objc2_class *)-1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_17);
      }
      uint64_t v45 = v5[427];
      if (os_log_type_enabled(v45, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v44;
        _os_log_impl(&dword_25631F000, v45, OS_LOG_TYPE_FAULT, "Failed to close partially opened database. sqlite_rc: %d", buf, 8u);
      }
    }
    *a4 = 0;
    sleepAfterSqliteReadOnlyMismatch();
  }
}

void sub_25639DE3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,char a32)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a32);
  _Unwind_Resume(a1);
}

uint64_t CLSqliteDatabaseManager::useIncrementalVacuum(CLSqliteDatabaseManager *this)
{
  return *((unsigned __int8 *)this + 41);
}

uint64_t sleepAfterSqliteReadOnlyMismatch(void)
{
  return sleep(5u);
}

uint64_t CLSqliteDatabaseManager::openDatabase(uint64_t a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v30 = a1 + 24;
  (*(void (**)(void))(v8 + 16))();
  __int16 v32 = 256;
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_17);
  }
  uint64_t v9 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a3 + 23) >= 0) {
      int v10 = a3;
    }
    else {
      int v10 = (void *)*a3;
    }
    buf[0] = 136315138;
    *(void *)&buf[1] = v10;
    _os_log_impl(&dword_25631F000, v9, OS_LOG_TYPE_INFO, "Opening database. path: %s", (uint8_t *)buf, 0xCu);
  }
  uint64_t v11 = std::__tree<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::__map_value_compare<std::string,std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>>>::find<std::string>(a1, a3);
  uint64_t v12 = a1 + 8;
  if (a1 + 8 != v11)
  {
    uint64_t v13 = 0;
    goto LABEL_26;
  }
  memset(&v29, 0, sizeof(v29));
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  int v25 = 0;
  int v28 = 0;
  std::string::operator=(&v29, (const std::string *)a3);
  uint64_t v24 = 0;
  uint64_t v21 = *a2;
  __int16 v22 = *((_WORD *)a2 + 4);
  if (*((char *)a2 + 39) < 0) {
    std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)a2[2], a2[3]);
  }
  else {
    std::string __p = *(std::string *)(a2 + 2);
  }
  uint64_t v14 = CLSqliteDatabaseManager::openDatabase((unsigned __int8 *)a1, (int *)&v21, (const char *)a3, &v24);
  uint64_t v13 = v14;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v13) {
      goto LABEL_15;
    }
LABEL_21:
    operator new();
  }
  if (!v14) {
    goto LABEL_21;
  }
LABEL_15:
  if (v24)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_17);
    }
    uint64_t v15 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_FAULT))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl(&dword_25631F000, v15, OS_LOG_TYPE_FAULT, "openDatabase failed to open a connection and then to clean up after itself", (uint8_t *)buf, 2u);
    }
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(v25);
  }
LABEL_26:
  if (v11 == v12) {
    goto LABEL_35;
  }
  long long v16 = *(_OWORD *)(v11 + 56);
  *(void *)(a4 + 16) = *(void *)(v11 + 72);
  *(_OWORD *)a4 = v16;
  std::string::operator=((std::string *)(a4 + 24), (const std::string *)(v11 + 80));
  ++*(_DWORD *)(v11 + 104);
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_17);
  }
  __int16 v17 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a3 + 23) >= 0) {
      id v18 = a3;
    }
    else {
      id v18 = (void *)*a3;
    }
    int v19 = *(_DWORD *)(v11 + 104);
    buf[0] = 136315394;
    *(void *)&buf[1] = v18;
    __int16 v34 = 1024;
    int v35 = v19;
    _os_log_impl(&dword_25631F000, v17, OS_LOG_TYPE_INFO, "Reference count increased. path: %s, referenceCount: %d", (uint8_t *)buf, 0x12u);
  }
  if (HIBYTE(v32))
  {
LABEL_35:
    if ((_BYTE)v32) {
      pthread_mutex_unlock(v31);
    }
    else {
      (*(void (**)(uint64_t))(*(void *)v30 + 24))(v30);
    }
  }
  return v13;
}

void sub_25639E2E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,pthread_mutex_t *a27,uint64_t a28,uint64_t a29,char a30)
{
}

uint64_t std::pair<std::string,CLSqliteDatabaseManager::ConnectionState>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void CLSqliteDatabaseManager::ConnectionState::~ConnectionState(void **this)
{
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
}

void AutoLocker::~AutoLocker(pthread_mutex_t **this)
{
  if (*((unsigned char *)this + 17))
  {
    if (*((unsigned char *)this + 16)) {
      pthread_mutex_unlock(this[1]);
    }
    else {
      (*(void (**)(void))((*this)->__sig + 24))();
    }
    *((unsigned char *)this + 17) = 0;
  }
}

void CLSqliteDatabaseManager::closeDatabase(CLSqliteDatabaseManager *this, sqlite3 *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v15 = (char *)this + 24;
  (*(void (**)(void))(*((void *)this + 3) + 16))();
  int v4 = *(CLSqliteDatabaseManager **)this;
  if (*(CLSqliteDatabaseManager **)this != (CLSqliteDatabaseManager *)((char *)this + 8))
  {
    while (*((sqlite3 **)v4 + 7) != a2)
    {
      uint64_t v5 = (CLSqliteDatabaseManager *)*((void *)v4 + 1);
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          uint64_t v5 = *(CLSqliteDatabaseManager **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (CLSqliteDatabaseManager *)*((void *)v4 + 2);
          BOOL v7 = *(void *)v6 == (void)v4;
          int v4 = v6;
        }
        while (!v7);
      }
      int v4 = v6;
      if (v6 == (CLSqliteDatabaseManager *)((char *)this + 8)) {
        goto LABEL_28;
      }
    }
    --*((_DWORD *)v4 + 26);
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_17);
    }
    uint64_t v8 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = (void *)((char *)v4 + 112);
      if (*((char *)v4 + 135) < 0) {
        uint64_t v9 = (void *)*v9;
      }
      int v10 = *((_DWORD *)v4 + 26);
      *(_DWORD *)uint64_t buf = 136315394;
      __int16 v17 = v9;
      __int16 v18 = 1024;
      int v19 = v10;
      _os_log_impl(&dword_25631F000, v8, OS_LOG_TYPE_INFO, "Reference count decreased. path: %s, referenceCount: %d", buf, 0x12u);
    }
    if (!*((_DWORD *)v4 + 26))
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_17);
      }
      uint64_t v11 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = (void *)((char *)v4 + 112);
        if (*((char *)v4 + 135) < 0) {
          uint64_t v12 = (void *)*v12;
        }
        *(_DWORD *)uint64_t buf = 136315138;
        __int16 v17 = v12;
        _os_log_impl(&dword_25631F000, v11, OS_LOG_TYPE_DEFAULT, "Destroying database. path: %s", buf, 0xCu);
      }
      sqlite3_close(a2);
      uint64_t v13 = *((void *)v4 + 8);
      if (v13) {
        (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
      }
      uint64_t v14 = *((void *)v4 + 9);
      if (v14) {
        MEMORY[0x25A2A6340](v14, 0x1000C4077774924);
      }
      std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__remove_node_pointer((uint64_t **)this, (uint64_t *)v4);
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,CLSqliteDatabaseManager::ConnectionState>,0>((uint64_t)v4 + 32);
      operator delete(v4);
    }
  }
LABEL_28:
  (*(void (**)(char *))(*(void *)v15 + 24))(v15);
}

void sub_25639E73C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  AutoLocker::~AutoLocker((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_30()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

std::string *std::pair<std::string,CLSqliteDatabaseManager::ConnectionState>::pair[abi:ne180100]<std::string const&,CLSqliteDatabaseManager::ConnectionState&,0>(std::string *this, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  long long v6 = *a3;
  this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a3 + 3), *((void *)a3 + 4));
  }
  else
  {
    long long v7 = *(long long *)((char *)a3 + 24);
    this[2].__r_.__value_.__r.__words[2] = *((void *)a3 + 5);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v7;
  }
  LODWORD(this[3].__r_.__value_.__l.__data_) = *((_DWORD *)a3 + 12);
  uint64_t v8 = (std::string *)((char *)this + 80);
  if (*((char *)a3 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)a3 + 7), *((void *)a3 + 8));
  }
  else
  {
    long long v9 = *(long long *)((char *)a3 + 56);
    this[4].__r_.__value_.__r.__words[0] = *((void *)a3 + 9);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  return this;
}

void sub_25639E878(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::__map_value_compare<std::string,std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::__map_value_compare<std::string,std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::__map_value_compare<std::string,std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,CLSqliteDatabaseManager::ConnectionState>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,CLSqliteDatabaseManager::ConnectionState>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    int v2 = *(void **)a1;
    operator delete(v2);
  }
}

_OWORD *std::__tree<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::__map_value_compare<std::string,std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>>>::__emplace_unique_key_args<std::string,std::pair<std::string,CLSqliteDatabaseManager::ConnectionState>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  long long v5 = (void **)std::__tree<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::__map_value_compare<std::string,std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  long long v6 = *v5;
  if (!*v5)
  {
    long long v7 = (uint64_t **)v5;
    long long v6 = operator new(0x88uLL);
    v10[1] = a1 + 1;
    void v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(_OWORD *)((char *)v6 + 56) = *(_OWORD *)(a3 + 24);
    *((void *)v6 + 9) = *(void *)(a3 + 40);
    *((void *)v6 + 12) = *(void *)(a3 + 64);
    void v6[5] = *(_OWORD *)(a3 + 48);
    *(void *)(a3 + 56) = 0;
    *(void *)(a3 + 64) = 0;
    *(void *)(a3 + 48) = 0;
    *((_DWORD *)v6 + 26) = *(_DWORD *)(a3 + 72);
    long long v8 = *(_OWORD *)(a3 + 80);
    *((void *)v6 + 16) = *(void *)(a3 + 96);
    v6[7] = v8;
    *(void *)(a3 + 80) = 0;
    *(void *)(a3 + CLMicroLocationSensorsLogic::stopOdometryMonitoringIfRunning(this + 88) = 0;
    *(void *)(a3 + 96) = 0;
    char v11 = 1;
    std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__insert_node_at(a1, v12, v7, (uint64_t *)v6);
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v6;
}

void *std::__tree<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::__map_value_compare<std::string,std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>>>::__find_equal<std::string>(uint64_t a1, void *a2, const void **a3)
{
  long long v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        long long v8 = (void *)v4;
        long long v9 = (const void **)(v4 + 32);
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v8;
        long long v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v7, v9, a3)) {
        break;
      }
      long long v5 = v8 + 1;
      uint64_t v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    long long v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  int v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,CLSqliteDatabaseManager::ConnectionState>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_25639EE78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25639F1CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void CLMicroLocationConfigurationTable::Entry::~Entry(void **this)
{
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_31()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

void CLMicroLocationLegacyEventLocalizationRequest::handleEvent(const std::string *a1@<X1>, double *a2@<X2>, char *a3@<X8>)
{
  CLMicroLocationProto::ReceivedEventAction::ReceivedEventAction((CLMicroLocationProto::ReceivedEventAction *)v14);
  v17 |= 4u;
  if (v16 == (std::string *)MEMORY[0x263F8C740]) {
    operator new();
  }
  std::string::operator=(v16, a1);
  int v6 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (v6 < 0)
  {
    if (a1->__r_.__value_.__l.__size_ != 18)
    {
LABEL_12:
      uint64_t v10 = 1;
      goto LABEL_19;
    }
    a1 = (const std::string *)a1->__r_.__value_.__r.__words[0];
  }
  else if (v6 != 18)
  {
    goto LABEL_12;
  }
  unint64_t v7 = 0x4E6F746966696361;
  unint64_t v8 = bswap64(a1->__r_.__value_.__r.__words[0]);
  if (v8 == 0x4E6F746966696361
    && (unint64_t v7 = 0x74696F6E43656E74, v8 = bswap64(a1->__r_.__value_.__l.__size_), v8 == 0x74696F6E43656E74)
    && (v8 = bswap32(LOWORD(a1->__r_.__value_.__r.__words[2])) >> 16, unint64_t v7 = 25970, v8 == 25970))
  {
    int v9 = 0;
  }
  else if (v8 < v7)
  {
    int v9 = -1;
  }
  else
  {
    int v9 = 1;
  }
  if (v9) {
    uint64_t v10 = 1;
  }
  else {
    uint64_t v10 = 3;
  }
LABEL_19:
  if (!CLMicroLocationProto::ReceivedEventActionType_IsValid((CLMicroLocationProto *)v10)) {
    __assert_rtn("set_receivedeventactiontype", "microlocation.pb.h", 13294, "::CLMicroLocationProto::ReceivedEventActionType_IsValid(value)");
  }
  v17 |= 2u;
  int v15 = v10;
  CLMicroLocationProtobufHelper::createRecordingEvent<CLMicroLocationProto::ReceivedEventAction>((CLMicroLocationProto::RecordingEvent *)v14, 0, 0, 0, (CLMicroLocationProto *)3, (uint64_t)v11, *a2);
  char v12 = 1;
  CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)v13, (const CLMicroLocationProto::RecordingEvent *)v11);
  *a3 = v12;
  CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)(a3 + 8), (const CLMicroLocationProto::RecordingEvent *)v13);
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v13);
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v11);
  CLMicroLocationProto::ReceivedEventAction::~ReceivedEventAction((CLMicroLocationProto::ReceivedEventAction *)v14);
}

void sub_25639F624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  CLMicroLocationProto::RecordingEvent::~RecordingEvent(v10);
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)&a10);
  CLMicroLocationProto::ReceivedEventAction::~ReceivedEventAction((CLMicroLocationProto::ReceivedEventAction *)(v11 - 80));
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationLegacyClient::CLMicroLocationLegacyClient(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(result + 2) = 0;
  *(unsigned char *)(result + 8) = 0;
  *(unsigned char *)(result + 16) = 0;
  *(unsigned char *)(result + 24) = 0;
  *(unsigned char *)(result + 32) = 0;
  *(unsigned char *)(result + 40) = 0;
  *(_WORD *)(result + 56) = 0;
  *(unsigned char *)(result + 73) = 0;
  *(void *)(result + 80) = a2;
  *(void *)(result + CLMicroLocationSensorsLogic::stopOdometryMonitoringIfRunning(this + 88) = a3;
  *(_WORD *)(result + 96) = 0;
  *(unsigned char *)(result + 98) = 0;
  *(_DWORD *)(result + 100) = 255;
  *(_WORD *)(result + 104) = 0;
  return result;
}

void CLMicroLocationLegacyClient::onBatteryState(CLMicroLocationLegacyClient *a1, char a2, double *a3)
{
  v16[38] = *MEMORY[0x263EF8340];
  CLMicroLocationLegacyEventBatteryState::handleEvent(a2, a3, v11);
  if (v11[0])
  {
    long long v5 = (CLMicroLocationEventLogger *)*((void *)a1 + 11);
    int v10 = 0;
    boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v10);
    int v6 = (CLMicroLocationProto::RecordingEvent *)boost::uuids::random_generator_pure::operator()((uint64_t)&v10);
    *(void *)&long long v14 = v6;
    *((void *)&v14 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v7;
    double v8 = *a3;
    int v9 = v13;
    if (!v13) {
      int v9 = *(int **)(CLMicroLocationProto::RecordingEvent::default_instance(v6) + 40);
    }
    CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::BatteryChargerConnected>(&v14, v9, (uint64_t)&v15, v8);
    CLMicroLocationEventLogger::logEvent(v5, &v15);
    CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v16);
    boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v10);
    CLMicroLocationLegacyClient::requestLocalizationOrRecordingIfPossible(a1, (const CLMicroLocationProto::RecordingEvent *)v12);
  }
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v12);
}

void sub_25639F798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11)
{
  CLMicroLocationProto::RecordingEvent::~RecordingEvent(v11);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::BatteryChargerConnected>(_OWORD *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  CLMicroLocationProto::ReceivedEvent::ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
  CLMicroLocationProtobufHelper::setSpecificLoggedEvent((CLMicroLocationProtobufHelper *)v9, (CLMicroLocationProto::ReceivedEvent *)a2, v8);
  CLMicroLocationLoggedEventsTable::Entry::Entry(a3, a1, a2[2], (CLMicroLocationProto::ReceivedEvent *)v9, a4);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
}

void sub_25639F850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void CLMicroLocationLegacyClient::onDisplayState(uint64_t a1, char a2, double *a3)
{
  v16[38] = *MEMORY[0x263EF8340];
  CLMicroLocationLegacyEventDisplayState::handleEvent((unsigned char *)(a1 + 2), a2, a3, v11);
  if (v11[0])
  {
    long long v5 = *(CLMicroLocationEventLogger **)(a1 + 88);
    int v10 = 0;
    boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v10);
    int v6 = (CLMicroLocationProto::RecordingEvent *)boost::uuids::random_generator_pure::operator()((uint64_t)&v10);
    *(void *)&long long v14 = v6;
    *((void *)&v14 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v7;
    double v8 = *a3;
    int v9 = v13;
    if (!v13) {
      int v9 = *(int **)(CLMicroLocationProto::RecordingEvent::default_instance(v6) + 32);
    }
    CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::BacklightOn>(&v14, v9, (uint64_t)&v15, v8);
    CLMicroLocationEventLogger::logEvent(v5, &v15);
    CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v16);
    boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v10);
    CLMicroLocationLegacyClient::requestLocalizationOrRecordingIfPossible((CLMicroLocationLegacyClient *)a1, (const CLMicroLocationProto::RecordingEvent *)v12);
  }
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v12);
}

void sub_25639F968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11)
{
  CLMicroLocationProto::RecordingEvent::~RecordingEvent(v11);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::BacklightOn>(_OWORD *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  CLMicroLocationProto::ReceivedEvent::ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
  CLMicroLocationProtobufHelper::setSpecificLoggedEvent((CLMicroLocationProtobufHelper *)v9, (CLMicroLocationProto::ReceivedEvent *)a2, v8);
  CLMicroLocationLoggedEventsTable::Entry::Entry(a3, a1, a2[4], (CLMicroLocationProto::ReceivedEvent *)v9, a4);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
}

void sub_25639FA20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t CLMicroLocationLegacyClient::onHomeKit(CLMicroLocationLegacyClient *a1, void *a2, double *a3)
{
  v25[38] = *MEMORY[0x263EF8340];
  CLMicroLocationLegacyEventHomeKit::handleEvent(a2, a3, v18);
  if (v18[0])
  {
    if (v22 == 9)
    {
      uint64_t v11 = (CLMicroLocationEventLogger *)*((void *)a1 + 11);
      int v17 = 0;
      boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v17);
      char v12 = (CLMicroLocationProto::RecordingEvent *)boost::uuids::random_generator_pure::operator()((uint64_t)&v17);
      *(void *)&long long v23 = v12;
      *((void *)&v23 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v13;
      double v14 = *a3;
      Entry v15 = v20;
      if (!v20) {
        Entry v15 = *(int **)(CLMicroLocationProto::RecordingEvent::default_instance(v12) + 56);
      }
      CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::HomeKitAccessory>(&v23, v15, (uint64_t)&v24, v14);
      CLMicroLocationEventLogger::logEvent(v11, &v24);
    }
    else
    {
      if (v22 != 10)
      {
LABEL_12:
        uint64_t v10 = CLMicroLocationLegacyClient::requestLocalizationOrRecordingIfPossible(a1, (const CLMicroLocationProto::RecordingEvent *)v19);
        goto LABEL_13;
      }
      long long v5 = (CLMicroLocationEventLogger *)*((void *)a1 + 11);
      int v17 = 0;
      boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v17);
      int v6 = (CLMicroLocationProto::RecordingEvent *)boost::uuids::random_generator_pure::operator()((uint64_t)&v17);
      *(void *)&long long v23 = v6;
      *((void *)&v23 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v7;
      double v8 = *a3;
      int v9 = v21;
      if (!v21) {
        int v9 = *(int **)(CLMicroLocationProto::RecordingEvent::default_instance(v6) + 64);
      }
      CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::HomeKitScene>(&v23, v9, (uint64_t)&v24, v8);
      CLMicroLocationEventLogger::logEvent(v5, &v24);
    }
    CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v25);
    boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v17);
    goto LABEL_12;
  }
  uint64_t v10 = 0;
LABEL_13:
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v19);
  return v10;
}

void sub_25639FBB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)(v12 + 32));
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&a11);
  CLMicroLocationProto::RecordingEvent::~RecordingEvent(v11);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::HomeKitScene>(_OWORD *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  CLMicroLocationProto::ReceivedEvent::ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
  CLMicroLocationProtobufHelper::setSpecificLoggedEvent((CLMicroLocationProtobufHelper *)v9, (CLMicroLocationProto::ReceivedEvent *)a2, v8);
  CLMicroLocationLoggedEventsTable::Entry::Entry(a3, a1, a2[12], (CLMicroLocationProto::ReceivedEvent *)v9, a4);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
}

void sub_25639FC74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::HomeKitAccessory>(_OWORD *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  CLMicroLocationProto::ReceivedEvent::ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
  CLMicroLocationProtobufHelper::setSpecificLoggedEvent((CLMicroLocationProtobufHelper *)v9, (CLMicroLocationProto::ReceivedEvent *)a2, v8);
  CLMicroLocationLoggedEventsTable::Entry::Entry(a3, a1, a2[16], (CLMicroLocationProto::ReceivedEvent *)v9, a4);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
}

void sub_25639FD00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void CLMicroLocationLegacyClient::onForcedRecording(CLMicroLocationLegacyClient *a1, double *a2)
{
  v15[38] = *MEMORY[0x263EF8340];
  CLMicroLocationLegacyEventForcedRecording::handleEvent(a2, v10);
  if (v10[0])
  {
    uint64_t v4 = (CLMicroLocationEventLogger *)*((void *)a1 + 11);
    int v9 = 0;
    boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v9);
    long long v5 = (CLMicroLocationProto::RecordingEvent *)boost::uuids::random_generator_pure::operator()((uint64_t)&v9);
    *(void *)&long long v13 = v5;
    *((void *)&v13 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v6;
    double v7 = *a2;
    double v8 = v12;
    if (!v12) {
      double v8 = *(int **)(CLMicroLocationProto::RecordingEvent::default_instance(v5) + 48);
    }
    CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::ForcedRecording>(&v13, v8, (uint64_t)&v14, v7);
    CLMicroLocationEventLogger::logEvent(v4, &v14);
    CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v15);
    boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v9);
    CLMicroLocationLegacyClient::requestLocalizationOrRecordingIfPossible(a1, (const CLMicroLocationProto::RecordingEvent *)v11);
  }
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v11);
}

void sub_25639FE18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11)
{
  CLMicroLocationProto::RecordingEvent::~RecordingEvent(v11);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::ForcedRecording>(_OWORD *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  CLMicroLocationProto::ReceivedEvent::ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
  CLMicroLocationProtobufHelper::setSpecificLoggedEvent((CLMicroLocationProtobufHelper *)v9, (CLMicroLocationProto::ReceivedEvent *)a2, v8);
  CLMicroLocationLoggedEventsTable::Entry::Entry(a3, a1, a2[2], (CLMicroLocationProto::ReceivedEvent *)v9, a4);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
}

void sub_25639FED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t CLMicroLocationLegacyClient::onRecordingRequest(CLMicroLocationLegacyClient *a1, uint64_t a2, void *a3, double *a4)
{
  v19[38] = *MEMORY[0x263EF8340];
  CLMicroLocationLegacyEventRecordingRequest::handleEvent(a2, a3, a4, v14);
  if (v14[0])
  {
    uint64_t v6 = (CLMicroLocationEventLogger *)*((void *)a1 + 11);
    int v13 = 0;
    boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v13);
    double v7 = (CLMicroLocationProto::RecordingEvent *)boost::uuids::random_generator_pure::operator()((uint64_t)&v13);
    *(void *)&long long v17 = v7;
    *((void *)&v17 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v8;
    double v9 = *a4;
    uint64_t v10 = v16;
    if (!v16) {
      uint64_t v10 = *(int **)(CLMicroLocationProto::RecordingEvent::default_instance(v7) + 88);
    }
    CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::RecordingRequest>(&v17, v10, (uint64_t)&v18, v9);
    CLMicroLocationEventLogger::logEvent(v6, &v18);
    CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v19);
    boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v13);
    uint64_t v11 = CLMicroLocationLegacyClient::requestLocalizationOrRecordingIfPossible(a1, (const CLMicroLocationProto::RecordingEvent *)v15);
  }
  else
  {
    uint64_t v11 = 0;
  }
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v15);
  return v11;
}

void sub_25639FFF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11)
{
  CLMicroLocationProto::RecordingEvent::~RecordingEvent(v11);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationLegacyClient::onLocalizationRequest(CLMicroLocationLegacyClient *a1, const std::string *a2, double *a3)
{
  v18[38] = *MEMORY[0x263EF8340];
  CLMicroLocationLegacyEventLocalizationRequest::handleEvent(a2, a3, v13);
  if (v13[0])
  {
    long long v5 = (CLMicroLocationEventLogger *)*((void *)a1 + 11);
    int v12 = 0;
    boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v12);
    uint64_t v6 = (CLMicroLocationProto::RecordingEvent *)boost::uuids::random_generator_pure::operator()((uint64_t)&v12);
    *(void *)&long long v16 = v6;
    *((void *)&v16 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v7;
    double v8 = *a3;
    double v9 = v15;
    if (!v15) {
      double v9 = *(int **)(CLMicroLocationProto::RecordingEvent::default_instance(v6) + 16);
    }
    CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::ReceivedEventAction>(&v16, v9, (uint64_t)&v17, v8);
    CLMicroLocationEventLogger::logEvent(v5, &v17);
    CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v18);
    boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v12);
    uint64_t v10 = CLMicroLocationLegacyClient::requestLocalizationOrRecordingIfPossible(a1, (const CLMicroLocationProto::RecordingEvent *)v14);
  }
  else
  {
    uint64_t v10 = 0;
  }
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v14);
  return v10;
}

void sub_2563A014C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11)
{
  CLMicroLocationProto::RecordingEvent::~RecordingEvent(v11);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationLegacyClient::donateTruthTagLabel(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  int v5 = *(char *)(a2 + 23);
  if (v5 < 0)
  {
    if (*(void *)(a2 + 8) != 23)
    {
LABEL_13:
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_40);
      }
      int v12 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        if (*(char *)(a2 + 23) >= 0) {
          int v13 = (void *)a2;
        }
        else {
          int v13 = *(void **)a2;
        }
        Entry v14 = [NSString stringWithUTF8String:v13];
        int v24 = 138412290;
        int v25 = v14;
        _os_log_impl(&dword_25631F000, v12, OS_LOG_TYPE_ERROR, "Unsupport labels form any other client than focus-mode ClientReceived: %@", (uint8_t *)&v24, 0xCu);
      }
      return 0;
    }
    uint64_t v6 = *(uint64_t **)a2;
  }
  else
  {
    uint64_t v6 = (uint64_t *)a2;
    if (v5 != 23) {
      goto LABEL_13;
    }
  }
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  uint64_t v9 = *(uint64_t *)((char *)v6 + 15);
  if (v7 != 0x6C7070612E6D6F63 || v8 != 0x7865746E6F632E65 || v9 != 0x6465726F74737478) {
    goto LABEL_13;
  }
  if (!*(unsigned char *)(a1 + 73)) {
    return 0;
  }
  uint64_t v16 = *(void *)(a1 + 57);
  uint64_t v17 = *(void *)(a1 + 65);
  uint64_t v18 = a4[1];
  uint64_t v19 = *a3;
  uint64_t v20 = a3[1];
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 80)
                                                                                                + 64);
  uint64_t v22 = *(void *)(a1 + 80);
  uint64_t v23 = *a4;
  return v21(v22, v16, v17, v23, v18, v19, v20);
}

void sub_2563A0378(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationLegacyClient::donateTruthTagLabelForRecordingEventsBetweenDates(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  id v9 = a4;
  id v10 = a5;
  int v11 = *(char *)(a2 + 23);
  if (v11 < 0)
  {
    if (*(void *)(a2 + 8) != 23)
    {
LABEL_13:
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_40);
      }
      uint64_t v18 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        if (*(char *)(a2 + 23) >= 0) {
          uint64_t v19 = (void *)a2;
        }
        else {
          uint64_t v19 = *(void **)a2;
        }
        uint64_t v20 = [NSString stringWithUTF8String:v19];
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v20;
        _os_log_impl(&dword_25631F000, v18, OS_LOG_TYPE_ERROR, "Unsupport labels form any other client than focus-mode ClientReceived: %@", (uint8_t *)&buf, 0xCu);
      }
      goto LABEL_21;
    }
    int v12 = *(uint64_t **)a2;
  }
  else
  {
    int v12 = (uint64_t *)a2;
    if (v11 != 23) {
      goto LABEL_13;
    }
  }
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  uint64_t v15 = *(uint64_t *)((char *)v12 + 15);
  if (v13 != 0x6C7070612E6D6F63 || v14 != 0x7865746E6F632E65 || v15 != 0x6465726F74737478) {
    goto LABEL_13;
  }
  if (*(unsigned char *)(a1 + 73))
  {
    uint64_t v23 = *(void *)(a1 + 80);
    uint64_t v24 = *(void *)(a1 + 57);
    uint64_t v25 = *(void *)(a1 + 65);
    int v27 = 0;
    boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v27);
    *(void *)&long long buf = boost::uuids::random_generator_pure::operator()((uint64_t)&v27);
    *((void *)&buf + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v26;
    uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, long long *, uint64_t, id, id))(*(void *)v23 + 80))(v23, v24, v25, &buf, a3, v9, v10);
    boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v27);
    goto LABEL_22;
  }
LABEL_21:
  uint64_t v21 = 0;
LABEL_22:

  return v21;
}

void sub_2563A0604(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationLegacyClient::setLowPowerMode(uint64_t this, char a2)
{
  *(unsigned char *)(this + 96) = a2;
  return this;
}

uint64_t CLMicroLocationLegacyClient::setAirplaneMode(uint64_t this, char a2)
{
  *(unsigned char *)(this + 97) = a2;
  return this;
}

uint64_t CLMicroLocationLegacyClient::setBuddyComplete(uint64_t this, char a2)
{
  *(unsigned char *)(this + 98) = a2;
  return this;
}

BOOL CLMicroLocationLegacyClient::isHomeKitRequest(CLMicroLocationLegacyClient *this, NSDictionary *a2)
{
  return CLMicroLocationLegacyEventHomeKit::isHomeControlSuggestionRequest((CLMicroLocationLegacyClient *)((char *)this + 3), a2);
}

void CLMicroLocationLegacyClient::databaseAvailable(CLMicroLocationLegacyClient *this)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (!*((unsigned char *)this + 56))
  {
    std::string::basic_string[abi:ne180100]<0>(v4, "milo-internal-legacy-client-name-unsupervised");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)[@"00000000-0000-0000-0000-000000000016" UTF8String]);
    CLMicroLocationProtobufHelper::uuidFromStdString((uint64_t)__p, (uint64_t)&v6);
    if (!v8) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    CLMicroLocationLegacyClient::tryCreateServiceAndConnect((uint64_t)this, (uint64_t *)v4, v6, v7, (uint64_t)&v9);
    *(_OWORD *)((char *)this + 40) = v9;
    *((unsigned char *)this + 56) = v10;
    if (v3 < 0) {
      operator delete(__p[0]);
    }
    if (v5 < 0) {
      operator delete(v4[0]);
    }
  }
  if (!*((unsigned char *)this + 73))
  {
    std::string::basic_string[abi:ne180100]<0>(v4, "focus-mode");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)[@"00000000-0000-0000-0000-000000000017" UTF8String]);
    CLMicroLocationProtobufHelper::uuidFromStdString((uint64_t)__p, (uint64_t)&v6);
    if (!v8) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    CLMicroLocationLegacyClient::tryCreateServiceAndConnect((uint64_t)this, (uint64_t *)v4, v6, v7, (uint64_t)&v9);
    *(_OWORD *)((char *)this + 57) = v9;
    *((unsigned char *)this + 73) = v10;
    if (v3 < 0) {
      operator delete(__p[0]);
    }
    if (v5 < 0) {
      operator delete(v4[0]);
    }
  }
}

void sub_2563A07F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void CLMicroLocationLegacyClient::tryCreateServiceAndConnect(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_40);
  }
  char v10 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v11 = a2;
    }
    else {
      uint64_t v11 = (uint64_t *)*a2;
    }
    int v12 = [NSString stringWithUTF8String:v11];
    uint64_t v13 = ULServiceTypeToString();
    *(_DWORD *)long long buf = 138412546;
    *(void *)&uint8_t buf[4] = v12;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v13;
    _os_log_impl(&dword_25631F000, v10, OS_LOG_TYPE_DEFAULT, "tryCreateServiceAndConnect: clientName: %@, serviceType: %@", buf, 0x16u);
  }
  uint64_t v14 = *(void *)(a1 + 80);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  (*(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t *, unsigned char *))(*(void *)v14 + 24))(buf, v14, a2, __p);
  if (v27 < 0) {
    operator delete(*(void **)__p);
  }
  if (*(void *)buf == *(void *)&buf[8])
  {
    char v16 = 0;
    char v15 = 0;
  }
  else
  {
    char v15 = **(unsigned char **)buf;
    v25[0] = *(void *)(*(void *)buf + 1);
    *(void *)((char *)v25 + 7) = *(void *)(*(void *)buf + 8);
    char v16 = 1;
  }
  uint64_t v17 = *(void *)(a1 + 80);
  char v22 = v15;
  *(void *)uint64_t v23 = v25[0];
  *(void *)&v23[7] = *(void *)((char *)v25 + 7);
  char v24 = v16;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, char *, uint64_t, uint64_t, unsigned char *))(*(void *)v17 + 32))(v17, a2, a3, a4, &v22, a3, a4, __p);
  if (v27 < 0) {
    operator delete(*(void **)__p);
  }
  if (v18 == -1)
  {
    *(void *)a5 = a3;
    *(void *)(a5 + 8) = a4;
    char v21 = 1;
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_40);
    }
    uint64_t v19 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v20 = [NSNumber numberWithInteger:v18];
      *(_DWORD *)std::string __p = 138412290;
      *(void *)&__p[4] = v20;
      _os_log_impl(&dword_25631F000, v19, OS_LOG_TYPE_DEFAULT, "tryCreateServiceAndConnect: failed to connect, errorId: %@", __p, 0xCu);
    }
    char v21 = 0;
    *(unsigned char *)a5 = 0;
  }
  *(unsigned char *)(a5 + 16) = v21;
  if (*(void *)buf)
  {
    *(void *)&uint8_t buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }
}

void sub_2563A0B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void CLMicroLocationLegacyClient::publishResultsToBiomeAndCoreDuet(CLMicroLocationLegacyClient *this, const CLMiLoService::ServiceDescriptor *a2, const CLMicroLocationResultToPublish *a3)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v7 = *((void *)a3 + 18);
  uint64_t v6 = *((void *)a3 + 19);
  if (v7 == v6)
  {
    BOOL v10 = 1;
  }
  else
  {
    uint64_t v8 = v7 + 4;
    do
    {
      int v9 = *(_DWORD *)(v8 - 4);
      BOOL v10 = v9 != 3;
      BOOL v11 = v9 == 3 || v8 == v6;
      v8 += 4;
    }
    while (!v11);
  }
  uint64_t v13 = *(void *)a3;
  uint64_t v12 = *((void *)a3 + 1);
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_40);
  }
  uint64_t v14 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    char v15 = [NSNumber numberWithBool:v10];
    char v16 = [NSNumber numberWithBool:v13 != v12];
    *(_DWORD *)long long buf = 138412546;
    *(void *)&uint8_t buf[4] = v15;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v16;
    _os_log_impl(&dword_25631F000, v14, OS_LOG_TYPE_DEFAULT, "Trying to publish results, fingerprintValid: %@, probabilityVectorValid: %@", buf, 0x16u);
  }
  if (v10 && v13 != v12)
  {
    if (*((unsigned char *)this + 56))
    {
      if (*((void *)this + 5) == *(void *)a2 && *((void *)this + 6) == *((void *)a2 + 1))
      {
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        char v24 = (uint64_t *)&v25;
        CFAbsoluteTime v23 = cl::chrono::CFAbsoluteTimeClock::now();
        *(void *)long long buf = "com.apple.magicalmoments";
        CLMicroLocationResultToPublish::CLMicroLocationResultToPublish((CLMicroLocationResultToPublish *)&buf[8], a3);
        std::__tree<std::__value_type<std::string,CLMicroLocationResultToPublish>,std::__map_value_compare<std::string,std::__value_type<std::string,CLMicroLocationResultToPublish>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLMicroLocationResultToPublish>>>::__emplace_multi<std::pair<char const*,CLMicroLocationResultToPublish>>(&v24, (uint64_t)buf);
        if (__p)
        {
          __int16 v34 = __p;
          operator delete(__p);
        }
        if (v32) {
          std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::~__hash_table((uint64_t)v31);
        }
        if (v30 && v29 < 0) {
          operator delete(v28);
        }
        if (*(void *)&buf[8])
        {
          *(void *)&uint8_t buf[16] = *(void *)&buf[8];
          operator delete(*(void **)&buf[8]);
        }
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_40);
        }
        uint64_t v18 = logObject_MicroLocation_Default;
        BOOL v19 = os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT);
        if (v19)
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_25631F000, v18, OS_LOG_TYPE_DEFAULT, "Publishing unsupervised localization results to Biome", buf, 2u);
        }
        CLMicroLocationLegacyClient::publishResults(v19, &v23);
        std::__tree<std::__value_type<std::string,CLMicroLocationResultToPublish>,std::__map_value_compare<std::string,std::__value_type<std::string,CLMicroLocationResultToPublish>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLMicroLocationResultToPublish>>>::destroy((uint64_t)&v24, v25);
      }
    }
    if (*((unsigned char *)this + 73))
    {
      if (*(void *)((char *)this + 57) == *(void *)a2 && *(void *)((char *)this + 65) == *((void *)a2 + 1))
      {
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        CFAbsoluteTime v23 = 0.0;
        char v24 = (uint64_t *)&v25;
        CFAbsoluteTime v23 = cl::chrono::CFAbsoluteTimeClock::now();
        *(void *)long long buf = "com.apple.microlocation.semisupervised";
        CLMicroLocationResultToPublish::CLMicroLocationResultToPublish((CLMicroLocationResultToPublish *)&buf[8], a3);
        std::__tree<std::__value_type<std::string,CLMicroLocationResultToPublish>,std::__map_value_compare<std::string,std::__value_type<std::string,CLMicroLocationResultToPublish>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLMicroLocationResultToPublish>>>::__emplace_multi<std::pair<char const*,CLMicroLocationResultToPublish>>(&v24, (uint64_t)buf);
        if (__p)
        {
          __int16 v34 = __p;
          operator delete(__p);
        }
        if (v32) {
          std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::~__hash_table((uint64_t)v31);
        }
        if (v30 && v29 < 0) {
          operator delete(v28);
        }
        if (*(void *)&buf[8])
        {
          *(void *)&uint8_t buf[16] = *(void *)&buf[8];
          operator delete(*(void **)&buf[8]);
        }
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_40);
        }
        char v21 = logObject_MicroLocation_Default;
        BOOL v22 = os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT);
        if (v22)
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_25631F000, v21, OS_LOG_TYPE_DEFAULT, "Publishing focusMode localization results to Biome", buf, 2u);
        }
        CLMicroLocationLegacyClient::publishResults(v22, &v23);
        std::__tree<std::__value_type<std::string,CLMicroLocationResultToPublish>,std::__map_value_compare<std::string,std::__value_type<std::string,CLMicroLocationResultToPublish>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLMicroLocationResultToPublish>>>::destroy((uint64_t)&v24, v25);
      }
    }
  }
}

void sub_2563A0F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  std::__tree<std::__value_type<std::string,CLMicroLocationResultToPublish>,std::__map_value_compare<std::string,std::__value_type<std::string,CLMicroLocationResultToPublish>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLMicroLocationResultToPublish>>>::destroy(v11, a11);
  _Unwind_Resume(a1);
}

uint64_t std::pair<char const*,CLMicroLocationResultToPublish>::~pair(uint64_t a1)
{
  int v2 = *(void **)(a1 + 152);
  if (v2)
  {
    *(void *)(a1 + 160) = v2;
    operator delete(v2);
  }
  if (*(unsigned char *)(a1 + 136)) {
    std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::~__hash_table(a1 + 96);
  }
  if (*(unsigned char *)(a1 + 88) && *(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  char v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(void *)(a1 + 16) = v3;
    operator delete(v3);
  }
  return a1;
}

void CLMicroLocationLegacyClient::publishResults(uint64_t a1, double *a2)
{
  if (([MEMORY[0x263F55810] isMac] & 1) == 0)
  {
    CLMicroLocationPublishHelper::duetEventsFromLocalizationResultMeasurement((uint64_t)a2);
    id v3 = (id)objc_claimAutoreleasedReturnValue();
    +[ULCoreDuetPublisher saveEventsToDuetStream:](ULCoreDuetPublisher, "saveEventsToDuetStream:");

    CLMicroLocationPublishHelper::biomeRestrictedEventsFromLocalizationResultMeasurement(a2);
    id v4 = (id)objc_claimAutoreleasedReturnValue();
    +[ULBiomePublisher saveMicroLocationLocalizationEvents:](ULBiomePublisher, "saveMicroLocationLocalizationEvents:");

    CLMicroLocationPublishHelper::biomePublicEventsFromLocalizationResultMeasurement((uint64_t)a2);
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    +[ULBiomePublisher saveMicroLocationVisitEvents:](ULBiomePublisher, "saveMicroLocationVisitEvents:");
  }
}

void sub_2563A1160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationLegacyClient::updateStatus(CLMicroLocationLegacyClient *this, const CLMiLoService::ServiceStatus *a2)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 56))
  {
    if (*((void *)this + 5) == *((void *)a2 + 4) && *((void *)this + 6) == *((void *)a2 + 5))
    {
      uint64_t v6 = (void *)*((void *)a2 + 1);
      id v5 = (void *)*((void *)a2 + 2);
      if (v6 == v5)
      {
        BOOL v8 = 0;
      }
      else
      {
        uint64_t v7 = (void *)*((void *)a2 + 1);
        while (*v7 != 1)
        {
          if (++v7 == v5)
          {
            uint64_t v7 = (void *)*((void *)a2 + 2);
            break;
          }
        }
        BOOL v8 = v7 != v5;
        while (*v6)
        {
          if (++v6 == v5)
          {
            uint64_t v6 = (void *)*((void *)a2 + 2);
            break;
          }
        }
      }
      uint64_t v28 = *(void *)a2;
      unsigned int v27 = *((_DWORD *)a2 + 42);
      int v9 = +[ULDefaultsSingleton shared];
      BOOL v10 = [v9 defaultsDictionary];

      uint64_t v11 = [NSString stringWithUTF8String:"ULNumFingerprintsThresholdForExpeditedRecordings"];
      uint64_t v12 = [v10 objectForKey:v11];
      if (v12 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
        unsigned int v13 = [v12 unsignedIntValue];
      }
      else {
        unsigned int v13 = [&unk_2704F17B8 unsignedIntValue];
      }
      unsigned int v14 = v13;

      *((unsigned char *)this + 105) = v28 != 1;
      BOOL v15 = v6 == v5 || v28 != 1;
      *((unsigned char *)this + 104) = v15;
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_40);
      }
      char v16 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        ULServiceQualityToString();
        id v17 = objc_claimAutoreleasedReturnValue();
        uint64_t v18 = [v17 UTF8String];
        int v19 = *((unsigned __int8 *)this + 105);
        int v20 = *((unsigned __int8 *)this + 104);
        *(_DWORD *)long long buf = 68290818;
        int v34 = 0;
        __int16 v35 = 2082;
        uint64_t v36 = "";
        __int16 v37 = 1026;
        BOOL v38 = v28 == 1;
        __int16 v39 = 1026;
        BOOL v40 = v8;
        __int16 v41 = 1026;
        BOOL v42 = v6 != v5;
        __int16 v43 = 1026;
        BOOL v44 = v27 < v14;
        __int16 v45 = 2082;
        uint64_t v46 = v18;
        __int16 v47 = 1026;
        int v48 = v19;
        __int16 v49 = 1026;
        int v50 = v20;
        _os_log_impl(&dword_25631F000, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Service Status update\", \"isSuspended\":%{public}hhd, \"isReasonModelUnavailable\":%{public}hhd, \"isReasonLocationNotSupported\":%{public}hhd, \"isLowNumberOfValidObservations\":%{public}hhd, \"quality\":%{public, location:escape_only}s, \"Localization Allowed\":%{public}hhd, \"Recording Allowed\":%{public}hhd}", buf, 0x40u);
      }
      int v21 = v28 == 1 && v8 || v27 < v14;
      if (v21 != 1)
      {
        if (*(void *)a2) {
          int v21 = 255;
        }
        else {
          int v21 = 2;
        }
      }
      *((_DWORD *)this + 25) = v21;
      CLMicroLocationProto::LegacyClientStatusUpdate::LegacyClientStatusUpdate((CLMicroLocationProto::LegacyClientStatusUpdate *)v30);
      unsigned int v22 = *((_DWORD *)this + 25);
      if (!CLMicroLocationProto::NumberOfObservationsStates_IsValid((CLMicroLocationProto *)v22)) {
        __assert_rtn("set_numberofobservationsstate", "microlocation.pb.h", 21378, "::CLMicroLocationProto::NumberOfObservationsStates_IsValid(value)");
      }
      uint64_t v23 = *((void *)a2 + 9);
      v31 |= 6u;
      v30[3] = v22;
      int v30[4] = v23;
      char v24 = (CLMicroLocationEventLogger *)*((void *)this + 11);
      int v29 = 0;
      boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v29);
      *(void *)&long long v32 = boost::uuids::random_generator_pure::operator()((uint64_t)&v29);
      *((void *)&v32 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v25;
      double v26 = cl::chrono::CFAbsoluteTimeClock::now();
      CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::LegacyClientStatusUpdate>(&v32, v30, (uint64_t)buf, v26);
      CLMicroLocationEventLogger::logEvent(v24, (Entry *)buf);
      CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)&v42);
      boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v29);
      CLMicroLocationProto::LegacyClientStatusUpdate::~LegacyClientStatusUpdate((CLMicroLocationProto::LegacyClientStatusUpdate *)v30);
    }
  }
}

void sub_2563A1524(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::LegacyClientStatusUpdate>(_OWORD *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  CLMicroLocationProto::ReceivedEvent::ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
  CLMicroLocationProtobufHelper::setSpecificLoggedEvent((CLMicroLocationProtobufHelper *)v9, (CLMicroLocationProto::ReceivedEvent *)a2, v8);
  CLMicroLocationLoggedEventsTable::Entry::Entry(a3, a1, a2[2], (CLMicroLocationProto::ReceivedEvent *)v9, a4);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
}

void sub_2563A161C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t CLMicroLocationLegacyClient::requestLocalizationIfPossible(CLMicroLocationLegacyClient *this, const CLMicroLocationProto::RecordingEvent *a2)
{
  v39[38] = *MEMORY[0x263EF8340];
  id v4 = (CLMicroLocationLegacyClient *)((char *)this + 8);
  int Parameters = CLMicroLocationLegacyThrottle::getParameters((CLMicroLocationLegacyClient *)((char *)this + 8), a2);
  double v6 = *((double *)a2 + 1);
  double v36 = v6;
  if (!Parameters) {
    return 0;
  }
  uint64_t LocalizationTime = CLMicroLocationLegacyThrottle::getLocalizationTime(v4);
  char v9 = v8;
  BOOL v10 = +[ULDefaultsSingleton shared];
  uint64_t v11 = [v10 defaultsDictionary];

  uint64_t v12 = [NSString stringWithUTF8String:"ULLocalizingThrottleDuration"];
  unsigned int v13 = [v11 objectForKey:v12];
  if (v13 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    int v14 = [v13 intValue];
  }
  else {
    int v14 = [&unk_2704F17E8 intValue];
  }
  int v15 = v14;

  if (CLMicroLocationLegacyThrottle::isThrottle(v6, (double)v15, (uint64_t)v4, Parameters, LocalizationTime, v9))
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_40);
    }
    char v16 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_25631F000, v16, OS_LOG_TYPE_DEBUG, "Throttled request", buf, 2u);
    }
    v17.n128_f64[0] = CLMicroLocationProto::LegacyThrottle::LegacyThrottle((CLMicroLocationProto::LegacyThrottle *)&v33);
    v35 |= 2u;
    if (v34 == MEMORY[0x263F8C740]) {
      operator new();
    }
    MEMORY[0x25A2A6080](v17);
    uint64_t v18 = (CLMicroLocationEventLogger *)*((void *)this + 11);
    int v32 = 0;
    boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v32);
    *(void *)&long long v37 = boost::uuids::random_generator_pure::operator()((uint64_t)&v32);
    *((void *)&v37 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v19;
    double v20 = cl::chrono::CFAbsoluteTimeClock::now();
    CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::LegacyThrottle>(&v37, &v33, (uint64_t)buf, v20);
    CLMicroLocationEventLogger::logEvent(v18, (Entry *)buf);
    CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v39);
    boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v32);
    CLMicroLocationProto::LegacyThrottle::~LegacyThrottle((CLMicroLocationProto::LegacyThrottle *)&v33);
    return 0;
  }
  if (*((unsigned char *)this + 56))
  {
    int v33 = 0;
    boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v33);
    *(void *)long long buf = boost::uuids::random_generator_pure::operator()((uint64_t)&v33);
    *(void *)&uint8_t buf[8] = v22;
    boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v33);
    if (!*((unsigned char *)this + 56)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    uint64_t v23 = (*(uint64_t (**)(void, void, void, unsigned char *, double *, BOOL))(**((void **)this + 10) + 48))(*((void *)this + 10), *((void *)this + 5), *((void *)this + 6), buf, &v36, Parameters == 1);
    uint64_t v21 = v23;
    char v24 = (char *)this + 73;
    if (!*((unsigned char *)this + 73))
    {
      if (!v23) {
        goto LABEL_25;
      }
LABEL_23:
      CLMicroLocationLegacyThrottle::setLocalizationTime((uint64_t)v4, (uint64_t *)&v36);
      uint64_t v21 = 1;
      goto LABEL_25;
    }
LABEL_21:
    int v33 = 0;
    boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v33);
    *(void *)long long buf = boost::uuids::random_generator_pure::operator()((uint64_t)&v33);
    *(void *)&uint8_t buf[8] = v25;
    boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v33);
    if (!*v24) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    if (((v21 | (*(unsigned int (**)(void, void, void, unsigned char *, double *, BOOL))(**((void **)this + 10) + 48))(*((void *)this + 10), *(void *)((char *)this + 57), *(void *)((char *)this + 65), buf, &v36, Parameters == 1)) & 1) == 0)
    {
      uint64_t v21 = 0;
      goto LABEL_25;
    }
    goto LABEL_23;
  }
  uint64_t v21 = 0;
  char v24 = (char *)this + 73;
  if (*((unsigned char *)this + 73)) {
    goto LABEL_21;
  }
LABEL_25:
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_40);
  }
  double v26 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v28 = CLMicroLocationProtobufHelper::getRecordingTriggerString(a2, v27);
    int v29 = (void *)v28;
    char v30 = @"NO";
    if (v21) {
      char v30 = @"YES";
    }
    *(_DWORD *)long long buf = 138412546;
    *(void *)&uint8_t buf[4] = v28;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v30;
    _os_log_impl(&dword_25631F000, v26, OS_LOG_TYPE_DEFAULT, "Localization requested, type: %@, success: %@", buf, 0x16u);
  }
  return v21;
}

void sub_2563A1A9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationLegacyClient::requestRecordingIfPossible(CLMicroLocationLegacyClient *this, const CLMicroLocationProto::RecordingEvent *a2)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  id v4 = (CLMicroLocationLegacyClient *)((char *)this + 8);
  unint64_t Parameters = CLMicroLocationLegacyThrottle::getParameters((CLMicroLocationLegacyClient *)((char *)this + 8), a2);
  double v6 = *((double *)a2 + 1);
  double v40 = v6;
  if (!*((unsigned char *)this + 56)) {
    return 0;
  }
  unint64_t v7 = HIDWORD(Parameters);
  BOOL v8 = !*((unsigned char *)this + 73) || HIDWORD(Parameters) == 0;
  if (v8 || *((unsigned char *)this + 96) || *((unsigned char *)this + 97) || !*((unsigned char *)this + 98)) {
    return 0;
  }
  uint64_t v11 = +[ULDefaultsSingleton shared];
  uint64_t v12 = [v11 defaultsDictionary];

  unsigned int v13 = [NSString stringWithUTF8String:"ULRecordingThrottleDuration"];
  int v14 = [v12 objectForKey:v13];
  if (!v14) {
    goto LABEL_14;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    int v15 = [v14 intValue];
  }
  else {
LABEL_14:
  }
    int v15 = [&unk_2704F1800 intValue];
  int v16 = v15;

  uint64_t v17 = *((_DWORD *)this + 25) == 1 ? ULSettings::get<ULSettings::RecordingThrottleDurationUnstableModel>() : v16;
  uint64_t RecordingTime = CLMicroLocationLegacyThrottle::getRecordingTime(v4);
  uint64_t isThrottle = CLMicroLocationLegacyThrottle::isThrottle(v6, (double)v17, (uint64_t)v4, v7, RecordingTime, v19);
  if (isThrottle) {
    return 0;
  }
  if ((*((unsigned char *)a2 + 141) & 4) == 0) {
    goto LABEL_27;
  }
  uint64_t v21 = *((void *)a2 + 11);
  if (!v21)
  {
    uint64_t isThrottle = CLMicroLocationProto::RecordingEvent::default_instance((CLMicroLocationProto::RecordingEvent *)isThrottle);
    uint64_t v21 = *(void *)(isThrottle + 88);
  }
  if ((*(unsigned char *)(v21 + 44) & 8) == 0) {
    goto LABEL_27;
  }
  uint64_t v22 = *((void *)a2 + 11);
  if (!v22) {
    uint64_t v22 = *(void *)(CLMicroLocationProto::RecordingEvent::default_instance((CLMicroLocationProto::RecordingEvent *)isThrottle)
  }
                    + 88);
  CLMicroLocationProtobufHelper::uuidFromProtobuf(*(uint64_t ***)(v22 + 24), buf);
  if (buf[16])
  {
    uint64_t v23 = *(void *)buf;
    uint64_t v24 = *(void *)&buf[8];
  }
  else
  {
LABEL_27:
    *(_DWORD *)long long buf = 0;
    boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)buf);
    uint64_t v23 = boost::uuids::random_generator_pure::operator()((uint64_t)buf);
    uint64_t v24 = v25;
    boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)buf);
  }
  if (!*((unsigned char *)this + 56))
  {
    int v31 = 0;
    uint64_t v9 = 0;
    if (!*((unsigned char *)this + 73)) {
      goto LABEL_35;
    }
LABEL_33:
    uint64_t v32 = *((void *)this + 10);
    uint64_t v33 = *(void *)((char *)this + 57);
    uint64_t v34 = *(void *)((char *)this + 65);
    v42[0] = 0;
    v42[16] = 0;
    if (((v31 | (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned char *, double *))(*(void *)v32 + 56))(v32, v33, v34, v23, v24, v42, &v40)) & 1) == 0)goto LABEL_31; {
LABEL_34:
    }
    CLMicroLocationLegacyThrottle::setRecordingTime((uint64_t)v4, (uint64_t *)&v40);
    uint64_t v9 = 1;
    goto LABEL_35;
  }
  uint64_t v26 = *((void *)this + 10);
  uint64_t v27 = *((void *)this + 5);
  uint64_t v28 = *((void *)this + 6);
  *(_DWORD *)long long buf = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)buf);
  uint64_t v29 = boost::uuids::random_generator_pure::operator()((uint64_t)buf);
  v43[0] = 0;
  v43[16] = 0;
  int v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned char *, double *))(*(void *)v26 + 56))(v26, v27, v28, v29, v30, v43, &v40);
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)buf);
  if (*((unsigned char *)this + 73)) {
    goto LABEL_33;
  }
  if (v31) {
    goto LABEL_34;
  }
LABEL_31:
  uint64_t v9 = 0;
LABEL_35:
  int v35 = _CLLogObjectForCategory_MicroLocation_Default();
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v37 = CLMicroLocationProtobufHelper::getRecordingTriggerString(a2, v36);
    BOOL v38 = (void *)v37;
    __int16 v39 = @"NO";
    if (v9) {
      __int16 v39 = @"YES";
    }
    *(_DWORD *)long long buf = 138412546;
    *(void *)&uint8_t buf[4] = v37;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v39;
    _os_log_impl(&dword_25631F000, v35, OS_LOG_TYPE_DEFAULT, "Recording requested, type: %@, success: %@", buf, 0x16u);
  }
  return v9;
}

void sub_2563A1ED4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::LegacyThrottle>(_OWORD *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  CLMicroLocationProto::ReceivedEvent::ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
  CLMicroLocationProtobufHelper::setSpecificLoggedEvent((CLMicroLocationProtobufHelper *)v9, (CLMicroLocationProto::ReceivedEvent *)a2, v8);
  CLMicroLocationLoggedEventsTable::Entry::Entry(a3, a1, a2[4], (CLMicroLocationProto::ReceivedEvent *)v9, a4);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
}

void sub_2563A1FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ULSettings::get<ULSettings::RecordingThrottleDurationUnstableModel>()
{
  os_log_t v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  int v2 = [NSString stringWithUTF8String:"ULRecordingThrottleDurationUnstableModel"];
  id v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    int v4 = [v3 intValue];
  }
  else {
    int v4 = [&unk_2704F17D0 intValue];
  }
  uint64_t v5 = v4;

  return v5;
}

void sub_2563A2088(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_32()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

void CLMicroLocationResultToPublish::CLMicroLocationResultToPublish(CLMicroLocationResultToPublish *this, const CLMicroLocationResultToPublish *a2)
{
  *(void *)this = 0;
  *((void *)this + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0;
  *((void *)this + 2) = 0;
  std::vector<CLMicroLocationResultInternal>::__init_with_size[abi:ne180100]<CLMicroLocationResultInternal*,CLMicroLocationResultInternal*>(this, *(const void **)a2, *((void *)a2 + 1), (uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 5);
  long long v4 = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)this + 33) = *(_OWORD *)((char *)a2 + 33);
  *(_OWORD *)((char *)this + 24) = v4;
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 56), (long long *)((char *)a2 + 56));
  std::__optional_copy_base<std::unordered_map<std::string,AnchorValueStatistics>,false>::__optional_copy_base[abi:ne180100]((unsigned char *)this + 88, (uint64_t)a2 + 88);
  int v5 = *((_DWORD *)a2 + 34);
  *((void *)this + 18) = 0;
  *((_DWORD *)this + 34) = v5;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  std::vector<CLMicroLocationProto::ConfidenceReason>::__init_with_size[abi:ne180100]<CLMicroLocationProto::ConfidenceReason*,CLMicroLocationProto::ConfidenceReason*>((void *)this + 18, *((const void **)a2 + 18), *((void *)a2 + 19), (uint64_t)(*((void *)a2 + 19) - *((void *)a2 + 18)) >> 2);
}

void sub_2563A21A8(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 128)) {
    std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::~__hash_table(v3);
  }
  if (*(unsigned char *)(v1 + 80) && *(char *)(v1 + 79) < 0) {
    operator delete(*v2);
  }
  int v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<CLMicroLocationResultInternal>::__init_with_size[abi:ne180100]<CLMicroLocationResultInternal*,CLMicroLocationResultInternal*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    double v6 = result;
    uint64_t result = std::vector<CLMiLoOdometryTable::Entry>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    uint64_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8 - 4);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2563A225C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *std::__optional_copy_base<std::unordered_map<std::string,AnchorValueStatistics>,false>::__optional_copy_base[abi:ne180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[40] = 0;
  if (*(unsigned char *)(a2 + 40))
  {
    std::unordered_map<std::string,AnchorValueStatistics>::unordered_map((uint64_t)a1, a2);
    a1[40] = 1;
  }
  return a1;
}

void sub_2563A22BC(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 40)) {
    std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::~__hash_table(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,CLMicroLocationResultToPublish>,std::__map_value_compare<std::string,std::__value_type<std::string,CLMicroLocationResultToPublish>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLMicroLocationResultToPublish>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,CLMicroLocationResultToPublish>,std::__map_value_compare<std::string,std::__value_type<std::string,CLMicroLocationResultToPublish>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLMicroLocationResultToPublish>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,CLMicroLocationResultToPublish>,std::__map_value_compare<std::string,std::__value_type<std::string,CLMicroLocationResultToPublish>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLMicroLocationResultToPublish>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,CLMicroLocationResultToPublish>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,CLMicroLocationResultToPublish>,0>(uint64_t a1)
{
  int v2 = *(void **)(a1 + 168);
  if (v2)
  {
    *(void *)(a1 + 176) = v2;
    operator delete(v2);
  }
  if (*(unsigned char *)(a1 + 152)) {
    std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::~__hash_table(a1 + 112);
  }
  if (*(unsigned char *)(a1 + 104) && *(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  uint64_t v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    long long v4 = *(void **)a1;
    operator delete(v4);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,CLMicroLocationResultToPublish>,std::__map_value_compare<std::string,std::__value_type<std::string,CLMicroLocationResultToPublish>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLMicroLocationResultToPublish>>>::__emplace_multi<std::pair<char const*,CLMicroLocationResultToPublish>>(uint64_t **a1, uint64_t a2)
{
  std::__tree<std::__value_type<std::string,CLMicroLocationResultToPublish>,std::__map_value_compare<std::string,std::__value_type<std::string,CLMicroLocationResultToPublish>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLMicroLocationResultToPublish>>>::__construct_node<std::pair<char const*,CLMicroLocationResultToPublish>>((uint64_t)a1, a2, (uint64_t)v7);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,CLMicroLocationResultToPublish>,std::__map_value_compare<std::string,std::__value_type<std::string,CLMicroLocationResultToPublish>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLMicroLocationResultToPublish>>>::__find_leaf_high((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__insert_node_at(a1, v6, leaf_high, v7[0]);
  long long v4 = v7[0];
  v7[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,CLMicroLocationResultToPublish>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,CLMicroLocationResultToPublish>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return v4;
}

void sub_2563A2430(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,CLMicroLocationResultToPublish>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,CLMicroLocationResultToPublish>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<std::string,CLMicroLocationResultToPublish>,std::__map_value_compare<std::string,std::__value_type<std::string,CLMicroLocationResultToPublish>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLMicroLocationResultToPublish>>>::__construct_node<std::pair<char const*,CLMicroLocationResultToPublish>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0xE0uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,CLMicroLocationResultToPublish>::pair[abi:ne180100]<char const*,CLMicroLocationResultToPublish,0>((uint64_t)v6 + 32, a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_2563A249C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,CLMicroLocationResultToPublish>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,CLMicroLocationResultToPublish>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<std::string,CLMicroLocationResultToPublish>,std::__map_value_compare<std::string,std::__value_type<std::string,CLMicroLocationResultToPublish>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLMicroLocationResultToPublish>>>::__find_leaf_high(uint64_t a1, void *a2, const void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        uint64_t v5 = (void *)v4;
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v5;
        uint64_t result = v5;
        if (!*v5) {
          goto LABEL_9;
        }
      }
      uint64_t v4 = v5[1];
    }
    while (v4);
    uint64_t result = v5 + 1;
  }
  else
  {
    uint64_t result = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v5;
  return result;
}

uint64_t std::pair<std::string const,CLMicroLocationResultToPublish>::pair[abi:ne180100]<char const*,CLMicroLocationResultToPublish,0>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = std::string::basic_string[abi:ne180100]<0>((void *)a1, *(char **)a2);
  v4[3] = 0;
  v4[4] = 0;
  void v4[5] = 0;
  *(_OWORD *)(v4 + 3) = *(_OWORD *)(a2 + 8);
  void v4[5] = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 41);
  *((unsigned char *)v4 + 80) = 0;
  *(_OWORD *)((char *)v4 + 57) = v6;
  *((_OWORD *)v4 + 3) = v5;
  *((unsigned char *)v4 + 104) = 0;
  if (*(unsigned char *)(a2 + 88))
  {
    long long v7 = *(_OWORD *)(a2 + 64);
    v4[12] = *(void *)(a2 + 80);
    *((_OWORD *)v4 + 5) = v7;
    *(void *)(a2 + 72) = 0;
    *(void *)(a2 + 80) = 0;
    *(void *)(a2 + 64) = 0;
    *(unsigned char *)(a1 + 104) = 1;
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  if (*(unsigned char *)(a2 + 136))
  {
    std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__hash_table(a1 + 112, (uint64_t *)(a2 + 96));
    *(unsigned char *)(a1 + 152) = 1;
  }
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 144);
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 184) = *(void *)(a2 + 168);
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + 168) = 0;
  return a1;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,CLMicroLocationResultToPublish>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,CLMicroLocationResultToPublish>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  int v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,CLMicroLocationResultToPublish>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void *CLMicroLocationCoreAnalyticsPublishHelper::generationAlgorithmToString@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a2, off_2653F99C0[a1]);
}

id CLMicroLocationCoreAnalyticsPublishHelper::initializeModelLearningEventMetricsDict(int a1, int a2, const std::string *a3)
{
  if (a1)
  {
    long long v5 = [MEMORY[0x263EFF9A0] dictionary];
    long long v6 = NSString;
    CLMicroLocationProtobufHelper::ModelTypeToDomain(a2, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    uint64_t v8 = [v6 stringWithUTF8String:p_p];
    [v5 setObject:v8 forKeyedSubscript:@"domain"];

    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    [v5 setObject:MEMORY[0x263EFFA88] forKeyedSubscript:@"cancelled"];
    [v5 setObject:MEMORY[0x263EFFA80] forKeyedSubscript:@"valid"];
    if (a3[1].__r_.__value_.__s.__data_[0])
    {
      uint64_t v9 = NSString;
      CLMicroLocationClientUtils::getClientIdFromClientIdAndServiceUuid(a3, &__p);
      BOOL v10 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      uint64_t v11 = [v9 stringWithUTF8String:v10];
      [v5 setObject:v11 forKeyedSubscript:@"clientIdentifier"];

      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
  else
  {
    long long v5 = 0;
  }
  return v5;
}

void sub_2563A27E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void CLMicroLocationCoreAnalyticsPublishHelper::updateModelRfCharacteristics(void *a1, CLMicroLocationFingerprintVector *a2, CLMicroLocationFingerprintVector *a3, unsigned __int8 a4, double a5)
{
  double v84 = a5;
  id v8 = a1;
  if (v8)
  {
    long long v81 = 0u;
    long long v82 = 0u;
    int v83 = 1065353216;
    unint64_t v9 = CLMicroLocationFingerprintVector::size(a2);
    uint64_t v10 = a4;
    if (a4) {
      v9 += CLMicroLocationFingerprintVector::size(a3);
    }
    uint64_t v11 = [NSNumber numberWithUnsignedLong:v9];
    [v8 setObject:v11 forKeyedSubscript:@"numFingerprints"];

    if (5 * (v9 / 5) >= 0x1F4) {
      unint64_t v12 = 500;
    }
    else {
      unint64_t v12 = 5 * (v9 / 5);
    }
    unsigned int v13 = [NSNumber numberWithUnsignedLong:v12];
    [v8 setObject:v13 forKeyedSubscript:@"numFingerprintsBounded"];

    if (v9)
    {
      double v79 = 1.79769313e308;
      double v80 = -1.79769313e308;
      double v77 = 1.79769313e308;
      double v78 = -1.79769313e308;
      v75[1] = 0;
      double v76 = 0.0;
      uint64_t v74 = (uint64_t *)v75;
      v75[0] = 0;
      v73[0] = 0;
      v73[1] = 0;
      v71[1] = 0;
      id v72 = (uint64_t *)v73;
      double v70 = (uint64_t *)v71;
      v71[0] = 0;
      uint64_t v68 = -1;
      uint64_t v69 = 0;
      unint64_t v67 = 0;
      v66[0] = &v84;
      v66[1] = &v81;
      void v66[2] = &v80;
      v66[3] = &v79;
      v66[4] = &v78;
      v66[5] = &v77;
      void v66[6] = &v76;
      v66[7] = &v74;
      v66[8] = &v72;
      v66[9] = &v70;
      v66[10] = &v69;
      v66[11] = &v68;
      v66[12] = &v67;
      CLMicroLocationCoreAnalyticsPublishHelper::updateModelRfCharacteristics(NSMutableDictionary *,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>,CLMicroLocationFingerprintVector const&,std::optional<std::reference_wrapper<CLMicroLocationFingerprintVector const>>)::$_0::operator()((uint64_t)v66, a2);
      if (v10) {
        CLMicroLocationCoreAnalyticsPublishHelper::updateModelRfCharacteristics(NSMutableDictionary *,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>,CLMicroLocationFingerprintVector const&,std::optional<std::reference_wrapper<CLMicroLocationFingerprintVector const>>)::$_0::operator()((uint64_t)v66, a3);
      }
      int v14 = [NSNumber numberWithDouble:v80];
      [v8 setObject:v14 forKeyedSubscript:@"ageOfOldestFingerprint"];

      int v15 = [NSNumber numberWithInt:(int)v80];
      [v8 setObject:v15 forKeyedSubscript:@"ageOfOldestFingerprintBounded"];

      int v16 = [NSNumber numberWithDouble:v79];
      [v8 setObject:v16 forKeyedSubscript:@"ageOfNewestFingerprint"];

      uint64_t v17 = [NSNumber numberWithDouble:v78];
      [v8 setObject:v17 forKeyedSubscript:@"maxFingerprintDuration"];

      uint64_t v18 = [NSNumber numberWithDouble:v77];
      [v8 setObject:v18 forKeyedSubscript:@"minFingerprintDuration"];

      double v19 = (double)v9;
      double v20 = [NSNumber numberWithDouble:v76 / (double)v9];
      [v8 setObject:v20 forKeyedSubscript:@"avgFingerprintDuration"];

      uint64_t v21 = [NSNumber numberWithUnsignedLong:v69];
      [v8 setObject:v21 forKeyedSubscript:@"maxFingerprintSize"];

      uint64_t v22 = [NSNumber numberWithUnsignedLong:v68];
      [v8 setObject:v22 forKeyedSubscript:@"minFingerprintSize"];

      uint64_t v23 = [NSNumber numberWithDouble:(double)v67 / (double)v9];
      [v8 setObject:v23 forKeyedSubscript:@"avgFingerprintSize"];

      uint64_t v24 = v71[0];
      if (v71[0])
      {
        uint64_t v25 = (int *)v71;
        uint64_t v26 = (int *)v71[0];
        do
        {
          uint64_t v27 = v26;
          uint64_t v28 = v25;
          int v29 = v26[8];
          if (v29 >= 1) {
            uint64_t v25 = v26;
          }
          else {
            v26 += 2;
          }
          uint64_t v26 = *(int **)v26;
        }
        while (v26);
        if (v25 != (int *)v71)
        {
          if (v29 < 1) {
            uint64_t v27 = v28;
          }
          if (v27[8] <= 1)
          {
            int v65 = 1;
            std::string v85 = &v65;
            uint64_t v30 = objc_msgSend(NSNumber, "numberWithUnsignedLong:", std::__tree<std::__value_type<CLMicroLocationProto::DataType,unsigned long>,std::__map_value_compare<CLMicroLocationProto::DataType,std::__value_type<CLMicroLocationProto::DataType,unsigned long>,std::less<CLMicroLocationProto::DataType>,true>,std::allocator<std::__value_type<CLMicroLocationProto::DataType,unsigned long>>>::__emplace_unique_key_args<CLMicroLocationProto::DataType,std::piecewise_construct_t const&,std::tuple<CLMicroLocationProto::DataType const&>,std::tuple<>>(&v74, &v65, (uint64_t)&std::piecewise_construct, &v85)[5]);
            [v8 setObject:v30 forKeyedSubscript:@"maxWifiFingerprintSize"];

            int v65 = 1;
            std::string v85 = &v65;
            int v31 = objc_msgSend(NSNumber, "numberWithUnsignedLong:", std::__tree<std::__value_type<CLMicroLocationProto::DataType,unsigned long>,std::__map_value_compare<CLMicroLocationProto::DataType,std::__value_type<CLMicroLocationProto::DataType,unsigned long>,std::less<CLMicroLocationProto::DataType>,true>,std::allocator<std::__value_type<CLMicroLocationProto::DataType,unsigned long>>>::__emplace_unique_key_args<CLMicroLocationProto::DataType,std::piecewise_construct_t const&,std::tuple<CLMicroLocationProto::DataType const&>,std::tuple<>>(&v72, &v65, (uint64_t)&std::piecewise_construct, &v85)[5]);
            [v8 setObject:v31 forKeyedSubscript:@"minWifiFingerprintSize"];

            int v65 = 1;
            std::string v85 = &v65;
            uint64_t v32 = objc_msgSend(NSNumber, "numberWithDouble:", (double)(unint64_t)std::__tree<std::__value_type<CLMicroLocationProto::DataType,unsigned long>,std::__map_value_compare<CLMicroLocationProto::DataType,std::__value_type<CLMicroLocationProto::DataType,unsigned long>,std::less<CLMicroLocationProto::DataType>,true>,std::allocator<std::__value_type<CLMicroLocationProto::DataType,unsigned long>>>::__emplace_unique_key_args<CLMicroLocationProto::DataType,std::piecewise_construct_t const&,std::tuple<CLMicroLocationProto::DataType const&>,std::tuple<>>(&v70, &v65, (uint64_t)&std::piecewise_construct, &v85)[5]/ v19);
            [v8 setObject:v32 forKeyedSubscript:@"avgWifiFingerprintSize"];

            uint64_t v24 = v71[0];
          }
        }
        if (v24)
        {
          uint64_t v33 = (int *)v71;
          uint64_t v34 = (int *)v24;
          do
          {
            int v35 = v34;
            double v36 = v33;
            int v37 = v34[8];
            if (v37 >= 5) {
              uint64_t v33 = v34;
            }
            else {
              v34 += 2;
            }
            uint64_t v34 = *(int **)v34;
          }
          while (v34);
          if (v33 != (int *)v71)
          {
            if (v37 < 5) {
              int v35 = v36;
            }
            if (v35[8] <= 5)
            {
              int v65 = 5;
              std::string v85 = &v65;
              BOOL v38 = objc_msgSend(NSNumber, "numberWithUnsignedLong:", std::__tree<std::__value_type<CLMicroLocationProto::DataType,unsigned long>,std::__map_value_compare<CLMicroLocationProto::DataType,std::__value_type<CLMicroLocationProto::DataType,unsigned long>,std::less<CLMicroLocationProto::DataType>,true>,std::allocator<std::__value_type<CLMicroLocationProto::DataType,unsigned long>>>::__emplace_unique_key_args<CLMicroLocationProto::DataType,std::piecewise_construct_t const&,std::tuple<CLMicroLocationProto::DataType const&>,std::tuple<>>(&v74, &v65, (uint64_t)&std::piecewise_construct, &v85)[5]);
              [v8 setObject:v38 forKeyedSubscript:@"maxBleFingerprintSize"];

              int v65 = 5;
              std::string v85 = &v65;
              __int16 v39 = objc_msgSend(NSNumber, "numberWithUnsignedLong:", std::__tree<std::__value_type<CLMicroLocationProto::DataType,unsigned long>,std::__map_value_compare<CLMicroLocationProto::DataType,std::__value_type<CLMicroLocationProto::DataType,unsigned long>,std::less<CLMicroLocationProto::DataType>,true>,std::allocator<std::__value_type<CLMicroLocationProto::DataType,unsigned long>>>::__emplace_unique_key_args<CLMicroLocationProto::DataType,std::piecewise_construct_t const&,std::tuple<CLMicroLocationProto::DataType const&>,std::tuple<>>(&v72, &v65, (uint64_t)&std::piecewise_construct, &v85)[5]);
              [v8 setObject:v39 forKeyedSubscript:@"minBleFingerprintSize"];

              int v65 = 5;
              std::string v85 = &v65;
              double v40 = objc_msgSend(NSNumber, "numberWithDouble:", (double)(unint64_t)std::__tree<std::__value_type<CLMicroLocationProto::DataType,unsigned long>,std::__map_value_compare<CLMicroLocationProto::DataType,std::__value_type<CLMicroLocationProto::DataType,unsigned long>,std::less<CLMicroLocationProto::DataType>,true>,std::allocator<std::__value_type<CLMicroLocationProto::DataType,unsigned long>>>::__emplace_unique_key_args<CLMicroLocationProto::DataType,std::piecewise_construct_t const&,std::tuple<CLMicroLocationProto::DataType const&>,std::tuple<>>(&v70, &v65, (uint64_t)&std::piecewise_construct, &v85)[5]/ v19);
              [v8 setObject:v40 forKeyedSubscript:@"avgBleFingerprintSize"];

              uint64_t v24 = v71[0];
            }
          }
          if (v24)
          {
            __int16 v41 = v71;
            do
            {
              BOOL v42 = v24;
              __int16 v43 = v41;
              int v44 = *((_DWORD *)v24 + 8);
              __int16 v45 = v24 + 1;
              if (v44 >= 6)
              {
                __int16 v45 = v42;
                __int16 v41 = (void **)v42;
              }
              uint64_t v24 = (void *)*v45;
            }
            while (v24);
            if (v41 != v71)
            {
              uint64_t v46 = (int *)(v44 >= 6 ? v42 : v43);
              if (v46[8] <= 6)
              {
                int v65 = 6;
                std::string v85 = &v65;
                __int16 v47 = objc_msgSend(NSNumber, "numberWithUnsignedLong:", std::__tree<std::__value_type<CLMicroLocationProto::DataType,unsigned long>,std::__map_value_compare<CLMicroLocationProto::DataType,std::__value_type<CLMicroLocationProto::DataType,unsigned long>,std::less<CLMicroLocationProto::DataType>,true>,std::allocator<std::__value_type<CLMicroLocationProto::DataType,unsigned long>>>::__emplace_unique_key_args<CLMicroLocationProto::DataType,std::piecewise_construct_t const&,std::tuple<CLMicroLocationProto::DataType const&>,std::tuple<>>(&v74, &v65, (uint64_t)&std::piecewise_construct, &v85)[5]);
                [v8 setObject:v47 forKeyedSubscript:@"maxUwbFingerprintSize"];

                int v65 = 6;
                std::string v85 = &v65;
                int v48 = objc_msgSend(NSNumber, "numberWithUnsignedLong:", std::__tree<std::__value_type<CLMicroLocationProto::DataType,unsigned long>,std::__map_value_compare<CLMicroLocationProto::DataType,std::__value_type<CLMicroLocationProto::DataType,unsigned long>,std::less<CLMicroLocationProto::DataType>,true>,std::allocator<std::__value_type<CLMicroLocationProto::DataType,unsigned long>>>::__emplace_unique_key_args<CLMicroLocationProto::DataType,std::piecewise_construct_t const&,std::tuple<CLMicroLocationProto::DataType const&>,std::tuple<>>(&v72, &v65, (uint64_t)&std::piecewise_construct, &v85)[5]);
                [v8 setObject:v48 forKeyedSubscript:@"minUwbFingerprintSize"];

                int v65 = 6;
                std::string v85 = &v65;
                __int16 v49 = objc_msgSend(NSNumber, "numberWithDouble:", (double)(unint64_t)std::__tree<std::__value_type<CLMicroLocationProto::DataType,unsigned long>,std::__map_value_compare<CLMicroLocationProto::DataType,std::__value_type<CLMicroLocationProto::DataType,unsigned long>,std::less<CLMicroLocationProto::DataType>,true>,std::allocator<std::__value_type<CLMicroLocationProto::DataType,unsigned long>>>::__emplace_unique_key_args<CLMicroLocationProto::DataType,std::piecewise_construct_t const&,std::tuple<CLMicroLocationProto::DataType const&>,std::tuple<>>(&v70, &v65, (uint64_t)&std::piecewise_construct, &v85)[5]/ v19);
                [v8 setObject:v49 forKeyedSubscript:@"avgUwbFingerprintSize"];
              }
            }
          }
        }
      }
      int v50 = (uint64_t *)v82;
      if ((void)v82)
      {
        uint64_t v51 = 0;
        do
        {
          if (*((_DWORD *)v50 + 6) == 1) {
            ++v51;
          }
          int v50 = (uint64_t *)*v50;
        }
        while (v50);
      }
      else
      {
        uint64_t v51 = 0;
      }
      uint64_t v52 = [NSNumber numberWithLong:v51];
      [v8 setObject:v52 forKeyedSubscript:@"numSourcesWifi"];

      if (5 * (v51 / 5) >= 100) {
        uint64_t v53 = 100;
      }
      else {
        uint64_t v53 = 5 * (v51 / 5);
      }
      char v54 = [NSNumber numberWithLong:v53];
      [v8 setObject:v54 forKeyedSubscript:@"numSourcesWifiBounded"];

      long long v55 = (uint64_t *)v82;
      if ((void)v82)
      {
        uint64_t v56 = 0;
        do
        {
          if (*((_DWORD *)v55 + 6) == 5) {
            ++v56;
          }
          long long v55 = (uint64_t *)*v55;
        }
        while (v55);
      }
      else
      {
        uint64_t v56 = 0;
      }
      __int16 v57 = [NSNumber numberWithLong:v56];
      [v8 setObject:v57 forKeyedSubscript:@"numSourcesBle"];

      if (v56 >= 15) {
        uint64_t v58 = 15;
      }
      else {
        uint64_t v58 = v56;
      }
      uint64_t v59 = [NSNumber numberWithLong:v58];
      [v8 setObject:v59 forKeyedSubscript:@"numSourcesBleBounded"];

      __int16 v60 = (uint64_t *)v82;
      if ((void)v82)
      {
        uint64_t v61 = 0;
        do
        {
          if (*((_DWORD *)v60 + 6) == 6) {
            ++v61;
          }
          __int16 v60 = (uint64_t *)*v60;
        }
        while (v60);
      }
      else
      {
        uint64_t v61 = 0;
      }
      uint64_t v62 = [NSNumber numberWithLong:v61];
      [v8 setObject:v62 forKeyedSubscript:@"numSourcesUwb"];

      if (v61 >= 15) {
        uint64_t v63 = 15;
      }
      else {
        uint64_t v63 = v61;
      }
      uint64_t v64 = [NSNumber numberWithLong:v63];
      [v8 setObject:v64 forKeyedSubscript:@"numSourcesUwbBounded"];

      std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&v70, v71[0]);
      std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&v72, v73[0]);
      std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&v74, v75[0]);
    }
    std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table((uint64_t)&v81);
  }
}

void sub_2563A31A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33)
{
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&a27, v35[1]);
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&a30, v35[4]);
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&a33, v35[7]);
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table(v36 - 160);

  _Unwind_Resume(a1);
}

BOOL CLMicroLocationCoreAnalyticsPublishHelper::updateModelRfCharacteristics(NSMutableDictionary *,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>,CLMicroLocationFingerprintVector const&,std::optional<std::reference_wrapper<CLMicroLocationFingerprintVector const>>)::$_0::operator()(uint64_t a1, CLMicroLocationFingerprintVector *this)
{
  v66[0] = CLMicroLocationFingerprintVector::begin(this);
  v66[1] = v4;
  v65[0] = CLMicroLocationFingerprintVector::end(this);
  v65[1] = v5;
  for (BOOL result = CLMicroLocationFingerprintVector::Iterator::operator!=(v66, v65);
        result;
        BOOL result = CLMicroLocationFingerprintVector::Iterator::operator!=(v66, v65))
  {
    uint64_t v7 = CLMicroLocationFingerprintVector::Iterator::operator*(v66);
    id v8 = *(uint64_t **)(v7 + 16);
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 8);
      do
      {
        std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__emplace_unique_key_args<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement const&>(v9, (uint64_t)(v8 + 2), (_OWORD *)v8 + 1);
        id v8 = (uint64_t *)*v8;
      }
      while (v8);
    }
    uint64_t v10 = *(double **)(a1 + 16);
    uint64_t v11 = *(double **)a1;
    double v12 = **(double **)a1 - *(double *)(v7 + 144);
    if (*v10 >= v12) {
      double v12 = *v10;
    }
    *uint64_t v10 = v12;
    unsigned int v13 = *(double **)(a1 + 24);
    double v14 = *v11 - *(double *)(v7 + 144);
    if (v14 >= *v13) {
      double v14 = *v13;
    }
    *unsigned int v13 = v14;
    int v15 = *(double **)(a1 + 32);
    LODWORD(v67) = 1;
    int v16 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>((void *)(v7 + 104), (unsigned int *)&v67);
    double v17 = 0.0;
    double v18 = 0.0;
    if (v16) {
      double v18 = *((double *)v16 + 4) - *((double *)v16 + 3);
    }
    if (*v15 >= v18) {
      double v18 = *v15;
    }
    **(double **)(a1 + 32) = v18;
    double v19 = *(double **)(a1 + 40);
    LODWORD(v67) = 1;
    double v20 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>((void *)(v7 + 104), (unsigned int *)&v67);
    if (v20) {
      double v17 = *((double *)v20 + 4) - *((double *)v20 + 3);
    }
    double v21 = *v19;
    if (v17 < *v19) {
      double v21 = v17;
    }
    **(double **)(a1 + 40) = v21;
    LODWORD(v67) = 1;
    uint64_t v22 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>((void *)(v7 + 104), (unsigned int *)&v67);
    if (v22) {
      double v23 = *((double *)v22 + 4) - *((double *)v22 + 3);
    }
    else {
      double v23 = 0.0;
    }
    **(double **)(a1 + 48) = v23 + **(double **)(a1 + 48);
    uint64_t v24 = *(unint64_t **)(a1 + 80);
    unint64_t v25 = *(void *)(v7 + 24);
    if (*v24 > v25) {
      unint64_t v25 = *v24;
    }
    *uint64_t v24 = v25;
    uint64_t v26 = *(unint64_t **)(a1 + 88);
    unint64_t v27 = *(void *)(v7 + 24);
    if (v27 >= *v26) {
      unint64_t v27 = *v26;
    }
    unint64_t *v26 = v27;
    **(void **)(a1 + 96) += *(void *)(v7 + 24);
    for (uint64_t i = *(int **)(v7 + 80); i; uint64_t i = *(int **)i)
    {
      int v29 = i + 4;
      uint64_t v30 = *(void *)(a1 + 56);
      uint64_t v31 = *(void *)(v30 + 8);
      if (!v31) {
        goto LABEL_35;
      }
      int v32 = *v29;
      uint64_t v33 = v30 + 8;
      do
      {
        int v34 = *(_DWORD *)(v31 + 32);
        BOOL v35 = v34 < v32;
        if (v34 >= v32) {
          uint64_t v36 = (uint64_t *)v31;
        }
        else {
          uint64_t v36 = (uint64_t *)(v31 + 8);
        }
        if (!v35) {
          uint64_t v33 = v31;
        }
        uint64_t v31 = *v36;
      }
      while (*v36);
      if (v33 == v30 + 8 || v32 < *(_DWORD *)(v33 + 32))
      {
LABEL_35:
        unint64_t v67 = i + 4;
        std::__tree<std::__value_type<CLMicroLocationProto::DataType,unsigned long>,std::__map_value_compare<CLMicroLocationProto::DataType,std::__value_type<CLMicroLocationProto::DataType,unsigned long>,std::less<CLMicroLocationProto::DataType>,true>,std::allocator<std::__value_type<CLMicroLocationProto::DataType,unsigned long>>>::__emplace_unique_key_args<CLMicroLocationProto::DataType,std::piecewise_construct_t const&,std::tuple<CLMicroLocationProto::DataType const&>,std::tuple<>>((uint64_t **)v30, i + 4, (uint64_t)&std::piecewise_construct, &v67)[5] = 0;
        uint64_t v30 = *(void *)(a1 + 56);
      }
      unint64_t v67 = i + 4;
      int v37 = std::__tree<std::__value_type<CLMicroLocationProto::DataType,unsigned long>,std::__map_value_compare<CLMicroLocationProto::DataType,std::__value_type<CLMicroLocationProto::DataType,unsigned long>,std::less<CLMicroLocationProto::DataType>,true>,std::allocator<std::__value_type<CLMicroLocationProto::DataType,unsigned long>>>::__emplace_unique_key_args<CLMicroLocationProto::DataType,std::piecewise_construct_t const&,std::tuple<CLMicroLocationProto::DataType const&>,std::tuple<>>((uint64_t **)v30, i + 4, (uint64_t)&std::piecewise_construct, &v67);
      BOOL v38 = *(uint64_t **)(v7 + 16);
      if (v38)
      {
        __int16 v39 = 0;
        do
        {
          if (*((_DWORD *)v38 + 6) == *v29) {
            __int16 v39 = (uint64_t *)((char *)v39 + 1);
          }
          BOOL v38 = (uint64_t *)*v38;
        }
        while (v38);
      }
      else
      {
        __int16 v39 = 0;
      }
      if (v37[5] <= v39) {
        double v40 = v39;
      }
      else {
        double v40 = v37[5];
      }
      __int16 v41 = *(uint64_t ***)(a1 + 56);
      unint64_t v67 = i + 4;
      std::__tree<std::__value_type<CLMicroLocationProto::DataType,unsigned long>,std::__map_value_compare<CLMicroLocationProto::DataType,std::__value_type<CLMicroLocationProto::DataType,unsigned long>,std::less<CLMicroLocationProto::DataType>,true>,std::allocator<std::__value_type<CLMicroLocationProto::DataType,unsigned long>>>::__emplace_unique_key_args<CLMicroLocationProto::DataType,std::piecewise_construct_t const&,std::tuple<CLMicroLocationProto::DataType const&>,std::tuple<>>(v41, i + 4, (uint64_t)&std::piecewise_construct, &v67)[5] = v40;
      uint64_t v42 = *(void *)(a1 + 64);
      uint64_t v43 = *(void *)(v42 + 8);
      if (!v43) {
        goto LABEL_56;
      }
      int v44 = *v29;
      uint64_t v45 = v42 + 8;
      do
      {
        int v46 = *(_DWORD *)(v43 + 32);
        BOOL v47 = v46 < v44;
        if (v46 >= v44) {
          int v48 = (uint64_t *)v43;
        }
        else {
          int v48 = (uint64_t *)(v43 + 8);
        }
        if (!v47) {
          uint64_t v45 = v43;
        }
        uint64_t v43 = *v48;
      }
      while (*v48);
      if (v45 == v42 + 8 || v44 < *(_DWORD *)(v45 + 32)) {
LABEL_56:
      }
        uint64_t v45 = v42 + 8;
      if (v45 == *(void *)(a1 + 56) + 8)
      {
        unint64_t v67 = i + 4;
        std::__tree<std::__value_type<CLMicroLocationProto::DataType,unsigned long>,std::__map_value_compare<CLMicroLocationProto::DataType,std::__value_type<CLMicroLocationProto::DataType,unsigned long>,std::less<CLMicroLocationProto::DataType>,true>,std::allocator<std::__value_type<CLMicroLocationProto::DataType,unsigned long>>>::__emplace_unique_key_args<CLMicroLocationProto::DataType,std::piecewise_construct_t const&,std::tuple<CLMicroLocationProto::DataType const&>,std::tuple<>>((uint64_t **)v42, i + 4, (uint64_t)&std::piecewise_construct, &v67)[5] = (uint64_t *)-1;
        uint64_t v42 = *(void *)(a1 + 64);
      }
      unint64_t v67 = i + 4;
      __int16 v49 = std::__tree<std::__value_type<CLMicroLocationProto::DataType,unsigned long>,std::__map_value_compare<CLMicroLocationProto::DataType,std::__value_type<CLMicroLocationProto::DataType,unsigned long>,std::less<CLMicroLocationProto::DataType>,true>,std::allocator<std::__value_type<CLMicroLocationProto::DataType,unsigned long>>>::__emplace_unique_key_args<CLMicroLocationProto::DataType,std::piecewise_construct_t const&,std::tuple<CLMicroLocationProto::DataType const&>,std::tuple<>>((uint64_t **)v42, i + 4, (uint64_t)&std::piecewise_construct, &v67);
      int v50 = *(uint64_t **)(v7 + 16);
      if (v50)
      {
        uint64_t v51 = 0;
        do
        {
          if (*((_DWORD *)v50 + 6) == *v29) {
            uint64_t v51 = (uint64_t *)((char *)v51 + 1);
          }
          int v50 = (uint64_t *)*v50;
        }
        while (v50);
      }
      else
      {
        uint64_t v51 = 0;
      }
      if (v51 >= v49[5]) {
        uint64_t v52 = v49[5];
      }
      else {
        uint64_t v52 = v51;
      }
      uint64_t v53 = *(uint64_t ***)(a1 + 64);
      unint64_t v67 = i + 4;
      std::__tree<std::__value_type<CLMicroLocationProto::DataType,unsigned long>,std::__map_value_compare<CLMicroLocationProto::DataType,std::__value_type<CLMicroLocationProto::DataType,unsigned long>,std::less<CLMicroLocationProto::DataType>,true>,std::allocator<std::__value_type<CLMicroLocationProto::DataType,unsigned long>>>::__emplace_unique_key_args<CLMicroLocationProto::DataType,std::piecewise_construct_t const&,std::tuple<CLMicroLocationProto::DataType const&>,std::tuple<>>(v53, i + 4, (uint64_t)&std::piecewise_construct, &v67)[5] = v52;
      uint64_t v54 = *(void *)(a1 + 72);
      uint64_t v55 = *(void *)(v54 + 8);
      if (!v55) {
        goto LABEL_79;
      }
      int v56 = *v29;
      uint64_t v57 = v54 + 8;
      do
      {
        int v58 = *(_DWORD *)(v55 + 32);
        BOOL v59 = v58 < v56;
        if (v58 >= v56) {
          __int16 v60 = (uint64_t *)v55;
        }
        else {
          __int16 v60 = (uint64_t *)(v55 + 8);
        }
        if (!v59) {
          uint64_t v57 = v55;
        }
        uint64_t v55 = *v60;
      }
      while (*v60);
      if (v57 == v54 + 8 || v56 < *(_DWORD *)(v57 + 32))
      {
LABEL_79:
        unint64_t v67 = i + 4;
        std::__tree<std::__value_type<CLMicroLocationProto::DataType,unsigned long>,std::__map_value_compare<CLMicroLocationProto::DataType,std::__value_type<CLMicroLocationProto::DataType,unsigned long>,std::less<CLMicroLocationProto::DataType>,true>,std::allocator<std::__value_type<CLMicroLocationProto::DataType,unsigned long>>>::__emplace_unique_key_args<CLMicroLocationProto::DataType,std::piecewise_construct_t const&,std::tuple<CLMicroLocationProto::DataType const&>,std::tuple<>>((uint64_t **)v54, i + 4, (uint64_t)&std::piecewise_construct, &v67)[5] = 0;
        int v56 = *v29;
      }
      uint64_t v61 = *(uint64_t **)(v7 + 16);
      if (v61)
      {
        uint64_t v62 = 0;
        do
        {
          if (*((_DWORD *)v61 + 6) == v56) {
            ++v62;
          }
          uint64_t v61 = (uint64_t *)*v61;
        }
        while (v61);
      }
      else
      {
        uint64_t v62 = 0;
      }
      uint64_t v63 = *(uint64_t ***)(a1 + 72);
      unint64_t v67 = i + 4;
      uint64_t v64 = std::__tree<std::__value_type<CLMicroLocationProto::DataType,unsigned long>,std::__map_value_compare<CLMicroLocationProto::DataType,std::__value_type<CLMicroLocationProto::DataType,unsigned long>,std::less<CLMicroLocationProto::DataType>,true>,std::allocator<std::__value_type<CLMicroLocationProto::DataType,unsigned long>>>::__emplace_unique_key_args<CLMicroLocationProto::DataType,std::piecewise_construct_t const&,std::tuple<CLMicroLocationProto::DataType const&>,std::tuple<>>(v63, i + 4, (uint64_t)&std::piecewise_construct, &v67);
      v64[5] = (uint64_t *)((char *)v64[5] + v62);
    }
    CLMicroLocationFingerprintVector::Iterator::operator++((uint64_t)v66);
  }
  return result;
}

void CLMicroLocationCoreAnalyticsPublishHelper::updateClusterRfDistanceCharacteristics(CLMicroLocationCoreAnalyticsPublishHelper *this, NSMutableDictionary *a2, const CLMicroLocationModel *a3)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  uint64_t v4 = this;
  uint64_t v5 = +[ULDefaultsSingleton shared];
  long long v6 = [v5 defaultsDictionary];

  uint64_t v7 = [NSString stringWithUTF8String:"ULAdaptiveSensorsEnable"];
  id v8 = [v6 objectForKey:v7];
  if (v8 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    char v9 = [v8 BOOLValue];
  }
  else {
    char v9 = [MEMORY[0x263EFFA88] BOOLValue];
  }
  char v10 = v9;

  v47[0] = &stru_2704E2F50;
  v47[1] = CLMicroLocationUtils::createEnabledTechnologies((CLMicroLocationUtils *)1, 1, 1);
  char v48 = v10;
  __int16 v49 = @"Wifi";
  uint64_t EnabledTechnologies = CLMicroLocationUtils::createEnabledTechnologies((CLMicroLocationUtils *)1, 0, 0);
  char v51 = v10;
  uint64_t v52 = @"Ble";
  uint64_t v53 = CLMicroLocationUtils::createEnabledTechnologies(0, 1, 0);
  char v54 = v10;
  uint64_t v55 = @"Uwb";
  uint64_t v11 = 0;
  uint64_t v56 = CLMicroLocationUtils::createEnabledTechnologies(0, 0, 1);
  char v57 = v10;
  do
  {
    double v12 = &v47[v11];
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    CLMicroLocationClusterRFDistance::evaluateRFClusterDistances((uint64_t)&v47[v11], (uint64_t)a2, (float *)&v36);
    LODWORD(v13) = v36;
    double v14 = [NSNumber numberWithFloat:v13];
    int v15 = [NSString stringWithFormat:@"%@%@", @"minClusterRfSize", v47[v11]];
    [(CLMicroLocationCoreAnalyticsPublishHelper *)v4 setObject:v14 forKeyedSubscript:v15];

    LODWORD(v16) = HIDWORD(v36);
    double v17 = [NSNumber numberWithFloat:v16];
    double v18 = [NSString stringWithFormat:@"%@%@", @"maxClusterRfSize", v47[v11]];
    [(CLMicroLocationCoreAnalyticsPublishHelper *)v4 setObject:v17 forKeyedSubscript:v18];

    LODWORD(v19) = v37;
    double v20 = [NSNumber numberWithFloat:v19];
    double v21 = [NSString stringWithFormat:@"%@%@", @"avgClusterRfSize", v47[v11]];
    [(CLMicroLocationCoreAnalyticsPublishHelper *)v4 setObject:v20 forKeyedSubscript:v21];

    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_41);
    }
    uint64_t v22 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v23 = *v12;
      *(_DWORD *)long long buf = 138413058;
      uint64_t v40 = v23;
      __int16 v41 = 2048;
      double v42 = *(float *)&v36;
      __int16 v43 = 2048;
      double v44 = *((float *)&v36 + 1);
      __int16 v45 = 2048;
      double v46 = *(float *)&v37;
      _os_log_impl(&dword_25631F000, v22, OS_LOG_TYPE_DEBUG, "Model cluster RF sizes %@: %f (min), %f(max), %f (mean)", buf, 0x2Au);
    }
    if ((unint64_t)CLMicroLocationModel::numClusters((CLMicroLocationModel *)a2) >= 2)
    {
      LODWORD(v24) = HIDWORD(v37);
      unint64_t v25 = [NSNumber numberWithFloat:v24];
      uint64_t v26 = [NSString stringWithFormat:@"%@%@", @"minClusterRfDistance", *v12];
      [(CLMicroLocationCoreAnalyticsPublishHelper *)v4 setObject:v25 forKeyedSubscript:v26];

      LODWORD(v27) = v38;
      uint64_t v28 = [NSNumber numberWithFloat:v27];
      int v29 = [NSString stringWithFormat:@"%@%@", @"maxClusterRfDistance", *v12];
      [(CLMicroLocationCoreAnalyticsPublishHelper *)v4 setObject:v28 forKeyedSubscript:v29];

      LODWORD(v30) = HIDWORD(v38);
      uint64_t v31 = [NSNumber numberWithFloat:v30];
      int v32 = [NSString stringWithFormat:@"%@%@", @"avgClusterRfDistance", *v12];
      [(CLMicroLocationCoreAnalyticsPublishHelper *)v4 setObject:v31 forKeyedSubscript:v32];

      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_41);
      }
      uint64_t v33 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v34 = *v12;
        *(_DWORD *)long long buf = 138413058;
        uint64_t v40 = v34;
        __int16 v41 = 2048;
        double v42 = *((float *)&v37 + 1);
        __int16 v43 = 2048;
        double v44 = *(float *)&v38;
        __int16 v45 = 2048;
        double v46 = *((float *)&v38 + 1);
        _os_log_impl(&dword_25631F000, v33, OS_LOG_TYPE_DEBUG, "Model cluster RF distances %@: %f (min), %f(max), %f (mean)", buf, 0x2Au);
      }
    }
    v11 += 3;
  }
  while (v11 != 12);
  for (uint64_t i = 9; i != -3; i -= 3)
}

void sub_2563A3C80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationCoreAnalyticsPublishHelper::updateLearnEventSummary(void *a1, CLMicroLocationModel *a2, const CLMicroLocationModel *a3, double a4)
{
  id v7 = a1;
  id v8 = v7;
  if (v7)
  {
    uint64_t v9 = MEMORY[0x263EFFA80];
    [v7 setObject:MEMORY[0x263EFFA80] forKeyedSubscript:@"cancelled"];
    if (CLMicroLocationModel::isValid(a2)) {
      uint64_t v10 = MEMORY[0x263EFFA88];
    }
    else {
      uint64_t v10 = v9;
    }
    [v8 setObject:v10 forKeyedSubscript:@"valid"];
    uint64_t v11 = [NSNumber numberWithDouble:cl::chrono::CFAbsoluteTimeClock::now() - a4];
    [v8 setObject:v11 forKeyedSubscript:@"runTime"];

    double v12 = [v8 objectForKeyedSubscript:@"learnCounter"];
    uint64_t v13 = [v12 integerValue];

    if (v13)
    {
      if (v13 >= 100) {
        uint64_t v14 = 100;
      }
      else {
        uint64_t v14 = v13;
      }
      int v15 = [NSNumber numberWithInteger:v14];
      [v8 setObject:v15 forKeyedSubscript:@"learnCounter"];
    }
    if (CLMicroLocationModel::isValid(a2))
    {
      double v16 = [NSNumber numberWithUnsignedLong:CLMicroLocationModel::numClusters(a2)];
      [v8 setObject:v16 forKeyedSubscript:@"numClusters"];

      CLMicroLocationCoreAnalyticsPublishHelper::updateModelSizeMetrics((CLMicroLocationCoreAnalyticsPublishHelper *)v8, (NSMutableDictionary *)a2, a3, v17);
      CLMicroLocationCoreAnalyticsPublishHelper::updateClusterRfDistanceCharacteristics((CLMicroLocationCoreAnalyticsPublishHelper *)v8, (NSMutableDictionary *)a2, v18);
      double v19 = [NSNumber numberWithDouble:CLMicroLocationModel::representativeFPsRatio(a2)];
      [v8 setObject:v19 forKeyedSubscript:@"representativeFPsRatio"];

      std::string __p = 0;
      uint64_t v56 = 0;
      unint64_t v57 = 0;
      double v20 = (void *)*((void *)a2 + 46);
      if (v20)
      {
        double v21 = 0;
        do
        {
          uint64_t v22 = (uint64_t)(v20[5] - v20[4]) >> 4;
          if ((unint64_t)v21 >= v57)
          {
            uint64_t v23 = (unint64_t *)__p;
            uint64_t v24 = ((char *)v21 - (unsigned char *)__p) >> 3;
            unint64_t v25 = v24 + 1;
            if ((unint64_t)(v24 + 1) >> 61) {
              std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v26 = v57 - (void)__p;
            if ((uint64_t)(v57 - (void)__p) >> 2 > v25) {
              unint64_t v25 = v26 >> 2;
            }
            if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v27 = v25;
            }
            if (v27)
            {
              unint64_t v27 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>((uint64_t)&v57, v27);
              uint64_t v29 = v28;
              uint64_t v23 = (unint64_t *)__p;
              double v21 = v56;
            }
            else
            {
              uint64_t v29 = 0;
            }
            double v30 = (uint64_t *)(v27 + 8 * v24);
            uint64_t *v30 = v22;
            uint64_t v31 = (unint64_t *)(v30 + 1);
            while (v21 != v23)
            {
              uint64_t v32 = *--v21;
              *--double v30 = v32;
            }
            std::string __p = v30;
            uint64_t v56 = v31;
            unint64_t v57 = v27 + 8 * v29;
            if (v23) {
              operator delete(v23);
            }
            double v21 = v31;
          }
          else
          {
            *v21++ = v22;
          }
          uint64_t v56 = v21;
          double v20 = (void *)*v20;
        }
        while (v20);
        uint64_t v33 = (unint64_t *)__p;
      }
      else
      {
        double v21 = 0;
        uint64_t v33 = 0;
      }
      unint64_t v34 = 126 - 2 * __clz(v21 - v33);
      if (v21 == v33) {
        uint64_t v35 = 0;
      }
      else {
        uint64_t v35 = v34;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::greater<unsigned long> &,unsigned long *,false>(v33, v21, (uint64_t)v53, v35, 1);
      uint64_t v36 = +[ULDefaultsSingleton shared];
      uint64_t v37 = [v36 defaultsDictionary];

      uint64_t v38 = [NSString stringWithUTF8String:"ULMaximumNumberOfClustersForLearningAnalytics"];
      __int16 v39 = [v37 objectForKey:v38];
      if (v39 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
        uint64_t v40 = [v39 unsignedLongValue];
      }
      else {
        uint64_t v40 = [&unk_2704F1830 unsignedLongValue];
      }
      unint64_t v41 = v40;

      __int16 v43 = __p;
      double v42 = v56;
      if (v56 != __p)
      {
        unint64_t v44 = 0;
        uint64_t v45 = 0;
        do
        {
          if (v44 >= v41)
          {
            v45 += v43[v44];
          }
          else
          {
            double v46 = [NSNumber numberWithUnsignedLong:v43[v44]];
            BOOL v47 = objc_msgSend(NSString, "stringWithFormat:", @"numFingerprintsInCluster%zu", v44);
            [v8 setObject:v46 forKeyedSubscript:v47];

            __int16 v43 = __p;
            double v42 = v56;
          }
          ++v44;
        }
        while (v44 < v42 - v43);
        if (v45)
        {
          char v48 = [NSNumber numberWithUnsignedLong:v45];
          [v8 setObject:v48 forKeyedSubscript:@"numFingerprintsInRemainingClusters"];

          double v42 = v56;
        }
      }
      __int16 v49 = [NSNumber numberWithUnsignedLong:*(v42 - 1)];
      [v8 setObject:v49 forKeyedSubscript:@"numFingerprintsInSmallestCluster"];

      CLMicroLocationCoreAnalyticsPublishHelper::generationAlgorithmToString(*(_DWORD *)a2, v53);
      if (v54 >= 0) {
        int v50 = v53;
      }
      else {
        int v50 = (void **)v53[0];
      }
      char v51 = [NSString stringWithUTF8String:v50];
      [v8 setObject:v51 forKeyedSubscript:@"generationAlgorithm"];

      CLMicroLocationCoreAnalyticsPublishHelper::updateModelQualityMetrics((CLMicroLocationCoreAnalyticsPublishHelper *)v8, (NSMutableDictionary *)a2, v52);
      if (v54 < 0) {
        operator delete(v53[0]);
      }
      if (__p)
      {
        uint64_t v56 = (unint64_t *)__p;
        operator delete(__p);
      }
    }
  }
}

void sub_2563A42AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void CLMicroLocationCoreAnalyticsPublishHelper::updateModelSizeMetrics(CLMicroLocationCoreAnalyticsPublishHelper *this, NSMutableDictionary *a2, const CLMicroLocationModel *a3, const CLMicroLocationProto::Model *a4)
{
  uint64_t v23 = this;
  if (v23)
  {
    Class isa = a2[41].super.super.isa;
    Class v6 = a2[42].super.super.isa;
    uint64_t v8 = (v6 - isa) >> 5;
    if (v6 == isa)
    {
      uint64_t v12 = 0;
      uint64_t v11 = 0;
      uint64_t v10 = 0;
      uint64_t v9 = 0;
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      do
      {
        uint64_t v13 = *(uint64_t **)(*(void *)isa + 16);
        if (v13)
        {
          uint64_t v14 = 0;
          uint64_t v15 = *(void *)(*(void *)isa + 16);
          do
          {
            if (*(_DWORD *)(v15 + 24) == 1) {
              ++v14;
            }
            uint64_t v15 = *(void *)v15;
          }
          while (v15);
          uint64_t v16 = *(void *)(*(void *)isa + 16);
          do
          {
            if (*(_DWORD *)(v16 + 24) == 5) {
              ++v15;
            }
            uint64_t v16 = *(void *)v16;
          }
          while (v16);
          do
          {
            if (*((_DWORD *)v13 + 6) == 6) {
              ++v16;
            }
            uint64_t v13 = (uint64_t *)*v13;
          }
          while (v13);
          v12 += v14;
        }
        else
        {
          uint64_t v15 = 0;
          uint64_t v16 = 0;
        }
        v9 += *(void *)(*(void *)isa + 24);
        v11 += v15;
        v10 += v16;
        Class isa = (Class)((char *)isa + 32);
      }
      while (isa != v6);
    }
    double v17 = [NSNumber numberWithUnsignedLong:v8];
    [(CLMicroLocationCoreAnalyticsPublishHelper *)v23 setObject:v17 forKeyedSubscript:@"modelSizeNumFingerprints"];

    double v18 = [NSNumber numberWithUnsignedLong:v9];
    [(CLMicroLocationCoreAnalyticsPublishHelper *)v23 setObject:v18 forKeyedSubscript:@"modelSizeNumMeasurements"];

    double v19 = [NSNumber numberWithUnsignedLong:v12];
    [(CLMicroLocationCoreAnalyticsPublishHelper *)v23 setObject:v19 forKeyedSubscript:@"modelSizeNumWiFiMeasurements"];

    double v20 = [NSNumber numberWithUnsignedLong:v11];
    [(CLMicroLocationCoreAnalyticsPublishHelper *)v23 setObject:v20 forKeyedSubscript:@"modelSizeNumBleMeasurements"];

    double v21 = [NSNumber numberWithUnsignedLong:v10];
    [(CLMicroLocationCoreAnalyticsPublishHelper *)v23 setObject:v21 forKeyedSubscript:@"modelSizeNumUwbMeasurements"];

    uint64_t v22 = [NSNumber numberWithInt:(*(uint64_t (**)(const CLMicroLocationModel *))(*(void *)a3 + 72))(a3)];
    [(CLMicroLocationCoreAnalyticsPublishHelper *)v23 setObject:v22 forKeyedSubscript:@"modelLoadedByteSize"];
  }
}

void sub_2563A45DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationCoreAnalyticsPublishHelper::updateModelQualityMetrics(CLMicroLocationCoreAnalyticsPublishHelper *this, NSMutableDictionary *a2, const CLMicroLocationModel *a3)
{
  uint64_t v4 = this;
  uint64_t v5 = [NSNumber numberWithUnsignedInt:CLMicroLocationModel::getQualityIndicator((CLMicroLocationModel *)a2)];
  [(CLMicroLocationCoreAnalyticsPublishHelper *)v4 setObject:v5 forKeyedSubscript:@"modelQuality"];

  Class v6 = [NSNumber numberWithUnsignedInt:CLMicroLocationModel::getQualityIndicator((CLMicroLocationModel *)a2)];
  [(CLMicroLocationCoreAnalyticsPublishHelper *)v4 setObject:v6 forKeyedSubscript:@"modelQualityBounded"];

  id v7 = [NSNumber numberWithUnsignedInt:CLMicroLocationModel::getCandidateQualityIndicator((CLMicroLocationModel *)a2)];
  [(CLMicroLocationCoreAnalyticsPublishHelper *)v4 setObject:v7 forKeyedSubscript:@"candidateModelQuality"];

  uint64_t CandidateQualityReasons = CLMicroLocationModel::getCandidateQualityReasons((CLMicroLocationModel *)a2);
  uint64_t v16 = 0;
  double v17 = 0;
  uint64_t v18 = 0;
  std::vector<CLMicroLocationProto::ServiceQualityReasonEnum>::__init_with_size[abi:ne180100]<CLMicroLocationProto::ServiceQualityReasonEnum*,CLMicroLocationProto::ServiceQualityReasonEnum*>(&v16, *(const void **)CandidateQualityReasons, *(void *)(CandidateQualityReasons + 8), (uint64_t)(*(void *)(CandidateQualityReasons + 8) - *(void *)CandidateQualityReasons) >> 2);
  unint64_t v9 = 126 - 2 * __clz((v17 - (unsigned char *)v16) >> 2);
  if (v17 == v16) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = v9;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,CLMicroLocationProto::ServiceQualityReasonEnum *,false>((uint64_t)v16, (int *)v17, (uint64_t)__p, v10, 1);
  memset(v15, 0, sizeof(v15));
  uint64_t v11 = (int *)v16;
  uint64_t v12 = v17;
  double v21 = (std::vector<std::string> *)v15;
  while (v11 != (int *)v12)
  {
    CLMicroLocationProtobufHelper::serviceQualityReasonToString(*v11, __p);
    std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](&v21, (long long *)__p);
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    ++v11;
  }
  boost::algorithm::join<std::vector<std::string>,char [2]>(" ", v15, (uint64_t)__p);
  if (v20 >= 0) {
    uint64_t v13 = __p;
  }
  else {
    uint64_t v13 = (void **)__p[0];
  }
  uint64_t v14 = [NSString stringWithUTF8String:v13];
  [(CLMicroLocationCoreAnalyticsPublishHelper *)v4 setObject:v14 forKeyedSubscript:@"qualityReasons"];

  if (v20 < 0) {
    operator delete(__p[0]);
  }
  __p[0] = v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v16)
  {
    double v17 = (char *)v16;
    operator delete(v16);
  }
}

void sub_2563A4838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  *(void *)(v23 - 40) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 40));
  if (a13)
  {
    a14 = (uint64_t)a13;
    operator delete(a13);
  }

  _Unwind_Resume(a1);
}

void CLMicroLocationCoreAnalyticsPublishHelper::updateMagicalMomentOldModelMetrics(void *a1, CLMicroLocationModel *a2, CLMicroLocationModel *a3, uint64_t a4, char a5, double a6)
{
  id v11 = a1;
  if (v11)
  {
    if (a5)
    {
      uint64_t v12 = [NSNumber numberWithDouble:a6 - *(double *)&a4];
      [v11 setObject:v12 forKeyedSubscript:@"ageOfOldModel"];
    }
    if (CLMicroLocationModel::isValid(a2))
    {
      uint64_t v13 = [NSNumber numberWithUnsignedLong:CLMicroLocationModel::numClusters(a3)];
      [v11 setObject:v13 forKeyedSubscript:@"numOldClusters"];

      uint64_t v14 = NSNumber;
      int v15 = CLMicroLocationModel::numClusters(a2);
      uint64_t v16 = [v14 numberWithInt:v15 - CLMicroLocationModel::numClusters(a3)];
      [v11 setObject:v16 forKeyedSubscript:@"numClustersDiff"];

      CLMicroLocationModel::getIdentifiers(a2, (uint64_t)v24);
      CLMicroLocationModel::getIdentifiers(a3, (uint64_t)v23);
      double v17 = v25;
      if (v25)
      {
        unint64_t v18 = 0;
        do
        {
          if (std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::find<boost::uuids::uuid>(v23, v17 + 2))
          {
            ++v18;
          }
          double v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        unint64_t v18 = 0;
      }
      double v19 = [NSNumber numberWithUnsignedLong:v18];
      [v11 setObject:v19 forKeyedSubscript:@"numMatchingClustersInt"];

      if (CLMicroLocationModel::numClusters(a3))
      {
        char v20 = NSNumber;
        *(float *)&double v21 = (float)v18 / (float)(unint64_t)CLMicroLocationModel::numClusters(a3);
        uint64_t v22 = [v20 numberWithFloat:v21];
        [v11 setObject:v22 forKeyedSubscript:@"portionMatchingClusters"];
      }
      else
      {
        [v11 setObject:&unk_2704F0E00 forKeyedSubscript:@"portionMatchingClusters"];
      }
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v23);
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v24);
    }
  }
}

void sub_2563A4ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&a9);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&a14);

  _Unwind_Resume(a1);
}

void CLMicroLocationCoreAnalyticsPublishHelper::updateMagicalMomentsNumPrunedFingerprints(void *a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  id v5 = a1;
  if (v5)
  {
    if (a3)
    {
      unint64_t v6 = (a2[1] - *a2) >> 3;
      if (v6 >= a3)
      {
        unint64_t v11 = a3;
        if (v6 > a3)
        {
          unint64_t v12 = a3 - 1;
          uint64_t v13 = [NSNumber numberWithUnsignedLong:*(void *)(*a2 + 8 * v12) - *(void *)(*a2 + 8 * a3)];
          uint64_t v14 = objc_msgSend(NSString, "stringWithFormat:", @"numFingerprintsPrunedInIteration%u", v12);
          [v5 setObject:v13 forKeyedSubscript:v14];

          uint64_t v16 = *a2;
          unint64_t v17 = (a2[1] - *a2) >> 3;
          if (v17 > v12)
          {
            unint64_t v18 = *(void *)(v16 + 8 * v12);
            if (!v18) {
              goto LABEL_17;
            }
            if (v17 > v11)
            {
              *(float *)&double v15 = 1.0 - (float)((float)*(unint64_t *)(v16 + 8 * v11) / (float)v18);
              double v19 = [NSNumber numberWithFloat:v15];
              char v20 = objc_msgSend(NSString, "stringWithFormat:", @"portionFingerprintsPrunedInIteration%u", v12);
              [v5 setObject:v19 forKeyedSubscript:v20];

              goto LABEL_17;
            }
          }
        }
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_41);
    }
    id v7 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = (a2[1] - *a2) >> 3;
      *(_DWORD *)long long buf = 68289538;
      int v22 = 0;
      __int16 v23 = 2082;
      uint64_t v24 = "";
      __int16 v25 = 2050;
      uint64_t v26 = a3;
      __int16 v27 = 2050;
      uint64_t v28 = v8;
      _os_log_impl(&dword_25631F000, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"updateMagicalMomentsNumPrunedFingerprints called incorrectly\", \"iteration\":%{public}lu, \"numFingerprintsPerIteration size\":%{public}lu}", buf, 0x26u);
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_41);
    }
    unint64_t v9 = logObject_MicroLocation_Default;
    if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
    {
      uint64_t v10 = (a2[1] - *a2) >> 3;
      *(_DWORD *)long long buf = 68289538;
      int v22 = 0;
      __int16 v23 = 2082;
      uint64_t v24 = "";
      __int16 v25 = 2050;
      uint64_t v26 = a3;
      __int16 v27 = 2050;
      uint64_t v28 = v10;
      _os_signpost_emit_with_name_impl(&dword_25631F000, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "updateMagicalMomentsNumPrunedFingerprints called incorrectly", "{\"msg%{public}.0s\":\"updateMagicalMomentsNumPrunedFingerprints called incorrectly\", \"iteration\":%{public}lu, \"numFingerprintsPerIteration size\":%{public}lu}", buf, 0x26u);
    }
  }
LABEL_17:
}

void sub_2563A4E20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationCoreAnalyticsPublishHelper::updateMagicalMomentsNumPrunedClusters(CLMicroLocationCoreAnalyticsPublishHelper *this, NSMutableDictionary *a2, const CLMicroLocationModel *a3, uint64_t a4)
{
  uint64_t v13 = this;
  id v7 = [NSNumber numberWithUnsignedLong:(char *)a3 - CLMicroLocationModel::numClusters((CLMicroLocationModel *)a2)];
  uint64_t v8 = objc_msgSend(NSString, "stringWithFormat:", @"numClustersPrunedIteration%u", a4);
  [(CLMicroLocationCoreAnalyticsPublishHelper *)v13 setObject:v7 forKeyedSubscript:v8];

  if (a3)
  {
    unint64_t v9 = NSNumber;
    *(float *)&double v10 = 1.0
                   - (float)((float)(unint64_t)CLMicroLocationModel::numClusters((CLMicroLocationModel *)a2)
                           / (float)(unint64_t)a3);
    unint64_t v11 = [v9 numberWithFloat:v10];
    unint64_t v12 = objc_msgSend(NSString, "stringWithFormat:", @"portionClustersPrunedIteration%u", a4);
    [(CLMicroLocationCoreAnalyticsPublishHelper *)v13 setObject:v11 forKeyedSubscript:v12];
  }
}

void sub_2563A4F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationCoreAnalyticsPublishHelper::updateSemiSupervisedLabeledAndUnlabeledFingerprints(CLMicroLocationCoreAnalyticsPublishHelper *this, NSMutableDictionary *a2, const CLMicroLocationFingerprintVector *a3, const CLMicroLocationFingerprintVector *a4)
{
  double v15 = this;
  if (v15)
  {
    unint64_t v6 = CLMicroLocationFingerprintVector::size((CLMicroLocationFingerprintVector *)a2);
    unint64_t v7 = CLMicroLocationFingerprintVector::size(a3);
    uint64_t v8 = [NSNumber numberWithUnsignedLong:v6];
    [(CLMicroLocationCoreAnalyticsPublishHelper *)v15 setObject:v8 forKeyedSubscript:@"numUnlabeledFingerprints"];

    unint64_t v9 = [NSNumber numberWithUnsignedLong:v7];
    [(CLMicroLocationCoreAnalyticsPublishHelper *)v15 setObject:v9 forKeyedSubscript:@"numLabeledFingerprints"];

    if (5 * (v6 / 5) >= 0x1F4) {
      unint64_t v10 = 500;
    }
    else {
      unint64_t v10 = 5 * (v6 / 5);
    }
    unint64_t v11 = [NSNumber numberWithUnsignedLong:v10];
    [(CLMicroLocationCoreAnalyticsPublishHelper *)v15 setObject:v11 forKeyedSubscript:@"numUnlabeledFingerprintsBounded"];
    unint64_t v12 = 5 * (v7 / 5);

    if (v12 >= 0x1F4) {
      uint64_t v13 = 500;
    }
    else {
      uint64_t v13 = v12;
    }
    uint64_t v14 = [NSNumber numberWithUnsignedLong:v13];
    [(CLMicroLocationCoreAnalyticsPublishHelper *)v15 setObject:v14 forKeyedSubscript:@"numLabeledFingerprintsBounded"];
  }
}

void sub_2563A511C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationCoreAnalyticsPublishHelper::updateModelStabilityMetrics(void *a1, unsigned int *a2, unsigned char *a3)
{
  id v11 = a1;
  id v5 = [NSNumber numberWithUnsignedInt:a2[3]];
  [v11 setObject:v5 forKeyedSubscript:@"DaysWithRecordings"];

  unint64_t v6 = [NSNumber numberWithBool:CLMicroLocationModel::getQualityIndicator((CLMicroLocationModel *)a2) == 3];
  [v11 setObject:v6 forKeyedSubscript:@"IsHighQualityModel"];

  unint64_t v7 = [NSNumber numberWithBool:CLMicroLocationModel::isStable((CLMicroLocationModel *)a2)];
  [v11 setObject:v7 forKeyedSubscript:@"WasInHighQualityBefore"];

  if (a3[1])
  {
    if (CLMicroLocationModel::isStable((CLMicroLocationModel *)a2))
    {
      if (a3[1]) {
        BOOL v8 = *a3 == 0;
      }
      else {
        BOOL v8 = 0;
      }
      uint64_t v9 = v8;
    }
    else
    {
      uint64_t v9 = 0;
    }
    unint64_t v10 = [NSNumber numberWithBool:v9];
    [v11 setObject:v10 forKeyedSubscript:@"IsBecomingHighQualityModelForTheFirstTime"];
  }
  else
  {
    unint64_t v10 = [NSNumber numberWithBool:CLMicroLocationModel::isStable((CLMicroLocationModel *)a2)];
    [v11 setObject:v10 forKeyedSubscript:@"IsBecomingHighQualityModelForTheFirstTime"];
  }
}

void sub_2563A52DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t *boost::algorithm::join<std::vector<std::string>,char [2]>@<X0>(char *__s@<X1>, uint64_t *result@<X0>, uint64_t a3@<X8>)
{
  uint64_t v5 = *result;
  uint64_t v6 = result[1];
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  if (v5 == v6) {
    goto LABEL_10;
  }
  int v7 = *(char *)(v5 + 23);
  if (v7 >= 0) {
    BOOL v8 = (std::string::value_type *)v5;
  }
  else {
    BOOL v8 = *(std::string::value_type **)v5;
  }
  if (v7 >= 0) {
    std::string::size_type v9 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    std::string::size_type v9 = *(void *)(v5 + 8);
  }
  for (BOOL result = (uint64_t *)std::string::__insert_with_size<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>((std::string *)a3, a3, v8, &v8[v9], v9);
        ;
        BOOL result = (uint64_t *)std::string::__insert_with_size<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>((std::string *)a3, v16, v18, &v18[v19], v19))
  {
    v5 += 24;
LABEL_10:
    if (v5 == v6) {
      break;
    }
    uint64_t v10 = *(unsigned __int8 *)(a3 + 23);
    if ((v10 & 0x80u) == 0) {
      uint64_t v11 = a3;
    }
    else {
      uint64_t v11 = *(void *)a3;
    }
    if ((v10 & 0x80u) != 0) {
      uint64_t v10 = *(void *)(a3 + 8);
    }
    uint64_t v12 = v11 + v10;
    size_t v13 = strlen(__s);
    std::string::__insert_with_size<char const*,char const*>((std::string *)a3, v12, __s, &__s[v13], v13);
    uint64_t v14 = *(unsigned __int8 *)(a3 + 23);
    if ((v14 & 0x80u) == 0) {
      uint64_t v15 = a3;
    }
    else {
      uint64_t v15 = *(void *)a3;
    }
    if ((v14 & 0x80u) != 0) {
      uint64_t v14 = *(void *)(a3 + 8);
    }
    uint64_t v16 = v15 + v14;
    int v17 = *(char *)(v5 + 23);
    if (v17 >= 0) {
      unint64_t v18 = (std::string::value_type *)v5;
    }
    else {
      unint64_t v18 = *(std::string::value_type **)v5;
    }
    if (v17 >= 0) {
      std::string::size_type v19 = *(unsigned __int8 *)(v5 + 23);
    }
    else {
      std::string::size_type v19 = *(void *)(v5 + 8);
    }
  }
  return result;
}

void sub_2563A541C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

void CLMicroLocationCoreAnalyticsPublishHelper::sendCommonTriggerEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  id v7 = a7;
  if (ULSettings::get<ULSettings::AnalyticsSendEventEnabled>())
  {
    id v8 = v7;
    AnalyticsSendEventLazy();
  }
}

void sub_2563A5524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::AnalyticsSendEventEnabled>()
{
  os_log_t v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  int v2 = [NSString stringWithUTF8String:"ULAnalyticsSendEventEnabled"];
  uint64_t v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 BOOLValue];
  }
  else {
    uint64_t v4 = [MEMORY[0x263EFFA88] BOOLValue];
  }
  uint64_t v5 = v4;

  return v5;
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  os_log_t v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  int v2 = [NSString stringWithUTF8String:"ULAnalyticsSendEventEnabled"];
  uint64_t v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 BOOLValue];
  }
  else {
    uint64_t v4 = [MEMORY[0x263EFFA88] BOOLValue];
  }
  uint64_t v5 = v4;

  return v5;
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  os_log_t v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  int v2 = [NSString stringWithUTF8String:"ULAnalyticsSendEventEnabled"];
  uint64_t v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 BOOLValue];
  }
  else {
    uint64_t v4 = [MEMORY[0x263EFFA88] BOOLValue];
  }
  uint64_t v5 = v4;

  return v5;
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  os_log_t v0 = +[ULDefaultsSingleton shared];
  uint64_t v1 = [v0 defaultsDictionary];

  int v2 = [NSString stringWithUTF8String:"ULAnalyticsSendEventEnabled"];
  uint64_t v3 = [v1 objectForKey:v2];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v4 = [v3 BOOLValue];
  }
  else {
    uint64_t v4 = [MEMORY[0x263EFFA88] BOOLValue];
  }
  uint64_t v5 = v4;

  return v5;
}

void sub_2563A5610(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id ___ZN41CLMicroLocationCoreAnalyticsPublishHelper22sendCommonTriggerEventERKN20CLMicroLocationProto14RecordingEventERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESC_SC_bbP19NSMutableDictionary_block_invoke(uint64_t a1)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  int v2 = [MEMORY[0x263EFF9A0] dictionary];
  uint64_t v4 = CLMicroLocationProtobufHelper::getRecordingTriggerString(*(CLMicroLocationProtobufHelper **)(a1 + 56), v3);
  uint64_t v5 = NSString;
  uint64_t v6 = *(const void ***)(a1 + 48);
  if (*((char *)v6 + 23) >= 0) {
    size_t v7 = *((unsigned __int8 *)v6 + 23);
  }
  else {
    size_t v7 = (size_t)v6[1];
  }
  id v8 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v7 + 12);
  if ((v48 & 0x80000000) != 0) {
    id v8 = *(unsigned char **)__p;
  }
  if (v7)
  {
    if (*((char *)v6 + 23) >= 0) {
      std::string::size_type v9 = v6;
    }
    else {
      std::string::size_type v9 = *v6;
    }
    memmove(v8, v9, v7);
  }
  strcpy(&v8[v7], "TriggerEvent");
  if ((v48 & 0x80000000) == 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = *(unsigned char **)__p;
  }
  uint64_t v11 = [v5 stringWithUTF8String:v10];
  [v2 setObject:v4 forKeyedSubscript:v11];

  if (SBYTE3(v48) < 0) {
    operator delete(*(void **)__p);
  }

  uint64_t v12 = NSString;
  size_t v13 = *(const void ***)(a1 + 48);
  if (*((char *)v13 + 23) >= 0) {
    size_t v14 = *((unsigned __int8 *)v13 + 23);
  }
  else {
    size_t v14 = (size_t)v13[1];
  }
  uint64_t v15 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v14 + 17);
  if ((v48 & 0x80000000) != 0) {
    uint64_t v15 = *(unsigned char **)__p;
  }
  if (v14)
  {
    if (*((char *)v13 + 23) >= 0) {
      uint64_t v16 = v13;
    }
    else {
      uint64_t v16 = *v13;
    }
    memmove(v15, v16, v14);
  }
  strcpy(&v15[v14], "TriggerEventCount");
  if ((v48 & 0x80000000) == 0) {
    int v17 = __p;
  }
  else {
    int v17 = *(unsigned char **)__p;
  }
  unint64_t v18 = [v12 stringWithUTF8String:v17];
  [v2 setObject:&unk_2704F1818 forKeyedSubscript:v18];

  if (SBYTE3(v48) < 0) {
    operator delete(*(void **)__p);
  }
  std::string::size_type v19 = NSString;
  CLMicroLocationClientUtils::getClientIdFromClientIdAndServiceUuid(*(const std::string **)(a1 + 64), (std::string *)__p);
  if ((v48 & 0x80000000) == 0) {
    char v20 = __p;
  }
  else {
    char v20 = *(unsigned char **)__p;
  }
  double v21 = [v19 stringWithUTF8String:v20];
  [v2 setObject:v21 forKeyedSubscript:@"clientId"];

  if (SBYTE3(v48) < 0) {
    operator delete(*(void **)__p);
  }
  int v22 = *(uint64_t **)(a1 + 72);
  if (*((char *)v22 + 23) < 0) {
    int v22 = (uint64_t *)*v22;
  }
  __int16 v23 = [NSString stringWithUTF8String:v22];
  [v2 setObject:v23 forKeyedSubscript:@"requestStatus"];

  if (*(unsigned char *)(a1 + 80)) {
    uint64_t v24 = "On";
  }
  else {
    uint64_t v24 = "Off";
  }
  __int16 v25 = [NSString stringWithUTF8String:v24];
  [v2 setObject:v25 forKeyedSubscript:@"displayState"];

  uint64_t v26 = [NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 81)];
  [v2 setObject:v26 forKeyedSubscript:@"lowLatencySession"];

  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  id v27 = *(id *)(a1 + 32);
  uint64_t v28 = [v27 countByEnumeratingWithState:&v42 objects:v51 count:16];
  if (v28)
  {
    uint64_t v30 = *(void *)v43;
    *(void *)&long long v29 = 136315138;
    long long v41 = v29;
    do
    {
      uint64_t v31 = 0;
      do
      {
        if (*(void *)v43 != v30) {
          objc_enumerationMutation(v27);
        }
        uint64_t v32 = *(void **)(*((void *)&v42 + 1) + 8 * v31);
        uint64_t v33 = objc_msgSend(*(id *)(a1 + 32), "objectForKey:", v32, v41, (void)v42);
        unint64_t v34 = [v2 objectForKey:v32];
        BOOL v35 = v34 == 0;

        if (v35)
        {
          [v2 setObject:v33 forKeyedSubscript:v32];
        }
        else
        {
          if (onceToken_MicroLocation_Default != -1) {
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_41);
          }
          uint64_t v36 = (id)logObject_MicroLocation_Default;
          if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
          {
            uint64_t v37 = [v32 UTF8String];
            *(_DWORD *)std::string __p = v41;
            *(void *)&__p[4] = v37;
            _os_log_impl(&dword_25631F000, v36, OS_LOG_TYPE_ERROR, "Trigger event already have %s. Ignoring.", __p, 0xCu);
          }
        }
        ++v31;
      }
      while (v28 != v31);
      uint64_t v28 = [v27 countByEnumeratingWithState:&v42 objects:v51 count:16];
    }
    while (v28);
  }

  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_41);
  }
  uint64_t v38 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v39 = [*(id *)(a1 + 40) UTF8String];
    *(void *)std::string __p = 68289539;
    *(_WORD *)&__p[8] = 2082;
    *(void *)&unsigned char __p[10] = "";
    __int16 v47 = 2081;
    uint64_t v48 = v39;
    __int16 v49 = 2113;
    int v50 = v2;
    _os_log_impl(&dword_25631F000, v38, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Sending CA event.\", \"name\":%{private, location:escape_only}s, \"event\":%{private, location:escape_only}@}", __p, 0x26u);
  }

  return v2;
}

void sub_2563A5BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationCoreAnalyticsPublishHelper::sendTriggerEvent()
{
  if (ULSettings::get<ULSettings::AnalyticsSendEventEnabled>())
  {
    os_log_t v0 = NSString;
    std::operator+<char>();
    uint64_t v1 = std::string::append(&v6, ".triggers");
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    int64_t v8 = v1->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long buf = v2;
    v1->__r_.__value_.__l.__size_ = 0;
    v1->__r_.__value_.__r.__words[2] = 0;
    v1->__r_.__value_.__r.__words[0] = 0;
    if (v8 >= 0) {
      uint64_t v3 = buf;
    }
    else {
      uint64_t v3 = *(uint8_t **)buf;
    }
    uint64_t v4 = [v0 stringWithUTF8String:v3];
    AnalyticsSendEventLazy();

    if (SHIBYTE(v8) < 0) {
      operator delete(*(void **)buf);
    }
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v6.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_41);
    }
    uint64_t v5 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_25631F000, v5, OS_LOG_TYPE_DEFAULT, "CLMicroLocationCoreAnalyticsPublishHelper, sendTriggerEvent, not sending event because sending to CoreAnalytics is disabled", buf, 2u);
    }
  }
}

void sub_2563A5E48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (*(char *)(v26 - 73) < 0) {
    operator delete(*(void **)(v26 - 96));
  }
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

id ___ZN41CLMicroLocationCoreAnalyticsPublishHelper16sendTriggerEventERKN20CLMicroLocationProto14RecordingEventERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESC_SC_SC_b_block_invoke(uint64_t a1)
{
  long long v2 = [MEMORY[0x263EFF9A0] dictionary];
  uint64_t v3 = *(uint64_t **)(a1 + 32);
  if (*((char *)v3 + 23) < 0) {
    uint64_t v3 = (uint64_t *)*v3;
  }
  uint64_t v4 = [NSString stringWithUTF8String:v3];
  [v2 setObject:v4 forKeyedSubscript:@"loiType"];

  std::string v6 = CLMicroLocationProtobufHelper::getRecordingTriggerString(*(CLMicroLocationProtobufHelper **)(a1 + 48), v5);
  size_t v7 = NSString;
  int64_t v8 = *(const void ***)(a1 + 40);
  if (*((char *)v8 + 23) >= 0) {
    size_t v9 = *((unsigned __int8 *)v8 + 23);
  }
  else {
    size_t v9 = (size_t)v8[1];
  }
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v9 + 12);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v9)
  {
    if (*((char *)v8 + 23) >= 0) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = *v8;
    }
    memmove(p_p, v11, v9);
  }
  strcpy((char *)p_p + v9, "TriggerEvent");
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v12 = &__p;
  }
  else {
    uint64_t v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  size_t v13 = [v7 stringWithUTF8String:v12];
  [v2 setObject:v6 forKeyedSubscript:v13];

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }

  size_t v14 = NSString;
  uint64_t v15 = *(const void ***)(a1 + 40);
  if (*((char *)v15 + 23) >= 0) {
    size_t v16 = *((unsigned __int8 *)v15 + 23);
  }
  else {
    size_t v16 = (size_t)v15[1];
  }
  int v17 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v16 + 17);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v16)
  {
    if (*((char *)v15 + 23) >= 0) {
      unint64_t v18 = v15;
    }
    else {
      unint64_t v18 = *v15;
    }
    memmove(v17, v18, v16);
  }
  strcpy((char *)v17 + v16, "TriggerEventCount");
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v19 = &__p;
  }
  else {
    std::string::size_type v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  char v20 = [v14 stringWithUTF8String:v19];
  [v2 setObject:&unk_2704F1818 forKeyedSubscript:v20];

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  double v21 = *(uint64_t **)(a1 + 56);
  if (*((char *)v21 + 23) < 0) {
    double v21 = (uint64_t *)*v21;
  }
  int v22 = [NSString stringWithUTF8String:v21];
  __int16 v23 = NSString;
  uint64_t v24 = *(const void ***)(a1 + 40);
  if (*((char *)v24 + 23) >= 0) {
    size_t v25 = *((unsigned __int8 *)v24 + 23);
  }
  else {
    size_t v25 = (size_t)v24[1];
  }
  uint64_t v26 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v25 + 7);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v25)
  {
    if (*((char *)v24 + 23) >= 0) {
      id v27 = v24;
    }
    else {
      id v27 = *v24;
    }
    memmove(v26, v27, v25);
  }
  strcpy((char *)v26 + v25, "Verdict");
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v28 = &__p;
  }
  else {
    uint64_t v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  long long v29 = [v23 stringWithUTF8String:v28];
  [v2 setObject:v22 forKeyedSubscript:v29];

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }

  uint64_t v30 = NSString;
  CLMicroLocationClientUtils::getClientIdFromClientIdAndServiceUuid(*(const std::string **)(a1 + 64), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v31 = &__p;
  }
  else {
    uint64_t v31 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  uint64_t v32 = [v30 stringWithUTF8String:v31];
  [v2 setObject:v32 forKeyedSubscript:@"clientId"];

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*(unsigned char *)(a1 + 72)) {
    uint64_t v33 = "On";
  }
  else {
    uint64_t v33 = "Off";
  }
  unint64_t v34 = [NSString stringWithUTF8String:v33];
  [v2 setObject:v34 forKeyedSubscript:@"displayState"];

  return v2;
}

void sub_2563A6260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<CLMicroLocationProto::DataType,unsigned long>,std::__map_value_compare<CLMicroLocationProto::DataType,std::__value_type<CLMicroLocationProto::DataType,unsigned long>,std::less<CLMicroLocationProto::DataType>,true>,std::allocator<std::__value_type<CLMicroLocationProto::DataType,unsigned long>>>::__emplace_unique_key_args<CLMicroLocationProto::DataType,std::piecewise_construct_t const&,std::tuple<CLMicroLocationProto::DataType const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  size_t v7 = a1 + 1;
  std::string v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        size_t v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        std::string v6 = *v9;
        size_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      std::string v6 = v9[1];
      if (!v6)
      {
        size_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    size_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x30uLL);
    unsigned char v11[8] = **a4;
    *((void *)v11 + 5) = 0;
    std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_33()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

unint64_t *std::__introsort<std::_ClassicAlgPolicy,std::greater<unsigned long> &,unsigned long *,false>(unint64_t *result, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  int v10 = result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    int v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = a2 - v11;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unint64_t v22 = *(a2 - 1);
          unint64_t v23 = *v11;
          if (v22 > *v11)
          {
            *uint64_t v11 = v22;
            *(a2 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v23;
          }
          break;
        case 3uLL:
          unint64_t v24 = v11[1];
          unint64_t v25 = *(a2 - 1);
          if (v24 <= v25) {
            unint64_t v26 = *(a2 - 1);
          }
          else {
            unint64_t v26 = v11[1];
          }
          if (v24 >= v25) {
            unint64_t v24 = *(a2 - 1);
          }
          *(a2 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v24;
          v11[1] = v26;
          unint64_t v27 = *(a2 - 1);
          if (v27 <= *v11) {
            unint64_t v28 = *v11;
          }
          else {
            unint64_t v28 = *(a2 - 1);
          }
          if (v27 >= *v11) {
            unint64_t v27 = *v11;
          }
          *(a2 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v27;
          unint64_t v30 = *v11;
          unint64_t v29 = v11[1];
          if (v28 <= v29) {
            unint64_t v30 = v11[1];
          }
          if (v28 < v29) {
            unint64_t v29 = v28;
          }
          *uint64_t v11 = v30;
          v11[1] = v29;
          break;
        case 4uLL:
          unint64_t v32 = v11[1];
          unint64_t v31 = v11[2];
          if (*v11 <= v31) {
            unint64_t v33 = v11[2];
          }
          else {
            unint64_t v33 = *v11;
          }
          if (*v11 < v31) {
            unint64_t v31 = *v11;
          }
          void v11[2] = v31;
          *uint64_t v11 = v33;
          unint64_t v34 = *(a2 - 1);
          if (v32 <= v34) {
            unint64_t v35 = *(a2 - 1);
          }
          else {
            unint64_t v35 = v32;
          }
          if (v32 < v34) {
            unint64_t v34 = v32;
          }
          *(a2 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v34;
          unint64_t v36 = *v11;
          if (*v11 <= v35) {
            unint64_t v37 = v35;
          }
          else {
            unint64_t v37 = *v11;
          }
          if (*v11 >= v35) {
            unint64_t v36 = v35;
          }
          *uint64_t v11 = v37;
          v11[1] = v36;
          unint64_t v38 = v11[2];
          unint64_t v39 = *(a2 - 1);
          if (v38 <= v39) {
            unint64_t v40 = *(a2 - 1);
          }
          else {
            unint64_t v40 = v11[2];
          }
          if (v38 >= v39) {
            unint64_t v38 = *(a2 - 1);
          }
          *(a2 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v38;
          unint64_t v41 = v11[1];
          if (v41 <= v40) {
            unint64_t v42 = v40;
          }
          else {
            unint64_t v42 = v11[1];
          }
          if (v41 >= v40) {
            unint64_t v41 = v40;
          }
          v11[1] = v42;
          void v11[2] = v41;
          break;
        case 5uLL:
          unint64_t v43 = *v11;
          unint64_t v44 = v11[1];
          if (*v11 <= v44) {
            unint64_t v45 = v11[1];
          }
          else {
            unint64_t v45 = *v11;
          }
          if (*v11 >= v44) {
            unint64_t v43 = v11[1];
          }
          *uint64_t v11 = v45;
          v11[1] = v43;
          unint64_t v46 = v11[3];
          unint64_t v47 = *(a2 - 1);
          if (v46 <= v47) {
            unint64_t v48 = *(a2 - 1);
          }
          else {
            unint64_t v48 = v11[3];
          }
          if (v46 >= v47) {
            unint64_t v46 = *(a2 - 1);
          }
          *(a2 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v46;
          void v11[3] = v48;
          unint64_t v49 = *(a2 - 1);
          unint64_t v50 = v11[2];
          if (v49 <= v50) {
            unint64_t v51 = v11[2];
          }
          else {
            unint64_t v51 = *(a2 - 1);
          }
          if (v49 >= v50) {
            unint64_t v49 = v11[2];
          }
          *(a2 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v49;
          unint64_t v53 = v11[2];
          unint64_t v52 = v11[3];
          unint64_t v54 = v11[1];
          if (v51 <= v52) {
            unint64_t v53 = v11[3];
          }
          if (v51 < v52) {
            unint64_t v52 = v51;
          }
          void v11[2] = v53;
          void v11[3] = v52;
          unint64_t v55 = *(a2 - 1);
          if (v54 <= v55) {
            unint64_t v56 = *(a2 - 1);
          }
          else {
            unint64_t v56 = v54;
          }
          if (v54 < v55) {
            unint64_t v55 = v54;
          }
          *(a2 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v55;
          unint64_t v57 = *v11;
          unint64_t v59 = v11[2];
          unint64_t v58 = v11[3];
          if (v58 <= *v11) {
            unint64_t v60 = *v11;
          }
          else {
            unint64_t v60 = v11[3];
          }
          if (v58 >= *v11) {
            unint64_t v58 = *v11;
          }
          if (v60 <= v59) {
            unint64_t v57 = v11[2];
          }
          if (v60 < v59) {
            unint64_t v59 = v60;
          }
          if (v58 <= v56) {
            unint64_t v61 = v56;
          }
          else {
            unint64_t v61 = v58;
          }
          if (v58 >= v56) {
            unint64_t v58 = v56;
          }
          if (v61 <= v59) {
            unint64_t v56 = v59;
          }
          *uint64_t v11 = v57;
          v11[1] = v56;
          if (v61 >= v59) {
            unint64_t v62 = v59;
          }
          else {
            unint64_t v62 = v61;
          }
          void v11[2] = v62;
          void v11[3] = v58;
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 191) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<unsigned long> &,unsigned long *,unsigned long *>(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    int v17 = &v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<unsigned long> &,unsigned long *>(v11, &v11[v15 >> 1], a2 - 1);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<unsigned long> &,unsigned long *>(v11 + 1, v17 - 1, a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<unsigned long> &,unsigned long *>(v11 + 2, &v11[v16 + 1], a2 - 3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<unsigned long> &,unsigned long *>(v17 - 1, v17, &v11[v16 + 1]);
      unint64_t v18 = *v11;
      *uint64_t v11 = *v17;
      *int v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<unsigned long> &,unsigned long *>(&v11[v15 >> 1], v11, a2 - 1);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (*(v11 - 1) <= *v11)
    {
      BOOL result = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned long *,std::greater<unsigned long> &>(v11, (uint64_t *)a2);
      uint64_t v11 = result;
      goto LABEL_19;
    }
LABEL_14:
    std::string::size_type v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned long *,std::greater<unsigned long> &>(v11, a2);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<unsigned long> &,unsigned long *>(v11, v19);
    uint64_t v11 = v19 + 1;
    BOOL result = (unint64_t *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<unsigned long> &,unsigned long *>(v19 + 1, a2);
    if (result)
    {
      a4 = -v13;
      a2 = v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      BOOL result = (unint64_t *)std::__introsort<std::_ClassicAlgPolicy,std::greater<unsigned long> &,unsigned long *,false>(v10, v19, a3, -v13, a5 & 1);
      uint64_t v11 = v19 + 1;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  uint64_t v63 = v11 + 1;
  BOOL v65 = v11 == a2 || v63 == a2;
  if (a5)
  {
    if (!v65)
    {
      uint64_t v66 = 0;
      unint64_t v67 = v11;
      do
      {
        unint64_t v69 = *v67;
        unint64_t v68 = v67[1];
        unint64_t v67 = v63;
        if (v68 > v69)
        {
          uint64_t v70 = v66;
          while (1)
          {
            *(unint64_t *)((char *)v11 + v70 + 8) = v69;
            if (!v70) {
              break;
            }
            unint64_t v69 = *(unint64_t *)((char *)v11 + v70 - 8);
            v70 -= 8;
            if (v68 <= v69)
            {
              uint64_t v71 = (unint64_t *)((char *)v11 + v70 + 8);
              goto LABEL_125;
            }
          }
          uint64_t v71 = v11;
LABEL_125:
          unint64_t *v71 = v68;
        }
        uint64_t v63 = v67 + 1;
        v66 += 8;
      }
      while (v67 + 1 != a2);
    }
  }
  else if (!v65)
  {
    do
    {
      unint64_t v73 = *v10;
      unint64_t v72 = v10[1];
      int v10 = v63;
      if (v72 > v73)
      {
        do
        {
          *uint64_t v63 = v73;
          unint64_t v73 = *(v63 - 2);
          --v63;
        }
        while (v72 > v73);
        *uint64_t v63 = v72;
      }
      uint64_t v63 = v10 + 1;
    }
    while (v10 + 1 != a2);
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<unsigned long> &,unsigned long *>(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *a1;
  unint64_t v5 = *a3;
  if (*a2 > *a1)
  {
    if (v5 > v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 <= v4) {
      return 1;
    }
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 > v3)
  {
    *a2 = v5;
    *a3 = v3;
    unint64_t v6 = *a1;
    if (*a2 <= *a1) {
      return 1;
    }
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

unint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned long *,std::greater<unsigned long> &>(unint64_t *a1, uint64_t *a2)
{
  unint64_t v2 = *a1;
  if (*a1 <= *(a2 - 1))
  {
    unint64_t v5 = (uint64_t *)(a1 + 1);
    do
    {
      unint64_t v3 = (unint64_t *)v5;
      if (v5 >= a2) {
        break;
      }
      ++v5;
    }
    while (v2 <= *v3);
  }
  else
  {
    unint64_t v3 = a1;
    do
    {
      unint64_t v4 = v3[1];
      ++v3;
    }
    while (v2 <= v4);
  }
  if (v3 < (unint64_t *)a2)
  {
    do
      unint64_t v6 = *--a2;
    while (v2 > v6);
  }
  if (v3 < (unint64_t *)a2)
  {
    unint64_t v7 = *v3;
    unint64_t v8 = *a2;
    do
    {
      *unint64_t v3 = v8;
      *a2 = v7;
      do
      {
        unint64_t v9 = v3[1];
        ++v3;
        unint64_t v7 = v9;
      }
      while (v2 <= v9);
      do
      {
        unint64_t v10 = *--a2;
        unint64_t v8 = v10;
      }
      while (v2 > v10);
    }
    while (v3 < (unint64_t *)a2);
  }
  if (v3 - 1 != a1) {
    *a1 = *(v3 - 1);
  }
  *(v3 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v2;
  return v3;
}

unint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned long *,std::greater<unsigned long> &>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = *a1;
  do
    unint64_t v4 = a1[++v2];
  while (v4 > v3);
  unint64_t v5 = &a1[v2];
  unint64_t v6 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v5 >= a2) {
        break;
      }
      unint64_t v8 = *--a2;
    }
    while (v8 <= v3);
  }
  else
  {
    do
      unint64_t v7 = *--a2;
    while (v7 <= v3);
  }
  if (v5 < a2)
  {
    unint64_t v9 = *a2;
    unint64_t v10 = &a1[v2];
    uint64_t v11 = a2;
    do
    {
      *unint64_t v10 = v9;
      *uint64_t v11 = v4;
      do
      {
        unint64_t v12 = v10[1];
        ++v10;
        unint64_t v4 = v12;
      }
      while (v12 > v3);
      do
      {
        unint64_t v13 = *--v11;
        unint64_t v9 = v13;
      }
      while (v13 <= v3);
    }
    while (v10 < v11);
    unint64_t v6 = v10 - 1;
  }
  if (v6 != a1) {
    *a1 = *v6;
  }
  unint64_t *v6 = v3;
  return v6;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<unsigned long> &,unsigned long *>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      unint64_t v3 = *(a2 - 1);
      unint64_t v4 = *a1;
      if (v3 > *a1)
      {
        *a1 = v3;
        *(a2 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v4;
      }
      return 1;
    case 3:
      unint64_t v20 = a1[1];
      unint64_t v21 = *(a2 - 1);
      if (v20 <= v21) {
        unint64_t v22 = *(a2 - 1);
      }
      else {
        unint64_t v22 = a1[1];
      }
      if (v20 >= v21) {
        unint64_t v20 = *(a2 - 1);
      }
      *(a2 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v20;
      a1[1] = v22;
      unint64_t v23 = *(a2 - 1);
      if (v23 <= *a1) {
        unint64_t v24 = *a1;
      }
      else {
        unint64_t v24 = *(a2 - 1);
      }
      if (v23 >= *a1) {
        unint64_t v23 = *a1;
      }
      *(a2 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v23;
      unint64_t v26 = *a1;
      unint64_t v25 = a1[1];
      if (v24 <= v25) {
        unint64_t v26 = a1[1];
      }
      if (v24 < v25) {
        unint64_t v25 = v24;
      }
      *a1 = v26;
      a1[1] = v25;
      return 1;
    case 4:
      unint64_t v48 = a1[1];
      unint64_t v47 = a1[2];
      if (*a1 <= v47) {
        unint64_t v49 = a1[2];
      }
      else {
        unint64_t v49 = *a1;
      }
      if (*a1 < v47) {
        unint64_t v47 = *a1;
      }
      a1[2] = v47;
      *a1 = v49;
      unint64_t v50 = *(a2 - 1);
      if (v48 <= v50) {
        unint64_t v51 = *(a2 - 1);
      }
      else {
        unint64_t v51 = v48;
      }
      if (v48 < v50) {
        unint64_t v50 = v48;
      }
      *(a2 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v50;
      unint64_t v52 = *a1;
      if (*a1 <= v51) {
        unint64_t v53 = v51;
      }
      else {
        unint64_t v53 = *a1;
      }
      if (*a1 >= v51) {
        unint64_t v52 = v51;
      }
      *a1 = v53;
      a1[1] = v52;
      unint64_t v54 = a1[2];
      unint64_t v55 = *(a2 - 1);
      if (v54 <= v55) {
        unint64_t v56 = *(a2 - 1);
      }
      else {
        unint64_t v56 = a1[2];
      }
      if (v54 >= v55) {
        unint64_t v54 = *(a2 - 1);
      }
      *(a2 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v54;
      unint64_t v57 = a1[1];
      if (v57 <= v56) {
        unint64_t v58 = v56;
      }
      else {
        unint64_t v58 = a1[1];
      }
      if (v57 >= v56) {
        unint64_t v57 = v56;
      }
      a1[1] = v58;
      a1[2] = v57;
      return 1;
    case 5:
      unint64_t v27 = *a1;
      unint64_t v28 = a1[1];
      if (*a1 <= v28) {
        unint64_t v29 = a1[1];
      }
      else {
        unint64_t v29 = *a1;
      }
      if (*a1 >= v28) {
        unint64_t v27 = a1[1];
      }
      *a1 = v29;
      a1[1] = v27;
      unint64_t v30 = a1[3];
      unint64_t v31 = *(a2 - 1);
      if (v30 <= v31) {
        unint64_t v32 = *(a2 - 1);
      }
      else {
        unint64_t v32 = a1[3];
      }
      if (v30 >= v31) {
        unint64_t v30 = *(a2 - 1);
      }
      *(a2 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v30;
      a1[3] = v32;
      unint64_t v33 = *(a2 - 1);
      unint64_t v34 = a1[2];
      if (v33 <= v34) {
        unint64_t v35 = a1[2];
      }
      else {
        unint64_t v35 = *(a2 - 1);
      }
      if (v33 >= v34) {
        unint64_t v33 = a1[2];
      }
      *(a2 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v33;
      unint64_t v37 = a1[2];
      unint64_t v36 = a1[3];
      unint64_t v38 = a1[1];
      if (v35 <= v36) {
        unint64_t v37 = a1[3];
      }
      if (v35 < v36) {
        unint64_t v36 = v35;
      }
      a1[2] = v37;
      a1[3] = v36;
      unint64_t v39 = *(a2 - 1);
      if (v38 <= v39) {
        unint64_t v40 = *(a2 - 1);
      }
      else {
        unint64_t v40 = v38;
      }
      if (v38 < v39) {
        unint64_t v39 = v38;
      }
      *(a2 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v39;
      unint64_t v41 = *a1;
      unint64_t v43 = a1[2];
      unint64_t v42 = a1[3];
      if (v42 <= *a1) {
        unint64_t v44 = *a1;
      }
      else {
        unint64_t v44 = a1[3];
      }
      if (v42 >= *a1) {
        unint64_t v42 = *a1;
      }
      if (v44 <= v43) {
        unint64_t v41 = a1[2];
      }
      if (v44 < v43) {
        unint64_t v43 = v44;
      }
      if (v42 <= v40) {
        unint64_t v45 = v40;
      }
      else {
        unint64_t v45 = v42;
      }
      if (v42 >= v40) {
        unint64_t v42 = v40;
      }
      if (v45 <= v43) {
        unint64_t v40 = v43;
      }
      *a1 = v41;
      a1[1] = v40;
      if (v45 >= v43) {
        unint64_t v46 = v43;
      }
      else {
        unint64_t v46 = v45;
      }
      a1[2] = v46;
      a1[3] = v42;
      return 1;
    default:
      unint64_t v6 = a1 + 2;
      unint64_t v5 = a1[2];
      unint64_t v8 = *a1;
      unint64_t v7 = a1[1];
      if (v7 <= v5) {
        unint64_t v9 = a1[2];
      }
      else {
        unint64_t v9 = a1[1];
      }
      if (v7 < v5) {
        unint64_t v5 = a1[1];
      }
      if (v5 <= v8) {
        unint64_t v10 = *a1;
      }
      else {
        unint64_t v10 = v5;
      }
      if (v5 >= v8) {
        unint64_t v5 = *a1;
      }
      unint64_t *v6 = v5;
      if (v10 <= v9) {
        unint64_t v11 = v9;
      }
      else {
        unint64_t v11 = v8;
      }
      if (v10 >= v9) {
        unint64_t v10 = v9;
      }
      *a1 = v11;
      a1[1] = v10;
      unint64_t v12 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v13 = 0;
      uint64_t v14 = 24;
      break;
  }
  while (1)
  {
    unint64_t v15 = *v12;
    unint64_t v16 = *v6;
    if (*v12 > v16)
    {
      uint64_t v17 = v14;
      while (1)
      {
        *(unint64_t *)((char *)a1 + v17) = v16;
        uint64_t v18 = v17 - 8;
        if (v17 == 8) {
          break;
        }
        unint64_t v16 = *(unint64_t *)((char *)a1 + v17 - 16);
        v17 -= 8;
        if (v15 <= v16)
        {
          std::string::size_type v19 = (unint64_t *)((char *)a1 + v18);
          goto LABEL_27;
        }
      }
      std::string::size_type v19 = a1;
LABEL_27:
      *std::string::size_type v19 = v15;
      if (++v13 == 8) {
        return v12 + 1 == a2;
      }
    }
    unint64_t v6 = v12;
    v14 += 8;
    if (++v12 == a2) {
      return 1;
    }
  }
}

unint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<unsigned long> &,unsigned long *,unsigned long *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    unint64_t v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      unint64_t v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<unsigned long> &,unsigned long *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    int v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = v6;
      do
      {
        unint64_t v15 = *v14;
        if (*v14 > *a1)
        {
          *uint64_t v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<unsigned long> &,unsigned long *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      int v13 = a3;
    }
    if (v8 >= 9)
    {
      uint64_t v16 = (unint64_t)v8 >> 3;
      do
      {
        uint64_t v17 = 0;
        unint64_t v18 = *a1;
        std::string::size_type v19 = a1;
        do
        {
          unint64_t v20 = &v19[v17 + 1];
          uint64_t v21 = (2 * v17) | 1;
          uint64_t v17 = 2 * v17 + 2;
          if (v17 >= v16)
          {
            unint64_t v22 = *v20;
            uint64_t v17 = v21;
          }
          else
          {
            unint64_t v22 = *v20;
            unint64_t v23 = v20[1];
            if (*v20 >= v23) {
              unint64_t v22 = v20[1];
            }
            if (*v20 <= v23) {
              uint64_t v17 = v21;
            }
            else {
              ++v20;
            }
          }
          *std::string::size_type v19 = v22;
          std::string::size_type v19 = v20;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if (v20 == --v6)
        {
          unint64_t *v20 = v18;
        }
        else
        {
          unint64_t *v20 = *v6;
          unint64_t *v6 = v18;
          uint64_t v24 = (char *)v20 - (char *)a1 + 8;
          if (v24 >= 9)
          {
            unint64_t v25 = (((unint64_t)v24 >> 3) - 2) >> 1;
            unint64_t v26 = &a1[v25];
            unint64_t v27 = *v26;
            unint64_t v28 = *v20;
            if (*v26 > *v20)
            {
              do
              {
                unint64_t *v20 = v27;
                unint64_t v20 = v26;
                if (!v25) {
                  break;
                }
                unint64_t v25 = (v25 - 1) >> 1;
                unint64_t v26 = &a1[v25];
                unint64_t v27 = *v26;
              }
              while (*v26 > v28);
              unint64_t *v20 = v28;
            }
          }
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<unsigned long> &,unsigned long *>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = (v4 >> 2) + 1;
      uint64_t v8 = (unint64_t *)(result + 8 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 >= a3)
      {
        unint64_t v10 = *v8;
      }
      else
      {
        unint64_t v10 = *v8;
        unint64_t v11 = v8[1];
        if (*v8 >= v11) {
          unint64_t v10 = v8[1];
        }
        if (*v8 > v11)
        {
          ++v8;
          uint64_t v7 = v9;
        }
      }
      unint64_t v12 = *a4;
      if (v10 <= *a4)
      {
        do
        {
          *a4 = v10;
          a4 = v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v13 = (2 * v7) | 1;
          uint64_t v8 = (unint64_t *)(result + 8 * v13);
          uint64_t v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            unint64_t v10 = *v8;
            uint64_t v7 = v13;
          }
          else
          {
            unint64_t v10 = *v8;
            unint64_t v14 = v8[1];
            if (*v8 >= v14) {
              unint64_t v10 = v8[1];
            }
            if (*v8 <= v14) {
              uint64_t v7 = v13;
            }
            else {
              ++v8;
            }
          }
        }
        while (v10 <= v12);
        *a4 = v12;
      }
    }
  }
  return result;
}

void std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]()
{
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,CLMicroLocationProto::ServiceQualityReasonEnum *,false>(uint64_t result, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v10 = (int *)result;
LABEL_2:
  unint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    unint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = a2 - v11;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          int v22 = *(a2 - 1);
          int v23 = *v11;
          if (v22 < *v11)
          {
            *unint64_t v11 = v22;
            *(a2 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v23;
          }
          break;
        case 3uLL:
          BOOL result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CLMicroLocationProto::ServiceQualityReasonEnum *>(v11, v11 + 1, a2 - 1);
          break;
        case 4uLL:
          BOOL result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CLMicroLocationProto::ServiceQualityReasonEnum *>(v11, v11 + 1, v11 + 2, a2 - 1);
          break;
        case 5uLL:
          BOOL result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CLMicroLocationProto::ServiceQualityReasonEnum *>(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 95) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CLMicroLocationProto::ServiceQualityReasonEnum *,CLMicroLocationProto::ServiceQualityReasonEnum *>(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = &v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x201)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CLMicroLocationProto::ServiceQualityReasonEnum *>(v11, &v11[v15 >> 1], a2 - 1);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CLMicroLocationProto::ServiceQualityReasonEnum *>(v11 + 1, v17 - 1, a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CLMicroLocationProto::ServiceQualityReasonEnum *>(v11 + 2, &v11[v16 + 1], a2 - 3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CLMicroLocationProto::ServiceQualityReasonEnum *>(v17 - 1, v17, &v11[v16 + 1]);
      int v18 = *v11;
      *unint64_t v11 = *v17;
      *uint64_t v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CLMicroLocationProto::ServiceQualityReasonEnum *>(&v11[v15 >> 1], v11, a2 - 1);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (*(v11 - 1) >= *v11)
    {
      BOOL result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationProto::ServiceQualityReasonEnum *,std::__less<void,void> &>(v11, a2);
      unint64_t v11 = (int *)result;
      goto LABEL_19;
    }
LABEL_14:
    std::string::size_type v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationProto::ServiceQualityReasonEnum *,std::__less<void,void> &>(v11, a2);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CLMicroLocationProto::ServiceQualityReasonEnum *>(v11, v19);
    unint64_t v11 = v19 + 1;
    BOOL result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CLMicroLocationProto::ServiceQualityReasonEnum *>(v19 + 1, a2);
    if (result)
    {
      a4 = -v13;
      a2 = v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      BOOL result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,CLMicroLocationProto::ServiceQualityReasonEnum *,false>(v10, v19, a3, -v13, a5 & 1);
      unint64_t v11 = v19 + 1;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  uint64_t v24 = v11 + 1;
  BOOL v26 = v11 == a2 || v24 == a2;
  if (a5)
  {
    if (!v26)
    {
      uint64_t v27 = 0;
      unint64_t v28 = v11;
      do
      {
        int v30 = *v28;
        int v29 = v28[1];
        unint64_t v28 = v24;
        if (v29 < v30)
        {
          uint64_t v31 = v27;
          while (1)
          {
            *(int *)((char *)v11 + v31 + 4) = v30;
            if (!v31) {
              break;
            }
            int v30 = *(int *)((char *)v11 + v31 - 4);
            v31 -= 4;
            if (v29 >= v30)
            {
              unint64_t v32 = (int *)((char *)v11 + v31 + 4);
              goto LABEL_50;
            }
          }
          unint64_t v32 = v11;
LABEL_50:
          int *v32 = v29;
        }
        uint64_t v24 = v28 + 1;
        v27 += 4;
      }
      while (v28 + 1 != a2);
    }
  }
  else if (!v26)
  {
    do
    {
      int v34 = *v10;
      int v33 = v10[1];
      unint64_t v10 = v24;
      if (v33 < v34)
      {
        do
        {
          *uint64_t v24 = v34;
          int v34 = *(v24 - 2);
          --v24;
        }
        while (v33 < v34);
        *uint64_t v24 = v33;
      }
      uint64_t v24 = v10 + 1;
    }
    while (v10 + 1 != a2);
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CLMicroLocationProto::ServiceQualityReasonEnum *>(int *a1, int *a2, int *a3)
{
  int v3 = *a2;
  int v4 = *a1;
  int v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 >= v4) {
      return 1;
    }
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    int v6 = *a1;
    if (*a2 >= *a1) {
      return 1;
    }
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationProto::ServiceQualityReasonEnum *,std::__less<void,void> &>(int *a1, int *a2)
{
  int v2 = *a1;
  if (*a1 >= *(a2 - 1))
  {
    int v5 = a1 + 1;
    do
    {
      int v3 = v5;
      if (v5 >= a2) {
        break;
      }
      ++v5;
    }
    while (v2 >= *v3);
  }
  else
  {
    int v3 = a1;
    do
    {
      int v4 = v3[1];
      ++v3;
    }
    while (v2 >= v4);
  }
  if (v3 < a2)
  {
    do
      int v6 = *--a2;
    while (v2 < v6);
  }
  if (v3 < a2)
  {
    int v7 = *v3;
    int v8 = *a2;
    do
    {
      *int v3 = v8;
      *a2 = v7;
      do
      {
        int v9 = v3[1];
        ++v3;
        int v7 = v9;
      }
      while (v2 >= v9);
      do
      {
        int v10 = *--a2;
        int v8 = v10;
      }
      while (v2 < v10);
    }
    while (v3 < a2);
  }
  if (v3 - 1 != a1) {
    *a1 = *(v3 - 1);
  }
  *(v3 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v2;
  return v3;
}

int *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationProto::ServiceQualityReasonEnum *,std::__less<void,void> &>(int *a1, int *a2)
{
  uint64_t v2 = 0;
  int v3 = *a1;
  do
    int v4 = a1[++v2];
  while (v4 < v3);
  int v5 = &a1[v2];
  int v6 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v5 >= a2) {
        break;
      }
      int v8 = *--a2;
    }
    while (v8 >= v3);
  }
  else
  {
    do
      int v7 = *--a2;
    while (v7 >= v3);
  }
  if (v5 < a2)
  {
    int v9 = *a2;
    int v10 = &a1[v2];
    unint64_t v11 = a2;
    do
    {
      *int v10 = v9;
      *unint64_t v11 = v4;
      do
      {
        int v12 = v10[1];
        ++v10;
        int v4 = v12;
      }
      while (v12 < v3);
      do
      {
        int v13 = *--v11;
        int v9 = v13;
      }
      while (v13 >= v3);
    }
    while (v10 < v11);
    int v6 = v10 - 1;
  }
  if (v6 != a1) {
    *a1 = *v6;
  }
  int *v6 = v3;
  return v6;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CLMicroLocationProto::ServiceQualityReasonEnum *>(int *a1, int *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v6 = *(a2 - 1);
      int v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CLMicroLocationProto::ServiceQualityReasonEnum *>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CLMicroLocationProto::ServiceQualityReasonEnum *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CLMicroLocationProto::ServiceQualityReasonEnum *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      int v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CLMicroLocationProto::ServiceQualityReasonEnum *>(a1, a1 + 1, a1 + 2);
      int v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 12;
      break;
  }
  while (1)
  {
    int v12 = *v9;
    int v13 = *v8;
    if (*v9 < *v8)
    {
      uint64_t v14 = v11;
      while (1)
      {
        *(int *)((char *)a1 + v14) = v13;
        uint64_t v15 = v14 - 4;
        if (v14 == 4) {
          break;
        }
        int v13 = *(int *)((char *)a1 + v14 - 8);
        v14 -= 4;
        if (v12 >= v13)
        {
          unint64_t v16 = (int *)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      unint64_t v16 = a1;
LABEL_12:
      *unint64_t v16 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    int v8 = v9;
    v11 += 4;
    if (++v9 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CLMicroLocationProto::ServiceQualityReasonEnum *>(int *a1, int *a2, int *a3, int *a4)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CLMicroLocationProto::ServiceQualityReasonEnum *>(a1, a2, a3);
  int v9 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    int v10 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v10;
      int v11 = *a1;
      if (*a2 < *a1)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CLMicroLocationProto::ServiceQualityReasonEnum *>(int *a1, int *a2, int *a3, int *a4, int *a5)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CLMicroLocationProto::ServiceQualityReasonEnum *>(a1, a2, a3, a4);
  int v11 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v11;
    int v12 = *a3;
    if (*a4 < *a3)
    {
      *a3 = *a4;
      *a4 = v12;
      int v13 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v13;
        int v14 = *a1;
        if (*a2 < *a1)
        {
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CLMicroLocationProto::ServiceQualityReasonEnum *,CLMicroLocationProto::ServiceQualityReasonEnum *>(int *a1, int *a2, int *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    int v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      int v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CLMicroLocationProto::ServiceQualityReasonEnum *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    int v13 = v6;
    if (v6 != a3)
    {
      int v14 = v6;
      do
      {
        int v15 = *v14;
        if (*v14 < *a1)
        {
          *int v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CLMicroLocationProto::ServiceQualityReasonEnum *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      int v13 = a3;
    }
    if (v8 >= 5)
    {
      uint64_t v16 = (unint64_t)v8 >> 2;
      do
      {
        uint64_t v17 = 0;
        int v18 = *a1;
        std::string::size_type v19 = a1;
        do
        {
          char v20 = &v19[v17 + 1];
          uint64_t v21 = (2 * v17) | 1;
          uint64_t v17 = 2 * v17 + 2;
          if (v17 >= v16)
          {
            int v22 = *v20;
            uint64_t v17 = v21;
          }
          else
          {
            int v22 = *v20;
            int v23 = v20[1];
            if (*v20 <= v23) {
              int v22 = v20[1];
            }
            if (*v20 >= v23) {
              uint64_t v17 = v21;
            }
            else {
              ++v20;
            }
          }
          *std::string::size_type v19 = v22;
          std::string::size_type v19 = v20;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if (v20 == --v6)
        {
          int *v20 = v18;
        }
        else
        {
          int *v20 = *v6;
          int *v6 = v18;
          uint64_t v24 = (char *)v20 - (char *)a1 + 4;
          if (v24 >= 5)
          {
            unint64_t v25 = (((unint64_t)v24 >> 2) - 2) >> 1;
            BOOL v26 = &a1[v25];
            int v27 = *v26;
            int v28 = *v20;
            if (*v26 < *v20)
            {
              do
              {
                int *v20 = v27;
                char v20 = v26;
                if (!v25) {
                  break;
                }
                unint64_t v25 = (v25 - 1) >> 1;
                BOOL v26 = &a1[v25];
                int v27 = *v26;
              }
              while (*v26 < v28);
              int *v20 = v28;
            }
          }
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CLMicroLocationProto::ServiceQualityReasonEnum *>(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 2)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = (v4 >> 1) + 1;
      uint64_t v8 = (int *)(result + 4 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 >= a3)
      {
        int v10 = *v8;
      }
      else
      {
        int v10 = *v8;
        int v11 = v8[1];
        if (*v8 <= v11) {
          int v10 = v8[1];
        }
        if (*v8 < v11)
        {
          ++v8;
          uint64_t v7 = v9;
        }
      }
      int v12 = *a4;
      if (v10 >= *a4)
      {
        do
        {
          *a4 = v10;
          a4 = v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v13 = (2 * v7) | 1;
          uint64_t v8 = (int *)(result + 4 * v13);
          uint64_t v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            int v10 = *v8;
            uint64_t v7 = v13;
          }
          else
          {
            int v10 = *v8;
            int v14 = v8[1];
            if (*v8 <= v14) {
              int v10 = v8[1];
            }
            if (*v8 >= v14) {
              uint64_t v7 = v13;
            }
            else {
              ++v8;
            }
          }
        }
        while (v10 >= v12);
        *a4 = v12;
      }
    }
  }
  return result;
}

std::vector<std::string> **std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](std::vector<std::string> **a1, long long *a2)
{
  uint64_t v4 = *a1;
  std::vector<std::string>::pointer end = (*a1)->__end_;
  uint64_t v6 = *a1;
  char value = v6->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::string> *)&v6->__end_cap_;
  uint64_t v8 = value;
  if (end >= value)
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)v4->__begin_) >> 3);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v4->__begin_) >> 3);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x555555555555555) {
      unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v15 = v13;
    }
    __v.__end_cap_.__value_ = p_end_cap;
    if (v15) {
      uint64_t v16 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, v15);
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v17 = v16 + v12;
    __v.__first_ = v16;
    __v.__begin_ = v17;
    __v.__end_cap_.__value_ = &v16[v15];
    long long v18 = *a2;
    v17->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
    *((void *)a2 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    __v.__end_ = v17 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(v4, &__v);
    int v11 = v4->__end_;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  else
  {
    long long v10 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v10;
    *((void *)a2 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    int v11 = end + 1;
    v4->__end_ = end + 1;
  }
  v4->__end_ = v11;
  return a1;
}

void sub_2563A7C68(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t std::string::__insert_with_size<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(std::string *this, uint64_t a2, std::string::value_type *a3, std::string::value_type *a4, std::string::size_type __n_add)
{
  uint64_t v6 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v9 = (std::string *)this->__r_.__value_.__r.__words[0];
    std::string::size_type v7 = a2 - this->__r_.__value_.__r.__words[0];
    if (__n_add)
    {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    uint64_t v6 = (std::string *)this->__r_.__value_.__r.__words[0];
    return (uint64_t)v6 + v7;
  }
  std::string::size_type v7 = a2 - (void)this;
  if (!__n_add) {
    return (uint64_t)v6 + v7;
  }
  std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  uint64_t v9 = this;
LABEL_6:
  if (v9 <= (std::string *)a3 && (char *)&v9->__r_.__value_.__l.__data_ + size + 1 > a3)
  {
    std::string::__init_with_sentinel[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(&__p, a3, a4);
    std::string::size_type v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v10 = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v12 = std::string::__insert_from_safe_copy[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(v6, __n_add, v7, (char *)p_p, (char *)p_p + v10);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return v12;
  }
  return std::string::__insert_from_safe_copy[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(this, __n_add, v7, a3, a4);
}

void sub_2563A7D90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::string::__insert_from_safe_copy[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(std::string *this, std::string::size_type __n_add, std::string::size_type __n_copy, char *a4, char *a5)
{
  uint64_t v9 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    std::string::size_type v11 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v11 - size >= __n_add)
    {
      uint64_t v12 = (std::string *)this->__r_.__value_.__r.__words[0];
      goto LABEL_7;
    }
  }
  else
  {
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v11 = 22;
    uint64_t v12 = this;
    if (22 - size >= __n_add)
    {
LABEL_7:
      size_t v13 = size - __n_copy;
      if (size == __n_copy) {
        std::string::size_type size = __n_copy;
      }
      else {
        memmove((char *)v12 + __n_copy + __n_add, (char *)v12 + __n_copy, v13);
      }
      goto LABEL_10;
    }
  }
  std::string::__grow_by(this, v11, size + __n_add - v11, size, __n_copy, 0, __n_add);
  v9->__r_.__value_.__l.__size_ = size + __n_add;
  uint64_t v12 = (std::string *)v9->__r_.__value_.__r.__words[0];
LABEL_10:
  std::string::size_type v14 = size + __n_add;
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0) {
    v9->__r_.__value_.__l.__size_ = v14;
  }
  else {
    *((unsigned char *)&v9->__r_.__value_.__s + 23) = v14 & 0x7F;
  }
  v12->__r_.__value_.__s.__data_[v14] = 0;
  if (a4 != a5)
  {
    unint64_t v15 = (char *)v12 + __n_copy;
    do
    {
      char v16 = *a4++;
      *v15++ = v16;
    }
    while (a4 != a5);
  }
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0) {
    uint64_t v9 = (std::string *)v9->__r_.__value_.__r.__words[0];
  }
  return (uint64_t)v9 + __n_copy;
}

void std::string::__init_with_sentinel[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(std::string *this, std::string::value_type *a2, std::string::value_type *a3)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    do
      std::string::push_back(this, *v4++);
    while (v4 != a3);
  }
}

void sub_2563A7F20(void *a1)
{
  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  __cxa_rethrow();
}

void sub_2563A7F3C(_Unwind_Exception *a1)
{
}

uint64_t std::string::__insert_with_size<char const*,char const*>(std::string *this, uint64_t a2, std::string::value_type *a3, std::string::value_type *a4, std::string::size_type __n_add)
{
  uint64_t v6 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v9 = (std::string *)this->__r_.__value_.__r.__words[0];
    std::string::size_type v7 = a2 - this->__r_.__value_.__r.__words[0];
    if (__n_add)
    {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    uint64_t v6 = (std::string *)this->__r_.__value_.__r.__words[0];
    return (uint64_t)v6 + v7;
  }
  std::string::size_type v7 = a2 - (void)this;
  if (!__n_add) {
    return (uint64_t)v6 + v7;
  }
  std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  uint64_t v9 = this;
LABEL_6:
  if (v9 <= (std::string *)a3 && (char *)&v9->__r_.__value_.__l.__data_ + size + 1 > a3)
  {
    std::string::__init_with_sentinel[abi:ne180100]<char const*,char const*>(&__p, a3, a4);
    std::string::size_type v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v10 = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v12 = std::string::__insert_from_safe_copy[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(v6, __n_add, v7, (char *)p_p, (char *)p_p + v10);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return v12;
  }
  return std::string::__insert_from_safe_copy[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(this, __n_add, v7, a3, a4);
}

void sub_2563A8064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::string::__init_with_sentinel[abi:ne180100]<char const*,char const*>(std::string *this, std::string::value_type *a2, std::string::value_type *a3)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    do
      std::string::push_back(this, *v4++);
    while (v4 != a3);
  }
}

void sub_2563A80D8(void *a1)
{
  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  __cxa_rethrow();
}

void sub_2563A80F4(_Unwind_Exception *a1)
{
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    uint64_t v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

void CLMicroLocationLegacyEventForcedRecording::handleEvent(double *a1@<X1>, char *a2@<X8>)
{
  double v3 = *a1;
  CLMicroLocationProto::ForcedRecording::ForcedRecording((CLMicroLocationProto::ForcedRecording *)v4);
  CLMicroLocationProtobufHelper::createRecordingEvent<CLMicroLocationProto::ForcedRecording>((CLMicroLocationProto::RecordingEvent *)v4, 0, 0, 0, (CLMicroLocationProto *)3, (uint64_t)v5, v3);
  char v6 = 1;
  CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)v7, (const CLMicroLocationProto::RecordingEvent *)v5);
  *a2 = v6;
  CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)(a2 + 8), (const CLMicroLocationProto::RecordingEvent *)v7);
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v7);
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v5);
  CLMicroLocationProto::ForcedRecording::~ForcedRecording((CLMicroLocationProto::ForcedRecording *)v4);
}

void sub_2563A8240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  CLMicroLocationProto::RecordingEvent::~RecordingEvent(v12);
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)&a12);
  CLMicroLocationProto::ForcedRecording::~ForcedRecording((CLMicroLocationProto::ForcedRecording *)&a9);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createRecordingEvent<CLMicroLocationProto::ForcedRecording>(CLMicroLocationProto::RecordingEvent *a1@<X0>, CLMicroLocationProto *a2@<X1>, char a3@<W2>, char a4@<W3>, CLMicroLocationProto *a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)a6);
  unsigned int v14 = *((_DWORD *)a1 + 2);
  if (!CLMicroLocationProto::EventType_IsValid((CLMicroLocationProto *)v14))
  {
    uint64_t v17 = "::CLMicroLocationProto::EventType_IsValid(value)";
    int v18 = 20192;
    std::string::size_type v19 = "set_eventtype";
    goto LABEL_10;
  }
  int v15 = *(_DWORD *)(a6 + 140);
  *(_DWORD *)(a6 + 72) = v14;
  *(double *)(a6 + 8) = a7;
  *(unsigned char *)(a6 + 77) = a3;
  *(_DWORD *)(a6 + 140) = v15 | 0x2803;
  *(unsigned char *)(a6 + 76) = a4;
  if (!CLMicroLocationProto::ConfidenceLevel_IsValid(a5))
  {
    uint64_t v17 = "::CLMicroLocationProto::ConfidenceLevel_IsValid(value)";
    int v18 = 20701;
    std::string::size_type v19 = "set_confidencelevel";
    goto LABEL_10;
  }
  *(_DWORD *)(a6 + 140) |= 0x4000u;
  *(_DWORD *)(a6 + 120) = a5;
  if (((unint64_t)a2 & 0xFF00000000) != 0)
  {
    if (CLMicroLocationProto::MotionState_IsValid(a2))
    {
      *(_DWORD *)(a6 + 140) |= 0x20000u;
      *(_DWORD *)(a6 + 124) = a2;
      goto LABEL_6;
    }
    uint64_t v17 = "::CLMicroLocationProto::MotionState_IsValid(value)";
    int v18 = 20793;
    std::string::size_type v19 = "set_motionstate";
LABEL_10:
    __assert_rtn(v19, "microlocation.pb.h", v18, v17);
  }
LABEL_6:
  CLMicroLocationProtobufHelper::setSpecificRecordingEvent((CLMicroLocationProtobufHelper *)a6, a1, v16);
}

void sub_2563A83A4(_Unwind_Exception *a1)
{
  CLMicroLocationProto::RecordingEvent::~RecordingEvent(v1);
  _Unwind_Resume(a1);
}

void CLMiLoCustomLoiRecordingManager::CLMiLoCustomLoiRecordingManager(CLMicroLocationStateMachine::StateMachineBase *a1, uint64_t a2)
{
  double v3 = CLMicroLocationStateMachine::StateMachineBase::StateMachineBase(a1);
  *(void *)double v3 = &unk_2704DC060;
  *((void *)v3 + 7) = &unk_2704DC0B8;
  *((void *)v3 + 8) = &unk_2704DC130;
  *((void *)v3 + 9) = &unk_2704DC188;
  *((void *)v3 + 10) = &unk_2704DC1E0;
  *((void *)v3 + 1CLMicroLocationLogic::startOdometryMonitoring(this - 1) = &unk_2704DC238;
  *((void *)v3 + 12) = &unk_2704DC290;
  *((void *)v3 + 13) = &unk_2704DC2E8;
  *((void *)v3 + 14) = &unk_2704DC340;
  *((void *)v3 + 15) = &unk_2704DC398;
  *((void *)v3 + 16) = &unk_2704DC3E8;
  *((void *)v3 + 17) = &unk_2704DC428;
  *((void *)v3 + 20) = 0;
  *((void *)v3 + 2CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0;
  *((_WORD *)v3 + 72) = 0;
  *((_DWORD *)v3 + 44) = 0;
  *((void *)v3 + 19) = 0;
  *((void *)v3 + 24) = 0;
  *((void *)v3 + 25) = 0;
  *((void *)v3 + 23) = a2;
  CLMiLoCustomLoiRecordingManager::setupIdleState(v3);
}

void sub_2563A85F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CLMacAddress *a9, CLMacAddress *a10, CLMacAddress *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  CLMacAddress::newFromUint64(v19, v27);
  CLMacAddress::newFromUint64(v18, v28);
  CLMacAddress::newFromUint64(v25, v29);
  CLMacAddress::newFromUint64(v24, v30);
  CLMacAddress::newFromUint64(v23, v31);
  CLMacAddress::newFromUint64(v22, v32);
  CLMacAddress::newFromUint64(v21, v33);
  CLMacAddress::newFromUint64(v20, v34);
  CLMacAddress::newFromUint64(a9, v35);
  CLMacAddress::newFromUint64(a10, v36);
  CLMacAddress::newFromUint64(a11, v37);
  CLMicroLocationStateMachine::StateMachineBase::~StateMachineBase((CLMicroLocationStateMachine::StateMachineBase *)v17);
  _Unwind_Resume(a1);
}

void *CLMiLoCustomLoiRecordingManager::StartRecordingSession@<X0>(CFAbsoluteTime *this@<X0>, uint64_t a2@<X8>)
{
  this[20] = cl::chrono::CFAbsoluteTimeClock::now();
  (*(void (**)(void))(**((void **)this + 23) + 8))(*((void *)this + 23));
  CLMiLoCustomLoiRecordingManager::startRecordingTimer((id *)this);
  if (*((unsigned char *)this + 144)) {
    uint64_t v5 = "RecordingState";
  }
  else {
    uint64_t v5 = "RecordingPendingState";
  }
  uint64_t result = std::string::basic_string[abi:ne180100]<0>((void *)a2, v5);
  *(unsigned char *)(a2 + 24) = 1;
  return result;
}

void *CLMiLoCustomLoiRecordingManager::StopRecordingSession@<X0>(CLMiLoCustomLoiRecordingManager *this@<X0>, const CLMiLoStopRecordingSessionEvent *a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(void, const CLMiLoStopRecordingSessionEvent *))(**((void **)this + 23) + 24))(*((void *)this + 23), a2);
  uint64_t v5 = (void *)*((void *)this + 19);
  *((void *)this + 19) = @"recordingSessionStopped";

  uint64_t result = std::string::basic_string[abi:ne180100]<0>((void *)a3, "IdleState");
  *(unsigned char *)(a3 + 24) = 1;
  return result;
}

void CLMiLoCustomLoiRecordingManager::DeviceReadyHandler(CLMiLoCustomLoiRecordingManager *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *((void *)this + 1);
  if (*(char *)(v5 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)(v5 + 8), *(void *)(v5 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)(v5 + 8);
    v14.__r_.__value_.__r.__words[2] = *(void *)(v5 + 24);
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v6;
  }
  if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) != 21) {
      goto LABEL_28;
    }
    BOOL v7 = v14.__r_.__value_.__r.__words[0] == 0x6E6964726F636552
      && v14.__r_.__value_.__l.__size_ == 0x676E69646E655067;
    if (!v7 || *(std::string::size_type *)((char *)&v14.__r_.__value_.__r.__words[1] + 5) != 0x6574617453676E69) {
      goto LABEL_28;
    }
LABEL_26:
    std::string::basic_string[abi:ne180100]<0>((void *)a2, "RecordingState");
    goto LABEL_32;
  }
  if (v14.__r_.__value_.__l.__size_ == 21)
  {
    BOOL v11 = *(void *)v14.__r_.__value_.__l.__data_ != 0x6E6964726F636552
       || *(void *)(v14.__r_.__value_.__r.__words[0] + 8) != 0x676E69646E655067
       || *(void *)(v14.__r_.__value_.__r.__words[0] + 13) != 0x6574617453676E69;
    operator delete(v14.__r_.__value_.__l.__data_);
    if (v11) {
      goto LABEL_28;
    }
    goto LABEL_26;
  }
  operator delete(v14.__r_.__value_.__l.__data_);
LABEL_28:
  uint64_t v12 = *((void *)this + 1);
  if (*(char *)(v12 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)(v12 + 8), *(void *)(v12 + 16));
  }
  else
  {
    long long v13 = *(_OWORD *)(v12 + 8);
    v14.__r_.__value_.__r.__words[2] = *(void *)(v12 + 24);
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v13;
  }
  *(std::string *)a2 = v14;
LABEL_32:
  *(unsigned char *)(a2 + 24) = 1;
}

double CLMiLoCustomLoiRecordingManager::DeviceNotReadyHandler@<D0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (*(char *)(v3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)(v3 + 8), *(void *)(v3 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(v3 + 8);
    v6.__r_.__value_.__r.__words[2] = *(void *)(v3 + 24);
    *(_OWORD *)&v6.__r_.__value_.__l.__data_ = v4;
  }
  double result = *(double *)&v6.__r_.__value_.__l.__data_;
  *a2 = v6;
  a2[1].__r_.__value_.__s.__data_[0] = 1;
  return result;
}

void *CLMiLoCustomLoiRecordingManager::MaxRecordingTimeReached@<X0>(CLMiLoCustomLoiRecordingManager *this@<X0>, const CLMiLoMaxRecordingTimerFiredEvent *a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(void, const CLMiLoMaxRecordingTimerFiredEvent *))(**((void **)this + 23) + 24))(*((void *)this + 23), a2);
  uint64_t v5 = (void *)*((void *)this + 19);
  *((void *)this + 19) = @"recordingSessionTimeout";

  double result = std::string::basic_string[abi:ne180100]<0>((void *)a3, "IdleState");
  *(unsigned char *)(a3 + 24) = 1;
  return result;
}

void *CLMiLoCustomLoiRecordingManager::RecordingFenceBreach@<X0>(CLMiLoCustomLoiRecordingManager *this@<X0>, const CLMiLoRecordingFenceBreachedEvent *a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(void, const CLMiLoRecordingFenceBreachedEvent *))(**((void **)this + 23) + 24))(*((void *)this + 23), a2);
  uint64_t v5 = (void *)*((void *)this + 19);
  *((void *)this + 19) = @"recordingFenceBreached";

  double result = std::string::basic_string[abi:ne180100]<0>((void *)a3, "IdleState");
  *(unsigned char *)(a3 + 24) = 1;
  return result;
}

void *CLMiLoCustomLoiRecordingManager::RecordingComplete@<X0>(CLMiLoCustomLoiRecordingManager *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  ++*((_DWORD *)this + 44);
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_42);
  }
  uint64_t v5 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *((_DWORD *)this + 44);
    v17[0] = 68289283;
    v17[1] = 0;
    __int16 v18 = 2082;
    std::string::size_type v19 = "";
    __int16 v20 = 1025;
    int v21 = v6;
    _os_log_impl(&dword_25631F000, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#LoiRecordingManager: Completed Recordings\", \"Recordings completed\":%{private}u}", (uint8_t *)v17, 0x18u);
  }
  unsigned int v7 = *((_DWORD *)this + 44);
  uint64_t v8 = +[ULDefaultsSingleton shared];
  uint64_t v9 = [v8 defaultsDictionary];

  std::string::size_type v10 = [NSString stringWithUTF8String:"ULCustomLoiMaxRecordings"];
  BOOL v11 = [v9 objectForKey:v10];
  if (v11 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    unsigned int v12 = [v11 unsignedIntValue];
  }
  else {
    unsigned int v12 = [&unk_2704F1860 unsignedIntValue];
  }
  unsigned int v13 = v12;

  if (v7 >= v13)
  {
    (*(void (**)(void))(**((void **)this + 23) + 24))(*((void *)this + 23));
    int v15 = (void *)*((void *)this + 19);
    *((void *)this + 19) = @"maxRecordingsReached";

    std::string v14 = "IdleState";
  }
  else
  {
    std::string v14 = "RecordingThrottledState";
  }
  double result = std::string::basic_string[abi:ne180100]<0>((void *)a2, v14);
  *(unsigned char *)(a2 + 24) = 1;
  return result;
}

void sub_2563A8C7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CLMiLoCustomLoiRecordingManager::entryFunctionIdleState(uint64_t this)
{
  if (*(void *)(this + 40))
  {
    uint64_t v1 = (CLMiLoCustomLoiRecordingManager *)this;
    *(CFAbsoluteTime *)(this + 168) = cl::chrono::CFAbsoluteTimeClock::now();
    CLMiLoCustomLoiRecordingManager::sendCoreAnalytics(v1);
    return CLMiLoCustomLoiRecordingManager::resetState(v1);
  }
  return this;
}

void CLMiLoCustomLoiRecordingManager::setupIdleState(CLMiLoCustomLoiRecordingManager *this)
{
}

void sub_2563A8E38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a10) {
    CLMiLoCustomLoiRecordingManager::setupIdleState();
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CLMiLoCustomLoiRecordingManager::setupRecordingState(CLMiLoCustomLoiRecordingManager *this)
{
}

void sub_2563A909C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a10) {
    CLMiLoCustomLoiRecordingManager::setupIdleState();
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CLMiLoCustomLoiRecordingManager::setupRecordingThrottledState(CLMiLoCustomLoiRecordingManager *this)
{
}

void sub_2563A930C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a10) {
    CLMiLoCustomLoiRecordingManager::setupIdleState();
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CLMiLoCustomLoiRecordingManager::setupRecordingPendingState(CLMiLoCustomLoiRecordingManager *this)
{
}

void sub_2563A9574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a10) {
    CLMiLoCustomLoiRecordingManager::setupIdleState();
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CLMiLoCustomLoiRecordingManager::~CLMiLoCustomLoiRecordingManager(CLMiLoCustomLoiRecordingManager *this)
{
  *(void *)this = &unk_2704DC060;
  CLMiLoCustomLoiRecordingManager::resetState(this);

  CLMacAddress::newFromUint64((CLMacAddress *)this + 17, v2);
  CLMacAddress::newFromUint64((CLMacAddress *)this + 16, v3);
  CLMacAddress::newFromUint64((CLMacAddress *)this + 15, v4);
  CLMacAddress::newFromUint64((CLMacAddress *)this + 14, v5);
  CLMacAddress::newFromUint64((CLMacAddress *)this + 13, v6);
  CLMacAddress::newFromUint64((CLMacAddress *)this + 12, v7);
  CLMacAddress::newFromUint64((CLMacAddress *)this + 11, v8);
  CLMacAddress::newFromUint64((CLMacAddress *)this + 10, v9);
  CLMacAddress::newFromUint64((CLMacAddress *)this + 9, v10);
  CLMacAddress::newFromUint64((CLMacAddress *)this + 8, v11);
  CLMacAddress::newFromUint64((CLMacAddress *)this + 7, v12);
  CLMicroLocationStateMachine::StateMachineBase::~StateMachineBase(this);
}

{
  uint64_t vars8;

  CLMiLoCustomLoiRecordingManager::~CLMiLoCustomLoiRecordingManager(this);
  JUMPOUT(0x25A2A6340);
}

uint64_t CLMiLoCustomLoiRecordingManager::resetState(CLMiLoCustomLoiRecordingManager *this)
{
  *((_DWORD *)this + 44) = 0;
  [*((id *)this + 25) invalidate];
  unint64_t v2 = (void *)*((void *)this + 25);
  *((void *)this + 25) = 0;

  [*((id *)this + 24) invalidate];
  unint64_t v3 = (void *)*((void *)this + 24);
  *((void *)this + 24) = 0;

  unint64_t v4 = *(uint64_t (**)(void))(**((void **)this + 23) + 16);
  return v4();
}

void CLMiLoCustomLoiRecordingManager::startRecordingSession(CLMiLoCustomLoiRecordingManager *this)
{
  CLMiLoStartRecordingSessionEvent::CLMiLoStartRecordingSessionEvent((CLMiLoStartRecordingSessionEvent *)v2);
  CLMicroLocationStateMachine::StateMachineBase::handleEvent(this, (CLMicroLocationStateMachine::EventBase *)v2);
  v2[0] = &unk_2704DC488;
  if (v3 < 0) {
    operator delete((void *)v2[1]);
  }
}

void sub_2563A9800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CLMiLoStartRecordingSessionEvent::~CLMiLoStartRecordingSessionEvent(void **this)
{
  *this = &unk_2704DC488;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_2704DC488;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x25A2A6340);
}

void CLMiLoCustomLoiRecordingManager::stopRecordingSession(CLMiLoCustomLoiRecordingManager *this)
{
  CLMiLoStopRecordingSessionEvent::CLMiLoStopRecordingSessionEvent((CLMiLoStopRecordingSessionEvent *)v2);
  CLMicroLocationStateMachine::StateMachineBase::handleEvent(this, (CLMicroLocationStateMachine::EventBase *)v2);
  v2[0] = &unk_2704DC488;
  if (v3 < 0) {
    operator delete((void *)v2[1]);
  }
}

void sub_2563A98F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CLMiLoStopRecordingSessionEvent::~CLMiLoStopRecordingSessionEvent(void **this)
{
  *this = &unk_2704DC488;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_2704DC488;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x25A2A6340);
}

void CLMiLoCustomLoiRecordingManager::recordingCompleted(CLMiLoCustomLoiRecordingManager *this)
{
  CLMiLoRecordingCompletedEvent::CLMiLoRecordingCompletedEvent((CLMiLoRecordingCompletedEvent *)v2);
  CLMicroLocationStateMachine::StateMachineBase::handleEvent(this, (CLMicroLocationStateMachine::EventBase *)v2);
  v2[0] = &unk_2704DC488;
  if (v3 < 0) {
    operator delete((void *)v2[1]);
  }
}

void sub_2563A99E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CLMiLoRecordingCompletedEvent::~CLMiLoRecordingCompletedEvent(void **this)
{
  *this = &unk_2704DC488;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_2704DC488;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x25A2A6340);
}

void CLMiLoCustomLoiRecordingManager::recordingFenceBreached(CLMiLoCustomLoiRecordingManager *this)
{
  CLMiLoRecordingFenceBreachedEvent::CLMiLoRecordingFenceBreachedEvent((CLMiLoRecordingFenceBreachedEvent *)v2);
  CLMicroLocationStateMachine::StateMachineBase::handleEvent(this, (CLMicroLocationStateMachine::EventBase *)v2);
  v2[0] = &unk_2704DC488;
  if (v3 < 0) {
    operator delete((void *)v2[1]);
  }
}

void sub_2563A9ADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CLMiLoRecordingFenceBreachedEvent::~CLMiLoRecordingFenceBreachedEvent(void **this)
{
  *this = &unk_2704DC488;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_2704DC488;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x25A2A6340);
}

void CLMiLoCustomLoiRecordingManager::deviceScreenState(CLMiLoCustomLoiRecordingManager *this, char a2)
{
  *((unsigned char *)this + 144) = a2;
  CLMiLoCustomLoiRecordingManager::generateDeviceStateEvent(this);
}

void CLMiLoCustomLoiRecordingManager::generateDeviceStateEvent(CLMiLoCustomLoiRecordingManager *this)
{
  if (*((unsigned char *)this + 144)) {
    CLMiLoDeviceReadyEvent::CLMiLoDeviceReadyEvent((CLMiLoDeviceReadyEvent *)v2);
  }
  else {
    CLMiLoDeviceNotReadyEvent::CLMiLoDeviceNotReadyEvent((CLMiLoDeviceNotReadyEvent *)v2);
  }
  CLMicroLocationStateMachine::StateMachineBase::handleEvent(this, (CLMicroLocationStateMachine::EventBase *)v2);
  v2[0] = &unk_2704DC488;
  if (v3 < 0) {
    operator delete((void *)v2[1]);
  }
}

void sub_2563A9BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CLMiLoCustomLoiRecordingManager::deviceStaticState(CLMiLoCustomLoiRecordingManager *this, char a2)
{
  *((unsigned char *)this + 145) = a2;
  CLMiLoCustomLoiRecordingManager::generateDeviceStateEvent(this);
}

void CLMiLoCustomLoiRecordingManager::startRecordingTimer(id *this)
{
  [this[24] invalidate];
  id v2 = this[24];
  this[24] = 0;

  char v3 = +[ULDefaultsSingleton shared];
  unint64_t v4 = [v3 defaultsDictionary];

  unint64_t v5 = [NSString stringWithUTF8String:"ULCustomLoiMaxRecordingWindow"];
  unint64_t v6 = [v4 objectForKey:v5];
  if (v6 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    [v6 doubleValue];
  }
  else {
    [&unk_2704F0E10 doubleValue];
  }
  double v8 = v7;

  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 3221225472;
  void v11[2] = ___ZN31CLMiLoCustomLoiRecordingManager19startRecordingTimerEv_block_invoke;
  void v11[3] = &__block_descriptor_40_e5_v8__0l;
  v11[4] = this;
  uint64_t v9 = +[ULTimerFactory timerOnPrimaryQueueWithInterval:0 repeats:v11 block:v8];
  id v10 = this[24];
  this[24] = (id)v9;
}

void sub_2563A9DA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN31CLMiLoCustomLoiRecordingManager19startRecordingTimerEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(id **)(a1 + 32);
  CLMiLoMaxRecordingTimerFiredEvent::CLMiLoMaxRecordingTimerFiredEvent((CLMiLoMaxRecordingTimerFiredEvent *)v3);
  CLMicroLocationStateMachine::StateMachineBase::handleEvent((CLMicroLocationStateMachine::StateMachineBase *)v1, (CLMicroLocationStateMachine::EventBase *)v3);
  [v1[24] invalidate];
  id v2 = v1[24];
  v1[24] = 0;

  v3[0] = &unk_2704DC488;
  if (v4 < 0) {
    operator delete((void *)v3[1]);
  }
}

void sub_2563A9E64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CLMiLoMaxRecordingTimerFiredEvent::~CLMiLoMaxRecordingTimerFiredEvent(void **this)
{
  *this = &unk_2704DC488;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_2704DC488;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x25A2A6340);
}

void CLMiLoCustomLoiRecordingManager::startThrottleTimer(id *this)
{
  [this[25] invalidate];
  id v2 = this[25];
  this[25] = 0;

  char v3 = +[ULDefaultsSingleton shared];
  char v4 = [v3 defaultsDictionary];

  unint64_t v5 = [NSString stringWithUTF8String:"ULCustomLoiWaitBetweenRecordings"];
  unint64_t v6 = [v4 objectForKey:v5];
  if (v6 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    [v6 doubleValue];
  }
  else {
    [&unk_2704F0E20 doubleValue];
  }
  double v8 = v7;

  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 3221225472;
  void v11[2] = ___ZN31CLMiLoCustomLoiRecordingManager18startThrottleTimerEv_block_invoke;
  void v11[3] = &__block_descriptor_40_e5_v8__0l;
  v11[4] = this;
  uint64_t v9 = +[ULTimerFactory timerOnPrimaryQueueWithInterval:0 repeats:v11 block:v8];
  id v10 = this[25];
  this[25] = (id)v9;
}

void sub_2563AA050(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN31CLMiLoCustomLoiRecordingManager18startThrottleTimerEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(id **)(a1 + 32);
  [v1[25] invalidate];
  id v2 = v1[25];
  v1[25] = 0;

  CLMiLoThrottleTimerFiredEvent::CLMiLoThrottleTimerFiredEvent((CLMiLoThrottleTimerFiredEvent *)v3);
  CLMicroLocationStateMachine::StateMachineBase::handleEvent((CLMicroLocationStateMachine::StateMachineBase *)v1, (CLMicroLocationStateMachine::EventBase *)v3);
  v3[0] = &unk_2704DC488;
  if (v4 < 0) {
    operator delete((void *)v3[1]);
  }
}

void sub_2563AA10C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CLMiLoThrottleTimerFiredEvent::~CLMiLoThrottleTimerFiredEvent(void **this)
{
  *this = &unk_2704DC488;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_2704DC488;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x25A2A6340);
}

void CLMiLoDeviceReadyEvent::~CLMiLoDeviceReadyEvent(void **this)
{
  *this = &unk_2704DC488;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_2704DC488;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x25A2A6340);
}

void CLMiLoDeviceNotReadyEvent::~CLMiLoDeviceNotReadyEvent(void **this)
{
  *this = &unk_2704DC488;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_2704DC488;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x25A2A6340);
}

void CLMiLoCustomLoiRecordingManager::sendCoreAnalytics(CLMiLoCustomLoiRecordingManager *this)
{
  v23[4] = *MEMORY[0x263EF8340];
  id v2 = +[ULDefaultsSingleton shared];
  char v3 = [v2 defaultsDictionary];

  char v4 = [NSString stringWithUTF8String:"ULAnalyticsSendEventEnabled"];
  unint64_t v5 = [v3 objectForKey:v4];
  if (v5 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    int v6 = [v5 BOOLValue];
  }
  else {
    int v6 = [MEMORY[0x263EFFA88] BOOLValue];
  }
  int v7 = v6;

  if (v7)
  {
    double v8 = *((double *)this + 21) - *((double *)this + 20);
    v23[0] = &unk_2704F1848;
    v22[0] = @"recordingSessionOccurred";
    v22[1] = @"recordingSessionDuration";
    uint64_t v9 = [NSNumber numberWithDouble:v8];
    v23[1] = v9;
    unint64_t v22[2] = @"numberOfCompletedRecordings";
    id v10 = [NSNumber numberWithUnsignedInt:*((unsigned int *)this + 44)];
    void v22[3] = @"recordingSessionEndingReason";
    uint64_t v11 = *((void *)this + 19);
    _DWORD v23[2] = v10;
    void v23[3] = v11;
    unint64_t v12 = [NSDictionary dictionaryWithObjects:v23 forKeys:v22 count:4];

    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_42);
    }
    unsigned int v13 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      v15[0] = 68289539;
      v15[1] = 0;
      __int16 v16 = 2082;
      uint64_t v17 = "";
      __int16 v18 = 2081;
      uint64_t v19 = [@"com.apple.MicroLocation.CustomLoiRecordingSession" UTF8String];
      __int16 v20 = 2113;
      int v21 = v12;
      _os_log_impl(&dword_25631F000, v13, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#LoiRecordingManager, sending core analytics\", \"event\":%{private, location:escape_only}s, \"eventFields\":%{private, location:escape_only}@}", (uint8_t *)v15, 0x26u);
    }

    +[ULSendEvent sendEvent:v12 withEventName:@"com.apple.MicroLocation.CustomLoiRecordingSession"];
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_42);
    }
    std::string v14 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v15[0]) = 0;
      _os_log_impl(&dword_25631F000, v14, OS_LOG_TYPE_DEFAULT, "#MiLoLearner, CoreAnalytics Disabled", (uint8_t *)v15, 2u);
    }
  }
}

void sub_2563AA510(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *CLMicroLocationStateMachine::EventHandlerWrapper<CLMiLoCustomLoiRecordingManager,CLMiLoStartRecordingSessionEvent,&CLMiLoCustomLoiRecordingManager::StartRecordingSession>::stateFunction@<X0>(CLMicroLocationStateMachine::EventBase *lpsrc@<X2>, CFAbsoluteTime *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  if (lpsrc
  {
    return CLMiLoCustomLoiRecordingManager::StartRecordingSession(a2, a3);
  }
  else
  {
    int v7 = a2;
    unint64_t v29 = lpsrc;
    double v8 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v9 = *((void *)v7 + 1);
      if (*(char *)(v9 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)(v9 + 8), *(void *)(v9 + 16));
      }
      else
      {
        long long v10 = *(_OWORD *)(v9 + 8);
        v31.__r_.__value_.__r.__words[2] = *(void *)(v9 + 24);
        *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v10;
      }
      int v11 = SHIBYTE(v31.__r_.__value_.__r.__words[2]);
      std::string::size_type v12 = v31.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      unsigned int v13 = &v31;
      if (v11 < 0) {
        unsigned int v13 = (std::string *)v12;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 68290051;
      int v33 = 0;
      __int16 v34 = 2082;
      unint64_t v35 = "";
      __int16 v36 = 2081;
      unint64_t v37 = v13;
      __int16 v38 = 2081;
      unint64_t v39 = p_p;
      __int16 v40 = 2082;
      unint64_t v41 = "assert";
      __int16 v42 = 2081;
      unint64_t v43 = "derivedEventData != __null";
      _os_log_impl(&dword_25631F000, v8, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v31.__r_.__value_.__l.__data_);
      }
    }

    int v15 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_signpost_enabled(v15))
    {
      uint64_t v16 = *((void *)v7 + 1);
      if (*(char *)(v16 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)(v16 + 8), *(void *)(v16 + 16));
      }
      else
      {
        long long v17 = *(_OWORD *)(v16 + 8);
        v31.__r_.__value_.__r.__words[2] = *(void *)(v16 + 24);
        *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v17;
      }
      int v18 = SHIBYTE(v31.__r_.__value_.__r.__words[2]);
      std::string::size_type v19 = v31.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      __int16 v20 = &v31;
      if (v18 < 0) {
        __int16 v20 = (std::string *)v19;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v21 = &__p;
      }
      else {
        int v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 68290051;
      int v33 = 0;
      __int16 v34 = 2082;
      unint64_t v35 = "";
      __int16 v36 = 2081;
      unint64_t v37 = v20;
      __int16 v38 = 2081;
      unint64_t v39 = v21;
      __int16 v40 = 2082;
      unint64_t v41 = "assert";
      __int16 v42 = 2081;
      unint64_t v43 = "derivedEventData != __null";
      _os_signpost_emit_with_name_impl(&dword_25631F000, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Received unsupported event in state event handler", "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v31.__r_.__value_.__l.__data_);
      }
    }

    uint64_t v22 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      uint64_t v23 = *((void *)v7 + 1);
      if (*(char *)(v23 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)(v23 + 8), *(void *)(v23 + 16));
      }
      else
      {
        long long v24 = *(_OWORD *)(v23 + 8);
        v31.__r_.__value_.__r.__words[2] = *(void *)(v23 + 24);
        *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v24;
      }
      int v25 = SHIBYTE(v31.__r_.__value_.__r.__words[2]);
      std::string::size_type v26 = v31.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(v29, &__p);
      unint64_t v27 = &v31;
      if (v25 < 0) {
        unint64_t v27 = (std::string *)v26;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v28 = &__p;
      }
      else {
        unint64_t v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 68290051;
      int v33 = 0;
      __int16 v34 = 2082;
      unint64_t v35 = "";
      __int16 v36 = 2081;
      unint64_t v37 = v27;
      __int16 v38 = 2081;
      unint64_t v39 = v28;
      __int16 v40 = 2082;
      unint64_t v41 = "assert";
      __int16 v42 = 2081;
      unint64_t v43 = "derivedEventData != __null";
      _os_log_impl(&dword_25631F000, v22, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v31.__r_.__value_.__l.__data_);
      }
    }

    double result = (void *)abort_report_np();
    __break(1u);
  }
  return result;
}

void sub_2563AAA34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMiLoCustomLoiRecordingManager,CLMiLoStartRecordingSessionEvent,&CLMiLoCustomLoiRecordingManager::StartRecordingSession>::~EventHandlerWrapper(CLMacAddress *a1, unint64_t a2)
{
  CLMacAddress::newFromUint64(a1, a2);
  JUMPOUT(0x25A2A6340);
}

void *CLMicroLocationStateMachine::EventHandlerWrapper<CLMiLoCustomLoiRecordingManager,CLMiLoStopRecordingSessionEvent,&CLMiLoCustomLoiRecordingManager::StopRecordingSession>::stateFunction@<X0>(CLMicroLocationStateMachine::EventBase *lpsrc@<X2>, CLMiLoCustomLoiRecordingManager *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  if (lpsrc
  {
    return CLMiLoCustomLoiRecordingManager::StopRecordingSession(a2, v6, a3);
  }
  else
  {
    double v8 = a2;
    unint64_t v30 = lpsrc;
    uint64_t v9 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
    {
      uint64_t v10 = *((void *)v8 + 1);
      if (*(char *)(v10 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)(v10 + 8), *(void *)(v10 + 16));
      }
      else
      {
        long long v11 = *(_OWORD *)(v10 + 8);
        v32.__r_.__value_.__r.__words[2] = *(void *)(v10 + 24);
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v11;
      }
      int v12 = SHIBYTE(v32.__r_.__value_.__r.__words[2]);
      std::string::size_type v13 = v32.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      std::string v14 = &v32;
      if (v12 < 0) {
        std::string v14 = (std::string *)v13;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 68290051;
      int v34 = 0;
      __int16 v35 = 2082;
      __int16 v36 = "";
      __int16 v37 = 2081;
      __int16 v38 = v14;
      __int16 v39 = 2081;
      __int16 v40 = p_p;
      __int16 v41 = 2082;
      __int16 v42 = "assert";
      __int16 v43 = 2081;
      uint64_t v44 = "derivedEventData != __null";
      _os_log_impl(&dword_25631F000, v9, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
    }

    uint64_t v16 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_signpost_enabled(v16))
    {
      uint64_t v17 = *((void *)v8 + 1);
      if (*(char *)(v17 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)(v17 + 8), *(void *)(v17 + 16));
      }
      else
      {
        long long v18 = *(_OWORD *)(v17 + 8);
        v32.__r_.__value_.__r.__words[2] = *(void *)(v17 + 24);
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v18;
      }
      int v19 = SHIBYTE(v32.__r_.__value_.__r.__words[2]);
      std::string::size_type v20 = v32.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      int v21 = &v32;
      if (v19 < 0) {
        int v21 = (std::string *)v20;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v22 = &__p;
      }
      else {
        uint64_t v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 68290051;
      int v34 = 0;
      __int16 v35 = 2082;
      __int16 v36 = "";
      __int16 v37 = 2081;
      __int16 v38 = v21;
      __int16 v39 = 2081;
      __int16 v40 = v22;
      __int16 v41 = 2082;
      __int16 v42 = "assert";
      __int16 v43 = 2081;
      uint64_t v44 = "derivedEventData != __null";
      _os_signpost_emit_with_name_impl(&dword_25631F000, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Received unsupported event in state event handler", "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
    }

    uint64_t v23 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      uint64_t v24 = *((void *)v8 + 1);
      if (*(char *)(v24 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)(v24 + 8), *(void *)(v24 + 16));
      }
      else
      {
        long long v25 = *(_OWORD *)(v24 + 8);
        v32.__r_.__value_.__r.__words[2] = *(void *)(v24 + 24);
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v25;
      }
      int v26 = SHIBYTE(v32.__r_.__value_.__r.__words[2]);
      std::string::size_type v27 = v32.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(v30, &__p);
      unint64_t v28 = &v32;
      if (v26 < 0) {
        unint64_t v28 = (std::string *)v27;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v29 = &__p;
      }
      else {
        unint64_t v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 68290051;
      int v34 = 0;
      __int16 v35 = 2082;
      __int16 v36 = "";
      __int16 v37 = 2081;
      __int16 v38 = v28;
      __int16 v39 = 2081;
      __int16 v40 = v29;
      __int16 v41 = 2082;
      __int16 v42 = "assert";
      __int16 v43 = 2081;
      uint64_t v44 = "derivedEventData != __null";
      _os_log_impl(&dword_25631F000, v23, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
    }

    double result = (void *)abort_report_np();
    __break(1u);
  }
  return result;
}

void sub_2563AAF08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMiLoCustomLoiRecordingManager,CLMiLoStopRecordingSessionEvent,&CLMiLoCustomLoiRecordingManager::StopRecordingSession>::~EventHandlerWrapper(CLMacAddress *a1, unint64_t a2)
{
  CLMacAddress::newFromUint64(a1, a2);
  JUMPOUT(0x25A2A6340);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMiLoCustomLoiRecordingManager,CLMiLoDeviceReadyEvent,&CLMiLoCustomLoiRecordingManager::DeviceReadyHandler>::stateFunction(CLMicroLocationStateMachine::EventBase *lpsrc@<X2>, CLMiLoCustomLoiRecordingManager *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  if (lpsrc
  {
    CLMiLoCustomLoiRecordingManager::DeviceReadyHandler(a2, a3);
  }
  else
  {
    int v6 = a2;
    unint64_t v28 = lpsrc;
    int v7 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = *((void *)v6 + 1);
      if (*(char *)(v8 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v8 + 8), *(void *)(v8 + 16));
      }
      else
      {
        long long v9 = *(_OWORD *)(v8 + 8);
        v30.__r_.__value_.__r.__words[2] = *(void *)(v8 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v9;
      }
      int v10 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      std::string::size_type v11 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      int v12 = &v30;
      if (v10 < 0) {
        int v12 = (std::string *)v11;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 68290051;
      int v32 = 0;
      __int16 v33 = 2082;
      int v34 = "";
      __int16 v35 = 2081;
      __int16 v36 = v12;
      __int16 v37 = 2081;
      __int16 v38 = p_p;
      __int16 v39 = 2082;
      __int16 v40 = "assert";
      __int16 v41 = 2081;
      __int16 v42 = "derivedEventData != __null";
      _os_log_impl(&dword_25631F000, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v30.__r_.__value_.__l.__data_);
      }
    }

    std::string v14 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_signpost_enabled(v14))
    {
      uint64_t v15 = *((void *)v6 + 1);
      if (*(char *)(v15 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v15 + 8), *(void *)(v15 + 16));
      }
      else
      {
        long long v16 = *(_OWORD *)(v15 + 8);
        v30.__r_.__value_.__r.__words[2] = *(void *)(v15 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v16;
      }
      int v17 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      std::string::size_type v18 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      int v19 = &v30;
      if (v17 < 0) {
        int v19 = (std::string *)v18;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v20 = &__p;
      }
      else {
        std::string::size_type v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 68290051;
      int v32 = 0;
      __int16 v33 = 2082;
      int v34 = "";
      __int16 v35 = 2081;
      __int16 v36 = v19;
      __int16 v37 = 2081;
      __int16 v38 = v20;
      __int16 v39 = 2082;
      __int16 v40 = "assert";
      __int16 v41 = 2081;
      __int16 v42 = "derivedEventData != __null";
      _os_signpost_emit_with_name_impl(&dword_25631F000, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Received unsupported event in state event handler", "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v30.__r_.__value_.__l.__data_);
      }
    }

    int v21 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      uint64_t v22 = *((void *)v6 + 1);
      if (*(char *)(v22 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v22 + 8), *(void *)(v22 + 16));
      }
      else
      {
        long long v23 = *(_OWORD *)(v22 + 8);
        v30.__r_.__value_.__r.__words[2] = *(void *)(v22 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v23;
      }
      int v24 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      std::string::size_type v25 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(v28, &__p);
      int v26 = &v30;
      if (v24 < 0) {
        int v26 = (std::string *)v25;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v27 = &__p;
      }
      else {
        std::string::size_type v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 68290051;
      int v32 = 0;
      __int16 v33 = 2082;
      int v34 = "";
      __int16 v35 = 2081;
      __int16 v36 = v26;
      __int16 v37 = 2081;
      __int16 v38 = v27;
      __int16 v39 = 2082;
      __int16 v40 = "assert";
      __int16 v41 = 2081;
      __int16 v42 = "derivedEventData != __null";
      _os_log_impl(&dword_25631F000, v21, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v30.__r_.__value_.__l.__data_);
      }
    }

    abort_report_np();
    __break(1u);
  }
}

void sub_2563AB3DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMiLoCustomLoiRecordingManager,CLMiLoDeviceReadyEvent,&CLMiLoCustomLoiRecordingManager::DeviceReadyHandler>::~EventHandlerWrapper(CLMacAddress *a1, unint64_t a2)
{
  CLMacAddress::newFromUint64(a1, a2);
  JUMPOUT(0x25A2A6340);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMiLoCustomLoiRecordingManager,CLMiLoDeviceNotReadyEvent,&CLMiLoCustomLoiRecordingManager::DeviceNotReadyHandler>::stateFunction(CLMicroLocationStateMachine::EventBase *lpsrc@<X2>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  if (lpsrc
  {
    CLMiLoCustomLoiRecordingManager::DeviceNotReadyHandler(a2, a3);
  }
  else
  {
    uint64_t v6 = a2;
    unint64_t v28 = lpsrc;
    int v7 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = *(void *)(v6 + 8);
      if (*(char *)(v8 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v8 + 8), *(void *)(v8 + 16));
      }
      else
      {
        long long v9 = *(_OWORD *)(v8 + 8);
        v30.__r_.__value_.__r.__words[2] = *(void *)(v8 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v9;
      }
      int v10 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      std::string::size_type v11 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      int v12 = &v30;
      if (v10 < 0) {
        int v12 = (std::string *)v11;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 68290051;
      int v32 = 0;
      __int16 v33 = 2082;
      int v34 = "";
      __int16 v35 = 2081;
      __int16 v36 = v12;
      __int16 v37 = 2081;
      __int16 v38 = p_p;
      __int16 v39 = 2082;
      __int16 v40 = "assert";
      __int16 v41 = 2081;
      __int16 v42 = "derivedEventData != __null";
      _os_log_impl(&dword_25631F000, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v30.__r_.__value_.__l.__data_);
      }
    }

    std::string v14 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_signpost_enabled(v14))
    {
      uint64_t v15 = *(void *)(v6 + 8);
      if (*(char *)(v15 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v15 + 8), *(void *)(v15 + 16));
      }
      else
      {
        long long v16 = *(_OWORD *)(v15 + 8);
        v30.__r_.__value_.__r.__words[2] = *(void *)(v15 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v16;
      }
      int v17 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      std::string::size_type v18 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      int v19 = &v30;
      if (v17 < 0) {
        int v19 = (std::string *)v18;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v20 = &__p;
      }
      else {
        std::string::size_type v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 68290051;
      int v32 = 0;
      __int16 v33 = 2082;
      int v34 = "";
      __int16 v35 = 2081;
      __int16 v36 = v19;
      __int16 v37 = 2081;
      __int16 v38 = v20;
      __int16 v39 = 2082;
      __int16 v40 = "assert";
      __int16 v41 = 2081;
      __int16 v42 = "derivedEventData != __null";
      _os_signpost_emit_with_name_impl(&dword_25631F000, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Received unsupported event in state event handler", "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v30.__r_.__value_.__l.__data_);
      }
    }

    int v21 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      uint64_t v22 = *(void *)(v6 + 8);
      if (*(char *)(v22 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v22 + 8), *(void *)(v22 + 16));
      }
      else
      {
        long long v23 = *(_OWORD *)(v22 + 8);
        v30.__r_.__value_.__r.__words[2] = *(void *)(v22 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v23;
      }
      int v24 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      std::string::size_type v25 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(v28, &__p);
      int v26 = &v30;
      if (v24 < 0) {
        int v26 = (std::string *)v25;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v27 = &__p;
      }
      else {
        std::string::size_type v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 68290051;
      int v32 = 0;
      __int16 v33 = 2082;
      int v34 = "";
      __int16 v35 = 2081;
      __int16 v36 = v26;
      __int16 v37 = 2081;
      __int16 v38 = v27;
      __int16 v39 = 2082;
      __int16 v40 = "assert";
      __int16 v41 = 2081;
      __int16 v42 = "derivedEventData != __null";
      _os_log_impl(&dword_25631F000, v21, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v30.__r_.__value_.__l.__data_);
      }
    }

    abort_report_np();
    __break(1u);
  }
}

void sub_2563AB8B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMiLoCustomLoiRecordingManager,CLMiLoDeviceNotReadyEvent,&CLMiLoCustomLoiRecordingManager::DeviceNotReadyHandler>::~EventHandlerWrapper(CLMacAddress *a1, unint64_t a2)
{
  CLMacAddress::newFromUint64(a1, a2);
  JUMPOUT(0x25A2A6340);
}

void *CLMicroLocationStateMachine::EventHandlerWrapper<CLMiLoCustomLoiRecordingManager,CLMiLoMaxRecordingTimerFiredEvent,&CLMiLoCustomLoiRecordingManager::MaxRecordingTimeReached>::stateFunction@<X0>(CLMicroLocationStateMachine::EventBase *lpsrc@<X2>, CLMiLoCustomLoiRecordingManager *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  if (lpsrc
  {
    return CLMiLoCustomLoiRecordingManager::MaxRecordingTimeReached(a2, v6, a3);
  }
  else
  {
    uint64_t v8 = a2;
    std::string v30 = lpsrc;
    long long v9 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
    {
      uint64_t v10 = *((void *)v8 + 1);
      if (*(char *)(v10 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)(v10 + 8), *(void *)(v10 + 16));
      }
      else
      {
        long long v11 = *(_OWORD *)(v10 + 8);
        v32.__r_.__value_.__r.__words[2] = *(void *)(v10 + 24);
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v11;
      }
      int v12 = SHIBYTE(v32.__r_.__value_.__r.__words[2]);
      std::string::size_type v13 = v32.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      std::string v14 = &v32;
      if (v12 < 0) {
        std::string v14 = (std::string *)v13;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 68290051;
      int v34 = 0;
      __int16 v35 = 2082;
      __int16 v36 = "";
      __int16 v37 = 2081;
      __int16 v38 = v14;
      __int16 v39 = 2081;
      __int16 v40 = p_p;
      __int16 v41 = 2082;
      __int16 v42 = "assert";
      __int16 v43 = 2081;
      uint64_t v44 = "derivedEventData != __null";
      _os_log_impl(&dword_25631F000, v9, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
    }

    long long v16 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_signpost_enabled(v16))
    {
      uint64_t v17 = *((void *)v8 + 1);
      if (*(char *)(v17 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)(v17 + 8), *(void *)(v17 + 16));
      }
      else
      {
        long long v18 = *(_OWORD *)(v17 + 8);
        v32.__r_.__value_.__r.__words[2] = *(void *)(v17 + 24);
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v18;
      }
      int v19 = SHIBYTE(v32.__r_.__value_.__r.__words[2]);
      std::string::size_type v20 = v32.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      int v21 = &v32;
      if (v19 < 0) {
        int v21 = (std::string *)v20;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v22 = &__p;
      }
      else {
        uint64_t v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 68290051;
      int v34 = 0;
      __int16 v35 = 2082;
      __int16 v36 = "";
      __int16 v37 = 2081;
      __int16 v38 = v21;
      __int16 v39 = 2081;
      __int16 v40 = v22;
      __int16 v41 = 2082;
      __int16 v42 = "assert";
      __int16 v43 = 2081;
      uint64_t v44 = "derivedEventData != __null";
      _os_signpost_emit_with_name_impl(&dword_25631F000, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Received unsupported event in state event handler", "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
    }

    long long v23 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      uint64_t v24 = *((void *)v8 + 1);
      if (*(char *)(v24 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)(v24 + 8), *(void *)(v24 + 16));
      }
      else
      {
        long long v25 = *(_OWORD *)(v24 + 8);
        v32.__r_.__value_.__r.__words[2] = *(void *)(v24 + 24);
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v25;
      }
      int v26 = SHIBYTE(v32.__r_.__value_.__r.__words[2]);
      std::string::size_type v27 = v32.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(v30, &__p);
      unint64_t v28 = &v32;
      if (v26 < 0) {
        unint64_t v28 = (std::string *)v27;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v29 = &__p;
      }
      else {
        unint64_t v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 68290051;
      int v34 = 0;
      __int16 v35 = 2082;
      __int16 v36 = "";
      __int16 v37 = 2081;
      __int16 v38 = v28;
      __int16 v39 = 2081;
      __int16 v40 = v29;
      __int16 v41 = 2082;
      __int16 v42 = "assert";
      __int16 v43 = 2081;
      uint64_t v44 = "derivedEventData != __null";
      _os_log_impl(&dword_25631F000, v23, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
    }

    double result = (void *)abort_report_np();
    __break(1u);
  }
  return result;
}

void sub_2563ABD84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMiLoCustomLoiRecordingManager,CLMiLoMaxRecordingTimerFiredEvent,&CLMiLoCustomLoiRecordingManager::MaxRecordingTimeReached>::~EventHandlerWrapper(CLMacAddress *a1, unint64_t a2)
{
  CLMacAddress::newFromUint64(a1, a2);
  JUMPOUT(0x25A2A6340);
}

uint64_t CLMicroLocationStateMachine::EventHandlerWrapper<CLMiLoCustomLoiRecordingManager,CLMiLoThrottleTimerFiredEvent,&CLMiLoCustomLoiRecordingManager::ThrottleTimerFired>::stateFunction@<X0>(CLMicroLocationStateMachine::EventBase *lpsrc@<X2>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  if (lpsrc
  {
    if (*(unsigned char *)(a2 + 144)) {
      uint64_t v6 = "RecordingState";
    }
    else {
      uint64_t v6 = "RecordingPendingState";
    }
    uint64_t result = (uint64_t)std::string::basic_string[abi:ne180100]<0>((void *)a3, v6);
    *(unsigned char *)(a3 + 24) = 1;
  }
  else
  {
    uint64_t v8 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v9 = *(void *)(a2 + 8);
      if (*(char *)(v9 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v9 + 8), *(void *)(v9 + 16));
      }
      else
      {
        long long v10 = *(_OWORD *)(v9 + 8);
        v30.__r_.__value_.__r.__words[2] = *(void *)(v9 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v10;
      }
      int v11 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      std::string::size_type v12 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      std::string::size_type v13 = &v30;
      if (v11 < 0) {
        std::string::size_type v13 = (std::string *)v12;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 68290051;
      int v32 = 0;
      __int16 v33 = 2082;
      int v34 = "";
      __int16 v35 = 2081;
      __int16 v36 = v13;
      __int16 v37 = 2081;
      __int16 v38 = p_p;
      __int16 v39 = 2082;
      __int16 v40 = "assert";
      __int16 v41 = 2081;
      __int16 v42 = "derivedEventData != __null";
      _os_log_impl(&dword_25631F000, v8, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v30.__r_.__value_.__l.__data_);
      }
    }

    uint64_t v15 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_signpost_enabled(v15))
    {
      uint64_t v16 = *(void *)(a2 + 8);
      if (*(char *)(v16 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v16 + 8), *(void *)(v16 + 16));
      }
      else
      {
        long long v17 = *(_OWORD *)(v16 + 8);
        v30.__r_.__value_.__r.__words[2] = *(void *)(v16 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v17;
      }
      int v18 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      std::string::size_type v19 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      std::string::size_type v20 = &v30;
      if (v18 < 0) {
        std::string::size_type v20 = (std::string *)v19;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v21 = &__p;
      }
      else {
        int v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 68290051;
      int v32 = 0;
      __int16 v33 = 2082;
      int v34 = "";
      __int16 v35 = 2081;
      __int16 v36 = v20;
      __int16 v37 = 2081;
      __int16 v38 = v21;
      __int16 v39 = 2082;
      __int16 v40 = "assert";
      __int16 v41 = 2081;
      __int16 v42 = "derivedEventData != __null";
      _os_signpost_emit_with_name_impl(&dword_25631F000, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Received unsupported event in state event handler", "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v30.__r_.__value_.__l.__data_);
      }
    }

    uint64_t v22 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      uint64_t v23 = *(void *)(a2 + 8);
      if (*(char *)(v23 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v23 + 8), *(void *)(v23 + 16));
      }
      else
      {
        long long v24 = *(_OWORD *)(v23 + 8);
        v30.__r_.__value_.__r.__words[2] = *(void *)(v23 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v24;
      }
      int v25 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      std::string::size_type v26 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      std::string::size_type v27 = &v30;
      if (v25 < 0) {
        std::string::size_type v27 = (std::string *)v26;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v28 = &__p;
      }
      else {
        unint64_t v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 68290051;
      int v32 = 0;
      __int16 v33 = 2082;
      int v34 = "";
      __int16 v35 = 2081;
      __int16 v36 = v27;
      __int16 v37 = 2081;
      __int16 v38 = v28;
      __int16 v39 = 2082;
      __int16 v40 = "assert";
      __int16 v41 = 2081;
      __int16 v42 = "derivedEventData != __null";
      _os_log_impl(&dword_25631F000, v22, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v30.__r_.__value_.__l.__data_);
      }
    }

    uint64_t result = abort_report_np();
    __break(1u);
  }
  return result;
}

void sub_2563AC268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMiLoCustomLoiRecordingManager,CLMiLoThrottleTimerFiredEvent,&CLMiLoCustomLoiRecordingManager::ThrottleTimerFired>::~EventHandlerWrapper(CLMacAddress *a1, unint64_t a2)
{
  CLMacAddress::newFromUint64(a1, a2);
  JUMPOUT(0x25A2A6340);
}

void *CLMicroLocationStateMachine::EventHandlerWrapper<CLMiLoCustomLoiRecordingManager,CLMiLoRecordingFenceBreachedEvent,&CLMiLoCustomLoiRecordingManager::RecordingFenceBreach>::stateFunction@<X0>(CLMicroLocationStateMachine::EventBase *lpsrc@<X2>, CLMiLoCustomLoiRecordingManager *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  if (lpsrc
  {
    return CLMiLoCustomLoiRecordingManager::RecordingFenceBreach(a2, v6, a3);
  }
  else
  {
    uint64_t v8 = a2;
    std::string v30 = lpsrc;
    uint64_t v9 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
    {
      uint64_t v10 = *((void *)v8 + 1);
      if (*(char *)(v10 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)(v10 + 8), *(void *)(v10 + 16));
      }
      else
      {
        long long v11 = *(_OWORD *)(v10 + 8);
        v32.__r_.__value_.__r.__words[2] = *(void *)(v10 + 24);
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v11;
      }
      int v12 = SHIBYTE(v32.__r_.__value_.__r.__words[2]);
      std::string::size_type v13 = v32.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      std::string v14 = &v32;
      if (v12 < 0) {
        std::string v14 = (std::string *)v13;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 68290051;
      int v34 = 0;
      __int16 v35 = 2082;
      __int16 v36 = "";
      __int16 v37 = 2081;
      __int16 v38 = v14;
      __int16 v39 = 2081;
      __int16 v40 = p_p;
      __int16 v41 = 2082;
      __int16 v42 = "assert";
      __int16 v43 = 2081;
      uint64_t v44 = "derivedEventData != __null";
      _os_log_impl(&dword_25631F000, v9, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
    }

    uint64_t v16 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_signpost_enabled(v16))
    {
      uint64_t v17 = *((void *)v8 + 1);
      if (*(char *)(v17 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)(v17 + 8), *(void *)(v17 + 16));
      }
      else
      {
        long long v18 = *(_OWORD *)(v17 + 8);
        v32.__r_.__value_.__r.__words[2] = *(void *)(v17 + 24);
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v18;
      }
      int v19 = SHIBYTE(v32.__r_.__value_.__r.__words[2]);
      std::string::size_type v20 = v32.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      int v21 = &v32;
      if (v19 < 0) {
        int v21 = (std::string *)v20;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v22 = &__p;
      }
      else {
        uint64_t v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 68290051;
      int v34 = 0;
      __int16 v35 = 2082;
      __int16 v36 = "";
      __int16 v37 = 2081;
      __int16 v38 = v21;
      __int16 v39 = 2081;
      __int16 v40 = v22;
      __int16 v41 = 2082;
      __int16 v42 = "assert";
      __int16 v43 = 2081;
      uint64_t v44 = "derivedEventData != __null";
      _os_signpost_emit_with_name_impl(&dword_25631F000, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Received unsupported event in state event handler", "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
    }

    uint64_t v23 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      uint64_t v24 = *((void *)v8 + 1);
      if (*(char *)(v24 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)(v24 + 8), *(void *)(v24 + 16));
      }
      else
      {
        long long v25 = *(_OWORD *)(v24 + 8);
        v32.__r_.__value_.__r.__words[2] = *(void *)(v24 + 24);
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v25;
      }
      int v26 = SHIBYTE(v32.__r_.__value_.__r.__words[2]);
      std::string::size_type v27 = v32.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(v30, &__p);
      unint64_t v28 = &v32;
      if (v26 < 0) {
        unint64_t v28 = (std::string *)v27;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v29 = &__p;
      }
      else {
        unint64_t v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 68290051;
      int v34 = 0;
      __int16 v35 = 2082;
      __int16 v36 = "";
      __int16 v37 = 2081;
      __int16 v38 = v28;
      __int16 v39 = 2081;
      __int16 v40 = v29;
      __int16 v41 = 2082;
      __int16 v42 = "assert";
      __int16 v43 = 2081;
      uint64_t v44 = "derivedEventData != __null";
      _os_log_impl(&dword_25631F000, v23, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
    }

    uint64_t result = (void *)abort_report_np();
    __break(1u);
  }
  return result;
}

void sub_2563AC73C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMiLoCustomLoiRecordingManager,CLMiLoRecordingFenceBreachedEvent,&CLMiLoCustomLoiRecordingManager::RecordingFenceBreach>::~EventHandlerWrapper(CLMacAddress *a1, unint64_t a2)
{
  CLMacAddress::newFromUint64(a1, a2);
  JUMPOUT(0x25A2A6340);
}

void *CLMicroLocationStateMachine::EventHandlerWrapper<CLMiLoCustomLoiRecordingManager,CLMiLoRecordingCompletedEvent,&CLMiLoCustomLoiRecordingManager::RecordingComplete>::stateFunction@<X0>(CLMicroLocationStateMachine::EventBase *lpsrc@<X2>, CLMiLoCustomLoiRecordingManager *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  if (lpsrc
  {
    return CLMiLoCustomLoiRecordingManager::RecordingComplete(a2, a3);
  }
  else
  {
    int v7 = a2;
    unint64_t v29 = lpsrc;
    uint64_t v8 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v9 = *((void *)v7 + 1);
      if (*(char *)(v9 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)(v9 + 8), *(void *)(v9 + 16));
      }
      else
      {
        long long v10 = *(_OWORD *)(v9 + 8);
        v31.__r_.__value_.__r.__words[2] = *(void *)(v9 + 24);
        *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v10;
      }
      int v11 = SHIBYTE(v31.__r_.__value_.__r.__words[2]);
      std::string::size_type v12 = v31.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      std::string::size_type v13 = &v31;
      if (v11 < 0) {
        std::string::size_type v13 = (std::string *)v12;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 68290051;
      int v33 = 0;
      __int16 v34 = 2082;
      __int16 v35 = "";
      __int16 v36 = 2081;
      __int16 v37 = v13;
      __int16 v38 = 2081;
      __int16 v39 = p_p;
      __int16 v40 = 2082;
      __int16 v41 = "assert";
      __int16 v42 = 2081;
      __int16 v43 = "derivedEventData != __null";
      _os_log_impl(&dword_25631F000, v8, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v31.__r_.__value_.__l.__data_);
      }
    }

    uint64_t v15 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_signpost_enabled(v15))
    {
      uint64_t v16 = *((void *)v7 + 1);
      if (*(char *)(v16 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)(v16 + 8), *(void *)(v16 + 16));
      }
      else
      {
        long long v17 = *(_OWORD *)(v16 + 8);
        v31.__r_.__value_.__r.__words[2] = *(void *)(v16 + 24);
        *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v17;
      }
      int v18 = SHIBYTE(v31.__r_.__value_.__r.__words[2]);
      std::string::size_type v19 = v31.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      std::string::size_type v20 = &v31;
      if (v18 < 0) {
        std::string::size_type v20 = (std::string *)v19;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v21 = &__p;
      }
      else {
        int v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 68290051;
      int v33 = 0;
      __int16 v34 = 2082;
      __int16 v35 = "";
      __int16 v36 = 2081;
      __int16 v37 = v20;
      __int16 v38 = 2081;
      __int16 v39 = v21;
      __int16 v40 = 2082;
      __int16 v41 = "assert";
      __int16 v42 = 2081;
      __int16 v43 = "derivedEventData != __null";
      _os_signpost_emit_with_name_impl(&dword_25631F000, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Received unsupported event in state event handler", "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v31.__r_.__value_.__l.__data_);
      }
    }

    uint64_t v22 = _CLLogObjectForCategory_MicroLocation_Default();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      uint64_t v23 = *((void *)v7 + 1);
      if (*(char *)(v23 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)(v23 + 8), *(void *)(v23 + 16));
      }
      else
      {
        long long v24 = *(_OWORD *)(v23 + 8);
        v31.__r_.__value_.__r.__words[2] = *(void *)(v23 + 24);
        *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v24;
      }
      int v25 = SHIBYTE(v31.__r_.__value_.__r.__words[2]);
      std::string::size_type v26 = v31.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(v29, &__p);
      std::string::size_type v27 = &v31;
      if (v25 < 0) {
        std::string::size_type v27 = (std::string *)v26;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v28 = &__p;
      }
      else {
        unint64_t v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 68290051;
      int v33 = 0;
      __int16 v34 = 2082;
      __int16 v35 = "";
      __int16 v36 = 2081;
      __int16 v37 = v27;
      __int16 v38 = 2081;
      __int16 v39 = v28;
      __int16 v40 = 2082;
      __int16 v41 = "assert";
      __int16 v42 = 2081;
      __int16 v43 = "derivedEventData != __null";
      _os_log_impl(&dword_25631F000, v22, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v31.__r_.__value_.__l.__data_);
      }
    }

    uint64_t result = (void *)abort_report_np();
    __break(1u);
  }
  return result;
}

void sub_2563ACC10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMiLoCustomLoiRecordingManager,CLMiLoRecordingCompletedEvent,&CLMiLoCustomLoiRecordingManager::RecordingComplete>::~EventHandlerWrapper(CLMacAddress *a1, unint64_t a2)
{
  CLMacAddress::newFromUint64(a1, a2);
  JUMPOUT(0x25A2A6340);
}

uint64_t CLMicroLocationStateMachine::EventHandlerWrapperWithNoData<CLMiLoCustomLoiRecordingManager,&CLMiLoCustomLoiRecordingManager::entryFunctionIdleState>::stateFunction(int a1, CLMiLoCustomLoiRecordingManager *this)
{
  return CLMiLoCustomLoiRecordingManager::entryFunctionIdleState((uint64_t)this);
}

void CLMicroLocationStateMachine::EventHandlerWrapperWithNoData<CLMiLoCustomLoiRecordingManager,&CLMiLoCustomLoiRecordingManager::entryFunctionIdleState>::~EventHandlerWrapperWithNoData(CLMacAddress *a1, unint64_t a2)
{
  CLMacAddress::newFromUint64(a1, a2);
  JUMPOUT(0x25A2A6340);
}

uint64_t CLMicroLocationStateMachine::EventHandlerWrapperWithNoData<CLMiLoCustomLoiRecordingManager,&CLMiLoCustomLoiRecordingManager::entryFunctionRecordingState>::stateFunction(uint64_t a1, uint64_t a2)
{
  return (***(uint64_t (****)(void))(a2 + 184))(*(void *)(a2 + 184));
}

void CLMicroLocationStateMachine::EventHandlerWrapperWithNoData<CLMiLoCustomLoiRecordingManager,&CLMiLoCustomLoiRecordingManager::entryFunctionRecordingState>::~EventHandlerWrapperWithNoData(CLMacAddress *a1, unint64_t a2)
{
  CLMacAddress::newFromUint64(a1, a2);
  JUMPOUT(0x25A2A6340);
}

void CLMicroLocationStateMachine::EventHandlerWrapperWithNoData<CLMiLoCustomLoiRecordingManager,&CLMiLoCustomLoiRecordingManager::entryFunctionRecordingThrottledState>::stateFunction(int a1, id *this)
{
}

void CLMicroLocationStateMachine::EventHandlerWrapperWithNoData<CLMiLoCustomLoiRecordingManager,&CLMiLoCustomLoiRecordingManager::entryFunctionRecordingThrottledState>::~EventHandlerWrapperWithNoData(CLMacAddress *a1, unint64_t a2)
{
  CLMacAddress::newFromUint64(a1, a2);
  JUMPOUT(0x25A2A6340);
}

void CLMiLoStartRecordingSessionEvent::CLMiLoStartRecordingSessionEvent(CLMiLoStartRecordingSessionEvent *this)
{
  *(void *)this = &unk_2704DC488;
  id v2 = std::string::basic_string[abi:ne180100]<0>((void *)this + 1, "No Name Given");
  *(void *)this = &unk_2704DC468;
  MEMORY[0x25A2A6080](v2, "StartRecordingSessionEvent");
}

void sub_2563ACDF0(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void CLMicroLocationStateMachine::EventBase::~EventBase(void **this)
{
  *this = &unk_2704DC488;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_2704DC488;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x25A2A6340);
}

void CLMiLoStopRecordingSessionEvent::CLMiLoStopRecordingSessionEvent(CLMiLoStopRecordingSessionEvent *this)
{
  *(void *)this = &unk_2704DC488;
  id v2 = std::string::basic_string[abi:ne180100]<0>((void *)this + 1, "No Name Given");
  *(void *)this = &unk_2704DC4A8;
  MEMORY[0x25A2A6080](v2, "StopRecordingSessionEvent");
}

void sub_2563ACFC8(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void CLMiLoRecordingCompletedEvent::CLMiLoRecordingCompletedEvent(CLMiLoRecordingCompletedEvent *this)
{
  *(void *)this = &unk_2704DC488;
  id v2 = std::string::basic_string[abi:ne180100]<0>((void *)this + 1, "No Name Given");
  *(void *)this = &unk_2704DC4C8;
  MEMORY[0x25A2A6080](v2, "RecordingCompletedEvent");
}

void sub_2563AD0E0(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void CLMiLoRecordingFenceBreachedEvent::CLMiLoRecordingFenceBreachedEvent(CLMiLoRecordingFenceBreachedEvent *this)
{
  *(void *)this = &unk_2704DC488;
  id v2 = std::string::basic_string[abi:ne180100]<0>((void *)this + 1, "No Name Given");
  *(void *)this = &unk_2704DC4E8;
  MEMORY[0x25A2A6080](v2, "RecordingFenceBreachedEvent");
}

void sub_2563AD1F8(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void CLMiLoMaxRecordingTimerFiredEvent::CLMiLoMaxRecordingTimerFiredEvent(CLMiLoMaxRecordingTimerFiredEvent *this)
{
  *(void *)this = &unk_2704DC488;
  id v2 = std::string::basic_string[abi:ne180100]<0>((void *)this + 1, "No Name Given");
  *(void *)this = &unk_2704DC508;
  MEMORY[0x25A2A6080](v2, "MaxRecordingTimerFiredEvent");
}

void sub_2563AD310(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void CLMiLoThrottleTimerFiredEvent::CLMiLoThrottleTimerFiredEvent(CLMiLoThrottleTimerFiredEvent *this)
{
  *(void *)this = &unk_2704DC488;
  id v2 = std::string::basic_string[abi:ne180100]<0>((void *)this + 1, "No Name Given");
  *(void *)this = &unk_2704DC528;
  MEMORY[0x25A2A6080](v2, "ThrottleTimerFiredEvent");
}

void sub_2563AD428(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void CLMiLoDeviceReadyEvent::CLMiLoDeviceReadyEvent(CLMiLoDeviceReadyEvent *this)
{
  *(void *)this = &unk_2704DC488;
  id v2 = std::string::basic_string[abi:ne180100]<0>((void *)this + 1, "No Name Given");
  *(void *)this = &unk_2704DC548;
  MEMORY[0x25A2A6080](v2, "DeviceReadyEvent");
}

void sub_2563AD540(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void CLMiLoDeviceNotReadyEvent::CLMiLoDeviceNotReadyEvent(CLMiLoDeviceNotReadyEvent *this)
{
  *(void *)this = &unk_2704DC488;
  id v2 = std::string::basic_string[abi:ne180100]<0>((void *)this + 1, "No Name Given");
  *(void *)this = &unk_2704DC568;
  MEMORY[0x25A2A6080](v2, "DeviceNotReadyEvent");
}

void sub_2563AD658(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_34()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

_OWORD *std::__tree<std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>,std::__map_value_compare<std::string,std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v6 = (void **)std::__tree<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::__map_value_compare<std::string,std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  int v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    int v7 = operator new(0x40uLL);
    uint64_t v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    _DWORD v9[2] = 0;
    void *v9 = 0;
    *((void *)v7 + 7) = 0;
    std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__insert_node_at(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

void sub_2563AD8D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2563ADB00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2563ADBAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_2563ADC38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_2563ADD00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2563ADEC8(_Unwind_Exception *a1)
{
  int v7 = v2;

  _Unwind_Resume(a1);
}

void sub_2563AE0B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2563AE0F8()
{
}

void sub_2563AE178(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2563AE5B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_35()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

void *CLMicroLocationUwbBridgeWrapper::CLMicroLocationUwbBridgeWrapper(void *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  *a1 = &unk_2704DC5C8;
  a1[1] = 0;
  id v6 = v5;
  a1[2] = v6;
  a1[3] = a3;
  int v7 = [[CLHomeNearbyRangeBridge alloc] initWithDelegate:a1 withQueue:v6];
  uint64_t v8 = (void *)a1[1];
  a1[1] = v7;

  return a1;
}

void sub_2563AE884(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLMicroLocationUwbBridgeWrapper::~CLMicroLocationUwbBridgeWrapper(CLMicroLocationUwbBridgeWrapper *this)
{
  this->unint64_t var0 = (void **)&unk_2704DC5C8;
  [this->var1 stopRanging];
  id var1 = this->var1;
  this->id var1 = 0;
}

{
  uint64_t vars8;

  CLMicroLocationUwbBridgeWrapper::~CLMicroLocationUwbBridgeWrapper(this);
  JUMPOUT(0x25A2A6340);
}

uint64_t CLMicroLocationUwbBridgeWrapper::startRanging(CLMicroLocationUwbBridgeWrapper *this)
{
  return [this->var1 startRanging];
}

uint64_t CLMicroLocationUwbBridgeWrapper::stopRanging(CLMicroLocationUwbBridgeWrapper *this)
{
  return [this->var1 stopRanging];
}

uint64_t CLMicroLocationUwbBridgeWrapper::setRangingRate(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 8) setRangingRateWithConfiguration:a2];
}

uint64_t CLMicroLocationUwbBridgeWrapper::resetRangingRate(CLMicroLocationUwbBridgeWrapper *this)
{
  return [this->var1 resetRangingRate];
}

uint64_t CLMicroLocationUwbBridgeWrapper::onHomeNearbySessionCreated(CLMicroLocationUwbBridgeWrapper *this)
{
  return (*(uint64_t (**)(void))(*(void *)this->var3 + 32))();
}

uint64_t CLMicroLocationUwbBridgeWrapper::onHomeNearbySessionStopped(CLMicroLocationUwbBridgeWrapper *this)
{
  return (*(uint64_t (**)(void))(*(void *)this->var3 + 24))();
}

uint64_t CLMicroLocationUwbBridgeWrapper::onHomeNearbySessionSuspended(CLMicroLocationUwbBridgeWrapper *this)
{
  return (*(uint64_t (**)(void))(*(void *)this->var3 + 40))();
}

uint64_t CLMicroLocationUwbBridgeWrapper::onHomeNearbySessionResumed(CLMicroLocationUwbBridgeWrapper *this)
{
  return (*(uint64_t (**)(void))(*(void *)this->var3 + 48))();
}

void CLMicroLocationUwbBridgeWrapper::onHomeNearbyObjects(uint64_t a1, CLMicroLocationProtobufHelper **a2)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
  CLMicroLocationProtobufHelper::protobufsFromNativeData<CLHomeNearbyObjectInternal>(a2, (uint64_t)v5);
  CFAbsoluteTime v4 = cl::chrono::CFAbsoluteTimeClock::now();
  (*(void (**)(void, unsigned char *, CFAbsoluteTime))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24), v5, v4);
  id v6 = (void **)v5;
  std::vector<CLMicroLocationProto::UwbRange>::__destroy_vector::operator()[abi:ne180100](&v6);
}

void sub_2563AEA9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<CLMicroLocationProto::UwbRange>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::protobufsFromNativeData<CLHomeNearbyObjectInternal>(CLMicroLocationProtobufHelper **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v10 = 0;
  long long v3 = 0uLL;
  long long v9 = 0u;
  CFAbsoluteTime v4 = *a1;
  id v5 = a1[1];
  if (*a1 == v5)
  {
    uint64_t v6 = 0;
  }
  else
  {
    do
    {
      CLMicroLocationProtobufHelper::protobufFromNative(v4, (CLMicroLocationProto::UwbRange *)v7);
      if (v8)
      {
        std::vector<CLMicroLocationProto::UwbRange>::push_back[abi:ne180100]((uint64_t *)&v9, (CLMicroLocationProto::UwbRange *)v7);
        if (v8) {
          CLMicroLocationProto::UwbRange::~UwbRange((CLMicroLocationProto::UwbRange *)v7);
        }
      }
      CFAbsoluteTime v4 = (CLMicroLocationProtobufHelper *)((char *)v4 + 80);
    }
    while (v4 != v5);
    long long v3 = v9;
    uint64_t v6 = v10;
  }
  *(_OWORD *)a2 = v3;
  *(void *)(a2 + 16) = v6;
  uint64_t v10 = 0;
  long long v9 = 0uLL;
  v7[0] = (void **)&v9;
  std::vector<CLMicroLocationProto::UwbRange>::__destroy_vector::operator()[abi:ne180100](v7);
}

void sub_2563AEB68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a18) {
    CLMicroLocationProto::UwbRange::~UwbRange((CLMicroLocationProto::UwbRange *)&a10);
  }
  a10 = (void **)(v18 - 64);
  std::vector<CLMicroLocationProto::UwbRange>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMicroLocationProto::UwbRange>::push_back[abi:ne180100](uint64_t *a1, CLMicroLocationProto::UwbRange *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v10 = (uint64_t)(v7 - *a1) >> 6;
    if ((unint64_t)(v10 + 1) >> 58) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - *a1;
    uint64_t v12 = v11 >> 5;
    if (v11 >> 5 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      std::string v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRecordingLabelsTable::Entry>>(v4, v13);
    }
    else {
      std::string v14 = 0;
    }
    uint64_t v15 = v14;
    uint64_t v16 = (CLMicroLocationProto::UwbRange *)&v14[64 * v10];
    uint64_t v18 = &v14[64 * v13];
    CLMicroLocationProto::UwbRange::UwbRange(v16, a2);
    long long v17 = (char *)v16 + 64;
    std::vector<CLMicroLocationProto::UwbRange>::__swap_out_circular_buffer(a1, &v15);
    uint64_t v9 = a1[1];
    uint64_t result = std::__split_buffer<CLMicroLocationProto::UwbRange>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    uint64_t result = CLMicroLocationProto::UwbRange::UwbRange(*(CLMicroLocationProto::UwbRange **)(v4 - 8), a2);
    uint64_t v9 = v7 + 64;
    a1[1] = v7 + 64;
  }
  a1[1] = v9;
  return result;
}

void sub_2563AEC90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<CLMicroLocationProto::UwbRange>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationProto::UwbRange>,std::reverse_iterator<CLMicroLocationProto::UwbRange*>,std::reverse_iterator<CLMicroLocationProto::UwbRange*>,std::reverse_iterator<CLMicroLocationProto::UwbRange*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationProto::UwbRange>,std::reverse_iterator<CLMicroLocationProto::UwbRange*>,std::reverse_iterator<CLMicroLocationProto::UwbRange*>,std::reverse_iterator<CLMicroLocationProto::UwbRange*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t i = 0;
        a3 + i != a5;
        CLMicroLocationProto::UwbRange::UwbRange((CLMicroLocationProto::UwbRange *)(i + a7), (const CLMicroLocationProto::UwbRange *)(i + a3)))
  {
    i -= 64;
  }
  return a6;
}

uint64_t std::__split_buffer<CLMicroLocationProto::UwbRange>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void (***)(void))(i - 64);
    *(void *)(a1 + 16) = i - 64;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<CLMicroLocationProto::UwbRange>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  id v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 64;
      uint64_t v7 = v4 - 64;
      uint64_t v8 = v4 - 64;
      do
      {
        uint64_t v9 = *(void (***)(char *))v8;
        v8 -= 64;
        (*v9)(v7);
        v6 -= 64;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t CLMicroLocationUtils::createEnabledTechnologies(CLMicroLocationUtils *this, int a2, int a3)
{
  uint64_t v3 = 2;
  if (!this) {
    uint64_t v3 = 0;
  }
  if (a2) {
    v3 |= 0x20uLL;
  }
  if (a3) {
    return v3 | 0x40;
  }
  else {
    return v3;
  }
}

uint64_t CLMicroLocationUtils::ProbabilityMatrix::setValue(CLMicroLocationUtils::ProbabilityMatrix *this, int a2, int a3, double a4)
{
  uint64_t v4 = 0;
  if ((a2 & 0x80000000) == 0 && (a3 & 0x80000000) == 0)
  {
    int v5 = *((_DWORD *)this + 3);
    if (v5 > a2)
    {
      if (*((_DWORD *)this + 4) <= a3)
      {
        return 0;
      }
      else
      {
        *(double *)(*(void *)this + 8 * (a2 + v5 * a3)) = a4;
        *((unsigned char *)this + 8) = 0;
        return 1;
      }
    }
  }
  return v4;
}

void CLMicroLocationUtils::ProbabilityMatrix::ProbabilityMatrix(CLMicroLocationUtils::ProbabilityMatrix *this, int a2, int a3)
{
  *(void *)this = 0;
  *((_WORD *)this + 4) = 0;
  *((_DWORD *)this + 3) = a2;
  *((_DWORD *)this + 4) = a3;
  operator new[]();
}

void sub_2563AEFDC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  uint64_t *v1 = 0;
  if (v3) {
    MEMORY[0x25A2A6320](v3, 0x1000C8000313F17);
  }
  _Unwind_Resume(exception_object);
}

void CLMicroLocationUtils::ProbabilityMatrix::ProbabilityMatrix(CLMicroLocationUtils::ProbabilityMatrix *this, const CLMicroLocationUtils::ProbabilityMatrix *a2)
{
  *(void *)this = 0;
  operator new[]();
}

void sub_2563AF0A8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  uint64_t *v1 = 0;
  if (v3) {
    MEMORY[0x25A2A6320](v3, 0x1000C8000313F17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationUtils::ProbabilityMatrix::ProbabilityMatrix(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)a1 = v4;
  *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
  *(void *)(a1 + 12) = *(uint64_t *)((char *)a2 + 12);
  uint64_t v5 = *a2;
  *a2 = 0;
  if (v5) {
    MEMORY[0x25A2A6320](v5, 0x1000C8000313F17);
  }
  *((_WORD *)a2 + 4) = 0;
  *((_DWORD *)a2 + 3) = 0;
  *((_DWORD *)a2 + 4) = 0;
  return a1;
}

uint64_t CLMicroLocationUtils::ProbabilityMatrix::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2) {
    operator new[]();
  }
  return result;
}

uint64_t *CLMicroLocationUtils::ProbabilityMatrix::operator=(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *a1;
    *a1 = 0;
    if (v4) {
      MEMORY[0x25A2A6320](v4, 0x1000C8000313F17);
    }
    uint64_t v5 = *a2;
    *a2 = 0;
    uint64_t v6 = *a1;
    *a1 = v5;
    if (v6) {
      MEMORY[0x25A2A6320](v6, 0x1000C8000313F17);
    }
    *((_WORD *)a1 + 4) = *((_WORD *)a2 + 4);
    *(uint64_t *)((char *)a1 + 12) = *(uint64_t *)((char *)a2 + 12);
    uint64_t v7 = *a2;
    *a2 = 0;
    if (v7) {
      MEMORY[0x25A2A6320](v7, 0x1000C8000313F17);
    }
    *((_WORD *)a2 + 4) = 0;
    *((_DWORD *)a2 + 3) = 0;
    *((_DWORD *)a2 + 4) = 0;
  }
  return a1;
}

uint64_t CLMicroLocationUtils::ProbabilityMatrix::removeFirstCols@<X0>(uint64_t this@<X0>, unsigned int a2@<W1>, unsigned char *a3@<X8>)
{
  *a3 = 0;
  a3[24] = 0;
  unsigned int v3 = *(_DWORD *)(this + 16);
  if (v3 > a2) {
    CLMicroLocationUtils::ProbabilityMatrix::ProbabilityMatrix((CLMicroLocationUtils::ProbabilityMatrix *)v4, *(_DWORD *)(this + 12), v3 - a2);
  }
  return this;
}

void sub_2563AF344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MEMORY[0x25A2A6320](a10, 0x1000C8000313F17);
  }
  if (*((unsigned char *)v10 + 24))
  {
    uint64_t v12 = *v10;
    *BOOL v10 = 0;
    if (v12) {
      MEMORY[0x25A2A6320](v12, 0x1000C8000313F17);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::optional<CLMicroLocationUtils::ProbabilityMatrix>::operator=[abi:ne180100]<CLMicroLocationUtils::ProbabilityMatrix,void>(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 24)) {
    return CLMicroLocationUtils::ProbabilityMatrix::operator=((uint64_t *)a1, a2);
  }
  uint64_t result = (uint64_t *)CLMicroLocationUtils::ProbabilityMatrix::ProbabilityMatrix(a1, a2);
  *((unsigned char *)result + 24) = 1;
  return result;
}

uint64_t CLMicroLocationUtils::ProbabilityMatrix::getValue(CLMicroLocationUtils::ProbabilityMatrix *this, int a2, int a3, double *a4)
{
  if (a2 < 0) {
    return 0;
  }
  uint64_t result = 0;
  if ((a3 & 0x80000000) == 0)
  {
    int v6 = *((_DWORD *)this + 3);
    if (v6 > a2)
    {
      if (*((_DWORD *)this + 4) > a3)
      {
        *a4 = *(double *)(*(void *)this + 8 * (a2 + v6 * a3));
        return 1;
      }
      return 0;
    }
  }
  return result;
}

uint64_t CLMicroLocationUtils::ProbabilityMatrix::normalizeRows(CLMicroLocationUtils::ProbabilityMatrix *this)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 8)) {
    return 1;
  }
  uint64_t v3 = *((unsigned int *)this + 3);
  if (!v3) {
    goto LABEL_27;
  }
  int v4 = *((_DWORD *)this + 4);
  if (!v4) {
    return 0;
  }
  if (v4 == 1)
  {
    if ((int)v3 >= 1)
    {
      uint64_t v5 = *(void **)this;
      do
      {
        *v5++ = 0x3FF0000000000000;
        --v3;
      }
      while (v3);
    }
    goto LABEL_27;
  }
  if ((int)v3 < 1)
  {
LABEL_27:
    uint64_t result = 1;
    *((unsigned char *)this + 8) = 1;
    return result;
  }
  uint64_t v6 = 0;
  char v7 = 1;
  LODWORD(v8) = *((_DWORD *)this + 3);
  while (2)
  {
    uint64_t v9 = 8 * v6;
    while (1)
    {
      double v10 = cblas_dnrm2(*((_DWORD *)this + 4), (const double *)(*(void *)this + v9), v8);
      if (v10 == 0.0) {
        break;
      }
      cblas_dscal(*((_DWORD *)this + 4), 1.0 / v10, (double *)(*(void *)this + v9), *((_DWORD *)this + 3));
      ++v6;
      uint64_t v8 = *((int *)this + 3);
      v9 += 8;
      if (v6 >= v8)
      {
        if ((v7 & 1) == 0) {
          return 0;
        }
        goto LABEL_27;
      }
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_44);
    }
    uint64_t v11 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 68289282;
      int v14 = 0;
      __int16 v15 = 2082;
      uint64_t v16 = "";
      __int16 v17 = 1026;
      int v18 = v6;
      _os_log_impl(&dword_25631F000, v11, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"ProbabilityMatrix::normalizeRows, row with zero norm!\", \"RowIndex\":%{public}d}", buf, 0x18u);
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_44);
    }
    uint64_t v12 = logObject_MicroLocation_Default;
    if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
    {
      *(_DWORD *)long long buf = 68289282;
      int v14 = 0;
      __int16 v15 = 2082;
      uint64_t v16 = "";
      __int16 v17 = 1026;
      int v18 = v6;
      _os_signpost_emit_with_name_impl(&dword_25631F000, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "ProbabilityMatrix::normalizeRows, row with zero norm!", "{\"msg%{public}.0s\":\"ProbabilityMatrix::normalizeRows, row with zero norm!\", \"RowIndex\":%{public}d}", buf, 0x18u);
    }
    char v7 = 0;
    uint64_t result = 0;
    ++v6;
    uint64_t v8 = *((int *)this + 3);
    if (v6 < v8) {
      continue;
    }
    return result;
  }
}

uint64_t CLMicroLocationUtils::ProbabilityMatrix::multByVec@<X0>(uint64_t this@<X0>, const CLMicroLocationUtils::ProbabilityMatrix *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v4 = 12;
  if (!*(unsigned char *)(this + 9)) {
    uint64_t v4 = 16;
  }
  int v5 = *(_DWORD *)(this + v4);
  if (*((unsigned char *)a2 + 9)) {
    int v6 = *((_DWORD *)a2 + 4);
  }
  else {
    int v6 = *((_DWORD *)a2 + 3);
  }
  if (v5 == v6)
  {
    int v7 = *((unsigned char *)a2 + 9) ? *((_DWORD *)a2 + 3) : *((_DWORD *)a2 + 4);
    if (v5 == 1 || v7 == 1)
    {
      uint64_t v9 = 16;
      if (!*(unsigned char *)(this + 9)) {
        uint64_t v9 = 12;
      }
      int v10 = *(_DWORD *)(this + v9);
      if (v5) {
        BOOL v11 = v10 == 0;
      }
      else {
        BOOL v11 = 1;
      }
      if (!v11 && v7 != 0) {
        CLMicroLocationUtils::ProbabilityMatrix::ProbabilityMatrix((CLMicroLocationUtils::ProbabilityMatrix *)&v13, v10, v7);
      }
    }
  }
  *a3 = 0;
  a3[24] = 0;
  return this;
}

void sub_2563AF7C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    MEMORY[0x25A2A6320](a12, 0x1000C8000313F17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationUtils::ProbabilityMatrix::appendRows(CLMicroLocationUtils::ProbabilityMatrix *this, const CLMicroLocationUtils::ProbabilityMatrix *a2, unsigned int a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)a2 + 4) == *((_DWORD *)this + 4))
  {
    unsigned int v6 = *((_DWORD *)a2 + 3);
    if (a3 >= v6)
    {
      if (a3 != v6)
      {
        if (*((_DWORD *)this + 3) + v6 <= a3) {
          int v19 = *((_DWORD *)this + 3);
        }
        else {
          int v19 = a3 - v6;
        }
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_44);
        }
        std::string::size_type v20 = logObject_MicroLocation_Default;
        if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v21 = *((_DWORD *)this + 3);
          int v22 = *((_DWORD *)a2 + 4);
          *(_DWORD *)long long buf = 68289794;
          int v24 = 0;
          __int16 v25 = 2082;
          std::string::size_type v26 = "";
          __int16 v27 = 1026;
          unsigned int v28 = v21;
          __int16 v29 = 1026;
          int v30 = v19;
          __int16 v31 = 1026;
          int v32 = v22;
          _os_log_impl(&dword_25631F000, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"appending rows\", \"NumOldRows\":%{public}d, \"NumOldRowsToKeep\":%{public}d, \"NumRowsToAppend\":%{public}d}", buf, 0x24u);
        }
        operator new[]();
      }
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_44);
      }
      __int16 v17 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
        int v18 = *((_DWORD *)a2 + 4);
        *(_DWORD *)long long buf = 68289538;
        int v24 = 0;
        __int16 v25 = 2082;
        std::string::size_type v26 = "";
        __int16 v27 = 1026;
        unsigned int v28 = a3;
        __int16 v29 = 1026;
        int v30 = v18;
        _os_log_impl(&dword_25631F000, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"rows to append are max length - copy\", \"MaxNumRows\":%{public}d, \"NumRowsToAppend\":%{public}d}", buf, 0x1Eu);
      }
      CLMicroLocationUtils::ProbabilityMatrix::operator=((uint64_t)this, (uint64_t)a2);
      return 1;
    }
    else
    {
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_44);
      }
      uint64_t v7 = logObject_MicroLocation_Default;
      BOOL v8 = os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (v8)
      {
        int v10 = *((_DWORD *)a2 + 4);
        *(_DWORD *)long long buf = 68289538;
        int v24 = 0;
        __int16 v25 = 2082;
        std::string::size_type v26 = "";
        __int16 v27 = 1026;
        unsigned int v28 = a3;
        __int16 v29 = 1026;
        int v30 = v10;
        BOOL v11 = "{\"msg%{public}.0s\":\"cannot append rows more rows than allowed\", \"MaxNumRows\":%{public}d, \"NumRowsTo"
              "Append\":%{public}d}";
        uint64_t v12 = v7;
LABEL_11:
        _os_log_impl(&dword_25631F000, v12, OS_LOG_TYPE_DEFAULT, v11, buf, 0x1Eu);
        return 0;
      }
    }
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_44);
    }
    uint64_t v13 = logObject_MicroLocation_Default;
    BOOL v14 = os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (v14)
    {
      unsigned int v15 = *((_DWORD *)this + 4);
      int v16 = *((_DWORD *)a2 + 4);
      *(_DWORD *)long long buf = 68289538;
      int v24 = 0;
      __int16 v25 = 2082;
      std::string::size_type v26 = "";
      __int16 v27 = 1026;
      unsigned int v28 = v15;
      __int16 v29 = 1026;
      int v30 = v16;
      BOOL v11 = "{\"msg%{public}.0s\":\"cannot append rows with incompatible number of columns\", \"NumColumns\":%{public}d, "
            "\"OtherNumColumns\":%{public}d}";
      uint64_t v12 = v13;
      goto LABEL_11;
    }
  }
  return result;
}

void *CLMicroLocationUtils::scanActivityToString@<X0>(char a1@<W0>, void *a2@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a2, off_2653F99F0[a1]);
}

uint64_t CLMicroLocationUtils::BleScanConfiguration::BleScanConfiguration(uint64_t a1, char a2, char a3, char a4, id obj, uint64_t a6, double a7)
{
  *(double *)a1 = a7;
  *(unsigned char *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 9) = a3;
  *(unsigned char *)(a1 + 10) = a4;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a6;
  *(void *)(a1 + 40) = *(void *)(a6 + 16);
  *(void *)a6 = 0;
  *(void *)(a6 + 8) = 0;
  *(void *)(a6 + 16) = 0;
  objc_storeStrong((id *)(a1 + 16), obj);
  return a1;
}

void *CLMicroLocationUtils::placeConfidenceReasonToString@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a2, off_2653F9A08[a1]);
}

unint64_t CLMicroLocationUtils::BleIdentityItem::HashItem::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  unint64_t result = 0;
  do
    result ^= (result << 6) + (result >> 2) + 2654435769u + *(unsigned __int8 *)(a2 + v2++);
  while (v2 != 16);
  return result;
}

uint64_t CLMicroLocationUtils::BleIdentityItem::PredicateItem::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)a2 == *(void *)a3 && *(void *)(a2 + 8) == *(void *)(a3 + 8)) {
    return std::operator==[abi:ne180100]<std::string,std::string>((unsigned __int8 *)(a2 + 16), (unsigned __int8 *)(a3 + 16));
  }
  else {
    return 0;
  }
}

uint64_t std::operator==[abi:ne180100]<std::string,std::string>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1[24]) {
    BOOL v2 = a2[24] == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return (a1[24] != 0) == (a2[24] != 0);
  }
  uint64_t v4 = a1[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a1[23];
  }
  else {
    uint64_t v5 = *((void *)a1 + 1);
  }
  uint64_t v6 = a2[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a2 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
  }
  if (!a1[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a1++;
    int v9 = v10;
    int v12 = *a2++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    BOOL v2 = v9 == v11;
    BOOL v3 = v9 == v11;
  }
  while (v2 && v14);
  return v3;
}

uint64_t CLMicroLocationUtils::stopReasonToConfidenceReason(int a1)
{
  if ((a1 - 1) > 3) {
    return 0;
  }
  else {
    return qword_256517090[a1 - 1] | 0x100000000;
  }
}

BOOL CLMicroLocationUtils::stopReasonIndicatesMiLoDisabled(int a1)
{
  return a1 == 1;
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_36()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

void sub_2563AFF38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ULDBUtils::insertEntries<CLMiLoServiceTable,ULServiceMO>(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2020000000;
  char v15 = 0;
  uint64_t v4 = [v3 managedObjectContext];
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 3221225472;
  v8[2] = ___ZN9ULDBUtils13insertEntriesI18CLMiLoServiceTable11ULServiceMOEEbP7ULStoreRKNSt3__16vectorINT_5EntryENS5_9allocatorIS8_EEEE_block_invoke;
  void v8[3] = &unk_2653F90B8;
  uint64_t v11 = a2;
  id v5 = v3;
  id v9 = v5;
  int v10 = &v12;
  [v4 performBlockAndWait:v8];

  uint64_t v6 = *((unsigned __int8 *)v13 + 24);
  _Block_object_dispose(&v12, 8);

  return v6;
}

void sub_2563B0078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ULDBUtils::fetchEntries<CLMiLoServiceTable,ULServiceMO>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  uint64_t v23 = 0;
  int v24 = &v23;
  uint64_t v25 = 0x4812000000;
  std::string::size_type v26 = __Block_byref_object_copy__8;
  __int16 v27 = __Block_byref_object_dispose__8;
  unsigned int v28 = &unk_25654E519;
  memset(v29, 0, sizeof(v29));
  uint64_t v12 = [v9 managedObjectContext];
  v17[0] = MEMORY[0x263EF8330];
  v17[1] = 3221225472;
  _DWORD v17[2] = ___ZN9ULDBUtils12fetchEntriesI18CLMiLoServiceTable11ULServiceMOEENSt3__16vectorINT_5EntryENS3_9allocatorIS6_EEEEP7ULStoreP7NSArrayIP11NSPredicateEPSC_IP16NSSortDescriptorEm_block_invoke;
  void v17[3] = &unk_2653F90E0;
  id v13 = v10;
  id v18 = v13;
  id v14 = v11;
  id v19 = v14;
  uint64_t v22 = a4;
  id v15 = v9;
  id v20 = v15;
  unsigned int v21 = &v23;
  [v12 performBlockAndWait:v17];

  int v16 = v24;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  std::vector<CLMiLoServiceTable::Entry>::__init_with_size[abi:ne180100]<CLMiLoServiceTable::Entry*,CLMiLoServiceTable::Entry*>(a5, v16[6], v16[7], 0x2E8BA2E8BA2E8BA3 * ((v16[7] - v16[6]) >> 3));

  _Block_object_dispose(&v23, 8);
  int v30 = (void **)v29;
  std::vector<CLMiLoServiceTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v30);
}

void sub_2563B0270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, void *a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);

  _Block_object_dispose(va, 8);
  *(void *)(v14 - 96) = v13;
  std::vector<CLMiLoServiceTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 96));

  _Unwind_Resume(a1);
}

void ULDBUtils::fetchAllWithLimit<CLMiLoServiceTable,ULServiceMO>(void *a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  v10[1] = *MEMORY[0x263EF8340];
  id v5 = a1;
  uint64_t v6 = (void *)MEMORY[0x263F08B30];
  int v7 = [(id)objc_opt_class() defaultSortProperty];
  uint64_t v8 = [v6 sortDescriptorWithKey:v7 ascending:0];

  v10[0] = v8;
  id v9 = [MEMORY[0x263EFF8C0] arrayWithObjects:v10 count:1];
  ULDBUtils::fetchEntries<CLMiLoServiceTable,ULServiceMO>(v5, 0, v9, a2, a3);
}

void sub_2563B03D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2563B0528(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2563B06C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2563B081C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2563B0974(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2563B0A78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2563B0C74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2563B0E88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2563B1088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_2563B1264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2563B1448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_2563B1624(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2563B1748(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2563B17F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2563B222C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,char a26,void *a27,uint64_t a28,char a29,void *a30,uint64_t a31,char a32)
{
  if (__p) {
    operator delete(__p);
  }
  if (a23) {
    operator delete(a23);
  }
  std::__tree<std::__value_type<std::pair<std::string,unsigned long long>,std::vector<CLMiLoServiceTable::Entry>>,std::__map_value_compare<std::pair<std::string,unsigned long long>,std::__value_type<std::pair<std::string,unsigned long long>,std::vector<CLMiLoServiceTable::Entry>>,std::less<std::pair<std::string,unsigned long long>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned long long>,std::vector<CLMiLoServiceTable::Entry>>>>::destroy((uint64_t)&a26, a27);
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&a29, a30);
  *(void *)(v32 - 160) = &a32;
  std::vector<CLMiLoServiceTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 160));
  _Unwind_Resume(a1);
}

void sub_2563B2508(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2563B26A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_37()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

void ___ZN9ULDBUtils13insertEntriesI18CLMiLoServiceTable11ULServiceMOEEbP7ULStoreRKNSt3__16vectorINT_5EntryENS5_9allocatorIS8_EEEE_block_invoke(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  BOOL v2 = *(uint64_t **)(a1 + 48);
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  if (*v2 == v4)
  {
LABEL_4:
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [*(id *)(a1 + 32) commitChangesToStore];
    int v7 = *(void **)(a1 + 32);
    [v7 deleteOldestRecordsIfFull];
  }
  else
  {
    while (1)
    {
      id v5 = [*(id *)(a1 + 32) managedObjectContext];
      uint64_t v6 = +[ULServiceMO createFromEntry:v3 inManagedObjectContext:v5];

      if (!v6) {
        break;
      }

      v3 += 88;
      if (v3 == v4) {
        goto LABEL_4;
      }
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_45);
    }
    uint64_t v8 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      id v9 = +[ULServiceMO entity];
      id v10 = [v9 name];
      int v15 = 68289283;
      int v16 = 0;
      __int16 v17 = 2082;
      id v18 = "";
      __int16 v19 = 2113;
      id v20 = v10;
      _os_log_impl(&dword_25631F000, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to create entry from MO\", \"MO\":%{private, location:escape_only}@}", (uint8_t *)&v15, 0x1Cu);
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_45);
    }
    id v11 = (id)logObject_MicroLocation_Default;
    if (os_signpost_enabled(v11))
    {
      uint64_t v12 = +[ULServiceMO entity];
      uint64_t v13 = [v12 name];
      int v15 = 68289283;
      int v16 = 0;
      __int16 v17 = 2082;
      id v18 = "";
      __int16 v19 = 2113;
      id v20 = v13;
      _os_signpost_emit_with_name_impl(&dword_25631F000, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to create entry from MO", "{\"msg%{public}.0s\":\"Failed to create entry from MO\", \"MO\":%{private, location:escape_only}@}", (uint8_t *)&v15, 0x1Cu);
    }
    uint64_t v14 = [*(id *)(a1 + 32) managedObjectContext];
    [v14 reset];
  }
}

void sub_2563B29F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__8(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__8(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  std::vector<CLMiLoServiceTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void ___ZN9ULDBUtils12fetchEntriesI18CLMiLoServiceTable11ULServiceMOEENSt3__16vectorINT_5EntryENS3_9allocatorIS6_EEEEP7ULStoreP7NSArrayIP11NSPredicateEPSC_IP16NSSortDescriptorEm_block_invoke(uint64_t a1)
{
  BOOL v2 = *(void **)(a1 + 48);
  uint64_t v3 = (objc_class *)objc_opt_class();
  uint64_t v4 = NSStringFromClass(v3);
  id v5 = [v2 fetchManagedObjectsWithEntityName:v4 byAndPredicates:*(void *)(a1 + 32) sortDescriptors:*(void *)(a1 + 40) andLimit:*(void *)(a1 + 64)];

  ULDBUtils::convertManagedObjectsToEntries<CLMiLoServiceTable,ULServiceMO>(v5, (uint64_t *)&v8);
  uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8);
  std::vector<CLMiLoServiceTable::Entry>::__vdeallocate((void **)(v6 + 48));
  *(_OWORD *)(v6 + 48) = v8;
  *(void *)(v6 + 64) = v9;
  uint64_t v9 = 0;
  long long v8 = 0uLL;
  id v10 = (void **)&v8;
  std::vector<CLMiLoServiceTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v10);
  int v7 = [*(id *)(a1 + 48) managedObjectContext];
  [v7 reset];
}

void sub_2563B2B60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ULDBUtils::convertManagedObjectsToEntries<CLMiLoServiceTable,ULServiceMO>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  id v3 = a1;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  std::vector<CLMiLoServiceTable::Entry>::reserve(a2, [v3 count]);
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v4 = v3;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v23 objects:v39 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v24;
    while (2)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v24 != v6) {
          objc_enumerationMutation(v4);
        }
        id v8 = *(id *)(*((void *)&v23 + 1) + 8 * i);
        uint64_t v9 = v8;
        if (!v8)
        {
          long long v37 = 0u;
          long long v38 = 0u;
          long long v35 = 0u;
          long long v36 = 0u;
          long long v33 = 0u;
          long long v34 = 0u;
LABEL_16:
          if (onceToken_MicroLocation_Default != -1) {
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_45);
          }
          int v15 = (id)logObject_MicroLocation_Default;
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            int v16 = [v9 entity];
            __int16 v17 = [v16 name];
            *(_DWORD *)long long buf = 68289283;
            int v28 = 0;
            __int16 v29 = 2082;
            int v30 = "";
            __int16 v31 = 2113;
            uint64_t v32 = v17;
            _os_log_impl(&dword_25631F000, v15, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to convert MO to entry\", \"MO\":%{private, location:escape_only}@}", buf, 0x1Cu);
          }
          if (onceToken_MicroLocation_Default != -1) {
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_45);
          }
          id v18 = (id)logObject_MicroLocation_Default;
          if (os_signpost_enabled(v18))
          {
            __int16 v19 = [v9 entity];
            id v20 = [v19 name];
            *(_DWORD *)long long buf = 68289283;
            int v28 = 0;
            __int16 v29 = 2082;
            int v30 = "";
            __int16 v31 = 2113;
            uint64_t v32 = v20;
            _os_signpost_emit_with_name_impl(&dword_25631F000, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to convert MO to entry", "{\"msg%{public}.0s\":\"Failed to convert MO to entry\", \"MO\":%{private, location:escape_only}@}", buf, 0x1Cu);
          }
          std::__optional_destruct_base<CLMiLoServiceTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v33);

          uint64_t v22 = *a2;
          for (uint64_t j = a2[1]; j != v22; std::allocator<CLMiLoServiceTable::Entry>::destroy[abi:ne180100]((uint64_t)(a2 + 2), j))j -= 88;
          a2[1] = v22;
          goto LABEL_28;
        }
        objc_msgSend(v8, "convertToEntry", (void)v23);
        if (!BYTE8(v38)) {
          goto LABEL_16;
        }
        unint64_t v10 = a2[1];
        if (v10 >= a2[2])
        {
          uint64_t v14 = std::vector<CLMiLoServiceTable::Entry>::__push_back_slow_path<CLMiLoServiceTable::Entry>(a2, (uint64_t)&v33);
        }
        else
        {
          long long v11 = v34;
          *(_OWORD *)unint64_t v10 = v33;
          *(_OWORD *)(v10 + 16) = v11;
          long long v12 = v35;
          *(void *)(v10 + 48) = v36;
          *(_OWORD *)(v10 + 32) = v12;
          *(void *)&long long v36 = 0;
          long long v35 = 0uLL;
          *(void *)(v10 + 56) = *((void *)&v36 + 1);
          long long v13 = v37;
          *(void *)(v10 + 80) = v38;
          *(_OWORD *)(v10 + 64) = v13;
          *(void *)&long long v38 = 0;
          long long v37 = 0uLL;
          uint64_t v14 = v10 + 88;
        }
        a2[1] = v14;
        std::__optional_destruct_base<CLMiLoServiceTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v33);
      }
      uint64_t v5 = [v4 countByEnumeratingWithState:&v23 objects:v39 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }

LABEL_28:
}

void sub_2563B2F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);

  std::__optional_destruct_base<CLMiLoServiceTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  std::vector<CLMiLoServiceTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)va);

  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMiLoServiceTable::Entry>::__push_back_slow_path<CLMiLoServiceTable::Entry>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2E8BA2E8BA2E8BALL) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x1745D1745D1745DLL) {
    unint64_t v9 = 0x2E8BA2E8BA2E8BALL;
  }
  else {
    unint64_t v9 = v5;
  }
  void v17[4] = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMiLoServiceTable::Entry>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  long long v11 = &v10[88 * v4];
  v17[0] = v10;
  v17[1] = v11;
  void v17[3] = &v10[88 * v9];
  long long v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)long long v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v12;
  long long v13 = *(_OWORD *)(a2 + 32);
  *((void *)v11 + 6) = *(void *)(a2 + 48);
  *((_OWORD *)v11 + 2) = v13;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 32) = 0;
  *((void *)v11 + 7) = *(void *)(a2 + 56);
  long long v14 = *(_OWORD *)(a2 + 64);
  *((void *)v11 + 10) = *(void *)(a2 + 80);
  *((_OWORD *)v11 + 4) = v14;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 64) = 0;
  _DWORD v17[2] = v11 + 88;
  std::vector<CLMiLoServiceTable::Entry>::__swap_out_circular_buffer(a1, v17);
  uint64_t v15 = a1[1];
  std::__split_buffer<CLMiLoServiceTable::Entry>::~__split_buffer(v17);
  return v15;
}

void sub_2563B30E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMiLoServiceTable::Entry>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::vector<CLMiLoServiceTable::Entry>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 88;
        std::allocator<CLMiLoServiceTable::Entry>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void *std::vector<CLMiLoServiceTable::Entry>::__init_with_size[abi:ne180100]<CLMiLoServiceTable::Entry*,CLMiLoServiceTable::Entry*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<CLMiLoServiceTable::Entry>::__vallocate[abi:ne180100](result, a4);
    __n128 result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMiLoServiceTable::Entry>,CLMiLoServiceTable::Entry*,CLMiLoServiceTable::Entry*,CLMiLoServiceTable::Entry*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2563B31CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<CLMiLoServiceTable::Entry>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<CLMiLoServiceTable::Entry>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMiLoServiceTable::Entry>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[88 * v4];
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned long long,unsigned long>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,unsigned long>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,unsigned long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    long long v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = **a4;
    void v11[5] = 0;
    std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void std::__tree<std::__value_type<std::pair<std::string,unsigned long long>,std::vector<CLMiLoServiceTable::Entry>>,std::__map_value_compare<std::pair<std::string,unsigned long long>,std::__value_type<std::pair<std::string,unsigned long long>,std::vector<CLMiLoServiceTable::Entry>>,std::less<std::pair<std::string,unsigned long long>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned long long>,std::vector<CLMiLoServiceTable::Entry>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::pair<std::string,unsigned long long>,std::vector<CLMiLoServiceTable::Entry>>,std::__map_value_compare<std::pair<std::string,unsigned long long>,std::__value_type<std::pair<std::string,unsigned long long>,std::vector<CLMiLoServiceTable::Entry>>,std::less<std::pair<std::string,unsigned long long>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned long long>,std::vector<CLMiLoServiceTable::Entry>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::pair<std::string,unsigned long long>,std::vector<CLMiLoServiceTable::Entry>>,std::__map_value_compare<std::pair<std::string,unsigned long long>,std::__value_type<std::pair<std::string,unsigned long long>,std::vector<CLMiLoServiceTable::Entry>>,std::less<std::pair<std::string,unsigned long long>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned long long>,std::vector<CLMiLoServiceTable::Entry>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::pair<std::string,unsigned long long> const,std::vector<CLMiLoServiceTable::Entry>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::pair<std::string,unsigned long long> const,std::vector<CLMiLoServiceTable::Entry>>,0>(uint64_t a1)
{
  BOOL v2 = (void **)(a1 + 32);
  std::vector<CLMiLoServiceTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void *std::__tree<std::__value_type<std::pair<std::string,unsigned long long>,std::vector<CLMiLoServiceTable::Entry>>,std::__map_value_compare<std::pair<std::string,unsigned long long>,std::__value_type<std::pair<std::string,unsigned long long>,std::vector<CLMiLoServiceTable::Entry>>,std::less<std::pair<std::string,unsigned long long>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned long long>,std::vector<CLMiLoServiceTable::Entry>>>>::__emplace_unique_key_args<std::pair<std::string,unsigned long long>,std::piecewise_construct_t const&,std::tuple<std::pair<std::string,unsigned long long>&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (void **)std::__tree<std::__value_type<std::pair<std::string,unsigned long long>,std::vector<CLMiLoServiceTable::Entry>>,std::__map_value_compare<std::pair<std::string,unsigned long long>,std::__value_type<std::pair<std::string,unsigned long long>,std::vector<CLMiLoServiceTable::Entry>>,std::less<std::pair<std::string,unsigned long long>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned long long>,std::vector<CLMiLoServiceTable::Entry>>>>::__find_equal<std::pair<std::string,unsigned long long>>((uint64_t)a1, &v14, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x58uLL);
    v12[1] = a1 + 1;
    uint64_t v9 = *a4;
    long long v10 = **a4;
    v7[6] = *((void *)*a4 + 2);
    *((_OWORD *)v7 + 2) = v10;
    *((void *)v9 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0;
    *((void *)v9 + 2) = 0;
    *(void *)uint64_t v9 = 0;
    v7[7] = *((void *)v9 + 3);
    v7[8] = 0;
    v7[9] = 0;
    v7[10] = 0;
    char v13 = 1;
    std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__insert_node_at(a1, v14, v8, v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::pair<std::string,unsigned long long>,std::vector<CLMiLoServiceTable::Entry>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,unsigned long long>,std::vector<CLMiLoServiceTable::Entry>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v7;
}

void *std::__tree<std::__value_type<std::pair<std::string,unsigned long long>,std::vector<CLMiLoServiceTable::Entry>>,std::__map_value_compare<std::pair<std::string,unsigned long long>,std::__value_type<std::pair<std::string,unsigned long long>,std::vector<CLMiLoServiceTable::Entry>>,std::less<std::pair<std::string,unsigned long long>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned long long>,std::vector<CLMiLoServiceTable::Entry>>>>::__find_equal<std::pair<std::string,unsigned long long>>(uint64_t a1, void *a2, const void **a3)
{
  unint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        unint64_t v8 = (void *)v4;
        uint64_t v9 = (const void **)(v4 + 32);
        if (!std::less<std::pair<std::string,unsigned long long>>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32)))break; {
        uint64_t v4 = *v8;
        }
        unint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!std::less<std::pair<std::string,unsigned long long>>::operator()[abi:ne180100](v7, v9, a3)) {
        break;
      }
      unint64_t v5 = v8 + 1;
      uint64_t v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    unint64_t v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

BOOL std::less<std::pair<std::string,unsigned long long>>::operator()[abi:ne180100](uint64_t a1, const void **a2, const void **a3)
{
  int v5 = *((char *)a3 + 23);
  int v6 = *((char *)a2 + 23);
  if (v6 >= 0) {
    size_t v7 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v7 = (size_t)a2[1];
  }
  if (v6 >= 0) {
    unint64_t v8 = a2;
  }
  else {
    unint64_t v8 = *a2;
  }
  if (v5 >= 0) {
    size_t v9 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v9 = (size_t)a3[1];
  }
  if (v5 >= 0) {
    long long v10 = a3;
  }
  else {
    long long v10 = *a3;
  }
  if (v9 >= v7) {
    size_t v11 = v7;
  }
  else {
    size_t v11 = v9;
  }
  int v12 = memcmp(v8, v10, v11);
  BOOL v13 = v7 < v9;
  if (v12) {
    BOOL v13 = v12 < 0;
  }
  if (v13) {
    return 1;
  }
  int v15 = memcmp(v10, v8, v11);
  BOOL v16 = v9 < v7;
  if (v15) {
    BOOL v16 = v15 < 0;
  }
  return !v16 && a2[3] < a3[3];
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::pair<std::string,unsigned long long>,std::vector<CLMiLoServiceTable::Entry>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,unsigned long long>,std::vector<CLMiLoServiceTable::Entry>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  BOOL v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::pair<std::string,unsigned long long> const,std::vector<CLMiLoServiceTable::Entry>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t std::vector<CLMiLoServiceTable::Entry>::__emplace_back_slow_path<CLMiLoServiceTable::Entry const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x2E8BA2E8BA2E8BALL) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  if (0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 3)) >= 0x1745D1745D1745DLL) {
    unint64_t v6 = 0x2E8BA2E8BA2E8BALL;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v14 = a1 + 2;
  if (v6) {
    size_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMiLoServiceTable::Entry>>((uint64_t)(a1 + 2), v6);
  }
  else {
    size_t v7 = 0;
  }
  long long v10 = v7;
  size_t v11 = &v7[88 * v3];
  BOOL v13 = &v7[88 * v6];
  std::allocator<CLMiLoServiceTable::Entry>::construct[abi:ne180100]<CLMiLoServiceTable::Entry,CLMiLoServiceTable::Entry const&>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  int v12 = v11 + 88;
  std::vector<CLMiLoServiceTable::Entry>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<CLMiLoServiceTable::Entry>::~__split_buffer(&v10);
  return v8;
}

void sub_2563B3764(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMiLoServiceTable::Entry>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CLMiLoServiceTable::Entry *&,CLMiLoServiceTable::Entry *&>(long long **a1, uint64_t *a2)
{
  BOOL v2 = *a1;
  uint64_t v3 = *a2;
  long long v16 = **a1;
  long long v17 = (*a1)[1];
  uint64_t v4 = *((void *)*a1 + 4);
  *(void *)int v15 = *((void *)*a1 + 5);
  *(void *)&v15[7] = *(void *)((char *)*a1 + 47);
  char v5 = *((unsigned char *)*a1 + 55);
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 6) = 0;
  *((void *)v2 + 4) = 0;
  uint64_t v6 = *((void *)v2 + 7);
  uint64_t v8 = v2 + 4;
  uint64_t v7 = *((void *)v2 + 8);
  *(void *)&v14[7] = *(void *)((char *)v2 + 79);
  *(void *)uint64_t v14 = *((void *)v2 + 9);
  char v9 = *((unsigned char *)v2 + 87);
  *((void *)v2 + 8) = 0;
  *((void *)v2 + 9) = 0;
  *((void *)v2 + 10) = 0;
  long long v10 = *(_OWORD *)(v3 + 16);
  *BOOL v2 = *(_OWORD *)v3;
  v2[1] = v10;
  long long v11 = *(_OWORD *)(v3 + 32);
  *((void *)v2 + 6) = *(void *)(v3 + 48);
  void v2[2] = v11;
  *(unsigned char *)(v3 + 55) = 0;
  *(unsigned char *)(v3 + 32) = 0;
  *((void *)v2 + 7) = *(void *)(v3 + 56);
  if (*((char *)v2 + 87) < 0) {
    operator delete(*(void **)v8);
  }
  long long v12 = *(_OWORD *)(v3 + 64);
  *((void *)v8 + 2) = *(void *)(v3 + 80);
  _OWORD *v8 = v12;
  *(unsigned char *)(v3 + 87) = 0;
  *(unsigned char *)(v3 + 64) = 0;
  *(_OWORD *)uint64_t v3 = v16;
  *(_OWORD *)(v3 + 16) = v17;
  if (*(char *)(v3 + 55) < 0)
  {
    operator delete(*(void **)(v3 + 32));
    int v13 = *(char *)(v3 + 87);
    *(void *)(v3 + 32) = v4;
    *(void *)(v3 + 40) = *(void *)v15;
    *(void *)(v3 + 47) = *(void *)&v15[7];
    *(unsigned char *)(v3 + 55) = v5;
    *(void *)(v3 + 56) = v6;
    if (v13 < 0) {
      operator delete(*(void **)(v3 + 64));
    }
  }
  else
  {
    *(void *)(v3 + 32) = v4;
    *(void *)(v3 + 40) = *(void *)v15;
    *(void *)(v3 + 47) = *(void *)&v15[7];
    *(unsigned char *)(v3 + 55) = v5;
    *(void *)(v3 + 56) = v6;
  }
  *(void *)(v3 + 64) = v7;
  *(void *)(v3 + 72) = *(void *)v14;
  *(void *)(v3 + 79) = *(void *)&v14[7];
  *(unsigned char *)(v3 + 87) = v9;
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[ULServiceStore deleteOldestsServicesPerClientAboveMaxCount]::$_0 &,CLMiLoServiceTable::Entry *>(double *a1, double *a2, uint64_t a3)
{
  char v9 = a1;
  uint64_t v7 = a3;
  uint64_t v8 = a2;
  double v3 = a2[3];
  double v4 = *(double *)(a3 + 24);
  if (v3 < a1[3])
  {
    char v5 = &v9;
    if (v4 >= v3)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CLMiLoServiceTable::Entry *&,CLMiLoServiceTable::Entry *&>((long long **)&v9, (uint64_t *)&v8);
      if (*(double *)(v7 + 24) >= v8[3]) {
        return;
      }
      char v5 = &v8;
    }
    uint64_t v6 = &v7;
    goto LABEL_9;
  }
  if (v4 < v3)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CLMiLoServiceTable::Entry *&,CLMiLoServiceTable::Entry *&>((long long **)&v8, &v7);
    if (v8[3] < v9[3])
    {
      char v5 = &v9;
      uint64_t v6 = (uint64_t *)&v8;
LABEL_9:
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CLMiLoServiceTable::Entry *&,CLMiLoServiceTable::Entry *&>((long long **)v5, v6);
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,-[ULServiceStore deleteOldestsServicesPerClientAboveMaxCount]::$_0 &,CLMiLoServiceTable::Entry *>(uint64_t a1, uint64_t a2)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v31 = a1;
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0x2E8BA2E8BA2E8BA3 * v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v30 = a2 - 88;
      if (*(double *)(a2 - 64) < *(double *)(a1 + 24))
      {
        uint64_t v6 = (long long **)&v31;
        uint64_t v7 = &v30;
        goto LABEL_4;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,[(ULServiceStore *)(double *)a1 deleteOldestsServicesPerClientAboveMaxCount];
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,[(ULServiceStore *)a1 deleteOldestsServicesPerClientAboveMaxCount];
      return 1;
    case 5:
      *(void *)&long long v36 = a1;
      long long v33 = (double *)(a1 + 264);
      *(void *)long long v34 = a1 + 88;
      *(void *)long long v35 = a1 + 176;
      uint64_t v32 = a2 - 88;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,[(ULServiceStore *)a1 deleteOldestsServicesPerClientAboveMaxCount];
      if (*(double *)(a2 - 64) < *(double *)(a1 + 288))
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CLMiLoServiceTable::Entry *&,CLMiLoServiceTable::Entry *&>((long long **)&v33, &v32);
        if (v33[3] < *(double *)(a1 + 200))
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CLMiLoServiceTable::Entry *&,CLMiLoServiceTable::Entry *&>((long long **)v35, (uint64_t *)&v33);
          if (*(double *)(*(void *)v35 + 24) < *(double *)(a1 + 112))
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CLMiLoServiceTable::Entry *&,CLMiLoServiceTable::Entry *&>((long long **)v34, (uint64_t *)v35);
            if (*(double *)(*(void *)v34 + 24) < *(double *)(a1 + 24))
            {
              uint64_t v6 = (long long **)&v36;
              uint64_t v7 = (uint64_t *)v34;
LABEL_4:
              std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CLMiLoServiceTable::Entry *&,CLMiLoServiceTable::Entry *&>(v6, v7);
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v8 = a1 + 176;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,[(ULServiceStore *)(double *)a1 deleteOldestsServicesPerClientAboveMaxCount];
      uint64_t v9 = a1 + 264;
      if (a1 + 264 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    double v12 = *(double *)(v9 + 24);
    if (v12 < *(double *)(v8 + 24))
    {
      long long v36 = *(_OWORD *)v9;
      uint64_t v37 = *(void *)(v9 + 16);
      uint64_t v27 = *(void *)(v9 + 32);
      *(void *)long long v35 = *(void *)(v9 + 40);
      *(void *)&v35[7] = *(void *)(v9 + 47);
      char v13 = *(unsigned char *)(v9 + 55);
      *(void *)(v9 + 40) = 0;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 32) = 0;
      uint64_t v14 = *(void *)(v9 + 56);
      char v15 = *(unsigned char *)(v9 + 64);
      long long v16 = *(_OWORD *)(v9 + 65);
      *(void *)&v34[14] = *(void *)(v9 + 79);
      *(_OWORD *)long long v34 = v16;
      char v28 = *(unsigned char *)(v9 + 87);
      char v29 = v15;
      *(void *)(v9 + 64) = 0;
      *(void *)(v9 + 72) = 0;
      uint64_t v17 = v10;
      *(void *)(v9 + 80) = 0;
      while (1)
      {
        uint64_t v18 = v17;
        uint64_t v19 = a1 + v17;
        id v20 = (_OWORD *)(a1 + v17 + 264);
        long long v21 = *(_OWORD *)(v19 + 192);
        _OWORD *v20 = *(_OWORD *)(v19 + 176);
        v20[1] = v21;
        uint64_t v22 = (void **)(v19 + 296);
        if (*(char *)(v19 + 319) < 0) {
          operator delete(*v22);
        }
        *(_OWORD *)uint64_t v22 = *(_OWORD *)(v19 + 208);
        *(void *)(v19 + 312) = *(void *)(v19 + 224);
        *(unsigned char *)(v19 + 23CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0;
        *(unsigned char *)(v19 + 208) = 0;
        *(void *)(v19 + 320) = *(void *)(v19 + 232);
        uint64_t v23 = v19 + 328;
        if (*(char *)(v19 + 351) < 0) {
          operator delete(*(void **)v23);
        }
        uint64_t v24 = a1 + v18;
        *(_OWORD *)uint64_t v23 = *(_OWORD *)(a1 + v18 + 240);
        *(void *)(v23 + 16) = *(void *)(a1 + v18 + 256);
        *(unsigned char *)(v24 + 263) = 0;
        *(unsigned char *)(v24 + 240) = 0;
        if (v18 == -176) {
          break;
        }
        uint64_t v17 = v18 - 88;
        if (v12 >= *(double *)(v24 + 112))
        {
          uint64_t v25 = a1 + v17 + 264;
          goto LABEL_17;
        }
      }
      uint64_t v25 = a1;
LABEL_17:
      *(_OWORD *)uint64_t v25 = v36;
      *(void *)(v25 + 16) = v37;
      *(double *)(v25 + 24) = v12;
      if (*(char *)(v25 + 55) < 0) {
        operator delete(*(void **)(v24 + 208));
      }
      *(void *)(v24 + 208) = v27;
      uint64_t v26 = a1 + v18;
      *(void *)(v26 + 216) = *(void *)v35;
      *(void *)(v26 + 223) = *(void *)&v35[7];
      *(unsigned char *)(v24 + 23CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v13;
      *(void *)(v25 + 56) = v14;
      if (*(char *)(v25 + 87) < 0) {
        operator delete(*(void **)(v24 + 240));
      }
      *(unsigned char *)(v24 + 240) = v29;
      *(_OWORD *)(v26 + 24CLMicroLocationLogic::startOdometryMonitoring(this - 1) = *(_OWORD *)v34;
      *(void *)(v26 + 255) = *(void *)&v34[14];
      *(unsigned char *)(v24 + 263) = v28;
      if (++v11 == 8) {
        return v9 + 88 == a2;
      }
    }
    uint64_t v8 = v9;
    v10 += 88;
    v9 += 88;
    if (v9 == a2) {
      return 1;
    }
  }
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[ULServiceStore deleteOldestsServicesPerClientAboveMaxCount]::$_0 &,CLMiLoServiceTable::Entry *>(uint64_t a1, double *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = a2;
  int v11 = (long long *)a1;
  uint64_t v8 = a4;
  uint64_t v9 = (double *)a3;
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,[(ULServiceStore *)(double *)a1 deleteOldestsServicesPerClientAboveMaxCount];
  if (*(double *)(a4 + 24) < *(double *)(a3 + 24))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CLMiLoServiceTable::Entry *&,CLMiLoServiceTable::Entry *&>((long long **)&v9, &v8);
    if (v9[3] < a2[3])
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CLMiLoServiceTable::Entry *&,CLMiLoServiceTable::Entry *&>((long long **)&v10, (uint64_t *)&v9);
      if (v10[3] < *(double *)(a1 + 24)) {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CLMiLoServiceTable::Entry *&,CLMiLoServiceTable::Entry *&>(&v11, (uint64_t *)&v10);
      }
    }
  }
}

void CLMicroLocationTimeUtils::getTimeDeltaDaysAgo(CLMicroLocationTimeUtils *this, NSDate *a2)
{
  int v2 = (int)a2;
  double v3 = this;
  if (v2 >= 1)
  {
    CLMicroLocationTimeUtils::getTimeDeltaDaysAgo(&v7);

    abort_report_np();
    __break(1u);
  }
  else
  {
    uint64_t v4 = [MEMORY[0x263EFF8F0] currentCalendar];
    id v5 = objc_alloc_init(MEMORY[0x263EFF918]);
    [v5 setDay:v2];
    uint64_t v6 = [v4 dateByAddingComponents:v5 toDate:v3 options:0];
    MEMORY[0x25A2A5B80]();
  }
}

void sub_2563B516C(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_38()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

void CLMicroLocationLocalizationController::LocalizationRequest::LocalizationRequest(CLMicroLocationLocalizationController::LocalizationRequest *this, const CLMicroLocationProto::RecordingEvent *a2, uuid a3)
{
  uint64_t v3 = *(void *)&a3.var0[8];
  uint64_t v4 = *(void *)a3.var0;
  uint64_t v5 = CLMicroLocationProto::RecordingEvent::RecordingEvent(this, a2);
  *(_OWORD *)(v5 + 160) = 0u;
  *(void *)(v5 + 144) = v4;
  *(void *)(v5 + 152) = v3;
  *(_OWORD *)(v5 + 176) = 0u;
  *(void *)(v5 + 192) = 0;
  *(CFAbsoluteTime *)(v5 + 160) = cl::chrono::CFAbsoluteTimeClock::now();
  operator new();
}

void sub_2563B57A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x25A2A6340](v17, 0x1012C4092066FB6);
  uint64_t v19 = (void *)*((void *)v15 + 22);
  if (v19)
  {
    *((void *)v15 + 23) = v19;
    operator delete(v19);
  }
  std::unique_ptr<CLMicroLocationTimeUtils::TimeProfile>::reset[abi:ne180100](v16, 0);
  CLMicroLocationProto::RecordingEvent::~RecordingEvent(v15);
  _Unwind_Resume(a1);
}

CLMicroLocationTimeUtils::TimeProfile *std::unique_ptr<CLMicroLocationTimeUtils::TimeProfile>::reset[abi:ne180100](CLMicroLocationTimeUtils::TimeProfile **a1, CLMicroLocationTimeUtils::TimeProfile *a2)
{
  BOOL result = *a1;
  *a1 = a2;
  if (result)
  {
    CLMicroLocationTimeUtils::TimeProfile::~TimeProfile(result);
    JUMPOUT(0x25A2A6340);
  }
  return result;
}

void CLMicroLocationLocalizationController::LocalizationRequest::~LocalizationRequest(CLMicroLocationLocalizationController::LocalizationRequest *this)
{
  int v2 = (void *)*((void *)this + 22);
  if (v2)
  {
    *((void *)this + 23) = v2;
    operator delete(v2);
  }
  std::unique_ptr<CLMicroLocationTimeUtils::TimeProfile>::reset[abi:ne180100]((CLMicroLocationTimeUtils::TimeProfile **)this + 21, 0);
  CLMicroLocationProto::RecordingEvent::~RecordingEvent(this);
}

void CLMicroLocationLocalizationController::LocalizationRequest::setConfidenceAndReasons(void *a1, uint64_t *a2, void *a3)
{
  v52[20] = *MEMORY[0x263EF8340];
  if (a2[1] - *a2 == a3[1] - *a3)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
    uint64_t v37 = *a2;
    uint64_t v38 = a2[1];
    if (v38 != *a2)
    {
      unint64_t v6 = 0;
      uint64_t v7 = (char **)(a1 + 22);
      char v8 = 1;
      do
      {
        if ((v8 & 1) == 0) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v49[6], (uint64_t)",", 1);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v49[6], (uint64_t)"ConfidenceLevel:", 16);
        uint64_t v9 = (void *)std::ostream::operator<<();
        uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ConfidenceReason:", 17);
        CLMicroLocationUtils::placeConfidenceReasonToString(*(_DWORD *)(*a3 + 4 * v6), &__p);
        if (SBYTE3(v44) >= 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        if (SBYTE3(v44) >= 0) {
          uint64_t v12 = BYTE3(v44);
        }
        else {
          uint64_t v12 = *(void *)v42;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)p_p, v12);
        if (SBYTE3(v44) < 0) {
          operator delete(__p);
        }
        uint64_t v13 = *(unsigned int *)(*a2 + 4 * v6);
        uint64_t v14 = *(unsigned int *)(*a3 + 4 * v6);
        long long v16 = (uint64_t *)a1[23];
        unint64_t v15 = a1[24];
        if ((unint64_t)v16 >= v15)
        {
          uint64_t v18 = ((char *)v16 - *v7) >> 3;
          if ((unint64_t)(v18 + 1) >> 61) {
            std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v19 = v15 - (void)*v7;
          uint64_t v20 = v19 >> 2;
          if (v19 >> 2 <= (unint64_t)(v18 + 1)) {
            uint64_t v20 = v18 + 1;
          }
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v20;
          }
          if (v21) {
            uint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>((uint64_t)(a1 + 24), v21);
          }
          else {
            uint64_t v22 = 0;
          }
          uint64_t v23 = &v22[8 * v18];
          *(void *)uint64_t v23 = v13 | (v14 << 32);
          uint64_t v17 = v23 + 8;
          uint64_t v25 = (char *)a1[22];
          uint64_t v24 = (char *)a1[23];
          if (v24 != v25)
          {
            do
            {
              uint64_t v26 = *((void *)v24 - 1);
              v24 -= 8;
              *((void *)v23 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v26;
              v23 -= 8;
            }
            while (v24 != v25);
            uint64_t v24 = *v7;
          }
          a1[22] = v23;
          a1[23] = v17;
          a1[24] = &v22[8 * v21];
          if (v24) {
            operator delete(v24);
          }
        }
        else
        {
          *long long v16 = v13 | (v14 << 32);
          uint64_t v17 = v16 + 1;
        }
        char v8 = 0;
        a1[23] = v17;
        ++v6;
      }
      while (v6 < (a2[1] - *a2) >> 2);
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_47);
    }
    uint64_t v27 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      char v28 = (char *)operator new(0x28uLL);
      *(void *)(v28 + 29) = 0;
      *(_OWORD *)char v28 = 0u;
      *((_OWORD *)v28 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)(a1 + 18), v28);
      if (v38 == v37)
      {
        std::string __p = (void *)68289538;
        *(_WORD *)__int16 v42 = 2082;
        *(void *)&v42[2] = "";
        __int16 v43 = 2082;
        uint64_t v44 = v28;
        __int16 v45 = 2082;
        unint64_t v46 = "";
        _os_log_impl(&dword_25631F000, v27, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"LocalizationRequest::setConfidenceAndReasons\", \"RequestID\":%{public, location:escape_only}s, \"Confidence Levels and Reasons\":%{public, location:escape_only}s}", (uint8_t *)&__p, 0x26u);
      }
      else
      {
        std::stringbuf::str();
        if (v40 >= 0) {
          char v29 = (const char *)&v39;
        }
        else {
          char v29 = (const char *)v39;
        }
        std::string __p = (void *)68289538;
        *(_WORD *)__int16 v42 = 2082;
        *(void *)&v42[2] = "";
        __int16 v43 = 2082;
        uint64_t v44 = v28;
        __int16 v45 = 2082;
        unint64_t v46 = v29;
        _os_log_impl(&dword_25631F000, v27, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"LocalizationRequest::setConfidenceAndReasons\", \"RequestID\":%{public, location:escape_only}s, \"Confidence Levels and Reasons\":%{public, location:escape_only}s}", (uint8_t *)&__p, 0x26u);
        if (v40 < 0) {
          operator delete(v39);
        }
      }
      operator delete(v28);
    }

    *(void *)long long buf = *MEMORY[0x263F8C2B8];
    uint64_t v36 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    *(void *)&buf[*(void *)(*(void *)buf - 24)] = *(void *)(MEMORY[0x263F8C2B8] + 64);
    *(void *)&v49[6] = v36;
    *(void *)&v49[14] = MEMORY[0x263F8C318] + 16;
    if (v51 < 0) {
      operator delete(v50);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x25A2A6280](v52);
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_47);
    }
    uint64_t v30 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      uint64_t v31 = (a2[1] - *a2) >> 2;
      uint64_t v32 = (uint64_t)(a3[1] - *a3) >> 2;
      *(_DWORD *)long long buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v48 = 2082;
      *(void *)unint64_t v49 = "";
      *(_WORD *)&v49[8] = 2050;
      *(void *)&v49[10] = v31;
      *(_WORD *)&v49[18] = 2050;
      *(void *)&v49[20] = v32;
      _os_log_impl(&dword_25631F000, v30, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"LocalizationRequest::setConfidenceAndReasons, invalid arguments\", \"confidenceLevelsSize\":%{public}lu, \"confidenceReasonsSize\":%{public}lu}", buf, 0x26u);
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_47);
    }
    long long v33 = logObject_MicroLocation_Default;
    if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
    {
      uint64_t v34 = (a2[1] - *a2) >> 2;
      uint64_t v35 = (uint64_t)(a3[1] - *a3) >> 2;
      *(_DWORD *)long long buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v48 = 2082;
      *(void *)unint64_t v49 = "";
      *(_WORD *)&v49[8] = 2050;
      *(void *)&v49[10] = v34;
      *(_WORD *)&v49[18] = 2050;
      *(void *)&v49[20] = v35;
      _os_signpost_emit_with_name_impl(&dword_25631F000, v33, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "LocalizationRequest::setConfidenceAndReasons, invalid arguments", "{\"msg%{public}.0s\":\"LocalizationRequest::setConfidenceAndReasons, invalid arguments\", \"confidenceLevelsSize\":%{public}lu, \"confidenceReasonsSize\":%{public}lu}", buf, 0x26u);
    }
  }
}

void sub_2563B5EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  operator delete(v25);

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a24);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationLocalizationController::LocalizationRequest::removeConfidenceReason(uint64_t result, int a2)
{
  uint64_t v3 = *(void **)(result + 176);
  int v2 = *(void **)(result + 184);
  if (v3 != v2)
  {
    for (uint64_t i = v3 + 1; *((_DWORD *)i - 1) != a2; ++i)
    {
      if (i == v2) {
        return result;
      }
    }
    unint64_t v6 = i - 1;
    if (i - 1 != v2 && i != v2)
    {
      do
      {
        if (*((_DWORD *)i + 1) != a2) {
          *v6++ = *i;
        }
        ++i;
      }
      while (i != v2);
      int v2 = *(void **)(result + 184);
    }
    if (v6 != v2) {
      *(void *)(result + 184) = v6;
    }
  }
  return result;
}

void CLMicroLocationLocalizationController::LocalizationRequest::finalizeTriggerConfidence(CLMicroLocationLocalizationController::LocalizationRequest *this)
{
  int v2 = (unsigned int *)*((void *)this + 22);
  uint64_t v3 = (unsigned int *)*((void *)this + 23);
  if (v2 == v3)
  {
    uint64_t v9 = 3;
  }
  else
  {
    uint64_t v4 = v2 + 2;
    if (v2 + 2 != v3)
    {
      signed int v5 = *v2;
      unint64_t v6 = v2 + 2;
      do
      {
        signed int v8 = *v6;
        v6 += 2;
        signed int v7 = v8;
        if (v8 > v5)
        {
          signed int v5 = v7;
          int v2 = v4;
        }
        uint64_t v4 = v6;
      }
      while (v6 != v3);
    }
    uint64_t v9 = *v2;
  }
  if ((CLMicroLocationProto::ConfidenceLevel_IsValid((CLMicroLocationProto *)v9) & 1) == 0) {
    CLMicroLocationLocalizationController::LocalizationRequest::finalizeTriggerConfidence();
  }
  *((_DWORD *)this + 35) |= 0x4000u;
  *((_DWORD *)this + 30) = v9;
  CLMicroLocationLocalizationController::LocalizationRequest::getConfidenceReasons(this, &v15);
  *((_DWORD *)this + 28) = 0;
  uint64_t v10 = v15;
  int v11 = v16;
  if (v15 != v16)
  {
    do
    {
      unsigned int v12 = *v10;
      if (!CLMicroLocationProto::ConfidenceReason_IsValid((CLMicroLocationProto *)*v10)) {
        __assert_rtn("add_confidencereasons", "microlocation.pb.h", 20721, "::CLMicroLocationProto::ConfidenceReason_IsValid(value)");
      }
      int v13 = *((_DWORD *)this + 28);
      if (v13 == *((_DWORD *)this + 29))
      {
        wireless_diagnostics::google::protobuf::RepeatedField<int>::Reserve((uint64_t)this + 104, v13 + 1);
        int v13 = *((_DWORD *)this + 28);
      }
      uint64_t v14 = *((void *)this + 13);
      *((_DWORD *)this + 28) = v13 + 1;
      *(_DWORD *)(v14 + 4 * v13) = v12;
      ++v10;
    }
    while (v10 != v11);
    uint64_t v10 = v15;
  }
  if (v10)
  {
    long long v16 = v10;
    operator delete(v10);
  }
}

void sub_2563B618C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CLMicroLocationLocalizationController::LocalizationRequest::getConfidenceReasons(CLMicroLocationLocalizationController::LocalizationRequest *this@<X0>, void *a2@<X8>)
{
  v7[0] = 0;
  v7[1] = 0;
  unint64_t v6 = (uint64_t *)v7;
  uint64_t v3 = *((void *)this + 22);
  uint64_t v4 = *((void *)this + 23);
  signed int v5 = (uint64_t *)v7;
  if (v3 != v4)
  {
    do
    {
      std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__emplace_unique_key_args<CLMicroLocationRecordingCompletionMetaInformation::RecordingError,CLMicroLocationRecordingCompletionMetaInformation::RecordingError>(&v6, (int *)(v3 + 4), (_DWORD *)(v3 + 4));
      v3 += 8;
    }
    while (v3 != v4);
    signed int v5 = v6;
  }
  std::vector<CLMicroLocationProto::ConfidenceReason>::vector<std::__tree_const_iterator<CLMicroLocationProto::ConfidenceReason,std::__tree_node<CLMicroLocationProto::ConfidenceReason,void *> *,long>,0>(a2, v5, v7);
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&v6, v7[0]);
}

void sub_2563B6234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

void CLMicroLocationLocalizationController::start(CLMicroLocationLocalizationController *this, const CLMicroLocationProto::RecordingEvent *a2, uuid a3)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  uuid v4 = a3;
  CLMicroLocationLocalizationController::LocalizationRequest::LocalizationRequest((CLMicroLocationLocalizationController::LocalizationRequest *)v3, a2, a3);
}

void sub_2563B63CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  operator delete(v16);

  CLMicroLocationLocalizationController::LocalizationRequest::~LocalizationRequest((CLMicroLocationLocalizationController::LocalizationRequest *)&a15);
  _Unwind_Resume(a1);
}

CLMicroLocationProto::Measurement *CLMicroLocationLocalizationController::update(CLMicroLocationProto::Measurement *result, uint64_t a2)
{
  if (*((void *)result + 8) != *((void *)result + 9)) {
    return std::vector<CLMiLoProtobufWrapper::Measurement>::__insert_with_size[abi:ne180100]<std::__wrap_iter<CLMiLoProtobufWrapper::Measurement const*>,std::__wrap_iter<CLMiLoProtobufWrapper::Measurement const*>>((uint64_t *)result + 5, *((CLMicroLocationProto::Measurement **)result + 6), *(CLMicroLocationProto::Measurement **)a2, *(void *)(a2 + 8), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  }
  return result;
}

uint64_t CLMicroLocationLocalizationController::doHaveValidMeasurements(CLMicroLocationLocalizationController *this, const CLMicroLocationLocalizationController::LocalizationRequest *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_47);
  }
  uuid v4 = logObject_MicroLocation_Default;
  BOOL v5 = os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG);
  if (v5)
  {
    int v6 = *((unsigned __int8 *)a2 + 77);
    int v7 = *((unsigned __int8 *)a2 + 76);
    *(_DWORD *)long long buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v17 = 2082;
    uint64_t v18 = "";
    __int16 v19 = 1026;
    int v20 = v6;
    __int16 v21 = 1026;
    int v22 = v7;
    _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"LocalizationController: ignored sensors\", \"isBleIgnore\":%{public}d, \"isNiIgnore\":%{public}d}", buf, 0x1Eu);
  }
  char DataTypeValidForLocalization = CLMicroLocationAlgorithms::getDataTypeValidForLocalization((CLMicroLocationAlgorithms *)v5);
  int v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  std::vector<CLMiLoProtobufWrapper::Measurement>::__init_with_size[abi:ne180100]<CLMiLoProtobufWrapper::Measurement*,CLMiLoProtobufWrapper::Measurement*>(&v13, *((void *)this + 5), *((void *)this + 6), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)this + 6) - *((void *)this + 5)) >> 3));
  uint64_t v9 = v13;
  uint64_t v10 = v14;
  while (1)
  {
    if (v9 == v10)
    {
      uint64_t v11 = 0;
      goto LABEL_20;
    }
    CLMicroLocationProto::Measurement::Measurement((CLMicroLocationProto::Measurement *)buf, v9);
    if (v23 != 6) {
      break;
    }
    CLMicroLocationProto::Measurement::~Measurement((CLMicroLocationProto::Measurement *)buf);
    if ((DataTypeValidForLocalization & 0x40) != 0) {
      goto LABEL_19;
    }
LABEL_16:
    uint64_t v9 = (const CLMicroLocationProto::Measurement *)((char *)v9 + 88);
  }
  if (v23 == 5)
  {
    if ((DataTypeValidForLocalization & 0x20) != 0) {
      goto LABEL_18;
    }
    goto LABEL_15;
  }
  if (v23 != 1 || (DataTypeValidForLocalization & 2) == 0)
  {
LABEL_15:
    CLMicroLocationProto::Measurement::~Measurement((CLMicroLocationProto::Measurement *)buf);
    goto LABEL_16;
  }
LABEL_18:
  CLMicroLocationProto::Measurement::~Measurement((CLMicroLocationProto::Measurement *)buf);
LABEL_19:
  uint64_t v11 = 1;
LABEL_20:
  *(void *)long long buf = &v13;
  std::vector<CLMiLoProtobufWrapper::Measurement>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  return v11;
}

void sub_2563B660C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void CLMicroLocationLocalizationController::localizationRequestResultsPerModelInternal(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = a2;
  v86[3] = *(void **)MEMORY[0x263EF8340];
  uint64_t v65 = a5;
  uint64_t v66 = a6;
  *(_DWORD *)(a4 + 24) = *(_DWORD *)(a2 + 16);
  if (a4 + 32 != a2 + 24) {
    std::vector<CLMicroLocationProto::ConfidenceLevel>::__assign_with_size[abi:ne180100]<CLMicroLocationProto::ConfidenceLevel*,CLMicroLocationProto::ConfidenceLevel*>((char *)(a4 + 32), *(char **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 2);
  }
  uint64_t v9 = *a3;
  __int16 v43 = a3[1];
  if (*a3 != v43)
  {
    __int16 v41 = (void *)(v8 + 152);
    uint64_t v44 = v8;
    do
    {
      if (*(_DWORD *)(*v9 + 4) == 1 && !*(unsigned char *)(*v9 + 488))
      {
        CLMicroLocationLocalizationController::localizationRequestResultsPerModelInternal();
        __break(1u);
      }
      std::string::basic_string[abi:ne180100]<0>(&v64, "");
      uint64_t v10 = *v9;
      if (*(_DWORD *)(*v9 + 4) == 2 && *(unsigned char *)(v10 + 192))
      {
        std::to_string((std::string *)&v67, (uint64_t)(*(void *)(v10 + 104) - *(void *)(v10 + 96)) >> 4);
        uint64_t v11 = SBYTE3(v70) >= 0 ? (const std::string::value_type *)&v67 : (const std::string::value_type *)v67;
        std::string::size_type v12 = SBYTE3(v70) >= 0 ? BYTE3(v70) : *(void *)v68;
        std::string::append(&v64, v11, v12);
        if (SBYTE3(v70) < 0) {
          operator delete((void *)v67);
        }
      }
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_47);
      }
      int v13 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = *v9;
        uint64_t v15 = operator new(0x28uLL);
        unint64_t v57 = (void **)v15;
        *(_OWORD *)unint64_t v58 = xmmword_256514540;
        _OWORD *v15 = 0u;
        v15[1] = 0u;
        *(void *)((char *)v15 + 29) = 0;
        boost::uuids::to_chars<char *>(v14 + 448, v15);
        if (SHIBYTE(v58[1]) >= 0) {
          long long v16 = (void **)&v57;
        }
        else {
          long long v16 = v57;
        }
        uint64_t v17 = *(unsigned int *)(*v9 + 4);
        if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v18 = &v64;
        }
        else {
          uint64_t v18 = (std::string *)v64.__r_.__value_.__r.__words[0];
        }
        std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(*v9 + 464, "", &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        uint64_t v20 = *v9;
        __int16 v21 = operator new(0x28uLL);
        v86[0] = v21;
        *(_OWORD *)&v86[1] = xmmword_256514540;
        _OWORD *v21 = 0u;
        v21[1] = 0u;
        *(void *)((char *)v21 + 29) = 0;
        boost::uuids::to_chars<char *>(v20 + 512, v21);
        int v22 = v86;
        if (SHIBYTE(v86[2]) < 0) {
          int v22 = (void **)v86[0];
        }
        int v23 = *(unsigned __int8 *)(*v9 + 640);
        uint64_t v67 = 68290563;
        *(_WORD *)unint64_t v68 = 2082;
        *(void *)&v68[2] = "";
        __int16 v69 = 2082;
        uint64_t v70 = v16;
        __int16 v71 = 2050;
        uint64_t v72 = v17;
        __int16 v73 = 2081;
        uint64_t v74 = v18;
        __int16 v75 = 2081;
        *(void *)double v76 = p_p;
        *(_WORD *)&v76[8] = 2082;
        *(void *)&v76[10] = v22;
        __int16 v77 = 1026;
        LODWORD(v78) = v23;
        _os_log_impl(&dword_25631F000, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"localizationRequestResultsPerModel\", \"ModelUUID\":%{public, location:escape_only}s, \"ModelType\":%{public}lu, \"SimilarityListLengthIfApplicable\":%{private, location:escape_only}s, \"ClientID\":%{private, location:escape_only}s, \"LoiGroupId\":%{public, location:escape_only}s, \"hasAnchorStatistics\":%{public}hhd}", (uint8_t *)&v67, 0x4Au);
        if (SHIBYTE(v86[2]) < 0) {
          operator delete(v86[0]);
        }
        uint64_t v8 = v44;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v58[1]) < 0) {
          operator delete(v57);
        }
      }

      unint64_t v57 = 0;
      *(_OWORD *)unint64_t v58 = 0uLL;
      int v59 = 3;
      char v63 = 0;
      v60[1] = 0;
      uint64_t v61 = 0;
      v60[0] = 0;
      LOBYTE(v62[0]) = 0;
      if (*(unsigned char *)(v8 + 240))
      {
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_47);
        }
        uint64_t v24 = (id)logObject_MicroLocation_Default;
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v25 = *(uint64_t **)(v8 + 64);
          if (v25)
          {
            uint64_t v26 = 0;
            uint64_t v27 = *(uint64_t **)(v8 + 64);
            do
            {
              if (*((_DWORD *)v27 + 6) == 1) {
                uint64_t v26 = (std::string *)((char *)v26 + 1);
              }
              uint64_t v27 = (uint64_t *)*v27;
            }
            while (v27);
            uint64_t v28 = 0;
            char v29 = *(uint64_t **)(v8 + 64);
            do
            {
              if (*((_DWORD *)v29 + 6) == 5) {
                ++v28;
              }
              char v29 = (uint64_t *)*v29;
            }
            while (v29);
            uint64_t v30 = 0;
            do
            {
              if (*((_DWORD *)v25 + 6) == 6) {
                ++v30;
              }
              uint64_t v25 = (uint64_t *)*v25;
            }
            while (v25);
          }
          else
          {
            uint64_t v28 = 0;
            uint64_t v26 = 0;
            uint64_t v30 = 0;
          }
          uint64_t v35 = (void **)*(unsigned int *)(*v9 + 4);
          uint64_t v36 = *(void *)(v8 + 72);
          LODWORD(__p.__r_.__value_.__l.__data_) = 1;
          uint64_t v37 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v41, (unsigned int *)&__p);
          if (v37) {
            double v38 = *((double *)v37 + 4) - *((double *)v37 + 3);
          }
          else {
            double v38 = 0.0;
          }
          double v39 = *(double *)(v44 + 200);
          int v40 = (int)*(double *)(v44 + 192);
          uint64_t v67 = 68291075;
          *(_WORD *)unint64_t v68 = 2082;
          *(void *)&v68[2] = "";
          __int16 v69 = 2049;
          uint64_t v70 = v35;
          __int16 v71 = 2049;
          uint64_t v72 = v36;
          __int16 v73 = 2049;
          uint64_t v74 = v26;
          __int16 v75 = 2049;
          *(void *)double v76 = v28;
          *(_WORD *)&v76[8] = 2049;
          *(void *)&v76[10] = v30;
          __int16 v77 = 2049;
          double v78 = v38;
          __int16 v79 = 1025;
          int v80 = v40;
          __int16 v81 = 1025;
          int v82 = (int)v39;
          _os_log_impl(&dword_25631F000, v24, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"testFingerprint\", \"ModelType\":%{private}lu, \"size\":%{private}lu, \"NumWiFiMeasurements\":%{private}lu, \"NumBLEMeasurements\":%{private}lu, \"NumUWBMeasurements\":%{private}lu, \"WiFi RSSI duration_s\":\"%{private}.09f\", \"start\":%{private}d, \"end\":%{private}d}", (uint8_t *)&v67, 0x5Au);
        }

        LOBYTE(v86[0]) = 0;
        LOBYTE(v86[2]) = 0;
        CLMicroLocationLocalizer::localize(a1, *v9);
      }
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_47);
      }
      uint64_t v31 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v32 = (void **)*(unsigned int *)(*v9 + 4);
        uint64_t v67 = 68289282;
        *(_WORD *)unint64_t v68 = 2082;
        *(void *)&v68[2] = "";
        __int16 v69 = 2050;
        uint64_t v70 = v32;
        _os_log_impl(&dword_25631F000, v31, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"LocalizationController test fingerprint was not created\", \"ModelType\":%{public}lu}", (uint8_t *)&v67, 0x1Cu);
      }
      unint64_t v53 = 0;
      uint64_t v54 = 0;
      unint64_t v52 = 0;
      std::vector<CLMicroLocationResultInternal>::__init_with_size[abi:ne180100]<CLMicroLocationResultInternal*,CLMicroLocationResultInternal*>(&v52, v57, (uint64_t)v58[0], ((char *)v58[0] - (char *)v57) >> 5);
      long long v50 = 0uLL;
      uint64_t v51 = 0;
      char isStable = CLMicroLocationModel::isStable((CLMicroLocationModel *)*v9);
      std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&v48, (long long *)(*v9 + 464));
      __p.__r_.__value_.__s.__data_[0] = 0;
      char v56 = 0;
      int v34 = *(_DWORD *)(a4 + 24);
      unint64_t v46 = 0;
      uint64_t v47 = 0;
      __int16 v45 = 0;
      std::vector<CLMicroLocationProto::ConfidenceReason>::__init_with_size[abi:ne180100]<CLMicroLocationProto::ConfidenceReason*,CLMicroLocationProto::ConfidenceReason*>(&v45, *(const void **)(a4 + 32), *(void *)(a4 + 40), (uint64_t)(*(void *)(a4 + 40) - *(void *)(a4 + 32)) >> 2);
      CLMicroLocationResultToPublish::CLMicroLocationResultToPublish((uint64_t)&v67, (uint64_t)&v52, &v50, isStable, (long long *)&v48, (uint64_t)&__p, v34, (uint64_t)&v45);
      std::vector<CLMiLoServiceManager::LocalizationResultsPerModel>::emplace_back<CLMicroLocationResultToPublish,boost::uuids::uuid &,std::optional<std::vector<CLMicroLocationResultInternal>> &>((uint64_t *)a4, (uint64_t)&v67, (long long *)(*v9 + 448), (uint64_t)v62);
      if (v84)
      {
        std::string v85 = v84;
        operator delete(v84);
      }
      if (v83) {
        std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::~__hash_table((uint64_t)&v82 + 2);
      }
      if ((_BYTE)v80 && SHIBYTE(v79) < 0) {
        operator delete(*(void **)&v76[6]);
      }
      if (v67)
      {
        *(void *)unint64_t v68 = v67;
        operator delete((void *)v67);
      }
      if (v45)
      {
        unint64_t v46 = v45;
        operator delete(v45);
      }
      if (v56) {
        std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::~__hash_table((uint64_t)&__p);
      }
      if (v49 && SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v48.__r_.__value_.__l.__data_);
      }
      if (v52)
      {
        unint64_t v53 = v52;
        operator delete(v52);
      }
      if (v63 && v62[0])
      {
        v62[1] = v62[0];
        operator delete(v62[0]);
      }
      if (v60[0])
      {
        v60[1] = v60[0];
        operator delete(v60[0]);
      }
      if (v57)
      {
        v58[0] = v57;
        operator delete(v57);
      }
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v64.__r_.__value_.__l.__data_);
      }
      v9 += 2;
    }
    while (v9 != v43);
  }
}

void sub_2563B71B0(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x22F]) < 0) {
    operator delete((void *)STACK[0x218]);
  }
  _Unwind_Resume(a1);
}

void std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(uint64_t a1@<X0>, char *a2@<X1>, std::string *a3@<X8>)
{
  if (*(unsigned char *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a3->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a3, a2);
  }
}

void *CLMicroLocationAnchorValueStatisticsMap::at@<X0>(CLMicroLocationAnchorValueStatisticsMap *this@<X0>, uuid *a2@<X1>, unsigned char *a3@<X8>)
{
  *a3 = 0;
  a3[40] = 0;
  BOOL result = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::find<boost::uuids::uuid>(this, a2);
  if (result) {
    return (void *)std::optional<std::unordered_map<std::string,AnchorValueStatistics>>::emplace[abi:ne180100]<std::unordered_map<std::string,AnchorValueStatistics> const&,void>((uint64_t)a3, (uint64_t)(result + 4));
  }
  return result;
}

void sub_2563B73D4(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 40)) {
    std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::~__hash_table(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<CLMiLoServiceManager::LocalizationResultsPerModel>::emplace_back<CLMicroLocationResultToPublish,boost::uuids::uuid &,std::optional<std::vector<CLMicroLocationResultInternal>> &>(uint64_t *a1, uint64_t a2, long long *a3, uint64_t a4)
{
  unint64_t v10 = a1[2];
  uint64_t v8 = (uint64_t)(a1 + 2);
  unint64_t v9 = v10;
  unint64_t v11 = *(void *)(v8 - 8);
  if (v11 >= v10)
  {
    unint64_t v13 = 0x84BDA12F684BDA13 * ((uint64_t)(v11 - *a1) >> 3);
    if (v13 + 1 > 0x12F684BDA12F684) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v14 = 0x84BDA12F684BDA13 * ((uint64_t)(v9 - *a1) >> 3);
    uint64_t v15 = 2 * v14;
    if (2 * v14 <= v13 + 1) {
      uint64_t v15 = v13 + 1;
    }
    if (v14 >= 0x97B425ED097B42) {
      unint64_t v16 = 0x12F684BDA12F684;
    }
    else {
      unint64_t v16 = v15;
    }
    uint64_t v23 = v8;
    if (v16) {
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMiLoServiceManager::LocalizationResultsPerModel>>(v8, v16);
    }
    else {
      uint64_t v17 = 0;
    }
    __int16 v19 = v17;
    uint64_t v20 = &v17[216 * v13];
    int v22 = &v17[216 * v16];
    CLMiLoServiceManager::LocalizationResultsPerModel::LocalizationResultsPerModel((uint64_t)v20, a2, a3, a4);
    __int16 v21 = v20 + 216;
    std::vector<CLMiLoServiceManager::LocalizationResultsPerModel>::__swap_out_circular_buffer(a1, &v19);
    uint64_t v12 = a1[1];
    std::__split_buffer<CLMiLoServiceManager::LocalizationResultsPerModel>::~__split_buffer(&v19);
  }
  else
  {
    CLMiLoServiceManager::LocalizationResultsPerModel::LocalizationResultsPerModel(*(void *)(v8 - 8), a2, a3, a4);
    uint64_t v12 = v11 + 216;
    a1[1] = v11 + 216;
  }
  a1[1] = v12;
  return v12 - 216;
}

void sub_2563B753C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMiLoServiceManager::LocalizationResultsPerModel>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationResultToPublish::~CLMicroLocationResultToPublish(CLMicroLocationResultToPublish *this)
{
  int v2 = (void *)*((void *)this + 18);
  if (v2)
  {
    *((void *)this + 19) = v2;
    operator delete(v2);
  }
  if (*((unsigned char *)this + 128)) {
    std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::~__hash_table((uint64_t)this + 88);
  }
  if (*((unsigned char *)this + 80) && *((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  uint64_t v3 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v3;
    operator delete(v3);
  }
}

void CLMicroLocationLocalizationController::sendLocalizationCoreAnalyticsEvent(uint64_t a1, _DWORD *a2, const void **a3, uint64_t a4, uint64_t a5, CLMicroLocationProtobufHelper *a6)
{
  unint64_t v11 = +[ULDefaultsSingleton shared];
  uint64_t v12 = [v11 defaultsDictionary];

  unint64_t v13 = [NSString stringWithUTF8String:"ULAnalyticsSendEventEnabled"];
  unint64_t v14 = [v12 objectForKey:v13];
  if (v14 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    int v15 = [v14 BOOLValue];
  }
  else {
    int v15 = [MEMORY[0x263EFFA88] BOOLValue];
  }
  int v16 = v15;

  if (v16)
  {
    uint64_t v18 = CLMicroLocationProtobufHelper::getRecordingTriggerString(a6, v17);
    __int16 v19 = *(uint64_t **)(a5 + 16);
    if (v19)
    {
      uint64_t v20 = 0;
      __int16 v21 = v19;
      do
      {
        if (*((_DWORD *)v21 + 6) == 1) {
          ++v20;
        }
        __int16 v21 = (uint64_t *)*v21;
      }
      while (v21);
      uint64_t v22 = 0;
      uint64_t v23 = v19;
      do
      {
        if (*((_DWORD *)v23 + 6) == 5) {
          ++v22;
        }
        uint64_t v23 = (uint64_t *)*v23;
      }
      while (v23);
      uint64_t v24 = 0;
      do
      {
        if (*((_DWORD *)v19 + 6) == 6) {
          ++v24;
        }
        __int16 v19 = (uint64_t *)*v19;
      }
      while (v19);
    }
    std::optional<std::vector<CLMicroLocationResultInternal>>::value_or[abi:ne180100]<std::vector<CLMicroLocationResultInternal> const&>(a4, a3, buf);
    uint64_t v26 = *(double **)buf;
    if (*(double **)buf == v33)
    {
      double v28 = 0.0;
    }
    else
    {
      double v27 = 0.0;
      do
      {
        double v28 = v26[2];
        if (*(_OWORD *)v26 == 0 || v28 <= v27) {
          double v28 = v27;
        }
        v26 += 4;
        double v27 = v28;
      }
      while (v26 != v33);
    }
    cl::chrono::CFAbsoluteTimeClock::now();
    if (*a2 == 4)
    {
      char v29 = [NSNumber numberWithDouble:v28];
    }
    else
    {
      char v29 = 0;
    }
    id v30 = v18;
    id v31 = v29;
    AnalyticsSendEventLazy();

    if (*(void *)buf)
    {
      long long v33 = *(double **)buf;
      operator delete(*(void **)buf);
    }
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_47);
    }
    uint64_t v25 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_25631F000, v25, OS_LOG_TYPE_DEFAULT, "CLMicroLocationLocalizationController, sendLocalizationCoreAnalyticsEvent, not sending event because sending to CoreAnalytics is disabled", buf, 2u);
    }
  }
}

void sub_2563B78FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

BOOL CLMicroLocationLocalizationController::calculateLocalizationResultsOnLastInputs(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  int v4 = *(unsigned __int8 *)(a1 + 488);
  if (*(unsigned char *)(a1 + 488))
  {
    uint64_t v7 = a1 + 88;
    int v8 = *(unsigned __int8 *)(a3 + 16);
    *(_OWORD *)a3 = *(_OWORD *)(a1 + 88);
    if (!v8) {
      *(unsigned char *)(a3 + 16) = 1;
    }
    unint64_t v9 = (std::__shared_weak_count *)a2[1];
    uint64_t v16 = *a2;
    uint64_t v17 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    unint64_t v13 = 0;
    unint64_t v14 = (void **)&v11;
    char v15 = 0;
    unint64_t v11 = (uint64_t *)operator new(0x10uLL);
    uint64_t v12 = v11;
    unint64_t v13 = v11 + 2;
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<CLMiLoService::ModelAndConf>>,std::shared_ptr<CLMiLoService::ModelAndConf> const*,std::shared_ptr<CLMiLoService::ModelAndConf> const*,std::shared_ptr<CLMiLoService::ModelAndConf>*>((uint64_t)&v13, &v16, &v18, v11);
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
    if (!*(unsigned char *)(a1 + 488)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    CLMicroLocationLocalizationController::localizationRequestResultsPerModelInternal(a1, v7, &v11, a4, 0, 0);
    unint64_t v14 = (void **)&v11;
    std::vector<std::shared_ptr<CLMiLoService::ModelAndConf>>::__destroy_vector::operator()[abi:ne180100](&v14);
  }
  return v4 != 0;
}

void sub_2563B7AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationLocalizationController::localizationRequestResultsPerModel(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  int HaveValidMeasurements = CLMicroLocationLocalizationController::doHaveValidMeasurements((CLMicroLocationLocalizationController *)a1, (const CLMicroLocationLocalizationController::LocalizationRequest *)a2);
  if ((HaveValidMeasurements & 1) == 0)
  {
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_47);
    }
    unint64_t v9 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_25631F000, v9, OS_LOG_TYPE_DEFAULT, "LocalizationController doesn't have any valid measurements to use, reporting empty results.", buf, 2u);
    }
  }
  CLMicroLocationFingerprintConfiguration::getLocalizingConfigurationFromSettings((uint64_t)v40);
  CLMicroLocationLocalizationController::LocalizationRequest::getConfidenceReasons((CLMicroLocationLocalizationController::LocalizationRequest *)a2, __p);
  CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)buf, (const CLMicroLocationProto::RecordingEvent *)a2);
  LOBYTE(v50) = 1;
  v58[0] = 0;
  v58[16] = 0;
  CLMicroLocationFingerprint::create(a1 + 40, (uint64_t)buf, (uint64_t)v58, v40, v59);
  if ((_BYTE)v50) {
    CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)buf);
  }
  if (v63) {
    int v10 = HaveValidMeasurements;
  }
  else {
    int v10 = 0;
  }
  if (v10 == 1)
  {
    int v11 = v60;
    std::vector<CLMicroLocationProto::ConfidenceLevel>::__assign_with_size[abi:ne180100]<CLMicroLocationProto::ConfidenceLevel*,CLMicroLocationProto::ConfidenceLevel*>((char *)__p, (char *)__src, v62, (v62 - (uint64_t)__src) >> 2);
  }
  else
  {
    uint64_t v12 = (char *)__p[1];
    if (__p[1] >= v39)
    {
      unint64_t v14 = (char *)__p[0];
      int64_t v15 = ((char *)__p[1] - (char *)__p[0]) >> 2;
      unint64_t v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 62) {
        std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v17 = v39 - (char *)__p[0];
      if ((v39 - (char *)__p[0]) >> 1 > v16) {
        unint64_t v16 = v17 >> 1;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        __int16 v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationProto::ConfidenceReason>>((uint64_t)&v39, v18);
        unint64_t v14 = (char *)__p[0];
        uint64_t v12 = (char *)__p[1];
      }
      else
      {
        __int16 v19 = 0;
      }
      uint64_t v20 = &v19[4 * v15];
      __int16 v21 = &v19[4 * v18];
      *(_DWORD *)uint64_t v20 = 3;
      unint64_t v13 = v20 + 4;
      while (v12 != v14)
      {
        int v22 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v20 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v22;
        v20 -= 4;
      }
      __p[0] = v20;
      __p[1] = v13;
      double v39 = v21;
      if (v14) {
        operator delete(v14);
      }
    }
    else
    {
      *(_DWORD *)__p[1] = 3;
      unint64_t v13 = v12 + 4;
    }
    int v11 = 0;
    __p[1] = v13;
  }
  std::__optional_destruct_base<CLMicroLocationLocalizationController::LocalizationInput,false>::reset[abi:ne180100](a1 + 88);
  long long v57 = 0u;
  memset(v56, 0, sizeof(v56));
  long long v54 = 0u;
  long long v55 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v43 = 0u;
  memset(buf, 0, sizeof(buf));
  CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)((char *)v56 + 8));
  BYTE8(v57) = 0;
  BYTE12(v57) = 0;
  std::optional<CLMicroLocationLocalizationController::LocalizationInput>::operator=[abi:ne180100]<CLMicroLocationLocalizationController::LocalizationInput,void>(a1 + 88, (uint64_t)buf);
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)((char *)v56 + 8));
  std::__optional_destruct_base<CLMicroLocationFingerprint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v44);
  if (*(void *)&buf[24])
  {
    *(void *)&long long v43 = *(void *)&buf[24];
    operator delete(*(void **)&buf[24]);
  }
  uint64_t v24 = (void *)(a1 + 112);
  uint64_t v23 = *(void **)(a1 + 112);
  *(_OWORD *)(a1 + CLMicroLocationSensorsLogic::stopOdometryMonitoringIfRunning(this + 88) = *(_OWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 104) = v11;
  if (v23)
  {
    *(void *)(a1 + 120) = v23;
    operator delete(v23);
    *uint64_t v24 = 0;
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 128) = 0;
  }
  *(_OWORD *)(a1 + 112) = *(_OWORD *)__p;
  *(void *)(a1 + 128) = v39;
  __p[1] = 0;
  double v39 = 0;
  __p[0] = 0;
  std::__optional_storage_base<CLMicroLocationFingerprint,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<CLMicroLocationFingerprint,false>>(a1 + 136, (uint64_t)v59);
  CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(a1 + 336), (const CLMicroLocationProto::RecordingEvent *)a2);
  if (*(unsigned char *)(a2 + 142))
  {
    uint64_t v26 = *(void *)(a2 + 128);
    if (!v26) {
      uint64_t v26 = *(void *)(CLMicroLocationProto::RecordingEvent::default_instance(v25) + 128);
    }
    double v27 = *(const CLMicroLocationProto::Measurement **)(a1 + 40);
    double v28 = *(const CLMicroLocationProto::Measurement **)(a1 + 48);
    if (v27 != v28)
    {
      char v29 = 0;
      uint64_t v30 = *(void *)(v26 + 8);
      float v31 = -3.4028e38;
      do
      {
        uint64_t v32 = (CLMicroLocationProto::Measurement *)CLMicroLocationProto::Measurement::Measurement((CLMicroLocationProto::Measurement *)buf, v27);
        if (v45 == 1 && (BYTE8(v45) & 4) != 0)
        {
          uint64_t v33 = *(void *)&buf[16];
          if (!*(void *)&buf[16])
          {
            uint64_t v32 = (CLMicroLocationProto::Measurement *)CLMicroLocationProto::Measurement::default_instance(v32);
            uint64_t v33 = *((void *)v32 + 2);
          }
          if (*(void *)(v33 + 24) == v30)
          {
            uint64_t v34 = *(void *)&buf[16];
            if (!*(void *)&buf[16]) {
              uint64_t v34 = *(void *)(CLMicroLocationProto::Measurement::default_instance(v32) + 16);
            }
            if (v31 < *(float *)(v34 + 20)) {
              float v31 = *(float *)(v34 + 20);
            }
            char v29 = 1;
          }
        }
        CLMicroLocationProto::Measurement::~Measurement((CLMicroLocationProto::Measurement *)buf);
        double v27 = (const CLMicroLocationProto::Measurement *)((char *)v27 + 88);
      }
      while (v27 != v28);
      if (v29)
      {
        if (onceToken_MicroLocation_Default != -1) {
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_47);
        }
        uint64_t v35 = logObject_MicroLocation_Default;
        if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 68289282;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = "";
          *(_WORD *)&unsigned char buf[18] = 2050;
          *(double *)&buf[20] = v31;
          _os_log_impl(&dword_25631F000, v35, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"LocalizationController, setting associated AP's RSSI based on scan data\", \"RSSI\":\"%{public}f\"}", buf, 0x1Cu);
        }
        CLMicroLocationProto::AssociatedAccessPointInfo::AssociatedAccessPointInfo((uint64_t)buf);
        *(float *)&uint8_t buf[16] = v31;
        *(_DWORD *)&buf[24] |= 3u;
        *(void *)&uint8_t buf[8] = v30;
        CLMicroLocationProto::AssociatedAccessPointInfo::AssociatedAccessPointInfo((CLMicroLocationProto::AssociatedAccessPointInfo *)v37, (const CLMicroLocationProto::AssociatedAccessPointInfo *)buf);
        std::optional<CLMicroLocationProto::AssociatedAccessPointInfo>::operator=[abi:ne180100]<CLMicroLocationProto::AssociatedAccessPointInfo&,void>((CLMicroLocationProto::AssociatedAccessPointInfo *)a1, (const CLMicroLocationProto::AssociatedAccessPointInfo *)v37);
        CLMicroLocationProto::AssociatedAccessPointInfo::~AssociatedAccessPointInfo((CLMicroLocationProto::AssociatedAccessPointInfo *)v37);
        CLMicroLocationProto::AssociatedAccessPointInfo::~AssociatedAccessPointInfo((CLMicroLocationProto::AssociatedAccessPointInfo *)buf);
      }
    }
  }
  if (!*(unsigned char *)(a1 + 488)) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  CLMicroLocationLocalizationController::localizationRequestResultsPerModelInternal(a1, a1 + 88, a3, a4, *(void *)(a2 + 160), 1);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a4 + 24);
  if (v24 != (void *)(a4 + 32)) {
    std::vector<CLMicroLocationProto::ConfidenceLevel>::__assign_with_size[abi:ne180100]<CLMicroLocationProto::ConfidenceLevel*,CLMicroLocationProto::ConfidenceLevel*>((char *)(a1 + 112), *(char **)(a4 + 32), *(void *)(a4 + 40), (uint64_t)(*(void *)(a4 + 40) - *(void *)(a4 + 32)) >> 2);
  }
  std::__optional_destruct_base<CLMicroLocationFingerprint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v59);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&v41);
}

void sub_2563B8020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void std::__optional_destruct_base<CLMicroLocationLocalizationController::LocalizationInput,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 400))
  {
    CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)(a1 + 248));
    std::__optional_destruct_base<CLMicroLocationFingerprint,false>::~__optional_destruct_base[abi:ne180100](a1 + 48);
    int v2 = *(void **)(a1 + 24);
    if (v2)
    {
      *(void *)(a1 + 32) = v2;
      operator delete(v2);
    }
    *(unsigned char *)(a1 + 400) = 0;
  }
}

uint64_t std::optional<CLMicroLocationLocalizationController::LocalizationInput>::operator=[abi:ne180100]<CLMicroLocationLocalizationController::LocalizationInput,void>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 400))
  {
    long long v4 = *(_OWORD *)a2;
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    *(_OWORD *)a1 = v4;
    std::vector<CLMicroLocationResultInternal>::__move_assign(a1 + 24, (__n128 *)(a2 + 24));
    std::__optional_storage_base<CLMicroLocationFingerprint,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<CLMicroLocationFingerprint,false>>(a1 + 48, a2 + 48);
    CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(a1 + 248), (const CLMicroLocationProto::RecordingEvent *)(a2 + 248));
    int v5 = *(_DWORD *)(a2 + 392);
    *(unsigned char *)(a1 + 396) = *(unsigned char *)(a2 + 396);
    *(_DWORD *)(a1 + 392) = v5;
  }
  else
  {
    std::__construct_at[abi:ne180100]<CLMicroLocationLocalizationController::LocalizationInput,CLMicroLocationLocalizationController::LocalizationInput,CLMicroLocationLocalizationController::LocalizationInput*>(a1, (long long *)a2);
    *(unsigned char *)(a1 + 400) = 1;
  }
  return a1;
}

void CLMicroLocationLocalizationController::LocalizationInput::~LocalizationInput(CLMicroLocationLocalizationController::LocalizationInput *this)
{
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationLocalizationController::LocalizationInput *)((char *)this + 248));
  std::__optional_destruct_base<CLMicroLocationFingerprint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 48);
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

void CLMicroLocationLocalizationController::stop(void *a1, void *a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v9 = a1[8];
  uint64_t v8 = a1[9];
  if (v9 != v8)
  {
    while (1)
    {
      *(_OWORD *)__int16 v21 = *(_OWORD *)(v9 + 144);
      if (*(void *)v21 == *a2 && *(void *)&v21[8] == a2[1]) {
        break;
      }
      v9 += 200;
      if (v9 == v8) {
        goto LABEL_16;
      }
    }
  }
  if (v9 == v8)
  {
LABEL_16:
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_47);
    }
    int64_t v15 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v16 = (char *)operator new(0x28uLL);
      *(void *)(v16 + 29) = 0;
      *(_OWORD *)unint64_t v16 = 0u;
      *((_OWORD *)v16 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)a2, v16);
      *(void *)__int16 v21 = 68289282;
      *(_WORD *)&void v21[8] = 2082;
      *(void *)&v21[10] = "";
      __int16 v22 = 2082;
      uint64_t v23 = v16;
      _os_log_impl(&dword_25631F000, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"LocalizationController, Requested stop for non-existent localization request\", \"Request ID\":%{public, location:escape_only}s}", v21, 0x1Cu);
      operator delete(v16);
    }
  }
  else
  {
    std::unique_ptr<CLMicroLocationTimeUtils::TimeProfile>::reset[abi:ne180100]((CLMicroLocationTimeUtils::TimeProfile **)(v9 + 168), 0);
    CLMicroLocationLocalizationController::LocalizationRequest::finalizeTriggerConfidence((CLMicroLocationLocalizationController::LocalizationRequest *)v9);
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_47);
    }
    int v11 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = (char *)operator new(0x28uLL);
      *(void *)(v12 + 29) = 0;
      *(_OWORD *)uint64_t v12 = 0u;
      *((_OWORD *)v12 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)a2, v12);
      *(void *)__int16 v21 = 68289282;
      *(_WORD *)&void v21[8] = 2082;
      *(void *)&v21[10] = "";
      __int16 v22 = 2082;
      uint64_t v23 = v12;
      _os_log_impl(&dword_25631F000, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"LocalizationController, Requested stop for localization request\", \"Request ID\":%{public, location:escape_only}s}", v21, 0x1Cu);
      operator delete(v12);
    }

    CLMicroLocationLocalizationController::localizationRequestResultsPerModel((uint64_t)a1, v9, a3, a4);
    uint64_t v14 = a1[5];
    for (uint64_t i = a1[6];
          i != v14;
    uint64_t v17 = a1[9];
    a1[6] = v14;
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,CLMicroLocationLocalizationController::LocalizationRequest *,CLMicroLocationLocalizationController::LocalizationRequest *,CLMicroLocationLocalizationController::LocalizationRequest *,0>(v9 + 200, v17, v9);
    uint64_t v19 = v18;
    for (uint64_t j = a1[9];
          j != v19;
    a1[9] = v19;
  }
}

void sub_2563B84E4(_Unwind_Exception *a1)
{
  operator delete(v2);

  _Unwind_Resume(a1);
}

void CLMicroLocationLocalizationController::setIgnoreBleRssiMeasurements(CLMicroLocationLocalizationController *this, const uuid *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 8);
  uint64_t v4 = *((void *)this + 9);
  if (v3 != v4)
  {
    while (1)
    {
      *(_OWORD *)uint64_t v8 = *(_OWORD *)(v3 + 144);
      if (*(void *)v8 == *(void *)a2->var0 && *(void *)&v8[8] == *(void *)&a2->var0[8]) {
        break;
      }
      v3 += 200;
      if (v3 == v4) {
        goto LABEL_10;
      }
    }
  }
  if (v3 == v4)
  {
LABEL_10:
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_47);
    }
    int v6 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = (char *)operator new(0x28uLL);
      *(void *)(v7 + 29) = 0;
      *(_OWORD *)uint64_t v7 = 0u;
      *((_OWORD *)v7 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)a2, v7);
      *(void *)uint64_t v8 = 68289282;
      *(_WORD *)&v8[8] = 2082;
      *(void *)&v8[10] = "";
      __int16 v9 = 2082;
      int v10 = v7;
      _os_log_impl(&dword_25631F000, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Requested set Ignore Ble Rssi Measurements for non-existent localization request\", \"Request ID\":%{public, location:escape_only}s}", v8, 0x1Cu);
      operator delete(v7);
    }
  }
  else
  {
    *(_DWORD *)(v3 + 140) |= 0x2000u;
    *(unsigned char *)(v3 + 77) = 1;
  }
}

void sub_2563B8694(_Unwind_Exception *a1)
{
  operator delete(v2);

  _Unwind_Resume(a1);
}

void CLMicroLocationLocalizationController::setIgnoreUwbRangeMeasurements(CLMicroLocationLocalizationController *this, const uuid *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 8);
  uint64_t v4 = *((void *)this + 9);
  if (v3 != v4)
  {
    while (1)
    {
      *(_OWORD *)uint64_t v8 = *(_OWORD *)(v3 + 144);
      if (*(void *)v8 == *(void *)a2->var0 && *(void *)&v8[8] == *(void *)&a2->var0[8]) {
        break;
      }
      v3 += 200;
      if (v3 == v4) {
        goto LABEL_10;
      }
    }
  }
  if (v3 == v4)
  {
LABEL_10:
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_47);
    }
    int v6 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = (char *)operator new(0x28uLL);
      *(void *)(v7 + 29) = 0;
      *(_OWORD *)uint64_t v7 = 0u;
      *((_OWORD *)v7 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)a2, v7);
      *(void *)uint64_t v8 = 68289282;
      *(_WORD *)&v8[8] = 2082;
      *(void *)&v8[10] = "";
      __int16 v9 = 2082;
      int v10 = v7;
      _os_log_impl(&dword_25631F000, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Requested set Ignore Uwb Range Measurements for non-existent localization request\", \"Request ID\":%{public, location:escape_only}s}", v8, 0x1Cu);
      operator delete(v7);
    }
  }
  else
  {
    *(_DWORD *)(v3 + 140) |= 0x800u;
    *(unsigned char *)(v3 + 76) = 1;
  }
}

void sub_2563B8834(_Unwind_Exception *a1)
{
  operator delete(v2);

  _Unwind_Resume(a1);
}

void CLMicroLocationLocalizationController::setConfidenceAndReasons(uint64_t a1, void *a2, uint64_t *a3, void *a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 72);
  if (v6 != v7)
  {
    while (1)
    {
      *(_OWORD *)unint64_t v13 = *(_OWORD *)(v6 + 144);
      if (*(void *)v13 == *a2 && *(void *)&v13[8] == a2[1]) {
        break;
      }
      v6 += 200;
      if (v6 == v7) {
        goto LABEL_13;
      }
    }
  }
  if (v6 == v7)
  {
LABEL_13:
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_47);
    }
    uint64_t v11 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = (char *)operator new(0x28uLL);
      *(void *)(v12 + 29) = 0;
      *(_OWORD *)uint64_t v12 = 0u;
      *((_OWORD *)v12 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)a2, v12);
      *(void *)unint64_t v13 = 68289282;
      *(_WORD *)&char v13[8] = 2082;
      *(void *)&v13[10] = "";
      __int16 v14 = 2082;
      int64_t v15 = v12;
      _os_log_impl(&dword_25631F000, v11, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"try to set confidence for non-existent localization request\", \"Request ID\":%{public, location:escape_only}s}", v13, 0x1Cu);
      operator delete(v12);
    }

    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_47);
    }
    __int16 v9 = (id)logObject_MicroLocation_Default;
    if (os_signpost_enabled(v9))
    {
      int v10 = (char *)operator new(0x28uLL);
      *(void *)(v10 + 29) = 0;
      *(_OWORD *)int v10 = 0u;
      *((_OWORD *)v10 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)a2, v10);
      *(void *)unint64_t v13 = 68289282;
      *(_WORD *)&char v13[8] = 2082;
      *(void *)&v13[10] = "";
      __int16 v14 = 2082;
      int64_t v15 = v10;
      _os_signpost_emit_with_name_impl(&dword_25631F000, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "try to set confidence for non-existent localization request", "{\"msg%{public}.0s\":\"try to set confidence for non-existent localization request\", \"Request ID\":%{public, location:escape_only}s}", v13, 0x1Cu);
      goto LABEL_21;
    }
  }
  else
  {
    CLMicroLocationLocalizationController::LocalizationRequest::setConfidenceAndReasons((void *)v6, a3, a4);
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_47);
    }
    __int16 v9 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = (char *)operator new(0x28uLL);
      *(void *)(v10 + 29) = 0;
      *(_OWORD *)int v10 = 0u;
      *((_OWORD *)v10 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)a2, v10);
      *(void *)unint64_t v13 = 68289282;
      *(_WORD *)&char v13[8] = 2082;
      *(void *)&v13[10] = "";
      __int16 v14 = 2082;
      int64_t v15 = v10;
      _os_log_impl(&dword_25631F000, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"setting confidence in current Localization\", \"Request ID\":%{public, location:escape_only}s}", v13, 0x1Cu);
LABEL_21:
      operator delete(v10);
    }
  }
}

void sub_2563B8B60(_Unwind_Exception *a1)
{
  operator delete(v2);

  _Unwind_Resume(a1);
}

void CLMicroLocationLocalizationController::invalidateCachedLocalizationInput(CLMicroLocationLocalizationController *this)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t v1 = (char *)this + 88;
  std::__optional_destruct_base<CLMicroLocationLocalizationController::LocalizationInput,false>::reset[abi:ne180100]((uint64_t)this + 88);
  std::__optional_destruct_base<CLMicroLocationLocalizationController::LocalizationInput,false>::reset[abi:ne180100]((uint64_t)v1);
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_47);
  }
  int v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 68289026;
    v3[1] = 0;
    __int16 v4 = 2082;
    int v5 = "";
    _os_log_impl(&dword_25631F000, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationLocalizationController, invalidateCache\"}", (uint8_t *)v3, 0x12u);
  }
}

void CLMicroLocationLocalizationController::onStopMotion(CLMicroLocationLocalizationController *this, uuid *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 8);
  uint64_t v4 = *((void *)this + 9);
  if (v3 != v4)
  {
    while (1)
    {
      *(_OWORD *)int v10 = *(_OWORD *)(v3 + 144);
      if (*(void *)v10 == *(void *)a2->var0 && *(void *)&v10[8] == *(void *)&a2->var0[8]) {
        break;
      }
      v3 += 200;
      if (v3 == v4) {
        goto LABEL_12;
      }
    }
  }
  if (v3 == v4)
  {
LABEL_12:
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_47);
    }
    uint64_t v6 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = (char *)operator new(0x28uLL);
      *(void *)(v7 + 29) = 0;
      *(_OWORD *)uint64_t v7 = 0u;
      *((_OWORD *)v7 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)a2, v7);
      *(void *)int v10 = 68289282;
      *(_WORD *)&char v10[8] = 2082;
      *(void *)&v10[10] = "";
      __int16 v11 = 2082;
      uint64_t v12 = v7;
      _os_log_impl(&dword_25631F000, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Requested to remove confidence reason for motion for non-existent localization request\", \"Request ID\":%{public, location:escape_only}s}", v10, 0x1Cu);
      operator delete(v7);
    }

    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_47);
    }
    uint64_t v8 = (id)logObject_MicroLocation_Default;
    if (os_signpost_enabled(v8))
    {
      __int16 v9 = (char *)operator new(0x28uLL);
      *(void *)(v9 + 29) = 0;
      *(_OWORD *)__int16 v9 = 0u;
      *((_OWORD *)v9 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)a2, v9);
      *(void *)int v10 = 68289282;
      *(_WORD *)&char v10[8] = 2082;
      *(void *)&v10[10] = "";
      __int16 v11 = 2082;
      uint64_t v12 = v9;
      _os_signpost_emit_with_name_impl(&dword_25631F000, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Requested to remove confidence reason for motion for non-existent localization request", "{\"msg%{public}.0s\":\"Requested to remove confidence reason for motion for non-existent localization request\", \"Request ID\":%{public, location:escape_only}s}", v10, 0x1Cu);
      operator delete(v9);
    }
  }
  else
  {
    CLMicroLocationLocalizationController::removeConfidenceReason((uint64_t)this, a2, 1u);
  }
}

void sub_2563B8F14(_Unwind_Exception *a1)
{
  operator delete(v2);

  _Unwind_Resume(a1);
}

void CLMicroLocationLocalizationController::removeConfidenceReason(uint64_t a1, void *a2, unsigned int a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 72);
  if (v6 != v7)
  {
    while (1)
    {
      *(_OWORD *)int64_t v15 = *(_OWORD *)(v6 + 144);
      if (*(void *)v15 == *a2 && *(void *)&v15[8] == a2[1]) {
        break;
      }
      v6 += 200;
      if (v6 == v7) {
        goto LABEL_13;
      }
    }
  }
  if (v6 == v7)
  {
LABEL_13:
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_47);
    }
    uint64_t v12 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = (char *)operator new(0x28uLL);
      *(void *)(v13 + 29) = 0;
      *(_OWORD *)uint64_t v13 = 0u;
      *((_OWORD *)v13 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)a2, v13);
      *(void *)int64_t v15 = 68289282;
      *(_WORD *)&v15[8] = 2082;
      *(void *)&v15[10] = "";
      __int16 v16 = 2082;
      uint64_t v17 = v13;
      _os_log_impl(&dword_25631F000, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Requested remove confidence reason for non-existent localization request\", \"Request ID\":%{public, location:escape_only}s}", v15, 0x1Cu);
      operator delete(v13);
    }

    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_47);
    }
    __int16 v9 = (id)logObject_MicroLocation_Default;
    if (os_signpost_enabled(v9))
    {
      __int16 v14 = (char *)operator new(0x28uLL);
      *(void *)(v14 + 29) = 0;
      *(_OWORD *)__int16 v14 = 0u;
      *((_OWORD *)v14 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)a2, v14);
      *(void *)int64_t v15 = 68289282;
      *(_WORD *)&v15[8] = 2082;
      *(void *)&v15[10] = "";
      __int16 v16 = 2082;
      uint64_t v17 = v14;
      _os_signpost_emit_with_name_impl(&dword_25631F000, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Requested remove confidence reason for non-existent localization request", "{\"msg%{public}.0s\":\"Requested remove confidence reason for non-existent localization request\", \"Request ID\":%{public, location:escape_only}s}", v15, 0x1Cu);
      __int16 v11 = v14;
      goto LABEL_21;
    }
  }
  else
  {
    CLMicroLocationLocalizationController::LocalizationRequest::removeConfidenceReason(v6, a3);
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_47);
    }
    __int16 v9 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = (char *)operator new(0x28uLL);
      *(void *)(v10 + 29) = 0;
      *(_OWORD *)int v10 = 0u;
      *((_OWORD *)v10 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)a2, v10);
      *(void *)int64_t v15 = 68289538;
      *(_WORD *)&v15[8] = 2082;
      *(void *)&v15[10] = "";
      __int16 v16 = 2082;
      uint64_t v17 = v10;
      __int16 v18 = 2050;
      uint64_t v19 = a3;
      _os_log_impl(&dword_25631F000, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"removing confidence reason\", \"Request ID\":%{public, location:escape_only}s, \"confidence reason\":%{public}lu}", v15, 0x26u);
      __int16 v11 = v10;
LABEL_21:
      operator delete(v11);
    }
  }
}

void sub_2563B9270(_Unwind_Exception *a1)
{
  operator delete(v2);

  _Unwind_Resume(a1);
}

void *std::optional<std::vector<CLMicroLocationResultInternal>>::value_or[abi:ne180100]<std::vector<CLMicroLocationResultInternal> const&>@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, void *a3@<X8>)
{
  int v5 = *(unsigned __int8 *)(a1 + 24);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (v5)
  {
    uint64_t v6 = *(const void **)a1;
    uint64_t v7 = *(void *)(a1 + 8);
    unint64_t v8 = (v7 - *(void *)a1) >> 5;
  }
  else
  {
    uint64_t v7 = (uint64_t)a2[1];
    unint64_t v8 = (v7 - (uint64_t)*a2) >> 5;
    uint64_t v6 = *a2;
  }
  return std::vector<CLMicroLocationResultInternal>::__init_with_size[abi:ne180100]<CLMicroLocationResultInternal*,CLMicroLocationResultInternal*>(a3, v6, v7, v8);
}

id ___ZNK37CLMicroLocationLocalizationController34sendLocalizationCoreAnalyticsEventERKN13CLMiLoService12ModelAndConfERKNSt3__16vectorI29CLMicroLocationResultInternalNS4_9allocatorIS6_EEEERKNS4_8optionalIS9_EERK26CLMicroLocationFingerprintRKN20CLMicroLocationProto14RecordingEventERKNSC_INS4_6chrono10time_pointIN2cl6chrono19CFAbsoluteTimeClockENSN_8durationIeNS4_5ratioILl1ELl1EEEEEEEEE_block_invoke(uint64_t a1)
{
  int v2 = [MEMORY[0x263EFF9A0] dictionary];
  uint64_t v3 = [NSNumber numberWithUnsignedLong:*(void *)(a1 + 48)];
  [v2 setObject:v3 forKeyedSubscript:@"bleFingerprintSize"];

  if (*(void *)(a1 + 48) >= 0x19uLL) {
    uint64_t v4 = 25;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 48);
  }
  int v5 = [NSNumber numberWithUnsignedLong:v4];
  [v2 setObject:v5 forKeyedSubscript:@"bleFingerprintSizeBounded"];

  uint64_t v6 = [NSNumber numberWithUnsignedLong:*(void *)(a1 + 56)];
  [v2 setObject:v6 forKeyedSubscript:@"uwbFingerprintSize"];

  if (*(void *)(a1 + 56) >= 0x19uLL) {
    uint64_t v7 = 25;
  }
  else {
    uint64_t v7 = *(void *)(a1 + 56);
  }
  unint64_t v8 = [NSNumber numberWithUnsignedLong:v7];
  [v2 setObject:v8 forKeyedSubscript:@"uwbFingerprintSizeBounded"];

  __int16 v9 = [NSNumber numberWithDouble:*(double *)(a1 + 64)];
  [v2 setObject:v9 forKeyedSubscript:@"maxClusterProbability"];

  int v10 = *(uint64_t **)(a1 + 72);
  if (*((char *)v10 + 23) < 0) {
    int v10 = (uint64_t *)*v10;
  }
  __int16 v11 = [NSString stringWithUTF8String:v10];
  [v2 setObject:v11 forKeyedSubscript:@"modelType"];

  uint64_t v12 = [NSNumber numberWithDouble:*(double *)(a1 + 80)];
  [v2 setObject:v12 forKeyedSubscript:@"nullspaceClusterProbability"];

  uint64_t v13 = [NSNumber numberWithUnsignedLong:*(void *)(a1 + 88)];
  [v2 setObject:v13 forKeyedSubscript:@"wifiFingerprintSize"];

  if (*(void *)(a1 + 88) >= 0x64uLL) {
    uint64_t v14 = 100;
  }
  else {
    uint64_t v14 = *(void *)(a1 + 88);
  }
  int64_t v15 = [NSNumber numberWithUnsignedLong:v14];
  [v2 setObject:v15 forKeyedSubscript:@"wifiFingerprintSizeBounded"];

  [v2 setObject:*(void *)(a1 + 32) forKeyedSubscript:@"localizationTriggerEvent"];
  [v2 setObject:&unk_2704F18F0 forKeyedSubscript:@"localizationTriggerEventCount"];
  uint64_t v16 = *(void *)(a1 + 96);
  if (*(unsigned char *)(v16 + 8))
  {
    uint64_t v17 = [NSNumber numberWithDouble:*(double *)(a1 + 104) - *(double *)v16];
    [v2 setObject:v17 forKeyedSubscript:@"localizationRunTime"];
  }
  __int16 v18 = *(const std::string **)(a1 + 112);
  if (v18[1].__r_.__value_.__s.__data_[0])
  {
    uint64_t v19 = NSString;
    CLMicroLocationClientUtils::getClientIdFromClientIdAndServiceUuid(v18, &__p);
    uint64_t v20 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    __int16 v21 = [v19 stringWithUTF8String:v20];
    [v2 setObject:v21 forKeyedSubscript:@"clientId"];

    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v22 = *(void *)(a1 + 40);
  if (v22) {
    [v2 setObject:v22 forKeyedSubscript:@"roiProbability"];
  }
  uint64_t v23 = [NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 120) + 77)];
  [v2 setObject:v23 forKeyedSubscript:@"bleRssiSamplesIgnore"];

  uint64_t v24 = [NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 120) + 76)];
  [v2 setObject:v24 forKeyedSubscript:@"uwbRangeSamplesIgnore"];

  return v2;
}

void sub_2563B966C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationTimeUtils::TimeProfile::TimeProfile(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v3;
  *((void *)a2 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(double *)(a1 + 24) = CLCommonGetMachContinuousTime();
  return a1;
}

void sub_2563B9724(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_39()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

void *std::vector<CLMicroLocationProto::ConfidenceReason>::vector<std::__tree_const_iterator<CLMicroLocationProto::ConfidenceReason,std::__tree_node<CLMicroLocationProto::ConfidenceReason,void *> *,long>,0>(void *a1, void *a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 == a3)
  {
    unint64_t v4 = 0;
  }
  else
  {
    unint64_t v4 = 0;
    int v5 = a2;
    do
    {
      uint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          int v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      int v5 = v7;
    }
    while (v7 != a3);
  }
  std::vector<CLMicroLocationProto::ConfidenceReason>::__init_with_size[abi:ne180100]<std::__tree_const_iterator<CLMicroLocationProto::ConfidenceReason,std::__tree_node<CLMicroLocationProto::ConfidenceReason,void *> *,long>,std::__tree_const_iterator<CLMicroLocationProto::ConfidenceReason,std::__tree_node<CLMicroLocationProto::ConfidenceReason,void *> *,long>>(a1, a2, a3, v4);
  return a1;
}

void *std::vector<CLMicroLocationProto::ConfidenceReason>::__init_with_size[abi:ne180100]<std::__tree_const_iterator<CLMicroLocationProto::ConfidenceReason,std::__tree_node<CLMicroLocationProto::ConfidenceReason,void *> *,long>,std::__tree_const_iterator<CLMicroLocationProto::ConfidenceReason,std::__tree_node<CLMicroLocationProto::ConfidenceReason,void *> *,long>>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = (uint64_t)result;
    std::vector<CLMicroLocationProto::ConfidenceLevel>::__vallocate[abi:ne180100](result, a4);
    return (void *)std::vector<CLMicroLocationProto::ConfidenceReason>::__construct_at_end<std::__tree_const_iterator<CLMicroLocationProto::ConfidenceReason,std::__tree_node<CLMicroLocationProto::ConfidenceReason,void *> *,long>,std::__tree_const_iterator<CLMicroLocationProto::ConfidenceReason,std::__tree_node<CLMicroLocationProto::ConfidenceReason,void *> *,long>>(v6, a2, a3);
  }
  return result;
}

void sub_2563B9860(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<CLMicroLocationProto::ConfidenceReason>::__construct_at_end<std::__tree_const_iterator<CLMicroLocationProto::ConfidenceReason,std::__tree_node<CLMicroLocationProto::ConfidenceReason,void *> *,long>,std::__tree_const_iterator<CLMicroLocationProto::ConfidenceReason,std::__tree_node<CLMicroLocationProto::ConfidenceReason,void *> *,long>>(uint64_t result, void *a2, void *a3)
{
  long long v3 = *(_DWORD **)(result + 8);
  if (a2 != a3)
  {
    do
    {
      *long long v3 = *((_DWORD *)a2 + 7);
      unint64_t v4 = (void *)a2[1];
      if (v4)
      {
        do
        {
          int v5 = v4;
          unint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          int v5 = (void *)a2[2];
          BOOL v6 = *v5 == (void)a2;
          a2 = v5;
        }
        while (!v6);
      }
      ++v3;
      a2 = v5;
    }
    while (v5 != a3);
  }
  *(void *)(result + 8) = v3;
  return result;
}

__n128 std::__optional_storage_base<std::vector<CLMicroLocationResultInternal>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<CLMicroLocationResultInternal>,false>>(uint64_t a1, __n128 *a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(unsigned char *)(a1 + 24))
    {
      result.n128_u64[0] = std::vector<CLMicroLocationResultInternal>::__move_assign(a1, a2).n128_u64[0];
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    unint64_t v4 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v4;
      operator delete(v4);
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    __n128 result = *a2;
    *(__n128 *)a1 = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return result;
}

uint64_t std::optional<std::unordered_map<std::string,AnchorValueStatistics>>::emplace[abi:ne180100]<std::unordered_map<std::string,AnchorValueStatistics> const&,void>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 40))
  {
    a1 = std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::~__hash_table(a1);
    *(unsigned char *)(a1 + 40) = 0;
  }
  uint64_t result = std::unordered_map<std::string,AnchorValueStatistics>::unordered_map(a1, a2);
  *(unsigned char *)(result + 40) = 1;
  return result;
}

void std::__optional_storage_base<std::unordered_map<std::string,AnchorValueStatistics>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::unordered_map<std::string,AnchorValueStatistics>,false>>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40))
  {
    if (*(unsigned char *)(a1 + 40))
    {
      std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::__move_assign(a1, (uint64_t *)a2);
    }
  }
  else if (*(unsigned char *)(a1 + 40))
  {
    *(unsigned char *)(std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::~__hash_table(a1)
             + 40) = 0;
  }
  else
  {
    *(unsigned char *)(std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__hash_table(a1, (uint64_t *)a2)+ 40) = 1;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::clear(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  int v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  uint64_t v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 8) = v9;
  *(v7 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v1CLMicroLocationLogic::startOdometryMonitoring(this - 1) = a1 + 16;
    void *v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

uint64_t CLMicroLocationResultToPublish::CLMicroLocationResultToPublish(uint64_t a1, uint64_t a2, long long *a3, char a4, long long *a5, uint64_t a6, int a7, uint64_t a8)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  long long v11 = *a3;
  uint64_t v12 = *((void *)a3 + 2);
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = v12;
  *(_OWORD *)(a1 + 24) = v11;
  *(unsigned char *)(a1 + 48) = a4;
  *(unsigned char *)(a1 + 80) = 0;
  if (*((unsigned char *)a5 + 24))
  {
    long long v13 = *a5;
    *(void *)(a1 + 72) = *((void *)a5 + 2);
    *(_OWORD *)(a1 + 56) = v13;
    *((void *)a5 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0;
    *((void *)a5 + 2) = 0;
    *(void *)a5 = 0;
    *(unsigned char *)(a1 + 80) = 1;
  }
  *(unsigned char *)(a1 + CLMicroLocationSensorsLogic::stopOdometryMonitoringIfRunning(this + 88) = 0;
  uint64_t v14 = a1 + 88;
  *(unsigned char *)(a1 + 128) = 0;
  if (*(unsigned char *)(a6 + 40))
  {
    std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__hash_table(v14, (uint64_t *)a6);
    *(unsigned char *)(a1 + 128) = 1;
  }
  *(_DWORD *)(a1 + 136) = a7;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)a8;
  *(void *)(a1 + 160) = *(void *)(a8 + 16);
  *(void *)a8 = 0;
  *(void *)(a8 + 8) = 0;
  *(void *)(a8 + 16) = 0;
  return a1;
}

void std::__optional_storage_base<CLMicroLocationFingerprint,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<CLMicroLocationFingerprint,false>>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 192) == *(unsigned __int8 *)(a2 + 192))
  {
    if (*(unsigned char *)(a1 + 192))
    {
      std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__move_assign(a1, (uint64_t *)a2);
      long long v4 = *(_OWORD *)(a2 + 40);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(_OWORD *)(a1 + 40) = v4;
      std::__hash_table<CLMicroLocationProto::DataType,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,std::allocator<CLMicroLocationProto::DataType>>::__move_assign(a1 + 64, (uint64_t *)(a2 + 64));
      std::__hash_table<CLMicroLocationProto::DataType,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,std::allocator<CLMicroLocationProto::DataType>>::__move_assign(a1 + 104, (uint64_t *)(a2 + 104));
      long long v5 = *(_OWORD *)(a2 + 144);
      *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 144) = v5;
      std::vector<CLMicroLocationResultInternal>::__move_assign(a1 + 168, (__n128 *)(a2 + 168));
    }
  }
  else if (*(unsigned char *)(a1 + 192))
  {
    std::__optional_destruct_base<CLMicroLocationFingerprint,false>::reset[abi:ne180100](a1);
  }
  else
  {
    std::__construct_at[abi:ne180100]<CLMicroLocationFingerprint,CLMicroLocationFingerprint,CLMicroLocationFingerprint*>(a1, a2);
    *(unsigned char *)(a1 + 192) = 1;
  }
}

void std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::clear(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  long long v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  uint64_t v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 8) = v9;
  *(v7 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v1CLMicroLocationLogic::startOdometryMonitoring(this - 1) = a1 + 16;
    void *v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void std::__hash_table<CLMicroLocationProto::DataType,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,std::allocator<CLMicroLocationProto::DataType>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  std::__hash_table<boost::uuids::uuid,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,std::allocator<boost::uuids::uuid>>::clear((void *)a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  long long v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  uint64_t v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 8) = v9;
  *(v7 - CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v1CLMicroLocationLogic::startOdometryMonitoring(this - 1) = a1 + 16;
    void *v7 = 0;
    v7[1] = 0;
  }
}

uint64_t std::__construct_at[abi:ne180100]<CLMicroLocationFingerprint,CLMicroLocationFingerprint,CLMicroLocationFingerprint*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__hash_table(a1, (uint64_t *)a2);
  long long v5 = *(_OWORD *)(a2 + 40);
  *(void *)(v4 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(v4 + 40) = v5;
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__hash_table(v4 + 64, (uint64_t *)(a2 + 64));
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__hash_table(a1 + 104, (uint64_t *)(a2 + 104));
  long long v6 = *(_OWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v6;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  return a1;
}

CLMicroLocationProto::AssociatedAccessPointInfo *std::optional<CLMicroLocationProto::AssociatedAccessPointInfo>::operator=[abi:ne180100]<CLMicroLocationProto::AssociatedAccessPointInfo&,void>(CLMicroLocationProto::AssociatedAccessPointInfo *this, const CLMicroLocationProto::AssociatedAccessPointInfo *a2)
{
  if (*((unsigned char *)this + 32))
  {
    CLMicroLocationProto::AssociatedAccessPointInfo::CopyFrom(this, a2);
  }
  else
  {
    CLMicroLocationProto::AssociatedAccessPointInfo::AssociatedAccessPointInfo(this, a2);
    *((unsigned char *)this + 32) = 1;
  }
  return this;
}

void CLMicroLocationTimeUtils::TimeProfile::~TimeProfile(CLMicroLocationTimeUtils::TimeProfile *this)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  double MachContinuousTime = CLCommonGetMachContinuousTime();
  double v3 = *((double *)this + 3);
  if (onceToken_MicroLocation_Default != -1) {
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_47);
  }
  uint64_t v4 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
  {
    long long v5 = this;
    if (*((char *)this + 23) < 0) {
      long long v5 = *(CLMicroLocationTimeUtils::TimeProfile **)this;
    }
    v6[0] = 68289538;
    v6[1] = 0;
    __int16 v7 = 2082;
    uint64_t v8 = "";
    __int16 v9 = 2082;
    uint64_t v10 = v5;
    __int16 v11 = 2050;
    double v12 = MachContinuousTime - v3;
    _os_log_impl(&dword_25631F000, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"TimeProfile\", \"action\":%{public, location:escape_only}s, \"durationSecs\":\"%{public}f\"}", (uint8_t *)v6, 0x26u);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void sub_2563BA058(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

__n128 std::vector<CLMicroLocationLocalizationController::LocalizationRequest>::__construct_one_at_end[abi:ne180100]<CLMicroLocationLocalizationController::LocalizationRequest>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)v4, (const CLMicroLocationProto::RecordingEvent *)a2);
  long long v5 = *(_OWORD *)(a2 + 144);
  *(void *)(v4 + 160) = *(void *)(a2 + 160);
  *(_OWORD *)(v4 + 144) = v5;
  uint64_t v6 = *(void *)(a2 + 168);
  *(void *)(a2 + 168) = 0;
  *(void *)(v4 + 168) = v6;
  *(void *)(v4 + 176) = 0;
  *(void *)(v4 + 184) = 0;
  *(void *)(v4 + 192) = 0;
  __n128 result = *(__n128 *)(a2 + 176);
  *(__n128 *)(v4 + 176) = result;
  *(void *)(v4 + 192) = *(void *)(a2 + 192);
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  *(void *)(a2 + 192) = 0;
  *(void *)(a1 + 8) = v4 + 200;
  return result;
}

void sub_2563BA0DC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMicroLocationLocalizationController::LocalizationRequest>::__push_back_slow_path<CLMicroLocationLocalizationController::LocalizationRequest>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x8F5C28F5C28F5C29 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x147AE147AE147AELL) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x8F5C28F5C28F5C29 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xA3D70A3D70A3D7) {
    unint64_t v9 = 0x147AE147AE147AELL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v20 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationLocalizationController::LocalizationRequest>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v16 = v10;
  uint64_t v17 = (CLMicroLocationProto::RecordingEvent *)&v10[200 * v4];
  __int16 v18 = v17;
  uint64_t v19 = &v10[200 * v9];
  CLMicroLocationProto::RecordingEvent::RecordingEvent(v17, (const CLMicroLocationProto::RecordingEvent *)a2);
  __int16 v11 = v17;
  long long v12 = *(_OWORD *)(a2 + 144);
  *((void *)v17 + 20) = *(void *)(a2 + 160);
  *((_OWORD *)v11 + 9) = v12;
  uint64_t v13 = *(void *)(a2 + 168);
  *(void *)(a2 + 168) = 0;
  *((void *)v11 + 2CLMicroLocationLogic::startOdometryMonitoring(this - 1) = v13;
  *((void *)v11 + 22) = 0;
  *((void *)v11 + 23) = 0;
  *((void *)v11 + 24) = 0;
  *((_OWORD *)v11 + 1CLMicroLocationLogic::startOdometryMonitoring(this - 1) = *(_OWORD *)(a2 + 176);
  *((void *)v11 + 24) = *(void *)(a2 + 192);
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  *(void *)(a2 + 192) = 0;
  __int16 v18 = (CLMicroLocationProto::RecordingEvent *)((char *)v18 + 200);
  std::vector<CLMicroLocationLocalizationController::LocalizationRequest>::__swap_out_circular_buffer(a1, &v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<CLMicroLocationLocalizationController::LocalizationRequest>::~__split_buffer((uint64_t)&v16);
  return v14;
}

void sub_2563BA230(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMicroLocationLocalizationController::LocalizationRequest>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMicroLocationLocalizationController::LocalizationRequest>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationLocalizationController::LocalizationRequest>,std::reverse_iterator<CLMicroLocationLocalizationController::LocalizationRequest*>,std::reverse_iterator<CLMicroLocationLocalizationController::LocalizationRequest*>,std::reverse_iterator<CLMicroLocationLocalizationController::LocalizationRequest*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationLocalizationController::LocalizationRequest>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x147AE147AE147AFLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(200 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationLocalizationController::LocalizationRequest>,std::reverse_iterator<CLMicroLocationLocalizationController::LocalizationRequest*>,std::reverse_iterator<CLMicroLocationLocalizationController::LocalizationRequest*>,std::reverse_iterator<CLMicroLocationLocalizationController::LocalizationRequest*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = a7 + v11;
      uint64_t v13 = a3 + v11;
      CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)(a7 + v11 - 200), (const CLMicroLocationProto::RecordingEvent *)(a3 + v11 - 200));
      long long v14 = *(_OWORD *)(a3 + v11 - 56);
      *(void *)(v12 - 40) = *(void *)(a3 + v11 - 40);
      *(_OWORD *)(v12 - 56) = v14;
      uint64_t v15 = *(void *)(a3 + v11 - 32);
      *(void *)(v13 - 32) = 0;
      *(void *)(v12 - 32) = v15;
      *(void *)(v12 - 24) = 0;
      *(void *)(v12 - 16) = 0;
      *(void *)(v12 - 8) = 0;
      *(_OWORD *)(v12 - 24) = *(_OWORD *)(a3 + v11 - 24);
      *(void *)(v12 - 8) = *(void *)(a3 + v11 - 8);
      *(void *)(v13 - 24) = 0;
      *(void *)(v13 - 16) = 0;
      *(void *)(v13 - 8) = 0;
      v11 -= 200;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_2563BA3C0(_Unwind_Exception *exception_object)
{
  for (; v2; v2 += 200)
    CLMicroLocationLocalizationController::LocalizationRequest::~LocalizationRequest((CLMicroLocationLocalizationController::LocalizationRequest *)(v1 + v2));
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<CLMicroLocationLocalizationController::LocalizationRequest>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 200;
    CLMicroLocationLocalizationController::LocalizationRequest::~LocalizationRequest((CLMicroLocationLocalizationController::LocalizationRequest *)(i - 200));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

CLMicroLocationProto::Measurement *std::vector<CLMiLoProtobufWrapper::Measurement>::__insert_with_size[abi:ne180100]<std::__wrap_iter<CLMiLoProtobufWrapper::Measurement const*>,std::__wrap_iter<CLMiLoProtobufWrapper::Measurement const*>>(uint64_t *a1, CLMicroLocationProto::Measurement *a2, CLMicroLocationProto::Measurement *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v11 - v12) >> 3) >= a5)
    {
      uint64_t v20 = v12 - (void)a2;
      if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v12 - (void)a2) >> 3) >= a5)
      {
        __int16 v21 = (CLMicroLocationProto::Measurement *)((char *)a3 + 88 * a5);
      }
      else
      {
        __int16 v21 = (CLMicroLocationProto::Measurement *)((char *)a3 + 8 * ((uint64_t)(v12 - (void)a2) >> 3));
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMiLoProtobufWrapper::Measurement>,CLMiLoProtobufWrapper::Measurement const*,CLMiLoProtobufWrapper::Measurement const*,CLMiLoProtobufWrapper::Measurement*>(v9, (uint64_t)v21, a4, *(void *)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }
      std::vector<CLMiLoProtobufWrapper::Measurement>::__move_range((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)v5 + 88 * a5);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<CLMiLoProtobufWrapper::Measurement const*>,std::__wrap_iter<CLMiLoProtobufWrapper::Measurement const*>,CLMiLoProtobufWrapper::Measurement*,0>(v7, v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0x2E8BA2E8BA2E8BALL) {
        std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = 0x2E8BA2E8BA2E8BA3 * (((uint64_t)a2 - v13) >> 3);
      unint64_t v16 = 0x2E8BA2E8BA2E8BA3 * ((v10 - v13) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x1745D1745D1745DLL) {
        unint64_t v18 = 0x2E8BA2E8BA2E8BALL;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v29 = v9;
      if (v18) {
        uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMiLoServiceTable::Entry>>(v9, v18);
      }
      else {
        uint64_t v19 = 0;
      }
      uint64_t v22 = (CLMicroLocationProto::Measurement *)&v19[88 * v15];
      v26[0] = v19;
      v26[1] = v22;
      double v27 = v22;
      double v28 = &v19[88 * v18];
      uint64_t v23 = 88 * a5;
      uint64_t v24 = (CLMicroLocationProto::Measurement *)((char *)v22 + 88 * a5);
      do
      {
        CLMicroLocationProto::Measurement::Measurement(v22, v7);
        *((_DWORD *)v22 + 20) = *((_DWORD *)v7 + 20);
        uint64_t v22 = (CLMicroLocationProto::Measurement *)((char *)v22 + 88);
        uint64_t v7 = (CLMicroLocationProto::Measurement *)((char *)v7 + 88);
        v23 -= 88;
      }
      while (v23);
      double v27 = v24;
      uint64_t v5 = (CLMicroLocationProto::Measurement *)std::vector<CLMiLoProtobufWrapper::Measurement>::__swap_out_circular_buffer(a1, v26, (uint64_t)v5);
      std::__split_buffer<CLMiLoProtobufWrapper::Measurement>::~__split_buffer((uint64_t)v26);
    }
  }
  return v5;
}

void sub_2563BA614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<CLMiLoProtobufWrapper::Measurement>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = (CLMicroLocationProto::Measurement *)v6;
  if (v7 < a3)
  {
    uint64_t v10 = (const CLMicroLocationProto::Measurement *)(a2 + v6 - a4);
    uint64_t v8 = *(CLMicroLocationProto::Measurement **)(a1 + 8);
    do
    {
      CLMicroLocationProto::Measurement::Measurement(v8, v10);
      *((_DWORD *)v8 + 20) = *((_DWORD *)v10 + 20);
      uint64_t v10 = (const CLMicroLocationProto::Measurement *)((char *)v10 + 88);
      uint64_t v8 = (CLMicroLocationProto::Measurement *)((char *)v8 + 88);
    }
    while ((unint64_t)v10 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,CLMiLoProtobufWrapper::Measurement *,CLMiLoProtobufWrapper::Measurement *,CLMiLoProtobufWrapper::Measurement *,0>(a2, v7, v6);
}

void sub_2563BA6E4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMiLoProtobufWrapper::Measurement>::__swap_out_circular_buffer(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMiLoProtobufWrapper::Measurement>,std::reverse_iterator<CLMiLoProtobufWrapper::Measurement*>,std::reverse_iterator<CLMiLoProtobufWrapper::Measurement*>,std::reverse_iterator<CLMiLoProtobufWrapper::Measurement*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMiLoProtobufWrapper::Measurement>,CLMiLoProtobufWrapper::Measurement*,CLMiLoProtobufWrapper::Measurement*,CLMiLoProtobufWrapper::Measurement*>(v7, a3, a1[1], a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMiLoProtobufWrapper::Measurement>,CLMiLoProtobufWrapper::Measurement const*,CLMiLoProtobufWrapper::Measurement const*,CLMiLoProtobufWrapper::Measurement*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      *(_DWORD *)(CLMicroLocationProto::Measurement::Measurement((CLMicroLocationProto::Measurement *)(a4 + v7), (const CLMicroLocationProto::Measurement *)(a2 + v7))+ 80) = *(_DWORD *)(a2 + v7 + 80);
      v7 += 88;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_2563BA814(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 88;
    do
    {
      CLMicroLocationProto::Measurement::~Measurement((CLMicroLocationProto::Measurement *)(v4 + v2));
      v2 -= 88;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,CLMiLoProtobufWrapper::Measurement *,CLMiLoProtobufWrapper::Measurement *,CLMiLoProtobufWrapper::Measurement *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a1)
  {
    uint64_t v6 = a2;
    do
    {
      CLMicroLocationProto::Measurement::CopyFrom((CLMicroLocationProto::Measurement *)(a3 - 88), (const CLMicroLocationProto::Measurement *)(v6 - 88));
      *(_DWORD *)(a3 - 8) = *(_DWORD *)(v6 - 8);
      a3 -= 88;
      v6 -= 88;
    }
    while (v6 != a1);
  }
  return a2;
}

CLMicroLocationProto::Measurement *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<CLMiLoProtobufWrapper::Measurement const*>,std::__wrap_iter<CLMiLoProtobufWrapper::Measurement const*>,CLMiLoProtobufWrapper::Measurement*,0>(CLMicroLocationProto::Measurement *a1, CLMicroLocationProto::Measurement *a2, CLMicroLocationProto::Measurement *this)
{
  uint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = a2;
  do
  {
    CLMicroLocationProto::Measurement::CopyFrom(this, v4);
    *((_DWORD *)this + 20) = *((_DWORD *)v4 + 20);
    this = (CLMicroLocationProto::Measurement *)((char *)this + 88);
    uint64_t v4 = (CLMicroLocationProto::Measurement *)((char *)v4 + 88);
  }
  while (v4 != v5);
  return v5;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMiLoProtobufWrapper::Measurement>,std::reverse_iterator<CLMiLoProtobufWrapper::Measurement*>,std::reverse_iterator<CLMiLoProtobufWrapper::Measurement*>,std::reverse_iterator<CLMiLoProtobufWrapper::Measurement*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      CLMicroLocationProto::Measurement::Measurement((CLMicroLocationProto::Measurement *)(a7 + v11 - 88), (const CLMicroLocationProto::Measurement *)(a3 + v11 - 88));
      *(_DWORD *)(a7 + v11 - 8) = *(_DWORD *)(a3 + v11 - 8);
      v11 -= 88;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_2563BA9AC(_Unwind_Exception *exception_object)
{
  for (; v2; v2 += 88)
    CLMicroLocationProto::Measurement::~Measurement((CLMicroLocationProto::Measurement *)(v1 + v2));
  _Unwind_Resume(exception_object);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMiLoProtobufWrapper::Measurement>,CLMiLoProtobufWrapper::Measurement*,CLMiLoProtobufWrapper::Measurement*,CLMiLoProtobufWrapper::Measurement*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      *(_DWORD *)(CLMicroLocationProto::Measurement::Measurement((CLMicroLocationProto::Measurement *)(a4 + v7), (const CLMicroLocationProto::Measurement *)(a2 + v7))+ 80) = *(_DWORD *)(a2 + v7 + 80);
      v7 += 88;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_2563BAA40(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 88;
    do
    {
      CLMicroLocationProto::Measurement::~Measurement((CLMicroLocationProto::Measurement *)(v4 + v2));
      v2 -= 88;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<CLMiLoProtobufWrapper::Measurement>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 88;
    CLMicroLocationProto::Measurement::~Measurement((CLMicroLocationProto::Measurement *)(i - 88));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::vector<CLMiLoProtobufWrapper::Measurement>::__init_with_size[abi:ne180100]<CLMiLoProtobufWrapper::Measurement*,CLMiLoProtobufWrapper::Measurement*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<CLMiLoServiceTable::Entry>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMiLoProtobufWrapper::Measurement>,CLMiLoProtobufWrapper::Measurement*,CLMiLoProtobufWrapper::Measurement*,CLMiLoProtobufWrapper::Measurement*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2563BAB1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<CLMiLoProtobufWrapper::Measurement>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMiLoProtobufWrapper::Measurement>,CLMiLoProtobufWrapper::Measurement*,CLMiLoProtobufWrapper::Measurement*,CLMiLoProtobufWrapper::Measurement*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      *(_DWORD *)(CLMicroLocationProto::Measurement::Measurement((CLMicroLocationProto::Measurement *)(a4 + v7), (const CLMicroLocationProto::Measurement *)(a2 + v7))+ 80) = *(_DWORD *)(a2 + v7 + 80);
      v7 += 88;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_2563BABB0(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 88;
    do
    {
      CLMicroLocationProto::Measurement::~Measurement((CLMicroLocationProto::Measurement *)(v4 + v2));
      v2 -= 88;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CLMiLoServiceManager::LocalizationResultsPerModel::LocalizationResultsPerModel(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  long long v8 = *(_OWORD *)(a2 + 24);
  long long v9 = *(_OWORD *)(a2 + 33);
  *(unsigned char *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 33) = v9;
  *(_OWORD *)(a1 + 24) = v8;
  *(unsigned char *)(a1 + 80) = 0;
  if (*(unsigned char *)(a2 + 80))
  {
    long long v10 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v10;
    *(void *)(a2 + 64) = 0;
    *(void *)(a2 + 72) = 0;
    *(void *)(a2 + 56) = 0;
    *(unsigned char *)(a1 + 80) = 1;
  }
  *(unsigned char *)(a1 + CLMicroLocationSensorsLogic::stopOdometryMonitoringIfRunning(this + 88) = 0;
  uint64_t v11 = a1 + 88;
  *(unsigned char *)(a1 + 128) = 0;
  if (*(unsigned char *)(a2 + 128))
  {
    std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__hash_table(v11, (uint64_t *)(a2 + 88));
    *(unsigned char *)(a1 + 128) = 1;
  }
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  long long v12 = *a3;
  *(unsigned char *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 168) = v12;
  *(unsigned char *)(a1 + 208) = 0;
  if (*(unsigned char *)(a4 + 24))
  {
    *(void *)(a1 + 184) = 0;
    *(void *)(a1 + 192) = 0;
    *(void *)(a1 + 200) = 0;
    *(_OWORD *)(a1 + 184) = *(_OWORD *)a4;
    *(void *)(a1 + 200) = *(void *)(a4 + 16);
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(unsigned char *)(a1 + 208) = 1;
  }
  return a1;
}

uint64_t std::vector<CLMiLoServiceManager::LocalizationResultsPerModel>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMiLoServiceManager::LocalizationResultsPerModel>,std::reverse_iterator<CLMiLoServiceManager::LocalizationResultsPerModel*>,std::reverse_iterator<CLMiLoServiceManager::LocalizationResultsPerModel*>,std::reverse_iterator<CLMiLoServiceManager::LocalizationResultsPerModel*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CLMiLoServiceManager::LocalizationResultsPerModel>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x12F684BDA12F685) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(216 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMiLoServiceManager::LocalizationResultsPerModel>,std::reverse_iterator<CLMiLoServiceManager::LocalizationResultsPerModel*>,std::reverse_iterator<CLMiLoServiceManager::LocalizationResultsPerModel*>,std::reverse_iterator<CLMiLoServiceManager::LocalizationResultsPerModel*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  _DWORD v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 216;
      std::allocator<CLMiLoServiceManager::LocalizationResultsPerModel>::construct[abi:ne180100]<CLMiLoServiceManager::LocalizationResultsPerModel,CLMiLoServiceManager::LocalizationResultsPerModel>(a1, v7 - 216, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 216;
      *((void *)&v16 + 1) -= 216;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMiLoServiceManager::LocalizationResultsPerModel>,std::reverse_iterator<CLMiLoServiceManager::LocalizationResultsPerModel*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

__n128 std::allocator<CLMiLoServiceManager::LocalizationResultsPerModel>::construct[abi:ne180100]<CLMiLoServiceManager::LocalizationResultsPerModel,CLMiLoServiceManager::LocalizationResultsPerModel>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)(a2 + 16) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  long long v5 = *(_OWORD *)(a3 + 24);
  long long v6 = *(_OWORD *)(a3 + 33);
  *(unsigned char *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 33) = v6;
  *(_OWORD *)(a2 + 24) = v5;
  *(unsigned char *)(a2 + 80) = 0;
  if (*(unsigned char *)(a3 + 80))
  {
    long long v7 = *(_OWORD *)(a3 + 56);
    *(void *)(a2 + 72) = *(void *)(a3 + 72);
    *(_OWORD *)(a2 + 56) = v7;
    *(void *)(a3 + 64) = 0;
    *(void *)(a3 + 72) = 0;
    *(void *)(a3 + 56) = 0;
    *(unsigned char *)(a2 + 80) = 1;
  }
  *(unsigned char *)(a2 + CLMicroLocationSensorsLogic::stopOdometryMonitoringIfRunning(this + 88) = 0;
  *(unsigned char *)(a2 + 128) = 0;
  if (*(unsigned char *)(a3 + 128))
  {
    std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__hash_table(a2 + 88, (uint64_t *)(a3 + 88));
    *(unsigned char *)(a2 + 128) = 1;
  }
  *(_DWORD *)(a2 + 136) = *(_DWORD *)(a3 + 136);
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + 144) = 0;
  *(_OWORD *)(a2 + 144) = *(_OWORD *)(a3 + 144);
  *(void *)(a2 + 160) = *(void *)(a3 + 160);
  *(void *)(a3 + 152) = 0;
  *(void *)(a3 + 160) = 0;
  *(void *)(a3 + 144) = 0;
  __n128 result = *(__n128 *)(a3 + 168);
  *(unsigned char *)(a2 + 184) = 0;
  *(__n128 *)(a2 + 168) = result;
  *(unsigned char *)(a2 + 208) = 0;
  if (*(unsigned char *)(a3 + 208))
  {
    *(void *)(a2 + 184) = 0;
    *(void *)(a2 + 192) = 0;
    *(void *)(a2 + 200) = 0;
    __n128 result = *(__n128 *)(a3 + 184);
    *(__n128 *)(a2 + 184) = result;
    *(void *)(a2 + 200) = *(void *)(a3 + 200);
    *(void *)(a3 + 184) = 0;
    *(void *)(a3 + 192) = 0;
    *(void *)(a3 + 200) = 0;
    *(unsigned char *)(a2 + 208) = 1;
  }
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMiLoServiceManager::LocalizationResultsPerModel>,std::reverse_iterator<CLMiLoServiceManager::LocalizationResultsPerModel*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<CLMiLoServiceManager::LocalizationResultsPerModel>,std::reverse_iterator<CLMiLoServiceManager::LocalizationResultsPerModel*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<CLMiLoServiceManager::LocalizationResultsPerModel>,std::reverse_iterator<CLMiLoServiceManager::LocalizationResultsPerModel*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<CLMiLoServiceManager::LocalizationResultsPerModel>::destroy[abi:ne180100](v3, v1);
      v1 += 216;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<CLMiLoServiceManager::LocalizationResultsPerModel>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<CLMiLoServiceManager::LocalizationResultsPerModel>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 216;
    std::allocator<CLMiLoServiceManager::LocalizationResultsPerModel>::destroy[abi:ne180100](v4, i - 216);
  }
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<CLMiLoService::ModelAndConf>>,std::shared_ptr<CLMiLoService::ModelAndConf> const*,std::shared_ptr<CLMiLoService::ModelAndConf> const*,std::shared_ptr<CLMiLoService::ModelAndConf>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  long long v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      void *v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    long long v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<CLMiLoService::ModelAndConf>>,std::shared_ptr<CLMiLoService::ModelAndConf>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<CLMiLoService::ModelAndConf>>,std::shared_ptr<CLMiLoService::ModelAndConf>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<CLMiLoService::ModelAndConf>>,std::shared_ptr<CLMiLoService::ModelAndConf>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<CLMiLoService::ModelAndConf>>,std::shared_ptr<CLMiLoService::ModelAndConf>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 - 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 -= 16;
  }
}

uint64_t std::__construct_at[abi:ne180100]<CLMicroLocationLocalizationController::LocalizationInput,CLMicroLocationLocalizationController::LocalizationInput,CLMicroLocationLocalizationController::LocalizationInput*>(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 240) = 0;
  if (*((unsigned char *)a2 + 240))
  {
    std::__construct_at[abi:ne180100]<CLMicroLocationFingerprint,CLMicroLocationFingerprint,CLMicroLocationFingerprint*>(a1 + 48, (uint64_t)(a2 + 3));
    *(unsigned char *)(a1 + 240) = 1;
  }
  CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)(a1 + 248), (const CLMicroLocationProto::RecordingEvent *)((char *)a2 + 248));
  *(void *)(a1 + 392) = *((void *)a2 + 49);
  return a1;
}

void sub_2563BB248(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<CLMicroLocationFingerprint,false>::~__optional_destruct_base[abi:ne180100](v2);
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 32) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,CLMicroLocationLocalizationController::LocalizationRequest *,CLMicroLocationLocalizationController::LocalizationRequest *,CLMicroLocationLocalizationController::LocalizationRequest *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      CLMicroLocationLocalizationController::LocalizationRequest::operator=(a3, v4);
      v4 += 200;
      a3 += 200;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t CLMicroLocationLocalizationController::LocalizationRequest::operator=(uint64_t a1, uint64_t a2)
{
  CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)a1, (const CLMicroLocationProto::RecordingEvent *)a2);
  long long v4 = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v4;
  uint64_t v5 = *(CLMicroLocationTimeUtils::TimeProfile **)(a2 + 168);
  *(void *)(a2 + 168) = 0;
  std::unique_ptr<CLMicroLocationTimeUtils::TimeProfile>::reset[abi:ne180100]((CLMicroLocationTimeUtils::TimeProfile **)(a1 + 168), v5);
  std::vector<CLMicroLocationResultInternal>::__move_assign(a1 + 176, (__n128 *)(a2 + 176));
  return a1;
}

uint64_t CLMicroLocationRecordingLabelsTable::Entry::Entry(uint64_t result, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5, uint64_t a6, double a7)
{
  *(void *)__n128 result = a2;
  *(void *)(result + 8) = a3;
  long long v7 = *a4;
  *(void *)(result + 32) = *((void *)a4 + 2);
  *(_OWORD *)(result + 16) = v7;
  *((void *)a4 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0;
  *((void *)a4 + 2) = 0;
  *(void *)a4 = 0;
  *(void *)(result + 40) = a5;
  *(void *)(result + 48) = a6;
  *(double *)(result + 56) = a7;
  return result;
}

uint64_t CLMicroLocationRecordingLabelsTable::Entry::Entry(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5, double a6)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  long long v7 = *a4;
  *(void *)(a1 + 32) = *((void *)a4 + 2);
  *(_OWORD *)(a1 + 16) = v7;
  *((void *)a4 + CLMicroLocationLogic::startOdometryMonitoring(this - 1) = 0;
  *((void *)a4 + 2) = 0;
  *(void *)a4 = 0;
  *(double *)(a1 + 56) = a6;
  CLMicroLocationProtobufHelper::uuidFromStdString(a5, (uint64_t)&v11);
  int32x2_t v8 = vdup_n_s32(v12 == 0);
  v9.i64[0] = v8.u32[0];
  v9.i64[1] = v8.u32[1];
  *(int8x16_t *)(a1 + 40) = vandq_s8(v11, (int8x16_t)vcgezq_s64(vshlq_n_s64(v9, 0x3FuLL)));
  return a1;
}

void sub_2563BB404(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_2563BB4E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ULDBUtils::insertEntries<CLMicroLocationMeasurementTable,ULMeasurementMO>(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2020000000;
  char v15 = 0;
  long long v4 = [v3 managedObjectContext];
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 3221225472;
  v8[2] = ___ZN9ULDBUtils13insertEntriesI31CLMicroLocationMeasurementTable15ULMeasurementMOEEbP7ULStoreRKNSt3__16vectorINT_5EntryENS5_9allocatorIS8_EEEE_block_invoke;
  void v8[3] = &unk_2653F90B8;
  uint64_t v11 = a2;
  id v5 = v3;
  id v9 = v5;
  long long v10 = &v12;
  [v4 performBlockAndWait:v8];

  uint64_t v6 = *((unsigned __int8 *)v13 + 24);
  _Block_object_dispose(&v12, 8);

  return v6;
}

void sub_2563BB628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ULDBUtils::fetchEntries<CLMicroLocationMeasurementTable,ULMeasurementMO>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  uint64_t v23 = 0;
  uint64_t v24 = &v23;
  uint64_t v25 = 0x4812000000;
  uint64_t v26 = __Block_byref_object_copy__9;
  double v27 = __Block_byref_object_dispose__9;
  double v28 = &unk_25654E519;
  memset(v29, 0, sizeof(v29));
  uint64_t v12 = [v9 managedObjectContext];
  v17[0] = MEMORY[0x263EF8330];
  v17[1] = 3221225472;
  _DWORD v17[2] = ___ZN9ULDBUtils12fetchEntriesI31CLMicroLocationMeasurementTable15ULMeasurementMOEENSt3__16vectorINT_5EntryENS3_9allocatorIS6_EEEEP7ULStoreP7NSArrayIP11NSPredicateEPSC_IP16NSSortDescriptorEm_block_invoke;
  void v17[3] = &unk_2653F90E0;
  id v13 = v10;
  id v18 = v13;
  id v14 = v11;
  id v19 = v14;
  uint64_t v22 = a4;
  id v15 = v9;
  id v20 = v15;
  __int16 v21 = &v23;
  [v12 performBlockAndWait:v17];

  long long v16 = v24;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  std::vector<CLMicroLocationMeasurementTable::Entry>::__init_with_size[abi:ne180100]<CLMicroLocationMeasurementTable::Entry*,CLMicroLocationMeasurementTable::Entry*>(a5, v16[6], v16[7], 0xEEEEEEEEEEEEEEEFLL * ((v16[7] - v16[6]) >> 3));

  _Block_object_dispose(&v23, 8);
  uint64_t v30 = (void **)v29;
  std::vector<CLMicroLocationMeasurementTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v30);
}

void sub_2563BB818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, void *a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);

  _Block_object_dispose(va, 8);
  *(void *)(v14 - 96) = v13;
  std::vector<CLMicroLocationMeasurementTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 96));

  _Unwind_Resume(a1);
}

void ULDBUtils::fetchAllWithLimit<CLMicroLocationMeasurementTable,ULMeasurementMO>(void *a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  v10[1] = *MEMORY[0x263EF8340];
  id v5 = a1;
  uint64_t v6 = (void *)MEMORY[0x263F08B30];
  long long v7 = [(id)objc_opt_class() defaultSortProperty];
  int32x2_t v8 = [v6 sortDescriptorWithKey:v7 ascending:0];

  v10[0] = v8;
  id v9 = [MEMORY[0x263EFF8C0] arrayWithObjects:v10 count:1];
  ULDBUtils::fetchEntries<CLMicroLocationMeasurementTable,ULMeasurementMO>(v5, 0, v9, a2, a3);
}

void sub_2563BB97C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2563BBCBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2563BBEDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2563BC04C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2563BC15C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2563BC318(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2563BC4B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2563BC6B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2563BC8B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2563BCB50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_2563BCCF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_88c27_ZTSNSt3__18functionIFbvEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100](a1 + 88, a2 + 88);
}

void *__destroy_helper_block_ea8_88c27_ZTSNSt3__18functionIFbvEEE(uint64_t a1)
{
  return std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((void *)(a1 + 88));
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_40()
{
  os_log_t v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  uint64_t v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;
}

void ___ZN9ULDBUtils13insertEntriesI31CLMicroLocationMeasurementTable15ULMeasurementMOEEbP7ULStoreRKNSt3__16vectorINT_5EntryENS5_9allocatorIS8_EEEE_block_invoke(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(a1 + 48);
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  if (*v2 == v4)
  {
LABEL_4:
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [*(id *)(a1 + 32) commitChangesToStore];
    long long v7 = *(void **)(a1 + 32);
    [v7 deleteOldestRecordsIfFull];
  }
  else
  {
    while (1)
    {
      id v5 = [*(id *)(a1 + 32) managedObjectContext];
      uint64_t v6 = +[ULMeasurementMO createFromEntry:v3 inManagedObjectContext:v5];

      if (!v6) {
        break;
      }

      v3 += 120;
      if (v3 == v4) {
        goto LABEL_4;
      }
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_48);
    }
    int32x2_t v8 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      id v9 = +[ULMeasurementMO entity];
      id v10 = [v9 name];
      int v15 = 68289283;
      int v16 = 0;
      __int16 v17 = 2082;
      id v18 = "";
      __int16 v19 = 2113;
      id v20 = v10;
      _os_log_impl(&dword_25631F000, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to create entry from MO\", \"MO\":%{private, location:escape_only}@}", (uint8_t *)&v15, 0x1Cu);
    }
    if (onceToken_MicroLocation_Default != -1) {
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_48);
    }
    id v11 = (id)logObject_MicroLocation_Default;
    if (os_signpost_enabled(v11))
    {
      uint64_t v12 = +[ULMeasurementMO entity];
      uint64_t v13 = [v12 name];
      int v15 = 68289283;
      int v16 = 0;
      __int16 v17 = 2082;
      id v18 = "";
      __int16 v19 = 2113;
      id v20 = v13;
      _os_signpost_emit_with_name_impl(&dword_25631F000, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to create entry from MO", "{\"msg%{public}.0s\":\"Failed to create entry from MO\", \"MO\":%{private, location:escape_only}@}", (uint8_t *)&v15, 0x1Cu);
    }
    uint64_t v14 = [*(id *)(a1 + 32) managedObjectContext];
    [v14 reset];
  }
}

void sub_2563BD03C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__9(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__9(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  std::vector<CLMicroLocationMeasurementTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void ___ZN9ULDBUtils12fetchEntriesI31CLMicroLocationMeasurementTable15ULMeasurementMOEENSt3__16vectorINT_5EntryENS3_9allocatorIS6_EEEEP7ULStoreP7NSArrayIP11NSPredicateEPSC_IP16NSSortDescriptorEm_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  uint64_t v3 = (objc_class *)objc_opt_class();
  uint64_t v4 = NSStringFromClass(v3);
  id v5 = [v2 fetchManagedObjectsWithEntityName:v4 byAndPredicates:*(void *)(a1 + 32) sortDescriptors:*(void *)(a1 + 40) andLimit:*(void *)(a1 + 64)];

  ULDBUtils::convertManagedObjectsToEntries<CLMicroLocationMeasurementTable,ULMeasurementMO>(v5, (uint64_t *)&v8);
  uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8);
  std::vector<CLMicroLocationMeasurementTable::Entry>::__vdeallocate((void **)(v6 + 48));
  *(_OWORD *)(v6 + 48) = v8;
  *(void *)(v6 + 64) = v9;
  uint64_t v9 = 0;
  long long v8 = 0uLL;
  id v10 = (void **)&v8;
  std::vector<CLMicroLocationMeasurementTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v10);
  long long v7 = [*(id *)(a1 + 48) managedObjectContext];
  [v7 reset];
}

void sub_2563BD1AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ULDBUtils::convertManagedObjectsToEntries<CLMicroLocationMeasurementTable,ULMeasurementMO>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  id v3 = a1;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  std::vector<CLMicroLocationMeasurementTable::Entry>::reserve(a2, [v3 count]);
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  obuint64_t j = v3;
  uint64_t v4 = [obj countByEnumeratingWithState:&v23 objects:v36 count:16];
  if (!v4)
  {

    goto LABEL_32;
  }
  char v5 = 0;
  uint64_t v6 = *(void *)v24;
  do
  {
    uint64_t v7 = 0;
    do
    {
      if (*(void *)v24 != v6) {
        objc_enumerationMutation(obj);
      }
      id v8 = *(id *)(*((void *)&v23 + 1) + 8 * v7);
      uint64_t v9 = v8;
      if (v8)
      {
        [v8 convertToEntry];
        if (BYTE8(v35))
        {
          unint64_t v10 = a2[1];
          if (v10 >= a2[2])
          {
            uint64_t v11 = std::vector<CLMicroLocationMeasurementTable::Entry>::__push_back_slow_path<CLMicroLocationMeasurementTable::Entry>(a2, (uint64_t)v33);
          }
          else
          {
            CLMicroLocationMeasurementTable::Entry::Entry(a2[1], v33);
            uint64_t v11 = v10 + 120;
            a2[1] = v10 + 120;
          }
          char v18 = 0;
          a2[1] = v11;
          goto LABEL_22;
        }
      }
      else
      {
        long long v35 = 0u;
        memset(v34, 0, sizeof(v34));
        memset(v33, 0, sizeof(v33));
      }
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_48);
      }
      uint64_t v12 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        uint64_t v13 = [v9 entity];
        uint64_t v14 = [v13 name];
        *(_DWORD *)long long buf = 68289283;
        int v28 = 0;
        __int16 v29 = 2082;
        uint64_t v30 = "";
        __int16 v31 = 2113;
        uint64_t v32 = v14;
        _os_log_impl(&dword_25631F000, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to convert MO to entry\", \"MO\":%{private, location:escape_only}@}", buf, 0x1Cu);
      }
      if (onceToken_MicroLocation_Default != -1) {
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_48);
      }
      int v15 = (id)logObject_MicroLocation_Default;
      if (os_signpost_enabled(v15))
      {
        int v16 = [v9 entity];
        __int16 v17 = [v16 name];
        *(_DWORD *)long long buf = 68289283;
        int v28 = 0;
        __int16 v29 = 2082;
        uint64_t v30 = "";
        __int16 v31 = 2113;
        uint64_t v32 = v17;
        _os_signpost_emit_with_name_impl(&dword_25631F000, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to convert MO to entry", "{\"msg%{public}.0s\":\"Failed to convert MO to entry\", \"MO\":%{private, location:escape_only}@}", buf, 0x1Cu);
      }
      char v18 = 1;
      char v5 = 1;
LABEL_22:
      if (BYTE8(v35)) {
        CLMicroLocationProto::Measurement::~Measurement((CLMicroLocationProto::Measurement *)v34);
      }

      if (v18) {
        goto LABEL_27;
      }
      ++v7;
    }
    while (v4 != v7);
    uint64_t v4 = [obj countByEnumeratingWithState:&v23 objects:v36 count:16];
  }
  while (v4);
LABEL_27:

  if (v5)
  {
    uint64_t v20 = *a2;
    uint64_t v19 = a2[1];
    if (v19 != *a2)
    {
      do
      {
        uint64_t v21 = v19 - 120;
        CLMicroLocationProto::Measurement::~Measurement((CLMicroLocationProto::Measurement *)(v19 - 88));
        uint64_t v19 = v21;
      }
      while (v21 != v20);
    }
    a2[1] = v20;
  }
LABEL_32:
}

void sub_2563BD568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, CLMicroLocationProto::Measurement *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  std::vector<CLMicroLocationMeasurementTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMicroLocationMeasurementTable::Entry>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xEEEEEEEEEEEEEEEFLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x222222222222223) {
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationMeasurementTable::Entry>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    void v7[3] = v7[0] + 120 * v6;
    std::vector<CLMicroLocationMeasurementTable::Entry>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<CLMicroLocationMeasurementTable::Entry>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_2563BD6B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMicroLocationMeasurementTable::Entry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMicroLocationMeasurementTable::Entry>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationMeasurementTable::Entry>,std::reverse_iterator<CLMicroLocationMeasurementTable::Entry*>,std::reverse_iterator<CLMicroLocationMeasurementTable::Entry*>,std::reverse_iterator<CLMicroLocationMeasurementTable::Entry*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationMeasurementTable::Entry>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x222222222222223) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(120 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationMeasurementTable::Entry>,std::reverse_iterator<CLMicroLocationMeasurementTable::Entry*>,std::reverse_iterator<CLMicroLocationMeasurementTable::Entry*>,std::reverse_iterator<CLMicroLocationMeasurementTable::Entry*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = a7 + v11;
      long long v13 = *(_OWORD *)(a3 + v11 - 120);
      *(_OWORD *)(v12 - 104) = *(_OWORD *)(a3 + v11 - 104);
      *(_OWORD *)(v12 - 120) = v13;
      CLMicroLocationProto::Measurement::Measurement((CLMicroLocationProto::Measurement *)(a7 + v11 - 88), (const CLMicroLocationProto::Measurement *)(a3 + v11 - 88));
      *(_DWORD *)(v12 - 8) = *(_DWORD *)(a3 + v11 - 8);
      v11 -= 120;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_2563BD81C(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 + 32;
    do
    {
      CLMicroLocationProto::Measurement::~Measurement((CLMicroLocationProto::Measurement *)(v4 + v2));
      v2 += 120;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<CLMicroLocationMeasurementTable::Entry>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 120;
    CLMicroLocationProto::Measurement::~Measurement((CLMicroLocationProto::Measurement *)(i - 88));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<CLMicroLocationMeasurementTable::Entry>::__push_back_slow_path<CLMicroLocationMeasurementTable::Entry>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x222222222222222) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xEEEEEEEEEEEEEEEFLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x111111111111111) {
    unint64_t v9 = 0x222222222222222;
  }
  else {
    unint64_t v9 = v5;
  }
  __int16 v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationMeasurementTable::Entry>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  long long v13 = v10;
  uint64_t v14 = &v10[120 * v4];
  int v16 = &v10[120 * v9];
  CLMicroLocationMeasurementTable::Entry::Entry(v14, a2);
  int v15 = v14 + 120;
  std::vector<CLMicroLocationMeasurementTable::Entry>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<CLMicroLocationMeasurementTable::Entry>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_2563BD988(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CLMicroLocationMeasurementTable::Entry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<CLMicroLocationMeasurementTable::Entry>::__vdeallocate(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    unint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        unint64_t v5 = v3 - 120;
        CLMicroLocationProto::Measurement::~Measurement((CLMicroLocationProto::Measurement *)(v3 - 88));
        uint64_t v3 = v5;
      }
      while (v5 != v1);
      unint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void *std::vector<CLMicroLocationMeasurementTable::Entry>::__init_with_size[abi:ne180100]<CLMicroLocationMeasurementTable::Entry*,CLMicroLocationMeasurementTable::Entry*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<CLMicroLocationMeasurementTable::Entry>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationMeasurementTable::Entry>,CLMicroLocationMeasurementTable::Entry*,CLMicroLocationMeasurementTable::Entry*,CLMicroLocationMeasurementTable::Entry*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2563BDA70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<CLMicroLocationMeasurementTable::Entry>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<CLMicroLocationMeasurementTable::Entry>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x222222222222223) {
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationMeasurementTable::Entry>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[120 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationMeasurementTable::Entry>,CLMicroLocationMeasurementTable::Entry*,CLMicroLocationMeasurementTable::Entry*,CLMicroLocationMeasurementTable::Entry*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a4 + v7;
      uint64_t v9 = a2 + v7;
      long long v10 = *(_OWORD *)(a2 + v7 + 16);
      *(_OWORD *)uint64_t v8 = *(_OWORD *)(a2 + v7);
      *(_OWORD *)(v8 + 16) = v10;
      CLMicroLocationProto::Measurement::Measurement((CLMicroLocationProto::Measurement *)(a4 + v7 + 32), (const CLMicroLocationProto::Measurement *)(a2 + v7 + 32));
      *(_DWORD *)(v8 + 112) = *(_DWORD *)(a2 + v7 + 112);
      v7 += 120;
    }
    while (v9 + 120 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_2563BDB64(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 88;
    do
    {
      CLMicroLocationProto::Measurement::~Measurement((CLMicroLocationProto::Measurement *)(v4 + v2));
      v2 -= 120;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void CLMicroLocationLoiManager::CLMicroLocationLoiManager(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_2704DC7E0;
  CLMicroLocationStateMachine::StateMachineBase::StateMachineBase((CLMicroLocationStateMachine::StateMachineBase *)(a1 + 8));
  *(void *)a1 = &unk_2704DC708;
  *(void *)(a1 + 8) = &unk_2704DC778;
  *(void *)(a1 + 64) = &unk_2704DC850;
  *(void *)(a1 + 72) = &unk_2704DC8A8;
  *(void *)(a1 + 80) = &unk_2704DC900;
  *(void *)(a1 + CLMicroLocationSensorsLogic::stopOdometryMonitoringIfRunning(this + 88) = &unk_2704DC958;
  *(void *)(a1 + 96) = &unk_2704DC9B0;
  *(void *)(a1 + 104) = &unk_2704DCA08;
  *(void *)(a1 + 112) = &unk_2704DCA60;
  *(void *)(a1 + 120) = &unk_2704DCAB8;
  *(void *)(a1 + 128) = &unk_2704DCB10;
  *(void *)(a1 + 136) = &unk_2704DCB50;
  *(void *)(a1 + 144) = &unk_2704DCB90;
  *(void *)(a1 + 152) = &unk_2704DCBD0;
  *(void *)(a1 + 160) = &unk_2704DCC28;
  *(void *)(a1 + 168) = &unk_2704DCC68;
  *(void *)(a1 + 176) = &unk_2704DCCA8;
  *(void *)(a1 + 184) = &unk_2704DCCE8;
  *(void *)(a1 + 192) = &unk_2704DCD28;
  *(void *)(a1 + 200) = &unk_2704DCD68;
  *(void *)(a1 + 208) = &unk_2704DCDA8;
  *(void *)(a1 + 216) = &unk_2704DCE00;
  *(void *)(a1 + 224) = &unk_2704DCE58;
  *(void *)(a1 + 232) = &unk_2704DCEB0;
  *(void *)(a1 + 240) = &unk_2704DCF08;
  *(void *)(a1 + 248) = &unk_2704DCF60;
  *(void *)(a1 + 256) = &unk_2704DCFB8;
  *(void *)(a1 + 264) = &unk_2704DCFF8;
  *(void *)(a1 + 272) = &unk_2704DD038;
  *(void *)(a1 + 280) = &unk_2704DD078;
  *(void *)(a1 + 2CLMicroLocationSensorsLogic::stopOdometryMonitoringIfRunning(this + 88) = &unk_2704DD0D0;
  *(void *)(a1 + 296) = &unk_2704DD128;
  *(void *)(a1 + 304) = &unk_2704DD180;
  *(void *)(a1 + 312) = &unk_2704DD1D8;
  *(void *)(a1 + 320) = &unk_2704DD230;
  *(void *)(a1 + 328) = a3;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = a2;
  *(unsigned char *)(a1 + 4CLMicroLocationSensorsLogic::stopOdometryMonitoringIfRunning(this + 88) = 0;
  *(unsigned char *)(a1 + 496) = 0;
  *(unsigned char *)(a1 + 500) = 0;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(unsigned char *)(a1 + 480) = 0;
  *(_DWORD *)(a1 + 504) = 0;
  *(void *)(a1 + 528) = 0;
  *(_OWORD *)(a1 + 512) = 0u;
  CLMicroLocationLoiManager::setupWhenNotInAnActiveLocationState((CLMicroLocationLoiManager *)a1);
}

void sub_2563BE170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CLMacAddress *a10, CLMacAddress *a11, CLMacAddress *a12, CLMacAddress *a13, CLMacAddress *a14, CLMacAddress *a15, CLMacAddress *a16, CLMacAddress *a17, CLMacAddress *a18, CLMacAddress *a19, CLMacAddress *a20,CLMacAddress *a21,CLMacAddress *a22,CLMacAddress *a23,CLMacAddress *a24,CLMacAddress *a25,CLMacAddress *a26,CLMacAddress *a27,CLMacAddress *a28,CLMacAddress *a29,CLMacAddress *a30)
{
  if (*(char *)(v38 - 89) < 0) {
    operator delete(*(void **)(v38 - 112));
  }

  int v40 = *(void **)(v33 + 456);
  if (v40)
  {
    *(void *)(v33 + 464) = v40;
    operator delete(v40);
  }
  if (*(char *)(v33 + 407) < 0) {
    operator delete(*(void **)(v33 + 384));
  }

  CLMacAddress::newFromUint64(v37, v41);
  CLMacAddress::newFromUint64(v36, v42);
  CLMacAddress::newFromUint64(v35, v43);
  CLMacAddress::newFromUint64(v34, v44);
  CLMacAddress::newFromUint64(v32, v45);
  CLMacAddress::newFromUint64(v31, v46);
  CLMacAddress::newFromUint64(a10, v47);
  CLMacAddress::newFromUint64(a11, v48);
  CLMacAddress::newFromUint64(a12, v49);
  CLMacAddress::newFromUint64(a13, v50);
  CLMacAddress::newFromUint64(a14, v51);
  CLMacAddress::newFromUint64(a15, v52);
  CLMacAddress::newFromUint64(a16, v53);
  CLMacAddress::newFromUint64(a17, v54);
  CLMacAddress::newFromUint64(a18, v55);
  CLMacAddress::newFromUint64(a19, v56);
  CLMacAddress::newFromUint64(a20, v57);
  CLMacAddress::newFromUint64(a21, v58);
  CLMacAddress::newFromUint64(a22, v59);
  CLMacAddress::newFromUint64(a23, v60);
  CLMacAddress::newFromUint64(a24, v61);
  CLMacAddress::newFromUint64(a25, v62);
  CLMacAddress::newFromUint64(a26, v63);
  CLMacAddress::newFromUint64(a27, v64);
  CLMacAddress::newFromUint64(a28, v65);
  CLMacAddress::newFromUint64(a29, v66);
  CLMacAddress::newFromUint64(a30, v67);
  CLMacAddress::newFromUint64(*(CLMacAddress **)(v38 - 160), v68);
  CLMacAddress::newFromUint64(*(CLMacAddress **)(v38 - 152), v69);
  CLMacAddress::newFromUint64(*(CLMacAddress **)(v38 - 144), v70);
  CLMacAddress::newFromUint64(*(CLMacAddress **)(v38 - 136), v71);
  CLMacAddress::newFromUint64(*(CLMacAddress **)(v38 - 128), v72);
  CLMacAddress::newFromUint64(*(CLMacAddress **)(v38 - 120), v73);
  CLMicroLocationStateMachine::StateMachineBase::~StateMachineBase(v30);
  _Unwind_Resume(a1);
}